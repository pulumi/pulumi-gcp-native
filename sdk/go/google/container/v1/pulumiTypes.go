// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfig struct {
	// The number of the accelerator cards exposed to an instance.
	AcceleratorCount *string `pulumi:"acceleratorCount"`
	// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
	AcceleratorType *string `pulumi:"acceleratorType"`
	// The configuration for auto installation of GPU driver.
	GpuDriverInstallationConfig *GPUDriverInstallationConfig `pulumi:"gpuDriverInstallationConfig"`
	// Size of partitions to create on the GPU. Valid values are described in the NVIDIA [mig user guide](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
	GpuPartitionSize *string `pulumi:"gpuPartitionSize"`
	// The configuration for GPU sharing options.
	GpuSharingConfig *GPUSharingConfig `pulumi:"gpuSharingConfig"`
}

// AcceleratorConfigInput is an input type that accepts AcceleratorConfigArgs and AcceleratorConfigOutput values.
// You can construct a concrete instance of `AcceleratorConfigInput` via:
//
//	AcceleratorConfigArgs{...}
type AcceleratorConfigInput interface {
	pulumi.Input

	ToAcceleratorConfigOutput() AcceleratorConfigOutput
	ToAcceleratorConfigOutputWithContext(context.Context) AcceleratorConfigOutput
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigArgs struct {
	// The number of the accelerator cards exposed to an instance.
	AcceleratorCount pulumi.StringPtrInput `pulumi:"acceleratorCount"`
	// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
	AcceleratorType pulumi.StringPtrInput `pulumi:"acceleratorType"`
	// The configuration for auto installation of GPU driver.
	GpuDriverInstallationConfig GPUDriverInstallationConfigPtrInput `pulumi:"gpuDriverInstallationConfig"`
	// Size of partitions to create on the GPU. Valid values are described in the NVIDIA [mig user guide](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
	GpuPartitionSize pulumi.StringPtrInput `pulumi:"gpuPartitionSize"`
	// The configuration for GPU sharing options.
	GpuSharingConfig GPUSharingConfigPtrInput `pulumi:"gpuSharingConfig"`
}

func (AcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return i.ToAcceleratorConfigOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput)
}

// AcceleratorConfigArrayInput is an input type that accepts AcceleratorConfigArray and AcceleratorConfigArrayOutput values.
// You can construct a concrete instance of `AcceleratorConfigArrayInput` via:
//
//	AcceleratorConfigArray{ AcceleratorConfigArgs{...} }
type AcceleratorConfigArrayInput interface {
	pulumi.Input

	ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput
	ToAcceleratorConfigArrayOutputWithContext(context.Context) AcceleratorConfigArrayOutput
}

type AcceleratorConfigArray []AcceleratorConfigInput

func (AcceleratorConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArray) ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput {
	return i.ToAcceleratorConfigArrayOutputWithContext(context.Background())
}

func (i AcceleratorConfigArray) ToAcceleratorConfigArrayOutputWithContext(ctx context.Context) AcceleratorConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigArrayOutput)
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return o
}

// The number of the accelerator cards exposed to an instance.
func (o AcceleratorConfigOutput) AcceleratorCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.AcceleratorCount }).(pulumi.StringPtrOutput)
}

// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
func (o AcceleratorConfigOutput) AcceleratorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.AcceleratorType }).(pulumi.StringPtrOutput)
}

// The configuration for auto installation of GPU driver.
func (o AcceleratorConfigOutput) GpuDriverInstallationConfig() GPUDriverInstallationConfigPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *GPUDriverInstallationConfig { return v.GpuDriverInstallationConfig }).(GPUDriverInstallationConfigPtrOutput)
}

// Size of partitions to create on the GPU. Valid values are described in the NVIDIA [mig user guide](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
func (o AcceleratorConfigOutput) GpuPartitionSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.GpuPartitionSize }).(pulumi.StringPtrOutput)
}

// The configuration for GPU sharing options.
func (o AcceleratorConfigOutput) GpuSharingConfig() GPUSharingConfigPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *GPUSharingConfig { return v.GpuSharingConfig }).(GPUSharingConfigPtrOutput)
}

type AcceleratorConfigArrayOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigArrayOutput) ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput {
	return o
}

func (o AcceleratorConfigArrayOutput) ToAcceleratorConfigArrayOutputWithContext(ctx context.Context) AcceleratorConfigArrayOutput {
	return o
}

func (o AcceleratorConfigArrayOutput) Index(i pulumi.IntInput) AcceleratorConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcceleratorConfig {
		return vs[0].([]AcceleratorConfig)[vs[1].(int)]
	}).(AcceleratorConfigOutput)
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigResponse struct {
	// The number of the accelerator cards exposed to an instance.
	AcceleratorCount string `pulumi:"acceleratorCount"`
	// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
	AcceleratorType string `pulumi:"acceleratorType"`
	// The configuration for auto installation of GPU driver.
	GpuDriverInstallationConfig GPUDriverInstallationConfigResponse `pulumi:"gpuDriverInstallationConfig"`
	// Size of partitions to create on the GPU. Valid values are described in the NVIDIA [mig user guide](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
	GpuPartitionSize string `pulumi:"gpuPartitionSize"`
	// The configuration for GPU sharing options.
	GpuSharingConfig GPUSharingConfigResponse `pulumi:"gpuSharingConfig"`
}

// AcceleratorConfig represents a Hardware Accelerator request.
type AcceleratorConfigResponseOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput {
	return o
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutputWithContext(ctx context.Context) AcceleratorConfigResponseOutput {
	return o
}

// The number of the accelerator cards exposed to an instance.
func (o AcceleratorConfigResponseOutput) AcceleratorCount() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.AcceleratorCount }).(pulumi.StringOutput)
}

// The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
func (o AcceleratorConfigResponseOutput) AcceleratorType() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.AcceleratorType }).(pulumi.StringOutput)
}

// The configuration for auto installation of GPU driver.
func (o AcceleratorConfigResponseOutput) GpuDriverInstallationConfig() GPUDriverInstallationConfigResponseOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) GPUDriverInstallationConfigResponse {
		return v.GpuDriverInstallationConfig
	}).(GPUDriverInstallationConfigResponseOutput)
}

// Size of partitions to create on the GPU. Valid values are described in the NVIDIA [mig user guide](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
func (o AcceleratorConfigResponseOutput) GpuPartitionSize() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.GpuPartitionSize }).(pulumi.StringOutput)
}

// The configuration for GPU sharing options.
func (o AcceleratorConfigResponseOutput) GpuSharingConfig() GPUSharingConfigResponseOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) GPUSharingConfigResponse { return v.GpuSharingConfig }).(GPUSharingConfigResponseOutput)
}

type AcceleratorConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseArrayOutput) ToAcceleratorConfigResponseArrayOutput() AcceleratorConfigResponseArrayOutput {
	return o
}

func (o AcceleratorConfigResponseArrayOutput) ToAcceleratorConfigResponseArrayOutputWithContext(ctx context.Context) AcceleratorConfigResponseArrayOutput {
	return o
}

func (o AcceleratorConfigResponseArrayOutput) Index(i pulumi.IntInput) AcceleratorConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcceleratorConfigResponse {
		return vs[0].([]AcceleratorConfigResponse)[vs[1].(int)]
	}).(AcceleratorConfigResponseOutput)
}

// AdditionalNodeNetworkConfig is the configuration for additional node networks within the NodeNetworkConfig message
type AdditionalNodeNetworkConfig struct {
	// Name of the VPC where the additional interface belongs
	Network *string `pulumi:"network"`
	// Name of the subnetwork where the additional interface belongs
	Subnetwork *string `pulumi:"subnetwork"`
}

// AdditionalNodeNetworkConfigInput is an input type that accepts AdditionalNodeNetworkConfigArgs and AdditionalNodeNetworkConfigOutput values.
// You can construct a concrete instance of `AdditionalNodeNetworkConfigInput` via:
//
//	AdditionalNodeNetworkConfigArgs{...}
type AdditionalNodeNetworkConfigInput interface {
	pulumi.Input

	ToAdditionalNodeNetworkConfigOutput() AdditionalNodeNetworkConfigOutput
	ToAdditionalNodeNetworkConfigOutputWithContext(context.Context) AdditionalNodeNetworkConfigOutput
}

// AdditionalNodeNetworkConfig is the configuration for additional node networks within the NodeNetworkConfig message
type AdditionalNodeNetworkConfigArgs struct {
	// Name of the VPC where the additional interface belongs
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Name of the subnetwork where the additional interface belongs
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (AdditionalNodeNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalNodeNetworkConfig)(nil)).Elem()
}

func (i AdditionalNodeNetworkConfigArgs) ToAdditionalNodeNetworkConfigOutput() AdditionalNodeNetworkConfigOutput {
	return i.ToAdditionalNodeNetworkConfigOutputWithContext(context.Background())
}

func (i AdditionalNodeNetworkConfigArgs) ToAdditionalNodeNetworkConfigOutputWithContext(ctx context.Context) AdditionalNodeNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalNodeNetworkConfigOutput)
}

// AdditionalNodeNetworkConfigArrayInput is an input type that accepts AdditionalNodeNetworkConfigArray and AdditionalNodeNetworkConfigArrayOutput values.
// You can construct a concrete instance of `AdditionalNodeNetworkConfigArrayInput` via:
//
//	AdditionalNodeNetworkConfigArray{ AdditionalNodeNetworkConfigArgs{...} }
type AdditionalNodeNetworkConfigArrayInput interface {
	pulumi.Input

	ToAdditionalNodeNetworkConfigArrayOutput() AdditionalNodeNetworkConfigArrayOutput
	ToAdditionalNodeNetworkConfigArrayOutputWithContext(context.Context) AdditionalNodeNetworkConfigArrayOutput
}

type AdditionalNodeNetworkConfigArray []AdditionalNodeNetworkConfigInput

func (AdditionalNodeNetworkConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalNodeNetworkConfig)(nil)).Elem()
}

func (i AdditionalNodeNetworkConfigArray) ToAdditionalNodeNetworkConfigArrayOutput() AdditionalNodeNetworkConfigArrayOutput {
	return i.ToAdditionalNodeNetworkConfigArrayOutputWithContext(context.Background())
}

func (i AdditionalNodeNetworkConfigArray) ToAdditionalNodeNetworkConfigArrayOutputWithContext(ctx context.Context) AdditionalNodeNetworkConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalNodeNetworkConfigArrayOutput)
}

// AdditionalNodeNetworkConfig is the configuration for additional node networks within the NodeNetworkConfig message
type AdditionalNodeNetworkConfigOutput struct{ *pulumi.OutputState }

func (AdditionalNodeNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalNodeNetworkConfig)(nil)).Elem()
}

func (o AdditionalNodeNetworkConfigOutput) ToAdditionalNodeNetworkConfigOutput() AdditionalNodeNetworkConfigOutput {
	return o
}

func (o AdditionalNodeNetworkConfigOutput) ToAdditionalNodeNetworkConfigOutputWithContext(ctx context.Context) AdditionalNodeNetworkConfigOutput {
	return o
}

// Name of the VPC where the additional interface belongs
func (o AdditionalNodeNetworkConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalNodeNetworkConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Name of the subnetwork where the additional interface belongs
func (o AdditionalNodeNetworkConfigOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalNodeNetworkConfig) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type AdditionalNodeNetworkConfigArrayOutput struct{ *pulumi.OutputState }

func (AdditionalNodeNetworkConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalNodeNetworkConfig)(nil)).Elem()
}

func (o AdditionalNodeNetworkConfigArrayOutput) ToAdditionalNodeNetworkConfigArrayOutput() AdditionalNodeNetworkConfigArrayOutput {
	return o
}

func (o AdditionalNodeNetworkConfigArrayOutput) ToAdditionalNodeNetworkConfigArrayOutputWithContext(ctx context.Context) AdditionalNodeNetworkConfigArrayOutput {
	return o
}

func (o AdditionalNodeNetworkConfigArrayOutput) Index(i pulumi.IntInput) AdditionalNodeNetworkConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalNodeNetworkConfig {
		return vs[0].([]AdditionalNodeNetworkConfig)[vs[1].(int)]
	}).(AdditionalNodeNetworkConfigOutput)
}

// AdditionalNodeNetworkConfig is the configuration for additional node networks within the NodeNetworkConfig message
type AdditionalNodeNetworkConfigResponse struct {
	// Name of the VPC where the additional interface belongs
	Network string `pulumi:"network"`
	// Name of the subnetwork where the additional interface belongs
	Subnetwork string `pulumi:"subnetwork"`
}

// AdditionalNodeNetworkConfig is the configuration for additional node networks within the NodeNetworkConfig message
type AdditionalNodeNetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (AdditionalNodeNetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalNodeNetworkConfigResponse)(nil)).Elem()
}

func (o AdditionalNodeNetworkConfigResponseOutput) ToAdditionalNodeNetworkConfigResponseOutput() AdditionalNodeNetworkConfigResponseOutput {
	return o
}

func (o AdditionalNodeNetworkConfigResponseOutput) ToAdditionalNodeNetworkConfigResponseOutputWithContext(ctx context.Context) AdditionalNodeNetworkConfigResponseOutput {
	return o
}

// Name of the VPC where the additional interface belongs
func (o AdditionalNodeNetworkConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v AdditionalNodeNetworkConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Name of the subnetwork where the additional interface belongs
func (o AdditionalNodeNetworkConfigResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v AdditionalNodeNetworkConfigResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

type AdditionalNodeNetworkConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AdditionalNodeNetworkConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalNodeNetworkConfigResponse)(nil)).Elem()
}

func (o AdditionalNodeNetworkConfigResponseArrayOutput) ToAdditionalNodeNetworkConfigResponseArrayOutput() AdditionalNodeNetworkConfigResponseArrayOutput {
	return o
}

func (o AdditionalNodeNetworkConfigResponseArrayOutput) ToAdditionalNodeNetworkConfigResponseArrayOutputWithContext(ctx context.Context) AdditionalNodeNetworkConfigResponseArrayOutput {
	return o
}

func (o AdditionalNodeNetworkConfigResponseArrayOutput) Index(i pulumi.IntInput) AdditionalNodeNetworkConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalNodeNetworkConfigResponse {
		return vs[0].([]AdditionalNodeNetworkConfigResponse)[vs[1].(int)]
	}).(AdditionalNodeNetworkConfigResponseOutput)
}

// AdditionalPodNetworkConfig is the configuration for additional pod networks within the NodeNetworkConfig message
type AdditionalPodNetworkConfig struct {
	// The maximum number of pods per node which use this pod network
	MaxPodsPerNode *MaxPodsConstraint `pulumi:"maxPodsPerNode"`
	// The name of the secondary range on the subnet which provides IP address for this pod range
	SecondaryPodRange *string `pulumi:"secondaryPodRange"`
	// Name of the subnetwork where the additional pod network belongs
	Subnetwork *string `pulumi:"subnetwork"`
}

// AdditionalPodNetworkConfigInput is an input type that accepts AdditionalPodNetworkConfigArgs and AdditionalPodNetworkConfigOutput values.
// You can construct a concrete instance of `AdditionalPodNetworkConfigInput` via:
//
//	AdditionalPodNetworkConfigArgs{...}
type AdditionalPodNetworkConfigInput interface {
	pulumi.Input

	ToAdditionalPodNetworkConfigOutput() AdditionalPodNetworkConfigOutput
	ToAdditionalPodNetworkConfigOutputWithContext(context.Context) AdditionalPodNetworkConfigOutput
}

// AdditionalPodNetworkConfig is the configuration for additional pod networks within the NodeNetworkConfig message
type AdditionalPodNetworkConfigArgs struct {
	// The maximum number of pods per node which use this pod network
	MaxPodsPerNode MaxPodsConstraintPtrInput `pulumi:"maxPodsPerNode"`
	// The name of the secondary range on the subnet which provides IP address for this pod range
	SecondaryPodRange pulumi.StringPtrInput `pulumi:"secondaryPodRange"`
	// Name of the subnetwork where the additional pod network belongs
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (AdditionalPodNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalPodNetworkConfig)(nil)).Elem()
}

func (i AdditionalPodNetworkConfigArgs) ToAdditionalPodNetworkConfigOutput() AdditionalPodNetworkConfigOutput {
	return i.ToAdditionalPodNetworkConfigOutputWithContext(context.Background())
}

func (i AdditionalPodNetworkConfigArgs) ToAdditionalPodNetworkConfigOutputWithContext(ctx context.Context) AdditionalPodNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalPodNetworkConfigOutput)
}

// AdditionalPodNetworkConfigArrayInput is an input type that accepts AdditionalPodNetworkConfigArray and AdditionalPodNetworkConfigArrayOutput values.
// You can construct a concrete instance of `AdditionalPodNetworkConfigArrayInput` via:
//
//	AdditionalPodNetworkConfigArray{ AdditionalPodNetworkConfigArgs{...} }
type AdditionalPodNetworkConfigArrayInput interface {
	pulumi.Input

	ToAdditionalPodNetworkConfigArrayOutput() AdditionalPodNetworkConfigArrayOutput
	ToAdditionalPodNetworkConfigArrayOutputWithContext(context.Context) AdditionalPodNetworkConfigArrayOutput
}

type AdditionalPodNetworkConfigArray []AdditionalPodNetworkConfigInput

func (AdditionalPodNetworkConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalPodNetworkConfig)(nil)).Elem()
}

func (i AdditionalPodNetworkConfigArray) ToAdditionalPodNetworkConfigArrayOutput() AdditionalPodNetworkConfigArrayOutput {
	return i.ToAdditionalPodNetworkConfigArrayOutputWithContext(context.Background())
}

func (i AdditionalPodNetworkConfigArray) ToAdditionalPodNetworkConfigArrayOutputWithContext(ctx context.Context) AdditionalPodNetworkConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalPodNetworkConfigArrayOutput)
}

// AdditionalPodNetworkConfig is the configuration for additional pod networks within the NodeNetworkConfig message
type AdditionalPodNetworkConfigOutput struct{ *pulumi.OutputState }

func (AdditionalPodNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalPodNetworkConfig)(nil)).Elem()
}

func (o AdditionalPodNetworkConfigOutput) ToAdditionalPodNetworkConfigOutput() AdditionalPodNetworkConfigOutput {
	return o
}

func (o AdditionalPodNetworkConfigOutput) ToAdditionalPodNetworkConfigOutputWithContext(ctx context.Context) AdditionalPodNetworkConfigOutput {
	return o
}

// The maximum number of pods per node which use this pod network
func (o AdditionalPodNetworkConfigOutput) MaxPodsPerNode() MaxPodsConstraintPtrOutput {
	return o.ApplyT(func(v AdditionalPodNetworkConfig) *MaxPodsConstraint { return v.MaxPodsPerNode }).(MaxPodsConstraintPtrOutput)
}

// The name of the secondary range on the subnet which provides IP address for this pod range
func (o AdditionalPodNetworkConfigOutput) SecondaryPodRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalPodNetworkConfig) *string { return v.SecondaryPodRange }).(pulumi.StringPtrOutput)
}

// Name of the subnetwork where the additional pod network belongs
func (o AdditionalPodNetworkConfigOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalPodNetworkConfig) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type AdditionalPodNetworkConfigArrayOutput struct{ *pulumi.OutputState }

func (AdditionalPodNetworkConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalPodNetworkConfig)(nil)).Elem()
}

func (o AdditionalPodNetworkConfigArrayOutput) ToAdditionalPodNetworkConfigArrayOutput() AdditionalPodNetworkConfigArrayOutput {
	return o
}

func (o AdditionalPodNetworkConfigArrayOutput) ToAdditionalPodNetworkConfigArrayOutputWithContext(ctx context.Context) AdditionalPodNetworkConfigArrayOutput {
	return o
}

func (o AdditionalPodNetworkConfigArrayOutput) Index(i pulumi.IntInput) AdditionalPodNetworkConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalPodNetworkConfig {
		return vs[0].([]AdditionalPodNetworkConfig)[vs[1].(int)]
	}).(AdditionalPodNetworkConfigOutput)
}

// AdditionalPodNetworkConfig is the configuration for additional pod networks within the NodeNetworkConfig message
type AdditionalPodNetworkConfigResponse struct {
	// The maximum number of pods per node which use this pod network
	MaxPodsPerNode MaxPodsConstraintResponse `pulumi:"maxPodsPerNode"`
	// The name of the secondary range on the subnet which provides IP address for this pod range
	SecondaryPodRange string `pulumi:"secondaryPodRange"`
	// Name of the subnetwork where the additional pod network belongs
	Subnetwork string `pulumi:"subnetwork"`
}

// AdditionalPodNetworkConfig is the configuration for additional pod networks within the NodeNetworkConfig message
type AdditionalPodNetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (AdditionalPodNetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalPodNetworkConfigResponse)(nil)).Elem()
}

func (o AdditionalPodNetworkConfigResponseOutput) ToAdditionalPodNetworkConfigResponseOutput() AdditionalPodNetworkConfigResponseOutput {
	return o
}

func (o AdditionalPodNetworkConfigResponseOutput) ToAdditionalPodNetworkConfigResponseOutputWithContext(ctx context.Context) AdditionalPodNetworkConfigResponseOutput {
	return o
}

// The maximum number of pods per node which use this pod network
func (o AdditionalPodNetworkConfigResponseOutput) MaxPodsPerNode() MaxPodsConstraintResponseOutput {
	return o.ApplyT(func(v AdditionalPodNetworkConfigResponse) MaxPodsConstraintResponse { return v.MaxPodsPerNode }).(MaxPodsConstraintResponseOutput)
}

// The name of the secondary range on the subnet which provides IP address for this pod range
func (o AdditionalPodNetworkConfigResponseOutput) SecondaryPodRange() pulumi.StringOutput {
	return o.ApplyT(func(v AdditionalPodNetworkConfigResponse) string { return v.SecondaryPodRange }).(pulumi.StringOutput)
}

// Name of the subnetwork where the additional pod network belongs
func (o AdditionalPodNetworkConfigResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v AdditionalPodNetworkConfigResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

type AdditionalPodNetworkConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AdditionalPodNetworkConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalPodNetworkConfigResponse)(nil)).Elem()
}

func (o AdditionalPodNetworkConfigResponseArrayOutput) ToAdditionalPodNetworkConfigResponseArrayOutput() AdditionalPodNetworkConfigResponseArrayOutput {
	return o
}

func (o AdditionalPodNetworkConfigResponseArrayOutput) ToAdditionalPodNetworkConfigResponseArrayOutputWithContext(ctx context.Context) AdditionalPodNetworkConfigResponseArrayOutput {
	return o
}

func (o AdditionalPodNetworkConfigResponseArrayOutput) Index(i pulumi.IntInput) AdditionalPodNetworkConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalPodNetworkConfigResponse {
		return vs[0].([]AdditionalPodNetworkConfigResponse)[vs[1].(int)]
	}).(AdditionalPodNetworkConfigResponseOutput)
}

// AdditionalPodRangesConfig is the configuration for additional pod secondary ranges supporting the ClusterUpdate message.
type AdditionalPodRangesConfig struct {
	// Name for pod secondary ipv4 range which has the actual range defined ahead.
	PodRangeNames []string `pulumi:"podRangeNames"`
}

// AdditionalPodRangesConfig is the configuration for additional pod secondary ranges supporting the ClusterUpdate message.
type AdditionalPodRangesConfigResponse struct {
	// [Output only] Information for additional pod range.
	PodRangeInfo []RangeInfoResponse `pulumi:"podRangeInfo"`
	// Name for pod secondary ipv4 range which has the actual range defined ahead.
	PodRangeNames []string `pulumi:"podRangeNames"`
}

// AdditionalPodRangesConfig is the configuration for additional pod secondary ranges supporting the ClusterUpdate message.
type AdditionalPodRangesConfigResponseOutput struct{ *pulumi.OutputState }

func (AdditionalPodRangesConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalPodRangesConfigResponse)(nil)).Elem()
}

func (o AdditionalPodRangesConfigResponseOutput) ToAdditionalPodRangesConfigResponseOutput() AdditionalPodRangesConfigResponseOutput {
	return o
}

func (o AdditionalPodRangesConfigResponseOutput) ToAdditionalPodRangesConfigResponseOutputWithContext(ctx context.Context) AdditionalPodRangesConfigResponseOutput {
	return o
}

// [Output only] Information for additional pod range.
func (o AdditionalPodRangesConfigResponseOutput) PodRangeInfo() RangeInfoResponseArrayOutput {
	return o.ApplyT(func(v AdditionalPodRangesConfigResponse) []RangeInfoResponse { return v.PodRangeInfo }).(RangeInfoResponseArrayOutput)
}

// Name for pod secondary ipv4 range which has the actual range defined ahead.
func (o AdditionalPodRangesConfigResponseOutput) PodRangeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AdditionalPodRangesConfigResponse) []string { return v.PodRangeNames }).(pulumi.StringArrayOutput)
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfig struct {
	// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
	CloudRunConfig *CloudRunConfig `pulumi:"cloudRunConfig"`
	// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
	ConfigConnectorConfig *ConfigConnectorConfig `pulumi:"configConnectorConfig"`
	// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
	DnsCacheConfig *DnsCacheConfig `pulumi:"dnsCacheConfig"`
	// Configuration for the Compute Engine Persistent Disk CSI driver.
	GcePersistentDiskCsiDriverConfig *GcePersistentDiskCsiDriverConfig `pulumi:"gcePersistentDiskCsiDriverConfig"`
	// Configuration for the GCP Filestore CSI driver.
	GcpFilestoreCsiDriverConfig *GcpFilestoreCsiDriverConfig `pulumi:"gcpFilestoreCsiDriverConfig"`
	// Configuration for the Cloud Storage Fuse CSI driver.
	GcsFuseCsiDriverConfig *GcsFuseCsiDriverConfig `pulumi:"gcsFuseCsiDriverConfig"`
	// Configuration for the Backup for GKE agent addon.
	GkeBackupAgentConfig *GkeBackupAgentConfig `pulumi:"gkeBackupAgentConfig"`
	// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
	HorizontalPodAutoscaling *HorizontalPodAutoscaling `pulumi:"horizontalPodAutoscaling"`
	// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
	HttpLoadBalancing *HttpLoadBalancing `pulumi:"httpLoadBalancing"`
	// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
	KubernetesDashboard *KubernetesDashboard `pulumi:"kubernetesDashboard"`
	// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
	NetworkPolicyConfig *NetworkPolicyConfig `pulumi:"networkPolicyConfig"`
}

// AddonsConfigInput is an input type that accepts AddonsConfigArgs and AddonsConfigOutput values.
// You can construct a concrete instance of `AddonsConfigInput` via:
//
//	AddonsConfigArgs{...}
type AddonsConfigInput interface {
	pulumi.Input

	ToAddonsConfigOutput() AddonsConfigOutput
	ToAddonsConfigOutputWithContext(context.Context) AddonsConfigOutput
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigArgs struct {
	// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
	CloudRunConfig CloudRunConfigPtrInput `pulumi:"cloudRunConfig"`
	// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
	ConfigConnectorConfig ConfigConnectorConfigPtrInput `pulumi:"configConnectorConfig"`
	// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
	DnsCacheConfig DnsCacheConfigPtrInput `pulumi:"dnsCacheConfig"`
	// Configuration for the Compute Engine Persistent Disk CSI driver.
	GcePersistentDiskCsiDriverConfig GcePersistentDiskCsiDriverConfigPtrInput `pulumi:"gcePersistentDiskCsiDriverConfig"`
	// Configuration for the GCP Filestore CSI driver.
	GcpFilestoreCsiDriverConfig GcpFilestoreCsiDriverConfigPtrInput `pulumi:"gcpFilestoreCsiDriverConfig"`
	// Configuration for the Cloud Storage Fuse CSI driver.
	GcsFuseCsiDriverConfig GcsFuseCsiDriverConfigPtrInput `pulumi:"gcsFuseCsiDriverConfig"`
	// Configuration for the Backup for GKE agent addon.
	GkeBackupAgentConfig GkeBackupAgentConfigPtrInput `pulumi:"gkeBackupAgentConfig"`
	// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
	HorizontalPodAutoscaling HorizontalPodAutoscalingPtrInput `pulumi:"horizontalPodAutoscaling"`
	// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
	HttpLoadBalancing HttpLoadBalancingPtrInput `pulumi:"httpLoadBalancing"`
	// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
	KubernetesDashboard KubernetesDashboardPtrInput `pulumi:"kubernetesDashboard"`
	// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
	NetworkPolicyConfig NetworkPolicyConfigPtrInput `pulumi:"networkPolicyConfig"`
}

func (AddonsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfig)(nil)).Elem()
}

func (i AddonsConfigArgs) ToAddonsConfigOutput() AddonsConfigOutput {
	return i.ToAddonsConfigOutputWithContext(context.Background())
}

func (i AddonsConfigArgs) ToAddonsConfigOutputWithContext(ctx context.Context) AddonsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigOutput)
}

func (i AddonsConfigArgs) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return i.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (i AddonsConfigArgs) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigOutput).ToAddonsConfigPtrOutputWithContext(ctx)
}

// AddonsConfigPtrInput is an input type that accepts AddonsConfigArgs, AddonsConfigPtr and AddonsConfigPtrOutput values.
// You can construct a concrete instance of `AddonsConfigPtrInput` via:
//
//	        AddonsConfigArgs{...}
//
//	or:
//
//	        nil
type AddonsConfigPtrInput interface {
	pulumi.Input

	ToAddonsConfigPtrOutput() AddonsConfigPtrOutput
	ToAddonsConfigPtrOutputWithContext(context.Context) AddonsConfigPtrOutput
}

type addonsConfigPtrType AddonsConfigArgs

func AddonsConfigPtr(v *AddonsConfigArgs) AddonsConfigPtrInput {
	return (*addonsConfigPtrType)(v)
}

func (*addonsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonsConfig)(nil)).Elem()
}

func (i *addonsConfigPtrType) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return i.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (i *addonsConfigPtrType) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonsConfigPtrOutput)
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigOutput struct{ *pulumi.OutputState }

func (AddonsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfig)(nil)).Elem()
}

func (o AddonsConfigOutput) ToAddonsConfigOutput() AddonsConfigOutput {
	return o
}

func (o AddonsConfigOutput) ToAddonsConfigOutputWithContext(ctx context.Context) AddonsConfigOutput {
	return o
}

func (o AddonsConfigOutput) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return o.ToAddonsConfigPtrOutputWithContext(context.Background())
}

func (o AddonsConfigOutput) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AddonsConfig) *AddonsConfig {
		return &v
	}).(AddonsConfigPtrOutput)
}

// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
func (o AddonsConfigOutput) CloudRunConfig() CloudRunConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *CloudRunConfig { return v.CloudRunConfig }).(CloudRunConfigPtrOutput)
}

// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
func (o AddonsConfigOutput) ConfigConnectorConfig() ConfigConnectorConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *ConfigConnectorConfig { return v.ConfigConnectorConfig }).(ConfigConnectorConfigPtrOutput)
}

// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
func (o AddonsConfigOutput) DnsCacheConfig() DnsCacheConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *DnsCacheConfig { return v.DnsCacheConfig }).(DnsCacheConfigPtrOutput)
}

// Configuration for the Compute Engine Persistent Disk CSI driver.
func (o AddonsConfigOutput) GcePersistentDiskCsiDriverConfig() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *GcePersistentDiskCsiDriverConfig { return v.GcePersistentDiskCsiDriverConfig }).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Configuration for the GCP Filestore CSI driver.
func (o AddonsConfigOutput) GcpFilestoreCsiDriverConfig() GcpFilestoreCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *GcpFilestoreCsiDriverConfig { return v.GcpFilestoreCsiDriverConfig }).(GcpFilestoreCsiDriverConfigPtrOutput)
}

// Configuration for the Cloud Storage Fuse CSI driver.
func (o AddonsConfigOutput) GcsFuseCsiDriverConfig() GcsFuseCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *GcsFuseCsiDriverConfig { return v.GcsFuseCsiDriverConfig }).(GcsFuseCsiDriverConfigPtrOutput)
}

// Configuration for the Backup for GKE agent addon.
func (o AddonsConfigOutput) GkeBackupAgentConfig() GkeBackupAgentConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *GkeBackupAgentConfig { return v.GkeBackupAgentConfig }).(GkeBackupAgentConfigPtrOutput)
}

// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
func (o AddonsConfigOutput) HorizontalPodAutoscaling() HorizontalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *HorizontalPodAutoscaling { return v.HorizontalPodAutoscaling }).(HorizontalPodAutoscalingPtrOutput)
}

// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
func (o AddonsConfigOutput) HttpLoadBalancing() HttpLoadBalancingPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *HttpLoadBalancing { return v.HttpLoadBalancing }).(HttpLoadBalancingPtrOutput)
}

// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
func (o AddonsConfigOutput) KubernetesDashboard() KubernetesDashboardPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *KubernetesDashboard { return v.KubernetesDashboard }).(KubernetesDashboardPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
func (o AddonsConfigOutput) NetworkPolicyConfig() NetworkPolicyConfigPtrOutput {
	return o.ApplyT(func(v AddonsConfig) *NetworkPolicyConfig { return v.NetworkPolicyConfig }).(NetworkPolicyConfigPtrOutput)
}

type AddonsConfigPtrOutput struct{ *pulumi.OutputState }

func (AddonsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonsConfig)(nil)).Elem()
}

func (o AddonsConfigPtrOutput) ToAddonsConfigPtrOutput() AddonsConfigPtrOutput {
	return o
}

func (o AddonsConfigPtrOutput) ToAddonsConfigPtrOutputWithContext(ctx context.Context) AddonsConfigPtrOutput {
	return o
}

func (o AddonsConfigPtrOutput) Elem() AddonsConfigOutput {
	return o.ApplyT(func(v *AddonsConfig) AddonsConfig {
		if v != nil {
			return *v
		}
		var ret AddonsConfig
		return ret
	}).(AddonsConfigOutput)
}

// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
func (o AddonsConfigPtrOutput) CloudRunConfig() CloudRunConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *CloudRunConfig {
		if v == nil {
			return nil
		}
		return v.CloudRunConfig
	}).(CloudRunConfigPtrOutput)
}

// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
func (o AddonsConfigPtrOutput) ConfigConnectorConfig() ConfigConnectorConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *ConfigConnectorConfig {
		if v == nil {
			return nil
		}
		return v.ConfigConnectorConfig
	}).(ConfigConnectorConfigPtrOutput)
}

// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
func (o AddonsConfigPtrOutput) DnsCacheConfig() DnsCacheConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *DnsCacheConfig {
		if v == nil {
			return nil
		}
		return v.DnsCacheConfig
	}).(DnsCacheConfigPtrOutput)
}

// Configuration for the Compute Engine Persistent Disk CSI driver.
func (o AddonsConfigPtrOutput) GcePersistentDiskCsiDriverConfig() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *GcePersistentDiskCsiDriverConfig {
		if v == nil {
			return nil
		}
		return v.GcePersistentDiskCsiDriverConfig
	}).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Configuration for the GCP Filestore CSI driver.
func (o AddonsConfigPtrOutput) GcpFilestoreCsiDriverConfig() GcpFilestoreCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *GcpFilestoreCsiDriverConfig {
		if v == nil {
			return nil
		}
		return v.GcpFilestoreCsiDriverConfig
	}).(GcpFilestoreCsiDriverConfigPtrOutput)
}

// Configuration for the Cloud Storage Fuse CSI driver.
func (o AddonsConfigPtrOutput) GcsFuseCsiDriverConfig() GcsFuseCsiDriverConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *GcsFuseCsiDriverConfig {
		if v == nil {
			return nil
		}
		return v.GcsFuseCsiDriverConfig
	}).(GcsFuseCsiDriverConfigPtrOutput)
}

// Configuration for the Backup for GKE agent addon.
func (o AddonsConfigPtrOutput) GkeBackupAgentConfig() GkeBackupAgentConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *GkeBackupAgentConfig {
		if v == nil {
			return nil
		}
		return v.GkeBackupAgentConfig
	}).(GkeBackupAgentConfigPtrOutput)
}

// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
func (o AddonsConfigPtrOutput) HorizontalPodAutoscaling() HorizontalPodAutoscalingPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *HorizontalPodAutoscaling {
		if v == nil {
			return nil
		}
		return v.HorizontalPodAutoscaling
	}).(HorizontalPodAutoscalingPtrOutput)
}

// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
func (o AddonsConfigPtrOutput) HttpLoadBalancing() HttpLoadBalancingPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *HttpLoadBalancing {
		if v == nil {
			return nil
		}
		return v.HttpLoadBalancing
	}).(HttpLoadBalancingPtrOutput)
}

// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
func (o AddonsConfigPtrOutput) KubernetesDashboard() KubernetesDashboardPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *KubernetesDashboard {
		if v == nil {
			return nil
		}
		return v.KubernetesDashboard
	}).(KubernetesDashboardPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
func (o AddonsConfigPtrOutput) NetworkPolicyConfig() NetworkPolicyConfigPtrOutput {
	return o.ApplyT(func(v *AddonsConfig) *NetworkPolicyConfig {
		if v == nil {
			return nil
		}
		return v.NetworkPolicyConfig
	}).(NetworkPolicyConfigPtrOutput)
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigResponse struct {
	// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
	CloudRunConfig CloudRunConfigResponse `pulumi:"cloudRunConfig"`
	// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
	ConfigConnectorConfig ConfigConnectorConfigResponse `pulumi:"configConnectorConfig"`
	// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
	DnsCacheConfig DnsCacheConfigResponse `pulumi:"dnsCacheConfig"`
	// Configuration for the Compute Engine Persistent Disk CSI driver.
	GcePersistentDiskCsiDriverConfig GcePersistentDiskCsiDriverConfigResponse `pulumi:"gcePersistentDiskCsiDriverConfig"`
	// Configuration for the GCP Filestore CSI driver.
	GcpFilestoreCsiDriverConfig GcpFilestoreCsiDriverConfigResponse `pulumi:"gcpFilestoreCsiDriverConfig"`
	// Configuration for the Cloud Storage Fuse CSI driver.
	GcsFuseCsiDriverConfig GcsFuseCsiDriverConfigResponse `pulumi:"gcsFuseCsiDriverConfig"`
	// Configuration for the Backup for GKE agent addon.
	GkeBackupAgentConfig GkeBackupAgentConfigResponse `pulumi:"gkeBackupAgentConfig"`
	// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
	HorizontalPodAutoscaling HorizontalPodAutoscalingResponse `pulumi:"horizontalPodAutoscaling"`
	// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
	HttpLoadBalancing HttpLoadBalancingResponse `pulumi:"httpLoadBalancing"`
	// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
	KubernetesDashboard KubernetesDashboardResponse `pulumi:"kubernetesDashboard"`
	// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
	NetworkPolicyConfig NetworkPolicyConfigResponse `pulumi:"networkPolicyConfig"`
}

// Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
type AddonsConfigResponseOutput struct{ *pulumi.OutputState }

func (AddonsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonsConfigResponse)(nil)).Elem()
}

func (o AddonsConfigResponseOutput) ToAddonsConfigResponseOutput() AddonsConfigResponseOutput {
	return o
}

func (o AddonsConfigResponseOutput) ToAddonsConfigResponseOutputWithContext(ctx context.Context) AddonsConfigResponseOutput {
	return o
}

// Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
func (o AddonsConfigResponseOutput) CloudRunConfig() CloudRunConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) CloudRunConfigResponse { return v.CloudRunConfig }).(CloudRunConfigResponseOutput)
}

// Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
func (o AddonsConfigResponseOutput) ConfigConnectorConfig() ConfigConnectorConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) ConfigConnectorConfigResponse { return v.ConfigConnectorConfig }).(ConfigConnectorConfigResponseOutput)
}

// Configuration for NodeLocalDNS, a dns cache running on cluster nodes
func (o AddonsConfigResponseOutput) DnsCacheConfig() DnsCacheConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) DnsCacheConfigResponse { return v.DnsCacheConfig }).(DnsCacheConfigResponseOutput)
}

// Configuration for the Compute Engine Persistent Disk CSI driver.
func (o AddonsConfigResponseOutput) GcePersistentDiskCsiDriverConfig() GcePersistentDiskCsiDriverConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) GcePersistentDiskCsiDriverConfigResponse {
		return v.GcePersistentDiskCsiDriverConfig
	}).(GcePersistentDiskCsiDriverConfigResponseOutput)
}

// Configuration for the GCP Filestore CSI driver.
func (o AddonsConfigResponseOutput) GcpFilestoreCsiDriverConfig() GcpFilestoreCsiDriverConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) GcpFilestoreCsiDriverConfigResponse { return v.GcpFilestoreCsiDriverConfig }).(GcpFilestoreCsiDriverConfigResponseOutput)
}

// Configuration for the Cloud Storage Fuse CSI driver.
func (o AddonsConfigResponseOutput) GcsFuseCsiDriverConfig() GcsFuseCsiDriverConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) GcsFuseCsiDriverConfigResponse { return v.GcsFuseCsiDriverConfig }).(GcsFuseCsiDriverConfigResponseOutput)
}

// Configuration for the Backup for GKE agent addon.
func (o AddonsConfigResponseOutput) GkeBackupAgentConfig() GkeBackupAgentConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) GkeBackupAgentConfigResponse { return v.GkeBackupAgentConfig }).(GkeBackupAgentConfigResponseOutput)
}

// Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
func (o AddonsConfigResponseOutput) HorizontalPodAutoscaling() HorizontalPodAutoscalingResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) HorizontalPodAutoscalingResponse { return v.HorizontalPodAutoscaling }).(HorizontalPodAutoscalingResponseOutput)
}

// Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
func (o AddonsConfigResponseOutput) HttpLoadBalancing() HttpLoadBalancingResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) HttpLoadBalancingResponse { return v.HttpLoadBalancing }).(HttpLoadBalancingResponseOutput)
}

// Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
func (o AddonsConfigResponseOutput) KubernetesDashboard() KubernetesDashboardResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) KubernetesDashboardResponse { return v.KubernetesDashboard }).(KubernetesDashboardResponseOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
func (o AddonsConfigResponseOutput) NetworkPolicyConfig() NetworkPolicyConfigResponseOutput {
	return o.ApplyT(func(v AddonsConfigResponse) NetworkPolicyConfigResponse { return v.NetworkPolicyConfig }).(NetworkPolicyConfigResponseOutput)
}

// AdvancedDatapathObservabilityConfig specifies configuration of observability features of advanced datapath.
type AdvancedDatapathObservabilityConfig struct {
	// Expose flow metrics on nodes
	EnableMetrics *bool `pulumi:"enableMetrics"`
	// Method used to make Relay available
	RelayMode *AdvancedDatapathObservabilityConfigRelayMode `pulumi:"relayMode"`
}

// AdvancedDatapathObservabilityConfigInput is an input type that accepts AdvancedDatapathObservabilityConfigArgs and AdvancedDatapathObservabilityConfigOutput values.
// You can construct a concrete instance of `AdvancedDatapathObservabilityConfigInput` via:
//
//	AdvancedDatapathObservabilityConfigArgs{...}
type AdvancedDatapathObservabilityConfigInput interface {
	pulumi.Input

	ToAdvancedDatapathObservabilityConfigOutput() AdvancedDatapathObservabilityConfigOutput
	ToAdvancedDatapathObservabilityConfigOutputWithContext(context.Context) AdvancedDatapathObservabilityConfigOutput
}

// AdvancedDatapathObservabilityConfig specifies configuration of observability features of advanced datapath.
type AdvancedDatapathObservabilityConfigArgs struct {
	// Expose flow metrics on nodes
	EnableMetrics pulumi.BoolPtrInput `pulumi:"enableMetrics"`
	// Method used to make Relay available
	RelayMode AdvancedDatapathObservabilityConfigRelayModePtrInput `pulumi:"relayMode"`
}

func (AdvancedDatapathObservabilityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedDatapathObservabilityConfig)(nil)).Elem()
}

func (i AdvancedDatapathObservabilityConfigArgs) ToAdvancedDatapathObservabilityConfigOutput() AdvancedDatapathObservabilityConfigOutput {
	return i.ToAdvancedDatapathObservabilityConfigOutputWithContext(context.Background())
}

func (i AdvancedDatapathObservabilityConfigArgs) ToAdvancedDatapathObservabilityConfigOutputWithContext(ctx context.Context) AdvancedDatapathObservabilityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedDatapathObservabilityConfigOutput)
}

func (i AdvancedDatapathObservabilityConfigArgs) ToAdvancedDatapathObservabilityConfigPtrOutput() AdvancedDatapathObservabilityConfigPtrOutput {
	return i.ToAdvancedDatapathObservabilityConfigPtrOutputWithContext(context.Background())
}

func (i AdvancedDatapathObservabilityConfigArgs) ToAdvancedDatapathObservabilityConfigPtrOutputWithContext(ctx context.Context) AdvancedDatapathObservabilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedDatapathObservabilityConfigOutput).ToAdvancedDatapathObservabilityConfigPtrOutputWithContext(ctx)
}

// AdvancedDatapathObservabilityConfigPtrInput is an input type that accepts AdvancedDatapathObservabilityConfigArgs, AdvancedDatapathObservabilityConfigPtr and AdvancedDatapathObservabilityConfigPtrOutput values.
// You can construct a concrete instance of `AdvancedDatapathObservabilityConfigPtrInput` via:
//
//	        AdvancedDatapathObservabilityConfigArgs{...}
//
//	or:
//
//	        nil
type AdvancedDatapathObservabilityConfigPtrInput interface {
	pulumi.Input

	ToAdvancedDatapathObservabilityConfigPtrOutput() AdvancedDatapathObservabilityConfigPtrOutput
	ToAdvancedDatapathObservabilityConfigPtrOutputWithContext(context.Context) AdvancedDatapathObservabilityConfigPtrOutput
}

type advancedDatapathObservabilityConfigPtrType AdvancedDatapathObservabilityConfigArgs

func AdvancedDatapathObservabilityConfigPtr(v *AdvancedDatapathObservabilityConfigArgs) AdvancedDatapathObservabilityConfigPtrInput {
	return (*advancedDatapathObservabilityConfigPtrType)(v)
}

func (*advancedDatapathObservabilityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedDatapathObservabilityConfig)(nil)).Elem()
}

func (i *advancedDatapathObservabilityConfigPtrType) ToAdvancedDatapathObservabilityConfigPtrOutput() AdvancedDatapathObservabilityConfigPtrOutput {
	return i.ToAdvancedDatapathObservabilityConfigPtrOutputWithContext(context.Background())
}

func (i *advancedDatapathObservabilityConfigPtrType) ToAdvancedDatapathObservabilityConfigPtrOutputWithContext(ctx context.Context) AdvancedDatapathObservabilityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedDatapathObservabilityConfigPtrOutput)
}

// AdvancedDatapathObservabilityConfig specifies configuration of observability features of advanced datapath.
type AdvancedDatapathObservabilityConfigOutput struct{ *pulumi.OutputState }

func (AdvancedDatapathObservabilityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedDatapathObservabilityConfig)(nil)).Elem()
}

func (o AdvancedDatapathObservabilityConfigOutput) ToAdvancedDatapathObservabilityConfigOutput() AdvancedDatapathObservabilityConfigOutput {
	return o
}

func (o AdvancedDatapathObservabilityConfigOutput) ToAdvancedDatapathObservabilityConfigOutputWithContext(ctx context.Context) AdvancedDatapathObservabilityConfigOutput {
	return o
}

func (o AdvancedDatapathObservabilityConfigOutput) ToAdvancedDatapathObservabilityConfigPtrOutput() AdvancedDatapathObservabilityConfigPtrOutput {
	return o.ToAdvancedDatapathObservabilityConfigPtrOutputWithContext(context.Background())
}

func (o AdvancedDatapathObservabilityConfigOutput) ToAdvancedDatapathObservabilityConfigPtrOutputWithContext(ctx context.Context) AdvancedDatapathObservabilityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdvancedDatapathObservabilityConfig) *AdvancedDatapathObservabilityConfig {
		return &v
	}).(AdvancedDatapathObservabilityConfigPtrOutput)
}

// Expose flow metrics on nodes
func (o AdvancedDatapathObservabilityConfigOutput) EnableMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdvancedDatapathObservabilityConfig) *bool { return v.EnableMetrics }).(pulumi.BoolPtrOutput)
}

// Method used to make Relay available
func (o AdvancedDatapathObservabilityConfigOutput) RelayMode() AdvancedDatapathObservabilityConfigRelayModePtrOutput {
	return o.ApplyT(func(v AdvancedDatapathObservabilityConfig) *AdvancedDatapathObservabilityConfigRelayMode {
		return v.RelayMode
	}).(AdvancedDatapathObservabilityConfigRelayModePtrOutput)
}

type AdvancedDatapathObservabilityConfigPtrOutput struct{ *pulumi.OutputState }

func (AdvancedDatapathObservabilityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedDatapathObservabilityConfig)(nil)).Elem()
}

func (o AdvancedDatapathObservabilityConfigPtrOutput) ToAdvancedDatapathObservabilityConfigPtrOutput() AdvancedDatapathObservabilityConfigPtrOutput {
	return o
}

func (o AdvancedDatapathObservabilityConfigPtrOutput) ToAdvancedDatapathObservabilityConfigPtrOutputWithContext(ctx context.Context) AdvancedDatapathObservabilityConfigPtrOutput {
	return o
}

func (o AdvancedDatapathObservabilityConfigPtrOutput) Elem() AdvancedDatapathObservabilityConfigOutput {
	return o.ApplyT(func(v *AdvancedDatapathObservabilityConfig) AdvancedDatapathObservabilityConfig {
		if v != nil {
			return *v
		}
		var ret AdvancedDatapathObservabilityConfig
		return ret
	}).(AdvancedDatapathObservabilityConfigOutput)
}

// Expose flow metrics on nodes
func (o AdvancedDatapathObservabilityConfigPtrOutput) EnableMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdvancedDatapathObservabilityConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMetrics
	}).(pulumi.BoolPtrOutput)
}

// Method used to make Relay available
func (o AdvancedDatapathObservabilityConfigPtrOutput) RelayMode() AdvancedDatapathObservabilityConfigRelayModePtrOutput {
	return o.ApplyT(func(v *AdvancedDatapathObservabilityConfig) *AdvancedDatapathObservabilityConfigRelayMode {
		if v == nil {
			return nil
		}
		return v.RelayMode
	}).(AdvancedDatapathObservabilityConfigRelayModePtrOutput)
}

// AdvancedDatapathObservabilityConfig specifies configuration of observability features of advanced datapath.
type AdvancedDatapathObservabilityConfigResponse struct {
	// Expose flow metrics on nodes
	EnableMetrics bool `pulumi:"enableMetrics"`
	// Method used to make Relay available
	RelayMode string `pulumi:"relayMode"`
}

// AdvancedDatapathObservabilityConfig specifies configuration of observability features of advanced datapath.
type AdvancedDatapathObservabilityConfigResponseOutput struct{ *pulumi.OutputState }

func (AdvancedDatapathObservabilityConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedDatapathObservabilityConfigResponse)(nil)).Elem()
}

func (o AdvancedDatapathObservabilityConfigResponseOutput) ToAdvancedDatapathObservabilityConfigResponseOutput() AdvancedDatapathObservabilityConfigResponseOutput {
	return o
}

func (o AdvancedDatapathObservabilityConfigResponseOutput) ToAdvancedDatapathObservabilityConfigResponseOutputWithContext(ctx context.Context) AdvancedDatapathObservabilityConfigResponseOutput {
	return o
}

// Expose flow metrics on nodes
func (o AdvancedDatapathObservabilityConfigResponseOutput) EnableMetrics() pulumi.BoolOutput {
	return o.ApplyT(func(v AdvancedDatapathObservabilityConfigResponse) bool { return v.EnableMetrics }).(pulumi.BoolOutput)
}

// Method used to make Relay available
func (o AdvancedDatapathObservabilityConfigResponseOutput) RelayMode() pulumi.StringOutput {
	return o.ApplyT(func(v AdvancedDatapathObservabilityConfigResponse) string { return v.RelayMode }).(pulumi.StringOutput)
}

// Specifies options for controlling advanced machine features.
type AdvancedMachineFeatures struct {
	// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
	ThreadsPerCore *string `pulumi:"threadsPerCore"`
}

// AdvancedMachineFeaturesInput is an input type that accepts AdvancedMachineFeaturesArgs and AdvancedMachineFeaturesOutput values.
// You can construct a concrete instance of `AdvancedMachineFeaturesInput` via:
//
//	AdvancedMachineFeaturesArgs{...}
type AdvancedMachineFeaturesInput interface {
	pulumi.Input

	ToAdvancedMachineFeaturesOutput() AdvancedMachineFeaturesOutput
	ToAdvancedMachineFeaturesOutputWithContext(context.Context) AdvancedMachineFeaturesOutput
}

// Specifies options for controlling advanced machine features.
type AdvancedMachineFeaturesArgs struct {
	// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
	ThreadsPerCore pulumi.StringPtrInput `pulumi:"threadsPerCore"`
}

func (AdvancedMachineFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedMachineFeatures)(nil)).Elem()
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesOutput() AdvancedMachineFeaturesOutput {
	return i.ToAdvancedMachineFeaturesOutputWithContext(context.Background())
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesOutputWithContext(ctx context.Context) AdvancedMachineFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesOutput)
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return i.ToAdvancedMachineFeaturesPtrOutputWithContext(context.Background())
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesOutput).ToAdvancedMachineFeaturesPtrOutputWithContext(ctx)
}

// AdvancedMachineFeaturesPtrInput is an input type that accepts AdvancedMachineFeaturesArgs, AdvancedMachineFeaturesPtr and AdvancedMachineFeaturesPtrOutput values.
// You can construct a concrete instance of `AdvancedMachineFeaturesPtrInput` via:
//
//	        AdvancedMachineFeaturesArgs{...}
//
//	or:
//
//	        nil
type AdvancedMachineFeaturesPtrInput interface {
	pulumi.Input

	ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput
	ToAdvancedMachineFeaturesPtrOutputWithContext(context.Context) AdvancedMachineFeaturesPtrOutput
}

type advancedMachineFeaturesPtrType AdvancedMachineFeaturesArgs

func AdvancedMachineFeaturesPtr(v *AdvancedMachineFeaturesArgs) AdvancedMachineFeaturesPtrInput {
	return (*advancedMachineFeaturesPtrType)(v)
}

func (*advancedMachineFeaturesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedMachineFeatures)(nil)).Elem()
}

func (i *advancedMachineFeaturesPtrType) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return i.ToAdvancedMachineFeaturesPtrOutputWithContext(context.Background())
}

func (i *advancedMachineFeaturesPtrType) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesPtrOutput)
}

// Specifies options for controlling advanced machine features.
type AdvancedMachineFeaturesOutput struct{ *pulumi.OutputState }

func (AdvancedMachineFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedMachineFeatures)(nil)).Elem()
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesOutput() AdvancedMachineFeaturesOutput {
	return o
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesOutputWithContext(ctx context.Context) AdvancedMachineFeaturesOutput {
	return o
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return o.ToAdvancedMachineFeaturesPtrOutputWithContext(context.Background())
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdvancedMachineFeatures) *AdvancedMachineFeatures {
		return &v
	}).(AdvancedMachineFeaturesPtrOutput)
}

// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
func (o AdvancedMachineFeaturesOutput) ThreadsPerCore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdvancedMachineFeatures) *string { return v.ThreadsPerCore }).(pulumi.StringPtrOutput)
}

type AdvancedMachineFeaturesPtrOutput struct{ *pulumi.OutputState }

func (AdvancedMachineFeaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedMachineFeatures)(nil)).Elem()
}

func (o AdvancedMachineFeaturesPtrOutput) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return o
}

func (o AdvancedMachineFeaturesPtrOutput) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return o
}

func (o AdvancedMachineFeaturesPtrOutput) Elem() AdvancedMachineFeaturesOutput {
	return o.ApplyT(func(v *AdvancedMachineFeatures) AdvancedMachineFeatures {
		if v != nil {
			return *v
		}
		var ret AdvancedMachineFeatures
		return ret
	}).(AdvancedMachineFeaturesOutput)
}

// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
func (o AdvancedMachineFeaturesPtrOutput) ThreadsPerCore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdvancedMachineFeatures) *string {
		if v == nil {
			return nil
		}
		return v.ThreadsPerCore
	}).(pulumi.StringPtrOutput)
}

// Specifies options for controlling advanced machine features.
type AdvancedMachineFeaturesResponse struct {
	// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
	ThreadsPerCore string `pulumi:"threadsPerCore"`
}

// Specifies options for controlling advanced machine features.
type AdvancedMachineFeaturesResponseOutput struct{ *pulumi.OutputState }

func (AdvancedMachineFeaturesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedMachineFeaturesResponse)(nil)).Elem()
}

func (o AdvancedMachineFeaturesResponseOutput) ToAdvancedMachineFeaturesResponseOutput() AdvancedMachineFeaturesResponseOutput {
	return o
}

func (o AdvancedMachineFeaturesResponseOutput) ToAdvancedMachineFeaturesResponseOutputWithContext(ctx context.Context) AdvancedMachineFeaturesResponseOutput {
	return o
}

// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
func (o AdvancedMachineFeaturesResponseOutput) ThreadsPerCore() pulumi.StringOutput {
	return o.ApplyT(func(v AdvancedMachineFeaturesResponse) string { return v.ThreadsPerCore }).(pulumi.StringOutput)
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfig struct {
	// Whether this cluster should return group membership lookups during authentication using a group of security groups.
	Enabled *bool `pulumi:"enabled"`
	// The name of the security group-of-groups to be used. Only relevant if enabled = true.
	SecurityGroup *string `pulumi:"securityGroup"`
}

// AuthenticatorGroupsConfigInput is an input type that accepts AuthenticatorGroupsConfigArgs and AuthenticatorGroupsConfigOutput values.
// You can construct a concrete instance of `AuthenticatorGroupsConfigInput` via:
//
//	AuthenticatorGroupsConfigArgs{...}
type AuthenticatorGroupsConfigInput interface {
	pulumi.Input

	ToAuthenticatorGroupsConfigOutput() AuthenticatorGroupsConfigOutput
	ToAuthenticatorGroupsConfigOutputWithContext(context.Context) AuthenticatorGroupsConfigOutput
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigArgs struct {
	// Whether this cluster should return group membership lookups during authentication using a group of security groups.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The name of the security group-of-groups to be used. Only relevant if enabled = true.
	SecurityGroup pulumi.StringPtrInput `pulumi:"securityGroup"`
}

func (AuthenticatorGroupsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticatorGroupsConfig)(nil)).Elem()
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigOutput() AuthenticatorGroupsConfigOutput {
	return i.ToAuthenticatorGroupsConfigOutputWithContext(context.Background())
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigOutput)
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return i.ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Background())
}

func (i AuthenticatorGroupsConfigArgs) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigOutput).ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx)
}

// AuthenticatorGroupsConfigPtrInput is an input type that accepts AuthenticatorGroupsConfigArgs, AuthenticatorGroupsConfigPtr and AuthenticatorGroupsConfigPtrOutput values.
// You can construct a concrete instance of `AuthenticatorGroupsConfigPtrInput` via:
//
//	        AuthenticatorGroupsConfigArgs{...}
//
//	or:
//
//	        nil
type AuthenticatorGroupsConfigPtrInput interface {
	pulumi.Input

	ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput
	ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Context) AuthenticatorGroupsConfigPtrOutput
}

type authenticatorGroupsConfigPtrType AuthenticatorGroupsConfigArgs

func AuthenticatorGroupsConfigPtr(v *AuthenticatorGroupsConfigArgs) AuthenticatorGroupsConfigPtrInput {
	return (*authenticatorGroupsConfigPtrType)(v)
}

func (*authenticatorGroupsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatorGroupsConfig)(nil)).Elem()
}

func (i *authenticatorGroupsConfigPtrType) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return i.ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Background())
}

func (i *authenticatorGroupsConfigPtrType) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatorGroupsConfigPtrOutput)
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigOutput struct{ *pulumi.OutputState }

func (AuthenticatorGroupsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticatorGroupsConfig)(nil)).Elem()
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigOutput() AuthenticatorGroupsConfigOutput {
	return o
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigOutput {
	return o
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return o.ToAuthenticatorGroupsConfigPtrOutputWithContext(context.Background())
}

func (o AuthenticatorGroupsConfigOutput) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthenticatorGroupsConfig) *AuthenticatorGroupsConfig {
		return &v
	}).(AuthenticatorGroupsConfigPtrOutput)
}

// Whether this cluster should return group membership lookups during authentication using a group of security groups.
func (o AuthenticatorGroupsConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the security group-of-groups to be used. Only relevant if enabled = true.
func (o AuthenticatorGroupsConfigOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfig) *string { return v.SecurityGroup }).(pulumi.StringPtrOutput)
}

type AuthenticatorGroupsConfigPtrOutput struct{ *pulumi.OutputState }

func (AuthenticatorGroupsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatorGroupsConfig)(nil)).Elem()
}

func (o AuthenticatorGroupsConfigPtrOutput) ToAuthenticatorGroupsConfigPtrOutput() AuthenticatorGroupsConfigPtrOutput {
	return o
}

func (o AuthenticatorGroupsConfigPtrOutput) ToAuthenticatorGroupsConfigPtrOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigPtrOutput {
	return o
}

func (o AuthenticatorGroupsConfigPtrOutput) Elem() AuthenticatorGroupsConfigOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfig) AuthenticatorGroupsConfig {
		if v != nil {
			return *v
		}
		var ret AuthenticatorGroupsConfig
		return ret
	}).(AuthenticatorGroupsConfigOutput)
}

// Whether this cluster should return group membership lookups during authentication using a group of security groups.
func (o AuthenticatorGroupsConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The name of the security group-of-groups to be used. Only relevant if enabled = true.
func (o AuthenticatorGroupsConfigPtrOutput) SecurityGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticatorGroupsConfig) *string {
		if v == nil {
			return nil
		}
		return v.SecurityGroup
	}).(pulumi.StringPtrOutput)
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigResponse struct {
	// Whether this cluster should return group membership lookups during authentication using a group of security groups.
	Enabled bool `pulumi:"enabled"`
	// The name of the security group-of-groups to be used. Only relevant if enabled = true.
	SecurityGroup string `pulumi:"securityGroup"`
}

// Configuration for returning group information from authenticators.
type AuthenticatorGroupsConfigResponseOutput struct{ *pulumi.OutputState }

func (AuthenticatorGroupsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticatorGroupsConfigResponse)(nil)).Elem()
}

func (o AuthenticatorGroupsConfigResponseOutput) ToAuthenticatorGroupsConfigResponseOutput() AuthenticatorGroupsConfigResponseOutput {
	return o
}

func (o AuthenticatorGroupsConfigResponseOutput) ToAuthenticatorGroupsConfigResponseOutputWithContext(ctx context.Context) AuthenticatorGroupsConfigResponseOutput {
	return o
}

// Whether this cluster should return group membership lookups during authentication using a group of security groups.
func (o AuthenticatorGroupsConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The name of the security group-of-groups to be used. Only relevant if enabled = true.
func (o AuthenticatorGroupsConfigResponseOutput) SecurityGroup() pulumi.StringOutput {
	return o.ApplyT(func(v AuthenticatorGroupsConfigResponse) string { return v.SecurityGroup }).(pulumi.StringOutput)
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptions struct {
}

// AutoUpgradeOptionsInput is an input type that accepts AutoUpgradeOptionsArgs and AutoUpgradeOptionsOutput values.
// You can construct a concrete instance of `AutoUpgradeOptionsInput` via:
//
//	AutoUpgradeOptionsArgs{...}
type AutoUpgradeOptionsInput interface {
	pulumi.Input

	ToAutoUpgradeOptionsOutput() AutoUpgradeOptionsOutput
	ToAutoUpgradeOptionsOutputWithContext(context.Context) AutoUpgradeOptionsOutput
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsArgs struct {
}

func (AutoUpgradeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeOptions)(nil)).Elem()
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsOutput() AutoUpgradeOptionsOutput {
	return i.ToAutoUpgradeOptionsOutputWithContext(context.Background())
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsOutputWithContext(ctx context.Context) AutoUpgradeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsOutput)
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return i.ToAutoUpgradeOptionsPtrOutputWithContext(context.Background())
}

func (i AutoUpgradeOptionsArgs) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsOutput).ToAutoUpgradeOptionsPtrOutputWithContext(ctx)
}

// AutoUpgradeOptionsPtrInput is an input type that accepts AutoUpgradeOptionsArgs, AutoUpgradeOptionsPtr and AutoUpgradeOptionsPtrOutput values.
// You can construct a concrete instance of `AutoUpgradeOptionsPtrInput` via:
//
//	        AutoUpgradeOptionsArgs{...}
//
//	or:
//
//	        nil
type AutoUpgradeOptionsPtrInput interface {
	pulumi.Input

	ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput
	ToAutoUpgradeOptionsPtrOutputWithContext(context.Context) AutoUpgradeOptionsPtrOutput
}

type autoUpgradeOptionsPtrType AutoUpgradeOptionsArgs

func AutoUpgradeOptionsPtr(v *AutoUpgradeOptionsArgs) AutoUpgradeOptionsPtrInput {
	return (*autoUpgradeOptionsPtrType)(v)
}

func (*autoUpgradeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeOptions)(nil)).Elem()
}

func (i *autoUpgradeOptionsPtrType) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return i.ToAutoUpgradeOptionsPtrOutputWithContext(context.Background())
}

func (i *autoUpgradeOptionsPtrType) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeOptionsPtrOutput)
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsOutput struct{ *pulumi.OutputState }

func (AutoUpgradeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeOptions)(nil)).Elem()
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsOutput() AutoUpgradeOptionsOutput {
	return o
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsOutputWithContext(ctx context.Context) AutoUpgradeOptionsOutput {
	return o
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return o.ToAutoUpgradeOptionsPtrOutputWithContext(context.Background())
}

func (o AutoUpgradeOptionsOutput) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoUpgradeOptions) *AutoUpgradeOptions {
		return &v
	}).(AutoUpgradeOptionsPtrOutput)
}

type AutoUpgradeOptionsPtrOutput struct{ *pulumi.OutputState }

func (AutoUpgradeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeOptions)(nil)).Elem()
}

func (o AutoUpgradeOptionsPtrOutput) ToAutoUpgradeOptionsPtrOutput() AutoUpgradeOptionsPtrOutput {
	return o
}

func (o AutoUpgradeOptionsPtrOutput) ToAutoUpgradeOptionsPtrOutputWithContext(ctx context.Context) AutoUpgradeOptionsPtrOutput {
	return o
}

func (o AutoUpgradeOptionsPtrOutput) Elem() AutoUpgradeOptionsOutput {
	return o.ApplyT(func(v *AutoUpgradeOptions) AutoUpgradeOptions {
		if v != nil {
			return *v
		}
		var ret AutoUpgradeOptions
		return ret
	}).(AutoUpgradeOptionsOutput)
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsResponse struct {
	// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	AutoUpgradeStartTime string `pulumi:"autoUpgradeStartTime"`
	// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
	Description string `pulumi:"description"`
}

// AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
type AutoUpgradeOptionsResponseOutput struct{ *pulumi.OutputState }

func (AutoUpgradeOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeOptionsResponse)(nil)).Elem()
}

func (o AutoUpgradeOptionsResponseOutput) ToAutoUpgradeOptionsResponseOutput() AutoUpgradeOptionsResponseOutput {
	return o
}

func (o AutoUpgradeOptionsResponseOutput) ToAutoUpgradeOptionsResponseOutputWithContext(ctx context.Context) AutoUpgradeOptionsResponseOutput {
	return o
}

// [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o AutoUpgradeOptionsResponseOutput) AutoUpgradeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AutoUpgradeOptionsResponse) string { return v.AutoUpgradeStartTime }).(pulumi.StringOutput)
}

// [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
func (o AutoUpgradeOptionsResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v AutoUpgradeOptionsResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type Autopilot struct {
	// Enable Autopilot
	Enabled *bool `pulumi:"enabled"`
	// Workload policy configuration for Autopilot.
	WorkloadPolicyConfig *WorkloadPolicyConfig `pulumi:"workloadPolicyConfig"`
}

// AutopilotInput is an input type that accepts AutopilotArgs and AutopilotOutput values.
// You can construct a concrete instance of `AutopilotInput` via:
//
//	AutopilotArgs{...}
type AutopilotInput interface {
	pulumi.Input

	ToAutopilotOutput() AutopilotOutput
	ToAutopilotOutputWithContext(context.Context) AutopilotOutput
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotArgs struct {
	// Enable Autopilot
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Workload policy configuration for Autopilot.
	WorkloadPolicyConfig WorkloadPolicyConfigPtrInput `pulumi:"workloadPolicyConfig"`
}

func (AutopilotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Autopilot)(nil)).Elem()
}

func (i AutopilotArgs) ToAutopilotOutput() AutopilotOutput {
	return i.ToAutopilotOutputWithContext(context.Background())
}

func (i AutopilotArgs) ToAutopilotOutputWithContext(ctx context.Context) AutopilotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotOutput)
}

func (i AutopilotArgs) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return i.ToAutopilotPtrOutputWithContext(context.Background())
}

func (i AutopilotArgs) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotOutput).ToAutopilotPtrOutputWithContext(ctx)
}

// AutopilotPtrInput is an input type that accepts AutopilotArgs, AutopilotPtr and AutopilotPtrOutput values.
// You can construct a concrete instance of `AutopilotPtrInput` via:
//
//	        AutopilotArgs{...}
//
//	or:
//
//	        nil
type AutopilotPtrInput interface {
	pulumi.Input

	ToAutopilotPtrOutput() AutopilotPtrOutput
	ToAutopilotPtrOutputWithContext(context.Context) AutopilotPtrOutput
}

type autopilotPtrType AutopilotArgs

func AutopilotPtr(v *AutopilotArgs) AutopilotPtrInput {
	return (*autopilotPtrType)(v)
}

func (*autopilotPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Autopilot)(nil)).Elem()
}

func (i *autopilotPtrType) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return i.ToAutopilotPtrOutputWithContext(context.Background())
}

func (i *autopilotPtrType) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutopilotPtrOutput)
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotOutput struct{ *pulumi.OutputState }

func (AutopilotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Autopilot)(nil)).Elem()
}

func (o AutopilotOutput) ToAutopilotOutput() AutopilotOutput {
	return o
}

func (o AutopilotOutput) ToAutopilotOutputWithContext(ctx context.Context) AutopilotOutput {
	return o
}

func (o AutopilotOutput) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return o.ToAutopilotPtrOutputWithContext(context.Background())
}

func (o AutopilotOutput) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Autopilot) *Autopilot {
		return &v
	}).(AutopilotPtrOutput)
}

// Enable Autopilot
func (o AutopilotOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Autopilot) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Workload policy configuration for Autopilot.
func (o AutopilotOutput) WorkloadPolicyConfig() WorkloadPolicyConfigPtrOutput {
	return o.ApplyT(func(v Autopilot) *WorkloadPolicyConfig { return v.WorkloadPolicyConfig }).(WorkloadPolicyConfigPtrOutput)
}

type AutopilotPtrOutput struct{ *pulumi.OutputState }

func (AutopilotPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Autopilot)(nil)).Elem()
}

func (o AutopilotPtrOutput) ToAutopilotPtrOutput() AutopilotPtrOutput {
	return o
}

func (o AutopilotPtrOutput) ToAutopilotPtrOutputWithContext(ctx context.Context) AutopilotPtrOutput {
	return o
}

func (o AutopilotPtrOutput) Elem() AutopilotOutput {
	return o.ApplyT(func(v *Autopilot) Autopilot {
		if v != nil {
			return *v
		}
		var ret Autopilot
		return ret
	}).(AutopilotOutput)
}

// Enable Autopilot
func (o AutopilotPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Autopilot) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Workload policy configuration for Autopilot.
func (o AutopilotPtrOutput) WorkloadPolicyConfig() WorkloadPolicyConfigPtrOutput {
	return o.ApplyT(func(v *Autopilot) *WorkloadPolicyConfig {
		if v == nil {
			return nil
		}
		return v.WorkloadPolicyConfig
	}).(WorkloadPolicyConfigPtrOutput)
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotResponse struct {
	// Enable Autopilot
	Enabled bool `pulumi:"enabled"`
	// Workload policy configuration for Autopilot.
	WorkloadPolicyConfig WorkloadPolicyConfigResponse `pulumi:"workloadPolicyConfig"`
}

// Autopilot is the configuration for Autopilot settings on the cluster.
type AutopilotResponseOutput struct{ *pulumi.OutputState }

func (AutopilotResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutopilotResponse)(nil)).Elem()
}

func (o AutopilotResponseOutput) ToAutopilotResponseOutput() AutopilotResponseOutput {
	return o
}

func (o AutopilotResponseOutput) ToAutopilotResponseOutputWithContext(ctx context.Context) AutopilotResponseOutput {
	return o
}

// Enable Autopilot
func (o AutopilotResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AutopilotResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Workload policy configuration for Autopilot.
func (o AutopilotResponseOutput) WorkloadPolicyConfig() WorkloadPolicyConfigResponseOutput {
	return o.ApplyT(func(v AutopilotResponse) WorkloadPolicyConfigResponse { return v.WorkloadPolicyConfig }).(WorkloadPolicyConfigResponseOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaults struct {
	// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey *string `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType *string `pulumi:"diskType"`
	// The image type to use for NAP created node. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
	ImageType *string `pulumi:"imageType"`
	// Enable or disable Kubelet read only port.
	InsecureKubeletReadonlyPortEnabled *bool `pulumi:"insecureKubeletReadonlyPortEnabled"`
	// Specifies the node management options for NAP created node-pools.
	Management *NodeManagement `pulumi:"management"`
	// Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
	//
	// Deprecated: Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
	MinCpuPlatform *string `pulumi:"minCpuPlatform"`
	// Scopes that are used by NAP when creating node pools.
	OauthScopes []string `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the node VMs.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig *ShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// Specifies the upgrade settings for NAP created node pools
	UpgradeSettings *UpgradeSettings `pulumi:"upgradeSettings"`
}

// AutoprovisioningNodePoolDefaultsInput is an input type that accepts AutoprovisioningNodePoolDefaultsArgs and AutoprovisioningNodePoolDefaultsOutput values.
// You can construct a concrete instance of `AutoprovisioningNodePoolDefaultsInput` via:
//
//	AutoprovisioningNodePoolDefaultsArgs{...}
type AutoprovisioningNodePoolDefaultsInput interface {
	pulumi.Input

	ToAutoprovisioningNodePoolDefaultsOutput() AutoprovisioningNodePoolDefaultsOutput
	ToAutoprovisioningNodePoolDefaultsOutputWithContext(context.Context) AutoprovisioningNodePoolDefaultsOutput
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsArgs struct {
	// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey pulumi.StringPtrInput `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// The image type to use for NAP created node. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
	ImageType pulumi.StringPtrInput `pulumi:"imageType"`
	// Enable or disable Kubelet read only port.
	InsecureKubeletReadonlyPortEnabled pulumi.BoolPtrInput `pulumi:"insecureKubeletReadonlyPortEnabled"`
	// Specifies the node management options for NAP created node-pools.
	Management NodeManagementPtrInput `pulumi:"management"`
	// Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
	//
	// Deprecated: Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
	MinCpuPlatform pulumi.StringPtrInput `pulumi:"minCpuPlatform"`
	// Scopes that are used by NAP when creating node pools.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the node VMs.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// Specifies the upgrade settings for NAP created node pools
	UpgradeSettings UpgradeSettingsPtrInput `pulumi:"upgradeSettings"`
}

func (AutoprovisioningNodePoolDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsOutput() AutoprovisioningNodePoolDefaultsOutput {
	return i.ToAutoprovisioningNodePoolDefaultsOutputWithContext(context.Background())
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsOutput)
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return i.ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (i AutoprovisioningNodePoolDefaultsArgs) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsOutput).ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx)
}

// AutoprovisioningNodePoolDefaultsPtrInput is an input type that accepts AutoprovisioningNodePoolDefaultsArgs, AutoprovisioningNodePoolDefaultsPtr and AutoprovisioningNodePoolDefaultsPtrOutput values.
// You can construct a concrete instance of `AutoprovisioningNodePoolDefaultsPtrInput` via:
//
//	        AutoprovisioningNodePoolDefaultsArgs{...}
//
//	or:
//
//	        nil
type AutoprovisioningNodePoolDefaultsPtrInput interface {
	pulumi.Input

	ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput
	ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Context) AutoprovisioningNodePoolDefaultsPtrOutput
}

type autoprovisioningNodePoolDefaultsPtrType AutoprovisioningNodePoolDefaultsArgs

func AutoprovisioningNodePoolDefaultsPtr(v *AutoprovisioningNodePoolDefaultsArgs) AutoprovisioningNodePoolDefaultsPtrInput {
	return (*autoprovisioningNodePoolDefaultsPtrType)(v)
}

func (*autoprovisioningNodePoolDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (i *autoprovisioningNodePoolDefaultsPtrType) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return i.ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (i *autoprovisioningNodePoolDefaultsPtrType) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsOutput struct{ *pulumi.OutputState }

func (AutoprovisioningNodePoolDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsOutput() AutoprovisioningNodePoolDefaultsOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (o AutoprovisioningNodePoolDefaultsOutput) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoprovisioningNodePoolDefaults) *AutoprovisioningNodePoolDefaults {
		return &v
	}).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o AutoprovisioningNodePoolDefaultsOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.BootDiskKmsKey }).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o AutoprovisioningNodePoolDefaultsOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o AutoprovisioningNodePoolDefaultsOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// The image type to use for NAP created node. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
func (o AutoprovisioningNodePoolDefaultsOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.ImageType }).(pulumi.StringPtrOutput)
}

// Enable or disable Kubelet read only port.
func (o AutoprovisioningNodePoolDefaultsOutput) InsecureKubeletReadonlyPortEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *bool { return v.InsecureKubeletReadonlyPortEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the node management options for NAP created node-pools.
func (o AutoprovisioningNodePoolDefaultsOutput) Management() NodeManagementPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *NodeManagement { return v.Management }).(NodeManagementPtrOutput)
}

// Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
//
// Deprecated: Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
func (o AutoprovisioningNodePoolDefaultsOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.MinCpuPlatform }).(pulumi.StringPtrOutput)
}

// Scopes that are used by NAP when creating node pools.
func (o AutoprovisioningNodePoolDefaultsOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs.
func (o AutoprovisioningNodePoolDefaultsOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o AutoprovisioningNodePoolDefaultsOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *ShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigPtrOutput)
}

// Specifies the upgrade settings for NAP created node pools
func (o AutoprovisioningNodePoolDefaultsOutput) UpgradeSettings() UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaults) *UpgradeSettings { return v.UpgradeSettings }).(UpgradeSettingsPtrOutput)
}

type AutoprovisioningNodePoolDefaultsPtrOutput struct{ *pulumi.OutputState }

func (AutoprovisioningNodePoolDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoprovisioningNodePoolDefaults)(nil)).Elem()
}

func (o AutoprovisioningNodePoolDefaultsPtrOutput) ToAutoprovisioningNodePoolDefaultsPtrOutput() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsPtrOutput) ToAutoprovisioningNodePoolDefaultsPtrOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsPtrOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsPtrOutput) Elem() AutoprovisioningNodePoolDefaultsOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) AutoprovisioningNodePoolDefaults {
		if v != nil {
			return *v
		}
		var ret AutoprovisioningNodePoolDefaults
		return ret
	}).(AutoprovisioningNodePoolDefaultsOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o AutoprovisioningNodePoolDefaultsPtrOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.BootDiskKmsKey
	}).(pulumi.StringPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o AutoprovisioningNodePoolDefaultsPtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(pulumi.StringPtrOutput)
}

// The image type to use for NAP created node. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.ImageType
	}).(pulumi.StringPtrOutput)
}

// Enable or disable Kubelet read only port.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) InsecureKubeletReadonlyPortEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureKubeletReadonlyPortEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the node management options for NAP created node-pools.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) Management() NodeManagementPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *NodeManagement {
		if v == nil {
			return nil
		}
		return v.Management
	}).(NodeManagementPtrOutput)
}

// Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
//
// Deprecated: Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// Scopes that are used by NAP when creating node pools.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o AutoprovisioningNodePoolDefaultsPtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *ShieldedInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigPtrOutput)
}

// Specifies the upgrade settings for NAP created node pools
func (o AutoprovisioningNodePoolDefaultsPtrOutput) UpgradeSettings() UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v *AutoprovisioningNodePoolDefaults) *UpgradeSettings {
		if v == nil {
			return nil
		}
		return v.UpgradeSettings
	}).(UpgradeSettingsPtrOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsResponse struct {
	// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey string `pulumi:"bootDiskKmsKey"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb int `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType string `pulumi:"diskType"`
	// The image type to use for NAP created node. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
	ImageType string `pulumi:"imageType"`
	// Enable or disable Kubelet read only port.
	InsecureKubeletReadonlyPortEnabled bool `pulumi:"insecureKubeletReadonlyPortEnabled"`
	// Specifies the node management options for NAP created node-pools.
	Management NodeManagementResponse `pulumi:"management"`
	// Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
	//
	// Deprecated: Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
	MinCpuPlatform string `pulumi:"minCpuPlatform"`
	// Scopes that are used by NAP when creating node pools.
	OauthScopes []string `pulumi:"oauthScopes"`
	// The Google Cloud Platform Service Account to be used by the node VMs.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigResponse `pulumi:"shieldedInstanceConfig"`
	// Specifies the upgrade settings for NAP created node pools
	UpgradeSettings UpgradeSettingsResponse `pulumi:"upgradeSettings"`
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
type AutoprovisioningNodePoolDefaultsResponseOutput struct{ *pulumi.OutputState }

func (AutoprovisioningNodePoolDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoprovisioningNodePoolDefaultsResponse)(nil)).Elem()
}

func (o AutoprovisioningNodePoolDefaultsResponseOutput) ToAutoprovisioningNodePoolDefaultsResponseOutput() AutoprovisioningNodePoolDefaultsResponseOutput {
	return o
}

func (o AutoprovisioningNodePoolDefaultsResponseOutput) ToAutoprovisioningNodePoolDefaultsResponseOutputWithContext(ctx context.Context) AutoprovisioningNodePoolDefaultsResponseOutput {
	return o
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o AutoprovisioningNodePoolDefaultsResponseOutput) BootDiskKmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) string { return v.BootDiskKmsKey }).(pulumi.StringOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) DiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) int { return v.DiskSizeGb }).(pulumi.IntOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o AutoprovisioningNodePoolDefaultsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// The image type to use for NAP created node. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) string { return v.ImageType }).(pulumi.StringOutput)
}

// Enable or disable Kubelet read only port.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) InsecureKubeletReadonlyPortEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) bool { return v.InsecureKubeletReadonlyPortEnabled }).(pulumi.BoolOutput)
}

// Specifies the node management options for NAP created node-pools.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) Management() NodeManagementResponseOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) NodeManagementResponse { return v.Management }).(NodeManagementResponseOutput)
}

// Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
//
// Deprecated: Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass "automatic" as field value.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) MinCpuPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) string { return v.MinCpuPlatform }).(pulumi.StringOutput)
}

// Scopes that are used by NAP when creating node pools.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Shielded Instance options.
func (o AutoprovisioningNodePoolDefaultsResponseOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) ShieldedInstanceConfigResponse {
		return v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigResponseOutput)
}

// Specifies the upgrade settings for NAP created node pools
func (o AutoprovisioningNodePoolDefaultsResponseOutput) UpgradeSettings() UpgradeSettingsResponseOutput {
	return o.ApplyT(func(v AutoprovisioningNodePoolDefaultsResponse) UpgradeSettingsResponse { return v.UpgradeSettings }).(UpgradeSettingsResponseOutput)
}

// Best effort provisioning.
type BestEffortProvisioning struct {
	// When this is enabled, cluster/node pool creations will ignore non-fatal errors like stockout to best provision as many nodes as possible right now and eventually bring up all target number of nodes
	Enabled *bool `pulumi:"enabled"`
	// Minimum number of nodes to be provisioned to be considered as succeeded, and the rest of nodes will be provisioned gradually and eventually when stockout issue has been resolved.
	MinProvisionNodes *int `pulumi:"minProvisionNodes"`
}

// BestEffortProvisioningInput is an input type that accepts BestEffortProvisioningArgs and BestEffortProvisioningOutput values.
// You can construct a concrete instance of `BestEffortProvisioningInput` via:
//
//	BestEffortProvisioningArgs{...}
type BestEffortProvisioningInput interface {
	pulumi.Input

	ToBestEffortProvisioningOutput() BestEffortProvisioningOutput
	ToBestEffortProvisioningOutputWithContext(context.Context) BestEffortProvisioningOutput
}

// Best effort provisioning.
type BestEffortProvisioningArgs struct {
	// When this is enabled, cluster/node pool creations will ignore non-fatal errors like stockout to best provision as many nodes as possible right now and eventually bring up all target number of nodes
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Minimum number of nodes to be provisioned to be considered as succeeded, and the rest of nodes will be provisioned gradually and eventually when stockout issue has been resolved.
	MinProvisionNodes pulumi.IntPtrInput `pulumi:"minProvisionNodes"`
}

func (BestEffortProvisioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BestEffortProvisioning)(nil)).Elem()
}

func (i BestEffortProvisioningArgs) ToBestEffortProvisioningOutput() BestEffortProvisioningOutput {
	return i.ToBestEffortProvisioningOutputWithContext(context.Background())
}

func (i BestEffortProvisioningArgs) ToBestEffortProvisioningOutputWithContext(ctx context.Context) BestEffortProvisioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BestEffortProvisioningOutput)
}

func (i BestEffortProvisioningArgs) ToBestEffortProvisioningPtrOutput() BestEffortProvisioningPtrOutput {
	return i.ToBestEffortProvisioningPtrOutputWithContext(context.Background())
}

func (i BestEffortProvisioningArgs) ToBestEffortProvisioningPtrOutputWithContext(ctx context.Context) BestEffortProvisioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BestEffortProvisioningOutput).ToBestEffortProvisioningPtrOutputWithContext(ctx)
}

// BestEffortProvisioningPtrInput is an input type that accepts BestEffortProvisioningArgs, BestEffortProvisioningPtr and BestEffortProvisioningPtrOutput values.
// You can construct a concrete instance of `BestEffortProvisioningPtrInput` via:
//
//	        BestEffortProvisioningArgs{...}
//
//	or:
//
//	        nil
type BestEffortProvisioningPtrInput interface {
	pulumi.Input

	ToBestEffortProvisioningPtrOutput() BestEffortProvisioningPtrOutput
	ToBestEffortProvisioningPtrOutputWithContext(context.Context) BestEffortProvisioningPtrOutput
}

type bestEffortProvisioningPtrType BestEffortProvisioningArgs

func BestEffortProvisioningPtr(v *BestEffortProvisioningArgs) BestEffortProvisioningPtrInput {
	return (*bestEffortProvisioningPtrType)(v)
}

func (*bestEffortProvisioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BestEffortProvisioning)(nil)).Elem()
}

func (i *bestEffortProvisioningPtrType) ToBestEffortProvisioningPtrOutput() BestEffortProvisioningPtrOutput {
	return i.ToBestEffortProvisioningPtrOutputWithContext(context.Background())
}

func (i *bestEffortProvisioningPtrType) ToBestEffortProvisioningPtrOutputWithContext(ctx context.Context) BestEffortProvisioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BestEffortProvisioningPtrOutput)
}

// Best effort provisioning.
type BestEffortProvisioningOutput struct{ *pulumi.OutputState }

func (BestEffortProvisioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BestEffortProvisioning)(nil)).Elem()
}

func (o BestEffortProvisioningOutput) ToBestEffortProvisioningOutput() BestEffortProvisioningOutput {
	return o
}

func (o BestEffortProvisioningOutput) ToBestEffortProvisioningOutputWithContext(ctx context.Context) BestEffortProvisioningOutput {
	return o
}

func (o BestEffortProvisioningOutput) ToBestEffortProvisioningPtrOutput() BestEffortProvisioningPtrOutput {
	return o.ToBestEffortProvisioningPtrOutputWithContext(context.Background())
}

func (o BestEffortProvisioningOutput) ToBestEffortProvisioningPtrOutputWithContext(ctx context.Context) BestEffortProvisioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BestEffortProvisioning) *BestEffortProvisioning {
		return &v
	}).(BestEffortProvisioningPtrOutput)
}

// When this is enabled, cluster/node pool creations will ignore non-fatal errors like stockout to best provision as many nodes as possible right now and eventually bring up all target number of nodes
func (o BestEffortProvisioningOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BestEffortProvisioning) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Minimum number of nodes to be provisioned to be considered as succeeded, and the rest of nodes will be provisioned gradually and eventually when stockout issue has been resolved.
func (o BestEffortProvisioningOutput) MinProvisionNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BestEffortProvisioning) *int { return v.MinProvisionNodes }).(pulumi.IntPtrOutput)
}

type BestEffortProvisioningPtrOutput struct{ *pulumi.OutputState }

func (BestEffortProvisioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BestEffortProvisioning)(nil)).Elem()
}

func (o BestEffortProvisioningPtrOutput) ToBestEffortProvisioningPtrOutput() BestEffortProvisioningPtrOutput {
	return o
}

func (o BestEffortProvisioningPtrOutput) ToBestEffortProvisioningPtrOutputWithContext(ctx context.Context) BestEffortProvisioningPtrOutput {
	return o
}

func (o BestEffortProvisioningPtrOutput) Elem() BestEffortProvisioningOutput {
	return o.ApplyT(func(v *BestEffortProvisioning) BestEffortProvisioning {
		if v != nil {
			return *v
		}
		var ret BestEffortProvisioning
		return ret
	}).(BestEffortProvisioningOutput)
}

// When this is enabled, cluster/node pool creations will ignore non-fatal errors like stockout to best provision as many nodes as possible right now and eventually bring up all target number of nodes
func (o BestEffortProvisioningPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BestEffortProvisioning) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of nodes to be provisioned to be considered as succeeded, and the rest of nodes will be provisioned gradually and eventually when stockout issue has been resolved.
func (o BestEffortProvisioningPtrOutput) MinProvisionNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BestEffortProvisioning) *int {
		if v == nil {
			return nil
		}
		return v.MinProvisionNodes
	}).(pulumi.IntPtrOutput)
}

// Best effort provisioning.
type BestEffortProvisioningResponse struct {
	// When this is enabled, cluster/node pool creations will ignore non-fatal errors like stockout to best provision as many nodes as possible right now and eventually bring up all target number of nodes
	Enabled bool `pulumi:"enabled"`
	// Minimum number of nodes to be provisioned to be considered as succeeded, and the rest of nodes will be provisioned gradually and eventually when stockout issue has been resolved.
	MinProvisionNodes int `pulumi:"minProvisionNodes"`
}

// Best effort provisioning.
type BestEffortProvisioningResponseOutput struct{ *pulumi.OutputState }

func (BestEffortProvisioningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BestEffortProvisioningResponse)(nil)).Elem()
}

func (o BestEffortProvisioningResponseOutput) ToBestEffortProvisioningResponseOutput() BestEffortProvisioningResponseOutput {
	return o
}

func (o BestEffortProvisioningResponseOutput) ToBestEffortProvisioningResponseOutputWithContext(ctx context.Context) BestEffortProvisioningResponseOutput {
	return o
}

// When this is enabled, cluster/node pool creations will ignore non-fatal errors like stockout to best provision as many nodes as possible right now and eventually bring up all target number of nodes
func (o BestEffortProvisioningResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BestEffortProvisioningResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Minimum number of nodes to be provisioned to be considered as succeeded, and the rest of nodes will be provisioned gradually and eventually when stockout issue has been resolved.
func (o BestEffortProvisioningResponseOutput) MinProvisionNodes() pulumi.IntOutput {
	return o.ApplyT(func(v BestEffortProvisioningResponse) int { return v.MinProvisionNodes }).(pulumi.IntOutput)
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestination struct {
	// The ID of a BigQuery Dataset.
	DatasetId *string `pulumi:"datasetId"`
}

// BigQueryDestinationInput is an input type that accepts BigQueryDestinationArgs and BigQueryDestinationOutput values.
// You can construct a concrete instance of `BigQueryDestinationInput` via:
//
//	BigQueryDestinationArgs{...}
type BigQueryDestinationInput interface {
	pulumi.Input

	ToBigQueryDestinationOutput() BigQueryDestinationOutput
	ToBigQueryDestinationOutputWithContext(context.Context) BigQueryDestinationOutput
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationArgs struct {
	// The ID of a BigQuery Dataset.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
}

func (BigQueryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestination)(nil)).Elem()
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationOutput() BigQueryDestinationOutput {
	return i.ToBigQueryDestinationOutputWithContext(context.Background())
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationOutputWithContext(ctx context.Context) BigQueryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationOutput)
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return i.ToBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (i BigQueryDestinationArgs) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationOutput).ToBigQueryDestinationPtrOutputWithContext(ctx)
}

// BigQueryDestinationPtrInput is an input type that accepts BigQueryDestinationArgs, BigQueryDestinationPtr and BigQueryDestinationPtrOutput values.
// You can construct a concrete instance of `BigQueryDestinationPtrInput` via:
//
//	        BigQueryDestinationArgs{...}
//
//	or:
//
//	        nil
type BigQueryDestinationPtrInput interface {
	pulumi.Input

	ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput
	ToBigQueryDestinationPtrOutputWithContext(context.Context) BigQueryDestinationPtrOutput
}

type bigQueryDestinationPtrType BigQueryDestinationArgs

func BigQueryDestinationPtr(v *BigQueryDestinationArgs) BigQueryDestinationPtrInput {
	return (*bigQueryDestinationPtrType)(v)
}

func (*bigQueryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryDestination)(nil)).Elem()
}

func (i *bigQueryDestinationPtrType) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return i.ToBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (i *bigQueryDestinationPtrType) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationPtrOutput)
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestination)(nil)).Elem()
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationOutput() BigQueryDestinationOutput {
	return o
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationOutputWithContext(ctx context.Context) BigQueryDestinationOutput {
	return o
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return o.ToBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (o BigQueryDestinationOutput) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BigQueryDestination) *BigQueryDestination {
		return &v
	}).(BigQueryDestinationPtrOutput)
}

// The ID of a BigQuery Dataset.
func (o BigQueryDestinationOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryDestination) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

type BigQueryDestinationPtrOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryDestination)(nil)).Elem()
}

func (o BigQueryDestinationPtrOutput) ToBigQueryDestinationPtrOutput() BigQueryDestinationPtrOutput {
	return o
}

func (o BigQueryDestinationPtrOutput) ToBigQueryDestinationPtrOutputWithContext(ctx context.Context) BigQueryDestinationPtrOutput {
	return o
}

func (o BigQueryDestinationPtrOutput) Elem() BigQueryDestinationOutput {
	return o.ApplyT(func(v *BigQueryDestination) BigQueryDestination {
		if v != nil {
			return *v
		}
		var ret BigQueryDestination
		return ret
	}).(BigQueryDestinationOutput)
}

// The ID of a BigQuery Dataset.
func (o BigQueryDestinationPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryDestination) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationResponse struct {
	// The ID of a BigQuery Dataset.
	DatasetId string `pulumi:"datasetId"`
}

// Parameters for using BigQuery as the destination of resource usage export.
type BigQueryDestinationResponseOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestinationResponse)(nil)).Elem()
}

func (o BigQueryDestinationResponseOutput) ToBigQueryDestinationResponseOutput() BigQueryDestinationResponseOutput {
	return o
}

func (o BigQueryDestinationResponseOutput) ToBigQueryDestinationResponseOutputWithContext(ctx context.Context) BigQueryDestinationResponseOutput {
	return o
}

// The ID of a BigQuery Dataset.
func (o BigQueryDestinationResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryDestinationResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// Configuration for Binary Authorization.
type BinaryAuthorization struct {
	// This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
	//
	// Deprecated: This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
	Enabled *bool `pulumi:"enabled"`
	// Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.
	EvaluationMode *BinaryAuthorizationEvaluationMode `pulumi:"evaluationMode"`
}

// BinaryAuthorizationInput is an input type that accepts BinaryAuthorizationArgs and BinaryAuthorizationOutput values.
// You can construct a concrete instance of `BinaryAuthorizationInput` via:
//
//	BinaryAuthorizationArgs{...}
type BinaryAuthorizationInput interface {
	pulumi.Input

	ToBinaryAuthorizationOutput() BinaryAuthorizationOutput
	ToBinaryAuthorizationOutputWithContext(context.Context) BinaryAuthorizationOutput
}

// Configuration for Binary Authorization.
type BinaryAuthorizationArgs struct {
	// This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
	//
	// Deprecated: This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.
	EvaluationMode BinaryAuthorizationEvaluationModePtrInput `pulumi:"evaluationMode"`
}

func (BinaryAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorization)(nil)).Elem()
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationOutput() BinaryAuthorizationOutput {
	return i.ToBinaryAuthorizationOutputWithContext(context.Background())
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationOutputWithContext(ctx context.Context) BinaryAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationOutput)
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return i.ToBinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (i BinaryAuthorizationArgs) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationOutput).ToBinaryAuthorizationPtrOutputWithContext(ctx)
}

// BinaryAuthorizationPtrInput is an input type that accepts BinaryAuthorizationArgs, BinaryAuthorizationPtr and BinaryAuthorizationPtrOutput values.
// You can construct a concrete instance of `BinaryAuthorizationPtrInput` via:
//
//	        BinaryAuthorizationArgs{...}
//
//	or:
//
//	        nil
type BinaryAuthorizationPtrInput interface {
	pulumi.Input

	ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput
	ToBinaryAuthorizationPtrOutputWithContext(context.Context) BinaryAuthorizationPtrOutput
}

type binaryAuthorizationPtrType BinaryAuthorizationArgs

func BinaryAuthorizationPtr(v *BinaryAuthorizationArgs) BinaryAuthorizationPtrInput {
	return (*binaryAuthorizationPtrType)(v)
}

func (*binaryAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryAuthorization)(nil)).Elem()
}

func (i *binaryAuthorizationPtrType) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return i.ToBinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (i *binaryAuthorizationPtrType) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationPtrOutput)
}

// Configuration for Binary Authorization.
type BinaryAuthorizationOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorization)(nil)).Elem()
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationOutput() BinaryAuthorizationOutput {
	return o
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationOutputWithContext(ctx context.Context) BinaryAuthorizationOutput {
	return o
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return o.ToBinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (o BinaryAuthorizationOutput) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BinaryAuthorization) *BinaryAuthorization {
		return &v
	}).(BinaryAuthorizationPtrOutput)
}

// This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
//
// Deprecated: This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
func (o BinaryAuthorizationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BinaryAuthorization) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.
func (o BinaryAuthorizationOutput) EvaluationMode() BinaryAuthorizationEvaluationModePtrOutput {
	return o.ApplyT(func(v BinaryAuthorization) *BinaryAuthorizationEvaluationMode { return v.EvaluationMode }).(BinaryAuthorizationEvaluationModePtrOutput)
}

type BinaryAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryAuthorization)(nil)).Elem()
}

func (o BinaryAuthorizationPtrOutput) ToBinaryAuthorizationPtrOutput() BinaryAuthorizationPtrOutput {
	return o
}

func (o BinaryAuthorizationPtrOutput) ToBinaryAuthorizationPtrOutputWithContext(ctx context.Context) BinaryAuthorizationPtrOutput {
	return o
}

func (o BinaryAuthorizationPtrOutput) Elem() BinaryAuthorizationOutput {
	return o.ApplyT(func(v *BinaryAuthorization) BinaryAuthorization {
		if v != nil {
			return *v
		}
		var ret BinaryAuthorization
		return ret
	}).(BinaryAuthorizationOutput)
}

// This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
//
// Deprecated: This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
func (o BinaryAuthorizationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BinaryAuthorization) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.
func (o BinaryAuthorizationPtrOutput) EvaluationMode() BinaryAuthorizationEvaluationModePtrOutput {
	return o.ApplyT(func(v *BinaryAuthorization) *BinaryAuthorizationEvaluationMode {
		if v == nil {
			return nil
		}
		return v.EvaluationMode
	}).(BinaryAuthorizationEvaluationModePtrOutput)
}

// Configuration for Binary Authorization.
type BinaryAuthorizationResponse struct {
	// This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
	//
	// Deprecated: This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
	Enabled bool `pulumi:"enabled"`
	// Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.
	EvaluationMode string `pulumi:"evaluationMode"`
}

// Configuration for Binary Authorization.
type BinaryAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorizationResponse)(nil)).Elem()
}

func (o BinaryAuthorizationResponseOutput) ToBinaryAuthorizationResponseOutput() BinaryAuthorizationResponseOutput {
	return o
}

func (o BinaryAuthorizationResponseOutput) ToBinaryAuthorizationResponseOutputWithContext(ctx context.Context) BinaryAuthorizationResponseOutput {
	return o
}

// This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
//
// Deprecated: This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
func (o BinaryAuthorizationResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BinaryAuthorizationResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.
func (o BinaryAuthorizationResponseOutput) EvaluationMode() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryAuthorizationResponse) string { return v.EvaluationMode }).(pulumi.StringOutput)
}

// Information relevant to blue-green upgrade.
type BlueGreenInfoResponse struct {
	// The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with blue pool.
	BlueInstanceGroupUrls []string `pulumi:"blueInstanceGroupUrls"`
	// Time to start deleting blue pool to complete blue-green upgrade, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	BluePoolDeletionStartTime string `pulumi:"bluePoolDeletionStartTime"`
	// The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with green pool.
	GreenInstanceGroupUrls []string `pulumi:"greenInstanceGroupUrls"`
	// Version of green pool.
	GreenPoolVersion string `pulumi:"greenPoolVersion"`
	// Current blue-green upgrade phase.
	Phase string `pulumi:"phase"`
}

// Information relevant to blue-green upgrade.
type BlueGreenInfoResponseOutput struct{ *pulumi.OutputState }

func (BlueGreenInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueGreenInfoResponse)(nil)).Elem()
}

func (o BlueGreenInfoResponseOutput) ToBlueGreenInfoResponseOutput() BlueGreenInfoResponseOutput {
	return o
}

func (o BlueGreenInfoResponseOutput) ToBlueGreenInfoResponseOutputWithContext(ctx context.Context) BlueGreenInfoResponseOutput {
	return o
}

// The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with blue pool.
func (o BlueGreenInfoResponseOutput) BlueInstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BlueGreenInfoResponse) []string { return v.BlueInstanceGroupUrls }).(pulumi.StringArrayOutput)
}

// Time to start deleting blue pool to complete blue-green upgrade, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
func (o BlueGreenInfoResponseOutput) BluePoolDeletionStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BlueGreenInfoResponse) string { return v.BluePoolDeletionStartTime }).(pulumi.StringOutput)
}

// The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with green pool.
func (o BlueGreenInfoResponseOutput) GreenInstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BlueGreenInfoResponse) []string { return v.GreenInstanceGroupUrls }).(pulumi.StringArrayOutput)
}

// Version of green pool.
func (o BlueGreenInfoResponseOutput) GreenPoolVersion() pulumi.StringOutput {
	return o.ApplyT(func(v BlueGreenInfoResponse) string { return v.GreenPoolVersion }).(pulumi.StringOutput)
}

// Current blue-green upgrade phase.
func (o BlueGreenInfoResponseOutput) Phase() pulumi.StringOutput {
	return o.ApplyT(func(v BlueGreenInfoResponse) string { return v.Phase }).(pulumi.StringOutput)
}

// Settings for blue-green upgrade.
type BlueGreenSettings struct {
	// Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.
	NodePoolSoakDuration *string `pulumi:"nodePoolSoakDuration"`
	// Standard policy for the blue-green upgrade.
	StandardRolloutPolicy *StandardRolloutPolicy `pulumi:"standardRolloutPolicy"`
}

// BlueGreenSettingsInput is an input type that accepts BlueGreenSettingsArgs and BlueGreenSettingsOutput values.
// You can construct a concrete instance of `BlueGreenSettingsInput` via:
//
//	BlueGreenSettingsArgs{...}
type BlueGreenSettingsInput interface {
	pulumi.Input

	ToBlueGreenSettingsOutput() BlueGreenSettingsOutput
	ToBlueGreenSettingsOutputWithContext(context.Context) BlueGreenSettingsOutput
}

// Settings for blue-green upgrade.
type BlueGreenSettingsArgs struct {
	// Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.
	NodePoolSoakDuration pulumi.StringPtrInput `pulumi:"nodePoolSoakDuration"`
	// Standard policy for the blue-green upgrade.
	StandardRolloutPolicy StandardRolloutPolicyPtrInput `pulumi:"standardRolloutPolicy"`
}

func (BlueGreenSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueGreenSettings)(nil)).Elem()
}

func (i BlueGreenSettingsArgs) ToBlueGreenSettingsOutput() BlueGreenSettingsOutput {
	return i.ToBlueGreenSettingsOutputWithContext(context.Background())
}

func (i BlueGreenSettingsArgs) ToBlueGreenSettingsOutputWithContext(ctx context.Context) BlueGreenSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueGreenSettingsOutput)
}

func (i BlueGreenSettingsArgs) ToBlueGreenSettingsPtrOutput() BlueGreenSettingsPtrOutput {
	return i.ToBlueGreenSettingsPtrOutputWithContext(context.Background())
}

func (i BlueGreenSettingsArgs) ToBlueGreenSettingsPtrOutputWithContext(ctx context.Context) BlueGreenSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueGreenSettingsOutput).ToBlueGreenSettingsPtrOutputWithContext(ctx)
}

// BlueGreenSettingsPtrInput is an input type that accepts BlueGreenSettingsArgs, BlueGreenSettingsPtr and BlueGreenSettingsPtrOutput values.
// You can construct a concrete instance of `BlueGreenSettingsPtrInput` via:
//
//	        BlueGreenSettingsArgs{...}
//
//	or:
//
//	        nil
type BlueGreenSettingsPtrInput interface {
	pulumi.Input

	ToBlueGreenSettingsPtrOutput() BlueGreenSettingsPtrOutput
	ToBlueGreenSettingsPtrOutputWithContext(context.Context) BlueGreenSettingsPtrOutput
}

type blueGreenSettingsPtrType BlueGreenSettingsArgs

func BlueGreenSettingsPtr(v *BlueGreenSettingsArgs) BlueGreenSettingsPtrInput {
	return (*blueGreenSettingsPtrType)(v)
}

func (*blueGreenSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlueGreenSettings)(nil)).Elem()
}

func (i *blueGreenSettingsPtrType) ToBlueGreenSettingsPtrOutput() BlueGreenSettingsPtrOutput {
	return i.ToBlueGreenSettingsPtrOutputWithContext(context.Background())
}

func (i *blueGreenSettingsPtrType) ToBlueGreenSettingsPtrOutputWithContext(ctx context.Context) BlueGreenSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlueGreenSettingsPtrOutput)
}

// Settings for blue-green upgrade.
type BlueGreenSettingsOutput struct{ *pulumi.OutputState }

func (BlueGreenSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueGreenSettings)(nil)).Elem()
}

func (o BlueGreenSettingsOutput) ToBlueGreenSettingsOutput() BlueGreenSettingsOutput {
	return o
}

func (o BlueGreenSettingsOutput) ToBlueGreenSettingsOutputWithContext(ctx context.Context) BlueGreenSettingsOutput {
	return o
}

func (o BlueGreenSettingsOutput) ToBlueGreenSettingsPtrOutput() BlueGreenSettingsPtrOutput {
	return o.ToBlueGreenSettingsPtrOutputWithContext(context.Background())
}

func (o BlueGreenSettingsOutput) ToBlueGreenSettingsPtrOutputWithContext(ctx context.Context) BlueGreenSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlueGreenSettings) *BlueGreenSettings {
		return &v
	}).(BlueGreenSettingsPtrOutput)
}

// Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.
func (o BlueGreenSettingsOutput) NodePoolSoakDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlueGreenSettings) *string { return v.NodePoolSoakDuration }).(pulumi.StringPtrOutput)
}

// Standard policy for the blue-green upgrade.
func (o BlueGreenSettingsOutput) StandardRolloutPolicy() StandardRolloutPolicyPtrOutput {
	return o.ApplyT(func(v BlueGreenSettings) *StandardRolloutPolicy { return v.StandardRolloutPolicy }).(StandardRolloutPolicyPtrOutput)
}

type BlueGreenSettingsPtrOutput struct{ *pulumi.OutputState }

func (BlueGreenSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlueGreenSettings)(nil)).Elem()
}

func (o BlueGreenSettingsPtrOutput) ToBlueGreenSettingsPtrOutput() BlueGreenSettingsPtrOutput {
	return o
}

func (o BlueGreenSettingsPtrOutput) ToBlueGreenSettingsPtrOutputWithContext(ctx context.Context) BlueGreenSettingsPtrOutput {
	return o
}

func (o BlueGreenSettingsPtrOutput) Elem() BlueGreenSettingsOutput {
	return o.ApplyT(func(v *BlueGreenSettings) BlueGreenSettings {
		if v != nil {
			return *v
		}
		var ret BlueGreenSettings
		return ret
	}).(BlueGreenSettingsOutput)
}

// Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.
func (o BlueGreenSettingsPtrOutput) NodePoolSoakDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlueGreenSettings) *string {
		if v == nil {
			return nil
		}
		return v.NodePoolSoakDuration
	}).(pulumi.StringPtrOutput)
}

// Standard policy for the blue-green upgrade.
func (o BlueGreenSettingsPtrOutput) StandardRolloutPolicy() StandardRolloutPolicyPtrOutput {
	return o.ApplyT(func(v *BlueGreenSettings) *StandardRolloutPolicy {
		if v == nil {
			return nil
		}
		return v.StandardRolloutPolicy
	}).(StandardRolloutPolicyPtrOutput)
}

// Settings for blue-green upgrade.
type BlueGreenSettingsResponse struct {
	// Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.
	NodePoolSoakDuration string `pulumi:"nodePoolSoakDuration"`
	// Standard policy for the blue-green upgrade.
	StandardRolloutPolicy StandardRolloutPolicyResponse `pulumi:"standardRolloutPolicy"`
}

// Settings for blue-green upgrade.
type BlueGreenSettingsResponseOutput struct{ *pulumi.OutputState }

func (BlueGreenSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlueGreenSettingsResponse)(nil)).Elem()
}

func (o BlueGreenSettingsResponseOutput) ToBlueGreenSettingsResponseOutput() BlueGreenSettingsResponseOutput {
	return o
}

func (o BlueGreenSettingsResponseOutput) ToBlueGreenSettingsResponseOutputWithContext(ctx context.Context) BlueGreenSettingsResponseOutput {
	return o
}

// Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.
func (o BlueGreenSettingsResponseOutput) NodePoolSoakDuration() pulumi.StringOutput {
	return o.ApplyT(func(v BlueGreenSettingsResponse) string { return v.NodePoolSoakDuration }).(pulumi.StringOutput)
}

// Standard policy for the blue-green upgrade.
func (o BlueGreenSettingsResponseOutput) StandardRolloutPolicy() StandardRolloutPolicyResponseOutput {
	return o.ApplyT(func(v BlueGreenSettingsResponse) StandardRolloutPolicyResponse { return v.StandardRolloutPolicy }).(StandardRolloutPolicyResponseOutput)
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlock struct {
	// cidr_block must be specified in CIDR notation.
	CidrBlock *string `pulumi:"cidrBlock"`
	// display_name is an optional field for users to identify CIDR blocks.
	DisplayName *string `pulumi:"displayName"`
}

// CidrBlockInput is an input type that accepts CidrBlockArgs and CidrBlockOutput values.
// You can construct a concrete instance of `CidrBlockInput` via:
//
//	CidrBlockArgs{...}
type CidrBlockInput interface {
	pulumi.Input

	ToCidrBlockOutput() CidrBlockOutput
	ToCidrBlockOutputWithContext(context.Context) CidrBlockOutput
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockArgs struct {
	// cidr_block must be specified in CIDR notation.
	CidrBlock pulumi.StringPtrInput `pulumi:"cidrBlock"`
	// display_name is an optional field for users to identify CIDR blocks.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
}

func (CidrBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlock)(nil)).Elem()
}

func (i CidrBlockArgs) ToCidrBlockOutput() CidrBlockOutput {
	return i.ToCidrBlockOutputWithContext(context.Background())
}

func (i CidrBlockArgs) ToCidrBlockOutputWithContext(ctx context.Context) CidrBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockOutput)
}

// CidrBlockArrayInput is an input type that accepts CidrBlockArray and CidrBlockArrayOutput values.
// You can construct a concrete instance of `CidrBlockArrayInput` via:
//
//	CidrBlockArray{ CidrBlockArgs{...} }
type CidrBlockArrayInput interface {
	pulumi.Input

	ToCidrBlockArrayOutput() CidrBlockArrayOutput
	ToCidrBlockArrayOutputWithContext(context.Context) CidrBlockArrayOutput
}

type CidrBlockArray []CidrBlockInput

func (CidrBlockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlock)(nil)).Elem()
}

func (i CidrBlockArray) ToCidrBlockArrayOutput() CidrBlockArrayOutput {
	return i.ToCidrBlockArrayOutputWithContext(context.Background())
}

func (i CidrBlockArray) ToCidrBlockArrayOutputWithContext(ctx context.Context) CidrBlockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockArrayOutput)
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockOutput struct{ *pulumi.OutputState }

func (CidrBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlock)(nil)).Elem()
}

func (o CidrBlockOutput) ToCidrBlockOutput() CidrBlockOutput {
	return o
}

func (o CidrBlockOutput) ToCidrBlockOutputWithContext(ctx context.Context) CidrBlockOutput {
	return o
}

// cidr_block must be specified in CIDR notation.
func (o CidrBlockOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CidrBlock) *string { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// display_name is an optional field for users to identify CIDR blocks.
func (o CidrBlockOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CidrBlock) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

type CidrBlockArrayOutput struct{ *pulumi.OutputState }

func (CidrBlockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlock)(nil)).Elem()
}

func (o CidrBlockArrayOutput) ToCidrBlockArrayOutput() CidrBlockArrayOutput {
	return o
}

func (o CidrBlockArrayOutput) ToCidrBlockArrayOutputWithContext(ctx context.Context) CidrBlockArrayOutput {
	return o
}

func (o CidrBlockArrayOutput) Index(i pulumi.IntInput) CidrBlockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CidrBlock {
		return vs[0].([]CidrBlock)[vs[1].(int)]
	}).(CidrBlockOutput)
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockResponse struct {
	// cidr_block must be specified in CIDR notation.
	CidrBlock string `pulumi:"cidrBlock"`
	// display_name is an optional field for users to identify CIDR blocks.
	DisplayName string `pulumi:"displayName"`
}

// CidrBlock contains an optional name and one CIDR block.
type CidrBlockResponseOutput struct{ *pulumi.OutputState }

func (CidrBlockResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlockResponse)(nil)).Elem()
}

func (o CidrBlockResponseOutput) ToCidrBlockResponseOutput() CidrBlockResponseOutput {
	return o
}

func (o CidrBlockResponseOutput) ToCidrBlockResponseOutputWithContext(ctx context.Context) CidrBlockResponseOutput {
	return o
}

// cidr_block must be specified in CIDR notation.
func (o CidrBlockResponseOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v CidrBlockResponse) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// display_name is an optional field for users to identify CIDR blocks.
func (o CidrBlockResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v CidrBlockResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

type CidrBlockResponseArrayOutput struct{ *pulumi.OutputState }

func (CidrBlockResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlockResponse)(nil)).Elem()
}

func (o CidrBlockResponseArrayOutput) ToCidrBlockResponseArrayOutput() CidrBlockResponseArrayOutput {
	return o
}

func (o CidrBlockResponseArrayOutput) ToCidrBlockResponseArrayOutputWithContext(ctx context.Context) CidrBlockResponseArrayOutput {
	return o
}

func (o CidrBlockResponseArrayOutput) Index(i pulumi.IntInput) CidrBlockResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CidrBlockResponse {
		return vs[0].([]CidrBlockResponse)[vs[1].(int)]
	}).(CidrBlockResponseOutput)
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfig struct {
	// Issue a client certificate.
	IssueClientCertificate *bool `pulumi:"issueClientCertificate"`
}

// ClientCertificateConfigInput is an input type that accepts ClientCertificateConfigArgs and ClientCertificateConfigOutput values.
// You can construct a concrete instance of `ClientCertificateConfigInput` via:
//
//	ClientCertificateConfigArgs{...}
type ClientCertificateConfigInput interface {
	pulumi.Input

	ToClientCertificateConfigOutput() ClientCertificateConfigOutput
	ToClientCertificateConfigOutputWithContext(context.Context) ClientCertificateConfigOutput
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigArgs struct {
	// Issue a client certificate.
	IssueClientCertificate pulumi.BoolPtrInput `pulumi:"issueClientCertificate"`
}

func (ClientCertificateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateConfig)(nil)).Elem()
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigOutput() ClientCertificateConfigOutput {
	return i.ToClientCertificateConfigOutputWithContext(context.Background())
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigOutputWithContext(ctx context.Context) ClientCertificateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigOutput)
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return i.ToClientCertificateConfigPtrOutputWithContext(context.Background())
}

func (i ClientCertificateConfigArgs) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigOutput).ToClientCertificateConfigPtrOutputWithContext(ctx)
}

// ClientCertificateConfigPtrInput is an input type that accepts ClientCertificateConfigArgs, ClientCertificateConfigPtr and ClientCertificateConfigPtrOutput values.
// You can construct a concrete instance of `ClientCertificateConfigPtrInput` via:
//
//	        ClientCertificateConfigArgs{...}
//
//	or:
//
//	        nil
type ClientCertificateConfigPtrInput interface {
	pulumi.Input

	ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput
	ToClientCertificateConfigPtrOutputWithContext(context.Context) ClientCertificateConfigPtrOutput
}

type clientCertificateConfigPtrType ClientCertificateConfigArgs

func ClientCertificateConfigPtr(v *ClientCertificateConfigArgs) ClientCertificateConfigPtrInput {
	return (*clientCertificateConfigPtrType)(v)
}

func (*clientCertificateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateConfig)(nil)).Elem()
}

func (i *clientCertificateConfigPtrType) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return i.ToClientCertificateConfigPtrOutputWithContext(context.Background())
}

func (i *clientCertificateConfigPtrType) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateConfigPtrOutput)
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigOutput struct{ *pulumi.OutputState }

func (ClientCertificateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateConfig)(nil)).Elem()
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigOutput() ClientCertificateConfigOutput {
	return o
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigOutputWithContext(ctx context.Context) ClientCertificateConfigOutput {
	return o
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return o.ToClientCertificateConfigPtrOutputWithContext(context.Background())
}

func (o ClientCertificateConfigOutput) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientCertificateConfig) *ClientCertificateConfig {
		return &v
	}).(ClientCertificateConfigPtrOutput)
}

// Issue a client certificate.
func (o ClientCertificateConfigOutput) IssueClientCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClientCertificateConfig) *bool { return v.IssueClientCertificate }).(pulumi.BoolPtrOutput)
}

type ClientCertificateConfigPtrOutput struct{ *pulumi.OutputState }

func (ClientCertificateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificateConfig)(nil)).Elem()
}

func (o ClientCertificateConfigPtrOutput) ToClientCertificateConfigPtrOutput() ClientCertificateConfigPtrOutput {
	return o
}

func (o ClientCertificateConfigPtrOutput) ToClientCertificateConfigPtrOutputWithContext(ctx context.Context) ClientCertificateConfigPtrOutput {
	return o
}

func (o ClientCertificateConfigPtrOutput) Elem() ClientCertificateConfigOutput {
	return o.ApplyT(func(v *ClientCertificateConfig) ClientCertificateConfig {
		if v != nil {
			return *v
		}
		var ret ClientCertificateConfig
		return ret
	}).(ClientCertificateConfigOutput)
}

// Issue a client certificate.
func (o ClientCertificateConfigPtrOutput) IssueClientCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClientCertificateConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IssueClientCertificate
	}).(pulumi.BoolPtrOutput)
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigResponse struct {
	// Issue a client certificate.
	IssueClientCertificate bool `pulumi:"issueClientCertificate"`
}

// Configuration for client certificates on the cluster.
type ClientCertificateConfigResponseOutput struct{ *pulumi.OutputState }

func (ClientCertificateConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCertificateConfigResponse)(nil)).Elem()
}

func (o ClientCertificateConfigResponseOutput) ToClientCertificateConfigResponseOutput() ClientCertificateConfigResponseOutput {
	return o
}

func (o ClientCertificateConfigResponseOutput) ToClientCertificateConfigResponseOutputWithContext(ctx context.Context) ClientCertificateConfigResponseOutput {
	return o
}

// Issue a client certificate.
func (o ClientCertificateConfigResponseOutput) IssueClientCertificate() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientCertificateConfigResponse) bool { return v.IssueClientCertificate }).(pulumi.BoolOutput)
}

// Configuration options for the Cloud Run feature.
type CloudRunConfig struct {
	// Whether Cloud Run addon is enabled for this cluster.
	Disabled *bool `pulumi:"disabled"`
	// Which load balancer type is installed for Cloud Run.
	LoadBalancerType *CloudRunConfigLoadBalancerType `pulumi:"loadBalancerType"`
}

// CloudRunConfigInput is an input type that accepts CloudRunConfigArgs and CloudRunConfigOutput values.
// You can construct a concrete instance of `CloudRunConfigInput` via:
//
//	CloudRunConfigArgs{...}
type CloudRunConfigInput interface {
	pulumi.Input

	ToCloudRunConfigOutput() CloudRunConfigOutput
	ToCloudRunConfigOutputWithContext(context.Context) CloudRunConfigOutput
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigArgs struct {
	// Whether Cloud Run addon is enabled for this cluster.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Which load balancer type is installed for Cloud Run.
	LoadBalancerType CloudRunConfigLoadBalancerTypePtrInput `pulumi:"loadBalancerType"`
}

func (CloudRunConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfig)(nil)).Elem()
}

func (i CloudRunConfigArgs) ToCloudRunConfigOutput() CloudRunConfigOutput {
	return i.ToCloudRunConfigOutputWithContext(context.Background())
}

func (i CloudRunConfigArgs) ToCloudRunConfigOutputWithContext(ctx context.Context) CloudRunConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigOutput)
}

func (i CloudRunConfigArgs) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return i.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (i CloudRunConfigArgs) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigOutput).ToCloudRunConfigPtrOutputWithContext(ctx)
}

// CloudRunConfigPtrInput is an input type that accepts CloudRunConfigArgs, CloudRunConfigPtr and CloudRunConfigPtrOutput values.
// You can construct a concrete instance of `CloudRunConfigPtrInput` via:
//
//	        CloudRunConfigArgs{...}
//
//	or:
//
//	        nil
type CloudRunConfigPtrInput interface {
	pulumi.Input

	ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput
	ToCloudRunConfigPtrOutputWithContext(context.Context) CloudRunConfigPtrOutput
}

type cloudRunConfigPtrType CloudRunConfigArgs

func CloudRunConfigPtr(v *CloudRunConfigArgs) CloudRunConfigPtrInput {
	return (*cloudRunConfigPtrType)(v)
}

func (*cloudRunConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunConfig)(nil)).Elem()
}

func (i *cloudRunConfigPtrType) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return i.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (i *cloudRunConfigPtrType) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunConfigPtrOutput)
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigOutput struct{ *pulumi.OutputState }

func (CloudRunConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfig)(nil)).Elem()
}

func (o CloudRunConfigOutput) ToCloudRunConfigOutput() CloudRunConfigOutput {
	return o
}

func (o CloudRunConfigOutput) ToCloudRunConfigOutputWithContext(ctx context.Context) CloudRunConfigOutput {
	return o
}

func (o CloudRunConfigOutput) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return o.ToCloudRunConfigPtrOutputWithContext(context.Background())
}

func (o CloudRunConfigOutput) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudRunConfig) *CloudRunConfig {
		return &v
	}).(CloudRunConfigPtrOutput)
}

// Whether Cloud Run addon is enabled for this cluster.
func (o CloudRunConfigOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudRunConfig) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Which load balancer type is installed for Cloud Run.
func (o CloudRunConfigOutput) LoadBalancerType() CloudRunConfigLoadBalancerTypePtrOutput {
	return o.ApplyT(func(v CloudRunConfig) *CloudRunConfigLoadBalancerType { return v.LoadBalancerType }).(CloudRunConfigLoadBalancerTypePtrOutput)
}

type CloudRunConfigPtrOutput struct{ *pulumi.OutputState }

func (CloudRunConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunConfig)(nil)).Elem()
}

func (o CloudRunConfigPtrOutput) ToCloudRunConfigPtrOutput() CloudRunConfigPtrOutput {
	return o
}

func (o CloudRunConfigPtrOutput) ToCloudRunConfigPtrOutputWithContext(ctx context.Context) CloudRunConfigPtrOutput {
	return o
}

func (o CloudRunConfigPtrOutput) Elem() CloudRunConfigOutput {
	return o.ApplyT(func(v *CloudRunConfig) CloudRunConfig {
		if v != nil {
			return *v
		}
		var ret CloudRunConfig
		return ret
	}).(CloudRunConfigOutput)
}

// Whether Cloud Run addon is enabled for this cluster.
func (o CloudRunConfigPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudRunConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Which load balancer type is installed for Cloud Run.
func (o CloudRunConfigPtrOutput) LoadBalancerType() CloudRunConfigLoadBalancerTypePtrOutput {
	return o.ApplyT(func(v *CloudRunConfig) *CloudRunConfigLoadBalancerType {
		if v == nil {
			return nil
		}
		return v.LoadBalancerType
	}).(CloudRunConfigLoadBalancerTypePtrOutput)
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigResponse struct {
	// Whether Cloud Run addon is enabled for this cluster.
	Disabled bool `pulumi:"disabled"`
	// Which load balancer type is installed for Cloud Run.
	LoadBalancerType string `pulumi:"loadBalancerType"`
}

// Configuration options for the Cloud Run feature.
type CloudRunConfigResponseOutput struct{ *pulumi.OutputState }

func (CloudRunConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunConfigResponse)(nil)).Elem()
}

func (o CloudRunConfigResponseOutput) ToCloudRunConfigResponseOutput() CloudRunConfigResponseOutput {
	return o
}

func (o CloudRunConfigResponseOutput) ToCloudRunConfigResponseOutputWithContext(ctx context.Context) CloudRunConfigResponseOutput {
	return o
}

// Whether Cloud Run addon is enabled for this cluster.
func (o CloudRunConfigResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v CloudRunConfigResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Which load balancer type is installed for Cloud Run.
func (o CloudRunConfigResponseOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunConfigResponse) string { return v.LoadBalancerType }).(pulumi.StringOutput)
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscaling struct {
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
	AutoprovisioningLocations []string `pulumi:"autoprovisioningLocations"`
	// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
	AutoprovisioningNodePoolDefaults *AutoprovisioningNodePoolDefaults `pulumi:"autoprovisioningNodePoolDefaults"`
	// Defines autoscaling behaviour.
	AutoscalingProfile *ClusterAutoscalingAutoscalingProfile `pulumi:"autoscalingProfile"`
	// Enables automatic node pool creation and deletion.
	EnableNodeAutoprovisioning *bool `pulumi:"enableNodeAutoprovisioning"`
	// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
	ResourceLimits []ResourceLimit `pulumi:"resourceLimits"`
}

// ClusterAutoscalingInput is an input type that accepts ClusterAutoscalingArgs and ClusterAutoscalingOutput values.
// You can construct a concrete instance of `ClusterAutoscalingInput` via:
//
//	ClusterAutoscalingArgs{...}
type ClusterAutoscalingInput interface {
	pulumi.Input

	ToClusterAutoscalingOutput() ClusterAutoscalingOutput
	ToClusterAutoscalingOutputWithContext(context.Context) ClusterAutoscalingOutput
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingArgs struct {
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
	AutoprovisioningLocations pulumi.StringArrayInput `pulumi:"autoprovisioningLocations"`
	// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
	AutoprovisioningNodePoolDefaults AutoprovisioningNodePoolDefaultsPtrInput `pulumi:"autoprovisioningNodePoolDefaults"`
	// Defines autoscaling behaviour.
	AutoscalingProfile ClusterAutoscalingAutoscalingProfilePtrInput `pulumi:"autoscalingProfile"`
	// Enables automatic node pool creation and deletion.
	EnableNodeAutoprovisioning pulumi.BoolPtrInput `pulumi:"enableNodeAutoprovisioning"`
	// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
	ResourceLimits ResourceLimitArrayInput `pulumi:"resourceLimits"`
}

func (ClusterAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscaling)(nil)).Elem()
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingOutput() ClusterAutoscalingOutput {
	return i.ToClusterAutoscalingOutputWithContext(context.Background())
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingOutputWithContext(ctx context.Context) ClusterAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingOutput)
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return i.ToClusterAutoscalingPtrOutputWithContext(context.Background())
}

func (i ClusterAutoscalingArgs) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingOutput).ToClusterAutoscalingPtrOutputWithContext(ctx)
}

// ClusterAutoscalingPtrInput is an input type that accepts ClusterAutoscalingArgs, ClusterAutoscalingPtr and ClusterAutoscalingPtrOutput values.
// You can construct a concrete instance of `ClusterAutoscalingPtrInput` via:
//
//	        ClusterAutoscalingArgs{...}
//
//	or:
//
//	        nil
type ClusterAutoscalingPtrInput interface {
	pulumi.Input

	ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput
	ToClusterAutoscalingPtrOutputWithContext(context.Context) ClusterAutoscalingPtrOutput
}

type clusterAutoscalingPtrType ClusterAutoscalingArgs

func ClusterAutoscalingPtr(v *ClusterAutoscalingArgs) ClusterAutoscalingPtrInput {
	return (*clusterAutoscalingPtrType)(v)
}

func (*clusterAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscaling)(nil)).Elem()
}

func (i *clusterAutoscalingPtrType) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return i.ToClusterAutoscalingPtrOutputWithContext(context.Background())
}

func (i *clusterAutoscalingPtrType) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAutoscalingPtrOutput)
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscaling)(nil)).Elem()
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingOutput() ClusterAutoscalingOutput {
	return o
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingOutputWithContext(ctx context.Context) ClusterAutoscalingOutput {
	return o
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return o.ToClusterAutoscalingPtrOutputWithContext(context.Background())
}

func (o ClusterAutoscalingOutput) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterAutoscaling) *ClusterAutoscaling {
		return &v
	}).(ClusterAutoscalingPtrOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
func (o ClusterAutoscalingOutput) AutoprovisioningLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterAutoscaling) []string { return v.AutoprovisioningLocations }).(pulumi.StringArrayOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
func (o ClusterAutoscalingOutput) AutoprovisioningNodePoolDefaults() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ApplyT(func(v ClusterAutoscaling) *AutoprovisioningNodePoolDefaults {
		return v.AutoprovisioningNodePoolDefaults
	}).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// Defines autoscaling behaviour.
func (o ClusterAutoscalingOutput) AutoscalingProfile() ClusterAutoscalingAutoscalingProfilePtrOutput {
	return o.ApplyT(func(v ClusterAutoscaling) *ClusterAutoscalingAutoscalingProfile { return v.AutoscalingProfile }).(ClusterAutoscalingAutoscalingProfilePtrOutput)
}

// Enables automatic node pool creation and deletion.
func (o ClusterAutoscalingOutput) EnableNodeAutoprovisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterAutoscaling) *bool { return v.EnableNodeAutoprovisioning }).(pulumi.BoolPtrOutput)
}

// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
func (o ClusterAutoscalingOutput) ResourceLimits() ResourceLimitArrayOutput {
	return o.ApplyT(func(v ClusterAutoscaling) []ResourceLimit { return v.ResourceLimits }).(ResourceLimitArrayOutput)
}

type ClusterAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAutoscaling)(nil)).Elem()
}

func (o ClusterAutoscalingPtrOutput) ToClusterAutoscalingPtrOutput() ClusterAutoscalingPtrOutput {
	return o
}

func (o ClusterAutoscalingPtrOutput) ToClusterAutoscalingPtrOutputWithContext(ctx context.Context) ClusterAutoscalingPtrOutput {
	return o
}

func (o ClusterAutoscalingPtrOutput) Elem() ClusterAutoscalingOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) ClusterAutoscaling {
		if v != nil {
			return *v
		}
		var ret ClusterAutoscaling
		return ret
	}).(ClusterAutoscalingOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
func (o ClusterAutoscalingPtrOutput) AutoprovisioningLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) []string {
		if v == nil {
			return nil
		}
		return v.AutoprovisioningLocations
	}).(pulumi.StringArrayOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
func (o ClusterAutoscalingPtrOutput) AutoprovisioningNodePoolDefaults() AutoprovisioningNodePoolDefaultsPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) *AutoprovisioningNodePoolDefaults {
		if v == nil {
			return nil
		}
		return v.AutoprovisioningNodePoolDefaults
	}).(AutoprovisioningNodePoolDefaultsPtrOutput)
}

// Defines autoscaling behaviour.
func (o ClusterAutoscalingPtrOutput) AutoscalingProfile() ClusterAutoscalingAutoscalingProfilePtrOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) *ClusterAutoscalingAutoscalingProfile {
		if v == nil {
			return nil
		}
		return v.AutoscalingProfile
	}).(ClusterAutoscalingAutoscalingProfilePtrOutput)
}

// Enables automatic node pool creation and deletion.
func (o ClusterAutoscalingPtrOutput) EnableNodeAutoprovisioning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodeAutoprovisioning
	}).(pulumi.BoolPtrOutput)
}

// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
func (o ClusterAutoscalingPtrOutput) ResourceLimits() ResourceLimitArrayOutput {
	return o.ApplyT(func(v *ClusterAutoscaling) []ResourceLimit {
		if v == nil {
			return nil
		}
		return v.ResourceLimits
	}).(ResourceLimitArrayOutput)
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingResponse struct {
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
	AutoprovisioningLocations []string `pulumi:"autoprovisioningLocations"`
	// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
	AutoprovisioningNodePoolDefaults AutoprovisioningNodePoolDefaultsResponse `pulumi:"autoprovisioningNodePoolDefaults"`
	// Defines autoscaling behaviour.
	AutoscalingProfile string `pulumi:"autoscalingProfile"`
	// Enables automatic node pool creation and deletion.
	EnableNodeAutoprovisioning bool `pulumi:"enableNodeAutoprovisioning"`
	// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
	ResourceLimits []ResourceLimitResponse `pulumi:"resourceLimits"`
}

// ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
type ClusterAutoscalingResponseOutput struct{ *pulumi.OutputState }

func (ClusterAutoscalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAutoscalingResponse)(nil)).Elem()
}

func (o ClusterAutoscalingResponseOutput) ToClusterAutoscalingResponseOutput() ClusterAutoscalingResponseOutput {
	return o
}

func (o ClusterAutoscalingResponseOutput) ToClusterAutoscalingResponseOutputWithContext(ctx context.Context) ClusterAutoscalingResponseOutput {
	return o
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
func (o ClusterAutoscalingResponseOutput) AutoprovisioningLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterAutoscalingResponse) []string { return v.AutoprovisioningLocations }).(pulumi.StringArrayOutput)
}

// AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
func (o ClusterAutoscalingResponseOutput) AutoprovisioningNodePoolDefaults() AutoprovisioningNodePoolDefaultsResponseOutput {
	return o.ApplyT(func(v ClusterAutoscalingResponse) AutoprovisioningNodePoolDefaultsResponse {
		return v.AutoprovisioningNodePoolDefaults
	}).(AutoprovisioningNodePoolDefaultsResponseOutput)
}

// Defines autoscaling behaviour.
func (o ClusterAutoscalingResponseOutput) AutoscalingProfile() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAutoscalingResponse) string { return v.AutoscalingProfile }).(pulumi.StringOutput)
}

// Enables automatic node pool creation and deletion.
func (o ClusterAutoscalingResponseOutput) EnableNodeAutoprovisioning() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterAutoscalingResponse) bool { return v.EnableNodeAutoprovisioning }).(pulumi.BoolOutput)
}

// Contains global constraints regarding minimum and maximum amount of resources in the cluster.
func (o ClusterAutoscalingResponseOutput) ResourceLimits() ResourceLimitResponseArrayOutput {
	return o.ApplyT(func(v ClusterAutoscalingResponse) []ResourceLimitResponse { return v.ResourceLimits }).(ResourceLimitResponseArrayOutput)
}

// Configuration of network bandwidth tiers
type ClusterNetworkPerformanceConfig struct {
	// Specifies the total network bandwidth tier for NodePools in the cluster.
	TotalEgressBandwidthTier *ClusterNetworkPerformanceConfigTotalEgressBandwidthTier `pulumi:"totalEgressBandwidthTier"`
}

// ClusterNetworkPerformanceConfigInput is an input type that accepts ClusterNetworkPerformanceConfigArgs and ClusterNetworkPerformanceConfigOutput values.
// You can construct a concrete instance of `ClusterNetworkPerformanceConfigInput` via:
//
//	ClusterNetworkPerformanceConfigArgs{...}
type ClusterNetworkPerformanceConfigInput interface {
	pulumi.Input

	ToClusterNetworkPerformanceConfigOutput() ClusterNetworkPerformanceConfigOutput
	ToClusterNetworkPerformanceConfigOutputWithContext(context.Context) ClusterNetworkPerformanceConfigOutput
}

// Configuration of network bandwidth tiers
type ClusterNetworkPerformanceConfigArgs struct {
	// Specifies the total network bandwidth tier for NodePools in the cluster.
	TotalEgressBandwidthTier ClusterNetworkPerformanceConfigTotalEgressBandwidthTierPtrInput `pulumi:"totalEgressBandwidthTier"`
}

func (ClusterNetworkPerformanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNetworkPerformanceConfig)(nil)).Elem()
}

func (i ClusterNetworkPerformanceConfigArgs) ToClusterNetworkPerformanceConfigOutput() ClusterNetworkPerformanceConfigOutput {
	return i.ToClusterNetworkPerformanceConfigOutputWithContext(context.Background())
}

func (i ClusterNetworkPerformanceConfigArgs) ToClusterNetworkPerformanceConfigOutputWithContext(ctx context.Context) ClusterNetworkPerformanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNetworkPerformanceConfigOutput)
}

func (i ClusterNetworkPerformanceConfigArgs) ToClusterNetworkPerformanceConfigPtrOutput() ClusterNetworkPerformanceConfigPtrOutput {
	return i.ToClusterNetworkPerformanceConfigPtrOutputWithContext(context.Background())
}

func (i ClusterNetworkPerformanceConfigArgs) ToClusterNetworkPerformanceConfigPtrOutputWithContext(ctx context.Context) ClusterNetworkPerformanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNetworkPerformanceConfigOutput).ToClusterNetworkPerformanceConfigPtrOutputWithContext(ctx)
}

// ClusterNetworkPerformanceConfigPtrInput is an input type that accepts ClusterNetworkPerformanceConfigArgs, ClusterNetworkPerformanceConfigPtr and ClusterNetworkPerformanceConfigPtrOutput values.
// You can construct a concrete instance of `ClusterNetworkPerformanceConfigPtrInput` via:
//
//	        ClusterNetworkPerformanceConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterNetworkPerformanceConfigPtrInput interface {
	pulumi.Input

	ToClusterNetworkPerformanceConfigPtrOutput() ClusterNetworkPerformanceConfigPtrOutput
	ToClusterNetworkPerformanceConfigPtrOutputWithContext(context.Context) ClusterNetworkPerformanceConfigPtrOutput
}

type clusterNetworkPerformanceConfigPtrType ClusterNetworkPerformanceConfigArgs

func ClusterNetworkPerformanceConfigPtr(v *ClusterNetworkPerformanceConfigArgs) ClusterNetworkPerformanceConfigPtrInput {
	return (*clusterNetworkPerformanceConfigPtrType)(v)
}

func (*clusterNetworkPerformanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNetworkPerformanceConfig)(nil)).Elem()
}

func (i *clusterNetworkPerformanceConfigPtrType) ToClusterNetworkPerformanceConfigPtrOutput() ClusterNetworkPerformanceConfigPtrOutput {
	return i.ToClusterNetworkPerformanceConfigPtrOutputWithContext(context.Background())
}

func (i *clusterNetworkPerformanceConfigPtrType) ToClusterNetworkPerformanceConfigPtrOutputWithContext(ctx context.Context) ClusterNetworkPerformanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNetworkPerformanceConfigPtrOutput)
}

// Configuration of network bandwidth tiers
type ClusterNetworkPerformanceConfigOutput struct{ *pulumi.OutputState }

func (ClusterNetworkPerformanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNetworkPerformanceConfig)(nil)).Elem()
}

func (o ClusterNetworkPerformanceConfigOutput) ToClusterNetworkPerformanceConfigOutput() ClusterNetworkPerformanceConfigOutput {
	return o
}

func (o ClusterNetworkPerformanceConfigOutput) ToClusterNetworkPerformanceConfigOutputWithContext(ctx context.Context) ClusterNetworkPerformanceConfigOutput {
	return o
}

func (o ClusterNetworkPerformanceConfigOutput) ToClusterNetworkPerformanceConfigPtrOutput() ClusterNetworkPerformanceConfigPtrOutput {
	return o.ToClusterNetworkPerformanceConfigPtrOutputWithContext(context.Background())
}

func (o ClusterNetworkPerformanceConfigOutput) ToClusterNetworkPerformanceConfigPtrOutputWithContext(ctx context.Context) ClusterNetworkPerformanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterNetworkPerformanceConfig) *ClusterNetworkPerformanceConfig {
		return &v
	}).(ClusterNetworkPerformanceConfigPtrOutput)
}

// Specifies the total network bandwidth tier for NodePools in the cluster.
func (o ClusterNetworkPerformanceConfigOutput) TotalEgressBandwidthTier() ClusterNetworkPerformanceConfigTotalEgressBandwidthTierPtrOutput {
	return o.ApplyT(func(v ClusterNetworkPerformanceConfig) *ClusterNetworkPerformanceConfigTotalEgressBandwidthTier {
		return v.TotalEgressBandwidthTier
	}).(ClusterNetworkPerformanceConfigTotalEgressBandwidthTierPtrOutput)
}

type ClusterNetworkPerformanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterNetworkPerformanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNetworkPerformanceConfig)(nil)).Elem()
}

func (o ClusterNetworkPerformanceConfigPtrOutput) ToClusterNetworkPerformanceConfigPtrOutput() ClusterNetworkPerformanceConfigPtrOutput {
	return o
}

func (o ClusterNetworkPerformanceConfigPtrOutput) ToClusterNetworkPerformanceConfigPtrOutputWithContext(ctx context.Context) ClusterNetworkPerformanceConfigPtrOutput {
	return o
}

func (o ClusterNetworkPerformanceConfigPtrOutput) Elem() ClusterNetworkPerformanceConfigOutput {
	return o.ApplyT(func(v *ClusterNetworkPerformanceConfig) ClusterNetworkPerformanceConfig {
		if v != nil {
			return *v
		}
		var ret ClusterNetworkPerformanceConfig
		return ret
	}).(ClusterNetworkPerformanceConfigOutput)
}

// Specifies the total network bandwidth tier for NodePools in the cluster.
func (o ClusterNetworkPerformanceConfigPtrOutput) TotalEgressBandwidthTier() ClusterNetworkPerformanceConfigTotalEgressBandwidthTierPtrOutput {
	return o.ApplyT(func(v *ClusterNetworkPerformanceConfig) *ClusterNetworkPerformanceConfigTotalEgressBandwidthTier {
		if v == nil {
			return nil
		}
		return v.TotalEgressBandwidthTier
	}).(ClusterNetworkPerformanceConfigTotalEgressBandwidthTierPtrOutput)
}

// Configuration of network bandwidth tiers
type ClusterNetworkPerformanceConfigResponse struct {
	// Specifies the total network bandwidth tier for NodePools in the cluster.
	TotalEgressBandwidthTier string `pulumi:"totalEgressBandwidthTier"`
}

// Configuration of network bandwidth tiers
type ClusterNetworkPerformanceConfigResponseOutput struct{ *pulumi.OutputState }

func (ClusterNetworkPerformanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNetworkPerformanceConfigResponse)(nil)).Elem()
}

func (o ClusterNetworkPerformanceConfigResponseOutput) ToClusterNetworkPerformanceConfigResponseOutput() ClusterNetworkPerformanceConfigResponseOutput {
	return o
}

func (o ClusterNetworkPerformanceConfigResponseOutput) ToClusterNetworkPerformanceConfigResponseOutputWithContext(ctx context.Context) ClusterNetworkPerformanceConfigResponseOutput {
	return o
}

// Specifies the total network bandwidth tier for NodePools in the cluster.
func (o ClusterNetworkPerformanceConfigResponseOutput) TotalEgressBandwidthTier() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNetworkPerformanceConfigResponse) string { return v.TotalEgressBandwidthTier }).(pulumi.StringOutput)
}

// ClusterUpdate describes an update to the cluster. Exactly one update can be applied to a cluster with each request, so at most one field can be provided.
type ClusterUpdate struct {
	// The additional pod ranges to be added to the cluster. These pod ranges can be used by node pools to allocate pod IPs.
	AdditionalPodRangesConfig *AdditionalPodRangesConfig `pulumi:"additionalPodRangesConfig"`
	// Configurations for the various addons available to run in the cluster.
	DesiredAddonsConfig *AddonsConfig `pulumi:"desiredAddonsConfig"`
	// The desired authenticator groups config for the cluster.
	DesiredAuthenticatorGroupsConfig *AuthenticatorGroupsConfig `pulumi:"desiredAuthenticatorGroupsConfig"`
	// The desired workload policy configuration for the autopilot cluster.
	DesiredAutopilotWorkloadPolicyConfig *WorkloadPolicyConfig `pulumi:"desiredAutopilotWorkloadPolicyConfig"`
	// The desired configuration options for the Binary Authorization feature.
	DesiredBinaryAuthorization *BinaryAuthorization `pulumi:"desiredBinaryAuthorization"`
	// Cluster-level autoscaling configuration.
	DesiredClusterAutoscaling *ClusterAutoscaling `pulumi:"desiredClusterAutoscaling"`
	// The desired configuration for the fine-grained cost management feature.
	DesiredCostManagementConfig *CostManagementConfig `pulumi:"desiredCostManagementConfig"`
	// Configuration of etcd encryption.
	DesiredDatabaseEncryption *DatabaseEncryption `pulumi:"desiredDatabaseEncryption"`
	// The desired datapath provider for the cluster.
	DesiredDatapathProvider *ClusterUpdateDesiredDatapathProvider `pulumi:"desiredDatapathProvider"`
	// The desired status of whether to disable default sNAT for this cluster.
	DesiredDefaultSnatStatus *DefaultSnatStatus `pulumi:"desiredDefaultSnatStatus"`
	// DNSConfig contains clusterDNS config for this cluster.
	DesiredDnsConfig *DNSConfig `pulumi:"desiredDnsConfig"`
	// Enable/Disable FQDN Network Policy for the cluster.
	DesiredEnableFqdnNetworkPolicy *bool `pulumi:"desiredEnableFqdnNetworkPolicy"`
	// Enable/Disable private endpoint for the cluster's master.
	DesiredEnablePrivateEndpoint *bool `pulumi:"desiredEnablePrivateEndpoint"`
	// The desired fleet configuration for the cluster.
	DesiredFleet *Fleet `pulumi:"desiredFleet"`
	// The desired config of Gateway API on this cluster.
	DesiredGatewayApiConfig *GatewayAPIConfig `pulumi:"desiredGatewayApiConfig"`
	// The desired GCFS config for the cluster
	DesiredGcfsConfig *GcfsConfig `pulumi:"desiredGcfsConfig"`
	// The desired Identity Service component configuration.
	DesiredIdentityServiceConfig *IdentityServiceConfig `pulumi:"desiredIdentityServiceConfig"`
	// The desired image type for the node pool. NOTE: Set the "desired_node_pool" field as well.
	DesiredImageType *string `pulumi:"desiredImageType"`
	// The desired config of Intra-node visibility.
	DesiredIntraNodeVisibilityConfig *IntraNodeVisibilityConfig `pulumi:"desiredIntraNodeVisibilityConfig"`
	// Desired Beta APIs to be enabled for cluster.
	DesiredK8sBetaApis *K8sBetaAPIConfig `pulumi:"desiredK8sBetaApis"`
	// The desired L4 Internal Load Balancer Subsetting configuration.
	DesiredL4ilbSubsettingConfig *ILBSubsettingConfig `pulumi:"desiredL4ilbSubsettingConfig"`
	// The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This list must always include the cluster's primary zone. Warning: changing cluster locations will update the locations of all node pools and will result in nodes being added and/or removed.
	DesiredLocations []string `pulumi:"desiredLocations"`
	// The desired logging configuration.
	DesiredLoggingConfig *LoggingConfig `pulumi:"desiredLoggingConfig"`
	// The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
	DesiredLoggingService *string `pulumi:"desiredLoggingService"`
	// The desired configuration options for master authorized networks feature.
	DesiredMasterAuthorizedNetworksConfig *MasterAuthorizedNetworksConfig `pulumi:"desiredMasterAuthorizedNetworksConfig"`
	// The Kubernetes version to change the master to. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the default Kubernetes version
	DesiredMasterVersion *string `pulumi:"desiredMasterVersion"`
	// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
	DesiredMeshCertificates *MeshCertificates `pulumi:"desiredMeshCertificates"`
	// The desired monitoring configuration.
	DesiredMonitoringConfig *MonitoringConfig `pulumi:"desiredMonitoringConfig"`
	// The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
	DesiredMonitoringService *string `pulumi:"desiredMonitoringService"`
	// The desired network performance config.
	DesiredNetworkPerformanceConfig *ClusterNetworkPerformanceConfig `pulumi:"desiredNetworkPerformanceConfig"`
	// The desired network tags that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters.
	DesiredNodePoolAutoConfigNetworkTags *NetworkTags `pulumi:"desiredNodePoolAutoConfigNetworkTags"`
	// The desired resource manager tags that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters.
	DesiredNodePoolAutoConfigResourceManagerTags *ResourceManagerTags `pulumi:"desiredNodePoolAutoConfigResourceManagerTags"`
	// Autoscaler configuration for the node pool specified in desired_node_pool_id. If there is only one pool in the cluster and desired_node_pool_id is not provided then the change applies to that single node pool.
	DesiredNodePoolAutoscaling *NodePoolAutoscaling `pulumi:"desiredNodePoolAutoscaling"`
	// The node pool to be upgraded. This field is mandatory if "desired_node_version", "desired_image_family" or "desired_node_pool_autoscaling" is specified and there is more than one node pool on the cluster.
	DesiredNodePoolId *string `pulumi:"desiredNodePoolId"`
	// The desired node pool logging configuration defaults for the cluster.
	DesiredNodePoolLoggingConfig *NodePoolLoggingConfig `pulumi:"desiredNodePoolLoggingConfig"`
	// The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "-": picks the Kubernetes master version
	DesiredNodeVersion *string `pulumi:"desiredNodeVersion"`
	// The desired notification configuration.
	DesiredNotificationConfig *NotificationConfig `pulumi:"desiredNotificationConfig"`
	// The desired parent product config for the cluster.
	DesiredParentProductConfig *ParentProductConfig `pulumi:"desiredParentProductConfig"`
	// The desired private cluster configuration.
	DesiredPrivateClusterConfig *PrivateClusterConfig `pulumi:"desiredPrivateClusterConfig"`
	// The desired state of IPv6 connectivity to Google Services.
	DesiredPrivateIpv6GoogleAccess *ClusterUpdateDesiredPrivateIpv6GoogleAccess `pulumi:"desiredPrivateIpv6GoogleAccess"`
	// The desired release channel configuration.
	DesiredReleaseChannel *ReleaseChannel `pulumi:"desiredReleaseChannel"`
	// The desired configuration for exporting resource usage.
	DesiredResourceUsageExportConfig *ResourceUsageExportConfig `pulumi:"desiredResourceUsageExportConfig"`
	// Enable/Disable Security Posture API features for the cluster.
	DesiredSecurityPostureConfig *SecurityPostureConfig `pulumi:"desiredSecurityPostureConfig"`
	// ServiceExternalIPsConfig specifies the config for the use of Services with ExternalIPs field.
	DesiredServiceExternalIpsConfig *ServiceExternalIPsConfig `pulumi:"desiredServiceExternalIpsConfig"`
	// Configuration for Shielded Nodes.
	DesiredShieldedNodes *ShieldedNodes `pulumi:"desiredShieldedNodes"`
	// The desired stack type of the cluster. If a stack type is provided and does not match the current stack type of the cluster, update will attempt to change the stack type to the new type.
	DesiredStackType *ClusterUpdateDesiredStackType `pulumi:"desiredStackType"`
	// Cluster-level Vertical Pod Autoscaling configuration.
	DesiredVerticalPodAutoscaling *VerticalPodAutoscaling `pulumi:"desiredVerticalPodAutoscaling"`
	// Configuration for Workload Identity.
	DesiredWorkloadIdentityConfig *WorkloadIdentityConfig `pulumi:"desiredWorkloadIdentityConfig"`
	// Kubernetes open source beta apis enabled on the cluster. Only beta apis
	EnableK8sBetaApis *K8sBetaAPIConfig `pulumi:"enableK8sBetaApis"`
	// The current etag of the cluster. If an etag is provided and does not match the current etag of the cluster, update will be blocked and an ABORTED error will be returned.
	Etag *string `pulumi:"etag"`
	// The additional pod ranges that are to be removed from the cluster. The pod ranges specified here must have been specified earlier in the 'additional_pod_ranges_config' argument.
	RemovedAdditionalPodRangesConfig *AdditionalPodRangesConfig `pulumi:"removedAdditionalPodRangesConfig"`
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodes struct {
	// Whether Confidential Nodes feature is enabled.
	Enabled *bool `pulumi:"enabled"`
}

// ConfidentialNodesInput is an input type that accepts ConfidentialNodesArgs and ConfidentialNodesOutput values.
// You can construct a concrete instance of `ConfidentialNodesInput` via:
//
//	ConfidentialNodesArgs{...}
type ConfidentialNodesInput interface {
	pulumi.Input

	ToConfidentialNodesOutput() ConfidentialNodesOutput
	ToConfidentialNodesOutputWithContext(context.Context) ConfidentialNodesOutput
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodesArgs struct {
	// Whether Confidential Nodes feature is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ConfidentialNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialNodes)(nil)).Elem()
}

func (i ConfidentialNodesArgs) ToConfidentialNodesOutput() ConfidentialNodesOutput {
	return i.ToConfidentialNodesOutputWithContext(context.Background())
}

func (i ConfidentialNodesArgs) ToConfidentialNodesOutputWithContext(ctx context.Context) ConfidentialNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialNodesOutput)
}

func (i ConfidentialNodesArgs) ToConfidentialNodesPtrOutput() ConfidentialNodesPtrOutput {
	return i.ToConfidentialNodesPtrOutputWithContext(context.Background())
}

func (i ConfidentialNodesArgs) ToConfidentialNodesPtrOutputWithContext(ctx context.Context) ConfidentialNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialNodesOutput).ToConfidentialNodesPtrOutputWithContext(ctx)
}

// ConfidentialNodesPtrInput is an input type that accepts ConfidentialNodesArgs, ConfidentialNodesPtr and ConfidentialNodesPtrOutput values.
// You can construct a concrete instance of `ConfidentialNodesPtrInput` via:
//
//	        ConfidentialNodesArgs{...}
//
//	or:
//
//	        nil
type ConfidentialNodesPtrInput interface {
	pulumi.Input

	ToConfidentialNodesPtrOutput() ConfidentialNodesPtrOutput
	ToConfidentialNodesPtrOutputWithContext(context.Context) ConfidentialNodesPtrOutput
}

type confidentialNodesPtrType ConfidentialNodesArgs

func ConfidentialNodesPtr(v *ConfidentialNodesArgs) ConfidentialNodesPtrInput {
	return (*confidentialNodesPtrType)(v)
}

func (*confidentialNodesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidentialNodes)(nil)).Elem()
}

func (i *confidentialNodesPtrType) ToConfidentialNodesPtrOutput() ConfidentialNodesPtrOutput {
	return i.ToConfidentialNodesPtrOutputWithContext(context.Background())
}

func (i *confidentialNodesPtrType) ToConfidentialNodesPtrOutputWithContext(ctx context.Context) ConfidentialNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialNodesPtrOutput)
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodesOutput struct{ *pulumi.OutputState }

func (ConfidentialNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialNodes)(nil)).Elem()
}

func (o ConfidentialNodesOutput) ToConfidentialNodesOutput() ConfidentialNodesOutput {
	return o
}

func (o ConfidentialNodesOutput) ToConfidentialNodesOutputWithContext(ctx context.Context) ConfidentialNodesOutput {
	return o
}

func (o ConfidentialNodesOutput) ToConfidentialNodesPtrOutput() ConfidentialNodesPtrOutput {
	return o.ToConfidentialNodesPtrOutputWithContext(context.Background())
}

func (o ConfidentialNodesOutput) ToConfidentialNodesPtrOutputWithContext(ctx context.Context) ConfidentialNodesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfidentialNodes) *ConfidentialNodes {
		return &v
	}).(ConfidentialNodesPtrOutput)
}

// Whether Confidential Nodes feature is enabled.
func (o ConfidentialNodesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfidentialNodes) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ConfidentialNodesPtrOutput struct{ *pulumi.OutputState }

func (ConfidentialNodesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidentialNodes)(nil)).Elem()
}

func (o ConfidentialNodesPtrOutput) ToConfidentialNodesPtrOutput() ConfidentialNodesPtrOutput {
	return o
}

func (o ConfidentialNodesPtrOutput) ToConfidentialNodesPtrOutputWithContext(ctx context.Context) ConfidentialNodesPtrOutput {
	return o
}

func (o ConfidentialNodesPtrOutput) Elem() ConfidentialNodesOutput {
	return o.ApplyT(func(v *ConfidentialNodes) ConfidentialNodes {
		if v != nil {
			return *v
		}
		var ret ConfidentialNodes
		return ret
	}).(ConfidentialNodesOutput)
}

// Whether Confidential Nodes feature is enabled.
func (o ConfidentialNodesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfidentialNodes) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodesResponse struct {
	// Whether Confidential Nodes feature is enabled.
	Enabled bool `pulumi:"enabled"`
}

// ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.
type ConfidentialNodesResponseOutput struct{ *pulumi.OutputState }

func (ConfidentialNodesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialNodesResponse)(nil)).Elem()
}

func (o ConfidentialNodesResponseOutput) ToConfidentialNodesResponseOutput() ConfidentialNodesResponseOutput {
	return o
}

func (o ConfidentialNodesResponseOutput) ToConfidentialNodesResponseOutputWithContext(ctx context.Context) ConfidentialNodesResponseOutput {
	return o
}

// Whether Confidential Nodes feature is enabled.
func (o ConfidentialNodesResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfidentialNodesResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfig struct {
	// Whether Cloud Connector is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// ConfigConnectorConfigInput is an input type that accepts ConfigConnectorConfigArgs and ConfigConnectorConfigOutput values.
// You can construct a concrete instance of `ConfigConnectorConfigInput` via:
//
//	ConfigConnectorConfigArgs{...}
type ConfigConnectorConfigInput interface {
	pulumi.Input

	ToConfigConnectorConfigOutput() ConfigConnectorConfigOutput
	ToConfigConnectorConfigOutputWithContext(context.Context) ConfigConnectorConfigOutput
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigArgs struct {
	// Whether Cloud Connector is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ConfigConnectorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConnectorConfig)(nil)).Elem()
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigOutput() ConfigConnectorConfigOutput {
	return i.ToConfigConnectorConfigOutputWithContext(context.Background())
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigOutputWithContext(ctx context.Context) ConfigConnectorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigOutput)
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return i.ToConfigConnectorConfigPtrOutputWithContext(context.Background())
}

func (i ConfigConnectorConfigArgs) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigOutput).ToConfigConnectorConfigPtrOutputWithContext(ctx)
}

// ConfigConnectorConfigPtrInput is an input type that accepts ConfigConnectorConfigArgs, ConfigConnectorConfigPtr and ConfigConnectorConfigPtrOutput values.
// You can construct a concrete instance of `ConfigConnectorConfigPtrInput` via:
//
//	        ConfigConnectorConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigConnectorConfigPtrInput interface {
	pulumi.Input

	ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput
	ToConfigConnectorConfigPtrOutputWithContext(context.Context) ConfigConnectorConfigPtrOutput
}

type configConnectorConfigPtrType ConfigConnectorConfigArgs

func ConfigConnectorConfigPtr(v *ConfigConnectorConfigArgs) ConfigConnectorConfigPtrInput {
	return (*configConnectorConfigPtrType)(v)
}

func (*configConnectorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigConnectorConfig)(nil)).Elem()
}

func (i *configConnectorConfigPtrType) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return i.ToConfigConnectorConfigPtrOutputWithContext(context.Background())
}

func (i *configConnectorConfigPtrType) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigConnectorConfigPtrOutput)
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigOutput struct{ *pulumi.OutputState }

func (ConfigConnectorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConnectorConfig)(nil)).Elem()
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigOutput() ConfigConnectorConfigOutput {
	return o
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigOutputWithContext(ctx context.Context) ConfigConnectorConfigOutput {
	return o
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return o.ToConfigConnectorConfigPtrOutputWithContext(context.Background())
}

func (o ConfigConnectorConfigOutput) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigConnectorConfig) *ConfigConnectorConfig {
		return &v
	}).(ConfigConnectorConfigPtrOutput)
}

// Whether Cloud Connector is enabled for this cluster.
func (o ConfigConnectorConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigConnectorConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ConfigConnectorConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigConnectorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigConnectorConfig)(nil)).Elem()
}

func (o ConfigConnectorConfigPtrOutput) ToConfigConnectorConfigPtrOutput() ConfigConnectorConfigPtrOutput {
	return o
}

func (o ConfigConnectorConfigPtrOutput) ToConfigConnectorConfigPtrOutputWithContext(ctx context.Context) ConfigConnectorConfigPtrOutput {
	return o
}

func (o ConfigConnectorConfigPtrOutput) Elem() ConfigConnectorConfigOutput {
	return o.ApplyT(func(v *ConfigConnectorConfig) ConfigConnectorConfig {
		if v != nil {
			return *v
		}
		var ret ConfigConnectorConfig
		return ret
	}).(ConfigConnectorConfigOutput)
}

// Whether Cloud Connector is enabled for this cluster.
func (o ConfigConnectorConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigConnectorConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigResponse struct {
	// Whether Cloud Connector is enabled for this cluster.
	Enabled bool `pulumi:"enabled"`
}

// Configuration options for the Config Connector add-on.
type ConfigConnectorConfigResponseOutput struct{ *pulumi.OutputState }

func (ConfigConnectorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigConnectorConfigResponse)(nil)).Elem()
}

func (o ConfigConnectorConfigResponseOutput) ToConfigConnectorConfigResponseOutput() ConfigConnectorConfigResponseOutput {
	return o
}

func (o ConfigConnectorConfigResponseOutput) ToConfigConnectorConfigResponseOutputWithContext(ctx context.Context) ConfigConnectorConfigResponseOutput {
	return o
}

// Whether Cloud Connector is enabled for this cluster.
func (o ConfigConnectorConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigConnectorConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfig struct {
	// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
	Enabled *bool `pulumi:"enabled"`
}

// ConsumptionMeteringConfigInput is an input type that accepts ConsumptionMeteringConfigArgs and ConsumptionMeteringConfigOutput values.
// You can construct a concrete instance of `ConsumptionMeteringConfigInput` via:
//
//	ConsumptionMeteringConfigArgs{...}
type ConsumptionMeteringConfigInput interface {
	pulumi.Input

	ToConsumptionMeteringConfigOutput() ConsumptionMeteringConfigOutput
	ToConsumptionMeteringConfigOutputWithContext(context.Context) ConsumptionMeteringConfigOutput
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigArgs struct {
	// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ConsumptionMeteringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumptionMeteringConfig)(nil)).Elem()
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigOutput() ConsumptionMeteringConfigOutput {
	return i.ToConsumptionMeteringConfigOutputWithContext(context.Background())
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigOutputWithContext(ctx context.Context) ConsumptionMeteringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigOutput)
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return i.ToConsumptionMeteringConfigPtrOutputWithContext(context.Background())
}

func (i ConsumptionMeteringConfigArgs) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigOutput).ToConsumptionMeteringConfigPtrOutputWithContext(ctx)
}

// ConsumptionMeteringConfigPtrInput is an input type that accepts ConsumptionMeteringConfigArgs, ConsumptionMeteringConfigPtr and ConsumptionMeteringConfigPtrOutput values.
// You can construct a concrete instance of `ConsumptionMeteringConfigPtrInput` via:
//
//	        ConsumptionMeteringConfigArgs{...}
//
//	or:
//
//	        nil
type ConsumptionMeteringConfigPtrInput interface {
	pulumi.Input

	ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput
	ToConsumptionMeteringConfigPtrOutputWithContext(context.Context) ConsumptionMeteringConfigPtrOutput
}

type consumptionMeteringConfigPtrType ConsumptionMeteringConfigArgs

func ConsumptionMeteringConfigPtr(v *ConsumptionMeteringConfigArgs) ConsumptionMeteringConfigPtrInput {
	return (*consumptionMeteringConfigPtrType)(v)
}

func (*consumptionMeteringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionMeteringConfig)(nil)).Elem()
}

func (i *consumptionMeteringConfigPtrType) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return i.ToConsumptionMeteringConfigPtrOutputWithContext(context.Background())
}

func (i *consumptionMeteringConfigPtrType) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumptionMeteringConfigPtrOutput)
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigOutput struct{ *pulumi.OutputState }

func (ConsumptionMeteringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumptionMeteringConfig)(nil)).Elem()
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigOutput() ConsumptionMeteringConfigOutput {
	return o
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigOutputWithContext(ctx context.Context) ConsumptionMeteringConfigOutput {
	return o
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return o.ToConsumptionMeteringConfigPtrOutputWithContext(context.Background())
}

func (o ConsumptionMeteringConfigOutput) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConsumptionMeteringConfig) *ConsumptionMeteringConfig {
		return &v
	}).(ConsumptionMeteringConfigPtrOutput)
}

// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
func (o ConsumptionMeteringConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConsumptionMeteringConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ConsumptionMeteringConfigPtrOutput struct{ *pulumi.OutputState }

func (ConsumptionMeteringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumptionMeteringConfig)(nil)).Elem()
}

func (o ConsumptionMeteringConfigPtrOutput) ToConsumptionMeteringConfigPtrOutput() ConsumptionMeteringConfigPtrOutput {
	return o
}

func (o ConsumptionMeteringConfigPtrOutput) ToConsumptionMeteringConfigPtrOutputWithContext(ctx context.Context) ConsumptionMeteringConfigPtrOutput {
	return o
}

func (o ConsumptionMeteringConfigPtrOutput) Elem() ConsumptionMeteringConfigOutput {
	return o.ApplyT(func(v *ConsumptionMeteringConfig) ConsumptionMeteringConfig {
		if v != nil {
			return *v
		}
		var ret ConsumptionMeteringConfig
		return ret
	}).(ConsumptionMeteringConfigOutput)
}

// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
func (o ConsumptionMeteringConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConsumptionMeteringConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigResponse struct {
	// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
	Enabled bool `pulumi:"enabled"`
}

// Parameters for controlling consumption metering.
type ConsumptionMeteringConfigResponseOutput struct{ *pulumi.OutputState }

func (ConsumptionMeteringConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumptionMeteringConfigResponse)(nil)).Elem()
}

func (o ConsumptionMeteringConfigResponseOutput) ToConsumptionMeteringConfigResponseOutput() ConsumptionMeteringConfigResponseOutput {
	return o
}

func (o ConsumptionMeteringConfigResponseOutput) ToConsumptionMeteringConfigResponseOutputWithContext(ctx context.Context) ConsumptionMeteringConfigResponseOutput {
	return o
}

// Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records.
func (o ConsumptionMeteringConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConsumptionMeteringConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Configuration for fine-grained cost management feature.
type CostManagementConfig struct {
	// Whether the feature is enabled or not.
	Enabled *bool `pulumi:"enabled"`
}

// CostManagementConfigInput is an input type that accepts CostManagementConfigArgs and CostManagementConfigOutput values.
// You can construct a concrete instance of `CostManagementConfigInput` via:
//
//	CostManagementConfigArgs{...}
type CostManagementConfigInput interface {
	pulumi.Input

	ToCostManagementConfigOutput() CostManagementConfigOutput
	ToCostManagementConfigOutputWithContext(context.Context) CostManagementConfigOutput
}

// Configuration for fine-grained cost management feature.
type CostManagementConfigArgs struct {
	// Whether the feature is enabled or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (CostManagementConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CostManagementConfig)(nil)).Elem()
}

func (i CostManagementConfigArgs) ToCostManagementConfigOutput() CostManagementConfigOutput {
	return i.ToCostManagementConfigOutputWithContext(context.Background())
}

func (i CostManagementConfigArgs) ToCostManagementConfigOutputWithContext(ctx context.Context) CostManagementConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostManagementConfigOutput)
}

func (i CostManagementConfigArgs) ToCostManagementConfigPtrOutput() CostManagementConfigPtrOutput {
	return i.ToCostManagementConfigPtrOutputWithContext(context.Background())
}

func (i CostManagementConfigArgs) ToCostManagementConfigPtrOutputWithContext(ctx context.Context) CostManagementConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostManagementConfigOutput).ToCostManagementConfigPtrOutputWithContext(ctx)
}

// CostManagementConfigPtrInput is an input type that accepts CostManagementConfigArgs, CostManagementConfigPtr and CostManagementConfigPtrOutput values.
// You can construct a concrete instance of `CostManagementConfigPtrInput` via:
//
//	        CostManagementConfigArgs{...}
//
//	or:
//
//	        nil
type CostManagementConfigPtrInput interface {
	pulumi.Input

	ToCostManagementConfigPtrOutput() CostManagementConfigPtrOutput
	ToCostManagementConfigPtrOutputWithContext(context.Context) CostManagementConfigPtrOutput
}

type costManagementConfigPtrType CostManagementConfigArgs

func CostManagementConfigPtr(v *CostManagementConfigArgs) CostManagementConfigPtrInput {
	return (*costManagementConfigPtrType)(v)
}

func (*costManagementConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CostManagementConfig)(nil)).Elem()
}

func (i *costManagementConfigPtrType) ToCostManagementConfigPtrOutput() CostManagementConfigPtrOutput {
	return i.ToCostManagementConfigPtrOutputWithContext(context.Background())
}

func (i *costManagementConfigPtrType) ToCostManagementConfigPtrOutputWithContext(ctx context.Context) CostManagementConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CostManagementConfigPtrOutput)
}

// Configuration for fine-grained cost management feature.
type CostManagementConfigOutput struct{ *pulumi.OutputState }

func (CostManagementConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostManagementConfig)(nil)).Elem()
}

func (o CostManagementConfigOutput) ToCostManagementConfigOutput() CostManagementConfigOutput {
	return o
}

func (o CostManagementConfigOutput) ToCostManagementConfigOutputWithContext(ctx context.Context) CostManagementConfigOutput {
	return o
}

func (o CostManagementConfigOutput) ToCostManagementConfigPtrOutput() CostManagementConfigPtrOutput {
	return o.ToCostManagementConfigPtrOutputWithContext(context.Background())
}

func (o CostManagementConfigOutput) ToCostManagementConfigPtrOutputWithContext(ctx context.Context) CostManagementConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CostManagementConfig) *CostManagementConfig {
		return &v
	}).(CostManagementConfigPtrOutput)
}

// Whether the feature is enabled or not.
func (o CostManagementConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CostManagementConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type CostManagementConfigPtrOutput struct{ *pulumi.OutputState }

func (CostManagementConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CostManagementConfig)(nil)).Elem()
}

func (o CostManagementConfigPtrOutput) ToCostManagementConfigPtrOutput() CostManagementConfigPtrOutput {
	return o
}

func (o CostManagementConfigPtrOutput) ToCostManagementConfigPtrOutputWithContext(ctx context.Context) CostManagementConfigPtrOutput {
	return o
}

func (o CostManagementConfigPtrOutput) Elem() CostManagementConfigOutput {
	return o.ApplyT(func(v *CostManagementConfig) CostManagementConfig {
		if v != nil {
			return *v
		}
		var ret CostManagementConfig
		return ret
	}).(CostManagementConfigOutput)
}

// Whether the feature is enabled or not.
func (o CostManagementConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CostManagementConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for fine-grained cost management feature.
type CostManagementConfigResponse struct {
	// Whether the feature is enabled or not.
	Enabled bool `pulumi:"enabled"`
}

// Configuration for fine-grained cost management feature.
type CostManagementConfigResponseOutput struct{ *pulumi.OutputState }

func (CostManagementConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CostManagementConfigResponse)(nil)).Elem()
}

func (o CostManagementConfigResponseOutput) ToCostManagementConfigResponseOutput() CostManagementConfigResponseOutput {
	return o
}

func (o CostManagementConfigResponseOutput) ToCostManagementConfigResponseOutputWithContext(ctx context.Context) CostManagementConfigResponseOutput {
	return o
}

// Whether the feature is enabled or not.
func (o CostManagementConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v CostManagementConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// DNSConfig contains the desired set of options for configuring clusterDNS.
type DNSConfig struct {
	// cluster_dns indicates which in-cluster DNS provider should be used.
	ClusterDns *DNSConfigClusterDns `pulumi:"clusterDns"`
	// cluster_dns_domain is the suffix used for all cluster service records.
	ClusterDnsDomain *string `pulumi:"clusterDnsDomain"`
	// cluster_dns_scope indicates the scope of access to cluster DNS records.
	ClusterDnsScope *DNSConfigClusterDnsScope `pulumi:"clusterDnsScope"`
}

// DNSConfigInput is an input type that accepts DNSConfigArgs and DNSConfigOutput values.
// You can construct a concrete instance of `DNSConfigInput` via:
//
//	DNSConfigArgs{...}
type DNSConfigInput interface {
	pulumi.Input

	ToDNSConfigOutput() DNSConfigOutput
	ToDNSConfigOutputWithContext(context.Context) DNSConfigOutput
}

// DNSConfig contains the desired set of options for configuring clusterDNS.
type DNSConfigArgs struct {
	// cluster_dns indicates which in-cluster DNS provider should be used.
	ClusterDns DNSConfigClusterDnsPtrInput `pulumi:"clusterDns"`
	// cluster_dns_domain is the suffix used for all cluster service records.
	ClusterDnsDomain pulumi.StringPtrInput `pulumi:"clusterDnsDomain"`
	// cluster_dns_scope indicates the scope of access to cluster DNS records.
	ClusterDnsScope DNSConfigClusterDnsScopePtrInput `pulumi:"clusterDnsScope"`
}

func (DNSConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSConfig)(nil)).Elem()
}

func (i DNSConfigArgs) ToDNSConfigOutput() DNSConfigOutput {
	return i.ToDNSConfigOutputWithContext(context.Background())
}

func (i DNSConfigArgs) ToDNSConfigOutputWithContext(ctx context.Context) DNSConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSConfigOutput)
}

func (i DNSConfigArgs) ToDNSConfigPtrOutput() DNSConfigPtrOutput {
	return i.ToDNSConfigPtrOutputWithContext(context.Background())
}

func (i DNSConfigArgs) ToDNSConfigPtrOutputWithContext(ctx context.Context) DNSConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSConfigOutput).ToDNSConfigPtrOutputWithContext(ctx)
}

// DNSConfigPtrInput is an input type that accepts DNSConfigArgs, DNSConfigPtr and DNSConfigPtrOutput values.
// You can construct a concrete instance of `DNSConfigPtrInput` via:
//
//	        DNSConfigArgs{...}
//
//	or:
//
//	        nil
type DNSConfigPtrInput interface {
	pulumi.Input

	ToDNSConfigPtrOutput() DNSConfigPtrOutput
	ToDNSConfigPtrOutputWithContext(context.Context) DNSConfigPtrOutput
}

type dnsconfigPtrType DNSConfigArgs

func DNSConfigPtr(v *DNSConfigArgs) DNSConfigPtrInput {
	return (*dnsconfigPtrType)(v)
}

func (*dnsconfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSConfig)(nil)).Elem()
}

func (i *dnsconfigPtrType) ToDNSConfigPtrOutput() DNSConfigPtrOutput {
	return i.ToDNSConfigPtrOutputWithContext(context.Background())
}

func (i *dnsconfigPtrType) ToDNSConfigPtrOutputWithContext(ctx context.Context) DNSConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSConfigPtrOutput)
}

// DNSConfig contains the desired set of options for configuring clusterDNS.
type DNSConfigOutput struct{ *pulumi.OutputState }

func (DNSConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSConfig)(nil)).Elem()
}

func (o DNSConfigOutput) ToDNSConfigOutput() DNSConfigOutput {
	return o
}

func (o DNSConfigOutput) ToDNSConfigOutputWithContext(ctx context.Context) DNSConfigOutput {
	return o
}

func (o DNSConfigOutput) ToDNSConfigPtrOutput() DNSConfigPtrOutput {
	return o.ToDNSConfigPtrOutputWithContext(context.Background())
}

func (o DNSConfigOutput) ToDNSConfigPtrOutputWithContext(ctx context.Context) DNSConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DNSConfig) *DNSConfig {
		return &v
	}).(DNSConfigPtrOutput)
}

// cluster_dns indicates which in-cluster DNS provider should be used.
func (o DNSConfigOutput) ClusterDns() DNSConfigClusterDnsPtrOutput {
	return o.ApplyT(func(v DNSConfig) *DNSConfigClusterDns { return v.ClusterDns }).(DNSConfigClusterDnsPtrOutput)
}

// cluster_dns_domain is the suffix used for all cluster service records.
func (o DNSConfigOutput) ClusterDnsDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSConfig) *string { return v.ClusterDnsDomain }).(pulumi.StringPtrOutput)
}

// cluster_dns_scope indicates the scope of access to cluster DNS records.
func (o DNSConfigOutput) ClusterDnsScope() DNSConfigClusterDnsScopePtrOutput {
	return o.ApplyT(func(v DNSConfig) *DNSConfigClusterDnsScope { return v.ClusterDnsScope }).(DNSConfigClusterDnsScopePtrOutput)
}

type DNSConfigPtrOutput struct{ *pulumi.OutputState }

func (DNSConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSConfig)(nil)).Elem()
}

func (o DNSConfigPtrOutput) ToDNSConfigPtrOutput() DNSConfigPtrOutput {
	return o
}

func (o DNSConfigPtrOutput) ToDNSConfigPtrOutputWithContext(ctx context.Context) DNSConfigPtrOutput {
	return o
}

func (o DNSConfigPtrOutput) Elem() DNSConfigOutput {
	return o.ApplyT(func(v *DNSConfig) DNSConfig {
		if v != nil {
			return *v
		}
		var ret DNSConfig
		return ret
	}).(DNSConfigOutput)
}

// cluster_dns indicates which in-cluster DNS provider should be used.
func (o DNSConfigPtrOutput) ClusterDns() DNSConfigClusterDnsPtrOutput {
	return o.ApplyT(func(v *DNSConfig) *DNSConfigClusterDns {
		if v == nil {
			return nil
		}
		return v.ClusterDns
	}).(DNSConfigClusterDnsPtrOutput)
}

// cluster_dns_domain is the suffix used for all cluster service records.
func (o DNSConfigPtrOutput) ClusterDnsDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DNSConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClusterDnsDomain
	}).(pulumi.StringPtrOutput)
}

// cluster_dns_scope indicates the scope of access to cluster DNS records.
func (o DNSConfigPtrOutput) ClusterDnsScope() DNSConfigClusterDnsScopePtrOutput {
	return o.ApplyT(func(v *DNSConfig) *DNSConfigClusterDnsScope {
		if v == nil {
			return nil
		}
		return v.ClusterDnsScope
	}).(DNSConfigClusterDnsScopePtrOutput)
}

// DNSConfig contains the desired set of options for configuring clusterDNS.
type DNSConfigResponse struct {
	// cluster_dns indicates which in-cluster DNS provider should be used.
	ClusterDns string `pulumi:"clusterDns"`
	// cluster_dns_domain is the suffix used for all cluster service records.
	ClusterDnsDomain string `pulumi:"clusterDnsDomain"`
	// cluster_dns_scope indicates the scope of access to cluster DNS records.
	ClusterDnsScope string `pulumi:"clusterDnsScope"`
}

// DNSConfig contains the desired set of options for configuring clusterDNS.
type DNSConfigResponseOutput struct{ *pulumi.OutputState }

func (DNSConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSConfigResponse)(nil)).Elem()
}

func (o DNSConfigResponseOutput) ToDNSConfigResponseOutput() DNSConfigResponseOutput {
	return o
}

func (o DNSConfigResponseOutput) ToDNSConfigResponseOutputWithContext(ctx context.Context) DNSConfigResponseOutput {
	return o
}

// cluster_dns indicates which in-cluster DNS provider should be used.
func (o DNSConfigResponseOutput) ClusterDns() pulumi.StringOutput {
	return o.ApplyT(func(v DNSConfigResponse) string { return v.ClusterDns }).(pulumi.StringOutput)
}

// cluster_dns_domain is the suffix used for all cluster service records.
func (o DNSConfigResponseOutput) ClusterDnsDomain() pulumi.StringOutput {
	return o.ApplyT(func(v DNSConfigResponse) string { return v.ClusterDnsDomain }).(pulumi.StringOutput)
}

// cluster_dns_scope indicates the scope of access to cluster DNS records.
func (o DNSConfigResponseOutput) ClusterDnsScope() pulumi.StringOutput {
	return o.ApplyT(func(v DNSConfigResponse) string { return v.ClusterDnsScope }).(pulumi.StringOutput)
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindow struct {
	// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
	StartTime *string `pulumi:"startTime"`
}

// DailyMaintenanceWindowInput is an input type that accepts DailyMaintenanceWindowArgs and DailyMaintenanceWindowOutput values.
// You can construct a concrete instance of `DailyMaintenanceWindowInput` via:
//
//	DailyMaintenanceWindowArgs{...}
type DailyMaintenanceWindowInput interface {
	pulumi.Input

	ToDailyMaintenanceWindowOutput() DailyMaintenanceWindowOutput
	ToDailyMaintenanceWindowOutputWithContext(context.Context) DailyMaintenanceWindowOutput
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowArgs struct {
	// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (DailyMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyMaintenanceWindow)(nil)).Elem()
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowOutput() DailyMaintenanceWindowOutput {
	return i.ToDailyMaintenanceWindowOutputWithContext(context.Background())
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowOutputWithContext(ctx context.Context) DailyMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowOutput)
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return i.ToDailyMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i DailyMaintenanceWindowArgs) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowOutput).ToDailyMaintenanceWindowPtrOutputWithContext(ctx)
}

// DailyMaintenanceWindowPtrInput is an input type that accepts DailyMaintenanceWindowArgs, DailyMaintenanceWindowPtr and DailyMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `DailyMaintenanceWindowPtrInput` via:
//
//	        DailyMaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type DailyMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput
	ToDailyMaintenanceWindowPtrOutputWithContext(context.Context) DailyMaintenanceWindowPtrOutput
}

type dailyMaintenanceWindowPtrType DailyMaintenanceWindowArgs

func DailyMaintenanceWindowPtr(v *DailyMaintenanceWindowArgs) DailyMaintenanceWindowPtrInput {
	return (*dailyMaintenanceWindowPtrType)(v)
}

func (*dailyMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyMaintenanceWindow)(nil)).Elem()
}

func (i *dailyMaintenanceWindowPtrType) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return i.ToDailyMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *dailyMaintenanceWindowPtrType) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyMaintenanceWindowPtrOutput)
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (DailyMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyMaintenanceWindow)(nil)).Elem()
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowOutput() DailyMaintenanceWindowOutput {
	return o
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowOutputWithContext(ctx context.Context) DailyMaintenanceWindowOutput {
	return o
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return o.ToDailyMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o DailyMaintenanceWindowOutput) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DailyMaintenanceWindow) *DailyMaintenanceWindow {
		return &v
	}).(DailyMaintenanceWindowPtrOutput)
}

// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
func (o DailyMaintenanceWindowOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DailyMaintenanceWindow) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type DailyMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (DailyMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyMaintenanceWindow)(nil)).Elem()
}

func (o DailyMaintenanceWindowPtrOutput) ToDailyMaintenanceWindowPtrOutput() DailyMaintenanceWindowPtrOutput {
	return o
}

func (o DailyMaintenanceWindowPtrOutput) ToDailyMaintenanceWindowPtrOutputWithContext(ctx context.Context) DailyMaintenanceWindowPtrOutput {
	return o
}

func (o DailyMaintenanceWindowPtrOutput) Elem() DailyMaintenanceWindowOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindow) DailyMaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret DailyMaintenanceWindow
		return ret
	}).(DailyMaintenanceWindowOutput)
}

// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
func (o DailyMaintenanceWindowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DailyMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowResponse struct {
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
	Duration string `pulumi:"duration"`
	// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
	StartTime string `pulumi:"startTime"`
}

// Time window specified for daily maintenance operations.
type DailyMaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (DailyMaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyMaintenanceWindowResponse)(nil)).Elem()
}

func (o DailyMaintenanceWindowResponseOutput) ToDailyMaintenanceWindowResponseOutput() DailyMaintenanceWindowResponseOutput {
	return o
}

func (o DailyMaintenanceWindowResponseOutput) ToDailyMaintenanceWindowResponseOutputWithContext(ctx context.Context) DailyMaintenanceWindowResponseOutput {
	return o
}

// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "PTnHnMnS".
func (o DailyMaintenanceWindowResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v DailyMaintenanceWindowResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format "HH:MM", where HH : [00-23] and MM : [00-59] GMT.
func (o DailyMaintenanceWindowResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v DailyMaintenanceWindowResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Configuration of etcd encryption.
type DatabaseEncryption struct {
	// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
	KeyName *string `pulumi:"keyName"`
	// The desired state of etcd encryption.
	State *DatabaseEncryptionState `pulumi:"state"`
}

// DatabaseEncryptionInput is an input type that accepts DatabaseEncryptionArgs and DatabaseEncryptionOutput values.
// You can construct a concrete instance of `DatabaseEncryptionInput` via:
//
//	DatabaseEncryptionArgs{...}
type DatabaseEncryptionInput interface {
	pulumi.Input

	ToDatabaseEncryptionOutput() DatabaseEncryptionOutput
	ToDatabaseEncryptionOutputWithContext(context.Context) DatabaseEncryptionOutput
}

// Configuration of etcd encryption.
type DatabaseEncryptionArgs struct {
	// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
	KeyName pulumi.StringPtrInput `pulumi:"keyName"`
	// The desired state of etcd encryption.
	State DatabaseEncryptionStatePtrInput `pulumi:"state"`
}

func (DatabaseEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryption)(nil)).Elem()
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionOutput() DatabaseEncryptionOutput {
	return i.ToDatabaseEncryptionOutputWithContext(context.Background())
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionOutputWithContext(ctx context.Context) DatabaseEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionOutput)
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return i.ToDatabaseEncryptionPtrOutputWithContext(context.Background())
}

func (i DatabaseEncryptionArgs) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionOutput).ToDatabaseEncryptionPtrOutputWithContext(ctx)
}

// DatabaseEncryptionPtrInput is an input type that accepts DatabaseEncryptionArgs, DatabaseEncryptionPtr and DatabaseEncryptionPtrOutput values.
// You can construct a concrete instance of `DatabaseEncryptionPtrInput` via:
//
//	        DatabaseEncryptionArgs{...}
//
//	or:
//
//	        nil
type DatabaseEncryptionPtrInput interface {
	pulumi.Input

	ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput
	ToDatabaseEncryptionPtrOutputWithContext(context.Context) DatabaseEncryptionPtrOutput
}

type databaseEncryptionPtrType DatabaseEncryptionArgs

func DatabaseEncryptionPtr(v *DatabaseEncryptionArgs) DatabaseEncryptionPtrInput {
	return (*databaseEncryptionPtrType)(v)
}

func (*databaseEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryption)(nil)).Elem()
}

func (i *databaseEncryptionPtrType) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return i.ToDatabaseEncryptionPtrOutputWithContext(context.Background())
}

func (i *databaseEncryptionPtrType) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseEncryptionPtrOutput)
}

// Configuration of etcd encryption.
type DatabaseEncryptionOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryption)(nil)).Elem()
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionOutput() DatabaseEncryptionOutput {
	return o
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionOutputWithContext(ctx context.Context) DatabaseEncryptionOutput {
	return o
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return o.ToDatabaseEncryptionPtrOutputWithContext(context.Background())
}

func (o DatabaseEncryptionOutput) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseEncryption) *DatabaseEncryption {
		return &v
	}).(DatabaseEncryptionPtrOutput)
}

// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
func (o DatabaseEncryptionOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseEncryption) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// The desired state of etcd encryption.
func (o DatabaseEncryptionOutput) State() DatabaseEncryptionStatePtrOutput {
	return o.ApplyT(func(v DatabaseEncryption) *DatabaseEncryptionState { return v.State }).(DatabaseEncryptionStatePtrOutput)
}

type DatabaseEncryptionPtrOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseEncryption)(nil)).Elem()
}

func (o DatabaseEncryptionPtrOutput) ToDatabaseEncryptionPtrOutput() DatabaseEncryptionPtrOutput {
	return o
}

func (o DatabaseEncryptionPtrOutput) ToDatabaseEncryptionPtrOutputWithContext(ctx context.Context) DatabaseEncryptionPtrOutput {
	return o
}

func (o DatabaseEncryptionPtrOutput) Elem() DatabaseEncryptionOutput {
	return o.ApplyT(func(v *DatabaseEncryption) DatabaseEncryption {
		if v != nil {
			return *v
		}
		var ret DatabaseEncryption
		return ret
	}).(DatabaseEncryptionOutput)
}

// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
func (o DatabaseEncryptionPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The desired state of etcd encryption.
func (o DatabaseEncryptionPtrOutput) State() DatabaseEncryptionStatePtrOutput {
	return o.ApplyT(func(v *DatabaseEncryption) *DatabaseEncryptionState {
		if v == nil {
			return nil
		}
		return v.State
	}).(DatabaseEncryptionStatePtrOutput)
}

// Configuration of etcd encryption.
type DatabaseEncryptionResponse struct {
	// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
	KeyName string `pulumi:"keyName"`
	// The desired state of etcd encryption.
	State string `pulumi:"state"`
}

// Configuration of etcd encryption.
type DatabaseEncryptionResponseOutput struct{ *pulumi.OutputState }

func (DatabaseEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseEncryptionResponse)(nil)).Elem()
}

func (o DatabaseEncryptionResponseOutput) ToDatabaseEncryptionResponseOutput() DatabaseEncryptionResponseOutput {
	return o
}

func (o DatabaseEncryptionResponseOutput) ToDatabaseEncryptionResponseOutputWithContext(ctx context.Context) DatabaseEncryptionResponseOutput {
	return o
}

// Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key
func (o DatabaseEncryptionResponseOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseEncryptionResponse) string { return v.KeyName }).(pulumi.StringOutput)
}

// The desired state of etcd encryption.
func (o DatabaseEncryptionResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseEncryptionResponse) string { return v.State }).(pulumi.StringOutput)
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatus struct {
	// Disables cluster default sNAT rules.
	Disabled *bool `pulumi:"disabled"`
}

// DefaultSnatStatusInput is an input type that accepts DefaultSnatStatusArgs and DefaultSnatStatusOutput values.
// You can construct a concrete instance of `DefaultSnatStatusInput` via:
//
//	DefaultSnatStatusArgs{...}
type DefaultSnatStatusInput interface {
	pulumi.Input

	ToDefaultSnatStatusOutput() DefaultSnatStatusOutput
	ToDefaultSnatStatusOutputWithContext(context.Context) DefaultSnatStatusOutput
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusArgs struct {
	// Disables cluster default sNAT rules.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (DefaultSnatStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultSnatStatus)(nil)).Elem()
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusOutput() DefaultSnatStatusOutput {
	return i.ToDefaultSnatStatusOutputWithContext(context.Background())
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusOutputWithContext(ctx context.Context) DefaultSnatStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusOutput)
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return i.ToDefaultSnatStatusPtrOutputWithContext(context.Background())
}

func (i DefaultSnatStatusArgs) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusOutput).ToDefaultSnatStatusPtrOutputWithContext(ctx)
}

// DefaultSnatStatusPtrInput is an input type that accepts DefaultSnatStatusArgs, DefaultSnatStatusPtr and DefaultSnatStatusPtrOutput values.
// You can construct a concrete instance of `DefaultSnatStatusPtrInput` via:
//
//	        DefaultSnatStatusArgs{...}
//
//	or:
//
//	        nil
type DefaultSnatStatusPtrInput interface {
	pulumi.Input

	ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput
	ToDefaultSnatStatusPtrOutputWithContext(context.Context) DefaultSnatStatusPtrOutput
}

type defaultSnatStatusPtrType DefaultSnatStatusArgs

func DefaultSnatStatusPtr(v *DefaultSnatStatusArgs) DefaultSnatStatusPtrInput {
	return (*defaultSnatStatusPtrType)(v)
}

func (*defaultSnatStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSnatStatus)(nil)).Elem()
}

func (i *defaultSnatStatusPtrType) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return i.ToDefaultSnatStatusPtrOutputWithContext(context.Background())
}

func (i *defaultSnatStatusPtrType) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultSnatStatusPtrOutput)
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusOutput struct{ *pulumi.OutputState }

func (DefaultSnatStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultSnatStatus)(nil)).Elem()
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusOutput() DefaultSnatStatusOutput {
	return o
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusOutputWithContext(ctx context.Context) DefaultSnatStatusOutput {
	return o
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return o.ToDefaultSnatStatusPtrOutputWithContext(context.Background())
}

func (o DefaultSnatStatusOutput) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultSnatStatus) *DefaultSnatStatus {
		return &v
	}).(DefaultSnatStatusPtrOutput)
}

// Disables cluster default sNAT rules.
func (o DefaultSnatStatusOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DefaultSnatStatus) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type DefaultSnatStatusPtrOutput struct{ *pulumi.OutputState }

func (DefaultSnatStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultSnatStatus)(nil)).Elem()
}

func (o DefaultSnatStatusPtrOutput) ToDefaultSnatStatusPtrOutput() DefaultSnatStatusPtrOutput {
	return o
}

func (o DefaultSnatStatusPtrOutput) ToDefaultSnatStatusPtrOutputWithContext(ctx context.Context) DefaultSnatStatusPtrOutput {
	return o
}

func (o DefaultSnatStatusPtrOutput) Elem() DefaultSnatStatusOutput {
	return o.ApplyT(func(v *DefaultSnatStatus) DefaultSnatStatus {
		if v != nil {
			return *v
		}
		var ret DefaultSnatStatus
		return ret
	}).(DefaultSnatStatusOutput)
}

// Disables cluster default sNAT rules.
func (o DefaultSnatStatusPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DefaultSnatStatus) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusResponse struct {
	// Disables cluster default sNAT rules.
	Disabled bool `pulumi:"disabled"`
}

// DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.
type DefaultSnatStatusResponseOutput struct{ *pulumi.OutputState }

func (DefaultSnatStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultSnatStatusResponse)(nil)).Elem()
}

func (o DefaultSnatStatusResponseOutput) ToDefaultSnatStatusResponseOutput() DefaultSnatStatusResponseOutput {
	return o
}

func (o DefaultSnatStatusResponseOutput) ToDefaultSnatStatusResponseOutputWithContext(ctx context.Context) DefaultSnatStatusResponseOutput {
	return o
}

// Disables cluster default sNAT rules.
func (o DefaultSnatStatusResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DefaultSnatStatusResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfig struct {
	// Whether NodeLocal DNSCache is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// DnsCacheConfigInput is an input type that accepts DnsCacheConfigArgs and DnsCacheConfigOutput values.
// You can construct a concrete instance of `DnsCacheConfigInput` via:
//
//	DnsCacheConfigArgs{...}
type DnsCacheConfigInput interface {
	pulumi.Input

	ToDnsCacheConfigOutput() DnsCacheConfigOutput
	ToDnsCacheConfigOutputWithContext(context.Context) DnsCacheConfigOutput
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigArgs struct {
	// Whether NodeLocal DNSCache is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (DnsCacheConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsCacheConfig)(nil)).Elem()
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigOutput() DnsCacheConfigOutput {
	return i.ToDnsCacheConfigOutputWithContext(context.Background())
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigOutputWithContext(ctx context.Context) DnsCacheConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigOutput)
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return i.ToDnsCacheConfigPtrOutputWithContext(context.Background())
}

func (i DnsCacheConfigArgs) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigOutput).ToDnsCacheConfigPtrOutputWithContext(ctx)
}

// DnsCacheConfigPtrInput is an input type that accepts DnsCacheConfigArgs, DnsCacheConfigPtr and DnsCacheConfigPtrOutput values.
// You can construct a concrete instance of `DnsCacheConfigPtrInput` via:
//
//	        DnsCacheConfigArgs{...}
//
//	or:
//
//	        nil
type DnsCacheConfigPtrInput interface {
	pulumi.Input

	ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput
	ToDnsCacheConfigPtrOutputWithContext(context.Context) DnsCacheConfigPtrOutput
}

type dnsCacheConfigPtrType DnsCacheConfigArgs

func DnsCacheConfigPtr(v *DnsCacheConfigArgs) DnsCacheConfigPtrInput {
	return (*dnsCacheConfigPtrType)(v)
}

func (*dnsCacheConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsCacheConfig)(nil)).Elem()
}

func (i *dnsCacheConfigPtrType) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return i.ToDnsCacheConfigPtrOutputWithContext(context.Background())
}

func (i *dnsCacheConfigPtrType) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsCacheConfigPtrOutput)
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigOutput struct{ *pulumi.OutputState }

func (DnsCacheConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsCacheConfig)(nil)).Elem()
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigOutput() DnsCacheConfigOutput {
	return o
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigOutputWithContext(ctx context.Context) DnsCacheConfigOutput {
	return o
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return o.ToDnsCacheConfigPtrOutputWithContext(context.Background())
}

func (o DnsCacheConfigOutput) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DnsCacheConfig) *DnsCacheConfig {
		return &v
	}).(DnsCacheConfigPtrOutput)
}

// Whether NodeLocal DNSCache is enabled for this cluster.
func (o DnsCacheConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DnsCacheConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DnsCacheConfigPtrOutput struct{ *pulumi.OutputState }

func (DnsCacheConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsCacheConfig)(nil)).Elem()
}

func (o DnsCacheConfigPtrOutput) ToDnsCacheConfigPtrOutput() DnsCacheConfigPtrOutput {
	return o
}

func (o DnsCacheConfigPtrOutput) ToDnsCacheConfigPtrOutputWithContext(ctx context.Context) DnsCacheConfigPtrOutput {
	return o
}

func (o DnsCacheConfigPtrOutput) Elem() DnsCacheConfigOutput {
	return o.ApplyT(func(v *DnsCacheConfig) DnsCacheConfig {
		if v != nil {
			return *v
		}
		var ret DnsCacheConfig
		return ret
	}).(DnsCacheConfigOutput)
}

// Whether NodeLocal DNSCache is enabled for this cluster.
func (o DnsCacheConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsCacheConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigResponse struct {
	// Whether NodeLocal DNSCache is enabled for this cluster.
	Enabled bool `pulumi:"enabled"`
}

// Configuration for NodeLocal DNSCache
type DnsCacheConfigResponseOutput struct{ *pulumi.OutputState }

func (DnsCacheConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsCacheConfigResponse)(nil)).Elem()
}

func (o DnsCacheConfigResponseOutput) ToDnsCacheConfigResponseOutput() DnsCacheConfigResponseOutput {
	return o
}

func (o DnsCacheConfigResponseOutput) ToDnsCacheConfigResponseOutputWithContext(ctx context.Context) DnsCacheConfigResponseOutput {
	return o
}

// Whether NodeLocal DNSCache is enabled for this cluster.
func (o DnsCacheConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DnsCacheConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// EnterpriseConfig is the cluster enterprise configuration.
type EnterpriseConfig struct {
}

// EnterpriseConfigInput is an input type that accepts EnterpriseConfigArgs and EnterpriseConfigOutput values.
// You can construct a concrete instance of `EnterpriseConfigInput` via:
//
//	EnterpriseConfigArgs{...}
type EnterpriseConfigInput interface {
	pulumi.Input

	ToEnterpriseConfigOutput() EnterpriseConfigOutput
	ToEnterpriseConfigOutputWithContext(context.Context) EnterpriseConfigOutput
}

// EnterpriseConfig is the cluster enterprise configuration.
type EnterpriseConfigArgs struct {
}

func (EnterpriseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseConfig)(nil)).Elem()
}

func (i EnterpriseConfigArgs) ToEnterpriseConfigOutput() EnterpriseConfigOutput {
	return i.ToEnterpriseConfigOutputWithContext(context.Background())
}

func (i EnterpriseConfigArgs) ToEnterpriseConfigOutputWithContext(ctx context.Context) EnterpriseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseConfigOutput)
}

func (i EnterpriseConfigArgs) ToEnterpriseConfigPtrOutput() EnterpriseConfigPtrOutput {
	return i.ToEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i EnterpriseConfigArgs) ToEnterpriseConfigPtrOutputWithContext(ctx context.Context) EnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseConfigOutput).ToEnterpriseConfigPtrOutputWithContext(ctx)
}

// EnterpriseConfigPtrInput is an input type that accepts EnterpriseConfigArgs, EnterpriseConfigPtr and EnterpriseConfigPtrOutput values.
// You can construct a concrete instance of `EnterpriseConfigPtrInput` via:
//
//	        EnterpriseConfigArgs{...}
//
//	or:
//
//	        nil
type EnterpriseConfigPtrInput interface {
	pulumi.Input

	ToEnterpriseConfigPtrOutput() EnterpriseConfigPtrOutput
	ToEnterpriseConfigPtrOutputWithContext(context.Context) EnterpriseConfigPtrOutput
}

type enterpriseConfigPtrType EnterpriseConfigArgs

func EnterpriseConfigPtr(v *EnterpriseConfigArgs) EnterpriseConfigPtrInput {
	return (*enterpriseConfigPtrType)(v)
}

func (*enterpriseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseConfig)(nil)).Elem()
}

func (i *enterpriseConfigPtrType) ToEnterpriseConfigPtrOutput() EnterpriseConfigPtrOutput {
	return i.ToEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i *enterpriseConfigPtrType) ToEnterpriseConfigPtrOutputWithContext(ctx context.Context) EnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseConfigPtrOutput)
}

// EnterpriseConfig is the cluster enterprise configuration.
type EnterpriseConfigOutput struct{ *pulumi.OutputState }

func (EnterpriseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseConfig)(nil)).Elem()
}

func (o EnterpriseConfigOutput) ToEnterpriseConfigOutput() EnterpriseConfigOutput {
	return o
}

func (o EnterpriseConfigOutput) ToEnterpriseConfigOutputWithContext(ctx context.Context) EnterpriseConfigOutput {
	return o
}

func (o EnterpriseConfigOutput) ToEnterpriseConfigPtrOutput() EnterpriseConfigPtrOutput {
	return o.ToEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (o EnterpriseConfigOutput) ToEnterpriseConfigPtrOutputWithContext(ctx context.Context) EnterpriseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseConfig) *EnterpriseConfig {
		return &v
	}).(EnterpriseConfigPtrOutput)
}

type EnterpriseConfigPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseConfig)(nil)).Elem()
}

func (o EnterpriseConfigPtrOutput) ToEnterpriseConfigPtrOutput() EnterpriseConfigPtrOutput {
	return o
}

func (o EnterpriseConfigPtrOutput) ToEnterpriseConfigPtrOutputWithContext(ctx context.Context) EnterpriseConfigPtrOutput {
	return o
}

func (o EnterpriseConfigPtrOutput) Elem() EnterpriseConfigOutput {
	return o.ApplyT(func(v *EnterpriseConfig) EnterpriseConfig {
		if v != nil {
			return *v
		}
		var ret EnterpriseConfig
		return ret
	}).(EnterpriseConfigOutput)
}

// EnterpriseConfig is the cluster enterprise configuration.
type EnterpriseConfigResponse struct {
	// [Output only] cluster_tier specifies the premium tier of the cluster.
	ClusterTier string `pulumi:"clusterTier"`
}

// EnterpriseConfig is the cluster enterprise configuration.
type EnterpriseConfigResponseOutput struct{ *pulumi.OutputState }

func (EnterpriseConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseConfigResponse)(nil)).Elem()
}

func (o EnterpriseConfigResponseOutput) ToEnterpriseConfigResponseOutput() EnterpriseConfigResponseOutput {
	return o
}

func (o EnterpriseConfigResponseOutput) ToEnterpriseConfigResponseOutputWithContext(ctx context.Context) EnterpriseConfigResponseOutput {
	return o
}

// [Output only] cluster_tier specifies the premium tier of the cluster.
func (o EnterpriseConfigResponseOutput) ClusterTier() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseConfigResponse) string { return v.ClusterTier }).(pulumi.StringOutput)
}

// EphemeralStorageLocalSsdConfig contains configuration for the node ephemeral storage using Local SSDs.
type EphemeralStorageLocalSsdConfig struct {
	// Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
	LocalSsdCount *int `pulumi:"localSsdCount"`
}

// EphemeralStorageLocalSsdConfigInput is an input type that accepts EphemeralStorageLocalSsdConfigArgs and EphemeralStorageLocalSsdConfigOutput values.
// You can construct a concrete instance of `EphemeralStorageLocalSsdConfigInput` via:
//
//	EphemeralStorageLocalSsdConfigArgs{...}
type EphemeralStorageLocalSsdConfigInput interface {
	pulumi.Input

	ToEphemeralStorageLocalSsdConfigOutput() EphemeralStorageLocalSsdConfigOutput
	ToEphemeralStorageLocalSsdConfigOutputWithContext(context.Context) EphemeralStorageLocalSsdConfigOutput
}

// EphemeralStorageLocalSsdConfig contains configuration for the node ephemeral storage using Local SSDs.
type EphemeralStorageLocalSsdConfigArgs struct {
	// Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
	LocalSsdCount pulumi.IntPtrInput `pulumi:"localSsdCount"`
}

func (EphemeralStorageLocalSsdConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralStorageLocalSsdConfig)(nil)).Elem()
}

func (i EphemeralStorageLocalSsdConfigArgs) ToEphemeralStorageLocalSsdConfigOutput() EphemeralStorageLocalSsdConfigOutput {
	return i.ToEphemeralStorageLocalSsdConfigOutputWithContext(context.Background())
}

func (i EphemeralStorageLocalSsdConfigArgs) ToEphemeralStorageLocalSsdConfigOutputWithContext(ctx context.Context) EphemeralStorageLocalSsdConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralStorageLocalSsdConfigOutput)
}

func (i EphemeralStorageLocalSsdConfigArgs) ToEphemeralStorageLocalSsdConfigPtrOutput() EphemeralStorageLocalSsdConfigPtrOutput {
	return i.ToEphemeralStorageLocalSsdConfigPtrOutputWithContext(context.Background())
}

func (i EphemeralStorageLocalSsdConfigArgs) ToEphemeralStorageLocalSsdConfigPtrOutputWithContext(ctx context.Context) EphemeralStorageLocalSsdConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralStorageLocalSsdConfigOutput).ToEphemeralStorageLocalSsdConfigPtrOutputWithContext(ctx)
}

// EphemeralStorageLocalSsdConfigPtrInput is an input type that accepts EphemeralStorageLocalSsdConfigArgs, EphemeralStorageLocalSsdConfigPtr and EphemeralStorageLocalSsdConfigPtrOutput values.
// You can construct a concrete instance of `EphemeralStorageLocalSsdConfigPtrInput` via:
//
//	        EphemeralStorageLocalSsdConfigArgs{...}
//
//	or:
//
//	        nil
type EphemeralStorageLocalSsdConfigPtrInput interface {
	pulumi.Input

	ToEphemeralStorageLocalSsdConfigPtrOutput() EphemeralStorageLocalSsdConfigPtrOutput
	ToEphemeralStorageLocalSsdConfigPtrOutputWithContext(context.Context) EphemeralStorageLocalSsdConfigPtrOutput
}

type ephemeralStorageLocalSsdConfigPtrType EphemeralStorageLocalSsdConfigArgs

func EphemeralStorageLocalSsdConfigPtr(v *EphemeralStorageLocalSsdConfigArgs) EphemeralStorageLocalSsdConfigPtrInput {
	return (*ephemeralStorageLocalSsdConfigPtrType)(v)
}

func (*ephemeralStorageLocalSsdConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralStorageLocalSsdConfig)(nil)).Elem()
}

func (i *ephemeralStorageLocalSsdConfigPtrType) ToEphemeralStorageLocalSsdConfigPtrOutput() EphemeralStorageLocalSsdConfigPtrOutput {
	return i.ToEphemeralStorageLocalSsdConfigPtrOutputWithContext(context.Background())
}

func (i *ephemeralStorageLocalSsdConfigPtrType) ToEphemeralStorageLocalSsdConfigPtrOutputWithContext(ctx context.Context) EphemeralStorageLocalSsdConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EphemeralStorageLocalSsdConfigPtrOutput)
}

// EphemeralStorageLocalSsdConfig contains configuration for the node ephemeral storage using Local SSDs.
type EphemeralStorageLocalSsdConfigOutput struct{ *pulumi.OutputState }

func (EphemeralStorageLocalSsdConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralStorageLocalSsdConfig)(nil)).Elem()
}

func (o EphemeralStorageLocalSsdConfigOutput) ToEphemeralStorageLocalSsdConfigOutput() EphemeralStorageLocalSsdConfigOutput {
	return o
}

func (o EphemeralStorageLocalSsdConfigOutput) ToEphemeralStorageLocalSsdConfigOutputWithContext(ctx context.Context) EphemeralStorageLocalSsdConfigOutput {
	return o
}

func (o EphemeralStorageLocalSsdConfigOutput) ToEphemeralStorageLocalSsdConfigPtrOutput() EphemeralStorageLocalSsdConfigPtrOutput {
	return o.ToEphemeralStorageLocalSsdConfigPtrOutputWithContext(context.Background())
}

func (o EphemeralStorageLocalSsdConfigOutput) ToEphemeralStorageLocalSsdConfigPtrOutputWithContext(ctx context.Context) EphemeralStorageLocalSsdConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EphemeralStorageLocalSsdConfig) *EphemeralStorageLocalSsdConfig {
		return &v
	}).(EphemeralStorageLocalSsdConfigPtrOutput)
}

// Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
func (o EphemeralStorageLocalSsdConfigOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EphemeralStorageLocalSsdConfig) *int { return v.LocalSsdCount }).(pulumi.IntPtrOutput)
}

type EphemeralStorageLocalSsdConfigPtrOutput struct{ *pulumi.OutputState }

func (EphemeralStorageLocalSsdConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EphemeralStorageLocalSsdConfig)(nil)).Elem()
}

func (o EphemeralStorageLocalSsdConfigPtrOutput) ToEphemeralStorageLocalSsdConfigPtrOutput() EphemeralStorageLocalSsdConfigPtrOutput {
	return o
}

func (o EphemeralStorageLocalSsdConfigPtrOutput) ToEphemeralStorageLocalSsdConfigPtrOutputWithContext(ctx context.Context) EphemeralStorageLocalSsdConfigPtrOutput {
	return o
}

func (o EphemeralStorageLocalSsdConfigPtrOutput) Elem() EphemeralStorageLocalSsdConfigOutput {
	return o.ApplyT(func(v *EphemeralStorageLocalSsdConfig) EphemeralStorageLocalSsdConfig {
		if v != nil {
			return *v
		}
		var ret EphemeralStorageLocalSsdConfig
		return ret
	}).(EphemeralStorageLocalSsdConfigOutput)
}

// Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
func (o EphemeralStorageLocalSsdConfigPtrOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EphemeralStorageLocalSsdConfig) *int {
		if v == nil {
			return nil
		}
		return v.LocalSsdCount
	}).(pulumi.IntPtrOutput)
}

// EphemeralStorageLocalSsdConfig contains configuration for the node ephemeral storage using Local SSDs.
type EphemeralStorageLocalSsdConfigResponse struct {
	// Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
	LocalSsdCount int `pulumi:"localSsdCount"`
}

// EphemeralStorageLocalSsdConfig contains configuration for the node ephemeral storage using Local SSDs.
type EphemeralStorageLocalSsdConfigResponseOutput struct{ *pulumi.OutputState }

func (EphemeralStorageLocalSsdConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EphemeralStorageLocalSsdConfigResponse)(nil)).Elem()
}

func (o EphemeralStorageLocalSsdConfigResponseOutput) ToEphemeralStorageLocalSsdConfigResponseOutput() EphemeralStorageLocalSsdConfigResponseOutput {
	return o
}

func (o EphemeralStorageLocalSsdConfigResponseOutput) ToEphemeralStorageLocalSsdConfigResponseOutputWithContext(ctx context.Context) EphemeralStorageLocalSsdConfigResponseOutput {
	return o
}

// Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
func (o EphemeralStorageLocalSsdConfigResponseOutput) LocalSsdCount() pulumi.IntOutput {
	return o.ApplyT(func(v EphemeralStorageLocalSsdConfigResponse) int { return v.LocalSsdCount }).(pulumi.IntOutput)
}

// Configuration of Fast Socket feature.
type FastSocket struct {
	// Whether Fast Socket features are enabled in the node pool.
	Enabled *bool `pulumi:"enabled"`
}

// FastSocketInput is an input type that accepts FastSocketArgs and FastSocketOutput values.
// You can construct a concrete instance of `FastSocketInput` via:
//
//	FastSocketArgs{...}
type FastSocketInput interface {
	pulumi.Input

	ToFastSocketOutput() FastSocketOutput
	ToFastSocketOutputWithContext(context.Context) FastSocketOutput
}

// Configuration of Fast Socket feature.
type FastSocketArgs struct {
	// Whether Fast Socket features are enabled in the node pool.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (FastSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FastSocket)(nil)).Elem()
}

func (i FastSocketArgs) ToFastSocketOutput() FastSocketOutput {
	return i.ToFastSocketOutputWithContext(context.Background())
}

func (i FastSocketArgs) ToFastSocketOutputWithContext(ctx context.Context) FastSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FastSocketOutput)
}

func (i FastSocketArgs) ToFastSocketPtrOutput() FastSocketPtrOutput {
	return i.ToFastSocketPtrOutputWithContext(context.Background())
}

func (i FastSocketArgs) ToFastSocketPtrOutputWithContext(ctx context.Context) FastSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FastSocketOutput).ToFastSocketPtrOutputWithContext(ctx)
}

// FastSocketPtrInput is an input type that accepts FastSocketArgs, FastSocketPtr and FastSocketPtrOutput values.
// You can construct a concrete instance of `FastSocketPtrInput` via:
//
//	        FastSocketArgs{...}
//
//	or:
//
//	        nil
type FastSocketPtrInput interface {
	pulumi.Input

	ToFastSocketPtrOutput() FastSocketPtrOutput
	ToFastSocketPtrOutputWithContext(context.Context) FastSocketPtrOutput
}

type fastSocketPtrType FastSocketArgs

func FastSocketPtr(v *FastSocketArgs) FastSocketPtrInput {
	return (*fastSocketPtrType)(v)
}

func (*fastSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FastSocket)(nil)).Elem()
}

func (i *fastSocketPtrType) ToFastSocketPtrOutput() FastSocketPtrOutput {
	return i.ToFastSocketPtrOutputWithContext(context.Background())
}

func (i *fastSocketPtrType) ToFastSocketPtrOutputWithContext(ctx context.Context) FastSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FastSocketPtrOutput)
}

// Configuration of Fast Socket feature.
type FastSocketOutput struct{ *pulumi.OutputState }

func (FastSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FastSocket)(nil)).Elem()
}

func (o FastSocketOutput) ToFastSocketOutput() FastSocketOutput {
	return o
}

func (o FastSocketOutput) ToFastSocketOutputWithContext(ctx context.Context) FastSocketOutput {
	return o
}

func (o FastSocketOutput) ToFastSocketPtrOutput() FastSocketPtrOutput {
	return o.ToFastSocketPtrOutputWithContext(context.Background())
}

func (o FastSocketOutput) ToFastSocketPtrOutputWithContext(ctx context.Context) FastSocketPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FastSocket) *FastSocket {
		return &v
	}).(FastSocketPtrOutput)
}

// Whether Fast Socket features are enabled in the node pool.
func (o FastSocketOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FastSocket) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type FastSocketPtrOutput struct{ *pulumi.OutputState }

func (FastSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FastSocket)(nil)).Elem()
}

func (o FastSocketPtrOutput) ToFastSocketPtrOutput() FastSocketPtrOutput {
	return o
}

func (o FastSocketPtrOutput) ToFastSocketPtrOutputWithContext(ctx context.Context) FastSocketPtrOutput {
	return o
}

func (o FastSocketPtrOutput) Elem() FastSocketOutput {
	return o.ApplyT(func(v *FastSocket) FastSocket {
		if v != nil {
			return *v
		}
		var ret FastSocket
		return ret
	}).(FastSocketOutput)
}

// Whether Fast Socket features are enabled in the node pool.
func (o FastSocketPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FastSocket) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration of Fast Socket feature.
type FastSocketResponse struct {
	// Whether Fast Socket features are enabled in the node pool.
	Enabled bool `pulumi:"enabled"`
}

// Configuration of Fast Socket feature.
type FastSocketResponseOutput struct{ *pulumi.OutputState }

func (FastSocketResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FastSocketResponse)(nil)).Elem()
}

func (o FastSocketResponseOutput) ToFastSocketResponseOutput() FastSocketResponseOutput {
	return o
}

func (o FastSocketResponseOutput) ToFastSocketResponseOutputWithContext(ctx context.Context) FastSocketResponseOutput {
	return o
}

// Whether Fast Socket features are enabled in the node pool.
func (o FastSocketResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FastSocketResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
type Filter struct {
	// Event types to allowlist.
	EventType []FilterEventTypeItem `pulumi:"eventType"`
}

// FilterInput is an input type that accepts FilterArgs and FilterOutput values.
// You can construct a concrete instance of `FilterInput` via:
//
//	FilterArgs{...}
type FilterInput interface {
	pulumi.Input

	ToFilterOutput() FilterOutput
	ToFilterOutputWithContext(context.Context) FilterOutput
}

// Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
type FilterArgs struct {
	// Event types to allowlist.
	EventType FilterEventTypeItemArrayInput `pulumi:"eventType"`
}

func (FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Filter)(nil)).Elem()
}

func (i FilterArgs) ToFilterOutput() FilterOutput {
	return i.ToFilterOutputWithContext(context.Background())
}

func (i FilterArgs) ToFilterOutputWithContext(ctx context.Context) FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterOutput)
}

func (i FilterArgs) ToFilterPtrOutput() FilterPtrOutput {
	return i.ToFilterPtrOutputWithContext(context.Background())
}

func (i FilterArgs) ToFilterPtrOutputWithContext(ctx context.Context) FilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterOutput).ToFilterPtrOutputWithContext(ctx)
}

// FilterPtrInput is an input type that accepts FilterArgs, FilterPtr and FilterPtrOutput values.
// You can construct a concrete instance of `FilterPtrInput` via:
//
//	        FilterArgs{...}
//
//	or:
//
//	        nil
type FilterPtrInput interface {
	pulumi.Input

	ToFilterPtrOutput() FilterPtrOutput
	ToFilterPtrOutputWithContext(context.Context) FilterPtrOutput
}

type filterPtrType FilterArgs

func FilterPtr(v *FilterArgs) FilterPtrInput {
	return (*filterPtrType)(v)
}

func (*filterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Filter)(nil)).Elem()
}

func (i *filterPtrType) ToFilterPtrOutput() FilterPtrOutput {
	return i.ToFilterPtrOutputWithContext(context.Background())
}

func (i *filterPtrType) ToFilterPtrOutputWithContext(ctx context.Context) FilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterPtrOutput)
}

// Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
type FilterOutput struct{ *pulumi.OutputState }

func (FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Filter)(nil)).Elem()
}

func (o FilterOutput) ToFilterOutput() FilterOutput {
	return o
}

func (o FilterOutput) ToFilterOutputWithContext(ctx context.Context) FilterOutput {
	return o
}

func (o FilterOutput) ToFilterPtrOutput() FilterPtrOutput {
	return o.ToFilterPtrOutputWithContext(context.Background())
}

func (o FilterOutput) ToFilterPtrOutputWithContext(ctx context.Context) FilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Filter) *Filter {
		return &v
	}).(FilterPtrOutput)
}

// Event types to allowlist.
func (o FilterOutput) EventType() FilterEventTypeItemArrayOutput {
	return o.ApplyT(func(v Filter) []FilterEventTypeItem { return v.EventType }).(FilterEventTypeItemArrayOutput)
}

type FilterPtrOutput struct{ *pulumi.OutputState }

func (FilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Filter)(nil)).Elem()
}

func (o FilterPtrOutput) ToFilterPtrOutput() FilterPtrOutput {
	return o
}

func (o FilterPtrOutput) ToFilterPtrOutputWithContext(ctx context.Context) FilterPtrOutput {
	return o
}

func (o FilterPtrOutput) Elem() FilterOutput {
	return o.ApplyT(func(v *Filter) Filter {
		if v != nil {
			return *v
		}
		var ret Filter
		return ret
	}).(FilterOutput)
}

// Event types to allowlist.
func (o FilterPtrOutput) EventType() FilterEventTypeItemArrayOutput {
	return o.ApplyT(func(v *Filter) []FilterEventTypeItem {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(FilterEventTypeItemArrayOutput)
}

// Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
type FilterResponse struct {
	// Event types to allowlist.
	EventType []string `pulumi:"eventType"`
}

// Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
type FilterResponseOutput struct{ *pulumi.OutputState }

func (FilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterResponse)(nil)).Elem()
}

func (o FilterResponseOutput) ToFilterResponseOutput() FilterResponseOutput {
	return o
}

func (o FilterResponseOutput) ToFilterResponseOutputWithContext(ctx context.Context) FilterResponseOutput {
	return o
}

// Event types to allowlist.
func (o FilterResponseOutput) EventType() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FilterResponse) []string { return v.EventType }).(pulumi.StringArrayOutput)
}

// Fleet is the fleet configuration for the cluster.
type Fleet struct {
	// The Fleet host project(project ID or project number) where this cluster will be registered to. This field cannot be changed after the cluster has been registered.
	Project *string `pulumi:"project"`
}

// FleetInput is an input type that accepts FleetArgs and FleetOutput values.
// You can construct a concrete instance of `FleetInput` via:
//
//	FleetArgs{...}
type FleetInput interface {
	pulumi.Input

	ToFleetOutput() FleetOutput
	ToFleetOutputWithContext(context.Context) FleetOutput
}

// Fleet is the fleet configuration for the cluster.
type FleetArgs struct {
	// The Fleet host project(project ID or project number) where this cluster will be registered to. This field cannot be changed after the cluster has been registered.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (FleetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Fleet)(nil)).Elem()
}

func (i FleetArgs) ToFleetOutput() FleetOutput {
	return i.ToFleetOutputWithContext(context.Background())
}

func (i FleetArgs) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetOutput)
}

func (i FleetArgs) ToFleetPtrOutput() FleetPtrOutput {
	return i.ToFleetPtrOutputWithContext(context.Background())
}

func (i FleetArgs) ToFleetPtrOutputWithContext(ctx context.Context) FleetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetOutput).ToFleetPtrOutputWithContext(ctx)
}

// FleetPtrInput is an input type that accepts FleetArgs, FleetPtr and FleetPtrOutput values.
// You can construct a concrete instance of `FleetPtrInput` via:
//
//	        FleetArgs{...}
//
//	or:
//
//	        nil
type FleetPtrInput interface {
	pulumi.Input

	ToFleetPtrOutput() FleetPtrOutput
	ToFleetPtrOutputWithContext(context.Context) FleetPtrOutput
}

type fleetPtrType FleetArgs

func FleetPtr(v *FleetArgs) FleetPtrInput {
	return (*fleetPtrType)(v)
}

func (*fleetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (i *fleetPtrType) ToFleetPtrOutput() FleetPtrOutput {
	return i.ToFleetPtrOutputWithContext(context.Background())
}

func (i *fleetPtrType) ToFleetPtrOutputWithContext(ctx context.Context) FleetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetPtrOutput)
}

// Fleet is the fleet configuration for the cluster.
type FleetOutput struct{ *pulumi.OutputState }

func (FleetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fleet)(nil)).Elem()
}

func (o FleetOutput) ToFleetOutput() FleetOutput {
	return o
}

func (o FleetOutput) ToFleetOutputWithContext(ctx context.Context) FleetOutput {
	return o
}

func (o FleetOutput) ToFleetPtrOutput() FleetPtrOutput {
	return o.ToFleetPtrOutputWithContext(context.Background())
}

func (o FleetOutput) ToFleetPtrOutputWithContext(ctx context.Context) FleetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Fleet) *Fleet {
		return &v
	}).(FleetPtrOutput)
}

// The Fleet host project(project ID or project number) where this cluster will be registered to. This field cannot be changed after the cluster has been registered.
func (o FleetOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Fleet) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type FleetPtrOutput struct{ *pulumi.OutputState }

func (FleetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fleet)(nil)).Elem()
}

func (o FleetPtrOutput) ToFleetPtrOutput() FleetPtrOutput {
	return o
}

func (o FleetPtrOutput) ToFleetPtrOutputWithContext(ctx context.Context) FleetPtrOutput {
	return o
}

func (o FleetPtrOutput) Elem() FleetOutput {
	return o.ApplyT(func(v *Fleet) Fleet {
		if v != nil {
			return *v
		}
		var ret Fleet
		return ret
	}).(FleetOutput)
}

// The Fleet host project(project ID or project number) where this cluster will be registered to. This field cannot be changed after the cluster has been registered.
func (o FleetPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fleet) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Fleet is the fleet configuration for the cluster.
type FleetResponse struct {
	// [Output only] The full resource name of the registered fleet membership of the cluster, in the format `//gkehub.googleapis.com/projects/*/locations/*/memberships/*`.
	Membership string `pulumi:"membership"`
	// [Output only] Whether the cluster has been registered through the fleet API.
	PreRegistered bool `pulumi:"preRegistered"`
	// The Fleet host project(project ID or project number) where this cluster will be registered to. This field cannot be changed after the cluster has been registered.
	Project string `pulumi:"project"`
}

// Fleet is the fleet configuration for the cluster.
type FleetResponseOutput struct{ *pulumi.OutputState }

func (FleetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetResponse)(nil)).Elem()
}

func (o FleetResponseOutput) ToFleetResponseOutput() FleetResponseOutput {
	return o
}

func (o FleetResponseOutput) ToFleetResponseOutputWithContext(ctx context.Context) FleetResponseOutput {
	return o
}

// [Output only] The full resource name of the registered fleet membership of the cluster, in the format `//gkehub.googleapis.com/projects/*/locations/*/memberships/*`.
func (o FleetResponseOutput) Membership() pulumi.StringOutput {
	return o.ApplyT(func(v FleetResponse) string { return v.Membership }).(pulumi.StringOutput)
}

// [Output only] Whether the cluster has been registered through the fleet API.
func (o FleetResponseOutput) PreRegistered() pulumi.BoolOutput {
	return o.ApplyT(func(v FleetResponse) bool { return v.PreRegistered }).(pulumi.BoolOutput)
}

// The Fleet host project(project ID or project number) where this cluster will be registered to. This field cannot be changed after the cluster has been registered.
func (o FleetResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v FleetResponse) string { return v.Project }).(pulumi.StringOutput)
}

// GPUDriverInstallationConfig specifies the version of GPU driver to be auto installed.
type GPUDriverInstallationConfig struct {
	// Mode for how the GPU driver is installed.
	GpuDriverVersion *GPUDriverInstallationConfigGpuDriverVersion `pulumi:"gpuDriverVersion"`
}

// GPUDriverInstallationConfigInput is an input type that accepts GPUDriverInstallationConfigArgs and GPUDriverInstallationConfigOutput values.
// You can construct a concrete instance of `GPUDriverInstallationConfigInput` via:
//
//	GPUDriverInstallationConfigArgs{...}
type GPUDriverInstallationConfigInput interface {
	pulumi.Input

	ToGPUDriverInstallationConfigOutput() GPUDriverInstallationConfigOutput
	ToGPUDriverInstallationConfigOutputWithContext(context.Context) GPUDriverInstallationConfigOutput
}

// GPUDriverInstallationConfig specifies the version of GPU driver to be auto installed.
type GPUDriverInstallationConfigArgs struct {
	// Mode for how the GPU driver is installed.
	GpuDriverVersion GPUDriverInstallationConfigGpuDriverVersionPtrInput `pulumi:"gpuDriverVersion"`
}

func (GPUDriverInstallationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUDriverInstallationConfig)(nil)).Elem()
}

func (i GPUDriverInstallationConfigArgs) ToGPUDriverInstallationConfigOutput() GPUDriverInstallationConfigOutput {
	return i.ToGPUDriverInstallationConfigOutputWithContext(context.Background())
}

func (i GPUDriverInstallationConfigArgs) ToGPUDriverInstallationConfigOutputWithContext(ctx context.Context) GPUDriverInstallationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GPUDriverInstallationConfigOutput)
}

func (i GPUDriverInstallationConfigArgs) ToGPUDriverInstallationConfigPtrOutput() GPUDriverInstallationConfigPtrOutput {
	return i.ToGPUDriverInstallationConfigPtrOutputWithContext(context.Background())
}

func (i GPUDriverInstallationConfigArgs) ToGPUDriverInstallationConfigPtrOutputWithContext(ctx context.Context) GPUDriverInstallationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GPUDriverInstallationConfigOutput).ToGPUDriverInstallationConfigPtrOutputWithContext(ctx)
}

// GPUDriverInstallationConfigPtrInput is an input type that accepts GPUDriverInstallationConfigArgs, GPUDriverInstallationConfigPtr and GPUDriverInstallationConfigPtrOutput values.
// You can construct a concrete instance of `GPUDriverInstallationConfigPtrInput` via:
//
//	        GPUDriverInstallationConfigArgs{...}
//
//	or:
//
//	        nil
type GPUDriverInstallationConfigPtrInput interface {
	pulumi.Input

	ToGPUDriverInstallationConfigPtrOutput() GPUDriverInstallationConfigPtrOutput
	ToGPUDriverInstallationConfigPtrOutputWithContext(context.Context) GPUDriverInstallationConfigPtrOutput
}

type gpudriverInstallationConfigPtrType GPUDriverInstallationConfigArgs

func GPUDriverInstallationConfigPtr(v *GPUDriverInstallationConfigArgs) GPUDriverInstallationConfigPtrInput {
	return (*gpudriverInstallationConfigPtrType)(v)
}

func (*gpudriverInstallationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GPUDriverInstallationConfig)(nil)).Elem()
}

func (i *gpudriverInstallationConfigPtrType) ToGPUDriverInstallationConfigPtrOutput() GPUDriverInstallationConfigPtrOutput {
	return i.ToGPUDriverInstallationConfigPtrOutputWithContext(context.Background())
}

func (i *gpudriverInstallationConfigPtrType) ToGPUDriverInstallationConfigPtrOutputWithContext(ctx context.Context) GPUDriverInstallationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GPUDriverInstallationConfigPtrOutput)
}

// GPUDriverInstallationConfig specifies the version of GPU driver to be auto installed.
type GPUDriverInstallationConfigOutput struct{ *pulumi.OutputState }

func (GPUDriverInstallationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUDriverInstallationConfig)(nil)).Elem()
}

func (o GPUDriverInstallationConfigOutput) ToGPUDriverInstallationConfigOutput() GPUDriverInstallationConfigOutput {
	return o
}

func (o GPUDriverInstallationConfigOutput) ToGPUDriverInstallationConfigOutputWithContext(ctx context.Context) GPUDriverInstallationConfigOutput {
	return o
}

func (o GPUDriverInstallationConfigOutput) ToGPUDriverInstallationConfigPtrOutput() GPUDriverInstallationConfigPtrOutput {
	return o.ToGPUDriverInstallationConfigPtrOutputWithContext(context.Background())
}

func (o GPUDriverInstallationConfigOutput) ToGPUDriverInstallationConfigPtrOutputWithContext(ctx context.Context) GPUDriverInstallationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GPUDriverInstallationConfig) *GPUDriverInstallationConfig {
		return &v
	}).(GPUDriverInstallationConfigPtrOutput)
}

// Mode for how the GPU driver is installed.
func (o GPUDriverInstallationConfigOutput) GpuDriverVersion() GPUDriverInstallationConfigGpuDriverVersionPtrOutput {
	return o.ApplyT(func(v GPUDriverInstallationConfig) *GPUDriverInstallationConfigGpuDriverVersion {
		return v.GpuDriverVersion
	}).(GPUDriverInstallationConfigGpuDriverVersionPtrOutput)
}

type GPUDriverInstallationConfigPtrOutput struct{ *pulumi.OutputState }

func (GPUDriverInstallationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GPUDriverInstallationConfig)(nil)).Elem()
}

func (o GPUDriverInstallationConfigPtrOutput) ToGPUDriverInstallationConfigPtrOutput() GPUDriverInstallationConfigPtrOutput {
	return o
}

func (o GPUDriverInstallationConfigPtrOutput) ToGPUDriverInstallationConfigPtrOutputWithContext(ctx context.Context) GPUDriverInstallationConfigPtrOutput {
	return o
}

func (o GPUDriverInstallationConfigPtrOutput) Elem() GPUDriverInstallationConfigOutput {
	return o.ApplyT(func(v *GPUDriverInstallationConfig) GPUDriverInstallationConfig {
		if v != nil {
			return *v
		}
		var ret GPUDriverInstallationConfig
		return ret
	}).(GPUDriverInstallationConfigOutput)
}

// Mode for how the GPU driver is installed.
func (o GPUDriverInstallationConfigPtrOutput) GpuDriverVersion() GPUDriverInstallationConfigGpuDriverVersionPtrOutput {
	return o.ApplyT(func(v *GPUDriverInstallationConfig) *GPUDriverInstallationConfigGpuDriverVersion {
		if v == nil {
			return nil
		}
		return v.GpuDriverVersion
	}).(GPUDriverInstallationConfigGpuDriverVersionPtrOutput)
}

// GPUDriverInstallationConfig specifies the version of GPU driver to be auto installed.
type GPUDriverInstallationConfigResponse struct {
	// Mode for how the GPU driver is installed.
	GpuDriverVersion string `pulumi:"gpuDriverVersion"`
}

// GPUDriverInstallationConfig specifies the version of GPU driver to be auto installed.
type GPUDriverInstallationConfigResponseOutput struct{ *pulumi.OutputState }

func (GPUDriverInstallationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUDriverInstallationConfigResponse)(nil)).Elem()
}

func (o GPUDriverInstallationConfigResponseOutput) ToGPUDriverInstallationConfigResponseOutput() GPUDriverInstallationConfigResponseOutput {
	return o
}

func (o GPUDriverInstallationConfigResponseOutput) ToGPUDriverInstallationConfigResponseOutputWithContext(ctx context.Context) GPUDriverInstallationConfigResponseOutput {
	return o
}

// Mode for how the GPU driver is installed.
func (o GPUDriverInstallationConfigResponseOutput) GpuDriverVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GPUDriverInstallationConfigResponse) string { return v.GpuDriverVersion }).(pulumi.StringOutput)
}

// GPUSharingConfig represents the GPU sharing configuration for Hardware Accelerators.
type GPUSharingConfig struct {
	// The type of GPU sharing strategy to enable on the GPU node.
	GpuSharingStrategy *GPUSharingConfigGpuSharingStrategy `pulumi:"gpuSharingStrategy"`
	// The max number of containers that can share a physical GPU.
	MaxSharedClientsPerGpu *string `pulumi:"maxSharedClientsPerGpu"`
}

// GPUSharingConfigInput is an input type that accepts GPUSharingConfigArgs and GPUSharingConfigOutput values.
// You can construct a concrete instance of `GPUSharingConfigInput` via:
//
//	GPUSharingConfigArgs{...}
type GPUSharingConfigInput interface {
	pulumi.Input

	ToGPUSharingConfigOutput() GPUSharingConfigOutput
	ToGPUSharingConfigOutputWithContext(context.Context) GPUSharingConfigOutput
}

// GPUSharingConfig represents the GPU sharing configuration for Hardware Accelerators.
type GPUSharingConfigArgs struct {
	// The type of GPU sharing strategy to enable on the GPU node.
	GpuSharingStrategy GPUSharingConfigGpuSharingStrategyPtrInput `pulumi:"gpuSharingStrategy"`
	// The max number of containers that can share a physical GPU.
	MaxSharedClientsPerGpu pulumi.StringPtrInput `pulumi:"maxSharedClientsPerGpu"`
}

func (GPUSharingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUSharingConfig)(nil)).Elem()
}

func (i GPUSharingConfigArgs) ToGPUSharingConfigOutput() GPUSharingConfigOutput {
	return i.ToGPUSharingConfigOutputWithContext(context.Background())
}

func (i GPUSharingConfigArgs) ToGPUSharingConfigOutputWithContext(ctx context.Context) GPUSharingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GPUSharingConfigOutput)
}

func (i GPUSharingConfigArgs) ToGPUSharingConfigPtrOutput() GPUSharingConfigPtrOutput {
	return i.ToGPUSharingConfigPtrOutputWithContext(context.Background())
}

func (i GPUSharingConfigArgs) ToGPUSharingConfigPtrOutputWithContext(ctx context.Context) GPUSharingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GPUSharingConfigOutput).ToGPUSharingConfigPtrOutputWithContext(ctx)
}

// GPUSharingConfigPtrInput is an input type that accepts GPUSharingConfigArgs, GPUSharingConfigPtr and GPUSharingConfigPtrOutput values.
// You can construct a concrete instance of `GPUSharingConfigPtrInput` via:
//
//	        GPUSharingConfigArgs{...}
//
//	or:
//
//	        nil
type GPUSharingConfigPtrInput interface {
	pulumi.Input

	ToGPUSharingConfigPtrOutput() GPUSharingConfigPtrOutput
	ToGPUSharingConfigPtrOutputWithContext(context.Context) GPUSharingConfigPtrOutput
}

type gpusharingConfigPtrType GPUSharingConfigArgs

func GPUSharingConfigPtr(v *GPUSharingConfigArgs) GPUSharingConfigPtrInput {
	return (*gpusharingConfigPtrType)(v)
}

func (*gpusharingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GPUSharingConfig)(nil)).Elem()
}

func (i *gpusharingConfigPtrType) ToGPUSharingConfigPtrOutput() GPUSharingConfigPtrOutput {
	return i.ToGPUSharingConfigPtrOutputWithContext(context.Background())
}

func (i *gpusharingConfigPtrType) ToGPUSharingConfigPtrOutputWithContext(ctx context.Context) GPUSharingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GPUSharingConfigPtrOutput)
}

// GPUSharingConfig represents the GPU sharing configuration for Hardware Accelerators.
type GPUSharingConfigOutput struct{ *pulumi.OutputState }

func (GPUSharingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUSharingConfig)(nil)).Elem()
}

func (o GPUSharingConfigOutput) ToGPUSharingConfigOutput() GPUSharingConfigOutput {
	return o
}

func (o GPUSharingConfigOutput) ToGPUSharingConfigOutputWithContext(ctx context.Context) GPUSharingConfigOutput {
	return o
}

func (o GPUSharingConfigOutput) ToGPUSharingConfigPtrOutput() GPUSharingConfigPtrOutput {
	return o.ToGPUSharingConfigPtrOutputWithContext(context.Background())
}

func (o GPUSharingConfigOutput) ToGPUSharingConfigPtrOutputWithContext(ctx context.Context) GPUSharingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GPUSharingConfig) *GPUSharingConfig {
		return &v
	}).(GPUSharingConfigPtrOutput)
}

// The type of GPU sharing strategy to enable on the GPU node.
func (o GPUSharingConfigOutput) GpuSharingStrategy() GPUSharingConfigGpuSharingStrategyPtrOutput {
	return o.ApplyT(func(v GPUSharingConfig) *GPUSharingConfigGpuSharingStrategy { return v.GpuSharingStrategy }).(GPUSharingConfigGpuSharingStrategyPtrOutput)
}

// The max number of containers that can share a physical GPU.
func (o GPUSharingConfigOutput) MaxSharedClientsPerGpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GPUSharingConfig) *string { return v.MaxSharedClientsPerGpu }).(pulumi.StringPtrOutput)
}

type GPUSharingConfigPtrOutput struct{ *pulumi.OutputState }

func (GPUSharingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GPUSharingConfig)(nil)).Elem()
}

func (o GPUSharingConfigPtrOutput) ToGPUSharingConfigPtrOutput() GPUSharingConfigPtrOutput {
	return o
}

func (o GPUSharingConfigPtrOutput) ToGPUSharingConfigPtrOutputWithContext(ctx context.Context) GPUSharingConfigPtrOutput {
	return o
}

func (o GPUSharingConfigPtrOutput) Elem() GPUSharingConfigOutput {
	return o.ApplyT(func(v *GPUSharingConfig) GPUSharingConfig {
		if v != nil {
			return *v
		}
		var ret GPUSharingConfig
		return ret
	}).(GPUSharingConfigOutput)
}

// The type of GPU sharing strategy to enable on the GPU node.
func (o GPUSharingConfigPtrOutput) GpuSharingStrategy() GPUSharingConfigGpuSharingStrategyPtrOutput {
	return o.ApplyT(func(v *GPUSharingConfig) *GPUSharingConfigGpuSharingStrategy {
		if v == nil {
			return nil
		}
		return v.GpuSharingStrategy
	}).(GPUSharingConfigGpuSharingStrategyPtrOutput)
}

// The max number of containers that can share a physical GPU.
func (o GPUSharingConfigPtrOutput) MaxSharedClientsPerGpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GPUSharingConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxSharedClientsPerGpu
	}).(pulumi.StringPtrOutput)
}

// GPUSharingConfig represents the GPU sharing configuration for Hardware Accelerators.
type GPUSharingConfigResponse struct {
	// The type of GPU sharing strategy to enable on the GPU node.
	GpuSharingStrategy string `pulumi:"gpuSharingStrategy"`
	// The max number of containers that can share a physical GPU.
	MaxSharedClientsPerGpu string `pulumi:"maxSharedClientsPerGpu"`
}

// GPUSharingConfig represents the GPU sharing configuration for Hardware Accelerators.
type GPUSharingConfigResponseOutput struct{ *pulumi.OutputState }

func (GPUSharingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUSharingConfigResponse)(nil)).Elem()
}

func (o GPUSharingConfigResponseOutput) ToGPUSharingConfigResponseOutput() GPUSharingConfigResponseOutput {
	return o
}

func (o GPUSharingConfigResponseOutput) ToGPUSharingConfigResponseOutputWithContext(ctx context.Context) GPUSharingConfigResponseOutput {
	return o
}

// The type of GPU sharing strategy to enable on the GPU node.
func (o GPUSharingConfigResponseOutput) GpuSharingStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GPUSharingConfigResponse) string { return v.GpuSharingStrategy }).(pulumi.StringOutput)
}

// The max number of containers that can share a physical GPU.
func (o GPUSharingConfigResponseOutput) MaxSharedClientsPerGpu() pulumi.StringOutput {
	return o.ApplyT(func(v GPUSharingConfigResponse) string { return v.MaxSharedClientsPerGpu }).(pulumi.StringOutput)
}

// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
type GatewayAPIConfig struct {
	// The Gateway API release channel to use for Gateway API.
	Channel *GatewayAPIConfigChannel `pulumi:"channel"`
}

// GatewayAPIConfigInput is an input type that accepts GatewayAPIConfigArgs and GatewayAPIConfigOutput values.
// You can construct a concrete instance of `GatewayAPIConfigInput` via:
//
//	GatewayAPIConfigArgs{...}
type GatewayAPIConfigInput interface {
	pulumi.Input

	ToGatewayAPIConfigOutput() GatewayAPIConfigOutput
	ToGatewayAPIConfigOutputWithContext(context.Context) GatewayAPIConfigOutput
}

// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
type GatewayAPIConfigArgs struct {
	// The Gateway API release channel to use for Gateway API.
	Channel GatewayAPIConfigChannelPtrInput `pulumi:"channel"`
}

func (GatewayAPIConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayAPIConfig)(nil)).Elem()
}

func (i GatewayAPIConfigArgs) ToGatewayAPIConfigOutput() GatewayAPIConfigOutput {
	return i.ToGatewayAPIConfigOutputWithContext(context.Background())
}

func (i GatewayAPIConfigArgs) ToGatewayAPIConfigOutputWithContext(ctx context.Context) GatewayAPIConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAPIConfigOutput)
}

func (i GatewayAPIConfigArgs) ToGatewayAPIConfigPtrOutput() GatewayAPIConfigPtrOutput {
	return i.ToGatewayAPIConfigPtrOutputWithContext(context.Background())
}

func (i GatewayAPIConfigArgs) ToGatewayAPIConfigPtrOutputWithContext(ctx context.Context) GatewayAPIConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAPIConfigOutput).ToGatewayAPIConfigPtrOutputWithContext(ctx)
}

// GatewayAPIConfigPtrInput is an input type that accepts GatewayAPIConfigArgs, GatewayAPIConfigPtr and GatewayAPIConfigPtrOutput values.
// You can construct a concrete instance of `GatewayAPIConfigPtrInput` via:
//
//	        GatewayAPIConfigArgs{...}
//
//	or:
//
//	        nil
type GatewayAPIConfigPtrInput interface {
	pulumi.Input

	ToGatewayAPIConfigPtrOutput() GatewayAPIConfigPtrOutput
	ToGatewayAPIConfigPtrOutputWithContext(context.Context) GatewayAPIConfigPtrOutput
}

type gatewayAPIConfigPtrType GatewayAPIConfigArgs

func GatewayAPIConfigPtr(v *GatewayAPIConfigArgs) GatewayAPIConfigPtrInput {
	return (*gatewayAPIConfigPtrType)(v)
}

func (*gatewayAPIConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAPIConfig)(nil)).Elem()
}

func (i *gatewayAPIConfigPtrType) ToGatewayAPIConfigPtrOutput() GatewayAPIConfigPtrOutput {
	return i.ToGatewayAPIConfigPtrOutputWithContext(context.Background())
}

func (i *gatewayAPIConfigPtrType) ToGatewayAPIConfigPtrOutputWithContext(ctx context.Context) GatewayAPIConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAPIConfigPtrOutput)
}

// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
type GatewayAPIConfigOutput struct{ *pulumi.OutputState }

func (GatewayAPIConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayAPIConfig)(nil)).Elem()
}

func (o GatewayAPIConfigOutput) ToGatewayAPIConfigOutput() GatewayAPIConfigOutput {
	return o
}

func (o GatewayAPIConfigOutput) ToGatewayAPIConfigOutputWithContext(ctx context.Context) GatewayAPIConfigOutput {
	return o
}

func (o GatewayAPIConfigOutput) ToGatewayAPIConfigPtrOutput() GatewayAPIConfigPtrOutput {
	return o.ToGatewayAPIConfigPtrOutputWithContext(context.Background())
}

func (o GatewayAPIConfigOutput) ToGatewayAPIConfigPtrOutputWithContext(ctx context.Context) GatewayAPIConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewayAPIConfig) *GatewayAPIConfig {
		return &v
	}).(GatewayAPIConfigPtrOutput)
}

// The Gateway API release channel to use for Gateway API.
func (o GatewayAPIConfigOutput) Channel() GatewayAPIConfigChannelPtrOutput {
	return o.ApplyT(func(v GatewayAPIConfig) *GatewayAPIConfigChannel { return v.Channel }).(GatewayAPIConfigChannelPtrOutput)
}

type GatewayAPIConfigPtrOutput struct{ *pulumi.OutputState }

func (GatewayAPIConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAPIConfig)(nil)).Elem()
}

func (o GatewayAPIConfigPtrOutput) ToGatewayAPIConfigPtrOutput() GatewayAPIConfigPtrOutput {
	return o
}

func (o GatewayAPIConfigPtrOutput) ToGatewayAPIConfigPtrOutputWithContext(ctx context.Context) GatewayAPIConfigPtrOutput {
	return o
}

func (o GatewayAPIConfigPtrOutput) Elem() GatewayAPIConfigOutput {
	return o.ApplyT(func(v *GatewayAPIConfig) GatewayAPIConfig {
		if v != nil {
			return *v
		}
		var ret GatewayAPIConfig
		return ret
	}).(GatewayAPIConfigOutput)
}

// The Gateway API release channel to use for Gateway API.
func (o GatewayAPIConfigPtrOutput) Channel() GatewayAPIConfigChannelPtrOutput {
	return o.ApplyT(func(v *GatewayAPIConfig) *GatewayAPIConfigChannel {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(GatewayAPIConfigChannelPtrOutput)
}

// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
type GatewayAPIConfigResponse struct {
	// The Gateway API release channel to use for Gateway API.
	Channel string `pulumi:"channel"`
}

// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
type GatewayAPIConfigResponseOutput struct{ *pulumi.OutputState }

func (GatewayAPIConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayAPIConfigResponse)(nil)).Elem()
}

func (o GatewayAPIConfigResponseOutput) ToGatewayAPIConfigResponseOutput() GatewayAPIConfigResponseOutput {
	return o
}

func (o GatewayAPIConfigResponseOutput) ToGatewayAPIConfigResponseOutputWithContext(ctx context.Context) GatewayAPIConfigResponseOutput {
	return o
}

// The Gateway API release channel to use for Gateway API.
func (o GatewayAPIConfigResponseOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayAPIConfigResponse) string { return v.Channel }).(pulumi.StringOutput)
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfig struct {
	// Whether the Compute Engine PD CSI driver is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// GcePersistentDiskCsiDriverConfigInput is an input type that accepts GcePersistentDiskCsiDriverConfigArgs and GcePersistentDiskCsiDriverConfigOutput values.
// You can construct a concrete instance of `GcePersistentDiskCsiDriverConfigInput` via:
//
//	GcePersistentDiskCsiDriverConfigArgs{...}
type GcePersistentDiskCsiDriverConfigInput interface {
	pulumi.Input

	ToGcePersistentDiskCsiDriverConfigOutput() GcePersistentDiskCsiDriverConfigOutput
	ToGcePersistentDiskCsiDriverConfigOutputWithContext(context.Context) GcePersistentDiskCsiDriverConfigOutput
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigArgs struct {
	// Whether the Compute Engine PD CSI driver is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GcePersistentDiskCsiDriverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigOutput() GcePersistentDiskCsiDriverConfigOutput {
	return i.ToGcePersistentDiskCsiDriverConfigOutputWithContext(context.Background())
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigOutput)
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return i.ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (i GcePersistentDiskCsiDriverConfigArgs) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigOutput).ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx)
}

// GcePersistentDiskCsiDriverConfigPtrInput is an input type that accepts GcePersistentDiskCsiDriverConfigArgs, GcePersistentDiskCsiDriverConfigPtr and GcePersistentDiskCsiDriverConfigPtrOutput values.
// You can construct a concrete instance of `GcePersistentDiskCsiDriverConfigPtrInput` via:
//
//	        GcePersistentDiskCsiDriverConfigArgs{...}
//
//	or:
//
//	        nil
type GcePersistentDiskCsiDriverConfigPtrInput interface {
	pulumi.Input

	ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput
	ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Context) GcePersistentDiskCsiDriverConfigPtrOutput
}

type gcePersistentDiskCsiDriverConfigPtrType GcePersistentDiskCsiDriverConfigArgs

func GcePersistentDiskCsiDriverConfigPtr(v *GcePersistentDiskCsiDriverConfigArgs) GcePersistentDiskCsiDriverConfigPtrInput {
	return (*gcePersistentDiskCsiDriverConfigPtrType)(v)
}

func (*gcePersistentDiskCsiDriverConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (i *gcePersistentDiskCsiDriverConfigPtrType) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return i.ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (i *gcePersistentDiskCsiDriverConfigPtrType) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigOutput struct{ *pulumi.OutputState }

func (GcePersistentDiskCsiDriverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigOutput() GcePersistentDiskCsiDriverConfigOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (o GcePersistentDiskCsiDriverConfigOutput) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcePersistentDiskCsiDriverConfig) *GcePersistentDiskCsiDriverConfig {
		return &v
	}).(GcePersistentDiskCsiDriverConfigPtrOutput)
}

// Whether the Compute Engine PD CSI driver is enabled for this cluster.
func (o GcePersistentDiskCsiDriverConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GcePersistentDiskCsiDriverConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GcePersistentDiskCsiDriverConfigPtrOutput struct{ *pulumi.OutputState }

func (GcePersistentDiskCsiDriverConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcePersistentDiskCsiDriverConfig)(nil)).Elem()
}

func (o GcePersistentDiskCsiDriverConfigPtrOutput) ToGcePersistentDiskCsiDriverConfigPtrOutput() GcePersistentDiskCsiDriverConfigPtrOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigPtrOutput) ToGcePersistentDiskCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigPtrOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigPtrOutput) Elem() GcePersistentDiskCsiDriverConfigOutput {
	return o.ApplyT(func(v *GcePersistentDiskCsiDriverConfig) GcePersistentDiskCsiDriverConfig {
		if v != nil {
			return *v
		}
		var ret GcePersistentDiskCsiDriverConfig
		return ret
	}).(GcePersistentDiskCsiDriverConfigOutput)
}

// Whether the Compute Engine PD CSI driver is enabled for this cluster.
func (o GcePersistentDiskCsiDriverConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcePersistentDiskCsiDriverConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigResponse struct {
	// Whether the Compute Engine PD CSI driver is enabled for this cluster.
	Enabled bool `pulumi:"enabled"`
}

// Configuration for the Compute Engine PD CSI driver.
type GcePersistentDiskCsiDriverConfigResponseOutput struct{ *pulumi.OutputState }

func (GcePersistentDiskCsiDriverConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcePersistentDiskCsiDriverConfigResponse)(nil)).Elem()
}

func (o GcePersistentDiskCsiDriverConfigResponseOutput) ToGcePersistentDiskCsiDriverConfigResponseOutput() GcePersistentDiskCsiDriverConfigResponseOutput {
	return o
}

func (o GcePersistentDiskCsiDriverConfigResponseOutput) ToGcePersistentDiskCsiDriverConfigResponseOutputWithContext(ctx context.Context) GcePersistentDiskCsiDriverConfigResponseOutput {
	return o
}

// Whether the Compute Engine PD CSI driver is enabled for this cluster.
func (o GcePersistentDiskCsiDriverConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GcePersistentDiskCsiDriverConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// GcfsConfig contains configurations of Google Container File System (image streaming).
type GcfsConfig struct {
	// Whether to use GCFS.
	Enabled *bool `pulumi:"enabled"`
}

// GcfsConfigInput is an input type that accepts GcfsConfigArgs and GcfsConfigOutput values.
// You can construct a concrete instance of `GcfsConfigInput` via:
//
//	GcfsConfigArgs{...}
type GcfsConfigInput interface {
	pulumi.Input

	ToGcfsConfigOutput() GcfsConfigOutput
	ToGcfsConfigOutputWithContext(context.Context) GcfsConfigOutput
}

// GcfsConfig contains configurations of Google Container File System (image streaming).
type GcfsConfigArgs struct {
	// Whether to use GCFS.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GcfsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcfsConfig)(nil)).Elem()
}

func (i GcfsConfigArgs) ToGcfsConfigOutput() GcfsConfigOutput {
	return i.ToGcfsConfigOutputWithContext(context.Background())
}

func (i GcfsConfigArgs) ToGcfsConfigOutputWithContext(ctx context.Context) GcfsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcfsConfigOutput)
}

func (i GcfsConfigArgs) ToGcfsConfigPtrOutput() GcfsConfigPtrOutput {
	return i.ToGcfsConfigPtrOutputWithContext(context.Background())
}

func (i GcfsConfigArgs) ToGcfsConfigPtrOutputWithContext(ctx context.Context) GcfsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcfsConfigOutput).ToGcfsConfigPtrOutputWithContext(ctx)
}

// GcfsConfigPtrInput is an input type that accepts GcfsConfigArgs, GcfsConfigPtr and GcfsConfigPtrOutput values.
// You can construct a concrete instance of `GcfsConfigPtrInput` via:
//
//	        GcfsConfigArgs{...}
//
//	or:
//
//	        nil
type GcfsConfigPtrInput interface {
	pulumi.Input

	ToGcfsConfigPtrOutput() GcfsConfigPtrOutput
	ToGcfsConfigPtrOutputWithContext(context.Context) GcfsConfigPtrOutput
}

type gcfsConfigPtrType GcfsConfigArgs

func GcfsConfigPtr(v *GcfsConfigArgs) GcfsConfigPtrInput {
	return (*gcfsConfigPtrType)(v)
}

func (*gcfsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcfsConfig)(nil)).Elem()
}

func (i *gcfsConfigPtrType) ToGcfsConfigPtrOutput() GcfsConfigPtrOutput {
	return i.ToGcfsConfigPtrOutputWithContext(context.Background())
}

func (i *gcfsConfigPtrType) ToGcfsConfigPtrOutputWithContext(ctx context.Context) GcfsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcfsConfigPtrOutput)
}

// GcfsConfig contains configurations of Google Container File System (image streaming).
type GcfsConfigOutput struct{ *pulumi.OutputState }

func (GcfsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcfsConfig)(nil)).Elem()
}

func (o GcfsConfigOutput) ToGcfsConfigOutput() GcfsConfigOutput {
	return o
}

func (o GcfsConfigOutput) ToGcfsConfigOutputWithContext(ctx context.Context) GcfsConfigOutput {
	return o
}

func (o GcfsConfigOutput) ToGcfsConfigPtrOutput() GcfsConfigPtrOutput {
	return o.ToGcfsConfigPtrOutputWithContext(context.Background())
}

func (o GcfsConfigOutput) ToGcfsConfigPtrOutputWithContext(ctx context.Context) GcfsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcfsConfig) *GcfsConfig {
		return &v
	}).(GcfsConfigPtrOutput)
}

// Whether to use GCFS.
func (o GcfsConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GcfsConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GcfsConfigPtrOutput struct{ *pulumi.OutputState }

func (GcfsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcfsConfig)(nil)).Elem()
}

func (o GcfsConfigPtrOutput) ToGcfsConfigPtrOutput() GcfsConfigPtrOutput {
	return o
}

func (o GcfsConfigPtrOutput) ToGcfsConfigPtrOutputWithContext(ctx context.Context) GcfsConfigPtrOutput {
	return o
}

func (o GcfsConfigPtrOutput) Elem() GcfsConfigOutput {
	return o.ApplyT(func(v *GcfsConfig) GcfsConfig {
		if v != nil {
			return *v
		}
		var ret GcfsConfig
		return ret
	}).(GcfsConfigOutput)
}

// Whether to use GCFS.
func (o GcfsConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcfsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// GcfsConfig contains configurations of Google Container File System (image streaming).
type GcfsConfigResponse struct {
	// Whether to use GCFS.
	Enabled bool `pulumi:"enabled"`
}

// GcfsConfig contains configurations of Google Container File System (image streaming).
type GcfsConfigResponseOutput struct{ *pulumi.OutputState }

func (GcfsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcfsConfigResponse)(nil)).Elem()
}

func (o GcfsConfigResponseOutput) ToGcfsConfigResponseOutput() GcfsConfigResponseOutput {
	return o
}

func (o GcfsConfigResponseOutput) ToGcfsConfigResponseOutputWithContext(ctx context.Context) GcfsConfigResponseOutput {
	return o
}

// Whether to use GCFS.
func (o GcfsConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GcfsConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Configuration for the GCP Filestore CSI driver.
type GcpFilestoreCsiDriverConfig struct {
	// Whether the GCP Filestore CSI driver is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// GcpFilestoreCsiDriverConfigInput is an input type that accepts GcpFilestoreCsiDriverConfigArgs and GcpFilestoreCsiDriverConfigOutput values.
// You can construct a concrete instance of `GcpFilestoreCsiDriverConfigInput` via:
//
//	GcpFilestoreCsiDriverConfigArgs{...}
type GcpFilestoreCsiDriverConfigInput interface {
	pulumi.Input

	ToGcpFilestoreCsiDriverConfigOutput() GcpFilestoreCsiDriverConfigOutput
	ToGcpFilestoreCsiDriverConfigOutputWithContext(context.Context) GcpFilestoreCsiDriverConfigOutput
}

// Configuration for the GCP Filestore CSI driver.
type GcpFilestoreCsiDriverConfigArgs struct {
	// Whether the GCP Filestore CSI driver is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GcpFilestoreCsiDriverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpFilestoreCsiDriverConfig)(nil)).Elem()
}

func (i GcpFilestoreCsiDriverConfigArgs) ToGcpFilestoreCsiDriverConfigOutput() GcpFilestoreCsiDriverConfigOutput {
	return i.ToGcpFilestoreCsiDriverConfigOutputWithContext(context.Background())
}

func (i GcpFilestoreCsiDriverConfigArgs) ToGcpFilestoreCsiDriverConfigOutputWithContext(ctx context.Context) GcpFilestoreCsiDriverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpFilestoreCsiDriverConfigOutput)
}

func (i GcpFilestoreCsiDriverConfigArgs) ToGcpFilestoreCsiDriverConfigPtrOutput() GcpFilestoreCsiDriverConfigPtrOutput {
	return i.ToGcpFilestoreCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (i GcpFilestoreCsiDriverConfigArgs) ToGcpFilestoreCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcpFilestoreCsiDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpFilestoreCsiDriverConfigOutput).ToGcpFilestoreCsiDriverConfigPtrOutputWithContext(ctx)
}

// GcpFilestoreCsiDriverConfigPtrInput is an input type that accepts GcpFilestoreCsiDriverConfigArgs, GcpFilestoreCsiDriverConfigPtr and GcpFilestoreCsiDriverConfigPtrOutput values.
// You can construct a concrete instance of `GcpFilestoreCsiDriverConfigPtrInput` via:
//
//	        GcpFilestoreCsiDriverConfigArgs{...}
//
//	or:
//
//	        nil
type GcpFilestoreCsiDriverConfigPtrInput interface {
	pulumi.Input

	ToGcpFilestoreCsiDriverConfigPtrOutput() GcpFilestoreCsiDriverConfigPtrOutput
	ToGcpFilestoreCsiDriverConfigPtrOutputWithContext(context.Context) GcpFilestoreCsiDriverConfigPtrOutput
}

type gcpFilestoreCsiDriverConfigPtrType GcpFilestoreCsiDriverConfigArgs

func GcpFilestoreCsiDriverConfigPtr(v *GcpFilestoreCsiDriverConfigArgs) GcpFilestoreCsiDriverConfigPtrInput {
	return (*gcpFilestoreCsiDriverConfigPtrType)(v)
}

func (*gcpFilestoreCsiDriverConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpFilestoreCsiDriverConfig)(nil)).Elem()
}

func (i *gcpFilestoreCsiDriverConfigPtrType) ToGcpFilestoreCsiDriverConfigPtrOutput() GcpFilestoreCsiDriverConfigPtrOutput {
	return i.ToGcpFilestoreCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (i *gcpFilestoreCsiDriverConfigPtrType) ToGcpFilestoreCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcpFilestoreCsiDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpFilestoreCsiDriverConfigPtrOutput)
}

// Configuration for the GCP Filestore CSI driver.
type GcpFilestoreCsiDriverConfigOutput struct{ *pulumi.OutputState }

func (GcpFilestoreCsiDriverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpFilestoreCsiDriverConfig)(nil)).Elem()
}

func (o GcpFilestoreCsiDriverConfigOutput) ToGcpFilestoreCsiDriverConfigOutput() GcpFilestoreCsiDriverConfigOutput {
	return o
}

func (o GcpFilestoreCsiDriverConfigOutput) ToGcpFilestoreCsiDriverConfigOutputWithContext(ctx context.Context) GcpFilestoreCsiDriverConfigOutput {
	return o
}

func (o GcpFilestoreCsiDriverConfigOutput) ToGcpFilestoreCsiDriverConfigPtrOutput() GcpFilestoreCsiDriverConfigPtrOutput {
	return o.ToGcpFilestoreCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (o GcpFilestoreCsiDriverConfigOutput) ToGcpFilestoreCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcpFilestoreCsiDriverConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcpFilestoreCsiDriverConfig) *GcpFilestoreCsiDriverConfig {
		return &v
	}).(GcpFilestoreCsiDriverConfigPtrOutput)
}

// Whether the GCP Filestore CSI driver is enabled for this cluster.
func (o GcpFilestoreCsiDriverConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GcpFilestoreCsiDriverConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GcpFilestoreCsiDriverConfigPtrOutput struct{ *pulumi.OutputState }

func (GcpFilestoreCsiDriverConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpFilestoreCsiDriverConfig)(nil)).Elem()
}

func (o GcpFilestoreCsiDriverConfigPtrOutput) ToGcpFilestoreCsiDriverConfigPtrOutput() GcpFilestoreCsiDriverConfigPtrOutput {
	return o
}

func (o GcpFilestoreCsiDriverConfigPtrOutput) ToGcpFilestoreCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcpFilestoreCsiDriverConfigPtrOutput {
	return o
}

func (o GcpFilestoreCsiDriverConfigPtrOutput) Elem() GcpFilestoreCsiDriverConfigOutput {
	return o.ApplyT(func(v *GcpFilestoreCsiDriverConfig) GcpFilestoreCsiDriverConfig {
		if v != nil {
			return *v
		}
		var ret GcpFilestoreCsiDriverConfig
		return ret
	}).(GcpFilestoreCsiDriverConfigOutput)
}

// Whether the GCP Filestore CSI driver is enabled for this cluster.
func (o GcpFilestoreCsiDriverConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpFilestoreCsiDriverConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the GCP Filestore CSI driver.
type GcpFilestoreCsiDriverConfigResponse struct {
	// Whether the GCP Filestore CSI driver is enabled for this cluster.
	Enabled bool `pulumi:"enabled"`
}

// Configuration for the GCP Filestore CSI driver.
type GcpFilestoreCsiDriverConfigResponseOutput struct{ *pulumi.OutputState }

func (GcpFilestoreCsiDriverConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcpFilestoreCsiDriverConfigResponse)(nil)).Elem()
}

func (o GcpFilestoreCsiDriverConfigResponseOutput) ToGcpFilestoreCsiDriverConfigResponseOutput() GcpFilestoreCsiDriverConfigResponseOutput {
	return o
}

func (o GcpFilestoreCsiDriverConfigResponseOutput) ToGcpFilestoreCsiDriverConfigResponseOutputWithContext(ctx context.Context) GcpFilestoreCsiDriverConfigResponseOutput {
	return o
}

// Whether the GCP Filestore CSI driver is enabled for this cluster.
func (o GcpFilestoreCsiDriverConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GcpFilestoreCsiDriverConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Configuration for the Cloud Storage Fuse CSI driver.
type GcsFuseCsiDriverConfig struct {
	// Whether the Cloud Storage Fuse CSI driver is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// GcsFuseCsiDriverConfigInput is an input type that accepts GcsFuseCsiDriverConfigArgs and GcsFuseCsiDriverConfigOutput values.
// You can construct a concrete instance of `GcsFuseCsiDriverConfigInput` via:
//
//	GcsFuseCsiDriverConfigArgs{...}
type GcsFuseCsiDriverConfigInput interface {
	pulumi.Input

	ToGcsFuseCsiDriverConfigOutput() GcsFuseCsiDriverConfigOutput
	ToGcsFuseCsiDriverConfigOutputWithContext(context.Context) GcsFuseCsiDriverConfigOutput
}

// Configuration for the Cloud Storage Fuse CSI driver.
type GcsFuseCsiDriverConfigArgs struct {
	// Whether the Cloud Storage Fuse CSI driver is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GcsFuseCsiDriverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsFuseCsiDriverConfig)(nil)).Elem()
}

func (i GcsFuseCsiDriverConfigArgs) ToGcsFuseCsiDriverConfigOutput() GcsFuseCsiDriverConfigOutput {
	return i.ToGcsFuseCsiDriverConfigOutputWithContext(context.Background())
}

func (i GcsFuseCsiDriverConfigArgs) ToGcsFuseCsiDriverConfigOutputWithContext(ctx context.Context) GcsFuseCsiDriverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsFuseCsiDriverConfigOutput)
}

func (i GcsFuseCsiDriverConfigArgs) ToGcsFuseCsiDriverConfigPtrOutput() GcsFuseCsiDriverConfigPtrOutput {
	return i.ToGcsFuseCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (i GcsFuseCsiDriverConfigArgs) ToGcsFuseCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcsFuseCsiDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsFuseCsiDriverConfigOutput).ToGcsFuseCsiDriverConfigPtrOutputWithContext(ctx)
}

// GcsFuseCsiDriverConfigPtrInput is an input type that accepts GcsFuseCsiDriverConfigArgs, GcsFuseCsiDriverConfigPtr and GcsFuseCsiDriverConfigPtrOutput values.
// You can construct a concrete instance of `GcsFuseCsiDriverConfigPtrInput` via:
//
//	        GcsFuseCsiDriverConfigArgs{...}
//
//	or:
//
//	        nil
type GcsFuseCsiDriverConfigPtrInput interface {
	pulumi.Input

	ToGcsFuseCsiDriverConfigPtrOutput() GcsFuseCsiDriverConfigPtrOutput
	ToGcsFuseCsiDriverConfigPtrOutputWithContext(context.Context) GcsFuseCsiDriverConfigPtrOutput
}

type gcsFuseCsiDriverConfigPtrType GcsFuseCsiDriverConfigArgs

func GcsFuseCsiDriverConfigPtr(v *GcsFuseCsiDriverConfigArgs) GcsFuseCsiDriverConfigPtrInput {
	return (*gcsFuseCsiDriverConfigPtrType)(v)
}

func (*gcsFuseCsiDriverConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsFuseCsiDriverConfig)(nil)).Elem()
}

func (i *gcsFuseCsiDriverConfigPtrType) ToGcsFuseCsiDriverConfigPtrOutput() GcsFuseCsiDriverConfigPtrOutput {
	return i.ToGcsFuseCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (i *gcsFuseCsiDriverConfigPtrType) ToGcsFuseCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcsFuseCsiDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsFuseCsiDriverConfigPtrOutput)
}

// Configuration for the Cloud Storage Fuse CSI driver.
type GcsFuseCsiDriverConfigOutput struct{ *pulumi.OutputState }

func (GcsFuseCsiDriverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsFuseCsiDriverConfig)(nil)).Elem()
}

func (o GcsFuseCsiDriverConfigOutput) ToGcsFuseCsiDriverConfigOutput() GcsFuseCsiDriverConfigOutput {
	return o
}

func (o GcsFuseCsiDriverConfigOutput) ToGcsFuseCsiDriverConfigOutputWithContext(ctx context.Context) GcsFuseCsiDriverConfigOutput {
	return o
}

func (o GcsFuseCsiDriverConfigOutput) ToGcsFuseCsiDriverConfigPtrOutput() GcsFuseCsiDriverConfigPtrOutput {
	return o.ToGcsFuseCsiDriverConfigPtrOutputWithContext(context.Background())
}

func (o GcsFuseCsiDriverConfigOutput) ToGcsFuseCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcsFuseCsiDriverConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsFuseCsiDriverConfig) *GcsFuseCsiDriverConfig {
		return &v
	}).(GcsFuseCsiDriverConfigPtrOutput)
}

// Whether the Cloud Storage Fuse CSI driver is enabled for this cluster.
func (o GcsFuseCsiDriverConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GcsFuseCsiDriverConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GcsFuseCsiDriverConfigPtrOutput struct{ *pulumi.OutputState }

func (GcsFuseCsiDriverConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsFuseCsiDriverConfig)(nil)).Elem()
}

func (o GcsFuseCsiDriverConfigPtrOutput) ToGcsFuseCsiDriverConfigPtrOutput() GcsFuseCsiDriverConfigPtrOutput {
	return o
}

func (o GcsFuseCsiDriverConfigPtrOutput) ToGcsFuseCsiDriverConfigPtrOutputWithContext(ctx context.Context) GcsFuseCsiDriverConfigPtrOutput {
	return o
}

func (o GcsFuseCsiDriverConfigPtrOutput) Elem() GcsFuseCsiDriverConfigOutput {
	return o.ApplyT(func(v *GcsFuseCsiDriverConfig) GcsFuseCsiDriverConfig {
		if v != nil {
			return *v
		}
		var ret GcsFuseCsiDriverConfig
		return ret
	}).(GcsFuseCsiDriverConfigOutput)
}

// Whether the Cloud Storage Fuse CSI driver is enabled for this cluster.
func (o GcsFuseCsiDriverConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcsFuseCsiDriverConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Cloud Storage Fuse CSI driver.
type GcsFuseCsiDriverConfigResponse struct {
	// Whether the Cloud Storage Fuse CSI driver is enabled for this cluster.
	Enabled bool `pulumi:"enabled"`
}

// Configuration for the Cloud Storage Fuse CSI driver.
type GcsFuseCsiDriverConfigResponseOutput struct{ *pulumi.OutputState }

func (GcsFuseCsiDriverConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsFuseCsiDriverConfigResponse)(nil)).Elem()
}

func (o GcsFuseCsiDriverConfigResponseOutput) ToGcsFuseCsiDriverConfigResponseOutput() GcsFuseCsiDriverConfigResponseOutput {
	return o
}

func (o GcsFuseCsiDriverConfigResponseOutput) ToGcsFuseCsiDriverConfigResponseOutputWithContext(ctx context.Context) GcsFuseCsiDriverConfigResponseOutput {
	return o
}

// Whether the Cloud Storage Fuse CSI driver is enabled for this cluster.
func (o GcsFuseCsiDriverConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GcsFuseCsiDriverConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Configuration for the Backup for GKE Agent.
type GkeBackupAgentConfig struct {
	// Whether the Backup for GKE agent is enabled for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// GkeBackupAgentConfigInput is an input type that accepts GkeBackupAgentConfigArgs and GkeBackupAgentConfigOutput values.
// You can construct a concrete instance of `GkeBackupAgentConfigInput` via:
//
//	GkeBackupAgentConfigArgs{...}
type GkeBackupAgentConfigInput interface {
	pulumi.Input

	ToGkeBackupAgentConfigOutput() GkeBackupAgentConfigOutput
	ToGkeBackupAgentConfigOutputWithContext(context.Context) GkeBackupAgentConfigOutput
}

// Configuration for the Backup for GKE Agent.
type GkeBackupAgentConfigArgs struct {
	// Whether the Backup for GKE agent is enabled for this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (GkeBackupAgentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeBackupAgentConfig)(nil)).Elem()
}

func (i GkeBackupAgentConfigArgs) ToGkeBackupAgentConfigOutput() GkeBackupAgentConfigOutput {
	return i.ToGkeBackupAgentConfigOutputWithContext(context.Background())
}

func (i GkeBackupAgentConfigArgs) ToGkeBackupAgentConfigOutputWithContext(ctx context.Context) GkeBackupAgentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeBackupAgentConfigOutput)
}

func (i GkeBackupAgentConfigArgs) ToGkeBackupAgentConfigPtrOutput() GkeBackupAgentConfigPtrOutput {
	return i.ToGkeBackupAgentConfigPtrOutputWithContext(context.Background())
}

func (i GkeBackupAgentConfigArgs) ToGkeBackupAgentConfigPtrOutputWithContext(ctx context.Context) GkeBackupAgentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeBackupAgentConfigOutput).ToGkeBackupAgentConfigPtrOutputWithContext(ctx)
}

// GkeBackupAgentConfigPtrInput is an input type that accepts GkeBackupAgentConfigArgs, GkeBackupAgentConfigPtr and GkeBackupAgentConfigPtrOutput values.
// You can construct a concrete instance of `GkeBackupAgentConfigPtrInput` via:
//
//	        GkeBackupAgentConfigArgs{...}
//
//	or:
//
//	        nil
type GkeBackupAgentConfigPtrInput interface {
	pulumi.Input

	ToGkeBackupAgentConfigPtrOutput() GkeBackupAgentConfigPtrOutput
	ToGkeBackupAgentConfigPtrOutputWithContext(context.Context) GkeBackupAgentConfigPtrOutput
}

type gkeBackupAgentConfigPtrType GkeBackupAgentConfigArgs

func GkeBackupAgentConfigPtr(v *GkeBackupAgentConfigArgs) GkeBackupAgentConfigPtrInput {
	return (*gkeBackupAgentConfigPtrType)(v)
}

func (*gkeBackupAgentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeBackupAgentConfig)(nil)).Elem()
}

func (i *gkeBackupAgentConfigPtrType) ToGkeBackupAgentConfigPtrOutput() GkeBackupAgentConfigPtrOutput {
	return i.ToGkeBackupAgentConfigPtrOutputWithContext(context.Background())
}

func (i *gkeBackupAgentConfigPtrType) ToGkeBackupAgentConfigPtrOutputWithContext(ctx context.Context) GkeBackupAgentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeBackupAgentConfigPtrOutput)
}

// Configuration for the Backup for GKE Agent.
type GkeBackupAgentConfigOutput struct{ *pulumi.OutputState }

func (GkeBackupAgentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeBackupAgentConfig)(nil)).Elem()
}

func (o GkeBackupAgentConfigOutput) ToGkeBackupAgentConfigOutput() GkeBackupAgentConfigOutput {
	return o
}

func (o GkeBackupAgentConfigOutput) ToGkeBackupAgentConfigOutputWithContext(ctx context.Context) GkeBackupAgentConfigOutput {
	return o
}

func (o GkeBackupAgentConfigOutput) ToGkeBackupAgentConfigPtrOutput() GkeBackupAgentConfigPtrOutput {
	return o.ToGkeBackupAgentConfigPtrOutputWithContext(context.Background())
}

func (o GkeBackupAgentConfigOutput) ToGkeBackupAgentConfigPtrOutputWithContext(ctx context.Context) GkeBackupAgentConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GkeBackupAgentConfig) *GkeBackupAgentConfig {
		return &v
	}).(GkeBackupAgentConfigPtrOutput)
}

// Whether the Backup for GKE agent is enabled for this cluster.
func (o GkeBackupAgentConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GkeBackupAgentConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type GkeBackupAgentConfigPtrOutput struct{ *pulumi.OutputState }

func (GkeBackupAgentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeBackupAgentConfig)(nil)).Elem()
}

func (o GkeBackupAgentConfigPtrOutput) ToGkeBackupAgentConfigPtrOutput() GkeBackupAgentConfigPtrOutput {
	return o
}

func (o GkeBackupAgentConfigPtrOutput) ToGkeBackupAgentConfigPtrOutputWithContext(ctx context.Context) GkeBackupAgentConfigPtrOutput {
	return o
}

func (o GkeBackupAgentConfigPtrOutput) Elem() GkeBackupAgentConfigOutput {
	return o.ApplyT(func(v *GkeBackupAgentConfig) GkeBackupAgentConfig {
		if v != nil {
			return *v
		}
		var ret GkeBackupAgentConfig
		return ret
	}).(GkeBackupAgentConfigOutput)
}

// Whether the Backup for GKE agent is enabled for this cluster.
func (o GkeBackupAgentConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GkeBackupAgentConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Backup for GKE Agent.
type GkeBackupAgentConfigResponse struct {
	// Whether the Backup for GKE agent is enabled for this cluster.
	Enabled bool `pulumi:"enabled"`
}

// Configuration for the Backup for GKE Agent.
type GkeBackupAgentConfigResponseOutput struct{ *pulumi.OutputState }

func (GkeBackupAgentConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeBackupAgentConfigResponse)(nil)).Elem()
}

func (o GkeBackupAgentConfigResponseOutput) ToGkeBackupAgentConfigResponseOutput() GkeBackupAgentConfigResponseOutput {
	return o
}

func (o GkeBackupAgentConfigResponseOutput) ToGkeBackupAgentConfigResponseOutputWithContext(ctx context.Context) GkeBackupAgentConfigResponseOutput {
	return o
}

// Whether the Backup for GKE agent is enabled for this cluster.
func (o GkeBackupAgentConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GkeBackupAgentConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscaling struct {
	// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
	Disabled *bool `pulumi:"disabled"`
}

// HorizontalPodAutoscalingInput is an input type that accepts HorizontalPodAutoscalingArgs and HorizontalPodAutoscalingOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalingInput` via:
//
//	HorizontalPodAutoscalingArgs{...}
type HorizontalPodAutoscalingInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalingOutput() HorizontalPodAutoscalingOutput
	ToHorizontalPodAutoscalingOutputWithContext(context.Context) HorizontalPodAutoscalingOutput
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingArgs struct {
	// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (HorizontalPodAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscaling)(nil)).Elem()
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingOutput() HorizontalPodAutoscalingOutput {
	return i.ToHorizontalPodAutoscalingOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingOutputWithContext(ctx context.Context) HorizontalPodAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingOutput)
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return i.ToHorizontalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i HorizontalPodAutoscalingArgs) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingOutput).ToHorizontalPodAutoscalingPtrOutputWithContext(ctx)
}

// HorizontalPodAutoscalingPtrInput is an input type that accepts HorizontalPodAutoscalingArgs, HorizontalPodAutoscalingPtr and HorizontalPodAutoscalingPtrOutput values.
// You can construct a concrete instance of `HorizontalPodAutoscalingPtrInput` via:
//
//	        HorizontalPodAutoscalingArgs{...}
//
//	or:
//
//	        nil
type HorizontalPodAutoscalingPtrInput interface {
	pulumi.Input

	ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput
	ToHorizontalPodAutoscalingPtrOutputWithContext(context.Context) HorizontalPodAutoscalingPtrOutput
}

type horizontalPodAutoscalingPtrType HorizontalPodAutoscalingArgs

func HorizontalPodAutoscalingPtr(v *HorizontalPodAutoscalingArgs) HorizontalPodAutoscalingPtrInput {
	return (*horizontalPodAutoscalingPtrType)(v)
}

func (*horizontalPodAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscaling)(nil)).Elem()
}

func (i *horizontalPodAutoscalingPtrType) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return i.ToHorizontalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i *horizontalPodAutoscalingPtrType) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HorizontalPodAutoscalingPtrOutput)
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscaling)(nil)).Elem()
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingOutput() HorizontalPodAutoscalingOutput {
	return o
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingOutputWithContext(ctx context.Context) HorizontalPodAutoscalingOutput {
	return o
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return o.ToHorizontalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (o HorizontalPodAutoscalingOutput) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HorizontalPodAutoscaling) *HorizontalPodAutoscaling {
		return &v
	}).(HorizontalPodAutoscalingPtrOutput)
}

// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
func (o HorizontalPodAutoscalingOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HorizontalPodAutoscaling) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type HorizontalPodAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HorizontalPodAutoscaling)(nil)).Elem()
}

func (o HorizontalPodAutoscalingPtrOutput) ToHorizontalPodAutoscalingPtrOutput() HorizontalPodAutoscalingPtrOutput {
	return o
}

func (o HorizontalPodAutoscalingPtrOutput) ToHorizontalPodAutoscalingPtrOutputWithContext(ctx context.Context) HorizontalPodAutoscalingPtrOutput {
	return o
}

func (o HorizontalPodAutoscalingPtrOutput) Elem() HorizontalPodAutoscalingOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscaling) HorizontalPodAutoscaling {
		if v != nil {
			return *v
		}
		var ret HorizontalPodAutoscaling
		return ret
	}).(HorizontalPodAutoscalingOutput)
}

// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
func (o HorizontalPodAutoscalingPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HorizontalPodAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingResponse struct {
	// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
	Disabled bool `pulumi:"disabled"`
}

// Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
type HorizontalPodAutoscalingResponseOutput struct{ *pulumi.OutputState }

func (HorizontalPodAutoscalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HorizontalPodAutoscalingResponse)(nil)).Elem()
}

func (o HorizontalPodAutoscalingResponseOutput) ToHorizontalPodAutoscalingResponseOutput() HorizontalPodAutoscalingResponseOutput {
	return o
}

func (o HorizontalPodAutoscalingResponseOutput) ToHorizontalPodAutoscalingResponseOutputWithContext(ctx context.Context) HorizontalPodAutoscalingResponseOutput {
	return o
}

// Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring.
func (o HorizontalPodAutoscalingResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v HorizontalPodAutoscalingResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancing struct {
	// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
	Disabled *bool `pulumi:"disabled"`
}

// HttpLoadBalancingInput is an input type that accepts HttpLoadBalancingArgs and HttpLoadBalancingOutput values.
// You can construct a concrete instance of `HttpLoadBalancingInput` via:
//
//	HttpLoadBalancingArgs{...}
type HttpLoadBalancingInput interface {
	pulumi.Input

	ToHttpLoadBalancingOutput() HttpLoadBalancingOutput
	ToHttpLoadBalancingOutputWithContext(context.Context) HttpLoadBalancingOutput
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingArgs struct {
	// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (HttpLoadBalancingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLoadBalancing)(nil)).Elem()
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingOutput() HttpLoadBalancingOutput {
	return i.ToHttpLoadBalancingOutputWithContext(context.Background())
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingOutputWithContext(ctx context.Context) HttpLoadBalancingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingOutput)
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return i.ToHttpLoadBalancingPtrOutputWithContext(context.Background())
}

func (i HttpLoadBalancingArgs) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingOutput).ToHttpLoadBalancingPtrOutputWithContext(ctx)
}

// HttpLoadBalancingPtrInput is an input type that accepts HttpLoadBalancingArgs, HttpLoadBalancingPtr and HttpLoadBalancingPtrOutput values.
// You can construct a concrete instance of `HttpLoadBalancingPtrInput` via:
//
//	        HttpLoadBalancingArgs{...}
//
//	or:
//
//	        nil
type HttpLoadBalancingPtrInput interface {
	pulumi.Input

	ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput
	ToHttpLoadBalancingPtrOutputWithContext(context.Context) HttpLoadBalancingPtrOutput
}

type httpLoadBalancingPtrType HttpLoadBalancingArgs

func HttpLoadBalancingPtr(v *HttpLoadBalancingArgs) HttpLoadBalancingPtrInput {
	return (*httpLoadBalancingPtrType)(v)
}

func (*httpLoadBalancingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpLoadBalancing)(nil)).Elem()
}

func (i *httpLoadBalancingPtrType) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return i.ToHttpLoadBalancingPtrOutputWithContext(context.Background())
}

func (i *httpLoadBalancingPtrType) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLoadBalancingPtrOutput)
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingOutput struct{ *pulumi.OutputState }

func (HttpLoadBalancingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLoadBalancing)(nil)).Elem()
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingOutput() HttpLoadBalancingOutput {
	return o
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingOutputWithContext(ctx context.Context) HttpLoadBalancingOutput {
	return o
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return o.ToHttpLoadBalancingPtrOutputWithContext(context.Background())
}

func (o HttpLoadBalancingOutput) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpLoadBalancing) *HttpLoadBalancing {
		return &v
	}).(HttpLoadBalancingPtrOutput)
}

// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
func (o HttpLoadBalancingOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpLoadBalancing) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type HttpLoadBalancingPtrOutput struct{ *pulumi.OutputState }

func (HttpLoadBalancingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpLoadBalancing)(nil)).Elem()
}

func (o HttpLoadBalancingPtrOutput) ToHttpLoadBalancingPtrOutput() HttpLoadBalancingPtrOutput {
	return o
}

func (o HttpLoadBalancingPtrOutput) ToHttpLoadBalancingPtrOutputWithContext(ctx context.Context) HttpLoadBalancingPtrOutput {
	return o
}

func (o HttpLoadBalancingPtrOutput) Elem() HttpLoadBalancingOutput {
	return o.ApplyT(func(v *HttpLoadBalancing) HttpLoadBalancing {
		if v != nil {
			return *v
		}
		var ret HttpLoadBalancing
		return ret
	}).(HttpLoadBalancingOutput)
}

// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
func (o HttpLoadBalancingPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpLoadBalancing) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingResponse struct {
	// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
	Disabled bool `pulumi:"disabled"`
}

// Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
type HttpLoadBalancingResponseOutput struct{ *pulumi.OutputState }

func (HttpLoadBalancingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLoadBalancingResponse)(nil)).Elem()
}

func (o HttpLoadBalancingResponseOutput) ToHttpLoadBalancingResponseOutput() HttpLoadBalancingResponseOutput {
	return o
}

func (o HttpLoadBalancingResponseOutput) ToHttpLoadBalancingResponseOutputWithContext(ctx context.Context) HttpLoadBalancingResponseOutput {
	return o
}

// Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers.
func (o HttpLoadBalancingResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpLoadBalancingResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// ILBSubsettingConfig contains the desired config of L4 Internal LoadBalancer subsetting on this cluster.
type ILBSubsettingConfig struct {
	// Enables l4 ILB subsetting for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicy struct {
	// This field is deprecated, use cluster_ipv4_cidr_block.
	//
	// Deprecated: This field is deprecated, use cluster_ipv4_cidr_block.
	ClusterIpv4Cidr *string `pulumi:"clusterIpv4Cidr"`
	// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock *string `pulumi:"clusterIpv4CidrBlock"`
	// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ClusterSecondaryRangeName *string `pulumi:"clusterSecondaryRangeName"`
	// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
	CreateSubnetwork *bool `pulumi:"createSubnetwork"`
	// The ipv6 access type (internal or external) when create_subnetwork is true
	Ipv6AccessType *IPAllocationPolicyIpv6AccessType `pulumi:"ipv6AccessType"`
	// This field is deprecated, use node_ipv4_cidr_block.
	//
	// Deprecated: This field is deprecated, use node_ipv4_cidr_block.
	NodeIpv4Cidr *string `pulumi:"nodeIpv4Cidr"`
	// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	NodeIpv4CidrBlock *string `pulumi:"nodeIpv4CidrBlock"`
	// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the cluster. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is doubled and then rounded off to next power of 2 to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
	PodCidrOverprovisionConfig *PodCIDROverprovisionConfig `pulumi:"podCidrOverprovisionConfig"`
	// This field is deprecated, use services_ipv4_cidr_block.
	//
	// Deprecated: This field is deprecated, use services_ipv4_cidr_block.
	ServicesIpv4Cidr *string `pulumi:"servicesIpv4Cidr"`
	// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock *string `pulumi:"servicesIpv4CidrBlock"`
	// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ServicesSecondaryRangeName *string `pulumi:"servicesSecondaryRangeName"`
	// The IP stack type of the cluster
	StackType *IPAllocationPolicyStackType `pulumi:"stackType"`
	// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
	SubnetworkName *string `pulumi:"subnetworkName"`
	// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	TpuIpv4CidrBlock *string `pulumi:"tpuIpv4CidrBlock"`
	// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseIpAliases *bool `pulumi:"useIpAliases"`
	// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseRoutes *bool `pulumi:"useRoutes"`
}

// IPAllocationPolicyInput is an input type that accepts IPAllocationPolicyArgs and IPAllocationPolicyOutput values.
// You can construct a concrete instance of `IPAllocationPolicyInput` via:
//
//	IPAllocationPolicyArgs{...}
type IPAllocationPolicyInput interface {
	pulumi.Input

	ToIPAllocationPolicyOutput() IPAllocationPolicyOutput
	ToIPAllocationPolicyOutputWithContext(context.Context) IPAllocationPolicyOutput
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyArgs struct {
	// This field is deprecated, use cluster_ipv4_cidr_block.
	//
	// Deprecated: This field is deprecated, use cluster_ipv4_cidr_block.
	ClusterIpv4Cidr pulumi.StringPtrInput `pulumi:"clusterIpv4Cidr"`
	// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"clusterIpv4CidrBlock"`
	// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ClusterSecondaryRangeName pulumi.StringPtrInput `pulumi:"clusterSecondaryRangeName"`
	// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
	CreateSubnetwork pulumi.BoolPtrInput `pulumi:"createSubnetwork"`
	// The ipv6 access type (internal or external) when create_subnetwork is true
	Ipv6AccessType IPAllocationPolicyIpv6AccessTypePtrInput `pulumi:"ipv6AccessType"`
	// This field is deprecated, use node_ipv4_cidr_block.
	//
	// Deprecated: This field is deprecated, use node_ipv4_cidr_block.
	NodeIpv4Cidr pulumi.StringPtrInput `pulumi:"nodeIpv4Cidr"`
	// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	NodeIpv4CidrBlock pulumi.StringPtrInput `pulumi:"nodeIpv4CidrBlock"`
	// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the cluster. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is doubled and then rounded off to next power of 2 to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
	PodCidrOverprovisionConfig PodCIDROverprovisionConfigPtrInput `pulumi:"podCidrOverprovisionConfig"`
	// This field is deprecated, use services_ipv4_cidr_block.
	//
	// Deprecated: This field is deprecated, use services_ipv4_cidr_block.
	ServicesIpv4Cidr pulumi.StringPtrInput `pulumi:"servicesIpv4Cidr"`
	// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock pulumi.StringPtrInput `pulumi:"servicesIpv4CidrBlock"`
	// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ServicesSecondaryRangeName pulumi.StringPtrInput `pulumi:"servicesSecondaryRangeName"`
	// The IP stack type of the cluster
	StackType IPAllocationPolicyStackTypePtrInput `pulumi:"stackType"`
	// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
	SubnetworkName pulumi.StringPtrInput `pulumi:"subnetworkName"`
	// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	TpuIpv4CidrBlock pulumi.StringPtrInput `pulumi:"tpuIpv4CidrBlock"`
	// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseIpAliases pulumi.BoolPtrInput `pulumi:"useIpAliases"`
	// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseRoutes pulumi.BoolPtrInput `pulumi:"useRoutes"`
}

func (IPAllocationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicy)(nil)).Elem()
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyOutput() IPAllocationPolicyOutput {
	return i.ToIPAllocationPolicyOutputWithContext(context.Background())
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyOutputWithContext(ctx context.Context) IPAllocationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyOutput)
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return i.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyOutput).ToIPAllocationPolicyPtrOutputWithContext(ctx)
}

// IPAllocationPolicyPtrInput is an input type that accepts IPAllocationPolicyArgs, IPAllocationPolicyPtr and IPAllocationPolicyPtrOutput values.
// You can construct a concrete instance of `IPAllocationPolicyPtrInput` via:
//
//	        IPAllocationPolicyArgs{...}
//
//	or:
//
//	        nil
type IPAllocationPolicyPtrInput interface {
	pulumi.Input

	ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput
	ToIPAllocationPolicyPtrOutputWithContext(context.Context) IPAllocationPolicyPtrOutput
}

type ipallocationPolicyPtrType IPAllocationPolicyArgs

func IPAllocationPolicyPtr(v *IPAllocationPolicyArgs) IPAllocationPolicyPtrInput {
	return (*ipallocationPolicyPtrType)(v)
}

func (*ipallocationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicy)(nil)).Elem()
}

func (i *ipallocationPolicyPtrType) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return i.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i *ipallocationPolicyPtrType) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyPtrOutput)
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicy)(nil)).Elem()
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyOutput() IPAllocationPolicyOutput {
	return o
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyOutputWithContext(ctx context.Context) IPAllocationPolicyOutput {
	return o
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return o.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IPAllocationPolicy) *IPAllocationPolicy {
		return &v
	}).(IPAllocationPolicyPtrOutput)
}

// This field is deprecated, use cluster_ipv4_cidr_block.
//
// Deprecated: This field is deprecated, use cluster_ipv4_cidr_block.
func (o IPAllocationPolicyOutput) ClusterIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterIpv4Cidr }).(pulumi.StringPtrOutput)
}

// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
func (o IPAllocationPolicyOutput) CreateSubnetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.CreateSubnetwork }).(pulumi.BoolPtrOutput)
}

// The ipv6 access type (internal or external) when create_subnetwork is true
func (o IPAllocationPolicyOutput) Ipv6AccessType() IPAllocationPolicyIpv6AccessTypePtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *IPAllocationPolicyIpv6AccessType { return v.Ipv6AccessType }).(IPAllocationPolicyIpv6AccessTypePtrOutput)
}

// This field is deprecated, use node_ipv4_cidr_block.
//
// Deprecated: This field is deprecated, use node_ipv4_cidr_block.
func (o IPAllocationPolicyOutput) NodeIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.NodeIpv4Cidr }).(pulumi.StringPtrOutput)
}

// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) NodeIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.NodeIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the cluster. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is doubled and then rounded off to next power of 2 to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
func (o IPAllocationPolicyOutput) PodCidrOverprovisionConfig() PodCIDROverprovisionConfigPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *PodCIDROverprovisionConfig { return v.PodCidrOverprovisionConfig }).(PodCIDROverprovisionConfigPtrOutput)
}

// This field is deprecated, use services_ipv4_cidr_block.
//
// Deprecated: This field is deprecated, use services_ipv4_cidr_block.
func (o IPAllocationPolicyOutput) ServicesIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesIpv4Cidr }).(pulumi.StringPtrOutput)
}

// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// The IP stack type of the cluster
func (o IPAllocationPolicyOutput) StackType() IPAllocationPolicyStackTypePtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *IPAllocationPolicyStackType { return v.StackType }).(IPAllocationPolicyStackTypePtrOutput)
}

// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
func (o IPAllocationPolicyOutput) SubnetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.SubnetworkName }).(pulumi.StringPtrOutput)
}

// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) TpuIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.TpuIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.UseIpAliases }).(pulumi.BoolPtrOutput)
}

// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyOutput) UseRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.UseRoutes }).(pulumi.BoolPtrOutput)
}

type IPAllocationPolicyPtrOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicy)(nil)).Elem()
}

func (o IPAllocationPolicyPtrOutput) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return o
}

func (o IPAllocationPolicyPtrOutput) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return o
}

func (o IPAllocationPolicyPtrOutput) Elem() IPAllocationPolicyOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) IPAllocationPolicy {
		if v != nil {
			return *v
		}
		var ret IPAllocationPolicy
		return ret
	}).(IPAllocationPolicyOutput)
}

// This field is deprecated, use cluster_ipv4_cidr_block.
//
// Deprecated: This field is deprecated, use cluster_ipv4_cidr_block.
func (o IPAllocationPolicyPtrOutput) ClusterIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIpv4Cidr
	}).(pulumi.StringPtrOutput)
}

// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyPtrOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
func (o IPAllocationPolicyPtrOutput) CreateSubnetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSubnetwork
	}).(pulumi.BoolPtrOutput)
}

// The ipv6 access type (internal or external) when create_subnetwork is true
func (o IPAllocationPolicyPtrOutput) Ipv6AccessType() IPAllocationPolicyIpv6AccessTypePtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *IPAllocationPolicyIpv6AccessType {
		if v == nil {
			return nil
		}
		return v.Ipv6AccessType
	}).(IPAllocationPolicyIpv6AccessTypePtrOutput)
}

// This field is deprecated, use node_ipv4_cidr_block.
//
// Deprecated: This field is deprecated, use node_ipv4_cidr_block.
func (o IPAllocationPolicyPtrOutput) NodeIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NodeIpv4Cidr
	}).(pulumi.StringPtrOutput)
}

// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) NodeIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NodeIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the cluster. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is doubled and then rounded off to next power of 2 to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
func (o IPAllocationPolicyPtrOutput) PodCidrOverprovisionConfig() PodCIDROverprovisionConfigPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *PodCIDROverprovisionConfig {
		if v == nil {
			return nil
		}
		return v.PodCidrOverprovisionConfig
	}).(PodCIDROverprovisionConfigPtrOutput)
}

// This field is deprecated, use services_ipv4_cidr_block.
//
// Deprecated: This field is deprecated, use services_ipv4_cidr_block.
func (o IPAllocationPolicyPtrOutput) ServicesIpv4Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesIpv4Cidr
	}).(pulumi.StringPtrOutput)
}

// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyPtrOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// The IP stack type of the cluster
func (o IPAllocationPolicyPtrOutput) StackType() IPAllocationPolicyStackTypePtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *IPAllocationPolicyStackType {
		if v == nil {
			return nil
		}
		return v.StackType
	}).(IPAllocationPolicyStackTypePtrOutput)
}

// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
func (o IPAllocationPolicyPtrOutput) SubnetworkName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SubnetworkName
	}).(pulumi.StringPtrOutput)
}

// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) TpuIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.TpuIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyPtrOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UseIpAliases
	}).(pulumi.BoolPtrOutput)
}

// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyPtrOutput) UseRoutes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UseRoutes
	}).(pulumi.BoolPtrOutput)
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyResponse struct {
	// [Output only] The additional pod ranges that are added to the cluster. These pod ranges can be used by new node pools to allocate pod IPs automatically. Once the range is removed it will not show up in IPAllocationPolicy.
	AdditionalPodRangesConfig AdditionalPodRangesConfigResponse `pulumi:"additionalPodRangesConfig"`
	// This field is deprecated, use cluster_ipv4_cidr_block.
	//
	// Deprecated: This field is deprecated, use cluster_ipv4_cidr_block.
	ClusterIpv4Cidr string `pulumi:"clusterIpv4Cidr"`
	// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock string `pulumi:"clusterIpv4CidrBlock"`
	// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ClusterSecondaryRangeName string `pulumi:"clusterSecondaryRangeName"`
	// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
	CreateSubnetwork bool `pulumi:"createSubnetwork"`
	// [Output only] The utilization of the cluster default IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.
	DefaultPodIpv4RangeUtilization float64 `pulumi:"defaultPodIpv4RangeUtilization"`
	// The ipv6 access type (internal or external) when create_subnetwork is true
	Ipv6AccessType string `pulumi:"ipv6AccessType"`
	// This field is deprecated, use node_ipv4_cidr_block.
	//
	// Deprecated: This field is deprecated, use node_ipv4_cidr_block.
	NodeIpv4Cidr string `pulumi:"nodeIpv4Cidr"`
	// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	NodeIpv4CidrBlock string `pulumi:"nodeIpv4CidrBlock"`
	// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the cluster. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is doubled and then rounded off to next power of 2 to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
	PodCidrOverprovisionConfig PodCIDROverprovisionConfigResponse `pulumi:"podCidrOverprovisionConfig"`
	// This field is deprecated, use services_ipv4_cidr_block.
	//
	// Deprecated: This field is deprecated, use services_ipv4_cidr_block.
	ServicesIpv4Cidr string `pulumi:"servicesIpv4Cidr"`
	// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock string `pulumi:"servicesIpv4CidrBlock"`
	// [Output only] The services IPv6 CIDR block for the cluster.
	ServicesIpv6CidrBlock string `pulumi:"servicesIpv6CidrBlock"`
	// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
	ServicesSecondaryRangeName string `pulumi:"servicesSecondaryRangeName"`
	// The IP stack type of the cluster
	StackType string `pulumi:"stackType"`
	// [Output only] The subnet's IPv6 CIDR block used by nodes and pods.
	SubnetIpv6CidrBlock string `pulumi:"subnetIpv6CidrBlock"`
	// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
	SubnetworkName string `pulumi:"subnetworkName"`
	// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	TpuIpv4CidrBlock string `pulumi:"tpuIpv4CidrBlock"`
	// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseIpAliases bool `pulumi:"useIpAliases"`
	// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
	UseRoutes bool `pulumi:"useRoutes"`
}

// Configuration for controlling how IPs are allocated in the cluster.
type IPAllocationPolicyResponseOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicyResponse)(nil)).Elem()
}

func (o IPAllocationPolicyResponseOutput) ToIPAllocationPolicyResponseOutput() IPAllocationPolicyResponseOutput {
	return o
}

func (o IPAllocationPolicyResponseOutput) ToIPAllocationPolicyResponseOutputWithContext(ctx context.Context) IPAllocationPolicyResponseOutput {
	return o
}

// [Output only] The additional pod ranges that are added to the cluster. These pod ranges can be used by new node pools to allocate pod IPs automatically. Once the range is removed it will not show up in IPAllocationPolicy.
func (o IPAllocationPolicyResponseOutput) AdditionalPodRangesConfig() AdditionalPodRangesConfigResponseOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) AdditionalPodRangesConfigResponse {
		return v.AdditionalPodRangesConfig
	}).(AdditionalPodRangesConfigResponseOutput)
}

// This field is deprecated, use cluster_ipv4_cidr_block.
//
// Deprecated: This field is deprecated, use cluster_ipv4_cidr_block.
func (o IPAllocationPolicyResponseOutput) ClusterIpv4Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ClusterIpv4Cidr }).(pulumi.StringOutput)
}

// The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponseOutput) ClusterIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ClusterIpv4CidrBlock }).(pulumi.StringOutput)
}

// The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyResponseOutput) ClusterSecondaryRangeName() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ClusterSecondaryRangeName }).(pulumi.StringOutput)
}

// Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
func (o IPAllocationPolicyResponseOutput) CreateSubnetwork() pulumi.BoolOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) bool { return v.CreateSubnetwork }).(pulumi.BoolOutput)
}

// [Output only] The utilization of the cluster default IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.
func (o IPAllocationPolicyResponseOutput) DefaultPodIpv4RangeUtilization() pulumi.Float64Output {
	return o.ApplyT(func(v IPAllocationPolicyResponse) float64 { return v.DefaultPodIpv4RangeUtilization }).(pulumi.Float64Output)
}

// The ipv6 access type (internal or external) when create_subnetwork is true
func (o IPAllocationPolicyResponseOutput) Ipv6AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.Ipv6AccessType }).(pulumi.StringOutput)
}

// This field is deprecated, use node_ipv4_cidr_block.
//
// Deprecated: This field is deprecated, use node_ipv4_cidr_block.
func (o IPAllocationPolicyResponseOutput) NodeIpv4Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.NodeIpv4Cidr }).(pulumi.StringOutput)
}

// The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponseOutput) NodeIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.NodeIpv4CidrBlock }).(pulumi.StringOutput)
}

// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the cluster. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is doubled and then rounded off to next power of 2 to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
func (o IPAllocationPolicyResponseOutput) PodCidrOverprovisionConfig() PodCIDROverprovisionConfigResponseOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) PodCIDROverprovisionConfigResponse {
		return v.PodCidrOverprovisionConfig
	}).(PodCIDROverprovisionConfigResponseOutput)
}

// This field is deprecated, use services_ipv4_cidr_block.
//
// Deprecated: This field is deprecated, use services_ipv4_cidr_block.
func (o IPAllocationPolicyResponseOutput) ServicesIpv4Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ServicesIpv4Cidr }).(pulumi.StringOutput)
}

// The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponseOutput) ServicesIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ServicesIpv4CidrBlock }).(pulumi.StringOutput)
}

// [Output only] The services IPv6 CIDR block for the cluster.
func (o IPAllocationPolicyResponseOutput) ServicesIpv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ServicesIpv6CidrBlock }).(pulumi.StringOutput)
}

// The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.
func (o IPAllocationPolicyResponseOutput) ServicesSecondaryRangeName() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ServicesSecondaryRangeName }).(pulumi.StringOutput)
}

// The IP stack type of the cluster
func (o IPAllocationPolicyResponseOutput) StackType() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.StackType }).(pulumi.StringOutput)
}

// [Output only] The subnet's IPv6 CIDR block used by nodes and pods.
func (o IPAllocationPolicyResponseOutput) SubnetIpv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.SubnetIpv6CidrBlock }).(pulumi.StringOutput)
}

// A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
func (o IPAllocationPolicyResponseOutput) SubnetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.SubnetworkName }).(pulumi.StringOutput)
}

// The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponseOutput) TpuIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.TpuIpv4CidrBlock }).(pulumi.StringOutput)
}

// Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyResponseOutput) UseIpAliases() pulumi.BoolOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) bool { return v.UseIpAliases }).(pulumi.BoolOutput)
}

// Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
func (o IPAllocationPolicyResponseOutput) UseRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) bool { return v.UseRoutes }).(pulumi.BoolOutput)
}

// IdentityServiceConfig is configuration for Identity Service which allows customers to use external identity providers with the K8S API
type IdentityServiceConfig struct {
	// Whether to enable the Identity Service component
	Enabled *bool `pulumi:"enabled"`
}

// IdentityServiceConfigInput is an input type that accepts IdentityServiceConfigArgs and IdentityServiceConfigOutput values.
// You can construct a concrete instance of `IdentityServiceConfigInput` via:
//
//	IdentityServiceConfigArgs{...}
type IdentityServiceConfigInput interface {
	pulumi.Input

	ToIdentityServiceConfigOutput() IdentityServiceConfigOutput
	ToIdentityServiceConfigOutputWithContext(context.Context) IdentityServiceConfigOutput
}

// IdentityServiceConfig is configuration for Identity Service which allows customers to use external identity providers with the K8S API
type IdentityServiceConfigArgs struct {
	// Whether to enable the Identity Service component
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (IdentityServiceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceConfig)(nil)).Elem()
}

func (i IdentityServiceConfigArgs) ToIdentityServiceConfigOutput() IdentityServiceConfigOutput {
	return i.ToIdentityServiceConfigOutputWithContext(context.Background())
}

func (i IdentityServiceConfigArgs) ToIdentityServiceConfigOutputWithContext(ctx context.Context) IdentityServiceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceConfigOutput)
}

func (i IdentityServiceConfigArgs) ToIdentityServiceConfigPtrOutput() IdentityServiceConfigPtrOutput {
	return i.ToIdentityServiceConfigPtrOutputWithContext(context.Background())
}

func (i IdentityServiceConfigArgs) ToIdentityServiceConfigPtrOutputWithContext(ctx context.Context) IdentityServiceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceConfigOutput).ToIdentityServiceConfigPtrOutputWithContext(ctx)
}

// IdentityServiceConfigPtrInput is an input type that accepts IdentityServiceConfigArgs, IdentityServiceConfigPtr and IdentityServiceConfigPtrOutput values.
// You can construct a concrete instance of `IdentityServiceConfigPtrInput` via:
//
//	        IdentityServiceConfigArgs{...}
//
//	or:
//
//	        nil
type IdentityServiceConfigPtrInput interface {
	pulumi.Input

	ToIdentityServiceConfigPtrOutput() IdentityServiceConfigPtrOutput
	ToIdentityServiceConfigPtrOutputWithContext(context.Context) IdentityServiceConfigPtrOutput
}

type identityServiceConfigPtrType IdentityServiceConfigArgs

func IdentityServiceConfigPtr(v *IdentityServiceConfigArgs) IdentityServiceConfigPtrInput {
	return (*identityServiceConfigPtrType)(v)
}

func (*identityServiceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityServiceConfig)(nil)).Elem()
}

func (i *identityServiceConfigPtrType) ToIdentityServiceConfigPtrOutput() IdentityServiceConfigPtrOutput {
	return i.ToIdentityServiceConfigPtrOutputWithContext(context.Background())
}

func (i *identityServiceConfigPtrType) ToIdentityServiceConfigPtrOutputWithContext(ctx context.Context) IdentityServiceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceConfigPtrOutput)
}

// IdentityServiceConfig is configuration for Identity Service which allows customers to use external identity providers with the K8S API
type IdentityServiceConfigOutput struct{ *pulumi.OutputState }

func (IdentityServiceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceConfig)(nil)).Elem()
}

func (o IdentityServiceConfigOutput) ToIdentityServiceConfigOutput() IdentityServiceConfigOutput {
	return o
}

func (o IdentityServiceConfigOutput) ToIdentityServiceConfigOutputWithContext(ctx context.Context) IdentityServiceConfigOutput {
	return o
}

func (o IdentityServiceConfigOutput) ToIdentityServiceConfigPtrOutput() IdentityServiceConfigPtrOutput {
	return o.ToIdentityServiceConfigPtrOutputWithContext(context.Background())
}

func (o IdentityServiceConfigOutput) ToIdentityServiceConfigPtrOutputWithContext(ctx context.Context) IdentityServiceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityServiceConfig) *IdentityServiceConfig {
		return &v
	}).(IdentityServiceConfigPtrOutput)
}

// Whether to enable the Identity Service component
func (o IdentityServiceConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IdentityServiceConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type IdentityServiceConfigPtrOutput struct{ *pulumi.OutputState }

func (IdentityServiceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityServiceConfig)(nil)).Elem()
}

func (o IdentityServiceConfigPtrOutput) ToIdentityServiceConfigPtrOutput() IdentityServiceConfigPtrOutput {
	return o
}

func (o IdentityServiceConfigPtrOutput) ToIdentityServiceConfigPtrOutputWithContext(ctx context.Context) IdentityServiceConfigPtrOutput {
	return o
}

func (o IdentityServiceConfigPtrOutput) Elem() IdentityServiceConfigOutput {
	return o.ApplyT(func(v *IdentityServiceConfig) IdentityServiceConfig {
		if v != nil {
			return *v
		}
		var ret IdentityServiceConfig
		return ret
	}).(IdentityServiceConfigOutput)
}

// Whether to enable the Identity Service component
func (o IdentityServiceConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityServiceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// IdentityServiceConfig is configuration for Identity Service which allows customers to use external identity providers with the K8S API
type IdentityServiceConfigResponse struct {
	// Whether to enable the Identity Service component
	Enabled bool `pulumi:"enabled"`
}

// IdentityServiceConfig is configuration for Identity Service which allows customers to use external identity providers with the K8S API
type IdentityServiceConfigResponseOutput struct{ *pulumi.OutputState }

func (IdentityServiceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceConfigResponse)(nil)).Elem()
}

func (o IdentityServiceConfigResponseOutput) ToIdentityServiceConfigResponseOutput() IdentityServiceConfigResponseOutput {
	return o
}

func (o IdentityServiceConfigResponseOutput) ToIdentityServiceConfigResponseOutputWithContext(ctx context.Context) IdentityServiceConfigResponseOutput {
	return o
}

// Whether to enable the Identity Service component
func (o IdentityServiceConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v IdentityServiceConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// IntraNodeVisibilityConfig contains the desired config of the intra-node visibility on this cluster.
type IntraNodeVisibilityConfig struct {
	// Enables intra node visibility for this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// K8sBetaAPIConfig , configuration for beta APIs
type K8sBetaAPIConfig struct {
	// Enabled k8s beta APIs.
	EnabledApis []string `pulumi:"enabledApis"`
}

// K8sBetaAPIConfigInput is an input type that accepts K8sBetaAPIConfigArgs and K8sBetaAPIConfigOutput values.
// You can construct a concrete instance of `K8sBetaAPIConfigInput` via:
//
//	K8sBetaAPIConfigArgs{...}
type K8sBetaAPIConfigInput interface {
	pulumi.Input

	ToK8sBetaAPIConfigOutput() K8sBetaAPIConfigOutput
	ToK8sBetaAPIConfigOutputWithContext(context.Context) K8sBetaAPIConfigOutput
}

// K8sBetaAPIConfig , configuration for beta APIs
type K8sBetaAPIConfigArgs struct {
	// Enabled k8s beta APIs.
	EnabledApis pulumi.StringArrayInput `pulumi:"enabledApis"`
}

func (K8sBetaAPIConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sBetaAPIConfig)(nil)).Elem()
}

func (i K8sBetaAPIConfigArgs) ToK8sBetaAPIConfigOutput() K8sBetaAPIConfigOutput {
	return i.ToK8sBetaAPIConfigOutputWithContext(context.Background())
}

func (i K8sBetaAPIConfigArgs) ToK8sBetaAPIConfigOutputWithContext(ctx context.Context) K8sBetaAPIConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sBetaAPIConfigOutput)
}

func (i K8sBetaAPIConfigArgs) ToK8sBetaAPIConfigPtrOutput() K8sBetaAPIConfigPtrOutput {
	return i.ToK8sBetaAPIConfigPtrOutputWithContext(context.Background())
}

func (i K8sBetaAPIConfigArgs) ToK8sBetaAPIConfigPtrOutputWithContext(ctx context.Context) K8sBetaAPIConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sBetaAPIConfigOutput).ToK8sBetaAPIConfigPtrOutputWithContext(ctx)
}

// K8sBetaAPIConfigPtrInput is an input type that accepts K8sBetaAPIConfigArgs, K8sBetaAPIConfigPtr and K8sBetaAPIConfigPtrOutput values.
// You can construct a concrete instance of `K8sBetaAPIConfigPtrInput` via:
//
//	        K8sBetaAPIConfigArgs{...}
//
//	or:
//
//	        nil
type K8sBetaAPIConfigPtrInput interface {
	pulumi.Input

	ToK8sBetaAPIConfigPtrOutput() K8sBetaAPIConfigPtrOutput
	ToK8sBetaAPIConfigPtrOutputWithContext(context.Context) K8sBetaAPIConfigPtrOutput
}

type k8sBetaAPIConfigPtrType K8sBetaAPIConfigArgs

func K8sBetaAPIConfigPtr(v *K8sBetaAPIConfigArgs) K8sBetaAPIConfigPtrInput {
	return (*k8sBetaAPIConfigPtrType)(v)
}

func (*k8sBetaAPIConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sBetaAPIConfig)(nil)).Elem()
}

func (i *k8sBetaAPIConfigPtrType) ToK8sBetaAPIConfigPtrOutput() K8sBetaAPIConfigPtrOutput {
	return i.ToK8sBetaAPIConfigPtrOutputWithContext(context.Background())
}

func (i *k8sBetaAPIConfigPtrType) ToK8sBetaAPIConfigPtrOutputWithContext(ctx context.Context) K8sBetaAPIConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sBetaAPIConfigPtrOutput)
}

// K8sBetaAPIConfig , configuration for beta APIs
type K8sBetaAPIConfigOutput struct{ *pulumi.OutputState }

func (K8sBetaAPIConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sBetaAPIConfig)(nil)).Elem()
}

func (o K8sBetaAPIConfigOutput) ToK8sBetaAPIConfigOutput() K8sBetaAPIConfigOutput {
	return o
}

func (o K8sBetaAPIConfigOutput) ToK8sBetaAPIConfigOutputWithContext(ctx context.Context) K8sBetaAPIConfigOutput {
	return o
}

func (o K8sBetaAPIConfigOutput) ToK8sBetaAPIConfigPtrOutput() K8sBetaAPIConfigPtrOutput {
	return o.ToK8sBetaAPIConfigPtrOutputWithContext(context.Background())
}

func (o K8sBetaAPIConfigOutput) ToK8sBetaAPIConfigPtrOutputWithContext(ctx context.Context) K8sBetaAPIConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v K8sBetaAPIConfig) *K8sBetaAPIConfig {
		return &v
	}).(K8sBetaAPIConfigPtrOutput)
}

// Enabled k8s beta APIs.
func (o K8sBetaAPIConfigOutput) EnabledApis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K8sBetaAPIConfig) []string { return v.EnabledApis }).(pulumi.StringArrayOutput)
}

type K8sBetaAPIConfigPtrOutput struct{ *pulumi.OutputState }

func (K8sBetaAPIConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sBetaAPIConfig)(nil)).Elem()
}

func (o K8sBetaAPIConfigPtrOutput) ToK8sBetaAPIConfigPtrOutput() K8sBetaAPIConfigPtrOutput {
	return o
}

func (o K8sBetaAPIConfigPtrOutput) ToK8sBetaAPIConfigPtrOutputWithContext(ctx context.Context) K8sBetaAPIConfigPtrOutput {
	return o
}

func (o K8sBetaAPIConfigPtrOutput) Elem() K8sBetaAPIConfigOutput {
	return o.ApplyT(func(v *K8sBetaAPIConfig) K8sBetaAPIConfig {
		if v != nil {
			return *v
		}
		var ret K8sBetaAPIConfig
		return ret
	}).(K8sBetaAPIConfigOutput)
}

// Enabled k8s beta APIs.
func (o K8sBetaAPIConfigPtrOutput) EnabledApis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *K8sBetaAPIConfig) []string {
		if v == nil {
			return nil
		}
		return v.EnabledApis
	}).(pulumi.StringArrayOutput)
}

// K8sBetaAPIConfig , configuration for beta APIs
type K8sBetaAPIConfigResponse struct {
	// Enabled k8s beta APIs.
	EnabledApis []string `pulumi:"enabledApis"`
}

// K8sBetaAPIConfig , configuration for beta APIs
type K8sBetaAPIConfigResponseOutput struct{ *pulumi.OutputState }

func (K8sBetaAPIConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*K8sBetaAPIConfigResponse)(nil)).Elem()
}

func (o K8sBetaAPIConfigResponseOutput) ToK8sBetaAPIConfigResponseOutput() K8sBetaAPIConfigResponseOutput {
	return o
}

func (o K8sBetaAPIConfigResponseOutput) ToK8sBetaAPIConfigResponseOutputWithContext(ctx context.Context) K8sBetaAPIConfigResponseOutput {
	return o
}

// Enabled k8s beta APIs.
func (o K8sBetaAPIConfigResponseOutput) EnabledApis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v K8sBetaAPIConfigResponse) []string { return v.EnabledApis }).(pulumi.StringArrayOutput)
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboard struct {
	// Whether the Kubernetes Dashboard is enabled for this cluster.
	Disabled *bool `pulumi:"disabled"`
}

// KubernetesDashboardInput is an input type that accepts KubernetesDashboardArgs and KubernetesDashboardOutput values.
// You can construct a concrete instance of `KubernetesDashboardInput` via:
//
//	KubernetesDashboardArgs{...}
type KubernetesDashboardInput interface {
	pulumi.Input

	ToKubernetesDashboardOutput() KubernetesDashboardOutput
	ToKubernetesDashboardOutputWithContext(context.Context) KubernetesDashboardOutput
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardArgs struct {
	// Whether the Kubernetes Dashboard is enabled for this cluster.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (KubernetesDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesDashboard)(nil)).Elem()
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardOutput() KubernetesDashboardOutput {
	return i.ToKubernetesDashboardOutputWithContext(context.Background())
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardOutputWithContext(ctx context.Context) KubernetesDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardOutput)
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return i.ToKubernetesDashboardPtrOutputWithContext(context.Background())
}

func (i KubernetesDashboardArgs) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardOutput).ToKubernetesDashboardPtrOutputWithContext(ctx)
}

// KubernetesDashboardPtrInput is an input type that accepts KubernetesDashboardArgs, KubernetesDashboardPtr and KubernetesDashboardPtrOutput values.
// You can construct a concrete instance of `KubernetesDashboardPtrInput` via:
//
//	        KubernetesDashboardArgs{...}
//
//	or:
//
//	        nil
type KubernetesDashboardPtrInput interface {
	pulumi.Input

	ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput
	ToKubernetesDashboardPtrOutputWithContext(context.Context) KubernetesDashboardPtrOutput
}

type kubernetesDashboardPtrType KubernetesDashboardArgs

func KubernetesDashboardPtr(v *KubernetesDashboardArgs) KubernetesDashboardPtrInput {
	return (*kubernetesDashboardPtrType)(v)
}

func (*kubernetesDashboardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesDashboard)(nil)).Elem()
}

func (i *kubernetesDashboardPtrType) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return i.ToKubernetesDashboardPtrOutputWithContext(context.Background())
}

func (i *kubernetesDashboardPtrType) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesDashboardPtrOutput)
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardOutput struct{ *pulumi.OutputState }

func (KubernetesDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesDashboard)(nil)).Elem()
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardOutput() KubernetesDashboardOutput {
	return o
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardOutputWithContext(ctx context.Context) KubernetesDashboardOutput {
	return o
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return o.ToKubernetesDashboardPtrOutputWithContext(context.Background())
}

func (o KubernetesDashboardOutput) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesDashboard) *KubernetesDashboard {
		return &v
	}).(KubernetesDashboardPtrOutput)
}

// Whether the Kubernetes Dashboard is enabled for this cluster.
func (o KubernetesDashboardOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesDashboard) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type KubernetesDashboardPtrOutput struct{ *pulumi.OutputState }

func (KubernetesDashboardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesDashboard)(nil)).Elem()
}

func (o KubernetesDashboardPtrOutput) ToKubernetesDashboardPtrOutput() KubernetesDashboardPtrOutput {
	return o
}

func (o KubernetesDashboardPtrOutput) ToKubernetesDashboardPtrOutputWithContext(ctx context.Context) KubernetesDashboardPtrOutput {
	return o
}

func (o KubernetesDashboardPtrOutput) Elem() KubernetesDashboardOutput {
	return o.ApplyT(func(v *KubernetesDashboard) KubernetesDashboard {
		if v != nil {
			return *v
		}
		var ret KubernetesDashboard
		return ret
	}).(KubernetesDashboardOutput)
}

// Whether the Kubernetes Dashboard is enabled for this cluster.
func (o KubernetesDashboardPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubernetesDashboard) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardResponse struct {
	// Whether the Kubernetes Dashboard is enabled for this cluster.
	Disabled bool `pulumi:"disabled"`
}

// Configuration for the Kubernetes Dashboard.
type KubernetesDashboardResponseOutput struct{ *pulumi.OutputState }

func (KubernetesDashboardResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesDashboardResponse)(nil)).Elem()
}

func (o KubernetesDashboardResponseOutput) ToKubernetesDashboardResponseOutput() KubernetesDashboardResponseOutput {
	return o
}

func (o KubernetesDashboardResponseOutput) ToKubernetesDashboardResponseOutputWithContext(ctx context.Context) KubernetesDashboardResponseOutput {
	return o
}

// Whether the Kubernetes Dashboard is enabled for this cluster.
func (o KubernetesDashboardResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v KubernetesDashboardResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbac struct {
	// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	Enabled *bool `pulumi:"enabled"`
}

// LegacyAbacInput is an input type that accepts LegacyAbacArgs and LegacyAbacOutput values.
// You can construct a concrete instance of `LegacyAbacInput` via:
//
//	LegacyAbacArgs{...}
type LegacyAbacInput interface {
	pulumi.Input

	ToLegacyAbacOutput() LegacyAbacOutput
	ToLegacyAbacOutputWithContext(context.Context) LegacyAbacOutput
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacArgs struct {
	// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (LegacyAbacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyAbac)(nil)).Elem()
}

func (i LegacyAbacArgs) ToLegacyAbacOutput() LegacyAbacOutput {
	return i.ToLegacyAbacOutputWithContext(context.Background())
}

func (i LegacyAbacArgs) ToLegacyAbacOutputWithContext(ctx context.Context) LegacyAbacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacOutput)
}

func (i LegacyAbacArgs) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return i.ToLegacyAbacPtrOutputWithContext(context.Background())
}

func (i LegacyAbacArgs) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacOutput).ToLegacyAbacPtrOutputWithContext(ctx)
}

// LegacyAbacPtrInput is an input type that accepts LegacyAbacArgs, LegacyAbacPtr and LegacyAbacPtrOutput values.
// You can construct a concrete instance of `LegacyAbacPtrInput` via:
//
//	        LegacyAbacArgs{...}
//
//	or:
//
//	        nil
type LegacyAbacPtrInput interface {
	pulumi.Input

	ToLegacyAbacPtrOutput() LegacyAbacPtrOutput
	ToLegacyAbacPtrOutputWithContext(context.Context) LegacyAbacPtrOutput
}

type legacyAbacPtrType LegacyAbacArgs

func LegacyAbacPtr(v *LegacyAbacArgs) LegacyAbacPtrInput {
	return (*legacyAbacPtrType)(v)
}

func (*legacyAbacPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyAbac)(nil)).Elem()
}

func (i *legacyAbacPtrType) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return i.ToLegacyAbacPtrOutputWithContext(context.Background())
}

func (i *legacyAbacPtrType) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LegacyAbacPtrOutput)
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacOutput struct{ *pulumi.OutputState }

func (LegacyAbacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyAbac)(nil)).Elem()
}

func (o LegacyAbacOutput) ToLegacyAbacOutput() LegacyAbacOutput {
	return o
}

func (o LegacyAbacOutput) ToLegacyAbacOutputWithContext(ctx context.Context) LegacyAbacOutput {
	return o
}

func (o LegacyAbacOutput) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return o.ToLegacyAbacPtrOutputWithContext(context.Background())
}

func (o LegacyAbacOutput) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LegacyAbac) *LegacyAbac {
		return &v
	}).(LegacyAbacPtrOutput)
}

// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
func (o LegacyAbacOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LegacyAbac) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type LegacyAbacPtrOutput struct{ *pulumi.OutputState }

func (LegacyAbacPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LegacyAbac)(nil)).Elem()
}

func (o LegacyAbacPtrOutput) ToLegacyAbacPtrOutput() LegacyAbacPtrOutput {
	return o
}

func (o LegacyAbacPtrOutput) ToLegacyAbacPtrOutputWithContext(ctx context.Context) LegacyAbacPtrOutput {
	return o
}

func (o LegacyAbacPtrOutput) Elem() LegacyAbacOutput {
	return o.ApplyT(func(v *LegacyAbac) LegacyAbac {
		if v != nil {
			return *v
		}
		var ret LegacyAbac
		return ret
	}).(LegacyAbacOutput)
}

// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
func (o LegacyAbacPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LegacyAbac) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacResponse struct {
	// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
	Enabled bool `pulumi:"enabled"`
}

// Configuration for the legacy Attribute Based Access Control authorization mode.
type LegacyAbacResponseOutput struct{ *pulumi.OutputState }

func (LegacyAbacResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LegacyAbacResponse)(nil)).Elem()
}

func (o LegacyAbacResponseOutput) ToLegacyAbacResponseOutput() LegacyAbacResponseOutput {
	return o
}

func (o LegacyAbacResponseOutput) ToLegacyAbacResponseOutputWithContext(ctx context.Context) LegacyAbacResponseOutput {
	return o
}

// Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
func (o LegacyAbacResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LegacyAbacResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfig struct {
	// cgroup_mode specifies the cgroup mode to be used on the node.
	CgroupMode *LinuxNodeConfigCgroupMode `pulumi:"cgroupMode"`
	// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
	Sysctls map[string]string `pulumi:"sysctls"`
}

// LinuxNodeConfigInput is an input type that accepts LinuxNodeConfigArgs and LinuxNodeConfigOutput values.
// You can construct a concrete instance of `LinuxNodeConfigInput` via:
//
//	LinuxNodeConfigArgs{...}
type LinuxNodeConfigInput interface {
	pulumi.Input

	ToLinuxNodeConfigOutput() LinuxNodeConfigOutput
	ToLinuxNodeConfigOutputWithContext(context.Context) LinuxNodeConfigOutput
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigArgs struct {
	// cgroup_mode specifies the cgroup mode to be used on the node.
	CgroupMode LinuxNodeConfigCgroupModePtrInput `pulumi:"cgroupMode"`
	// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
	Sysctls pulumi.StringMapInput `pulumi:"sysctls"`
}

func (LinuxNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxNodeConfig)(nil)).Elem()
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigOutput() LinuxNodeConfigOutput {
	return i.ToLinuxNodeConfigOutputWithContext(context.Background())
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigOutputWithContext(ctx context.Context) LinuxNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigOutput)
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return i.ToLinuxNodeConfigPtrOutputWithContext(context.Background())
}

func (i LinuxNodeConfigArgs) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigOutput).ToLinuxNodeConfigPtrOutputWithContext(ctx)
}

// LinuxNodeConfigPtrInput is an input type that accepts LinuxNodeConfigArgs, LinuxNodeConfigPtr and LinuxNodeConfigPtrOutput values.
// You can construct a concrete instance of `LinuxNodeConfigPtrInput` via:
//
//	        LinuxNodeConfigArgs{...}
//
//	or:
//
//	        nil
type LinuxNodeConfigPtrInput interface {
	pulumi.Input

	ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput
	ToLinuxNodeConfigPtrOutputWithContext(context.Context) LinuxNodeConfigPtrOutput
}

type linuxNodeConfigPtrType LinuxNodeConfigArgs

func LinuxNodeConfigPtr(v *LinuxNodeConfigArgs) LinuxNodeConfigPtrInput {
	return (*linuxNodeConfigPtrType)(v)
}

func (*linuxNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxNodeConfig)(nil)).Elem()
}

func (i *linuxNodeConfigPtrType) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return i.ToLinuxNodeConfigPtrOutputWithContext(context.Background())
}

func (i *linuxNodeConfigPtrType) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxNodeConfigPtrOutput)
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigOutput struct{ *pulumi.OutputState }

func (LinuxNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxNodeConfig)(nil)).Elem()
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigOutput() LinuxNodeConfigOutput {
	return o
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigOutputWithContext(ctx context.Context) LinuxNodeConfigOutput {
	return o
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return o.ToLinuxNodeConfigPtrOutputWithContext(context.Background())
}

func (o LinuxNodeConfigOutput) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinuxNodeConfig) *LinuxNodeConfig {
		return &v
	}).(LinuxNodeConfigPtrOutput)
}

// cgroup_mode specifies the cgroup mode to be used on the node.
func (o LinuxNodeConfigOutput) CgroupMode() LinuxNodeConfigCgroupModePtrOutput {
	return o.ApplyT(func(v LinuxNodeConfig) *LinuxNodeConfigCgroupMode { return v.CgroupMode }).(LinuxNodeConfigCgroupModePtrOutput)
}

// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
func (o LinuxNodeConfigOutput) Sysctls() pulumi.StringMapOutput {
	return o.ApplyT(func(v LinuxNodeConfig) map[string]string { return v.Sysctls }).(pulumi.StringMapOutput)
}

type LinuxNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (LinuxNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxNodeConfig)(nil)).Elem()
}

func (o LinuxNodeConfigPtrOutput) ToLinuxNodeConfigPtrOutput() LinuxNodeConfigPtrOutput {
	return o
}

func (o LinuxNodeConfigPtrOutput) ToLinuxNodeConfigPtrOutputWithContext(ctx context.Context) LinuxNodeConfigPtrOutput {
	return o
}

func (o LinuxNodeConfigPtrOutput) Elem() LinuxNodeConfigOutput {
	return o.ApplyT(func(v *LinuxNodeConfig) LinuxNodeConfig {
		if v != nil {
			return *v
		}
		var ret LinuxNodeConfig
		return ret
	}).(LinuxNodeConfigOutput)
}

// cgroup_mode specifies the cgroup mode to be used on the node.
func (o LinuxNodeConfigPtrOutput) CgroupMode() LinuxNodeConfigCgroupModePtrOutput {
	return o.ApplyT(func(v *LinuxNodeConfig) *LinuxNodeConfigCgroupMode {
		if v == nil {
			return nil
		}
		return v.CgroupMode
	}).(LinuxNodeConfigCgroupModePtrOutput)
}

// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
func (o LinuxNodeConfigPtrOutput) Sysctls() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinuxNodeConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigResponse struct {
	// cgroup_mode specifies the cgroup mode to be used on the node.
	CgroupMode string `pulumi:"cgroupMode"`
	// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
	Sysctls map[string]string `pulumi:"sysctls"`
}

// Parameters that can be configured on Linux nodes.
type LinuxNodeConfigResponseOutput struct{ *pulumi.OutputState }

func (LinuxNodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxNodeConfigResponse)(nil)).Elem()
}

func (o LinuxNodeConfigResponseOutput) ToLinuxNodeConfigResponseOutput() LinuxNodeConfigResponseOutput {
	return o
}

func (o LinuxNodeConfigResponseOutput) ToLinuxNodeConfigResponseOutputWithContext(ctx context.Context) LinuxNodeConfigResponseOutput {
	return o
}

// cgroup_mode specifies the cgroup mode to be used on the node.
func (o LinuxNodeConfigResponseOutput) CgroupMode() pulumi.StringOutput {
	return o.ApplyT(func(v LinuxNodeConfigResponse) string { return v.CgroupMode }).(pulumi.StringOutput)
}

// The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
func (o LinuxNodeConfigResponseOutput) Sysctls() pulumi.StringMapOutput {
	return o.ApplyT(func(v LinuxNodeConfigResponse) map[string]string { return v.Sysctls }).(pulumi.StringMapOutput)
}

// LocalNvmeSsdBlockConfig contains configuration for using raw-block local NVMe SSDs
type LocalNvmeSsdBlockConfig struct {
	// Number of local NVMe SSDs to use. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
	LocalSsdCount *int `pulumi:"localSsdCount"`
}

// LocalNvmeSsdBlockConfigInput is an input type that accepts LocalNvmeSsdBlockConfigArgs and LocalNvmeSsdBlockConfigOutput values.
// You can construct a concrete instance of `LocalNvmeSsdBlockConfigInput` via:
//
//	LocalNvmeSsdBlockConfigArgs{...}
type LocalNvmeSsdBlockConfigInput interface {
	pulumi.Input

	ToLocalNvmeSsdBlockConfigOutput() LocalNvmeSsdBlockConfigOutput
	ToLocalNvmeSsdBlockConfigOutputWithContext(context.Context) LocalNvmeSsdBlockConfigOutput
}

// LocalNvmeSsdBlockConfig contains configuration for using raw-block local NVMe SSDs
type LocalNvmeSsdBlockConfigArgs struct {
	// Number of local NVMe SSDs to use. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
	LocalSsdCount pulumi.IntPtrInput `pulumi:"localSsdCount"`
}

func (LocalNvmeSsdBlockConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalNvmeSsdBlockConfig)(nil)).Elem()
}

func (i LocalNvmeSsdBlockConfigArgs) ToLocalNvmeSsdBlockConfigOutput() LocalNvmeSsdBlockConfigOutput {
	return i.ToLocalNvmeSsdBlockConfigOutputWithContext(context.Background())
}

func (i LocalNvmeSsdBlockConfigArgs) ToLocalNvmeSsdBlockConfigOutputWithContext(ctx context.Context) LocalNvmeSsdBlockConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalNvmeSsdBlockConfigOutput)
}

func (i LocalNvmeSsdBlockConfigArgs) ToLocalNvmeSsdBlockConfigPtrOutput() LocalNvmeSsdBlockConfigPtrOutput {
	return i.ToLocalNvmeSsdBlockConfigPtrOutputWithContext(context.Background())
}

func (i LocalNvmeSsdBlockConfigArgs) ToLocalNvmeSsdBlockConfigPtrOutputWithContext(ctx context.Context) LocalNvmeSsdBlockConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalNvmeSsdBlockConfigOutput).ToLocalNvmeSsdBlockConfigPtrOutputWithContext(ctx)
}

// LocalNvmeSsdBlockConfigPtrInput is an input type that accepts LocalNvmeSsdBlockConfigArgs, LocalNvmeSsdBlockConfigPtr and LocalNvmeSsdBlockConfigPtrOutput values.
// You can construct a concrete instance of `LocalNvmeSsdBlockConfigPtrInput` via:
//
//	        LocalNvmeSsdBlockConfigArgs{...}
//
//	or:
//
//	        nil
type LocalNvmeSsdBlockConfigPtrInput interface {
	pulumi.Input

	ToLocalNvmeSsdBlockConfigPtrOutput() LocalNvmeSsdBlockConfigPtrOutput
	ToLocalNvmeSsdBlockConfigPtrOutputWithContext(context.Context) LocalNvmeSsdBlockConfigPtrOutput
}

type localNvmeSsdBlockConfigPtrType LocalNvmeSsdBlockConfigArgs

func LocalNvmeSsdBlockConfigPtr(v *LocalNvmeSsdBlockConfigArgs) LocalNvmeSsdBlockConfigPtrInput {
	return (*localNvmeSsdBlockConfigPtrType)(v)
}

func (*localNvmeSsdBlockConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalNvmeSsdBlockConfig)(nil)).Elem()
}

func (i *localNvmeSsdBlockConfigPtrType) ToLocalNvmeSsdBlockConfigPtrOutput() LocalNvmeSsdBlockConfigPtrOutput {
	return i.ToLocalNvmeSsdBlockConfigPtrOutputWithContext(context.Background())
}

func (i *localNvmeSsdBlockConfigPtrType) ToLocalNvmeSsdBlockConfigPtrOutputWithContext(ctx context.Context) LocalNvmeSsdBlockConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalNvmeSsdBlockConfigPtrOutput)
}

// LocalNvmeSsdBlockConfig contains configuration for using raw-block local NVMe SSDs
type LocalNvmeSsdBlockConfigOutput struct{ *pulumi.OutputState }

func (LocalNvmeSsdBlockConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalNvmeSsdBlockConfig)(nil)).Elem()
}

func (o LocalNvmeSsdBlockConfigOutput) ToLocalNvmeSsdBlockConfigOutput() LocalNvmeSsdBlockConfigOutput {
	return o
}

func (o LocalNvmeSsdBlockConfigOutput) ToLocalNvmeSsdBlockConfigOutputWithContext(ctx context.Context) LocalNvmeSsdBlockConfigOutput {
	return o
}

func (o LocalNvmeSsdBlockConfigOutput) ToLocalNvmeSsdBlockConfigPtrOutput() LocalNvmeSsdBlockConfigPtrOutput {
	return o.ToLocalNvmeSsdBlockConfigPtrOutputWithContext(context.Background())
}

func (o LocalNvmeSsdBlockConfigOutput) ToLocalNvmeSsdBlockConfigPtrOutputWithContext(ctx context.Context) LocalNvmeSsdBlockConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalNvmeSsdBlockConfig) *LocalNvmeSsdBlockConfig {
		return &v
	}).(LocalNvmeSsdBlockConfigPtrOutput)
}

// Number of local NVMe SSDs to use. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
func (o LocalNvmeSsdBlockConfigOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LocalNvmeSsdBlockConfig) *int { return v.LocalSsdCount }).(pulumi.IntPtrOutput)
}

type LocalNvmeSsdBlockConfigPtrOutput struct{ *pulumi.OutputState }

func (LocalNvmeSsdBlockConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalNvmeSsdBlockConfig)(nil)).Elem()
}

func (o LocalNvmeSsdBlockConfigPtrOutput) ToLocalNvmeSsdBlockConfigPtrOutput() LocalNvmeSsdBlockConfigPtrOutput {
	return o
}

func (o LocalNvmeSsdBlockConfigPtrOutput) ToLocalNvmeSsdBlockConfigPtrOutputWithContext(ctx context.Context) LocalNvmeSsdBlockConfigPtrOutput {
	return o
}

func (o LocalNvmeSsdBlockConfigPtrOutput) Elem() LocalNvmeSsdBlockConfigOutput {
	return o.ApplyT(func(v *LocalNvmeSsdBlockConfig) LocalNvmeSsdBlockConfig {
		if v != nil {
			return *v
		}
		var ret LocalNvmeSsdBlockConfig
		return ret
	}).(LocalNvmeSsdBlockConfigOutput)
}

// Number of local NVMe SSDs to use. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
func (o LocalNvmeSsdBlockConfigPtrOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LocalNvmeSsdBlockConfig) *int {
		if v == nil {
			return nil
		}
		return v.LocalSsdCount
	}).(pulumi.IntPtrOutput)
}

// LocalNvmeSsdBlockConfig contains configuration for using raw-block local NVMe SSDs
type LocalNvmeSsdBlockConfigResponse struct {
	// Number of local NVMe SSDs to use. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
	LocalSsdCount int `pulumi:"localSsdCount"`
}

// LocalNvmeSsdBlockConfig contains configuration for using raw-block local NVMe SSDs
type LocalNvmeSsdBlockConfigResponseOutput struct{ *pulumi.OutputState }

func (LocalNvmeSsdBlockConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalNvmeSsdBlockConfigResponse)(nil)).Elem()
}

func (o LocalNvmeSsdBlockConfigResponseOutput) ToLocalNvmeSsdBlockConfigResponseOutput() LocalNvmeSsdBlockConfigResponseOutput {
	return o
}

func (o LocalNvmeSsdBlockConfigResponseOutput) ToLocalNvmeSsdBlockConfigResponseOutputWithContext(ctx context.Context) LocalNvmeSsdBlockConfigResponseOutput {
	return o
}

// Number of local NVMe SSDs to use. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.
func (o LocalNvmeSsdBlockConfigResponseOutput) LocalSsdCount() pulumi.IntOutput {
	return o.ApplyT(func(v LocalNvmeSsdBlockConfigResponse) int { return v.LocalSsdCount }).(pulumi.IntOutput)
}

// LoggingComponentConfig is cluster logging component configuration.
type LoggingComponentConfig struct {
	// Select components to collect logs. An empty set would disable all logging.
	EnableComponents []LoggingComponentConfigEnableComponentsItem `pulumi:"enableComponents"`
}

// LoggingComponentConfigInput is an input type that accepts LoggingComponentConfigArgs and LoggingComponentConfigOutput values.
// You can construct a concrete instance of `LoggingComponentConfigInput` via:
//
//	LoggingComponentConfigArgs{...}
type LoggingComponentConfigInput interface {
	pulumi.Input

	ToLoggingComponentConfigOutput() LoggingComponentConfigOutput
	ToLoggingComponentConfigOutputWithContext(context.Context) LoggingComponentConfigOutput
}

// LoggingComponentConfig is cluster logging component configuration.
type LoggingComponentConfigArgs struct {
	// Select components to collect logs. An empty set would disable all logging.
	EnableComponents LoggingComponentConfigEnableComponentsItemArrayInput `pulumi:"enableComponents"`
}

func (LoggingComponentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingComponentConfig)(nil)).Elem()
}

func (i LoggingComponentConfigArgs) ToLoggingComponentConfigOutput() LoggingComponentConfigOutput {
	return i.ToLoggingComponentConfigOutputWithContext(context.Background())
}

func (i LoggingComponentConfigArgs) ToLoggingComponentConfigOutputWithContext(ctx context.Context) LoggingComponentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingComponentConfigOutput)
}

func (i LoggingComponentConfigArgs) ToLoggingComponentConfigPtrOutput() LoggingComponentConfigPtrOutput {
	return i.ToLoggingComponentConfigPtrOutputWithContext(context.Background())
}

func (i LoggingComponentConfigArgs) ToLoggingComponentConfigPtrOutputWithContext(ctx context.Context) LoggingComponentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingComponentConfigOutput).ToLoggingComponentConfigPtrOutputWithContext(ctx)
}

// LoggingComponentConfigPtrInput is an input type that accepts LoggingComponentConfigArgs, LoggingComponentConfigPtr and LoggingComponentConfigPtrOutput values.
// You can construct a concrete instance of `LoggingComponentConfigPtrInput` via:
//
//	        LoggingComponentConfigArgs{...}
//
//	or:
//
//	        nil
type LoggingComponentConfigPtrInput interface {
	pulumi.Input

	ToLoggingComponentConfigPtrOutput() LoggingComponentConfigPtrOutput
	ToLoggingComponentConfigPtrOutputWithContext(context.Context) LoggingComponentConfigPtrOutput
}

type loggingComponentConfigPtrType LoggingComponentConfigArgs

func LoggingComponentConfigPtr(v *LoggingComponentConfigArgs) LoggingComponentConfigPtrInput {
	return (*loggingComponentConfigPtrType)(v)
}

func (*loggingComponentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingComponentConfig)(nil)).Elem()
}

func (i *loggingComponentConfigPtrType) ToLoggingComponentConfigPtrOutput() LoggingComponentConfigPtrOutput {
	return i.ToLoggingComponentConfigPtrOutputWithContext(context.Background())
}

func (i *loggingComponentConfigPtrType) ToLoggingComponentConfigPtrOutputWithContext(ctx context.Context) LoggingComponentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingComponentConfigPtrOutput)
}

// LoggingComponentConfig is cluster logging component configuration.
type LoggingComponentConfigOutput struct{ *pulumi.OutputState }

func (LoggingComponentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingComponentConfig)(nil)).Elem()
}

func (o LoggingComponentConfigOutput) ToLoggingComponentConfigOutput() LoggingComponentConfigOutput {
	return o
}

func (o LoggingComponentConfigOutput) ToLoggingComponentConfigOutputWithContext(ctx context.Context) LoggingComponentConfigOutput {
	return o
}

func (o LoggingComponentConfigOutput) ToLoggingComponentConfigPtrOutput() LoggingComponentConfigPtrOutput {
	return o.ToLoggingComponentConfigPtrOutputWithContext(context.Background())
}

func (o LoggingComponentConfigOutput) ToLoggingComponentConfigPtrOutputWithContext(ctx context.Context) LoggingComponentConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoggingComponentConfig) *LoggingComponentConfig {
		return &v
	}).(LoggingComponentConfigPtrOutput)
}

// Select components to collect logs. An empty set would disable all logging.
func (o LoggingComponentConfigOutput) EnableComponents() LoggingComponentConfigEnableComponentsItemArrayOutput {
	return o.ApplyT(func(v LoggingComponentConfig) []LoggingComponentConfigEnableComponentsItem { return v.EnableComponents }).(LoggingComponentConfigEnableComponentsItemArrayOutput)
}

type LoggingComponentConfigPtrOutput struct{ *pulumi.OutputState }

func (LoggingComponentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingComponentConfig)(nil)).Elem()
}

func (o LoggingComponentConfigPtrOutput) ToLoggingComponentConfigPtrOutput() LoggingComponentConfigPtrOutput {
	return o
}

func (o LoggingComponentConfigPtrOutput) ToLoggingComponentConfigPtrOutputWithContext(ctx context.Context) LoggingComponentConfigPtrOutput {
	return o
}

func (o LoggingComponentConfigPtrOutput) Elem() LoggingComponentConfigOutput {
	return o.ApplyT(func(v *LoggingComponentConfig) LoggingComponentConfig {
		if v != nil {
			return *v
		}
		var ret LoggingComponentConfig
		return ret
	}).(LoggingComponentConfigOutput)
}

// Select components to collect logs. An empty set would disable all logging.
func (o LoggingComponentConfigPtrOutput) EnableComponents() LoggingComponentConfigEnableComponentsItemArrayOutput {
	return o.ApplyT(func(v *LoggingComponentConfig) []LoggingComponentConfigEnableComponentsItem {
		if v == nil {
			return nil
		}
		return v.EnableComponents
	}).(LoggingComponentConfigEnableComponentsItemArrayOutput)
}

// LoggingComponentConfig is cluster logging component configuration.
type LoggingComponentConfigResponse struct {
	// Select components to collect logs. An empty set would disable all logging.
	EnableComponents []string `pulumi:"enableComponents"`
}

// LoggingComponentConfig is cluster logging component configuration.
type LoggingComponentConfigResponseOutput struct{ *pulumi.OutputState }

func (LoggingComponentConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingComponentConfigResponse)(nil)).Elem()
}

func (o LoggingComponentConfigResponseOutput) ToLoggingComponentConfigResponseOutput() LoggingComponentConfigResponseOutput {
	return o
}

func (o LoggingComponentConfigResponseOutput) ToLoggingComponentConfigResponseOutputWithContext(ctx context.Context) LoggingComponentConfigResponseOutput {
	return o
}

// Select components to collect logs. An empty set would disable all logging.
func (o LoggingComponentConfigResponseOutput) EnableComponents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoggingComponentConfigResponse) []string { return v.EnableComponents }).(pulumi.StringArrayOutput)
}

// LoggingConfig is cluster logging configuration.
type LoggingConfig struct {
	// Logging components configuration
	ComponentConfig *LoggingComponentConfig `pulumi:"componentConfig"`
}

// LoggingConfigInput is an input type that accepts LoggingConfigArgs and LoggingConfigOutput values.
// You can construct a concrete instance of `LoggingConfigInput` via:
//
//	LoggingConfigArgs{...}
type LoggingConfigInput interface {
	pulumi.Input

	ToLoggingConfigOutput() LoggingConfigOutput
	ToLoggingConfigOutputWithContext(context.Context) LoggingConfigOutput
}

// LoggingConfig is cluster logging configuration.
type LoggingConfigArgs struct {
	// Logging components configuration
	ComponentConfig LoggingComponentConfigPtrInput `pulumi:"componentConfig"`
}

func (LoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfig)(nil)).Elem()
}

func (i LoggingConfigArgs) ToLoggingConfigOutput() LoggingConfigOutput {
	return i.ToLoggingConfigOutputWithContext(context.Background())
}

func (i LoggingConfigArgs) ToLoggingConfigOutputWithContext(ctx context.Context) LoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingConfigOutput)
}

func (i LoggingConfigArgs) ToLoggingConfigPtrOutput() LoggingConfigPtrOutput {
	return i.ToLoggingConfigPtrOutputWithContext(context.Background())
}

func (i LoggingConfigArgs) ToLoggingConfigPtrOutputWithContext(ctx context.Context) LoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingConfigOutput).ToLoggingConfigPtrOutputWithContext(ctx)
}

// LoggingConfigPtrInput is an input type that accepts LoggingConfigArgs, LoggingConfigPtr and LoggingConfigPtrOutput values.
// You can construct a concrete instance of `LoggingConfigPtrInput` via:
//
//	        LoggingConfigArgs{...}
//
//	or:
//
//	        nil
type LoggingConfigPtrInput interface {
	pulumi.Input

	ToLoggingConfigPtrOutput() LoggingConfigPtrOutput
	ToLoggingConfigPtrOutputWithContext(context.Context) LoggingConfigPtrOutput
}

type loggingConfigPtrType LoggingConfigArgs

func LoggingConfigPtr(v *LoggingConfigArgs) LoggingConfigPtrInput {
	return (*loggingConfigPtrType)(v)
}

func (*loggingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingConfig)(nil)).Elem()
}

func (i *loggingConfigPtrType) ToLoggingConfigPtrOutput() LoggingConfigPtrOutput {
	return i.ToLoggingConfigPtrOutputWithContext(context.Background())
}

func (i *loggingConfigPtrType) ToLoggingConfigPtrOutputWithContext(ctx context.Context) LoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingConfigPtrOutput)
}

// LoggingConfig is cluster logging configuration.
type LoggingConfigOutput struct{ *pulumi.OutputState }

func (LoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfig)(nil)).Elem()
}

func (o LoggingConfigOutput) ToLoggingConfigOutput() LoggingConfigOutput {
	return o
}

func (o LoggingConfigOutput) ToLoggingConfigOutputWithContext(ctx context.Context) LoggingConfigOutput {
	return o
}

func (o LoggingConfigOutput) ToLoggingConfigPtrOutput() LoggingConfigPtrOutput {
	return o.ToLoggingConfigPtrOutputWithContext(context.Background())
}

func (o LoggingConfigOutput) ToLoggingConfigPtrOutputWithContext(ctx context.Context) LoggingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoggingConfig) *LoggingConfig {
		return &v
	}).(LoggingConfigPtrOutput)
}

// Logging components configuration
func (o LoggingConfigOutput) ComponentConfig() LoggingComponentConfigPtrOutput {
	return o.ApplyT(func(v LoggingConfig) *LoggingComponentConfig { return v.ComponentConfig }).(LoggingComponentConfigPtrOutput)
}

type LoggingConfigPtrOutput struct{ *pulumi.OutputState }

func (LoggingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingConfig)(nil)).Elem()
}

func (o LoggingConfigPtrOutput) ToLoggingConfigPtrOutput() LoggingConfigPtrOutput {
	return o
}

func (o LoggingConfigPtrOutput) ToLoggingConfigPtrOutputWithContext(ctx context.Context) LoggingConfigPtrOutput {
	return o
}

func (o LoggingConfigPtrOutput) Elem() LoggingConfigOutput {
	return o.ApplyT(func(v *LoggingConfig) LoggingConfig {
		if v != nil {
			return *v
		}
		var ret LoggingConfig
		return ret
	}).(LoggingConfigOutput)
}

// Logging components configuration
func (o LoggingConfigPtrOutput) ComponentConfig() LoggingComponentConfigPtrOutput {
	return o.ApplyT(func(v *LoggingConfig) *LoggingComponentConfig {
		if v == nil {
			return nil
		}
		return v.ComponentConfig
	}).(LoggingComponentConfigPtrOutput)
}

// LoggingConfig is cluster logging configuration.
type LoggingConfigResponse struct {
	// Logging components configuration
	ComponentConfig LoggingComponentConfigResponse `pulumi:"componentConfig"`
}

// LoggingConfig is cluster logging configuration.
type LoggingConfigResponseOutput struct{ *pulumi.OutputState }

func (LoggingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingConfigResponse)(nil)).Elem()
}

func (o LoggingConfigResponseOutput) ToLoggingConfigResponseOutput() LoggingConfigResponseOutput {
	return o
}

func (o LoggingConfigResponseOutput) ToLoggingConfigResponseOutputWithContext(ctx context.Context) LoggingConfigResponseOutput {
	return o
}

// Logging components configuration
func (o LoggingConfigResponseOutput) ComponentConfig() LoggingComponentConfigResponseOutput {
	return o.ApplyT(func(v LoggingConfigResponse) LoggingComponentConfigResponse { return v.ComponentConfig }).(LoggingComponentConfigResponseOutput)
}

// LoggingVariantConfig specifies the behaviour of the logging component.
type LoggingVariantConfig struct {
	// Logging variant deployed on nodes.
	Variant *LoggingVariantConfigVariant `pulumi:"variant"`
}

// LoggingVariantConfigInput is an input type that accepts LoggingVariantConfigArgs and LoggingVariantConfigOutput values.
// You can construct a concrete instance of `LoggingVariantConfigInput` via:
//
//	LoggingVariantConfigArgs{...}
type LoggingVariantConfigInput interface {
	pulumi.Input

	ToLoggingVariantConfigOutput() LoggingVariantConfigOutput
	ToLoggingVariantConfigOutputWithContext(context.Context) LoggingVariantConfigOutput
}

// LoggingVariantConfig specifies the behaviour of the logging component.
type LoggingVariantConfigArgs struct {
	// Logging variant deployed on nodes.
	Variant LoggingVariantConfigVariantPtrInput `pulumi:"variant"`
}

func (LoggingVariantConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingVariantConfig)(nil)).Elem()
}

func (i LoggingVariantConfigArgs) ToLoggingVariantConfigOutput() LoggingVariantConfigOutput {
	return i.ToLoggingVariantConfigOutputWithContext(context.Background())
}

func (i LoggingVariantConfigArgs) ToLoggingVariantConfigOutputWithContext(ctx context.Context) LoggingVariantConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingVariantConfigOutput)
}

func (i LoggingVariantConfigArgs) ToLoggingVariantConfigPtrOutput() LoggingVariantConfigPtrOutput {
	return i.ToLoggingVariantConfigPtrOutputWithContext(context.Background())
}

func (i LoggingVariantConfigArgs) ToLoggingVariantConfigPtrOutputWithContext(ctx context.Context) LoggingVariantConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingVariantConfigOutput).ToLoggingVariantConfigPtrOutputWithContext(ctx)
}

// LoggingVariantConfigPtrInput is an input type that accepts LoggingVariantConfigArgs, LoggingVariantConfigPtr and LoggingVariantConfigPtrOutput values.
// You can construct a concrete instance of `LoggingVariantConfigPtrInput` via:
//
//	        LoggingVariantConfigArgs{...}
//
//	or:
//
//	        nil
type LoggingVariantConfigPtrInput interface {
	pulumi.Input

	ToLoggingVariantConfigPtrOutput() LoggingVariantConfigPtrOutput
	ToLoggingVariantConfigPtrOutputWithContext(context.Context) LoggingVariantConfigPtrOutput
}

type loggingVariantConfigPtrType LoggingVariantConfigArgs

func LoggingVariantConfigPtr(v *LoggingVariantConfigArgs) LoggingVariantConfigPtrInput {
	return (*loggingVariantConfigPtrType)(v)
}

func (*loggingVariantConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingVariantConfig)(nil)).Elem()
}

func (i *loggingVariantConfigPtrType) ToLoggingVariantConfigPtrOutput() LoggingVariantConfigPtrOutput {
	return i.ToLoggingVariantConfigPtrOutputWithContext(context.Background())
}

func (i *loggingVariantConfigPtrType) ToLoggingVariantConfigPtrOutputWithContext(ctx context.Context) LoggingVariantConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingVariantConfigPtrOutput)
}

// LoggingVariantConfig specifies the behaviour of the logging component.
type LoggingVariantConfigOutput struct{ *pulumi.OutputState }

func (LoggingVariantConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingVariantConfig)(nil)).Elem()
}

func (o LoggingVariantConfigOutput) ToLoggingVariantConfigOutput() LoggingVariantConfigOutput {
	return o
}

func (o LoggingVariantConfigOutput) ToLoggingVariantConfigOutputWithContext(ctx context.Context) LoggingVariantConfigOutput {
	return o
}

func (o LoggingVariantConfigOutput) ToLoggingVariantConfigPtrOutput() LoggingVariantConfigPtrOutput {
	return o.ToLoggingVariantConfigPtrOutputWithContext(context.Background())
}

func (o LoggingVariantConfigOutput) ToLoggingVariantConfigPtrOutputWithContext(ctx context.Context) LoggingVariantConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoggingVariantConfig) *LoggingVariantConfig {
		return &v
	}).(LoggingVariantConfigPtrOutput)
}

// Logging variant deployed on nodes.
func (o LoggingVariantConfigOutput) Variant() LoggingVariantConfigVariantPtrOutput {
	return o.ApplyT(func(v LoggingVariantConfig) *LoggingVariantConfigVariant { return v.Variant }).(LoggingVariantConfigVariantPtrOutput)
}

type LoggingVariantConfigPtrOutput struct{ *pulumi.OutputState }

func (LoggingVariantConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingVariantConfig)(nil)).Elem()
}

func (o LoggingVariantConfigPtrOutput) ToLoggingVariantConfigPtrOutput() LoggingVariantConfigPtrOutput {
	return o
}

func (o LoggingVariantConfigPtrOutput) ToLoggingVariantConfigPtrOutputWithContext(ctx context.Context) LoggingVariantConfigPtrOutput {
	return o
}

func (o LoggingVariantConfigPtrOutput) Elem() LoggingVariantConfigOutput {
	return o.ApplyT(func(v *LoggingVariantConfig) LoggingVariantConfig {
		if v != nil {
			return *v
		}
		var ret LoggingVariantConfig
		return ret
	}).(LoggingVariantConfigOutput)
}

// Logging variant deployed on nodes.
func (o LoggingVariantConfigPtrOutput) Variant() LoggingVariantConfigVariantPtrOutput {
	return o.ApplyT(func(v *LoggingVariantConfig) *LoggingVariantConfigVariant {
		if v == nil {
			return nil
		}
		return v.Variant
	}).(LoggingVariantConfigVariantPtrOutput)
}

// LoggingVariantConfig specifies the behaviour of the logging component.
type LoggingVariantConfigResponse struct {
	// Logging variant deployed on nodes.
	Variant string `pulumi:"variant"`
}

// LoggingVariantConfig specifies the behaviour of the logging component.
type LoggingVariantConfigResponseOutput struct{ *pulumi.OutputState }

func (LoggingVariantConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingVariantConfigResponse)(nil)).Elem()
}

func (o LoggingVariantConfigResponseOutput) ToLoggingVariantConfigResponseOutput() LoggingVariantConfigResponseOutput {
	return o
}

func (o LoggingVariantConfigResponseOutput) ToLoggingVariantConfigResponseOutputWithContext(ctx context.Context) LoggingVariantConfigResponseOutput {
	return o
}

// Logging variant deployed on nodes.
func (o LoggingVariantConfigResponseOutput) Variant() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingVariantConfigResponse) string { return v.Variant }).(pulumi.StringOutput)
}

// Represents the Maintenance exclusion option.
type MaintenanceExclusionOptions struct {
	// Scope specifies the upgrade scope which upgrades are blocked by the exclusion.
	Scope *MaintenanceExclusionOptionsScope `pulumi:"scope"`
}

// MaintenanceExclusionOptionsInput is an input type that accepts MaintenanceExclusionOptionsArgs and MaintenanceExclusionOptionsOutput values.
// You can construct a concrete instance of `MaintenanceExclusionOptionsInput` via:
//
//	MaintenanceExclusionOptionsArgs{...}
type MaintenanceExclusionOptionsInput interface {
	pulumi.Input

	ToMaintenanceExclusionOptionsOutput() MaintenanceExclusionOptionsOutput
	ToMaintenanceExclusionOptionsOutputWithContext(context.Context) MaintenanceExclusionOptionsOutput
}

// Represents the Maintenance exclusion option.
type MaintenanceExclusionOptionsArgs struct {
	// Scope specifies the upgrade scope which upgrades are blocked by the exclusion.
	Scope MaintenanceExclusionOptionsScopePtrInput `pulumi:"scope"`
}

func (MaintenanceExclusionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceExclusionOptions)(nil)).Elem()
}

func (i MaintenanceExclusionOptionsArgs) ToMaintenanceExclusionOptionsOutput() MaintenanceExclusionOptionsOutput {
	return i.ToMaintenanceExclusionOptionsOutputWithContext(context.Background())
}

func (i MaintenanceExclusionOptionsArgs) ToMaintenanceExclusionOptionsOutputWithContext(ctx context.Context) MaintenanceExclusionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceExclusionOptionsOutput)
}

func (i MaintenanceExclusionOptionsArgs) ToMaintenanceExclusionOptionsPtrOutput() MaintenanceExclusionOptionsPtrOutput {
	return i.ToMaintenanceExclusionOptionsPtrOutputWithContext(context.Background())
}

func (i MaintenanceExclusionOptionsArgs) ToMaintenanceExclusionOptionsPtrOutputWithContext(ctx context.Context) MaintenanceExclusionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceExclusionOptionsOutput).ToMaintenanceExclusionOptionsPtrOutputWithContext(ctx)
}

// MaintenanceExclusionOptionsPtrInput is an input type that accepts MaintenanceExclusionOptionsArgs, MaintenanceExclusionOptionsPtr and MaintenanceExclusionOptionsPtrOutput values.
// You can construct a concrete instance of `MaintenanceExclusionOptionsPtrInput` via:
//
//	        MaintenanceExclusionOptionsArgs{...}
//
//	or:
//
//	        nil
type MaintenanceExclusionOptionsPtrInput interface {
	pulumi.Input

	ToMaintenanceExclusionOptionsPtrOutput() MaintenanceExclusionOptionsPtrOutput
	ToMaintenanceExclusionOptionsPtrOutputWithContext(context.Context) MaintenanceExclusionOptionsPtrOutput
}

type maintenanceExclusionOptionsPtrType MaintenanceExclusionOptionsArgs

func MaintenanceExclusionOptionsPtr(v *MaintenanceExclusionOptionsArgs) MaintenanceExclusionOptionsPtrInput {
	return (*maintenanceExclusionOptionsPtrType)(v)
}

func (*maintenanceExclusionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceExclusionOptions)(nil)).Elem()
}

func (i *maintenanceExclusionOptionsPtrType) ToMaintenanceExclusionOptionsPtrOutput() MaintenanceExclusionOptionsPtrOutput {
	return i.ToMaintenanceExclusionOptionsPtrOutputWithContext(context.Background())
}

func (i *maintenanceExclusionOptionsPtrType) ToMaintenanceExclusionOptionsPtrOutputWithContext(ctx context.Context) MaintenanceExclusionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceExclusionOptionsPtrOutput)
}

// Represents the Maintenance exclusion option.
type MaintenanceExclusionOptionsOutput struct{ *pulumi.OutputState }

func (MaintenanceExclusionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceExclusionOptions)(nil)).Elem()
}

func (o MaintenanceExclusionOptionsOutput) ToMaintenanceExclusionOptionsOutput() MaintenanceExclusionOptionsOutput {
	return o
}

func (o MaintenanceExclusionOptionsOutput) ToMaintenanceExclusionOptionsOutputWithContext(ctx context.Context) MaintenanceExclusionOptionsOutput {
	return o
}

func (o MaintenanceExclusionOptionsOutput) ToMaintenanceExclusionOptionsPtrOutput() MaintenanceExclusionOptionsPtrOutput {
	return o.ToMaintenanceExclusionOptionsPtrOutputWithContext(context.Background())
}

func (o MaintenanceExclusionOptionsOutput) ToMaintenanceExclusionOptionsPtrOutputWithContext(ctx context.Context) MaintenanceExclusionOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenanceExclusionOptions) *MaintenanceExclusionOptions {
		return &v
	}).(MaintenanceExclusionOptionsPtrOutput)
}

// Scope specifies the upgrade scope which upgrades are blocked by the exclusion.
func (o MaintenanceExclusionOptionsOutput) Scope() MaintenanceExclusionOptionsScopePtrOutput {
	return o.ApplyT(func(v MaintenanceExclusionOptions) *MaintenanceExclusionOptionsScope { return v.Scope }).(MaintenanceExclusionOptionsScopePtrOutput)
}

type MaintenanceExclusionOptionsPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceExclusionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceExclusionOptions)(nil)).Elem()
}

func (o MaintenanceExclusionOptionsPtrOutput) ToMaintenanceExclusionOptionsPtrOutput() MaintenanceExclusionOptionsPtrOutput {
	return o
}

func (o MaintenanceExclusionOptionsPtrOutput) ToMaintenanceExclusionOptionsPtrOutputWithContext(ctx context.Context) MaintenanceExclusionOptionsPtrOutput {
	return o
}

func (o MaintenanceExclusionOptionsPtrOutput) Elem() MaintenanceExclusionOptionsOutput {
	return o.ApplyT(func(v *MaintenanceExclusionOptions) MaintenanceExclusionOptions {
		if v != nil {
			return *v
		}
		var ret MaintenanceExclusionOptions
		return ret
	}).(MaintenanceExclusionOptionsOutput)
}

// Scope specifies the upgrade scope which upgrades are blocked by the exclusion.
func (o MaintenanceExclusionOptionsPtrOutput) Scope() MaintenanceExclusionOptionsScopePtrOutput {
	return o.ApplyT(func(v *MaintenanceExclusionOptions) *MaintenanceExclusionOptionsScope {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(MaintenanceExclusionOptionsScopePtrOutput)
}

// Represents the Maintenance exclusion option.
type MaintenanceExclusionOptionsResponse struct {
	// Scope specifies the upgrade scope which upgrades are blocked by the exclusion.
	Scope string `pulumi:"scope"`
}

// Represents the Maintenance exclusion option.
type MaintenanceExclusionOptionsResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceExclusionOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceExclusionOptionsResponse)(nil)).Elem()
}

func (o MaintenanceExclusionOptionsResponseOutput) ToMaintenanceExclusionOptionsResponseOutput() MaintenanceExclusionOptionsResponseOutput {
	return o
}

func (o MaintenanceExclusionOptionsResponseOutput) ToMaintenanceExclusionOptionsResponseOutputWithContext(ctx context.Context) MaintenanceExclusionOptionsResponseOutput {
	return o
}

// Scope specifies the upgrade scope which upgrades are blocked by the exclusion.
func (o MaintenanceExclusionOptionsResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceExclusionOptionsResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicy struct {
	// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
	ResourceVersion *string `pulumi:"resourceVersion"`
	// Specifies the maintenance window in which maintenance may be performed.
	Window *MaintenanceWindow `pulumi:"window"`
}

// MaintenancePolicyInput is an input type that accepts MaintenancePolicyArgs and MaintenancePolicyOutput values.
// You can construct a concrete instance of `MaintenancePolicyInput` via:
//
//	MaintenancePolicyArgs{...}
type MaintenancePolicyInput interface {
	pulumi.Input

	ToMaintenancePolicyOutput() MaintenancePolicyOutput
	ToMaintenancePolicyOutputWithContext(context.Context) MaintenancePolicyOutput
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyArgs struct {
	// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// Specifies the maintenance window in which maintenance may be performed.
	Window MaintenanceWindowPtrInput `pulumi:"window"`
}

func (MaintenancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicy)(nil)).Elem()
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyOutput() MaintenancePolicyOutput {
	return i.ToMaintenancePolicyOutputWithContext(context.Background())
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyOutputWithContext(ctx context.Context) MaintenancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyOutput)
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return i.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyOutput).ToMaintenancePolicyPtrOutputWithContext(ctx)
}

// MaintenancePolicyPtrInput is an input type that accepts MaintenancePolicyArgs, MaintenancePolicyPtr and MaintenancePolicyPtrOutput values.
// You can construct a concrete instance of `MaintenancePolicyPtrInput` via:
//
//	        MaintenancePolicyArgs{...}
//
//	or:
//
//	        nil
type MaintenancePolicyPtrInput interface {
	pulumi.Input

	ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput
	ToMaintenancePolicyPtrOutputWithContext(context.Context) MaintenancePolicyPtrOutput
}

type maintenancePolicyPtrType MaintenancePolicyArgs

func MaintenancePolicyPtr(v *MaintenancePolicyArgs) MaintenancePolicyPtrInput {
	return (*maintenancePolicyPtrType)(v)
}

func (*maintenancePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicy)(nil)).Elem()
}

func (i *maintenancePolicyPtrType) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return i.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i *maintenancePolicyPtrType) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyPtrOutput)
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicy)(nil)).Elem()
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyOutput() MaintenancePolicyOutput {
	return o
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyOutputWithContext(ctx context.Context) MaintenancePolicyOutput {
	return o
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return o.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenancePolicy) *MaintenancePolicy {
		return &v
	}).(MaintenancePolicyPtrOutput)
}

// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
func (o MaintenancePolicyOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenancePolicy) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// Specifies the maintenance window in which maintenance may be performed.
func (o MaintenancePolicyOutput) Window() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenancePolicy) *MaintenanceWindow { return v.Window }).(MaintenanceWindowPtrOutput)
}

type MaintenancePolicyPtrOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicy)(nil)).Elem()
}

func (o MaintenancePolicyPtrOutput) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return o
}

func (o MaintenancePolicyPtrOutput) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return o
}

func (o MaintenancePolicyPtrOutput) Elem() MaintenancePolicyOutput {
	return o.ApplyT(func(v *MaintenancePolicy) MaintenancePolicy {
		if v != nil {
			return *v
		}
		var ret MaintenancePolicy
		return ret
	}).(MaintenancePolicyOutput)
}

// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
func (o MaintenancePolicyPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenancePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the maintenance window in which maintenance may be performed.
func (o MaintenancePolicyPtrOutput) Window() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *MaintenancePolicy) *MaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.Window
	}).(MaintenanceWindowPtrOutput)
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyResponse struct {
	// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
	ResourceVersion string `pulumi:"resourceVersion"`
	// Specifies the maintenance window in which maintenance may be performed.
	Window MaintenanceWindowResponse `pulumi:"window"`
}

// MaintenancePolicy defines the maintenance policy to be used for the cluster.
type MaintenancePolicyResponseOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicyResponse)(nil)).Elem()
}

func (o MaintenancePolicyResponseOutput) ToMaintenancePolicyResponseOutput() MaintenancePolicyResponseOutput {
	return o
}

func (o MaintenancePolicyResponseOutput) ToMaintenancePolicyResponseOutputWithContext(ctx context.Context) MaintenancePolicyResponseOutput {
	return o
}

// A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.
func (o MaintenancePolicyResponseOutput) ResourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) string { return v.ResourceVersion }).(pulumi.StringOutput)
}

// Specifies the maintenance window in which maintenance may be performed.
func (o MaintenancePolicyResponseOutput) Window() MaintenanceWindowResponseOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) MaintenanceWindowResponse { return v.Window }).(MaintenanceWindowResponseOutput)
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindow struct {
	// DailyMaintenanceWindow specifies a daily maintenance operation window.
	DailyMaintenanceWindow *DailyMaintenanceWindow `pulumi:"dailyMaintenanceWindow"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
	MaintenanceExclusions map[string]TimeWindow `pulumi:"maintenanceExclusions"`
	// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
	RecurringWindow *RecurringTimeWindow `pulumi:"recurringWindow"`
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//	MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowArgs struct {
	// DailyMaintenanceWindow specifies a daily maintenance operation window.
	DailyMaintenanceWindow DailyMaintenanceWindowPtrInput `pulumi:"dailyMaintenanceWindow"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
	MaintenanceExclusions TimeWindowMapInput `pulumi:"maintenanceExclusions"`
	// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
	RecurringWindow RecurringTimeWindowPtrInput `pulumi:"recurringWindow"`
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//	        MaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

// DailyMaintenanceWindow specifies a daily maintenance operation window.
func (o MaintenanceWindowOutput) DailyMaintenanceWindow() DailyMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *DailyMaintenanceWindow { return v.DailyMaintenanceWindow }).(DailyMaintenanceWindowPtrOutput)
}

// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
func (o MaintenanceWindowOutput) MaintenanceExclusions() TimeWindowMapOutput {
	return o.ApplyT(func(v MaintenanceWindow) map[string]TimeWindow { return v.MaintenanceExclusions }).(TimeWindowMapOutput)
}

// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
func (o MaintenanceWindowOutput) RecurringWindow() RecurringTimeWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *RecurringTimeWindow { return v.RecurringWindow }).(RecurringTimeWindowPtrOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret MaintenanceWindow
		return ret
	}).(MaintenanceWindowOutput)
}

// DailyMaintenanceWindow specifies a daily maintenance operation window.
func (o MaintenanceWindowPtrOutput) DailyMaintenanceWindow() DailyMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *DailyMaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.DailyMaintenanceWindow
	}).(DailyMaintenanceWindowPtrOutput)
}

// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
func (o MaintenanceWindowPtrOutput) MaintenanceExclusions() TimeWindowMapOutput {
	return o.ApplyT(func(v *MaintenanceWindow) map[string]TimeWindow {
		if v == nil {
			return nil
		}
		return v.MaintenanceExclusions
	}).(TimeWindowMapOutput)
}

// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
func (o MaintenanceWindowPtrOutput) RecurringWindow() RecurringTimeWindowPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *RecurringTimeWindow {
		if v == nil {
			return nil
		}
		return v.RecurringWindow
	}).(RecurringTimeWindowPtrOutput)
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowResponse struct {
	// DailyMaintenanceWindow specifies a daily maintenance operation window.
	DailyMaintenanceWindow DailyMaintenanceWindowResponse `pulumi:"dailyMaintenanceWindow"`
	// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
	MaintenanceExclusions map[string]TimeWindowResponse `pulumi:"maintenanceExclusions"`
	// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
	RecurringWindow RecurringTimeWindowResponse `pulumi:"recurringWindow"`
}

// MaintenanceWindow defines the maintenance window to be used for the cluster.
type MaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutput() MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutputWithContext(ctx context.Context) MaintenanceWindowResponseOutput {
	return o
}

// DailyMaintenanceWindow specifies a daily maintenance operation window.
func (o MaintenanceWindowResponseOutput) DailyMaintenanceWindow() DailyMaintenanceWindowResponseOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) DailyMaintenanceWindowResponse { return v.DailyMaintenanceWindow }).(DailyMaintenanceWindowResponseOutput)
}

// Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.
func (o MaintenanceWindowResponseOutput) MaintenanceExclusions() TimeWindowResponseMapOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) map[string]TimeWindowResponse { return v.MaintenanceExclusions }).(TimeWindowResponseMapOutput)
}

// RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time.
func (o MaintenanceWindowResponseOutput) RecurringWindow() RecurringTimeWindowResponseOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) RecurringTimeWindowResponse { return v.RecurringWindow }).(RecurringTimeWindowResponseOutput)
}

// ManagedPrometheusConfig defines the configuration for Google Cloud Managed Service for Prometheus.
type ManagedPrometheusConfig struct {
	// Enable Managed Collection.
	Enabled *bool `pulumi:"enabled"`
}

// ManagedPrometheusConfigInput is an input type that accepts ManagedPrometheusConfigArgs and ManagedPrometheusConfigOutput values.
// You can construct a concrete instance of `ManagedPrometheusConfigInput` via:
//
//	ManagedPrometheusConfigArgs{...}
type ManagedPrometheusConfigInput interface {
	pulumi.Input

	ToManagedPrometheusConfigOutput() ManagedPrometheusConfigOutput
	ToManagedPrometheusConfigOutputWithContext(context.Context) ManagedPrometheusConfigOutput
}

// ManagedPrometheusConfig defines the configuration for Google Cloud Managed Service for Prometheus.
type ManagedPrometheusConfigArgs struct {
	// Enable Managed Collection.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ManagedPrometheusConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrometheusConfig)(nil)).Elem()
}

func (i ManagedPrometheusConfigArgs) ToManagedPrometheusConfigOutput() ManagedPrometheusConfigOutput {
	return i.ToManagedPrometheusConfigOutputWithContext(context.Background())
}

func (i ManagedPrometheusConfigArgs) ToManagedPrometheusConfigOutputWithContext(ctx context.Context) ManagedPrometheusConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrometheusConfigOutput)
}

func (i ManagedPrometheusConfigArgs) ToManagedPrometheusConfigPtrOutput() ManagedPrometheusConfigPtrOutput {
	return i.ToManagedPrometheusConfigPtrOutputWithContext(context.Background())
}

func (i ManagedPrometheusConfigArgs) ToManagedPrometheusConfigPtrOutputWithContext(ctx context.Context) ManagedPrometheusConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrometheusConfigOutput).ToManagedPrometheusConfigPtrOutputWithContext(ctx)
}

// ManagedPrometheusConfigPtrInput is an input type that accepts ManagedPrometheusConfigArgs, ManagedPrometheusConfigPtr and ManagedPrometheusConfigPtrOutput values.
// You can construct a concrete instance of `ManagedPrometheusConfigPtrInput` via:
//
//	        ManagedPrometheusConfigArgs{...}
//
//	or:
//
//	        nil
type ManagedPrometheusConfigPtrInput interface {
	pulumi.Input

	ToManagedPrometheusConfigPtrOutput() ManagedPrometheusConfigPtrOutput
	ToManagedPrometheusConfigPtrOutputWithContext(context.Context) ManagedPrometheusConfigPtrOutput
}

type managedPrometheusConfigPtrType ManagedPrometheusConfigArgs

func ManagedPrometheusConfigPtr(v *ManagedPrometheusConfigArgs) ManagedPrometheusConfigPtrInput {
	return (*managedPrometheusConfigPtrType)(v)
}

func (*managedPrometheusConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrometheusConfig)(nil)).Elem()
}

func (i *managedPrometheusConfigPtrType) ToManagedPrometheusConfigPtrOutput() ManagedPrometheusConfigPtrOutput {
	return i.ToManagedPrometheusConfigPtrOutputWithContext(context.Background())
}

func (i *managedPrometheusConfigPtrType) ToManagedPrometheusConfigPtrOutputWithContext(ctx context.Context) ManagedPrometheusConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrometheusConfigPtrOutput)
}

// ManagedPrometheusConfig defines the configuration for Google Cloud Managed Service for Prometheus.
type ManagedPrometheusConfigOutput struct{ *pulumi.OutputState }

func (ManagedPrometheusConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrometheusConfig)(nil)).Elem()
}

func (o ManagedPrometheusConfigOutput) ToManagedPrometheusConfigOutput() ManagedPrometheusConfigOutput {
	return o
}

func (o ManagedPrometheusConfigOutput) ToManagedPrometheusConfigOutputWithContext(ctx context.Context) ManagedPrometheusConfigOutput {
	return o
}

func (o ManagedPrometheusConfigOutput) ToManagedPrometheusConfigPtrOutput() ManagedPrometheusConfigPtrOutput {
	return o.ToManagedPrometheusConfigPtrOutputWithContext(context.Background())
}

func (o ManagedPrometheusConfigOutput) ToManagedPrometheusConfigPtrOutputWithContext(ctx context.Context) ManagedPrometheusConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedPrometheusConfig) *ManagedPrometheusConfig {
		return &v
	}).(ManagedPrometheusConfigPtrOutput)
}

// Enable Managed Collection.
func (o ManagedPrometheusConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedPrometheusConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedPrometheusConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedPrometheusConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrometheusConfig)(nil)).Elem()
}

func (o ManagedPrometheusConfigPtrOutput) ToManagedPrometheusConfigPtrOutput() ManagedPrometheusConfigPtrOutput {
	return o
}

func (o ManagedPrometheusConfigPtrOutput) ToManagedPrometheusConfigPtrOutputWithContext(ctx context.Context) ManagedPrometheusConfigPtrOutput {
	return o
}

func (o ManagedPrometheusConfigPtrOutput) Elem() ManagedPrometheusConfigOutput {
	return o.ApplyT(func(v *ManagedPrometheusConfig) ManagedPrometheusConfig {
		if v != nil {
			return *v
		}
		var ret ManagedPrometheusConfig
		return ret
	}).(ManagedPrometheusConfigOutput)
}

// Enable Managed Collection.
func (o ManagedPrometheusConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedPrometheusConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// ManagedPrometheusConfig defines the configuration for Google Cloud Managed Service for Prometheus.
type ManagedPrometheusConfigResponse struct {
	// Enable Managed Collection.
	Enabled bool `pulumi:"enabled"`
}

// ManagedPrometheusConfig defines the configuration for Google Cloud Managed Service for Prometheus.
type ManagedPrometheusConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedPrometheusConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrometheusConfigResponse)(nil)).Elem()
}

func (o ManagedPrometheusConfigResponseOutput) ToManagedPrometheusConfigResponseOutput() ManagedPrometheusConfigResponseOutput {
	return o
}

func (o ManagedPrometheusConfigResponseOutput) ToManagedPrometheusConfigResponseOutputWithContext(ctx context.Context) ManagedPrometheusConfigResponseOutput {
	return o
}

// Enable Managed Collection.
func (o ManagedPrometheusConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedPrometheusConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuth struct {
	// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
	ClientCertificateConfig *ClientCertificateConfig `pulumi:"clientCertificateConfig"`
	// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Password *string `pulumi:"password"`
	// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Username *string `pulumi:"username"`
}

// MasterAuthInput is an input type that accepts MasterAuthArgs and MasterAuthOutput values.
// You can construct a concrete instance of `MasterAuthInput` via:
//
//	MasterAuthArgs{...}
type MasterAuthInput interface {
	pulumi.Input

	ToMasterAuthOutput() MasterAuthOutput
	ToMasterAuthOutputWithContext(context.Context) MasterAuthOutput
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthArgs struct {
	// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
	ClientCertificateConfig ClientCertificateConfigPtrInput `pulumi:"clientCertificateConfig"`
	// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (MasterAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuth)(nil)).Elem()
}

func (i MasterAuthArgs) ToMasterAuthOutput() MasterAuthOutput {
	return i.ToMasterAuthOutputWithContext(context.Background())
}

func (i MasterAuthArgs) ToMasterAuthOutputWithContext(ctx context.Context) MasterAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthOutput)
}

func (i MasterAuthArgs) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return i.ToMasterAuthPtrOutputWithContext(context.Background())
}

func (i MasterAuthArgs) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthOutput).ToMasterAuthPtrOutputWithContext(ctx)
}

// MasterAuthPtrInput is an input type that accepts MasterAuthArgs, MasterAuthPtr and MasterAuthPtrOutput values.
// You can construct a concrete instance of `MasterAuthPtrInput` via:
//
//	        MasterAuthArgs{...}
//
//	or:
//
//	        nil
type MasterAuthPtrInput interface {
	pulumi.Input

	ToMasterAuthPtrOutput() MasterAuthPtrOutput
	ToMasterAuthPtrOutputWithContext(context.Context) MasterAuthPtrOutput
}

type masterAuthPtrType MasterAuthArgs

func MasterAuthPtr(v *MasterAuthArgs) MasterAuthPtrInput {
	return (*masterAuthPtrType)(v)
}

func (*masterAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuth)(nil)).Elem()
}

func (i *masterAuthPtrType) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return i.ToMasterAuthPtrOutputWithContext(context.Background())
}

func (i *masterAuthPtrType) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthPtrOutput)
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthOutput struct{ *pulumi.OutputState }

func (MasterAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuth)(nil)).Elem()
}

func (o MasterAuthOutput) ToMasterAuthOutput() MasterAuthOutput {
	return o
}

func (o MasterAuthOutput) ToMasterAuthOutputWithContext(ctx context.Context) MasterAuthOutput {
	return o
}

func (o MasterAuthOutput) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return o.ToMasterAuthPtrOutputWithContext(context.Background())
}

func (o MasterAuthOutput) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MasterAuth) *MasterAuth {
		return &v
	}).(MasterAuthPtrOutput)
}

// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
func (o MasterAuthOutput) ClientCertificateConfig() ClientCertificateConfigPtrOutput {
	return o.ApplyT(func(v MasterAuth) *ClientCertificateConfig { return v.ClientCertificateConfig }).(ClientCertificateConfigPtrOutput)
}

// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MasterAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type MasterAuthPtrOutput struct{ *pulumi.OutputState }

func (MasterAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuth)(nil)).Elem()
}

func (o MasterAuthPtrOutput) ToMasterAuthPtrOutput() MasterAuthPtrOutput {
	return o
}

func (o MasterAuthPtrOutput) ToMasterAuthPtrOutputWithContext(ctx context.Context) MasterAuthPtrOutput {
	return o
}

func (o MasterAuthPtrOutput) Elem() MasterAuthOutput {
	return o.ApplyT(func(v *MasterAuth) MasterAuth {
		if v != nil {
			return *v
		}
		var ret MasterAuth
		return ret
	}).(MasterAuthOutput)
}

// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
func (o MasterAuthPtrOutput) ClientCertificateConfig() ClientCertificateConfigPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *ClientCertificateConfig {
		if v == nil {
			return nil
		}
		return v.ClientCertificateConfig
	}).(ClientCertificateConfigPtrOutput)
}

// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MasterAuth) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthResponse struct {
	// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
	ClientCertificate string `pulumi:"clientCertificate"`
	// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
	ClientCertificateConfig ClientCertificateConfigResponse `pulumi:"clientCertificateConfig"`
	// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
	ClientKey string `pulumi:"clientKey"`
	// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
	ClusterCaCertificate string `pulumi:"clusterCaCertificate"`
	// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Password string `pulumi:"password"`
	// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
	Username string `pulumi:"username"`
}

// The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.
type MasterAuthResponseOutput struct{ *pulumi.OutputState }

func (MasterAuthResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthResponse)(nil)).Elem()
}

func (o MasterAuthResponseOutput) ToMasterAuthResponseOutput() MasterAuthResponseOutput {
	return o
}

func (o MasterAuthResponseOutput) ToMasterAuthResponseOutputWithContext(ctx context.Context) MasterAuthResponseOutput {
	return o
}

// [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.
func (o MasterAuthResponseOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v MasterAuthResponse) string { return v.ClientCertificate }).(pulumi.StringOutput)
}

// Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued.
func (o MasterAuthResponseOutput) ClientCertificateConfig() ClientCertificateConfigResponseOutput {
	return o.ApplyT(func(v MasterAuthResponse) ClientCertificateConfigResponse { return v.ClientCertificateConfig }).(ClientCertificateConfigResponseOutput)
}

// [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.
func (o MasterAuthResponseOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v MasterAuthResponse) string { return v.ClientKey }).(pulumi.StringOutput)
}

// [Output only] Base64-encoded public certificate that is the root of trust for the cluster.
func (o MasterAuthResponseOutput) ClusterCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v MasterAuthResponse) string { return v.ClusterCaCertificate }).(pulumi.StringOutput)
}

// The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MasterAuthResponse) string { return v.Password }).(pulumi.StringOutput)
}

// The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication
func (o MasterAuthResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MasterAuthResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfig struct {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
	CidrBlocks []CidrBlock `pulumi:"cidrBlocks"`
	// Whether or not master authorized networks is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Whether master is accessbile via Google Compute Engine Public IP addresses.
	GcpPublicCidrsAccessEnabled *bool `pulumi:"gcpPublicCidrsAccessEnabled"`
}

// MasterAuthorizedNetworksConfigInput is an input type that accepts MasterAuthorizedNetworksConfigArgs and MasterAuthorizedNetworksConfigOutput values.
// You can construct a concrete instance of `MasterAuthorizedNetworksConfigInput` via:
//
//	MasterAuthorizedNetworksConfigArgs{...}
type MasterAuthorizedNetworksConfigInput interface {
	pulumi.Input

	ToMasterAuthorizedNetworksConfigOutput() MasterAuthorizedNetworksConfigOutput
	ToMasterAuthorizedNetworksConfigOutputWithContext(context.Context) MasterAuthorizedNetworksConfigOutput
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigArgs struct {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
	CidrBlocks CidrBlockArrayInput `pulumi:"cidrBlocks"`
	// Whether or not master authorized networks is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Whether master is accessbile via Google Compute Engine Public IP addresses.
	GcpPublicCidrsAccessEnabled pulumi.BoolPtrInput `pulumi:"gcpPublicCidrsAccessEnabled"`
}

func (MasterAuthorizedNetworksConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigOutput() MasterAuthorizedNetworksConfigOutput {
	return i.ToMasterAuthorizedNetworksConfigOutputWithContext(context.Background())
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigOutput)
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return i.ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Background())
}

func (i MasterAuthorizedNetworksConfigArgs) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigOutput).ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx)
}

// MasterAuthorizedNetworksConfigPtrInput is an input type that accepts MasterAuthorizedNetworksConfigArgs, MasterAuthorizedNetworksConfigPtr and MasterAuthorizedNetworksConfigPtrOutput values.
// You can construct a concrete instance of `MasterAuthorizedNetworksConfigPtrInput` via:
//
//	        MasterAuthorizedNetworksConfigArgs{...}
//
//	or:
//
//	        nil
type MasterAuthorizedNetworksConfigPtrInput interface {
	pulumi.Input

	ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput
	ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Context) MasterAuthorizedNetworksConfigPtrOutput
}

type masterAuthorizedNetworksConfigPtrType MasterAuthorizedNetworksConfigArgs

func MasterAuthorizedNetworksConfigPtr(v *MasterAuthorizedNetworksConfigArgs) MasterAuthorizedNetworksConfigPtrInput {
	return (*masterAuthorizedNetworksConfigPtrType)(v)
}

func (*masterAuthorizedNetworksConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (i *masterAuthorizedNetworksConfigPtrType) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return i.ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Background())
}

func (i *masterAuthorizedNetworksConfigPtrType) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MasterAuthorizedNetworksConfigPtrOutput)
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigOutput struct{ *pulumi.OutputState }

func (MasterAuthorizedNetworksConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigOutput() MasterAuthorizedNetworksConfigOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return o.ToMasterAuthorizedNetworksConfigPtrOutputWithContext(context.Background())
}

func (o MasterAuthorizedNetworksConfigOutput) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MasterAuthorizedNetworksConfig) *MasterAuthorizedNetworksConfig {
		return &v
	}).(MasterAuthorizedNetworksConfigPtrOutput)
}

// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
func (o MasterAuthorizedNetworksConfigOutput) CidrBlocks() CidrBlockArrayOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfig) []CidrBlock { return v.CidrBlocks }).(CidrBlockArrayOutput)
}

// Whether or not master authorized networks is enabled.
func (o MasterAuthorizedNetworksConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether master is accessbile via Google Compute Engine Public IP addresses.
func (o MasterAuthorizedNetworksConfigOutput) GcpPublicCidrsAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfig) *bool { return v.GcpPublicCidrsAccessEnabled }).(pulumi.BoolPtrOutput)
}

type MasterAuthorizedNetworksConfigPtrOutput struct{ *pulumi.OutputState }

func (MasterAuthorizedNetworksConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MasterAuthorizedNetworksConfig)(nil)).Elem()
}

func (o MasterAuthorizedNetworksConfigPtrOutput) ToMasterAuthorizedNetworksConfigPtrOutput() MasterAuthorizedNetworksConfigPtrOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigPtrOutput) ToMasterAuthorizedNetworksConfigPtrOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigPtrOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigPtrOutput) Elem() MasterAuthorizedNetworksConfigOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfig) MasterAuthorizedNetworksConfig {
		if v != nil {
			return *v
		}
		var ret MasterAuthorizedNetworksConfig
		return ret
	}).(MasterAuthorizedNetworksConfigOutput)
}

// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
func (o MasterAuthorizedNetworksConfigPtrOutput) CidrBlocks() CidrBlockArrayOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfig) []CidrBlock {
		if v == nil {
			return nil
		}
		return v.CidrBlocks
	}).(CidrBlockArrayOutput)
}

// Whether or not master authorized networks is enabled.
func (o MasterAuthorizedNetworksConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Whether master is accessbile via Google Compute Engine Public IP addresses.
func (o MasterAuthorizedNetworksConfigPtrOutput) GcpPublicCidrsAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MasterAuthorizedNetworksConfig) *bool {
		if v == nil {
			return nil
		}
		return v.GcpPublicCidrsAccessEnabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigResponse struct {
	// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
	CidrBlocks []CidrBlockResponse `pulumi:"cidrBlocks"`
	// Whether or not master authorized networks is enabled.
	Enabled bool `pulumi:"enabled"`
	// Whether master is accessbile via Google Compute Engine Public IP addresses.
	GcpPublicCidrsAccessEnabled bool `pulumi:"gcpPublicCidrsAccessEnabled"`
}

// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
type MasterAuthorizedNetworksConfigResponseOutput struct{ *pulumi.OutputState }

func (MasterAuthorizedNetworksConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MasterAuthorizedNetworksConfigResponse)(nil)).Elem()
}

func (o MasterAuthorizedNetworksConfigResponseOutput) ToMasterAuthorizedNetworksConfigResponseOutput() MasterAuthorizedNetworksConfigResponseOutput {
	return o
}

func (o MasterAuthorizedNetworksConfigResponseOutput) ToMasterAuthorizedNetworksConfigResponseOutputWithContext(ctx context.Context) MasterAuthorizedNetworksConfigResponseOutput {
	return o
}

// cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.
func (o MasterAuthorizedNetworksConfigResponseOutput) CidrBlocks() CidrBlockResponseArrayOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfigResponse) []CidrBlockResponse { return v.CidrBlocks }).(CidrBlockResponseArrayOutput)
}

// Whether or not master authorized networks is enabled.
func (o MasterAuthorizedNetworksConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Whether master is accessbile via Google Compute Engine Public IP addresses.
func (o MasterAuthorizedNetworksConfigResponseOutput) GcpPublicCidrsAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MasterAuthorizedNetworksConfigResponse) bool { return v.GcpPublicCidrsAccessEnabled }).(pulumi.BoolOutput)
}

// Constraints applied to pods.
type MaxPodsConstraint struct {
	// Constraint enforced on the max num of pods per node.
	MaxPodsPerNode *string `pulumi:"maxPodsPerNode"`
}

// MaxPodsConstraintInput is an input type that accepts MaxPodsConstraintArgs and MaxPodsConstraintOutput values.
// You can construct a concrete instance of `MaxPodsConstraintInput` via:
//
//	MaxPodsConstraintArgs{...}
type MaxPodsConstraintInput interface {
	pulumi.Input

	ToMaxPodsConstraintOutput() MaxPodsConstraintOutput
	ToMaxPodsConstraintOutputWithContext(context.Context) MaxPodsConstraintOutput
}

// Constraints applied to pods.
type MaxPodsConstraintArgs struct {
	// Constraint enforced on the max num of pods per node.
	MaxPodsPerNode pulumi.StringPtrInput `pulumi:"maxPodsPerNode"`
}

func (MaxPodsConstraintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxPodsConstraint)(nil)).Elem()
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintOutput() MaxPodsConstraintOutput {
	return i.ToMaxPodsConstraintOutputWithContext(context.Background())
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintOutputWithContext(ctx context.Context) MaxPodsConstraintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintOutput)
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return i.ToMaxPodsConstraintPtrOutputWithContext(context.Background())
}

func (i MaxPodsConstraintArgs) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintOutput).ToMaxPodsConstraintPtrOutputWithContext(ctx)
}

// MaxPodsConstraintPtrInput is an input type that accepts MaxPodsConstraintArgs, MaxPodsConstraintPtr and MaxPodsConstraintPtrOutput values.
// You can construct a concrete instance of `MaxPodsConstraintPtrInput` via:
//
//	        MaxPodsConstraintArgs{...}
//
//	or:
//
//	        nil
type MaxPodsConstraintPtrInput interface {
	pulumi.Input

	ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput
	ToMaxPodsConstraintPtrOutputWithContext(context.Context) MaxPodsConstraintPtrOutput
}

type maxPodsConstraintPtrType MaxPodsConstraintArgs

func MaxPodsConstraintPtr(v *MaxPodsConstraintArgs) MaxPodsConstraintPtrInput {
	return (*maxPodsConstraintPtrType)(v)
}

func (*maxPodsConstraintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaxPodsConstraint)(nil)).Elem()
}

func (i *maxPodsConstraintPtrType) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return i.ToMaxPodsConstraintPtrOutputWithContext(context.Background())
}

func (i *maxPodsConstraintPtrType) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxPodsConstraintPtrOutput)
}

// Constraints applied to pods.
type MaxPodsConstraintOutput struct{ *pulumi.OutputState }

func (MaxPodsConstraintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxPodsConstraint)(nil)).Elem()
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintOutput() MaxPodsConstraintOutput {
	return o
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintOutputWithContext(ctx context.Context) MaxPodsConstraintOutput {
	return o
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return o.ToMaxPodsConstraintPtrOutputWithContext(context.Background())
}

func (o MaxPodsConstraintOutput) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaxPodsConstraint) *MaxPodsConstraint {
		return &v
	}).(MaxPodsConstraintPtrOutput)
}

// Constraint enforced on the max num of pods per node.
func (o MaxPodsConstraintOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaxPodsConstraint) *string { return v.MaxPodsPerNode }).(pulumi.StringPtrOutput)
}

type MaxPodsConstraintPtrOutput struct{ *pulumi.OutputState }

func (MaxPodsConstraintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaxPodsConstraint)(nil)).Elem()
}

func (o MaxPodsConstraintPtrOutput) ToMaxPodsConstraintPtrOutput() MaxPodsConstraintPtrOutput {
	return o
}

func (o MaxPodsConstraintPtrOutput) ToMaxPodsConstraintPtrOutputWithContext(ctx context.Context) MaxPodsConstraintPtrOutput {
	return o
}

func (o MaxPodsConstraintPtrOutput) Elem() MaxPodsConstraintOutput {
	return o.ApplyT(func(v *MaxPodsConstraint) MaxPodsConstraint {
		if v != nil {
			return *v
		}
		var ret MaxPodsConstraint
		return ret
	}).(MaxPodsConstraintOutput)
}

// Constraint enforced on the max num of pods per node.
func (o MaxPodsConstraintPtrOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaxPodsConstraint) *string {
		if v == nil {
			return nil
		}
		return v.MaxPodsPerNode
	}).(pulumi.StringPtrOutput)
}

// Constraints applied to pods.
type MaxPodsConstraintResponse struct {
	// Constraint enforced on the max num of pods per node.
	MaxPodsPerNode string `pulumi:"maxPodsPerNode"`
}

// Constraints applied to pods.
type MaxPodsConstraintResponseOutput struct{ *pulumi.OutputState }

func (MaxPodsConstraintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxPodsConstraintResponse)(nil)).Elem()
}

func (o MaxPodsConstraintResponseOutput) ToMaxPodsConstraintResponseOutput() MaxPodsConstraintResponseOutput {
	return o
}

func (o MaxPodsConstraintResponseOutput) ToMaxPodsConstraintResponseOutputWithContext(ctx context.Context) MaxPodsConstraintResponseOutput {
	return o
}

// Constraint enforced on the max num of pods per node.
func (o MaxPodsConstraintResponseOutput) MaxPodsPerNode() pulumi.StringOutput {
	return o.ApplyT(func(v MaxPodsConstraintResponse) string { return v.MaxPodsPerNode }).(pulumi.StringOutput)
}

// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
type MeshCertificates struct {
	// enable_certificates controls issuance of workload mTLS certificates. If set, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster, which can then be configured by creating a WorkloadCertificateConfig Custom Resource. Requires Workload Identity (workload_pool must be non-empty).
	EnableCertificates *bool `pulumi:"enableCertificates"`
}

// MeshCertificatesInput is an input type that accepts MeshCertificatesArgs and MeshCertificatesOutput values.
// You can construct a concrete instance of `MeshCertificatesInput` via:
//
//	MeshCertificatesArgs{...}
type MeshCertificatesInput interface {
	pulumi.Input

	ToMeshCertificatesOutput() MeshCertificatesOutput
	ToMeshCertificatesOutputWithContext(context.Context) MeshCertificatesOutput
}

// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
type MeshCertificatesArgs struct {
	// enable_certificates controls issuance of workload mTLS certificates. If set, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster, which can then be configured by creating a WorkloadCertificateConfig Custom Resource. Requires Workload Identity (workload_pool must be non-empty).
	EnableCertificates pulumi.BoolPtrInput `pulumi:"enableCertificates"`
}

func (MeshCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshCertificates)(nil)).Elem()
}

func (i MeshCertificatesArgs) ToMeshCertificatesOutput() MeshCertificatesOutput {
	return i.ToMeshCertificatesOutputWithContext(context.Background())
}

func (i MeshCertificatesArgs) ToMeshCertificatesOutputWithContext(ctx context.Context) MeshCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshCertificatesOutput)
}

func (i MeshCertificatesArgs) ToMeshCertificatesPtrOutput() MeshCertificatesPtrOutput {
	return i.ToMeshCertificatesPtrOutputWithContext(context.Background())
}

func (i MeshCertificatesArgs) ToMeshCertificatesPtrOutputWithContext(ctx context.Context) MeshCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshCertificatesOutput).ToMeshCertificatesPtrOutputWithContext(ctx)
}

// MeshCertificatesPtrInput is an input type that accepts MeshCertificatesArgs, MeshCertificatesPtr and MeshCertificatesPtrOutput values.
// You can construct a concrete instance of `MeshCertificatesPtrInput` via:
//
//	        MeshCertificatesArgs{...}
//
//	or:
//
//	        nil
type MeshCertificatesPtrInput interface {
	pulumi.Input

	ToMeshCertificatesPtrOutput() MeshCertificatesPtrOutput
	ToMeshCertificatesPtrOutputWithContext(context.Context) MeshCertificatesPtrOutput
}

type meshCertificatesPtrType MeshCertificatesArgs

func MeshCertificatesPtr(v *MeshCertificatesArgs) MeshCertificatesPtrInput {
	return (*meshCertificatesPtrType)(v)
}

func (*meshCertificatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MeshCertificates)(nil)).Elem()
}

func (i *meshCertificatesPtrType) ToMeshCertificatesPtrOutput() MeshCertificatesPtrOutput {
	return i.ToMeshCertificatesPtrOutputWithContext(context.Background())
}

func (i *meshCertificatesPtrType) ToMeshCertificatesPtrOutputWithContext(ctx context.Context) MeshCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshCertificatesPtrOutput)
}

// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
type MeshCertificatesOutput struct{ *pulumi.OutputState }

func (MeshCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshCertificates)(nil)).Elem()
}

func (o MeshCertificatesOutput) ToMeshCertificatesOutput() MeshCertificatesOutput {
	return o
}

func (o MeshCertificatesOutput) ToMeshCertificatesOutputWithContext(ctx context.Context) MeshCertificatesOutput {
	return o
}

func (o MeshCertificatesOutput) ToMeshCertificatesPtrOutput() MeshCertificatesPtrOutput {
	return o.ToMeshCertificatesPtrOutputWithContext(context.Background())
}

func (o MeshCertificatesOutput) ToMeshCertificatesPtrOutputWithContext(ctx context.Context) MeshCertificatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MeshCertificates) *MeshCertificates {
		return &v
	}).(MeshCertificatesPtrOutput)
}

// enable_certificates controls issuance of workload mTLS certificates. If set, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster, which can then be configured by creating a WorkloadCertificateConfig Custom Resource. Requires Workload Identity (workload_pool must be non-empty).
func (o MeshCertificatesOutput) EnableCertificates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MeshCertificates) *bool { return v.EnableCertificates }).(pulumi.BoolPtrOutput)
}

type MeshCertificatesPtrOutput struct{ *pulumi.OutputState }

func (MeshCertificatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeshCertificates)(nil)).Elem()
}

func (o MeshCertificatesPtrOutput) ToMeshCertificatesPtrOutput() MeshCertificatesPtrOutput {
	return o
}

func (o MeshCertificatesPtrOutput) ToMeshCertificatesPtrOutputWithContext(ctx context.Context) MeshCertificatesPtrOutput {
	return o
}

func (o MeshCertificatesPtrOutput) Elem() MeshCertificatesOutput {
	return o.ApplyT(func(v *MeshCertificates) MeshCertificates {
		if v != nil {
			return *v
		}
		var ret MeshCertificates
		return ret
	}).(MeshCertificatesOutput)
}

// enable_certificates controls issuance of workload mTLS certificates. If set, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster, which can then be configured by creating a WorkloadCertificateConfig Custom Resource. Requires Workload Identity (workload_pool must be non-empty).
func (o MeshCertificatesPtrOutput) EnableCertificates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MeshCertificates) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCertificates
	}).(pulumi.BoolPtrOutput)
}

// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
type MeshCertificatesResponse struct {
	// enable_certificates controls issuance of workload mTLS certificates. If set, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster, which can then be configured by creating a WorkloadCertificateConfig Custom Resource. Requires Workload Identity (workload_pool must be non-empty).
	EnableCertificates bool `pulumi:"enableCertificates"`
}

// Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
type MeshCertificatesResponseOutput struct{ *pulumi.OutputState }

func (MeshCertificatesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshCertificatesResponse)(nil)).Elem()
}

func (o MeshCertificatesResponseOutput) ToMeshCertificatesResponseOutput() MeshCertificatesResponseOutput {
	return o
}

func (o MeshCertificatesResponseOutput) ToMeshCertificatesResponseOutputWithContext(ctx context.Context) MeshCertificatesResponseOutput {
	return o
}

// enable_certificates controls issuance of workload mTLS certificates. If set, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster, which can then be configured by creating a WorkloadCertificateConfig Custom Resource. Requires Workload Identity (workload_pool must be non-empty).
func (o MeshCertificatesResponseOutput) EnableCertificates() pulumi.BoolOutput {
	return o.ApplyT(func(v MeshCertificatesResponse) bool { return v.EnableCertificates }).(pulumi.BoolOutput)
}

// MonitoringComponentConfig is cluster monitoring component configuration.
type MonitoringComponentConfig struct {
	// Select components to collect metrics. An empty set would disable all monitoring.
	EnableComponents []MonitoringComponentConfigEnableComponentsItem `pulumi:"enableComponents"`
}

// MonitoringComponentConfigInput is an input type that accepts MonitoringComponentConfigArgs and MonitoringComponentConfigOutput values.
// You can construct a concrete instance of `MonitoringComponentConfigInput` via:
//
//	MonitoringComponentConfigArgs{...}
type MonitoringComponentConfigInput interface {
	pulumi.Input

	ToMonitoringComponentConfigOutput() MonitoringComponentConfigOutput
	ToMonitoringComponentConfigOutputWithContext(context.Context) MonitoringComponentConfigOutput
}

// MonitoringComponentConfig is cluster monitoring component configuration.
type MonitoringComponentConfigArgs struct {
	// Select components to collect metrics. An empty set would disable all monitoring.
	EnableComponents MonitoringComponentConfigEnableComponentsItemArrayInput `pulumi:"enableComponents"`
}

func (MonitoringComponentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringComponentConfig)(nil)).Elem()
}

func (i MonitoringComponentConfigArgs) ToMonitoringComponentConfigOutput() MonitoringComponentConfigOutput {
	return i.ToMonitoringComponentConfigOutputWithContext(context.Background())
}

func (i MonitoringComponentConfigArgs) ToMonitoringComponentConfigOutputWithContext(ctx context.Context) MonitoringComponentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringComponentConfigOutput)
}

func (i MonitoringComponentConfigArgs) ToMonitoringComponentConfigPtrOutput() MonitoringComponentConfigPtrOutput {
	return i.ToMonitoringComponentConfigPtrOutputWithContext(context.Background())
}

func (i MonitoringComponentConfigArgs) ToMonitoringComponentConfigPtrOutputWithContext(ctx context.Context) MonitoringComponentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringComponentConfigOutput).ToMonitoringComponentConfigPtrOutputWithContext(ctx)
}

// MonitoringComponentConfigPtrInput is an input type that accepts MonitoringComponentConfigArgs, MonitoringComponentConfigPtr and MonitoringComponentConfigPtrOutput values.
// You can construct a concrete instance of `MonitoringComponentConfigPtrInput` via:
//
//	        MonitoringComponentConfigArgs{...}
//
//	or:
//
//	        nil
type MonitoringComponentConfigPtrInput interface {
	pulumi.Input

	ToMonitoringComponentConfigPtrOutput() MonitoringComponentConfigPtrOutput
	ToMonitoringComponentConfigPtrOutputWithContext(context.Context) MonitoringComponentConfigPtrOutput
}

type monitoringComponentConfigPtrType MonitoringComponentConfigArgs

func MonitoringComponentConfigPtr(v *MonitoringComponentConfigArgs) MonitoringComponentConfigPtrInput {
	return (*monitoringComponentConfigPtrType)(v)
}

func (*monitoringComponentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringComponentConfig)(nil)).Elem()
}

func (i *monitoringComponentConfigPtrType) ToMonitoringComponentConfigPtrOutput() MonitoringComponentConfigPtrOutput {
	return i.ToMonitoringComponentConfigPtrOutputWithContext(context.Background())
}

func (i *monitoringComponentConfigPtrType) ToMonitoringComponentConfigPtrOutputWithContext(ctx context.Context) MonitoringComponentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringComponentConfigPtrOutput)
}

// MonitoringComponentConfig is cluster monitoring component configuration.
type MonitoringComponentConfigOutput struct{ *pulumi.OutputState }

func (MonitoringComponentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringComponentConfig)(nil)).Elem()
}

func (o MonitoringComponentConfigOutput) ToMonitoringComponentConfigOutput() MonitoringComponentConfigOutput {
	return o
}

func (o MonitoringComponentConfigOutput) ToMonitoringComponentConfigOutputWithContext(ctx context.Context) MonitoringComponentConfigOutput {
	return o
}

func (o MonitoringComponentConfigOutput) ToMonitoringComponentConfigPtrOutput() MonitoringComponentConfigPtrOutput {
	return o.ToMonitoringComponentConfigPtrOutputWithContext(context.Background())
}

func (o MonitoringComponentConfigOutput) ToMonitoringComponentConfigPtrOutputWithContext(ctx context.Context) MonitoringComponentConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringComponentConfig) *MonitoringComponentConfig {
		return &v
	}).(MonitoringComponentConfigPtrOutput)
}

// Select components to collect metrics. An empty set would disable all monitoring.
func (o MonitoringComponentConfigOutput) EnableComponents() MonitoringComponentConfigEnableComponentsItemArrayOutput {
	return o.ApplyT(func(v MonitoringComponentConfig) []MonitoringComponentConfigEnableComponentsItem {
		return v.EnableComponents
	}).(MonitoringComponentConfigEnableComponentsItemArrayOutput)
}

type MonitoringComponentConfigPtrOutput struct{ *pulumi.OutputState }

func (MonitoringComponentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringComponentConfig)(nil)).Elem()
}

func (o MonitoringComponentConfigPtrOutput) ToMonitoringComponentConfigPtrOutput() MonitoringComponentConfigPtrOutput {
	return o
}

func (o MonitoringComponentConfigPtrOutput) ToMonitoringComponentConfigPtrOutputWithContext(ctx context.Context) MonitoringComponentConfigPtrOutput {
	return o
}

func (o MonitoringComponentConfigPtrOutput) Elem() MonitoringComponentConfigOutput {
	return o.ApplyT(func(v *MonitoringComponentConfig) MonitoringComponentConfig {
		if v != nil {
			return *v
		}
		var ret MonitoringComponentConfig
		return ret
	}).(MonitoringComponentConfigOutput)
}

// Select components to collect metrics. An empty set would disable all monitoring.
func (o MonitoringComponentConfigPtrOutput) EnableComponents() MonitoringComponentConfigEnableComponentsItemArrayOutput {
	return o.ApplyT(func(v *MonitoringComponentConfig) []MonitoringComponentConfigEnableComponentsItem {
		if v == nil {
			return nil
		}
		return v.EnableComponents
	}).(MonitoringComponentConfigEnableComponentsItemArrayOutput)
}

// MonitoringComponentConfig is cluster monitoring component configuration.
type MonitoringComponentConfigResponse struct {
	// Select components to collect metrics. An empty set would disable all monitoring.
	EnableComponents []string `pulumi:"enableComponents"`
}

// MonitoringComponentConfig is cluster monitoring component configuration.
type MonitoringComponentConfigResponseOutput struct{ *pulumi.OutputState }

func (MonitoringComponentConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringComponentConfigResponse)(nil)).Elem()
}

func (o MonitoringComponentConfigResponseOutput) ToMonitoringComponentConfigResponseOutput() MonitoringComponentConfigResponseOutput {
	return o
}

func (o MonitoringComponentConfigResponseOutput) ToMonitoringComponentConfigResponseOutputWithContext(ctx context.Context) MonitoringComponentConfigResponseOutput {
	return o
}

// Select components to collect metrics. An empty set would disable all monitoring.
func (o MonitoringComponentConfigResponseOutput) EnableComponents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitoringComponentConfigResponse) []string { return v.EnableComponents }).(pulumi.StringArrayOutput)
}

// MonitoringConfig is cluster monitoring configuration.
type MonitoringConfig struct {
	// Configuration of Advanced Datapath Observability features.
	AdvancedDatapathObservabilityConfig *AdvancedDatapathObservabilityConfig `pulumi:"advancedDatapathObservabilityConfig"`
	// Monitoring components configuration
	ComponentConfig *MonitoringComponentConfig `pulumi:"componentConfig"`
	// Enable Google Cloud Managed Service for Prometheus in the cluster.
	ManagedPrometheusConfig *ManagedPrometheusConfig `pulumi:"managedPrometheusConfig"`
}

// MonitoringConfigInput is an input type that accepts MonitoringConfigArgs and MonitoringConfigOutput values.
// You can construct a concrete instance of `MonitoringConfigInput` via:
//
//	MonitoringConfigArgs{...}
type MonitoringConfigInput interface {
	pulumi.Input

	ToMonitoringConfigOutput() MonitoringConfigOutput
	ToMonitoringConfigOutputWithContext(context.Context) MonitoringConfigOutput
}

// MonitoringConfig is cluster monitoring configuration.
type MonitoringConfigArgs struct {
	// Configuration of Advanced Datapath Observability features.
	AdvancedDatapathObservabilityConfig AdvancedDatapathObservabilityConfigPtrInput `pulumi:"advancedDatapathObservabilityConfig"`
	// Monitoring components configuration
	ComponentConfig MonitoringComponentConfigPtrInput `pulumi:"componentConfig"`
	// Enable Google Cloud Managed Service for Prometheus in the cluster.
	ManagedPrometheusConfig ManagedPrometheusConfigPtrInput `pulumi:"managedPrometheusConfig"`
}

func (MonitoringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringConfig)(nil)).Elem()
}

func (i MonitoringConfigArgs) ToMonitoringConfigOutput() MonitoringConfigOutput {
	return i.ToMonitoringConfigOutputWithContext(context.Background())
}

func (i MonitoringConfigArgs) ToMonitoringConfigOutputWithContext(ctx context.Context) MonitoringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringConfigOutput)
}

func (i MonitoringConfigArgs) ToMonitoringConfigPtrOutput() MonitoringConfigPtrOutput {
	return i.ToMonitoringConfigPtrOutputWithContext(context.Background())
}

func (i MonitoringConfigArgs) ToMonitoringConfigPtrOutputWithContext(ctx context.Context) MonitoringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringConfigOutput).ToMonitoringConfigPtrOutputWithContext(ctx)
}

// MonitoringConfigPtrInput is an input type that accepts MonitoringConfigArgs, MonitoringConfigPtr and MonitoringConfigPtrOutput values.
// You can construct a concrete instance of `MonitoringConfigPtrInput` via:
//
//	        MonitoringConfigArgs{...}
//
//	or:
//
//	        nil
type MonitoringConfigPtrInput interface {
	pulumi.Input

	ToMonitoringConfigPtrOutput() MonitoringConfigPtrOutput
	ToMonitoringConfigPtrOutputWithContext(context.Context) MonitoringConfigPtrOutput
}

type monitoringConfigPtrType MonitoringConfigArgs

func MonitoringConfigPtr(v *MonitoringConfigArgs) MonitoringConfigPtrInput {
	return (*monitoringConfigPtrType)(v)
}

func (*monitoringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringConfig)(nil)).Elem()
}

func (i *monitoringConfigPtrType) ToMonitoringConfigPtrOutput() MonitoringConfigPtrOutput {
	return i.ToMonitoringConfigPtrOutputWithContext(context.Background())
}

func (i *monitoringConfigPtrType) ToMonitoringConfigPtrOutputWithContext(ctx context.Context) MonitoringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringConfigPtrOutput)
}

// MonitoringConfig is cluster monitoring configuration.
type MonitoringConfigOutput struct{ *pulumi.OutputState }

func (MonitoringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringConfig)(nil)).Elem()
}

func (o MonitoringConfigOutput) ToMonitoringConfigOutput() MonitoringConfigOutput {
	return o
}

func (o MonitoringConfigOutput) ToMonitoringConfigOutputWithContext(ctx context.Context) MonitoringConfigOutput {
	return o
}

func (o MonitoringConfigOutput) ToMonitoringConfigPtrOutput() MonitoringConfigPtrOutput {
	return o.ToMonitoringConfigPtrOutputWithContext(context.Background())
}

func (o MonitoringConfigOutput) ToMonitoringConfigPtrOutputWithContext(ctx context.Context) MonitoringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringConfig) *MonitoringConfig {
		return &v
	}).(MonitoringConfigPtrOutput)
}

// Configuration of Advanced Datapath Observability features.
func (o MonitoringConfigOutput) AdvancedDatapathObservabilityConfig() AdvancedDatapathObservabilityConfigPtrOutput {
	return o.ApplyT(func(v MonitoringConfig) *AdvancedDatapathObservabilityConfig {
		return v.AdvancedDatapathObservabilityConfig
	}).(AdvancedDatapathObservabilityConfigPtrOutput)
}

// Monitoring components configuration
func (o MonitoringConfigOutput) ComponentConfig() MonitoringComponentConfigPtrOutput {
	return o.ApplyT(func(v MonitoringConfig) *MonitoringComponentConfig { return v.ComponentConfig }).(MonitoringComponentConfigPtrOutput)
}

// Enable Google Cloud Managed Service for Prometheus in the cluster.
func (o MonitoringConfigOutput) ManagedPrometheusConfig() ManagedPrometheusConfigPtrOutput {
	return o.ApplyT(func(v MonitoringConfig) *ManagedPrometheusConfig { return v.ManagedPrometheusConfig }).(ManagedPrometheusConfigPtrOutput)
}

type MonitoringConfigPtrOutput struct{ *pulumi.OutputState }

func (MonitoringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringConfig)(nil)).Elem()
}

func (o MonitoringConfigPtrOutput) ToMonitoringConfigPtrOutput() MonitoringConfigPtrOutput {
	return o
}

func (o MonitoringConfigPtrOutput) ToMonitoringConfigPtrOutputWithContext(ctx context.Context) MonitoringConfigPtrOutput {
	return o
}

func (o MonitoringConfigPtrOutput) Elem() MonitoringConfigOutput {
	return o.ApplyT(func(v *MonitoringConfig) MonitoringConfig {
		if v != nil {
			return *v
		}
		var ret MonitoringConfig
		return ret
	}).(MonitoringConfigOutput)
}

// Configuration of Advanced Datapath Observability features.
func (o MonitoringConfigPtrOutput) AdvancedDatapathObservabilityConfig() AdvancedDatapathObservabilityConfigPtrOutput {
	return o.ApplyT(func(v *MonitoringConfig) *AdvancedDatapathObservabilityConfig {
		if v == nil {
			return nil
		}
		return v.AdvancedDatapathObservabilityConfig
	}).(AdvancedDatapathObservabilityConfigPtrOutput)
}

// Monitoring components configuration
func (o MonitoringConfigPtrOutput) ComponentConfig() MonitoringComponentConfigPtrOutput {
	return o.ApplyT(func(v *MonitoringConfig) *MonitoringComponentConfig {
		if v == nil {
			return nil
		}
		return v.ComponentConfig
	}).(MonitoringComponentConfigPtrOutput)
}

// Enable Google Cloud Managed Service for Prometheus in the cluster.
func (o MonitoringConfigPtrOutput) ManagedPrometheusConfig() ManagedPrometheusConfigPtrOutput {
	return o.ApplyT(func(v *MonitoringConfig) *ManagedPrometheusConfig {
		if v == nil {
			return nil
		}
		return v.ManagedPrometheusConfig
	}).(ManagedPrometheusConfigPtrOutput)
}

// MonitoringConfig is cluster monitoring configuration.
type MonitoringConfigResponse struct {
	// Configuration of Advanced Datapath Observability features.
	AdvancedDatapathObservabilityConfig AdvancedDatapathObservabilityConfigResponse `pulumi:"advancedDatapathObservabilityConfig"`
	// Monitoring components configuration
	ComponentConfig MonitoringComponentConfigResponse `pulumi:"componentConfig"`
	// Enable Google Cloud Managed Service for Prometheus in the cluster.
	ManagedPrometheusConfig ManagedPrometheusConfigResponse `pulumi:"managedPrometheusConfig"`
}

// MonitoringConfig is cluster monitoring configuration.
type MonitoringConfigResponseOutput struct{ *pulumi.OutputState }

func (MonitoringConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringConfigResponse)(nil)).Elem()
}

func (o MonitoringConfigResponseOutput) ToMonitoringConfigResponseOutput() MonitoringConfigResponseOutput {
	return o
}

func (o MonitoringConfigResponseOutput) ToMonitoringConfigResponseOutputWithContext(ctx context.Context) MonitoringConfigResponseOutput {
	return o
}

// Configuration of Advanced Datapath Observability features.
func (o MonitoringConfigResponseOutput) AdvancedDatapathObservabilityConfig() AdvancedDatapathObservabilityConfigResponseOutput {
	return o.ApplyT(func(v MonitoringConfigResponse) AdvancedDatapathObservabilityConfigResponse {
		return v.AdvancedDatapathObservabilityConfig
	}).(AdvancedDatapathObservabilityConfigResponseOutput)
}

// Monitoring components configuration
func (o MonitoringConfigResponseOutput) ComponentConfig() MonitoringComponentConfigResponseOutput {
	return o.ApplyT(func(v MonitoringConfigResponse) MonitoringComponentConfigResponse { return v.ComponentConfig }).(MonitoringComponentConfigResponseOutput)
}

// Enable Google Cloud Managed Service for Prometheus in the cluster.
func (o MonitoringConfigResponseOutput) ManagedPrometheusConfig() ManagedPrometheusConfigResponseOutput {
	return o.ApplyT(func(v MonitoringConfigResponse) ManagedPrometheusConfigResponse { return v.ManagedPrometheusConfig }).(ManagedPrometheusConfigResponseOutput)
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfig struct {
	// The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
	DatapathProvider *NetworkConfigDatapathProvider `pulumi:"datapathProvider"`
	// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
	DefaultSnatStatus *DefaultSnatStatus `pulumi:"defaultSnatStatus"`
	// DNSConfig contains clusterDNS config for this cluster.
	DnsConfig *DNSConfig `pulumi:"dnsConfig"`
	// Whether FQDN Network Policy is enabled on this cluster.
	EnableFqdnNetworkPolicy *bool `pulumi:"enableFqdnNetworkPolicy"`
	// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
	EnableIntraNodeVisibility *bool `pulumi:"enableIntraNodeVisibility"`
	// Whether L4ILB Subsetting is enabled for this cluster.
	EnableL4ilbSubsetting *bool `pulumi:"enableL4ilbSubsetting"`
	// Whether multi-networking is enabled for this cluster.
	EnableMultiNetworking *bool `pulumi:"enableMultiNetworking"`
	// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
	GatewayApiConfig *GatewayAPIConfig `pulumi:"gatewayApiConfig"`
	// Network bandwidth tier configuration.
	NetworkPerformanceConfig *ClusterNetworkPerformanceConfig `pulumi:"networkPerformanceConfig"`
	// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
	PrivateIpv6GoogleAccess *NetworkConfigPrivateIpv6GoogleAccess `pulumi:"privateIpv6GoogleAccess"`
	// ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
	ServiceExternalIpsConfig *ServiceExternalIPsConfig `pulumi:"serviceExternalIpsConfig"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//	NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigArgs struct {
	// The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
	DatapathProvider NetworkConfigDatapathProviderPtrInput `pulumi:"datapathProvider"`
	// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
	DefaultSnatStatus DefaultSnatStatusPtrInput `pulumi:"defaultSnatStatus"`
	// DNSConfig contains clusterDNS config for this cluster.
	DnsConfig DNSConfigPtrInput `pulumi:"dnsConfig"`
	// Whether FQDN Network Policy is enabled on this cluster.
	EnableFqdnNetworkPolicy pulumi.BoolPtrInput `pulumi:"enableFqdnNetworkPolicy"`
	// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
	EnableIntraNodeVisibility pulumi.BoolPtrInput `pulumi:"enableIntraNodeVisibility"`
	// Whether L4ILB Subsetting is enabled for this cluster.
	EnableL4ilbSubsetting pulumi.BoolPtrInput `pulumi:"enableL4ilbSubsetting"`
	// Whether multi-networking is enabled for this cluster.
	EnableMultiNetworking pulumi.BoolPtrInput `pulumi:"enableMultiNetworking"`
	// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
	GatewayApiConfig GatewayAPIConfigPtrInput `pulumi:"gatewayApiConfig"`
	// Network bandwidth tier configuration.
	NetworkPerformanceConfig ClusterNetworkPerformanceConfigPtrInput `pulumi:"networkPerformanceConfig"`
	// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
	PrivateIpv6GoogleAccess NetworkConfigPrivateIpv6GoogleAccessPtrInput `pulumi:"privateIpv6GoogleAccess"`
	// ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
	ServiceExternalIpsConfig ServiceExternalIPsConfigPtrInput `pulumi:"serviceExternalIpsConfig"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput).ToNetworkConfigPtrOutputWithContext(ctx)
}

// NetworkConfigPtrInput is an input type that accepts NetworkConfigArgs, NetworkConfigPtr and NetworkConfigPtrOutput values.
// You can construct a concrete instance of `NetworkConfigPtrInput` via:
//
//	        NetworkConfigArgs{...}
//
//	or:
//
//	        nil
type NetworkConfigPtrInput interface {
	pulumi.Input

	ToNetworkConfigPtrOutput() NetworkConfigPtrOutput
	ToNetworkConfigPtrOutputWithContext(context.Context) NetworkConfigPtrOutput
}

type networkConfigPtrType NetworkConfigArgs

func NetworkConfigPtr(v *NetworkConfigArgs) NetworkConfigPtrInput {
	return (*networkConfigPtrType)(v)
}

func (*networkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigPtrOutput)
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkConfig) *NetworkConfig {
		return &v
	}).(NetworkConfigPtrOutput)
}

// The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
func (o NetworkConfigOutput) DatapathProvider() NetworkConfigDatapathProviderPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfigDatapathProvider { return v.DatapathProvider }).(NetworkConfigDatapathProviderPtrOutput)
}

// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
func (o NetworkConfigOutput) DefaultSnatStatus() DefaultSnatStatusPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *DefaultSnatStatus { return v.DefaultSnatStatus }).(DefaultSnatStatusPtrOutput)
}

// DNSConfig contains clusterDNS config for this cluster.
func (o NetworkConfigOutput) DnsConfig() DNSConfigPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *DNSConfig { return v.DnsConfig }).(DNSConfigPtrOutput)
}

// Whether FQDN Network Policy is enabled on this cluster.
func (o NetworkConfigOutput) EnableFqdnNetworkPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.EnableFqdnNetworkPolicy }).(pulumi.BoolPtrOutput)
}

// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
func (o NetworkConfigOutput) EnableIntraNodeVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.EnableIntraNodeVisibility }).(pulumi.BoolPtrOutput)
}

// Whether L4ILB Subsetting is enabled for this cluster.
func (o NetworkConfigOutput) EnableL4ilbSubsetting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.EnableL4ilbSubsetting }).(pulumi.BoolPtrOutput)
}

// Whether multi-networking is enabled for this cluster.
func (o NetworkConfigOutput) EnableMultiNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.EnableMultiNetworking }).(pulumi.BoolPtrOutput)
}

// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
func (o NetworkConfigOutput) GatewayApiConfig() GatewayAPIConfigPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *GatewayAPIConfig { return v.GatewayApiConfig }).(GatewayAPIConfigPtrOutput)
}

// Network bandwidth tier configuration.
func (o NetworkConfigOutput) NetworkPerformanceConfig() ClusterNetworkPerformanceConfigPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *ClusterNetworkPerformanceConfig { return v.NetworkPerformanceConfig }).(ClusterNetworkPerformanceConfigPtrOutput)
}

// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
func (o NetworkConfigOutput) PrivateIpv6GoogleAccess() NetworkConfigPrivateIpv6GoogleAccessPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfigPrivateIpv6GoogleAccess { return v.PrivateIpv6GoogleAccess }).(NetworkConfigPrivateIpv6GoogleAccessPtrOutput)
}

// ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
func (o NetworkConfigOutput) ServiceExternalIpsConfig() ServiceExternalIPsConfigPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *ServiceExternalIPsConfig { return v.ServiceExternalIpsConfig }).(ServiceExternalIPsConfigPtrOutput)
}

type NetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) Elem() NetworkConfigOutput {
	return o.ApplyT(func(v *NetworkConfig) NetworkConfig {
		if v != nil {
			return *v
		}
		var ret NetworkConfig
		return ret
	}).(NetworkConfigOutput)
}

// The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
func (o NetworkConfigPtrOutput) DatapathProvider() NetworkConfigDatapathProviderPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *NetworkConfigDatapathProvider {
		if v == nil {
			return nil
		}
		return v.DatapathProvider
	}).(NetworkConfigDatapathProviderPtrOutput)
}

// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
func (o NetworkConfigPtrOutput) DefaultSnatStatus() DefaultSnatStatusPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *DefaultSnatStatus {
		if v == nil {
			return nil
		}
		return v.DefaultSnatStatus
	}).(DefaultSnatStatusPtrOutput)
}

// DNSConfig contains clusterDNS config for this cluster.
func (o NetworkConfigPtrOutput) DnsConfig() DNSConfigPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *DNSConfig {
		if v == nil {
			return nil
		}
		return v.DnsConfig
	}).(DNSConfigPtrOutput)
}

// Whether FQDN Network Policy is enabled on this cluster.
func (o NetworkConfigPtrOutput) EnableFqdnNetworkPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableFqdnNetworkPolicy
	}).(pulumi.BoolPtrOutput)
}

// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
func (o NetworkConfigPtrOutput) EnableIntraNodeVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntraNodeVisibility
	}).(pulumi.BoolPtrOutput)
}

// Whether L4ILB Subsetting is enabled for this cluster.
func (o NetworkConfigPtrOutput) EnableL4ilbSubsetting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableL4ilbSubsetting
	}).(pulumi.BoolPtrOutput)
}

// Whether multi-networking is enabled for this cluster.
func (o NetworkConfigPtrOutput) EnableMultiNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMultiNetworking
	}).(pulumi.BoolPtrOutput)
}

// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
func (o NetworkConfigPtrOutput) GatewayApiConfig() GatewayAPIConfigPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *GatewayAPIConfig {
		if v == nil {
			return nil
		}
		return v.GatewayApiConfig
	}).(GatewayAPIConfigPtrOutput)
}

// Network bandwidth tier configuration.
func (o NetworkConfigPtrOutput) NetworkPerformanceConfig() ClusterNetworkPerformanceConfigPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *ClusterNetworkPerformanceConfig {
		if v == nil {
			return nil
		}
		return v.NetworkPerformanceConfig
	}).(ClusterNetworkPerformanceConfigPtrOutput)
}

// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
func (o NetworkConfigPtrOutput) PrivateIpv6GoogleAccess() NetworkConfigPrivateIpv6GoogleAccessPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *NetworkConfigPrivateIpv6GoogleAccess {
		if v == nil {
			return nil
		}
		return v.PrivateIpv6GoogleAccess
	}).(NetworkConfigPrivateIpv6GoogleAccessPtrOutput)
}

// ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
func (o NetworkConfigPtrOutput) ServiceExternalIpsConfig() ServiceExternalIPsConfigPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *ServiceExternalIPsConfig {
		if v == nil {
			return nil
		}
		return v.ServiceExternalIpsConfig
	}).(ServiceExternalIPsConfigPtrOutput)
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigResponse struct {
	// The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
	DatapathProvider string `pulumi:"datapathProvider"`
	// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
	DefaultSnatStatus DefaultSnatStatusResponse `pulumi:"defaultSnatStatus"`
	// DNSConfig contains clusterDNS config for this cluster.
	DnsConfig DNSConfigResponse `pulumi:"dnsConfig"`
	// Whether FQDN Network Policy is enabled on this cluster.
	EnableFqdnNetworkPolicy bool `pulumi:"enableFqdnNetworkPolicy"`
	// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
	EnableIntraNodeVisibility bool `pulumi:"enableIntraNodeVisibility"`
	// Whether L4ILB Subsetting is enabled for this cluster.
	EnableL4ilbSubsetting bool `pulumi:"enableL4ilbSubsetting"`
	// Whether multi-networking is enabled for this cluster.
	EnableMultiNetworking bool `pulumi:"enableMultiNetworking"`
	// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
	GatewayApiConfig GatewayAPIConfigResponse `pulumi:"gatewayApiConfig"`
	// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
	Network string `pulumi:"network"`
	// Network bandwidth tier configuration.
	NetworkPerformanceConfig ClusterNetworkPerformanceConfigResponse `pulumi:"networkPerformanceConfig"`
	// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
	PrivateIpv6GoogleAccess string `pulumi:"privateIpv6GoogleAccess"`
	// ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
	ServiceExternalIpsConfig ServiceExternalIPsConfigResponse `pulumi:"serviceExternalIpsConfig"`
	// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
	Subnetwork string `pulumi:"subnetwork"`
}

// NetworkConfig reports the relative names of network & subnetwork.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

// The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
func (o NetworkConfigResponseOutput) DatapathProvider() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.DatapathProvider }).(pulumi.StringOutput)
}

// Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when default_snat_status is disabled. When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic.
func (o NetworkConfigResponseOutput) DefaultSnatStatus() DefaultSnatStatusResponseOutput {
	return o.ApplyT(func(v NetworkConfigResponse) DefaultSnatStatusResponse { return v.DefaultSnatStatus }).(DefaultSnatStatusResponseOutput)
}

// DNSConfig contains clusterDNS config for this cluster.
func (o NetworkConfigResponseOutput) DnsConfig() DNSConfigResponseOutput {
	return o.ApplyT(func(v NetworkConfigResponse) DNSConfigResponse { return v.DnsConfig }).(DNSConfigResponseOutput)
}

// Whether FQDN Network Policy is enabled on this cluster.
func (o NetworkConfigResponseOutput) EnableFqdnNetworkPolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.EnableFqdnNetworkPolicy }).(pulumi.BoolOutput)
}

// Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
func (o NetworkConfigResponseOutput) EnableIntraNodeVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.EnableIntraNodeVisibility }).(pulumi.BoolOutput)
}

// Whether L4ILB Subsetting is enabled for this cluster.
func (o NetworkConfigResponseOutput) EnableL4ilbSubsetting() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.EnableL4ilbSubsetting }).(pulumi.BoolOutput)
}

// Whether multi-networking is enabled for this cluster.
func (o NetworkConfigResponseOutput) EnableMultiNetworking() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.EnableMultiNetworking }).(pulumi.BoolOutput)
}

// GatewayAPIConfig contains the desired config of Gateway API on this cluster.
func (o NetworkConfigResponseOutput) GatewayApiConfig() GatewayAPIConfigResponseOutput {
	return o.ApplyT(func(v NetworkConfigResponse) GatewayAPIConfigResponse { return v.GatewayApiConfig }).(GatewayAPIConfigResponseOutput)
}

// The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network
func (o NetworkConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Network bandwidth tier configuration.
func (o NetworkConfigResponseOutput) NetworkPerformanceConfig() ClusterNetworkPerformanceConfigResponseOutput {
	return o.ApplyT(func(v NetworkConfigResponse) ClusterNetworkPerformanceConfigResponse {
		return v.NetworkPerformanceConfig
	}).(ClusterNetworkPerformanceConfigResponseOutput)
}

// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
func (o NetworkConfigResponseOutput) PrivateIpv6GoogleAccess() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.PrivateIpv6GoogleAccess }).(pulumi.StringOutput)
}

// ServiceExternalIPsConfig specifies if services with externalIPs field are blocked or not.
func (o NetworkConfigResponseOutput) ServiceExternalIpsConfig() ServiceExternalIPsConfigResponseOutput {
	return o.ApplyT(func(v NetworkConfigResponse) ServiceExternalIPsConfigResponse { return v.ServiceExternalIpsConfig }).(ServiceExternalIPsConfigResponseOutput)
}

// The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet
func (o NetworkConfigResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

// Configuration of all network bandwidth tiers
type NetworkPerformanceConfig struct {
	// Specifies the total network bandwidth tier for the NodePool.
	TotalEgressBandwidthTier *NetworkPerformanceConfigTotalEgressBandwidthTier `pulumi:"totalEgressBandwidthTier"`
}

// NetworkPerformanceConfigInput is an input type that accepts NetworkPerformanceConfigArgs and NetworkPerformanceConfigOutput values.
// You can construct a concrete instance of `NetworkPerformanceConfigInput` via:
//
//	NetworkPerformanceConfigArgs{...}
type NetworkPerformanceConfigInput interface {
	pulumi.Input

	ToNetworkPerformanceConfigOutput() NetworkPerformanceConfigOutput
	ToNetworkPerformanceConfigOutputWithContext(context.Context) NetworkPerformanceConfigOutput
}

// Configuration of all network bandwidth tiers
type NetworkPerformanceConfigArgs struct {
	// Specifies the total network bandwidth tier for the NodePool.
	TotalEgressBandwidthTier NetworkPerformanceConfigTotalEgressBandwidthTierPtrInput `pulumi:"totalEgressBandwidthTier"`
}

func (NetworkPerformanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPerformanceConfig)(nil)).Elem()
}

func (i NetworkPerformanceConfigArgs) ToNetworkPerformanceConfigOutput() NetworkPerformanceConfigOutput {
	return i.ToNetworkPerformanceConfigOutputWithContext(context.Background())
}

func (i NetworkPerformanceConfigArgs) ToNetworkPerformanceConfigOutputWithContext(ctx context.Context) NetworkPerformanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPerformanceConfigOutput)
}

func (i NetworkPerformanceConfigArgs) ToNetworkPerformanceConfigPtrOutput() NetworkPerformanceConfigPtrOutput {
	return i.ToNetworkPerformanceConfigPtrOutputWithContext(context.Background())
}

func (i NetworkPerformanceConfigArgs) ToNetworkPerformanceConfigPtrOutputWithContext(ctx context.Context) NetworkPerformanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPerformanceConfigOutput).ToNetworkPerformanceConfigPtrOutputWithContext(ctx)
}

// NetworkPerformanceConfigPtrInput is an input type that accepts NetworkPerformanceConfigArgs, NetworkPerformanceConfigPtr and NetworkPerformanceConfigPtrOutput values.
// You can construct a concrete instance of `NetworkPerformanceConfigPtrInput` via:
//
//	        NetworkPerformanceConfigArgs{...}
//
//	or:
//
//	        nil
type NetworkPerformanceConfigPtrInput interface {
	pulumi.Input

	ToNetworkPerformanceConfigPtrOutput() NetworkPerformanceConfigPtrOutput
	ToNetworkPerformanceConfigPtrOutputWithContext(context.Context) NetworkPerformanceConfigPtrOutput
}

type networkPerformanceConfigPtrType NetworkPerformanceConfigArgs

func NetworkPerformanceConfigPtr(v *NetworkPerformanceConfigArgs) NetworkPerformanceConfigPtrInput {
	return (*networkPerformanceConfigPtrType)(v)
}

func (*networkPerformanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPerformanceConfig)(nil)).Elem()
}

func (i *networkPerformanceConfigPtrType) ToNetworkPerformanceConfigPtrOutput() NetworkPerformanceConfigPtrOutput {
	return i.ToNetworkPerformanceConfigPtrOutputWithContext(context.Background())
}

func (i *networkPerformanceConfigPtrType) ToNetworkPerformanceConfigPtrOutputWithContext(ctx context.Context) NetworkPerformanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPerformanceConfigPtrOutput)
}

// Configuration of all network bandwidth tiers
type NetworkPerformanceConfigOutput struct{ *pulumi.OutputState }

func (NetworkPerformanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPerformanceConfig)(nil)).Elem()
}

func (o NetworkPerformanceConfigOutput) ToNetworkPerformanceConfigOutput() NetworkPerformanceConfigOutput {
	return o
}

func (o NetworkPerformanceConfigOutput) ToNetworkPerformanceConfigOutputWithContext(ctx context.Context) NetworkPerformanceConfigOutput {
	return o
}

func (o NetworkPerformanceConfigOutput) ToNetworkPerformanceConfigPtrOutput() NetworkPerformanceConfigPtrOutput {
	return o.ToNetworkPerformanceConfigPtrOutputWithContext(context.Background())
}

func (o NetworkPerformanceConfigOutput) ToNetworkPerformanceConfigPtrOutputWithContext(ctx context.Context) NetworkPerformanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkPerformanceConfig) *NetworkPerformanceConfig {
		return &v
	}).(NetworkPerformanceConfigPtrOutput)
}

// Specifies the total network bandwidth tier for the NodePool.
func (o NetworkPerformanceConfigOutput) TotalEgressBandwidthTier() NetworkPerformanceConfigTotalEgressBandwidthTierPtrOutput {
	return o.ApplyT(func(v NetworkPerformanceConfig) *NetworkPerformanceConfigTotalEgressBandwidthTier {
		return v.TotalEgressBandwidthTier
	}).(NetworkPerformanceConfigTotalEgressBandwidthTierPtrOutput)
}

type NetworkPerformanceConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkPerformanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPerformanceConfig)(nil)).Elem()
}

func (o NetworkPerformanceConfigPtrOutput) ToNetworkPerformanceConfigPtrOutput() NetworkPerformanceConfigPtrOutput {
	return o
}

func (o NetworkPerformanceConfigPtrOutput) ToNetworkPerformanceConfigPtrOutputWithContext(ctx context.Context) NetworkPerformanceConfigPtrOutput {
	return o
}

func (o NetworkPerformanceConfigPtrOutput) Elem() NetworkPerformanceConfigOutput {
	return o.ApplyT(func(v *NetworkPerformanceConfig) NetworkPerformanceConfig {
		if v != nil {
			return *v
		}
		var ret NetworkPerformanceConfig
		return ret
	}).(NetworkPerformanceConfigOutput)
}

// Specifies the total network bandwidth tier for the NodePool.
func (o NetworkPerformanceConfigPtrOutput) TotalEgressBandwidthTier() NetworkPerformanceConfigTotalEgressBandwidthTierPtrOutput {
	return o.ApplyT(func(v *NetworkPerformanceConfig) *NetworkPerformanceConfigTotalEgressBandwidthTier {
		if v == nil {
			return nil
		}
		return v.TotalEgressBandwidthTier
	}).(NetworkPerformanceConfigTotalEgressBandwidthTierPtrOutput)
}

// Configuration of all network bandwidth tiers
type NetworkPerformanceConfigResponse struct {
	// Specifies the total network bandwidth tier for the NodePool.
	TotalEgressBandwidthTier string `pulumi:"totalEgressBandwidthTier"`
}

// Configuration of all network bandwidth tiers
type NetworkPerformanceConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkPerformanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPerformanceConfigResponse)(nil)).Elem()
}

func (o NetworkPerformanceConfigResponseOutput) ToNetworkPerformanceConfigResponseOutput() NetworkPerformanceConfigResponseOutput {
	return o
}

func (o NetworkPerformanceConfigResponseOutput) ToNetworkPerformanceConfigResponseOutputWithContext(ctx context.Context) NetworkPerformanceConfigResponseOutput {
	return o
}

// Specifies the total network bandwidth tier for the NodePool.
func (o NetworkPerformanceConfigResponseOutput) TotalEgressBandwidthTier() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkPerformanceConfigResponse) string { return v.TotalEgressBandwidthTier }).(pulumi.StringOutput)
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicy struct {
	// Whether network policy is enabled on the cluster.
	Enabled *bool `pulumi:"enabled"`
	// The selected network policy provider.
	Provider *NetworkPolicyProvider `pulumi:"provider"`
}

// NetworkPolicyInput is an input type that accepts NetworkPolicyArgs and NetworkPolicyOutput values.
// You can construct a concrete instance of `NetworkPolicyInput` via:
//
//	NetworkPolicyArgs{...}
type NetworkPolicyInput interface {
	pulumi.Input

	ToNetworkPolicyOutput() NetworkPolicyOutput
	ToNetworkPolicyOutputWithContext(context.Context) NetworkPolicyOutput
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyArgs struct {
	// Whether network policy is enabled on the cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The selected network policy provider.
	Provider NetworkPolicyProviderPtrInput `pulumi:"provider"`
}

func (NetworkPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicy)(nil)).Elem()
}

func (i NetworkPolicyArgs) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return i.ToNetworkPolicyOutputWithContext(context.Background())
}

func (i NetworkPolicyArgs) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyOutput)
}

func (i NetworkPolicyArgs) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return i.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (i NetworkPolicyArgs) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyOutput).ToNetworkPolicyPtrOutputWithContext(ctx)
}

// NetworkPolicyPtrInput is an input type that accepts NetworkPolicyArgs, NetworkPolicyPtr and NetworkPolicyPtrOutput values.
// You can construct a concrete instance of `NetworkPolicyPtrInput` via:
//
//	        NetworkPolicyArgs{...}
//
//	or:
//
//	        nil
type NetworkPolicyPtrInput interface {
	pulumi.Input

	ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput
	ToNetworkPolicyPtrOutputWithContext(context.Context) NetworkPolicyPtrOutput
}

type networkPolicyPtrType NetworkPolicyArgs

func NetworkPolicyPtr(v *NetworkPolicyArgs) NetworkPolicyPtrInput {
	return (*networkPolicyPtrType)(v)
}

func (*networkPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (i *networkPolicyPtrType) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return i.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (i *networkPolicyPtrType) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyPtrOutput)
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyOutput struct{ *pulumi.OutputState }

func (NetworkPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return o.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyOutput) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkPolicy) *NetworkPolicy {
		return &v
	}).(NetworkPolicyPtrOutput)
}

// Whether network policy is enabled on the cluster.
func (o NetworkPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The selected network policy provider.
func (o NetworkPolicyOutput) Provider() NetworkPolicyProviderPtrOutput {
	return o.ApplyT(func(v NetworkPolicy) *NetworkPolicyProvider { return v.Provider }).(NetworkPolicyProviderPtrOutput)
}

type NetworkPolicyPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyPtrOutput) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return o
}

func (o NetworkPolicyPtrOutput) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return o
}

func (o NetworkPolicyPtrOutput) Elem() NetworkPolicyOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkPolicy {
		if v != nil {
			return *v
		}
		var ret NetworkPolicy
		return ret
	}).(NetworkPolicyOutput)
}

// Whether network policy is enabled on the cluster.
func (o NetworkPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The selected network policy provider.
func (o NetworkPolicyPtrOutput) Provider() NetworkPolicyProviderPtrOutput {
	return o.ApplyT(func(v *NetworkPolicy) *NetworkPolicyProvider {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(NetworkPolicyProviderPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfig struct {
	// Whether NetworkPolicy is enabled for this cluster.
	Disabled *bool `pulumi:"disabled"`
}

// NetworkPolicyConfigInput is an input type that accepts NetworkPolicyConfigArgs and NetworkPolicyConfigOutput values.
// You can construct a concrete instance of `NetworkPolicyConfigInput` via:
//
//	NetworkPolicyConfigArgs{...}
type NetworkPolicyConfigInput interface {
	pulumi.Input

	ToNetworkPolicyConfigOutput() NetworkPolicyConfigOutput
	ToNetworkPolicyConfigOutputWithContext(context.Context) NetworkPolicyConfigOutput
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigArgs struct {
	// Whether NetworkPolicy is enabled for this cluster.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (NetworkPolicyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyConfig)(nil)).Elem()
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigOutput() NetworkPolicyConfigOutput {
	return i.ToNetworkPolicyConfigOutputWithContext(context.Background())
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigOutputWithContext(ctx context.Context) NetworkPolicyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigOutput)
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return i.ToNetworkPolicyConfigPtrOutputWithContext(context.Background())
}

func (i NetworkPolicyConfigArgs) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigOutput).ToNetworkPolicyConfigPtrOutputWithContext(ctx)
}

// NetworkPolicyConfigPtrInput is an input type that accepts NetworkPolicyConfigArgs, NetworkPolicyConfigPtr and NetworkPolicyConfigPtrOutput values.
// You can construct a concrete instance of `NetworkPolicyConfigPtrInput` via:
//
//	        NetworkPolicyConfigArgs{...}
//
//	or:
//
//	        nil
type NetworkPolicyConfigPtrInput interface {
	pulumi.Input

	ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput
	ToNetworkPolicyConfigPtrOutputWithContext(context.Context) NetworkPolicyConfigPtrOutput
}

type networkPolicyConfigPtrType NetworkPolicyConfigArgs

func NetworkPolicyConfigPtr(v *NetworkPolicyConfigArgs) NetworkPolicyConfigPtrInput {
	return (*networkPolicyConfigPtrType)(v)
}

func (*networkPolicyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicyConfig)(nil)).Elem()
}

func (i *networkPolicyConfigPtrType) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return i.ToNetworkPolicyConfigPtrOutputWithContext(context.Background())
}

func (i *networkPolicyConfigPtrType) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyConfigPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigOutput struct{ *pulumi.OutputState }

func (NetworkPolicyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyConfig)(nil)).Elem()
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigOutput() NetworkPolicyConfigOutput {
	return o
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigOutputWithContext(ctx context.Context) NetworkPolicyConfigOutput {
	return o
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return o.ToNetworkPolicyConfigPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyConfigOutput) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkPolicyConfig) *NetworkPolicyConfig {
		return &v
	}).(NetworkPolicyConfigPtrOutput)
}

// Whether NetworkPolicy is enabled for this cluster.
func (o NetworkPolicyConfigOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkPolicyConfig) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type NetworkPolicyConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicyConfig)(nil)).Elem()
}

func (o NetworkPolicyConfigPtrOutput) ToNetworkPolicyConfigPtrOutput() NetworkPolicyConfigPtrOutput {
	return o
}

func (o NetworkPolicyConfigPtrOutput) ToNetworkPolicyConfigPtrOutputWithContext(ctx context.Context) NetworkPolicyConfigPtrOutput {
	return o
}

func (o NetworkPolicyConfigPtrOutput) Elem() NetworkPolicyConfigOutput {
	return o.ApplyT(func(v *NetworkPolicyConfig) NetworkPolicyConfig {
		if v != nil {
			return *v
		}
		var ret NetworkPolicyConfig
		return ret
	}).(NetworkPolicyConfigOutput)
}

// Whether NetworkPolicy is enabled for this cluster.
func (o NetworkPolicyConfigPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPolicyConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigResponse struct {
	// Whether NetworkPolicy is enabled for this cluster.
	Disabled bool `pulumi:"disabled"`
}

// Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
type NetworkPolicyConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkPolicyConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyConfigResponse)(nil)).Elem()
}

func (o NetworkPolicyConfigResponseOutput) ToNetworkPolicyConfigResponseOutput() NetworkPolicyConfigResponseOutput {
	return o
}

func (o NetworkPolicyConfigResponseOutput) ToNetworkPolicyConfigResponseOutputWithContext(ctx context.Context) NetworkPolicyConfigResponseOutput {
	return o
}

// Whether NetworkPolicy is enabled for this cluster.
func (o NetworkPolicyConfigResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkPolicyConfigResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyResponse struct {
	// Whether network policy is enabled on the cluster.
	Enabled bool `pulumi:"enabled"`
	// The selected network policy provider.
	Provider string `pulumi:"provider"`
}

// Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/
type NetworkPolicyResponseOutput struct{ *pulumi.OutputState }

func (NetworkPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicyResponse)(nil)).Elem()
}

func (o NetworkPolicyResponseOutput) ToNetworkPolicyResponseOutput() NetworkPolicyResponseOutput {
	return o
}

func (o NetworkPolicyResponseOutput) ToNetworkPolicyResponseOutputWithContext(ctx context.Context) NetworkPolicyResponseOutput {
	return o
}

// Whether network policy is enabled on the cluster.
func (o NetworkPolicyResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkPolicyResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The selected network policy provider.
func (o NetworkPolicyResponseOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkPolicyResponse) string { return v.Provider }).(pulumi.StringOutput)
}

// Collection of Compute Engine network tags that can be applied to a node's underlying VM instance.
type NetworkTags struct {
	// List of network tags.
	Tags []string `pulumi:"tags"`
}

// NetworkTagsInput is an input type that accepts NetworkTagsArgs and NetworkTagsOutput values.
// You can construct a concrete instance of `NetworkTagsInput` via:
//
//	NetworkTagsArgs{...}
type NetworkTagsInput interface {
	pulumi.Input

	ToNetworkTagsOutput() NetworkTagsOutput
	ToNetworkTagsOutputWithContext(context.Context) NetworkTagsOutput
}

// Collection of Compute Engine network tags that can be applied to a node's underlying VM instance.
type NetworkTagsArgs struct {
	// List of network tags.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (NetworkTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTags)(nil)).Elem()
}

func (i NetworkTagsArgs) ToNetworkTagsOutput() NetworkTagsOutput {
	return i.ToNetworkTagsOutputWithContext(context.Background())
}

func (i NetworkTagsArgs) ToNetworkTagsOutputWithContext(ctx context.Context) NetworkTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTagsOutput)
}

func (i NetworkTagsArgs) ToNetworkTagsPtrOutput() NetworkTagsPtrOutput {
	return i.ToNetworkTagsPtrOutputWithContext(context.Background())
}

func (i NetworkTagsArgs) ToNetworkTagsPtrOutputWithContext(ctx context.Context) NetworkTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTagsOutput).ToNetworkTagsPtrOutputWithContext(ctx)
}

// NetworkTagsPtrInput is an input type that accepts NetworkTagsArgs, NetworkTagsPtr and NetworkTagsPtrOutput values.
// You can construct a concrete instance of `NetworkTagsPtrInput` via:
//
//	        NetworkTagsArgs{...}
//
//	or:
//
//	        nil
type NetworkTagsPtrInput interface {
	pulumi.Input

	ToNetworkTagsPtrOutput() NetworkTagsPtrOutput
	ToNetworkTagsPtrOutputWithContext(context.Context) NetworkTagsPtrOutput
}

type networkTagsPtrType NetworkTagsArgs

func NetworkTagsPtr(v *NetworkTagsArgs) NetworkTagsPtrInput {
	return (*networkTagsPtrType)(v)
}

func (*networkTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkTags)(nil)).Elem()
}

func (i *networkTagsPtrType) ToNetworkTagsPtrOutput() NetworkTagsPtrOutput {
	return i.ToNetworkTagsPtrOutputWithContext(context.Background())
}

func (i *networkTagsPtrType) ToNetworkTagsPtrOutputWithContext(ctx context.Context) NetworkTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkTagsPtrOutput)
}

// Collection of Compute Engine network tags that can be applied to a node's underlying VM instance.
type NetworkTagsOutput struct{ *pulumi.OutputState }

func (NetworkTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTags)(nil)).Elem()
}

func (o NetworkTagsOutput) ToNetworkTagsOutput() NetworkTagsOutput {
	return o
}

func (o NetworkTagsOutput) ToNetworkTagsOutputWithContext(ctx context.Context) NetworkTagsOutput {
	return o
}

func (o NetworkTagsOutput) ToNetworkTagsPtrOutput() NetworkTagsPtrOutput {
	return o.ToNetworkTagsPtrOutputWithContext(context.Background())
}

func (o NetworkTagsOutput) ToNetworkTagsPtrOutputWithContext(ctx context.Context) NetworkTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkTags) *NetworkTags {
		return &v
	}).(NetworkTagsPtrOutput)
}

// List of network tags.
func (o NetworkTagsOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkTags) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type NetworkTagsPtrOutput struct{ *pulumi.OutputState }

func (NetworkTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkTags)(nil)).Elem()
}

func (o NetworkTagsPtrOutput) ToNetworkTagsPtrOutput() NetworkTagsPtrOutput {
	return o
}

func (o NetworkTagsPtrOutput) ToNetworkTagsPtrOutputWithContext(ctx context.Context) NetworkTagsPtrOutput {
	return o
}

func (o NetworkTagsPtrOutput) Elem() NetworkTagsOutput {
	return o.ApplyT(func(v *NetworkTags) NetworkTags {
		if v != nil {
			return *v
		}
		var ret NetworkTags
		return ret
	}).(NetworkTagsOutput)
}

// List of network tags.
func (o NetworkTagsPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkTags) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// Collection of Compute Engine network tags that can be applied to a node's underlying VM instance.
type NetworkTagsResponse struct {
	// List of network tags.
	Tags []string `pulumi:"tags"`
}

// Collection of Compute Engine network tags that can be applied to a node's underlying VM instance.
type NetworkTagsResponseOutput struct{ *pulumi.OutputState }

func (NetworkTagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkTagsResponse)(nil)).Elem()
}

func (o NetworkTagsResponseOutput) ToNetworkTagsResponseOutput() NetworkTagsResponseOutput {
	return o
}

func (o NetworkTagsResponseOutput) ToNetworkTagsResponseOutputWithContext(ctx context.Context) NetworkTagsResponseOutput {
	return o
}

// List of network tags.
func (o NetworkTagsResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkTagsResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Specifies the NodeAffinity key, values, and affinity operator according to [shared sole tenant node group affinities](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes#node_affinity_and_anti-affinity).
type NodeAffinity struct {
	// Key for NodeAffinity.
	Key *string `pulumi:"key"`
	// Operator for NodeAffinity.
	Operator *NodeAffinityOperator `pulumi:"operator"`
	// Values for NodeAffinity.
	Values []string `pulumi:"values"`
}

// NodeAffinityInput is an input type that accepts NodeAffinityArgs and NodeAffinityOutput values.
// You can construct a concrete instance of `NodeAffinityInput` via:
//
//	NodeAffinityArgs{...}
type NodeAffinityInput interface {
	pulumi.Input

	ToNodeAffinityOutput() NodeAffinityOutput
	ToNodeAffinityOutputWithContext(context.Context) NodeAffinityOutput
}

// Specifies the NodeAffinity key, values, and affinity operator according to [shared sole tenant node group affinities](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes#node_affinity_and_anti-affinity).
type NodeAffinityArgs struct {
	// Key for NodeAffinity.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator for NodeAffinity.
	Operator NodeAffinityOperatorPtrInput `pulumi:"operator"`
	// Values for NodeAffinity.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (NodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAffinity)(nil)).Elem()
}

func (i NodeAffinityArgs) ToNodeAffinityOutput() NodeAffinityOutput {
	return i.ToNodeAffinityOutputWithContext(context.Background())
}

func (i NodeAffinityArgs) ToNodeAffinityOutputWithContext(ctx context.Context) NodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAffinityOutput)
}

// NodeAffinityArrayInput is an input type that accepts NodeAffinityArray and NodeAffinityArrayOutput values.
// You can construct a concrete instance of `NodeAffinityArrayInput` via:
//
//	NodeAffinityArray{ NodeAffinityArgs{...} }
type NodeAffinityArrayInput interface {
	pulumi.Input

	ToNodeAffinityArrayOutput() NodeAffinityArrayOutput
	ToNodeAffinityArrayOutputWithContext(context.Context) NodeAffinityArrayOutput
}

type NodeAffinityArray []NodeAffinityInput

func (NodeAffinityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAffinity)(nil)).Elem()
}

func (i NodeAffinityArray) ToNodeAffinityArrayOutput() NodeAffinityArrayOutput {
	return i.ToNodeAffinityArrayOutputWithContext(context.Background())
}

func (i NodeAffinityArray) ToNodeAffinityArrayOutputWithContext(ctx context.Context) NodeAffinityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAffinityArrayOutput)
}

// Specifies the NodeAffinity key, values, and affinity operator according to [shared sole tenant node group affinities](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes#node_affinity_and_anti-affinity).
type NodeAffinityOutput struct{ *pulumi.OutputState }

func (NodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAffinity)(nil)).Elem()
}

func (o NodeAffinityOutput) ToNodeAffinityOutput() NodeAffinityOutput {
	return o
}

func (o NodeAffinityOutput) ToNodeAffinityOutputWithContext(ctx context.Context) NodeAffinityOutput {
	return o
}

// Key for NodeAffinity.
func (o NodeAffinityOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAffinity) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator for NodeAffinity.
func (o NodeAffinityOutput) Operator() NodeAffinityOperatorPtrOutput {
	return o.ApplyT(func(v NodeAffinity) *NodeAffinityOperator { return v.Operator }).(NodeAffinityOperatorPtrOutput)
}

// Values for NodeAffinity.
func (o NodeAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type NodeAffinityArrayOutput struct{ *pulumi.OutputState }

func (NodeAffinityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAffinity)(nil)).Elem()
}

func (o NodeAffinityArrayOutput) ToNodeAffinityArrayOutput() NodeAffinityArrayOutput {
	return o
}

func (o NodeAffinityArrayOutput) ToNodeAffinityArrayOutputWithContext(ctx context.Context) NodeAffinityArrayOutput {
	return o
}

func (o NodeAffinityArrayOutput) Index(i pulumi.IntInput) NodeAffinityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAffinity {
		return vs[0].([]NodeAffinity)[vs[1].(int)]
	}).(NodeAffinityOutput)
}

// Specifies the NodeAffinity key, values, and affinity operator according to [shared sole tenant node group affinities](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes#node_affinity_and_anti-affinity).
type NodeAffinityResponse struct {
	// Key for NodeAffinity.
	Key string `pulumi:"key"`
	// Operator for NodeAffinity.
	Operator string `pulumi:"operator"`
	// Values for NodeAffinity.
	Values []string `pulumi:"values"`
}

// Specifies the NodeAffinity key, values, and affinity operator according to [shared sole tenant node group affinities](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes#node_affinity_and_anti-affinity).
type NodeAffinityResponseOutput struct{ *pulumi.OutputState }

func (NodeAffinityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAffinityResponse)(nil)).Elem()
}

func (o NodeAffinityResponseOutput) ToNodeAffinityResponseOutput() NodeAffinityResponseOutput {
	return o
}

func (o NodeAffinityResponseOutput) ToNodeAffinityResponseOutputWithContext(ctx context.Context) NodeAffinityResponseOutput {
	return o
}

// Key for NodeAffinity.
func (o NodeAffinityResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAffinityResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Operator for NodeAffinity.
func (o NodeAffinityResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAffinityResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Values for NodeAffinity.
func (o NodeAffinityResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeAffinityResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type NodeAffinityResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeAffinityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAffinityResponse)(nil)).Elem()
}

func (o NodeAffinityResponseArrayOutput) ToNodeAffinityResponseArrayOutput() NodeAffinityResponseArrayOutput {
	return o
}

func (o NodeAffinityResponseArrayOutput) ToNodeAffinityResponseArrayOutputWithContext(ctx context.Context) NodeAffinityResponseArrayOutput {
	return o
}

func (o NodeAffinityResponseArrayOutput) Index(i pulumi.IntInput) NodeAffinityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAffinityResponse {
		return vs[0].([]NodeAffinityResponse)[vs[1].(int)]
	}).(NodeAffinityResponseOutput)
}

// Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.
type NodeConfig struct {
	// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
	Accelerators []AcceleratorConfig `pulumi:"accelerators"`
	// Advanced features for the Compute Engine VM.
	AdvancedMachineFeatures *AdvancedMachineFeatures `pulumi:"advancedMachineFeatures"`
	//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey *string `pulumi:"bootDiskKmsKey"`
	// Confidential nodes config. All the nodes in the node pool will be Confidential VM once enabled.
	ConfidentialNodes *ConfidentialNodes `pulumi:"confidentialNodes"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType *string `pulumi:"diskType"`
	// Parameters for the node ephemeral storage using Local SSDs. If unspecified, ephemeral storage is backed by the boot disk.
	EphemeralStorageLocalSsdConfig *EphemeralStorageLocalSsdConfig `pulumi:"ephemeralStorageLocalSsdConfig"`
	// Enable or disable NCCL fast socket for the node pool.
	FastSocket *FastSocket `pulumi:"fastSocket"`
	// Google Container File System (image streaming) configs.
	GcfsConfig *GcfsConfig `pulumi:"gcfsConfig"`
	// Enable or disable gvnic in the node pool.
	Gvnic *VirtualNIC `pulumi:"gvnic"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
	ImageType *string `pulumi:"imageType"`
	// Node kubelet configs.
	KubeletConfig *NodeKubeletConfig `pulumi:"kubeletConfig"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels map[string]string `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes.
	LinuxNodeConfig *LinuxNodeConfig `pulumi:"linuxNodeConfig"`
	// Parameters for using raw-block Local NVMe SSDs.
	LocalNvmeSsdBlockConfig *LocalNvmeSsdBlockConfig `pulumi:"localNvmeSsdBlockConfig"`
	// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
	LocalSsdCount *int `pulumi:"localSsdCount"`
	// Logging configuration.
	LoggingConfig *NodePoolLoggingConfig `pulumi:"loggingConfig"`
	// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
	MachineType *string `pulumi:"machineType"`
	// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
	Metadata map[string]string `pulumi:"metadata"`
	// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	MinCpuPlatform *string `pulumi:"minCpuPlatform"`
	// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
	NodeGroup *string `pulumi:"nodeGroup"`
	// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
	Preemptible *bool `pulumi:"preemptible"`
	// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
	ReservationAffinity *ReservationAffinity `pulumi:"reservationAffinity"`
	// The resource labels for the node pool to use to annotate any related Google Compute Engine resources.
	ResourceLabels map[string]string `pulumi:"resourceLabels"`
	// A map of resource manager tag keys and values to be attached to the nodes.
	ResourceManagerTags *ResourceManagerTags `pulumi:"resourceManagerTags"`
	// Sandbox configuration for this node.
	SandboxConfig *SandboxConfig `pulumi:"sandboxConfig"`
	// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig *ShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// Parameters for node pools to be backed by shared sole tenant node groups.
	SoleTenantConfig *SoleTenantConfig `pulumi:"soleTenantConfig"`
	// Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
	Spot *bool `pulumi:"spot"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags []string `pulumi:"tags"`
	// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Taints []NodeTaint `pulumi:"taints"`
	// Parameters that can be configured on Windows nodes.
	WindowsNodeConfig *WindowsNodeConfig `pulumi:"windowsNodeConfig"`
	// The workload metadata configuration for this node.
	WorkloadMetadataConfig *WorkloadMetadataConfig `pulumi:"workloadMetadataConfig"`
}

// NodeConfigInput is an input type that accepts NodeConfigArgs and NodeConfigOutput values.
// You can construct a concrete instance of `NodeConfigInput` via:
//
//	NodeConfigArgs{...}
type NodeConfigInput interface {
	pulumi.Input

	ToNodeConfigOutput() NodeConfigOutput
	ToNodeConfigOutputWithContext(context.Context) NodeConfigOutput
}

// Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.
type NodeConfigArgs struct {
	// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
	Accelerators AcceleratorConfigArrayInput `pulumi:"accelerators"`
	// Advanced features for the Compute Engine VM.
	AdvancedMachineFeatures AdvancedMachineFeaturesPtrInput `pulumi:"advancedMachineFeatures"`
	//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey pulumi.StringPtrInput `pulumi:"bootDiskKmsKey"`
	// Confidential nodes config. All the nodes in the node pool will be Confidential VM once enabled.
	ConfidentialNodes ConfidentialNodesPtrInput `pulumi:"confidentialNodes"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// Parameters for the node ephemeral storage using Local SSDs. If unspecified, ephemeral storage is backed by the boot disk.
	EphemeralStorageLocalSsdConfig EphemeralStorageLocalSsdConfigPtrInput `pulumi:"ephemeralStorageLocalSsdConfig"`
	// Enable or disable NCCL fast socket for the node pool.
	FastSocket FastSocketPtrInput `pulumi:"fastSocket"`
	// Google Container File System (image streaming) configs.
	GcfsConfig GcfsConfigPtrInput `pulumi:"gcfsConfig"`
	// Enable or disable gvnic in the node pool.
	Gvnic VirtualNICPtrInput `pulumi:"gvnic"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
	ImageType pulumi.StringPtrInput `pulumi:"imageType"`
	// Node kubelet configs.
	KubeletConfig NodeKubeletConfigPtrInput `pulumi:"kubeletConfig"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes.
	LinuxNodeConfig LinuxNodeConfigPtrInput `pulumi:"linuxNodeConfig"`
	// Parameters for using raw-block Local NVMe SSDs.
	LocalNvmeSsdBlockConfig LocalNvmeSsdBlockConfigPtrInput `pulumi:"localNvmeSsdBlockConfig"`
	// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
	LocalSsdCount pulumi.IntPtrInput `pulumi:"localSsdCount"`
	// Logging configuration.
	LoggingConfig NodePoolLoggingConfigPtrInput `pulumi:"loggingConfig"`
	// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	MinCpuPlatform pulumi.StringPtrInput `pulumi:"minCpuPlatform"`
	// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
	NodeGroup pulumi.StringPtrInput `pulumi:"nodeGroup"`
	// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
	Preemptible pulumi.BoolPtrInput `pulumi:"preemptible"`
	// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
	ReservationAffinity ReservationAffinityPtrInput `pulumi:"reservationAffinity"`
	// The resource labels for the node pool to use to annotate any related Google Compute Engine resources.
	ResourceLabels pulumi.StringMapInput `pulumi:"resourceLabels"`
	// A map of resource manager tag keys and values to be attached to the nodes.
	ResourceManagerTags ResourceManagerTagsPtrInput `pulumi:"resourceManagerTags"`
	// Sandbox configuration for this node.
	SandboxConfig SandboxConfigPtrInput `pulumi:"sandboxConfig"`
	// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// Parameters for node pools to be backed by shared sole tenant node groups.
	SoleTenantConfig SoleTenantConfigPtrInput `pulumi:"soleTenantConfig"`
	// Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
	Spot pulumi.BoolPtrInput `pulumi:"spot"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Taints NodeTaintArrayInput `pulumi:"taints"`
	// Parameters that can be configured on Windows nodes.
	WindowsNodeConfig WindowsNodeConfigPtrInput `pulumi:"windowsNodeConfig"`
	// The workload metadata configuration for this node.
	WorkloadMetadataConfig WorkloadMetadataConfigPtrInput `pulumi:"workloadMetadataConfig"`
}

func (NodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (i NodeConfigArgs) ToNodeConfigOutput() NodeConfigOutput {
	return i.ToNodeConfigOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput)
}

func (i NodeConfigArgs) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput).ToNodeConfigPtrOutputWithContext(ctx)
}

// NodeConfigPtrInput is an input type that accepts NodeConfigArgs, NodeConfigPtr and NodeConfigPtrOutput values.
// You can construct a concrete instance of `NodeConfigPtrInput` via:
//
//	        NodeConfigArgs{...}
//
//	or:
//
//	        nil
type NodeConfigPtrInput interface {
	pulumi.Input

	ToNodeConfigPtrOutput() NodeConfigPtrOutput
	ToNodeConfigPtrOutputWithContext(context.Context) NodeConfigPtrOutput
}

type nodeConfigPtrType NodeConfigArgs

func NodeConfigPtr(v *NodeConfigArgs) NodeConfigPtrInput {
	return (*nodeConfigPtrType)(v)
}

func (*nodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigPtrOutput)
}

// Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.
type NodeConfigOutput struct{ *pulumi.OutputState }

func (NodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (o NodeConfigOutput) ToNodeConfigOutput() NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (o NodeConfigOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeConfig) *NodeConfig {
		return &v
	}).(NodeConfigPtrOutput)
}

// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
func (o NodeConfigOutput) Accelerators() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v NodeConfig) []AcceleratorConfig { return v.Accelerators }).(AcceleratorConfigArrayOutput)
}

// Advanced features for the Compute Engine VM.
func (o NodeConfigOutput) AdvancedMachineFeatures() AdvancedMachineFeaturesPtrOutput {
	return o.ApplyT(func(v NodeConfig) *AdvancedMachineFeatures { return v.AdvancedMachineFeatures }).(AdvancedMachineFeaturesPtrOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o NodeConfigOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.BootDiskKmsKey }).(pulumi.StringPtrOutput)
}

// Confidential nodes config. All the nodes in the node pool will be Confidential VM once enabled.
func (o NodeConfigOutput) ConfidentialNodes() ConfidentialNodesPtrOutput {
	return o.ApplyT(func(v NodeConfig) *ConfidentialNodes { return v.ConfidentialNodes }).(ConfidentialNodesPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o NodeConfigOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o NodeConfigOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// Parameters for the node ephemeral storage using Local SSDs. If unspecified, ephemeral storage is backed by the boot disk.
func (o NodeConfigOutput) EphemeralStorageLocalSsdConfig() EphemeralStorageLocalSsdConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *EphemeralStorageLocalSsdConfig { return v.EphemeralStorageLocalSsdConfig }).(EphemeralStorageLocalSsdConfigPtrOutput)
}

// Enable or disable NCCL fast socket for the node pool.
func (o NodeConfigOutput) FastSocket() FastSocketPtrOutput {
	return o.ApplyT(func(v NodeConfig) *FastSocket { return v.FastSocket }).(FastSocketPtrOutput)
}

// Google Container File System (image streaming) configs.
func (o NodeConfigOutput) GcfsConfig() GcfsConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *GcfsConfig { return v.GcfsConfig }).(GcfsConfigPtrOutput)
}

// Enable or disable gvnic in the node pool.
func (o NodeConfigOutput) Gvnic() VirtualNICPtrOutput {
	return o.ApplyT(func(v NodeConfig) *VirtualNIC { return v.Gvnic }).(VirtualNICPtrOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
func (o NodeConfigOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.ImageType }).(pulumi.StringPtrOutput)
}

// Node kubelet configs.
func (o NodeConfigOutput) KubeletConfig() NodeKubeletConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *NodeKubeletConfig { return v.KubeletConfig }).(NodeKubeletConfigPtrOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o NodeConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfig) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
func (o NodeConfigOutput) LinuxNodeConfig() LinuxNodeConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *LinuxNodeConfig { return v.LinuxNodeConfig }).(LinuxNodeConfigPtrOutput)
}

// Parameters for using raw-block Local NVMe SSDs.
func (o NodeConfigOutput) LocalNvmeSsdBlockConfig() LocalNvmeSsdBlockConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *LocalNvmeSsdBlockConfig { return v.LocalNvmeSsdBlockConfig }).(LocalNvmeSsdBlockConfigPtrOutput)
}

// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
func (o NodeConfigOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.LocalSsdCount }).(pulumi.IntPtrOutput)
}

// Logging configuration.
func (o NodeConfigOutput) LoggingConfig() NodePoolLoggingConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *NodePoolLoggingConfig { return v.LoggingConfig }).(NodePoolLoggingConfigPtrOutput)
}

// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
func (o NodeConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
func (o NodeConfigOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfig) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
func (o NodeConfigOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.MinCpuPlatform }).(pulumi.StringPtrOutput)
}

// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
func (o NodeConfigOutput) NodeGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.NodeGroup }).(pulumi.StringPtrOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
func (o NodeConfigOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfig) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
func (o NodeConfigOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeConfig) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
func (o NodeConfigOutput) ReservationAffinity() ReservationAffinityPtrOutput {
	return o.ApplyT(func(v NodeConfig) *ReservationAffinity { return v.ReservationAffinity }).(ReservationAffinityPtrOutput)
}

// The resource labels for the node pool to use to annotate any related Google Compute Engine resources.
func (o NodeConfigOutput) ResourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfig) map[string]string { return v.ResourceLabels }).(pulumi.StringMapOutput)
}

// A map of resource manager tag keys and values to be attached to the nodes.
func (o NodeConfigOutput) ResourceManagerTags() ResourceManagerTagsPtrOutput {
	return o.ApplyT(func(v NodeConfig) *ResourceManagerTags { return v.ResourceManagerTags }).(ResourceManagerTagsPtrOutput)
}

// Sandbox configuration for this node.
func (o NodeConfigOutput) SandboxConfig() SandboxConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *SandboxConfig { return v.SandboxConfig }).(SandboxConfigPtrOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
func (o NodeConfigOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o NodeConfigOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *ShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigPtrOutput)
}

// Parameters for node pools to be backed by shared sole tenant node groups.
func (o NodeConfigOutput) SoleTenantConfig() SoleTenantConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *SoleTenantConfig { return v.SoleTenantConfig }).(SoleTenantConfigPtrOutput)
}

// Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
func (o NodeConfigOutput) Spot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeConfig) *bool { return v.Spot }).(pulumi.BoolPtrOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
func (o NodeConfigOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfig) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
func (o NodeConfigOutput) Taints() NodeTaintArrayOutput {
	return o.ApplyT(func(v NodeConfig) []NodeTaint { return v.Taints }).(NodeTaintArrayOutput)
}

// Parameters that can be configured on Windows nodes.
func (o NodeConfigOutput) WindowsNodeConfig() WindowsNodeConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *WindowsNodeConfig { return v.WindowsNodeConfig }).(WindowsNodeConfigPtrOutput)
}

// The workload metadata configuration for this node.
func (o NodeConfigOutput) WorkloadMetadataConfig() WorkloadMetadataConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *WorkloadMetadataConfig { return v.WorkloadMetadataConfig }).(WorkloadMetadataConfigPtrOutput)
}

type NodeConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) Elem() NodeConfigOutput {
	return o.ApplyT(func(v *NodeConfig) NodeConfig {
		if v != nil {
			return *v
		}
		var ret NodeConfig
		return ret
	}).(NodeConfigOutput)
}

// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
func (o NodeConfigPtrOutput) Accelerators() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []AcceleratorConfig {
		if v == nil {
			return nil
		}
		return v.Accelerators
	}).(AcceleratorConfigArrayOutput)
}

// Advanced features for the Compute Engine VM.
func (o NodeConfigPtrOutput) AdvancedMachineFeatures() AdvancedMachineFeaturesPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *AdvancedMachineFeatures {
		if v == nil {
			return nil
		}
		return v.AdvancedMachineFeatures
	}).(AdvancedMachineFeaturesPtrOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o NodeConfigPtrOutput) BootDiskKmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.BootDiskKmsKey
	}).(pulumi.StringPtrOutput)
}

// Confidential nodes config. All the nodes in the node pool will be Confidential VM once enabled.
func (o NodeConfigPtrOutput) ConfidentialNodes() ConfidentialNodesPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *ConfidentialNodes {
		if v == nil {
			return nil
		}
		return v.ConfidentialNodes
	}).(ConfidentialNodesPtrOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o NodeConfigPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o NodeConfigPtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(pulumi.StringPtrOutput)
}

// Parameters for the node ephemeral storage using Local SSDs. If unspecified, ephemeral storage is backed by the boot disk.
func (o NodeConfigPtrOutput) EphemeralStorageLocalSsdConfig() EphemeralStorageLocalSsdConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *EphemeralStorageLocalSsdConfig {
		if v == nil {
			return nil
		}
		return v.EphemeralStorageLocalSsdConfig
	}).(EphemeralStorageLocalSsdConfigPtrOutput)
}

// Enable or disable NCCL fast socket for the node pool.
func (o NodeConfigPtrOutput) FastSocket() FastSocketPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *FastSocket {
		if v == nil {
			return nil
		}
		return v.FastSocket
	}).(FastSocketPtrOutput)
}

// Google Container File System (image streaming) configs.
func (o NodeConfigPtrOutput) GcfsConfig() GcfsConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *GcfsConfig {
		if v == nil {
			return nil
		}
		return v.GcfsConfig
	}).(GcfsConfigPtrOutput)
}

// Enable or disable gvnic in the node pool.
func (o NodeConfigPtrOutput) Gvnic() VirtualNICPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *VirtualNIC {
		if v == nil {
			return nil
		}
		return v.Gvnic
	}).(VirtualNICPtrOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
func (o NodeConfigPtrOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ImageType
	}).(pulumi.StringPtrOutput)
}

// Node kubelet configs.
func (o NodeConfigPtrOutput) KubeletConfig() NodeKubeletConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *NodeKubeletConfig {
		if v == nil {
			return nil
		}
		return v.KubeletConfig
	}).(NodeKubeletConfigPtrOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o NodeConfigPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
func (o NodeConfigPtrOutput) LinuxNodeConfig() LinuxNodeConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *LinuxNodeConfig {
		if v == nil {
			return nil
		}
		return v.LinuxNodeConfig
	}).(LinuxNodeConfigPtrOutput)
}

// Parameters for using raw-block Local NVMe SSDs.
func (o NodeConfigPtrOutput) LocalNvmeSsdBlockConfig() LocalNvmeSsdBlockConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *LocalNvmeSsdBlockConfig {
		if v == nil {
			return nil
		}
		return v.LocalNvmeSsdBlockConfig
	}).(LocalNvmeSsdBlockConfigPtrOutput)
}

// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
func (o NodeConfigPtrOutput) LocalSsdCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.LocalSsdCount
	}).(pulumi.IntPtrOutput)
}

// Logging configuration.
func (o NodeConfigPtrOutput) LoggingConfig() NodePoolLoggingConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *NodePoolLoggingConfig {
		if v == nil {
			return nil
		}
		return v.LoggingConfig
	}).(NodePoolLoggingConfigPtrOutput)
}

// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
func (o NodeConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
func (o NodeConfigPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
func (o NodeConfigPtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
func (o NodeConfigPtrOutput) NodeGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.NodeGroup
	}).(pulumi.StringPtrOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
func (o NodeConfigPtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
func (o NodeConfigPtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
func (o NodeConfigPtrOutput) ReservationAffinity() ReservationAffinityPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *ReservationAffinity {
		if v == nil {
			return nil
		}
		return v.ReservationAffinity
	}).(ReservationAffinityPtrOutput)
}

// The resource labels for the node pool to use to annotate any related Google Compute Engine resources.
func (o NodeConfigPtrOutput) ResourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.ResourceLabels
	}).(pulumi.StringMapOutput)
}

// A map of resource manager tag keys and values to be attached to the nodes.
func (o NodeConfigPtrOutput) ResourceManagerTags() ResourceManagerTagsPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *ResourceManagerTags {
		if v == nil {
			return nil
		}
		return v.ResourceManagerTags
	}).(ResourceManagerTagsPtrOutput)
}

// Sandbox configuration for this node.
func (o NodeConfigPtrOutput) SandboxConfig() SandboxConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *SandboxConfig {
		if v == nil {
			return nil
		}
		return v.SandboxConfig
	}).(SandboxConfigPtrOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
func (o NodeConfigPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Shielded Instance options.
func (o NodeConfigPtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *ShieldedInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigPtrOutput)
}

// Parameters for node pools to be backed by shared sole tenant node groups.
func (o NodeConfigPtrOutput) SoleTenantConfig() SoleTenantConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *SoleTenantConfig {
		if v == nil {
			return nil
		}
		return v.SoleTenantConfig
	}).(SoleTenantConfigPtrOutput)
}

// Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
func (o NodeConfigPtrOutput) Spot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Spot
	}).(pulumi.BoolPtrOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
func (o NodeConfigPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
func (o NodeConfigPtrOutput) Taints() NodeTaintArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []NodeTaint {
		if v == nil {
			return nil
		}
		return v.Taints
	}).(NodeTaintArrayOutput)
}

// Parameters that can be configured on Windows nodes.
func (o NodeConfigPtrOutput) WindowsNodeConfig() WindowsNodeConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *WindowsNodeConfig {
		if v == nil {
			return nil
		}
		return v.WindowsNodeConfig
	}).(WindowsNodeConfigPtrOutput)
}

// The workload metadata configuration for this node.
func (o NodeConfigPtrOutput) WorkloadMetadataConfig() WorkloadMetadataConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *WorkloadMetadataConfig {
		if v == nil {
			return nil
		}
		return v.WorkloadMetadataConfig
	}).(WorkloadMetadataConfigPtrOutput)
}

// Subset of NodeConfig message that has defaults.
type NodeConfigDefaults struct {
	// GCFS (Google Container File System, also known as Riptide) options.
	GcfsConfig *GcfsConfig `pulumi:"gcfsConfig"`
	// Logging configuration for node pools.
	LoggingConfig *NodePoolLoggingConfig `pulumi:"loggingConfig"`
}

// NodeConfigDefaultsInput is an input type that accepts NodeConfigDefaultsArgs and NodeConfigDefaultsOutput values.
// You can construct a concrete instance of `NodeConfigDefaultsInput` via:
//
//	NodeConfigDefaultsArgs{...}
type NodeConfigDefaultsInput interface {
	pulumi.Input

	ToNodeConfigDefaultsOutput() NodeConfigDefaultsOutput
	ToNodeConfigDefaultsOutputWithContext(context.Context) NodeConfigDefaultsOutput
}

// Subset of NodeConfig message that has defaults.
type NodeConfigDefaultsArgs struct {
	// GCFS (Google Container File System, also known as Riptide) options.
	GcfsConfig GcfsConfigPtrInput `pulumi:"gcfsConfig"`
	// Logging configuration for node pools.
	LoggingConfig NodePoolLoggingConfigPtrInput `pulumi:"loggingConfig"`
}

func (NodeConfigDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigDefaults)(nil)).Elem()
}

func (i NodeConfigDefaultsArgs) ToNodeConfigDefaultsOutput() NodeConfigDefaultsOutput {
	return i.ToNodeConfigDefaultsOutputWithContext(context.Background())
}

func (i NodeConfigDefaultsArgs) ToNodeConfigDefaultsOutputWithContext(ctx context.Context) NodeConfigDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigDefaultsOutput)
}

func (i NodeConfigDefaultsArgs) ToNodeConfigDefaultsPtrOutput() NodeConfigDefaultsPtrOutput {
	return i.ToNodeConfigDefaultsPtrOutputWithContext(context.Background())
}

func (i NodeConfigDefaultsArgs) ToNodeConfigDefaultsPtrOutputWithContext(ctx context.Context) NodeConfigDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigDefaultsOutput).ToNodeConfigDefaultsPtrOutputWithContext(ctx)
}

// NodeConfigDefaultsPtrInput is an input type that accepts NodeConfigDefaultsArgs, NodeConfigDefaultsPtr and NodeConfigDefaultsPtrOutput values.
// You can construct a concrete instance of `NodeConfigDefaultsPtrInput` via:
//
//	        NodeConfigDefaultsArgs{...}
//
//	or:
//
//	        nil
type NodeConfigDefaultsPtrInput interface {
	pulumi.Input

	ToNodeConfigDefaultsPtrOutput() NodeConfigDefaultsPtrOutput
	ToNodeConfigDefaultsPtrOutputWithContext(context.Context) NodeConfigDefaultsPtrOutput
}

type nodeConfigDefaultsPtrType NodeConfigDefaultsArgs

func NodeConfigDefaultsPtr(v *NodeConfigDefaultsArgs) NodeConfigDefaultsPtrInput {
	return (*nodeConfigDefaultsPtrType)(v)
}

func (*nodeConfigDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigDefaults)(nil)).Elem()
}

func (i *nodeConfigDefaultsPtrType) ToNodeConfigDefaultsPtrOutput() NodeConfigDefaultsPtrOutput {
	return i.ToNodeConfigDefaultsPtrOutputWithContext(context.Background())
}

func (i *nodeConfigDefaultsPtrType) ToNodeConfigDefaultsPtrOutputWithContext(ctx context.Context) NodeConfigDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigDefaultsPtrOutput)
}

// Subset of NodeConfig message that has defaults.
type NodeConfigDefaultsOutput struct{ *pulumi.OutputState }

func (NodeConfigDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigDefaults)(nil)).Elem()
}

func (o NodeConfigDefaultsOutput) ToNodeConfigDefaultsOutput() NodeConfigDefaultsOutput {
	return o
}

func (o NodeConfigDefaultsOutput) ToNodeConfigDefaultsOutputWithContext(ctx context.Context) NodeConfigDefaultsOutput {
	return o
}

func (o NodeConfigDefaultsOutput) ToNodeConfigDefaultsPtrOutput() NodeConfigDefaultsPtrOutput {
	return o.ToNodeConfigDefaultsPtrOutputWithContext(context.Background())
}

func (o NodeConfigDefaultsOutput) ToNodeConfigDefaultsPtrOutputWithContext(ctx context.Context) NodeConfigDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeConfigDefaults) *NodeConfigDefaults {
		return &v
	}).(NodeConfigDefaultsPtrOutput)
}

// GCFS (Google Container File System, also known as Riptide) options.
func (o NodeConfigDefaultsOutput) GcfsConfig() GcfsConfigPtrOutput {
	return o.ApplyT(func(v NodeConfigDefaults) *GcfsConfig { return v.GcfsConfig }).(GcfsConfigPtrOutput)
}

// Logging configuration for node pools.
func (o NodeConfigDefaultsOutput) LoggingConfig() NodePoolLoggingConfigPtrOutput {
	return o.ApplyT(func(v NodeConfigDefaults) *NodePoolLoggingConfig { return v.LoggingConfig }).(NodePoolLoggingConfigPtrOutput)
}

type NodeConfigDefaultsPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigDefaults)(nil)).Elem()
}

func (o NodeConfigDefaultsPtrOutput) ToNodeConfigDefaultsPtrOutput() NodeConfigDefaultsPtrOutput {
	return o
}

func (o NodeConfigDefaultsPtrOutput) ToNodeConfigDefaultsPtrOutputWithContext(ctx context.Context) NodeConfigDefaultsPtrOutput {
	return o
}

func (o NodeConfigDefaultsPtrOutput) Elem() NodeConfigDefaultsOutput {
	return o.ApplyT(func(v *NodeConfigDefaults) NodeConfigDefaults {
		if v != nil {
			return *v
		}
		var ret NodeConfigDefaults
		return ret
	}).(NodeConfigDefaultsOutput)
}

// GCFS (Google Container File System, also known as Riptide) options.
func (o NodeConfigDefaultsPtrOutput) GcfsConfig() GcfsConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfigDefaults) *GcfsConfig {
		if v == nil {
			return nil
		}
		return v.GcfsConfig
	}).(GcfsConfigPtrOutput)
}

// Logging configuration for node pools.
func (o NodeConfigDefaultsPtrOutput) LoggingConfig() NodePoolLoggingConfigPtrOutput {
	return o.ApplyT(func(v *NodeConfigDefaults) *NodePoolLoggingConfig {
		if v == nil {
			return nil
		}
		return v.LoggingConfig
	}).(NodePoolLoggingConfigPtrOutput)
}

// Subset of NodeConfig message that has defaults.
type NodeConfigDefaultsResponse struct {
	// GCFS (Google Container File System, also known as Riptide) options.
	GcfsConfig GcfsConfigResponse `pulumi:"gcfsConfig"`
	// Logging configuration for node pools.
	LoggingConfig NodePoolLoggingConfigResponse `pulumi:"loggingConfig"`
}

// Subset of NodeConfig message that has defaults.
type NodeConfigDefaultsResponseOutput struct{ *pulumi.OutputState }

func (NodeConfigDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigDefaultsResponse)(nil)).Elem()
}

func (o NodeConfigDefaultsResponseOutput) ToNodeConfigDefaultsResponseOutput() NodeConfigDefaultsResponseOutput {
	return o
}

func (o NodeConfigDefaultsResponseOutput) ToNodeConfigDefaultsResponseOutputWithContext(ctx context.Context) NodeConfigDefaultsResponseOutput {
	return o
}

// GCFS (Google Container File System, also known as Riptide) options.
func (o NodeConfigDefaultsResponseOutput) GcfsConfig() GcfsConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigDefaultsResponse) GcfsConfigResponse { return v.GcfsConfig }).(GcfsConfigResponseOutput)
}

// Logging configuration for node pools.
func (o NodeConfigDefaultsResponseOutput) LoggingConfig() NodePoolLoggingConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigDefaultsResponse) NodePoolLoggingConfigResponse { return v.LoggingConfig }).(NodePoolLoggingConfigResponseOutput)
}

// Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.
type NodeConfigResponse struct {
	// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
	Accelerators []AcceleratorConfigResponse `pulumi:"accelerators"`
	// Advanced features for the Compute Engine VM.
	AdvancedMachineFeatures AdvancedMachineFeaturesResponse `pulumi:"advancedMachineFeatures"`
	//  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
	BootDiskKmsKey string `pulumi:"bootDiskKmsKey"`
	// Confidential nodes config. All the nodes in the node pool will be Confidential VM once enabled.
	ConfidentialNodes ConfidentialNodesResponse `pulumi:"confidentialNodes"`
	// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
	DiskSizeGb int `pulumi:"diskSizeGb"`
	// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
	DiskType string `pulumi:"diskType"`
	// Parameters for the node ephemeral storage using Local SSDs. If unspecified, ephemeral storage is backed by the boot disk.
	EphemeralStorageLocalSsdConfig EphemeralStorageLocalSsdConfigResponse `pulumi:"ephemeralStorageLocalSsdConfig"`
	// Enable or disable NCCL fast socket for the node pool.
	FastSocket FastSocketResponse `pulumi:"fastSocket"`
	// Google Container File System (image streaming) configs.
	GcfsConfig GcfsConfigResponse `pulumi:"gcfsConfig"`
	// Enable or disable gvnic in the node pool.
	Gvnic VirtualNICResponse `pulumi:"gvnic"`
	// The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
	ImageType string `pulumi:"imageType"`
	// Node kubelet configs.
	KubeletConfig NodeKubeletConfigResponse `pulumi:"kubeletConfig"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels map[string]string `pulumi:"labels"`
	// Parameters that can be configured on Linux nodes.
	LinuxNodeConfig LinuxNodeConfigResponse `pulumi:"linuxNodeConfig"`
	// Parameters for using raw-block Local NVMe SSDs.
	LocalNvmeSsdBlockConfig LocalNvmeSsdBlockConfigResponse `pulumi:"localNvmeSsdBlockConfig"`
	// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
	LocalSsdCount int `pulumi:"localSsdCount"`
	// Logging configuration.
	LoggingConfig NodePoolLoggingConfigResponse `pulumi:"loggingConfig"`
	// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
	MachineType string `pulumi:"machineType"`
	// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
	Metadata map[string]string `pulumi:"metadata"`
	// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
	MinCpuPlatform string `pulumi:"minCpuPlatform"`
	// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
	NodeGroup string `pulumi:"nodeGroup"`
	// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
	Preemptible bool `pulumi:"preemptible"`
	// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
	ReservationAffinity ReservationAffinityResponse `pulumi:"reservationAffinity"`
	// The resource labels for the node pool to use to annotate any related Google Compute Engine resources.
	ResourceLabels map[string]string `pulumi:"resourceLabels"`
	// A map of resource manager tag keys and values to be attached to the nodes.
	ResourceManagerTags ResourceManagerTagsResponse `pulumi:"resourceManagerTags"`
	// Sandbox configuration for this node.
	SandboxConfig SandboxConfigResponse `pulumi:"sandboxConfig"`
	// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigResponse `pulumi:"shieldedInstanceConfig"`
	// Parameters for node pools to be backed by shared sole tenant node groups.
	SoleTenantConfig SoleTenantConfigResponse `pulumi:"soleTenantConfig"`
	// Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
	Spot bool `pulumi:"spot"`
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
	Tags []string `pulumi:"tags"`
	// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
	Taints []NodeTaintResponse `pulumi:"taints"`
	// Parameters that can be configured on Windows nodes.
	WindowsNodeConfig WindowsNodeConfigResponse `pulumi:"windowsNodeConfig"`
	// The workload metadata configuration for this node.
	WorkloadMetadataConfig WorkloadMetadataConfigResponse `pulumi:"workloadMetadataConfig"`
}

// Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.
type NodeConfigResponseOutput struct{ *pulumi.OutputState }

func (NodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigResponse)(nil)).Elem()
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutput() NodeConfigResponseOutput {
	return o
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutputWithContext(ctx context.Context) NodeConfigResponseOutput {
	return o
}

// A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
func (o NodeConfigResponseOutput) Accelerators() AcceleratorConfigResponseArrayOutput {
	return o.ApplyT(func(v NodeConfigResponse) []AcceleratorConfigResponse { return v.Accelerators }).(AcceleratorConfigResponseArrayOutput)
}

// Advanced features for the Compute Engine VM.
func (o NodeConfigResponseOutput) AdvancedMachineFeatures() AdvancedMachineFeaturesResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) AdvancedMachineFeaturesResponse { return v.AdvancedMachineFeatures }).(AdvancedMachineFeaturesResponseOutput)
}

// The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
func (o NodeConfigResponseOutput) BootDiskKmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.BootDiskKmsKey }).(pulumi.StringOutput)
}

// Confidential nodes config. All the nodes in the node pool will be Confidential VM once enabled.
func (o NodeConfigResponseOutput) ConfidentialNodes() ConfidentialNodesResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) ConfidentialNodesResponse { return v.ConfidentialNodes }).(ConfidentialNodesResponseOutput)
}

// Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
func (o NodeConfigResponseOutput) DiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.DiskSizeGb }).(pulumi.IntOutput)
}

// Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
func (o NodeConfigResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Parameters for the node ephemeral storage using Local SSDs. If unspecified, ephemeral storage is backed by the boot disk.
func (o NodeConfigResponseOutput) EphemeralStorageLocalSsdConfig() EphemeralStorageLocalSsdConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) EphemeralStorageLocalSsdConfigResponse {
		return v.EphemeralStorageLocalSsdConfig
	}).(EphemeralStorageLocalSsdConfigResponseOutput)
}

// Enable or disable NCCL fast socket for the node pool.
func (o NodeConfigResponseOutput) FastSocket() FastSocketResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) FastSocketResponse { return v.FastSocket }).(FastSocketResponseOutput)
}

// Google Container File System (image streaming) configs.
func (o NodeConfigResponseOutput) GcfsConfig() GcfsConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) GcfsConfigResponse { return v.GcfsConfig }).(GcfsConfigResponseOutput)
}

// Enable or disable gvnic in the node pool.
func (o NodeConfigResponseOutput) Gvnic() VirtualNICResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) VirtualNICResponse { return v.Gvnic }).(VirtualNICResponseOutput)
}

// The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
func (o NodeConfigResponseOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.ImageType }).(pulumi.StringOutput)
}

// Node kubelet configs.
func (o NodeConfigResponseOutput) KubeletConfig() NodeKubeletConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) NodeKubeletConfigResponse { return v.KubeletConfig }).(NodeKubeletConfigResponseOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o NodeConfigResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfigResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Parameters that can be configured on Linux nodes.
func (o NodeConfigResponseOutput) LinuxNodeConfig() LinuxNodeConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) LinuxNodeConfigResponse { return v.LinuxNodeConfig }).(LinuxNodeConfigResponseOutput)
}

// Parameters for using raw-block Local NVMe SSDs.
func (o NodeConfigResponseOutput) LocalNvmeSsdBlockConfig() LocalNvmeSsdBlockConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) LocalNvmeSsdBlockConfigResponse { return v.LocalNvmeSsdBlockConfig }).(LocalNvmeSsdBlockConfigResponseOutput)
}

// The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
func (o NodeConfigResponseOutput) LocalSsdCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.LocalSsdCount }).(pulumi.IntOutput)
}

// Logging configuration.
func (o NodeConfigResponseOutput) LoggingConfig() NodePoolLoggingConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) NodePoolLoggingConfigResponse { return v.LoggingConfig }).(NodePoolLoggingConfigResponseOutput)
}

// The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
func (o NodeConfigResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - "cluster-location" - "cluster-name" - "cluster-uid" - "configure-sh" - "containerd-configure-sh" - "enable-os-login" - "gci-ensure-gke-docker" - "gci-metrics-enabled" - "gci-update-strategy" - "instance-template" - "kube-env" - "startup-script" - "user-data" - "disable-address-manager" - "windows-startup-script-ps1" - "common-psm1" - "k8s-node-setup-psm1" - "install-ssh-psm1" - "user-profile-psm1" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
func (o NodeConfigResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfigResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: "Intel Haswell"` or `minCpuPlatform: "Intel Sandy Bridge"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
func (o NodeConfigResponseOutput) MinCpuPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.MinCpuPlatform }).(pulumi.StringOutput)
}

// Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
func (o NodeConfigResponseOutput) NodeGroup() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.NodeGroup }).(pulumi.StringOutput)
}

// The set of Google API scopes to be made available on all of the node VMs under the "default" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
func (o NodeConfigResponseOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfigResponse) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
func (o NodeConfigResponseOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeConfigResponse) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

// The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool.
func (o NodeConfigResponseOutput) ReservationAffinity() ReservationAffinityResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) ReservationAffinityResponse { return v.ReservationAffinity }).(ReservationAffinityResponseOutput)
}

// The resource labels for the node pool to use to annotate any related Google Compute Engine resources.
func (o NodeConfigResponseOutput) ResourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeConfigResponse) map[string]string { return v.ResourceLabels }).(pulumi.StringMapOutput)
}

// A map of resource manager tag keys and values to be attached to the nodes.
func (o NodeConfigResponseOutput) ResourceManagerTags() ResourceManagerTagsResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) ResourceManagerTagsResponse { return v.ResourceManagerTags }).(ResourceManagerTagsResponseOutput)
}

// Sandbox configuration for this node.
func (o NodeConfigResponseOutput) SandboxConfig() SandboxConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) SandboxConfigResponse { return v.SandboxConfig }).(SandboxConfigResponseOutput)
}

// The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the "default" service account is used.
func (o NodeConfigResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Shielded Instance options.
func (o NodeConfigResponseOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) ShieldedInstanceConfigResponse { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigResponseOutput)
}

// Parameters for node pools to be backed by shared sole tenant node groups.
func (o NodeConfigResponseOutput) SoleTenantConfig() SoleTenantConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) SoleTenantConfigResponse { return v.SoleTenantConfig }).(SoleTenantConfigResponseOutput)
}

// Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
func (o NodeConfigResponseOutput) Spot() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeConfigResponse) bool { return v.Spot }).(pulumi.BoolOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
func (o NodeConfigResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfigResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
func (o NodeConfigResponseOutput) Taints() NodeTaintResponseArrayOutput {
	return o.ApplyT(func(v NodeConfigResponse) []NodeTaintResponse { return v.Taints }).(NodeTaintResponseArrayOutput)
}

// Parameters that can be configured on Windows nodes.
func (o NodeConfigResponseOutput) WindowsNodeConfig() WindowsNodeConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) WindowsNodeConfigResponse { return v.WindowsNodeConfig }).(WindowsNodeConfigResponseOutput)
}

// The workload metadata configuration for this node.
func (o NodeConfigResponseOutput) WorkloadMetadataConfig() WorkloadMetadataConfigResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) WorkloadMetadataConfigResponse { return v.WorkloadMetadataConfig }).(WorkloadMetadataConfigResponseOutput)
}

// Node kubelet configs.
type NodeKubeletConfig struct {
	// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
	CpuCfsQuota *bool `pulumi:"cpuCfsQuota"`
	// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
	CpuCfsQuotaPeriod *string `pulumi:"cpuCfsQuotaPeriod"`
	// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * "none": the default, which represents the existing scheduling behavior. * "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
	CpuManagerPolicy *string `pulumi:"cpuManagerPolicy"`
	// Enable or disable Kubelet read only port.
	InsecureKubeletReadonlyPortEnabled *bool `pulumi:"insecureKubeletReadonlyPortEnabled"`
	// Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
	PodPidsLimit *string `pulumi:"podPidsLimit"`
}

// NodeKubeletConfigInput is an input type that accepts NodeKubeletConfigArgs and NodeKubeletConfigOutput values.
// You can construct a concrete instance of `NodeKubeletConfigInput` via:
//
//	NodeKubeletConfigArgs{...}
type NodeKubeletConfigInput interface {
	pulumi.Input

	ToNodeKubeletConfigOutput() NodeKubeletConfigOutput
	ToNodeKubeletConfigOutputWithContext(context.Context) NodeKubeletConfigOutput
}

// Node kubelet configs.
type NodeKubeletConfigArgs struct {
	// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
	CpuCfsQuota pulumi.BoolPtrInput `pulumi:"cpuCfsQuota"`
	// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
	CpuCfsQuotaPeriod pulumi.StringPtrInput `pulumi:"cpuCfsQuotaPeriod"`
	// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * "none": the default, which represents the existing scheduling behavior. * "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
	CpuManagerPolicy pulumi.StringPtrInput `pulumi:"cpuManagerPolicy"`
	// Enable or disable Kubelet read only port.
	InsecureKubeletReadonlyPortEnabled pulumi.BoolPtrInput `pulumi:"insecureKubeletReadonlyPortEnabled"`
	// Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
	PodPidsLimit pulumi.StringPtrInput `pulumi:"podPidsLimit"`
}

func (NodeKubeletConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeKubeletConfig)(nil)).Elem()
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigOutput() NodeKubeletConfigOutput {
	return i.ToNodeKubeletConfigOutputWithContext(context.Background())
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigOutputWithContext(ctx context.Context) NodeKubeletConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigOutput)
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return i.ToNodeKubeletConfigPtrOutputWithContext(context.Background())
}

func (i NodeKubeletConfigArgs) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigOutput).ToNodeKubeletConfigPtrOutputWithContext(ctx)
}

// NodeKubeletConfigPtrInput is an input type that accepts NodeKubeletConfigArgs, NodeKubeletConfigPtr and NodeKubeletConfigPtrOutput values.
// You can construct a concrete instance of `NodeKubeletConfigPtrInput` via:
//
//	        NodeKubeletConfigArgs{...}
//
//	or:
//
//	        nil
type NodeKubeletConfigPtrInput interface {
	pulumi.Input

	ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput
	ToNodeKubeletConfigPtrOutputWithContext(context.Context) NodeKubeletConfigPtrOutput
}

type nodeKubeletConfigPtrType NodeKubeletConfigArgs

func NodeKubeletConfigPtr(v *NodeKubeletConfigArgs) NodeKubeletConfigPtrInput {
	return (*nodeKubeletConfigPtrType)(v)
}

func (*nodeKubeletConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeKubeletConfig)(nil)).Elem()
}

func (i *nodeKubeletConfigPtrType) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return i.ToNodeKubeletConfigPtrOutputWithContext(context.Background())
}

func (i *nodeKubeletConfigPtrType) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeKubeletConfigPtrOutput)
}

// Node kubelet configs.
type NodeKubeletConfigOutput struct{ *pulumi.OutputState }

func (NodeKubeletConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeKubeletConfig)(nil)).Elem()
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigOutput() NodeKubeletConfigOutput {
	return o
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigOutputWithContext(ctx context.Context) NodeKubeletConfigOutput {
	return o
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return o.ToNodeKubeletConfigPtrOutputWithContext(context.Background())
}

func (o NodeKubeletConfigOutput) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeKubeletConfig) *NodeKubeletConfig {
		return &v
	}).(NodeKubeletConfigPtrOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
func (o NodeKubeletConfigOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *bool { return v.CpuCfsQuota }).(pulumi.BoolPtrOutput)
}

// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
func (o NodeKubeletConfigOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *string { return v.CpuCfsQuotaPeriod }).(pulumi.StringPtrOutput)
}

// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * "none": the default, which represents the existing scheduling behavior. * "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
func (o NodeKubeletConfigOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *string { return v.CpuManagerPolicy }).(pulumi.StringPtrOutput)
}

// Enable or disable Kubelet read only port.
func (o NodeKubeletConfigOutput) InsecureKubeletReadonlyPortEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *bool { return v.InsecureKubeletReadonlyPortEnabled }).(pulumi.BoolPtrOutput)
}

// Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
func (o NodeKubeletConfigOutput) PodPidsLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeKubeletConfig) *string { return v.PodPidsLimit }).(pulumi.StringPtrOutput)
}

type NodeKubeletConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeKubeletConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeKubeletConfig)(nil)).Elem()
}

func (o NodeKubeletConfigPtrOutput) ToNodeKubeletConfigPtrOutput() NodeKubeletConfigPtrOutput {
	return o
}

func (o NodeKubeletConfigPtrOutput) ToNodeKubeletConfigPtrOutputWithContext(ctx context.Context) NodeKubeletConfigPtrOutput {
	return o
}

func (o NodeKubeletConfigPtrOutput) Elem() NodeKubeletConfigOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) NodeKubeletConfig {
		if v != nil {
			return *v
		}
		var ret NodeKubeletConfig
		return ret
	}).(NodeKubeletConfigOutput)
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
func (o NodeKubeletConfigPtrOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuota
	}).(pulumi.BoolPtrOutput)
}

// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
func (o NodeKubeletConfigPtrOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuotaPeriod
	}).(pulumi.StringPtrOutput)
}

// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * "none": the default, which represents the existing scheduling behavior. * "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
func (o NodeKubeletConfigPtrOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.CpuManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// Enable or disable Kubelet read only port.
func (o NodeKubeletConfigPtrOutput) InsecureKubeletReadonlyPortEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureKubeletReadonlyPortEnabled
	}).(pulumi.BoolPtrOutput)
}

// Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
func (o NodeKubeletConfigPtrOutput) PodPidsLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeKubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.PodPidsLimit
	}).(pulumi.StringPtrOutput)
}

// Node kubelet configs.
type NodeKubeletConfigResponse struct {
	// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
	CpuCfsQuota bool `pulumi:"cpuCfsQuota"`
	// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
	CpuCfsQuotaPeriod string `pulumi:"cpuCfsQuotaPeriod"`
	// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * "none": the default, which represents the existing scheduling behavior. * "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
	CpuManagerPolicy string `pulumi:"cpuManagerPolicy"`
	// Enable or disable Kubelet read only port.
	InsecureKubeletReadonlyPortEnabled bool `pulumi:"insecureKubeletReadonlyPortEnabled"`
	// Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
	PodPidsLimit string `pulumi:"podPidsLimit"`
}

// Node kubelet configs.
type NodeKubeletConfigResponseOutput struct{ *pulumi.OutputState }

func (NodeKubeletConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeKubeletConfigResponse)(nil)).Elem()
}

func (o NodeKubeletConfigResponseOutput) ToNodeKubeletConfigResponseOutput() NodeKubeletConfigResponseOutput {
	return o
}

func (o NodeKubeletConfigResponseOutput) ToNodeKubeletConfigResponseOutputWithContext(ctx context.Context) NodeKubeletConfigResponseOutput {
	return o
}

// Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.
func (o NodeKubeletConfigResponseOutput) CpuCfsQuota() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeKubeletConfigResponse) bool { return v.CpuCfsQuota }).(pulumi.BoolOutput)
}

// Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
func (o NodeKubeletConfigResponseOutput) CpuCfsQuotaPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v NodeKubeletConfigResponse) string { return v.CpuCfsQuotaPeriod }).(pulumi.StringOutput)
}

// Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * "none": the default, which represents the existing scheduling behavior. * "static": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.
func (o NodeKubeletConfigResponseOutput) CpuManagerPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v NodeKubeletConfigResponse) string { return v.CpuManagerPolicy }).(pulumi.StringOutput)
}

// Enable or disable Kubelet read only port.
func (o NodeKubeletConfigResponseOutput) InsecureKubeletReadonlyPortEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeKubeletConfigResponse) bool { return v.InsecureKubeletReadonlyPortEnabled }).(pulumi.BoolOutput)
}

// Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
func (o NodeKubeletConfigResponseOutput) PodPidsLimit() pulumi.StringOutput {
	return o.ApplyT(func(v NodeKubeletConfigResponse) string { return v.PodPidsLimit }).(pulumi.StringOutput)
}

// Collection of node-level [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels).
type NodeLabels struct {
	// Map of node label keys and node label values.
	Labels map[string]string `pulumi:"labels"`
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagement struct {
	// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
	AutoRepair *bool `pulumi:"autoRepair"`
	// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
	AutoUpgrade *bool `pulumi:"autoUpgrade"`
	// Specifies the Auto Upgrade knobs for the node pool.
	UpgradeOptions *AutoUpgradeOptions `pulumi:"upgradeOptions"`
}

// NodeManagementInput is an input type that accepts NodeManagementArgs and NodeManagementOutput values.
// You can construct a concrete instance of `NodeManagementInput` via:
//
//	NodeManagementArgs{...}
type NodeManagementInput interface {
	pulumi.Input

	ToNodeManagementOutput() NodeManagementOutput
	ToNodeManagementOutputWithContext(context.Context) NodeManagementOutput
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementArgs struct {
	// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
	AutoRepair pulumi.BoolPtrInput `pulumi:"autoRepair"`
	// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
	AutoUpgrade pulumi.BoolPtrInput `pulumi:"autoUpgrade"`
	// Specifies the Auto Upgrade knobs for the node pool.
	UpgradeOptions AutoUpgradeOptionsPtrInput `pulumi:"upgradeOptions"`
}

func (NodeManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeManagement)(nil)).Elem()
}

func (i NodeManagementArgs) ToNodeManagementOutput() NodeManagementOutput {
	return i.ToNodeManagementOutputWithContext(context.Background())
}

func (i NodeManagementArgs) ToNodeManagementOutputWithContext(ctx context.Context) NodeManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementOutput)
}

func (i NodeManagementArgs) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return i.ToNodeManagementPtrOutputWithContext(context.Background())
}

func (i NodeManagementArgs) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementOutput).ToNodeManagementPtrOutputWithContext(ctx)
}

// NodeManagementPtrInput is an input type that accepts NodeManagementArgs, NodeManagementPtr and NodeManagementPtrOutput values.
// You can construct a concrete instance of `NodeManagementPtrInput` via:
//
//	        NodeManagementArgs{...}
//
//	or:
//
//	        nil
type NodeManagementPtrInput interface {
	pulumi.Input

	ToNodeManagementPtrOutput() NodeManagementPtrOutput
	ToNodeManagementPtrOutputWithContext(context.Context) NodeManagementPtrOutput
}

type nodeManagementPtrType NodeManagementArgs

func NodeManagementPtr(v *NodeManagementArgs) NodeManagementPtrInput {
	return (*nodeManagementPtrType)(v)
}

func (*nodeManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeManagement)(nil)).Elem()
}

func (i *nodeManagementPtrType) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return i.ToNodeManagementPtrOutputWithContext(context.Background())
}

func (i *nodeManagementPtrType) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeManagementPtrOutput)
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementOutput struct{ *pulumi.OutputState }

func (NodeManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeManagement)(nil)).Elem()
}

func (o NodeManagementOutput) ToNodeManagementOutput() NodeManagementOutput {
	return o
}

func (o NodeManagementOutput) ToNodeManagementOutputWithContext(ctx context.Context) NodeManagementOutput {
	return o
}

func (o NodeManagementOutput) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return o.ToNodeManagementPtrOutputWithContext(context.Background())
}

func (o NodeManagementOutput) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeManagement) *NodeManagement {
		return &v
	}).(NodeManagementPtrOutput)
}

// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
func (o NodeManagementOutput) AutoRepair() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeManagement) *bool { return v.AutoRepair }).(pulumi.BoolPtrOutput)
}

// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
func (o NodeManagementOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeManagement) *bool { return v.AutoUpgrade }).(pulumi.BoolPtrOutput)
}

// Specifies the Auto Upgrade knobs for the node pool.
func (o NodeManagementOutput) UpgradeOptions() AutoUpgradeOptionsPtrOutput {
	return o.ApplyT(func(v NodeManagement) *AutoUpgradeOptions { return v.UpgradeOptions }).(AutoUpgradeOptionsPtrOutput)
}

type NodeManagementPtrOutput struct{ *pulumi.OutputState }

func (NodeManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeManagement)(nil)).Elem()
}

func (o NodeManagementPtrOutput) ToNodeManagementPtrOutput() NodeManagementPtrOutput {
	return o
}

func (o NodeManagementPtrOutput) ToNodeManagementPtrOutputWithContext(ctx context.Context) NodeManagementPtrOutput {
	return o
}

func (o NodeManagementPtrOutput) Elem() NodeManagementOutput {
	return o.ApplyT(func(v *NodeManagement) NodeManagement {
		if v != nil {
			return *v
		}
		var ret NodeManagement
		return ret
	}).(NodeManagementOutput)
}

// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
func (o NodeManagementPtrOutput) AutoRepair() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeManagement) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRepair
	}).(pulumi.BoolPtrOutput)
}

// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
func (o NodeManagementPtrOutput) AutoUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeManagement) *bool {
		if v == nil {
			return nil
		}
		return v.AutoUpgrade
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Auto Upgrade knobs for the node pool.
func (o NodeManagementPtrOutput) UpgradeOptions() AutoUpgradeOptionsPtrOutput {
	return o.ApplyT(func(v *NodeManagement) *AutoUpgradeOptions {
		if v == nil {
			return nil
		}
		return v.UpgradeOptions
	}).(AutoUpgradeOptionsPtrOutput)
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementResponse struct {
	// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
	AutoRepair bool `pulumi:"autoRepair"`
	// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
	AutoUpgrade bool `pulumi:"autoUpgrade"`
	// Specifies the Auto Upgrade knobs for the node pool.
	UpgradeOptions AutoUpgradeOptionsResponse `pulumi:"upgradeOptions"`
}

// NodeManagement defines the set of node management services turned on for the node pool.
type NodeManagementResponseOutput struct{ *pulumi.OutputState }

func (NodeManagementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeManagementResponse)(nil)).Elem()
}

func (o NodeManagementResponseOutput) ToNodeManagementResponseOutput() NodeManagementResponseOutput {
	return o
}

func (o NodeManagementResponseOutput) ToNodeManagementResponseOutputWithContext(ctx context.Context) NodeManagementResponseOutput {
	return o
}

// A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
func (o NodeManagementResponseOutput) AutoRepair() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeManagementResponse) bool { return v.AutoRepair }).(pulumi.BoolOutput)
}

// A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
func (o NodeManagementResponseOutput) AutoUpgrade() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeManagementResponse) bool { return v.AutoUpgrade }).(pulumi.BoolOutput)
}

// Specifies the Auto Upgrade knobs for the node pool.
func (o NodeManagementResponseOutput) UpgradeOptions() AutoUpgradeOptionsResponseOutput {
	return o.ApplyT(func(v NodeManagementResponse) AutoUpgradeOptionsResponse { return v.UpgradeOptions }).(AutoUpgradeOptionsResponseOutput)
}

// Parameters for node pool-level network config.
type NodeNetworkConfig struct {
	// We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
	AdditionalNodeNetworkConfigs []AdditionalNodeNetworkConfig `pulumi:"additionalNodeNetworkConfigs"`
	// We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
	AdditionalPodNetworkConfigs []AdditionalPodNetworkConfig `pulumi:"additionalPodNetworkConfigs"`
	// Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
	CreatePodRange *bool `pulumi:"createPodRange"`
	// Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes
	EnablePrivateNodes *bool `pulumi:"enablePrivateNodes"`
	// Network bandwidth tier configuration.
	NetworkPerformanceConfig *NetworkPerformanceConfig `pulumi:"networkPerformanceConfig"`
	// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the nodepool. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is rounded off to next power of 2 and we then double that to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
	PodCidrOverprovisionConfig *PodCIDROverprovisionConfig `pulumi:"podCidrOverprovisionConfig"`
	// The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
	PodIpv4CidrBlock *string `pulumi:"podIpv4CidrBlock"`
	// The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
	PodRange *string `pulumi:"podRange"`
}

// NodeNetworkConfigInput is an input type that accepts NodeNetworkConfigArgs and NodeNetworkConfigOutput values.
// You can construct a concrete instance of `NodeNetworkConfigInput` via:
//
//	NodeNetworkConfigArgs{...}
type NodeNetworkConfigInput interface {
	pulumi.Input

	ToNodeNetworkConfigOutput() NodeNetworkConfigOutput
	ToNodeNetworkConfigOutputWithContext(context.Context) NodeNetworkConfigOutput
}

// Parameters for node pool-level network config.
type NodeNetworkConfigArgs struct {
	// We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
	AdditionalNodeNetworkConfigs AdditionalNodeNetworkConfigArrayInput `pulumi:"additionalNodeNetworkConfigs"`
	// We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
	AdditionalPodNetworkConfigs AdditionalPodNetworkConfigArrayInput `pulumi:"additionalPodNetworkConfigs"`
	// Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
	CreatePodRange pulumi.BoolPtrInput `pulumi:"createPodRange"`
	// Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes
	EnablePrivateNodes pulumi.BoolPtrInput `pulumi:"enablePrivateNodes"`
	// Network bandwidth tier configuration.
	NetworkPerformanceConfig NetworkPerformanceConfigPtrInput `pulumi:"networkPerformanceConfig"`
	// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the nodepool. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is rounded off to next power of 2 and we then double that to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
	PodCidrOverprovisionConfig PodCIDROverprovisionConfigPtrInput `pulumi:"podCidrOverprovisionConfig"`
	// The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
	PodIpv4CidrBlock pulumi.StringPtrInput `pulumi:"podIpv4CidrBlock"`
	// The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
	PodRange pulumi.StringPtrInput `pulumi:"podRange"`
}

func (NodeNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeNetworkConfig)(nil)).Elem()
}

func (i NodeNetworkConfigArgs) ToNodeNetworkConfigOutput() NodeNetworkConfigOutput {
	return i.ToNodeNetworkConfigOutputWithContext(context.Background())
}

func (i NodeNetworkConfigArgs) ToNodeNetworkConfigOutputWithContext(ctx context.Context) NodeNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeNetworkConfigOutput)
}

func (i NodeNetworkConfigArgs) ToNodeNetworkConfigPtrOutput() NodeNetworkConfigPtrOutput {
	return i.ToNodeNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NodeNetworkConfigArgs) ToNodeNetworkConfigPtrOutputWithContext(ctx context.Context) NodeNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeNetworkConfigOutput).ToNodeNetworkConfigPtrOutputWithContext(ctx)
}

// NodeNetworkConfigPtrInput is an input type that accepts NodeNetworkConfigArgs, NodeNetworkConfigPtr and NodeNetworkConfigPtrOutput values.
// You can construct a concrete instance of `NodeNetworkConfigPtrInput` via:
//
//	        NodeNetworkConfigArgs{...}
//
//	or:
//
//	        nil
type NodeNetworkConfigPtrInput interface {
	pulumi.Input

	ToNodeNetworkConfigPtrOutput() NodeNetworkConfigPtrOutput
	ToNodeNetworkConfigPtrOutputWithContext(context.Context) NodeNetworkConfigPtrOutput
}

type nodeNetworkConfigPtrType NodeNetworkConfigArgs

func NodeNetworkConfigPtr(v *NodeNetworkConfigArgs) NodeNetworkConfigPtrInput {
	return (*nodeNetworkConfigPtrType)(v)
}

func (*nodeNetworkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeNetworkConfig)(nil)).Elem()
}

func (i *nodeNetworkConfigPtrType) ToNodeNetworkConfigPtrOutput() NodeNetworkConfigPtrOutput {
	return i.ToNodeNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *nodeNetworkConfigPtrType) ToNodeNetworkConfigPtrOutputWithContext(ctx context.Context) NodeNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeNetworkConfigPtrOutput)
}

// Parameters for node pool-level network config.
type NodeNetworkConfigOutput struct{ *pulumi.OutputState }

func (NodeNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeNetworkConfig)(nil)).Elem()
}

func (o NodeNetworkConfigOutput) ToNodeNetworkConfigOutput() NodeNetworkConfigOutput {
	return o
}

func (o NodeNetworkConfigOutput) ToNodeNetworkConfigOutputWithContext(ctx context.Context) NodeNetworkConfigOutput {
	return o
}

func (o NodeNetworkConfigOutput) ToNodeNetworkConfigPtrOutput() NodeNetworkConfigPtrOutput {
	return o.ToNodeNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NodeNetworkConfigOutput) ToNodeNetworkConfigPtrOutputWithContext(ctx context.Context) NodeNetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeNetworkConfig) *NodeNetworkConfig {
		return &v
	}).(NodeNetworkConfigPtrOutput)
}

// We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
func (o NodeNetworkConfigOutput) AdditionalNodeNetworkConfigs() AdditionalNodeNetworkConfigArrayOutput {
	return o.ApplyT(func(v NodeNetworkConfig) []AdditionalNodeNetworkConfig { return v.AdditionalNodeNetworkConfigs }).(AdditionalNodeNetworkConfigArrayOutput)
}

// We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
func (o NodeNetworkConfigOutput) AdditionalPodNetworkConfigs() AdditionalPodNetworkConfigArrayOutput {
	return o.ApplyT(func(v NodeNetworkConfig) []AdditionalPodNetworkConfig { return v.AdditionalPodNetworkConfigs }).(AdditionalPodNetworkConfigArrayOutput)
}

// Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
func (o NodeNetworkConfigOutput) CreatePodRange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeNetworkConfig) *bool { return v.CreatePodRange }).(pulumi.BoolPtrOutput)
}

// Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes
func (o NodeNetworkConfigOutput) EnablePrivateNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeNetworkConfig) *bool { return v.EnablePrivateNodes }).(pulumi.BoolPtrOutput)
}

// Network bandwidth tier configuration.
func (o NodeNetworkConfigOutput) NetworkPerformanceConfig() NetworkPerformanceConfigPtrOutput {
	return o.ApplyT(func(v NodeNetworkConfig) *NetworkPerformanceConfig { return v.NetworkPerformanceConfig }).(NetworkPerformanceConfigPtrOutput)
}

// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the nodepool. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is rounded off to next power of 2 and we then double that to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
func (o NodeNetworkConfigOutput) PodCidrOverprovisionConfig() PodCIDROverprovisionConfigPtrOutput {
	return o.ApplyT(func(v NodeNetworkConfig) *PodCIDROverprovisionConfig { return v.PodCidrOverprovisionConfig }).(PodCIDROverprovisionConfigPtrOutput)
}

// The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
func (o NodeNetworkConfigOutput) PodIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeNetworkConfig) *string { return v.PodIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
func (o NodeNetworkConfigOutput) PodRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeNetworkConfig) *string { return v.PodRange }).(pulumi.StringPtrOutput)
}

type NodeNetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeNetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeNetworkConfig)(nil)).Elem()
}

func (o NodeNetworkConfigPtrOutput) ToNodeNetworkConfigPtrOutput() NodeNetworkConfigPtrOutput {
	return o
}

func (o NodeNetworkConfigPtrOutput) ToNodeNetworkConfigPtrOutputWithContext(ctx context.Context) NodeNetworkConfigPtrOutput {
	return o
}

func (o NodeNetworkConfigPtrOutput) Elem() NodeNetworkConfigOutput {
	return o.ApplyT(func(v *NodeNetworkConfig) NodeNetworkConfig {
		if v != nil {
			return *v
		}
		var ret NodeNetworkConfig
		return ret
	}).(NodeNetworkConfigOutput)
}

// We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
func (o NodeNetworkConfigPtrOutput) AdditionalNodeNetworkConfigs() AdditionalNodeNetworkConfigArrayOutput {
	return o.ApplyT(func(v *NodeNetworkConfig) []AdditionalNodeNetworkConfig {
		if v == nil {
			return nil
		}
		return v.AdditionalNodeNetworkConfigs
	}).(AdditionalNodeNetworkConfigArrayOutput)
}

// We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
func (o NodeNetworkConfigPtrOutput) AdditionalPodNetworkConfigs() AdditionalPodNetworkConfigArrayOutput {
	return o.ApplyT(func(v *NodeNetworkConfig) []AdditionalPodNetworkConfig {
		if v == nil {
			return nil
		}
		return v.AdditionalPodNetworkConfigs
	}).(AdditionalPodNetworkConfigArrayOutput)
}

// Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
func (o NodeNetworkConfigPtrOutput) CreatePodRange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeNetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CreatePodRange
	}).(pulumi.BoolPtrOutput)
}

// Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes
func (o NodeNetworkConfigPtrOutput) EnablePrivateNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeNetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateNodes
	}).(pulumi.BoolPtrOutput)
}

// Network bandwidth tier configuration.
func (o NodeNetworkConfigPtrOutput) NetworkPerformanceConfig() NetworkPerformanceConfigPtrOutput {
	return o.ApplyT(func(v *NodeNetworkConfig) *NetworkPerformanceConfig {
		if v == nil {
			return nil
		}
		return v.NetworkPerformanceConfig
	}).(NetworkPerformanceConfigPtrOutput)
}

// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the nodepool. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is rounded off to next power of 2 and we then double that to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
func (o NodeNetworkConfigPtrOutput) PodCidrOverprovisionConfig() PodCIDROverprovisionConfigPtrOutput {
	return o.ApplyT(func(v *NodeNetworkConfig) *PodCIDROverprovisionConfig {
		if v == nil {
			return nil
		}
		return v.PodCidrOverprovisionConfig
	}).(PodCIDROverprovisionConfigPtrOutput)
}

// The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
func (o NodeNetworkConfigPtrOutput) PodIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeNetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.PodIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
func (o NodeNetworkConfigPtrOutput) PodRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeNetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.PodRange
	}).(pulumi.StringPtrOutput)
}

// Parameters for node pool-level network config.
type NodeNetworkConfigResponse struct {
	// We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
	AdditionalNodeNetworkConfigs []AdditionalNodeNetworkConfigResponse `pulumi:"additionalNodeNetworkConfigs"`
	// We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
	AdditionalPodNetworkConfigs []AdditionalPodNetworkConfigResponse `pulumi:"additionalPodNetworkConfigs"`
	// Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
	CreatePodRange bool `pulumi:"createPodRange"`
	// Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes
	EnablePrivateNodes bool `pulumi:"enablePrivateNodes"`
	// Network bandwidth tier configuration.
	NetworkPerformanceConfig NetworkPerformanceConfigResponse `pulumi:"networkPerformanceConfig"`
	// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the nodepool. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is rounded off to next power of 2 and we then double that to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
	PodCidrOverprovisionConfig PodCIDROverprovisionConfigResponse `pulumi:"podCidrOverprovisionConfig"`
	// The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
	PodIpv4CidrBlock string `pulumi:"podIpv4CidrBlock"`
	// [Output only] The utilization of the IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.
	PodIpv4RangeUtilization float64 `pulumi:"podIpv4RangeUtilization"`
	// The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
	PodRange string `pulumi:"podRange"`
}

// Parameters for node pool-level network config.
type NodeNetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NodeNetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeNetworkConfigResponse)(nil)).Elem()
}

func (o NodeNetworkConfigResponseOutput) ToNodeNetworkConfigResponseOutput() NodeNetworkConfigResponseOutput {
	return o
}

func (o NodeNetworkConfigResponseOutput) ToNodeNetworkConfigResponseOutputWithContext(ctx context.Context) NodeNetworkConfigResponseOutput {
	return o
}

// We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
func (o NodeNetworkConfigResponseOutput) AdditionalNodeNetworkConfigs() AdditionalNodeNetworkConfigResponseArrayOutput {
	return o.ApplyT(func(v NodeNetworkConfigResponse) []AdditionalNodeNetworkConfigResponse {
		return v.AdditionalNodeNetworkConfigs
	}).(AdditionalNodeNetworkConfigResponseArrayOutput)
}

// We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
func (o NodeNetworkConfigResponseOutput) AdditionalPodNetworkConfigs() AdditionalPodNetworkConfigResponseArrayOutput {
	return o.ApplyT(func(v NodeNetworkConfigResponse) []AdditionalPodNetworkConfigResponse {
		return v.AdditionalPodNetworkConfigs
	}).(AdditionalPodNetworkConfigResponseArrayOutput)
}

// Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
func (o NodeNetworkConfigResponseOutput) CreatePodRange() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeNetworkConfigResponse) bool { return v.CreatePodRange }).(pulumi.BoolOutput)
}

// Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes
func (o NodeNetworkConfigResponseOutput) EnablePrivateNodes() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeNetworkConfigResponse) bool { return v.EnablePrivateNodes }).(pulumi.BoolOutput)
}

// Network bandwidth tier configuration.
func (o NodeNetworkConfigResponseOutput) NetworkPerformanceConfig() NetworkPerformanceConfigResponseOutput {
	return o.ApplyT(func(v NodeNetworkConfigResponse) NetworkPerformanceConfigResponse { return v.NetworkPerformanceConfig }).(NetworkPerformanceConfigResponseOutput)
}

// [PRIVATE FIELD] Pod CIDR size overprovisioning config for the nodepool. Pod CIDR size per node depends on max_pods_per_node. By default, the value of max_pods_per_node is rounded off to next power of 2 and we then double that to get the size of pod CIDR block per node. Example: max_pods_per_node of 30 would result in 64 IPs (/26). This config can disable the doubling of IPs (we still round off to next power of 2) Example: max_pods_per_node of 30 will result in 32 IPs (/27) when overprovisioning is disabled.
func (o NodeNetworkConfigResponseOutput) PodCidrOverprovisionConfig() PodCIDROverprovisionConfigResponseOutput {
	return o.ApplyT(func(v NodeNetworkConfigResponse) PodCIDROverprovisionConfigResponse {
		return v.PodCidrOverprovisionConfig
	}).(PodCIDROverprovisionConfigResponseOutput)
}

// The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
func (o NodeNetworkConfigResponseOutput) PodIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v NodeNetworkConfigResponse) string { return v.PodIpv4CidrBlock }).(pulumi.StringOutput)
}

// [Output only] The utilization of the IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.
func (o NodeNetworkConfigResponseOutput) PodIpv4RangeUtilization() pulumi.Float64Output {
	return o.ApplyT(func(v NodeNetworkConfigResponse) float64 { return v.PodIpv4RangeUtilization }).(pulumi.Float64Output)
}

// The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
func (o NodeNetworkConfigResponseOutput) PodRange() pulumi.StringOutput {
	return o.ApplyT(func(v NodeNetworkConfigResponse) string { return v.PodRange }).(pulumi.StringOutput)
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolType struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling *NodePoolAutoscaling `pulumi:"autoscaling"`
	// Enable best effort provisioning for nodes
	BestEffortProvisioning *BestEffortProvisioning `pulumi:"bestEffortProvisioning"`
	// Which conditions caused the current node pool state.
	Conditions []StatusCondition `pulumi:"conditions"`
	// The node configuration of the pool.
	Config *NodeConfig `pulumi:"config"`
	// This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount *int `pulumi:"initialNodeCount"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations []string `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management *NodeManagement `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint *MaxPodsConstraint `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name *string `pulumi:"name"`
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig *NodeNetworkConfig `pulumi:"networkConfig"`
	// Specifies the node placement policy.
	PlacementPolicy *PlacementPolicy `pulumi:"placementPolicy"`
	// Specifies the configuration of queued provisioning.
	QueuedProvisioning *QueuedProvisioning `pulumi:"queuedProvisioning"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings *UpgradeSettings `pulumi:"upgradeSettings"`
	// The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
	Version *string `pulumi:"version"`
}

// NodePoolTypeInput is an input type that accepts NodePoolTypeArgs and NodePoolTypeOutput values.
// You can construct a concrete instance of `NodePoolTypeInput` via:
//
//	NodePoolTypeArgs{...}
type NodePoolTypeInput interface {
	pulumi.Input

	ToNodePoolTypeOutput() NodePoolTypeOutput
	ToNodePoolTypeOutputWithContext(context.Context) NodePoolTypeOutput
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolTypeArgs struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling NodePoolAutoscalingPtrInput `pulumi:"autoscaling"`
	// Enable best effort provisioning for nodes
	BestEffortProvisioning BestEffortProvisioningPtrInput `pulumi:"bestEffortProvisioning"`
	// Which conditions caused the current node pool state.
	Conditions StatusConditionArrayInput `pulumi:"conditions"`
	// The node configuration of the pool.
	Config NodeConfigPtrInput `pulumi:"config"`
	// This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount pulumi.IntPtrInput `pulumi:"initialNodeCount"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management NodeManagementPtrInput `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint MaxPodsConstraintPtrInput `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig NodeNetworkConfigPtrInput `pulumi:"networkConfig"`
	// Specifies the node placement policy.
	PlacementPolicy PlacementPolicyPtrInput `pulumi:"placementPolicy"`
	// Specifies the configuration of queued provisioning.
	QueuedProvisioning QueuedProvisioningPtrInput `pulumi:"queuedProvisioning"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings UpgradeSettingsPtrInput `pulumi:"upgradeSettings"`
	// The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NodePoolTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolType)(nil)).Elem()
}

func (i NodePoolTypeArgs) ToNodePoolTypeOutput() NodePoolTypeOutput {
	return i.ToNodePoolTypeOutputWithContext(context.Background())
}

func (i NodePoolTypeArgs) ToNodePoolTypeOutputWithContext(ctx context.Context) NodePoolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTypeOutput)
}

// NodePoolTypeArrayInput is an input type that accepts NodePoolTypeArray and NodePoolTypeArrayOutput values.
// You can construct a concrete instance of `NodePoolTypeArrayInput` via:
//
//	NodePoolTypeArray{ NodePoolTypeArgs{...} }
type NodePoolTypeArrayInput interface {
	pulumi.Input

	ToNodePoolTypeArrayOutput() NodePoolTypeArrayOutput
	ToNodePoolTypeArrayOutputWithContext(context.Context) NodePoolTypeArrayOutput
}

type NodePoolTypeArray []NodePoolTypeInput

func (NodePoolTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolType)(nil)).Elem()
}

func (i NodePoolTypeArray) ToNodePoolTypeArrayOutput() NodePoolTypeArrayOutput {
	return i.ToNodePoolTypeArrayOutputWithContext(context.Background())
}

func (i NodePoolTypeArray) ToNodePoolTypeArrayOutputWithContext(ctx context.Context) NodePoolTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTypeArrayOutput)
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolTypeOutput struct{ *pulumi.OutputState }

func (NodePoolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolType)(nil)).Elem()
}

func (o NodePoolTypeOutput) ToNodePoolTypeOutput() NodePoolTypeOutput {
	return o
}

func (o NodePoolTypeOutput) ToNodePoolTypeOutputWithContext(ctx context.Context) NodePoolTypeOutput {
	return o
}

// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
func (o NodePoolTypeOutput) Autoscaling() NodePoolAutoscalingPtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodePoolAutoscaling { return v.Autoscaling }).(NodePoolAutoscalingPtrOutput)
}

// Enable best effort provisioning for nodes
func (o NodePoolTypeOutput) BestEffortProvisioning() BestEffortProvisioningPtrOutput {
	return o.ApplyT(func(v NodePoolType) *BestEffortProvisioning { return v.BestEffortProvisioning }).(BestEffortProvisioningPtrOutput)
}

// Which conditions caused the current node pool state.
func (o NodePoolTypeOutput) Conditions() StatusConditionArrayOutput {
	return o.ApplyT(func(v NodePoolType) []StatusCondition { return v.Conditions }).(StatusConditionArrayOutput)
}

// The node configuration of the pool.
func (o NodePoolTypeOutput) Config() NodeConfigPtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodeConfig { return v.Config }).(NodeConfigPtrOutput)
}

// This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
func (o NodePoolTypeOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
func (o NodePoolTypeOutput) InitialNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolType) *int { return v.InitialNodeCount }).(pulumi.IntPtrOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
func (o NodePoolTypeOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodePoolType) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// NodeManagement configuration for this NodePool.
func (o NodePoolTypeOutput) Management() NodeManagementPtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodeManagement { return v.Management }).(NodeManagementPtrOutput)
}

// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
func (o NodePoolTypeOutput) MaxPodsConstraint() MaxPodsConstraintPtrOutput {
	return o.ApplyT(func(v NodePoolType) *MaxPodsConstraint { return v.MaxPodsConstraint }).(MaxPodsConstraintPtrOutput)
}

// The name of the node pool.
func (o NodePoolTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
func (o NodePoolTypeOutput) NetworkConfig() NodeNetworkConfigPtrOutput {
	return o.ApplyT(func(v NodePoolType) *NodeNetworkConfig { return v.NetworkConfig }).(NodeNetworkConfigPtrOutput)
}

// Specifies the node placement policy.
func (o NodePoolTypeOutput) PlacementPolicy() PlacementPolicyPtrOutput {
	return o.ApplyT(func(v NodePoolType) *PlacementPolicy { return v.PlacementPolicy }).(PlacementPolicyPtrOutput)
}

// Specifies the configuration of queued provisioning.
func (o NodePoolTypeOutput) QueuedProvisioning() QueuedProvisioningPtrOutput {
	return o.ApplyT(func(v NodePoolType) *QueuedProvisioning { return v.QueuedProvisioning }).(QueuedProvisioningPtrOutput)
}

// Upgrade settings control disruption and speed of the upgrade.
func (o NodePoolTypeOutput) UpgradeSettings() UpgradeSettingsPtrOutput {
	return o.ApplyT(func(v NodePoolType) *UpgradeSettings { return v.UpgradeSettings }).(UpgradeSettingsPtrOutput)
}

// The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
func (o NodePoolTypeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolType) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NodePoolTypeArrayOutput struct{ *pulumi.OutputState }

func (NodePoolTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolType)(nil)).Elem()
}

func (o NodePoolTypeArrayOutput) ToNodePoolTypeArrayOutput() NodePoolTypeArrayOutput {
	return o
}

func (o NodePoolTypeArrayOutput) ToNodePoolTypeArrayOutputWithContext(ctx context.Context) NodePoolTypeArrayOutput {
	return o
}

func (o NodePoolTypeArrayOutput) Index(i pulumi.IntInput) NodePoolTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolType {
		return vs[0].([]NodePoolType)[vs[1].(int)]
	}).(NodePoolTypeOutput)
}

// Node pool configs that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters.
type NodePoolAutoConfig struct {
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster creation. Each tag within the list must comply with RFC1035.
	NetworkTags *NetworkTags `pulumi:"networkTags"`
	// Resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies.
	ResourceManagerTags *ResourceManagerTags `pulumi:"resourceManagerTags"`
}

// NodePoolAutoConfigInput is an input type that accepts NodePoolAutoConfigArgs and NodePoolAutoConfigOutput values.
// You can construct a concrete instance of `NodePoolAutoConfigInput` via:
//
//	NodePoolAutoConfigArgs{...}
type NodePoolAutoConfigInput interface {
	pulumi.Input

	ToNodePoolAutoConfigOutput() NodePoolAutoConfigOutput
	ToNodePoolAutoConfigOutputWithContext(context.Context) NodePoolAutoConfigOutput
}

// Node pool configs that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters.
type NodePoolAutoConfigArgs struct {
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster creation. Each tag within the list must comply with RFC1035.
	NetworkTags NetworkTagsPtrInput `pulumi:"networkTags"`
	// Resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies.
	ResourceManagerTags ResourceManagerTagsPtrInput `pulumi:"resourceManagerTags"`
}

func (NodePoolAutoConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoConfig)(nil)).Elem()
}

func (i NodePoolAutoConfigArgs) ToNodePoolAutoConfigOutput() NodePoolAutoConfigOutput {
	return i.ToNodePoolAutoConfigOutputWithContext(context.Background())
}

func (i NodePoolAutoConfigArgs) ToNodePoolAutoConfigOutputWithContext(ctx context.Context) NodePoolAutoConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoConfigOutput)
}

func (i NodePoolAutoConfigArgs) ToNodePoolAutoConfigPtrOutput() NodePoolAutoConfigPtrOutput {
	return i.ToNodePoolAutoConfigPtrOutputWithContext(context.Background())
}

func (i NodePoolAutoConfigArgs) ToNodePoolAutoConfigPtrOutputWithContext(ctx context.Context) NodePoolAutoConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoConfigOutput).ToNodePoolAutoConfigPtrOutputWithContext(ctx)
}

// NodePoolAutoConfigPtrInput is an input type that accepts NodePoolAutoConfigArgs, NodePoolAutoConfigPtr and NodePoolAutoConfigPtrOutput values.
// You can construct a concrete instance of `NodePoolAutoConfigPtrInput` via:
//
//	        NodePoolAutoConfigArgs{...}
//
//	or:
//
//	        nil
type NodePoolAutoConfigPtrInput interface {
	pulumi.Input

	ToNodePoolAutoConfigPtrOutput() NodePoolAutoConfigPtrOutput
	ToNodePoolAutoConfigPtrOutputWithContext(context.Context) NodePoolAutoConfigPtrOutput
}

type nodePoolAutoConfigPtrType NodePoolAutoConfigArgs

func NodePoolAutoConfigPtr(v *NodePoolAutoConfigArgs) NodePoolAutoConfigPtrInput {
	return (*nodePoolAutoConfigPtrType)(v)
}

func (*nodePoolAutoConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoConfig)(nil)).Elem()
}

func (i *nodePoolAutoConfigPtrType) ToNodePoolAutoConfigPtrOutput() NodePoolAutoConfigPtrOutput {
	return i.ToNodePoolAutoConfigPtrOutputWithContext(context.Background())
}

func (i *nodePoolAutoConfigPtrType) ToNodePoolAutoConfigPtrOutputWithContext(ctx context.Context) NodePoolAutoConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoConfigPtrOutput)
}

// Node pool configs that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters.
type NodePoolAutoConfigOutput struct{ *pulumi.OutputState }

func (NodePoolAutoConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoConfig)(nil)).Elem()
}

func (o NodePoolAutoConfigOutput) ToNodePoolAutoConfigOutput() NodePoolAutoConfigOutput {
	return o
}

func (o NodePoolAutoConfigOutput) ToNodePoolAutoConfigOutputWithContext(ctx context.Context) NodePoolAutoConfigOutput {
	return o
}

func (o NodePoolAutoConfigOutput) ToNodePoolAutoConfigPtrOutput() NodePoolAutoConfigPtrOutput {
	return o.ToNodePoolAutoConfigPtrOutputWithContext(context.Background())
}

func (o NodePoolAutoConfigOutput) ToNodePoolAutoConfigPtrOutputWithContext(ctx context.Context) NodePoolAutoConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolAutoConfig) *NodePoolAutoConfig {
		return &v
	}).(NodePoolAutoConfigPtrOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster creation. Each tag within the list must comply with RFC1035.
func (o NodePoolAutoConfigOutput) NetworkTags() NetworkTagsPtrOutput {
	return o.ApplyT(func(v NodePoolAutoConfig) *NetworkTags { return v.NetworkTags }).(NetworkTagsPtrOutput)
}

// Resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies.
func (o NodePoolAutoConfigOutput) ResourceManagerTags() ResourceManagerTagsPtrOutput {
	return o.ApplyT(func(v NodePoolAutoConfig) *ResourceManagerTags { return v.ResourceManagerTags }).(ResourceManagerTagsPtrOutput)
}

type NodePoolAutoConfigPtrOutput struct{ *pulumi.OutputState }

func (NodePoolAutoConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoConfig)(nil)).Elem()
}

func (o NodePoolAutoConfigPtrOutput) ToNodePoolAutoConfigPtrOutput() NodePoolAutoConfigPtrOutput {
	return o
}

func (o NodePoolAutoConfigPtrOutput) ToNodePoolAutoConfigPtrOutputWithContext(ctx context.Context) NodePoolAutoConfigPtrOutput {
	return o
}

func (o NodePoolAutoConfigPtrOutput) Elem() NodePoolAutoConfigOutput {
	return o.ApplyT(func(v *NodePoolAutoConfig) NodePoolAutoConfig {
		if v != nil {
			return *v
		}
		var ret NodePoolAutoConfig
		return ret
	}).(NodePoolAutoConfigOutput)
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster creation. Each tag within the list must comply with RFC1035.
func (o NodePoolAutoConfigPtrOutput) NetworkTags() NetworkTagsPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoConfig) *NetworkTags {
		if v == nil {
			return nil
		}
		return v.NetworkTags
	}).(NetworkTagsPtrOutput)
}

// Resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies.
func (o NodePoolAutoConfigPtrOutput) ResourceManagerTags() ResourceManagerTagsPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoConfig) *ResourceManagerTags {
		if v == nil {
			return nil
		}
		return v.ResourceManagerTags
	}).(ResourceManagerTagsPtrOutput)
}

// Node pool configs that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters.
type NodePoolAutoConfigResponse struct {
	// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster creation. Each tag within the list must comply with RFC1035.
	NetworkTags NetworkTagsResponse `pulumi:"networkTags"`
	// Resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies.
	ResourceManagerTags ResourceManagerTagsResponse `pulumi:"resourceManagerTags"`
}

// Node pool configs that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters.
type NodePoolAutoConfigResponseOutput struct{ *pulumi.OutputState }

func (NodePoolAutoConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoConfigResponse)(nil)).Elem()
}

func (o NodePoolAutoConfigResponseOutput) ToNodePoolAutoConfigResponseOutput() NodePoolAutoConfigResponseOutput {
	return o
}

func (o NodePoolAutoConfigResponseOutput) ToNodePoolAutoConfigResponseOutputWithContext(ctx context.Context) NodePoolAutoConfigResponseOutput {
	return o
}

// The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster creation. Each tag within the list must comply with RFC1035.
func (o NodePoolAutoConfigResponseOutput) NetworkTags() NetworkTagsResponseOutput {
	return o.ApplyT(func(v NodePoolAutoConfigResponse) NetworkTagsResponse { return v.NetworkTags }).(NetworkTagsResponseOutput)
}

// Resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies.
func (o NodePoolAutoConfigResponseOutput) ResourceManagerTags() ResourceManagerTagsResponseOutput {
	return o.ApplyT(func(v NodePoolAutoConfigResponse) ResourceManagerTagsResponse { return v.ResourceManagerTags }).(ResourceManagerTagsResponseOutput)
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscaling struct {
	// Can this node pool be deleted automatically.
	Autoprovisioned *bool `pulumi:"autoprovisioned"`
	// Is autoscaling enabled for this node pool.
	Enabled *bool `pulumi:"enabled"`
	// Location policy used when scaling up a nodepool.
	LocationPolicy *NodePoolAutoscalingLocationPolicy `pulumi:"locationPolicy"`
	// Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.
	MaxNodeCount *int `pulumi:"maxNodeCount"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
	TotalMaxNodeCount *int `pulumi:"totalMaxNodeCount"`
	// Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
	TotalMinNodeCount *int `pulumi:"totalMinNodeCount"`
}

// NodePoolAutoscalingInput is an input type that accepts NodePoolAutoscalingArgs and NodePoolAutoscalingOutput values.
// You can construct a concrete instance of `NodePoolAutoscalingInput` via:
//
//	NodePoolAutoscalingArgs{...}
type NodePoolAutoscalingInput interface {
	pulumi.Input

	ToNodePoolAutoscalingOutput() NodePoolAutoscalingOutput
	ToNodePoolAutoscalingOutputWithContext(context.Context) NodePoolAutoscalingOutput
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingArgs struct {
	// Can this node pool be deleted automatically.
	Autoprovisioned pulumi.BoolPtrInput `pulumi:"autoprovisioned"`
	// Is autoscaling enabled for this node pool.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Location policy used when scaling up a nodepool.
	LocationPolicy NodePoolAutoscalingLocationPolicyPtrInput `pulumi:"locationPolicy"`
	// Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.
	MaxNodeCount pulumi.IntPtrInput `pulumi:"maxNodeCount"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount pulumi.IntPtrInput `pulumi:"minNodeCount"`
	// Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
	TotalMaxNodeCount pulumi.IntPtrInput `pulumi:"totalMaxNodeCount"`
	// Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
	TotalMinNodeCount pulumi.IntPtrInput `pulumi:"totalMinNodeCount"`
}

func (NodePoolAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoscaling)(nil)).Elem()
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingOutput() NodePoolAutoscalingOutput {
	return i.ToNodePoolAutoscalingOutputWithContext(context.Background())
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingOutputWithContext(ctx context.Context) NodePoolAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingOutput)
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return i.ToNodePoolAutoscalingPtrOutputWithContext(context.Background())
}

func (i NodePoolAutoscalingArgs) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingOutput).ToNodePoolAutoscalingPtrOutputWithContext(ctx)
}

// NodePoolAutoscalingPtrInput is an input type that accepts NodePoolAutoscalingArgs, NodePoolAutoscalingPtr and NodePoolAutoscalingPtrOutput values.
// You can construct a concrete instance of `NodePoolAutoscalingPtrInput` via:
//
//	        NodePoolAutoscalingArgs{...}
//
//	or:
//
//	        nil
type NodePoolAutoscalingPtrInput interface {
	pulumi.Input

	ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput
	ToNodePoolAutoscalingPtrOutputWithContext(context.Context) NodePoolAutoscalingPtrOutput
}

type nodePoolAutoscalingPtrType NodePoolAutoscalingArgs

func NodePoolAutoscalingPtr(v *NodePoolAutoscalingArgs) NodePoolAutoscalingPtrInput {
	return (*nodePoolAutoscalingPtrType)(v)
}

func (*nodePoolAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoscaling)(nil)).Elem()
}

func (i *nodePoolAutoscalingPtrType) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return i.ToNodePoolAutoscalingPtrOutputWithContext(context.Background())
}

func (i *nodePoolAutoscalingPtrType) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolAutoscalingPtrOutput)
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingOutput struct{ *pulumi.OutputState }

func (NodePoolAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoscaling)(nil)).Elem()
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingOutput() NodePoolAutoscalingOutput {
	return o
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingOutputWithContext(ctx context.Context) NodePoolAutoscalingOutput {
	return o
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return o.ToNodePoolAutoscalingPtrOutputWithContext(context.Background())
}

func (o NodePoolAutoscalingOutput) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolAutoscaling) *NodePoolAutoscaling {
		return &v
	}).(NodePoolAutoscalingPtrOutput)
}

// Can this node pool be deleted automatically.
func (o NodePoolAutoscalingOutput) Autoprovisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *bool { return v.Autoprovisioned }).(pulumi.BoolPtrOutput)
}

// Is autoscaling enabled for this node pool.
func (o NodePoolAutoscalingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Location policy used when scaling up a nodepool.
func (o NodePoolAutoscalingOutput) LocationPolicy() NodePoolAutoscalingLocationPolicyPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *NodePoolAutoscalingLocationPolicy { return v.LocationPolicy }).(NodePoolAutoscalingLocationPolicyPtrOutput)
}

// Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.
func (o NodePoolAutoscalingOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *int { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.
func (o NodePoolAutoscalingOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

// Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
func (o NodePoolAutoscalingOutput) TotalMaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *int { return v.TotalMaxNodeCount }).(pulumi.IntPtrOutput)
}

// Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
func (o NodePoolAutoscalingOutput) TotalMinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolAutoscaling) *int { return v.TotalMinNodeCount }).(pulumi.IntPtrOutput)
}

type NodePoolAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (NodePoolAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolAutoscaling)(nil)).Elem()
}

func (o NodePoolAutoscalingPtrOutput) ToNodePoolAutoscalingPtrOutput() NodePoolAutoscalingPtrOutput {
	return o
}

func (o NodePoolAutoscalingPtrOutput) ToNodePoolAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolAutoscalingPtrOutput {
	return o
}

func (o NodePoolAutoscalingPtrOutput) Elem() NodePoolAutoscalingOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) NodePoolAutoscaling {
		if v != nil {
			return *v
		}
		var ret NodePoolAutoscaling
		return ret
	}).(NodePoolAutoscalingOutput)
}

// Can this node pool be deleted automatically.
func (o NodePoolAutoscalingPtrOutput) Autoprovisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Autoprovisioned
	}).(pulumi.BoolPtrOutput)
}

// Is autoscaling enabled for this node pool.
func (o NodePoolAutoscalingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Location policy used when scaling up a nodepool.
func (o NodePoolAutoscalingPtrOutput) LocationPolicy() NodePoolAutoscalingLocationPolicyPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *NodePoolAutoscalingLocationPolicy {
		if v == nil {
			return nil
		}
		return v.LocationPolicy
	}).(NodePoolAutoscalingLocationPolicyPtrOutput)
}

// Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.
func (o NodePoolAutoscalingPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.
func (o NodePoolAutoscalingPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
func (o NodePoolAutoscalingPtrOutput) TotalMaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.TotalMaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
func (o NodePoolAutoscalingPtrOutput) TotalMinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.TotalMinNodeCount
	}).(pulumi.IntPtrOutput)
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingResponse struct {
	// Can this node pool be deleted automatically.
	Autoprovisioned bool `pulumi:"autoprovisioned"`
	// Is autoscaling enabled for this node pool.
	Enabled bool `pulumi:"enabled"`
	// Location policy used when scaling up a nodepool.
	LocationPolicy string `pulumi:"locationPolicy"`
	// Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.
	MinNodeCount int `pulumi:"minNodeCount"`
	// Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
	TotalMaxNodeCount int `pulumi:"totalMaxNodeCount"`
	// Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
	TotalMinNodeCount int `pulumi:"totalMinNodeCount"`
}

// NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
type NodePoolAutoscalingResponseOutput struct{ *pulumi.OutputState }

func (NodePoolAutoscalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolAutoscalingResponse)(nil)).Elem()
}

func (o NodePoolAutoscalingResponseOutput) ToNodePoolAutoscalingResponseOutput() NodePoolAutoscalingResponseOutput {
	return o
}

func (o NodePoolAutoscalingResponseOutput) ToNodePoolAutoscalingResponseOutputWithContext(ctx context.Context) NodePoolAutoscalingResponseOutput {
	return o
}

// Can this node pool be deleted automatically.
func (o NodePoolAutoscalingResponseOutput) Autoprovisioned() pulumi.BoolOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) bool { return v.Autoprovisioned }).(pulumi.BoolOutput)
}

// Is autoscaling enabled for this node pool.
func (o NodePoolAutoscalingResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Location policy used when scaling up a nodepool.
func (o NodePoolAutoscalingResponseOutput) LocationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) string { return v.LocationPolicy }).(pulumi.StringOutput)
}

// Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.
func (o NodePoolAutoscalingResponseOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.
func (o NodePoolAutoscalingResponseOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

// Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
func (o NodePoolAutoscalingResponseOutput) TotalMaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) int { return v.TotalMaxNodeCount }).(pulumi.IntOutput)
}

// Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
func (o NodePoolAutoscalingResponseOutput) TotalMinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolAutoscalingResponse) int { return v.TotalMinNodeCount }).(pulumi.IntOutput)
}

// Subset of Nodepool message that has defaults.
type NodePoolDefaults struct {
	// Subset of NodeConfig message that has defaults.
	NodeConfigDefaults *NodeConfigDefaults `pulumi:"nodeConfigDefaults"`
}

// NodePoolDefaultsInput is an input type that accepts NodePoolDefaultsArgs and NodePoolDefaultsOutput values.
// You can construct a concrete instance of `NodePoolDefaultsInput` via:
//
//	NodePoolDefaultsArgs{...}
type NodePoolDefaultsInput interface {
	pulumi.Input

	ToNodePoolDefaultsOutput() NodePoolDefaultsOutput
	ToNodePoolDefaultsOutputWithContext(context.Context) NodePoolDefaultsOutput
}

// Subset of Nodepool message that has defaults.
type NodePoolDefaultsArgs struct {
	// Subset of NodeConfig message that has defaults.
	NodeConfigDefaults NodeConfigDefaultsPtrInput `pulumi:"nodeConfigDefaults"`
}

func (NodePoolDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolDefaults)(nil)).Elem()
}

func (i NodePoolDefaultsArgs) ToNodePoolDefaultsOutput() NodePoolDefaultsOutput {
	return i.ToNodePoolDefaultsOutputWithContext(context.Background())
}

func (i NodePoolDefaultsArgs) ToNodePoolDefaultsOutputWithContext(ctx context.Context) NodePoolDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolDefaultsOutput)
}

func (i NodePoolDefaultsArgs) ToNodePoolDefaultsPtrOutput() NodePoolDefaultsPtrOutput {
	return i.ToNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (i NodePoolDefaultsArgs) ToNodePoolDefaultsPtrOutputWithContext(ctx context.Context) NodePoolDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolDefaultsOutput).ToNodePoolDefaultsPtrOutputWithContext(ctx)
}

// NodePoolDefaultsPtrInput is an input type that accepts NodePoolDefaultsArgs, NodePoolDefaultsPtr and NodePoolDefaultsPtrOutput values.
// You can construct a concrete instance of `NodePoolDefaultsPtrInput` via:
//
//	        NodePoolDefaultsArgs{...}
//
//	or:
//
//	        nil
type NodePoolDefaultsPtrInput interface {
	pulumi.Input

	ToNodePoolDefaultsPtrOutput() NodePoolDefaultsPtrOutput
	ToNodePoolDefaultsPtrOutputWithContext(context.Context) NodePoolDefaultsPtrOutput
}

type nodePoolDefaultsPtrType NodePoolDefaultsArgs

func NodePoolDefaultsPtr(v *NodePoolDefaultsArgs) NodePoolDefaultsPtrInput {
	return (*nodePoolDefaultsPtrType)(v)
}

func (*nodePoolDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolDefaults)(nil)).Elem()
}

func (i *nodePoolDefaultsPtrType) ToNodePoolDefaultsPtrOutput() NodePoolDefaultsPtrOutput {
	return i.ToNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (i *nodePoolDefaultsPtrType) ToNodePoolDefaultsPtrOutputWithContext(ctx context.Context) NodePoolDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolDefaultsPtrOutput)
}

// Subset of Nodepool message that has defaults.
type NodePoolDefaultsOutput struct{ *pulumi.OutputState }

func (NodePoolDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolDefaults)(nil)).Elem()
}

func (o NodePoolDefaultsOutput) ToNodePoolDefaultsOutput() NodePoolDefaultsOutput {
	return o
}

func (o NodePoolDefaultsOutput) ToNodePoolDefaultsOutputWithContext(ctx context.Context) NodePoolDefaultsOutput {
	return o
}

func (o NodePoolDefaultsOutput) ToNodePoolDefaultsPtrOutput() NodePoolDefaultsPtrOutput {
	return o.ToNodePoolDefaultsPtrOutputWithContext(context.Background())
}

func (o NodePoolDefaultsOutput) ToNodePoolDefaultsPtrOutputWithContext(ctx context.Context) NodePoolDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolDefaults) *NodePoolDefaults {
		return &v
	}).(NodePoolDefaultsPtrOutput)
}

// Subset of NodeConfig message that has defaults.
func (o NodePoolDefaultsOutput) NodeConfigDefaults() NodeConfigDefaultsPtrOutput {
	return o.ApplyT(func(v NodePoolDefaults) *NodeConfigDefaults { return v.NodeConfigDefaults }).(NodeConfigDefaultsPtrOutput)
}

type NodePoolDefaultsPtrOutput struct{ *pulumi.OutputState }

func (NodePoolDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolDefaults)(nil)).Elem()
}

func (o NodePoolDefaultsPtrOutput) ToNodePoolDefaultsPtrOutput() NodePoolDefaultsPtrOutput {
	return o
}

func (o NodePoolDefaultsPtrOutput) ToNodePoolDefaultsPtrOutputWithContext(ctx context.Context) NodePoolDefaultsPtrOutput {
	return o
}

func (o NodePoolDefaultsPtrOutput) Elem() NodePoolDefaultsOutput {
	return o.ApplyT(func(v *NodePoolDefaults) NodePoolDefaults {
		if v != nil {
			return *v
		}
		var ret NodePoolDefaults
		return ret
	}).(NodePoolDefaultsOutput)
}

// Subset of NodeConfig message that has defaults.
func (o NodePoolDefaultsPtrOutput) NodeConfigDefaults() NodeConfigDefaultsPtrOutput {
	return o.ApplyT(func(v *NodePoolDefaults) *NodeConfigDefaults {
		if v == nil {
			return nil
		}
		return v.NodeConfigDefaults
	}).(NodeConfigDefaultsPtrOutput)
}

// Subset of Nodepool message that has defaults.
type NodePoolDefaultsResponse struct {
	// Subset of NodeConfig message that has defaults.
	NodeConfigDefaults NodeConfigDefaultsResponse `pulumi:"nodeConfigDefaults"`
}

// Subset of Nodepool message that has defaults.
type NodePoolDefaultsResponseOutput struct{ *pulumi.OutputState }

func (NodePoolDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolDefaultsResponse)(nil)).Elem()
}

func (o NodePoolDefaultsResponseOutput) ToNodePoolDefaultsResponseOutput() NodePoolDefaultsResponseOutput {
	return o
}

func (o NodePoolDefaultsResponseOutput) ToNodePoolDefaultsResponseOutputWithContext(ctx context.Context) NodePoolDefaultsResponseOutput {
	return o
}

// Subset of NodeConfig message that has defaults.
func (o NodePoolDefaultsResponseOutput) NodeConfigDefaults() NodeConfigDefaultsResponseOutput {
	return o.ApplyT(func(v NodePoolDefaultsResponse) NodeConfigDefaultsResponse { return v.NodeConfigDefaults }).(NodeConfigDefaultsResponseOutput)
}

// NodePoolLoggingConfig specifies logging configuration for nodepools.
type NodePoolLoggingConfig struct {
	// Logging variant configuration.
	VariantConfig *LoggingVariantConfig `pulumi:"variantConfig"`
}

// NodePoolLoggingConfigInput is an input type that accepts NodePoolLoggingConfigArgs and NodePoolLoggingConfigOutput values.
// You can construct a concrete instance of `NodePoolLoggingConfigInput` via:
//
//	NodePoolLoggingConfigArgs{...}
type NodePoolLoggingConfigInput interface {
	pulumi.Input

	ToNodePoolLoggingConfigOutput() NodePoolLoggingConfigOutput
	ToNodePoolLoggingConfigOutputWithContext(context.Context) NodePoolLoggingConfigOutput
}

// NodePoolLoggingConfig specifies logging configuration for nodepools.
type NodePoolLoggingConfigArgs struct {
	// Logging variant configuration.
	VariantConfig LoggingVariantConfigPtrInput `pulumi:"variantConfig"`
}

func (NodePoolLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLoggingConfig)(nil)).Elem()
}

func (i NodePoolLoggingConfigArgs) ToNodePoolLoggingConfigOutput() NodePoolLoggingConfigOutput {
	return i.ToNodePoolLoggingConfigOutputWithContext(context.Background())
}

func (i NodePoolLoggingConfigArgs) ToNodePoolLoggingConfigOutputWithContext(ctx context.Context) NodePoolLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLoggingConfigOutput)
}

func (i NodePoolLoggingConfigArgs) ToNodePoolLoggingConfigPtrOutput() NodePoolLoggingConfigPtrOutput {
	return i.ToNodePoolLoggingConfigPtrOutputWithContext(context.Background())
}

func (i NodePoolLoggingConfigArgs) ToNodePoolLoggingConfigPtrOutputWithContext(ctx context.Context) NodePoolLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLoggingConfigOutput).ToNodePoolLoggingConfigPtrOutputWithContext(ctx)
}

// NodePoolLoggingConfigPtrInput is an input type that accepts NodePoolLoggingConfigArgs, NodePoolLoggingConfigPtr and NodePoolLoggingConfigPtrOutput values.
// You can construct a concrete instance of `NodePoolLoggingConfigPtrInput` via:
//
//	        NodePoolLoggingConfigArgs{...}
//
//	or:
//
//	        nil
type NodePoolLoggingConfigPtrInput interface {
	pulumi.Input

	ToNodePoolLoggingConfigPtrOutput() NodePoolLoggingConfigPtrOutput
	ToNodePoolLoggingConfigPtrOutputWithContext(context.Context) NodePoolLoggingConfigPtrOutput
}

type nodePoolLoggingConfigPtrType NodePoolLoggingConfigArgs

func NodePoolLoggingConfigPtr(v *NodePoolLoggingConfigArgs) NodePoolLoggingConfigPtrInput {
	return (*nodePoolLoggingConfigPtrType)(v)
}

func (*nodePoolLoggingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolLoggingConfig)(nil)).Elem()
}

func (i *nodePoolLoggingConfigPtrType) ToNodePoolLoggingConfigPtrOutput() NodePoolLoggingConfigPtrOutput {
	return i.ToNodePoolLoggingConfigPtrOutputWithContext(context.Background())
}

func (i *nodePoolLoggingConfigPtrType) ToNodePoolLoggingConfigPtrOutputWithContext(ctx context.Context) NodePoolLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolLoggingConfigPtrOutput)
}

// NodePoolLoggingConfig specifies logging configuration for nodepools.
type NodePoolLoggingConfigOutput struct{ *pulumi.OutputState }

func (NodePoolLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLoggingConfig)(nil)).Elem()
}

func (o NodePoolLoggingConfigOutput) ToNodePoolLoggingConfigOutput() NodePoolLoggingConfigOutput {
	return o
}

func (o NodePoolLoggingConfigOutput) ToNodePoolLoggingConfigOutputWithContext(ctx context.Context) NodePoolLoggingConfigOutput {
	return o
}

func (o NodePoolLoggingConfigOutput) ToNodePoolLoggingConfigPtrOutput() NodePoolLoggingConfigPtrOutput {
	return o.ToNodePoolLoggingConfigPtrOutputWithContext(context.Background())
}

func (o NodePoolLoggingConfigOutput) ToNodePoolLoggingConfigPtrOutputWithContext(ctx context.Context) NodePoolLoggingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolLoggingConfig) *NodePoolLoggingConfig {
		return &v
	}).(NodePoolLoggingConfigPtrOutput)
}

// Logging variant configuration.
func (o NodePoolLoggingConfigOutput) VariantConfig() LoggingVariantConfigPtrOutput {
	return o.ApplyT(func(v NodePoolLoggingConfig) *LoggingVariantConfig { return v.VariantConfig }).(LoggingVariantConfigPtrOutput)
}

type NodePoolLoggingConfigPtrOutput struct{ *pulumi.OutputState }

func (NodePoolLoggingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolLoggingConfig)(nil)).Elem()
}

func (o NodePoolLoggingConfigPtrOutput) ToNodePoolLoggingConfigPtrOutput() NodePoolLoggingConfigPtrOutput {
	return o
}

func (o NodePoolLoggingConfigPtrOutput) ToNodePoolLoggingConfigPtrOutputWithContext(ctx context.Context) NodePoolLoggingConfigPtrOutput {
	return o
}

func (o NodePoolLoggingConfigPtrOutput) Elem() NodePoolLoggingConfigOutput {
	return o.ApplyT(func(v *NodePoolLoggingConfig) NodePoolLoggingConfig {
		if v != nil {
			return *v
		}
		var ret NodePoolLoggingConfig
		return ret
	}).(NodePoolLoggingConfigOutput)
}

// Logging variant configuration.
func (o NodePoolLoggingConfigPtrOutput) VariantConfig() LoggingVariantConfigPtrOutput {
	return o.ApplyT(func(v *NodePoolLoggingConfig) *LoggingVariantConfig {
		if v == nil {
			return nil
		}
		return v.VariantConfig
	}).(LoggingVariantConfigPtrOutput)
}

// NodePoolLoggingConfig specifies logging configuration for nodepools.
type NodePoolLoggingConfigResponse struct {
	// Logging variant configuration.
	VariantConfig LoggingVariantConfigResponse `pulumi:"variantConfig"`
}

// NodePoolLoggingConfig specifies logging configuration for nodepools.
type NodePoolLoggingConfigResponseOutput struct{ *pulumi.OutputState }

func (NodePoolLoggingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolLoggingConfigResponse)(nil)).Elem()
}

func (o NodePoolLoggingConfigResponseOutput) ToNodePoolLoggingConfigResponseOutput() NodePoolLoggingConfigResponseOutput {
	return o
}

func (o NodePoolLoggingConfigResponseOutput) ToNodePoolLoggingConfigResponseOutputWithContext(ctx context.Context) NodePoolLoggingConfigResponseOutput {
	return o
}

// Logging variant configuration.
func (o NodePoolLoggingConfigResponseOutput) VariantConfig() LoggingVariantConfigResponseOutput {
	return o.ApplyT(func(v NodePoolLoggingConfigResponse) LoggingVariantConfigResponse { return v.VariantConfig }).(LoggingVariantConfigResponseOutput)
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolResponse struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling NodePoolAutoscalingResponse `pulumi:"autoscaling"`
	// Enable best effort provisioning for nodes
	BestEffortProvisioning BestEffortProvisioningResponse `pulumi:"bestEffortProvisioning"`
	// Which conditions caused the current node pool state.
	Conditions []StatusConditionResponse `pulumi:"conditions"`
	// The node configuration of the pool.
	Config NodeConfigResponse `pulumi:"config"`
	// This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
	Etag string `pulumi:"etag"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount int `pulumi:"initialNodeCount"`
	// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool. During the node pool blue-green upgrade operation, the URLs contain both blue and green resources.
	InstanceGroupUrls []string `pulumi:"instanceGroupUrls"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations []string `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management NodeManagementResponse `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint MaxPodsConstraintResponse `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name string `pulumi:"name"`
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig NodeNetworkConfigResponse `pulumi:"networkConfig"`
	// Specifies the node placement policy.
	PlacementPolicy PlacementPolicyResponse `pulumi:"placementPolicy"`
	// [Output only] The pod CIDR block size per node in this node pool.
	PodIpv4CidrSize int `pulumi:"podIpv4CidrSize"`
	// Specifies the configuration of queued provisioning.
	QueuedProvisioning QueuedProvisioningResponse `pulumi:"queuedProvisioning"`
	// [Output only] Server-defined URL for the resource.
	SelfLink string `pulumi:"selfLink"`
	// [Output only] The status of the nodes in this pool instance.
	Status string `pulumi:"status"`
	// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
	//
	// Deprecated: [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
	StatusMessage string `pulumi:"statusMessage"`
	// [Output only] Update info contains relevant information during a node pool update.
	UpdateInfo UpdateInfoResponse `pulumi:"updateInfo"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings UpgradeSettingsResponse `pulumi:"upgradeSettings"`
	// The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
	Version string `pulumi:"version"`
}

// NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
type NodePoolResponseOutput struct{ *pulumi.OutputState }

func (NodePoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolResponse)(nil)).Elem()
}

func (o NodePoolResponseOutput) ToNodePoolResponseOutput() NodePoolResponseOutput {
	return o
}

func (o NodePoolResponseOutput) ToNodePoolResponseOutputWithContext(ctx context.Context) NodePoolResponseOutput {
	return o
}

// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
func (o NodePoolResponseOutput) Autoscaling() NodePoolAutoscalingResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) NodePoolAutoscalingResponse { return v.Autoscaling }).(NodePoolAutoscalingResponseOutput)
}

// Enable best effort provisioning for nodes
func (o NodePoolResponseOutput) BestEffortProvisioning() BestEffortProvisioningResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) BestEffortProvisioningResponse { return v.BestEffortProvisioning }).(BestEffortProvisioningResponseOutput)
}

// Which conditions caused the current node pool state.
func (o NodePoolResponseOutput) Conditions() StatusConditionResponseArrayOutput {
	return o.ApplyT(func(v NodePoolResponse) []StatusConditionResponse { return v.Conditions }).(StatusConditionResponseArrayOutput)
}

// The node configuration of the pool.
func (o NodePoolResponseOutput) Config() NodeConfigResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) NodeConfigResponse { return v.Config }).(NodeConfigResponseOutput)
}

// This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
func (o NodePoolResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
func (o NodePoolResponseOutput) InitialNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolResponse) int { return v.InitialNodeCount }).(pulumi.IntOutput)
}

// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool. During the node pool blue-green upgrade operation, the URLs contain both blue and green resources.
func (o NodePoolResponseOutput) InstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodePoolResponse) []string { return v.InstanceGroupUrls }).(pulumi.StringArrayOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
func (o NodePoolResponseOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodePoolResponse) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// NodeManagement configuration for this NodePool.
func (o NodePoolResponseOutput) Management() NodeManagementResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) NodeManagementResponse { return v.Management }).(NodeManagementResponseOutput)
}

// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
func (o NodePoolResponseOutput) MaxPodsConstraint() MaxPodsConstraintResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) MaxPodsConstraintResponse { return v.MaxPodsConstraint }).(MaxPodsConstraintResponseOutput)
}

// The name of the node pool.
func (o NodePoolResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
func (o NodePoolResponseOutput) NetworkConfig() NodeNetworkConfigResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) NodeNetworkConfigResponse { return v.NetworkConfig }).(NodeNetworkConfigResponseOutput)
}

// Specifies the node placement policy.
func (o NodePoolResponseOutput) PlacementPolicy() PlacementPolicyResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) PlacementPolicyResponse { return v.PlacementPolicy }).(PlacementPolicyResponseOutput)
}

// [Output only] The pod CIDR block size per node in this node pool.
func (o NodePoolResponseOutput) PodIpv4CidrSize() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolResponse) int { return v.PodIpv4CidrSize }).(pulumi.IntOutput)
}

// Specifies the configuration of queued provisioning.
func (o NodePoolResponseOutput) QueuedProvisioning() QueuedProvisioningResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) QueuedProvisioningResponse { return v.QueuedProvisioning }).(QueuedProvisioningResponseOutput)
}

// [Output only] Server-defined URL for the resource.
func (o NodePoolResponseOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolResponse) string { return v.SelfLink }).(pulumi.StringOutput)
}

// [Output only] The status of the nodes in this pool instance.
func (o NodePoolResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolResponse) string { return v.Status }).(pulumi.StringOutput)
}

// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
//
// Deprecated: [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
func (o NodePoolResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// [Output only] Update info contains relevant information during a node pool update.
func (o NodePoolResponseOutput) UpdateInfo() UpdateInfoResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) UpdateInfoResponse { return v.UpdateInfo }).(UpdateInfoResponseOutput)
}

// Upgrade settings control disruption and speed of the upgrade.
func (o NodePoolResponseOutput) UpgradeSettings() UpgradeSettingsResponseOutput {
	return o.ApplyT(func(v NodePoolResponse) UpgradeSettingsResponse { return v.UpgradeSettings }).(UpgradeSettingsResponseOutput)
}

// The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
func (o NodePoolResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolResponse) string { return v.Version }).(pulumi.StringOutput)
}

type NodePoolResponseArrayOutput struct{ *pulumi.OutputState }

func (NodePoolResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolResponse)(nil)).Elem()
}

func (o NodePoolResponseArrayOutput) ToNodePoolResponseArrayOutput() NodePoolResponseArrayOutput {
	return o
}

func (o NodePoolResponseArrayOutput) ToNodePoolResponseArrayOutputWithContext(ctx context.Context) NodePoolResponseArrayOutput {
	return o
}

func (o NodePoolResponseArrayOutput) Index(i pulumi.IntInput) NodePoolResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolResponse {
		return vs[0].([]NodePoolResponse)[vs[1].(int)]
	}).(NodePoolResponseOutput)
}

// Kubernetes taint is composed of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaint struct {
	// Effect for taint.
	Effect *NodeTaintEffect `pulumi:"effect"`
	// Key for taint.
	Key *string `pulumi:"key"`
	// Value for taint.
	Value *string `pulumi:"value"`
}

// NodeTaintInput is an input type that accepts NodeTaintArgs and NodeTaintOutput values.
// You can construct a concrete instance of `NodeTaintInput` via:
//
//	NodeTaintArgs{...}
type NodeTaintInput interface {
	pulumi.Input

	ToNodeTaintOutput() NodeTaintOutput
	ToNodeTaintOutputWithContext(context.Context) NodeTaintOutput
}

// Kubernetes taint is composed of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintArgs struct {
	// Effect for taint.
	Effect NodeTaintEffectPtrInput `pulumi:"effect"`
	// Key for taint.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value for taint.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NodeTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (i NodeTaintArgs) ToNodeTaintOutput() NodeTaintOutput {
	return i.ToNodeTaintOutputWithContext(context.Background())
}

func (i NodeTaintArgs) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintOutput)
}

// NodeTaintArrayInput is an input type that accepts NodeTaintArray and NodeTaintArrayOutput values.
// You can construct a concrete instance of `NodeTaintArrayInput` via:
//
//	NodeTaintArray{ NodeTaintArgs{...} }
type NodeTaintArrayInput interface {
	pulumi.Input

	ToNodeTaintArrayOutput() NodeTaintArrayOutput
	ToNodeTaintArrayOutputWithContext(context.Context) NodeTaintArrayOutput
}

type NodeTaintArray []NodeTaintInput

func (NodeTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (i NodeTaintArray) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return i.ToNodeTaintArrayOutputWithContext(context.Background())
}

func (i NodeTaintArray) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintArrayOutput)
}

// Kubernetes taint is composed of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintOutput struct{ *pulumi.OutputState }

func (NodeTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (o NodeTaintOutput) ToNodeTaintOutput() NodeTaintOutput {
	return o
}

func (o NodeTaintOutput) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return o
}

// Effect for taint.
func (o NodeTaintOutput) Effect() NodeTaintEffectPtrOutput {
	return o.ApplyT(func(v NodeTaint) *NodeTaintEffect { return v.Effect }).(NodeTaintEffectPtrOutput)
}

// Key for taint.
func (o NodeTaintOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value for taint.
func (o NodeTaintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NodeTaintArrayOutput struct{ *pulumi.OutputState }

func (NodeTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) Index(i pulumi.IntInput) NodeTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTaint {
		return vs[0].([]NodeTaint)[vs[1].(int)]
	}).(NodeTaintOutput)
}

// Kubernetes taint is composed of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintResponse struct {
	// Effect for taint.
	Effect string `pulumi:"effect"`
	// Key for taint.
	Key string `pulumi:"key"`
	// Value for taint.
	Value string `pulumi:"value"`
}

// Kubernetes taint is composed of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.
type NodeTaintResponseOutput struct{ *pulumi.OutputState }

func (NodeTaintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaintResponse)(nil)).Elem()
}

func (o NodeTaintResponseOutput) ToNodeTaintResponseOutput() NodeTaintResponseOutput {
	return o
}

func (o NodeTaintResponseOutput) ToNodeTaintResponseOutputWithContext(ctx context.Context) NodeTaintResponseOutput {
	return o
}

// Effect for taint.
func (o NodeTaintResponseOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaintResponse) string { return v.Effect }).(pulumi.StringOutput)
}

// Key for taint.
func (o NodeTaintResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaintResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Value for taint.
func (o NodeTaintResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaintResponse) string { return v.Value }).(pulumi.StringOutput)
}

type NodeTaintResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeTaintResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaintResponse)(nil)).Elem()
}

func (o NodeTaintResponseArrayOutput) ToNodeTaintResponseArrayOutput() NodeTaintResponseArrayOutput {
	return o
}

func (o NodeTaintResponseArrayOutput) ToNodeTaintResponseArrayOutputWithContext(ctx context.Context) NodeTaintResponseArrayOutput {
	return o
}

func (o NodeTaintResponseArrayOutput) Index(i pulumi.IntInput) NodeTaintResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTaintResponse {
		return vs[0].([]NodeTaintResponse)[vs[1].(int)]
	}).(NodeTaintResponseOutput)
}

// Collection of Kubernetes [node taints](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration).
type NodeTaints struct {
	// List of node taints.
	Taints []NodeTaint `pulumi:"taints"`
}

// NotificationConfig is the configuration of notifications.
type NotificationConfig struct {
	// Notification config for Pub/Sub.
	Pubsub *PubSub `pulumi:"pubsub"`
}

// NotificationConfigInput is an input type that accepts NotificationConfigArgs and NotificationConfigOutput values.
// You can construct a concrete instance of `NotificationConfigInput` via:
//
//	NotificationConfigArgs{...}
type NotificationConfigInput interface {
	pulumi.Input

	ToNotificationConfigOutput() NotificationConfigOutput
	ToNotificationConfigOutputWithContext(context.Context) NotificationConfigOutput
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigArgs struct {
	// Notification config for Pub/Sub.
	Pubsub PubSubPtrInput `pulumi:"pubsub"`
}

func (NotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfig)(nil)).Elem()
}

func (i NotificationConfigArgs) ToNotificationConfigOutput() NotificationConfigOutput {
	return i.ToNotificationConfigOutputWithContext(context.Background())
}

func (i NotificationConfigArgs) ToNotificationConfigOutputWithContext(ctx context.Context) NotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigOutput)
}

func (i NotificationConfigArgs) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return i.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (i NotificationConfigArgs) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigOutput).ToNotificationConfigPtrOutputWithContext(ctx)
}

// NotificationConfigPtrInput is an input type that accepts NotificationConfigArgs, NotificationConfigPtr and NotificationConfigPtrOutput values.
// You can construct a concrete instance of `NotificationConfigPtrInput` via:
//
//	        NotificationConfigArgs{...}
//
//	or:
//
//	        nil
type NotificationConfigPtrInput interface {
	pulumi.Input

	ToNotificationConfigPtrOutput() NotificationConfigPtrOutput
	ToNotificationConfigPtrOutputWithContext(context.Context) NotificationConfigPtrOutput
}

type notificationConfigPtrType NotificationConfigArgs

func NotificationConfigPtr(v *NotificationConfigArgs) NotificationConfigPtrInput {
	return (*notificationConfigPtrType)(v)
}

func (*notificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfig)(nil)).Elem()
}

func (i *notificationConfigPtrType) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return i.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *notificationConfigPtrType) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigPtrOutput)
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigOutput struct{ *pulumi.OutputState }

func (NotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfig)(nil)).Elem()
}

func (o NotificationConfigOutput) ToNotificationConfigOutput() NotificationConfigOutput {
	return o
}

func (o NotificationConfigOutput) ToNotificationConfigOutputWithContext(ctx context.Context) NotificationConfigOutput {
	return o
}

func (o NotificationConfigOutput) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return o.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (o NotificationConfigOutput) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationConfig) *NotificationConfig {
		return &v
	}).(NotificationConfigPtrOutput)
}

// Notification config for Pub/Sub.
func (o NotificationConfigOutput) Pubsub() PubSubPtrOutput {
	return o.ApplyT(func(v NotificationConfig) *PubSub { return v.Pubsub }).(PubSubPtrOutput)
}

type NotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (NotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfig)(nil)).Elem()
}

func (o NotificationConfigPtrOutput) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return o
}

func (o NotificationConfigPtrOutput) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return o
}

func (o NotificationConfigPtrOutput) Elem() NotificationConfigOutput {
	return o.ApplyT(func(v *NotificationConfig) NotificationConfig {
		if v != nil {
			return *v
		}
		var ret NotificationConfig
		return ret
	}).(NotificationConfigOutput)
}

// Notification config for Pub/Sub.
func (o NotificationConfigPtrOutput) Pubsub() PubSubPtrOutput {
	return o.ApplyT(func(v *NotificationConfig) *PubSub {
		if v == nil {
			return nil
		}
		return v.Pubsub
	}).(PubSubPtrOutput)
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigResponse struct {
	// Notification config for Pub/Sub.
	Pubsub PubSubResponse `pulumi:"pubsub"`
}

// NotificationConfig is the configuration of notifications.
type NotificationConfigResponseOutput struct{ *pulumi.OutputState }

func (NotificationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfigResponse)(nil)).Elem()
}

func (o NotificationConfigResponseOutput) ToNotificationConfigResponseOutput() NotificationConfigResponseOutput {
	return o
}

func (o NotificationConfigResponseOutput) ToNotificationConfigResponseOutputWithContext(ctx context.Context) NotificationConfigResponseOutput {
	return o
}

// Notification config for Pub/Sub.
func (o NotificationConfigResponseOutput) Pubsub() PubSubResponseOutput {
	return o.ApplyT(func(v NotificationConfigResponse) PubSubResponse { return v.Pubsub }).(PubSubResponseOutput)
}

// ParentProductConfig is the configuration of the parent product of the cluster. This field is used by Google internal products that are built on top of a GKE cluster and take the ownership of the cluster.
type ParentProductConfig struct {
	// Labels contain the configuration of the parent product.
	Labels map[string]string `pulumi:"labels"`
	// Name of the parent product associated with the cluster.
	ProductName *string `pulumi:"productName"`
}

// ParentProductConfigInput is an input type that accepts ParentProductConfigArgs and ParentProductConfigOutput values.
// You can construct a concrete instance of `ParentProductConfigInput` via:
//
//	ParentProductConfigArgs{...}
type ParentProductConfigInput interface {
	pulumi.Input

	ToParentProductConfigOutput() ParentProductConfigOutput
	ToParentProductConfigOutputWithContext(context.Context) ParentProductConfigOutput
}

// ParentProductConfig is the configuration of the parent product of the cluster. This field is used by Google internal products that are built on top of a GKE cluster and take the ownership of the cluster.
type ParentProductConfigArgs struct {
	// Labels contain the configuration of the parent product.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name of the parent product associated with the cluster.
	ProductName pulumi.StringPtrInput `pulumi:"productName"`
}

func (ParentProductConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParentProductConfig)(nil)).Elem()
}

func (i ParentProductConfigArgs) ToParentProductConfigOutput() ParentProductConfigOutput {
	return i.ToParentProductConfigOutputWithContext(context.Background())
}

func (i ParentProductConfigArgs) ToParentProductConfigOutputWithContext(ctx context.Context) ParentProductConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParentProductConfigOutput)
}

func (i ParentProductConfigArgs) ToParentProductConfigPtrOutput() ParentProductConfigPtrOutput {
	return i.ToParentProductConfigPtrOutputWithContext(context.Background())
}

func (i ParentProductConfigArgs) ToParentProductConfigPtrOutputWithContext(ctx context.Context) ParentProductConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParentProductConfigOutput).ToParentProductConfigPtrOutputWithContext(ctx)
}

// ParentProductConfigPtrInput is an input type that accepts ParentProductConfigArgs, ParentProductConfigPtr and ParentProductConfigPtrOutput values.
// You can construct a concrete instance of `ParentProductConfigPtrInput` via:
//
//	        ParentProductConfigArgs{...}
//
//	or:
//
//	        nil
type ParentProductConfigPtrInput interface {
	pulumi.Input

	ToParentProductConfigPtrOutput() ParentProductConfigPtrOutput
	ToParentProductConfigPtrOutputWithContext(context.Context) ParentProductConfigPtrOutput
}

type parentProductConfigPtrType ParentProductConfigArgs

func ParentProductConfigPtr(v *ParentProductConfigArgs) ParentProductConfigPtrInput {
	return (*parentProductConfigPtrType)(v)
}

func (*parentProductConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParentProductConfig)(nil)).Elem()
}

func (i *parentProductConfigPtrType) ToParentProductConfigPtrOutput() ParentProductConfigPtrOutput {
	return i.ToParentProductConfigPtrOutputWithContext(context.Background())
}

func (i *parentProductConfigPtrType) ToParentProductConfigPtrOutputWithContext(ctx context.Context) ParentProductConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParentProductConfigPtrOutput)
}

// ParentProductConfig is the configuration of the parent product of the cluster. This field is used by Google internal products that are built on top of a GKE cluster and take the ownership of the cluster.
type ParentProductConfigOutput struct{ *pulumi.OutputState }

func (ParentProductConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParentProductConfig)(nil)).Elem()
}

func (o ParentProductConfigOutput) ToParentProductConfigOutput() ParentProductConfigOutput {
	return o
}

func (o ParentProductConfigOutput) ToParentProductConfigOutputWithContext(ctx context.Context) ParentProductConfigOutput {
	return o
}

func (o ParentProductConfigOutput) ToParentProductConfigPtrOutput() ParentProductConfigPtrOutput {
	return o.ToParentProductConfigPtrOutputWithContext(context.Background())
}

func (o ParentProductConfigOutput) ToParentProductConfigPtrOutputWithContext(ctx context.Context) ParentProductConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParentProductConfig) *ParentProductConfig {
		return &v
	}).(ParentProductConfigPtrOutput)
}

// Labels contain the configuration of the parent product.
func (o ParentProductConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ParentProductConfig) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the parent product associated with the cluster.
func (o ParentProductConfigOutput) ProductName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParentProductConfig) *string { return v.ProductName }).(pulumi.StringPtrOutput)
}

type ParentProductConfigPtrOutput struct{ *pulumi.OutputState }

func (ParentProductConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParentProductConfig)(nil)).Elem()
}

func (o ParentProductConfigPtrOutput) ToParentProductConfigPtrOutput() ParentProductConfigPtrOutput {
	return o
}

func (o ParentProductConfigPtrOutput) ToParentProductConfigPtrOutputWithContext(ctx context.Context) ParentProductConfigPtrOutput {
	return o
}

func (o ParentProductConfigPtrOutput) Elem() ParentProductConfigOutput {
	return o.ApplyT(func(v *ParentProductConfig) ParentProductConfig {
		if v != nil {
			return *v
		}
		var ret ParentProductConfig
		return ret
	}).(ParentProductConfigOutput)
}

// Labels contain the configuration of the parent product.
func (o ParentProductConfigPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ParentProductConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name of the parent product associated with the cluster.
func (o ParentProductConfigPtrOutput) ProductName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParentProductConfig) *string {
		if v == nil {
			return nil
		}
		return v.ProductName
	}).(pulumi.StringPtrOutput)
}

// ParentProductConfig is the configuration of the parent product of the cluster. This field is used by Google internal products that are built on top of a GKE cluster and take the ownership of the cluster.
type ParentProductConfigResponse struct {
	// Labels contain the configuration of the parent product.
	Labels map[string]string `pulumi:"labels"`
	// Name of the parent product associated with the cluster.
	ProductName string `pulumi:"productName"`
}

// ParentProductConfig is the configuration of the parent product of the cluster. This field is used by Google internal products that are built on top of a GKE cluster and take the ownership of the cluster.
type ParentProductConfigResponseOutput struct{ *pulumi.OutputState }

func (ParentProductConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParentProductConfigResponse)(nil)).Elem()
}

func (o ParentProductConfigResponseOutput) ToParentProductConfigResponseOutput() ParentProductConfigResponseOutput {
	return o
}

func (o ParentProductConfigResponseOutput) ToParentProductConfigResponseOutputWithContext(ctx context.Context) ParentProductConfigResponseOutput {
	return o
}

// Labels contain the configuration of the parent product.
func (o ParentProductConfigResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ParentProductConfigResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the parent product associated with the cluster.
func (o ParentProductConfigResponseOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v ParentProductConfigResponse) string { return v.ProductName }).(pulumi.StringOutput)
}

// PlacementPolicy defines the placement policy used by the node pool.
type PlacementPolicy struct {
	// If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.
	PolicyName *string `pulumi:"policyName"`
	// Optional. TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies
	TpuTopology *string `pulumi:"tpuTopology"`
	// The type of placement.
	Type *PlacementPolicyType `pulumi:"type"`
}

// PlacementPolicyInput is an input type that accepts PlacementPolicyArgs and PlacementPolicyOutput values.
// You can construct a concrete instance of `PlacementPolicyInput` via:
//
//	PlacementPolicyArgs{...}
type PlacementPolicyInput interface {
	pulumi.Input

	ToPlacementPolicyOutput() PlacementPolicyOutput
	ToPlacementPolicyOutputWithContext(context.Context) PlacementPolicyOutput
}

// PlacementPolicy defines the placement policy used by the node pool.
type PlacementPolicyArgs struct {
	// If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
	// Optional. TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies
	TpuTopology pulumi.StringPtrInput `pulumi:"tpuTopology"`
	// The type of placement.
	Type PlacementPolicyTypePtrInput `pulumi:"type"`
}

func (PlacementPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlacementPolicy)(nil)).Elem()
}

func (i PlacementPolicyArgs) ToPlacementPolicyOutput() PlacementPolicyOutput {
	return i.ToPlacementPolicyOutputWithContext(context.Background())
}

func (i PlacementPolicyArgs) ToPlacementPolicyOutputWithContext(ctx context.Context) PlacementPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementPolicyOutput)
}

func (i PlacementPolicyArgs) ToPlacementPolicyPtrOutput() PlacementPolicyPtrOutput {
	return i.ToPlacementPolicyPtrOutputWithContext(context.Background())
}

func (i PlacementPolicyArgs) ToPlacementPolicyPtrOutputWithContext(ctx context.Context) PlacementPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementPolicyOutput).ToPlacementPolicyPtrOutputWithContext(ctx)
}

// PlacementPolicyPtrInput is an input type that accepts PlacementPolicyArgs, PlacementPolicyPtr and PlacementPolicyPtrOutput values.
// You can construct a concrete instance of `PlacementPolicyPtrInput` via:
//
//	        PlacementPolicyArgs{...}
//
//	or:
//
//	        nil
type PlacementPolicyPtrInput interface {
	pulumi.Input

	ToPlacementPolicyPtrOutput() PlacementPolicyPtrOutput
	ToPlacementPolicyPtrOutputWithContext(context.Context) PlacementPolicyPtrOutput
}

type placementPolicyPtrType PlacementPolicyArgs

func PlacementPolicyPtr(v *PlacementPolicyArgs) PlacementPolicyPtrInput {
	return (*placementPolicyPtrType)(v)
}

func (*placementPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PlacementPolicy)(nil)).Elem()
}

func (i *placementPolicyPtrType) ToPlacementPolicyPtrOutput() PlacementPolicyPtrOutput {
	return i.ToPlacementPolicyPtrOutputWithContext(context.Background())
}

func (i *placementPolicyPtrType) ToPlacementPolicyPtrOutputWithContext(ctx context.Context) PlacementPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementPolicyPtrOutput)
}

// PlacementPolicy defines the placement policy used by the node pool.
type PlacementPolicyOutput struct{ *pulumi.OutputState }

func (PlacementPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlacementPolicy)(nil)).Elem()
}

func (o PlacementPolicyOutput) ToPlacementPolicyOutput() PlacementPolicyOutput {
	return o
}

func (o PlacementPolicyOutput) ToPlacementPolicyOutputWithContext(ctx context.Context) PlacementPolicyOutput {
	return o
}

func (o PlacementPolicyOutput) ToPlacementPolicyPtrOutput() PlacementPolicyPtrOutput {
	return o.ToPlacementPolicyPtrOutputWithContext(context.Background())
}

func (o PlacementPolicyOutput) ToPlacementPolicyPtrOutputWithContext(ctx context.Context) PlacementPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PlacementPolicy) *PlacementPolicy {
		return &v
	}).(PlacementPolicyPtrOutput)
}

// If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.
func (o PlacementPolicyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlacementPolicy) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// Optional. TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies
func (o PlacementPolicyOutput) TpuTopology() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlacementPolicy) *string { return v.TpuTopology }).(pulumi.StringPtrOutput)
}

// The type of placement.
func (o PlacementPolicyOutput) Type() PlacementPolicyTypePtrOutput {
	return o.ApplyT(func(v PlacementPolicy) *PlacementPolicyType { return v.Type }).(PlacementPolicyTypePtrOutput)
}

type PlacementPolicyPtrOutput struct{ *pulumi.OutputState }

func (PlacementPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlacementPolicy)(nil)).Elem()
}

func (o PlacementPolicyPtrOutput) ToPlacementPolicyPtrOutput() PlacementPolicyPtrOutput {
	return o
}

func (o PlacementPolicyPtrOutput) ToPlacementPolicyPtrOutputWithContext(ctx context.Context) PlacementPolicyPtrOutput {
	return o
}

func (o PlacementPolicyPtrOutput) Elem() PlacementPolicyOutput {
	return o.ApplyT(func(v *PlacementPolicy) PlacementPolicy {
		if v != nil {
			return *v
		}
		var ret PlacementPolicy
		return ret
	}).(PlacementPolicyOutput)
}

// If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.
func (o PlacementPolicyPtrOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlacementPolicy) *string {
		if v == nil {
			return nil
		}
		return v.PolicyName
	}).(pulumi.StringPtrOutput)
}

// Optional. TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies
func (o PlacementPolicyPtrOutput) TpuTopology() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlacementPolicy) *string {
		if v == nil {
			return nil
		}
		return v.TpuTopology
	}).(pulumi.StringPtrOutput)
}

// The type of placement.
func (o PlacementPolicyPtrOutput) Type() PlacementPolicyTypePtrOutput {
	return o.ApplyT(func(v *PlacementPolicy) *PlacementPolicyType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(PlacementPolicyTypePtrOutput)
}

// PlacementPolicy defines the placement policy used by the node pool.
type PlacementPolicyResponse struct {
	// If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.
	PolicyName string `pulumi:"policyName"`
	// Optional. TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies
	TpuTopology string `pulumi:"tpuTopology"`
	// The type of placement.
	Type string `pulumi:"type"`
}

// PlacementPolicy defines the placement policy used by the node pool.
type PlacementPolicyResponseOutput struct{ *pulumi.OutputState }

func (PlacementPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlacementPolicyResponse)(nil)).Elem()
}

func (o PlacementPolicyResponseOutput) ToPlacementPolicyResponseOutput() PlacementPolicyResponseOutput {
	return o
}

func (o PlacementPolicyResponseOutput) ToPlacementPolicyResponseOutputWithContext(ctx context.Context) PlacementPolicyResponseOutput {
	return o
}

// If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.
func (o PlacementPolicyResponseOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v PlacementPolicyResponse) string { return v.PolicyName }).(pulumi.StringOutput)
}

// Optional. TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies
func (o PlacementPolicyResponseOutput) TpuTopology() pulumi.StringOutput {
	return o.ApplyT(func(v PlacementPolicyResponse) string { return v.TpuTopology }).(pulumi.StringOutput)
}

// The type of placement.
func (o PlacementPolicyResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PlacementPolicyResponse) string { return v.Type }).(pulumi.StringOutput)
}

// [PRIVATE FIELD] Config for pod CIDR size overprovisioning.
type PodCIDROverprovisionConfig struct {
	// Whether Pod CIDR overprovisioning is disabled. Note: Pod CIDR overprovisioning is enabled by default.
	Disable *bool `pulumi:"disable"`
}

// PodCIDROverprovisionConfigInput is an input type that accepts PodCIDROverprovisionConfigArgs and PodCIDROverprovisionConfigOutput values.
// You can construct a concrete instance of `PodCIDROverprovisionConfigInput` via:
//
//	PodCIDROverprovisionConfigArgs{...}
type PodCIDROverprovisionConfigInput interface {
	pulumi.Input

	ToPodCIDROverprovisionConfigOutput() PodCIDROverprovisionConfigOutput
	ToPodCIDROverprovisionConfigOutputWithContext(context.Context) PodCIDROverprovisionConfigOutput
}

// [PRIVATE FIELD] Config for pod CIDR size overprovisioning.
type PodCIDROverprovisionConfigArgs struct {
	// Whether Pod CIDR overprovisioning is disabled. Note: Pod CIDR overprovisioning is enabled by default.
	Disable pulumi.BoolPtrInput `pulumi:"disable"`
}

func (PodCIDROverprovisionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodCIDROverprovisionConfig)(nil)).Elem()
}

func (i PodCIDROverprovisionConfigArgs) ToPodCIDROverprovisionConfigOutput() PodCIDROverprovisionConfigOutput {
	return i.ToPodCIDROverprovisionConfigOutputWithContext(context.Background())
}

func (i PodCIDROverprovisionConfigArgs) ToPodCIDROverprovisionConfigOutputWithContext(ctx context.Context) PodCIDROverprovisionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodCIDROverprovisionConfigOutput)
}

func (i PodCIDROverprovisionConfigArgs) ToPodCIDROverprovisionConfigPtrOutput() PodCIDROverprovisionConfigPtrOutput {
	return i.ToPodCIDROverprovisionConfigPtrOutputWithContext(context.Background())
}

func (i PodCIDROverprovisionConfigArgs) ToPodCIDROverprovisionConfigPtrOutputWithContext(ctx context.Context) PodCIDROverprovisionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodCIDROverprovisionConfigOutput).ToPodCIDROverprovisionConfigPtrOutputWithContext(ctx)
}

// PodCIDROverprovisionConfigPtrInput is an input type that accepts PodCIDROverprovisionConfigArgs, PodCIDROverprovisionConfigPtr and PodCIDROverprovisionConfigPtrOutput values.
// You can construct a concrete instance of `PodCIDROverprovisionConfigPtrInput` via:
//
//	        PodCIDROverprovisionConfigArgs{...}
//
//	or:
//
//	        nil
type PodCIDROverprovisionConfigPtrInput interface {
	pulumi.Input

	ToPodCIDROverprovisionConfigPtrOutput() PodCIDROverprovisionConfigPtrOutput
	ToPodCIDROverprovisionConfigPtrOutputWithContext(context.Context) PodCIDROverprovisionConfigPtrOutput
}

type podCIDROverprovisionConfigPtrType PodCIDROverprovisionConfigArgs

func PodCIDROverprovisionConfigPtr(v *PodCIDROverprovisionConfigArgs) PodCIDROverprovisionConfigPtrInput {
	return (*podCIDROverprovisionConfigPtrType)(v)
}

func (*podCIDROverprovisionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodCIDROverprovisionConfig)(nil)).Elem()
}

func (i *podCIDROverprovisionConfigPtrType) ToPodCIDROverprovisionConfigPtrOutput() PodCIDROverprovisionConfigPtrOutput {
	return i.ToPodCIDROverprovisionConfigPtrOutputWithContext(context.Background())
}

func (i *podCIDROverprovisionConfigPtrType) ToPodCIDROverprovisionConfigPtrOutputWithContext(ctx context.Context) PodCIDROverprovisionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodCIDROverprovisionConfigPtrOutput)
}

// [PRIVATE FIELD] Config for pod CIDR size overprovisioning.
type PodCIDROverprovisionConfigOutput struct{ *pulumi.OutputState }

func (PodCIDROverprovisionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodCIDROverprovisionConfig)(nil)).Elem()
}

func (o PodCIDROverprovisionConfigOutput) ToPodCIDROverprovisionConfigOutput() PodCIDROverprovisionConfigOutput {
	return o
}

func (o PodCIDROverprovisionConfigOutput) ToPodCIDROverprovisionConfigOutputWithContext(ctx context.Context) PodCIDROverprovisionConfigOutput {
	return o
}

func (o PodCIDROverprovisionConfigOutput) ToPodCIDROverprovisionConfigPtrOutput() PodCIDROverprovisionConfigPtrOutput {
	return o.ToPodCIDROverprovisionConfigPtrOutputWithContext(context.Background())
}

func (o PodCIDROverprovisionConfigOutput) ToPodCIDROverprovisionConfigPtrOutputWithContext(ctx context.Context) PodCIDROverprovisionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PodCIDROverprovisionConfig) *PodCIDROverprovisionConfig {
		return &v
	}).(PodCIDROverprovisionConfigPtrOutput)
}

// Whether Pod CIDR overprovisioning is disabled. Note: Pod CIDR overprovisioning is enabled by default.
func (o PodCIDROverprovisionConfigOutput) Disable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PodCIDROverprovisionConfig) *bool { return v.Disable }).(pulumi.BoolPtrOutput)
}

type PodCIDROverprovisionConfigPtrOutput struct{ *pulumi.OutputState }

func (PodCIDROverprovisionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodCIDROverprovisionConfig)(nil)).Elem()
}

func (o PodCIDROverprovisionConfigPtrOutput) ToPodCIDROverprovisionConfigPtrOutput() PodCIDROverprovisionConfigPtrOutput {
	return o
}

func (o PodCIDROverprovisionConfigPtrOutput) ToPodCIDROverprovisionConfigPtrOutputWithContext(ctx context.Context) PodCIDROverprovisionConfigPtrOutput {
	return o
}

func (o PodCIDROverprovisionConfigPtrOutput) Elem() PodCIDROverprovisionConfigOutput {
	return o.ApplyT(func(v *PodCIDROverprovisionConfig) PodCIDROverprovisionConfig {
		if v != nil {
			return *v
		}
		var ret PodCIDROverprovisionConfig
		return ret
	}).(PodCIDROverprovisionConfigOutput)
}

// Whether Pod CIDR overprovisioning is disabled. Note: Pod CIDR overprovisioning is enabled by default.
func (o PodCIDROverprovisionConfigPtrOutput) Disable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PodCIDROverprovisionConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Disable
	}).(pulumi.BoolPtrOutput)
}

// [PRIVATE FIELD] Config for pod CIDR size overprovisioning.
type PodCIDROverprovisionConfigResponse struct {
	// Whether Pod CIDR overprovisioning is disabled. Note: Pod CIDR overprovisioning is enabled by default.
	Disable bool `pulumi:"disable"`
}

// [PRIVATE FIELD] Config for pod CIDR size overprovisioning.
type PodCIDROverprovisionConfigResponseOutput struct{ *pulumi.OutputState }

func (PodCIDROverprovisionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodCIDROverprovisionConfigResponse)(nil)).Elem()
}

func (o PodCIDROverprovisionConfigResponseOutput) ToPodCIDROverprovisionConfigResponseOutput() PodCIDROverprovisionConfigResponseOutput {
	return o
}

func (o PodCIDROverprovisionConfigResponseOutput) ToPodCIDROverprovisionConfigResponseOutputWithContext(ctx context.Context) PodCIDROverprovisionConfigResponseOutput {
	return o
}

// Whether Pod CIDR overprovisioning is disabled. Note: Pod CIDR overprovisioning is enabled by default.
func (o PodCIDROverprovisionConfigResponseOutput) Disable() pulumi.BoolOutput {
	return o.ApplyT(func(v PodCIDROverprovisionConfigResponse) bool { return v.Disable }).(pulumi.BoolOutput)
}

// Configuration options for private clusters.
type PrivateClusterConfig struct {
	// Whether the master's internal IP address is used as the cluster endpoint.
	EnablePrivateEndpoint *bool `pulumi:"enablePrivateEndpoint"`
	// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
	EnablePrivateNodes *bool `pulumi:"enablePrivateNodes"`
	// Controls master global access settings.
	MasterGlobalAccessConfig *PrivateClusterMasterGlobalAccessConfig `pulumi:"masterGlobalAccessConfig"`
	// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4CidrBlock *string `pulumi:"masterIpv4CidrBlock"`
	// Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.
	PrivateEndpointSubnetwork *string `pulumi:"privateEndpointSubnetwork"`
}

// PrivateClusterConfigInput is an input type that accepts PrivateClusterConfigArgs and PrivateClusterConfigOutput values.
// You can construct a concrete instance of `PrivateClusterConfigInput` via:
//
//	PrivateClusterConfigArgs{...}
type PrivateClusterConfigInput interface {
	pulumi.Input

	ToPrivateClusterConfigOutput() PrivateClusterConfigOutput
	ToPrivateClusterConfigOutputWithContext(context.Context) PrivateClusterConfigOutput
}

// Configuration options for private clusters.
type PrivateClusterConfigArgs struct {
	// Whether the master's internal IP address is used as the cluster endpoint.
	EnablePrivateEndpoint pulumi.BoolPtrInput `pulumi:"enablePrivateEndpoint"`
	// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
	EnablePrivateNodes pulumi.BoolPtrInput `pulumi:"enablePrivateNodes"`
	// Controls master global access settings.
	MasterGlobalAccessConfig PrivateClusterMasterGlobalAccessConfigPtrInput `pulumi:"masterGlobalAccessConfig"`
	// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"masterIpv4CidrBlock"`
	// Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.
	PrivateEndpointSubnetwork pulumi.StringPtrInput `pulumi:"privateEndpointSubnetwork"`
}

func (PrivateClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return i.ToPrivateClusterConfigOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput)
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput).ToPrivateClusterConfigPtrOutputWithContext(ctx)
}

// PrivateClusterConfigPtrInput is an input type that accepts PrivateClusterConfigArgs, PrivateClusterConfigPtr and PrivateClusterConfigPtrOutput values.
// You can construct a concrete instance of `PrivateClusterConfigPtrInput` via:
//
//	        PrivateClusterConfigArgs{...}
//
//	or:
//
//	        nil
type PrivateClusterConfigPtrInput interface {
	pulumi.Input

	ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput
	ToPrivateClusterConfigPtrOutputWithContext(context.Context) PrivateClusterConfigPtrOutput
}

type privateClusterConfigPtrType PrivateClusterConfigArgs

func PrivateClusterConfigPtr(v *PrivateClusterConfigArgs) PrivateClusterConfigPtrInput {
	return (*privateClusterConfigPtrType)(v)
}

func (*privateClusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigPtrOutput)
}

// Configuration options for private clusters.
type PrivateClusterConfigOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateClusterConfig) *PrivateClusterConfig {
		return &v
	}).(PrivateClusterConfigPtrOutput)
}

// Whether the master's internal IP address is used as the cluster endpoint.
func (o PrivateClusterConfigOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *bool { return v.EnablePrivateEndpoint }).(pulumi.BoolPtrOutput)
}

// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
func (o PrivateClusterConfigOutput) EnablePrivateNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *bool { return v.EnablePrivateNodes }).(pulumi.BoolPtrOutput)
}

// Controls master global access settings.
func (o PrivateClusterConfigOutput) MasterGlobalAccessConfig() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *PrivateClusterMasterGlobalAccessConfig {
		return v.MasterGlobalAccessConfig
	}).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.MasterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.
func (o PrivateClusterConfigOutput) PrivateEndpointSubnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.PrivateEndpointSubnetwork }).(pulumi.StringPtrOutput)
}

type PrivateClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) Elem() PrivateClusterConfigOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) PrivateClusterConfig {
		if v != nil {
			return *v
		}
		var ret PrivateClusterConfig
		return ret
	}).(PrivateClusterConfigOutput)
}

// Whether the master's internal IP address is used as the cluster endpoint.
func (o PrivateClusterConfigPtrOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateEndpoint
	}).(pulumi.BoolPtrOutput)
}

// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
func (o PrivateClusterConfigPtrOutput) EnablePrivateNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateNodes
	}).(pulumi.BoolPtrOutput)
}

// Controls master global access settings.
func (o PrivateClusterConfigPtrOutput) MasterGlobalAccessConfig() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *PrivateClusterMasterGlobalAccessConfig {
		if v == nil {
			return nil
		}
		return v.MasterGlobalAccessConfig
	}).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigPtrOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.MasterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.
func (o PrivateClusterConfigPtrOutput) PrivateEndpointSubnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateEndpointSubnetwork
	}).(pulumi.StringPtrOutput)
}

// Configuration options for private clusters.
type PrivateClusterConfigResponse struct {
	// Whether the master's internal IP address is used as the cluster endpoint.
	EnablePrivateEndpoint bool `pulumi:"enablePrivateEndpoint"`
	// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
	EnablePrivateNodes bool `pulumi:"enablePrivateNodes"`
	// Controls master global access settings.
	MasterGlobalAccessConfig PrivateClusterMasterGlobalAccessConfigResponse `pulumi:"masterGlobalAccessConfig"`
	// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4CidrBlock string `pulumi:"masterIpv4CidrBlock"`
	// The peering name in the customer VPC used by this cluster.
	PeeringName string `pulumi:"peeringName"`
	// The internal IP address of this cluster's master endpoint.
	PrivateEndpoint string `pulumi:"privateEndpoint"`
	// Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.
	PrivateEndpointSubnetwork string `pulumi:"privateEndpointSubnetwork"`
	// The external IP address of this cluster's master endpoint.
	PublicEndpoint string `pulumi:"publicEndpoint"`
}

// Configuration options for private clusters.
type PrivateClusterConfigResponseOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfigResponse)(nil)).Elem()
}

func (o PrivateClusterConfigResponseOutput) ToPrivateClusterConfigResponseOutput() PrivateClusterConfigResponseOutput {
	return o
}

func (o PrivateClusterConfigResponseOutput) ToPrivateClusterConfigResponseOutputWithContext(ctx context.Context) PrivateClusterConfigResponseOutput {
	return o
}

// Whether the master's internal IP address is used as the cluster endpoint.
func (o PrivateClusterConfigResponseOutput) EnablePrivateEndpoint() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) bool { return v.EnablePrivateEndpoint }).(pulumi.BoolOutput)
}

// Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
func (o PrivateClusterConfigResponseOutput) EnablePrivateNodes() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) bool { return v.EnablePrivateNodes }).(pulumi.BoolOutput)
}

// Controls master global access settings.
func (o PrivateClusterConfigResponseOutput) MasterGlobalAccessConfig() PrivateClusterMasterGlobalAccessConfigResponseOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) PrivateClusterMasterGlobalAccessConfigResponse {
		return v.MasterGlobalAccessConfig
	}).(PrivateClusterMasterGlobalAccessConfigResponseOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigResponseOutput) MasterIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.MasterIpv4CidrBlock }).(pulumi.StringOutput)
}

// The peering name in the customer VPC used by this cluster.
func (o PrivateClusterConfigResponseOutput) PeeringName() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.PeeringName }).(pulumi.StringOutput)
}

// The internal IP address of this cluster's master endpoint.
func (o PrivateClusterConfigResponseOutput) PrivateEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.PrivateEndpoint }).(pulumi.StringOutput)
}

// Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.
func (o PrivateClusterConfigResponseOutput) PrivateEndpointSubnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.PrivateEndpointSubnetwork }).(pulumi.StringOutput)
}

// The external IP address of this cluster's master endpoint.
func (o PrivateClusterConfigResponseOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.PublicEndpoint }).(pulumi.StringOutput)
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfig struct {
	// Whenever master is accessible globally or not.
	Enabled *bool `pulumi:"enabled"`
}

// PrivateClusterMasterGlobalAccessConfigInput is an input type that accepts PrivateClusterMasterGlobalAccessConfigArgs and PrivateClusterMasterGlobalAccessConfigOutput values.
// You can construct a concrete instance of `PrivateClusterMasterGlobalAccessConfigInput` via:
//
//	PrivateClusterMasterGlobalAccessConfigArgs{...}
type PrivateClusterMasterGlobalAccessConfigInput interface {
	pulumi.Input

	ToPrivateClusterMasterGlobalAccessConfigOutput() PrivateClusterMasterGlobalAccessConfigOutput
	ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(context.Context) PrivateClusterMasterGlobalAccessConfigOutput
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigArgs struct {
	// Whenever master is accessible globally or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (PrivateClusterMasterGlobalAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigOutput() PrivateClusterMasterGlobalAccessConfigOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(context.Background())
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigOutput)
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Background())
}

func (i PrivateClusterMasterGlobalAccessConfigArgs) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigOutput).ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx)
}

// PrivateClusterMasterGlobalAccessConfigPtrInput is an input type that accepts PrivateClusterMasterGlobalAccessConfigArgs, PrivateClusterMasterGlobalAccessConfigPtr and PrivateClusterMasterGlobalAccessConfigPtrOutput values.
// You can construct a concrete instance of `PrivateClusterMasterGlobalAccessConfigPtrInput` via:
//
//	        PrivateClusterMasterGlobalAccessConfigArgs{...}
//
//	or:
//
//	        nil
type PrivateClusterMasterGlobalAccessConfigPtrInput interface {
	pulumi.Input

	ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput
	ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput
}

type privateClusterMasterGlobalAccessConfigPtrType PrivateClusterMasterGlobalAccessConfigArgs

func PrivateClusterMasterGlobalAccessConfigPtr(v *PrivateClusterMasterGlobalAccessConfigArgs) PrivateClusterMasterGlobalAccessConfigPtrInput {
	return (*privateClusterMasterGlobalAccessConfigPtrType)(v)
}

func (*privateClusterMasterGlobalAccessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (i *privateClusterMasterGlobalAccessConfigPtrType) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return i.ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Background())
}

func (i *privateClusterMasterGlobalAccessConfigPtrType) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigOutput struct{ *pulumi.OutputState }

func (PrivateClusterMasterGlobalAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigOutput() PrivateClusterMasterGlobalAccessConfigOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(context.Background())
}

func (o PrivateClusterMasterGlobalAccessConfigOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateClusterMasterGlobalAccessConfig) *PrivateClusterMasterGlobalAccessConfig {
		return &v
	}).(PrivateClusterMasterGlobalAccessConfigPtrOutput)
}

// Whenever master is accessible globally or not.
func (o PrivateClusterMasterGlobalAccessConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterMasterGlobalAccessConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type PrivateClusterMasterGlobalAccessConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterMasterGlobalAccessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterMasterGlobalAccessConfig)(nil)).Elem()
}

func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutput() PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) ToPrivateClusterMasterGlobalAccessConfigPtrOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigPtrOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) Elem() PrivateClusterMasterGlobalAccessConfigOutput {
	return o.ApplyT(func(v *PrivateClusterMasterGlobalAccessConfig) PrivateClusterMasterGlobalAccessConfig {
		if v != nil {
			return *v
		}
		var ret PrivateClusterMasterGlobalAccessConfig
		return ret
	}).(PrivateClusterMasterGlobalAccessConfigOutput)
}

// Whenever master is accessible globally or not.
func (o PrivateClusterMasterGlobalAccessConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterMasterGlobalAccessConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigResponse struct {
	// Whenever master is accessible globally or not.
	Enabled bool `pulumi:"enabled"`
}

// Configuration for controlling master global access settings.
type PrivateClusterMasterGlobalAccessConfigResponseOutput struct{ *pulumi.OutputState }

func (PrivateClusterMasterGlobalAccessConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfigResponse)(nil)).Elem()
}

func (o PrivateClusterMasterGlobalAccessConfigResponseOutput) ToPrivateClusterMasterGlobalAccessConfigResponseOutput() PrivateClusterMasterGlobalAccessConfigResponseOutput {
	return o
}

func (o PrivateClusterMasterGlobalAccessConfigResponseOutput) ToPrivateClusterMasterGlobalAccessConfigResponseOutputWithContext(ctx context.Context) PrivateClusterMasterGlobalAccessConfigResponseOutput {
	return o
}

// Whenever master is accessible globally or not.
func (o PrivateClusterMasterGlobalAccessConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateClusterMasterGlobalAccessConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Pub/Sub specific notification config.
type PubSub struct {
	// Enable notifications for Pub/Sub.
	Enabled *bool `pulumi:"enabled"`
	// Allows filtering to one or more specific event types. If no filter is specified, or if a filter is specified with no event types, all event types will be sent
	Filter *Filter `pulumi:"filter"`
	// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
	Topic *string `pulumi:"topic"`
}

// PubSubInput is an input type that accepts PubSubArgs and PubSubOutput values.
// You can construct a concrete instance of `PubSubInput` via:
//
//	PubSubArgs{...}
type PubSubInput interface {
	pulumi.Input

	ToPubSubOutput() PubSubOutput
	ToPubSubOutputWithContext(context.Context) PubSubOutput
}

// Pub/Sub specific notification config.
type PubSubArgs struct {
	// Enable notifications for Pub/Sub.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Allows filtering to one or more specific event types. If no filter is specified, or if a filter is specified with no event types, all event types will be sent
	Filter FilterPtrInput `pulumi:"filter"`
	// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PubSubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSub)(nil)).Elem()
}

func (i PubSubArgs) ToPubSubOutput() PubSubOutput {
	return i.ToPubSubOutputWithContext(context.Background())
}

func (i PubSubArgs) ToPubSubOutputWithContext(ctx context.Context) PubSubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubOutput)
}

func (i PubSubArgs) ToPubSubPtrOutput() PubSubPtrOutput {
	return i.ToPubSubPtrOutputWithContext(context.Background())
}

func (i PubSubArgs) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubOutput).ToPubSubPtrOutputWithContext(ctx)
}

// PubSubPtrInput is an input type that accepts PubSubArgs, PubSubPtr and PubSubPtrOutput values.
// You can construct a concrete instance of `PubSubPtrInput` via:
//
//	        PubSubArgs{...}
//
//	or:
//
//	        nil
type PubSubPtrInput interface {
	pulumi.Input

	ToPubSubPtrOutput() PubSubPtrOutput
	ToPubSubPtrOutputWithContext(context.Context) PubSubPtrOutput
}

type pubSubPtrType PubSubArgs

func PubSubPtr(v *PubSubArgs) PubSubPtrInput {
	return (*pubSubPtrType)(v)
}

func (*pubSubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubSub)(nil)).Elem()
}

func (i *pubSubPtrType) ToPubSubPtrOutput() PubSubPtrOutput {
	return i.ToPubSubPtrOutputWithContext(context.Background())
}

func (i *pubSubPtrType) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubPtrOutput)
}

// Pub/Sub specific notification config.
type PubSubOutput struct{ *pulumi.OutputState }

func (PubSubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSub)(nil)).Elem()
}

func (o PubSubOutput) ToPubSubOutput() PubSubOutput {
	return o
}

func (o PubSubOutput) ToPubSubOutputWithContext(ctx context.Context) PubSubOutput {
	return o
}

func (o PubSubOutput) ToPubSubPtrOutput() PubSubPtrOutput {
	return o.ToPubSubPtrOutputWithContext(context.Background())
}

func (o PubSubOutput) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PubSub) *PubSub {
		return &v
	}).(PubSubPtrOutput)
}

// Enable notifications for Pub/Sub.
func (o PubSubOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PubSub) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Allows filtering to one or more specific event types. If no filter is specified, or if a filter is specified with no event types, all event types will be sent
func (o PubSubOutput) Filter() FilterPtrOutput {
	return o.ApplyT(func(v PubSub) *Filter { return v.Filter }).(FilterPtrOutput)
}

// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
func (o PubSubOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubSub) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type PubSubPtrOutput struct{ *pulumi.OutputState }

func (PubSubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubSub)(nil)).Elem()
}

func (o PubSubPtrOutput) ToPubSubPtrOutput() PubSubPtrOutput {
	return o
}

func (o PubSubPtrOutput) ToPubSubPtrOutputWithContext(ctx context.Context) PubSubPtrOutput {
	return o
}

func (o PubSubPtrOutput) Elem() PubSubOutput {
	return o.ApplyT(func(v *PubSub) PubSub {
		if v != nil {
			return *v
		}
		var ret PubSub
		return ret
	}).(PubSubOutput)
}

// Enable notifications for Pub/Sub.
func (o PubSubPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PubSub) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Allows filtering to one or more specific event types. If no filter is specified, or if a filter is specified with no event types, all event types will be sent
func (o PubSubPtrOutput) Filter() FilterPtrOutput {
	return o.ApplyT(func(v *PubSub) *Filter {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(FilterPtrOutput)
}

// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
func (o PubSubPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubSub) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Pub/Sub specific notification config.
type PubSubResponse struct {
	// Enable notifications for Pub/Sub.
	Enabled bool `pulumi:"enabled"`
	// Allows filtering to one or more specific event types. If no filter is specified, or if a filter is specified with no event types, all event types will be sent
	Filter FilterResponse `pulumi:"filter"`
	// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
	Topic string `pulumi:"topic"`
}

// Pub/Sub specific notification config.
type PubSubResponseOutput struct{ *pulumi.OutputState }

func (PubSubResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSubResponse)(nil)).Elem()
}

func (o PubSubResponseOutput) ToPubSubResponseOutput() PubSubResponseOutput {
	return o
}

func (o PubSubResponseOutput) ToPubSubResponseOutputWithContext(ctx context.Context) PubSubResponseOutput {
	return o
}

// Enable notifications for Pub/Sub.
func (o PubSubResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PubSubResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Allows filtering to one or more specific event types. If no filter is specified, or if a filter is specified with no event types, all event types will be sent
func (o PubSubResponseOutput) Filter() FilterResponseOutput {
	return o.ApplyT(func(v PubSubResponse) FilterResponse { return v.Filter }).(FilterResponseOutput)
}

// The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.
func (o PubSubResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v PubSubResponse) string { return v.Topic }).(pulumi.StringOutput)
}

// QueuedProvisioning defines the queued provisioning used by the node pool.
type QueuedProvisioning struct {
	// Denotes that this nodepool is QRM specific, meaning nodes can be only obtained through queuing via the Cluster Autoscaler ProvisioningRequest API.
	Enabled *bool `pulumi:"enabled"`
}

// QueuedProvisioningInput is an input type that accepts QueuedProvisioningArgs and QueuedProvisioningOutput values.
// You can construct a concrete instance of `QueuedProvisioningInput` via:
//
//	QueuedProvisioningArgs{...}
type QueuedProvisioningInput interface {
	pulumi.Input

	ToQueuedProvisioningOutput() QueuedProvisioningOutput
	ToQueuedProvisioningOutputWithContext(context.Context) QueuedProvisioningOutput
}

// QueuedProvisioning defines the queued provisioning used by the node pool.
type QueuedProvisioningArgs struct {
	// Denotes that this nodepool is QRM specific, meaning nodes can be only obtained through queuing via the Cluster Autoscaler ProvisioningRequest API.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (QueuedProvisioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuedProvisioning)(nil)).Elem()
}

func (i QueuedProvisioningArgs) ToQueuedProvisioningOutput() QueuedProvisioningOutput {
	return i.ToQueuedProvisioningOutputWithContext(context.Background())
}

func (i QueuedProvisioningArgs) ToQueuedProvisioningOutputWithContext(ctx context.Context) QueuedProvisioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuedProvisioningOutput)
}

func (i QueuedProvisioningArgs) ToQueuedProvisioningPtrOutput() QueuedProvisioningPtrOutput {
	return i.ToQueuedProvisioningPtrOutputWithContext(context.Background())
}

func (i QueuedProvisioningArgs) ToQueuedProvisioningPtrOutputWithContext(ctx context.Context) QueuedProvisioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuedProvisioningOutput).ToQueuedProvisioningPtrOutputWithContext(ctx)
}

// QueuedProvisioningPtrInput is an input type that accepts QueuedProvisioningArgs, QueuedProvisioningPtr and QueuedProvisioningPtrOutput values.
// You can construct a concrete instance of `QueuedProvisioningPtrInput` via:
//
//	        QueuedProvisioningArgs{...}
//
//	or:
//
//	        nil
type QueuedProvisioningPtrInput interface {
	pulumi.Input

	ToQueuedProvisioningPtrOutput() QueuedProvisioningPtrOutput
	ToQueuedProvisioningPtrOutputWithContext(context.Context) QueuedProvisioningPtrOutput
}

type queuedProvisioningPtrType QueuedProvisioningArgs

func QueuedProvisioningPtr(v *QueuedProvisioningArgs) QueuedProvisioningPtrInput {
	return (*queuedProvisioningPtrType)(v)
}

func (*queuedProvisioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueuedProvisioning)(nil)).Elem()
}

func (i *queuedProvisioningPtrType) ToQueuedProvisioningPtrOutput() QueuedProvisioningPtrOutput {
	return i.ToQueuedProvisioningPtrOutputWithContext(context.Background())
}

func (i *queuedProvisioningPtrType) ToQueuedProvisioningPtrOutputWithContext(ctx context.Context) QueuedProvisioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuedProvisioningPtrOutput)
}

// QueuedProvisioning defines the queued provisioning used by the node pool.
type QueuedProvisioningOutput struct{ *pulumi.OutputState }

func (QueuedProvisioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuedProvisioning)(nil)).Elem()
}

func (o QueuedProvisioningOutput) ToQueuedProvisioningOutput() QueuedProvisioningOutput {
	return o
}

func (o QueuedProvisioningOutput) ToQueuedProvisioningOutputWithContext(ctx context.Context) QueuedProvisioningOutput {
	return o
}

func (o QueuedProvisioningOutput) ToQueuedProvisioningPtrOutput() QueuedProvisioningPtrOutput {
	return o.ToQueuedProvisioningPtrOutputWithContext(context.Background())
}

func (o QueuedProvisioningOutput) ToQueuedProvisioningPtrOutputWithContext(ctx context.Context) QueuedProvisioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueuedProvisioning) *QueuedProvisioning {
		return &v
	}).(QueuedProvisioningPtrOutput)
}

// Denotes that this nodepool is QRM specific, meaning nodes can be only obtained through queuing via the Cluster Autoscaler ProvisioningRequest API.
func (o QueuedProvisioningOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueuedProvisioning) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type QueuedProvisioningPtrOutput struct{ *pulumi.OutputState }

func (QueuedProvisioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueuedProvisioning)(nil)).Elem()
}

func (o QueuedProvisioningPtrOutput) ToQueuedProvisioningPtrOutput() QueuedProvisioningPtrOutput {
	return o
}

func (o QueuedProvisioningPtrOutput) ToQueuedProvisioningPtrOutputWithContext(ctx context.Context) QueuedProvisioningPtrOutput {
	return o
}

func (o QueuedProvisioningPtrOutput) Elem() QueuedProvisioningOutput {
	return o.ApplyT(func(v *QueuedProvisioning) QueuedProvisioning {
		if v != nil {
			return *v
		}
		var ret QueuedProvisioning
		return ret
	}).(QueuedProvisioningOutput)
}

// Denotes that this nodepool is QRM specific, meaning nodes can be only obtained through queuing via the Cluster Autoscaler ProvisioningRequest API.
func (o QueuedProvisioningPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueuedProvisioning) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// QueuedProvisioning defines the queued provisioning used by the node pool.
type QueuedProvisioningResponse struct {
	// Denotes that this nodepool is QRM specific, meaning nodes can be only obtained through queuing via the Cluster Autoscaler ProvisioningRequest API.
	Enabled bool `pulumi:"enabled"`
}

// QueuedProvisioning defines the queued provisioning used by the node pool.
type QueuedProvisioningResponseOutput struct{ *pulumi.OutputState }

func (QueuedProvisioningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuedProvisioningResponse)(nil)).Elem()
}

func (o QueuedProvisioningResponseOutput) ToQueuedProvisioningResponseOutput() QueuedProvisioningResponseOutput {
	return o
}

func (o QueuedProvisioningResponseOutput) ToQueuedProvisioningResponseOutputWithContext(ctx context.Context) QueuedProvisioningResponseOutput {
	return o
}

// Denotes that this nodepool is QRM specific, meaning nodes can be only obtained through queuing via the Cluster Autoscaler ProvisioningRequest API.
func (o QueuedProvisioningResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v QueuedProvisioningResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// RangeInfo contains the range name and the range utilization by this cluster.
type RangeInfoResponse struct {
	// [Output only] Name of a range.
	RangeName string `pulumi:"rangeName"`
	// [Output only] The utilization of the range.
	Utilization float64 `pulumi:"utilization"`
}

// RangeInfo contains the range name and the range utilization by this cluster.
type RangeInfoResponseOutput struct{ *pulumi.OutputState }

func (RangeInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangeInfoResponse)(nil)).Elem()
}

func (o RangeInfoResponseOutput) ToRangeInfoResponseOutput() RangeInfoResponseOutput {
	return o
}

func (o RangeInfoResponseOutput) ToRangeInfoResponseOutputWithContext(ctx context.Context) RangeInfoResponseOutput {
	return o
}

// [Output only] Name of a range.
func (o RangeInfoResponseOutput) RangeName() pulumi.StringOutput {
	return o.ApplyT(func(v RangeInfoResponse) string { return v.RangeName }).(pulumi.StringOutput)
}

// [Output only] The utilization of the range.
func (o RangeInfoResponseOutput) Utilization() pulumi.Float64Output {
	return o.ApplyT(func(v RangeInfoResponse) float64 { return v.Utilization }).(pulumi.Float64Output)
}

type RangeInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (RangeInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RangeInfoResponse)(nil)).Elem()
}

func (o RangeInfoResponseArrayOutput) ToRangeInfoResponseArrayOutput() RangeInfoResponseArrayOutput {
	return o
}

func (o RangeInfoResponseArrayOutput) ToRangeInfoResponseArrayOutputWithContext(ctx context.Context) RangeInfoResponseArrayOutput {
	return o
}

func (o RangeInfoResponseArrayOutput) Index(i pulumi.IntInput) RangeInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RangeInfoResponse {
		return vs[0].([]RangeInfoResponse)[vs[1].(int)]
	}).(RangeInfoResponseOutput)
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindow struct {
	// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
	Recurrence *string `pulumi:"recurrence"`
	// The window of the first recurrence.
	Window *TimeWindow `pulumi:"window"`
}

// RecurringTimeWindowInput is an input type that accepts RecurringTimeWindowArgs and RecurringTimeWindowOutput values.
// You can construct a concrete instance of `RecurringTimeWindowInput` via:
//
//	RecurringTimeWindowArgs{...}
type RecurringTimeWindowInput interface {
	pulumi.Input

	ToRecurringTimeWindowOutput() RecurringTimeWindowOutput
	ToRecurringTimeWindowOutputWithContext(context.Context) RecurringTimeWindowOutput
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowArgs struct {
	// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
	Recurrence pulumi.StringPtrInput `pulumi:"recurrence"`
	// The window of the first recurrence.
	Window TimeWindowPtrInput `pulumi:"window"`
}

func (RecurringTimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringTimeWindow)(nil)).Elem()
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowOutput() RecurringTimeWindowOutput {
	return i.ToRecurringTimeWindowOutputWithContext(context.Background())
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowOutputWithContext(ctx context.Context) RecurringTimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowOutput)
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return i.ToRecurringTimeWindowPtrOutputWithContext(context.Background())
}

func (i RecurringTimeWindowArgs) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowOutput).ToRecurringTimeWindowPtrOutputWithContext(ctx)
}

// RecurringTimeWindowPtrInput is an input type that accepts RecurringTimeWindowArgs, RecurringTimeWindowPtr and RecurringTimeWindowPtrOutput values.
// You can construct a concrete instance of `RecurringTimeWindowPtrInput` via:
//
//	        RecurringTimeWindowArgs{...}
//
//	or:
//
//	        nil
type RecurringTimeWindowPtrInput interface {
	pulumi.Input

	ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput
	ToRecurringTimeWindowPtrOutputWithContext(context.Context) RecurringTimeWindowPtrOutput
}

type recurringTimeWindowPtrType RecurringTimeWindowArgs

func RecurringTimeWindowPtr(v *RecurringTimeWindowArgs) RecurringTimeWindowPtrInput {
	return (*recurringTimeWindowPtrType)(v)
}

func (*recurringTimeWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringTimeWindow)(nil)).Elem()
}

func (i *recurringTimeWindowPtrType) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return i.ToRecurringTimeWindowPtrOutputWithContext(context.Background())
}

func (i *recurringTimeWindowPtrType) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringTimeWindowPtrOutput)
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowOutput struct{ *pulumi.OutputState }

func (RecurringTimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringTimeWindow)(nil)).Elem()
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowOutput() RecurringTimeWindowOutput {
	return o
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowOutputWithContext(ctx context.Context) RecurringTimeWindowOutput {
	return o
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return o.ToRecurringTimeWindowPtrOutputWithContext(context.Background())
}

func (o RecurringTimeWindowOutput) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurringTimeWindow) *RecurringTimeWindow {
		return &v
	}).(RecurringTimeWindowPtrOutput)
}

// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
func (o RecurringTimeWindowOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringTimeWindow) *string { return v.Recurrence }).(pulumi.StringPtrOutput)
}

// The window of the first recurrence.
func (o RecurringTimeWindowOutput) Window() TimeWindowPtrOutput {
	return o.ApplyT(func(v RecurringTimeWindow) *TimeWindow { return v.Window }).(TimeWindowPtrOutput)
}

type RecurringTimeWindowPtrOutput struct{ *pulumi.OutputState }

func (RecurringTimeWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringTimeWindow)(nil)).Elem()
}

func (o RecurringTimeWindowPtrOutput) ToRecurringTimeWindowPtrOutput() RecurringTimeWindowPtrOutput {
	return o
}

func (o RecurringTimeWindowPtrOutput) ToRecurringTimeWindowPtrOutputWithContext(ctx context.Context) RecurringTimeWindowPtrOutput {
	return o
}

func (o RecurringTimeWindowPtrOutput) Elem() RecurringTimeWindowOutput {
	return o.ApplyT(func(v *RecurringTimeWindow) RecurringTimeWindow {
		if v != nil {
			return *v
		}
		var ret RecurringTimeWindow
		return ret
	}).(RecurringTimeWindowOutput)
}

// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
func (o RecurringTimeWindowPtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurringTimeWindow) *string {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// The window of the first recurrence.
func (o RecurringTimeWindowPtrOutput) Window() TimeWindowPtrOutput {
	return o.ApplyT(func(v *RecurringTimeWindow) *TimeWindow {
		if v == nil {
			return nil
		}
		return v.Window
	}).(TimeWindowPtrOutput)
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowResponse struct {
	// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
	Recurrence string `pulumi:"recurrence"`
	// The window of the first recurrence.
	Window TimeWindowResponse `pulumi:"window"`
}

// Represents an arbitrary window of time that recurs.
type RecurringTimeWindowResponseOutput struct{ *pulumi.OutputState }

func (RecurringTimeWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringTimeWindowResponse)(nil)).Elem()
}

func (o RecurringTimeWindowResponseOutput) ToRecurringTimeWindowResponseOutput() RecurringTimeWindowResponseOutput {
	return o
}

func (o RecurringTimeWindowResponseOutput) ToRecurringTimeWindowResponseOutputWithContext(ctx context.Context) RecurringTimeWindowResponseOutput {
	return o
}

// An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ```start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ```start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
func (o RecurringTimeWindowResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v RecurringTimeWindowResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// The window of the first recurrence.
func (o RecurringTimeWindowResponseOutput) Window() TimeWindowResponseOutput {
	return o.ApplyT(func(v RecurringTimeWindowResponse) TimeWindowResponse { return v.Window }).(TimeWindowResponseOutput)
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannel struct {
	// channel specifies which release channel the cluster is subscribed to.
	Channel *ReleaseChannelChannel `pulumi:"channel"`
}

// ReleaseChannelInput is an input type that accepts ReleaseChannelArgs and ReleaseChannelOutput values.
// You can construct a concrete instance of `ReleaseChannelInput` via:
//
//	ReleaseChannelArgs{...}
type ReleaseChannelInput interface {
	pulumi.Input

	ToReleaseChannelOutput() ReleaseChannelOutput
	ToReleaseChannelOutputWithContext(context.Context) ReleaseChannelOutput
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelArgs struct {
	// channel specifies which release channel the cluster is subscribed to.
	Channel ReleaseChannelChannelPtrInput `pulumi:"channel"`
}

func (ReleaseChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseChannel)(nil)).Elem()
}

func (i ReleaseChannelArgs) ToReleaseChannelOutput() ReleaseChannelOutput {
	return i.ToReleaseChannelOutputWithContext(context.Background())
}

func (i ReleaseChannelArgs) ToReleaseChannelOutputWithContext(ctx context.Context) ReleaseChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelOutput)
}

func (i ReleaseChannelArgs) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return i.ToReleaseChannelPtrOutputWithContext(context.Background())
}

func (i ReleaseChannelArgs) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelOutput).ToReleaseChannelPtrOutputWithContext(ctx)
}

// ReleaseChannelPtrInput is an input type that accepts ReleaseChannelArgs, ReleaseChannelPtr and ReleaseChannelPtrOutput values.
// You can construct a concrete instance of `ReleaseChannelPtrInput` via:
//
//	        ReleaseChannelArgs{...}
//
//	or:
//
//	        nil
type ReleaseChannelPtrInput interface {
	pulumi.Input

	ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput
	ToReleaseChannelPtrOutputWithContext(context.Context) ReleaseChannelPtrOutput
}

type releaseChannelPtrType ReleaseChannelArgs

func ReleaseChannelPtr(v *ReleaseChannelArgs) ReleaseChannelPtrInput {
	return (*releaseChannelPtrType)(v)
}

func (*releaseChannelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseChannel)(nil)).Elem()
}

func (i *releaseChannelPtrType) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return i.ToReleaseChannelPtrOutputWithContext(context.Background())
}

func (i *releaseChannelPtrType) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelPtrOutput)
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelOutput struct{ *pulumi.OutputState }

func (ReleaseChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseChannel)(nil)).Elem()
}

func (o ReleaseChannelOutput) ToReleaseChannelOutput() ReleaseChannelOutput {
	return o
}

func (o ReleaseChannelOutput) ToReleaseChannelOutputWithContext(ctx context.Context) ReleaseChannelOutput {
	return o
}

func (o ReleaseChannelOutput) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return o.ToReleaseChannelPtrOutputWithContext(context.Background())
}

func (o ReleaseChannelOutput) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReleaseChannel) *ReleaseChannel {
		return &v
	}).(ReleaseChannelPtrOutput)
}

// channel specifies which release channel the cluster is subscribed to.
func (o ReleaseChannelOutput) Channel() ReleaseChannelChannelPtrOutput {
	return o.ApplyT(func(v ReleaseChannel) *ReleaseChannelChannel { return v.Channel }).(ReleaseChannelChannelPtrOutput)
}

type ReleaseChannelPtrOutput struct{ *pulumi.OutputState }

func (ReleaseChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseChannel)(nil)).Elem()
}

func (o ReleaseChannelPtrOutput) ToReleaseChannelPtrOutput() ReleaseChannelPtrOutput {
	return o
}

func (o ReleaseChannelPtrOutput) ToReleaseChannelPtrOutputWithContext(ctx context.Context) ReleaseChannelPtrOutput {
	return o
}

func (o ReleaseChannelPtrOutput) Elem() ReleaseChannelOutput {
	return o.ApplyT(func(v *ReleaseChannel) ReleaseChannel {
		if v != nil {
			return *v
		}
		var ret ReleaseChannel
		return ret
	}).(ReleaseChannelOutput)
}

// channel specifies which release channel the cluster is subscribed to.
func (o ReleaseChannelPtrOutput) Channel() ReleaseChannelChannelPtrOutput {
	return o.ApplyT(func(v *ReleaseChannel) *ReleaseChannelChannel {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(ReleaseChannelChannelPtrOutput)
}

// ReleaseChannelConfig exposes configuration for a release channel.
type ReleaseChannelConfigResponse struct {
	// The release channel this configuration applies to.
	Channel string `pulumi:"channel"`
	// The default version for newly created clusters on the channel.
	DefaultVersion string `pulumi:"defaultVersion"`
	// List of valid versions for the channel.
	ValidVersions []string `pulumi:"validVersions"`
}

// ReleaseChannelConfig exposes configuration for a release channel.
type ReleaseChannelConfigResponseOutput struct{ *pulumi.OutputState }

func (ReleaseChannelConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseChannelConfigResponse)(nil)).Elem()
}

func (o ReleaseChannelConfigResponseOutput) ToReleaseChannelConfigResponseOutput() ReleaseChannelConfigResponseOutput {
	return o
}

func (o ReleaseChannelConfigResponseOutput) ToReleaseChannelConfigResponseOutputWithContext(ctx context.Context) ReleaseChannelConfigResponseOutput {
	return o
}

// The release channel this configuration applies to.
func (o ReleaseChannelConfigResponseOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseChannelConfigResponse) string { return v.Channel }).(pulumi.StringOutput)
}

// The default version for newly created clusters on the channel.
func (o ReleaseChannelConfigResponseOutput) DefaultVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseChannelConfigResponse) string { return v.DefaultVersion }).(pulumi.StringOutput)
}

// List of valid versions for the channel.
func (o ReleaseChannelConfigResponseOutput) ValidVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReleaseChannelConfigResponse) []string { return v.ValidVersions }).(pulumi.StringArrayOutput)
}

type ReleaseChannelConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (ReleaseChannelConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReleaseChannelConfigResponse)(nil)).Elem()
}

func (o ReleaseChannelConfigResponseArrayOutput) ToReleaseChannelConfigResponseArrayOutput() ReleaseChannelConfigResponseArrayOutput {
	return o
}

func (o ReleaseChannelConfigResponseArrayOutput) ToReleaseChannelConfigResponseArrayOutputWithContext(ctx context.Context) ReleaseChannelConfigResponseArrayOutput {
	return o
}

func (o ReleaseChannelConfigResponseArrayOutput) Index(i pulumi.IntInput) ReleaseChannelConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReleaseChannelConfigResponse {
		return vs[0].([]ReleaseChannelConfigResponse)[vs[1].(int)]
	}).(ReleaseChannelConfigResponseOutput)
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelResponse struct {
	// channel specifies which release channel the cluster is subscribed to.
	Channel string `pulumi:"channel"`
}

// ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.
type ReleaseChannelResponseOutput struct{ *pulumi.OutputState }

func (ReleaseChannelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseChannelResponse)(nil)).Elem()
}

func (o ReleaseChannelResponseOutput) ToReleaseChannelResponseOutput() ReleaseChannelResponseOutput {
	return o
}

func (o ReleaseChannelResponseOutput) ToReleaseChannelResponseOutputWithContext(ctx context.Context) ReleaseChannelResponseOutput {
	return o
}

// channel specifies which release channel the cluster is subscribed to.
func (o ReleaseChannelResponseOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseChannelResponse) string { return v.Channel }).(pulumi.StringOutput)
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinity struct {
	// Corresponds to the type of reservation consumption.
	ConsumeReservationType *ReservationAffinityConsumeReservationType `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "compute.googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
	Key *string `pulumi:"key"`
	// Corresponds to the label value(s) of reservation resource(s).
	Values []string `pulumi:"values"`
}

// ReservationAffinityInput is an input type that accepts ReservationAffinityArgs and ReservationAffinityOutput values.
// You can construct a concrete instance of `ReservationAffinityInput` via:
//
//	ReservationAffinityArgs{...}
type ReservationAffinityInput interface {
	pulumi.Input

	ToReservationAffinityOutput() ReservationAffinityOutput
	ToReservationAffinityOutputWithContext(context.Context) ReservationAffinityOutput
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityArgs struct {
	// Corresponds to the type of reservation consumption.
	ConsumeReservationType ReservationAffinityConsumeReservationTypePtrInput `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "compute.googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Corresponds to the label value(s) of reservation resource(s).
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReservationAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinity)(nil)).Elem()
}

func (i ReservationAffinityArgs) ToReservationAffinityOutput() ReservationAffinityOutput {
	return i.ToReservationAffinityOutputWithContext(context.Background())
}

func (i ReservationAffinityArgs) ToReservationAffinityOutputWithContext(ctx context.Context) ReservationAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityOutput)
}

func (i ReservationAffinityArgs) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return i.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (i ReservationAffinityArgs) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityOutput).ToReservationAffinityPtrOutputWithContext(ctx)
}

// ReservationAffinityPtrInput is an input type that accepts ReservationAffinityArgs, ReservationAffinityPtr and ReservationAffinityPtrOutput values.
// You can construct a concrete instance of `ReservationAffinityPtrInput` via:
//
//	        ReservationAffinityArgs{...}
//
//	or:
//
//	        nil
type ReservationAffinityPtrInput interface {
	pulumi.Input

	ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput
	ToReservationAffinityPtrOutputWithContext(context.Context) ReservationAffinityPtrOutput
}

type reservationAffinityPtrType ReservationAffinityArgs

func ReservationAffinityPtr(v *ReservationAffinityArgs) ReservationAffinityPtrInput {
	return (*reservationAffinityPtrType)(v)
}

func (*reservationAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinity)(nil)).Elem()
}

func (i *reservationAffinityPtrType) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return i.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (i *reservationAffinityPtrType) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityPtrOutput)
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityOutput struct{ *pulumi.OutputState }

func (ReservationAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinity)(nil)).Elem()
}

func (o ReservationAffinityOutput) ToReservationAffinityOutput() ReservationAffinityOutput {
	return o
}

func (o ReservationAffinityOutput) ToReservationAffinityOutputWithContext(ctx context.Context) ReservationAffinityOutput {
	return o
}

func (o ReservationAffinityOutput) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return o.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (o ReservationAffinityOutput) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReservationAffinity) *ReservationAffinity {
		return &v
	}).(ReservationAffinityPtrOutput)
}

// Corresponds to the type of reservation consumption.
func (o ReservationAffinityOutput) ConsumeReservationType() ReservationAffinityConsumeReservationTypePtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *ReservationAffinityConsumeReservationType {
		return v.ConsumeReservationType
	}).(ReservationAffinityConsumeReservationTypePtrOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "compute.googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
func (o ReservationAffinityOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Corresponds to the label value(s) of reservation resource(s).
func (o ReservationAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservationAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReservationAffinityPtrOutput struct{ *pulumi.OutputState }

func (ReservationAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinity)(nil)).Elem()
}

func (o ReservationAffinityPtrOutput) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return o
}

func (o ReservationAffinityPtrOutput) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return o
}

func (o ReservationAffinityPtrOutput) Elem() ReservationAffinityOutput {
	return o.ApplyT(func(v *ReservationAffinity) ReservationAffinity {
		if v != nil {
			return *v
		}
		var ret ReservationAffinity
		return ret
	}).(ReservationAffinityOutput)
}

// Corresponds to the type of reservation consumption.
func (o ReservationAffinityPtrOutput) ConsumeReservationType() ReservationAffinityConsumeReservationTypePtrOutput {
	return o.ApplyT(func(v *ReservationAffinity) *ReservationAffinityConsumeReservationType {
		if v == nil {
			return nil
		}
		return v.ConsumeReservationType
	}).(ReservationAffinityConsumeReservationTypePtrOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "compute.googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
func (o ReservationAffinityPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinity) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label value(s) of reservation resource(s).
func (o ReservationAffinityPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReservationAffinity) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityResponse struct {
	// Corresponds to the type of reservation consumption.
	ConsumeReservationType string `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "compute.googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
	Key string `pulumi:"key"`
	// Corresponds to the label value(s) of reservation resource(s).
	Values []string `pulumi:"values"`
}

// [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.
type ReservationAffinityResponseOutput struct{ *pulumi.OutputState }

func (ReservationAffinityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinityResponse)(nil)).Elem()
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponseOutput() ReservationAffinityResponseOutput {
	return o
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponseOutputWithContext(ctx context.Context) ReservationAffinityResponseOutput {
	return o
}

// Corresponds to the type of reservation consumption.
func (o ReservationAffinityResponseOutput) ConsumeReservationType() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) string { return v.ConsumeReservationType }).(pulumi.StringOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify "compute.googleapis.com/reservation-name" as the key and specify the name of your reservation as its value.
func (o ReservationAffinityResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Corresponds to the label value(s) of reservation resource(s).
func (o ReservationAffinityResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// Collection of [GCP labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).
type ResourceLabels struct {
	// Map of node label keys and node label values.
	Labels map[string]string `pulumi:"labels"`
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimit struct {
	// Maximum amount of the resource in the cluster.
	Maximum *string `pulumi:"maximum"`
	// Minimum amount of the resource in the cluster.
	Minimum *string `pulumi:"minimum"`
	// Resource name "cpu", "memory" or gpu-specific string.
	ResourceType *string `pulumi:"resourceType"`
}

// ResourceLimitInput is an input type that accepts ResourceLimitArgs and ResourceLimitOutput values.
// You can construct a concrete instance of `ResourceLimitInput` via:
//
//	ResourceLimitArgs{...}
type ResourceLimitInput interface {
	pulumi.Input

	ToResourceLimitOutput() ResourceLimitOutput
	ToResourceLimitOutputWithContext(context.Context) ResourceLimitOutput
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitArgs struct {
	// Maximum amount of the resource in the cluster.
	Maximum pulumi.StringPtrInput `pulumi:"maximum"`
	// Minimum amount of the resource in the cluster.
	Minimum pulumi.StringPtrInput `pulumi:"minimum"`
	// Resource name "cpu", "memory" or gpu-specific string.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
}

func (ResourceLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimit)(nil)).Elem()
}

func (i ResourceLimitArgs) ToResourceLimitOutput() ResourceLimitOutput {
	return i.ToResourceLimitOutputWithContext(context.Background())
}

func (i ResourceLimitArgs) ToResourceLimitOutputWithContext(ctx context.Context) ResourceLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitOutput)
}

// ResourceLimitArrayInput is an input type that accepts ResourceLimitArray and ResourceLimitArrayOutput values.
// You can construct a concrete instance of `ResourceLimitArrayInput` via:
//
//	ResourceLimitArray{ ResourceLimitArgs{...} }
type ResourceLimitArrayInput interface {
	pulumi.Input

	ToResourceLimitArrayOutput() ResourceLimitArrayOutput
	ToResourceLimitArrayOutputWithContext(context.Context) ResourceLimitArrayOutput
}

type ResourceLimitArray []ResourceLimitInput

func (ResourceLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLimit)(nil)).Elem()
}

func (i ResourceLimitArray) ToResourceLimitArrayOutput() ResourceLimitArrayOutput {
	return i.ToResourceLimitArrayOutputWithContext(context.Background())
}

func (i ResourceLimitArray) ToResourceLimitArrayOutputWithContext(ctx context.Context) ResourceLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitArrayOutput)
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitOutput struct{ *pulumi.OutputState }

func (ResourceLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimit)(nil)).Elem()
}

func (o ResourceLimitOutput) ToResourceLimitOutput() ResourceLimitOutput {
	return o
}

func (o ResourceLimitOutput) ToResourceLimitOutputWithContext(ctx context.Context) ResourceLimitOutput {
	return o
}

// Maximum amount of the resource in the cluster.
func (o ResourceLimitOutput) Maximum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLimit) *string { return v.Maximum }).(pulumi.StringPtrOutput)
}

// Minimum amount of the resource in the cluster.
func (o ResourceLimitOutput) Minimum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLimit) *string { return v.Minimum }).(pulumi.StringPtrOutput)
}

// Resource name "cpu", "memory" or gpu-specific string.
func (o ResourceLimitOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceLimit) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

type ResourceLimitArrayOutput struct{ *pulumi.OutputState }

func (ResourceLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLimit)(nil)).Elem()
}

func (o ResourceLimitArrayOutput) ToResourceLimitArrayOutput() ResourceLimitArrayOutput {
	return o
}

func (o ResourceLimitArrayOutput) ToResourceLimitArrayOutputWithContext(ctx context.Context) ResourceLimitArrayOutput {
	return o
}

func (o ResourceLimitArrayOutput) Index(i pulumi.IntInput) ResourceLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLimit {
		return vs[0].([]ResourceLimit)[vs[1].(int)]
	}).(ResourceLimitOutput)
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitResponse struct {
	// Maximum amount of the resource in the cluster.
	Maximum string `pulumi:"maximum"`
	// Minimum amount of the resource in the cluster.
	Minimum string `pulumi:"minimum"`
	// Resource name "cpu", "memory" or gpu-specific string.
	ResourceType string `pulumi:"resourceType"`
}

// Contains information about amount of some resource in the cluster. For memory, value should be in GB.
type ResourceLimitResponseOutput struct{ *pulumi.OutputState }

func (ResourceLimitResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitResponse)(nil)).Elem()
}

func (o ResourceLimitResponseOutput) ToResourceLimitResponseOutput() ResourceLimitResponseOutput {
	return o
}

func (o ResourceLimitResponseOutput) ToResourceLimitResponseOutputWithContext(ctx context.Context) ResourceLimitResponseOutput {
	return o
}

// Maximum amount of the resource in the cluster.
func (o ResourceLimitResponseOutput) Maximum() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLimitResponse) string { return v.Maximum }).(pulumi.StringOutput)
}

// Minimum amount of the resource in the cluster.
func (o ResourceLimitResponseOutput) Minimum() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLimitResponse) string { return v.Minimum }).(pulumi.StringOutput)
}

// Resource name "cpu", "memory" or gpu-specific string.
func (o ResourceLimitResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLimitResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

type ResourceLimitResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceLimitResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceLimitResponse)(nil)).Elem()
}

func (o ResourceLimitResponseArrayOutput) ToResourceLimitResponseArrayOutput() ResourceLimitResponseArrayOutput {
	return o
}

func (o ResourceLimitResponseArrayOutput) ToResourceLimitResponseArrayOutputWithContext(ctx context.Context) ResourceLimitResponseArrayOutput {
	return o
}

func (o ResourceLimitResponseArrayOutput) Index(i pulumi.IntInput) ResourceLimitResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceLimitResponse {
		return vs[0].([]ResourceLimitResponse)[vs[1].(int)]
	}).(ResourceLimitResponseOutput)
}

// A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.
type ResourceManagerTags struct {
	// TagKeyValue must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`
	Tags map[string]string `pulumi:"tags"`
}

// ResourceManagerTagsInput is an input type that accepts ResourceManagerTagsArgs and ResourceManagerTagsOutput values.
// You can construct a concrete instance of `ResourceManagerTagsInput` via:
//
//	ResourceManagerTagsArgs{...}
type ResourceManagerTagsInput interface {
	pulumi.Input

	ToResourceManagerTagsOutput() ResourceManagerTagsOutput
	ToResourceManagerTagsOutputWithContext(context.Context) ResourceManagerTagsOutput
}

// A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.
type ResourceManagerTagsArgs struct {
	// TagKeyValue must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceManagerTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceManagerTags)(nil)).Elem()
}

func (i ResourceManagerTagsArgs) ToResourceManagerTagsOutput() ResourceManagerTagsOutput {
	return i.ToResourceManagerTagsOutputWithContext(context.Background())
}

func (i ResourceManagerTagsArgs) ToResourceManagerTagsOutputWithContext(ctx context.Context) ResourceManagerTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceManagerTagsOutput)
}

func (i ResourceManagerTagsArgs) ToResourceManagerTagsPtrOutput() ResourceManagerTagsPtrOutput {
	return i.ToResourceManagerTagsPtrOutputWithContext(context.Background())
}

func (i ResourceManagerTagsArgs) ToResourceManagerTagsPtrOutputWithContext(ctx context.Context) ResourceManagerTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceManagerTagsOutput).ToResourceManagerTagsPtrOutputWithContext(ctx)
}

// ResourceManagerTagsPtrInput is an input type that accepts ResourceManagerTagsArgs, ResourceManagerTagsPtr and ResourceManagerTagsPtrOutput values.
// You can construct a concrete instance of `ResourceManagerTagsPtrInput` via:
//
//	        ResourceManagerTagsArgs{...}
//
//	or:
//
//	        nil
type ResourceManagerTagsPtrInput interface {
	pulumi.Input

	ToResourceManagerTagsPtrOutput() ResourceManagerTagsPtrOutput
	ToResourceManagerTagsPtrOutputWithContext(context.Context) ResourceManagerTagsPtrOutput
}

type resourceManagerTagsPtrType ResourceManagerTagsArgs

func ResourceManagerTagsPtr(v *ResourceManagerTagsArgs) ResourceManagerTagsPtrInput {
	return (*resourceManagerTagsPtrType)(v)
}

func (*resourceManagerTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceManagerTags)(nil)).Elem()
}

func (i *resourceManagerTagsPtrType) ToResourceManagerTagsPtrOutput() ResourceManagerTagsPtrOutput {
	return i.ToResourceManagerTagsPtrOutputWithContext(context.Background())
}

func (i *resourceManagerTagsPtrType) ToResourceManagerTagsPtrOutputWithContext(ctx context.Context) ResourceManagerTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceManagerTagsPtrOutput)
}

// A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.
type ResourceManagerTagsOutput struct{ *pulumi.OutputState }

func (ResourceManagerTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceManagerTags)(nil)).Elem()
}

func (o ResourceManagerTagsOutput) ToResourceManagerTagsOutput() ResourceManagerTagsOutput {
	return o
}

func (o ResourceManagerTagsOutput) ToResourceManagerTagsOutputWithContext(ctx context.Context) ResourceManagerTagsOutput {
	return o
}

func (o ResourceManagerTagsOutput) ToResourceManagerTagsPtrOutput() ResourceManagerTagsPtrOutput {
	return o.ToResourceManagerTagsPtrOutputWithContext(context.Background())
}

func (o ResourceManagerTagsOutput) ToResourceManagerTagsPtrOutputWithContext(ctx context.Context) ResourceManagerTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceManagerTags) *ResourceManagerTags {
		return &v
	}).(ResourceManagerTagsPtrOutput)
}

// TagKeyValue must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`
func (o ResourceManagerTagsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceManagerTags) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceManagerTagsPtrOutput struct{ *pulumi.OutputState }

func (ResourceManagerTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceManagerTags)(nil)).Elem()
}

func (o ResourceManagerTagsPtrOutput) ToResourceManagerTagsPtrOutput() ResourceManagerTagsPtrOutput {
	return o
}

func (o ResourceManagerTagsPtrOutput) ToResourceManagerTagsPtrOutputWithContext(ctx context.Context) ResourceManagerTagsPtrOutput {
	return o
}

func (o ResourceManagerTagsPtrOutput) Elem() ResourceManagerTagsOutput {
	return o.ApplyT(func(v *ResourceManagerTags) ResourceManagerTags {
		if v != nil {
			return *v
		}
		var ret ResourceManagerTags
		return ret
	}).(ResourceManagerTagsOutput)
}

// TagKeyValue must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`
func (o ResourceManagerTagsPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceManagerTags) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.
type ResourceManagerTagsResponse struct {
	// TagKeyValue must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`
	Tags map[string]string `pulumi:"tags"`
}

// A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.
type ResourceManagerTagsResponseOutput struct{ *pulumi.OutputState }

func (ResourceManagerTagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceManagerTagsResponse)(nil)).Elem()
}

func (o ResourceManagerTagsResponseOutput) ToResourceManagerTagsResponseOutput() ResourceManagerTagsResponseOutput {
	return o
}

func (o ResourceManagerTagsResponseOutput) ToResourceManagerTagsResponseOutputWithContext(ctx context.Context) ResourceManagerTagsResponseOutput {
	return o
}

// TagKeyValue must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`
func (o ResourceManagerTagsResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceManagerTagsResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfig struct {
	// Configuration to use BigQuery as usage export destination.
	BigqueryDestination *BigQueryDestination `pulumi:"bigqueryDestination"`
	// Configuration to enable resource consumption metering.
	ConsumptionMeteringConfig *ConsumptionMeteringConfig `pulumi:"consumptionMeteringConfig"`
	// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
	EnableNetworkEgressMetering *bool `pulumi:"enableNetworkEgressMetering"`
}

// ResourceUsageExportConfigInput is an input type that accepts ResourceUsageExportConfigArgs and ResourceUsageExportConfigOutput values.
// You can construct a concrete instance of `ResourceUsageExportConfigInput` via:
//
//	ResourceUsageExportConfigArgs{...}
type ResourceUsageExportConfigInput interface {
	pulumi.Input

	ToResourceUsageExportConfigOutput() ResourceUsageExportConfigOutput
	ToResourceUsageExportConfigOutputWithContext(context.Context) ResourceUsageExportConfigOutput
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigArgs struct {
	// Configuration to use BigQuery as usage export destination.
	BigqueryDestination BigQueryDestinationPtrInput `pulumi:"bigqueryDestination"`
	// Configuration to enable resource consumption metering.
	ConsumptionMeteringConfig ConsumptionMeteringConfigPtrInput `pulumi:"consumptionMeteringConfig"`
	// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
	EnableNetworkEgressMetering pulumi.BoolPtrInput `pulumi:"enableNetworkEgressMetering"`
}

func (ResourceUsageExportConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceUsageExportConfig)(nil)).Elem()
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigOutput() ResourceUsageExportConfigOutput {
	return i.ToResourceUsageExportConfigOutputWithContext(context.Background())
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigOutputWithContext(ctx context.Context) ResourceUsageExportConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigOutput)
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return i.ToResourceUsageExportConfigPtrOutputWithContext(context.Background())
}

func (i ResourceUsageExportConfigArgs) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigOutput).ToResourceUsageExportConfigPtrOutputWithContext(ctx)
}

// ResourceUsageExportConfigPtrInput is an input type that accepts ResourceUsageExportConfigArgs, ResourceUsageExportConfigPtr and ResourceUsageExportConfigPtrOutput values.
// You can construct a concrete instance of `ResourceUsageExportConfigPtrInput` via:
//
//	        ResourceUsageExportConfigArgs{...}
//
//	or:
//
//	        nil
type ResourceUsageExportConfigPtrInput interface {
	pulumi.Input

	ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput
	ToResourceUsageExportConfigPtrOutputWithContext(context.Context) ResourceUsageExportConfigPtrOutput
}

type resourceUsageExportConfigPtrType ResourceUsageExportConfigArgs

func ResourceUsageExportConfigPtr(v *ResourceUsageExportConfigArgs) ResourceUsageExportConfigPtrInput {
	return (*resourceUsageExportConfigPtrType)(v)
}

func (*resourceUsageExportConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceUsageExportConfig)(nil)).Elem()
}

func (i *resourceUsageExportConfigPtrType) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return i.ToResourceUsageExportConfigPtrOutputWithContext(context.Background())
}

func (i *resourceUsageExportConfigPtrType) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceUsageExportConfigPtrOutput)
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigOutput struct{ *pulumi.OutputState }

func (ResourceUsageExportConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceUsageExportConfig)(nil)).Elem()
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigOutput() ResourceUsageExportConfigOutput {
	return o
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigOutputWithContext(ctx context.Context) ResourceUsageExportConfigOutput {
	return o
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return o.ToResourceUsageExportConfigPtrOutputWithContext(context.Background())
}

func (o ResourceUsageExportConfigOutput) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceUsageExportConfig) *ResourceUsageExportConfig {
		return &v
	}).(ResourceUsageExportConfigPtrOutput)
}

// Configuration to use BigQuery as usage export destination.
func (o ResourceUsageExportConfigOutput) BigqueryDestination() BigQueryDestinationPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *BigQueryDestination { return v.BigqueryDestination }).(BigQueryDestinationPtrOutput)
}

// Configuration to enable resource consumption metering.
func (o ResourceUsageExportConfigOutput) ConsumptionMeteringConfig() ConsumptionMeteringConfigPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *ConsumptionMeteringConfig { return v.ConsumptionMeteringConfig }).(ConsumptionMeteringConfigPtrOutput)
}

// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
func (o ResourceUsageExportConfigOutput) EnableNetworkEgressMetering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceUsageExportConfig) *bool { return v.EnableNetworkEgressMetering }).(pulumi.BoolPtrOutput)
}

type ResourceUsageExportConfigPtrOutput struct{ *pulumi.OutputState }

func (ResourceUsageExportConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceUsageExportConfig)(nil)).Elem()
}

func (o ResourceUsageExportConfigPtrOutput) ToResourceUsageExportConfigPtrOutput() ResourceUsageExportConfigPtrOutput {
	return o
}

func (o ResourceUsageExportConfigPtrOutput) ToResourceUsageExportConfigPtrOutputWithContext(ctx context.Context) ResourceUsageExportConfigPtrOutput {
	return o
}

func (o ResourceUsageExportConfigPtrOutput) Elem() ResourceUsageExportConfigOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) ResourceUsageExportConfig {
		if v != nil {
			return *v
		}
		var ret ResourceUsageExportConfig
		return ret
	}).(ResourceUsageExportConfigOutput)
}

// Configuration to use BigQuery as usage export destination.
func (o ResourceUsageExportConfigPtrOutput) BigqueryDestination() BigQueryDestinationPtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) *BigQueryDestination {
		if v == nil {
			return nil
		}
		return v.BigqueryDestination
	}).(BigQueryDestinationPtrOutput)
}

// Configuration to enable resource consumption metering.
func (o ResourceUsageExportConfigPtrOutput) ConsumptionMeteringConfig() ConsumptionMeteringConfigPtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) *ConsumptionMeteringConfig {
		if v == nil {
			return nil
		}
		return v.ConsumptionMeteringConfig
	}).(ConsumptionMeteringConfigPtrOutput)
}

// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
func (o ResourceUsageExportConfigPtrOutput) EnableNetworkEgressMetering() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceUsageExportConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNetworkEgressMetering
	}).(pulumi.BoolPtrOutput)
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigResponse struct {
	// Configuration to use BigQuery as usage export destination.
	BigqueryDestination BigQueryDestinationResponse `pulumi:"bigqueryDestination"`
	// Configuration to enable resource consumption metering.
	ConsumptionMeteringConfig ConsumptionMeteringConfigResponse `pulumi:"consumptionMeteringConfig"`
	// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
	EnableNetworkEgressMetering bool `pulumi:"enableNetworkEgressMetering"`
}

// Configuration for exporting cluster resource usages.
type ResourceUsageExportConfigResponseOutput struct{ *pulumi.OutputState }

func (ResourceUsageExportConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceUsageExportConfigResponse)(nil)).Elem()
}

func (o ResourceUsageExportConfigResponseOutput) ToResourceUsageExportConfigResponseOutput() ResourceUsageExportConfigResponseOutput {
	return o
}

func (o ResourceUsageExportConfigResponseOutput) ToResourceUsageExportConfigResponseOutputWithContext(ctx context.Context) ResourceUsageExportConfigResponseOutput {
	return o
}

// Configuration to use BigQuery as usage export destination.
func (o ResourceUsageExportConfigResponseOutput) BigqueryDestination() BigQueryDestinationResponseOutput {
	return o.ApplyT(func(v ResourceUsageExportConfigResponse) BigQueryDestinationResponse { return v.BigqueryDestination }).(BigQueryDestinationResponseOutput)
}

// Configuration to enable resource consumption metering.
func (o ResourceUsageExportConfigResponseOutput) ConsumptionMeteringConfig() ConsumptionMeteringConfigResponseOutput {
	return o.ApplyT(func(v ResourceUsageExportConfigResponse) ConsumptionMeteringConfigResponse {
		return v.ConsumptionMeteringConfig
	}).(ConsumptionMeteringConfigResponseOutput)
}

// Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
func (o ResourceUsageExportConfigResponseOutput) EnableNetworkEgressMetering() pulumi.BoolOutput {
	return o.ApplyT(func(v ResourceUsageExportConfigResponse) bool { return v.EnableNetworkEgressMetering }).(pulumi.BoolOutput)
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfig struct {
	// Type of the sandbox to use for the node.
	Type *SandboxConfigType `pulumi:"type"`
}

// SandboxConfigInput is an input type that accepts SandboxConfigArgs and SandboxConfigOutput values.
// You can construct a concrete instance of `SandboxConfigInput` via:
//
//	SandboxConfigArgs{...}
type SandboxConfigInput interface {
	pulumi.Input

	ToSandboxConfigOutput() SandboxConfigOutput
	ToSandboxConfigOutputWithContext(context.Context) SandboxConfigOutput
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigArgs struct {
	// Type of the sandbox to use for the node.
	Type SandboxConfigTypePtrInput `pulumi:"type"`
}

func (SandboxConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SandboxConfig)(nil)).Elem()
}

func (i SandboxConfigArgs) ToSandboxConfigOutput() SandboxConfigOutput {
	return i.ToSandboxConfigOutputWithContext(context.Background())
}

func (i SandboxConfigArgs) ToSandboxConfigOutputWithContext(ctx context.Context) SandboxConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigOutput)
}

func (i SandboxConfigArgs) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return i.ToSandboxConfigPtrOutputWithContext(context.Background())
}

func (i SandboxConfigArgs) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigOutput).ToSandboxConfigPtrOutputWithContext(ctx)
}

// SandboxConfigPtrInput is an input type that accepts SandboxConfigArgs, SandboxConfigPtr and SandboxConfigPtrOutput values.
// You can construct a concrete instance of `SandboxConfigPtrInput` via:
//
//	        SandboxConfigArgs{...}
//
//	or:
//
//	        nil
type SandboxConfigPtrInput interface {
	pulumi.Input

	ToSandboxConfigPtrOutput() SandboxConfigPtrOutput
	ToSandboxConfigPtrOutputWithContext(context.Context) SandboxConfigPtrOutput
}

type sandboxConfigPtrType SandboxConfigArgs

func SandboxConfigPtr(v *SandboxConfigArgs) SandboxConfigPtrInput {
	return (*sandboxConfigPtrType)(v)
}

func (*sandboxConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SandboxConfig)(nil)).Elem()
}

func (i *sandboxConfigPtrType) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return i.ToSandboxConfigPtrOutputWithContext(context.Background())
}

func (i *sandboxConfigPtrType) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SandboxConfigPtrOutput)
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigOutput struct{ *pulumi.OutputState }

func (SandboxConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SandboxConfig)(nil)).Elem()
}

func (o SandboxConfigOutput) ToSandboxConfigOutput() SandboxConfigOutput {
	return o
}

func (o SandboxConfigOutput) ToSandboxConfigOutputWithContext(ctx context.Context) SandboxConfigOutput {
	return o
}

func (o SandboxConfigOutput) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return o.ToSandboxConfigPtrOutputWithContext(context.Background())
}

func (o SandboxConfigOutput) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SandboxConfig) *SandboxConfig {
		return &v
	}).(SandboxConfigPtrOutput)
}

// Type of the sandbox to use for the node.
func (o SandboxConfigOutput) Type() SandboxConfigTypePtrOutput {
	return o.ApplyT(func(v SandboxConfig) *SandboxConfigType { return v.Type }).(SandboxConfigTypePtrOutput)
}

type SandboxConfigPtrOutput struct{ *pulumi.OutputState }

func (SandboxConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SandboxConfig)(nil)).Elem()
}

func (o SandboxConfigPtrOutput) ToSandboxConfigPtrOutput() SandboxConfigPtrOutput {
	return o
}

func (o SandboxConfigPtrOutput) ToSandboxConfigPtrOutputWithContext(ctx context.Context) SandboxConfigPtrOutput {
	return o
}

func (o SandboxConfigPtrOutput) Elem() SandboxConfigOutput {
	return o.ApplyT(func(v *SandboxConfig) SandboxConfig {
		if v != nil {
			return *v
		}
		var ret SandboxConfig
		return ret
	}).(SandboxConfigOutput)
}

// Type of the sandbox to use for the node.
func (o SandboxConfigPtrOutput) Type() SandboxConfigTypePtrOutput {
	return o.ApplyT(func(v *SandboxConfig) *SandboxConfigType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(SandboxConfigTypePtrOutput)
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigResponse struct {
	// Type of the sandbox to use for the node.
	Type string `pulumi:"type"`
}

// SandboxConfig contains configurations of the sandbox to use for the node.
type SandboxConfigResponseOutput struct{ *pulumi.OutputState }

func (SandboxConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SandboxConfigResponse)(nil)).Elem()
}

func (o SandboxConfigResponseOutput) ToSandboxConfigResponseOutput() SandboxConfigResponseOutput {
	return o
}

func (o SandboxConfigResponseOutput) ToSandboxConfigResponseOutputWithContext(ctx context.Context) SandboxConfigResponseOutput {
	return o
}

// Type of the sandbox to use for the node.
func (o SandboxConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SandboxConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
type SecurityPostureConfig struct {
	// Sets which mode to use for Security Posture features.
	Mode *SecurityPostureConfigMode `pulumi:"mode"`
	// Sets which mode to use for vulnerability scanning.
	VulnerabilityMode *SecurityPostureConfigVulnerabilityMode `pulumi:"vulnerabilityMode"`
}

// SecurityPostureConfigInput is an input type that accepts SecurityPostureConfigArgs and SecurityPostureConfigOutput values.
// You can construct a concrete instance of `SecurityPostureConfigInput` via:
//
//	SecurityPostureConfigArgs{...}
type SecurityPostureConfigInput interface {
	pulumi.Input

	ToSecurityPostureConfigOutput() SecurityPostureConfigOutput
	ToSecurityPostureConfigOutputWithContext(context.Context) SecurityPostureConfigOutput
}

// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
type SecurityPostureConfigArgs struct {
	// Sets which mode to use for Security Posture features.
	Mode SecurityPostureConfigModePtrInput `pulumi:"mode"`
	// Sets which mode to use for vulnerability scanning.
	VulnerabilityMode SecurityPostureConfigVulnerabilityModePtrInput `pulumi:"vulnerabilityMode"`
}

func (SecurityPostureConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPostureConfig)(nil)).Elem()
}

func (i SecurityPostureConfigArgs) ToSecurityPostureConfigOutput() SecurityPostureConfigOutput {
	return i.ToSecurityPostureConfigOutputWithContext(context.Background())
}

func (i SecurityPostureConfigArgs) ToSecurityPostureConfigOutputWithContext(ctx context.Context) SecurityPostureConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPostureConfigOutput)
}

func (i SecurityPostureConfigArgs) ToSecurityPostureConfigPtrOutput() SecurityPostureConfigPtrOutput {
	return i.ToSecurityPostureConfigPtrOutputWithContext(context.Background())
}

func (i SecurityPostureConfigArgs) ToSecurityPostureConfigPtrOutputWithContext(ctx context.Context) SecurityPostureConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPostureConfigOutput).ToSecurityPostureConfigPtrOutputWithContext(ctx)
}

// SecurityPostureConfigPtrInput is an input type that accepts SecurityPostureConfigArgs, SecurityPostureConfigPtr and SecurityPostureConfigPtrOutput values.
// You can construct a concrete instance of `SecurityPostureConfigPtrInput` via:
//
//	        SecurityPostureConfigArgs{...}
//
//	or:
//
//	        nil
type SecurityPostureConfigPtrInput interface {
	pulumi.Input

	ToSecurityPostureConfigPtrOutput() SecurityPostureConfigPtrOutput
	ToSecurityPostureConfigPtrOutputWithContext(context.Context) SecurityPostureConfigPtrOutput
}

type securityPostureConfigPtrType SecurityPostureConfigArgs

func SecurityPostureConfigPtr(v *SecurityPostureConfigArgs) SecurityPostureConfigPtrInput {
	return (*securityPostureConfigPtrType)(v)
}

func (*securityPostureConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPostureConfig)(nil)).Elem()
}

func (i *securityPostureConfigPtrType) ToSecurityPostureConfigPtrOutput() SecurityPostureConfigPtrOutput {
	return i.ToSecurityPostureConfigPtrOutputWithContext(context.Background())
}

func (i *securityPostureConfigPtrType) ToSecurityPostureConfigPtrOutputWithContext(ctx context.Context) SecurityPostureConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPostureConfigPtrOutput)
}

// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
type SecurityPostureConfigOutput struct{ *pulumi.OutputState }

func (SecurityPostureConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPostureConfig)(nil)).Elem()
}

func (o SecurityPostureConfigOutput) ToSecurityPostureConfigOutput() SecurityPostureConfigOutput {
	return o
}

func (o SecurityPostureConfigOutput) ToSecurityPostureConfigOutputWithContext(ctx context.Context) SecurityPostureConfigOutput {
	return o
}

func (o SecurityPostureConfigOutput) ToSecurityPostureConfigPtrOutput() SecurityPostureConfigPtrOutput {
	return o.ToSecurityPostureConfigPtrOutputWithContext(context.Background())
}

func (o SecurityPostureConfigOutput) ToSecurityPostureConfigPtrOutputWithContext(ctx context.Context) SecurityPostureConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityPostureConfig) *SecurityPostureConfig {
		return &v
	}).(SecurityPostureConfigPtrOutput)
}

// Sets which mode to use for Security Posture features.
func (o SecurityPostureConfigOutput) Mode() SecurityPostureConfigModePtrOutput {
	return o.ApplyT(func(v SecurityPostureConfig) *SecurityPostureConfigMode { return v.Mode }).(SecurityPostureConfigModePtrOutput)
}

// Sets which mode to use for vulnerability scanning.
func (o SecurityPostureConfigOutput) VulnerabilityMode() SecurityPostureConfigVulnerabilityModePtrOutput {
	return o.ApplyT(func(v SecurityPostureConfig) *SecurityPostureConfigVulnerabilityMode { return v.VulnerabilityMode }).(SecurityPostureConfigVulnerabilityModePtrOutput)
}

type SecurityPostureConfigPtrOutput struct{ *pulumi.OutputState }

func (SecurityPostureConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPostureConfig)(nil)).Elem()
}

func (o SecurityPostureConfigPtrOutput) ToSecurityPostureConfigPtrOutput() SecurityPostureConfigPtrOutput {
	return o
}

func (o SecurityPostureConfigPtrOutput) ToSecurityPostureConfigPtrOutputWithContext(ctx context.Context) SecurityPostureConfigPtrOutput {
	return o
}

func (o SecurityPostureConfigPtrOutput) Elem() SecurityPostureConfigOutput {
	return o.ApplyT(func(v *SecurityPostureConfig) SecurityPostureConfig {
		if v != nil {
			return *v
		}
		var ret SecurityPostureConfig
		return ret
	}).(SecurityPostureConfigOutput)
}

// Sets which mode to use for Security Posture features.
func (o SecurityPostureConfigPtrOutput) Mode() SecurityPostureConfigModePtrOutput {
	return o.ApplyT(func(v *SecurityPostureConfig) *SecurityPostureConfigMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(SecurityPostureConfigModePtrOutput)
}

// Sets which mode to use for vulnerability scanning.
func (o SecurityPostureConfigPtrOutput) VulnerabilityMode() SecurityPostureConfigVulnerabilityModePtrOutput {
	return o.ApplyT(func(v *SecurityPostureConfig) *SecurityPostureConfigVulnerabilityMode {
		if v == nil {
			return nil
		}
		return v.VulnerabilityMode
	}).(SecurityPostureConfigVulnerabilityModePtrOutput)
}

// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
type SecurityPostureConfigResponse struct {
	// Sets which mode to use for Security Posture features.
	Mode string `pulumi:"mode"`
	// Sets which mode to use for vulnerability scanning.
	VulnerabilityMode string `pulumi:"vulnerabilityMode"`
}

// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
type SecurityPostureConfigResponseOutput struct{ *pulumi.OutputState }

func (SecurityPostureConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPostureConfigResponse)(nil)).Elem()
}

func (o SecurityPostureConfigResponseOutput) ToSecurityPostureConfigResponseOutput() SecurityPostureConfigResponseOutput {
	return o
}

func (o SecurityPostureConfigResponseOutput) ToSecurityPostureConfigResponseOutputWithContext(ctx context.Context) SecurityPostureConfigResponseOutput {
	return o
}

// Sets which mode to use for Security Posture features.
func (o SecurityPostureConfigResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPostureConfigResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Sets which mode to use for vulnerability scanning.
func (o SecurityPostureConfigResponseOutput) VulnerabilityMode() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPostureConfigResponse) string { return v.VulnerabilityMode }).(pulumi.StringOutput)
}

// Config to block services with externalIPs field.
type ServiceExternalIPsConfig struct {
	// Whether Services with ExternalIPs field are allowed or not.
	Enabled *bool `pulumi:"enabled"`
}

// ServiceExternalIPsConfigInput is an input type that accepts ServiceExternalIPsConfigArgs and ServiceExternalIPsConfigOutput values.
// You can construct a concrete instance of `ServiceExternalIPsConfigInput` via:
//
//	ServiceExternalIPsConfigArgs{...}
type ServiceExternalIPsConfigInput interface {
	pulumi.Input

	ToServiceExternalIPsConfigOutput() ServiceExternalIPsConfigOutput
	ToServiceExternalIPsConfigOutputWithContext(context.Context) ServiceExternalIPsConfigOutput
}

// Config to block services with externalIPs field.
type ServiceExternalIPsConfigArgs struct {
	// Whether Services with ExternalIPs field are allowed or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ServiceExternalIPsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceExternalIPsConfig)(nil)).Elem()
}

func (i ServiceExternalIPsConfigArgs) ToServiceExternalIPsConfigOutput() ServiceExternalIPsConfigOutput {
	return i.ToServiceExternalIPsConfigOutputWithContext(context.Background())
}

func (i ServiceExternalIPsConfigArgs) ToServiceExternalIPsConfigOutputWithContext(ctx context.Context) ServiceExternalIPsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceExternalIPsConfigOutput)
}

func (i ServiceExternalIPsConfigArgs) ToServiceExternalIPsConfigPtrOutput() ServiceExternalIPsConfigPtrOutput {
	return i.ToServiceExternalIPsConfigPtrOutputWithContext(context.Background())
}

func (i ServiceExternalIPsConfigArgs) ToServiceExternalIPsConfigPtrOutputWithContext(ctx context.Context) ServiceExternalIPsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceExternalIPsConfigOutput).ToServiceExternalIPsConfigPtrOutputWithContext(ctx)
}

// ServiceExternalIPsConfigPtrInput is an input type that accepts ServiceExternalIPsConfigArgs, ServiceExternalIPsConfigPtr and ServiceExternalIPsConfigPtrOutput values.
// You can construct a concrete instance of `ServiceExternalIPsConfigPtrInput` via:
//
//	        ServiceExternalIPsConfigArgs{...}
//
//	or:
//
//	        nil
type ServiceExternalIPsConfigPtrInput interface {
	pulumi.Input

	ToServiceExternalIPsConfigPtrOutput() ServiceExternalIPsConfigPtrOutput
	ToServiceExternalIPsConfigPtrOutputWithContext(context.Context) ServiceExternalIPsConfigPtrOutput
}

type serviceExternalIPsConfigPtrType ServiceExternalIPsConfigArgs

func ServiceExternalIPsConfigPtr(v *ServiceExternalIPsConfigArgs) ServiceExternalIPsConfigPtrInput {
	return (*serviceExternalIPsConfigPtrType)(v)
}

func (*serviceExternalIPsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceExternalIPsConfig)(nil)).Elem()
}

func (i *serviceExternalIPsConfigPtrType) ToServiceExternalIPsConfigPtrOutput() ServiceExternalIPsConfigPtrOutput {
	return i.ToServiceExternalIPsConfigPtrOutputWithContext(context.Background())
}

func (i *serviceExternalIPsConfigPtrType) ToServiceExternalIPsConfigPtrOutputWithContext(ctx context.Context) ServiceExternalIPsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceExternalIPsConfigPtrOutput)
}

// Config to block services with externalIPs field.
type ServiceExternalIPsConfigOutput struct{ *pulumi.OutputState }

func (ServiceExternalIPsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceExternalIPsConfig)(nil)).Elem()
}

func (o ServiceExternalIPsConfigOutput) ToServiceExternalIPsConfigOutput() ServiceExternalIPsConfigOutput {
	return o
}

func (o ServiceExternalIPsConfigOutput) ToServiceExternalIPsConfigOutputWithContext(ctx context.Context) ServiceExternalIPsConfigOutput {
	return o
}

func (o ServiceExternalIPsConfigOutput) ToServiceExternalIPsConfigPtrOutput() ServiceExternalIPsConfigPtrOutput {
	return o.ToServiceExternalIPsConfigPtrOutputWithContext(context.Background())
}

func (o ServiceExternalIPsConfigOutput) ToServiceExternalIPsConfigPtrOutputWithContext(ctx context.Context) ServiceExternalIPsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceExternalIPsConfig) *ServiceExternalIPsConfig {
		return &v
	}).(ServiceExternalIPsConfigPtrOutput)
}

// Whether Services with ExternalIPs field are allowed or not.
func (o ServiceExternalIPsConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceExternalIPsConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ServiceExternalIPsConfigPtrOutput struct{ *pulumi.OutputState }

func (ServiceExternalIPsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceExternalIPsConfig)(nil)).Elem()
}

func (o ServiceExternalIPsConfigPtrOutput) ToServiceExternalIPsConfigPtrOutput() ServiceExternalIPsConfigPtrOutput {
	return o
}

func (o ServiceExternalIPsConfigPtrOutput) ToServiceExternalIPsConfigPtrOutputWithContext(ctx context.Context) ServiceExternalIPsConfigPtrOutput {
	return o
}

func (o ServiceExternalIPsConfigPtrOutput) Elem() ServiceExternalIPsConfigOutput {
	return o.ApplyT(func(v *ServiceExternalIPsConfig) ServiceExternalIPsConfig {
		if v != nil {
			return *v
		}
		var ret ServiceExternalIPsConfig
		return ret
	}).(ServiceExternalIPsConfigOutput)
}

// Whether Services with ExternalIPs field are allowed or not.
func (o ServiceExternalIPsConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceExternalIPsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Config to block services with externalIPs field.
type ServiceExternalIPsConfigResponse struct {
	// Whether Services with ExternalIPs field are allowed or not.
	Enabled bool `pulumi:"enabled"`
}

// Config to block services with externalIPs field.
type ServiceExternalIPsConfigResponseOutput struct{ *pulumi.OutputState }

func (ServiceExternalIPsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceExternalIPsConfigResponse)(nil)).Elem()
}

func (o ServiceExternalIPsConfigResponseOutput) ToServiceExternalIPsConfigResponseOutput() ServiceExternalIPsConfigResponseOutput {
	return o
}

func (o ServiceExternalIPsConfigResponseOutput) ToServiceExternalIPsConfigResponseOutputWithContext(ctx context.Context) ServiceExternalIPsConfigResponseOutput {
	return o
}

// Whether Services with ExternalIPs field are allowed or not.
func (o ServiceExternalIPsConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ServiceExternalIPsConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfig struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
}

// ShieldedInstanceConfigInput is an input type that accepts ShieldedInstanceConfigArgs and ShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigInput` via:
//
//	ShieldedInstanceConfigArgs{...}
type ShieldedInstanceConfigInput interface {
	pulumi.Input

	ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput
	ToShieldedInstanceConfigOutputWithContext(context.Context) ShieldedInstanceConfigOutput
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
}

func (ShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return i.ToShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput)
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput).ToShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigPtrInput is an input type that accepts ShieldedInstanceConfigArgs, ShieldedInstanceConfigPtr and ShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigPtrInput` via:
//
//	        ShieldedInstanceConfigArgs{...}
//
//	or:
//
//	        nil
type ShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput
	ToShieldedInstanceConfigPtrOutputWithContext(context.Context) ShieldedInstanceConfigPtrOutput
}

type shieldedInstanceConfigPtrType ShieldedInstanceConfigArgs

func ShieldedInstanceConfigPtr(v *ShieldedInstanceConfigArgs) ShieldedInstanceConfigPtrInput {
	return (*shieldedInstanceConfigPtrType)(v)
}

func (*shieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShieldedInstanceConfig) *ShieldedInstanceConfig {
		return &v
	}).(ShieldedInstanceConfigPtrOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
func (o ShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
func (o ShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) Elem() ShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) ShieldedInstanceConfig {
		if v != nil {
			return *v
		}
		var ret ShieldedInstanceConfig
		return ret
	}).(ShieldedInstanceConfigOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
func (o ShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
func (o ShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponse struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return o
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.
func (o ShieldedInstanceConfigResponseOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.
func (o ShieldedInstanceConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

// Configuration of Shielded Nodes feature.
type ShieldedNodes struct {
	// Whether Shielded Nodes features are enabled on all nodes in this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// ShieldedNodesInput is an input type that accepts ShieldedNodesArgs and ShieldedNodesOutput values.
// You can construct a concrete instance of `ShieldedNodesInput` via:
//
//	ShieldedNodesArgs{...}
type ShieldedNodesInput interface {
	pulumi.Input

	ToShieldedNodesOutput() ShieldedNodesOutput
	ToShieldedNodesOutputWithContext(context.Context) ShieldedNodesOutput
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesArgs struct {
	// Whether Shielded Nodes features are enabled on all nodes in this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ShieldedNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedNodes)(nil)).Elem()
}

func (i ShieldedNodesArgs) ToShieldedNodesOutput() ShieldedNodesOutput {
	return i.ToShieldedNodesOutputWithContext(context.Background())
}

func (i ShieldedNodesArgs) ToShieldedNodesOutputWithContext(ctx context.Context) ShieldedNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesOutput)
}

func (i ShieldedNodesArgs) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return i.ToShieldedNodesPtrOutputWithContext(context.Background())
}

func (i ShieldedNodesArgs) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesOutput).ToShieldedNodesPtrOutputWithContext(ctx)
}

// ShieldedNodesPtrInput is an input type that accepts ShieldedNodesArgs, ShieldedNodesPtr and ShieldedNodesPtrOutput values.
// You can construct a concrete instance of `ShieldedNodesPtrInput` via:
//
//	        ShieldedNodesArgs{...}
//
//	or:
//
//	        nil
type ShieldedNodesPtrInput interface {
	pulumi.Input

	ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput
	ToShieldedNodesPtrOutputWithContext(context.Context) ShieldedNodesPtrOutput
}

type shieldedNodesPtrType ShieldedNodesArgs

func ShieldedNodesPtr(v *ShieldedNodesArgs) ShieldedNodesPtrInput {
	return (*shieldedNodesPtrType)(v)
}

func (*shieldedNodesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedNodes)(nil)).Elem()
}

func (i *shieldedNodesPtrType) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return i.ToShieldedNodesPtrOutputWithContext(context.Background())
}

func (i *shieldedNodesPtrType) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedNodesPtrOutput)
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesOutput struct{ *pulumi.OutputState }

func (ShieldedNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedNodes)(nil)).Elem()
}

func (o ShieldedNodesOutput) ToShieldedNodesOutput() ShieldedNodesOutput {
	return o
}

func (o ShieldedNodesOutput) ToShieldedNodesOutputWithContext(ctx context.Context) ShieldedNodesOutput {
	return o
}

func (o ShieldedNodesOutput) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return o.ToShieldedNodesPtrOutputWithContext(context.Background())
}

func (o ShieldedNodesOutput) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShieldedNodes) *ShieldedNodes {
		return &v
	}).(ShieldedNodesPtrOutput)
}

// Whether Shielded Nodes features are enabled on all nodes in this cluster.
func (o ShieldedNodesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedNodes) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ShieldedNodesPtrOutput struct{ *pulumi.OutputState }

func (ShieldedNodesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedNodes)(nil)).Elem()
}

func (o ShieldedNodesPtrOutput) ToShieldedNodesPtrOutput() ShieldedNodesPtrOutput {
	return o
}

func (o ShieldedNodesPtrOutput) ToShieldedNodesPtrOutputWithContext(ctx context.Context) ShieldedNodesPtrOutput {
	return o
}

func (o ShieldedNodesPtrOutput) Elem() ShieldedNodesOutput {
	return o.ApplyT(func(v *ShieldedNodes) ShieldedNodes {
		if v != nil {
			return *v
		}
		var ret ShieldedNodes
		return ret
	}).(ShieldedNodesOutput)
}

// Whether Shielded Nodes features are enabled on all nodes in this cluster.
func (o ShieldedNodesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedNodes) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesResponse struct {
	// Whether Shielded Nodes features are enabled on all nodes in this cluster.
	Enabled bool `pulumi:"enabled"`
}

// Configuration of Shielded Nodes feature.
type ShieldedNodesResponseOutput struct{ *pulumi.OutputState }

func (ShieldedNodesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedNodesResponse)(nil)).Elem()
}

func (o ShieldedNodesResponseOutput) ToShieldedNodesResponseOutput() ShieldedNodesResponseOutput {
	return o
}

func (o ShieldedNodesResponseOutput) ToShieldedNodesResponseOutputWithContext(ctx context.Context) ShieldedNodesResponseOutput {
	return o
}

// Whether Shielded Nodes features are enabled on all nodes in this cluster.
func (o ShieldedNodesResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedNodesResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// SoleTenantConfig contains the NodeAffinities to specify what shared sole tenant node groups should back the node pool.
type SoleTenantConfig struct {
	// NodeAffinities used to match to a shared sole tenant node group.
	NodeAffinities []NodeAffinity `pulumi:"nodeAffinities"`
}

// SoleTenantConfigInput is an input type that accepts SoleTenantConfigArgs and SoleTenantConfigOutput values.
// You can construct a concrete instance of `SoleTenantConfigInput` via:
//
//	SoleTenantConfigArgs{...}
type SoleTenantConfigInput interface {
	pulumi.Input

	ToSoleTenantConfigOutput() SoleTenantConfigOutput
	ToSoleTenantConfigOutputWithContext(context.Context) SoleTenantConfigOutput
}

// SoleTenantConfig contains the NodeAffinities to specify what shared sole tenant node groups should back the node pool.
type SoleTenantConfigArgs struct {
	// NodeAffinities used to match to a shared sole tenant node group.
	NodeAffinities NodeAffinityArrayInput `pulumi:"nodeAffinities"`
}

func (SoleTenantConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoleTenantConfig)(nil)).Elem()
}

func (i SoleTenantConfigArgs) ToSoleTenantConfigOutput() SoleTenantConfigOutput {
	return i.ToSoleTenantConfigOutputWithContext(context.Background())
}

func (i SoleTenantConfigArgs) ToSoleTenantConfigOutputWithContext(ctx context.Context) SoleTenantConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoleTenantConfigOutput)
}

func (i SoleTenantConfigArgs) ToSoleTenantConfigPtrOutput() SoleTenantConfigPtrOutput {
	return i.ToSoleTenantConfigPtrOutputWithContext(context.Background())
}

func (i SoleTenantConfigArgs) ToSoleTenantConfigPtrOutputWithContext(ctx context.Context) SoleTenantConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoleTenantConfigOutput).ToSoleTenantConfigPtrOutputWithContext(ctx)
}

// SoleTenantConfigPtrInput is an input type that accepts SoleTenantConfigArgs, SoleTenantConfigPtr and SoleTenantConfigPtrOutput values.
// You can construct a concrete instance of `SoleTenantConfigPtrInput` via:
//
//	        SoleTenantConfigArgs{...}
//
//	or:
//
//	        nil
type SoleTenantConfigPtrInput interface {
	pulumi.Input

	ToSoleTenantConfigPtrOutput() SoleTenantConfigPtrOutput
	ToSoleTenantConfigPtrOutputWithContext(context.Context) SoleTenantConfigPtrOutput
}

type soleTenantConfigPtrType SoleTenantConfigArgs

func SoleTenantConfigPtr(v *SoleTenantConfigArgs) SoleTenantConfigPtrInput {
	return (*soleTenantConfigPtrType)(v)
}

func (*soleTenantConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoleTenantConfig)(nil)).Elem()
}

func (i *soleTenantConfigPtrType) ToSoleTenantConfigPtrOutput() SoleTenantConfigPtrOutput {
	return i.ToSoleTenantConfigPtrOutputWithContext(context.Background())
}

func (i *soleTenantConfigPtrType) ToSoleTenantConfigPtrOutputWithContext(ctx context.Context) SoleTenantConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoleTenantConfigPtrOutput)
}

// SoleTenantConfig contains the NodeAffinities to specify what shared sole tenant node groups should back the node pool.
type SoleTenantConfigOutput struct{ *pulumi.OutputState }

func (SoleTenantConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoleTenantConfig)(nil)).Elem()
}

func (o SoleTenantConfigOutput) ToSoleTenantConfigOutput() SoleTenantConfigOutput {
	return o
}

func (o SoleTenantConfigOutput) ToSoleTenantConfigOutputWithContext(ctx context.Context) SoleTenantConfigOutput {
	return o
}

func (o SoleTenantConfigOutput) ToSoleTenantConfigPtrOutput() SoleTenantConfigPtrOutput {
	return o.ToSoleTenantConfigPtrOutputWithContext(context.Background())
}

func (o SoleTenantConfigOutput) ToSoleTenantConfigPtrOutputWithContext(ctx context.Context) SoleTenantConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SoleTenantConfig) *SoleTenantConfig {
		return &v
	}).(SoleTenantConfigPtrOutput)
}

// NodeAffinities used to match to a shared sole tenant node group.
func (o SoleTenantConfigOutput) NodeAffinities() NodeAffinityArrayOutput {
	return o.ApplyT(func(v SoleTenantConfig) []NodeAffinity { return v.NodeAffinities }).(NodeAffinityArrayOutput)
}

type SoleTenantConfigPtrOutput struct{ *pulumi.OutputState }

func (SoleTenantConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoleTenantConfig)(nil)).Elem()
}

func (o SoleTenantConfigPtrOutput) ToSoleTenantConfigPtrOutput() SoleTenantConfigPtrOutput {
	return o
}

func (o SoleTenantConfigPtrOutput) ToSoleTenantConfigPtrOutputWithContext(ctx context.Context) SoleTenantConfigPtrOutput {
	return o
}

func (o SoleTenantConfigPtrOutput) Elem() SoleTenantConfigOutput {
	return o.ApplyT(func(v *SoleTenantConfig) SoleTenantConfig {
		if v != nil {
			return *v
		}
		var ret SoleTenantConfig
		return ret
	}).(SoleTenantConfigOutput)
}

// NodeAffinities used to match to a shared sole tenant node group.
func (o SoleTenantConfigPtrOutput) NodeAffinities() NodeAffinityArrayOutput {
	return o.ApplyT(func(v *SoleTenantConfig) []NodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinities
	}).(NodeAffinityArrayOutput)
}

// SoleTenantConfig contains the NodeAffinities to specify what shared sole tenant node groups should back the node pool.
type SoleTenantConfigResponse struct {
	// NodeAffinities used to match to a shared sole tenant node group.
	NodeAffinities []NodeAffinityResponse `pulumi:"nodeAffinities"`
}

// SoleTenantConfig contains the NodeAffinities to specify what shared sole tenant node groups should back the node pool.
type SoleTenantConfigResponseOutput struct{ *pulumi.OutputState }

func (SoleTenantConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoleTenantConfigResponse)(nil)).Elem()
}

func (o SoleTenantConfigResponseOutput) ToSoleTenantConfigResponseOutput() SoleTenantConfigResponseOutput {
	return o
}

func (o SoleTenantConfigResponseOutput) ToSoleTenantConfigResponseOutputWithContext(ctx context.Context) SoleTenantConfigResponseOutput {
	return o
}

// NodeAffinities used to match to a shared sole tenant node group.
func (o SoleTenantConfigResponseOutput) NodeAffinities() NodeAffinityResponseArrayOutput {
	return o.ApplyT(func(v SoleTenantConfigResponse) []NodeAffinityResponse { return v.NodeAffinities }).(NodeAffinityResponseArrayOutput)
}

// Standard rollout policy is the default policy for blue-green.
type StandardRolloutPolicy struct {
	// Number of blue nodes to drain in a batch.
	BatchNodeCount *int `pulumi:"batchNodeCount"`
	// Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].
	BatchPercentage *float64 `pulumi:"batchPercentage"`
	// Soak time after each batch gets drained. Default to zero.
	BatchSoakDuration *string `pulumi:"batchSoakDuration"`
}

// StandardRolloutPolicyInput is an input type that accepts StandardRolloutPolicyArgs and StandardRolloutPolicyOutput values.
// You can construct a concrete instance of `StandardRolloutPolicyInput` via:
//
//	StandardRolloutPolicyArgs{...}
type StandardRolloutPolicyInput interface {
	pulumi.Input

	ToStandardRolloutPolicyOutput() StandardRolloutPolicyOutput
	ToStandardRolloutPolicyOutputWithContext(context.Context) StandardRolloutPolicyOutput
}

// Standard rollout policy is the default policy for blue-green.
type StandardRolloutPolicyArgs struct {
	// Number of blue nodes to drain in a batch.
	BatchNodeCount pulumi.IntPtrInput `pulumi:"batchNodeCount"`
	// Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].
	BatchPercentage pulumi.Float64PtrInput `pulumi:"batchPercentage"`
	// Soak time after each batch gets drained. Default to zero.
	BatchSoakDuration pulumi.StringPtrInput `pulumi:"batchSoakDuration"`
}

func (StandardRolloutPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardRolloutPolicy)(nil)).Elem()
}

func (i StandardRolloutPolicyArgs) ToStandardRolloutPolicyOutput() StandardRolloutPolicyOutput {
	return i.ToStandardRolloutPolicyOutputWithContext(context.Background())
}

func (i StandardRolloutPolicyArgs) ToStandardRolloutPolicyOutputWithContext(ctx context.Context) StandardRolloutPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardRolloutPolicyOutput)
}

func (i StandardRolloutPolicyArgs) ToStandardRolloutPolicyPtrOutput() StandardRolloutPolicyPtrOutput {
	return i.ToStandardRolloutPolicyPtrOutputWithContext(context.Background())
}

func (i StandardRolloutPolicyArgs) ToStandardRolloutPolicyPtrOutputWithContext(ctx context.Context) StandardRolloutPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardRolloutPolicyOutput).ToStandardRolloutPolicyPtrOutputWithContext(ctx)
}

// StandardRolloutPolicyPtrInput is an input type that accepts StandardRolloutPolicyArgs, StandardRolloutPolicyPtr and StandardRolloutPolicyPtrOutput values.
// You can construct a concrete instance of `StandardRolloutPolicyPtrInput` via:
//
//	        StandardRolloutPolicyArgs{...}
//
//	or:
//
//	        nil
type StandardRolloutPolicyPtrInput interface {
	pulumi.Input

	ToStandardRolloutPolicyPtrOutput() StandardRolloutPolicyPtrOutput
	ToStandardRolloutPolicyPtrOutputWithContext(context.Context) StandardRolloutPolicyPtrOutput
}

type standardRolloutPolicyPtrType StandardRolloutPolicyArgs

func StandardRolloutPolicyPtr(v *StandardRolloutPolicyArgs) StandardRolloutPolicyPtrInput {
	return (*standardRolloutPolicyPtrType)(v)
}

func (*standardRolloutPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardRolloutPolicy)(nil)).Elem()
}

func (i *standardRolloutPolicyPtrType) ToStandardRolloutPolicyPtrOutput() StandardRolloutPolicyPtrOutput {
	return i.ToStandardRolloutPolicyPtrOutputWithContext(context.Background())
}

func (i *standardRolloutPolicyPtrType) ToStandardRolloutPolicyPtrOutputWithContext(ctx context.Context) StandardRolloutPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardRolloutPolicyPtrOutput)
}

// Standard rollout policy is the default policy for blue-green.
type StandardRolloutPolicyOutput struct{ *pulumi.OutputState }

func (StandardRolloutPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardRolloutPolicy)(nil)).Elem()
}

func (o StandardRolloutPolicyOutput) ToStandardRolloutPolicyOutput() StandardRolloutPolicyOutput {
	return o
}

func (o StandardRolloutPolicyOutput) ToStandardRolloutPolicyOutputWithContext(ctx context.Context) StandardRolloutPolicyOutput {
	return o
}

func (o StandardRolloutPolicyOutput) ToStandardRolloutPolicyPtrOutput() StandardRolloutPolicyPtrOutput {
	return o.ToStandardRolloutPolicyPtrOutputWithContext(context.Background())
}

func (o StandardRolloutPolicyOutput) ToStandardRolloutPolicyPtrOutputWithContext(ctx context.Context) StandardRolloutPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardRolloutPolicy) *StandardRolloutPolicy {
		return &v
	}).(StandardRolloutPolicyPtrOutput)
}

// Number of blue nodes to drain in a batch.
func (o StandardRolloutPolicyOutput) BatchNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StandardRolloutPolicy) *int { return v.BatchNodeCount }).(pulumi.IntPtrOutput)
}

// Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].
func (o StandardRolloutPolicyOutput) BatchPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StandardRolloutPolicy) *float64 { return v.BatchPercentage }).(pulumi.Float64PtrOutput)
}

// Soak time after each batch gets drained. Default to zero.
func (o StandardRolloutPolicyOutput) BatchSoakDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StandardRolloutPolicy) *string { return v.BatchSoakDuration }).(pulumi.StringPtrOutput)
}

type StandardRolloutPolicyPtrOutput struct{ *pulumi.OutputState }

func (StandardRolloutPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardRolloutPolicy)(nil)).Elem()
}

func (o StandardRolloutPolicyPtrOutput) ToStandardRolloutPolicyPtrOutput() StandardRolloutPolicyPtrOutput {
	return o
}

func (o StandardRolloutPolicyPtrOutput) ToStandardRolloutPolicyPtrOutputWithContext(ctx context.Context) StandardRolloutPolicyPtrOutput {
	return o
}

func (o StandardRolloutPolicyPtrOutput) Elem() StandardRolloutPolicyOutput {
	return o.ApplyT(func(v *StandardRolloutPolicy) StandardRolloutPolicy {
		if v != nil {
			return *v
		}
		var ret StandardRolloutPolicy
		return ret
	}).(StandardRolloutPolicyOutput)
}

// Number of blue nodes to drain in a batch.
func (o StandardRolloutPolicyPtrOutput) BatchNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StandardRolloutPolicy) *int {
		if v == nil {
			return nil
		}
		return v.BatchNodeCount
	}).(pulumi.IntPtrOutput)
}

// Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].
func (o StandardRolloutPolicyPtrOutput) BatchPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StandardRolloutPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.BatchPercentage
	}).(pulumi.Float64PtrOutput)
}

// Soak time after each batch gets drained. Default to zero.
func (o StandardRolloutPolicyPtrOutput) BatchSoakDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandardRolloutPolicy) *string {
		if v == nil {
			return nil
		}
		return v.BatchSoakDuration
	}).(pulumi.StringPtrOutput)
}

// Standard rollout policy is the default policy for blue-green.
type StandardRolloutPolicyResponse struct {
	// Number of blue nodes to drain in a batch.
	BatchNodeCount int `pulumi:"batchNodeCount"`
	// Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].
	BatchPercentage float64 `pulumi:"batchPercentage"`
	// Soak time after each batch gets drained. Default to zero.
	BatchSoakDuration string `pulumi:"batchSoakDuration"`
}

// Standard rollout policy is the default policy for blue-green.
type StandardRolloutPolicyResponseOutput struct{ *pulumi.OutputState }

func (StandardRolloutPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardRolloutPolicyResponse)(nil)).Elem()
}

func (o StandardRolloutPolicyResponseOutput) ToStandardRolloutPolicyResponseOutput() StandardRolloutPolicyResponseOutput {
	return o
}

func (o StandardRolloutPolicyResponseOutput) ToStandardRolloutPolicyResponseOutputWithContext(ctx context.Context) StandardRolloutPolicyResponseOutput {
	return o
}

// Number of blue nodes to drain in a batch.
func (o StandardRolloutPolicyResponseOutput) BatchNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v StandardRolloutPolicyResponse) int { return v.BatchNodeCount }).(pulumi.IntOutput)
}

// Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].
func (o StandardRolloutPolicyResponseOutput) BatchPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v StandardRolloutPolicyResponse) float64 { return v.BatchPercentage }).(pulumi.Float64Output)
}

// Soak time after each batch gets drained. Default to zero.
func (o StandardRolloutPolicyResponseOutput) BatchSoakDuration() pulumi.StringOutput {
	return o.ApplyT(func(v StandardRolloutPolicyResponse) string { return v.BatchSoakDuration }).(pulumi.StringOutput)
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusCondition struct {
	// Canonical code of the condition.
	CanonicalCode *StatusConditionCanonicalCode `pulumi:"canonicalCode"`
	// Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
	//
	// Deprecated: Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
	Code *StatusConditionCode `pulumi:"code"`
	// Human-friendly representation of the condition
	Message *string `pulumi:"message"`
}

// StatusConditionInput is an input type that accepts StatusConditionArgs and StatusConditionOutput values.
// You can construct a concrete instance of `StatusConditionInput` via:
//
//	StatusConditionArgs{...}
type StatusConditionInput interface {
	pulumi.Input

	ToStatusConditionOutput() StatusConditionOutput
	ToStatusConditionOutputWithContext(context.Context) StatusConditionOutput
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionArgs struct {
	// Canonical code of the condition.
	CanonicalCode StatusConditionCanonicalCodePtrInput `pulumi:"canonicalCode"`
	// Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
	//
	// Deprecated: Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
	Code StatusConditionCodePtrInput `pulumi:"code"`
	// Human-friendly representation of the condition
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusCondition)(nil)).Elem()
}

func (i StatusConditionArgs) ToStatusConditionOutput() StatusConditionOutput {
	return i.ToStatusConditionOutputWithContext(context.Background())
}

func (i StatusConditionArgs) ToStatusConditionOutputWithContext(ctx context.Context) StatusConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusConditionOutput)
}

// StatusConditionArrayInput is an input type that accepts StatusConditionArray and StatusConditionArrayOutput values.
// You can construct a concrete instance of `StatusConditionArrayInput` via:
//
//	StatusConditionArray{ StatusConditionArgs{...} }
type StatusConditionArrayInput interface {
	pulumi.Input

	ToStatusConditionArrayOutput() StatusConditionArrayOutput
	ToStatusConditionArrayOutputWithContext(context.Context) StatusConditionArrayOutput
}

type StatusConditionArray []StatusConditionInput

func (StatusConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusCondition)(nil)).Elem()
}

func (i StatusConditionArray) ToStatusConditionArrayOutput() StatusConditionArrayOutput {
	return i.ToStatusConditionArrayOutputWithContext(context.Background())
}

func (i StatusConditionArray) ToStatusConditionArrayOutputWithContext(ctx context.Context) StatusConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusConditionArrayOutput)
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionOutput struct{ *pulumi.OutputState }

func (StatusConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusCondition)(nil)).Elem()
}

func (o StatusConditionOutput) ToStatusConditionOutput() StatusConditionOutput {
	return o
}

func (o StatusConditionOutput) ToStatusConditionOutputWithContext(ctx context.Context) StatusConditionOutput {
	return o
}

// Canonical code of the condition.
func (o StatusConditionOutput) CanonicalCode() StatusConditionCanonicalCodePtrOutput {
	return o.ApplyT(func(v StatusCondition) *StatusConditionCanonicalCode { return v.CanonicalCode }).(StatusConditionCanonicalCodePtrOutput)
}

// Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
//
// Deprecated: Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
func (o StatusConditionOutput) Code() StatusConditionCodePtrOutput {
	return o.ApplyT(func(v StatusCondition) *StatusConditionCode { return v.Code }).(StatusConditionCodePtrOutput)
}

// Human-friendly representation of the condition
func (o StatusConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusConditionArrayOutput struct{ *pulumi.OutputState }

func (StatusConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusCondition)(nil)).Elem()
}

func (o StatusConditionArrayOutput) ToStatusConditionArrayOutput() StatusConditionArrayOutput {
	return o
}

func (o StatusConditionArrayOutput) ToStatusConditionArrayOutputWithContext(ctx context.Context) StatusConditionArrayOutput {
	return o
}

func (o StatusConditionArrayOutput) Index(i pulumi.IntInput) StatusConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusCondition {
		return vs[0].([]StatusCondition)[vs[1].(int)]
	}).(StatusConditionOutput)
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionResponse struct {
	// Canonical code of the condition.
	CanonicalCode string `pulumi:"canonicalCode"`
	// Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
	//
	// Deprecated: Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
	Code string `pulumi:"code"`
	// Human-friendly representation of the condition
	Message string `pulumi:"message"`
}

// StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).
type StatusConditionResponseOutput struct{ *pulumi.OutputState }

func (StatusConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusConditionResponse)(nil)).Elem()
}

func (o StatusConditionResponseOutput) ToStatusConditionResponseOutput() StatusConditionResponseOutput {
	return o
}

func (o StatusConditionResponseOutput) ToStatusConditionResponseOutputWithContext(ctx context.Context) StatusConditionResponseOutput {
	return o
}

// Canonical code of the condition.
func (o StatusConditionResponseOutput) CanonicalCode() pulumi.StringOutput {
	return o.ApplyT(func(v StatusConditionResponse) string { return v.CanonicalCode }).(pulumi.StringOutput)
}

// Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
//
// Deprecated: Machine-friendly representation of the condition Deprecated. Use canonical_code instead.
func (o StatusConditionResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v StatusConditionResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Human-friendly representation of the condition
func (o StatusConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusConditionResponse)(nil)).Elem()
}

func (o StatusConditionResponseArrayOutput) ToStatusConditionResponseArrayOutput() StatusConditionResponseArrayOutput {
	return o
}

func (o StatusConditionResponseArrayOutput) ToStatusConditionResponseArrayOutputWithContext(ctx context.Context) StatusConditionResponseArrayOutput {
	return o
}

func (o StatusConditionResponseArrayOutput) Index(i pulumi.IntInput) StatusConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusConditionResponse {
		return vs[0].([]StatusConditionResponse)[vs[1].(int)]
	}).(StatusConditionResponseOutput)
}

// Represents an arbitrary window of time.
type TimeWindow struct {
	// The time that the window ends. The end time should take place after the start time.
	EndTime *string `pulumi:"endTime"`
	// MaintenanceExclusionOptions provides maintenance exclusion related options.
	MaintenanceExclusionOptions *MaintenanceExclusionOptions `pulumi:"maintenanceExclusionOptions"`
	// The time that the window first starts.
	StartTime *string `pulumi:"startTime"`
}

// TimeWindowInput is an input type that accepts TimeWindowArgs and TimeWindowOutput values.
// You can construct a concrete instance of `TimeWindowInput` via:
//
//	TimeWindowArgs{...}
type TimeWindowInput interface {
	pulumi.Input

	ToTimeWindowOutput() TimeWindowOutput
	ToTimeWindowOutputWithContext(context.Context) TimeWindowOutput
}

// Represents an arbitrary window of time.
type TimeWindowArgs struct {
	// The time that the window ends. The end time should take place after the start time.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// MaintenanceExclusionOptions provides maintenance exclusion related options.
	MaintenanceExclusionOptions MaintenanceExclusionOptionsPtrInput `pulumi:"maintenanceExclusionOptions"`
	// The time that the window first starts.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (TimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindow)(nil)).Elem()
}

func (i TimeWindowArgs) ToTimeWindowOutput() TimeWindowOutput {
	return i.ToTimeWindowOutputWithContext(context.Background())
}

func (i TimeWindowArgs) ToTimeWindowOutputWithContext(ctx context.Context) TimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowOutput)
}

func (i TimeWindowArgs) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return i.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (i TimeWindowArgs) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowOutput).ToTimeWindowPtrOutputWithContext(ctx)
}

// TimeWindowPtrInput is an input type that accepts TimeWindowArgs, TimeWindowPtr and TimeWindowPtrOutput values.
// You can construct a concrete instance of `TimeWindowPtrInput` via:
//
//	        TimeWindowArgs{...}
//
//	or:
//
//	        nil
type TimeWindowPtrInput interface {
	pulumi.Input

	ToTimeWindowPtrOutput() TimeWindowPtrOutput
	ToTimeWindowPtrOutputWithContext(context.Context) TimeWindowPtrOutput
}

type timeWindowPtrType TimeWindowArgs

func TimeWindowPtr(v *TimeWindowArgs) TimeWindowPtrInput {
	return (*timeWindowPtrType)(v)
}

func (*timeWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindow)(nil)).Elem()
}

func (i *timeWindowPtrType) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return i.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (i *timeWindowPtrType) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowPtrOutput)
}

// TimeWindowMapInput is an input type that accepts TimeWindowMap and TimeWindowMapOutput values.
// You can construct a concrete instance of `TimeWindowMapInput` via:
//
//	TimeWindowMap{ "key": TimeWindowArgs{...} }
type TimeWindowMapInput interface {
	pulumi.Input

	ToTimeWindowMapOutput() TimeWindowMapOutput
	ToTimeWindowMapOutputWithContext(context.Context) TimeWindowMapOutput
}

type TimeWindowMap map[string]TimeWindowInput

func (TimeWindowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TimeWindow)(nil)).Elem()
}

func (i TimeWindowMap) ToTimeWindowMapOutput() TimeWindowMapOutput {
	return i.ToTimeWindowMapOutputWithContext(context.Background())
}

func (i TimeWindowMap) ToTimeWindowMapOutputWithContext(ctx context.Context) TimeWindowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowMapOutput)
}

// Represents an arbitrary window of time.
type TimeWindowOutput struct{ *pulumi.OutputState }

func (TimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindow)(nil)).Elem()
}

func (o TimeWindowOutput) ToTimeWindowOutput() TimeWindowOutput {
	return o
}

func (o TimeWindowOutput) ToTimeWindowOutputWithContext(ctx context.Context) TimeWindowOutput {
	return o
}

func (o TimeWindowOutput) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return o.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (o TimeWindowOutput) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeWindow) *TimeWindow {
		return &v
	}).(TimeWindowPtrOutput)
}

// The time that the window ends. The end time should take place after the start time.
func (o TimeWindowOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeWindow) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// MaintenanceExclusionOptions provides maintenance exclusion related options.
func (o TimeWindowOutput) MaintenanceExclusionOptions() MaintenanceExclusionOptionsPtrOutput {
	return o.ApplyT(func(v TimeWindow) *MaintenanceExclusionOptions { return v.MaintenanceExclusionOptions }).(MaintenanceExclusionOptionsPtrOutput)
}

// The time that the window first starts.
func (o TimeWindowOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeWindow) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type TimeWindowPtrOutput struct{ *pulumi.OutputState }

func (TimeWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindow)(nil)).Elem()
}

func (o TimeWindowPtrOutput) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return o
}

func (o TimeWindowPtrOutput) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return o
}

func (o TimeWindowPtrOutput) Elem() TimeWindowOutput {
	return o.ApplyT(func(v *TimeWindow) TimeWindow {
		if v != nil {
			return *v
		}
		var ret TimeWindow
		return ret
	}).(TimeWindowOutput)
}

// The time that the window ends. The end time should take place after the start time.
func (o TimeWindowPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindow) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// MaintenanceExclusionOptions provides maintenance exclusion related options.
func (o TimeWindowPtrOutput) MaintenanceExclusionOptions() MaintenanceExclusionOptionsPtrOutput {
	return o.ApplyT(func(v *TimeWindow) *MaintenanceExclusionOptions {
		if v == nil {
			return nil
		}
		return v.MaintenanceExclusionOptions
	}).(MaintenanceExclusionOptionsPtrOutput)
}

// The time that the window first starts.
func (o TimeWindowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindow) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

type TimeWindowMapOutput struct{ *pulumi.OutputState }

func (TimeWindowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TimeWindow)(nil)).Elem()
}

func (o TimeWindowMapOutput) ToTimeWindowMapOutput() TimeWindowMapOutput {
	return o
}

func (o TimeWindowMapOutput) ToTimeWindowMapOutputWithContext(ctx context.Context) TimeWindowMapOutput {
	return o
}

func (o TimeWindowMapOutput) MapIndex(k pulumi.StringInput) TimeWindowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TimeWindow {
		return vs[0].(map[string]TimeWindow)[vs[1].(string)]
	}).(TimeWindowOutput)
}

// Represents an arbitrary window of time.
type TimeWindowResponse struct {
	// The time that the window ends. The end time should take place after the start time.
	EndTime string `pulumi:"endTime"`
	// MaintenanceExclusionOptions provides maintenance exclusion related options.
	MaintenanceExclusionOptions MaintenanceExclusionOptionsResponse `pulumi:"maintenanceExclusionOptions"`
	// The time that the window first starts.
	StartTime string `pulumi:"startTime"`
}

// Represents an arbitrary window of time.
type TimeWindowResponseOutput struct{ *pulumi.OutputState }

func (TimeWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindowResponse)(nil)).Elem()
}

func (o TimeWindowResponseOutput) ToTimeWindowResponseOutput() TimeWindowResponseOutput {
	return o
}

func (o TimeWindowResponseOutput) ToTimeWindowResponseOutputWithContext(ctx context.Context) TimeWindowResponseOutput {
	return o
}

// The time that the window ends. The end time should take place after the start time.
func (o TimeWindowResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v TimeWindowResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// MaintenanceExclusionOptions provides maintenance exclusion related options.
func (o TimeWindowResponseOutput) MaintenanceExclusionOptions() MaintenanceExclusionOptionsResponseOutput {
	return o.ApplyT(func(v TimeWindowResponse) MaintenanceExclusionOptionsResponse { return v.MaintenanceExclusionOptions }).(MaintenanceExclusionOptionsResponseOutput)
}

// The time that the window first starts.
func (o TimeWindowResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v TimeWindowResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type TimeWindowResponseMapOutput struct{ *pulumi.OutputState }

func (TimeWindowResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TimeWindowResponse)(nil)).Elem()
}

func (o TimeWindowResponseMapOutput) ToTimeWindowResponseMapOutput() TimeWindowResponseMapOutput {
	return o
}

func (o TimeWindowResponseMapOutput) ToTimeWindowResponseMapOutputWithContext(ctx context.Context) TimeWindowResponseMapOutput {
	return o
}

func (o TimeWindowResponseMapOutput) MapIndex(k pulumi.StringInput) TimeWindowResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TimeWindowResponse {
		return vs[0].(map[string]TimeWindowResponse)[vs[1].(string)]
	}).(TimeWindowResponseOutput)
}

// UpdateInfo contains resource (instance groups, etc), status and other intermediate information relevant to a node pool upgrade.
type UpdateInfoResponse struct {
	// Information of a blue-green upgrade.
	BlueGreenInfo BlueGreenInfoResponse `pulumi:"blueGreenInfo"`
}

// UpdateInfo contains resource (instance groups, etc), status and other intermediate information relevant to a node pool upgrade.
type UpdateInfoResponseOutput struct{ *pulumi.OutputState }

func (UpdateInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateInfoResponse)(nil)).Elem()
}

func (o UpdateInfoResponseOutput) ToUpdateInfoResponseOutput() UpdateInfoResponseOutput {
	return o
}

func (o UpdateInfoResponseOutput) ToUpdateInfoResponseOutputWithContext(ctx context.Context) UpdateInfoResponseOutput {
	return o
}

// Information of a blue-green upgrade.
func (o UpdateInfoResponseOutput) BlueGreenInfo() BlueGreenInfoResponseOutput {
	return o.ApplyT(func(v UpdateInfoResponse) BlueGreenInfoResponse { return v.BlueGreenInfo }).(BlueGreenInfoResponseOutput)
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is ROLLING, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
type UpgradeSettings struct {
	// Settings for blue-green upgrade strategy.
	BlueGreenSettings *BlueGreenSettings `pulumi:"blueGreenSettings"`
	// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
	MaxSurge *int `pulumi:"maxSurge"`
	// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
	MaxUnavailable *int `pulumi:"maxUnavailable"`
	// Update strategy of the node pool.
	Strategy *UpgradeSettingsStrategy `pulumi:"strategy"`
}

// UpgradeSettingsInput is an input type that accepts UpgradeSettingsArgs and UpgradeSettingsOutput values.
// You can construct a concrete instance of `UpgradeSettingsInput` via:
//
//	UpgradeSettingsArgs{...}
type UpgradeSettingsInput interface {
	pulumi.Input

	ToUpgradeSettingsOutput() UpgradeSettingsOutput
	ToUpgradeSettingsOutputWithContext(context.Context) UpgradeSettingsOutput
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is ROLLING, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
type UpgradeSettingsArgs struct {
	// Settings for blue-green upgrade strategy.
	BlueGreenSettings BlueGreenSettingsPtrInput `pulumi:"blueGreenSettings"`
	// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
	MaxSurge pulumi.IntPtrInput `pulumi:"maxSurge"`
	// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
	MaxUnavailable pulumi.IntPtrInput `pulumi:"maxUnavailable"`
	// Update strategy of the node pool.
	Strategy UpgradeSettingsStrategyPtrInput `pulumi:"strategy"`
}

func (UpgradeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeSettings)(nil)).Elem()
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsOutput() UpgradeSettingsOutput {
	return i.ToUpgradeSettingsOutputWithContext(context.Background())
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsOutputWithContext(ctx context.Context) UpgradeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsOutput)
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return i.ToUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i UpgradeSettingsArgs) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsOutput).ToUpgradeSettingsPtrOutputWithContext(ctx)
}

// UpgradeSettingsPtrInput is an input type that accepts UpgradeSettingsArgs, UpgradeSettingsPtr and UpgradeSettingsPtrOutput values.
// You can construct a concrete instance of `UpgradeSettingsPtrInput` via:
//
//	        UpgradeSettingsArgs{...}
//
//	or:
//
//	        nil
type UpgradeSettingsPtrInput interface {
	pulumi.Input

	ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput
	ToUpgradeSettingsPtrOutputWithContext(context.Context) UpgradeSettingsPtrOutput
}

type upgradeSettingsPtrType UpgradeSettingsArgs

func UpgradeSettingsPtr(v *UpgradeSettingsArgs) UpgradeSettingsPtrInput {
	return (*upgradeSettingsPtrType)(v)
}

func (*upgradeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeSettings)(nil)).Elem()
}

func (i *upgradeSettingsPtrType) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return i.ToUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i *upgradeSettingsPtrType) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeSettingsPtrOutput)
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is ROLLING, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
type UpgradeSettingsOutput struct{ *pulumi.OutputState }

func (UpgradeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeSettings)(nil)).Elem()
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsOutput() UpgradeSettingsOutput {
	return o
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsOutputWithContext(ctx context.Context) UpgradeSettingsOutput {
	return o
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return o.ToUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (o UpgradeSettingsOutput) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradeSettings) *UpgradeSettings {
		return &v
	}).(UpgradeSettingsPtrOutput)
}

// Settings for blue-green upgrade strategy.
func (o UpgradeSettingsOutput) BlueGreenSettings() BlueGreenSettingsPtrOutput {
	return o.ApplyT(func(v UpgradeSettings) *BlueGreenSettings { return v.BlueGreenSettings }).(BlueGreenSettingsPtrOutput)
}

// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
func (o UpgradeSettingsOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UpgradeSettings) *int { return v.MaxSurge }).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
func (o UpgradeSettingsOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UpgradeSettings) *int { return v.MaxUnavailable }).(pulumi.IntPtrOutput)
}

// Update strategy of the node pool.
func (o UpgradeSettingsOutput) Strategy() UpgradeSettingsStrategyPtrOutput {
	return o.ApplyT(func(v UpgradeSettings) *UpgradeSettingsStrategy { return v.Strategy }).(UpgradeSettingsStrategyPtrOutput)
}

type UpgradeSettingsPtrOutput struct{ *pulumi.OutputState }

func (UpgradeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeSettings)(nil)).Elem()
}

func (o UpgradeSettingsPtrOutput) ToUpgradeSettingsPtrOutput() UpgradeSettingsPtrOutput {
	return o
}

func (o UpgradeSettingsPtrOutput) ToUpgradeSettingsPtrOutputWithContext(ctx context.Context) UpgradeSettingsPtrOutput {
	return o
}

func (o UpgradeSettingsPtrOutput) Elem() UpgradeSettingsOutput {
	return o.ApplyT(func(v *UpgradeSettings) UpgradeSettings {
		if v != nil {
			return *v
		}
		var ret UpgradeSettings
		return ret
	}).(UpgradeSettingsOutput)
}

// Settings for blue-green upgrade strategy.
func (o UpgradeSettingsPtrOutput) BlueGreenSettings() BlueGreenSettingsPtrOutput {
	return o.ApplyT(func(v *UpgradeSettings) *BlueGreenSettings {
		if v == nil {
			return nil
		}
		return v.BlueGreenSettings
	}).(BlueGreenSettingsPtrOutput)
}

// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
func (o UpgradeSettingsPtrOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UpgradeSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.IntPtrOutput)
}

// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
func (o UpgradeSettingsPtrOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UpgradeSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.IntPtrOutput)
}

// Update strategy of the node pool.
func (o UpgradeSettingsPtrOutput) Strategy() UpgradeSettingsStrategyPtrOutput {
	return o.ApplyT(func(v *UpgradeSettings) *UpgradeSettingsStrategy {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(UpgradeSettingsStrategyPtrOutput)
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is ROLLING, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
type UpgradeSettingsResponse struct {
	// Settings for blue-green upgrade strategy.
	BlueGreenSettings BlueGreenSettingsResponse `pulumi:"blueGreenSettings"`
	// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
	MaxSurge int `pulumi:"maxSurge"`
	// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
	MaxUnavailable int `pulumi:"maxUnavailable"`
	// Update strategy of the node pool.
	Strategy string `pulumi:"strategy"`
}

// These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is ROLLING, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
type UpgradeSettingsResponseOutput struct{ *pulumi.OutputState }

func (UpgradeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeSettingsResponse)(nil)).Elem()
}

func (o UpgradeSettingsResponseOutput) ToUpgradeSettingsResponseOutput() UpgradeSettingsResponseOutput {
	return o
}

func (o UpgradeSettingsResponseOutput) ToUpgradeSettingsResponseOutputWithContext(ctx context.Context) UpgradeSettingsResponseOutput {
	return o
}

// Settings for blue-green upgrade strategy.
func (o UpgradeSettingsResponseOutput) BlueGreenSettings() BlueGreenSettingsResponseOutput {
	return o.ApplyT(func(v UpgradeSettingsResponse) BlueGreenSettingsResponse { return v.BlueGreenSettings }).(BlueGreenSettingsResponseOutput)
}

// The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
func (o UpgradeSettingsResponseOutput) MaxSurge() pulumi.IntOutput {
	return o.ApplyT(func(v UpgradeSettingsResponse) int { return v.MaxSurge }).(pulumi.IntOutput)
}

// The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
func (o UpgradeSettingsResponseOutput) MaxUnavailable() pulumi.IntOutput {
	return o.ApplyT(func(v UpgradeSettingsResponse) int { return v.MaxUnavailable }).(pulumi.IntOutput)
}

// Update strategy of the node pool.
func (o UpgradeSettingsResponseOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeSettingsResponse) string { return v.Strategy }).(pulumi.StringOutput)
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscaling struct {
	// Enables vertical pod autoscaling.
	Enabled *bool `pulumi:"enabled"`
}

// VerticalPodAutoscalingInput is an input type that accepts VerticalPodAutoscalingArgs and VerticalPodAutoscalingOutput values.
// You can construct a concrete instance of `VerticalPodAutoscalingInput` via:
//
//	VerticalPodAutoscalingArgs{...}
type VerticalPodAutoscalingInput interface {
	pulumi.Input

	ToVerticalPodAutoscalingOutput() VerticalPodAutoscalingOutput
	ToVerticalPodAutoscalingOutputWithContext(context.Context) VerticalPodAutoscalingOutput
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingArgs struct {
	// Enables vertical pod autoscaling.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (VerticalPodAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticalPodAutoscaling)(nil)).Elem()
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingOutput() VerticalPodAutoscalingOutput {
	return i.ToVerticalPodAutoscalingOutputWithContext(context.Background())
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingOutputWithContext(ctx context.Context) VerticalPodAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingOutput)
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return i.ToVerticalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i VerticalPodAutoscalingArgs) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingOutput).ToVerticalPodAutoscalingPtrOutputWithContext(ctx)
}

// VerticalPodAutoscalingPtrInput is an input type that accepts VerticalPodAutoscalingArgs, VerticalPodAutoscalingPtr and VerticalPodAutoscalingPtrOutput values.
// You can construct a concrete instance of `VerticalPodAutoscalingPtrInput` via:
//
//	        VerticalPodAutoscalingArgs{...}
//
//	or:
//
//	        nil
type VerticalPodAutoscalingPtrInput interface {
	pulumi.Input

	ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput
	ToVerticalPodAutoscalingPtrOutputWithContext(context.Context) VerticalPodAutoscalingPtrOutput
}

type verticalPodAutoscalingPtrType VerticalPodAutoscalingArgs

func VerticalPodAutoscalingPtr(v *VerticalPodAutoscalingArgs) VerticalPodAutoscalingPtrInput {
	return (*verticalPodAutoscalingPtrType)(v)
}

func (*verticalPodAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VerticalPodAutoscaling)(nil)).Elem()
}

func (i *verticalPodAutoscalingPtrType) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return i.ToVerticalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (i *verticalPodAutoscalingPtrType) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticalPodAutoscalingPtrOutput)
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingOutput struct{ *pulumi.OutputState }

func (VerticalPodAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticalPodAutoscaling)(nil)).Elem()
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingOutput() VerticalPodAutoscalingOutput {
	return o
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingOutputWithContext(ctx context.Context) VerticalPodAutoscalingOutput {
	return o
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return o.ToVerticalPodAutoscalingPtrOutputWithContext(context.Background())
}

func (o VerticalPodAutoscalingOutput) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VerticalPodAutoscaling) *VerticalPodAutoscaling {
		return &v
	}).(VerticalPodAutoscalingPtrOutput)
}

// Enables vertical pod autoscaling.
func (o VerticalPodAutoscalingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VerticalPodAutoscaling) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type VerticalPodAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (VerticalPodAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VerticalPodAutoscaling)(nil)).Elem()
}

func (o VerticalPodAutoscalingPtrOutput) ToVerticalPodAutoscalingPtrOutput() VerticalPodAutoscalingPtrOutput {
	return o
}

func (o VerticalPodAutoscalingPtrOutput) ToVerticalPodAutoscalingPtrOutputWithContext(ctx context.Context) VerticalPodAutoscalingPtrOutput {
	return o
}

func (o VerticalPodAutoscalingPtrOutput) Elem() VerticalPodAutoscalingOutput {
	return o.ApplyT(func(v *VerticalPodAutoscaling) VerticalPodAutoscaling {
		if v != nil {
			return *v
		}
		var ret VerticalPodAutoscaling
		return ret
	}).(VerticalPodAutoscalingOutput)
}

// Enables vertical pod autoscaling.
func (o VerticalPodAutoscalingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VerticalPodAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingResponse struct {
	// Enables vertical pod autoscaling.
	Enabled bool `pulumi:"enabled"`
}

// VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.
type VerticalPodAutoscalingResponseOutput struct{ *pulumi.OutputState }

func (VerticalPodAutoscalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticalPodAutoscalingResponse)(nil)).Elem()
}

func (o VerticalPodAutoscalingResponseOutput) ToVerticalPodAutoscalingResponseOutput() VerticalPodAutoscalingResponseOutput {
	return o
}

func (o VerticalPodAutoscalingResponseOutput) ToVerticalPodAutoscalingResponseOutputWithContext(ctx context.Context) VerticalPodAutoscalingResponseOutput {
	return o
}

// Enables vertical pod autoscaling.
func (o VerticalPodAutoscalingResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VerticalPodAutoscalingResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Configuration of gVNIC feature.
type VirtualNIC struct {
	// Whether gVNIC features are enabled in the node pool.
	Enabled *bool `pulumi:"enabled"`
}

// VirtualNICInput is an input type that accepts VirtualNICArgs and VirtualNICOutput values.
// You can construct a concrete instance of `VirtualNICInput` via:
//
//	VirtualNICArgs{...}
type VirtualNICInput interface {
	pulumi.Input

	ToVirtualNICOutput() VirtualNICOutput
	ToVirtualNICOutputWithContext(context.Context) VirtualNICOutput
}

// Configuration of gVNIC feature.
type VirtualNICArgs struct {
	// Whether gVNIC features are enabled in the node pool.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (VirtualNICArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNIC)(nil)).Elem()
}

func (i VirtualNICArgs) ToVirtualNICOutput() VirtualNICOutput {
	return i.ToVirtualNICOutputWithContext(context.Background())
}

func (i VirtualNICArgs) ToVirtualNICOutputWithContext(ctx context.Context) VirtualNICOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNICOutput)
}

func (i VirtualNICArgs) ToVirtualNICPtrOutput() VirtualNICPtrOutput {
	return i.ToVirtualNICPtrOutputWithContext(context.Background())
}

func (i VirtualNICArgs) ToVirtualNICPtrOutputWithContext(ctx context.Context) VirtualNICPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNICOutput).ToVirtualNICPtrOutputWithContext(ctx)
}

// VirtualNICPtrInput is an input type that accepts VirtualNICArgs, VirtualNICPtr and VirtualNICPtrOutput values.
// You can construct a concrete instance of `VirtualNICPtrInput` via:
//
//	        VirtualNICArgs{...}
//
//	or:
//
//	        nil
type VirtualNICPtrInput interface {
	pulumi.Input

	ToVirtualNICPtrOutput() VirtualNICPtrOutput
	ToVirtualNICPtrOutputWithContext(context.Context) VirtualNICPtrOutput
}

type virtualNICPtrType VirtualNICArgs

func VirtualNICPtr(v *VirtualNICArgs) VirtualNICPtrInput {
	return (*virtualNICPtrType)(v)
}

func (*virtualNICPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNIC)(nil)).Elem()
}

func (i *virtualNICPtrType) ToVirtualNICPtrOutput() VirtualNICPtrOutput {
	return i.ToVirtualNICPtrOutputWithContext(context.Background())
}

func (i *virtualNICPtrType) ToVirtualNICPtrOutputWithContext(ctx context.Context) VirtualNICPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNICPtrOutput)
}

// Configuration of gVNIC feature.
type VirtualNICOutput struct{ *pulumi.OutputState }

func (VirtualNICOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNIC)(nil)).Elem()
}

func (o VirtualNICOutput) ToVirtualNICOutput() VirtualNICOutput {
	return o
}

func (o VirtualNICOutput) ToVirtualNICOutputWithContext(ctx context.Context) VirtualNICOutput {
	return o
}

func (o VirtualNICOutput) ToVirtualNICPtrOutput() VirtualNICPtrOutput {
	return o.ToVirtualNICPtrOutputWithContext(context.Background())
}

func (o VirtualNICOutput) ToVirtualNICPtrOutputWithContext(ctx context.Context) VirtualNICPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualNIC) *VirtualNIC {
		return &v
	}).(VirtualNICPtrOutput)
}

// Whether gVNIC features are enabled in the node pool.
func (o VirtualNICOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualNIC) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type VirtualNICPtrOutput struct{ *pulumi.OutputState }

func (VirtualNICPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNIC)(nil)).Elem()
}

func (o VirtualNICPtrOutput) ToVirtualNICPtrOutput() VirtualNICPtrOutput {
	return o
}

func (o VirtualNICPtrOutput) ToVirtualNICPtrOutputWithContext(ctx context.Context) VirtualNICPtrOutput {
	return o
}

func (o VirtualNICPtrOutput) Elem() VirtualNICOutput {
	return o.ApplyT(func(v *VirtualNIC) VirtualNIC {
		if v != nil {
			return *v
		}
		var ret VirtualNIC
		return ret
	}).(VirtualNICOutput)
}

// Whether gVNIC features are enabled in the node pool.
func (o VirtualNICPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualNIC) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration of gVNIC feature.
type VirtualNICResponse struct {
	// Whether gVNIC features are enabled in the node pool.
	Enabled bool `pulumi:"enabled"`
}

// Configuration of gVNIC feature.
type VirtualNICResponseOutput struct{ *pulumi.OutputState }

func (VirtualNICResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNICResponse)(nil)).Elem()
}

func (o VirtualNICResponseOutput) ToVirtualNICResponseOutput() VirtualNICResponseOutput {
	return o
}

func (o VirtualNICResponseOutput) ToVirtualNICResponseOutputWithContext(ctx context.Context) VirtualNICResponseOutput {
	return o
}

// Whether gVNIC features are enabled in the node pool.
func (o VirtualNICResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VirtualNICResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings
type WindowsNodeConfig struct {
	// OSVersion specifies the Windows node config to be used on the node
	OsVersion *WindowsNodeConfigOsVersion `pulumi:"osVersion"`
}

// WindowsNodeConfigInput is an input type that accepts WindowsNodeConfigArgs and WindowsNodeConfigOutput values.
// You can construct a concrete instance of `WindowsNodeConfigInput` via:
//
//	WindowsNodeConfigArgs{...}
type WindowsNodeConfigInput interface {
	pulumi.Input

	ToWindowsNodeConfigOutput() WindowsNodeConfigOutput
	ToWindowsNodeConfigOutputWithContext(context.Context) WindowsNodeConfigOutput
}

// Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings
type WindowsNodeConfigArgs struct {
	// OSVersion specifies the Windows node config to be used on the node
	OsVersion WindowsNodeConfigOsVersionPtrInput `pulumi:"osVersion"`
}

func (WindowsNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsNodeConfig)(nil)).Elem()
}

func (i WindowsNodeConfigArgs) ToWindowsNodeConfigOutput() WindowsNodeConfigOutput {
	return i.ToWindowsNodeConfigOutputWithContext(context.Background())
}

func (i WindowsNodeConfigArgs) ToWindowsNodeConfigOutputWithContext(ctx context.Context) WindowsNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsNodeConfigOutput)
}

func (i WindowsNodeConfigArgs) ToWindowsNodeConfigPtrOutput() WindowsNodeConfigPtrOutput {
	return i.ToWindowsNodeConfigPtrOutputWithContext(context.Background())
}

func (i WindowsNodeConfigArgs) ToWindowsNodeConfigPtrOutputWithContext(ctx context.Context) WindowsNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsNodeConfigOutput).ToWindowsNodeConfigPtrOutputWithContext(ctx)
}

// WindowsNodeConfigPtrInput is an input type that accepts WindowsNodeConfigArgs, WindowsNodeConfigPtr and WindowsNodeConfigPtrOutput values.
// You can construct a concrete instance of `WindowsNodeConfigPtrInput` via:
//
//	        WindowsNodeConfigArgs{...}
//
//	or:
//
//	        nil
type WindowsNodeConfigPtrInput interface {
	pulumi.Input

	ToWindowsNodeConfigPtrOutput() WindowsNodeConfigPtrOutput
	ToWindowsNodeConfigPtrOutputWithContext(context.Context) WindowsNodeConfigPtrOutput
}

type windowsNodeConfigPtrType WindowsNodeConfigArgs

func WindowsNodeConfigPtr(v *WindowsNodeConfigArgs) WindowsNodeConfigPtrInput {
	return (*windowsNodeConfigPtrType)(v)
}

func (*windowsNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsNodeConfig)(nil)).Elem()
}

func (i *windowsNodeConfigPtrType) ToWindowsNodeConfigPtrOutput() WindowsNodeConfigPtrOutput {
	return i.ToWindowsNodeConfigPtrOutputWithContext(context.Background())
}

func (i *windowsNodeConfigPtrType) ToWindowsNodeConfigPtrOutputWithContext(ctx context.Context) WindowsNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsNodeConfigPtrOutput)
}

// Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings
type WindowsNodeConfigOutput struct{ *pulumi.OutputState }

func (WindowsNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsNodeConfig)(nil)).Elem()
}

func (o WindowsNodeConfigOutput) ToWindowsNodeConfigOutput() WindowsNodeConfigOutput {
	return o
}

func (o WindowsNodeConfigOutput) ToWindowsNodeConfigOutputWithContext(ctx context.Context) WindowsNodeConfigOutput {
	return o
}

func (o WindowsNodeConfigOutput) ToWindowsNodeConfigPtrOutput() WindowsNodeConfigPtrOutput {
	return o.ToWindowsNodeConfigPtrOutputWithContext(context.Background())
}

func (o WindowsNodeConfigOutput) ToWindowsNodeConfigPtrOutputWithContext(ctx context.Context) WindowsNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsNodeConfig) *WindowsNodeConfig {
		return &v
	}).(WindowsNodeConfigPtrOutput)
}

// OSVersion specifies the Windows node config to be used on the node
func (o WindowsNodeConfigOutput) OsVersion() WindowsNodeConfigOsVersionPtrOutput {
	return o.ApplyT(func(v WindowsNodeConfig) *WindowsNodeConfigOsVersion { return v.OsVersion }).(WindowsNodeConfigOsVersionPtrOutput)
}

type WindowsNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (WindowsNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsNodeConfig)(nil)).Elem()
}

func (o WindowsNodeConfigPtrOutput) ToWindowsNodeConfigPtrOutput() WindowsNodeConfigPtrOutput {
	return o
}

func (o WindowsNodeConfigPtrOutput) ToWindowsNodeConfigPtrOutputWithContext(ctx context.Context) WindowsNodeConfigPtrOutput {
	return o
}

func (o WindowsNodeConfigPtrOutput) Elem() WindowsNodeConfigOutput {
	return o.ApplyT(func(v *WindowsNodeConfig) WindowsNodeConfig {
		if v != nil {
			return *v
		}
		var ret WindowsNodeConfig
		return ret
	}).(WindowsNodeConfigOutput)
}

// OSVersion specifies the Windows node config to be used on the node
func (o WindowsNodeConfigPtrOutput) OsVersion() WindowsNodeConfigOsVersionPtrOutput {
	return o.ApplyT(func(v *WindowsNodeConfig) *WindowsNodeConfigOsVersion {
		if v == nil {
			return nil
		}
		return v.OsVersion
	}).(WindowsNodeConfigOsVersionPtrOutput)
}

// Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings
type WindowsNodeConfigResponse struct {
	// OSVersion specifies the Windows node config to be used on the node
	OsVersion string `pulumi:"osVersion"`
}

// Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings
type WindowsNodeConfigResponseOutput struct{ *pulumi.OutputState }

func (WindowsNodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsNodeConfigResponse)(nil)).Elem()
}

func (o WindowsNodeConfigResponseOutput) ToWindowsNodeConfigResponseOutput() WindowsNodeConfigResponseOutput {
	return o
}

func (o WindowsNodeConfigResponseOutput) ToWindowsNodeConfigResponseOutputWithContext(ctx context.Context) WindowsNodeConfigResponseOutput {
	return o
}

// OSVersion specifies the Windows node config to be used on the node
func (o WindowsNodeConfigResponseOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsNodeConfigResponse) string { return v.OsVersion }).(pulumi.StringOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfig struct {
	// The workload pool to attach all Kubernetes service accounts to.
	WorkloadPool *string `pulumi:"workloadPool"`
}

// WorkloadIdentityConfigInput is an input type that accepts WorkloadIdentityConfigArgs and WorkloadIdentityConfigOutput values.
// You can construct a concrete instance of `WorkloadIdentityConfigInput` via:
//
//	WorkloadIdentityConfigArgs{...}
type WorkloadIdentityConfigInput interface {
	pulumi.Input

	ToWorkloadIdentityConfigOutput() WorkloadIdentityConfigOutput
	ToWorkloadIdentityConfigOutputWithContext(context.Context) WorkloadIdentityConfigOutput
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigArgs struct {
	// The workload pool to attach all Kubernetes service accounts to.
	WorkloadPool pulumi.StringPtrInput `pulumi:"workloadPool"`
}

func (WorkloadIdentityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadIdentityConfig)(nil)).Elem()
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigOutput() WorkloadIdentityConfigOutput {
	return i.ToWorkloadIdentityConfigOutputWithContext(context.Background())
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigOutputWithContext(ctx context.Context) WorkloadIdentityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigOutput)
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return i.ToWorkloadIdentityConfigPtrOutputWithContext(context.Background())
}

func (i WorkloadIdentityConfigArgs) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigOutput).ToWorkloadIdentityConfigPtrOutputWithContext(ctx)
}

// WorkloadIdentityConfigPtrInput is an input type that accepts WorkloadIdentityConfigArgs, WorkloadIdentityConfigPtr and WorkloadIdentityConfigPtrOutput values.
// You can construct a concrete instance of `WorkloadIdentityConfigPtrInput` via:
//
//	        WorkloadIdentityConfigArgs{...}
//
//	or:
//
//	        nil
type WorkloadIdentityConfigPtrInput interface {
	pulumi.Input

	ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput
	ToWorkloadIdentityConfigPtrOutputWithContext(context.Context) WorkloadIdentityConfigPtrOutput
}

type workloadIdentityConfigPtrType WorkloadIdentityConfigArgs

func WorkloadIdentityConfigPtr(v *WorkloadIdentityConfigArgs) WorkloadIdentityConfigPtrInput {
	return (*workloadIdentityConfigPtrType)(v)
}

func (*workloadIdentityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityConfig)(nil)).Elem()
}

func (i *workloadIdentityConfigPtrType) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return i.ToWorkloadIdentityConfigPtrOutputWithContext(context.Background())
}

func (i *workloadIdentityConfigPtrType) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityConfigPtrOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadIdentityConfig)(nil)).Elem()
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigOutput() WorkloadIdentityConfigOutput {
	return o
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigOutputWithContext(ctx context.Context) WorkloadIdentityConfigOutput {
	return o
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return o.ToWorkloadIdentityConfigPtrOutputWithContext(context.Background())
}

func (o WorkloadIdentityConfigOutput) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadIdentityConfig) *WorkloadIdentityConfig {
		return &v
	}).(WorkloadIdentityConfigPtrOutput)
}

// The workload pool to attach all Kubernetes service accounts to.
func (o WorkloadIdentityConfigOutput) WorkloadPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadIdentityConfig) *string { return v.WorkloadPool }).(pulumi.StringPtrOutput)
}

type WorkloadIdentityConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityConfig)(nil)).Elem()
}

func (o WorkloadIdentityConfigPtrOutput) ToWorkloadIdentityConfigPtrOutput() WorkloadIdentityConfigPtrOutput {
	return o
}

func (o WorkloadIdentityConfigPtrOutput) ToWorkloadIdentityConfigPtrOutputWithContext(ctx context.Context) WorkloadIdentityConfigPtrOutput {
	return o
}

func (o WorkloadIdentityConfigPtrOutput) Elem() WorkloadIdentityConfigOutput {
	return o.ApplyT(func(v *WorkloadIdentityConfig) WorkloadIdentityConfig {
		if v != nil {
			return *v
		}
		var ret WorkloadIdentityConfig
		return ret
	}).(WorkloadIdentityConfigOutput)
}

// The workload pool to attach all Kubernetes service accounts to.
func (o WorkloadIdentityConfigPtrOutput) WorkloadPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadIdentityConfig) *string {
		if v == nil {
			return nil
		}
		return v.WorkloadPool
	}).(pulumi.StringPtrOutput)
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigResponse struct {
	// The workload pool to attach all Kubernetes service accounts to.
	WorkloadPool string `pulumi:"workloadPool"`
}

// Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
type WorkloadIdentityConfigResponseOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadIdentityConfigResponse)(nil)).Elem()
}

func (o WorkloadIdentityConfigResponseOutput) ToWorkloadIdentityConfigResponseOutput() WorkloadIdentityConfigResponseOutput {
	return o
}

func (o WorkloadIdentityConfigResponseOutput) ToWorkloadIdentityConfigResponseOutputWithContext(ctx context.Context) WorkloadIdentityConfigResponseOutput {
	return o
}

// The workload pool to attach all Kubernetes service accounts to.
func (o WorkloadIdentityConfigResponseOutput) WorkloadPool() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadIdentityConfigResponse) string { return v.WorkloadPool }).(pulumi.StringOutput)
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfig struct {
	// Mode is the configuration for how to expose metadata to workloads running on the node pool.
	Mode *WorkloadMetadataConfigMode `pulumi:"mode"`
}

// WorkloadMetadataConfigInput is an input type that accepts WorkloadMetadataConfigArgs and WorkloadMetadataConfigOutput values.
// You can construct a concrete instance of `WorkloadMetadataConfigInput` via:
//
//	WorkloadMetadataConfigArgs{...}
type WorkloadMetadataConfigInput interface {
	pulumi.Input

	ToWorkloadMetadataConfigOutput() WorkloadMetadataConfigOutput
	ToWorkloadMetadataConfigOutputWithContext(context.Context) WorkloadMetadataConfigOutput
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigArgs struct {
	// Mode is the configuration for how to expose metadata to workloads running on the node pool.
	Mode WorkloadMetadataConfigModePtrInput `pulumi:"mode"`
}

func (WorkloadMetadataConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadMetadataConfig)(nil)).Elem()
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigOutput() WorkloadMetadataConfigOutput {
	return i.ToWorkloadMetadataConfigOutputWithContext(context.Background())
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigOutputWithContext(ctx context.Context) WorkloadMetadataConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigOutput)
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return i.ToWorkloadMetadataConfigPtrOutputWithContext(context.Background())
}

func (i WorkloadMetadataConfigArgs) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigOutput).ToWorkloadMetadataConfigPtrOutputWithContext(ctx)
}

// WorkloadMetadataConfigPtrInput is an input type that accepts WorkloadMetadataConfigArgs, WorkloadMetadataConfigPtr and WorkloadMetadataConfigPtrOutput values.
// You can construct a concrete instance of `WorkloadMetadataConfigPtrInput` via:
//
//	        WorkloadMetadataConfigArgs{...}
//
//	or:
//
//	        nil
type WorkloadMetadataConfigPtrInput interface {
	pulumi.Input

	ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput
	ToWorkloadMetadataConfigPtrOutputWithContext(context.Context) WorkloadMetadataConfigPtrOutput
}

type workloadMetadataConfigPtrType WorkloadMetadataConfigArgs

func WorkloadMetadataConfigPtr(v *WorkloadMetadataConfigArgs) WorkloadMetadataConfigPtrInput {
	return (*workloadMetadataConfigPtrType)(v)
}

func (*workloadMetadataConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadMetadataConfig)(nil)).Elem()
}

func (i *workloadMetadataConfigPtrType) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return i.ToWorkloadMetadataConfigPtrOutputWithContext(context.Background())
}

func (i *workloadMetadataConfigPtrType) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadMetadataConfigPtrOutput)
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigOutput struct{ *pulumi.OutputState }

func (WorkloadMetadataConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadMetadataConfig)(nil)).Elem()
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigOutput() WorkloadMetadataConfigOutput {
	return o
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigOutputWithContext(ctx context.Context) WorkloadMetadataConfigOutput {
	return o
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return o.ToWorkloadMetadataConfigPtrOutputWithContext(context.Background())
}

func (o WorkloadMetadataConfigOutput) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadMetadataConfig) *WorkloadMetadataConfig {
		return &v
	}).(WorkloadMetadataConfigPtrOutput)
}

// Mode is the configuration for how to expose metadata to workloads running on the node pool.
func (o WorkloadMetadataConfigOutput) Mode() WorkloadMetadataConfigModePtrOutput {
	return o.ApplyT(func(v WorkloadMetadataConfig) *WorkloadMetadataConfigMode { return v.Mode }).(WorkloadMetadataConfigModePtrOutput)
}

type WorkloadMetadataConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkloadMetadataConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadMetadataConfig)(nil)).Elem()
}

func (o WorkloadMetadataConfigPtrOutput) ToWorkloadMetadataConfigPtrOutput() WorkloadMetadataConfigPtrOutput {
	return o
}

func (o WorkloadMetadataConfigPtrOutput) ToWorkloadMetadataConfigPtrOutputWithContext(ctx context.Context) WorkloadMetadataConfigPtrOutput {
	return o
}

func (o WorkloadMetadataConfigPtrOutput) Elem() WorkloadMetadataConfigOutput {
	return o.ApplyT(func(v *WorkloadMetadataConfig) WorkloadMetadataConfig {
		if v != nil {
			return *v
		}
		var ret WorkloadMetadataConfig
		return ret
	}).(WorkloadMetadataConfigOutput)
}

// Mode is the configuration for how to expose metadata to workloads running on the node pool.
func (o WorkloadMetadataConfigPtrOutput) Mode() WorkloadMetadataConfigModePtrOutput {
	return o.ApplyT(func(v *WorkloadMetadataConfig) *WorkloadMetadataConfigMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(WorkloadMetadataConfigModePtrOutput)
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigResponse struct {
	// Mode is the configuration for how to expose metadata to workloads running on the node pool.
	Mode string `pulumi:"mode"`
}

// WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.
type WorkloadMetadataConfigResponseOutput struct{ *pulumi.OutputState }

func (WorkloadMetadataConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadMetadataConfigResponse)(nil)).Elem()
}

func (o WorkloadMetadataConfigResponseOutput) ToWorkloadMetadataConfigResponseOutput() WorkloadMetadataConfigResponseOutput {
	return o
}

func (o WorkloadMetadataConfigResponseOutput) ToWorkloadMetadataConfigResponseOutputWithContext(ctx context.Context) WorkloadMetadataConfigResponseOutput {
	return o
}

// Mode is the configuration for how to expose metadata to workloads running on the node pool.
func (o WorkloadMetadataConfigResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadMetadataConfigResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// WorkloadPolicyConfig is the configuration of workload policy for autopilot clusters.
type WorkloadPolicyConfig struct {
	// If true, workloads can use NET_ADMIN capability.
	AllowNetAdmin *bool `pulumi:"allowNetAdmin"`
}

// WorkloadPolicyConfigInput is an input type that accepts WorkloadPolicyConfigArgs and WorkloadPolicyConfigOutput values.
// You can construct a concrete instance of `WorkloadPolicyConfigInput` via:
//
//	WorkloadPolicyConfigArgs{...}
type WorkloadPolicyConfigInput interface {
	pulumi.Input

	ToWorkloadPolicyConfigOutput() WorkloadPolicyConfigOutput
	ToWorkloadPolicyConfigOutputWithContext(context.Context) WorkloadPolicyConfigOutput
}

// WorkloadPolicyConfig is the configuration of workload policy for autopilot clusters.
type WorkloadPolicyConfigArgs struct {
	// If true, workloads can use NET_ADMIN capability.
	AllowNetAdmin pulumi.BoolPtrInput `pulumi:"allowNetAdmin"`
}

func (WorkloadPolicyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadPolicyConfig)(nil)).Elem()
}

func (i WorkloadPolicyConfigArgs) ToWorkloadPolicyConfigOutput() WorkloadPolicyConfigOutput {
	return i.ToWorkloadPolicyConfigOutputWithContext(context.Background())
}

func (i WorkloadPolicyConfigArgs) ToWorkloadPolicyConfigOutputWithContext(ctx context.Context) WorkloadPolicyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadPolicyConfigOutput)
}

func (i WorkloadPolicyConfigArgs) ToWorkloadPolicyConfigPtrOutput() WorkloadPolicyConfigPtrOutput {
	return i.ToWorkloadPolicyConfigPtrOutputWithContext(context.Background())
}

func (i WorkloadPolicyConfigArgs) ToWorkloadPolicyConfigPtrOutputWithContext(ctx context.Context) WorkloadPolicyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadPolicyConfigOutput).ToWorkloadPolicyConfigPtrOutputWithContext(ctx)
}

// WorkloadPolicyConfigPtrInput is an input type that accepts WorkloadPolicyConfigArgs, WorkloadPolicyConfigPtr and WorkloadPolicyConfigPtrOutput values.
// You can construct a concrete instance of `WorkloadPolicyConfigPtrInput` via:
//
//	        WorkloadPolicyConfigArgs{...}
//
//	or:
//
//	        nil
type WorkloadPolicyConfigPtrInput interface {
	pulumi.Input

	ToWorkloadPolicyConfigPtrOutput() WorkloadPolicyConfigPtrOutput
	ToWorkloadPolicyConfigPtrOutputWithContext(context.Context) WorkloadPolicyConfigPtrOutput
}

type workloadPolicyConfigPtrType WorkloadPolicyConfigArgs

func WorkloadPolicyConfigPtr(v *WorkloadPolicyConfigArgs) WorkloadPolicyConfigPtrInput {
	return (*workloadPolicyConfigPtrType)(v)
}

func (*workloadPolicyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadPolicyConfig)(nil)).Elem()
}

func (i *workloadPolicyConfigPtrType) ToWorkloadPolicyConfigPtrOutput() WorkloadPolicyConfigPtrOutput {
	return i.ToWorkloadPolicyConfigPtrOutputWithContext(context.Background())
}

func (i *workloadPolicyConfigPtrType) ToWorkloadPolicyConfigPtrOutputWithContext(ctx context.Context) WorkloadPolicyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadPolicyConfigPtrOutput)
}

// WorkloadPolicyConfig is the configuration of workload policy for autopilot clusters.
type WorkloadPolicyConfigOutput struct{ *pulumi.OutputState }

func (WorkloadPolicyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadPolicyConfig)(nil)).Elem()
}

func (o WorkloadPolicyConfigOutput) ToWorkloadPolicyConfigOutput() WorkloadPolicyConfigOutput {
	return o
}

func (o WorkloadPolicyConfigOutput) ToWorkloadPolicyConfigOutputWithContext(ctx context.Context) WorkloadPolicyConfigOutput {
	return o
}

func (o WorkloadPolicyConfigOutput) ToWorkloadPolicyConfigPtrOutput() WorkloadPolicyConfigPtrOutput {
	return o.ToWorkloadPolicyConfigPtrOutputWithContext(context.Background())
}

func (o WorkloadPolicyConfigOutput) ToWorkloadPolicyConfigPtrOutputWithContext(ctx context.Context) WorkloadPolicyConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadPolicyConfig) *WorkloadPolicyConfig {
		return &v
	}).(WorkloadPolicyConfigPtrOutput)
}

// If true, workloads can use NET_ADMIN capability.
func (o WorkloadPolicyConfigOutput) AllowNetAdmin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WorkloadPolicyConfig) *bool { return v.AllowNetAdmin }).(pulumi.BoolPtrOutput)
}

type WorkloadPolicyConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkloadPolicyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadPolicyConfig)(nil)).Elem()
}

func (o WorkloadPolicyConfigPtrOutput) ToWorkloadPolicyConfigPtrOutput() WorkloadPolicyConfigPtrOutput {
	return o
}

func (o WorkloadPolicyConfigPtrOutput) ToWorkloadPolicyConfigPtrOutputWithContext(ctx context.Context) WorkloadPolicyConfigPtrOutput {
	return o
}

func (o WorkloadPolicyConfigPtrOutput) Elem() WorkloadPolicyConfigOutput {
	return o.ApplyT(func(v *WorkloadPolicyConfig) WorkloadPolicyConfig {
		if v != nil {
			return *v
		}
		var ret WorkloadPolicyConfig
		return ret
	}).(WorkloadPolicyConfigOutput)
}

// If true, workloads can use NET_ADMIN capability.
func (o WorkloadPolicyConfigPtrOutput) AllowNetAdmin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkloadPolicyConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AllowNetAdmin
	}).(pulumi.BoolPtrOutput)
}

// WorkloadPolicyConfig is the configuration of workload policy for autopilot clusters.
type WorkloadPolicyConfigResponse struct {
	// If true, workloads can use NET_ADMIN capability.
	AllowNetAdmin bool `pulumi:"allowNetAdmin"`
}

// WorkloadPolicyConfig is the configuration of workload policy for autopilot clusters.
type WorkloadPolicyConfigResponseOutput struct{ *pulumi.OutputState }

func (WorkloadPolicyConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadPolicyConfigResponse)(nil)).Elem()
}

func (o WorkloadPolicyConfigResponseOutput) ToWorkloadPolicyConfigResponseOutput() WorkloadPolicyConfigResponseOutput {
	return o
}

func (o WorkloadPolicyConfigResponseOutput) ToWorkloadPolicyConfigResponseOutputWithContext(ctx context.Context) WorkloadPolicyConfigResponseOutput {
	return o
}

// If true, workloads can use NET_ADMIN capability.
func (o WorkloadPolicyConfigResponseOutput) AllowNetAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v WorkloadPolicyConfigResponse) bool { return v.AllowNetAdmin }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorConfigInput)(nil)).Elem(), AcceleratorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorConfigArrayInput)(nil)).Elem(), AcceleratorConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdditionalNodeNetworkConfigInput)(nil)).Elem(), AdditionalNodeNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdditionalNodeNetworkConfigArrayInput)(nil)).Elem(), AdditionalNodeNetworkConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdditionalPodNetworkConfigInput)(nil)).Elem(), AdditionalPodNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdditionalPodNetworkConfigArrayInput)(nil)).Elem(), AdditionalPodNetworkConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonsConfigInput)(nil)).Elem(), AddonsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonsConfigPtrInput)(nil)).Elem(), AddonsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedDatapathObservabilityConfigInput)(nil)).Elem(), AdvancedDatapathObservabilityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedDatapathObservabilityConfigPtrInput)(nil)).Elem(), AdvancedDatapathObservabilityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedMachineFeaturesInput)(nil)).Elem(), AdvancedMachineFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedMachineFeaturesPtrInput)(nil)).Elem(), AdvancedMachineFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatorGroupsConfigInput)(nil)).Elem(), AuthenticatorGroupsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatorGroupsConfigPtrInput)(nil)).Elem(), AuthenticatorGroupsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoUpgradeOptionsInput)(nil)).Elem(), AutoUpgradeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoUpgradeOptionsPtrInput)(nil)).Elem(), AutoUpgradeOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutopilotInput)(nil)).Elem(), AutopilotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutopilotPtrInput)(nil)).Elem(), AutopilotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoprovisioningNodePoolDefaultsInput)(nil)).Elem(), AutoprovisioningNodePoolDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoprovisioningNodePoolDefaultsPtrInput)(nil)).Elem(), AutoprovisioningNodePoolDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BestEffortProvisioningInput)(nil)).Elem(), BestEffortProvisioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BestEffortProvisioningPtrInput)(nil)).Elem(), BestEffortProvisioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryDestinationInput)(nil)).Elem(), BigQueryDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryDestinationPtrInput)(nil)).Elem(), BigQueryDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BinaryAuthorizationInput)(nil)).Elem(), BinaryAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BinaryAuthorizationPtrInput)(nil)).Elem(), BinaryAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueGreenSettingsInput)(nil)).Elem(), BlueGreenSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlueGreenSettingsPtrInput)(nil)).Elem(), BlueGreenSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CidrBlockInput)(nil)).Elem(), CidrBlockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CidrBlockArrayInput)(nil)).Elem(), CidrBlockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCertificateConfigInput)(nil)).Elem(), ClientCertificateConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCertificateConfigPtrInput)(nil)).Elem(), ClientCertificateConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunConfigInput)(nil)).Elem(), CloudRunConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunConfigPtrInput)(nil)).Elem(), CloudRunConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAutoscalingInput)(nil)).Elem(), ClusterAutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAutoscalingPtrInput)(nil)).Elem(), ClusterAutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNetworkPerformanceConfigInput)(nil)).Elem(), ClusterNetworkPerformanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNetworkPerformanceConfigPtrInput)(nil)).Elem(), ClusterNetworkPerformanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfidentialNodesInput)(nil)).Elem(), ConfidentialNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfidentialNodesPtrInput)(nil)).Elem(), ConfidentialNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigConnectorConfigInput)(nil)).Elem(), ConfigConnectorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigConnectorConfigPtrInput)(nil)).Elem(), ConfigConnectorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumptionMeteringConfigInput)(nil)).Elem(), ConsumptionMeteringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumptionMeteringConfigPtrInput)(nil)).Elem(), ConsumptionMeteringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostManagementConfigInput)(nil)).Elem(), CostManagementConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CostManagementConfigPtrInput)(nil)).Elem(), CostManagementConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSConfigInput)(nil)).Elem(), DNSConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSConfigPtrInput)(nil)).Elem(), DNSConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DailyMaintenanceWindowInput)(nil)).Elem(), DailyMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DailyMaintenanceWindowPtrInput)(nil)).Elem(), DailyMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseEncryptionInput)(nil)).Elem(), DatabaseEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseEncryptionPtrInput)(nil)).Elem(), DatabaseEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultSnatStatusInput)(nil)).Elem(), DefaultSnatStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultSnatStatusPtrInput)(nil)).Elem(), DefaultSnatStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsCacheConfigInput)(nil)).Elem(), DnsCacheConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsCacheConfigPtrInput)(nil)).Elem(), DnsCacheConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseConfigInput)(nil)).Elem(), EnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseConfigPtrInput)(nil)).Elem(), EnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EphemeralStorageLocalSsdConfigInput)(nil)).Elem(), EphemeralStorageLocalSsdConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EphemeralStorageLocalSsdConfigPtrInput)(nil)).Elem(), EphemeralStorageLocalSsdConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FastSocketInput)(nil)).Elem(), FastSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FastSocketPtrInput)(nil)).Elem(), FastSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilterInput)(nil)).Elem(), FilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilterPtrInput)(nil)).Elem(), FilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetInput)(nil)).Elem(), FleetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetPtrInput)(nil)).Elem(), FleetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GPUDriverInstallationConfigInput)(nil)).Elem(), GPUDriverInstallationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GPUDriverInstallationConfigPtrInput)(nil)).Elem(), GPUDriverInstallationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GPUSharingConfigInput)(nil)).Elem(), GPUSharingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GPUSharingConfigPtrInput)(nil)).Elem(), GPUSharingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAPIConfigInput)(nil)).Elem(), GatewayAPIConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAPIConfigPtrInput)(nil)).Elem(), GatewayAPIConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcePersistentDiskCsiDriverConfigInput)(nil)).Elem(), GcePersistentDiskCsiDriverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcePersistentDiskCsiDriverConfigPtrInput)(nil)).Elem(), GcePersistentDiskCsiDriverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcfsConfigInput)(nil)).Elem(), GcfsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcfsConfigPtrInput)(nil)).Elem(), GcfsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpFilestoreCsiDriverConfigInput)(nil)).Elem(), GcpFilestoreCsiDriverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpFilestoreCsiDriverConfigPtrInput)(nil)).Elem(), GcpFilestoreCsiDriverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsFuseCsiDriverConfigInput)(nil)).Elem(), GcsFuseCsiDriverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsFuseCsiDriverConfigPtrInput)(nil)).Elem(), GcsFuseCsiDriverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeBackupAgentConfigInput)(nil)).Elem(), GkeBackupAgentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeBackupAgentConfigPtrInput)(nil)).Elem(), GkeBackupAgentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalingInput)(nil)).Elem(), HorizontalPodAutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HorizontalPodAutoscalingPtrInput)(nil)).Elem(), HorizontalPodAutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpLoadBalancingInput)(nil)).Elem(), HttpLoadBalancingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpLoadBalancingPtrInput)(nil)).Elem(), HttpLoadBalancingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAllocationPolicyInput)(nil)).Elem(), IPAllocationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAllocationPolicyPtrInput)(nil)).Elem(), IPAllocationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceConfigInput)(nil)).Elem(), IdentityServiceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceConfigPtrInput)(nil)).Elem(), IdentityServiceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sBetaAPIConfigInput)(nil)).Elem(), K8sBetaAPIConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sBetaAPIConfigPtrInput)(nil)).Elem(), K8sBetaAPIConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesDashboardInput)(nil)).Elem(), KubernetesDashboardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesDashboardPtrInput)(nil)).Elem(), KubernetesDashboardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyAbacInput)(nil)).Elem(), LegacyAbacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LegacyAbacPtrInput)(nil)).Elem(), LegacyAbacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxNodeConfigInput)(nil)).Elem(), LinuxNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinuxNodeConfigPtrInput)(nil)).Elem(), LinuxNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalNvmeSsdBlockConfigInput)(nil)).Elem(), LocalNvmeSsdBlockConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalNvmeSsdBlockConfigPtrInput)(nil)).Elem(), LocalNvmeSsdBlockConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingComponentConfigInput)(nil)).Elem(), LoggingComponentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingComponentConfigPtrInput)(nil)).Elem(), LoggingComponentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingConfigInput)(nil)).Elem(), LoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingConfigPtrInput)(nil)).Elem(), LoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingVariantConfigInput)(nil)).Elem(), LoggingVariantConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingVariantConfigPtrInput)(nil)).Elem(), LoggingVariantConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceExclusionOptionsInput)(nil)).Elem(), MaintenanceExclusionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceExclusionOptionsPtrInput)(nil)).Elem(), MaintenanceExclusionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenancePolicyInput)(nil)).Elem(), MaintenancePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenancePolicyPtrInput)(nil)).Elem(), MaintenancePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowInput)(nil)).Elem(), MaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowPtrInput)(nil)).Elem(), MaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrometheusConfigInput)(nil)).Elem(), ManagedPrometheusConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrometheusConfigPtrInput)(nil)).Elem(), ManagedPrometheusConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MasterAuthInput)(nil)).Elem(), MasterAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MasterAuthPtrInput)(nil)).Elem(), MasterAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MasterAuthorizedNetworksConfigInput)(nil)).Elem(), MasterAuthorizedNetworksConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MasterAuthorizedNetworksConfigPtrInput)(nil)).Elem(), MasterAuthorizedNetworksConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaxPodsConstraintInput)(nil)).Elem(), MaxPodsConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaxPodsConstraintPtrInput)(nil)).Elem(), MaxPodsConstraintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeshCertificatesInput)(nil)).Elem(), MeshCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeshCertificatesPtrInput)(nil)).Elem(), MeshCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringComponentConfigInput)(nil)).Elem(), MonitoringComponentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringComponentConfigPtrInput)(nil)).Elem(), MonitoringComponentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringConfigInput)(nil)).Elem(), MonitoringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringConfigPtrInput)(nil)).Elem(), MonitoringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigPtrInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPerformanceConfigInput)(nil)).Elem(), NetworkPerformanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPerformanceConfigPtrInput)(nil)).Elem(), NetworkPerformanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyInput)(nil)).Elem(), NetworkPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyPtrInput)(nil)).Elem(), NetworkPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyConfigInput)(nil)).Elem(), NetworkPolicyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyConfigPtrInput)(nil)).Elem(), NetworkPolicyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkTagsInput)(nil)).Elem(), NetworkTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkTagsPtrInput)(nil)).Elem(), NetworkTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAffinityInput)(nil)).Elem(), NodeAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAffinityArrayInput)(nil)).Elem(), NodeAffinityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigInput)(nil)).Elem(), NodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigPtrInput)(nil)).Elem(), NodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigDefaultsInput)(nil)).Elem(), NodeConfigDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigDefaultsPtrInput)(nil)).Elem(), NodeConfigDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeKubeletConfigInput)(nil)).Elem(), NodeKubeletConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeKubeletConfigPtrInput)(nil)).Elem(), NodeKubeletConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeManagementInput)(nil)).Elem(), NodeManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeManagementPtrInput)(nil)).Elem(), NodeManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeNetworkConfigInput)(nil)).Elem(), NodeNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeNetworkConfigPtrInput)(nil)).Elem(), NodeNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolTypeInput)(nil)).Elem(), NodePoolTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolTypeArrayInput)(nil)).Elem(), NodePoolTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolAutoConfigInput)(nil)).Elem(), NodePoolAutoConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolAutoConfigPtrInput)(nil)).Elem(), NodePoolAutoConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolAutoscalingInput)(nil)).Elem(), NodePoolAutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolAutoscalingPtrInput)(nil)).Elem(), NodePoolAutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolDefaultsInput)(nil)).Elem(), NodePoolDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolDefaultsPtrInput)(nil)).Elem(), NodePoolDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolLoggingConfigInput)(nil)).Elem(), NodePoolLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolLoggingConfigPtrInput)(nil)).Elem(), NodePoolLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTaintInput)(nil)).Elem(), NodeTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTaintArrayInput)(nil)).Elem(), NodeTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationConfigInput)(nil)).Elem(), NotificationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationConfigPtrInput)(nil)).Elem(), NotificationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParentProductConfigInput)(nil)).Elem(), ParentProductConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParentProductConfigPtrInput)(nil)).Elem(), ParentProductConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlacementPolicyInput)(nil)).Elem(), PlacementPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlacementPolicyPtrInput)(nil)).Elem(), PlacementPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodCIDROverprovisionConfigInput)(nil)).Elem(), PodCIDROverprovisionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodCIDROverprovisionConfigPtrInput)(nil)).Elem(), PodCIDROverprovisionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateClusterConfigInput)(nil)).Elem(), PrivateClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateClusterConfigPtrInput)(nil)).Elem(), PrivateClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfigInput)(nil)).Elem(), PrivateClusterMasterGlobalAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateClusterMasterGlobalAccessConfigPtrInput)(nil)).Elem(), PrivateClusterMasterGlobalAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubSubInput)(nil)).Elem(), PubSubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubSubPtrInput)(nil)).Elem(), PubSubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueuedProvisioningInput)(nil)).Elem(), QueuedProvisioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueuedProvisioningPtrInput)(nil)).Elem(), QueuedProvisioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecurringTimeWindowInput)(nil)).Elem(), RecurringTimeWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecurringTimeWindowPtrInput)(nil)).Elem(), RecurringTimeWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseChannelInput)(nil)).Elem(), ReleaseChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseChannelPtrInput)(nil)).Elem(), ReleaseChannelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationAffinityInput)(nil)).Elem(), ReservationAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationAffinityPtrInput)(nil)).Elem(), ReservationAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceLimitInput)(nil)).Elem(), ResourceLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceLimitArrayInput)(nil)).Elem(), ResourceLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceManagerTagsInput)(nil)).Elem(), ResourceManagerTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceManagerTagsPtrInput)(nil)).Elem(), ResourceManagerTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceUsageExportConfigInput)(nil)).Elem(), ResourceUsageExportConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceUsageExportConfigPtrInput)(nil)).Elem(), ResourceUsageExportConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SandboxConfigInput)(nil)).Elem(), SandboxConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SandboxConfigPtrInput)(nil)).Elem(), SandboxConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPostureConfigInput)(nil)).Elem(), SecurityPostureConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPostureConfigPtrInput)(nil)).Elem(), SecurityPostureConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceExternalIPsConfigInput)(nil)).Elem(), ServiceExternalIPsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceExternalIPsConfigPtrInput)(nil)).Elem(), ServiceExternalIPsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceConfigInput)(nil)).Elem(), ShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceConfigPtrInput)(nil)).Elem(), ShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedNodesInput)(nil)).Elem(), ShieldedNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedNodesPtrInput)(nil)).Elem(), ShieldedNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoleTenantConfigInput)(nil)).Elem(), SoleTenantConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoleTenantConfigPtrInput)(nil)).Elem(), SoleTenantConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardRolloutPolicyInput)(nil)).Elem(), StandardRolloutPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardRolloutPolicyPtrInput)(nil)).Elem(), StandardRolloutPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusConditionInput)(nil)).Elem(), StatusConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusConditionArrayInput)(nil)).Elem(), StatusConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeWindowInput)(nil)).Elem(), TimeWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeWindowPtrInput)(nil)).Elem(), TimeWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeWindowMapInput)(nil)).Elem(), TimeWindowMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeSettingsInput)(nil)).Elem(), UpgradeSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeSettingsPtrInput)(nil)).Elem(), UpgradeSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VerticalPodAutoscalingInput)(nil)).Elem(), VerticalPodAutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VerticalPodAutoscalingPtrInput)(nil)).Elem(), VerticalPodAutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNICInput)(nil)).Elem(), VirtualNICArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualNICPtrInput)(nil)).Elem(), VirtualNICArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsNodeConfigInput)(nil)).Elem(), WindowsNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsNodeConfigPtrInput)(nil)).Elem(), WindowsNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadIdentityConfigInput)(nil)).Elem(), WorkloadIdentityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadIdentityConfigPtrInput)(nil)).Elem(), WorkloadIdentityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadMetadataConfigInput)(nil)).Elem(), WorkloadMetadataConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadMetadataConfigPtrInput)(nil)).Elem(), WorkloadMetadataConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadPolicyConfigInput)(nil)).Elem(), WorkloadPolicyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadPolicyConfigPtrInput)(nil)).Elem(), WorkloadPolicyConfigArgs{})
	pulumi.RegisterOutputType(AcceleratorConfigOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigArrayOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AdditionalNodeNetworkConfigOutput{})
	pulumi.RegisterOutputType(AdditionalNodeNetworkConfigArrayOutput{})
	pulumi.RegisterOutputType(AdditionalNodeNetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(AdditionalNodeNetworkConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AdditionalPodNetworkConfigOutput{})
	pulumi.RegisterOutputType(AdditionalPodNetworkConfigArrayOutput{})
	pulumi.RegisterOutputType(AdditionalPodNetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(AdditionalPodNetworkConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AdditionalPodRangesConfigResponseOutput{})
	pulumi.RegisterOutputType(AddonsConfigOutput{})
	pulumi.RegisterOutputType(AddonsConfigPtrOutput{})
	pulumi.RegisterOutputType(AddonsConfigResponseOutput{})
	pulumi.RegisterOutputType(AdvancedDatapathObservabilityConfigOutput{})
	pulumi.RegisterOutputType(AdvancedDatapathObservabilityConfigPtrOutput{})
	pulumi.RegisterOutputType(AdvancedDatapathObservabilityConfigResponseOutput{})
	pulumi.RegisterOutputType(AdvancedMachineFeaturesOutput{})
	pulumi.RegisterOutputType(AdvancedMachineFeaturesPtrOutput{})
	pulumi.RegisterOutputType(AdvancedMachineFeaturesResponseOutput{})
	pulumi.RegisterOutputType(AuthenticatorGroupsConfigOutput{})
	pulumi.RegisterOutputType(AuthenticatorGroupsConfigPtrOutput{})
	pulumi.RegisterOutputType(AuthenticatorGroupsConfigResponseOutput{})
	pulumi.RegisterOutputType(AutoUpgradeOptionsOutput{})
	pulumi.RegisterOutputType(AutoUpgradeOptionsPtrOutput{})
	pulumi.RegisterOutputType(AutoUpgradeOptionsResponseOutput{})
	pulumi.RegisterOutputType(AutopilotOutput{})
	pulumi.RegisterOutputType(AutopilotPtrOutput{})
	pulumi.RegisterOutputType(AutopilotResponseOutput{})
	pulumi.RegisterOutputType(AutoprovisioningNodePoolDefaultsOutput{})
	pulumi.RegisterOutputType(AutoprovisioningNodePoolDefaultsPtrOutput{})
	pulumi.RegisterOutputType(AutoprovisioningNodePoolDefaultsResponseOutput{})
	pulumi.RegisterOutputType(BestEffortProvisioningOutput{})
	pulumi.RegisterOutputType(BestEffortProvisioningPtrOutput{})
	pulumi.RegisterOutputType(BestEffortProvisioningResponseOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationPtrOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationResponseOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(BlueGreenInfoResponseOutput{})
	pulumi.RegisterOutputType(BlueGreenSettingsOutput{})
	pulumi.RegisterOutputType(BlueGreenSettingsPtrOutput{})
	pulumi.RegisterOutputType(BlueGreenSettingsResponseOutput{})
	pulumi.RegisterOutputType(CidrBlockOutput{})
	pulumi.RegisterOutputType(CidrBlockArrayOutput{})
	pulumi.RegisterOutputType(CidrBlockResponseOutput{})
	pulumi.RegisterOutputType(CidrBlockResponseArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateConfigOutput{})
	pulumi.RegisterOutputType(ClientCertificateConfigPtrOutput{})
	pulumi.RegisterOutputType(ClientCertificateConfigResponseOutput{})
	pulumi.RegisterOutputType(CloudRunConfigOutput{})
	pulumi.RegisterOutputType(CloudRunConfigPtrOutput{})
	pulumi.RegisterOutputType(CloudRunConfigResponseOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(ClusterAutoscalingResponseOutput{})
	pulumi.RegisterOutputType(ClusterNetworkPerformanceConfigOutput{})
	pulumi.RegisterOutputType(ClusterNetworkPerformanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterNetworkPerformanceConfigResponseOutput{})
	pulumi.RegisterOutputType(ConfidentialNodesOutput{})
	pulumi.RegisterOutputType(ConfidentialNodesPtrOutput{})
	pulumi.RegisterOutputType(ConfidentialNodesResponseOutput{})
	pulumi.RegisterOutputType(ConfigConnectorConfigOutput{})
	pulumi.RegisterOutputType(ConfigConnectorConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigConnectorConfigResponseOutput{})
	pulumi.RegisterOutputType(ConsumptionMeteringConfigOutput{})
	pulumi.RegisterOutputType(ConsumptionMeteringConfigPtrOutput{})
	pulumi.RegisterOutputType(ConsumptionMeteringConfigResponseOutput{})
	pulumi.RegisterOutputType(CostManagementConfigOutput{})
	pulumi.RegisterOutputType(CostManagementConfigPtrOutput{})
	pulumi.RegisterOutputType(CostManagementConfigResponseOutput{})
	pulumi.RegisterOutputType(DNSConfigOutput{})
	pulumi.RegisterOutputType(DNSConfigPtrOutput{})
	pulumi.RegisterOutputType(DNSConfigResponseOutput{})
	pulumi.RegisterOutputType(DailyMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(DailyMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(DailyMaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionPtrOutput{})
	pulumi.RegisterOutputType(DatabaseEncryptionResponseOutput{})
	pulumi.RegisterOutputType(DefaultSnatStatusOutput{})
	pulumi.RegisterOutputType(DefaultSnatStatusPtrOutput{})
	pulumi.RegisterOutputType(DefaultSnatStatusResponseOutput{})
	pulumi.RegisterOutputType(DnsCacheConfigOutput{})
	pulumi.RegisterOutputType(DnsCacheConfigPtrOutput{})
	pulumi.RegisterOutputType(DnsCacheConfigResponseOutput{})
	pulumi.RegisterOutputType(EnterpriseConfigOutput{})
	pulumi.RegisterOutputType(EnterpriseConfigPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseConfigResponseOutput{})
	pulumi.RegisterOutputType(EphemeralStorageLocalSsdConfigOutput{})
	pulumi.RegisterOutputType(EphemeralStorageLocalSsdConfigPtrOutput{})
	pulumi.RegisterOutputType(EphemeralStorageLocalSsdConfigResponseOutput{})
	pulumi.RegisterOutputType(FastSocketOutput{})
	pulumi.RegisterOutputType(FastSocketPtrOutput{})
	pulumi.RegisterOutputType(FastSocketResponseOutput{})
	pulumi.RegisterOutputType(FilterOutput{})
	pulumi.RegisterOutputType(FilterPtrOutput{})
	pulumi.RegisterOutputType(FilterResponseOutput{})
	pulumi.RegisterOutputType(FleetOutput{})
	pulumi.RegisterOutputType(FleetPtrOutput{})
	pulumi.RegisterOutputType(FleetResponseOutput{})
	pulumi.RegisterOutputType(GPUDriverInstallationConfigOutput{})
	pulumi.RegisterOutputType(GPUDriverInstallationConfigPtrOutput{})
	pulumi.RegisterOutputType(GPUDriverInstallationConfigResponseOutput{})
	pulumi.RegisterOutputType(GPUSharingConfigOutput{})
	pulumi.RegisterOutputType(GPUSharingConfigPtrOutput{})
	pulumi.RegisterOutputType(GPUSharingConfigResponseOutput{})
	pulumi.RegisterOutputType(GatewayAPIConfigOutput{})
	pulumi.RegisterOutputType(GatewayAPIConfigPtrOutput{})
	pulumi.RegisterOutputType(GatewayAPIConfigResponseOutput{})
	pulumi.RegisterOutputType(GcePersistentDiskCsiDriverConfigOutput{})
	pulumi.RegisterOutputType(GcePersistentDiskCsiDriverConfigPtrOutput{})
	pulumi.RegisterOutputType(GcePersistentDiskCsiDriverConfigResponseOutput{})
	pulumi.RegisterOutputType(GcfsConfigOutput{})
	pulumi.RegisterOutputType(GcfsConfigPtrOutput{})
	pulumi.RegisterOutputType(GcfsConfigResponseOutput{})
	pulumi.RegisterOutputType(GcpFilestoreCsiDriverConfigOutput{})
	pulumi.RegisterOutputType(GcpFilestoreCsiDriverConfigPtrOutput{})
	pulumi.RegisterOutputType(GcpFilestoreCsiDriverConfigResponseOutput{})
	pulumi.RegisterOutputType(GcsFuseCsiDriverConfigOutput{})
	pulumi.RegisterOutputType(GcsFuseCsiDriverConfigPtrOutput{})
	pulumi.RegisterOutputType(GcsFuseCsiDriverConfigResponseOutput{})
	pulumi.RegisterOutputType(GkeBackupAgentConfigOutput{})
	pulumi.RegisterOutputType(GkeBackupAgentConfigPtrOutput{})
	pulumi.RegisterOutputType(GkeBackupAgentConfigResponseOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalingOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(HorizontalPodAutoscalingResponseOutput{})
	pulumi.RegisterOutputType(HttpLoadBalancingOutput{})
	pulumi.RegisterOutputType(HttpLoadBalancingPtrOutput{})
	pulumi.RegisterOutputType(HttpLoadBalancingResponseOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyPtrOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyResponseOutput{})
	pulumi.RegisterOutputType(IdentityServiceConfigOutput{})
	pulumi.RegisterOutputType(IdentityServiceConfigPtrOutput{})
	pulumi.RegisterOutputType(IdentityServiceConfigResponseOutput{})
	pulumi.RegisterOutputType(K8sBetaAPIConfigOutput{})
	pulumi.RegisterOutputType(K8sBetaAPIConfigPtrOutput{})
	pulumi.RegisterOutputType(K8sBetaAPIConfigResponseOutput{})
	pulumi.RegisterOutputType(KubernetesDashboardOutput{})
	pulumi.RegisterOutputType(KubernetesDashboardPtrOutput{})
	pulumi.RegisterOutputType(KubernetesDashboardResponseOutput{})
	pulumi.RegisterOutputType(LegacyAbacOutput{})
	pulumi.RegisterOutputType(LegacyAbacPtrOutput{})
	pulumi.RegisterOutputType(LegacyAbacResponseOutput{})
	pulumi.RegisterOutputType(LinuxNodeConfigOutput{})
	pulumi.RegisterOutputType(LinuxNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(LinuxNodeConfigResponseOutput{})
	pulumi.RegisterOutputType(LocalNvmeSsdBlockConfigOutput{})
	pulumi.RegisterOutputType(LocalNvmeSsdBlockConfigPtrOutput{})
	pulumi.RegisterOutputType(LocalNvmeSsdBlockConfigResponseOutput{})
	pulumi.RegisterOutputType(LoggingComponentConfigOutput{})
	pulumi.RegisterOutputType(LoggingComponentConfigPtrOutput{})
	pulumi.RegisterOutputType(LoggingComponentConfigResponseOutput{})
	pulumi.RegisterOutputType(LoggingConfigOutput{})
	pulumi.RegisterOutputType(LoggingConfigPtrOutput{})
	pulumi.RegisterOutputType(LoggingConfigResponseOutput{})
	pulumi.RegisterOutputType(LoggingVariantConfigOutput{})
	pulumi.RegisterOutputType(LoggingVariantConfigPtrOutput{})
	pulumi.RegisterOutputType(LoggingVariantConfigResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceExclusionOptionsOutput{})
	pulumi.RegisterOutputType(MaintenanceExclusionOptionsPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceExclusionOptionsResponseOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyPtrOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(ManagedPrometheusConfigOutput{})
	pulumi.RegisterOutputType(ManagedPrometheusConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedPrometheusConfigResponseOutput{})
	pulumi.RegisterOutputType(MasterAuthOutput{})
	pulumi.RegisterOutputType(MasterAuthPtrOutput{})
	pulumi.RegisterOutputType(MasterAuthResponseOutput{})
	pulumi.RegisterOutputType(MasterAuthorizedNetworksConfigOutput{})
	pulumi.RegisterOutputType(MasterAuthorizedNetworksConfigPtrOutput{})
	pulumi.RegisterOutputType(MasterAuthorizedNetworksConfigResponseOutput{})
	pulumi.RegisterOutputType(MaxPodsConstraintOutput{})
	pulumi.RegisterOutputType(MaxPodsConstraintPtrOutput{})
	pulumi.RegisterOutputType(MaxPodsConstraintResponseOutput{})
	pulumi.RegisterOutputType(MeshCertificatesOutput{})
	pulumi.RegisterOutputType(MeshCertificatesPtrOutput{})
	pulumi.RegisterOutputType(MeshCertificatesResponseOutput{})
	pulumi.RegisterOutputType(MonitoringComponentConfigOutput{})
	pulumi.RegisterOutputType(MonitoringComponentConfigPtrOutput{})
	pulumi.RegisterOutputType(MonitoringComponentConfigResponseOutput{})
	pulumi.RegisterOutputType(MonitoringConfigOutput{})
	pulumi.RegisterOutputType(MonitoringConfigPtrOutput{})
	pulumi.RegisterOutputType(MonitoringConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkPerformanceConfigOutput{})
	pulumi.RegisterOutputType(NetworkPerformanceConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkPerformanceConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkPolicyOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyConfigOutput{})
	pulumi.RegisterOutputType(NetworkPolicyConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkPolicyResponseOutput{})
	pulumi.RegisterOutputType(NetworkTagsOutput{})
	pulumi.RegisterOutputType(NetworkTagsPtrOutput{})
	pulumi.RegisterOutputType(NetworkTagsResponseOutput{})
	pulumi.RegisterOutputType(NodeAffinityOutput{})
	pulumi.RegisterOutputType(NodeAffinityArrayOutput{})
	pulumi.RegisterOutputType(NodeAffinityResponseOutput{})
	pulumi.RegisterOutputType(NodeAffinityResponseArrayOutput{})
	pulumi.RegisterOutputType(NodeConfigOutput{})
	pulumi.RegisterOutputType(NodeConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeConfigDefaultsOutput{})
	pulumi.RegisterOutputType(NodeConfigDefaultsPtrOutput{})
	pulumi.RegisterOutputType(NodeConfigDefaultsResponseOutput{})
	pulumi.RegisterOutputType(NodeConfigResponseOutput{})
	pulumi.RegisterOutputType(NodeKubeletConfigOutput{})
	pulumi.RegisterOutputType(NodeKubeletConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeKubeletConfigResponseOutput{})
	pulumi.RegisterOutputType(NodeManagementOutput{})
	pulumi.RegisterOutputType(NodeManagementPtrOutput{})
	pulumi.RegisterOutputType(NodeManagementResponseOutput{})
	pulumi.RegisterOutputType(NodeNetworkConfigOutput{})
	pulumi.RegisterOutputType(NodeNetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeNetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NodePoolTypeOutput{})
	pulumi.RegisterOutputType(NodePoolTypeArrayOutput{})
	pulumi.RegisterOutputType(NodePoolAutoConfigOutput{})
	pulumi.RegisterOutputType(NodePoolAutoConfigPtrOutput{})
	pulumi.RegisterOutputType(NodePoolAutoConfigResponseOutput{})
	pulumi.RegisterOutputType(NodePoolAutoscalingOutput{})
	pulumi.RegisterOutputType(NodePoolAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(NodePoolAutoscalingResponseOutput{})
	pulumi.RegisterOutputType(NodePoolDefaultsOutput{})
	pulumi.RegisterOutputType(NodePoolDefaultsPtrOutput{})
	pulumi.RegisterOutputType(NodePoolDefaultsResponseOutput{})
	pulumi.RegisterOutputType(NodePoolLoggingConfigOutput{})
	pulumi.RegisterOutputType(NodePoolLoggingConfigPtrOutput{})
	pulumi.RegisterOutputType(NodePoolLoggingConfigResponseOutput{})
	pulumi.RegisterOutputType(NodePoolResponseOutput{})
	pulumi.RegisterOutputType(NodePoolResponseArrayOutput{})
	pulumi.RegisterOutputType(NodeTaintOutput{})
	pulumi.RegisterOutputType(NodeTaintArrayOutput{})
	pulumi.RegisterOutputType(NodeTaintResponseOutput{})
	pulumi.RegisterOutputType(NodeTaintResponseArrayOutput{})
	pulumi.RegisterOutputType(NotificationConfigOutput{})
	pulumi.RegisterOutputType(NotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(NotificationConfigResponseOutput{})
	pulumi.RegisterOutputType(ParentProductConfigOutput{})
	pulumi.RegisterOutputType(ParentProductConfigPtrOutput{})
	pulumi.RegisterOutputType(ParentProductConfigResponseOutput{})
	pulumi.RegisterOutputType(PlacementPolicyOutput{})
	pulumi.RegisterOutputType(PlacementPolicyPtrOutput{})
	pulumi.RegisterOutputType(PlacementPolicyResponseOutput{})
	pulumi.RegisterOutputType(PodCIDROverprovisionConfigOutput{})
	pulumi.RegisterOutputType(PodCIDROverprovisionConfigPtrOutput{})
	pulumi.RegisterOutputType(PodCIDROverprovisionConfigResponseOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigResponseOutput{})
	pulumi.RegisterOutputType(PrivateClusterMasterGlobalAccessConfigOutput{})
	pulumi.RegisterOutputType(PrivateClusterMasterGlobalAccessConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterMasterGlobalAccessConfigResponseOutput{})
	pulumi.RegisterOutputType(PubSubOutput{})
	pulumi.RegisterOutputType(PubSubPtrOutput{})
	pulumi.RegisterOutputType(PubSubResponseOutput{})
	pulumi.RegisterOutputType(QueuedProvisioningOutput{})
	pulumi.RegisterOutputType(QueuedProvisioningPtrOutput{})
	pulumi.RegisterOutputType(QueuedProvisioningResponseOutput{})
	pulumi.RegisterOutputType(RangeInfoResponseOutput{})
	pulumi.RegisterOutputType(RangeInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(RecurringTimeWindowOutput{})
	pulumi.RegisterOutputType(RecurringTimeWindowPtrOutput{})
	pulumi.RegisterOutputType(RecurringTimeWindowResponseOutput{})
	pulumi.RegisterOutputType(ReleaseChannelOutput{})
	pulumi.RegisterOutputType(ReleaseChannelPtrOutput{})
	pulumi.RegisterOutputType(ReleaseChannelConfigResponseOutput{})
	pulumi.RegisterOutputType(ReleaseChannelConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(ReleaseChannelResponseOutput{})
	pulumi.RegisterOutputType(ReservationAffinityOutput{})
	pulumi.RegisterOutputType(ReservationAffinityPtrOutput{})
	pulumi.RegisterOutputType(ReservationAffinityResponseOutput{})
	pulumi.RegisterOutputType(ResourceLimitOutput{})
	pulumi.RegisterOutputType(ResourceLimitArrayOutput{})
	pulumi.RegisterOutputType(ResourceLimitResponseOutput{})
	pulumi.RegisterOutputType(ResourceLimitResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceManagerTagsOutput{})
	pulumi.RegisterOutputType(ResourceManagerTagsPtrOutput{})
	pulumi.RegisterOutputType(ResourceManagerTagsResponseOutput{})
	pulumi.RegisterOutputType(ResourceUsageExportConfigOutput{})
	pulumi.RegisterOutputType(ResourceUsageExportConfigPtrOutput{})
	pulumi.RegisterOutputType(ResourceUsageExportConfigResponseOutput{})
	pulumi.RegisterOutputType(SandboxConfigOutput{})
	pulumi.RegisterOutputType(SandboxConfigPtrOutput{})
	pulumi.RegisterOutputType(SandboxConfigResponseOutput{})
	pulumi.RegisterOutputType(SecurityPostureConfigOutput{})
	pulumi.RegisterOutputType(SecurityPostureConfigPtrOutput{})
	pulumi.RegisterOutputType(SecurityPostureConfigResponseOutput{})
	pulumi.RegisterOutputType(ServiceExternalIPsConfigOutput{})
	pulumi.RegisterOutputType(ServiceExternalIPsConfigPtrOutput{})
	pulumi.RegisterOutputType(ServiceExternalIPsConfigResponseOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(ShieldedNodesOutput{})
	pulumi.RegisterOutputType(ShieldedNodesPtrOutput{})
	pulumi.RegisterOutputType(ShieldedNodesResponseOutput{})
	pulumi.RegisterOutputType(SoleTenantConfigOutput{})
	pulumi.RegisterOutputType(SoleTenantConfigPtrOutput{})
	pulumi.RegisterOutputType(SoleTenantConfigResponseOutput{})
	pulumi.RegisterOutputType(StandardRolloutPolicyOutput{})
	pulumi.RegisterOutputType(StandardRolloutPolicyPtrOutput{})
	pulumi.RegisterOutputType(StandardRolloutPolicyResponseOutput{})
	pulumi.RegisterOutputType(StatusConditionOutput{})
	pulumi.RegisterOutputType(StatusConditionArrayOutput{})
	pulumi.RegisterOutputType(StatusConditionResponseOutput{})
	pulumi.RegisterOutputType(StatusConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(TimeWindowOutput{})
	pulumi.RegisterOutputType(TimeWindowPtrOutput{})
	pulumi.RegisterOutputType(TimeWindowMapOutput{})
	pulumi.RegisterOutputType(TimeWindowResponseOutput{})
	pulumi.RegisterOutputType(TimeWindowResponseMapOutput{})
	pulumi.RegisterOutputType(UpdateInfoResponseOutput{})
	pulumi.RegisterOutputType(UpgradeSettingsOutput{})
	pulumi.RegisterOutputType(UpgradeSettingsPtrOutput{})
	pulumi.RegisterOutputType(UpgradeSettingsResponseOutput{})
	pulumi.RegisterOutputType(VerticalPodAutoscalingOutput{})
	pulumi.RegisterOutputType(VerticalPodAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(VerticalPodAutoscalingResponseOutput{})
	pulumi.RegisterOutputType(VirtualNICOutput{})
	pulumi.RegisterOutputType(VirtualNICPtrOutput{})
	pulumi.RegisterOutputType(VirtualNICResponseOutput{})
	pulumi.RegisterOutputType(WindowsNodeConfigOutput{})
	pulumi.RegisterOutputType(WindowsNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(WindowsNodeConfigResponseOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityConfigOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkloadIdentityConfigResponseOutput{})
	pulumi.RegisterOutputType(WorkloadMetadataConfigOutput{})
	pulumi.RegisterOutputType(WorkloadMetadataConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkloadMetadataConfigResponseOutput{})
	pulumi.RegisterOutputType(WorkloadPolicyConfigOutput{})
	pulumi.RegisterOutputType(WorkloadPolicyConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkloadPolicyConfigResponseOutput{})
}
