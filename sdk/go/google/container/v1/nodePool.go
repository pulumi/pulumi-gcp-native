// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a node pool for a cluster.
type NodePool struct {
	pulumi.CustomResourceState

	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling NodePoolAutoscalingResponseOutput `pulumi:"autoscaling"`
	// Enable best effort provisioning for nodes
	BestEffortProvisioning BestEffortProvisioningResponseOutput `pulumi:"bestEffortProvisioning"`
	ClusterId              pulumi.StringOutput                  `pulumi:"clusterId"`
	// Which conditions caused the current node pool state.
	Conditions StatusConditionResponseArrayOutput `pulumi:"conditions"`
	// The node configuration of the pool.
	Config NodeConfigResponseOutput `pulumi:"config"`
	// This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount pulumi.IntOutput `pulumi:"initialNodeCount"`
	// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool. During the node pool blue-green upgrade operation, the URLs contain both blue and green resources.
	InstanceGroupUrls pulumi.StringArrayOutput `pulumi:"instanceGroupUrls"`
	Location          pulumi.StringOutput      `pulumi:"location"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management NodeManagementResponseOutput `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint MaxPodsConstraintResponseOutput `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name pulumi.StringOutput `pulumi:"name"`
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig NodeNetworkConfigResponseOutput `pulumi:"networkConfig"`
	// Specifies the node placement policy.
	PlacementPolicy PlacementPolicyResponseOutput `pulumi:"placementPolicy"`
	// [Output only] The pod CIDR block size per node in this node pool.
	PodIpv4CidrSize pulumi.IntOutput    `pulumi:"podIpv4CidrSize"`
	Project         pulumi.StringOutput `pulumi:"project"`
	// Specifies the configuration of queued provisioning.
	QueuedProvisioning QueuedProvisioningResponseOutput `pulumi:"queuedProvisioning"`
	// [Output only] Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// [Output only] The status of the nodes in this pool instance.
	Status pulumi.StringOutput `pulumi:"status"`
	// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
	//
	// Deprecated: [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
	StatusMessage pulumi.StringOutput `pulumi:"statusMessage"`
	// [Output only] Update info contains relevant information during a node pool update.
	UpdateInfo UpdateInfoResponseOutput `pulumi:"updateInfo"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings UpgradeSettingsResponseOutput `pulumi:"upgradeSettings"`
	// The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOption) (*NodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clusterId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NodePool
	err := ctx.RegisterResource("google-native:container/v1:NodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodePoolState, opts ...pulumi.ResourceOption) (*NodePool, error) {
	var resource NodePool
	err := ctx.ReadResource("google-native:container/v1:NodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodePool resources.
type nodePoolState struct {
}

type NodePoolState struct {
}

func (NodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolState)(nil)).Elem()
}

type nodePoolArgs struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling *NodePoolAutoscaling `pulumi:"autoscaling"`
	// Enable best effort provisioning for nodes
	BestEffortProvisioning *BestEffortProvisioning `pulumi:"bestEffortProvisioning"`
	// Deprecated. The name of the cluster. This field has been deprecated and replaced by the parent field.
	//
	// Deprecated: Deprecated. The name of the cluster. This field has been deprecated and replaced by the parent field.
	ClusterId string `pulumi:"clusterId"`
	// Which conditions caused the current node pool state.
	Conditions []StatusCondition `pulumi:"conditions"`
	// The node configuration of the pool.
	Config *NodeConfig `pulumi:"config"`
	// This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount *int    `pulumi:"initialNodeCount"`
	Location         *string `pulumi:"location"`
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations []string `pulumi:"locations"`
	// NodeManagement configuration for this NodePool.
	Management *NodeManagement `pulumi:"management"`
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint *MaxPodsConstraint `pulumi:"maxPodsConstraint"`
	// The name of the node pool.
	Name *string `pulumi:"name"`
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig *NodeNetworkConfig `pulumi:"networkConfig"`
	// The parent (project, location, cluster name) where the node pool will be created. Specified in the format `projects/*/locations/*/clusters/*`.
	Parent *string `pulumi:"parent"`
	// Specifies the node placement policy.
	PlacementPolicy *PlacementPolicy `pulumi:"placementPolicy"`
	// Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.
	//
	// Deprecated: Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.
	Project *string `pulumi:"project"`
	// Specifies the configuration of queued provisioning.
	QueuedProvisioning *QueuedProvisioning `pulumi:"queuedProvisioning"`
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings *UpgradeSettings `pulumi:"upgradeSettings"`
	// The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
	Version *string `pulumi:"version"`
	// Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.
	//
	// Deprecated: Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
	Autoscaling NodePoolAutoscalingPtrInput
	// Enable best effort provisioning for nodes
	BestEffortProvisioning BestEffortProvisioningPtrInput
	// Deprecated. The name of the cluster. This field has been deprecated and replaced by the parent field.
	//
	// Deprecated: Deprecated. The name of the cluster. This field has been deprecated and replaced by the parent field.
	ClusterId pulumi.StringInput
	// Which conditions caused the current node pool state.
	Conditions StatusConditionArrayInput
	// The node configuration of the pool.
	Config NodeConfigPtrInput
	// This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
	InitialNodeCount pulumi.IntPtrInput
	Location         pulumi.StringPtrInput
	// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
	Locations pulumi.StringArrayInput
	// NodeManagement configuration for this NodePool.
	Management NodeManagementPtrInput
	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	MaxPodsConstraint MaxPodsConstraintPtrInput
	// The name of the node pool.
	Name pulumi.StringPtrInput
	// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
	NetworkConfig NodeNetworkConfigPtrInput
	// The parent (project, location, cluster name) where the node pool will be created. Specified in the format `projects/*/locations/*/clusters/*`.
	Parent pulumi.StringPtrInput
	// Specifies the node placement policy.
	PlacementPolicy PlacementPolicyPtrInput
	// Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.
	//
	// Deprecated: Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.
	Project pulumi.StringPtrInput
	// Specifies the configuration of queued provisioning.
	QueuedProvisioning QueuedProvisioningPtrInput
	// Upgrade settings control disruption and speed of the upgrade.
	UpgradeSettings UpgradeSettingsPtrInput
	// The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
	Version pulumi.StringPtrInput
	// Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.
	//
	// Deprecated: Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.
	Zone pulumi.StringPtrInput
}

func (NodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolArgs)(nil)).Elem()
}

type NodePoolInput interface {
	pulumi.Input

	ToNodePoolOutput() NodePoolOutput
	ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput
}

func (*NodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (i *NodePool) ToNodePoolOutput() NodePoolOutput {
	return i.ToNodePoolOutputWithContext(context.Background())
}

func (i *NodePool) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolOutput)
}

func (i *NodePool) ToOutput(ctx context.Context) pulumix.Output[*NodePool] {
	return pulumix.Output[*NodePool]{
		OutputState: i.ToNodePoolOutputWithContext(ctx).OutputState,
	}
}

type NodePoolOutput struct{ *pulumi.OutputState }

func (NodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (o NodePoolOutput) ToNodePoolOutput() NodePoolOutput {
	return o
}

func (o NodePoolOutput) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return o
}

func (o NodePoolOutput) ToOutput(ctx context.Context) pulumix.Output[*NodePool] {
	return pulumix.Output[*NodePool]{
		OutputState: o.OutputState,
	}
}

// Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present.
func (o NodePoolOutput) Autoscaling() NodePoolAutoscalingResponseOutput {
	return o.ApplyT(func(v *NodePool) NodePoolAutoscalingResponseOutput { return v.Autoscaling }).(NodePoolAutoscalingResponseOutput)
}

// Enable best effort provisioning for nodes
func (o NodePoolOutput) BestEffortProvisioning() BestEffortProvisioningResponseOutput {
	return o.ApplyT(func(v *NodePool) BestEffortProvisioningResponseOutput { return v.BestEffortProvisioning }).(BestEffortProvisioningResponseOutput)
}

func (o NodePoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Which conditions caused the current node pool state.
func (o NodePoolOutput) Conditions() StatusConditionResponseArrayOutput {
	return o.ApplyT(func(v *NodePool) StatusConditionResponseArrayOutput { return v.Conditions }).(StatusConditionResponseArrayOutput)
}

// The node configuration of the pool.
func (o NodePoolOutput) Config() NodeConfigResponseOutput {
	return o.ApplyT(func(v *NodePool) NodeConfigResponseOutput { return v.Config }).(NodeConfigResponseOutput)
}

// This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
func (o NodePoolOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
func (o NodePoolOutput) InitialNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.InitialNodeCount }).(pulumi.IntOutput)
}

// [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool. During the node pool blue-green upgrade operation, the URLs contain both blue and green resources.
func (o NodePoolOutput) InstanceGroupUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringArrayOutput { return v.InstanceGroupUrls }).(pulumi.StringArrayOutput)
}

func (o NodePoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
func (o NodePoolOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringArrayOutput { return v.Locations }).(pulumi.StringArrayOutput)
}

// NodeManagement configuration for this NodePool.
func (o NodePoolOutput) Management() NodeManagementResponseOutput {
	return o.ApplyT(func(v *NodePool) NodeManagementResponseOutput { return v.Management }).(NodeManagementResponseOutput)
}

// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
func (o NodePoolOutput) MaxPodsConstraint() MaxPodsConstraintResponseOutput {
	return o.ApplyT(func(v *NodePool) MaxPodsConstraintResponseOutput { return v.MaxPodsConstraint }).(MaxPodsConstraintResponseOutput)
}

// The name of the node pool.
func (o NodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.
func (o NodePoolOutput) NetworkConfig() NodeNetworkConfigResponseOutput {
	return o.ApplyT(func(v *NodePool) NodeNetworkConfigResponseOutput { return v.NetworkConfig }).(NodeNetworkConfigResponseOutput)
}

// Specifies the node placement policy.
func (o NodePoolOutput) PlacementPolicy() PlacementPolicyResponseOutput {
	return o.ApplyT(func(v *NodePool) PlacementPolicyResponseOutput { return v.PlacementPolicy }).(PlacementPolicyResponseOutput)
}

// [Output only] The pod CIDR block size per node in this node pool.
func (o NodePoolOutput) PodIpv4CidrSize() pulumi.IntOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntOutput { return v.PodIpv4CidrSize }).(pulumi.IntOutput)
}

func (o NodePoolOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the configuration of queued provisioning.
func (o NodePoolOutput) QueuedProvisioning() QueuedProvisioningResponseOutput {
	return o.ApplyT(func(v *NodePool) QueuedProvisioningResponseOutput { return v.QueuedProvisioning }).(QueuedProvisioningResponseOutput)
}

// [Output only] Server-defined URL for the resource.
func (o NodePoolOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// [Output only] The status of the nodes in this pool instance.
func (o NodePoolOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
//
// Deprecated: [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
func (o NodePoolOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

// [Output only] Update info contains relevant information during a node pool update.
func (o NodePoolOutput) UpdateInfo() UpdateInfoResponseOutput {
	return o.ApplyT(func(v *NodePool) UpdateInfoResponseOutput { return v.UpdateInfo }).(UpdateInfoResponseOutput)
}

// Upgrade settings control disruption and speed of the upgrade.
func (o NodePoolOutput) UpgradeSettings() UpgradeSettingsResponseOutput {
	return o.ApplyT(func(v *NodePool) UpgradeSettingsResponseOutput { return v.UpgradeSettings }).(UpgradeSettingsResponseOutput)
}

// The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
func (o NodePoolOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolInput)(nil)).Elem(), &NodePool{})
	pulumi.RegisterOutputType(NodePoolOutput{})
}
