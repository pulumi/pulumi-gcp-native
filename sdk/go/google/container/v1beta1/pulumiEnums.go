// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Which load balancer type is installed for Cloud Run.
type CloudRunConfigLoadBalancerType pulumi.String

const (
	// Load balancer type for Cloud Run is unspecified.
	CloudRunConfigLoadBalancerTypeLoadBalancerTypeUnspecified = CloudRunConfigLoadBalancerType("LOAD_BALANCER_TYPE_UNSPECIFIED")
	// Install external load balancer for Cloud Run.
	CloudRunConfigLoadBalancerTypeLoadBalancerTypeExternal = CloudRunConfigLoadBalancerType("LOAD_BALANCER_TYPE_EXTERNAL")
	// Install internal load balancer for Cloud Run.
	CloudRunConfigLoadBalancerTypeLoadBalancerTypeInternal = CloudRunConfigLoadBalancerType("LOAD_BALANCER_TYPE_INTERNAL")
)

func (CloudRunConfigLoadBalancerType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CloudRunConfigLoadBalancerType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CloudRunConfigLoadBalancerType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CloudRunConfigLoadBalancerType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CloudRunConfigLoadBalancerType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Defines autoscaling behaviour.
type ClusterAutoscalingAutoscalingProfile pulumi.String

const (
	// No change to autoscaling configuration.
	ClusterAutoscalingAutoscalingProfileProfileUnspecified = ClusterAutoscalingAutoscalingProfile("PROFILE_UNSPECIFIED")
	// Prioritize optimizing utilization of resources.
	ClusterAutoscalingAutoscalingProfileOptimizeUtilization = ClusterAutoscalingAutoscalingProfile("OPTIMIZE_UTILIZATION")
	// Use default (balanced) autoscaling configuration.
	ClusterAutoscalingAutoscalingProfileBalanced = ClusterAutoscalingAutoscalingProfile("BALANCED")
)

func (ClusterAutoscalingAutoscalingProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ClusterAutoscalingAutoscalingProfile) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterAutoscalingAutoscalingProfile) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterAutoscalingAutoscalingProfile) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ClusterAutoscalingAutoscalingProfile) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of the integration.
type ClusterTelemetryType pulumi.String

const (
	// Not set.
	ClusterTelemetryTypeUnspecified = ClusterTelemetryType("UNSPECIFIED")
	// Monitoring integration is disabled.
	ClusterTelemetryTypeDisabled = ClusterTelemetryType("DISABLED")
	// Monitoring integration is enabled.
	ClusterTelemetryTypeEnabled = ClusterTelemetryType("ENABLED")
	// Only system components are monitored and logged.
	ClusterTelemetryTypeSystemOnly = ClusterTelemetryType("SYSTEM_ONLY")
)

func (ClusterTelemetryType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ClusterTelemetryType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterTelemetryType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterTelemetryType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ClusterTelemetryType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The desired datapath provider for the cluster.
type ClusterUpdateDesiredDatapathProvider pulumi.String

const (
	// Default value.
	ClusterUpdateDesiredDatapathProviderDatapathProviderUnspecified = ClusterUpdateDesiredDatapathProvider("DATAPATH_PROVIDER_UNSPECIFIED")
	// Use the IPTables implementation based on kube-proxy.
	ClusterUpdateDesiredDatapathProviderLegacyDatapath = ClusterUpdateDesiredDatapathProvider("LEGACY_DATAPATH")
	// Use the eBPF based GKE Dataplane V2 with additional features. See the [GKE Dataplane V2 documentation](https://cloud.google.com/kubernetes-engine/docs/how-to/dataplane-v2) for more.
	ClusterUpdateDesiredDatapathProviderAdvancedDatapath = ClusterUpdateDesiredDatapathProvider("ADVANCED_DATAPATH")
)

func (ClusterUpdateDesiredDatapathProvider) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ClusterUpdateDesiredDatapathProvider) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterUpdateDesiredDatapathProvider) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterUpdateDesiredDatapathProvider) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ClusterUpdateDesiredDatapathProvider) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The desired state of IPv6 connectivity to Google Services.
type ClusterUpdateDesiredPrivateIpv6GoogleAccess pulumi.String

const (
	// Default value. Same as DISABLED
	ClusterUpdateDesiredPrivateIpv6GoogleAccessPrivateIpv6GoogleAccessUnspecified = ClusterUpdateDesiredPrivateIpv6GoogleAccess("PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED")
	// No private access to or from Google Services
	ClusterUpdateDesiredPrivateIpv6GoogleAccessPrivateIpv6GoogleAccessDisabled = ClusterUpdateDesiredPrivateIpv6GoogleAccess("PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED")
	// Enables private IPv6 access to Google Services from GKE
	ClusterUpdateDesiredPrivateIpv6GoogleAccessPrivateIpv6GoogleAccessToGoogle = ClusterUpdateDesiredPrivateIpv6GoogleAccess("PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE")
	// Enables priate IPv6 access to and from Google Services
	ClusterUpdateDesiredPrivateIpv6GoogleAccessPrivateIpv6GoogleAccessBidirectional = ClusterUpdateDesiredPrivateIpv6GoogleAccess("PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL")
)

func (ClusterUpdateDesiredPrivateIpv6GoogleAccess) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ClusterUpdateDesiredPrivateIpv6GoogleAccess) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterUpdateDesiredPrivateIpv6GoogleAccess) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ClusterUpdateDesiredPrivateIpv6GoogleAccess) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ClusterUpdateDesiredPrivateIpv6GoogleAccess) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// cluster_dns indicates which in-cluster DNS provider should be used.
type DNSConfigClusterDns pulumi.String

const (
	// Default value
	DNSConfigClusterDnsProviderUnspecified = DNSConfigClusterDns("PROVIDER_UNSPECIFIED")
	// Use GKE default DNS provider(kube-dns) for DNS resolution.
	DNSConfigClusterDnsPlatformDefault = DNSConfigClusterDns("PLATFORM_DEFAULT")
	// Use CloudDNS for DNS resolution.
	DNSConfigClusterDnsCloudDns = DNSConfigClusterDns("CLOUD_DNS")
)

func (DNSConfigClusterDns) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DNSConfigClusterDns) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DNSConfigClusterDns) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DNSConfigClusterDns) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DNSConfigClusterDns) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// cluster_dns_scope indicates the scope of access to cluster DNS records.
type DNSConfigClusterDnsScope pulumi.String

const (
	// Default value, will be inferred as cluster scope.
	DNSConfigClusterDnsScopeDnsScopeUnspecified = DNSConfigClusterDnsScope("DNS_SCOPE_UNSPECIFIED")
	// DNS records are accessible from within the cluster.
	DNSConfigClusterDnsScopeClusterScope = DNSConfigClusterDnsScope("CLUSTER_SCOPE")
	// DNS records are accessible from within the VPC.
	DNSConfigClusterDnsScopeVpcScope = DNSConfigClusterDnsScope("VPC_SCOPE")
)

func (DNSConfigClusterDnsScope) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DNSConfigClusterDnsScope) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DNSConfigClusterDnsScope) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DNSConfigClusterDnsScope) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DNSConfigClusterDnsScope) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Denotes the state of etcd encryption.
type DatabaseEncryptionState pulumi.String

const (
	// Should never be set
	DatabaseEncryptionStateUnknown = DatabaseEncryptionState("UNKNOWN")
	// Secrets in etcd are encrypted.
	DatabaseEncryptionStateEncrypted = DatabaseEncryptionState("ENCRYPTED")
	// Secrets in etcd are stored in plain text (at etcd level) - this is unrelated to Compute Engine level full disk encryption.
	DatabaseEncryptionStateDecrypted = DatabaseEncryptionState("DECRYPTED")
)

func (DatabaseEncryptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DatabaseEncryptionState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseEncryptionState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseEncryptionState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseEncryptionState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The specified Istio auth mode, either none, or mutual TLS.
type IstioConfigAuth pulumi.String

const (
	// auth not enabled
	IstioConfigAuthAuthNone = IstioConfigAuth("AUTH_NONE")
	// auth mutual TLS enabled
	IstioConfigAuthAuthMutualTls = IstioConfigAuth("AUTH_MUTUAL_TLS")
)

func (IstioConfigAuth) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e IstioConfigAuth) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IstioConfigAuth) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IstioConfigAuth) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IstioConfigAuth) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
type NetworkConfigDatapathProvider pulumi.String

const (
	// Default value.
	NetworkConfigDatapathProviderDatapathProviderUnspecified = NetworkConfigDatapathProvider("DATAPATH_PROVIDER_UNSPECIFIED")
	// Use the IPTables implementation based on kube-proxy.
	NetworkConfigDatapathProviderLegacyDatapath = NetworkConfigDatapathProvider("LEGACY_DATAPATH")
	// Use the eBPF based GKE Dataplane V2 with additional features. See the [GKE Dataplane V2 documentation](https://cloud.google.com/kubernetes-engine/docs/how-to/dataplane-v2) for more.
	NetworkConfigDatapathProviderAdvancedDatapath = NetworkConfigDatapathProvider("ADVANCED_DATAPATH")
)

func (NetworkConfigDatapathProvider) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NetworkConfigDatapathProvider) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkConfigDatapathProvider) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkConfigDatapathProvider) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkConfigDatapathProvider) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)
type NetworkConfigPrivateIpv6GoogleAccess pulumi.String

const (
	// Default value. Same as DISABLED
	NetworkConfigPrivateIpv6GoogleAccessPrivateIpv6GoogleAccessUnspecified = NetworkConfigPrivateIpv6GoogleAccess("PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED")
	// No private access to or from Google Services
	NetworkConfigPrivateIpv6GoogleAccessPrivateIpv6GoogleAccessDisabled = NetworkConfigPrivateIpv6GoogleAccess("PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED")
	// Enables private IPv6 access to Google Services from GKE
	NetworkConfigPrivateIpv6GoogleAccessPrivateIpv6GoogleAccessToGoogle = NetworkConfigPrivateIpv6GoogleAccess("PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE")
	// Enables priate IPv6 access to and from Google Services
	NetworkConfigPrivateIpv6GoogleAccessPrivateIpv6GoogleAccessBidirectional = NetworkConfigPrivateIpv6GoogleAccess("PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL")
)

func (NetworkConfigPrivateIpv6GoogleAccess) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NetworkConfigPrivateIpv6GoogleAccess) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkConfigPrivateIpv6GoogleAccess) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkConfigPrivateIpv6GoogleAccess) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkConfigPrivateIpv6GoogleAccess) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The selected network policy provider.
type NetworkPolicyProvider pulumi.String

const (
	// Not set
	NetworkPolicyProviderProviderUnspecified = NetworkPolicyProvider("PROVIDER_UNSPECIFIED")
	// Tigera (Calico Felix).
	NetworkPolicyProviderCalico = NetworkPolicyProvider("CALICO")
)

func (NetworkPolicyProvider) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NetworkPolicyProvider) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPolicyProvider) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPolicyProvider) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkPolicyProvider) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Effect for taint.
type NodeTaintEffect pulumi.String

const (
	// Not set
	NodeTaintEffectEffectUnspecified = NodeTaintEffect("EFFECT_UNSPECIFIED")
	// NoSchedule
	NodeTaintEffectNoSchedule = NodeTaintEffect("NO_SCHEDULE")
	// PreferNoSchedule
	NodeTaintEffectPreferNoSchedule = NodeTaintEffect("PREFER_NO_SCHEDULE")
	// NoExecute
	NodeTaintEffectNoExecute = NodeTaintEffect("NO_EXECUTE")
)

func (NodeTaintEffect) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NodeTaintEffect) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeTaintEffect) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeTaintEffect) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NodeTaintEffect) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// channel specifies which release channel the cluster is subscribed to.
type ReleaseChannelChannel pulumi.String

const (
	// No channel specified.
	ReleaseChannelChannelUnspecified = ReleaseChannelChannel("UNSPECIFIED")
	// RAPID channel is offered on an early access basis for customers who want to test new releases. WARNING: Versions available in the RAPID Channel may be subject to unresolved issues with no known workaround and are not subject to any SLAs.
	ReleaseChannelChannelRapid = ReleaseChannelChannel("RAPID")
	// Clusters subscribed to REGULAR receive versions that are considered GA quality. REGULAR is intended for production users who want to take advantage of new features.
	ReleaseChannelChannelRegular = ReleaseChannelChannel("REGULAR")
	// Clusters subscribed to STABLE receive versions that are known to be stable and reliable in production.
	ReleaseChannelChannelStable = ReleaseChannelChannel("STABLE")
)

func (ReleaseChannelChannel) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ReleaseChannelChannel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReleaseChannelChannel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReleaseChannelChannel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReleaseChannelChannel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Corresponds to the type of reservation consumption.
type ReservationAffinityConsumeReservationType pulumi.String

const (
	// Default value. This should not be used.
	ReservationAffinityConsumeReservationTypeUnspecified = ReservationAffinityConsumeReservationType("UNSPECIFIED")
	// Do not consume from any reserved capacity.
	ReservationAffinityConsumeReservationTypeNoReservation = ReservationAffinityConsumeReservationType("NO_RESERVATION")
	// Consume any reservation available.
	ReservationAffinityConsumeReservationTypeAnyReservation = ReservationAffinityConsumeReservationType("ANY_RESERVATION")
	// Must consume from a specific reservation. Must specify key value fields for specifying the reservations.
	ReservationAffinityConsumeReservationTypeSpecificReservation = ReservationAffinityConsumeReservationType("SPECIFIC_RESERVATION")
)

func (ReservationAffinityConsumeReservationType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ReservationAffinityConsumeReservationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReservationAffinityConsumeReservationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReservationAffinityConsumeReservationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReservationAffinityConsumeReservationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of the sandbox to use for the node.
type SandboxConfigType pulumi.String

const (
	// Default value. This should not be used.
	SandboxConfigTypeUnspecified = SandboxConfigType("UNSPECIFIED")
	// Run sandbox using gvisor.
	SandboxConfigTypeGvisor = SandboxConfigType("GVISOR")
)

func (SandboxConfigType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SandboxConfigType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SandboxConfigType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SandboxConfigType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SandboxConfigType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Canonical code of the condition.
type StatusConditionCanonicalCode pulumi.String

const (
	// Not an error; returned on success HTTP Mapping: 200 OK
	StatusConditionCanonicalCodeOk = StatusConditionCanonicalCode("OK")
	// The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request
	StatusConditionCanonicalCodeCancelled = StatusConditionCanonicalCode("CANCELLED")
	// Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error
	StatusConditionCanonicalCodeUnknown = StatusConditionCanonicalCode("UNKNOWN")
	// The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request
	StatusConditionCanonicalCodeInvalidArgument = StatusConditionCanonicalCode("INVALID_ARGUMENT")
	// The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout
	StatusConditionCanonicalCodeDeadlineExceeded = StatusConditionCanonicalCode("DEADLINE_EXCEEDED")
	// Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found
	StatusConditionCanonicalCodeNotFound = StatusConditionCanonicalCode("NOT_FOUND")
	// The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict
	StatusConditionCanonicalCodeAlreadyExists = StatusConditionCanonicalCode("ALREADY_EXISTS")
	// The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden
	StatusConditionCanonicalCodePermissionDenied = StatusConditionCanonicalCode("PERMISSION_DENIED")
	// The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized
	StatusConditionCanonicalCodeUnauthenticated = StatusConditionCanonicalCode("UNAUTHENTICATED")
	// Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests
	StatusConditionCanonicalCodeResourceExhausted = StatusConditionCanonicalCode("RESOURCE_EXHAUSTED")
	// The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an "rmdir" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request
	StatusConditionCanonicalCodeFailedPrecondition = StatusConditionCanonicalCode("FAILED_PRECONDITION")
	// The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict
	StatusConditionCanonicalCodeAborted = StatusConditionCanonicalCode("ABORTED")
	// The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request
	StatusConditionCanonicalCodeOutOfRange = StatusConditionCanonicalCode("OUT_OF_RANGE")
	// The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented
	StatusConditionCanonicalCodeUnimplemented = StatusConditionCanonicalCode("UNIMPLEMENTED")
	// Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error
	StatusConditionCanonicalCodeInternal = StatusConditionCanonicalCode("INTERNAL")
	// The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
	StatusConditionCanonicalCodeUnavailable = StatusConditionCanonicalCode("UNAVAILABLE")
	// Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error
	StatusConditionCanonicalCodeDataLoss = StatusConditionCanonicalCode("DATA_LOSS")
)

func (StatusConditionCanonicalCode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e StatusConditionCanonicalCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatusConditionCanonicalCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatusConditionCanonicalCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StatusConditionCanonicalCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Mode is the configuration for how to expose metadata to workloads running on the node pool.
type WorkloadMetadataConfigMode pulumi.String

const (
	// Not set.
	WorkloadMetadataConfigModeModeUnspecified = WorkloadMetadataConfigMode("MODE_UNSPECIFIED")
	// Expose all Compute Engine metadata to pods.
	WorkloadMetadataConfigModeGceMetadata = WorkloadMetadataConfigMode("GCE_METADATA")
	// Run the GKE Metadata Server on this node. The GKE Metadata Server exposes a metadata API to workloads that is compatible with the V1 Compute Metadata APIs exposed by the Compute Engine and App Engine Metadata Servers. This feature can only be enabled if Workload Identity is enabled at the cluster level.
	WorkloadMetadataConfigModeGkeMetadata = WorkloadMetadataConfigMode("GKE_METADATA")
)

func (WorkloadMetadataConfigMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e WorkloadMetadataConfigMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkloadMetadataConfigMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkloadMetadataConfigMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WorkloadMetadataConfigMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// NodeMetadata is the configuration for how to expose metadata to the workloads running on the node.
type WorkloadMetadataConfigNodeMetadata pulumi.String

const (
	// Not set.
	WorkloadMetadataConfigNodeMetadataUnspecified = WorkloadMetadataConfigNodeMetadata("UNSPECIFIED")
	// Prevent workloads not in hostNetwork from accessing certain VM metadata, specifically kube-env, which contains Kubelet credentials, and the instance identity token. Metadata concealment is a temporary security solution available while the bootstrapping process for cluster nodes is being redesigned with significant security improvements. This feature is scheduled to be deprecated in the future and later removed.
	WorkloadMetadataConfigNodeMetadataSecure = WorkloadMetadataConfigNodeMetadata("SECURE")
	// Expose all VM metadata to pods.
	WorkloadMetadataConfigNodeMetadataExpose = WorkloadMetadataConfigNodeMetadata("EXPOSE")
	// Run the GKE Metadata Server on this node. The GKE Metadata Server exposes a metadata API to workloads that is compatible with the V1 Compute Metadata APIs exposed by the Compute Engine and App Engine Metadata Servers. This feature can only be enabled if Workload Identity is enabled at the cluster level.
	WorkloadMetadataConfigNodeMetadataGkeMetadataServer = WorkloadMetadataConfigNodeMetadata("GKE_METADATA_SERVER")
)

func (WorkloadMetadataConfigNodeMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e WorkloadMetadataConfigNodeMetadata) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkloadMetadataConfigNodeMetadata) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkloadMetadataConfigNodeMetadata) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WorkloadMetadataConfigNodeMetadata) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
