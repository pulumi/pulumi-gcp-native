// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates and starts a Replay using the given ReplayConfig.
type OrganizationReplay struct {
	pulumi.CustomResourceState
}

// NewOrganizationReplay registers a new resource with the given unique name, arguments, and options.
func NewOrganizationReplay(ctx *pulumi.Context,
	name string, args *OrganizationReplayArgs, opts ...pulumi.ResourceOption) (*OrganizationReplay, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.OrganizationsId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationsId'")
	}
	var resource OrganizationReplay
	err := ctx.RegisterResource("google-cloud:policysimulator/v1:OrganizationReplay", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationReplay gets an existing OrganizationReplay resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationReplay(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationReplayState, opts ...pulumi.ResourceOption) (*OrganizationReplay, error) {
	var resource OrganizationReplay
	err := ctx.ReadResource("google-cloud:policysimulator/v1:OrganizationReplay", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationReplay resources.
type organizationReplayState struct {
}

type OrganizationReplayState struct {
}

func (OrganizationReplayState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationReplayState)(nil)).Elem()
}

type organizationReplayArgs struct {
	// Required. The configuration used for the `Replay`.
	Config      *GoogleCloudPolicysimulatorV1ReplayConfig `pulumi:"config"`
	LocationsId string                                    `pulumi:"locationsId"`
	// Output only. The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
	Name            *string `pulumi:"name"`
	OrganizationsId string  `pulumi:"organizationsId"`
	// Output only. Summary statistics about the replayed log entries.
	ResultsSummary *GoogleCloudPolicysimulatorV1ReplayResultsSummary `pulumi:"resultsSummary"`
	// Output only. The current state of the `Replay`.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a OrganizationReplay resource.
type OrganizationReplayArgs struct {
	// Required. The configuration used for the `Replay`.
	Config      GoogleCloudPolicysimulatorV1ReplayConfigPtrInput
	LocationsId pulumi.StringInput
	// Output only. The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
	Name            pulumi.StringPtrInput
	OrganizationsId pulumi.StringInput
	// Output only. Summary statistics about the replayed log entries.
	ResultsSummary GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrInput
	// Output only. The current state of the `Replay`.
	State pulumi.StringPtrInput
}

func (OrganizationReplayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationReplayArgs)(nil)).Elem()
}

type OrganizationReplayInput interface {
	pulumi.Input

	ToOrganizationReplayOutput() OrganizationReplayOutput
	ToOrganizationReplayOutputWithContext(ctx context.Context) OrganizationReplayOutput
}

func (*OrganizationReplay) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationReplay)(nil))
}

func (i *OrganizationReplay) ToOrganizationReplayOutput() OrganizationReplayOutput {
	return i.ToOrganizationReplayOutputWithContext(context.Background())
}

func (i *OrganizationReplay) ToOrganizationReplayOutputWithContext(ctx context.Context) OrganizationReplayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationReplayOutput)
}

type OrganizationReplayOutput struct {
	*pulumi.OutputState
}

func (OrganizationReplayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationReplay)(nil))
}

func (o OrganizationReplayOutput) ToOrganizationReplayOutput() OrganizationReplayOutput {
	return o
}

func (o OrganizationReplayOutput) ToOrganizationReplayOutputWithContext(ctx context.Context) OrganizationReplayOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OrganizationReplayOutput{})
}
