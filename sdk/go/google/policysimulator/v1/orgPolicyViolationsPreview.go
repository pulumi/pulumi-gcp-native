// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CreateOrgPolicyViolationsPreview creates an OrgPolicyViolationsPreview for the proposed changes in the provided OrgPolicyViolationsPreview.OrgPolicyOverlay. The changes to OrgPolicy are specified by this `OrgPolicyOverlay`. The resources to scan are inferred from these specified changes.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type OrgPolicyViolationsPreview struct {
	pulumi.CustomResourceState

	// Time when this `OrgPolicyViolationsPreview` was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`
	CustomConstraints pulumi.StringArrayOutput `pulumi:"customConstraints"`
	Location          pulumi.StringOutput      `pulumi:"location"`
	// The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. An optional user-specified ID for the OrgPolicyViolationsPreview. If not provided, a random ID will be generated.
	OrgPolicyViolationsPreviewId pulumi.StringPtrOutput `pulumi:"orgPolicyViolationsPreviewId"`
	OrganizationId               pulumi.StringOutput    `pulumi:"organizationId"`
	// The proposed changes we are previewing violations for.
	Overlay GoogleCloudPolicysimulatorV1OrgPolicyOverlayResponseOutput `pulumi:"overlay"`
	// A summary of the state of all resources scanned for compliance with the changed OrgPolicy.
	ResourceCounts GoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCountsResponseOutput `pulumi:"resourceCounts"`
	// The state of the `OrgPolicyViolationsPreview`.
	State pulumi.StringOutput `pulumi:"state"`
	// The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.
	ViolationsCount pulumi.IntOutput `pulumi:"violationsCount"`
}

// NewOrgPolicyViolationsPreview registers a new resource with the given unique name, arguments, and options.
func NewOrgPolicyViolationsPreview(ctx *pulumi.Context,
	name string, args *OrgPolicyViolationsPreviewArgs, opts ...pulumi.ResourceOption) (*OrgPolicyViolationsPreview, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Overlay == nil {
		return nil, errors.New("invalid value for required argument 'Overlay'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"organizationId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgPolicyViolationsPreview
	err := ctx.RegisterResource("google-native:policysimulator/v1:OrgPolicyViolationsPreview", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgPolicyViolationsPreview gets an existing OrgPolicyViolationsPreview resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgPolicyViolationsPreview(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgPolicyViolationsPreviewState, opts ...pulumi.ResourceOption) (*OrgPolicyViolationsPreview, error) {
	var resource OrgPolicyViolationsPreview
	err := ctx.ReadResource("google-native:policysimulator/v1:OrgPolicyViolationsPreview", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgPolicyViolationsPreview resources.
type orgPolicyViolationsPreviewState struct {
}

type OrgPolicyViolationsPreviewState struct {
}

func (OrgPolicyViolationsPreviewState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgPolicyViolationsPreviewState)(nil)).Elem()
}

type orgPolicyViolationsPreviewArgs struct {
	Location *string `pulumi:"location"`
	// Optional. An optional user-specified ID for the OrgPolicyViolationsPreview. If not provided, a random ID will be generated.
	OrgPolicyViolationsPreviewId *string `pulumi:"orgPolicyViolationsPreviewId"`
	OrganizationId               string  `pulumi:"organizationId"`
	// The proposed changes we are previewing violations for.
	Overlay GoogleCloudPolicysimulatorV1OrgPolicyOverlay `pulumi:"overlay"`
}

// The set of arguments for constructing a OrgPolicyViolationsPreview resource.
type OrgPolicyViolationsPreviewArgs struct {
	Location pulumi.StringPtrInput
	// Optional. An optional user-specified ID for the OrgPolicyViolationsPreview. If not provided, a random ID will be generated.
	OrgPolicyViolationsPreviewId pulumi.StringPtrInput
	OrganizationId               pulumi.StringInput
	// The proposed changes we are previewing violations for.
	Overlay GoogleCloudPolicysimulatorV1OrgPolicyOverlayInput
}

func (OrgPolicyViolationsPreviewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgPolicyViolationsPreviewArgs)(nil)).Elem()
}

type OrgPolicyViolationsPreviewInput interface {
	pulumi.Input

	ToOrgPolicyViolationsPreviewOutput() OrgPolicyViolationsPreviewOutput
	ToOrgPolicyViolationsPreviewOutputWithContext(ctx context.Context) OrgPolicyViolationsPreviewOutput
}

func (*OrgPolicyViolationsPreview) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgPolicyViolationsPreview)(nil)).Elem()
}

func (i *OrgPolicyViolationsPreview) ToOrgPolicyViolationsPreviewOutput() OrgPolicyViolationsPreviewOutput {
	return i.ToOrgPolicyViolationsPreviewOutputWithContext(context.Background())
}

func (i *OrgPolicyViolationsPreview) ToOrgPolicyViolationsPreviewOutputWithContext(ctx context.Context) OrgPolicyViolationsPreviewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgPolicyViolationsPreviewOutput)
}

type OrgPolicyViolationsPreviewOutput struct{ *pulumi.OutputState }

func (OrgPolicyViolationsPreviewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgPolicyViolationsPreview)(nil)).Elem()
}

func (o OrgPolicyViolationsPreviewOutput) ToOrgPolicyViolationsPreviewOutput() OrgPolicyViolationsPreviewOutput {
	return o
}

func (o OrgPolicyViolationsPreviewOutput) ToOrgPolicyViolationsPreviewOutputWithContext(ctx context.Context) OrgPolicyViolationsPreviewOutput {
	return o
}

// Time when this `OrgPolicyViolationsPreview` was created.
func (o OrgPolicyViolationsPreviewOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgPolicyViolationsPreview) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`
func (o OrgPolicyViolationsPreviewOutput) CustomConstraints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgPolicyViolationsPreview) pulumi.StringArrayOutput { return v.CustomConstraints }).(pulumi.StringArrayOutput)
}

func (o OrgPolicyViolationsPreviewOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgPolicyViolationsPreview) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`
func (o OrgPolicyViolationsPreviewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgPolicyViolationsPreview) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. An optional user-specified ID for the OrgPolicyViolationsPreview. If not provided, a random ID will be generated.
func (o OrgPolicyViolationsPreviewOutput) OrgPolicyViolationsPreviewId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgPolicyViolationsPreview) pulumi.StringPtrOutput { return v.OrgPolicyViolationsPreviewId }).(pulumi.StringPtrOutput)
}

func (o OrgPolicyViolationsPreviewOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgPolicyViolationsPreview) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The proposed changes we are previewing violations for.
func (o OrgPolicyViolationsPreviewOutput) Overlay() GoogleCloudPolicysimulatorV1OrgPolicyOverlayResponseOutput {
	return o.ApplyT(func(v *OrgPolicyViolationsPreview) GoogleCloudPolicysimulatorV1OrgPolicyOverlayResponseOutput {
		return v.Overlay
	}).(GoogleCloudPolicysimulatorV1OrgPolicyOverlayResponseOutput)
}

// A summary of the state of all resources scanned for compliance with the changed OrgPolicy.
func (o OrgPolicyViolationsPreviewOutput) ResourceCounts() GoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCountsResponseOutput {
	return o.ApplyT(func(v *OrgPolicyViolationsPreview) GoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCountsResponseOutput {
		return v.ResourceCounts
	}).(GoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCountsResponseOutput)
}

// The state of the `OrgPolicyViolationsPreview`.
func (o OrgPolicyViolationsPreviewOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgPolicyViolationsPreview) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.
func (o OrgPolicyViolationsPreviewOutput) ViolationsCount() pulumi.IntOutput {
	return o.ApplyT(func(v *OrgPolicyViolationsPreview) pulumi.IntOutput { return v.ViolationsCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgPolicyViolationsPreviewInput)(nil)).Elem(), &OrgPolicyViolationsPreview{})
	pulumi.RegisterOutputType(OrgPolicyViolationsPreviewOutput{})
}
