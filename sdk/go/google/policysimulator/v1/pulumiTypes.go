// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The configuration used for a Replay.
type GoogleCloudPolicysimulatorV1ReplayConfig struct {
	// The logs to use as input for the Replay.
	LogSource *string `pulumi:"logSource"`
	// A mapping of the resources that you want to simulate policies for and the policies that you want to simulate. Keys are the full resource names for the resources. For example, `//cloudresourcemanager.googleapis.com/projects/my-project`. For examples of full resource names for Google Cloud services, see https://cloud.google.com/iam/help/troubleshooter/full-resource-names. Values are Policy objects representing the policies that you want to simulate. Replays automatically take into account any IAM policies inherited through the resource hierarchy, and any policies set on descendant resources. You do not need to include these policies in the policy overlay.
	PolicyOverlay map[string]string `pulumi:"policyOverlay"`
}

// GoogleCloudPolicysimulatorV1ReplayConfigInput is an input type that accepts GoogleCloudPolicysimulatorV1ReplayConfigArgs and GoogleCloudPolicysimulatorV1ReplayConfigOutput values.
// You can construct a concrete instance of `GoogleCloudPolicysimulatorV1ReplayConfigInput` via:
//
//          GoogleCloudPolicysimulatorV1ReplayConfigArgs{...}
type GoogleCloudPolicysimulatorV1ReplayConfigInput interface {
	pulumi.Input

	ToGoogleCloudPolicysimulatorV1ReplayConfigOutput() GoogleCloudPolicysimulatorV1ReplayConfigOutput
	ToGoogleCloudPolicysimulatorV1ReplayConfigOutputWithContext(context.Context) GoogleCloudPolicysimulatorV1ReplayConfigOutput
}

// The configuration used for a Replay.
type GoogleCloudPolicysimulatorV1ReplayConfigArgs struct {
	// The logs to use as input for the Replay.
	LogSource pulumi.StringPtrInput `pulumi:"logSource"`
	// A mapping of the resources that you want to simulate policies for and the policies that you want to simulate. Keys are the full resource names for the resources. For example, `//cloudresourcemanager.googleapis.com/projects/my-project`. For examples of full resource names for Google Cloud services, see https://cloud.google.com/iam/help/troubleshooter/full-resource-names. Values are Policy objects representing the policies that you want to simulate. Replays automatically take into account any IAM policies inherited through the resource hierarchy, and any policies set on descendant resources. You do not need to include these policies in the policy overlay.
	PolicyOverlay pulumi.StringMapInput `pulumi:"policyOverlay"`
}

func (GoogleCloudPolicysimulatorV1ReplayConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudPolicysimulatorV1ReplayConfig)(nil)).Elem()
}

func (i GoogleCloudPolicysimulatorV1ReplayConfigArgs) ToGoogleCloudPolicysimulatorV1ReplayConfigOutput() GoogleCloudPolicysimulatorV1ReplayConfigOutput {
	return i.ToGoogleCloudPolicysimulatorV1ReplayConfigOutputWithContext(context.Background())
}

func (i GoogleCloudPolicysimulatorV1ReplayConfigArgs) ToGoogleCloudPolicysimulatorV1ReplayConfigOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudPolicysimulatorV1ReplayConfigOutput)
}

func (i GoogleCloudPolicysimulatorV1ReplayConfigArgs) ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutput() GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput {
	return i.ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutputWithContext(context.Background())
}

func (i GoogleCloudPolicysimulatorV1ReplayConfigArgs) ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudPolicysimulatorV1ReplayConfigOutput).ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutputWithContext(ctx)
}

// GoogleCloudPolicysimulatorV1ReplayConfigPtrInput is an input type that accepts GoogleCloudPolicysimulatorV1ReplayConfigArgs, GoogleCloudPolicysimulatorV1ReplayConfigPtr and GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput values.
// You can construct a concrete instance of `GoogleCloudPolicysimulatorV1ReplayConfigPtrInput` via:
//
//          GoogleCloudPolicysimulatorV1ReplayConfigArgs{...}
//
//  or:
//
//          nil
type GoogleCloudPolicysimulatorV1ReplayConfigPtrInput interface {
	pulumi.Input

	ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutput() GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput
	ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutputWithContext(context.Context) GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput
}

type googleCloudPolicysimulatorV1ReplayConfigPtrType GoogleCloudPolicysimulatorV1ReplayConfigArgs

func GoogleCloudPolicysimulatorV1ReplayConfigPtr(v *GoogleCloudPolicysimulatorV1ReplayConfigArgs) GoogleCloudPolicysimulatorV1ReplayConfigPtrInput {
	return (*googleCloudPolicysimulatorV1ReplayConfigPtrType)(v)
}

func (*googleCloudPolicysimulatorV1ReplayConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudPolicysimulatorV1ReplayConfig)(nil)).Elem()
}

func (i *googleCloudPolicysimulatorV1ReplayConfigPtrType) ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutput() GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput {
	return i.ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutputWithContext(context.Background())
}

func (i *googleCloudPolicysimulatorV1ReplayConfigPtrType) ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput)
}

// The configuration used for a Replay.
type GoogleCloudPolicysimulatorV1ReplayConfigOutput struct{ *pulumi.OutputState }

func (GoogleCloudPolicysimulatorV1ReplayConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudPolicysimulatorV1ReplayConfig)(nil)).Elem()
}

func (o GoogleCloudPolicysimulatorV1ReplayConfigOutput) ToGoogleCloudPolicysimulatorV1ReplayConfigOutput() GoogleCloudPolicysimulatorV1ReplayConfigOutput {
	return o
}

func (o GoogleCloudPolicysimulatorV1ReplayConfigOutput) ToGoogleCloudPolicysimulatorV1ReplayConfigOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayConfigOutput {
	return o
}

func (o GoogleCloudPolicysimulatorV1ReplayConfigOutput) ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutput() GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput {
	return o.ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutputWithContext(context.Background())
}

func (o GoogleCloudPolicysimulatorV1ReplayConfigOutput) ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput {
	return o.ApplyT(func(v GoogleCloudPolicysimulatorV1ReplayConfig) *GoogleCloudPolicysimulatorV1ReplayConfig {
		return &v
	}).(GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput)
}

// The logs to use as input for the Replay.
func (o GoogleCloudPolicysimulatorV1ReplayConfigOutput) LogSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudPolicysimulatorV1ReplayConfig) *string { return v.LogSource }).(pulumi.StringPtrOutput)
}

// A mapping of the resources that you want to simulate policies for and the policies that you want to simulate. Keys are the full resource names for the resources. For example, `//cloudresourcemanager.googleapis.com/projects/my-project`. For examples of full resource names for Google Cloud services, see https://cloud.google.com/iam/help/troubleshooter/full-resource-names. Values are Policy objects representing the policies that you want to simulate. Replays automatically take into account any IAM policies inherited through the resource hierarchy, and any policies set on descendant resources. You do not need to include these policies in the policy overlay.
func (o GoogleCloudPolicysimulatorV1ReplayConfigOutput) PolicyOverlay() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudPolicysimulatorV1ReplayConfig) map[string]string { return v.PolicyOverlay }).(pulumi.StringMapOutput)
}

type GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudPolicysimulatorV1ReplayConfig)(nil)).Elem()
}

func (o GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput) ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutput() GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput {
	return o
}

func (o GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput) ToGoogleCloudPolicysimulatorV1ReplayConfigPtrOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput {
	return o
}

func (o GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput) Elem() GoogleCloudPolicysimulatorV1ReplayConfigOutput {
	return o.ApplyT(func(v *GoogleCloudPolicysimulatorV1ReplayConfig) GoogleCloudPolicysimulatorV1ReplayConfig { return *v }).(GoogleCloudPolicysimulatorV1ReplayConfigOutput)
}

// The logs to use as input for the Replay.
func (o GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput) LogSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudPolicysimulatorV1ReplayConfig) *string {
		if v == nil {
			return nil
		}
		return v.LogSource
	}).(pulumi.StringPtrOutput)
}

// A mapping of the resources that you want to simulate policies for and the policies that you want to simulate. Keys are the full resource names for the resources. For example, `//cloudresourcemanager.googleapis.com/projects/my-project`. For examples of full resource names for Google Cloud services, see https://cloud.google.com/iam/help/troubleshooter/full-resource-names. Values are Policy objects representing the policies that you want to simulate. Replays automatically take into account any IAM policies inherited through the resource hierarchy, and any policies set on descendant resources. You do not need to include these policies in the policy overlay.
func (o GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput) PolicyOverlay() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleCloudPolicysimulatorV1ReplayConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.PolicyOverlay
	}).(pulumi.StringMapOutput)
}

// Summary statistics about the replayed log entries.
type GoogleCloudPolicysimulatorV1ReplayResultsSummary struct {
	// The number of replayed log entries with a difference between baseline and simulated policies.
	DifferenceCount *int `pulumi:"differenceCount"`
	// The number of log entries that could not be replayed.
	ErrorCount *int `pulumi:"errorCount"`
	// The total number of log entries replayed.
	LogCount *int `pulumi:"logCount"`
	// The date of the newest log entry replayed.
	NewestDate *GoogleTypeDate `pulumi:"newestDate"`
	// The date of the oldest log entry replayed.
	OldestDate *GoogleTypeDate `pulumi:"oldestDate"`
	// The number of replayed log entries with no difference between baseline and simulated policies.
	UnchangedCount *int `pulumi:"unchangedCount"`
}

// GoogleCloudPolicysimulatorV1ReplayResultsSummaryInput is an input type that accepts GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs and GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput values.
// You can construct a concrete instance of `GoogleCloudPolicysimulatorV1ReplayResultsSummaryInput` via:
//
//          GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs{...}
type GoogleCloudPolicysimulatorV1ReplayResultsSummaryInput interface {
	pulumi.Input

	ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput() GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput
	ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryOutputWithContext(context.Context) GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput
}

// Summary statistics about the replayed log entries.
type GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs struct {
	// The number of replayed log entries with a difference between baseline and simulated policies.
	DifferenceCount pulumi.IntPtrInput `pulumi:"differenceCount"`
	// The number of log entries that could not be replayed.
	ErrorCount pulumi.IntPtrInput `pulumi:"errorCount"`
	// The total number of log entries replayed.
	LogCount pulumi.IntPtrInput `pulumi:"logCount"`
	// The date of the newest log entry replayed.
	NewestDate GoogleTypeDatePtrInput `pulumi:"newestDate"`
	// The date of the oldest log entry replayed.
	OldestDate GoogleTypeDatePtrInput `pulumi:"oldestDate"`
	// The number of replayed log entries with no difference between baseline and simulated policies.
	UnchangedCount pulumi.IntPtrInput `pulumi:"unchangedCount"`
}

func (GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudPolicysimulatorV1ReplayResultsSummary)(nil)).Elem()
}

func (i GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput() GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput {
	return i.ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryOutputWithContext(context.Background())
}

func (i GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput)
}

func (i GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput() GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput {
	return i.ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutputWithContext(context.Background())
}

func (i GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput).ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutputWithContext(ctx)
}

// GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrInput is an input type that accepts GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs, GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtr and GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput values.
// You can construct a concrete instance of `GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrInput` via:
//
//          GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs{...}
//
//  or:
//
//          nil
type GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrInput interface {
	pulumi.Input

	ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput() GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput
	ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutputWithContext(context.Context) GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput
}

type googleCloudPolicysimulatorV1ReplayResultsSummaryPtrType GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs

func GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtr(v *GoogleCloudPolicysimulatorV1ReplayResultsSummaryArgs) GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrInput {
	return (*googleCloudPolicysimulatorV1ReplayResultsSummaryPtrType)(v)
}

func (*googleCloudPolicysimulatorV1ReplayResultsSummaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudPolicysimulatorV1ReplayResultsSummary)(nil)).Elem()
}

func (i *googleCloudPolicysimulatorV1ReplayResultsSummaryPtrType) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput() GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput {
	return i.ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutputWithContext(context.Background())
}

func (i *googleCloudPolicysimulatorV1ReplayResultsSummaryPtrType) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput)
}

// Summary statistics about the replayed log entries.
type GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput struct{ *pulumi.OutputState }

func (GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudPolicysimulatorV1ReplayResultsSummary)(nil)).Elem()
}

func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput() GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput {
	return o
}

func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput {
	return o
}

func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput() GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput {
	return o.ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutputWithContext(context.Background())
}

func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput {
	return o.ApplyT(func(v GoogleCloudPolicysimulatorV1ReplayResultsSummary) *GoogleCloudPolicysimulatorV1ReplayResultsSummary {
		return &v
	}).(GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput)
}

// The number of replayed log entries with a difference between baseline and simulated policies.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) DifferenceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudPolicysimulatorV1ReplayResultsSummary) *int { return v.DifferenceCount }).(pulumi.IntPtrOutput)
}

// The number of log entries that could not be replayed.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) ErrorCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudPolicysimulatorV1ReplayResultsSummary) *int { return v.ErrorCount }).(pulumi.IntPtrOutput)
}

// The total number of log entries replayed.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) LogCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudPolicysimulatorV1ReplayResultsSummary) *int { return v.LogCount }).(pulumi.IntPtrOutput)
}

// The date of the newest log entry replayed.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) NewestDate() GoogleTypeDatePtrOutput {
	return o.ApplyT(func(v GoogleCloudPolicysimulatorV1ReplayResultsSummary) *GoogleTypeDate { return v.NewestDate }).(GoogleTypeDatePtrOutput)
}

// The date of the oldest log entry replayed.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) OldestDate() GoogleTypeDatePtrOutput {
	return o.ApplyT(func(v GoogleCloudPolicysimulatorV1ReplayResultsSummary) *GoogleTypeDate { return v.OldestDate }).(GoogleTypeDatePtrOutput)
}

// The number of replayed log entries with no difference between baseline and simulated policies.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput) UnchangedCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudPolicysimulatorV1ReplayResultsSummary) *int { return v.UnchangedCount }).(pulumi.IntPtrOutput)
}

type GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudPolicysimulatorV1ReplayResultsSummary)(nil)).Elem()
}

func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput() GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput {
	return o
}

func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput) ToGoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutputWithContext(ctx context.Context) GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput {
	return o
}

func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput) Elem() GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput {
	return o.ApplyT(func(v *GoogleCloudPolicysimulatorV1ReplayResultsSummary) GoogleCloudPolicysimulatorV1ReplayResultsSummary {
		return *v
	}).(GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput)
}

// The number of replayed log entries with a difference between baseline and simulated policies.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput) DifferenceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudPolicysimulatorV1ReplayResultsSummary) *int {
		if v == nil {
			return nil
		}
		return v.DifferenceCount
	}).(pulumi.IntPtrOutput)
}

// The number of log entries that could not be replayed.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput) ErrorCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudPolicysimulatorV1ReplayResultsSummary) *int {
		if v == nil {
			return nil
		}
		return v.ErrorCount
	}).(pulumi.IntPtrOutput)
}

// The total number of log entries replayed.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput) LogCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudPolicysimulatorV1ReplayResultsSummary) *int {
		if v == nil {
			return nil
		}
		return v.LogCount
	}).(pulumi.IntPtrOutput)
}

// The date of the newest log entry replayed.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput) NewestDate() GoogleTypeDatePtrOutput {
	return o.ApplyT(func(v *GoogleCloudPolicysimulatorV1ReplayResultsSummary) *GoogleTypeDate {
		if v == nil {
			return nil
		}
		return v.NewestDate
	}).(GoogleTypeDatePtrOutput)
}

// The date of the oldest log entry replayed.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput) OldestDate() GoogleTypeDatePtrOutput {
	return o.ApplyT(func(v *GoogleCloudPolicysimulatorV1ReplayResultsSummary) *GoogleTypeDate {
		if v == nil {
			return nil
		}
		return v.OldestDate
	}).(GoogleTypeDatePtrOutput)
}

// The number of replayed log entries with no difference between baseline and simulated policies.
func (o GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput) UnchangedCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudPolicysimulatorV1ReplayResultsSummary) *int {
		if v == nil {
			return nil
		}
		return v.UnchangedCount
	}).(pulumi.IntPtrOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
type GoogleTypeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `pulumi:"year"`
}

// GoogleTypeDateInput is an input type that accepts GoogleTypeDateArgs and GoogleTypeDateOutput values.
// You can construct a concrete instance of `GoogleTypeDateInput` via:
//
//          GoogleTypeDateArgs{...}
type GoogleTypeDateInput interface {
	pulumi.Input

	ToGoogleTypeDateOutput() GoogleTypeDateOutput
	ToGoogleTypeDateOutputWithContext(context.Context) GoogleTypeDateOutput
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
type GoogleTypeDateArgs struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day pulumi.IntPtrInput `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month pulumi.IntPtrInput `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year pulumi.IntPtrInput `pulumi:"year"`
}

func (GoogleTypeDateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeDate)(nil)).Elem()
}

func (i GoogleTypeDateArgs) ToGoogleTypeDateOutput() GoogleTypeDateOutput {
	return i.ToGoogleTypeDateOutputWithContext(context.Background())
}

func (i GoogleTypeDateArgs) ToGoogleTypeDateOutputWithContext(ctx context.Context) GoogleTypeDateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeDateOutput)
}

func (i GoogleTypeDateArgs) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return i.ToGoogleTypeDatePtrOutputWithContext(context.Background())
}

func (i GoogleTypeDateArgs) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeDateOutput).ToGoogleTypeDatePtrOutputWithContext(ctx)
}

// GoogleTypeDatePtrInput is an input type that accepts GoogleTypeDateArgs, GoogleTypeDatePtr and GoogleTypeDatePtrOutput values.
// You can construct a concrete instance of `GoogleTypeDatePtrInput` via:
//
//          GoogleTypeDateArgs{...}
//
//  or:
//
//          nil
type GoogleTypeDatePtrInput interface {
	pulumi.Input

	ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput
	ToGoogleTypeDatePtrOutputWithContext(context.Context) GoogleTypeDatePtrOutput
}

type googleTypeDatePtrType GoogleTypeDateArgs

func GoogleTypeDatePtr(v *GoogleTypeDateArgs) GoogleTypeDatePtrInput {
	return (*googleTypeDatePtrType)(v)
}

func (*googleTypeDatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeDate)(nil)).Elem()
}

func (i *googleTypeDatePtrType) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return i.ToGoogleTypeDatePtrOutputWithContext(context.Background())
}

func (i *googleTypeDatePtrType) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeDatePtrOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
type GoogleTypeDateOutput struct{ *pulumi.OutputState }

func (GoogleTypeDateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeDate)(nil)).Elem()
}

func (o GoogleTypeDateOutput) ToGoogleTypeDateOutput() GoogleTypeDateOutput {
	return o
}

func (o GoogleTypeDateOutput) ToGoogleTypeDateOutputWithContext(ctx context.Context) GoogleTypeDateOutput {
	return o
}

func (o GoogleTypeDateOutput) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return o.ToGoogleTypeDatePtrOutputWithContext(context.Background())
}

func (o GoogleTypeDateOutput) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return o.ApplyT(func(v GoogleTypeDate) *GoogleTypeDate {
		return &v
	}).(GoogleTypeDatePtrOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o GoogleTypeDateOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeDate) *int { return v.Day }).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o GoogleTypeDateOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeDate) *int { return v.Month }).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o GoogleTypeDateOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeDate) *int { return v.Year }).(pulumi.IntPtrOutput)
}

type GoogleTypeDatePtrOutput struct{ *pulumi.OutputState }

func (GoogleTypeDatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeDate)(nil)).Elem()
}

func (o GoogleTypeDatePtrOutput) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return o
}

func (o GoogleTypeDatePtrOutput) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return o
}

func (o GoogleTypeDatePtrOutput) Elem() GoogleTypeDateOutput {
	return o.ApplyT(func(v *GoogleTypeDate) GoogleTypeDate { return *v }).(GoogleTypeDateOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o GoogleTypeDatePtrOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeDate) *int {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o GoogleTypeDatePtrOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeDate) *int {
		if v == nil {
			return nil
		}
		return v.Month
	}).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o GoogleTypeDatePtrOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeDate) *int {
		if v == nil {
			return nil
		}
		return v.Year
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GoogleCloudPolicysimulatorV1ReplayConfigOutput{})
	pulumi.RegisterOutputType(GoogleCloudPolicysimulatorV1ReplayConfigPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudPolicysimulatorV1ReplayResultsSummaryOutput{})
	pulumi.RegisterOutputType(GoogleCloudPolicysimulatorV1ReplayResultsSummaryPtrOutput{})
	pulumi.RegisterOutputType(GoogleTypeDateOutput{})
	pulumi.RegisterOutputType(GoogleTypeDatePtrOutput{})
}
