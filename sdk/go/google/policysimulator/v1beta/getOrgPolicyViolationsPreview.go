// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GetOrgPolicyViolationsPreview gets the specified OrgPolicyViolationsPreview. Each OrgPolicyViolationsPreview is available for at least 7 days.
func LookupOrgPolicyViolationsPreview(ctx *pulumi.Context, args *LookupOrgPolicyViolationsPreviewArgs, opts ...pulumi.InvokeOption) (*LookupOrgPolicyViolationsPreviewResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOrgPolicyViolationsPreviewResult
	err := ctx.Invoke("google-native:policysimulator/v1beta:getOrgPolicyViolationsPreview", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupOrgPolicyViolationsPreviewArgs struct {
	Location                     string `pulumi:"location"`
	OrgPolicyViolationsPreviewId string `pulumi:"orgPolicyViolationsPreviewId"`
	OrganizationId               string `pulumi:"organizationId"`
}

type LookupOrgPolicyViolationsPreviewResult struct {
	// Time when this `OrgPolicyViolationsPreview` was created.
	CreateTime string `pulumi:"createTime"`
	// The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`
	CustomConstraints []string `pulumi:"customConstraints"`
	// The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`
	Name string `pulumi:"name"`
	// The proposed changes we are previewing violations for.
	Overlay GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayResponse `pulumi:"overlay"`
	// A summary of the state of all resources scanned for compliance with the changed OrgPolicy.
	ResourceCounts GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCountsResponse `pulumi:"resourceCounts"`
	// The state of the `OrgPolicyViolationsPreview`.
	State string `pulumi:"state"`
	// The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.
	ViolationsCount int `pulumi:"violationsCount"`
}

func LookupOrgPolicyViolationsPreviewOutput(ctx *pulumi.Context, args LookupOrgPolicyViolationsPreviewOutputArgs, opts ...pulumi.InvokeOption) LookupOrgPolicyViolationsPreviewResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOrgPolicyViolationsPreviewResult, error) {
			args := v.(LookupOrgPolicyViolationsPreviewArgs)
			r, err := LookupOrgPolicyViolationsPreview(ctx, &args, opts...)
			var s LookupOrgPolicyViolationsPreviewResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOrgPolicyViolationsPreviewResultOutput)
}

type LookupOrgPolicyViolationsPreviewOutputArgs struct {
	Location                     pulumi.StringInput `pulumi:"location"`
	OrgPolicyViolationsPreviewId pulumi.StringInput `pulumi:"orgPolicyViolationsPreviewId"`
	OrganizationId               pulumi.StringInput `pulumi:"organizationId"`
}

func (LookupOrgPolicyViolationsPreviewOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrgPolicyViolationsPreviewArgs)(nil)).Elem()
}

type LookupOrgPolicyViolationsPreviewResultOutput struct{ *pulumi.OutputState }

func (LookupOrgPolicyViolationsPreviewResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrgPolicyViolationsPreviewResult)(nil)).Elem()
}

func (o LookupOrgPolicyViolationsPreviewResultOutput) ToLookupOrgPolicyViolationsPreviewResultOutput() LookupOrgPolicyViolationsPreviewResultOutput {
	return o
}

func (o LookupOrgPolicyViolationsPreviewResultOutput) ToLookupOrgPolicyViolationsPreviewResultOutputWithContext(ctx context.Context) LookupOrgPolicyViolationsPreviewResultOutput {
	return o
}

// Time when this `OrgPolicyViolationsPreview` was created.
func (o LookupOrgPolicyViolationsPreviewResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgPolicyViolationsPreviewResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`
func (o LookupOrgPolicyViolationsPreviewResultOutput) CustomConstraints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupOrgPolicyViolationsPreviewResult) []string { return v.CustomConstraints }).(pulumi.StringArrayOutput)
}

// The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`
func (o LookupOrgPolicyViolationsPreviewResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgPolicyViolationsPreviewResult) string { return v.Name }).(pulumi.StringOutput)
}

// The proposed changes we are previewing violations for.
func (o LookupOrgPolicyViolationsPreviewResultOutput) Overlay() GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayResponseOutput {
	return o.ApplyT(func(v LookupOrgPolicyViolationsPreviewResult) GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayResponse {
		return v.Overlay
	}).(GoogleCloudPolicysimulatorV1betaOrgPolicyOverlayResponseOutput)
}

// A summary of the state of all resources scanned for compliance with the changed OrgPolicy.
func (o LookupOrgPolicyViolationsPreviewResultOutput) ResourceCounts() GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCountsResponseOutput {
	return o.ApplyT(func(v LookupOrgPolicyViolationsPreviewResult) GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCountsResponse {
		return v.ResourceCounts
	}).(GoogleCloudPolicysimulatorV1betaOrgPolicyViolationsPreviewResourceCountsResponseOutput)
}

// The state of the `OrgPolicyViolationsPreview`.
func (o LookupOrgPolicyViolationsPreviewResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrgPolicyViolationsPreviewResult) string { return v.State }).(pulumi.StringOutput)
}

// The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.
func (o LookupOrgPolicyViolationsPreviewResultOutput) ViolationsCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOrgPolicyViolationsPreviewResult) int { return v.ViolationsCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOrgPolicyViolationsPreviewResultOutput{})
}
