// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and starts a Replay using the given ReplayConfig.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type Replay struct {
	pulumi.CustomResourceState

	// The configuration used for the `Replay`.
	Config   GoogleCloudPolicysimulatorV1beta1ReplayConfigResponseOutput `pulumi:"config"`
	Location pulumi.StringOutput                                         `pulumi:"location"`
	// The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Summary statistics about the replayed log entries.
	ResultsSummary GoogleCloudPolicysimulatorV1beta1ReplayResultsSummaryResponseOutput `pulumi:"resultsSummary"`
	// The current state of the `Replay`.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewReplay registers a new resource with the given unique name, arguments, and options.
func NewReplay(ctx *pulumi.Context,
	name string, args *ReplayArgs, opts ...pulumi.ResourceOption) (*Replay, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource Replay
	err := ctx.RegisterResource("google-native:policysimulator/v1beta1:Replay", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplay gets an existing Replay resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplay(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplayState, opts ...pulumi.ResourceOption) (*Replay, error) {
	var resource Replay
	err := ctx.ReadResource("google-native:policysimulator/v1beta1:Replay", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Replay resources.
type replayState struct {
}

type ReplayState struct {
}

func (ReplayState) ElementType() reflect.Type {
	return reflect.TypeOf((*replayState)(nil)).Elem()
}

type replayArgs struct {
	// The configuration used for the `Replay`.
	Config   GoogleCloudPolicysimulatorV1beta1ReplayConfig `pulumi:"config"`
	Location *string                                       `pulumi:"location"`
	Project  *string                                       `pulumi:"project"`
}

// The set of arguments for constructing a Replay resource.
type ReplayArgs struct {
	// The configuration used for the `Replay`.
	Config   GoogleCloudPolicysimulatorV1beta1ReplayConfigInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
}

func (ReplayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replayArgs)(nil)).Elem()
}

type ReplayInput interface {
	pulumi.Input

	ToReplayOutput() ReplayOutput
	ToReplayOutputWithContext(ctx context.Context) ReplayOutput
}

func (*Replay) ElementType() reflect.Type {
	return reflect.TypeOf((**Replay)(nil)).Elem()
}

func (i *Replay) ToReplayOutput() ReplayOutput {
	return i.ToReplayOutputWithContext(context.Background())
}

func (i *Replay) ToReplayOutputWithContext(ctx context.Context) ReplayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplayOutput)
}

type ReplayOutput struct{ *pulumi.OutputState }

func (ReplayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Replay)(nil)).Elem()
}

func (o ReplayOutput) ToReplayOutput() ReplayOutput {
	return o
}

func (o ReplayOutput) ToReplayOutputWithContext(ctx context.Context) ReplayOutput {
	return o
}

// The configuration used for the `Replay`.
func (o ReplayOutput) Config() GoogleCloudPolicysimulatorV1beta1ReplayConfigResponseOutput {
	return o.ApplyT(func(v *Replay) GoogleCloudPolicysimulatorV1beta1ReplayConfigResponseOutput { return v.Config }).(GoogleCloudPolicysimulatorV1beta1ReplayConfigResponseOutput)
}

func (o ReplayOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Replay) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
func (o ReplayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Replay) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReplayOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Replay) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Summary statistics about the replayed log entries.
func (o ReplayOutput) ResultsSummary() GoogleCloudPolicysimulatorV1beta1ReplayResultsSummaryResponseOutput {
	return o.ApplyT(func(v *Replay) GoogleCloudPolicysimulatorV1beta1ReplayResultsSummaryResponseOutput {
		return v.ResultsSummary
	}).(GoogleCloudPolicysimulatorV1beta1ReplayResultsSummaryResponseOutput)
}

// The current state of the `Replay`.
func (o ReplayOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Replay) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplayInput)(nil)).Elem(), &Replay{})
	pulumi.RegisterOutputType(ReplayOutput{})
}
