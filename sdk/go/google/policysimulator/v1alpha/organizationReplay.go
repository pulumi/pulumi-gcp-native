// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and starts a Replay using the given ReplayConfig.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type OrganizationReplay struct {
	pulumi.CustomResourceState

	// The configuration used for the `Replay`.
	Config   GoogleCloudPolicysimulatorV1alphaReplayConfigResponseOutput `pulumi:"config"`
	Location pulumi.StringOutput                                         `pulumi:"location"`
	// The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Summary statistics about the replayed log entries.
	ResultsSummary GoogleCloudPolicysimulatorV1alphaReplayResultsSummaryResponseOutput `pulumi:"resultsSummary"`
	// The current state of the `Replay`.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewOrganizationReplay registers a new resource with the given unique name, arguments, and options.
func NewOrganizationReplay(ctx *pulumi.Context,
	name string, args *OrganizationReplayArgs, opts ...pulumi.ResourceOption) (*OrganizationReplay, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"organizationId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationReplay
	err := ctx.RegisterResource("google-native:policysimulator/v1alpha:OrganizationReplay", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationReplay gets an existing OrganizationReplay resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationReplay(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationReplayState, opts ...pulumi.ResourceOption) (*OrganizationReplay, error) {
	var resource OrganizationReplay
	err := ctx.ReadResource("google-native:policysimulator/v1alpha:OrganizationReplay", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationReplay resources.
type organizationReplayState struct {
}

type OrganizationReplayState struct {
}

func (OrganizationReplayState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationReplayState)(nil)).Elem()
}

type organizationReplayArgs struct {
	// The configuration used for the `Replay`.
	Config         GoogleCloudPolicysimulatorV1alphaReplayConfig `pulumi:"config"`
	Location       *string                                       `pulumi:"location"`
	OrganizationId string                                        `pulumi:"organizationId"`
}

// The set of arguments for constructing a OrganizationReplay resource.
type OrganizationReplayArgs struct {
	// The configuration used for the `Replay`.
	Config         GoogleCloudPolicysimulatorV1alphaReplayConfigInput
	Location       pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
}

func (OrganizationReplayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationReplayArgs)(nil)).Elem()
}

type OrganizationReplayInput interface {
	pulumi.Input

	ToOrganizationReplayOutput() OrganizationReplayOutput
	ToOrganizationReplayOutputWithContext(ctx context.Context) OrganizationReplayOutput
}

func (*OrganizationReplay) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationReplay)(nil)).Elem()
}

func (i *OrganizationReplay) ToOrganizationReplayOutput() OrganizationReplayOutput {
	return i.ToOrganizationReplayOutputWithContext(context.Background())
}

func (i *OrganizationReplay) ToOrganizationReplayOutputWithContext(ctx context.Context) OrganizationReplayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationReplayOutput)
}

type OrganizationReplayOutput struct{ *pulumi.OutputState }

func (OrganizationReplayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationReplay)(nil)).Elem()
}

func (o OrganizationReplayOutput) ToOrganizationReplayOutput() OrganizationReplayOutput {
	return o
}

func (o OrganizationReplayOutput) ToOrganizationReplayOutputWithContext(ctx context.Context) OrganizationReplayOutput {
	return o
}

// The configuration used for the `Replay`.
func (o OrganizationReplayOutput) Config() GoogleCloudPolicysimulatorV1alphaReplayConfigResponseOutput {
	return o.ApplyT(func(v *OrganizationReplay) GoogleCloudPolicysimulatorV1alphaReplayConfigResponseOutput {
		return v.Config
	}).(GoogleCloudPolicysimulatorV1alphaReplayConfigResponseOutput)
}

func (o OrganizationReplayOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationReplay) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`
func (o OrganizationReplayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationReplay) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OrganizationReplayOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationReplay) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Summary statistics about the replayed log entries.
func (o OrganizationReplayOutput) ResultsSummary() GoogleCloudPolicysimulatorV1alphaReplayResultsSummaryResponseOutput {
	return o.ApplyT(func(v *OrganizationReplay) GoogleCloudPolicysimulatorV1alphaReplayResultsSummaryResponseOutput {
		return v.ResultsSummary
	}).(GoogleCloudPolicysimulatorV1alphaReplayResultsSummaryResponseOutput)
}

// The current state of the `Replay`.
func (o OrganizationReplayOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationReplay) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationReplayInput)(nil)).Elem(), &OrganizationReplay{})
	pulumi.RegisterOutputType(OrganizationReplayOutput{})
}
