// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a composite index.
func LookupIndex(ctx *pulumi.Context, args *LookupIndexArgs, opts ...pulumi.InvokeOption) (*LookupIndexResult, error) {
	var rv LookupIndexResult
	err := ctx.Invoke("google-native:firestore/v1beta2:getIndex", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIndexArgs struct {
	CollectionGroupId string  `pulumi:"collectionGroupId"`
	DatabaseId        string  `pulumi:"databaseId"`
	IndexId           string  `pulumi:"indexId"`
	Project           *string `pulumi:"project"`
}

type LookupIndexResult struct {
	// The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.
	Fields []GoogleFirestoreAdminV1beta2IndexFieldResponse `pulumi:"fields"`
	// A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.
	Name string `pulumi:"name"`
	// Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.
	QueryScope string `pulumi:"queryScope"`
	// The serving state of the index.
	State string `pulumi:"state"`
}

func LookupIndexOutput(ctx *pulumi.Context, args LookupIndexOutputArgs, opts ...pulumi.InvokeOption) LookupIndexResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIndexResult, error) {
			args := v.(LookupIndexArgs)
			r, err := LookupIndex(ctx, &args, opts...)
			return *r, err
		}).(LookupIndexResultOutput)
}

type LookupIndexOutputArgs struct {
	CollectionGroupId pulumi.StringInput    `pulumi:"collectionGroupId"`
	DatabaseId        pulumi.StringInput    `pulumi:"databaseId"`
	IndexId           pulumi.StringInput    `pulumi:"indexId"`
	Project           pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupIndexOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndexArgs)(nil)).Elem()
}

type LookupIndexResultOutput struct{ *pulumi.OutputState }

func (LookupIndexResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIndexResult)(nil)).Elem()
}

func (o LookupIndexResultOutput) ToLookupIndexResultOutput() LookupIndexResultOutput {
	return o
}

func (o LookupIndexResultOutput) ToLookupIndexResultOutputWithContext(ctx context.Context) LookupIndexResultOutput {
	return o
}

// The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.
func (o LookupIndexResultOutput) Fields() GoogleFirestoreAdminV1beta2IndexFieldResponseArrayOutput {
	return o.ApplyT(func(v LookupIndexResult) []GoogleFirestoreAdminV1beta2IndexFieldResponse { return v.Fields }).(GoogleFirestoreAdminV1beta2IndexFieldResponseArrayOutput)
}

// A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.
func (o LookupIndexResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.Name }).(pulumi.StringOutput)
}

// Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.
func (o LookupIndexResultOutput) QueryScope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.QueryScope }).(pulumi.StringOutput)
}

// The serving state of the index.
func (o LookupIndexResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIndexResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIndexResultOutput{})
}
