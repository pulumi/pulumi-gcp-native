// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The App Engine integration mode to use for this database.
type DatabaseAppEngineIntegrationMode string

const (
	// Not used.
	DatabaseAppEngineIntegrationModeAppEngineIntegrationModeUnspecified = DatabaseAppEngineIntegrationMode("APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED")
	// If an App Engine application exists in the same region as this database, App Engine configuration will impact this database. This includes disabling of the application & database, as well as disabling writes to the database.
	DatabaseAppEngineIntegrationModeEnabled = DatabaseAppEngineIntegrationMode("ENABLED")
	// Appengine has no affect on the ability of this database to serve requests.
	DatabaseAppEngineIntegrationModeDisabled = DatabaseAppEngineIntegrationMode("DISABLED")
)

func (DatabaseAppEngineIntegrationMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAppEngineIntegrationMode)(nil)).Elem()
}

func (e DatabaseAppEngineIntegrationMode) ToDatabaseAppEngineIntegrationModeOutput() DatabaseAppEngineIntegrationModeOutput {
	return pulumi.ToOutput(e).(DatabaseAppEngineIntegrationModeOutput)
}

func (e DatabaseAppEngineIntegrationMode) ToDatabaseAppEngineIntegrationModeOutputWithContext(ctx context.Context) DatabaseAppEngineIntegrationModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseAppEngineIntegrationModeOutput)
}

func (e DatabaseAppEngineIntegrationMode) ToDatabaseAppEngineIntegrationModePtrOutput() DatabaseAppEngineIntegrationModePtrOutput {
	return e.ToDatabaseAppEngineIntegrationModePtrOutputWithContext(context.Background())
}

func (e DatabaseAppEngineIntegrationMode) ToDatabaseAppEngineIntegrationModePtrOutputWithContext(ctx context.Context) DatabaseAppEngineIntegrationModePtrOutput {
	return DatabaseAppEngineIntegrationMode(e).ToDatabaseAppEngineIntegrationModeOutputWithContext(ctx).ToDatabaseAppEngineIntegrationModePtrOutputWithContext(ctx)
}

func (e DatabaseAppEngineIntegrationMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseAppEngineIntegrationMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseAppEngineIntegrationMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseAppEngineIntegrationMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseAppEngineIntegrationModeOutput struct{ *pulumi.OutputState }

func (DatabaseAppEngineIntegrationModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseAppEngineIntegrationMode)(nil)).Elem()
}

func (o DatabaseAppEngineIntegrationModeOutput) ToDatabaseAppEngineIntegrationModeOutput() DatabaseAppEngineIntegrationModeOutput {
	return o
}

func (o DatabaseAppEngineIntegrationModeOutput) ToDatabaseAppEngineIntegrationModeOutputWithContext(ctx context.Context) DatabaseAppEngineIntegrationModeOutput {
	return o
}

func (o DatabaseAppEngineIntegrationModeOutput) ToDatabaseAppEngineIntegrationModePtrOutput() DatabaseAppEngineIntegrationModePtrOutput {
	return o.ToDatabaseAppEngineIntegrationModePtrOutputWithContext(context.Background())
}

func (o DatabaseAppEngineIntegrationModeOutput) ToDatabaseAppEngineIntegrationModePtrOutputWithContext(ctx context.Context) DatabaseAppEngineIntegrationModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseAppEngineIntegrationMode) *DatabaseAppEngineIntegrationMode {
		return &v
	}).(DatabaseAppEngineIntegrationModePtrOutput)
}

func (o DatabaseAppEngineIntegrationModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseAppEngineIntegrationModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseAppEngineIntegrationMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseAppEngineIntegrationModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseAppEngineIntegrationModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseAppEngineIntegrationMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseAppEngineIntegrationModePtrOutput struct{ *pulumi.OutputState }

func (DatabaseAppEngineIntegrationModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseAppEngineIntegrationMode)(nil)).Elem()
}

func (o DatabaseAppEngineIntegrationModePtrOutput) ToDatabaseAppEngineIntegrationModePtrOutput() DatabaseAppEngineIntegrationModePtrOutput {
	return o
}

func (o DatabaseAppEngineIntegrationModePtrOutput) ToDatabaseAppEngineIntegrationModePtrOutputWithContext(ctx context.Context) DatabaseAppEngineIntegrationModePtrOutput {
	return o
}

func (o DatabaseAppEngineIntegrationModePtrOutput) Elem() DatabaseAppEngineIntegrationModeOutput {
	return o.ApplyT(func(v *DatabaseAppEngineIntegrationMode) DatabaseAppEngineIntegrationMode {
		if v != nil {
			return *v
		}
		var ret DatabaseAppEngineIntegrationMode
		return ret
	}).(DatabaseAppEngineIntegrationModeOutput)
}

func (o DatabaseAppEngineIntegrationModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseAppEngineIntegrationModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseAppEngineIntegrationMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseAppEngineIntegrationModeInput is an input type that accepts DatabaseAppEngineIntegrationModeArgs and DatabaseAppEngineIntegrationModeOutput values.
// You can construct a concrete instance of `DatabaseAppEngineIntegrationModeInput` via:
//
//	DatabaseAppEngineIntegrationModeArgs{...}
type DatabaseAppEngineIntegrationModeInput interface {
	pulumi.Input

	ToDatabaseAppEngineIntegrationModeOutput() DatabaseAppEngineIntegrationModeOutput
	ToDatabaseAppEngineIntegrationModeOutputWithContext(context.Context) DatabaseAppEngineIntegrationModeOutput
}

var databaseAppEngineIntegrationModePtrType = reflect.TypeOf((**DatabaseAppEngineIntegrationMode)(nil)).Elem()

type DatabaseAppEngineIntegrationModePtrInput interface {
	pulumi.Input

	ToDatabaseAppEngineIntegrationModePtrOutput() DatabaseAppEngineIntegrationModePtrOutput
	ToDatabaseAppEngineIntegrationModePtrOutputWithContext(context.Context) DatabaseAppEngineIntegrationModePtrOutput
}

type databaseAppEngineIntegrationModePtr string

func DatabaseAppEngineIntegrationModePtr(v string) DatabaseAppEngineIntegrationModePtrInput {
	return (*databaseAppEngineIntegrationModePtr)(&v)
}

func (*databaseAppEngineIntegrationModePtr) ElementType() reflect.Type {
	return databaseAppEngineIntegrationModePtrType
}

func (in *databaseAppEngineIntegrationModePtr) ToDatabaseAppEngineIntegrationModePtrOutput() DatabaseAppEngineIntegrationModePtrOutput {
	return pulumi.ToOutput(in).(DatabaseAppEngineIntegrationModePtrOutput)
}

func (in *databaseAppEngineIntegrationModePtr) ToDatabaseAppEngineIntegrationModePtrOutputWithContext(ctx context.Context) DatabaseAppEngineIntegrationModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseAppEngineIntegrationModePtrOutput)
}

// The concurrency control mode to use for this database.
type DatabaseConcurrencyMode string

const (
	// Not used.
	DatabaseConcurrencyModeConcurrencyModeUnspecified = DatabaseConcurrencyMode("CONCURRENCY_MODE_UNSPECIFIED")
	// Use optimistic concurrency control by default. This mode is available for Cloud Firestore databases.
	DatabaseConcurrencyModeOptimistic = DatabaseConcurrencyMode("OPTIMISTIC")
	// Use pessimistic concurrency control by default. This mode is available for Cloud Firestore databases. This is the default setting for Cloud Firestore.
	DatabaseConcurrencyModePessimistic = DatabaseConcurrencyMode("PESSIMISTIC")
	// Use optimistic concurrency control with entity groups by default. This is the only available mode for Cloud Datastore. This mode is also available for Cloud Firestore with Datastore Mode but is not recommended.
	DatabaseConcurrencyModeOptimisticWithEntityGroups = DatabaseConcurrencyMode("OPTIMISTIC_WITH_ENTITY_GROUPS")
)

func (DatabaseConcurrencyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConcurrencyMode)(nil)).Elem()
}

func (e DatabaseConcurrencyMode) ToDatabaseConcurrencyModeOutput() DatabaseConcurrencyModeOutput {
	return pulumi.ToOutput(e).(DatabaseConcurrencyModeOutput)
}

func (e DatabaseConcurrencyMode) ToDatabaseConcurrencyModeOutputWithContext(ctx context.Context) DatabaseConcurrencyModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseConcurrencyModeOutput)
}

func (e DatabaseConcurrencyMode) ToDatabaseConcurrencyModePtrOutput() DatabaseConcurrencyModePtrOutput {
	return e.ToDatabaseConcurrencyModePtrOutputWithContext(context.Background())
}

func (e DatabaseConcurrencyMode) ToDatabaseConcurrencyModePtrOutputWithContext(ctx context.Context) DatabaseConcurrencyModePtrOutput {
	return DatabaseConcurrencyMode(e).ToDatabaseConcurrencyModeOutputWithContext(ctx).ToDatabaseConcurrencyModePtrOutputWithContext(ctx)
}

func (e DatabaseConcurrencyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseConcurrencyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseConcurrencyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseConcurrencyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseConcurrencyModeOutput struct{ *pulumi.OutputState }

func (DatabaseConcurrencyModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConcurrencyMode)(nil)).Elem()
}

func (o DatabaseConcurrencyModeOutput) ToDatabaseConcurrencyModeOutput() DatabaseConcurrencyModeOutput {
	return o
}

func (o DatabaseConcurrencyModeOutput) ToDatabaseConcurrencyModeOutputWithContext(ctx context.Context) DatabaseConcurrencyModeOutput {
	return o
}

func (o DatabaseConcurrencyModeOutput) ToDatabaseConcurrencyModePtrOutput() DatabaseConcurrencyModePtrOutput {
	return o.ToDatabaseConcurrencyModePtrOutputWithContext(context.Background())
}

func (o DatabaseConcurrencyModeOutput) ToDatabaseConcurrencyModePtrOutputWithContext(ctx context.Context) DatabaseConcurrencyModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseConcurrencyMode) *DatabaseConcurrencyMode {
		return &v
	}).(DatabaseConcurrencyModePtrOutput)
}

func (o DatabaseConcurrencyModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseConcurrencyModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseConcurrencyMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseConcurrencyModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseConcurrencyModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseConcurrencyMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseConcurrencyModePtrOutput struct{ *pulumi.OutputState }

func (DatabaseConcurrencyModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConcurrencyMode)(nil)).Elem()
}

func (o DatabaseConcurrencyModePtrOutput) ToDatabaseConcurrencyModePtrOutput() DatabaseConcurrencyModePtrOutput {
	return o
}

func (o DatabaseConcurrencyModePtrOutput) ToDatabaseConcurrencyModePtrOutputWithContext(ctx context.Context) DatabaseConcurrencyModePtrOutput {
	return o
}

func (o DatabaseConcurrencyModePtrOutput) Elem() DatabaseConcurrencyModeOutput {
	return o.ApplyT(func(v *DatabaseConcurrencyMode) DatabaseConcurrencyMode {
		if v != nil {
			return *v
		}
		var ret DatabaseConcurrencyMode
		return ret
	}).(DatabaseConcurrencyModeOutput)
}

func (o DatabaseConcurrencyModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseConcurrencyModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseConcurrencyMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseConcurrencyModeInput is an input type that accepts DatabaseConcurrencyModeArgs and DatabaseConcurrencyModeOutput values.
// You can construct a concrete instance of `DatabaseConcurrencyModeInput` via:
//
//	DatabaseConcurrencyModeArgs{...}
type DatabaseConcurrencyModeInput interface {
	pulumi.Input

	ToDatabaseConcurrencyModeOutput() DatabaseConcurrencyModeOutput
	ToDatabaseConcurrencyModeOutputWithContext(context.Context) DatabaseConcurrencyModeOutput
}

var databaseConcurrencyModePtrType = reflect.TypeOf((**DatabaseConcurrencyMode)(nil)).Elem()

type DatabaseConcurrencyModePtrInput interface {
	pulumi.Input

	ToDatabaseConcurrencyModePtrOutput() DatabaseConcurrencyModePtrOutput
	ToDatabaseConcurrencyModePtrOutputWithContext(context.Context) DatabaseConcurrencyModePtrOutput
}

type databaseConcurrencyModePtr string

func DatabaseConcurrencyModePtr(v string) DatabaseConcurrencyModePtrInput {
	return (*databaseConcurrencyModePtr)(&v)
}

func (*databaseConcurrencyModePtr) ElementType() reflect.Type {
	return databaseConcurrencyModePtrType
}

func (in *databaseConcurrencyModePtr) ToDatabaseConcurrencyModePtrOutput() DatabaseConcurrencyModePtrOutput {
	return pulumi.ToOutput(in).(DatabaseConcurrencyModePtrOutput)
}

func (in *databaseConcurrencyModePtr) ToDatabaseConcurrencyModePtrOutputWithContext(ctx context.Context) DatabaseConcurrencyModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseConcurrencyModePtrOutput)
}

// The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
type DatabaseType string

const (
	// The default value. This value is used if the database type is omitted.
	DatabaseTypeDatabaseTypeUnspecified = DatabaseType("DATABASE_TYPE_UNSPECIFIED")
	// Firestore Native Mode
	DatabaseTypeFirestoreNative = DatabaseType("FIRESTORE_NATIVE")
	// Firestore in Datastore Mode.
	DatabaseTypeDatastoreMode = DatabaseType("DATASTORE_MODE")
)

func (DatabaseType) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseType)(nil)).Elem()
}

func (e DatabaseType) ToDatabaseTypeOutput() DatabaseTypeOutput {
	return pulumi.ToOutput(e).(DatabaseTypeOutput)
}

func (e DatabaseType) ToDatabaseTypeOutputWithContext(ctx context.Context) DatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseTypeOutput)
}

func (e DatabaseType) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return e.ToDatabaseTypePtrOutputWithContext(context.Background())
}

func (e DatabaseType) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return DatabaseType(e).ToDatabaseTypeOutputWithContext(ctx).ToDatabaseTypePtrOutputWithContext(ctx)
}

func (e DatabaseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseTypeOutput struct{ *pulumi.OutputState }

func (DatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseType)(nil)).Elem()
}

func (o DatabaseTypeOutput) ToDatabaseTypeOutput() DatabaseTypeOutput {
	return o
}

func (o DatabaseTypeOutput) ToDatabaseTypeOutputWithContext(ctx context.Context) DatabaseTypeOutput {
	return o
}

func (o DatabaseTypeOutput) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return o.ToDatabaseTypePtrOutputWithContext(context.Background())
}

func (o DatabaseTypeOutput) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseType) *DatabaseType {
		return &v
	}).(DatabaseTypePtrOutput)
}

func (o DatabaseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseTypePtrOutput struct{ *pulumi.OutputState }

func (DatabaseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseType)(nil)).Elem()
}

func (o DatabaseTypePtrOutput) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return o
}

func (o DatabaseTypePtrOutput) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return o
}

func (o DatabaseTypePtrOutput) Elem() DatabaseTypeOutput {
	return o.ApplyT(func(v *DatabaseType) DatabaseType {
		if v != nil {
			return *v
		}
		var ret DatabaseType
		return ret
	}).(DatabaseTypeOutput)
}

func (o DatabaseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseTypeInput is an input type that accepts DatabaseTypeArgs and DatabaseTypeOutput values.
// You can construct a concrete instance of `DatabaseTypeInput` via:
//
//	DatabaseTypeArgs{...}
type DatabaseTypeInput interface {
	pulumi.Input

	ToDatabaseTypeOutput() DatabaseTypeOutput
	ToDatabaseTypeOutputWithContext(context.Context) DatabaseTypeOutput
}

var databaseTypePtrType = reflect.TypeOf((**DatabaseType)(nil)).Elem()

type DatabaseTypePtrInput interface {
	pulumi.Input

	ToDatabaseTypePtrOutput() DatabaseTypePtrOutput
	ToDatabaseTypePtrOutputWithContext(context.Context) DatabaseTypePtrOutput
}

type databaseTypePtr string

func DatabaseTypePtr(v string) DatabaseTypePtrInput {
	return (*databaseTypePtr)(&v)
}

func (*databaseTypePtr) ElementType() reflect.Type {
	return databaseTypePtrType
}

func (in *databaseTypePtr) ToDatabaseTypePtrOutput() DatabaseTypePtrOutput {
	return pulumi.ToOutput(in).(DatabaseTypePtrOutput)
}

func (in *databaseTypePtr) ToDatabaseTypePtrOutputWithContext(ctx context.Context) DatabaseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseTypePtrOutput)
}

// Indicates that this field supports operations on `array_value`s.
type GoogleFirestoreAdminV1IndexFieldArrayConfig string

const (
	// The index does not support additional array queries.
	GoogleFirestoreAdminV1IndexFieldArrayConfigArrayConfigUnspecified = GoogleFirestoreAdminV1IndexFieldArrayConfig("ARRAY_CONFIG_UNSPECIFIED")
	// The index supports array containment queries.
	GoogleFirestoreAdminV1IndexFieldArrayConfigContains = GoogleFirestoreAdminV1IndexFieldArrayConfig("CONTAINS")
)

func (GoogleFirestoreAdminV1IndexFieldArrayConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleFirestoreAdminV1IndexFieldArrayConfig)(nil)).Elem()
}

func (e GoogleFirestoreAdminV1IndexFieldArrayConfig) ToGoogleFirestoreAdminV1IndexFieldArrayConfigOutput() GoogleFirestoreAdminV1IndexFieldArrayConfigOutput {
	return pulumi.ToOutput(e).(GoogleFirestoreAdminV1IndexFieldArrayConfigOutput)
}

func (e GoogleFirestoreAdminV1IndexFieldArrayConfig) ToGoogleFirestoreAdminV1IndexFieldArrayConfigOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldArrayConfigOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GoogleFirestoreAdminV1IndexFieldArrayConfigOutput)
}

func (e GoogleFirestoreAdminV1IndexFieldArrayConfig) ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput() GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput {
	return e.ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutputWithContext(context.Background())
}

func (e GoogleFirestoreAdminV1IndexFieldArrayConfig) ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput {
	return GoogleFirestoreAdminV1IndexFieldArrayConfig(e).ToGoogleFirestoreAdminV1IndexFieldArrayConfigOutputWithContext(ctx).ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutputWithContext(ctx)
}

func (e GoogleFirestoreAdminV1IndexFieldArrayConfig) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GoogleFirestoreAdminV1IndexFieldArrayConfig) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GoogleFirestoreAdminV1IndexFieldArrayConfig) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GoogleFirestoreAdminV1IndexFieldArrayConfig) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GoogleFirestoreAdminV1IndexFieldArrayConfigOutput struct{ *pulumi.OutputState }

func (GoogleFirestoreAdminV1IndexFieldArrayConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleFirestoreAdminV1IndexFieldArrayConfig)(nil)).Elem()
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigOutput) ToGoogleFirestoreAdminV1IndexFieldArrayConfigOutput() GoogleFirestoreAdminV1IndexFieldArrayConfigOutput {
	return o
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigOutput) ToGoogleFirestoreAdminV1IndexFieldArrayConfigOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldArrayConfigOutput {
	return o
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigOutput) ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput() GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput {
	return o.ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutputWithContext(context.Background())
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigOutput) ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleFirestoreAdminV1IndexFieldArrayConfig) *GoogleFirestoreAdminV1IndexFieldArrayConfig {
		return &v
	}).(GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput)
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GoogleFirestoreAdminV1IndexFieldArrayConfig) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GoogleFirestoreAdminV1IndexFieldArrayConfig) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput struct{ *pulumi.OutputState }

func (GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleFirestoreAdminV1IndexFieldArrayConfig)(nil)).Elem()
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput) ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput() GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput {
	return o
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput) ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput {
	return o
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput) Elem() GoogleFirestoreAdminV1IndexFieldArrayConfigOutput {
	return o.ApplyT(func(v *GoogleFirestoreAdminV1IndexFieldArrayConfig) GoogleFirestoreAdminV1IndexFieldArrayConfig {
		if v != nil {
			return *v
		}
		var ret GoogleFirestoreAdminV1IndexFieldArrayConfig
		return ret
	}).(GoogleFirestoreAdminV1IndexFieldArrayConfigOutput)
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GoogleFirestoreAdminV1IndexFieldArrayConfig) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GoogleFirestoreAdminV1IndexFieldArrayConfigInput is an input type that accepts GoogleFirestoreAdminV1IndexFieldArrayConfigArgs and GoogleFirestoreAdminV1IndexFieldArrayConfigOutput values.
// You can construct a concrete instance of `GoogleFirestoreAdminV1IndexFieldArrayConfigInput` via:
//
//	GoogleFirestoreAdminV1IndexFieldArrayConfigArgs{...}
type GoogleFirestoreAdminV1IndexFieldArrayConfigInput interface {
	pulumi.Input

	ToGoogleFirestoreAdminV1IndexFieldArrayConfigOutput() GoogleFirestoreAdminV1IndexFieldArrayConfigOutput
	ToGoogleFirestoreAdminV1IndexFieldArrayConfigOutputWithContext(context.Context) GoogleFirestoreAdminV1IndexFieldArrayConfigOutput
}

var googleFirestoreAdminV1IndexFieldArrayConfigPtrType = reflect.TypeOf((**GoogleFirestoreAdminV1IndexFieldArrayConfig)(nil)).Elem()

type GoogleFirestoreAdminV1IndexFieldArrayConfigPtrInput interface {
	pulumi.Input

	ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput() GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput
	ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutputWithContext(context.Context) GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput
}

type googleFirestoreAdminV1IndexFieldArrayConfigPtr string

func GoogleFirestoreAdminV1IndexFieldArrayConfigPtr(v string) GoogleFirestoreAdminV1IndexFieldArrayConfigPtrInput {
	return (*googleFirestoreAdminV1IndexFieldArrayConfigPtr)(&v)
}

func (*googleFirestoreAdminV1IndexFieldArrayConfigPtr) ElementType() reflect.Type {
	return googleFirestoreAdminV1IndexFieldArrayConfigPtrType
}

func (in *googleFirestoreAdminV1IndexFieldArrayConfigPtr) ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput() GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput {
	return pulumi.ToOutput(in).(GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput)
}

func (in *googleFirestoreAdminV1IndexFieldArrayConfigPtr) ToGoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput)
}

// Indicates that this field supports ordering by the specified order or comparing using =, !=, <, <=, >, >=.
type GoogleFirestoreAdminV1IndexFieldOrder string

const (
	// The ordering is unspecified. Not a valid option.
	GoogleFirestoreAdminV1IndexFieldOrderOrderUnspecified = GoogleFirestoreAdminV1IndexFieldOrder("ORDER_UNSPECIFIED")
	// The field is ordered by ascending field value.
	GoogleFirestoreAdminV1IndexFieldOrderAscending = GoogleFirestoreAdminV1IndexFieldOrder("ASCENDING")
	// The field is ordered by descending field value.
	GoogleFirestoreAdminV1IndexFieldOrderDescending = GoogleFirestoreAdminV1IndexFieldOrder("DESCENDING")
)

func (GoogleFirestoreAdminV1IndexFieldOrder) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleFirestoreAdminV1IndexFieldOrder)(nil)).Elem()
}

func (e GoogleFirestoreAdminV1IndexFieldOrder) ToGoogleFirestoreAdminV1IndexFieldOrderOutput() GoogleFirestoreAdminV1IndexFieldOrderOutput {
	return pulumi.ToOutput(e).(GoogleFirestoreAdminV1IndexFieldOrderOutput)
}

func (e GoogleFirestoreAdminV1IndexFieldOrder) ToGoogleFirestoreAdminV1IndexFieldOrderOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldOrderOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GoogleFirestoreAdminV1IndexFieldOrderOutput)
}

func (e GoogleFirestoreAdminV1IndexFieldOrder) ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutput() GoogleFirestoreAdminV1IndexFieldOrderPtrOutput {
	return e.ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutputWithContext(context.Background())
}

func (e GoogleFirestoreAdminV1IndexFieldOrder) ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldOrderPtrOutput {
	return GoogleFirestoreAdminV1IndexFieldOrder(e).ToGoogleFirestoreAdminV1IndexFieldOrderOutputWithContext(ctx).ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutputWithContext(ctx)
}

func (e GoogleFirestoreAdminV1IndexFieldOrder) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GoogleFirestoreAdminV1IndexFieldOrder) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GoogleFirestoreAdminV1IndexFieldOrder) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GoogleFirestoreAdminV1IndexFieldOrder) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GoogleFirestoreAdminV1IndexFieldOrderOutput struct{ *pulumi.OutputState }

func (GoogleFirestoreAdminV1IndexFieldOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleFirestoreAdminV1IndexFieldOrder)(nil)).Elem()
}

func (o GoogleFirestoreAdminV1IndexFieldOrderOutput) ToGoogleFirestoreAdminV1IndexFieldOrderOutput() GoogleFirestoreAdminV1IndexFieldOrderOutput {
	return o
}

func (o GoogleFirestoreAdminV1IndexFieldOrderOutput) ToGoogleFirestoreAdminV1IndexFieldOrderOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldOrderOutput {
	return o
}

func (o GoogleFirestoreAdminV1IndexFieldOrderOutput) ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutput() GoogleFirestoreAdminV1IndexFieldOrderPtrOutput {
	return o.ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutputWithContext(context.Background())
}

func (o GoogleFirestoreAdminV1IndexFieldOrderOutput) ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldOrderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleFirestoreAdminV1IndexFieldOrder) *GoogleFirestoreAdminV1IndexFieldOrder {
		return &v
	}).(GoogleFirestoreAdminV1IndexFieldOrderPtrOutput)
}

func (o GoogleFirestoreAdminV1IndexFieldOrderOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GoogleFirestoreAdminV1IndexFieldOrderOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GoogleFirestoreAdminV1IndexFieldOrder) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GoogleFirestoreAdminV1IndexFieldOrderOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GoogleFirestoreAdminV1IndexFieldOrderOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GoogleFirestoreAdminV1IndexFieldOrder) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GoogleFirestoreAdminV1IndexFieldOrderPtrOutput struct{ *pulumi.OutputState }

func (GoogleFirestoreAdminV1IndexFieldOrderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleFirestoreAdminV1IndexFieldOrder)(nil)).Elem()
}

func (o GoogleFirestoreAdminV1IndexFieldOrderPtrOutput) ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutput() GoogleFirestoreAdminV1IndexFieldOrderPtrOutput {
	return o
}

func (o GoogleFirestoreAdminV1IndexFieldOrderPtrOutput) ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldOrderPtrOutput {
	return o
}

func (o GoogleFirestoreAdminV1IndexFieldOrderPtrOutput) Elem() GoogleFirestoreAdminV1IndexFieldOrderOutput {
	return o.ApplyT(func(v *GoogleFirestoreAdminV1IndexFieldOrder) GoogleFirestoreAdminV1IndexFieldOrder {
		if v != nil {
			return *v
		}
		var ret GoogleFirestoreAdminV1IndexFieldOrder
		return ret
	}).(GoogleFirestoreAdminV1IndexFieldOrderOutput)
}

func (o GoogleFirestoreAdminV1IndexFieldOrderPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GoogleFirestoreAdminV1IndexFieldOrderPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GoogleFirestoreAdminV1IndexFieldOrder) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GoogleFirestoreAdminV1IndexFieldOrderInput is an input type that accepts GoogleFirestoreAdminV1IndexFieldOrderArgs and GoogleFirestoreAdminV1IndexFieldOrderOutput values.
// You can construct a concrete instance of `GoogleFirestoreAdminV1IndexFieldOrderInput` via:
//
//	GoogleFirestoreAdminV1IndexFieldOrderArgs{...}
type GoogleFirestoreAdminV1IndexFieldOrderInput interface {
	pulumi.Input

	ToGoogleFirestoreAdminV1IndexFieldOrderOutput() GoogleFirestoreAdminV1IndexFieldOrderOutput
	ToGoogleFirestoreAdminV1IndexFieldOrderOutputWithContext(context.Context) GoogleFirestoreAdminV1IndexFieldOrderOutput
}

var googleFirestoreAdminV1IndexFieldOrderPtrType = reflect.TypeOf((**GoogleFirestoreAdminV1IndexFieldOrder)(nil)).Elem()

type GoogleFirestoreAdminV1IndexFieldOrderPtrInput interface {
	pulumi.Input

	ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutput() GoogleFirestoreAdminV1IndexFieldOrderPtrOutput
	ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutputWithContext(context.Context) GoogleFirestoreAdminV1IndexFieldOrderPtrOutput
}

type googleFirestoreAdminV1IndexFieldOrderPtr string

func GoogleFirestoreAdminV1IndexFieldOrderPtr(v string) GoogleFirestoreAdminV1IndexFieldOrderPtrInput {
	return (*googleFirestoreAdminV1IndexFieldOrderPtr)(&v)
}

func (*googleFirestoreAdminV1IndexFieldOrderPtr) ElementType() reflect.Type {
	return googleFirestoreAdminV1IndexFieldOrderPtrType
}

func (in *googleFirestoreAdminV1IndexFieldOrderPtr) ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutput() GoogleFirestoreAdminV1IndexFieldOrderPtrOutput {
	return pulumi.ToOutput(in).(GoogleFirestoreAdminV1IndexFieldOrderPtrOutput)
}

func (in *googleFirestoreAdminV1IndexFieldOrderPtr) ToGoogleFirestoreAdminV1IndexFieldOrderPtrOutputWithContext(ctx context.Context) GoogleFirestoreAdminV1IndexFieldOrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GoogleFirestoreAdminV1IndexFieldOrderPtrOutput)
}

// The API scope supported by this index.
type IndexApiScope string

const (
	// The index can be used by both Firestore Native and Firestore in Datastore Mode query API. This is the default.
	IndexApiScopeAnyApi = IndexApiScope("ANY_API")
	// The index can only be used by the Firestore in Datastore Mode query API.
	IndexApiScopeDatastoreModeApi = IndexApiScope("DATASTORE_MODE_API")
)

func (IndexApiScope) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexApiScope)(nil)).Elem()
}

func (e IndexApiScope) ToIndexApiScopeOutput() IndexApiScopeOutput {
	return pulumi.ToOutput(e).(IndexApiScopeOutput)
}

func (e IndexApiScope) ToIndexApiScopeOutputWithContext(ctx context.Context) IndexApiScopeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IndexApiScopeOutput)
}

func (e IndexApiScope) ToIndexApiScopePtrOutput() IndexApiScopePtrOutput {
	return e.ToIndexApiScopePtrOutputWithContext(context.Background())
}

func (e IndexApiScope) ToIndexApiScopePtrOutputWithContext(ctx context.Context) IndexApiScopePtrOutput {
	return IndexApiScope(e).ToIndexApiScopeOutputWithContext(ctx).ToIndexApiScopePtrOutputWithContext(ctx)
}

func (e IndexApiScope) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndexApiScope) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndexApiScope) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IndexApiScope) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IndexApiScopeOutput struct{ *pulumi.OutputState }

func (IndexApiScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexApiScope)(nil)).Elem()
}

func (o IndexApiScopeOutput) ToIndexApiScopeOutput() IndexApiScopeOutput {
	return o
}

func (o IndexApiScopeOutput) ToIndexApiScopeOutputWithContext(ctx context.Context) IndexApiScopeOutput {
	return o
}

func (o IndexApiScopeOutput) ToIndexApiScopePtrOutput() IndexApiScopePtrOutput {
	return o.ToIndexApiScopePtrOutputWithContext(context.Background())
}

func (o IndexApiScopeOutput) ToIndexApiScopePtrOutputWithContext(ctx context.Context) IndexApiScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexApiScope) *IndexApiScope {
		return &v
	}).(IndexApiScopePtrOutput)
}

func (o IndexApiScopeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IndexApiScopeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexApiScope) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IndexApiScopeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexApiScopeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexApiScope) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IndexApiScopePtrOutput struct{ *pulumi.OutputState }

func (IndexApiScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexApiScope)(nil)).Elem()
}

func (o IndexApiScopePtrOutput) ToIndexApiScopePtrOutput() IndexApiScopePtrOutput {
	return o
}

func (o IndexApiScopePtrOutput) ToIndexApiScopePtrOutputWithContext(ctx context.Context) IndexApiScopePtrOutput {
	return o
}

func (o IndexApiScopePtrOutput) Elem() IndexApiScopeOutput {
	return o.ApplyT(func(v *IndexApiScope) IndexApiScope {
		if v != nil {
			return *v
		}
		var ret IndexApiScope
		return ret
	}).(IndexApiScopeOutput)
}

func (o IndexApiScopePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexApiScopePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IndexApiScope) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IndexApiScopeInput is an input type that accepts IndexApiScopeArgs and IndexApiScopeOutput values.
// You can construct a concrete instance of `IndexApiScopeInput` via:
//
//	IndexApiScopeArgs{...}
type IndexApiScopeInput interface {
	pulumi.Input

	ToIndexApiScopeOutput() IndexApiScopeOutput
	ToIndexApiScopeOutputWithContext(context.Context) IndexApiScopeOutput
}

var indexApiScopePtrType = reflect.TypeOf((**IndexApiScope)(nil)).Elem()

type IndexApiScopePtrInput interface {
	pulumi.Input

	ToIndexApiScopePtrOutput() IndexApiScopePtrOutput
	ToIndexApiScopePtrOutputWithContext(context.Context) IndexApiScopePtrOutput
}

type indexApiScopePtr string

func IndexApiScopePtr(v string) IndexApiScopePtrInput {
	return (*indexApiScopePtr)(&v)
}

func (*indexApiScopePtr) ElementType() reflect.Type {
	return indexApiScopePtrType
}

func (in *indexApiScopePtr) ToIndexApiScopePtrOutput() IndexApiScopePtrOutput {
	return pulumi.ToOutput(in).(IndexApiScopePtrOutput)
}

func (in *indexApiScopePtr) ToIndexApiScopePtrOutputWithContext(ctx context.Context) IndexApiScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IndexApiScopePtrOutput)
}

// Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.
type IndexQueryScope string

const (
	// The query scope is unspecified. Not a valid option.
	IndexQueryScopeQueryScopeUnspecified = IndexQueryScope("QUERY_SCOPE_UNSPECIFIED")
	// Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the collection id specified by the index.
	IndexQueryScopeCollection = IndexQueryScope("COLLECTION")
	// Indexes with a collection group query scope specified allow queries against all collections that has the collection id specified by the index.
	IndexQueryScopeCollectionGroup = IndexQueryScope("COLLECTION_GROUP")
	// Include all the collections's ancestor in the index. Only available for Datastore Mode databases.
	IndexQueryScopeCollectionRecursive = IndexQueryScope("COLLECTION_RECURSIVE")
)

func (IndexQueryScope) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexQueryScope)(nil)).Elem()
}

func (e IndexQueryScope) ToIndexQueryScopeOutput() IndexQueryScopeOutput {
	return pulumi.ToOutput(e).(IndexQueryScopeOutput)
}

func (e IndexQueryScope) ToIndexQueryScopeOutputWithContext(ctx context.Context) IndexQueryScopeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IndexQueryScopeOutput)
}

func (e IndexQueryScope) ToIndexQueryScopePtrOutput() IndexQueryScopePtrOutput {
	return e.ToIndexQueryScopePtrOutputWithContext(context.Background())
}

func (e IndexQueryScope) ToIndexQueryScopePtrOutputWithContext(ctx context.Context) IndexQueryScopePtrOutput {
	return IndexQueryScope(e).ToIndexQueryScopeOutputWithContext(ctx).ToIndexQueryScopePtrOutputWithContext(ctx)
}

func (e IndexQueryScope) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndexQueryScope) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndexQueryScope) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IndexQueryScope) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IndexQueryScopeOutput struct{ *pulumi.OutputState }

func (IndexQueryScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexQueryScope)(nil)).Elem()
}

func (o IndexQueryScopeOutput) ToIndexQueryScopeOutput() IndexQueryScopeOutput {
	return o
}

func (o IndexQueryScopeOutput) ToIndexQueryScopeOutputWithContext(ctx context.Context) IndexQueryScopeOutput {
	return o
}

func (o IndexQueryScopeOutput) ToIndexQueryScopePtrOutput() IndexQueryScopePtrOutput {
	return o.ToIndexQueryScopePtrOutputWithContext(context.Background())
}

func (o IndexQueryScopeOutput) ToIndexQueryScopePtrOutputWithContext(ctx context.Context) IndexQueryScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndexQueryScope) *IndexQueryScope {
		return &v
	}).(IndexQueryScopePtrOutput)
}

func (o IndexQueryScopeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IndexQueryScopeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexQueryScope) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IndexQueryScopeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexQueryScopeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndexQueryScope) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IndexQueryScopePtrOutput struct{ *pulumi.OutputState }

func (IndexQueryScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexQueryScope)(nil)).Elem()
}

func (o IndexQueryScopePtrOutput) ToIndexQueryScopePtrOutput() IndexQueryScopePtrOutput {
	return o
}

func (o IndexQueryScopePtrOutput) ToIndexQueryScopePtrOutputWithContext(ctx context.Context) IndexQueryScopePtrOutput {
	return o
}

func (o IndexQueryScopePtrOutput) Elem() IndexQueryScopeOutput {
	return o.ApplyT(func(v *IndexQueryScope) IndexQueryScope {
		if v != nil {
			return *v
		}
		var ret IndexQueryScope
		return ret
	}).(IndexQueryScopeOutput)
}

func (o IndexQueryScopePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndexQueryScopePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IndexQueryScope) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IndexQueryScopeInput is an input type that accepts IndexQueryScopeArgs and IndexQueryScopeOutput values.
// You can construct a concrete instance of `IndexQueryScopeInput` via:
//
//	IndexQueryScopeArgs{...}
type IndexQueryScopeInput interface {
	pulumi.Input

	ToIndexQueryScopeOutput() IndexQueryScopeOutput
	ToIndexQueryScopeOutputWithContext(context.Context) IndexQueryScopeOutput
}

var indexQueryScopePtrType = reflect.TypeOf((**IndexQueryScope)(nil)).Elem()

type IndexQueryScopePtrInput interface {
	pulumi.Input

	ToIndexQueryScopePtrOutput() IndexQueryScopePtrOutput
	ToIndexQueryScopePtrOutputWithContext(context.Context) IndexQueryScopePtrOutput
}

type indexQueryScopePtr string

func IndexQueryScopePtr(v string) IndexQueryScopePtrInput {
	return (*indexQueryScopePtr)(&v)
}

func (*indexQueryScopePtr) ElementType() reflect.Type {
	return indexQueryScopePtrType
}

func (in *indexQueryScopePtr) ToIndexQueryScopePtrOutput() IndexQueryScopePtrOutput {
	return pulumi.ToOutput(in).(IndexQueryScopePtrOutput)
}

func (in *indexQueryScopePtr) ToIndexQueryScopePtrOutputWithContext(ctx context.Context) IndexQueryScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IndexQueryScopePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseAppEngineIntegrationModeInput)(nil)).Elem(), DatabaseAppEngineIntegrationMode("APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseAppEngineIntegrationModePtrInput)(nil)).Elem(), DatabaseAppEngineIntegrationMode("APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConcurrencyModeInput)(nil)).Elem(), DatabaseConcurrencyMode("CONCURRENCY_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConcurrencyModePtrInput)(nil)).Elem(), DatabaseConcurrencyMode("CONCURRENCY_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTypeInput)(nil)).Elem(), DatabaseType("DATABASE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTypePtrInput)(nil)).Elem(), DatabaseType("DATABASE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleFirestoreAdminV1IndexFieldArrayConfigInput)(nil)).Elem(), GoogleFirestoreAdminV1IndexFieldArrayConfig("ARRAY_CONFIG_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleFirestoreAdminV1IndexFieldArrayConfigPtrInput)(nil)).Elem(), GoogleFirestoreAdminV1IndexFieldArrayConfig("ARRAY_CONFIG_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleFirestoreAdminV1IndexFieldOrderInput)(nil)).Elem(), GoogleFirestoreAdminV1IndexFieldOrder("ORDER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleFirestoreAdminV1IndexFieldOrderPtrInput)(nil)).Elem(), GoogleFirestoreAdminV1IndexFieldOrder("ORDER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*IndexApiScopeInput)(nil)).Elem(), IndexApiScope("ANY_API"))
	pulumi.RegisterInputType(reflect.TypeOf((*IndexApiScopePtrInput)(nil)).Elem(), IndexApiScope("ANY_API"))
	pulumi.RegisterInputType(reflect.TypeOf((*IndexQueryScopeInput)(nil)).Elem(), IndexQueryScope("QUERY_SCOPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*IndexQueryScopePtrInput)(nil)).Elem(), IndexQueryScope("QUERY_SCOPE_UNSPECIFIED"))
	pulumi.RegisterOutputType(DatabaseAppEngineIntegrationModeOutput{})
	pulumi.RegisterOutputType(DatabaseAppEngineIntegrationModePtrOutput{})
	pulumi.RegisterOutputType(DatabaseConcurrencyModeOutput{})
	pulumi.RegisterOutputType(DatabaseConcurrencyModePtrOutput{})
	pulumi.RegisterOutputType(DatabaseTypeOutput{})
	pulumi.RegisterOutputType(DatabaseTypePtrOutput{})
	pulumi.RegisterOutputType(GoogleFirestoreAdminV1IndexFieldArrayConfigOutput{})
	pulumi.RegisterOutputType(GoogleFirestoreAdminV1IndexFieldArrayConfigPtrOutput{})
	pulumi.RegisterOutputType(GoogleFirestoreAdminV1IndexFieldOrderOutput{})
	pulumi.RegisterOutputType(GoogleFirestoreAdminV1IndexFieldOrderPtrOutput{})
	pulumi.RegisterOutputType(IndexApiScopeOutput{})
	pulumi.RegisterOutputType(IndexApiScopePtrOutput{})
	pulumi.RegisterOutputType(IndexQueryScopeOutput{})
	pulumi.RegisterOutputType(IndexQueryScopePtrOutput{})
}
