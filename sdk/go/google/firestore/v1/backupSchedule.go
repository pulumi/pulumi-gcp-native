// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a backup schedule on a database. At most two backup schedules can be configured on a database, one daily backup schedule with retention up to 7 days and one weekly backup schedule with retention up to 14 weeks.
// Auto-naming is currently not supported for this resource.
type BackupSchedule struct {
	pulumi.CustomResourceState

	// The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// For a schedule that runs daily at a specified time.
	DailyRecurrence GoogleFirestoreAdminV1DailyRecurrenceResponseOutput `pulumi:"dailyRecurrence"`
	DatabaseId      pulumi.StringOutput                                 `pulumi:"databaseId"`
	// The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// At what relative time in the future, compared to the creation time of the backup should the backup be deleted, i.e. keep backups for 7 days.
	Retention pulumi.StringOutput `pulumi:"retention"`
	// The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// For a schedule that runs weekly on a specific day and time.
	WeeklyRecurrence GoogleFirestoreAdminV1WeeklyRecurrenceResponseOutput `pulumi:"weeklyRecurrence"`
}

// NewBackupSchedule registers a new resource with the given unique name, arguments, and options.
func NewBackupSchedule(ctx *pulumi.Context,
	name string, args *BackupScheduleArgs, opts ...pulumi.ResourceOption) (*BackupSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"databaseId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource BackupSchedule
	err := ctx.RegisterResource("google-native:firestore/v1:BackupSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupSchedule gets an existing BackupSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupScheduleState, opts ...pulumi.ResourceOption) (*BackupSchedule, error) {
	var resource BackupSchedule
	err := ctx.ReadResource("google-native:firestore/v1:BackupSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupSchedule resources.
type backupScheduleState struct {
}

type BackupScheduleState struct {
}

func (BackupScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupScheduleState)(nil)).Elem()
}

type backupScheduleArgs struct {
	// For a schedule that runs daily at a specified time.
	DailyRecurrence *GoogleFirestoreAdminV1DailyRecurrence `pulumi:"dailyRecurrence"`
	DatabaseId      string                                 `pulumi:"databaseId"`
	Project         *string                                `pulumi:"project"`
	// At what relative time in the future, compared to the creation time of the backup should the backup be deleted, i.e. keep backups for 7 days.
	Retention *string `pulumi:"retention"`
	// For a schedule that runs weekly on a specific day and time.
	WeeklyRecurrence *GoogleFirestoreAdminV1WeeklyRecurrence `pulumi:"weeklyRecurrence"`
}

// The set of arguments for constructing a BackupSchedule resource.
type BackupScheduleArgs struct {
	// For a schedule that runs daily at a specified time.
	DailyRecurrence GoogleFirestoreAdminV1DailyRecurrencePtrInput
	DatabaseId      pulumi.StringInput
	Project         pulumi.StringPtrInput
	// At what relative time in the future, compared to the creation time of the backup should the backup be deleted, i.e. keep backups for 7 days.
	Retention pulumi.StringPtrInput
	// For a schedule that runs weekly on a specific day and time.
	WeeklyRecurrence GoogleFirestoreAdminV1WeeklyRecurrencePtrInput
}

func (BackupScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupScheduleArgs)(nil)).Elem()
}

type BackupScheduleInput interface {
	pulumi.Input

	ToBackupScheduleOutput() BackupScheduleOutput
	ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput
}

func (*BackupSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSchedule)(nil)).Elem()
}

func (i *BackupSchedule) ToBackupScheduleOutput() BackupScheduleOutput {
	return i.ToBackupScheduleOutputWithContext(context.Background())
}

func (i *BackupSchedule) ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleOutput)
}

type BackupScheduleOutput struct{ *pulumi.OutputState }

func (BackupScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSchedule)(nil)).Elem()
}

func (o BackupScheduleOutput) ToBackupScheduleOutput() BackupScheduleOutput {
	return o
}

func (o BackupScheduleOutput) ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput {
	return o
}

// The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.
func (o BackupScheduleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// For a schedule that runs daily at a specified time.
func (o BackupScheduleOutput) DailyRecurrence() GoogleFirestoreAdminV1DailyRecurrenceResponseOutput {
	return o.ApplyT(func(v *BackupSchedule) GoogleFirestoreAdminV1DailyRecurrenceResponseOutput { return v.DailyRecurrence }).(GoogleFirestoreAdminV1DailyRecurrenceResponseOutput)
}

func (o BackupScheduleOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
func (o BackupScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BackupScheduleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// At what relative time in the future, compared to the creation time of the backup should the backup be deleted, i.e. keep backups for 7 days.
func (o BackupScheduleOutput) Retention() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.Retention }).(pulumi.StringOutput)
}

// The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.
func (o BackupScheduleOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// For a schedule that runs weekly on a specific day and time.
func (o BackupScheduleOutput) WeeklyRecurrence() GoogleFirestoreAdminV1WeeklyRecurrenceResponseOutput {
	return o.ApplyT(func(v *BackupSchedule) GoogleFirestoreAdminV1WeeklyRecurrenceResponseOutput {
		return v.WeeklyRecurrence
	}).(GoogleFirestoreAdminV1WeeklyRecurrenceResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleInput)(nil)).Elem(), &BackupSchedule{})
	pulumi.RegisterOutputType(BackupScheduleOutput{})
}
