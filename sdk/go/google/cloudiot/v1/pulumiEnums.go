// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.
type DeviceLogLevel pulumi.String

const (
	// No logging specified. If not specified, logging will be disabled.
	DeviceLogLevelLogLevelUnspecified = DeviceLogLevel("LOG_LEVEL_UNSPECIFIED")
	// Disables logging.
	DeviceLogLevelNone = DeviceLogLevel("NONE")
	// Error events will be logged.
	DeviceLogLevelError = DeviceLogLevel("ERROR")
	// Informational events will be logged, such as connections and disconnections.
	DeviceLogLevelInfo = DeviceLogLevel("INFO")
	// All events will be logged.
	DeviceLogLevelDebug = DeviceLogLevel("DEBUG")
)

func (DeviceLogLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DeviceLogLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeviceLogLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeviceLogLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeviceLogLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Indicates how to authorize and/or authenticate devices to access the gateway.
type GatewayConfigGatewayAuthMethod pulumi.String

const (
	// No authentication/authorization method specified. No devices are allowed to access the gateway.
	GatewayConfigGatewayAuthMethodGatewayAuthMethodUnspecified = GatewayConfigGatewayAuthMethod("GATEWAY_AUTH_METHOD_UNSPECIFIED")
	// The device is authenticated through the gateway association only. Device credentials are ignored even if provided.
	GatewayConfigGatewayAuthMethodAssociationOnly = GatewayConfigGatewayAuthMethod("ASSOCIATION_ONLY")
	// The device is authenticated through its own credentials. Gateway association is not checked.
	GatewayConfigGatewayAuthMethodDeviceAuthTokenOnly = GatewayConfigGatewayAuthMethod("DEVICE_AUTH_TOKEN_ONLY")
	// The device is authenticated through both device credentials and gateway association. The device must be bound to the gateway and must provide its own credentials.
	GatewayConfigGatewayAuthMethodAssociationAndDeviceAuthToken = GatewayConfigGatewayAuthMethod("ASSOCIATION_AND_DEVICE_AUTH_TOKEN")
)

func (GatewayConfigGatewayAuthMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GatewayConfigGatewayAuthMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GatewayConfigGatewayAuthMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GatewayConfigGatewayAuthMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GatewayConfigGatewayAuthMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Indicates whether the device is a gateway.
type GatewayConfigGatewayType pulumi.String

const (
	// If unspecified, the device is considered a non-gateway device.
	GatewayConfigGatewayTypeGatewayTypeUnspecified = GatewayConfigGatewayType("GATEWAY_TYPE_UNSPECIFIED")
	// The device is a gateway.
	GatewayConfigGatewayTypeGateway = GatewayConfigGatewayType("GATEWAY")
	// The device is not a gateway.
	GatewayConfigGatewayTypeNonGateway = GatewayConfigGatewayType("NON_GATEWAY")
)

func (GatewayConfigGatewayType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GatewayConfigGatewayType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GatewayConfigGatewayType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GatewayConfigGatewayType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GatewayConfigGatewayType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// If enabled, allows devices to use DeviceService via the HTTP protocol. Otherwise, any requests to DeviceService will fail for this registry.
type HttpConfigHttpEnabledState pulumi.String

const (
	// No HTTP state specified. If not specified, DeviceService will be enabled by default.
	HttpConfigHttpEnabledStateHttpStateUnspecified = HttpConfigHttpEnabledState("HTTP_STATE_UNSPECIFIED")
	// Enables DeviceService (HTTP) service for the registry.
	HttpConfigHttpEnabledStateHttpEnabled = HttpConfigHttpEnabledState("HTTP_ENABLED")
	// Disables DeviceService (HTTP) service for the registry.
	HttpConfigHttpEnabledStateHttpDisabled = HttpConfigHttpEnabledState("HTTP_DISABLED")
)

func (HttpConfigHttpEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HttpConfigHttpEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpConfigHttpEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpConfigHttpEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpConfigHttpEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.
type MqttConfigMqttEnabledState pulumi.String

const (
	// No MQTT state specified. If not specified, MQTT will be enabled by default.
	MqttConfigMqttEnabledStateMqttStateUnspecified = MqttConfigMqttEnabledState("MQTT_STATE_UNSPECIFIED")
	// Enables a MQTT connection.
	MqttConfigMqttEnabledStateMqttEnabled = MqttConfigMqttEnabledState("MQTT_ENABLED")
	// Disables a MQTT connection.
	MqttConfigMqttEnabledStateMqttDisabled = MqttConfigMqttEnabledState("MQTT_DISABLED")
)

func (MqttConfigMqttEnabledState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e MqttConfigMqttEnabledState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MqttConfigMqttEnabledState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MqttConfigMqttEnabledState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MqttConfigMqttEnabledState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The certificate format.
type PublicKeyCertificateFormat pulumi.String

const (
	// The format has not been specified. This is an invalid default value and must not be used.
	PublicKeyCertificateFormatUnspecifiedPublicKeyCertificateFormat = PublicKeyCertificateFormat("UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT")
	// An X.509v3 certificate ([RFC5280](https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
	PublicKeyCertificateFormatX509CertificatePem = PublicKeyCertificateFormat("X509_CERTIFICATE_PEM")
)

func (PublicKeyCertificateFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PublicKeyCertificateFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicKeyCertificateFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicKeyCertificateFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicKeyCertificateFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The format of the key.
type PublicKeyCredentialFormat pulumi.String

const (
	// The format has not been specified. This is an invalid default value and must not be used.
	PublicKeyCredentialFormatUnspecifiedPublicKeyFormat = PublicKeyCredentialFormat("UNSPECIFIED_PUBLIC_KEY_FORMAT")
	// An RSA public key encoded in base64, and wrapped by `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC KEY-----`. This can be used to verify `RS256` signatures in JWT tokens ([RFC7518](https://www.ietf.org/rfc/rfc7518.txt)).
	PublicKeyCredentialFormatRsaPem = PublicKeyCredentialFormat("RSA_PEM")
	// As RSA_PEM, but wrapped in an X.509v3 certificate ([RFC5280](https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
	PublicKeyCredentialFormatRsaX509Pem = PublicKeyCredentialFormat("RSA_X509_PEM")
	// Public key for the ECDSA algorithm using P-256 and SHA-256, encoded in base64, and wrapped by `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC KEY-----`. This can be used to verify JWT tokens with the `ES256` algorithm ([RFC7518](https://www.ietf.org/rfc/rfc7518.txt)). This curve is defined in [OpenSSL](https://www.openssl.org/) as the `prime256v1` curve.
	PublicKeyCredentialFormatEs256Pem = PublicKeyCredentialFormat("ES256_PEM")
	// As ES256_PEM, but wrapped in an X.509v3 certificate ([RFC5280](https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
	PublicKeyCredentialFormatEs256X509Pem = PublicKeyCredentialFormat("ES256_X509_PEM")
)

func (PublicKeyCredentialFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PublicKeyCredentialFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicKeyCredentialFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicKeyCredentialFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicKeyCredentialFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// **Beta Feature** The default logging verbosity for activity from devices in this registry. The verbosity level can be overridden by Device.log_level.
type RegistryLogLevel pulumi.String

const (
	// No logging specified. If not specified, logging will be disabled.
	RegistryLogLevelLogLevelUnspecified = RegistryLogLevel("LOG_LEVEL_UNSPECIFIED")
	// Disables logging.
	RegistryLogLevelNone = RegistryLogLevel("NONE")
	// Error events will be logged.
	RegistryLogLevelError = RegistryLogLevel("ERROR")
	// Informational events will be logged, such as connections and disconnections.
	RegistryLogLevelInfo = RegistryLogLevel("INFO")
	// All events will be logged.
	RegistryLogLevelDebug = RegistryLogLevel("DEBUG")
)

func (RegistryLogLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegistryLogLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegistryLogLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegistryLogLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegistryLogLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
