// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy.
type RegistryIamPolicy struct {
	pulumi.CustomResourceState
}

// NewRegistryIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegistryIamPolicy(ctx *pulumi.Context,
	name string, args *RegistryIamPolicyArgs, opts ...pulumi.ResourceOption) (*RegistryIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.RegistriesId == nil {
		return nil, errors.New("invalid value for required argument 'RegistriesId'")
	}
	var resource RegistryIamPolicy
	err := ctx.RegisterResource("google-cloud:cloudiot/v1:RegistryIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryIamPolicy gets an existing RegistryIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryIamPolicyState, opts ...pulumi.ResourceOption) (*RegistryIamPolicy, error) {
	var resource RegistryIamPolicy
	err := ctx.ReadResource("google-cloud:cloudiot/v1:RegistryIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryIamPolicy resources.
type registryIamPolicyState struct {
}

type RegistryIamPolicyState struct {
}

func (RegistryIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryIamPolicyState)(nil)).Elem()
}

type registryIamPolicyArgs struct {
	LocationsId string `pulumi:"locationsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy       *Policy `pulumi:"policy"`
	ProjectsId   string  `pulumi:"projectsId"`
	RegistriesId string  `pulumi:"registriesId"`
}

// The set of arguments for constructing a RegistryIamPolicy resource.
type RegistryIamPolicyArgs struct {
	LocationsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy       PolicyPtrInput
	ProjectsId   pulumi.StringInput
	RegistriesId pulumi.StringInput
}

func (RegistryIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryIamPolicyArgs)(nil)).Elem()
}

type RegistryIamPolicyInput interface {
	pulumi.Input

	ToRegistryIamPolicyOutput() RegistryIamPolicyOutput
	ToRegistryIamPolicyOutputWithContext(ctx context.Context) RegistryIamPolicyOutput
}

func (*RegistryIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryIamPolicy)(nil))
}

func (i *RegistryIamPolicy) ToRegistryIamPolicyOutput() RegistryIamPolicyOutput {
	return i.ToRegistryIamPolicyOutputWithContext(context.Background())
}

func (i *RegistryIamPolicy) ToRegistryIamPolicyOutputWithContext(ctx context.Context) RegistryIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryIamPolicyOutput)
}

type RegistryIamPolicyOutput struct {
	*pulumi.OutputState
}

func (RegistryIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryIamPolicy)(nil))
}

func (o RegistryIamPolicyOutput) ToRegistryIamPolicyOutput() RegistryIamPolicyOutput {
	return o
}

func (o RegistryIamPolicyOutput) ToRegistryIamPolicyOutputWithContext(ctx context.Context) RegistryIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RegistryIamPolicyOutput{})
}
