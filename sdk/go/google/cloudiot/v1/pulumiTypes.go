// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// The device configuration. Eventually delivered to devices.
type DeviceConfig struct {
	// The device configuration data.
	BinaryData *string `pulumi:"binaryData"`
}

// DeviceConfigInput is an input type that accepts DeviceConfigArgs and DeviceConfigOutput values.
// You can construct a concrete instance of `DeviceConfigInput` via:
//
//	DeviceConfigArgs{...}
type DeviceConfigInput interface {
	pulumi.Input

	ToDeviceConfigOutput() DeviceConfigOutput
	ToDeviceConfigOutputWithContext(context.Context) DeviceConfigOutput
}

// The device configuration. Eventually delivered to devices.
type DeviceConfigArgs struct {
	// The device configuration data.
	BinaryData pulumi.StringPtrInput `pulumi:"binaryData"`
}

func (DeviceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceConfig)(nil)).Elem()
}

func (i DeviceConfigArgs) ToDeviceConfigOutput() DeviceConfigOutput {
	return i.ToDeviceConfigOutputWithContext(context.Background())
}

func (i DeviceConfigArgs) ToDeviceConfigOutputWithContext(ctx context.Context) DeviceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceConfigOutput)
}

func (i DeviceConfigArgs) ToDeviceConfigPtrOutput() DeviceConfigPtrOutput {
	return i.ToDeviceConfigPtrOutputWithContext(context.Background())
}

func (i DeviceConfigArgs) ToDeviceConfigPtrOutputWithContext(ctx context.Context) DeviceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceConfigOutput).ToDeviceConfigPtrOutputWithContext(ctx)
}

// DeviceConfigPtrInput is an input type that accepts DeviceConfigArgs, DeviceConfigPtr and DeviceConfigPtrOutput values.
// You can construct a concrete instance of `DeviceConfigPtrInput` via:
//
//	        DeviceConfigArgs{...}
//
//	or:
//
//	        nil
type DeviceConfigPtrInput interface {
	pulumi.Input

	ToDeviceConfigPtrOutput() DeviceConfigPtrOutput
	ToDeviceConfigPtrOutputWithContext(context.Context) DeviceConfigPtrOutput
}

type deviceConfigPtrType DeviceConfigArgs

func DeviceConfigPtr(v *DeviceConfigArgs) DeviceConfigPtrInput {
	return (*deviceConfigPtrType)(v)
}

func (*deviceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceConfig)(nil)).Elem()
}

func (i *deviceConfigPtrType) ToDeviceConfigPtrOutput() DeviceConfigPtrOutput {
	return i.ToDeviceConfigPtrOutputWithContext(context.Background())
}

func (i *deviceConfigPtrType) ToDeviceConfigPtrOutputWithContext(ctx context.Context) DeviceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceConfigPtrOutput)
}

// The device configuration. Eventually delivered to devices.
type DeviceConfigOutput struct{ *pulumi.OutputState }

func (DeviceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceConfig)(nil)).Elem()
}

func (o DeviceConfigOutput) ToDeviceConfigOutput() DeviceConfigOutput {
	return o
}

func (o DeviceConfigOutput) ToDeviceConfigOutputWithContext(ctx context.Context) DeviceConfigOutput {
	return o
}

func (o DeviceConfigOutput) ToDeviceConfigPtrOutput() DeviceConfigPtrOutput {
	return o.ToDeviceConfigPtrOutputWithContext(context.Background())
}

func (o DeviceConfigOutput) ToDeviceConfigPtrOutputWithContext(ctx context.Context) DeviceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeviceConfig) *DeviceConfig {
		return &v
	}).(DeviceConfigPtrOutput)
}

// The device configuration data.
func (o DeviceConfigOutput) BinaryData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceConfig) *string { return v.BinaryData }).(pulumi.StringPtrOutput)
}

type DeviceConfigPtrOutput struct{ *pulumi.OutputState }

func (DeviceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceConfig)(nil)).Elem()
}

func (o DeviceConfigPtrOutput) ToDeviceConfigPtrOutput() DeviceConfigPtrOutput {
	return o
}

func (o DeviceConfigPtrOutput) ToDeviceConfigPtrOutputWithContext(ctx context.Context) DeviceConfigPtrOutput {
	return o
}

func (o DeviceConfigPtrOutput) Elem() DeviceConfigOutput {
	return o.ApplyT(func(v *DeviceConfig) DeviceConfig {
		if v != nil {
			return *v
		}
		var ret DeviceConfig
		return ret
	}).(DeviceConfigOutput)
}

// The device configuration data.
func (o DeviceConfigPtrOutput) BinaryData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceConfig) *string {
		if v == nil {
			return nil
		}
		return v.BinaryData
	}).(pulumi.StringPtrOutput)
}

// The device configuration. Eventually delivered to devices.
type DeviceConfigResponse struct {
	// The device configuration data.
	BinaryData string `pulumi:"binaryData"`
	// [Output only] The time at which this configuration version was updated in Cloud IoT Core. This timestamp is set by the server.
	CloudUpdateTime string `pulumi:"cloudUpdateTime"`
	// [Output only] The time at which Cloud IoT Core received the acknowledgment from the device, indicating that the device has received this configuration version. If this field is not present, the device has not yet acknowledged that it received this version. Note that when the config was sent to the device, many config versions may have been available in Cloud IoT Core while the device was disconnected, and on connection, only the latest version is sent to the device. Some versions may never be sent to the device, and therefore are never acknowledged. This timestamp is set by Cloud IoT Core.
	DeviceAckTime string `pulumi:"deviceAckTime"`
	// [Output only] The version of this update. The version number is assigned by the server, and is always greater than 0 after device creation. The version must be 0 on the `CreateDevice` request if a `config` is specified; the response of `CreateDevice` will always have a value of 1.
	Version string `pulumi:"version"`
}

// The device configuration. Eventually delivered to devices.
type DeviceConfigResponseOutput struct{ *pulumi.OutputState }

func (DeviceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceConfigResponse)(nil)).Elem()
}

func (o DeviceConfigResponseOutput) ToDeviceConfigResponseOutput() DeviceConfigResponseOutput {
	return o
}

func (o DeviceConfigResponseOutput) ToDeviceConfigResponseOutputWithContext(ctx context.Context) DeviceConfigResponseOutput {
	return o
}

// The device configuration data.
func (o DeviceConfigResponseOutput) BinaryData() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceConfigResponse) string { return v.BinaryData }).(pulumi.StringOutput)
}

// [Output only] The time at which this configuration version was updated in Cloud IoT Core. This timestamp is set by the server.
func (o DeviceConfigResponseOutput) CloudUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceConfigResponse) string { return v.CloudUpdateTime }).(pulumi.StringOutput)
}

// [Output only] The time at which Cloud IoT Core received the acknowledgment from the device, indicating that the device has received this configuration version. If this field is not present, the device has not yet acknowledged that it received this version. Note that when the config was sent to the device, many config versions may have been available in Cloud IoT Core while the device was disconnected, and on connection, only the latest version is sent to the device. Some versions may never be sent to the device, and therefore are never acknowledged. This timestamp is set by Cloud IoT Core.
func (o DeviceConfigResponseOutput) DeviceAckTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceConfigResponse) string { return v.DeviceAckTime }).(pulumi.StringOutput)
}

// [Output only] The version of this update. The version number is assigned by the server, and is always greater than 0 after device creation. The version must be 0 on the `CreateDevice` request if a `config` is specified; the response of `CreateDevice` will always have a value of 1.
func (o DeviceConfigResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceConfigResponse) string { return v.Version }).(pulumi.StringOutput)
}

// A server-stored device credential used for authentication.
type DeviceCredential struct {
	// [Optional] The time at which this credential becomes invalid. This credential will be ignored for new client authentication requests after this timestamp; however, it will not be automatically deleted.
	ExpirationTime *string `pulumi:"expirationTime"`
	// A public key used to verify the signature of JSON Web Tokens (JWTs). When adding a new device credential, either via device creation or via modifications, this public key credential may be required to be signed by one of the registry level certificates. More specifically, if the registry contains at least one certificate, any new device credential must be signed by one of the registry certificates. As a result, when the registry contains certificates, only X.509 certificates are accepted as device credentials. However, if the registry does not contain a certificate, self-signed certificates and public keys will be accepted. New device credentials must be different from every registry-level certificate.
	PublicKey *PublicKeyCredential `pulumi:"publicKey"`
}

// DeviceCredentialInput is an input type that accepts DeviceCredentialArgs and DeviceCredentialOutput values.
// You can construct a concrete instance of `DeviceCredentialInput` via:
//
//	DeviceCredentialArgs{...}
type DeviceCredentialInput interface {
	pulumi.Input

	ToDeviceCredentialOutput() DeviceCredentialOutput
	ToDeviceCredentialOutputWithContext(context.Context) DeviceCredentialOutput
}

// A server-stored device credential used for authentication.
type DeviceCredentialArgs struct {
	// [Optional] The time at which this credential becomes invalid. This credential will be ignored for new client authentication requests after this timestamp; however, it will not be automatically deleted.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// A public key used to verify the signature of JSON Web Tokens (JWTs). When adding a new device credential, either via device creation or via modifications, this public key credential may be required to be signed by one of the registry level certificates. More specifically, if the registry contains at least one certificate, any new device credential must be signed by one of the registry certificates. As a result, when the registry contains certificates, only X.509 certificates are accepted as device credentials. However, if the registry does not contain a certificate, self-signed certificates and public keys will be accepted. New device credentials must be different from every registry-level certificate.
	PublicKey PublicKeyCredentialPtrInput `pulumi:"publicKey"`
}

func (DeviceCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceCredential)(nil)).Elem()
}

func (i DeviceCredentialArgs) ToDeviceCredentialOutput() DeviceCredentialOutput {
	return i.ToDeviceCredentialOutputWithContext(context.Background())
}

func (i DeviceCredentialArgs) ToDeviceCredentialOutputWithContext(ctx context.Context) DeviceCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCredentialOutput)
}

// DeviceCredentialArrayInput is an input type that accepts DeviceCredentialArray and DeviceCredentialArrayOutput values.
// You can construct a concrete instance of `DeviceCredentialArrayInput` via:
//
//	DeviceCredentialArray{ DeviceCredentialArgs{...} }
type DeviceCredentialArrayInput interface {
	pulumi.Input

	ToDeviceCredentialArrayOutput() DeviceCredentialArrayOutput
	ToDeviceCredentialArrayOutputWithContext(context.Context) DeviceCredentialArrayOutput
}

type DeviceCredentialArray []DeviceCredentialInput

func (DeviceCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceCredential)(nil)).Elem()
}

func (i DeviceCredentialArray) ToDeviceCredentialArrayOutput() DeviceCredentialArrayOutput {
	return i.ToDeviceCredentialArrayOutputWithContext(context.Background())
}

func (i DeviceCredentialArray) ToDeviceCredentialArrayOutputWithContext(ctx context.Context) DeviceCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceCredentialArrayOutput)
}

// A server-stored device credential used for authentication.
type DeviceCredentialOutput struct{ *pulumi.OutputState }

func (DeviceCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceCredential)(nil)).Elem()
}

func (o DeviceCredentialOutput) ToDeviceCredentialOutput() DeviceCredentialOutput {
	return o
}

func (o DeviceCredentialOutput) ToDeviceCredentialOutputWithContext(ctx context.Context) DeviceCredentialOutput {
	return o
}

// [Optional] The time at which this credential becomes invalid. This credential will be ignored for new client authentication requests after this timestamp; however, it will not be automatically deleted.
func (o DeviceCredentialOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeviceCredential) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// A public key used to verify the signature of JSON Web Tokens (JWTs). When adding a new device credential, either via device creation or via modifications, this public key credential may be required to be signed by one of the registry level certificates. More specifically, if the registry contains at least one certificate, any new device credential must be signed by one of the registry certificates. As a result, when the registry contains certificates, only X.509 certificates are accepted as device credentials. However, if the registry does not contain a certificate, self-signed certificates and public keys will be accepted. New device credentials must be different from every registry-level certificate.
func (o DeviceCredentialOutput) PublicKey() PublicKeyCredentialPtrOutput {
	return o.ApplyT(func(v DeviceCredential) *PublicKeyCredential { return v.PublicKey }).(PublicKeyCredentialPtrOutput)
}

type DeviceCredentialArrayOutput struct{ *pulumi.OutputState }

func (DeviceCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceCredential)(nil)).Elem()
}

func (o DeviceCredentialArrayOutput) ToDeviceCredentialArrayOutput() DeviceCredentialArrayOutput {
	return o
}

func (o DeviceCredentialArrayOutput) ToDeviceCredentialArrayOutputWithContext(ctx context.Context) DeviceCredentialArrayOutput {
	return o
}

func (o DeviceCredentialArrayOutput) Index(i pulumi.IntInput) DeviceCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceCredential {
		return vs[0].([]DeviceCredential)[vs[1].(int)]
	}).(DeviceCredentialOutput)
}

// A server-stored device credential used for authentication.
type DeviceCredentialResponse struct {
	// [Optional] The time at which this credential becomes invalid. This credential will be ignored for new client authentication requests after this timestamp; however, it will not be automatically deleted.
	ExpirationTime string `pulumi:"expirationTime"`
	// A public key used to verify the signature of JSON Web Tokens (JWTs). When adding a new device credential, either via device creation or via modifications, this public key credential may be required to be signed by one of the registry level certificates. More specifically, if the registry contains at least one certificate, any new device credential must be signed by one of the registry certificates. As a result, when the registry contains certificates, only X.509 certificates are accepted as device credentials. However, if the registry does not contain a certificate, self-signed certificates and public keys will be accepted. New device credentials must be different from every registry-level certificate.
	PublicKey PublicKeyCredentialResponse `pulumi:"publicKey"`
}

// A server-stored device credential used for authentication.
type DeviceCredentialResponseOutput struct{ *pulumi.OutputState }

func (DeviceCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceCredentialResponse)(nil)).Elem()
}

func (o DeviceCredentialResponseOutput) ToDeviceCredentialResponseOutput() DeviceCredentialResponseOutput {
	return o
}

func (o DeviceCredentialResponseOutput) ToDeviceCredentialResponseOutputWithContext(ctx context.Context) DeviceCredentialResponseOutput {
	return o
}

// [Optional] The time at which this credential becomes invalid. This credential will be ignored for new client authentication requests after this timestamp; however, it will not be automatically deleted.
func (o DeviceCredentialResponseOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceCredentialResponse) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// A public key used to verify the signature of JSON Web Tokens (JWTs). When adding a new device credential, either via device creation or via modifications, this public key credential may be required to be signed by one of the registry level certificates. More specifically, if the registry contains at least one certificate, any new device credential must be signed by one of the registry certificates. As a result, when the registry contains certificates, only X.509 certificates are accepted as device credentials. However, if the registry does not contain a certificate, self-signed certificates and public keys will be accepted. New device credentials must be different from every registry-level certificate.
func (o DeviceCredentialResponseOutput) PublicKey() PublicKeyCredentialResponseOutput {
	return o.ApplyT(func(v DeviceCredentialResponse) PublicKeyCredentialResponse { return v.PublicKey }).(PublicKeyCredentialResponseOutput)
}

type DeviceCredentialResponseArrayOutput struct{ *pulumi.OutputState }

func (DeviceCredentialResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeviceCredentialResponse)(nil)).Elem()
}

func (o DeviceCredentialResponseArrayOutput) ToDeviceCredentialResponseArrayOutput() DeviceCredentialResponseArrayOutput {
	return o
}

func (o DeviceCredentialResponseArrayOutput) ToDeviceCredentialResponseArrayOutputWithContext(ctx context.Context) DeviceCredentialResponseArrayOutput {
	return o
}

func (o DeviceCredentialResponseArrayOutput) Index(i pulumi.IntInput) DeviceCredentialResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeviceCredentialResponse {
		return vs[0].([]DeviceCredentialResponse)[vs[1].(int)]
	}).(DeviceCredentialResponseOutput)
}

// The device state, as reported by the device.
type DeviceStateResponse struct {
	// The device state data.
	BinaryData string `pulumi:"binaryData"`
	// [Output only] The time at which this state version was updated in Cloud IoT Core.
	UpdateTime string `pulumi:"updateTime"`
}

// The device state, as reported by the device.
type DeviceStateResponseOutput struct{ *pulumi.OutputState }

func (DeviceStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeviceStateResponse)(nil)).Elem()
}

func (o DeviceStateResponseOutput) ToDeviceStateResponseOutput() DeviceStateResponseOutput {
	return o
}

func (o DeviceStateResponseOutput) ToDeviceStateResponseOutputWithContext(ctx context.Context) DeviceStateResponseOutput {
	return o
}

// The device state data.
func (o DeviceStateResponseOutput) BinaryData() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceStateResponse) string { return v.BinaryData }).(pulumi.StringOutput)
}

// [Output only] The time at which this state version was updated in Cloud IoT Core.
func (o DeviceStateResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v DeviceStateResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The configuration for forwarding telemetry events.
type EventNotificationConfig struct {
	// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
	PubsubTopicName *string `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string exactly, this configuration will be used. The string must not include the leading '/' character. If empty, all strings are matched. This field is used only for telemetry events; subfolders are not supported for state changes.
	SubfolderMatches *string `pulumi:"subfolderMatches"`
}

// EventNotificationConfigInput is an input type that accepts EventNotificationConfigArgs and EventNotificationConfigOutput values.
// You can construct a concrete instance of `EventNotificationConfigInput` via:
//
//	EventNotificationConfigArgs{...}
type EventNotificationConfigInput interface {
	pulumi.Input

	ToEventNotificationConfigOutput() EventNotificationConfigOutput
	ToEventNotificationConfigOutputWithContext(context.Context) EventNotificationConfigOutput
}

// The configuration for forwarding telemetry events.
type EventNotificationConfigArgs struct {
	// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
	PubsubTopicName pulumi.StringPtrInput `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string exactly, this configuration will be used. The string must not include the leading '/' character. If empty, all strings are matched. This field is used only for telemetry events; subfolders are not supported for state changes.
	SubfolderMatches pulumi.StringPtrInput `pulumi:"subfolderMatches"`
}

func (EventNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventNotificationConfig)(nil)).Elem()
}

func (i EventNotificationConfigArgs) ToEventNotificationConfigOutput() EventNotificationConfigOutput {
	return i.ToEventNotificationConfigOutputWithContext(context.Background())
}

func (i EventNotificationConfigArgs) ToEventNotificationConfigOutputWithContext(ctx context.Context) EventNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventNotificationConfigOutput)
}

// EventNotificationConfigArrayInput is an input type that accepts EventNotificationConfigArray and EventNotificationConfigArrayOutput values.
// You can construct a concrete instance of `EventNotificationConfigArrayInput` via:
//
//	EventNotificationConfigArray{ EventNotificationConfigArgs{...} }
type EventNotificationConfigArrayInput interface {
	pulumi.Input

	ToEventNotificationConfigArrayOutput() EventNotificationConfigArrayOutput
	ToEventNotificationConfigArrayOutputWithContext(context.Context) EventNotificationConfigArrayOutput
}

type EventNotificationConfigArray []EventNotificationConfigInput

func (EventNotificationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventNotificationConfig)(nil)).Elem()
}

func (i EventNotificationConfigArray) ToEventNotificationConfigArrayOutput() EventNotificationConfigArrayOutput {
	return i.ToEventNotificationConfigArrayOutputWithContext(context.Background())
}

func (i EventNotificationConfigArray) ToEventNotificationConfigArrayOutputWithContext(ctx context.Context) EventNotificationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventNotificationConfigArrayOutput)
}

// The configuration for forwarding telemetry events.
type EventNotificationConfigOutput struct{ *pulumi.OutputState }

func (EventNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventNotificationConfig)(nil)).Elem()
}

func (o EventNotificationConfigOutput) ToEventNotificationConfigOutput() EventNotificationConfigOutput {
	return o
}

func (o EventNotificationConfigOutput) ToEventNotificationConfigOutputWithContext(ctx context.Context) EventNotificationConfigOutput {
	return o
}

// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
func (o EventNotificationConfigOutput) PubsubTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventNotificationConfig) *string { return v.PubsubTopicName }).(pulumi.StringPtrOutput)
}

// If the subfolder name matches this string exactly, this configuration will be used. The string must not include the leading '/' character. If empty, all strings are matched. This field is used only for telemetry events; subfolders are not supported for state changes.
func (o EventNotificationConfigOutput) SubfolderMatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventNotificationConfig) *string { return v.SubfolderMatches }).(pulumi.StringPtrOutput)
}

type EventNotificationConfigArrayOutput struct{ *pulumi.OutputState }

func (EventNotificationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventNotificationConfig)(nil)).Elem()
}

func (o EventNotificationConfigArrayOutput) ToEventNotificationConfigArrayOutput() EventNotificationConfigArrayOutput {
	return o
}

func (o EventNotificationConfigArrayOutput) ToEventNotificationConfigArrayOutputWithContext(ctx context.Context) EventNotificationConfigArrayOutput {
	return o
}

func (o EventNotificationConfigArrayOutput) Index(i pulumi.IntInput) EventNotificationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventNotificationConfig {
		return vs[0].([]EventNotificationConfig)[vs[1].(int)]
	}).(EventNotificationConfigOutput)
}

// The configuration for forwarding telemetry events.
type EventNotificationConfigResponse struct {
	// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
	// If the subfolder name matches this string exactly, this configuration will be used. The string must not include the leading '/' character. If empty, all strings are matched. This field is used only for telemetry events; subfolders are not supported for state changes.
	SubfolderMatches string `pulumi:"subfolderMatches"`
}

// The configuration for forwarding telemetry events.
type EventNotificationConfigResponseOutput struct{ *pulumi.OutputState }

func (EventNotificationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventNotificationConfigResponse)(nil)).Elem()
}

func (o EventNotificationConfigResponseOutput) ToEventNotificationConfigResponseOutput() EventNotificationConfigResponseOutput {
	return o
}

func (o EventNotificationConfigResponseOutput) ToEventNotificationConfigResponseOutputWithContext(ctx context.Context) EventNotificationConfigResponseOutput {
	return o
}

// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
func (o EventNotificationConfigResponseOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v EventNotificationConfigResponse) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

// If the subfolder name matches this string exactly, this configuration will be used. The string must not include the leading '/' character. If empty, all strings are matched. This field is used only for telemetry events; subfolders are not supported for state changes.
func (o EventNotificationConfigResponseOutput) SubfolderMatches() pulumi.StringOutput {
	return o.ApplyT(func(v EventNotificationConfigResponse) string { return v.SubfolderMatches }).(pulumi.StringOutput)
}

type EventNotificationConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (EventNotificationConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventNotificationConfigResponse)(nil)).Elem()
}

func (o EventNotificationConfigResponseArrayOutput) ToEventNotificationConfigResponseArrayOutput() EventNotificationConfigResponseArrayOutput {
	return o
}

func (o EventNotificationConfigResponseArrayOutput) ToEventNotificationConfigResponseArrayOutputWithContext(ctx context.Context) EventNotificationConfigResponseArrayOutput {
	return o
}

func (o EventNotificationConfigResponseArrayOutput) Index(i pulumi.IntInput) EventNotificationConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventNotificationConfigResponse {
		return vs[0].([]EventNotificationConfigResponse)[vs[1].(int)]
	}).(EventNotificationConfigResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Gateway-related configuration and state.
type GatewayConfig struct {
	// Indicates how to authorize and/or authenticate devices to access the gateway.
	GatewayAuthMethod *GatewayConfigGatewayAuthMethod `pulumi:"gatewayAuthMethod"`
	// Indicates whether the device is a gateway.
	GatewayType *GatewayConfigGatewayType `pulumi:"gatewayType"`
}

// GatewayConfigInput is an input type that accepts GatewayConfigArgs and GatewayConfigOutput values.
// You can construct a concrete instance of `GatewayConfigInput` via:
//
//	GatewayConfigArgs{...}
type GatewayConfigInput interface {
	pulumi.Input

	ToGatewayConfigOutput() GatewayConfigOutput
	ToGatewayConfigOutputWithContext(context.Context) GatewayConfigOutput
}

// Gateway-related configuration and state.
type GatewayConfigArgs struct {
	// Indicates how to authorize and/or authenticate devices to access the gateway.
	GatewayAuthMethod GatewayConfigGatewayAuthMethodPtrInput `pulumi:"gatewayAuthMethod"`
	// Indicates whether the device is a gateway.
	GatewayType GatewayConfigGatewayTypePtrInput `pulumi:"gatewayType"`
}

func (GatewayConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayConfig)(nil)).Elem()
}

func (i GatewayConfigArgs) ToGatewayConfigOutput() GatewayConfigOutput {
	return i.ToGatewayConfigOutputWithContext(context.Background())
}

func (i GatewayConfigArgs) ToGatewayConfigOutputWithContext(ctx context.Context) GatewayConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayConfigOutput)
}

func (i GatewayConfigArgs) ToGatewayConfigPtrOutput() GatewayConfigPtrOutput {
	return i.ToGatewayConfigPtrOutputWithContext(context.Background())
}

func (i GatewayConfigArgs) ToGatewayConfigPtrOutputWithContext(ctx context.Context) GatewayConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayConfigOutput).ToGatewayConfigPtrOutputWithContext(ctx)
}

// GatewayConfigPtrInput is an input type that accepts GatewayConfigArgs, GatewayConfigPtr and GatewayConfigPtrOutput values.
// You can construct a concrete instance of `GatewayConfigPtrInput` via:
//
//	        GatewayConfigArgs{...}
//
//	or:
//
//	        nil
type GatewayConfigPtrInput interface {
	pulumi.Input

	ToGatewayConfigPtrOutput() GatewayConfigPtrOutput
	ToGatewayConfigPtrOutputWithContext(context.Context) GatewayConfigPtrOutput
}

type gatewayConfigPtrType GatewayConfigArgs

func GatewayConfigPtr(v *GatewayConfigArgs) GatewayConfigPtrInput {
	return (*gatewayConfigPtrType)(v)
}

func (*gatewayConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayConfig)(nil)).Elem()
}

func (i *gatewayConfigPtrType) ToGatewayConfigPtrOutput() GatewayConfigPtrOutput {
	return i.ToGatewayConfigPtrOutputWithContext(context.Background())
}

func (i *gatewayConfigPtrType) ToGatewayConfigPtrOutputWithContext(ctx context.Context) GatewayConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayConfigPtrOutput)
}

// Gateway-related configuration and state.
type GatewayConfigOutput struct{ *pulumi.OutputState }

func (GatewayConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayConfig)(nil)).Elem()
}

func (o GatewayConfigOutput) ToGatewayConfigOutput() GatewayConfigOutput {
	return o
}

func (o GatewayConfigOutput) ToGatewayConfigOutputWithContext(ctx context.Context) GatewayConfigOutput {
	return o
}

func (o GatewayConfigOutput) ToGatewayConfigPtrOutput() GatewayConfigPtrOutput {
	return o.ToGatewayConfigPtrOutputWithContext(context.Background())
}

func (o GatewayConfigOutput) ToGatewayConfigPtrOutputWithContext(ctx context.Context) GatewayConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewayConfig) *GatewayConfig {
		return &v
	}).(GatewayConfigPtrOutput)
}

// Indicates how to authorize and/or authenticate devices to access the gateway.
func (o GatewayConfigOutput) GatewayAuthMethod() GatewayConfigGatewayAuthMethodPtrOutput {
	return o.ApplyT(func(v GatewayConfig) *GatewayConfigGatewayAuthMethod { return v.GatewayAuthMethod }).(GatewayConfigGatewayAuthMethodPtrOutput)
}

// Indicates whether the device is a gateway.
func (o GatewayConfigOutput) GatewayType() GatewayConfigGatewayTypePtrOutput {
	return o.ApplyT(func(v GatewayConfig) *GatewayConfigGatewayType { return v.GatewayType }).(GatewayConfigGatewayTypePtrOutput)
}

type GatewayConfigPtrOutput struct{ *pulumi.OutputState }

func (GatewayConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayConfig)(nil)).Elem()
}

func (o GatewayConfigPtrOutput) ToGatewayConfigPtrOutput() GatewayConfigPtrOutput {
	return o
}

func (o GatewayConfigPtrOutput) ToGatewayConfigPtrOutputWithContext(ctx context.Context) GatewayConfigPtrOutput {
	return o
}

func (o GatewayConfigPtrOutput) Elem() GatewayConfigOutput {
	return o.ApplyT(func(v *GatewayConfig) GatewayConfig {
		if v != nil {
			return *v
		}
		var ret GatewayConfig
		return ret
	}).(GatewayConfigOutput)
}

// Indicates how to authorize and/or authenticate devices to access the gateway.
func (o GatewayConfigPtrOutput) GatewayAuthMethod() GatewayConfigGatewayAuthMethodPtrOutput {
	return o.ApplyT(func(v *GatewayConfig) *GatewayConfigGatewayAuthMethod {
		if v == nil {
			return nil
		}
		return v.GatewayAuthMethod
	}).(GatewayConfigGatewayAuthMethodPtrOutput)
}

// Indicates whether the device is a gateway.
func (o GatewayConfigPtrOutput) GatewayType() GatewayConfigGatewayTypePtrOutput {
	return o.ApplyT(func(v *GatewayConfig) *GatewayConfigGatewayType {
		if v == nil {
			return nil
		}
		return v.GatewayType
	}).(GatewayConfigGatewayTypePtrOutput)
}

// Gateway-related configuration and state.
type GatewayConfigResponse struct {
	// Indicates how to authorize and/or authenticate devices to access the gateway.
	GatewayAuthMethod string `pulumi:"gatewayAuthMethod"`
	// Indicates whether the device is a gateway.
	GatewayType string `pulumi:"gatewayType"`
	// [Output only] The ID of the gateway the device accessed most recently.
	LastAccessedGatewayId string `pulumi:"lastAccessedGatewayId"`
	// [Output only] The most recent time at which the device accessed the gateway specified in `last_accessed_gateway`.
	LastAccessedGatewayTime string `pulumi:"lastAccessedGatewayTime"`
}

// Gateway-related configuration and state.
type GatewayConfigResponseOutput struct{ *pulumi.OutputState }

func (GatewayConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayConfigResponse)(nil)).Elem()
}

func (o GatewayConfigResponseOutput) ToGatewayConfigResponseOutput() GatewayConfigResponseOutput {
	return o
}

func (o GatewayConfigResponseOutput) ToGatewayConfigResponseOutputWithContext(ctx context.Context) GatewayConfigResponseOutput {
	return o
}

// Indicates how to authorize and/or authenticate devices to access the gateway.
func (o GatewayConfigResponseOutput) GatewayAuthMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayConfigResponse) string { return v.GatewayAuthMethod }).(pulumi.StringOutput)
}

// Indicates whether the device is a gateway.
func (o GatewayConfigResponseOutput) GatewayType() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayConfigResponse) string { return v.GatewayType }).(pulumi.StringOutput)
}

// [Output only] The ID of the gateway the device accessed most recently.
func (o GatewayConfigResponseOutput) LastAccessedGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayConfigResponse) string { return v.LastAccessedGatewayId }).(pulumi.StringOutput)
}

// [Output only] The most recent time at which the device accessed the gateway specified in `last_accessed_gateway`.
func (o GatewayConfigResponseOutput) LastAccessedGatewayTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayConfigResponse) string { return v.LastAccessedGatewayTime }).(pulumi.StringOutput)
}

// The configuration of the HTTP bridge for a device registry.
type HttpConfig struct {
	// If enabled, allows devices to use DeviceService via the HTTP protocol. Otherwise, any requests to DeviceService will fail for this registry.
	HttpEnabledState *HttpConfigHttpEnabledState `pulumi:"httpEnabledState"`
}

// HttpConfigInput is an input type that accepts HttpConfigArgs and HttpConfigOutput values.
// You can construct a concrete instance of `HttpConfigInput` via:
//
//	HttpConfigArgs{...}
type HttpConfigInput interface {
	pulumi.Input

	ToHttpConfigOutput() HttpConfigOutput
	ToHttpConfigOutputWithContext(context.Context) HttpConfigOutput
}

// The configuration of the HTTP bridge for a device registry.
type HttpConfigArgs struct {
	// If enabled, allows devices to use DeviceService via the HTTP protocol. Otherwise, any requests to DeviceService will fail for this registry.
	HttpEnabledState HttpConfigHttpEnabledStatePtrInput `pulumi:"httpEnabledState"`
}

func (HttpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpConfig)(nil)).Elem()
}

func (i HttpConfigArgs) ToHttpConfigOutput() HttpConfigOutput {
	return i.ToHttpConfigOutputWithContext(context.Background())
}

func (i HttpConfigArgs) ToHttpConfigOutputWithContext(ctx context.Context) HttpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpConfigOutput)
}

func (i HttpConfigArgs) ToHttpConfigPtrOutput() HttpConfigPtrOutput {
	return i.ToHttpConfigPtrOutputWithContext(context.Background())
}

func (i HttpConfigArgs) ToHttpConfigPtrOutputWithContext(ctx context.Context) HttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpConfigOutput).ToHttpConfigPtrOutputWithContext(ctx)
}

// HttpConfigPtrInput is an input type that accepts HttpConfigArgs, HttpConfigPtr and HttpConfigPtrOutput values.
// You can construct a concrete instance of `HttpConfigPtrInput` via:
//
//	        HttpConfigArgs{...}
//
//	or:
//
//	        nil
type HttpConfigPtrInput interface {
	pulumi.Input

	ToHttpConfigPtrOutput() HttpConfigPtrOutput
	ToHttpConfigPtrOutputWithContext(context.Context) HttpConfigPtrOutput
}

type httpConfigPtrType HttpConfigArgs

func HttpConfigPtr(v *HttpConfigArgs) HttpConfigPtrInput {
	return (*httpConfigPtrType)(v)
}

func (*httpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpConfig)(nil)).Elem()
}

func (i *httpConfigPtrType) ToHttpConfigPtrOutput() HttpConfigPtrOutput {
	return i.ToHttpConfigPtrOutputWithContext(context.Background())
}

func (i *httpConfigPtrType) ToHttpConfigPtrOutputWithContext(ctx context.Context) HttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpConfigPtrOutput)
}

// The configuration of the HTTP bridge for a device registry.
type HttpConfigOutput struct{ *pulumi.OutputState }

func (HttpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpConfig)(nil)).Elem()
}

func (o HttpConfigOutput) ToHttpConfigOutput() HttpConfigOutput {
	return o
}

func (o HttpConfigOutput) ToHttpConfigOutputWithContext(ctx context.Context) HttpConfigOutput {
	return o
}

func (o HttpConfigOutput) ToHttpConfigPtrOutput() HttpConfigPtrOutput {
	return o.ToHttpConfigPtrOutputWithContext(context.Background())
}

func (o HttpConfigOutput) ToHttpConfigPtrOutputWithContext(ctx context.Context) HttpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpConfig) *HttpConfig {
		return &v
	}).(HttpConfigPtrOutput)
}

// If enabled, allows devices to use DeviceService via the HTTP protocol. Otherwise, any requests to DeviceService will fail for this registry.
func (o HttpConfigOutput) HttpEnabledState() HttpConfigHttpEnabledStatePtrOutput {
	return o.ApplyT(func(v HttpConfig) *HttpConfigHttpEnabledState { return v.HttpEnabledState }).(HttpConfigHttpEnabledStatePtrOutput)
}

type HttpConfigPtrOutput struct{ *pulumi.OutputState }

func (HttpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpConfig)(nil)).Elem()
}

func (o HttpConfigPtrOutput) ToHttpConfigPtrOutput() HttpConfigPtrOutput {
	return o
}

func (o HttpConfigPtrOutput) ToHttpConfigPtrOutputWithContext(ctx context.Context) HttpConfigPtrOutput {
	return o
}

func (o HttpConfigPtrOutput) Elem() HttpConfigOutput {
	return o.ApplyT(func(v *HttpConfig) HttpConfig {
		if v != nil {
			return *v
		}
		var ret HttpConfig
		return ret
	}).(HttpConfigOutput)
}

// If enabled, allows devices to use DeviceService via the HTTP protocol. Otherwise, any requests to DeviceService will fail for this registry.
func (o HttpConfigPtrOutput) HttpEnabledState() HttpConfigHttpEnabledStatePtrOutput {
	return o.ApplyT(func(v *HttpConfig) *HttpConfigHttpEnabledState {
		if v == nil {
			return nil
		}
		return v.HttpEnabledState
	}).(HttpConfigHttpEnabledStatePtrOutput)
}

// The configuration of the HTTP bridge for a device registry.
type HttpConfigResponse struct {
	// If enabled, allows devices to use DeviceService via the HTTP protocol. Otherwise, any requests to DeviceService will fail for this registry.
	HttpEnabledState string `pulumi:"httpEnabledState"`
}

// The configuration of the HTTP bridge for a device registry.
type HttpConfigResponseOutput struct{ *pulumi.OutputState }

func (HttpConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpConfigResponse)(nil)).Elem()
}

func (o HttpConfigResponseOutput) ToHttpConfigResponseOutput() HttpConfigResponseOutput {
	return o
}

func (o HttpConfigResponseOutput) ToHttpConfigResponseOutputWithContext(ctx context.Context) HttpConfigResponseOutput {
	return o
}

// If enabled, allows devices to use DeviceService via the HTTP protocol. Otherwise, any requests to DeviceService will fail for this registry.
func (o HttpConfigResponseOutput) HttpEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v HttpConfigResponse) string { return v.HttpEnabledState }).(pulumi.StringOutput)
}

// The configuration of MQTT for a device registry.
type MqttConfig struct {
	// If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.
	MqttEnabledState *MqttConfigMqttEnabledState `pulumi:"mqttEnabledState"`
}

// MqttConfigInput is an input type that accepts MqttConfigArgs and MqttConfigOutput values.
// You can construct a concrete instance of `MqttConfigInput` via:
//
//	MqttConfigArgs{...}
type MqttConfigInput interface {
	pulumi.Input

	ToMqttConfigOutput() MqttConfigOutput
	ToMqttConfigOutputWithContext(context.Context) MqttConfigOutput
}

// The configuration of MQTT for a device registry.
type MqttConfigArgs struct {
	// If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.
	MqttEnabledState MqttConfigMqttEnabledStatePtrInput `pulumi:"mqttEnabledState"`
}

func (MqttConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttConfig)(nil)).Elem()
}

func (i MqttConfigArgs) ToMqttConfigOutput() MqttConfigOutput {
	return i.ToMqttConfigOutputWithContext(context.Background())
}

func (i MqttConfigArgs) ToMqttConfigOutputWithContext(ctx context.Context) MqttConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttConfigOutput)
}

func (i MqttConfigArgs) ToMqttConfigPtrOutput() MqttConfigPtrOutput {
	return i.ToMqttConfigPtrOutputWithContext(context.Background())
}

func (i MqttConfigArgs) ToMqttConfigPtrOutputWithContext(ctx context.Context) MqttConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttConfigOutput).ToMqttConfigPtrOutputWithContext(ctx)
}

// MqttConfigPtrInput is an input type that accepts MqttConfigArgs, MqttConfigPtr and MqttConfigPtrOutput values.
// You can construct a concrete instance of `MqttConfigPtrInput` via:
//
//	        MqttConfigArgs{...}
//
//	or:
//
//	        nil
type MqttConfigPtrInput interface {
	pulumi.Input

	ToMqttConfigPtrOutput() MqttConfigPtrOutput
	ToMqttConfigPtrOutputWithContext(context.Context) MqttConfigPtrOutput
}

type mqttConfigPtrType MqttConfigArgs

func MqttConfigPtr(v *MqttConfigArgs) MqttConfigPtrInput {
	return (*mqttConfigPtrType)(v)
}

func (*mqttConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttConfig)(nil)).Elem()
}

func (i *mqttConfigPtrType) ToMqttConfigPtrOutput() MqttConfigPtrOutput {
	return i.ToMqttConfigPtrOutputWithContext(context.Background())
}

func (i *mqttConfigPtrType) ToMqttConfigPtrOutputWithContext(ctx context.Context) MqttConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MqttConfigPtrOutput)
}

// The configuration of MQTT for a device registry.
type MqttConfigOutput struct{ *pulumi.OutputState }

func (MqttConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttConfig)(nil)).Elem()
}

func (o MqttConfigOutput) ToMqttConfigOutput() MqttConfigOutput {
	return o
}

func (o MqttConfigOutput) ToMqttConfigOutputWithContext(ctx context.Context) MqttConfigOutput {
	return o
}

func (o MqttConfigOutput) ToMqttConfigPtrOutput() MqttConfigPtrOutput {
	return o.ToMqttConfigPtrOutputWithContext(context.Background())
}

func (o MqttConfigOutput) ToMqttConfigPtrOutputWithContext(ctx context.Context) MqttConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MqttConfig) *MqttConfig {
		return &v
	}).(MqttConfigPtrOutput)
}

// If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.
func (o MqttConfigOutput) MqttEnabledState() MqttConfigMqttEnabledStatePtrOutput {
	return o.ApplyT(func(v MqttConfig) *MqttConfigMqttEnabledState { return v.MqttEnabledState }).(MqttConfigMqttEnabledStatePtrOutput)
}

type MqttConfigPtrOutput struct{ *pulumi.OutputState }

func (MqttConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MqttConfig)(nil)).Elem()
}

func (o MqttConfigPtrOutput) ToMqttConfigPtrOutput() MqttConfigPtrOutput {
	return o
}

func (o MqttConfigPtrOutput) ToMqttConfigPtrOutputWithContext(ctx context.Context) MqttConfigPtrOutput {
	return o
}

func (o MqttConfigPtrOutput) Elem() MqttConfigOutput {
	return o.ApplyT(func(v *MqttConfig) MqttConfig {
		if v != nil {
			return *v
		}
		var ret MqttConfig
		return ret
	}).(MqttConfigOutput)
}

// If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.
func (o MqttConfigPtrOutput) MqttEnabledState() MqttConfigMqttEnabledStatePtrOutput {
	return o.ApplyT(func(v *MqttConfig) *MqttConfigMqttEnabledState {
		if v == nil {
			return nil
		}
		return v.MqttEnabledState
	}).(MqttConfigMqttEnabledStatePtrOutput)
}

// The configuration of MQTT for a device registry.
type MqttConfigResponse struct {
	// If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.
	MqttEnabledState string `pulumi:"mqttEnabledState"`
}

// The configuration of MQTT for a device registry.
type MqttConfigResponseOutput struct{ *pulumi.OutputState }

func (MqttConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MqttConfigResponse)(nil)).Elem()
}

func (o MqttConfigResponseOutput) ToMqttConfigResponseOutput() MqttConfigResponseOutput {
	return o
}

func (o MqttConfigResponseOutput) ToMqttConfigResponseOutputWithContext(ctx context.Context) MqttConfigResponseOutput {
	return o
}

// If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.
func (o MqttConfigResponseOutput) MqttEnabledState() pulumi.StringOutput {
	return o.ApplyT(func(v MqttConfigResponse) string { return v.MqttEnabledState }).(pulumi.StringOutput)
}

// A public key certificate format and data.
type PublicKeyCertificate struct {
	// The certificate data.
	Certificate *string `pulumi:"certificate"`
	// The certificate format.
	Format *PublicKeyCertificateFormat `pulumi:"format"`
}

// PublicKeyCertificateInput is an input type that accepts PublicKeyCertificateArgs and PublicKeyCertificateOutput values.
// You can construct a concrete instance of `PublicKeyCertificateInput` via:
//
//	PublicKeyCertificateArgs{...}
type PublicKeyCertificateInput interface {
	pulumi.Input

	ToPublicKeyCertificateOutput() PublicKeyCertificateOutput
	ToPublicKeyCertificateOutputWithContext(context.Context) PublicKeyCertificateOutput
}

// A public key certificate format and data.
type PublicKeyCertificateArgs struct {
	// The certificate data.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// The certificate format.
	Format PublicKeyCertificateFormatPtrInput `pulumi:"format"`
}

func (PublicKeyCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKeyCertificate)(nil)).Elem()
}

func (i PublicKeyCertificateArgs) ToPublicKeyCertificateOutput() PublicKeyCertificateOutput {
	return i.ToPublicKeyCertificateOutputWithContext(context.Background())
}

func (i PublicKeyCertificateArgs) ToPublicKeyCertificateOutputWithContext(ctx context.Context) PublicKeyCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyCertificateOutput)
}

func (i PublicKeyCertificateArgs) ToPublicKeyCertificatePtrOutput() PublicKeyCertificatePtrOutput {
	return i.ToPublicKeyCertificatePtrOutputWithContext(context.Background())
}

func (i PublicKeyCertificateArgs) ToPublicKeyCertificatePtrOutputWithContext(ctx context.Context) PublicKeyCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyCertificateOutput).ToPublicKeyCertificatePtrOutputWithContext(ctx)
}

// PublicKeyCertificatePtrInput is an input type that accepts PublicKeyCertificateArgs, PublicKeyCertificatePtr and PublicKeyCertificatePtrOutput values.
// You can construct a concrete instance of `PublicKeyCertificatePtrInput` via:
//
//	        PublicKeyCertificateArgs{...}
//
//	or:
//
//	        nil
type PublicKeyCertificatePtrInput interface {
	pulumi.Input

	ToPublicKeyCertificatePtrOutput() PublicKeyCertificatePtrOutput
	ToPublicKeyCertificatePtrOutputWithContext(context.Context) PublicKeyCertificatePtrOutput
}

type publicKeyCertificatePtrType PublicKeyCertificateArgs

func PublicKeyCertificatePtr(v *PublicKeyCertificateArgs) PublicKeyCertificatePtrInput {
	return (*publicKeyCertificatePtrType)(v)
}

func (*publicKeyCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKeyCertificate)(nil)).Elem()
}

func (i *publicKeyCertificatePtrType) ToPublicKeyCertificatePtrOutput() PublicKeyCertificatePtrOutput {
	return i.ToPublicKeyCertificatePtrOutputWithContext(context.Background())
}

func (i *publicKeyCertificatePtrType) ToPublicKeyCertificatePtrOutputWithContext(ctx context.Context) PublicKeyCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyCertificatePtrOutput)
}

// A public key certificate format and data.
type PublicKeyCertificateOutput struct{ *pulumi.OutputState }

func (PublicKeyCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKeyCertificate)(nil)).Elem()
}

func (o PublicKeyCertificateOutput) ToPublicKeyCertificateOutput() PublicKeyCertificateOutput {
	return o
}

func (o PublicKeyCertificateOutput) ToPublicKeyCertificateOutputWithContext(ctx context.Context) PublicKeyCertificateOutput {
	return o
}

func (o PublicKeyCertificateOutput) ToPublicKeyCertificatePtrOutput() PublicKeyCertificatePtrOutput {
	return o.ToPublicKeyCertificatePtrOutputWithContext(context.Background())
}

func (o PublicKeyCertificateOutput) ToPublicKeyCertificatePtrOutputWithContext(ctx context.Context) PublicKeyCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicKeyCertificate) *PublicKeyCertificate {
		return &v
	}).(PublicKeyCertificatePtrOutput)
}

// The certificate data.
func (o PublicKeyCertificateOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicKeyCertificate) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The certificate format.
func (o PublicKeyCertificateOutput) Format() PublicKeyCertificateFormatPtrOutput {
	return o.ApplyT(func(v PublicKeyCertificate) *PublicKeyCertificateFormat { return v.Format }).(PublicKeyCertificateFormatPtrOutput)
}

type PublicKeyCertificatePtrOutput struct{ *pulumi.OutputState }

func (PublicKeyCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKeyCertificate)(nil)).Elem()
}

func (o PublicKeyCertificatePtrOutput) ToPublicKeyCertificatePtrOutput() PublicKeyCertificatePtrOutput {
	return o
}

func (o PublicKeyCertificatePtrOutput) ToPublicKeyCertificatePtrOutputWithContext(ctx context.Context) PublicKeyCertificatePtrOutput {
	return o
}

func (o PublicKeyCertificatePtrOutput) Elem() PublicKeyCertificateOutput {
	return o.ApplyT(func(v *PublicKeyCertificate) PublicKeyCertificate {
		if v != nil {
			return *v
		}
		var ret PublicKeyCertificate
		return ret
	}).(PublicKeyCertificateOutput)
}

// The certificate data.
func (o PublicKeyCertificatePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicKeyCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The certificate format.
func (o PublicKeyCertificatePtrOutput) Format() PublicKeyCertificateFormatPtrOutput {
	return o.ApplyT(func(v *PublicKeyCertificate) *PublicKeyCertificateFormat {
		if v == nil {
			return nil
		}
		return v.Format
	}).(PublicKeyCertificateFormatPtrOutput)
}

// A public key certificate format and data.
type PublicKeyCertificateResponse struct {
	// The certificate data.
	Certificate string `pulumi:"certificate"`
	// The certificate format.
	Format string `pulumi:"format"`
	// [Output only] The certificate details. Used only for X.509 certificates.
	X509Details X509CertificateDetailsResponse `pulumi:"x509Details"`
}

// A public key certificate format and data.
type PublicKeyCertificateResponseOutput struct{ *pulumi.OutputState }

func (PublicKeyCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKeyCertificateResponse)(nil)).Elem()
}

func (o PublicKeyCertificateResponseOutput) ToPublicKeyCertificateResponseOutput() PublicKeyCertificateResponseOutput {
	return o
}

func (o PublicKeyCertificateResponseOutput) ToPublicKeyCertificateResponseOutputWithContext(ctx context.Context) PublicKeyCertificateResponseOutput {
	return o
}

// The certificate data.
func (o PublicKeyCertificateResponseOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v PublicKeyCertificateResponse) string { return v.Certificate }).(pulumi.StringOutput)
}

// The certificate format.
func (o PublicKeyCertificateResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v PublicKeyCertificateResponse) string { return v.Format }).(pulumi.StringOutput)
}

// [Output only] The certificate details. Used only for X.509 certificates.
func (o PublicKeyCertificateResponseOutput) X509Details() X509CertificateDetailsResponseOutput {
	return o.ApplyT(func(v PublicKeyCertificateResponse) X509CertificateDetailsResponse { return v.X509Details }).(X509CertificateDetailsResponseOutput)
}

// A public key format and data.
type PublicKeyCredential struct {
	// The format of the key.
	Format *PublicKeyCredentialFormat `pulumi:"format"`
	// The key data.
	Key *string `pulumi:"key"`
}

// PublicKeyCredentialInput is an input type that accepts PublicKeyCredentialArgs and PublicKeyCredentialOutput values.
// You can construct a concrete instance of `PublicKeyCredentialInput` via:
//
//	PublicKeyCredentialArgs{...}
type PublicKeyCredentialInput interface {
	pulumi.Input

	ToPublicKeyCredentialOutput() PublicKeyCredentialOutput
	ToPublicKeyCredentialOutputWithContext(context.Context) PublicKeyCredentialOutput
}

// A public key format and data.
type PublicKeyCredentialArgs struct {
	// The format of the key.
	Format PublicKeyCredentialFormatPtrInput `pulumi:"format"`
	// The key data.
	Key pulumi.StringPtrInput `pulumi:"key"`
}

func (PublicKeyCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKeyCredential)(nil)).Elem()
}

func (i PublicKeyCredentialArgs) ToPublicKeyCredentialOutput() PublicKeyCredentialOutput {
	return i.ToPublicKeyCredentialOutputWithContext(context.Background())
}

func (i PublicKeyCredentialArgs) ToPublicKeyCredentialOutputWithContext(ctx context.Context) PublicKeyCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyCredentialOutput)
}

func (i PublicKeyCredentialArgs) ToPublicKeyCredentialPtrOutput() PublicKeyCredentialPtrOutput {
	return i.ToPublicKeyCredentialPtrOutputWithContext(context.Background())
}

func (i PublicKeyCredentialArgs) ToPublicKeyCredentialPtrOutputWithContext(ctx context.Context) PublicKeyCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyCredentialOutput).ToPublicKeyCredentialPtrOutputWithContext(ctx)
}

// PublicKeyCredentialPtrInput is an input type that accepts PublicKeyCredentialArgs, PublicKeyCredentialPtr and PublicKeyCredentialPtrOutput values.
// You can construct a concrete instance of `PublicKeyCredentialPtrInput` via:
//
//	        PublicKeyCredentialArgs{...}
//
//	or:
//
//	        nil
type PublicKeyCredentialPtrInput interface {
	pulumi.Input

	ToPublicKeyCredentialPtrOutput() PublicKeyCredentialPtrOutput
	ToPublicKeyCredentialPtrOutputWithContext(context.Context) PublicKeyCredentialPtrOutput
}

type publicKeyCredentialPtrType PublicKeyCredentialArgs

func PublicKeyCredentialPtr(v *PublicKeyCredentialArgs) PublicKeyCredentialPtrInput {
	return (*publicKeyCredentialPtrType)(v)
}

func (*publicKeyCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKeyCredential)(nil)).Elem()
}

func (i *publicKeyCredentialPtrType) ToPublicKeyCredentialPtrOutput() PublicKeyCredentialPtrOutput {
	return i.ToPublicKeyCredentialPtrOutputWithContext(context.Background())
}

func (i *publicKeyCredentialPtrType) ToPublicKeyCredentialPtrOutputWithContext(ctx context.Context) PublicKeyCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyCredentialPtrOutput)
}

// A public key format and data.
type PublicKeyCredentialOutput struct{ *pulumi.OutputState }

func (PublicKeyCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKeyCredential)(nil)).Elem()
}

func (o PublicKeyCredentialOutput) ToPublicKeyCredentialOutput() PublicKeyCredentialOutput {
	return o
}

func (o PublicKeyCredentialOutput) ToPublicKeyCredentialOutputWithContext(ctx context.Context) PublicKeyCredentialOutput {
	return o
}

func (o PublicKeyCredentialOutput) ToPublicKeyCredentialPtrOutput() PublicKeyCredentialPtrOutput {
	return o.ToPublicKeyCredentialPtrOutputWithContext(context.Background())
}

func (o PublicKeyCredentialOutput) ToPublicKeyCredentialPtrOutputWithContext(ctx context.Context) PublicKeyCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicKeyCredential) *PublicKeyCredential {
		return &v
	}).(PublicKeyCredentialPtrOutput)
}

// The format of the key.
func (o PublicKeyCredentialOutput) Format() PublicKeyCredentialFormatPtrOutput {
	return o.ApplyT(func(v PublicKeyCredential) *PublicKeyCredentialFormat { return v.Format }).(PublicKeyCredentialFormatPtrOutput)
}

// The key data.
func (o PublicKeyCredentialOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicKeyCredential) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type PublicKeyCredentialPtrOutput struct{ *pulumi.OutputState }

func (PublicKeyCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKeyCredential)(nil)).Elem()
}

func (o PublicKeyCredentialPtrOutput) ToPublicKeyCredentialPtrOutput() PublicKeyCredentialPtrOutput {
	return o
}

func (o PublicKeyCredentialPtrOutput) ToPublicKeyCredentialPtrOutputWithContext(ctx context.Context) PublicKeyCredentialPtrOutput {
	return o
}

func (o PublicKeyCredentialPtrOutput) Elem() PublicKeyCredentialOutput {
	return o.ApplyT(func(v *PublicKeyCredential) PublicKeyCredential {
		if v != nil {
			return *v
		}
		var ret PublicKeyCredential
		return ret
	}).(PublicKeyCredentialOutput)
}

// The format of the key.
func (o PublicKeyCredentialPtrOutput) Format() PublicKeyCredentialFormatPtrOutput {
	return o.ApplyT(func(v *PublicKeyCredential) *PublicKeyCredentialFormat {
		if v == nil {
			return nil
		}
		return v.Format
	}).(PublicKeyCredentialFormatPtrOutput)
}

// The key data.
func (o PublicKeyCredentialPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicKeyCredential) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// A public key format and data.
type PublicKeyCredentialResponse struct {
	// The format of the key.
	Format string `pulumi:"format"`
	// The key data.
	Key string `pulumi:"key"`
}

// A public key format and data.
type PublicKeyCredentialResponseOutput struct{ *pulumi.OutputState }

func (PublicKeyCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKeyCredentialResponse)(nil)).Elem()
}

func (o PublicKeyCredentialResponseOutput) ToPublicKeyCredentialResponseOutput() PublicKeyCredentialResponseOutput {
	return o
}

func (o PublicKeyCredentialResponseOutput) ToPublicKeyCredentialResponseOutputWithContext(ctx context.Context) PublicKeyCredentialResponseOutput {
	return o
}

// The format of the key.
func (o PublicKeyCredentialResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v PublicKeyCredentialResponse) string { return v.Format }).(pulumi.StringOutput)
}

// The key data.
func (o PublicKeyCredentialResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PublicKeyCredentialResponse) string { return v.Key }).(pulumi.StringOutput)
}

// A server-stored registry credential used to validate device credentials.
type RegistryCredential struct {
	// A public key certificate used to verify the device credentials.
	PublicKeyCertificate *PublicKeyCertificate `pulumi:"publicKeyCertificate"`
}

// RegistryCredentialInput is an input type that accepts RegistryCredentialArgs and RegistryCredentialOutput values.
// You can construct a concrete instance of `RegistryCredentialInput` via:
//
//	RegistryCredentialArgs{...}
type RegistryCredentialInput interface {
	pulumi.Input

	ToRegistryCredentialOutput() RegistryCredentialOutput
	ToRegistryCredentialOutputWithContext(context.Context) RegistryCredentialOutput
}

// A server-stored registry credential used to validate device credentials.
type RegistryCredentialArgs struct {
	// A public key certificate used to verify the device credentials.
	PublicKeyCertificate PublicKeyCertificatePtrInput `pulumi:"publicKeyCertificate"`
}

func (RegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return i.ToRegistryCredentialOutputWithContext(context.Background())
}

func (i RegistryCredentialArgs) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialOutput)
}

// RegistryCredentialArrayInput is an input type that accepts RegistryCredentialArray and RegistryCredentialArrayOutput values.
// You can construct a concrete instance of `RegistryCredentialArrayInput` via:
//
//	RegistryCredentialArray{ RegistryCredentialArgs{...} }
type RegistryCredentialArrayInput interface {
	pulumi.Input

	ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput
	ToRegistryCredentialArrayOutputWithContext(context.Context) RegistryCredentialArrayOutput
}

type RegistryCredentialArray []RegistryCredentialInput

func (RegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return i.ToRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i RegistryCredentialArray) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialArrayOutput)
}

// A server-stored registry credential used to validate device credentials.
type RegistryCredentialOutput struct{ *pulumi.OutputState }

func (RegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return o
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return o
}

// A public key certificate used to verify the device credentials.
func (o RegistryCredentialOutput) PublicKeyCertificate() PublicKeyCertificatePtrOutput {
	return o.ApplyT(func(v RegistryCredential) *PublicKeyCertificate { return v.PublicKeyCertificate }).(PublicKeyCertificatePtrOutput)
}

type RegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutput() RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) ToRegistryCredentialArrayOutputWithContext(ctx context.Context) RegistryCredentialArrayOutput {
	return o
}

func (o RegistryCredentialArrayOutput) Index(i pulumi.IntInput) RegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredential {
		return vs[0].([]RegistryCredential)[vs[1].(int)]
	}).(RegistryCredentialOutput)
}

// A server-stored registry credential used to validate device credentials.
type RegistryCredentialResponse struct {
	// A public key certificate used to verify the device credentials.
	PublicKeyCertificate PublicKeyCertificateResponse `pulumi:"publicKeyCertificate"`
}

// A server-stored registry credential used to validate device credentials.
type RegistryCredentialResponseOutput struct{ *pulumi.OutputState }

func (RegistryCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialResponse)(nil)).Elem()
}

func (o RegistryCredentialResponseOutput) ToRegistryCredentialResponseOutput() RegistryCredentialResponseOutput {
	return o
}

func (o RegistryCredentialResponseOutput) ToRegistryCredentialResponseOutputWithContext(ctx context.Context) RegistryCredentialResponseOutput {
	return o
}

// A public key certificate used to verify the device credentials.
func (o RegistryCredentialResponseOutput) PublicKeyCertificate() PublicKeyCertificateResponseOutput {
	return o.ApplyT(func(v RegistryCredentialResponse) PublicKeyCertificateResponse { return v.PublicKeyCertificate }).(PublicKeyCertificateResponseOutput)
}

type RegistryCredentialResponseArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredentialResponse)(nil)).Elem()
}

func (o RegistryCredentialResponseArrayOutput) ToRegistryCredentialResponseArrayOutput() RegistryCredentialResponseArrayOutput {
	return o
}

func (o RegistryCredentialResponseArrayOutput) ToRegistryCredentialResponseArrayOutputWithContext(ctx context.Context) RegistryCredentialResponseArrayOutput {
	return o
}

func (o RegistryCredentialResponseArrayOutput) Index(i pulumi.IntInput) RegistryCredentialResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredentialResponse {
		return vs[0].([]RegistryCredentialResponse)[vs[1].(int)]
	}).(RegistryCredentialResponseOutput)
}

// The configuration for notification of new states received from the device.
type StateNotificationConfig struct {
	// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
	PubsubTopicName *string `pulumi:"pubsubTopicName"`
}

// StateNotificationConfigInput is an input type that accepts StateNotificationConfigArgs and StateNotificationConfigOutput values.
// You can construct a concrete instance of `StateNotificationConfigInput` via:
//
//	StateNotificationConfigArgs{...}
type StateNotificationConfigInput interface {
	pulumi.Input

	ToStateNotificationConfigOutput() StateNotificationConfigOutput
	ToStateNotificationConfigOutputWithContext(context.Context) StateNotificationConfigOutput
}

// The configuration for notification of new states received from the device.
type StateNotificationConfigArgs struct {
	// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
	PubsubTopicName pulumi.StringPtrInput `pulumi:"pubsubTopicName"`
}

func (StateNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StateNotificationConfig)(nil)).Elem()
}

func (i StateNotificationConfigArgs) ToStateNotificationConfigOutput() StateNotificationConfigOutput {
	return i.ToStateNotificationConfigOutputWithContext(context.Background())
}

func (i StateNotificationConfigArgs) ToStateNotificationConfigOutputWithContext(ctx context.Context) StateNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateNotificationConfigOutput)
}

func (i StateNotificationConfigArgs) ToStateNotificationConfigPtrOutput() StateNotificationConfigPtrOutput {
	return i.ToStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (i StateNotificationConfigArgs) ToStateNotificationConfigPtrOutputWithContext(ctx context.Context) StateNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateNotificationConfigOutput).ToStateNotificationConfigPtrOutputWithContext(ctx)
}

// StateNotificationConfigPtrInput is an input type that accepts StateNotificationConfigArgs, StateNotificationConfigPtr and StateNotificationConfigPtrOutput values.
// You can construct a concrete instance of `StateNotificationConfigPtrInput` via:
//
//	        StateNotificationConfigArgs{...}
//
//	or:
//
//	        nil
type StateNotificationConfigPtrInput interface {
	pulumi.Input

	ToStateNotificationConfigPtrOutput() StateNotificationConfigPtrOutput
	ToStateNotificationConfigPtrOutputWithContext(context.Context) StateNotificationConfigPtrOutput
}

type stateNotificationConfigPtrType StateNotificationConfigArgs

func StateNotificationConfigPtr(v *StateNotificationConfigArgs) StateNotificationConfigPtrInput {
	return (*stateNotificationConfigPtrType)(v)
}

func (*stateNotificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StateNotificationConfig)(nil)).Elem()
}

func (i *stateNotificationConfigPtrType) ToStateNotificationConfigPtrOutput() StateNotificationConfigPtrOutput {
	return i.ToStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *stateNotificationConfigPtrType) ToStateNotificationConfigPtrOutputWithContext(ctx context.Context) StateNotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateNotificationConfigPtrOutput)
}

// The configuration for notification of new states received from the device.
type StateNotificationConfigOutput struct{ *pulumi.OutputState }

func (StateNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateNotificationConfig)(nil)).Elem()
}

func (o StateNotificationConfigOutput) ToStateNotificationConfigOutput() StateNotificationConfigOutput {
	return o
}

func (o StateNotificationConfigOutput) ToStateNotificationConfigOutputWithContext(ctx context.Context) StateNotificationConfigOutput {
	return o
}

func (o StateNotificationConfigOutput) ToStateNotificationConfigPtrOutput() StateNotificationConfigPtrOutput {
	return o.ToStateNotificationConfigPtrOutputWithContext(context.Background())
}

func (o StateNotificationConfigOutput) ToStateNotificationConfigPtrOutputWithContext(ctx context.Context) StateNotificationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StateNotificationConfig) *StateNotificationConfig {
		return &v
	}).(StateNotificationConfigPtrOutput)
}

// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
func (o StateNotificationConfigOutput) PubsubTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StateNotificationConfig) *string { return v.PubsubTopicName }).(pulumi.StringPtrOutput)
}

type StateNotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (StateNotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StateNotificationConfig)(nil)).Elem()
}

func (o StateNotificationConfigPtrOutput) ToStateNotificationConfigPtrOutput() StateNotificationConfigPtrOutput {
	return o
}

func (o StateNotificationConfigPtrOutput) ToStateNotificationConfigPtrOutputWithContext(ctx context.Context) StateNotificationConfigPtrOutput {
	return o
}

func (o StateNotificationConfigPtrOutput) Elem() StateNotificationConfigOutput {
	return o.ApplyT(func(v *StateNotificationConfig) StateNotificationConfig {
		if v != nil {
			return *v
		}
		var ret StateNotificationConfig
		return ret
	}).(StateNotificationConfigOutput)
}

// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
func (o StateNotificationConfigPtrOutput) PubsubTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StateNotificationConfig) *string {
		if v == nil {
			return nil
		}
		return v.PubsubTopicName
	}).(pulumi.StringPtrOutput)
}

// The configuration for notification of new states received from the device.
type StateNotificationConfigResponse struct {
	// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
	PubsubTopicName string `pulumi:"pubsubTopicName"`
}

// The configuration for notification of new states received from the device.
type StateNotificationConfigResponseOutput struct{ *pulumi.OutputState }

func (StateNotificationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateNotificationConfigResponse)(nil)).Elem()
}

func (o StateNotificationConfigResponseOutput) ToStateNotificationConfigResponseOutput() StateNotificationConfigResponseOutput {
	return o
}

func (o StateNotificationConfigResponseOutput) ToStateNotificationConfigResponseOutputWithContext(ctx context.Context) StateNotificationConfigResponseOutput {
	return o
}

// A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.
func (o StateNotificationConfigResponseOutput) PubsubTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v StateNotificationConfigResponse) string { return v.PubsubTopicName }).(pulumi.StringOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Details of an X.509 certificate. For informational purposes only.
type X509CertificateDetailsResponse struct {
	// The time the certificate becomes invalid.
	ExpiryTime string `pulumi:"expiryTime"`
	// The entity that signed the certificate.
	Issuer string `pulumi:"issuer"`
	// The type of public key in the certificate.
	PublicKeyType string `pulumi:"publicKeyType"`
	// The algorithm used to sign the certificate.
	SignatureAlgorithm string `pulumi:"signatureAlgorithm"`
	// The time the certificate becomes valid.
	StartTime string `pulumi:"startTime"`
	// The entity the certificate and public key belong to.
	Subject string `pulumi:"subject"`
}

// Details of an X.509 certificate. For informational purposes only.
type X509CertificateDetailsResponseOutput struct{ *pulumi.OutputState }

func (X509CertificateDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509CertificateDetailsResponse)(nil)).Elem()
}

func (o X509CertificateDetailsResponseOutput) ToX509CertificateDetailsResponseOutput() X509CertificateDetailsResponseOutput {
	return o
}

func (o X509CertificateDetailsResponseOutput) ToX509CertificateDetailsResponseOutputWithContext(ctx context.Context) X509CertificateDetailsResponseOutput {
	return o
}

// The time the certificate becomes invalid.
func (o X509CertificateDetailsResponseOutput) ExpiryTime() pulumi.StringOutput {
	return o.ApplyT(func(v X509CertificateDetailsResponse) string { return v.ExpiryTime }).(pulumi.StringOutput)
}

// The entity that signed the certificate.
func (o X509CertificateDetailsResponseOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v X509CertificateDetailsResponse) string { return v.Issuer }).(pulumi.StringOutput)
}

// The type of public key in the certificate.
func (o X509CertificateDetailsResponseOutput) PublicKeyType() pulumi.StringOutput {
	return o.ApplyT(func(v X509CertificateDetailsResponse) string { return v.PublicKeyType }).(pulumi.StringOutput)
}

// The algorithm used to sign the certificate.
func (o X509CertificateDetailsResponseOutput) SignatureAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v X509CertificateDetailsResponse) string { return v.SignatureAlgorithm }).(pulumi.StringOutput)
}

// The time the certificate becomes valid.
func (o X509CertificateDetailsResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v X509CertificateDetailsResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The entity the certificate and public key belong to.
func (o X509CertificateDetailsResponseOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v X509CertificateDetailsResponse) string { return v.Subject }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceConfigInput)(nil)).Elem(), DeviceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceConfigPtrInput)(nil)).Elem(), DeviceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceCredentialInput)(nil)).Elem(), DeviceCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceCredentialArrayInput)(nil)).Elem(), DeviceCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventNotificationConfigInput)(nil)).Elem(), EventNotificationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventNotificationConfigArrayInput)(nil)).Elem(), EventNotificationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayConfigInput)(nil)).Elem(), GatewayConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayConfigPtrInput)(nil)).Elem(), GatewayConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpConfigInput)(nil)).Elem(), HttpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpConfigPtrInput)(nil)).Elem(), HttpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MqttConfigInput)(nil)).Elem(), MqttConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MqttConfigPtrInput)(nil)).Elem(), MqttConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicKeyCertificateInput)(nil)).Elem(), PublicKeyCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicKeyCertificatePtrInput)(nil)).Elem(), PublicKeyCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicKeyCredentialInput)(nil)).Elem(), PublicKeyCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicKeyCredentialPtrInput)(nil)).Elem(), PublicKeyCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryCredentialInput)(nil)).Elem(), RegistryCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryCredentialArrayInput)(nil)).Elem(), RegistryCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateNotificationConfigInput)(nil)).Elem(), StateNotificationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateNotificationConfigPtrInput)(nil)).Elem(), StateNotificationConfigArgs{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(DeviceConfigOutput{})
	pulumi.RegisterOutputType(DeviceConfigPtrOutput{})
	pulumi.RegisterOutputType(DeviceConfigResponseOutput{})
	pulumi.RegisterOutputType(DeviceCredentialOutput{})
	pulumi.RegisterOutputType(DeviceCredentialArrayOutput{})
	pulumi.RegisterOutputType(DeviceCredentialResponseOutput{})
	pulumi.RegisterOutputType(DeviceCredentialResponseArrayOutput{})
	pulumi.RegisterOutputType(DeviceStateResponseOutput{})
	pulumi.RegisterOutputType(EventNotificationConfigOutput{})
	pulumi.RegisterOutputType(EventNotificationConfigArrayOutput{})
	pulumi.RegisterOutputType(EventNotificationConfigResponseOutput{})
	pulumi.RegisterOutputType(EventNotificationConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GatewayConfigOutput{})
	pulumi.RegisterOutputType(GatewayConfigPtrOutput{})
	pulumi.RegisterOutputType(GatewayConfigResponseOutput{})
	pulumi.RegisterOutputType(HttpConfigOutput{})
	pulumi.RegisterOutputType(HttpConfigPtrOutput{})
	pulumi.RegisterOutputType(HttpConfigResponseOutput{})
	pulumi.RegisterOutputType(MqttConfigOutput{})
	pulumi.RegisterOutputType(MqttConfigPtrOutput{})
	pulumi.RegisterOutputType(MqttConfigResponseOutput{})
	pulumi.RegisterOutputType(PublicKeyCertificateOutput{})
	pulumi.RegisterOutputType(PublicKeyCertificatePtrOutput{})
	pulumi.RegisterOutputType(PublicKeyCertificateResponseOutput{})
	pulumi.RegisterOutputType(PublicKeyCredentialOutput{})
	pulumi.RegisterOutputType(PublicKeyCredentialPtrOutput{})
	pulumi.RegisterOutputType(PublicKeyCredentialResponseOutput{})
	pulumi.RegisterOutputType(RegistryCredentialOutput{})
	pulumi.RegisterOutputType(RegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(RegistryCredentialResponseOutput{})
	pulumi.RegisterOutputType(RegistryCredentialResponseArrayOutput{})
	pulumi.RegisterOutputType(StateNotificationConfigOutput{})
	pulumi.RegisterOutputType(StateNotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(StateNotificationConfigResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(X509CertificateDetailsResponseOutput{})
}
