// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy.
type RegistryGroupIamPolicy struct {
	pulumi.CustomResourceState
}

// NewRegistryGroupIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegistryGroupIamPolicy(ctx *pulumi.Context,
	name string, args *RegistryGroupIamPolicyArgs, opts ...pulumi.ResourceOption) (*RegistryGroupIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupsId == nil {
		return nil, errors.New("invalid value for required argument 'GroupsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.RegistriesId == nil {
		return nil, errors.New("invalid value for required argument 'RegistriesId'")
	}
	var resource RegistryGroupIamPolicy
	err := ctx.RegisterResource("google-cloud:cloudiot/v1:RegistryGroupIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryGroupIamPolicy gets an existing RegistryGroupIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryGroupIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryGroupIamPolicyState, opts ...pulumi.ResourceOption) (*RegistryGroupIamPolicy, error) {
	var resource RegistryGroupIamPolicy
	err := ctx.ReadResource("google-cloud:cloudiot/v1:RegistryGroupIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryGroupIamPolicy resources.
type registryGroupIamPolicyState struct {
}

type RegistryGroupIamPolicyState struct {
}

func (RegistryGroupIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryGroupIamPolicyState)(nil)).Elem()
}

type registryGroupIamPolicyArgs struct {
	GroupsId    string `pulumi:"groupsId"`
	LocationsId string `pulumi:"locationsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy       *Policy `pulumi:"policy"`
	ProjectsId   string  `pulumi:"projectsId"`
	RegistriesId string  `pulumi:"registriesId"`
}

// The set of arguments for constructing a RegistryGroupIamPolicy resource.
type RegistryGroupIamPolicyArgs struct {
	GroupsId    pulumi.StringInput
	LocationsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy       PolicyPtrInput
	ProjectsId   pulumi.StringInput
	RegistriesId pulumi.StringInput
}

func (RegistryGroupIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryGroupIamPolicyArgs)(nil)).Elem()
}

type RegistryGroupIamPolicyInput interface {
	pulumi.Input

	ToRegistryGroupIamPolicyOutput() RegistryGroupIamPolicyOutput
	ToRegistryGroupIamPolicyOutputWithContext(ctx context.Context) RegistryGroupIamPolicyOutput
}

func (*RegistryGroupIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryGroupIamPolicy)(nil))
}

func (i *RegistryGroupIamPolicy) ToRegistryGroupIamPolicyOutput() RegistryGroupIamPolicyOutput {
	return i.ToRegistryGroupIamPolicyOutputWithContext(context.Background())
}

func (i *RegistryGroupIamPolicy) ToRegistryGroupIamPolicyOutputWithContext(ctx context.Context) RegistryGroupIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryGroupIamPolicyOutput)
}

type RegistryGroupIamPolicyOutput struct {
	*pulumi.OutputState
}

func (RegistryGroupIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryGroupIamPolicy)(nil))
}

func (o RegistryGroupIamPolicyOutput) ToRegistryGroupIamPolicyOutput() RegistryGroupIamPolicyOutput {
	return o
}

func (o RegistryGroupIamPolicyOutput) ToRegistryGroupIamPolicyOutputWithContext(ctx context.Context) RegistryGroupIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RegistryGroupIamPolicyOutput{})
}
