// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Dataset.
type Dataset struct {
	pulumi.CustomResourceState

	// Timestamp when this dataset was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The number of examples in the dataset.
	ExampleCount pulumi.IntOutput    `pulumi:"exampleCount"`
	Location     pulumi.StringOutput `pulumi:"location"`
	// The resource name of the dataset, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The BCP-47 language code of the source language.
	SourceLanguageCode pulumi.StringOutput `pulumi:"sourceLanguageCode"`
	// The BCP-47 language code of the target language.
	TargetLanguageCode pulumi.StringOutput `pulumi:"targetLanguageCode"`
	// Number of test examples (sentence pairs).
	TestExampleCount pulumi.IntOutput `pulumi:"testExampleCount"`
	// Number of training examples (sentence pairs).
	TrainExampleCount pulumi.IntOutput `pulumi:"trainExampleCount"`
	// Timestamp when this dataset was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Number of validation examples (sentence pairs).
	ValidateExampleCount pulumi.IntOutput `pulumi:"validateExampleCount"`
}

// NewDataset registers a new resource with the given unique name, arguments, and options.
func NewDataset(ctx *pulumi.Context,
	name string, args *DatasetArgs, opts ...pulumi.ResourceOption) (*Dataset, error) {
	if args == nil {
		args = &DatasetArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dataset
	err := ctx.RegisterResource("google-native:translate/v3:Dataset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataset gets an existing Dataset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetState, opts ...pulumi.ResourceOption) (*Dataset, error) {
	var resource Dataset
	err := ctx.ReadResource("google-native:translate/v3:Dataset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dataset resources.
type datasetState struct {
}

type DatasetState struct {
}

func (DatasetState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetState)(nil)).Elem()
}

type datasetArgs struct {
	// The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
	DisplayName *string `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	// The resource name of the dataset, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The BCP-47 language code of the source language.
	SourceLanguageCode *string `pulumi:"sourceLanguageCode"`
	// The BCP-47 language code of the target language.
	TargetLanguageCode *string `pulumi:"targetLanguageCode"`
}

// The set of arguments for constructing a Dataset resource.
type DatasetArgs struct {
	// The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
	DisplayName pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// The resource name of the dataset, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The BCP-47 language code of the source language.
	SourceLanguageCode pulumi.StringPtrInput
	// The BCP-47 language code of the target language.
	TargetLanguageCode pulumi.StringPtrInput
}

func (DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetArgs)(nil)).Elem()
}

type DatasetInput interface {
	pulumi.Input

	ToDatasetOutput() DatasetOutput
	ToDatasetOutputWithContext(ctx context.Context) DatasetOutput
}

func (*Dataset) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (i *Dataset) ToDatasetOutput() DatasetOutput {
	return i.ToDatasetOutputWithContext(context.Background())
}

func (i *Dataset) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetOutput)
}

type DatasetOutput struct{ *pulumi.OutputState }

func (DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dataset)(nil)).Elem()
}

func (o DatasetOutput) ToDatasetOutput() DatasetOutput {
	return o
}

func (o DatasetOutput) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return o
}

// Timestamp when this dataset was created.
func (o DatasetOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
func (o DatasetOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The number of examples in the dataset.
func (o DatasetOutput) ExampleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Dataset) pulumi.IntOutput { return v.ExampleCount }).(pulumi.IntOutput)
}

func (o DatasetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the dataset, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
func (o DatasetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatasetOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The BCP-47 language code of the source language.
func (o DatasetOutput) SourceLanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.SourceLanguageCode }).(pulumi.StringOutput)
}

// The BCP-47 language code of the target language.
func (o DatasetOutput) TargetLanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.TargetLanguageCode }).(pulumi.StringOutput)
}

// Number of test examples (sentence pairs).
func (o DatasetOutput) TestExampleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Dataset) pulumi.IntOutput { return v.TestExampleCount }).(pulumi.IntOutput)
}

// Number of training examples (sentence pairs).
func (o DatasetOutput) TrainExampleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Dataset) pulumi.IntOutput { return v.TrainExampleCount }).(pulumi.IntOutput)
}

// Timestamp when this dataset was last updated.
func (o DatasetOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dataset) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Number of validation examples (sentence pairs).
func (o DatasetOutput) ValidateExampleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Dataset) pulumi.IntOutput { return v.ValidateExampleCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetInput)(nil)).Elem(), &Dataset{})
	pulumi.RegisterOutputType(DatasetOutput{})
}
