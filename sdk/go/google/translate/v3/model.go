// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Model.
type Model struct {
	pulumi.CustomResourceState

	// Timestamp when the model resource was created, which is also when the training started.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The dataset from which the model is trained, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// The resource name of the model, in form of `projects/{project-number-or-id}/locations/{location_id}/models/{model_id}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The BCP-47 language code of the source language.
	SourceLanguageCode pulumi.StringOutput `pulumi:"sourceLanguageCode"`
	// The BCP-47 language code of the target language.
	TargetLanguageCode pulumi.StringOutput `pulumi:"targetLanguageCode"`
	// Number of examples (sentence pairs) used to test the model.
	TestExampleCount pulumi.IntOutput `pulumi:"testExampleCount"`
	// Number of examples (sentence pairs) used to train the model.
	TrainExampleCount pulumi.IntOutput `pulumi:"trainExampleCount"`
	// Timestamp when this model was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Number of examples (sentence pairs) used to validate the model.
	ValidateExampleCount pulumi.IntOutput `pulumi:"validateExampleCount"`
}

// NewModel registers a new resource with the given unique name, arguments, and options.
func NewModel(ctx *pulumi.Context,
	name string, args *ModelArgs, opts ...pulumi.ResourceOption) (*Model, error) {
	if args == nil {
		args = &ModelArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource Model
	err := ctx.RegisterResource("google-native:translate/v3:Model", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModel gets an existing Model resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelState, opts ...pulumi.ResourceOption) (*Model, error) {
	var resource Model
	err := ctx.ReadResource("google-native:translate/v3:Model", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Model resources.
type modelState struct {
}

type ModelState struct {
}

func (ModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelState)(nil)).Elem()
}

type modelArgs struct {
	// The dataset from which the model is trained, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
	Dataset *string `pulumi:"dataset"`
	// The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
	DisplayName *string `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	// The resource name of the model, in form of `projects/{project-number-or-id}/locations/{location_id}/models/{model_id}`
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Model resource.
type ModelArgs struct {
	// The dataset from which the model is trained, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
	Dataset pulumi.StringPtrInput
	// The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
	DisplayName pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// The resource name of the model, in form of `projects/{project-number-or-id}/locations/{location_id}/models/{model_id}`
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (ModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelArgs)(nil)).Elem()
}

type ModelInput interface {
	pulumi.Input

	ToModelOutput() ModelOutput
	ToModelOutputWithContext(ctx context.Context) ModelOutput
}

func (*Model) ElementType() reflect.Type {
	return reflect.TypeOf((**Model)(nil)).Elem()
}

func (i *Model) ToModelOutput() ModelOutput {
	return i.ToModelOutputWithContext(context.Background())
}

func (i *Model) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelOutput)
}

type ModelOutput struct{ *pulumi.OutputState }

func (ModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Model)(nil)).Elem()
}

func (o ModelOutput) ToModelOutput() ModelOutput {
	return o
}

func (o ModelOutput) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return o
}

// Timestamp when the model resource was created, which is also when the training started.
func (o ModelOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The dataset from which the model is trained, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
func (o ModelOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
func (o ModelOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o ModelOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the model, in form of `projects/{project-number-or-id}/locations/{location_id}/models/{model_id}`
func (o ModelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ModelOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The BCP-47 language code of the source language.
func (o ModelOutput) SourceLanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.SourceLanguageCode }).(pulumi.StringOutput)
}

// The BCP-47 language code of the target language.
func (o ModelOutput) TargetLanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.TargetLanguageCode }).(pulumi.StringOutput)
}

// Number of examples (sentence pairs) used to test the model.
func (o ModelOutput) TestExampleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Model) pulumi.IntOutput { return v.TestExampleCount }).(pulumi.IntOutput)
}

// Number of examples (sentence pairs) used to train the model.
func (o ModelOutput) TrainExampleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Model) pulumi.IntOutput { return v.TrainExampleCount }).(pulumi.IntOutput)
}

// Timestamp when this model was last updated.
func (o ModelOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Number of examples (sentence pairs) used to validate the model.
func (o ModelOutput) ValidateExampleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Model) pulumi.IntOutput { return v.ValidateExampleCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelInput)(nil)).Elem(), &Model{})
	pulumi.RegisterOutputType(ModelOutput{})
}
