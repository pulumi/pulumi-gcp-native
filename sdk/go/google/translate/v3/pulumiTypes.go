// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Google Cloud Storage location for the input content.
type GcsSource struct {
	// Source data URI. For example, `gs://my_bucket/my_object`.
	InputUri string `pulumi:"inputUri"`
}

// GcsSourceInput is an input type that accepts GcsSourceArgs and GcsSourceOutput values.
// You can construct a concrete instance of `GcsSourceInput` via:
//
//          GcsSourceArgs{...}
type GcsSourceInput interface {
	pulumi.Input

	ToGcsSourceOutput() GcsSourceOutput
	ToGcsSourceOutputWithContext(context.Context) GcsSourceOutput
}

// The Google Cloud Storage location for the input content.
type GcsSourceArgs struct {
	// Source data URI. For example, `gs://my_bucket/my_object`.
	InputUri pulumi.StringInput `pulumi:"inputUri"`
}

func (GcsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsSource)(nil)).Elem()
}

func (i GcsSourceArgs) ToGcsSourceOutput() GcsSourceOutput {
	return i.ToGcsSourceOutputWithContext(context.Background())
}

func (i GcsSourceArgs) ToGcsSourceOutputWithContext(ctx context.Context) GcsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsSourceOutput)
}

func (i GcsSourceArgs) ToGcsSourcePtrOutput() GcsSourcePtrOutput {
	return i.ToGcsSourcePtrOutputWithContext(context.Background())
}

func (i GcsSourceArgs) ToGcsSourcePtrOutputWithContext(ctx context.Context) GcsSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsSourceOutput).ToGcsSourcePtrOutputWithContext(ctx)
}

// GcsSourcePtrInput is an input type that accepts GcsSourceArgs, GcsSourcePtr and GcsSourcePtrOutput values.
// You can construct a concrete instance of `GcsSourcePtrInput` via:
//
//          GcsSourceArgs{...}
//
//  or:
//
//          nil
type GcsSourcePtrInput interface {
	pulumi.Input

	ToGcsSourcePtrOutput() GcsSourcePtrOutput
	ToGcsSourcePtrOutputWithContext(context.Context) GcsSourcePtrOutput
}

type gcsSourcePtrType GcsSourceArgs

func GcsSourcePtr(v *GcsSourceArgs) GcsSourcePtrInput {
	return (*gcsSourcePtrType)(v)
}

func (*gcsSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsSource)(nil)).Elem()
}

func (i *gcsSourcePtrType) ToGcsSourcePtrOutput() GcsSourcePtrOutput {
	return i.ToGcsSourcePtrOutputWithContext(context.Background())
}

func (i *gcsSourcePtrType) ToGcsSourcePtrOutputWithContext(ctx context.Context) GcsSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsSourcePtrOutput)
}

// The Google Cloud Storage location for the input content.
type GcsSourceOutput struct{ *pulumi.OutputState }

func (GcsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsSource)(nil)).Elem()
}

func (o GcsSourceOutput) ToGcsSourceOutput() GcsSourceOutput {
	return o
}

func (o GcsSourceOutput) ToGcsSourceOutputWithContext(ctx context.Context) GcsSourceOutput {
	return o
}

func (o GcsSourceOutput) ToGcsSourcePtrOutput() GcsSourcePtrOutput {
	return o.ToGcsSourcePtrOutputWithContext(context.Background())
}

func (o GcsSourceOutput) ToGcsSourcePtrOutputWithContext(ctx context.Context) GcsSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsSource) *GcsSource {
		return &v
	}).(GcsSourcePtrOutput)
}

// Source data URI. For example, `gs://my_bucket/my_object`.
func (o GcsSourceOutput) InputUri() pulumi.StringOutput {
	return o.ApplyT(func(v GcsSource) string { return v.InputUri }).(pulumi.StringOutput)
}

type GcsSourcePtrOutput struct{ *pulumi.OutputState }

func (GcsSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsSource)(nil)).Elem()
}

func (o GcsSourcePtrOutput) ToGcsSourcePtrOutput() GcsSourcePtrOutput {
	return o
}

func (o GcsSourcePtrOutput) ToGcsSourcePtrOutputWithContext(ctx context.Context) GcsSourcePtrOutput {
	return o
}

func (o GcsSourcePtrOutput) Elem() GcsSourceOutput {
	return o.ApplyT(func(v *GcsSource) GcsSource {
		if v != nil {
			return *v
		}
		var ret GcsSource
		return ret
	}).(GcsSourceOutput)
}

// Source data URI. For example, `gs://my_bucket/my_object`.
func (o GcsSourcePtrOutput) InputUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsSource) *string {
		if v == nil {
			return nil
		}
		return &v.InputUri
	}).(pulumi.StringPtrOutput)
}

// The Google Cloud Storage location for the input content.
type GcsSourceResponse struct {
	// Source data URI. For example, `gs://my_bucket/my_object`.
	InputUri string `pulumi:"inputUri"`
}

// GcsSourceResponseInput is an input type that accepts GcsSourceResponseArgs and GcsSourceResponseOutput values.
// You can construct a concrete instance of `GcsSourceResponseInput` via:
//
//          GcsSourceResponseArgs{...}
type GcsSourceResponseInput interface {
	pulumi.Input

	ToGcsSourceResponseOutput() GcsSourceResponseOutput
	ToGcsSourceResponseOutputWithContext(context.Context) GcsSourceResponseOutput
}

// The Google Cloud Storage location for the input content.
type GcsSourceResponseArgs struct {
	// Source data URI. For example, `gs://my_bucket/my_object`.
	InputUri pulumi.StringInput `pulumi:"inputUri"`
}

func (GcsSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsSourceResponse)(nil)).Elem()
}

func (i GcsSourceResponseArgs) ToGcsSourceResponseOutput() GcsSourceResponseOutput {
	return i.ToGcsSourceResponseOutputWithContext(context.Background())
}

func (i GcsSourceResponseArgs) ToGcsSourceResponseOutputWithContext(ctx context.Context) GcsSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsSourceResponseOutput)
}

func (i GcsSourceResponseArgs) ToGcsSourceResponsePtrOutput() GcsSourceResponsePtrOutput {
	return i.ToGcsSourceResponsePtrOutputWithContext(context.Background())
}

func (i GcsSourceResponseArgs) ToGcsSourceResponsePtrOutputWithContext(ctx context.Context) GcsSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsSourceResponseOutput).ToGcsSourceResponsePtrOutputWithContext(ctx)
}

// GcsSourceResponsePtrInput is an input type that accepts GcsSourceResponseArgs, GcsSourceResponsePtr and GcsSourceResponsePtrOutput values.
// You can construct a concrete instance of `GcsSourceResponsePtrInput` via:
//
//          GcsSourceResponseArgs{...}
//
//  or:
//
//          nil
type GcsSourceResponsePtrInput interface {
	pulumi.Input

	ToGcsSourceResponsePtrOutput() GcsSourceResponsePtrOutput
	ToGcsSourceResponsePtrOutputWithContext(context.Context) GcsSourceResponsePtrOutput
}

type gcsSourceResponsePtrType GcsSourceResponseArgs

func GcsSourceResponsePtr(v *GcsSourceResponseArgs) GcsSourceResponsePtrInput {
	return (*gcsSourceResponsePtrType)(v)
}

func (*gcsSourceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsSourceResponse)(nil)).Elem()
}

func (i *gcsSourceResponsePtrType) ToGcsSourceResponsePtrOutput() GcsSourceResponsePtrOutput {
	return i.ToGcsSourceResponsePtrOutputWithContext(context.Background())
}

func (i *gcsSourceResponsePtrType) ToGcsSourceResponsePtrOutputWithContext(ctx context.Context) GcsSourceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsSourceResponsePtrOutput)
}

// The Google Cloud Storage location for the input content.
type GcsSourceResponseOutput struct{ *pulumi.OutputState }

func (GcsSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsSourceResponse)(nil)).Elem()
}

func (o GcsSourceResponseOutput) ToGcsSourceResponseOutput() GcsSourceResponseOutput {
	return o
}

func (o GcsSourceResponseOutput) ToGcsSourceResponseOutputWithContext(ctx context.Context) GcsSourceResponseOutput {
	return o
}

func (o GcsSourceResponseOutput) ToGcsSourceResponsePtrOutput() GcsSourceResponsePtrOutput {
	return o.ToGcsSourceResponsePtrOutputWithContext(context.Background())
}

func (o GcsSourceResponseOutput) ToGcsSourceResponsePtrOutputWithContext(ctx context.Context) GcsSourceResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsSourceResponse) *GcsSourceResponse {
		return &v
	}).(GcsSourceResponsePtrOutput)
}

// Source data URI. For example, `gs://my_bucket/my_object`.
func (o GcsSourceResponseOutput) InputUri() pulumi.StringOutput {
	return o.ApplyT(func(v GcsSourceResponse) string { return v.InputUri }).(pulumi.StringOutput)
}

type GcsSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (GcsSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsSourceResponse)(nil)).Elem()
}

func (o GcsSourceResponsePtrOutput) ToGcsSourceResponsePtrOutput() GcsSourceResponsePtrOutput {
	return o
}

func (o GcsSourceResponsePtrOutput) ToGcsSourceResponsePtrOutputWithContext(ctx context.Context) GcsSourceResponsePtrOutput {
	return o
}

func (o GcsSourceResponsePtrOutput) Elem() GcsSourceResponseOutput {
	return o.ApplyT(func(v *GcsSourceResponse) GcsSourceResponse {
		if v != nil {
			return *v
		}
		var ret GcsSourceResponse
		return ret
	}).(GcsSourceResponseOutput)
}

// Source data URI. For example, `gs://my_bucket/my_object`.
func (o GcsSourceResponsePtrOutput) InputUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InputUri
	}).(pulumi.StringPtrOutput)
}

// Input configuration for glossaries.
type GlossaryInputConfig struct {
	// Google Cloud Storage location of glossary data. File format is determined based on the filename extension. API returns [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file formats. Wildcards are not allowed. This must be a single file in one of the following formats: For unidirectional glossaries: - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated. The first column is source text. The second column is target text. The file must not contain headers. That is, the first row is data, not column names. - TMX (`.tmx`): TMX file with parallel data defining source/target term pairs. For equivalent term sets glossaries: - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms in multiple languages. See documentation for more information - [glossaries](https://cloud.google.com/translate/docs/advanced/glossary).
	GcsSource GcsSource `pulumi:"gcsSource"`
}

// GlossaryInputConfigInput is an input type that accepts GlossaryInputConfigArgs and GlossaryInputConfigOutput values.
// You can construct a concrete instance of `GlossaryInputConfigInput` via:
//
//          GlossaryInputConfigArgs{...}
type GlossaryInputConfigInput interface {
	pulumi.Input

	ToGlossaryInputConfigOutput() GlossaryInputConfigOutput
	ToGlossaryInputConfigOutputWithContext(context.Context) GlossaryInputConfigOutput
}

// Input configuration for glossaries.
type GlossaryInputConfigArgs struct {
	// Google Cloud Storage location of glossary data. File format is determined based on the filename extension. API returns [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file formats. Wildcards are not allowed. This must be a single file in one of the following formats: For unidirectional glossaries: - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated. The first column is source text. The second column is target text. The file must not contain headers. That is, the first row is data, not column names. - TMX (`.tmx`): TMX file with parallel data defining source/target term pairs. For equivalent term sets glossaries: - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms in multiple languages. See documentation for more information - [glossaries](https://cloud.google.com/translate/docs/advanced/glossary).
	GcsSource GcsSourceInput `pulumi:"gcsSource"`
}

func (GlossaryInputConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlossaryInputConfig)(nil)).Elem()
}

func (i GlossaryInputConfigArgs) ToGlossaryInputConfigOutput() GlossaryInputConfigOutput {
	return i.ToGlossaryInputConfigOutputWithContext(context.Background())
}

func (i GlossaryInputConfigArgs) ToGlossaryInputConfigOutputWithContext(ctx context.Context) GlossaryInputConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryInputConfigOutput)
}

func (i GlossaryInputConfigArgs) ToGlossaryInputConfigPtrOutput() GlossaryInputConfigPtrOutput {
	return i.ToGlossaryInputConfigPtrOutputWithContext(context.Background())
}

func (i GlossaryInputConfigArgs) ToGlossaryInputConfigPtrOutputWithContext(ctx context.Context) GlossaryInputConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryInputConfigOutput).ToGlossaryInputConfigPtrOutputWithContext(ctx)
}

// GlossaryInputConfigPtrInput is an input type that accepts GlossaryInputConfigArgs, GlossaryInputConfigPtr and GlossaryInputConfigPtrOutput values.
// You can construct a concrete instance of `GlossaryInputConfigPtrInput` via:
//
//          GlossaryInputConfigArgs{...}
//
//  or:
//
//          nil
type GlossaryInputConfigPtrInput interface {
	pulumi.Input

	ToGlossaryInputConfigPtrOutput() GlossaryInputConfigPtrOutput
	ToGlossaryInputConfigPtrOutputWithContext(context.Context) GlossaryInputConfigPtrOutput
}

type glossaryInputConfigPtrType GlossaryInputConfigArgs

func GlossaryInputConfigPtr(v *GlossaryInputConfigArgs) GlossaryInputConfigPtrInput {
	return (*glossaryInputConfigPtrType)(v)
}

func (*glossaryInputConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryInputConfig)(nil)).Elem()
}

func (i *glossaryInputConfigPtrType) ToGlossaryInputConfigPtrOutput() GlossaryInputConfigPtrOutput {
	return i.ToGlossaryInputConfigPtrOutputWithContext(context.Background())
}

func (i *glossaryInputConfigPtrType) ToGlossaryInputConfigPtrOutputWithContext(ctx context.Context) GlossaryInputConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryInputConfigPtrOutput)
}

// Input configuration for glossaries.
type GlossaryInputConfigOutput struct{ *pulumi.OutputState }

func (GlossaryInputConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlossaryInputConfig)(nil)).Elem()
}

func (o GlossaryInputConfigOutput) ToGlossaryInputConfigOutput() GlossaryInputConfigOutput {
	return o
}

func (o GlossaryInputConfigOutput) ToGlossaryInputConfigOutputWithContext(ctx context.Context) GlossaryInputConfigOutput {
	return o
}

func (o GlossaryInputConfigOutput) ToGlossaryInputConfigPtrOutput() GlossaryInputConfigPtrOutput {
	return o.ToGlossaryInputConfigPtrOutputWithContext(context.Background())
}

func (o GlossaryInputConfigOutput) ToGlossaryInputConfigPtrOutputWithContext(ctx context.Context) GlossaryInputConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlossaryInputConfig) *GlossaryInputConfig {
		return &v
	}).(GlossaryInputConfigPtrOutput)
}

// Google Cloud Storage location of glossary data. File format is determined based on the filename extension. API returns [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file formats. Wildcards are not allowed. This must be a single file in one of the following formats: For unidirectional glossaries: - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated. The first column is source text. The second column is target text. The file must not contain headers. That is, the first row is data, not column names. - TMX (`.tmx`): TMX file with parallel data defining source/target term pairs. For equivalent term sets glossaries: - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms in multiple languages. See documentation for more information - [glossaries](https://cloud.google.com/translate/docs/advanced/glossary).
func (o GlossaryInputConfigOutput) GcsSource() GcsSourceOutput {
	return o.ApplyT(func(v GlossaryInputConfig) GcsSource { return v.GcsSource }).(GcsSourceOutput)
}

type GlossaryInputConfigPtrOutput struct{ *pulumi.OutputState }

func (GlossaryInputConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryInputConfig)(nil)).Elem()
}

func (o GlossaryInputConfigPtrOutput) ToGlossaryInputConfigPtrOutput() GlossaryInputConfigPtrOutput {
	return o
}

func (o GlossaryInputConfigPtrOutput) ToGlossaryInputConfigPtrOutputWithContext(ctx context.Context) GlossaryInputConfigPtrOutput {
	return o
}

func (o GlossaryInputConfigPtrOutput) Elem() GlossaryInputConfigOutput {
	return o.ApplyT(func(v *GlossaryInputConfig) GlossaryInputConfig {
		if v != nil {
			return *v
		}
		var ret GlossaryInputConfig
		return ret
	}).(GlossaryInputConfigOutput)
}

// Google Cloud Storage location of glossary data. File format is determined based on the filename extension. API returns [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file formats. Wildcards are not allowed. This must be a single file in one of the following formats: For unidirectional glossaries: - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated. The first column is source text. The second column is target text. The file must not contain headers. That is, the first row is data, not column names. - TMX (`.tmx`): TMX file with parallel data defining source/target term pairs. For equivalent term sets glossaries: - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms in multiple languages. See documentation for more information - [glossaries](https://cloud.google.com/translate/docs/advanced/glossary).
func (o GlossaryInputConfigPtrOutput) GcsSource() GcsSourcePtrOutput {
	return o.ApplyT(func(v *GlossaryInputConfig) *GcsSource {
		if v == nil {
			return nil
		}
		return &v.GcsSource
	}).(GcsSourcePtrOutput)
}

// Input configuration for glossaries.
type GlossaryInputConfigResponse struct {
	// Google Cloud Storage location of glossary data. File format is determined based on the filename extension. API returns [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file formats. Wildcards are not allowed. This must be a single file in one of the following formats: For unidirectional glossaries: - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated. The first column is source text. The second column is target text. The file must not contain headers. That is, the first row is data, not column names. - TMX (`.tmx`): TMX file with parallel data defining source/target term pairs. For equivalent term sets glossaries: - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms in multiple languages. See documentation for more information - [glossaries](https://cloud.google.com/translate/docs/advanced/glossary).
	GcsSource GcsSourceResponse `pulumi:"gcsSource"`
}

// GlossaryInputConfigResponseInput is an input type that accepts GlossaryInputConfigResponseArgs and GlossaryInputConfigResponseOutput values.
// You can construct a concrete instance of `GlossaryInputConfigResponseInput` via:
//
//          GlossaryInputConfigResponseArgs{...}
type GlossaryInputConfigResponseInput interface {
	pulumi.Input

	ToGlossaryInputConfigResponseOutput() GlossaryInputConfigResponseOutput
	ToGlossaryInputConfigResponseOutputWithContext(context.Context) GlossaryInputConfigResponseOutput
}

// Input configuration for glossaries.
type GlossaryInputConfigResponseArgs struct {
	// Google Cloud Storage location of glossary data. File format is determined based on the filename extension. API returns [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file formats. Wildcards are not allowed. This must be a single file in one of the following formats: For unidirectional glossaries: - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated. The first column is source text. The second column is target text. The file must not contain headers. That is, the first row is data, not column names. - TMX (`.tmx`): TMX file with parallel data defining source/target term pairs. For equivalent term sets glossaries: - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms in multiple languages. See documentation for more information - [glossaries](https://cloud.google.com/translate/docs/advanced/glossary).
	GcsSource GcsSourceResponseInput `pulumi:"gcsSource"`
}

func (GlossaryInputConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlossaryInputConfigResponse)(nil)).Elem()
}

func (i GlossaryInputConfigResponseArgs) ToGlossaryInputConfigResponseOutput() GlossaryInputConfigResponseOutput {
	return i.ToGlossaryInputConfigResponseOutputWithContext(context.Background())
}

func (i GlossaryInputConfigResponseArgs) ToGlossaryInputConfigResponseOutputWithContext(ctx context.Context) GlossaryInputConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryInputConfigResponseOutput)
}

func (i GlossaryInputConfigResponseArgs) ToGlossaryInputConfigResponsePtrOutput() GlossaryInputConfigResponsePtrOutput {
	return i.ToGlossaryInputConfigResponsePtrOutputWithContext(context.Background())
}

func (i GlossaryInputConfigResponseArgs) ToGlossaryInputConfigResponsePtrOutputWithContext(ctx context.Context) GlossaryInputConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryInputConfigResponseOutput).ToGlossaryInputConfigResponsePtrOutputWithContext(ctx)
}

// GlossaryInputConfigResponsePtrInput is an input type that accepts GlossaryInputConfigResponseArgs, GlossaryInputConfigResponsePtr and GlossaryInputConfigResponsePtrOutput values.
// You can construct a concrete instance of `GlossaryInputConfigResponsePtrInput` via:
//
//          GlossaryInputConfigResponseArgs{...}
//
//  or:
//
//          nil
type GlossaryInputConfigResponsePtrInput interface {
	pulumi.Input

	ToGlossaryInputConfigResponsePtrOutput() GlossaryInputConfigResponsePtrOutput
	ToGlossaryInputConfigResponsePtrOutputWithContext(context.Context) GlossaryInputConfigResponsePtrOutput
}

type glossaryInputConfigResponsePtrType GlossaryInputConfigResponseArgs

func GlossaryInputConfigResponsePtr(v *GlossaryInputConfigResponseArgs) GlossaryInputConfigResponsePtrInput {
	return (*glossaryInputConfigResponsePtrType)(v)
}

func (*glossaryInputConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryInputConfigResponse)(nil)).Elem()
}

func (i *glossaryInputConfigResponsePtrType) ToGlossaryInputConfigResponsePtrOutput() GlossaryInputConfigResponsePtrOutput {
	return i.ToGlossaryInputConfigResponsePtrOutputWithContext(context.Background())
}

func (i *glossaryInputConfigResponsePtrType) ToGlossaryInputConfigResponsePtrOutputWithContext(ctx context.Context) GlossaryInputConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryInputConfigResponsePtrOutput)
}

// Input configuration for glossaries.
type GlossaryInputConfigResponseOutput struct{ *pulumi.OutputState }

func (GlossaryInputConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlossaryInputConfigResponse)(nil)).Elem()
}

func (o GlossaryInputConfigResponseOutput) ToGlossaryInputConfigResponseOutput() GlossaryInputConfigResponseOutput {
	return o
}

func (o GlossaryInputConfigResponseOutput) ToGlossaryInputConfigResponseOutputWithContext(ctx context.Context) GlossaryInputConfigResponseOutput {
	return o
}

func (o GlossaryInputConfigResponseOutput) ToGlossaryInputConfigResponsePtrOutput() GlossaryInputConfigResponsePtrOutput {
	return o.ToGlossaryInputConfigResponsePtrOutputWithContext(context.Background())
}

func (o GlossaryInputConfigResponseOutput) ToGlossaryInputConfigResponsePtrOutputWithContext(ctx context.Context) GlossaryInputConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlossaryInputConfigResponse) *GlossaryInputConfigResponse {
		return &v
	}).(GlossaryInputConfigResponsePtrOutput)
}

// Google Cloud Storage location of glossary data. File format is determined based on the filename extension. API returns [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file formats. Wildcards are not allowed. This must be a single file in one of the following formats: For unidirectional glossaries: - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated. The first column is source text. The second column is target text. The file must not contain headers. That is, the first row is data, not column names. - TMX (`.tmx`): TMX file with parallel data defining source/target term pairs. For equivalent term sets glossaries: - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms in multiple languages. See documentation for more information - [glossaries](https://cloud.google.com/translate/docs/advanced/glossary).
func (o GlossaryInputConfigResponseOutput) GcsSource() GcsSourceResponseOutput {
	return o.ApplyT(func(v GlossaryInputConfigResponse) GcsSourceResponse { return v.GcsSource }).(GcsSourceResponseOutput)
}

type GlossaryInputConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (GlossaryInputConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryInputConfigResponse)(nil)).Elem()
}

func (o GlossaryInputConfigResponsePtrOutput) ToGlossaryInputConfigResponsePtrOutput() GlossaryInputConfigResponsePtrOutput {
	return o
}

func (o GlossaryInputConfigResponsePtrOutput) ToGlossaryInputConfigResponsePtrOutputWithContext(ctx context.Context) GlossaryInputConfigResponsePtrOutput {
	return o
}

func (o GlossaryInputConfigResponsePtrOutput) Elem() GlossaryInputConfigResponseOutput {
	return o.ApplyT(func(v *GlossaryInputConfigResponse) GlossaryInputConfigResponse {
		if v != nil {
			return *v
		}
		var ret GlossaryInputConfigResponse
		return ret
	}).(GlossaryInputConfigResponseOutput)
}

// Google Cloud Storage location of glossary data. File format is determined based on the filename extension. API returns [google.rpc.Code.INVALID_ARGUMENT] for unsupported URI-s and file formats. Wildcards are not allowed. This must be a single file in one of the following formats: For unidirectional glossaries: - TSV/CSV (`.tsv`/`.csv`): 2 column file, tab- or comma-separated. The first column is source text. The second column is target text. The file must not contain headers. That is, the first row is data, not column names. - TMX (`.tmx`): TMX file with parallel data defining source/target term pairs. For equivalent term sets glossaries: - CSV (`.csv`): Multi-column CSV file defining equivalent glossary terms in multiple languages. See documentation for more information - [glossaries](https://cloud.google.com/translate/docs/advanced/glossary).
func (o GlossaryInputConfigResponsePtrOutput) GcsSource() GcsSourceResponsePtrOutput {
	return o.ApplyT(func(v *GlossaryInputConfigResponse) *GcsSourceResponse {
		if v == nil {
			return nil
		}
		return &v.GcsSource
	}).(GcsSourceResponsePtrOutput)
}

// Used with unidirectional glossaries.
type LanguageCodePair struct {
	// The BCP-47 language code of the input text, for example, "en-US". Expected to be an exact match for GlossaryTerm.language_code.
	SourceLanguageCode string `pulumi:"sourceLanguageCode"`
	// The BCP-47 language code for translation output, for example, "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
	TargetLanguageCode string `pulumi:"targetLanguageCode"`
}

// LanguageCodePairInput is an input type that accepts LanguageCodePairArgs and LanguageCodePairOutput values.
// You can construct a concrete instance of `LanguageCodePairInput` via:
//
//          LanguageCodePairArgs{...}
type LanguageCodePairInput interface {
	pulumi.Input

	ToLanguageCodePairOutput() LanguageCodePairOutput
	ToLanguageCodePairOutputWithContext(context.Context) LanguageCodePairOutput
}

// Used with unidirectional glossaries.
type LanguageCodePairArgs struct {
	// The BCP-47 language code of the input text, for example, "en-US". Expected to be an exact match for GlossaryTerm.language_code.
	SourceLanguageCode pulumi.StringInput `pulumi:"sourceLanguageCode"`
	// The BCP-47 language code for translation output, for example, "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
	TargetLanguageCode pulumi.StringInput `pulumi:"targetLanguageCode"`
}

func (LanguageCodePairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LanguageCodePair)(nil)).Elem()
}

func (i LanguageCodePairArgs) ToLanguageCodePairOutput() LanguageCodePairOutput {
	return i.ToLanguageCodePairOutputWithContext(context.Background())
}

func (i LanguageCodePairArgs) ToLanguageCodePairOutputWithContext(ctx context.Context) LanguageCodePairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodePairOutput)
}

func (i LanguageCodePairArgs) ToLanguageCodePairPtrOutput() LanguageCodePairPtrOutput {
	return i.ToLanguageCodePairPtrOutputWithContext(context.Background())
}

func (i LanguageCodePairArgs) ToLanguageCodePairPtrOutputWithContext(ctx context.Context) LanguageCodePairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodePairOutput).ToLanguageCodePairPtrOutputWithContext(ctx)
}

// LanguageCodePairPtrInput is an input type that accepts LanguageCodePairArgs, LanguageCodePairPtr and LanguageCodePairPtrOutput values.
// You can construct a concrete instance of `LanguageCodePairPtrInput` via:
//
//          LanguageCodePairArgs{...}
//
//  or:
//
//          nil
type LanguageCodePairPtrInput interface {
	pulumi.Input

	ToLanguageCodePairPtrOutput() LanguageCodePairPtrOutput
	ToLanguageCodePairPtrOutputWithContext(context.Context) LanguageCodePairPtrOutput
}

type languageCodePairPtrType LanguageCodePairArgs

func LanguageCodePairPtr(v *LanguageCodePairArgs) LanguageCodePairPtrInput {
	return (*languageCodePairPtrType)(v)
}

func (*languageCodePairPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LanguageCodePair)(nil)).Elem()
}

func (i *languageCodePairPtrType) ToLanguageCodePairPtrOutput() LanguageCodePairPtrOutput {
	return i.ToLanguageCodePairPtrOutputWithContext(context.Background())
}

func (i *languageCodePairPtrType) ToLanguageCodePairPtrOutputWithContext(ctx context.Context) LanguageCodePairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodePairPtrOutput)
}

// Used with unidirectional glossaries.
type LanguageCodePairOutput struct{ *pulumi.OutputState }

func (LanguageCodePairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LanguageCodePair)(nil)).Elem()
}

func (o LanguageCodePairOutput) ToLanguageCodePairOutput() LanguageCodePairOutput {
	return o
}

func (o LanguageCodePairOutput) ToLanguageCodePairOutputWithContext(ctx context.Context) LanguageCodePairOutput {
	return o
}

func (o LanguageCodePairOutput) ToLanguageCodePairPtrOutput() LanguageCodePairPtrOutput {
	return o.ToLanguageCodePairPtrOutputWithContext(context.Background())
}

func (o LanguageCodePairOutput) ToLanguageCodePairPtrOutputWithContext(ctx context.Context) LanguageCodePairPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LanguageCodePair) *LanguageCodePair {
		return &v
	}).(LanguageCodePairPtrOutput)
}

// The BCP-47 language code of the input text, for example, "en-US". Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodePairOutput) SourceLanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v LanguageCodePair) string { return v.SourceLanguageCode }).(pulumi.StringOutput)
}

// The BCP-47 language code for translation output, for example, "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodePairOutput) TargetLanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v LanguageCodePair) string { return v.TargetLanguageCode }).(pulumi.StringOutput)
}

type LanguageCodePairPtrOutput struct{ *pulumi.OutputState }

func (LanguageCodePairPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LanguageCodePair)(nil)).Elem()
}

func (o LanguageCodePairPtrOutput) ToLanguageCodePairPtrOutput() LanguageCodePairPtrOutput {
	return o
}

func (o LanguageCodePairPtrOutput) ToLanguageCodePairPtrOutputWithContext(ctx context.Context) LanguageCodePairPtrOutput {
	return o
}

func (o LanguageCodePairPtrOutput) Elem() LanguageCodePairOutput {
	return o.ApplyT(func(v *LanguageCodePair) LanguageCodePair {
		if v != nil {
			return *v
		}
		var ret LanguageCodePair
		return ret
	}).(LanguageCodePairOutput)
}

// The BCP-47 language code of the input text, for example, "en-US". Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodePairPtrOutput) SourceLanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LanguageCodePair) *string {
		if v == nil {
			return nil
		}
		return &v.SourceLanguageCode
	}).(pulumi.StringPtrOutput)
}

// The BCP-47 language code for translation output, for example, "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodePairPtrOutput) TargetLanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LanguageCodePair) *string {
		if v == nil {
			return nil
		}
		return &v.TargetLanguageCode
	}).(pulumi.StringPtrOutput)
}

// Used with unidirectional glossaries.
type LanguageCodePairResponse struct {
	// The BCP-47 language code of the input text, for example, "en-US". Expected to be an exact match for GlossaryTerm.language_code.
	SourceLanguageCode string `pulumi:"sourceLanguageCode"`
	// The BCP-47 language code for translation output, for example, "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
	TargetLanguageCode string `pulumi:"targetLanguageCode"`
}

// LanguageCodePairResponseInput is an input type that accepts LanguageCodePairResponseArgs and LanguageCodePairResponseOutput values.
// You can construct a concrete instance of `LanguageCodePairResponseInput` via:
//
//          LanguageCodePairResponseArgs{...}
type LanguageCodePairResponseInput interface {
	pulumi.Input

	ToLanguageCodePairResponseOutput() LanguageCodePairResponseOutput
	ToLanguageCodePairResponseOutputWithContext(context.Context) LanguageCodePairResponseOutput
}

// Used with unidirectional glossaries.
type LanguageCodePairResponseArgs struct {
	// The BCP-47 language code of the input text, for example, "en-US". Expected to be an exact match for GlossaryTerm.language_code.
	SourceLanguageCode pulumi.StringInput `pulumi:"sourceLanguageCode"`
	// The BCP-47 language code for translation output, for example, "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
	TargetLanguageCode pulumi.StringInput `pulumi:"targetLanguageCode"`
}

func (LanguageCodePairResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LanguageCodePairResponse)(nil)).Elem()
}

func (i LanguageCodePairResponseArgs) ToLanguageCodePairResponseOutput() LanguageCodePairResponseOutput {
	return i.ToLanguageCodePairResponseOutputWithContext(context.Background())
}

func (i LanguageCodePairResponseArgs) ToLanguageCodePairResponseOutputWithContext(ctx context.Context) LanguageCodePairResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodePairResponseOutput)
}

func (i LanguageCodePairResponseArgs) ToLanguageCodePairResponsePtrOutput() LanguageCodePairResponsePtrOutput {
	return i.ToLanguageCodePairResponsePtrOutputWithContext(context.Background())
}

func (i LanguageCodePairResponseArgs) ToLanguageCodePairResponsePtrOutputWithContext(ctx context.Context) LanguageCodePairResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodePairResponseOutput).ToLanguageCodePairResponsePtrOutputWithContext(ctx)
}

// LanguageCodePairResponsePtrInput is an input type that accepts LanguageCodePairResponseArgs, LanguageCodePairResponsePtr and LanguageCodePairResponsePtrOutput values.
// You can construct a concrete instance of `LanguageCodePairResponsePtrInput` via:
//
//          LanguageCodePairResponseArgs{...}
//
//  or:
//
//          nil
type LanguageCodePairResponsePtrInput interface {
	pulumi.Input

	ToLanguageCodePairResponsePtrOutput() LanguageCodePairResponsePtrOutput
	ToLanguageCodePairResponsePtrOutputWithContext(context.Context) LanguageCodePairResponsePtrOutput
}

type languageCodePairResponsePtrType LanguageCodePairResponseArgs

func LanguageCodePairResponsePtr(v *LanguageCodePairResponseArgs) LanguageCodePairResponsePtrInput {
	return (*languageCodePairResponsePtrType)(v)
}

func (*languageCodePairResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LanguageCodePairResponse)(nil)).Elem()
}

func (i *languageCodePairResponsePtrType) ToLanguageCodePairResponsePtrOutput() LanguageCodePairResponsePtrOutput {
	return i.ToLanguageCodePairResponsePtrOutputWithContext(context.Background())
}

func (i *languageCodePairResponsePtrType) ToLanguageCodePairResponsePtrOutputWithContext(ctx context.Context) LanguageCodePairResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodePairResponsePtrOutput)
}

// Used with unidirectional glossaries.
type LanguageCodePairResponseOutput struct{ *pulumi.OutputState }

func (LanguageCodePairResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LanguageCodePairResponse)(nil)).Elem()
}

func (o LanguageCodePairResponseOutput) ToLanguageCodePairResponseOutput() LanguageCodePairResponseOutput {
	return o
}

func (o LanguageCodePairResponseOutput) ToLanguageCodePairResponseOutputWithContext(ctx context.Context) LanguageCodePairResponseOutput {
	return o
}

func (o LanguageCodePairResponseOutput) ToLanguageCodePairResponsePtrOutput() LanguageCodePairResponsePtrOutput {
	return o.ToLanguageCodePairResponsePtrOutputWithContext(context.Background())
}

func (o LanguageCodePairResponseOutput) ToLanguageCodePairResponsePtrOutputWithContext(ctx context.Context) LanguageCodePairResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LanguageCodePairResponse) *LanguageCodePairResponse {
		return &v
	}).(LanguageCodePairResponsePtrOutput)
}

// The BCP-47 language code of the input text, for example, "en-US". Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodePairResponseOutput) SourceLanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v LanguageCodePairResponse) string { return v.SourceLanguageCode }).(pulumi.StringOutput)
}

// The BCP-47 language code for translation output, for example, "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodePairResponseOutput) TargetLanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v LanguageCodePairResponse) string { return v.TargetLanguageCode }).(pulumi.StringOutput)
}

type LanguageCodePairResponsePtrOutput struct{ *pulumi.OutputState }

func (LanguageCodePairResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LanguageCodePairResponse)(nil)).Elem()
}

func (o LanguageCodePairResponsePtrOutput) ToLanguageCodePairResponsePtrOutput() LanguageCodePairResponsePtrOutput {
	return o
}

func (o LanguageCodePairResponsePtrOutput) ToLanguageCodePairResponsePtrOutputWithContext(ctx context.Context) LanguageCodePairResponsePtrOutput {
	return o
}

func (o LanguageCodePairResponsePtrOutput) Elem() LanguageCodePairResponseOutput {
	return o.ApplyT(func(v *LanguageCodePairResponse) LanguageCodePairResponse {
		if v != nil {
			return *v
		}
		var ret LanguageCodePairResponse
		return ret
	}).(LanguageCodePairResponseOutput)
}

// The BCP-47 language code of the input text, for example, "en-US". Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodePairResponsePtrOutput) SourceLanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LanguageCodePairResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceLanguageCode
	}).(pulumi.StringPtrOutput)
}

// The BCP-47 language code for translation output, for example, "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodePairResponsePtrOutput) TargetLanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LanguageCodePairResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TargetLanguageCode
	}).(pulumi.StringPtrOutput)
}

// Used with equivalent term set glossaries.
type LanguageCodesSet struct {
	// The BCP-47 language code(s) for terms defined in the glossary. All entries are unique. The list contains at least two entries. Expected to be an exact match for GlossaryTerm.language_code.
	LanguageCodes []string `pulumi:"languageCodes"`
}

// LanguageCodesSetInput is an input type that accepts LanguageCodesSetArgs and LanguageCodesSetOutput values.
// You can construct a concrete instance of `LanguageCodesSetInput` via:
//
//          LanguageCodesSetArgs{...}
type LanguageCodesSetInput interface {
	pulumi.Input

	ToLanguageCodesSetOutput() LanguageCodesSetOutput
	ToLanguageCodesSetOutputWithContext(context.Context) LanguageCodesSetOutput
}

// Used with equivalent term set glossaries.
type LanguageCodesSetArgs struct {
	// The BCP-47 language code(s) for terms defined in the glossary. All entries are unique. The list contains at least two entries. Expected to be an exact match for GlossaryTerm.language_code.
	LanguageCodes pulumi.StringArrayInput `pulumi:"languageCodes"`
}

func (LanguageCodesSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LanguageCodesSet)(nil)).Elem()
}

func (i LanguageCodesSetArgs) ToLanguageCodesSetOutput() LanguageCodesSetOutput {
	return i.ToLanguageCodesSetOutputWithContext(context.Background())
}

func (i LanguageCodesSetArgs) ToLanguageCodesSetOutputWithContext(ctx context.Context) LanguageCodesSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodesSetOutput)
}

func (i LanguageCodesSetArgs) ToLanguageCodesSetPtrOutput() LanguageCodesSetPtrOutput {
	return i.ToLanguageCodesSetPtrOutputWithContext(context.Background())
}

func (i LanguageCodesSetArgs) ToLanguageCodesSetPtrOutputWithContext(ctx context.Context) LanguageCodesSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodesSetOutput).ToLanguageCodesSetPtrOutputWithContext(ctx)
}

// LanguageCodesSetPtrInput is an input type that accepts LanguageCodesSetArgs, LanguageCodesSetPtr and LanguageCodesSetPtrOutput values.
// You can construct a concrete instance of `LanguageCodesSetPtrInput` via:
//
//          LanguageCodesSetArgs{...}
//
//  or:
//
//          nil
type LanguageCodesSetPtrInput interface {
	pulumi.Input

	ToLanguageCodesSetPtrOutput() LanguageCodesSetPtrOutput
	ToLanguageCodesSetPtrOutputWithContext(context.Context) LanguageCodesSetPtrOutput
}

type languageCodesSetPtrType LanguageCodesSetArgs

func LanguageCodesSetPtr(v *LanguageCodesSetArgs) LanguageCodesSetPtrInput {
	return (*languageCodesSetPtrType)(v)
}

func (*languageCodesSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LanguageCodesSet)(nil)).Elem()
}

func (i *languageCodesSetPtrType) ToLanguageCodesSetPtrOutput() LanguageCodesSetPtrOutput {
	return i.ToLanguageCodesSetPtrOutputWithContext(context.Background())
}

func (i *languageCodesSetPtrType) ToLanguageCodesSetPtrOutputWithContext(ctx context.Context) LanguageCodesSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodesSetPtrOutput)
}

// Used with equivalent term set glossaries.
type LanguageCodesSetOutput struct{ *pulumi.OutputState }

func (LanguageCodesSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LanguageCodesSet)(nil)).Elem()
}

func (o LanguageCodesSetOutput) ToLanguageCodesSetOutput() LanguageCodesSetOutput {
	return o
}

func (o LanguageCodesSetOutput) ToLanguageCodesSetOutputWithContext(ctx context.Context) LanguageCodesSetOutput {
	return o
}

func (o LanguageCodesSetOutput) ToLanguageCodesSetPtrOutput() LanguageCodesSetPtrOutput {
	return o.ToLanguageCodesSetPtrOutputWithContext(context.Background())
}

func (o LanguageCodesSetOutput) ToLanguageCodesSetPtrOutputWithContext(ctx context.Context) LanguageCodesSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LanguageCodesSet) *LanguageCodesSet {
		return &v
	}).(LanguageCodesSetPtrOutput)
}

// The BCP-47 language code(s) for terms defined in the glossary. All entries are unique. The list contains at least two entries. Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodesSetOutput) LanguageCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LanguageCodesSet) []string { return v.LanguageCodes }).(pulumi.StringArrayOutput)
}

type LanguageCodesSetPtrOutput struct{ *pulumi.OutputState }

func (LanguageCodesSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LanguageCodesSet)(nil)).Elem()
}

func (o LanguageCodesSetPtrOutput) ToLanguageCodesSetPtrOutput() LanguageCodesSetPtrOutput {
	return o
}

func (o LanguageCodesSetPtrOutput) ToLanguageCodesSetPtrOutputWithContext(ctx context.Context) LanguageCodesSetPtrOutput {
	return o
}

func (o LanguageCodesSetPtrOutput) Elem() LanguageCodesSetOutput {
	return o.ApplyT(func(v *LanguageCodesSet) LanguageCodesSet {
		if v != nil {
			return *v
		}
		var ret LanguageCodesSet
		return ret
	}).(LanguageCodesSetOutput)
}

// The BCP-47 language code(s) for terms defined in the glossary. All entries are unique. The list contains at least two entries. Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodesSetPtrOutput) LanguageCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LanguageCodesSet) []string {
		if v == nil {
			return nil
		}
		return v.LanguageCodes
	}).(pulumi.StringArrayOutput)
}

// Used with equivalent term set glossaries.
type LanguageCodesSetResponse struct {
	// The BCP-47 language code(s) for terms defined in the glossary. All entries are unique. The list contains at least two entries. Expected to be an exact match for GlossaryTerm.language_code.
	LanguageCodes []string `pulumi:"languageCodes"`
}

// LanguageCodesSetResponseInput is an input type that accepts LanguageCodesSetResponseArgs and LanguageCodesSetResponseOutput values.
// You can construct a concrete instance of `LanguageCodesSetResponseInput` via:
//
//          LanguageCodesSetResponseArgs{...}
type LanguageCodesSetResponseInput interface {
	pulumi.Input

	ToLanguageCodesSetResponseOutput() LanguageCodesSetResponseOutput
	ToLanguageCodesSetResponseOutputWithContext(context.Context) LanguageCodesSetResponseOutput
}

// Used with equivalent term set glossaries.
type LanguageCodesSetResponseArgs struct {
	// The BCP-47 language code(s) for terms defined in the glossary. All entries are unique. The list contains at least two entries. Expected to be an exact match for GlossaryTerm.language_code.
	LanguageCodes pulumi.StringArrayInput `pulumi:"languageCodes"`
}

func (LanguageCodesSetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LanguageCodesSetResponse)(nil)).Elem()
}

func (i LanguageCodesSetResponseArgs) ToLanguageCodesSetResponseOutput() LanguageCodesSetResponseOutput {
	return i.ToLanguageCodesSetResponseOutputWithContext(context.Background())
}

func (i LanguageCodesSetResponseArgs) ToLanguageCodesSetResponseOutputWithContext(ctx context.Context) LanguageCodesSetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodesSetResponseOutput)
}

func (i LanguageCodesSetResponseArgs) ToLanguageCodesSetResponsePtrOutput() LanguageCodesSetResponsePtrOutput {
	return i.ToLanguageCodesSetResponsePtrOutputWithContext(context.Background())
}

func (i LanguageCodesSetResponseArgs) ToLanguageCodesSetResponsePtrOutputWithContext(ctx context.Context) LanguageCodesSetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodesSetResponseOutput).ToLanguageCodesSetResponsePtrOutputWithContext(ctx)
}

// LanguageCodesSetResponsePtrInput is an input type that accepts LanguageCodesSetResponseArgs, LanguageCodesSetResponsePtr and LanguageCodesSetResponsePtrOutput values.
// You can construct a concrete instance of `LanguageCodesSetResponsePtrInput` via:
//
//          LanguageCodesSetResponseArgs{...}
//
//  or:
//
//          nil
type LanguageCodesSetResponsePtrInput interface {
	pulumi.Input

	ToLanguageCodesSetResponsePtrOutput() LanguageCodesSetResponsePtrOutput
	ToLanguageCodesSetResponsePtrOutputWithContext(context.Context) LanguageCodesSetResponsePtrOutput
}

type languageCodesSetResponsePtrType LanguageCodesSetResponseArgs

func LanguageCodesSetResponsePtr(v *LanguageCodesSetResponseArgs) LanguageCodesSetResponsePtrInput {
	return (*languageCodesSetResponsePtrType)(v)
}

func (*languageCodesSetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LanguageCodesSetResponse)(nil)).Elem()
}

func (i *languageCodesSetResponsePtrType) ToLanguageCodesSetResponsePtrOutput() LanguageCodesSetResponsePtrOutput {
	return i.ToLanguageCodesSetResponsePtrOutputWithContext(context.Background())
}

func (i *languageCodesSetResponsePtrType) ToLanguageCodesSetResponsePtrOutputWithContext(ctx context.Context) LanguageCodesSetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LanguageCodesSetResponsePtrOutput)
}

// Used with equivalent term set glossaries.
type LanguageCodesSetResponseOutput struct{ *pulumi.OutputState }

func (LanguageCodesSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LanguageCodesSetResponse)(nil)).Elem()
}

func (o LanguageCodesSetResponseOutput) ToLanguageCodesSetResponseOutput() LanguageCodesSetResponseOutput {
	return o
}

func (o LanguageCodesSetResponseOutput) ToLanguageCodesSetResponseOutputWithContext(ctx context.Context) LanguageCodesSetResponseOutput {
	return o
}

func (o LanguageCodesSetResponseOutput) ToLanguageCodesSetResponsePtrOutput() LanguageCodesSetResponsePtrOutput {
	return o.ToLanguageCodesSetResponsePtrOutputWithContext(context.Background())
}

func (o LanguageCodesSetResponseOutput) ToLanguageCodesSetResponsePtrOutputWithContext(ctx context.Context) LanguageCodesSetResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LanguageCodesSetResponse) *LanguageCodesSetResponse {
		return &v
	}).(LanguageCodesSetResponsePtrOutput)
}

// The BCP-47 language code(s) for terms defined in the glossary. All entries are unique. The list contains at least two entries. Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodesSetResponseOutput) LanguageCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LanguageCodesSetResponse) []string { return v.LanguageCodes }).(pulumi.StringArrayOutput)
}

type LanguageCodesSetResponsePtrOutput struct{ *pulumi.OutputState }

func (LanguageCodesSetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LanguageCodesSetResponse)(nil)).Elem()
}

func (o LanguageCodesSetResponsePtrOutput) ToLanguageCodesSetResponsePtrOutput() LanguageCodesSetResponsePtrOutput {
	return o
}

func (o LanguageCodesSetResponsePtrOutput) ToLanguageCodesSetResponsePtrOutputWithContext(ctx context.Context) LanguageCodesSetResponsePtrOutput {
	return o
}

func (o LanguageCodesSetResponsePtrOutput) Elem() LanguageCodesSetResponseOutput {
	return o.ApplyT(func(v *LanguageCodesSetResponse) LanguageCodesSetResponse {
		if v != nil {
			return *v
		}
		var ret LanguageCodesSetResponse
		return ret
	}).(LanguageCodesSetResponseOutput)
}

// The BCP-47 language code(s) for terms defined in the glossary. All entries are unique. The list contains at least two entries. Expected to be an exact match for GlossaryTerm.language_code.
func (o LanguageCodesSetResponsePtrOutput) LanguageCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LanguageCodesSetResponse) []string {
		if v == nil {
			return nil
		}
		return v.LanguageCodes
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcsSourceInput)(nil)).Elem(), GcsSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsSourcePtrInput)(nil)).Elem(), GcsSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsSourceResponseInput)(nil)).Elem(), GcsSourceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsSourceResponsePtrInput)(nil)).Elem(), GcsSourceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryInputConfigInput)(nil)).Elem(), GlossaryInputConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryInputConfigPtrInput)(nil)).Elem(), GlossaryInputConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryInputConfigResponseInput)(nil)).Elem(), GlossaryInputConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryInputConfigResponsePtrInput)(nil)).Elem(), GlossaryInputConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageCodePairInput)(nil)).Elem(), LanguageCodePairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageCodePairPtrInput)(nil)).Elem(), LanguageCodePairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageCodePairResponseInput)(nil)).Elem(), LanguageCodePairResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageCodePairResponsePtrInput)(nil)).Elem(), LanguageCodePairResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageCodesSetInput)(nil)).Elem(), LanguageCodesSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageCodesSetPtrInput)(nil)).Elem(), LanguageCodesSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageCodesSetResponseInput)(nil)).Elem(), LanguageCodesSetResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LanguageCodesSetResponsePtrInput)(nil)).Elem(), LanguageCodesSetResponseArgs{})
	pulumi.RegisterOutputType(GcsSourceOutput{})
	pulumi.RegisterOutputType(GcsSourcePtrOutput{})
	pulumi.RegisterOutputType(GcsSourceResponseOutput{})
	pulumi.RegisterOutputType(GcsSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(GlossaryInputConfigOutput{})
	pulumi.RegisterOutputType(GlossaryInputConfigPtrOutput{})
	pulumi.RegisterOutputType(GlossaryInputConfigResponseOutput{})
	pulumi.RegisterOutputType(GlossaryInputConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(LanguageCodePairOutput{})
	pulumi.RegisterOutputType(LanguageCodePairPtrOutput{})
	pulumi.RegisterOutputType(LanguageCodePairResponseOutput{})
	pulumi.RegisterOutputType(LanguageCodePairResponsePtrOutput{})
	pulumi.RegisterOutputType(LanguageCodesSetOutput{})
	pulumi.RegisterOutputType(LanguageCodesSetPtrOutput{})
	pulumi.RegisterOutputType(LanguageCodesSetResponseOutput{})
	pulumi.RegisterOutputType(LanguageCodesSetResponsePtrOutput{})
}
