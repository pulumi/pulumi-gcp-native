// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets a single glossary entry by the given id.
func LookupGlossaryEntry(ctx *pulumi.Context, args *LookupGlossaryEntryArgs, opts ...pulumi.InvokeOption) (*LookupGlossaryEntryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGlossaryEntryResult
	err := ctx.Invoke("google-native:translate/v3:getGlossaryEntry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGlossaryEntryArgs struct {
	GlossaryEntryId string  `pulumi:"glossaryEntryId"`
	GlossaryId      string  `pulumi:"glossaryId"`
	Location        string  `pulumi:"location"`
	Project         *string `pulumi:"project"`
}

type LookupGlossaryEntryResult struct {
	// Describes the glossary entry.
	Description string `pulumi:"description"`
	// The resource name of the entry. Format: "projects/*/locations/*/glossaries/*/glossaryEntries/*"
	Name string `pulumi:"name"`
	// Used for an unidirectional glossary.
	TermsPair GlossaryTermsPairResponse `pulumi:"termsPair"`
	// Used for an equivalent term sets glossary.
	TermsSet GlossaryTermsSetResponse `pulumi:"termsSet"`
}

func LookupGlossaryEntryOutput(ctx *pulumi.Context, args LookupGlossaryEntryOutputArgs, opts ...pulumi.InvokeOption) LookupGlossaryEntryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGlossaryEntryResult, error) {
			args := v.(LookupGlossaryEntryArgs)
			r, err := LookupGlossaryEntry(ctx, &args, opts...)
			var s LookupGlossaryEntryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGlossaryEntryResultOutput)
}

type LookupGlossaryEntryOutputArgs struct {
	GlossaryEntryId pulumi.StringInput    `pulumi:"glossaryEntryId"`
	GlossaryId      pulumi.StringInput    `pulumi:"glossaryId"`
	Location        pulumi.StringInput    `pulumi:"location"`
	Project         pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupGlossaryEntryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGlossaryEntryArgs)(nil)).Elem()
}

type LookupGlossaryEntryResultOutput struct{ *pulumi.OutputState }

func (LookupGlossaryEntryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGlossaryEntryResult)(nil)).Elem()
}

func (o LookupGlossaryEntryResultOutput) ToLookupGlossaryEntryResultOutput() LookupGlossaryEntryResultOutput {
	return o
}

func (o LookupGlossaryEntryResultOutput) ToLookupGlossaryEntryResultOutputWithContext(ctx context.Context) LookupGlossaryEntryResultOutput {
	return o
}

func (o LookupGlossaryEntryResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupGlossaryEntryResult] {
	return pulumix.Output[LookupGlossaryEntryResult]{
		OutputState: o.OutputState,
	}
}

// Describes the glossary entry.
func (o LookupGlossaryEntryResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlossaryEntryResult) string { return v.Description }).(pulumi.StringOutput)
}

// The resource name of the entry. Format: "projects/*/locations/*/glossaries/*/glossaryEntries/*"
func (o LookupGlossaryEntryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGlossaryEntryResult) string { return v.Name }).(pulumi.StringOutput)
}

// Used for an unidirectional glossary.
func (o LookupGlossaryEntryResultOutput) TermsPair() GlossaryTermsPairResponseOutput {
	return o.ApplyT(func(v LookupGlossaryEntryResult) GlossaryTermsPairResponse { return v.TermsPair }).(GlossaryTermsPairResponseOutput)
}

// Used for an equivalent term sets glossary.
func (o LookupGlossaryEntryResultOutput) TermsSet() GlossaryTermsSetResponseOutput {
	return o.ApplyT(func(v LookupGlossaryEntryResult) GlossaryTermsSetResponse { return v.TermsSet }).(GlossaryTermsSetResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGlossaryEntryResultOutput{})
}
