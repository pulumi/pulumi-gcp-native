// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a glossary entry.
type GlossaryEntry struct {
	pulumi.CustomResourceState

	// Describes the glossary entry.
	Description pulumi.StringOutput `pulumi:"description"`
	GlossaryId  pulumi.StringOutput `pulumi:"glossaryId"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// The resource name of the entry. Format: "projects/*/locations/*/glossaries/*/glossaryEntries/*"
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Used for an unidirectional glossary.
	TermsPair GlossaryTermsPairResponseOutput `pulumi:"termsPair"`
	// Used for an equivalent term sets glossary.
	TermsSet GlossaryTermsSetResponseOutput `pulumi:"termsSet"`
}

// NewGlossaryEntry registers a new resource with the given unique name, arguments, and options.
func NewGlossaryEntry(ctx *pulumi.Context,
	name string, args *GlossaryEntryArgs, opts ...pulumi.ResourceOption) (*GlossaryEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GlossaryId == nil {
		return nil, errors.New("invalid value for required argument 'GlossaryId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"glossaryId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource GlossaryEntry
	err := ctx.RegisterResource("google-native:translate/v3:GlossaryEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlossaryEntry gets an existing GlossaryEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlossaryEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlossaryEntryState, opts ...pulumi.ResourceOption) (*GlossaryEntry, error) {
	var resource GlossaryEntry
	err := ctx.ReadResource("google-native:translate/v3:GlossaryEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlossaryEntry resources.
type glossaryEntryState struct {
}

type GlossaryEntryState struct {
}

func (GlossaryEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryEntryState)(nil)).Elem()
}

type glossaryEntryArgs struct {
	// Describes the glossary entry.
	Description *string `pulumi:"description"`
	GlossaryId  string  `pulumi:"glossaryId"`
	Location    *string `pulumi:"location"`
	// The resource name of the entry. Format: "projects/*/locations/*/glossaries/*/glossaryEntries/*"
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Used for an unidirectional glossary.
	TermsPair *GlossaryTermsPair `pulumi:"termsPair"`
	// Used for an equivalent term sets glossary.
	TermsSet *GlossaryTermsSet `pulumi:"termsSet"`
}

// The set of arguments for constructing a GlossaryEntry resource.
type GlossaryEntryArgs struct {
	// Describes the glossary entry.
	Description pulumi.StringPtrInput
	GlossaryId  pulumi.StringInput
	Location    pulumi.StringPtrInput
	// The resource name of the entry. Format: "projects/*/locations/*/glossaries/*/glossaryEntries/*"
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Used for an unidirectional glossary.
	TermsPair GlossaryTermsPairPtrInput
	// Used for an equivalent term sets glossary.
	TermsSet GlossaryTermsSetPtrInput
}

func (GlossaryEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*glossaryEntryArgs)(nil)).Elem()
}

type GlossaryEntryInput interface {
	pulumi.Input

	ToGlossaryEntryOutput() GlossaryEntryOutput
	ToGlossaryEntryOutputWithContext(ctx context.Context) GlossaryEntryOutput
}

func (*GlossaryEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryEntry)(nil)).Elem()
}

func (i *GlossaryEntry) ToGlossaryEntryOutput() GlossaryEntryOutput {
	return i.ToGlossaryEntryOutputWithContext(context.Background())
}

func (i *GlossaryEntry) ToGlossaryEntryOutputWithContext(ctx context.Context) GlossaryEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlossaryEntryOutput)
}

type GlossaryEntryOutput struct{ *pulumi.OutputState }

func (GlossaryEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlossaryEntry)(nil)).Elem()
}

func (o GlossaryEntryOutput) ToGlossaryEntryOutput() GlossaryEntryOutput {
	return o
}

func (o GlossaryEntryOutput) ToGlossaryEntryOutputWithContext(ctx context.Context) GlossaryEntryOutput {
	return o
}

// Describes the glossary entry.
func (o GlossaryEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryEntry) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o GlossaryEntryOutput) GlossaryId() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryEntry) pulumi.StringOutput { return v.GlossaryId }).(pulumi.StringOutput)
}

func (o GlossaryEntryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryEntry) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the entry. Format: "projects/*/locations/*/glossaries/*/glossaryEntries/*"
func (o GlossaryEntryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryEntry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GlossaryEntryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GlossaryEntry) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Used for an unidirectional glossary.
func (o GlossaryEntryOutput) TermsPair() GlossaryTermsPairResponseOutput {
	return o.ApplyT(func(v *GlossaryEntry) GlossaryTermsPairResponseOutput { return v.TermsPair }).(GlossaryTermsPairResponseOutput)
}

// Used for an equivalent term sets glossary.
func (o GlossaryEntryOutput) TermsSet() GlossaryTermsSetResponseOutput {
	return o.ApplyT(func(v *GlossaryEntry) GlossaryTermsSetResponseOutput { return v.TermsSet }).(GlossaryTermsSetResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlossaryEntryInput)(nil)).Elem(), &GlossaryEntry{})
	pulumi.RegisterOutputType(GlossaryEntryOutput{})
}
