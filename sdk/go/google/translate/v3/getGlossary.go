// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a glossary. Returns NOT_FOUND, if the glossary doesn't exist.
func LookupGlossary(ctx *pulumi.Context, args *LookupGlossaryArgs, opts ...pulumi.InvokeOption) (*LookupGlossaryResult, error) {
	var rv LookupGlossaryResult
	err := ctx.Invoke("google-native:translate/v3:getGlossary", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGlossaryArgs struct {
	GlossaryId string `pulumi:"glossaryId"`
	Location   string `pulumi:"location"`
	Project    string `pulumi:"project"`
}

type LookupGlossaryResult struct {
	// When the glossary creation was finished.
	EndTime string `pulumi:"endTime"`
	// The number of entries defined in the glossary.
	EntryCount int `pulumi:"entryCount"`
	// Required. Provides examples to build the glossary from. Total glossary must not exceed 10M Unicode codepoints.
	InputConfig GlossaryInputConfigResponse `pulumi:"inputConfig"`
	// Used with equivalent term set glossaries.
	LanguageCodesSet LanguageCodesSetResponse `pulumi:"languageCodesSet"`
	// Used with unidirectional glossaries.
	LanguagePair LanguageCodePairResponse `pulumi:"languagePair"`
	// Required. The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`.
	Name string `pulumi:"name"`
	// When CreateGlossary was called.
	SubmitTime string `pulumi:"submitTime"`
}
