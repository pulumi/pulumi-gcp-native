// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets an existing user workloads Secret. Values of the "data" field in the response are cleared. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
func LookupUserWorkloadsSecret(ctx *pulumi.Context, args *LookupUserWorkloadsSecretArgs, opts ...pulumi.InvokeOption) (*LookupUserWorkloadsSecretResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserWorkloadsSecretResult
	err := ctx.Invoke("google-native:composer/v1beta1:getUserWorkloadsSecret", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUserWorkloadsSecretArgs struct {
	EnvironmentId         string  `pulumi:"environmentId"`
	Location              string  `pulumi:"location"`
	Project               *string `pulumi:"project"`
	UserWorkloadsSecretId string  `pulumi:"userWorkloadsSecretId"`
}

type LookupUserWorkloadsSecretResult struct {
	// Optional. The "data" field of Kubernetes Secret, organized in key-value pairs, which can contain sensitive values such as a password, a token, or a key. The values for all keys have to be base64-encoded strings. For details see: https://kubernetes.io/docs/concepts/configuration/secret/
	Data map[string]string `pulumi:"data"`
	// Identifier. The resource name of the Secret, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
	Name string `pulumi:"name"`
}

func LookupUserWorkloadsSecretOutput(ctx *pulumi.Context, args LookupUserWorkloadsSecretOutputArgs, opts ...pulumi.InvokeOption) LookupUserWorkloadsSecretResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserWorkloadsSecretResult, error) {
			args := v.(LookupUserWorkloadsSecretArgs)
			r, err := LookupUserWorkloadsSecret(ctx, &args, opts...)
			var s LookupUserWorkloadsSecretResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserWorkloadsSecretResultOutput)
}

type LookupUserWorkloadsSecretOutputArgs struct {
	EnvironmentId         pulumi.StringInput    `pulumi:"environmentId"`
	Location              pulumi.StringInput    `pulumi:"location"`
	Project               pulumi.StringPtrInput `pulumi:"project"`
	UserWorkloadsSecretId pulumi.StringInput    `pulumi:"userWorkloadsSecretId"`
}

func (LookupUserWorkloadsSecretOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserWorkloadsSecretArgs)(nil)).Elem()
}

type LookupUserWorkloadsSecretResultOutput struct{ *pulumi.OutputState }

func (LookupUserWorkloadsSecretResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserWorkloadsSecretResult)(nil)).Elem()
}

func (o LookupUserWorkloadsSecretResultOutput) ToLookupUserWorkloadsSecretResultOutput() LookupUserWorkloadsSecretResultOutput {
	return o
}

func (o LookupUserWorkloadsSecretResultOutput) ToLookupUserWorkloadsSecretResultOutputWithContext(ctx context.Context) LookupUserWorkloadsSecretResultOutput {
	return o
}

// Optional. The "data" field of Kubernetes Secret, organized in key-value pairs, which can contain sensitive values such as a password, a token, or a key. The values for all keys have to be base64-encoded strings. For details see: https://kubernetes.io/docs/concepts/configuration/secret/
func (o LookupUserWorkloadsSecretResultOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupUserWorkloadsSecretResult) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

// Identifier. The resource name of the Secret, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
func (o LookupUserWorkloadsSecretResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserWorkloadsSecretResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserWorkloadsSecretResultOutput{})
}
