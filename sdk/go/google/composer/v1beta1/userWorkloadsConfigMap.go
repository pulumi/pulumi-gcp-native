// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a user workloads ConfigMap. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
type UserWorkloadsConfigMap struct {
	pulumi.CustomResourceState

	// Optional. The "data" field of Kubernetes ConfigMap, organized in key-value pairs. For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
	Data          pulumi.StringMapOutput `pulumi:"data"`
	EnvironmentId pulumi.StringOutput    `pulumi:"environmentId"`
	Location      pulumi.StringOutput    `pulumi:"location"`
	// Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewUserWorkloadsConfigMap registers a new resource with the given unique name, arguments, and options.
func NewUserWorkloadsConfigMap(ctx *pulumi.Context,
	name string, args *UserWorkloadsConfigMapArgs, opts ...pulumi.ResourceOption) (*UserWorkloadsConfigMap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"environmentId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserWorkloadsConfigMap
	err := ctx.RegisterResource("google-native:composer/v1beta1:UserWorkloadsConfigMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserWorkloadsConfigMap gets an existing UserWorkloadsConfigMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserWorkloadsConfigMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserWorkloadsConfigMapState, opts ...pulumi.ResourceOption) (*UserWorkloadsConfigMap, error) {
	var resource UserWorkloadsConfigMap
	err := ctx.ReadResource("google-native:composer/v1beta1:UserWorkloadsConfigMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserWorkloadsConfigMap resources.
type userWorkloadsConfigMapState struct {
}

type UserWorkloadsConfigMapState struct {
}

func (UserWorkloadsConfigMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*userWorkloadsConfigMapState)(nil)).Elem()
}

type userWorkloadsConfigMapArgs struct {
	// Optional. The "data" field of Kubernetes ConfigMap, organized in key-value pairs. For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
	Data          map[string]string `pulumi:"data"`
	EnvironmentId string            `pulumi:"environmentId"`
	Location      *string           `pulumi:"location"`
	// Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a UserWorkloadsConfigMap resource.
type UserWorkloadsConfigMapArgs struct {
	// Optional. The "data" field of Kubernetes ConfigMap, organized in key-value pairs. For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
	Data          pulumi.StringMapInput
	EnvironmentId pulumi.StringInput
	Location      pulumi.StringPtrInput
	// Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (UserWorkloadsConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userWorkloadsConfigMapArgs)(nil)).Elem()
}

type UserWorkloadsConfigMapInput interface {
	pulumi.Input

	ToUserWorkloadsConfigMapOutput() UserWorkloadsConfigMapOutput
	ToUserWorkloadsConfigMapOutputWithContext(ctx context.Context) UserWorkloadsConfigMapOutput
}

func (*UserWorkloadsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((**UserWorkloadsConfigMap)(nil)).Elem()
}

func (i *UserWorkloadsConfigMap) ToUserWorkloadsConfigMapOutput() UserWorkloadsConfigMapOutput {
	return i.ToUserWorkloadsConfigMapOutputWithContext(context.Background())
}

func (i *UserWorkloadsConfigMap) ToUserWorkloadsConfigMapOutputWithContext(ctx context.Context) UserWorkloadsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWorkloadsConfigMapOutput)
}

type UserWorkloadsConfigMapOutput struct{ *pulumi.OutputState }

func (UserWorkloadsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserWorkloadsConfigMap)(nil)).Elem()
}

func (o UserWorkloadsConfigMapOutput) ToUserWorkloadsConfigMapOutput() UserWorkloadsConfigMapOutput {
	return o
}

func (o UserWorkloadsConfigMapOutput) ToUserWorkloadsConfigMapOutputWithContext(ctx context.Context) UserWorkloadsConfigMapOutput {
	return o
}

// Optional. The "data" field of Kubernetes ConfigMap, organized in key-value pairs. For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
func (o UserWorkloadsConfigMapOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UserWorkloadsConfigMap) pulumi.StringMapOutput { return v.Data }).(pulumi.StringMapOutput)
}

func (o UserWorkloadsConfigMapOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsConfigMap) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

func (o UserWorkloadsConfigMapOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsConfigMap) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
func (o UserWorkloadsConfigMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsConfigMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserWorkloadsConfigMapOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *UserWorkloadsConfigMap) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserWorkloadsConfigMapInput)(nil)).Elem(), &UserWorkloadsConfigMap{})
	pulumi.RegisterOutputType(UserWorkloadsConfigMapOutput{})
}
