// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets an existing user workloads ConfigMap. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
func LookupUserWorkloadsConfigMap(ctx *pulumi.Context, args *LookupUserWorkloadsConfigMapArgs, opts ...pulumi.InvokeOption) (*LookupUserWorkloadsConfigMapResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserWorkloadsConfigMapResult
	err := ctx.Invoke("google-native:composer/v1beta1:getUserWorkloadsConfigMap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUserWorkloadsConfigMapArgs struct {
	EnvironmentId            string  `pulumi:"environmentId"`
	Location                 string  `pulumi:"location"`
	Project                  *string `pulumi:"project"`
	UserWorkloadsConfigMapId string  `pulumi:"userWorkloadsConfigMapId"`
}

type LookupUserWorkloadsConfigMapResult struct {
	// Optional. The "data" field of Kubernetes ConfigMap, organized in key-value pairs. For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
	Data map[string]string `pulumi:"data"`
	// Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
	Name string `pulumi:"name"`
}

func LookupUserWorkloadsConfigMapOutput(ctx *pulumi.Context, args LookupUserWorkloadsConfigMapOutputArgs, opts ...pulumi.InvokeOption) LookupUserWorkloadsConfigMapResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserWorkloadsConfigMapResult, error) {
			args := v.(LookupUserWorkloadsConfigMapArgs)
			r, err := LookupUserWorkloadsConfigMap(ctx, &args, opts...)
			var s LookupUserWorkloadsConfigMapResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserWorkloadsConfigMapResultOutput)
}

type LookupUserWorkloadsConfigMapOutputArgs struct {
	EnvironmentId            pulumi.StringInput    `pulumi:"environmentId"`
	Location                 pulumi.StringInput    `pulumi:"location"`
	Project                  pulumi.StringPtrInput `pulumi:"project"`
	UserWorkloadsConfigMapId pulumi.StringInput    `pulumi:"userWorkloadsConfigMapId"`
}

func (LookupUserWorkloadsConfigMapOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserWorkloadsConfigMapArgs)(nil)).Elem()
}

type LookupUserWorkloadsConfigMapResultOutput struct{ *pulumi.OutputState }

func (LookupUserWorkloadsConfigMapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserWorkloadsConfigMapResult)(nil)).Elem()
}

func (o LookupUserWorkloadsConfigMapResultOutput) ToLookupUserWorkloadsConfigMapResultOutput() LookupUserWorkloadsConfigMapResultOutput {
	return o
}

func (o LookupUserWorkloadsConfigMapResultOutput) ToLookupUserWorkloadsConfigMapResultOutputWithContext(ctx context.Context) LookupUserWorkloadsConfigMapResultOutput {
	return o
}

// Optional. The "data" field of Kubernetes ConfigMap, organized in key-value pairs. For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
func (o LookupUserWorkloadsConfigMapResultOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupUserWorkloadsConfigMapResult) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

// Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
func (o LookupUserWorkloadsConfigMapResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserWorkloadsConfigMapResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserWorkloadsConfigMapResultOutput{})
}
