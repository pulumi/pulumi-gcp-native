// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allowed IP range with user-provided description.
type AllowedIpRange struct {
	// Optional. User-provided description. It must contain at most 300 characters.
	Description *string `pulumi:"description"`
	// IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
	Value *string `pulumi:"value"`
}

// AllowedIpRangeInput is an input type that accepts AllowedIpRangeArgs and AllowedIpRangeOutput values.
// You can construct a concrete instance of `AllowedIpRangeInput` via:
//
//          AllowedIpRangeArgs{...}
type AllowedIpRangeInput interface {
	pulumi.Input

	ToAllowedIpRangeOutput() AllowedIpRangeOutput
	ToAllowedIpRangeOutputWithContext(context.Context) AllowedIpRangeOutput
}

// Allowed IP range with user-provided description.
type AllowedIpRangeArgs struct {
	// Optional. User-provided description. It must contain at most 300 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AllowedIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedIpRange)(nil)).Elem()
}

func (i AllowedIpRangeArgs) ToAllowedIpRangeOutput() AllowedIpRangeOutput {
	return i.ToAllowedIpRangeOutputWithContext(context.Background())
}

func (i AllowedIpRangeArgs) ToAllowedIpRangeOutputWithContext(ctx context.Context) AllowedIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedIpRangeOutput)
}

// AllowedIpRangeArrayInput is an input type that accepts AllowedIpRangeArray and AllowedIpRangeArrayOutput values.
// You can construct a concrete instance of `AllowedIpRangeArrayInput` via:
//
//          AllowedIpRangeArray{ AllowedIpRangeArgs{...} }
type AllowedIpRangeArrayInput interface {
	pulumi.Input

	ToAllowedIpRangeArrayOutput() AllowedIpRangeArrayOutput
	ToAllowedIpRangeArrayOutputWithContext(context.Context) AllowedIpRangeArrayOutput
}

type AllowedIpRangeArray []AllowedIpRangeInput

func (AllowedIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedIpRange)(nil)).Elem()
}

func (i AllowedIpRangeArray) ToAllowedIpRangeArrayOutput() AllowedIpRangeArrayOutput {
	return i.ToAllowedIpRangeArrayOutputWithContext(context.Background())
}

func (i AllowedIpRangeArray) ToAllowedIpRangeArrayOutputWithContext(ctx context.Context) AllowedIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedIpRangeArrayOutput)
}

// Allowed IP range with user-provided description.
type AllowedIpRangeOutput struct{ *pulumi.OutputState }

func (AllowedIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedIpRange)(nil)).Elem()
}

func (o AllowedIpRangeOutput) ToAllowedIpRangeOutput() AllowedIpRangeOutput {
	return o
}

func (o AllowedIpRangeOutput) ToAllowedIpRangeOutputWithContext(ctx context.Context) AllowedIpRangeOutput {
	return o
}

// Optional. User-provided description. It must contain at most 300 characters.
func (o AllowedIpRangeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowedIpRange) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
func (o AllowedIpRangeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowedIpRange) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AllowedIpRangeArrayOutput struct{ *pulumi.OutputState }

func (AllowedIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedIpRange)(nil)).Elem()
}

func (o AllowedIpRangeArrayOutput) ToAllowedIpRangeArrayOutput() AllowedIpRangeArrayOutput {
	return o
}

func (o AllowedIpRangeArrayOutput) ToAllowedIpRangeArrayOutputWithContext(ctx context.Context) AllowedIpRangeArrayOutput {
	return o
}

func (o AllowedIpRangeArrayOutput) Index(i pulumi.IntInput) AllowedIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedIpRange {
		return vs[0].([]AllowedIpRange)[vs[1].(int)]
	}).(AllowedIpRangeOutput)
}

// Allowed IP range with user-provided description.
type AllowedIpRangeResponse struct {
	// Optional. User-provided description. It must contain at most 300 characters.
	Description string `pulumi:"description"`
	// IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
	Value string `pulumi:"value"`
}

// Allowed IP range with user-provided description.
type AllowedIpRangeResponseOutput struct{ *pulumi.OutputState }

func (AllowedIpRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedIpRangeResponse)(nil)).Elem()
}

func (o AllowedIpRangeResponseOutput) ToAllowedIpRangeResponseOutput() AllowedIpRangeResponseOutput {
	return o
}

func (o AllowedIpRangeResponseOutput) ToAllowedIpRangeResponseOutputWithContext(ctx context.Context) AllowedIpRangeResponseOutput {
	return o
}

// Optional. User-provided description. It must contain at most 300 characters.
func (o AllowedIpRangeResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v AllowedIpRangeResponse) string { return v.Description }).(pulumi.StringOutput)
}

// IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
func (o AllowedIpRangeResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AllowedIpRangeResponse) string { return v.Value }).(pulumi.StringOutput)
}

type AllowedIpRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (AllowedIpRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedIpRangeResponse)(nil)).Elem()
}

func (o AllowedIpRangeResponseArrayOutput) ToAllowedIpRangeResponseArrayOutput() AllowedIpRangeResponseArrayOutput {
	return o
}

func (o AllowedIpRangeResponseArrayOutput) ToAllowedIpRangeResponseArrayOutputWithContext(ctx context.Context) AllowedIpRangeResponseArrayOutput {
	return o
}

func (o AllowedIpRangeResponseArrayOutput) Index(i pulumi.IntInput) AllowedIpRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedIpRangeResponse {
		return vs[0].([]AllowedIpRangeResponse)[vs[1].(int)]
	}).(AllowedIpRangeResponseOutput)
}

// The configuration of Cloud SQL instance that is used by the Apache Airflow software.
type DatabaseConfig struct {
	// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	MachineType *string `pulumi:"machineType"`
}

// DatabaseConfigInput is an input type that accepts DatabaseConfigArgs and DatabaseConfigOutput values.
// You can construct a concrete instance of `DatabaseConfigInput` via:
//
//          DatabaseConfigArgs{...}
type DatabaseConfigInput interface {
	pulumi.Input

	ToDatabaseConfigOutput() DatabaseConfigOutput
	ToDatabaseConfigOutputWithContext(context.Context) DatabaseConfigOutput
}

// The configuration of Cloud SQL instance that is used by the Apache Airflow software.
type DatabaseConfigArgs struct {
	// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
}

func (DatabaseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConfig)(nil)).Elem()
}

func (i DatabaseConfigArgs) ToDatabaseConfigOutput() DatabaseConfigOutput {
	return i.ToDatabaseConfigOutputWithContext(context.Background())
}

func (i DatabaseConfigArgs) ToDatabaseConfigOutputWithContext(ctx context.Context) DatabaseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConfigOutput)
}

func (i DatabaseConfigArgs) ToDatabaseConfigPtrOutput() DatabaseConfigPtrOutput {
	return i.ToDatabaseConfigPtrOutputWithContext(context.Background())
}

func (i DatabaseConfigArgs) ToDatabaseConfigPtrOutputWithContext(ctx context.Context) DatabaseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConfigOutput).ToDatabaseConfigPtrOutputWithContext(ctx)
}

// DatabaseConfigPtrInput is an input type that accepts DatabaseConfigArgs, DatabaseConfigPtr and DatabaseConfigPtrOutput values.
// You can construct a concrete instance of `DatabaseConfigPtrInput` via:
//
//          DatabaseConfigArgs{...}
//
//  or:
//
//          nil
type DatabaseConfigPtrInput interface {
	pulumi.Input

	ToDatabaseConfigPtrOutput() DatabaseConfigPtrOutput
	ToDatabaseConfigPtrOutputWithContext(context.Context) DatabaseConfigPtrOutput
}

type databaseConfigPtrType DatabaseConfigArgs

func DatabaseConfigPtr(v *DatabaseConfigArgs) DatabaseConfigPtrInput {
	return (*databaseConfigPtrType)(v)
}

func (*databaseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConfig)(nil)).Elem()
}

func (i *databaseConfigPtrType) ToDatabaseConfigPtrOutput() DatabaseConfigPtrOutput {
	return i.ToDatabaseConfigPtrOutputWithContext(context.Background())
}

func (i *databaseConfigPtrType) ToDatabaseConfigPtrOutputWithContext(ctx context.Context) DatabaseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConfigPtrOutput)
}

// The configuration of Cloud SQL instance that is used by the Apache Airflow software.
type DatabaseConfigOutput struct{ *pulumi.OutputState }

func (DatabaseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConfig)(nil)).Elem()
}

func (o DatabaseConfigOutput) ToDatabaseConfigOutput() DatabaseConfigOutput {
	return o
}

func (o DatabaseConfigOutput) ToDatabaseConfigOutputWithContext(ctx context.Context) DatabaseConfigOutput {
	return o
}

func (o DatabaseConfigOutput) ToDatabaseConfigPtrOutput() DatabaseConfigPtrOutput {
	return o.ToDatabaseConfigPtrOutputWithContext(context.Background())
}

func (o DatabaseConfigOutput) ToDatabaseConfigPtrOutputWithContext(ctx context.Context) DatabaseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseConfig) *DatabaseConfig {
		return &v
	}).(DatabaseConfigPtrOutput)
}

// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o DatabaseConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

type DatabaseConfigPtrOutput struct{ *pulumi.OutputState }

func (DatabaseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConfig)(nil)).Elem()
}

func (o DatabaseConfigPtrOutput) ToDatabaseConfigPtrOutput() DatabaseConfigPtrOutput {
	return o
}

func (o DatabaseConfigPtrOutput) ToDatabaseConfigPtrOutputWithContext(ctx context.Context) DatabaseConfigPtrOutput {
	return o
}

func (o DatabaseConfigPtrOutput) Elem() DatabaseConfigOutput {
	return o.ApplyT(func(v *DatabaseConfig) DatabaseConfig {
		if v != nil {
			return *v
		}
		var ret DatabaseConfig
		return ret
	}).(DatabaseConfigOutput)
}

// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o DatabaseConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The configuration of Cloud SQL instance that is used by the Apache Airflow software.
type DatabaseConfigResponse struct {
	// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	MachineType string `pulumi:"machineType"`
}

// The configuration of Cloud SQL instance that is used by the Apache Airflow software.
type DatabaseConfigResponseOutput struct{ *pulumi.OutputState }

func (DatabaseConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConfigResponse)(nil)).Elem()
}

func (o DatabaseConfigResponseOutput) ToDatabaseConfigResponseOutput() DatabaseConfigResponseOutput {
	return o
}

func (o DatabaseConfigResponseOutput) ToDatabaseConfigResponseOutputWithContext(ctx context.Context) DatabaseConfigResponseOutput {
	return o
}

// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o DatabaseConfigResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseConfigResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The encryption options for the Cloud Composer environment and its dependencies.Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
type EncryptionConfig struct {
	// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigInput is an input type that accepts EncryptionConfigArgs and EncryptionConfigOutput values.
// You can construct a concrete instance of `EncryptionConfigInput` via:
//
//          EncryptionConfigArgs{...}
type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(context.Context) EncryptionConfigOutput
}

// The encryption options for the Cloud Composer environment and its dependencies.Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
type EncryptionConfigArgs struct {
	// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput).ToEncryptionConfigPtrOutputWithContext(ctx)
}

// EncryptionConfigPtrInput is an input type that accepts EncryptionConfigArgs, EncryptionConfigPtr and EncryptionConfigPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigPtrInput` via:
//
//          EncryptionConfigArgs{...}
//
//  or:
//
//          nil
type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func EncryptionConfigPtr(v *EncryptionConfigArgs) EncryptionConfigPtrInput {
	return (*encryptionConfigPtrType)(v)
}

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

// The encryption options for the Cloud Composer environment and its dependencies.Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
func (o EncryptionConfigOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig {
		if v != nil {
			return *v
		}
		var ret EncryptionConfig
		return ret
	}).(EncryptionConfigOutput)
}

// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
func (o EncryptionConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// The encryption options for the Cloud Composer environment and its dependencies.Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
type EncryptionConfigResponse struct {
	// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// The encryption options for the Cloud Composer environment and its dependencies.Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
type EncryptionConfigResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigResponse)(nil)).Elem()
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutput() EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutputWithContext(ctx context.Context) EncryptionConfigResponseOutput {
	return o
}

// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
func (o EncryptionConfigResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Configuration information for an environment.
type EnvironmentConfig struct {
	// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
	DatabaseConfig *DatabaseConfig `pulumi:"databaseConfig"`
	// Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
	EncryptionConfig *EncryptionConfig `pulumi:"encryptionConfig"`
	// Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	EnvironmentSize *EnvironmentConfigEnvironmentSize `pulumi:"environmentSize"`
	// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, the default value for maintenance window will be applied. The default value is Saturday and Sunday 00-06 GMT.
	MaintenanceWindow *MaintenanceWindow `pulumi:"maintenanceWindow"`
	// The configuration used for the Kubernetes Engine cluster.
	NodeConfig *NodeConfig `pulumi:"nodeConfig"`
	// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	NodeCount *int `pulumi:"nodeCount"`
	// The configuration used for the Private IP Cloud Composer environment.
	PrivateEnvironmentConfig *PrivateEnvironmentConfig `pulumi:"privateEnvironmentConfig"`
	// The configuration settings for software inside the environment.
	SoftwareConfig *SoftwareConfig `pulumi:"softwareConfig"`
	// Optional. The configuration settings for the Airflow web server App Engine instance.
	WebServerConfig *WebServerConfig `pulumi:"webServerConfig"`
	// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
	WebServerNetworkAccessControl *WebServerNetworkAccessControl `pulumi:"webServerNetworkAccessControl"`
	// Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	WorkloadsConfig *WorkloadsConfig `pulumi:"workloadsConfig"`
}

// EnvironmentConfigInput is an input type that accepts EnvironmentConfigArgs and EnvironmentConfigOutput values.
// You can construct a concrete instance of `EnvironmentConfigInput` via:
//
//          EnvironmentConfigArgs{...}
type EnvironmentConfigInput interface {
	pulumi.Input

	ToEnvironmentConfigOutput() EnvironmentConfigOutput
	ToEnvironmentConfigOutputWithContext(context.Context) EnvironmentConfigOutput
}

// Configuration information for an environment.
type EnvironmentConfigArgs struct {
	// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
	DatabaseConfig DatabaseConfigPtrInput `pulumi:"databaseConfig"`
	// Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
	EncryptionConfig EncryptionConfigPtrInput `pulumi:"encryptionConfig"`
	// Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	EnvironmentSize EnvironmentConfigEnvironmentSizePtrInput `pulumi:"environmentSize"`
	// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, the default value for maintenance window will be applied. The default value is Saturday and Sunday 00-06 GMT.
	MaintenanceWindow MaintenanceWindowPtrInput `pulumi:"maintenanceWindow"`
	// The configuration used for the Kubernetes Engine cluster.
	NodeConfig NodeConfigPtrInput `pulumi:"nodeConfig"`
	// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	NodeCount pulumi.IntPtrInput `pulumi:"nodeCount"`
	// The configuration used for the Private IP Cloud Composer environment.
	PrivateEnvironmentConfig PrivateEnvironmentConfigPtrInput `pulumi:"privateEnvironmentConfig"`
	// The configuration settings for software inside the environment.
	SoftwareConfig SoftwareConfigPtrInput `pulumi:"softwareConfig"`
	// Optional. The configuration settings for the Airflow web server App Engine instance.
	WebServerConfig WebServerConfigPtrInput `pulumi:"webServerConfig"`
	// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
	WebServerNetworkAccessControl WebServerNetworkAccessControlPtrInput `pulumi:"webServerNetworkAccessControl"`
	// Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	WorkloadsConfig WorkloadsConfigPtrInput `pulumi:"workloadsConfig"`
}

func (EnvironmentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfig)(nil)).Elem()
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigOutput() EnvironmentConfigOutput {
	return i.ToEnvironmentConfigOutputWithContext(context.Background())
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigOutputWithContext(ctx context.Context) EnvironmentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigOutput)
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return i.ToEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i EnvironmentConfigArgs) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigOutput).ToEnvironmentConfigPtrOutputWithContext(ctx)
}

// EnvironmentConfigPtrInput is an input type that accepts EnvironmentConfigArgs, EnvironmentConfigPtr and EnvironmentConfigPtrOutput values.
// You can construct a concrete instance of `EnvironmentConfigPtrInput` via:
//
//          EnvironmentConfigArgs{...}
//
//  or:
//
//          nil
type EnvironmentConfigPtrInput interface {
	pulumi.Input

	ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput
	ToEnvironmentConfigPtrOutputWithContext(context.Context) EnvironmentConfigPtrOutput
}

type environmentConfigPtrType EnvironmentConfigArgs

func EnvironmentConfigPtr(v *EnvironmentConfigArgs) EnvironmentConfigPtrInput {
	return (*environmentConfigPtrType)(v)
}

func (*environmentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfig)(nil)).Elem()
}

func (i *environmentConfigPtrType) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return i.ToEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i *environmentConfigPtrType) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentConfigPtrOutput)
}

// Configuration information for an environment.
type EnvironmentConfigOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfig)(nil)).Elem()
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigOutput() EnvironmentConfigOutput {
	return o
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigOutputWithContext(ctx context.Context) EnvironmentConfigOutput {
	return o
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return o.ToEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (o EnvironmentConfigOutput) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnvironmentConfig) *EnvironmentConfig {
		return &v
	}).(EnvironmentConfigPtrOutput)
}

// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
func (o EnvironmentConfigOutput) DatabaseConfig() DatabaseConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *DatabaseConfig { return v.DatabaseConfig }).(DatabaseConfigPtrOutput)
}

// Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
func (o EnvironmentConfigOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *EncryptionConfig { return v.EncryptionConfig }).(EncryptionConfigPtrOutput)
}

// Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
func (o EnvironmentConfigOutput) EnvironmentSize() EnvironmentConfigEnvironmentSizePtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *EnvironmentConfigEnvironmentSize { return v.EnvironmentSize }).(EnvironmentConfigEnvironmentSizePtrOutput)
}

// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, the default value for maintenance window will be applied. The default value is Saturday and Sunday 00-06 GMT.
func (o EnvironmentConfigOutput) MaintenanceWindow() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *MaintenanceWindow { return v.MaintenanceWindow }).(MaintenanceWindowPtrOutput)
}

// The configuration used for the Kubernetes Engine cluster.
func (o EnvironmentConfigOutput) NodeConfig() NodeConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *NodeConfig { return v.NodeConfig }).(NodeConfigPtrOutput)
}

// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o EnvironmentConfigOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// The configuration used for the Private IP Cloud Composer environment.
func (o EnvironmentConfigOutput) PrivateEnvironmentConfig() PrivateEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *PrivateEnvironmentConfig { return v.PrivateEnvironmentConfig }).(PrivateEnvironmentConfigPtrOutput)
}

// The configuration settings for software inside the environment.
func (o EnvironmentConfigOutput) SoftwareConfig() SoftwareConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *SoftwareConfig { return v.SoftwareConfig }).(SoftwareConfigPtrOutput)
}

// Optional. The configuration settings for the Airflow web server App Engine instance.
func (o EnvironmentConfigOutput) WebServerConfig() WebServerConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *WebServerConfig { return v.WebServerConfig }).(WebServerConfigPtrOutput)
}

// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
func (o EnvironmentConfigOutput) WebServerNetworkAccessControl() WebServerNetworkAccessControlPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *WebServerNetworkAccessControl { return v.WebServerNetworkAccessControl }).(WebServerNetworkAccessControlPtrOutput)
}

// Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
func (o EnvironmentConfigOutput) WorkloadsConfig() WorkloadsConfigPtrOutput {
	return o.ApplyT(func(v EnvironmentConfig) *WorkloadsConfig { return v.WorkloadsConfig }).(WorkloadsConfigPtrOutput)
}

type EnvironmentConfigPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentConfig)(nil)).Elem()
}

func (o EnvironmentConfigPtrOutput) ToEnvironmentConfigPtrOutput() EnvironmentConfigPtrOutput {
	return o
}

func (o EnvironmentConfigPtrOutput) ToEnvironmentConfigPtrOutputWithContext(ctx context.Context) EnvironmentConfigPtrOutput {
	return o
}

func (o EnvironmentConfigPtrOutput) Elem() EnvironmentConfigOutput {
	return o.ApplyT(func(v *EnvironmentConfig) EnvironmentConfig {
		if v != nil {
			return *v
		}
		var ret EnvironmentConfig
		return ret
	}).(EnvironmentConfigOutput)
}

// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
func (o EnvironmentConfigPtrOutput) DatabaseConfig() DatabaseConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *DatabaseConfig {
		if v == nil {
			return nil
		}
		return v.DatabaseConfig
	}).(DatabaseConfigPtrOutput)
}

// Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
func (o EnvironmentConfigPtrOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *EncryptionConfig {
		if v == nil {
			return nil
		}
		return v.EncryptionConfig
	}).(EncryptionConfigPtrOutput)
}

// Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
func (o EnvironmentConfigPtrOutput) EnvironmentSize() EnvironmentConfigEnvironmentSizePtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *EnvironmentConfigEnvironmentSize {
		if v == nil {
			return nil
		}
		return v.EnvironmentSize
	}).(EnvironmentConfigEnvironmentSizePtrOutput)
}

// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, the default value for maintenance window will be applied. The default value is Saturday and Sunday 00-06 GMT.
func (o EnvironmentConfigPtrOutput) MaintenanceWindow() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *MaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindow
	}).(MaintenanceWindowPtrOutput)
}

// The configuration used for the Kubernetes Engine cluster.
func (o EnvironmentConfigPtrOutput) NodeConfig() NodeConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *NodeConfig {
		if v == nil {
			return nil
		}
		return v.NodeConfig
	}).(NodeConfigPtrOutput)
}

// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o EnvironmentConfigPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *int {
		if v == nil {
			return nil
		}
		return v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// The configuration used for the Private IP Cloud Composer environment.
func (o EnvironmentConfigPtrOutput) PrivateEnvironmentConfig() PrivateEnvironmentConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *PrivateEnvironmentConfig {
		if v == nil {
			return nil
		}
		return v.PrivateEnvironmentConfig
	}).(PrivateEnvironmentConfigPtrOutput)
}

// The configuration settings for software inside the environment.
func (o EnvironmentConfigPtrOutput) SoftwareConfig() SoftwareConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *SoftwareConfig {
		if v == nil {
			return nil
		}
		return v.SoftwareConfig
	}).(SoftwareConfigPtrOutput)
}

// Optional. The configuration settings for the Airflow web server App Engine instance.
func (o EnvironmentConfigPtrOutput) WebServerConfig() WebServerConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *WebServerConfig {
		if v == nil {
			return nil
		}
		return v.WebServerConfig
	}).(WebServerConfigPtrOutput)
}

// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
func (o EnvironmentConfigPtrOutput) WebServerNetworkAccessControl() WebServerNetworkAccessControlPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *WebServerNetworkAccessControl {
		if v == nil {
			return nil
		}
		return v.WebServerNetworkAccessControl
	}).(WebServerNetworkAccessControlPtrOutput)
}

// Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
func (o EnvironmentConfigPtrOutput) WorkloadsConfig() WorkloadsConfigPtrOutput {
	return o.ApplyT(func(v *EnvironmentConfig) *WorkloadsConfig {
		if v == nil {
			return nil
		}
		return v.WorkloadsConfig
	}).(WorkloadsConfigPtrOutput)
}

// Configuration information for an environment.
type EnvironmentConfigResponse struct {
	// The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
	AirflowUri string `pulumi:"airflowUri"`
	// The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
	DagGcsPrefix string `pulumi:"dagGcsPrefix"`
	// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
	DatabaseConfig DatabaseConfigResponse `pulumi:"databaseConfig"`
	// Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
	EncryptionConfig EncryptionConfigResponse `pulumi:"encryptionConfig"`
	// Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	EnvironmentSize string `pulumi:"environmentSize"`
	// The Kubernetes Engine cluster used to run this environment.
	GkeCluster string `pulumi:"gkeCluster"`
	// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, the default value for maintenance window will be applied. The default value is Saturday and Sunday 00-06 GMT.
	MaintenanceWindow MaintenanceWindowResponse `pulumi:"maintenanceWindow"`
	// The configuration used for the Kubernetes Engine cluster.
	NodeConfig NodeConfigResponse `pulumi:"nodeConfig"`
	// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	NodeCount int `pulumi:"nodeCount"`
	// The configuration used for the Private IP Cloud Composer environment.
	PrivateEnvironmentConfig PrivateEnvironmentConfigResponse `pulumi:"privateEnvironmentConfig"`
	// The configuration settings for software inside the environment.
	SoftwareConfig SoftwareConfigResponse `pulumi:"softwareConfig"`
	// Optional. The configuration settings for the Airflow web server App Engine instance.
	WebServerConfig WebServerConfigResponse `pulumi:"webServerConfig"`
	// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
	WebServerNetworkAccessControl WebServerNetworkAccessControlResponse `pulumi:"webServerNetworkAccessControl"`
	// Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	WorkloadsConfig WorkloadsConfigResponse `pulumi:"workloadsConfig"`
}

// Configuration information for an environment.
type EnvironmentConfigResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentConfigResponse)(nil)).Elem()
}

func (o EnvironmentConfigResponseOutput) ToEnvironmentConfigResponseOutput() EnvironmentConfigResponseOutput {
	return o
}

func (o EnvironmentConfigResponseOutput) ToEnvironmentConfigResponseOutputWithContext(ctx context.Context) EnvironmentConfigResponseOutput {
	return o
}

// The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
func (o EnvironmentConfigResponseOutput) AirflowUri() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) string { return v.AirflowUri }).(pulumi.StringOutput)
}

// The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
func (o EnvironmentConfigResponseOutput) DagGcsPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) string { return v.DagGcsPrefix }).(pulumi.StringOutput)
}

// Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software.
func (o EnvironmentConfigResponseOutput) DatabaseConfig() DatabaseConfigResponseOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) DatabaseConfigResponse { return v.DatabaseConfig }).(DatabaseConfigResponseOutput)
}

// Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated.
func (o EnvironmentConfigResponseOutput) EncryptionConfig() EncryptionConfigResponseOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) EncryptionConfigResponse { return v.EncryptionConfig }).(EncryptionConfigResponseOutput)
}

// Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
func (o EnvironmentConfigResponseOutput) EnvironmentSize() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) string { return v.EnvironmentSize }).(pulumi.StringOutput)
}

// The Kubernetes Engine cluster used to run this environment.
func (o EnvironmentConfigResponseOutput) GkeCluster() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) string { return v.GkeCluster }).(pulumi.StringOutput)
}

// Optional. The maintenance window is the period when Cloud Composer components may undergo maintenance. It is defined so that maintenance is not executed during peak hours or critical time periods. The system will not be under maintenance for every occurrence of this window, but when maintenance is planned, it will be scheduled during the window. The maintenance window period must encompass at least 12 hours per week. This may be split into multiple chunks, each with a size of at least 4 hours. If this value is omitted, the default value for maintenance window will be applied. The default value is Saturday and Sunday 00-06 GMT.
func (o EnvironmentConfigResponseOutput) MaintenanceWindow() MaintenanceWindowResponseOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) MaintenanceWindowResponse { return v.MaintenanceWindow }).(MaintenanceWindowResponseOutput)
}

// The configuration used for the Kubernetes Engine cluster.
func (o EnvironmentConfigResponseOutput) NodeConfig() NodeConfigResponseOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) NodeConfigResponse { return v.NodeConfig }).(NodeConfigResponseOutput)
}

// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o EnvironmentConfigResponseOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) int { return v.NodeCount }).(pulumi.IntOutput)
}

// The configuration used for the Private IP Cloud Composer environment.
func (o EnvironmentConfigResponseOutput) PrivateEnvironmentConfig() PrivateEnvironmentConfigResponseOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) PrivateEnvironmentConfigResponse { return v.PrivateEnvironmentConfig }).(PrivateEnvironmentConfigResponseOutput)
}

// The configuration settings for software inside the environment.
func (o EnvironmentConfigResponseOutput) SoftwareConfig() SoftwareConfigResponseOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) SoftwareConfigResponse { return v.SoftwareConfig }).(SoftwareConfigResponseOutput)
}

// Optional. The configuration settings for the Airflow web server App Engine instance.
func (o EnvironmentConfigResponseOutput) WebServerConfig() WebServerConfigResponseOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) WebServerConfigResponse { return v.WebServerConfig }).(WebServerConfigResponseOutput)
}

// Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied.
func (o EnvironmentConfigResponseOutput) WebServerNetworkAccessControl() WebServerNetworkAccessControlResponseOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) WebServerNetworkAccessControlResponse {
		return v.WebServerNetworkAccessControl
	}).(WebServerNetworkAccessControlResponseOutput)
}

// Optional. The workloads configuration settings for the GKE cluster associated with the Cloud Composer environment. The GKE cluster runs Airflow scheduler, web server and workers workloads. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
func (o EnvironmentConfigResponseOutput) WorkloadsConfig() WorkloadsConfigResponseOutput {
	return o.ApplyT(func(v EnvironmentConfigResponse) WorkloadsConfigResponse { return v.WorkloadsConfig }).(WorkloadsConfigResponseOutput)
}

// Configuration for controlling how IPs are allocated in the GKE cluster running the Apache Airflow software.
type IPAllocationPolicy struct {
	// Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock *string `pulumi:"clusterIpv4CidrBlock"`
	// Optional. The name of the GKE cluster's secondary range used to allocate IP addresses to pods. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
	ClusterSecondaryRangeName *string `pulumi:"clusterSecondaryRangeName"`
	// Optional. The IP address range of the services IP addresses in this GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock *string `pulumi:"servicesIpv4CidrBlock"`
	// Optional. The name of the services' secondary range used to allocate IP addresses to the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
	ServicesSecondaryRangeName *string `pulumi:"servicesSecondaryRangeName"`
	// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
	UseIpAliases *bool `pulumi:"useIpAliases"`
}

// IPAllocationPolicyInput is an input type that accepts IPAllocationPolicyArgs and IPAllocationPolicyOutput values.
// You can construct a concrete instance of `IPAllocationPolicyInput` via:
//
//          IPAllocationPolicyArgs{...}
type IPAllocationPolicyInput interface {
	pulumi.Input

	ToIPAllocationPolicyOutput() IPAllocationPolicyOutput
	ToIPAllocationPolicyOutputWithContext(context.Context) IPAllocationPolicyOutput
}

// Configuration for controlling how IPs are allocated in the GKE cluster running the Apache Airflow software.
type IPAllocationPolicyArgs struct {
	// Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"clusterIpv4CidrBlock"`
	// Optional. The name of the GKE cluster's secondary range used to allocate IP addresses to pods. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
	ClusterSecondaryRangeName pulumi.StringPtrInput `pulumi:"clusterSecondaryRangeName"`
	// Optional. The IP address range of the services IP addresses in this GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock pulumi.StringPtrInput `pulumi:"servicesIpv4CidrBlock"`
	// Optional. The name of the services' secondary range used to allocate IP addresses to the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
	ServicesSecondaryRangeName pulumi.StringPtrInput `pulumi:"servicesSecondaryRangeName"`
	// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
	UseIpAliases pulumi.BoolPtrInput `pulumi:"useIpAliases"`
}

func (IPAllocationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicy)(nil)).Elem()
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyOutput() IPAllocationPolicyOutput {
	return i.ToIPAllocationPolicyOutputWithContext(context.Background())
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyOutputWithContext(ctx context.Context) IPAllocationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyOutput)
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return i.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i IPAllocationPolicyArgs) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyOutput).ToIPAllocationPolicyPtrOutputWithContext(ctx)
}

// IPAllocationPolicyPtrInput is an input type that accepts IPAllocationPolicyArgs, IPAllocationPolicyPtr and IPAllocationPolicyPtrOutput values.
// You can construct a concrete instance of `IPAllocationPolicyPtrInput` via:
//
//          IPAllocationPolicyArgs{...}
//
//  or:
//
//          nil
type IPAllocationPolicyPtrInput interface {
	pulumi.Input

	ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput
	ToIPAllocationPolicyPtrOutputWithContext(context.Context) IPAllocationPolicyPtrOutput
}

type ipallocationPolicyPtrType IPAllocationPolicyArgs

func IPAllocationPolicyPtr(v *IPAllocationPolicyArgs) IPAllocationPolicyPtrInput {
	return (*ipallocationPolicyPtrType)(v)
}

func (*ipallocationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicy)(nil)).Elem()
}

func (i *ipallocationPolicyPtrType) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return i.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (i *ipallocationPolicyPtrType) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPAllocationPolicyPtrOutput)
}

// Configuration for controlling how IPs are allocated in the GKE cluster running the Apache Airflow software.
type IPAllocationPolicyOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicy)(nil)).Elem()
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyOutput() IPAllocationPolicyOutput {
	return o
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyOutputWithContext(ctx context.Context) IPAllocationPolicyOutput {
	return o
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return o.ToIPAllocationPolicyPtrOutputWithContext(context.Background())
}

func (o IPAllocationPolicyOutput) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IPAllocationPolicy) *IPAllocationPolicy {
		return &v
	}).(IPAllocationPolicyPtrOutput)
}

// Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Optional. The name of the GKE cluster's secondary range used to allocate IP addresses to pods. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
func (o IPAllocationPolicyOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ClusterSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// Optional. The IP address range of the services IP addresses in this GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Optional. The name of the services' secondary range used to allocate IP addresses to the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
func (o IPAllocationPolicyOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *string { return v.ServicesSecondaryRangeName }).(pulumi.StringPtrOutput)
}

// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
func (o IPAllocationPolicyOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPAllocationPolicy) *bool { return v.UseIpAliases }).(pulumi.BoolPtrOutput)
}

type IPAllocationPolicyPtrOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPAllocationPolicy)(nil)).Elem()
}

func (o IPAllocationPolicyPtrOutput) ToIPAllocationPolicyPtrOutput() IPAllocationPolicyPtrOutput {
	return o
}

func (o IPAllocationPolicyPtrOutput) ToIPAllocationPolicyPtrOutputWithContext(ctx context.Context) IPAllocationPolicyPtrOutput {
	return o
}

func (o IPAllocationPolicyPtrOutput) Elem() IPAllocationPolicyOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) IPAllocationPolicy {
		if v != nil {
			return *v
		}
		var ret IPAllocationPolicy
		return ret
	}).(IPAllocationPolicyOutput)
}

// Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) ClusterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Optional. The name of the GKE cluster's secondary range used to allocate IP addresses to pods. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
func (o IPAllocationPolicyPtrOutput) ClusterSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ClusterSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// Optional. The IP address range of the services IP addresses in this GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyPtrOutput) ServicesIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Optional. The name of the services' secondary range used to allocate IP addresses to the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
func (o IPAllocationPolicyPtrOutput) ServicesSecondaryRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ServicesSecondaryRangeName
	}).(pulumi.StringPtrOutput)
}

// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
func (o IPAllocationPolicyPtrOutput) UseIpAliases() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IPAllocationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UseIpAliases
	}).(pulumi.BoolPtrOutput)
}

// Configuration for controlling how IPs are allocated in the GKE cluster running the Apache Airflow software.
type IPAllocationPolicyResponse struct {
	// Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ClusterIpv4CidrBlock string `pulumi:"clusterIpv4CidrBlock"`
	// Optional. The name of the GKE cluster's secondary range used to allocate IP addresses to pods. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
	ClusterSecondaryRangeName string `pulumi:"clusterSecondaryRangeName"`
	// Optional. The IP address range of the services IP addresses in this GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
	ServicesIpv4CidrBlock string `pulumi:"servicesIpv4CidrBlock"`
	// Optional. The name of the services' secondary range used to allocate IP addresses to the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
	ServicesSecondaryRangeName string `pulumi:"servicesSecondaryRangeName"`
	// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
	UseIpAliases bool `pulumi:"useIpAliases"`
}

// Configuration for controlling how IPs are allocated in the GKE cluster running the Apache Airflow software.
type IPAllocationPolicyResponseOutput struct{ *pulumi.OutputState }

func (IPAllocationPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPAllocationPolicyResponse)(nil)).Elem()
}

func (o IPAllocationPolicyResponseOutput) ToIPAllocationPolicyResponseOutput() IPAllocationPolicyResponseOutput {
	return o
}

func (o IPAllocationPolicyResponseOutput) ToIPAllocationPolicyResponseOutputWithContext(ctx context.Context) IPAllocationPolicyResponseOutput {
	return o
}

// Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponseOutput) ClusterIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ClusterIpv4CidrBlock }).(pulumi.StringOutput)
}

// Optional. The name of the GKE cluster's secondary range used to allocate IP addresses to pods. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
func (o IPAllocationPolicyResponseOutput) ClusterSecondaryRangeName() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ClusterSecondaryRangeName }).(pulumi.StringOutput)
}

// Optional. The IP address range of the services IP addresses in this GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
func (o IPAllocationPolicyResponseOutput) ServicesIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ServicesIpv4CidrBlock }).(pulumi.StringOutput)
}

// Optional. The name of the services' secondary range used to allocate IP addresses to the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
func (o IPAllocationPolicyResponseOutput) ServicesSecondaryRangeName() pulumi.StringOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) string { return v.ServicesSecondaryRangeName }).(pulumi.StringOutput)
}

// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
func (o IPAllocationPolicyResponseOutput) UseIpAliases() pulumi.BoolOutput {
	return o.ApplyT(func(v IPAllocationPolicyResponse) bool { return v.UseIpAliases }).(pulumi.BoolOutput)
}

// The configuration settings for Cloud Composer maintenance window. The following example: ```{ "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" }``` would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
type MaintenanceWindow struct {
	// Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end-time must be in the future, relative to `start_time`.
	EndTime string `pulumi:"endTime"`
	// Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
	Recurrence string `pulumi:"recurrence"`
	// Start time of the first recurrence of the maintenance window.
	StartTime string `pulumi:"startTime"`
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//          MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// The configuration settings for Cloud Composer maintenance window. The following example: ```{ "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" }``` would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
type MaintenanceWindowArgs struct {
	// Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end-time must be in the future, relative to `start_time`.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
	Recurrence pulumi.StringInput `pulumi:"recurrence"`
	// Start time of the first recurrence of the maintenance window.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//          MaintenanceWindowArgs{...}
//
//  or:
//
//          nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

// The configuration settings for Cloud Composer maintenance window. The following example: ```{ "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" }``` would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

// Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end-time must be in the future, relative to `start_time`.
func (o MaintenanceWindowOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindow) string { return v.EndTime }).(pulumi.StringOutput)
}

// Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
func (o MaintenanceWindowOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindow) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Start time of the first recurrence of the maintenance window.
func (o MaintenanceWindowOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindow) string { return v.StartTime }).(pulumi.StringOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret MaintenanceWindow
		return ret
	}).(MaintenanceWindowOutput)
}

// Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end-time must be in the future, relative to `start_time`.
func (o MaintenanceWindowPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
func (o MaintenanceWindowPtrOutput) Recurrence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.Recurrence
	}).(pulumi.StringPtrOutput)
}

// Start time of the first recurrence of the maintenance window.
func (o MaintenanceWindowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The configuration settings for Cloud Composer maintenance window. The following example: ```{ "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" }``` would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
type MaintenanceWindowResponse struct {
	// Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end-time must be in the future, relative to `start_time`.
	EndTime string `pulumi:"endTime"`
	// Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
	Recurrence string `pulumi:"recurrence"`
	// Start time of the first recurrence of the maintenance window.
	StartTime string `pulumi:"startTime"`
}

// The configuration settings for Cloud Composer maintenance window. The following example: ```{ "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" }``` would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
type MaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutput() MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutputWithContext(ctx context.Context) MaintenanceWindowResponseOutput {
	return o
}

// Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end-time must be in the future, relative to `start_time`.
func (o MaintenanceWindowResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
func (o MaintenanceWindowResponseOutput) Recurrence() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) string { return v.Recurrence }).(pulumi.StringOutput)
}

// Start time of the first recurrence of the maintenance window.
func (o MaintenanceWindowResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
type NodeConfig struct {
	// Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Optional. The configuration for controlling how IPs are allocated in the GKE cluster.
	IpAllocationPolicy *IPAllocationPolicy `pulumi:"ipAllocationPolicy"`
	// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	Location *string `pulumi:"location"`
	// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	MachineType *string `pulumi:"machineType"`
	// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the "default" network ID in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
	Network *string `pulumi:"network"`
	// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
	Subnetwork *string `pulumi:"subnetwork"`
	// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	Tags []string `pulumi:"tags"`
}

// NodeConfigInput is an input type that accepts NodeConfigArgs and NodeConfigOutput values.
// You can construct a concrete instance of `NodeConfigInput` via:
//
//          NodeConfigArgs{...}
type NodeConfigInput interface {
	pulumi.Input

	ToNodeConfigOutput() NodeConfigOutput
	ToNodeConfigOutputWithContext(context.Context) NodeConfigOutput
}

// The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
type NodeConfigArgs struct {
	// Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Optional. The configuration for controlling how IPs are allocated in the GKE cluster.
	IpAllocationPolicy IPAllocationPolicyPtrInput `pulumi:"ipAllocationPolicy"`
	// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the "default" network ID in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
	// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (NodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (i NodeConfigArgs) ToNodeConfigOutput() NodeConfigOutput {
	return i.ToNodeConfigOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput)
}

func (i NodeConfigArgs) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput).ToNodeConfigPtrOutputWithContext(ctx)
}

// NodeConfigPtrInput is an input type that accepts NodeConfigArgs, NodeConfigPtr and NodeConfigPtrOutput values.
// You can construct a concrete instance of `NodeConfigPtrInput` via:
//
//          NodeConfigArgs{...}
//
//  or:
//
//          nil
type NodeConfigPtrInput interface {
	pulumi.Input

	ToNodeConfigPtrOutput() NodeConfigPtrOutput
	ToNodeConfigPtrOutputWithContext(context.Context) NodeConfigPtrOutput
}

type nodeConfigPtrType NodeConfigArgs

func NodeConfigPtr(v *NodeConfigArgs) NodeConfigPtrInput {
	return (*nodeConfigPtrType)(v)
}

func (*nodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigPtrOutput)
}

// The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
type NodeConfigOutput struct{ *pulumi.OutputState }

func (NodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (o NodeConfigOutput) ToNodeConfigOutput() NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (o NodeConfigOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeConfig) *NodeConfig {
		return &v
	}).(NodeConfigPtrOutput)
}

// Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Optional. The configuration for controlling how IPs are allocated in the GKE cluster.
func (o NodeConfigOutput) IpAllocationPolicy() IPAllocationPolicyPtrOutput {
	return o.ApplyT(func(v NodeConfig) *IPAllocationPolicy { return v.IpAllocationPolicy }).(IPAllocationPolicyPtrOutput)
}

// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the "default" network ID in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
func (o NodeConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfig) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
func (o NodeConfigOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
func (o NodeConfigOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeConfig) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfig) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type NodeConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) Elem() NodeConfigOutput {
	return o.ApplyT(func(v *NodeConfig) NodeConfig {
		if v != nil {
			return *v
		}
		var ret NodeConfig
		return ret
	}).(NodeConfigOutput)
}

// Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Optional. The configuration for controlling how IPs are allocated in the GKE cluster.
func (o NodeConfigPtrOutput) IpAllocationPolicy() IPAllocationPolicyPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *IPAllocationPolicy {
		if v == nil {
			return nil
		}
		return v.IpAllocationPolicy
	}).(IPAllocationPolicyPtrOutput)
}

// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the "default" network ID in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
func (o NodeConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigPtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
func (o NodeConfigPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
func (o NodeConfigPtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
type NodeConfigResponse struct {
	// Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	DiskSizeGb int `pulumi:"diskSizeGb"`
	// Optional. The configuration for controlling how IPs are allocated in the GKE cluster.
	IpAllocationPolicy IPAllocationPolicyResponse `pulumi:"ipAllocationPolicy"`
	// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	Location string `pulumi:"location"`
	// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	MachineType string `pulumi:"machineType"`
	// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the "default" network ID in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
	Network string `pulumi:"network"`
	// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	OauthScopes []string `pulumi:"oauthScopes"`
	// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
	Subnetwork string `pulumi:"subnetwork"`
	// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	Tags []string `pulumi:"tags"`
}

// The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
type NodeConfigResponseOutput struct{ *pulumi.OutputState }

func (NodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigResponse)(nil)).Elem()
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutput() NodeConfigResponseOutput {
	return o
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutputWithContext(ctx context.Context) NodeConfigResponseOutput {
	return o
}

// Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigResponseOutput) DiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.DiskSizeGb }).(pulumi.IntOutput)
}

// Optional. The configuration for controlling how IPs are allocated in the GKE cluster.
func (o NodeConfigResponseOutput) IpAllocationPolicy() IPAllocationPolicyResponseOutput {
	return o.ApplyT(func(v NodeConfigResponse) IPAllocationPolicyResponse { return v.IpAllocationPolicy }).(IPAllocationPolicyResponseOutput)
}

// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the "default" network ID in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
func (o NodeConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigResponseOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfigResponse) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
func (o NodeConfigResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
func (o NodeConfigResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o NodeConfigResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeConfigResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Configuration options for the private GKE cluster in a Cloud Composer environment.
type PrivateClusterConfig struct {
	// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
	EnablePrivateEndpoint *bool `pulumi:"enablePrivateEndpoint"`
	// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
	MasterIpv4CidrBlock *string `pulumi:"masterIpv4CidrBlock"`
}

// PrivateClusterConfigInput is an input type that accepts PrivateClusterConfigArgs and PrivateClusterConfigOutput values.
// You can construct a concrete instance of `PrivateClusterConfigInput` via:
//
//          PrivateClusterConfigArgs{...}
type PrivateClusterConfigInput interface {
	pulumi.Input

	ToPrivateClusterConfigOutput() PrivateClusterConfigOutput
	ToPrivateClusterConfigOutputWithContext(context.Context) PrivateClusterConfigOutput
}

// Configuration options for the private GKE cluster in a Cloud Composer environment.
type PrivateClusterConfigArgs struct {
	// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
	EnablePrivateEndpoint pulumi.BoolPtrInput `pulumi:"enablePrivateEndpoint"`
	// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
	MasterIpv4CidrBlock pulumi.StringPtrInput `pulumi:"masterIpv4CidrBlock"`
}

func (PrivateClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return i.ToPrivateClusterConfigOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput)
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput).ToPrivateClusterConfigPtrOutputWithContext(ctx)
}

// PrivateClusterConfigPtrInput is an input type that accepts PrivateClusterConfigArgs, PrivateClusterConfigPtr and PrivateClusterConfigPtrOutput values.
// You can construct a concrete instance of `PrivateClusterConfigPtrInput` via:
//
//          PrivateClusterConfigArgs{...}
//
//  or:
//
//          nil
type PrivateClusterConfigPtrInput interface {
	pulumi.Input

	ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput
	ToPrivateClusterConfigPtrOutputWithContext(context.Context) PrivateClusterConfigPtrOutput
}

type privateClusterConfigPtrType PrivateClusterConfigArgs

func PrivateClusterConfigPtr(v *PrivateClusterConfigArgs) PrivateClusterConfigPtrInput {
	return (*privateClusterConfigPtrType)(v)
}

func (*privateClusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigPtrOutput)
}

// Configuration options for the private GKE cluster in a Cloud Composer environment.
type PrivateClusterConfigOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateClusterConfig) *PrivateClusterConfig {
		return &v
	}).(PrivateClusterConfigPtrOutput)
}

// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
func (o PrivateClusterConfigOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *bool { return v.EnablePrivateEndpoint }).(pulumi.BoolPtrOutput)
}

// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
func (o PrivateClusterConfigOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *string { return v.MasterIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

type PrivateClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) Elem() PrivateClusterConfigOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) PrivateClusterConfig {
		if v != nil {
			return *v
		}
		var ret PrivateClusterConfig
		return ret
	}).(PrivateClusterConfigOutput)
}

// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
func (o PrivateClusterConfigPtrOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateEndpoint
	}).(pulumi.BoolPtrOutput)
}

// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
func (o PrivateClusterConfigPtrOutput) MasterIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *string {
		if v == nil {
			return nil
		}
		return v.MasterIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Configuration options for the private GKE cluster in a Cloud Composer environment.
type PrivateClusterConfigResponse struct {
	// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
	EnablePrivateEndpoint bool `pulumi:"enablePrivateEndpoint"`
	// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
	MasterIpv4CidrBlock string `pulumi:"masterIpv4CidrBlock"`
	// The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the GKE cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
	MasterIpv4ReservedRange string `pulumi:"masterIpv4ReservedRange"`
}

// Configuration options for the private GKE cluster in a Cloud Composer environment.
type PrivateClusterConfigResponseOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfigResponse)(nil)).Elem()
}

func (o PrivateClusterConfigResponseOutput) ToPrivateClusterConfigResponseOutput() PrivateClusterConfigResponseOutput {
	return o
}

func (o PrivateClusterConfigResponseOutput) ToPrivateClusterConfigResponseOutputWithContext(ctx context.Context) PrivateClusterConfigResponseOutput {
	return o
}

// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
func (o PrivateClusterConfigResponseOutput) EnablePrivateEndpoint() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) bool { return v.EnablePrivateEndpoint }).(pulumi.BoolOutput)
}

// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
func (o PrivateClusterConfigResponseOutput) MasterIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.MasterIpv4CidrBlock }).(pulumi.StringOutput)
}

// The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the GKE cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
func (o PrivateClusterConfigResponseOutput) MasterIpv4ReservedRange() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.MasterIpv4ReservedRange }).(pulumi.StringOutput)
}

// The configuration information for configuring a Private IP Cloud Composer environment.
type PrivateEnvironmentConfig struct {
	// Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
	CloudComposerConnectionSubnetwork *string `pulumi:"cloudComposerConnectionSubnetwork"`
	// Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	CloudComposerNetworkIpv4CidrBlock *string `pulumi:"cloudComposerNetworkIpv4CidrBlock"`
	// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
	CloudSqlIpv4CidrBlock *string `pulumi:"cloudSqlIpv4CidrBlock"`
	// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	EnablePrivateEnvironment *bool `pulumi:"enablePrivateEnvironment"`
	// Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
	PrivateClusterConfig *PrivateClusterConfig `pulumi:"privateClusterConfig"`
	// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	WebServerIpv4CidrBlock *string `pulumi:"webServerIpv4CidrBlock"`
}

// PrivateEnvironmentConfigInput is an input type that accepts PrivateEnvironmentConfigArgs and PrivateEnvironmentConfigOutput values.
// You can construct a concrete instance of `PrivateEnvironmentConfigInput` via:
//
//          PrivateEnvironmentConfigArgs{...}
type PrivateEnvironmentConfigInput interface {
	pulumi.Input

	ToPrivateEnvironmentConfigOutput() PrivateEnvironmentConfigOutput
	ToPrivateEnvironmentConfigOutputWithContext(context.Context) PrivateEnvironmentConfigOutput
}

// The configuration information for configuring a Private IP Cloud Composer environment.
type PrivateEnvironmentConfigArgs struct {
	// Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
	CloudComposerConnectionSubnetwork pulumi.StringPtrInput `pulumi:"cloudComposerConnectionSubnetwork"`
	// Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	CloudComposerNetworkIpv4CidrBlock pulumi.StringPtrInput `pulumi:"cloudComposerNetworkIpv4CidrBlock"`
	// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
	CloudSqlIpv4CidrBlock pulumi.StringPtrInput `pulumi:"cloudSqlIpv4CidrBlock"`
	// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	EnablePrivateEnvironment pulumi.BoolPtrInput `pulumi:"enablePrivateEnvironment"`
	// Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
	PrivateClusterConfig PrivateClusterConfigPtrInput `pulumi:"privateClusterConfig"`
	// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	WebServerIpv4CidrBlock pulumi.StringPtrInput `pulumi:"webServerIpv4CidrBlock"`
}

func (PrivateEnvironmentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEnvironmentConfig)(nil)).Elem()
}

func (i PrivateEnvironmentConfigArgs) ToPrivateEnvironmentConfigOutput() PrivateEnvironmentConfigOutput {
	return i.ToPrivateEnvironmentConfigOutputWithContext(context.Background())
}

func (i PrivateEnvironmentConfigArgs) ToPrivateEnvironmentConfigOutputWithContext(ctx context.Context) PrivateEnvironmentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEnvironmentConfigOutput)
}

func (i PrivateEnvironmentConfigArgs) ToPrivateEnvironmentConfigPtrOutput() PrivateEnvironmentConfigPtrOutput {
	return i.ToPrivateEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i PrivateEnvironmentConfigArgs) ToPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) PrivateEnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEnvironmentConfigOutput).ToPrivateEnvironmentConfigPtrOutputWithContext(ctx)
}

// PrivateEnvironmentConfigPtrInput is an input type that accepts PrivateEnvironmentConfigArgs, PrivateEnvironmentConfigPtr and PrivateEnvironmentConfigPtrOutput values.
// You can construct a concrete instance of `PrivateEnvironmentConfigPtrInput` via:
//
//          PrivateEnvironmentConfigArgs{...}
//
//  or:
//
//          nil
type PrivateEnvironmentConfigPtrInput interface {
	pulumi.Input

	ToPrivateEnvironmentConfigPtrOutput() PrivateEnvironmentConfigPtrOutput
	ToPrivateEnvironmentConfigPtrOutputWithContext(context.Context) PrivateEnvironmentConfigPtrOutput
}

type privateEnvironmentConfigPtrType PrivateEnvironmentConfigArgs

func PrivateEnvironmentConfigPtr(v *PrivateEnvironmentConfigArgs) PrivateEnvironmentConfigPtrInput {
	return (*privateEnvironmentConfigPtrType)(v)
}

func (*privateEnvironmentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEnvironmentConfig)(nil)).Elem()
}

func (i *privateEnvironmentConfigPtrType) ToPrivateEnvironmentConfigPtrOutput() PrivateEnvironmentConfigPtrOutput {
	return i.ToPrivateEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i *privateEnvironmentConfigPtrType) ToPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) PrivateEnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEnvironmentConfigPtrOutput)
}

// The configuration information for configuring a Private IP Cloud Composer environment.
type PrivateEnvironmentConfigOutput struct{ *pulumi.OutputState }

func (PrivateEnvironmentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEnvironmentConfig)(nil)).Elem()
}

func (o PrivateEnvironmentConfigOutput) ToPrivateEnvironmentConfigOutput() PrivateEnvironmentConfigOutput {
	return o
}

func (o PrivateEnvironmentConfigOutput) ToPrivateEnvironmentConfigOutputWithContext(ctx context.Context) PrivateEnvironmentConfigOutput {
	return o
}

func (o PrivateEnvironmentConfigOutput) ToPrivateEnvironmentConfigPtrOutput() PrivateEnvironmentConfigPtrOutput {
	return o.ToPrivateEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (o PrivateEnvironmentConfigOutput) ToPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) PrivateEnvironmentConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEnvironmentConfig) *PrivateEnvironmentConfig {
		return &v
	}).(PrivateEnvironmentConfigPtrOutput)
}

// Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
func (o PrivateEnvironmentConfigOutput) CloudComposerConnectionSubnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *string { return v.CloudComposerConnectionSubnetwork }).(pulumi.StringPtrOutput)
}

// Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
func (o PrivateEnvironmentConfigOutput) CloudComposerNetworkIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *string { return v.CloudComposerNetworkIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
func (o PrivateEnvironmentConfigOutput) CloudSqlIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *string { return v.CloudSqlIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o PrivateEnvironmentConfigOutput) EnablePrivateEnvironment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *bool { return v.EnablePrivateEnvironment }).(pulumi.BoolPtrOutput)
}

// Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
func (o PrivateEnvironmentConfigOutput) PrivateClusterConfig() PrivateClusterConfigPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *PrivateClusterConfig { return v.PrivateClusterConfig }).(PrivateClusterConfigPtrOutput)
}

// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o PrivateEnvironmentConfigOutput) WebServerIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfig) *string { return v.WebServerIpv4CidrBlock }).(pulumi.StringPtrOutput)
}

type PrivateEnvironmentConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateEnvironmentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEnvironmentConfig)(nil)).Elem()
}

func (o PrivateEnvironmentConfigPtrOutput) ToPrivateEnvironmentConfigPtrOutput() PrivateEnvironmentConfigPtrOutput {
	return o
}

func (o PrivateEnvironmentConfigPtrOutput) ToPrivateEnvironmentConfigPtrOutputWithContext(ctx context.Context) PrivateEnvironmentConfigPtrOutput {
	return o
}

func (o PrivateEnvironmentConfigPtrOutput) Elem() PrivateEnvironmentConfigOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) PrivateEnvironmentConfig {
		if v != nil {
			return *v
		}
		var ret PrivateEnvironmentConfig
		return ret
	}).(PrivateEnvironmentConfigOutput)
}

// Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
func (o PrivateEnvironmentConfigPtrOutput) CloudComposerConnectionSubnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.CloudComposerConnectionSubnetwork
	}).(pulumi.StringPtrOutput)
}

// Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
func (o PrivateEnvironmentConfigPtrOutput) CloudComposerNetworkIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.CloudComposerNetworkIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
func (o PrivateEnvironmentConfigPtrOutput) CloudSqlIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.CloudSqlIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o PrivateEnvironmentConfigPtrOutput) EnablePrivateEnvironment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateEnvironment
	}).(pulumi.BoolPtrOutput)
}

// Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
func (o PrivateEnvironmentConfigPtrOutput) PrivateClusterConfig() PrivateClusterConfigPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *PrivateClusterConfig {
		if v == nil {
			return nil
		}
		return v.PrivateClusterConfig
	}).(PrivateClusterConfigPtrOutput)
}

// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o PrivateEnvironmentConfigPtrOutput) WebServerIpv4CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEnvironmentConfig) *string {
		if v == nil {
			return nil
		}
		return v.WebServerIpv4CidrBlock
	}).(pulumi.StringPtrOutput)
}

// The configuration information for configuring a Private IP Cloud Composer environment.
type PrivateEnvironmentConfigResponse struct {
	// Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
	CloudComposerConnectionSubnetwork string `pulumi:"cloudComposerConnectionSubnetwork"`
	// Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	CloudComposerNetworkIpv4CidrBlock string `pulumi:"cloudComposerNetworkIpv4CidrBlock"`
	// The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	CloudComposerNetworkIpv4ReservedRange string `pulumi:"cloudComposerNetworkIpv4ReservedRange"`
	// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
	CloudSqlIpv4CidrBlock string `pulumi:"cloudSqlIpv4CidrBlock"`
	// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	EnablePrivateEnvironment bool `pulumi:"enablePrivateEnvironment"`
	// Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
	PrivateClusterConfig PrivateClusterConfigResponse `pulumi:"privateClusterConfig"`
	// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	WebServerIpv4CidrBlock string `pulumi:"webServerIpv4CidrBlock"`
	// The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	WebServerIpv4ReservedRange string `pulumi:"webServerIpv4ReservedRange"`
}

// The configuration information for configuring a Private IP Cloud Composer environment.
type PrivateEnvironmentConfigResponseOutput struct{ *pulumi.OutputState }

func (PrivateEnvironmentConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEnvironmentConfigResponse)(nil)).Elem()
}

func (o PrivateEnvironmentConfigResponseOutput) ToPrivateEnvironmentConfigResponseOutput() PrivateEnvironmentConfigResponseOutput {
	return o
}

func (o PrivateEnvironmentConfigResponseOutput) ToPrivateEnvironmentConfigResponseOutputWithContext(ctx context.Context) PrivateEnvironmentConfigResponseOutput {
	return o
}

// Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
func (o PrivateEnvironmentConfigResponseOutput) CloudComposerConnectionSubnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfigResponse) string { return v.CloudComposerConnectionSubnetwork }).(pulumi.StringOutput)
}

// Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
func (o PrivateEnvironmentConfigResponseOutput) CloudComposerNetworkIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfigResponse) string { return v.CloudComposerNetworkIpv4CidrBlock }).(pulumi.StringOutput)
}

// The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
func (o PrivateEnvironmentConfigResponseOutput) CloudComposerNetworkIpv4ReservedRange() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfigResponse) string { return v.CloudComposerNetworkIpv4ReservedRange }).(pulumi.StringOutput)
}

// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
func (o PrivateEnvironmentConfigResponseOutput) CloudSqlIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfigResponse) string { return v.CloudSqlIpv4CidrBlock }).(pulumi.StringOutput)
}

// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o PrivateEnvironmentConfigResponseOutput) EnablePrivateEnvironment() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfigResponse) bool { return v.EnablePrivateEnvironment }).(pulumi.BoolOutput)
}

// Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment.
func (o PrivateEnvironmentConfigResponseOutput) PrivateClusterConfig() PrivateClusterConfigResponseOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfigResponse) PrivateClusterConfigResponse { return v.PrivateClusterConfig }).(PrivateClusterConfigResponseOutput)
}

// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o PrivateEnvironmentConfigResponseOutput) WebServerIpv4CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfigResponse) string { return v.WebServerIpv4CidrBlock }).(pulumi.StringOutput)
}

// The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
func (o PrivateEnvironmentConfigResponseOutput) WebServerIpv4ReservedRange() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEnvironmentConfigResponse) string { return v.WebServerIpv4ReservedRange }).(pulumi.StringOutput)
}

// Configuration for resources used by Airflow schedulers.
type SchedulerResource struct {
	// Optional. The number of schedulers.
	Count *int `pulumi:"count"`
	// Optional. CPU request and limit for a single Airflow scheduler replica.
	Cpu *float64 `pulumi:"cpu"`
	// Optional. Memory (GB) request and limit for a single Airflow scheduler replica.
	MemoryGb *float64 `pulumi:"memoryGb"`
	// Optional. Storage (GB) request and limit for a single Airflow scheduler replica.
	StorageGb *float64 `pulumi:"storageGb"`
}

// SchedulerResourceInput is an input type that accepts SchedulerResourceArgs and SchedulerResourceOutput values.
// You can construct a concrete instance of `SchedulerResourceInput` via:
//
//          SchedulerResourceArgs{...}
type SchedulerResourceInput interface {
	pulumi.Input

	ToSchedulerResourceOutput() SchedulerResourceOutput
	ToSchedulerResourceOutputWithContext(context.Context) SchedulerResourceOutput
}

// Configuration for resources used by Airflow schedulers.
type SchedulerResourceArgs struct {
	// Optional. The number of schedulers.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Optional. CPU request and limit for a single Airflow scheduler replica.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// Optional. Memory (GB) request and limit for a single Airflow scheduler replica.
	MemoryGb pulumi.Float64PtrInput `pulumi:"memoryGb"`
	// Optional. Storage (GB) request and limit for a single Airflow scheduler replica.
	StorageGb pulumi.Float64PtrInput `pulumi:"storageGb"`
}

func (SchedulerResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulerResource)(nil)).Elem()
}

func (i SchedulerResourceArgs) ToSchedulerResourceOutput() SchedulerResourceOutput {
	return i.ToSchedulerResourceOutputWithContext(context.Background())
}

func (i SchedulerResourceArgs) ToSchedulerResourceOutputWithContext(ctx context.Context) SchedulerResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerResourceOutput)
}

func (i SchedulerResourceArgs) ToSchedulerResourcePtrOutput() SchedulerResourcePtrOutput {
	return i.ToSchedulerResourcePtrOutputWithContext(context.Background())
}

func (i SchedulerResourceArgs) ToSchedulerResourcePtrOutputWithContext(ctx context.Context) SchedulerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerResourceOutput).ToSchedulerResourcePtrOutputWithContext(ctx)
}

// SchedulerResourcePtrInput is an input type that accepts SchedulerResourceArgs, SchedulerResourcePtr and SchedulerResourcePtrOutput values.
// You can construct a concrete instance of `SchedulerResourcePtrInput` via:
//
//          SchedulerResourceArgs{...}
//
//  or:
//
//          nil
type SchedulerResourcePtrInput interface {
	pulumi.Input

	ToSchedulerResourcePtrOutput() SchedulerResourcePtrOutput
	ToSchedulerResourcePtrOutputWithContext(context.Context) SchedulerResourcePtrOutput
}

type schedulerResourcePtrType SchedulerResourceArgs

func SchedulerResourcePtr(v *SchedulerResourceArgs) SchedulerResourcePtrInput {
	return (*schedulerResourcePtrType)(v)
}

func (*schedulerResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulerResource)(nil)).Elem()
}

func (i *schedulerResourcePtrType) ToSchedulerResourcePtrOutput() SchedulerResourcePtrOutput {
	return i.ToSchedulerResourcePtrOutputWithContext(context.Background())
}

func (i *schedulerResourcePtrType) ToSchedulerResourcePtrOutputWithContext(ctx context.Context) SchedulerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerResourcePtrOutput)
}

// Configuration for resources used by Airflow schedulers.
type SchedulerResourceOutput struct{ *pulumi.OutputState }

func (SchedulerResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulerResource)(nil)).Elem()
}

func (o SchedulerResourceOutput) ToSchedulerResourceOutput() SchedulerResourceOutput {
	return o
}

func (o SchedulerResourceOutput) ToSchedulerResourceOutputWithContext(ctx context.Context) SchedulerResourceOutput {
	return o
}

func (o SchedulerResourceOutput) ToSchedulerResourcePtrOutput() SchedulerResourcePtrOutput {
	return o.ToSchedulerResourcePtrOutputWithContext(context.Background())
}

func (o SchedulerResourceOutput) ToSchedulerResourcePtrOutputWithContext(ctx context.Context) SchedulerResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulerResource) *SchedulerResource {
		return &v
	}).(SchedulerResourcePtrOutput)
}

// Optional. The number of schedulers.
func (o SchedulerResourceOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchedulerResource) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Optional. CPU request and limit for a single Airflow scheduler replica.
func (o SchedulerResourceOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SchedulerResource) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// Optional. Memory (GB) request and limit for a single Airflow scheduler replica.
func (o SchedulerResourceOutput) MemoryGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SchedulerResource) *float64 { return v.MemoryGb }).(pulumi.Float64PtrOutput)
}

// Optional. Storage (GB) request and limit for a single Airflow scheduler replica.
func (o SchedulerResourceOutput) StorageGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SchedulerResource) *float64 { return v.StorageGb }).(pulumi.Float64PtrOutput)
}

type SchedulerResourcePtrOutput struct{ *pulumi.OutputState }

func (SchedulerResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulerResource)(nil)).Elem()
}

func (o SchedulerResourcePtrOutput) ToSchedulerResourcePtrOutput() SchedulerResourcePtrOutput {
	return o
}

func (o SchedulerResourcePtrOutput) ToSchedulerResourcePtrOutputWithContext(ctx context.Context) SchedulerResourcePtrOutput {
	return o
}

func (o SchedulerResourcePtrOutput) Elem() SchedulerResourceOutput {
	return o.ApplyT(func(v *SchedulerResource) SchedulerResource {
		if v != nil {
			return *v
		}
		var ret SchedulerResource
		return ret
	}).(SchedulerResourceOutput)
}

// Optional. The number of schedulers.
func (o SchedulerResourcePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchedulerResource) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Optional. CPU request and limit for a single Airflow scheduler replica.
func (o SchedulerResourcePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SchedulerResource) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// Optional. Memory (GB) request and limit for a single Airflow scheduler replica.
func (o SchedulerResourcePtrOutput) MemoryGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SchedulerResource) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryGb
	}).(pulumi.Float64PtrOutput)
}

// Optional. Storage (GB) request and limit for a single Airflow scheduler replica.
func (o SchedulerResourcePtrOutput) StorageGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SchedulerResource) *float64 {
		if v == nil {
			return nil
		}
		return v.StorageGb
	}).(pulumi.Float64PtrOutput)
}

// Configuration for resources used by Airflow schedulers.
type SchedulerResourceResponse struct {
	// Optional. The number of schedulers.
	Count int `pulumi:"count"`
	// Optional. CPU request and limit for a single Airflow scheduler replica.
	Cpu float64 `pulumi:"cpu"`
	// Optional. Memory (GB) request and limit for a single Airflow scheduler replica.
	MemoryGb float64 `pulumi:"memoryGb"`
	// Optional. Storage (GB) request and limit for a single Airflow scheduler replica.
	StorageGb float64 `pulumi:"storageGb"`
}

// Configuration for resources used by Airflow schedulers.
type SchedulerResourceResponseOutput struct{ *pulumi.OutputState }

func (SchedulerResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulerResourceResponse)(nil)).Elem()
}

func (o SchedulerResourceResponseOutput) ToSchedulerResourceResponseOutput() SchedulerResourceResponseOutput {
	return o
}

func (o SchedulerResourceResponseOutput) ToSchedulerResourceResponseOutputWithContext(ctx context.Context) SchedulerResourceResponseOutput {
	return o
}

// Optional. The number of schedulers.
func (o SchedulerResourceResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v SchedulerResourceResponse) int { return v.Count }).(pulumi.IntOutput)
}

// Optional. CPU request and limit for a single Airflow scheduler replica.
func (o SchedulerResourceResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v SchedulerResourceResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// Optional. Memory (GB) request and limit for a single Airflow scheduler replica.
func (o SchedulerResourceResponseOutput) MemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v SchedulerResourceResponse) float64 { return v.MemoryGb }).(pulumi.Float64Output)
}

// Optional. Storage (GB) request and limit for a single Airflow scheduler replica.
func (o SchedulerResourceResponseOutput) StorageGb() pulumi.Float64Output {
	return o.ApplyT(func(v SchedulerResourceResponse) float64 { return v.StorageGb }).(pulumi.Float64Output)
}

// Specifies the selection and configuration of software inside the environment.
type SoftwareConfig struct {
	// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
	AirflowConfigOverrides map[string]string `pulumi:"airflowConfigOverrides"`
	// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
	EnvVariables map[string]string `pulumi:"envVariables"`
	// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?)?|latest)-airflow-([0-9]+(\.[0-9]+(\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
	ImageVersion *string `pulumi:"imageVersion"`
	// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
	PypiPackages map[string]string `pulumi:"pypiPackages"`
	// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
	PythonVersion *string `pulumi:"pythonVersion"`
	// Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
	SchedulerCount *int `pulumi:"schedulerCount"`
}

// SoftwareConfigInput is an input type that accepts SoftwareConfigArgs and SoftwareConfigOutput values.
// You can construct a concrete instance of `SoftwareConfigInput` via:
//
//          SoftwareConfigArgs{...}
type SoftwareConfigInput interface {
	pulumi.Input

	ToSoftwareConfigOutput() SoftwareConfigOutput
	ToSoftwareConfigOutputWithContext(context.Context) SoftwareConfigOutput
}

// Specifies the selection and configuration of software inside the environment.
type SoftwareConfigArgs struct {
	// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
	AirflowConfigOverrides pulumi.StringMapInput `pulumi:"airflowConfigOverrides"`
	// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
	EnvVariables pulumi.StringMapInput `pulumi:"envVariables"`
	// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?)?|latest)-airflow-([0-9]+(\.[0-9]+(\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
	ImageVersion pulumi.StringPtrInput `pulumi:"imageVersion"`
	// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
	PypiPackages pulumi.StringMapInput `pulumi:"pypiPackages"`
	// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
	PythonVersion pulumi.StringPtrInput `pulumi:"pythonVersion"`
	// Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
	SchedulerCount pulumi.IntPtrInput `pulumi:"schedulerCount"`
}

func (SoftwareConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareConfig)(nil)).Elem()
}

func (i SoftwareConfigArgs) ToSoftwareConfigOutput() SoftwareConfigOutput {
	return i.ToSoftwareConfigOutputWithContext(context.Background())
}

func (i SoftwareConfigArgs) ToSoftwareConfigOutputWithContext(ctx context.Context) SoftwareConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareConfigOutput)
}

func (i SoftwareConfigArgs) ToSoftwareConfigPtrOutput() SoftwareConfigPtrOutput {
	return i.ToSoftwareConfigPtrOutputWithContext(context.Background())
}

func (i SoftwareConfigArgs) ToSoftwareConfigPtrOutputWithContext(ctx context.Context) SoftwareConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareConfigOutput).ToSoftwareConfigPtrOutputWithContext(ctx)
}

// SoftwareConfigPtrInput is an input type that accepts SoftwareConfigArgs, SoftwareConfigPtr and SoftwareConfigPtrOutput values.
// You can construct a concrete instance of `SoftwareConfigPtrInput` via:
//
//          SoftwareConfigArgs{...}
//
//  or:
//
//          nil
type SoftwareConfigPtrInput interface {
	pulumi.Input

	ToSoftwareConfigPtrOutput() SoftwareConfigPtrOutput
	ToSoftwareConfigPtrOutputWithContext(context.Context) SoftwareConfigPtrOutput
}

type softwareConfigPtrType SoftwareConfigArgs

func SoftwareConfigPtr(v *SoftwareConfigArgs) SoftwareConfigPtrInput {
	return (*softwareConfigPtrType)(v)
}

func (*softwareConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareConfig)(nil)).Elem()
}

func (i *softwareConfigPtrType) ToSoftwareConfigPtrOutput() SoftwareConfigPtrOutput {
	return i.ToSoftwareConfigPtrOutputWithContext(context.Background())
}

func (i *softwareConfigPtrType) ToSoftwareConfigPtrOutputWithContext(ctx context.Context) SoftwareConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftwareConfigPtrOutput)
}

// Specifies the selection and configuration of software inside the environment.
type SoftwareConfigOutput struct{ *pulumi.OutputState }

func (SoftwareConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareConfig)(nil)).Elem()
}

func (o SoftwareConfigOutput) ToSoftwareConfigOutput() SoftwareConfigOutput {
	return o
}

func (o SoftwareConfigOutput) ToSoftwareConfigOutputWithContext(ctx context.Context) SoftwareConfigOutput {
	return o
}

func (o SoftwareConfigOutput) ToSoftwareConfigPtrOutput() SoftwareConfigPtrOutput {
	return o.ToSoftwareConfigPtrOutputWithContext(context.Background())
}

func (o SoftwareConfigOutput) ToSoftwareConfigPtrOutputWithContext(ctx context.Context) SoftwareConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SoftwareConfig) *SoftwareConfig {
		return &v
	}).(SoftwareConfigPtrOutput)
}

// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
func (o SoftwareConfigOutput) AirflowConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v SoftwareConfig) map[string]string { return v.AirflowConfigOverrides }).(pulumi.StringMapOutput)
}

// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
func (o SoftwareConfigOutput) EnvVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v SoftwareConfig) map[string]string { return v.EnvVariables }).(pulumi.StringMapOutput)
}

// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?)?|latest)-airflow-([0-9]+(\.[0-9]+(\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
func (o SoftwareConfigOutput) ImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareConfig) *string { return v.ImageVersion }).(pulumi.StringPtrOutput)
}

// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
func (o SoftwareConfigOutput) PypiPackages() pulumi.StringMapOutput {
	return o.ApplyT(func(v SoftwareConfig) map[string]string { return v.PypiPackages }).(pulumi.StringMapOutput)
}

// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
func (o SoftwareConfigOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SoftwareConfig) *string { return v.PythonVersion }).(pulumi.StringPtrOutput)
}

// Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
func (o SoftwareConfigOutput) SchedulerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SoftwareConfig) *int { return v.SchedulerCount }).(pulumi.IntPtrOutput)
}

type SoftwareConfigPtrOutput struct{ *pulumi.OutputState }

func (SoftwareConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareConfig)(nil)).Elem()
}

func (o SoftwareConfigPtrOutput) ToSoftwareConfigPtrOutput() SoftwareConfigPtrOutput {
	return o
}

func (o SoftwareConfigPtrOutput) ToSoftwareConfigPtrOutputWithContext(ctx context.Context) SoftwareConfigPtrOutput {
	return o
}

func (o SoftwareConfigPtrOutput) Elem() SoftwareConfigOutput {
	return o.ApplyT(func(v *SoftwareConfig) SoftwareConfig {
		if v != nil {
			return *v
		}
		var ret SoftwareConfig
		return ret
	}).(SoftwareConfigOutput)
}

// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
func (o SoftwareConfigPtrOutput) AirflowConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SoftwareConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.AirflowConfigOverrides
	}).(pulumi.StringMapOutput)
}

// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
func (o SoftwareConfigPtrOutput) EnvVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SoftwareConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvVariables
	}).(pulumi.StringMapOutput)
}

// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?)?|latest)-airflow-([0-9]+(\.[0-9]+(\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
func (o SoftwareConfigPtrOutput) ImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareConfig) *string {
		if v == nil {
			return nil
		}
		return v.ImageVersion
	}).(pulumi.StringPtrOutput)
}

// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
func (o SoftwareConfigPtrOutput) PypiPackages() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SoftwareConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.PypiPackages
	}).(pulumi.StringMapOutput)
}

// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
func (o SoftwareConfigPtrOutput) PythonVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SoftwareConfig) *string {
		if v == nil {
			return nil
		}
		return v.PythonVersion
	}).(pulumi.StringPtrOutput)
}

// Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
func (o SoftwareConfigPtrOutput) SchedulerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SoftwareConfig) *int {
		if v == nil {
			return nil
		}
		return v.SchedulerCount
	}).(pulumi.IntPtrOutput)
}

// Specifies the selection and configuration of software inside the environment.
type SoftwareConfigResponse struct {
	// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
	AirflowConfigOverrides map[string]string `pulumi:"airflowConfigOverrides"`
	// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
	EnvVariables map[string]string `pulumi:"envVariables"`
	// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?)?|latest)-airflow-([0-9]+(\.[0-9]+(\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
	ImageVersion string `pulumi:"imageVersion"`
	// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
	PypiPackages map[string]string `pulumi:"pypiPackages"`
	// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
	PythonVersion string `pulumi:"pythonVersion"`
	// Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
	SchedulerCount int `pulumi:"schedulerCount"`
}

// Specifies the selection and configuration of software inside the environment.
type SoftwareConfigResponseOutput struct{ *pulumi.OutputState }

func (SoftwareConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareConfigResponse)(nil)).Elem()
}

func (o SoftwareConfigResponseOutput) ToSoftwareConfigResponseOutput() SoftwareConfigResponseOutput {
	return o
}

func (o SoftwareConfigResponseOutput) ToSoftwareConfigResponseOutputWithContext(ctx context.Context) SoftwareConfigResponseOutput {
	return o
}

// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
func (o SoftwareConfigResponseOutput) AirflowConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v SoftwareConfigResponse) map[string]string { return v.AirflowConfigOverrides }).(pulumi.StringMapOutput)
}

// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
func (o SoftwareConfigResponseOutput) EnvVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v SoftwareConfigResponse) map[string]string { return v.EnvVariables }).(pulumi.StringMapOutput)
}

// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?)?|latest)-airflow-([0-9]+(\.[0-9]+(\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
func (o SoftwareConfigResponseOutput) ImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SoftwareConfigResponse) string { return v.ImageVersion }).(pulumi.StringOutput)
}

// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
func (o SoftwareConfigResponseOutput) PypiPackages() pulumi.StringMapOutput {
	return o.ApplyT(func(v SoftwareConfigResponse) map[string]string { return v.PypiPackages }).(pulumi.StringMapOutput)
}

// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
func (o SoftwareConfigResponseOutput) PythonVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SoftwareConfigResponse) string { return v.PythonVersion }).(pulumi.StringOutput)
}

// Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
func (o SoftwareConfigResponseOutput) SchedulerCount() pulumi.IntOutput {
	return o.ApplyT(func(v SoftwareConfigResponse) int { return v.SchedulerCount }).(pulumi.IntOutput)
}

// The configuration settings for the Airflow web server App Engine instance. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*
type WebServerConfig struct {
	// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
	MachineType *string `pulumi:"machineType"`
}

// WebServerConfigInput is an input type that accepts WebServerConfigArgs and WebServerConfigOutput values.
// You can construct a concrete instance of `WebServerConfigInput` via:
//
//          WebServerConfigArgs{...}
type WebServerConfigInput interface {
	pulumi.Input

	ToWebServerConfigOutput() WebServerConfigOutput
	ToWebServerConfigOutputWithContext(context.Context) WebServerConfigOutput
}

// The configuration settings for the Airflow web server App Engine instance. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*
type WebServerConfigArgs struct {
	// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
}

func (WebServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerConfig)(nil)).Elem()
}

func (i WebServerConfigArgs) ToWebServerConfigOutput() WebServerConfigOutput {
	return i.ToWebServerConfigOutputWithContext(context.Background())
}

func (i WebServerConfigArgs) ToWebServerConfigOutputWithContext(ctx context.Context) WebServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerConfigOutput)
}

func (i WebServerConfigArgs) ToWebServerConfigPtrOutput() WebServerConfigPtrOutput {
	return i.ToWebServerConfigPtrOutputWithContext(context.Background())
}

func (i WebServerConfigArgs) ToWebServerConfigPtrOutputWithContext(ctx context.Context) WebServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerConfigOutput).ToWebServerConfigPtrOutputWithContext(ctx)
}

// WebServerConfigPtrInput is an input type that accepts WebServerConfigArgs, WebServerConfigPtr and WebServerConfigPtrOutput values.
// You can construct a concrete instance of `WebServerConfigPtrInput` via:
//
//          WebServerConfigArgs{...}
//
//  or:
//
//          nil
type WebServerConfigPtrInput interface {
	pulumi.Input

	ToWebServerConfigPtrOutput() WebServerConfigPtrOutput
	ToWebServerConfigPtrOutputWithContext(context.Context) WebServerConfigPtrOutput
}

type webServerConfigPtrType WebServerConfigArgs

func WebServerConfigPtr(v *WebServerConfigArgs) WebServerConfigPtrInput {
	return (*webServerConfigPtrType)(v)
}

func (*webServerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServerConfig)(nil)).Elem()
}

func (i *webServerConfigPtrType) ToWebServerConfigPtrOutput() WebServerConfigPtrOutput {
	return i.ToWebServerConfigPtrOutputWithContext(context.Background())
}

func (i *webServerConfigPtrType) ToWebServerConfigPtrOutputWithContext(ctx context.Context) WebServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerConfigPtrOutput)
}

// The configuration settings for the Airflow web server App Engine instance. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*
type WebServerConfigOutput struct{ *pulumi.OutputState }

func (WebServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerConfig)(nil)).Elem()
}

func (o WebServerConfigOutput) ToWebServerConfigOutput() WebServerConfigOutput {
	return o
}

func (o WebServerConfigOutput) ToWebServerConfigOutputWithContext(ctx context.Context) WebServerConfigOutput {
	return o
}

func (o WebServerConfigOutput) ToWebServerConfigPtrOutput() WebServerConfigPtrOutput {
	return o.ToWebServerConfigPtrOutputWithContext(context.Background())
}

func (o WebServerConfigOutput) ToWebServerConfigPtrOutputWithContext(ctx context.Context) WebServerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebServerConfig) *WebServerConfig {
		return &v
	}).(WebServerConfigPtrOutput)
}

// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
func (o WebServerConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebServerConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

type WebServerConfigPtrOutput struct{ *pulumi.OutputState }

func (WebServerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServerConfig)(nil)).Elem()
}

func (o WebServerConfigPtrOutput) ToWebServerConfigPtrOutput() WebServerConfigPtrOutput {
	return o
}

func (o WebServerConfigPtrOutput) ToWebServerConfigPtrOutputWithContext(ctx context.Context) WebServerConfigPtrOutput {
	return o
}

func (o WebServerConfigPtrOutput) Elem() WebServerConfigOutput {
	return o.ApplyT(func(v *WebServerConfig) WebServerConfig {
		if v != nil {
			return *v
		}
		var ret WebServerConfig
		return ret
	}).(WebServerConfigOutput)
}

// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
func (o WebServerConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The configuration settings for the Airflow web server App Engine instance. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*
type WebServerConfigResponse struct {
	// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
	MachineType string `pulumi:"machineType"`
}

// The configuration settings for the Airflow web server App Engine instance. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*
type WebServerConfigResponseOutput struct{ *pulumi.OutputState }

func (WebServerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerConfigResponse)(nil)).Elem()
}

func (o WebServerConfigResponseOutput) ToWebServerConfigResponseOutput() WebServerConfigResponseOutput {
	return o
}

func (o WebServerConfigResponseOutput) ToWebServerConfigResponseOutputWithContext(ctx context.Context) WebServerConfigResponseOutput {
	return o
}

// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
func (o WebServerConfigResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v WebServerConfigResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// Network-level access control policy for the Airflow web server.
type WebServerNetworkAccessControl struct {
	// A collection of allowed IP ranges with descriptions.
	AllowedIpRanges []AllowedIpRange `pulumi:"allowedIpRanges"`
}

// WebServerNetworkAccessControlInput is an input type that accepts WebServerNetworkAccessControlArgs and WebServerNetworkAccessControlOutput values.
// You can construct a concrete instance of `WebServerNetworkAccessControlInput` via:
//
//          WebServerNetworkAccessControlArgs{...}
type WebServerNetworkAccessControlInput interface {
	pulumi.Input

	ToWebServerNetworkAccessControlOutput() WebServerNetworkAccessControlOutput
	ToWebServerNetworkAccessControlOutputWithContext(context.Context) WebServerNetworkAccessControlOutput
}

// Network-level access control policy for the Airflow web server.
type WebServerNetworkAccessControlArgs struct {
	// A collection of allowed IP ranges with descriptions.
	AllowedIpRanges AllowedIpRangeArrayInput `pulumi:"allowedIpRanges"`
}

func (WebServerNetworkAccessControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerNetworkAccessControl)(nil)).Elem()
}

func (i WebServerNetworkAccessControlArgs) ToWebServerNetworkAccessControlOutput() WebServerNetworkAccessControlOutput {
	return i.ToWebServerNetworkAccessControlOutputWithContext(context.Background())
}

func (i WebServerNetworkAccessControlArgs) ToWebServerNetworkAccessControlOutputWithContext(ctx context.Context) WebServerNetworkAccessControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerNetworkAccessControlOutput)
}

func (i WebServerNetworkAccessControlArgs) ToWebServerNetworkAccessControlPtrOutput() WebServerNetworkAccessControlPtrOutput {
	return i.ToWebServerNetworkAccessControlPtrOutputWithContext(context.Background())
}

func (i WebServerNetworkAccessControlArgs) ToWebServerNetworkAccessControlPtrOutputWithContext(ctx context.Context) WebServerNetworkAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerNetworkAccessControlOutput).ToWebServerNetworkAccessControlPtrOutputWithContext(ctx)
}

// WebServerNetworkAccessControlPtrInput is an input type that accepts WebServerNetworkAccessControlArgs, WebServerNetworkAccessControlPtr and WebServerNetworkAccessControlPtrOutput values.
// You can construct a concrete instance of `WebServerNetworkAccessControlPtrInput` via:
//
//          WebServerNetworkAccessControlArgs{...}
//
//  or:
//
//          nil
type WebServerNetworkAccessControlPtrInput interface {
	pulumi.Input

	ToWebServerNetworkAccessControlPtrOutput() WebServerNetworkAccessControlPtrOutput
	ToWebServerNetworkAccessControlPtrOutputWithContext(context.Context) WebServerNetworkAccessControlPtrOutput
}

type webServerNetworkAccessControlPtrType WebServerNetworkAccessControlArgs

func WebServerNetworkAccessControlPtr(v *WebServerNetworkAccessControlArgs) WebServerNetworkAccessControlPtrInput {
	return (*webServerNetworkAccessControlPtrType)(v)
}

func (*webServerNetworkAccessControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServerNetworkAccessControl)(nil)).Elem()
}

func (i *webServerNetworkAccessControlPtrType) ToWebServerNetworkAccessControlPtrOutput() WebServerNetworkAccessControlPtrOutput {
	return i.ToWebServerNetworkAccessControlPtrOutputWithContext(context.Background())
}

func (i *webServerNetworkAccessControlPtrType) ToWebServerNetworkAccessControlPtrOutputWithContext(ctx context.Context) WebServerNetworkAccessControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerNetworkAccessControlPtrOutput)
}

// Network-level access control policy for the Airflow web server.
type WebServerNetworkAccessControlOutput struct{ *pulumi.OutputState }

func (WebServerNetworkAccessControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerNetworkAccessControl)(nil)).Elem()
}

func (o WebServerNetworkAccessControlOutput) ToWebServerNetworkAccessControlOutput() WebServerNetworkAccessControlOutput {
	return o
}

func (o WebServerNetworkAccessControlOutput) ToWebServerNetworkAccessControlOutputWithContext(ctx context.Context) WebServerNetworkAccessControlOutput {
	return o
}

func (o WebServerNetworkAccessControlOutput) ToWebServerNetworkAccessControlPtrOutput() WebServerNetworkAccessControlPtrOutput {
	return o.ToWebServerNetworkAccessControlPtrOutputWithContext(context.Background())
}

func (o WebServerNetworkAccessControlOutput) ToWebServerNetworkAccessControlPtrOutputWithContext(ctx context.Context) WebServerNetworkAccessControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebServerNetworkAccessControl) *WebServerNetworkAccessControl {
		return &v
	}).(WebServerNetworkAccessControlPtrOutput)
}

// A collection of allowed IP ranges with descriptions.
func (o WebServerNetworkAccessControlOutput) AllowedIpRanges() AllowedIpRangeArrayOutput {
	return o.ApplyT(func(v WebServerNetworkAccessControl) []AllowedIpRange { return v.AllowedIpRanges }).(AllowedIpRangeArrayOutput)
}

type WebServerNetworkAccessControlPtrOutput struct{ *pulumi.OutputState }

func (WebServerNetworkAccessControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServerNetworkAccessControl)(nil)).Elem()
}

func (o WebServerNetworkAccessControlPtrOutput) ToWebServerNetworkAccessControlPtrOutput() WebServerNetworkAccessControlPtrOutput {
	return o
}

func (o WebServerNetworkAccessControlPtrOutput) ToWebServerNetworkAccessControlPtrOutputWithContext(ctx context.Context) WebServerNetworkAccessControlPtrOutput {
	return o
}

func (o WebServerNetworkAccessControlPtrOutput) Elem() WebServerNetworkAccessControlOutput {
	return o.ApplyT(func(v *WebServerNetworkAccessControl) WebServerNetworkAccessControl {
		if v != nil {
			return *v
		}
		var ret WebServerNetworkAccessControl
		return ret
	}).(WebServerNetworkAccessControlOutput)
}

// A collection of allowed IP ranges with descriptions.
func (o WebServerNetworkAccessControlPtrOutput) AllowedIpRanges() AllowedIpRangeArrayOutput {
	return o.ApplyT(func(v *WebServerNetworkAccessControl) []AllowedIpRange {
		if v == nil {
			return nil
		}
		return v.AllowedIpRanges
	}).(AllowedIpRangeArrayOutput)
}

// Network-level access control policy for the Airflow web server.
type WebServerNetworkAccessControlResponse struct {
	// A collection of allowed IP ranges with descriptions.
	AllowedIpRanges []AllowedIpRangeResponse `pulumi:"allowedIpRanges"`
}

// Network-level access control policy for the Airflow web server.
type WebServerNetworkAccessControlResponseOutput struct{ *pulumi.OutputState }

func (WebServerNetworkAccessControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerNetworkAccessControlResponse)(nil)).Elem()
}

func (o WebServerNetworkAccessControlResponseOutput) ToWebServerNetworkAccessControlResponseOutput() WebServerNetworkAccessControlResponseOutput {
	return o
}

func (o WebServerNetworkAccessControlResponseOutput) ToWebServerNetworkAccessControlResponseOutputWithContext(ctx context.Context) WebServerNetworkAccessControlResponseOutput {
	return o
}

// A collection of allowed IP ranges with descriptions.
func (o WebServerNetworkAccessControlResponseOutput) AllowedIpRanges() AllowedIpRangeResponseArrayOutput {
	return o.ApplyT(func(v WebServerNetworkAccessControlResponse) []AllowedIpRangeResponse { return v.AllowedIpRanges }).(AllowedIpRangeResponseArrayOutput)
}

// Configuration for resources used by Airflow web server.
type WebServerResource struct {
	// Optional. CPU request and limit for Airflow web server.
	Cpu *float64 `pulumi:"cpu"`
	// Optional. Memory (GB) request and limit for Airflow web server.
	MemoryGb *float64 `pulumi:"memoryGb"`
	// Optional. Storage (GB) request and limit for Airflow web server.
	StorageGb *float64 `pulumi:"storageGb"`
}

// WebServerResourceInput is an input type that accepts WebServerResourceArgs and WebServerResourceOutput values.
// You can construct a concrete instance of `WebServerResourceInput` via:
//
//          WebServerResourceArgs{...}
type WebServerResourceInput interface {
	pulumi.Input

	ToWebServerResourceOutput() WebServerResourceOutput
	ToWebServerResourceOutputWithContext(context.Context) WebServerResourceOutput
}

// Configuration for resources used by Airflow web server.
type WebServerResourceArgs struct {
	// Optional. CPU request and limit for Airflow web server.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// Optional. Memory (GB) request and limit for Airflow web server.
	MemoryGb pulumi.Float64PtrInput `pulumi:"memoryGb"`
	// Optional. Storage (GB) request and limit for Airflow web server.
	StorageGb pulumi.Float64PtrInput `pulumi:"storageGb"`
}

func (WebServerResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerResource)(nil)).Elem()
}

func (i WebServerResourceArgs) ToWebServerResourceOutput() WebServerResourceOutput {
	return i.ToWebServerResourceOutputWithContext(context.Background())
}

func (i WebServerResourceArgs) ToWebServerResourceOutputWithContext(ctx context.Context) WebServerResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerResourceOutput)
}

func (i WebServerResourceArgs) ToWebServerResourcePtrOutput() WebServerResourcePtrOutput {
	return i.ToWebServerResourcePtrOutputWithContext(context.Background())
}

func (i WebServerResourceArgs) ToWebServerResourcePtrOutputWithContext(ctx context.Context) WebServerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerResourceOutput).ToWebServerResourcePtrOutputWithContext(ctx)
}

// WebServerResourcePtrInput is an input type that accepts WebServerResourceArgs, WebServerResourcePtr and WebServerResourcePtrOutput values.
// You can construct a concrete instance of `WebServerResourcePtrInput` via:
//
//          WebServerResourceArgs{...}
//
//  or:
//
//          nil
type WebServerResourcePtrInput interface {
	pulumi.Input

	ToWebServerResourcePtrOutput() WebServerResourcePtrOutput
	ToWebServerResourcePtrOutputWithContext(context.Context) WebServerResourcePtrOutput
}

type webServerResourcePtrType WebServerResourceArgs

func WebServerResourcePtr(v *WebServerResourceArgs) WebServerResourcePtrInput {
	return (*webServerResourcePtrType)(v)
}

func (*webServerResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServerResource)(nil)).Elem()
}

func (i *webServerResourcePtrType) ToWebServerResourcePtrOutput() WebServerResourcePtrOutput {
	return i.ToWebServerResourcePtrOutputWithContext(context.Background())
}

func (i *webServerResourcePtrType) ToWebServerResourcePtrOutputWithContext(ctx context.Context) WebServerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServerResourcePtrOutput)
}

// Configuration for resources used by Airflow web server.
type WebServerResourceOutput struct{ *pulumi.OutputState }

func (WebServerResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerResource)(nil)).Elem()
}

func (o WebServerResourceOutput) ToWebServerResourceOutput() WebServerResourceOutput {
	return o
}

func (o WebServerResourceOutput) ToWebServerResourceOutputWithContext(ctx context.Context) WebServerResourceOutput {
	return o
}

func (o WebServerResourceOutput) ToWebServerResourcePtrOutput() WebServerResourcePtrOutput {
	return o.ToWebServerResourcePtrOutputWithContext(context.Background())
}

func (o WebServerResourceOutput) ToWebServerResourcePtrOutputWithContext(ctx context.Context) WebServerResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebServerResource) *WebServerResource {
		return &v
	}).(WebServerResourcePtrOutput)
}

// Optional. CPU request and limit for Airflow web server.
func (o WebServerResourceOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WebServerResource) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// Optional. Memory (GB) request and limit for Airflow web server.
func (o WebServerResourceOutput) MemoryGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WebServerResource) *float64 { return v.MemoryGb }).(pulumi.Float64PtrOutput)
}

// Optional. Storage (GB) request and limit for Airflow web server.
func (o WebServerResourceOutput) StorageGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WebServerResource) *float64 { return v.StorageGb }).(pulumi.Float64PtrOutput)
}

type WebServerResourcePtrOutput struct{ *pulumi.OutputState }

func (WebServerResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServerResource)(nil)).Elem()
}

func (o WebServerResourcePtrOutput) ToWebServerResourcePtrOutput() WebServerResourcePtrOutput {
	return o
}

func (o WebServerResourcePtrOutput) ToWebServerResourcePtrOutputWithContext(ctx context.Context) WebServerResourcePtrOutput {
	return o
}

func (o WebServerResourcePtrOutput) Elem() WebServerResourceOutput {
	return o.ApplyT(func(v *WebServerResource) WebServerResource {
		if v != nil {
			return *v
		}
		var ret WebServerResource
		return ret
	}).(WebServerResourceOutput)
}

// Optional. CPU request and limit for Airflow web server.
func (o WebServerResourcePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WebServerResource) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// Optional. Memory (GB) request and limit for Airflow web server.
func (o WebServerResourcePtrOutput) MemoryGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WebServerResource) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryGb
	}).(pulumi.Float64PtrOutput)
}

// Optional. Storage (GB) request and limit for Airflow web server.
func (o WebServerResourcePtrOutput) StorageGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WebServerResource) *float64 {
		if v == nil {
			return nil
		}
		return v.StorageGb
	}).(pulumi.Float64PtrOutput)
}

// Configuration for resources used by Airflow web server.
type WebServerResourceResponse struct {
	// Optional. CPU request and limit for Airflow web server.
	Cpu float64 `pulumi:"cpu"`
	// Optional. Memory (GB) request and limit for Airflow web server.
	MemoryGb float64 `pulumi:"memoryGb"`
	// Optional. Storage (GB) request and limit for Airflow web server.
	StorageGb float64 `pulumi:"storageGb"`
}

// Configuration for resources used by Airflow web server.
type WebServerResourceResponseOutput struct{ *pulumi.OutputState }

func (WebServerResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServerResourceResponse)(nil)).Elem()
}

func (o WebServerResourceResponseOutput) ToWebServerResourceResponseOutput() WebServerResourceResponseOutput {
	return o
}

func (o WebServerResourceResponseOutput) ToWebServerResourceResponseOutputWithContext(ctx context.Context) WebServerResourceResponseOutput {
	return o
}

// Optional. CPU request and limit for Airflow web server.
func (o WebServerResourceResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v WebServerResourceResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// Optional. Memory (GB) request and limit for Airflow web server.
func (o WebServerResourceResponseOutput) MemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v WebServerResourceResponse) float64 { return v.MemoryGb }).(pulumi.Float64Output)
}

// Optional. Storage (GB) request and limit for Airflow web server.
func (o WebServerResourceResponseOutput) StorageGb() pulumi.Float64Output {
	return o.ApplyT(func(v WebServerResourceResponse) float64 { return v.StorageGb }).(pulumi.Float64Output)
}

// Configuration for resources used by Airflow workers.
type WorkerResource struct {
	// Optional. CPU request and limit for a single Airflow worker replica.
	Cpu *float64 `pulumi:"cpu"`
	// Optional. Maximum number of workers for autoscaling.
	MaxCount *int `pulumi:"maxCount"`
	// Optional. Memory (GB) request and limit for a single Airflow worker replica.
	MemoryGb *float64 `pulumi:"memoryGb"`
	// Optional. Minimum number of workers for autoscaling.
	MinCount *int `pulumi:"minCount"`
	// Optional. Storage (GB) request and limit for a single Airflow worker replica.
	StorageGb *float64 `pulumi:"storageGb"`
}

// WorkerResourceInput is an input type that accepts WorkerResourceArgs and WorkerResourceOutput values.
// You can construct a concrete instance of `WorkerResourceInput` via:
//
//          WorkerResourceArgs{...}
type WorkerResourceInput interface {
	pulumi.Input

	ToWorkerResourceOutput() WorkerResourceOutput
	ToWorkerResourceOutputWithContext(context.Context) WorkerResourceOutput
}

// Configuration for resources used by Airflow workers.
type WorkerResourceArgs struct {
	// Optional. CPU request and limit for a single Airflow worker replica.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// Optional. Maximum number of workers for autoscaling.
	MaxCount pulumi.IntPtrInput `pulumi:"maxCount"`
	// Optional. Memory (GB) request and limit for a single Airflow worker replica.
	MemoryGb pulumi.Float64PtrInput `pulumi:"memoryGb"`
	// Optional. Minimum number of workers for autoscaling.
	MinCount pulumi.IntPtrInput `pulumi:"minCount"`
	// Optional. Storage (GB) request and limit for a single Airflow worker replica.
	StorageGb pulumi.Float64PtrInput `pulumi:"storageGb"`
}

func (WorkerResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerResource)(nil)).Elem()
}

func (i WorkerResourceArgs) ToWorkerResourceOutput() WorkerResourceOutput {
	return i.ToWorkerResourceOutputWithContext(context.Background())
}

func (i WorkerResourceArgs) ToWorkerResourceOutputWithContext(ctx context.Context) WorkerResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerResourceOutput)
}

func (i WorkerResourceArgs) ToWorkerResourcePtrOutput() WorkerResourcePtrOutput {
	return i.ToWorkerResourcePtrOutputWithContext(context.Background())
}

func (i WorkerResourceArgs) ToWorkerResourcePtrOutputWithContext(ctx context.Context) WorkerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerResourceOutput).ToWorkerResourcePtrOutputWithContext(ctx)
}

// WorkerResourcePtrInput is an input type that accepts WorkerResourceArgs, WorkerResourcePtr and WorkerResourcePtrOutput values.
// You can construct a concrete instance of `WorkerResourcePtrInput` via:
//
//          WorkerResourceArgs{...}
//
//  or:
//
//          nil
type WorkerResourcePtrInput interface {
	pulumi.Input

	ToWorkerResourcePtrOutput() WorkerResourcePtrOutput
	ToWorkerResourcePtrOutputWithContext(context.Context) WorkerResourcePtrOutput
}

type workerResourcePtrType WorkerResourceArgs

func WorkerResourcePtr(v *WorkerResourceArgs) WorkerResourcePtrInput {
	return (*workerResourcePtrType)(v)
}

func (*workerResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerResource)(nil)).Elem()
}

func (i *workerResourcePtrType) ToWorkerResourcePtrOutput() WorkerResourcePtrOutput {
	return i.ToWorkerResourcePtrOutputWithContext(context.Background())
}

func (i *workerResourcePtrType) ToWorkerResourcePtrOutputWithContext(ctx context.Context) WorkerResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerResourcePtrOutput)
}

// Configuration for resources used by Airflow workers.
type WorkerResourceOutput struct{ *pulumi.OutputState }

func (WorkerResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerResource)(nil)).Elem()
}

func (o WorkerResourceOutput) ToWorkerResourceOutput() WorkerResourceOutput {
	return o
}

func (o WorkerResourceOutput) ToWorkerResourceOutputWithContext(ctx context.Context) WorkerResourceOutput {
	return o
}

func (o WorkerResourceOutput) ToWorkerResourcePtrOutput() WorkerResourcePtrOutput {
	return o.ToWorkerResourcePtrOutputWithContext(context.Background())
}

func (o WorkerResourceOutput) ToWorkerResourcePtrOutputWithContext(ctx context.Context) WorkerResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkerResource) *WorkerResource {
		return &v
	}).(WorkerResourcePtrOutput)
}

// Optional. CPU request and limit for a single Airflow worker replica.
func (o WorkerResourceOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WorkerResource) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// Optional. Maximum number of workers for autoscaling.
func (o WorkerResourceOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkerResource) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

// Optional. Memory (GB) request and limit for a single Airflow worker replica.
func (o WorkerResourceOutput) MemoryGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WorkerResource) *float64 { return v.MemoryGb }).(pulumi.Float64PtrOutput)
}

// Optional. Minimum number of workers for autoscaling.
func (o WorkerResourceOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkerResource) *int { return v.MinCount }).(pulumi.IntPtrOutput)
}

// Optional. Storage (GB) request and limit for a single Airflow worker replica.
func (o WorkerResourceOutput) StorageGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WorkerResource) *float64 { return v.StorageGb }).(pulumi.Float64PtrOutput)
}

type WorkerResourcePtrOutput struct{ *pulumi.OutputState }

func (WorkerResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerResource)(nil)).Elem()
}

func (o WorkerResourcePtrOutput) ToWorkerResourcePtrOutput() WorkerResourcePtrOutput {
	return o
}

func (o WorkerResourcePtrOutput) ToWorkerResourcePtrOutputWithContext(ctx context.Context) WorkerResourcePtrOutput {
	return o
}

func (o WorkerResourcePtrOutput) Elem() WorkerResourceOutput {
	return o.ApplyT(func(v *WorkerResource) WorkerResource {
		if v != nil {
			return *v
		}
		var ret WorkerResource
		return ret
	}).(WorkerResourceOutput)
}

// Optional. CPU request and limit for a single Airflow worker replica.
func (o WorkerResourcePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WorkerResource) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// Optional. Maximum number of workers for autoscaling.
func (o WorkerResourcePtrOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkerResource) *int {
		if v == nil {
			return nil
		}
		return v.MaxCount
	}).(pulumi.IntPtrOutput)
}

// Optional. Memory (GB) request and limit for a single Airflow worker replica.
func (o WorkerResourcePtrOutput) MemoryGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WorkerResource) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryGb
	}).(pulumi.Float64PtrOutput)
}

// Optional. Minimum number of workers for autoscaling.
func (o WorkerResourcePtrOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkerResource) *int {
		if v == nil {
			return nil
		}
		return v.MinCount
	}).(pulumi.IntPtrOutput)
}

// Optional. Storage (GB) request and limit for a single Airflow worker replica.
func (o WorkerResourcePtrOutput) StorageGb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WorkerResource) *float64 {
		if v == nil {
			return nil
		}
		return v.StorageGb
	}).(pulumi.Float64PtrOutput)
}

// Configuration for resources used by Airflow workers.
type WorkerResourceResponse struct {
	// Optional. CPU request and limit for a single Airflow worker replica.
	Cpu float64 `pulumi:"cpu"`
	// Optional. Maximum number of workers for autoscaling.
	MaxCount int `pulumi:"maxCount"`
	// Optional. Memory (GB) request and limit for a single Airflow worker replica.
	MemoryGb float64 `pulumi:"memoryGb"`
	// Optional. Minimum number of workers for autoscaling.
	MinCount int `pulumi:"minCount"`
	// Optional. Storage (GB) request and limit for a single Airflow worker replica.
	StorageGb float64 `pulumi:"storageGb"`
}

// Configuration for resources used by Airflow workers.
type WorkerResourceResponseOutput struct{ *pulumi.OutputState }

func (WorkerResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerResourceResponse)(nil)).Elem()
}

func (o WorkerResourceResponseOutput) ToWorkerResourceResponseOutput() WorkerResourceResponseOutput {
	return o
}

func (o WorkerResourceResponseOutput) ToWorkerResourceResponseOutputWithContext(ctx context.Context) WorkerResourceResponseOutput {
	return o
}

// Optional. CPU request and limit for a single Airflow worker replica.
func (o WorkerResourceResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v WorkerResourceResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// Optional. Maximum number of workers for autoscaling.
func (o WorkerResourceResponseOutput) MaxCount() pulumi.IntOutput {
	return o.ApplyT(func(v WorkerResourceResponse) int { return v.MaxCount }).(pulumi.IntOutput)
}

// Optional. Memory (GB) request and limit for a single Airflow worker replica.
func (o WorkerResourceResponseOutput) MemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v WorkerResourceResponse) float64 { return v.MemoryGb }).(pulumi.Float64Output)
}

// Optional. Minimum number of workers for autoscaling.
func (o WorkerResourceResponseOutput) MinCount() pulumi.IntOutput {
	return o.ApplyT(func(v WorkerResourceResponse) int { return v.MinCount }).(pulumi.IntOutput)
}

// Optional. Storage (GB) request and limit for a single Airflow worker replica.
func (o WorkerResourceResponseOutput) StorageGb() pulumi.Float64Output {
	return o.ApplyT(func(v WorkerResourceResponse) float64 { return v.StorageGb }).(pulumi.Float64Output)
}

// The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
type WorkloadsConfig struct {
	// Optional. Resources used by Airflow schedulers.
	Scheduler *SchedulerResource `pulumi:"scheduler"`
	// Optional. Resources used by Airflow web server.
	WebServer *WebServerResource `pulumi:"webServer"`
	// Optional. Resources used by Airflow workers.
	Worker *WorkerResource `pulumi:"worker"`
}

// WorkloadsConfigInput is an input type that accepts WorkloadsConfigArgs and WorkloadsConfigOutput values.
// You can construct a concrete instance of `WorkloadsConfigInput` via:
//
//          WorkloadsConfigArgs{...}
type WorkloadsConfigInput interface {
	pulumi.Input

	ToWorkloadsConfigOutput() WorkloadsConfigOutput
	ToWorkloadsConfigOutputWithContext(context.Context) WorkloadsConfigOutput
}

// The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
type WorkloadsConfigArgs struct {
	// Optional. Resources used by Airflow schedulers.
	Scheduler SchedulerResourcePtrInput `pulumi:"scheduler"`
	// Optional. Resources used by Airflow web server.
	WebServer WebServerResourcePtrInput `pulumi:"webServer"`
	// Optional. Resources used by Airflow workers.
	Worker WorkerResourcePtrInput `pulumi:"worker"`
}

func (WorkloadsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadsConfig)(nil)).Elem()
}

func (i WorkloadsConfigArgs) ToWorkloadsConfigOutput() WorkloadsConfigOutput {
	return i.ToWorkloadsConfigOutputWithContext(context.Background())
}

func (i WorkloadsConfigArgs) ToWorkloadsConfigOutputWithContext(ctx context.Context) WorkloadsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadsConfigOutput)
}

func (i WorkloadsConfigArgs) ToWorkloadsConfigPtrOutput() WorkloadsConfigPtrOutput {
	return i.ToWorkloadsConfigPtrOutputWithContext(context.Background())
}

func (i WorkloadsConfigArgs) ToWorkloadsConfigPtrOutputWithContext(ctx context.Context) WorkloadsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadsConfigOutput).ToWorkloadsConfigPtrOutputWithContext(ctx)
}

// WorkloadsConfigPtrInput is an input type that accepts WorkloadsConfigArgs, WorkloadsConfigPtr and WorkloadsConfigPtrOutput values.
// You can construct a concrete instance of `WorkloadsConfigPtrInput` via:
//
//          WorkloadsConfigArgs{...}
//
//  or:
//
//          nil
type WorkloadsConfigPtrInput interface {
	pulumi.Input

	ToWorkloadsConfigPtrOutput() WorkloadsConfigPtrOutput
	ToWorkloadsConfigPtrOutputWithContext(context.Context) WorkloadsConfigPtrOutput
}

type workloadsConfigPtrType WorkloadsConfigArgs

func WorkloadsConfigPtr(v *WorkloadsConfigArgs) WorkloadsConfigPtrInput {
	return (*workloadsConfigPtrType)(v)
}

func (*workloadsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadsConfig)(nil)).Elem()
}

func (i *workloadsConfigPtrType) ToWorkloadsConfigPtrOutput() WorkloadsConfigPtrOutput {
	return i.ToWorkloadsConfigPtrOutputWithContext(context.Background())
}

func (i *workloadsConfigPtrType) ToWorkloadsConfigPtrOutputWithContext(ctx context.Context) WorkloadsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadsConfigPtrOutput)
}

// The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
type WorkloadsConfigOutput struct{ *pulumi.OutputState }

func (WorkloadsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadsConfig)(nil)).Elem()
}

func (o WorkloadsConfigOutput) ToWorkloadsConfigOutput() WorkloadsConfigOutput {
	return o
}

func (o WorkloadsConfigOutput) ToWorkloadsConfigOutputWithContext(ctx context.Context) WorkloadsConfigOutput {
	return o
}

func (o WorkloadsConfigOutput) ToWorkloadsConfigPtrOutput() WorkloadsConfigPtrOutput {
	return o.ToWorkloadsConfigPtrOutputWithContext(context.Background())
}

func (o WorkloadsConfigOutput) ToWorkloadsConfigPtrOutputWithContext(ctx context.Context) WorkloadsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadsConfig) *WorkloadsConfig {
		return &v
	}).(WorkloadsConfigPtrOutput)
}

// Optional. Resources used by Airflow schedulers.
func (o WorkloadsConfigOutput) Scheduler() SchedulerResourcePtrOutput {
	return o.ApplyT(func(v WorkloadsConfig) *SchedulerResource { return v.Scheduler }).(SchedulerResourcePtrOutput)
}

// Optional. Resources used by Airflow web server.
func (o WorkloadsConfigOutput) WebServer() WebServerResourcePtrOutput {
	return o.ApplyT(func(v WorkloadsConfig) *WebServerResource { return v.WebServer }).(WebServerResourcePtrOutput)
}

// Optional. Resources used by Airflow workers.
func (o WorkloadsConfigOutput) Worker() WorkerResourcePtrOutput {
	return o.ApplyT(func(v WorkloadsConfig) *WorkerResource { return v.Worker }).(WorkerResourcePtrOutput)
}

type WorkloadsConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkloadsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadsConfig)(nil)).Elem()
}

func (o WorkloadsConfigPtrOutput) ToWorkloadsConfigPtrOutput() WorkloadsConfigPtrOutput {
	return o
}

func (o WorkloadsConfigPtrOutput) ToWorkloadsConfigPtrOutputWithContext(ctx context.Context) WorkloadsConfigPtrOutput {
	return o
}

func (o WorkloadsConfigPtrOutput) Elem() WorkloadsConfigOutput {
	return o.ApplyT(func(v *WorkloadsConfig) WorkloadsConfig {
		if v != nil {
			return *v
		}
		var ret WorkloadsConfig
		return ret
	}).(WorkloadsConfigOutput)
}

// Optional. Resources used by Airflow schedulers.
func (o WorkloadsConfigPtrOutput) Scheduler() SchedulerResourcePtrOutput {
	return o.ApplyT(func(v *WorkloadsConfig) *SchedulerResource {
		if v == nil {
			return nil
		}
		return v.Scheduler
	}).(SchedulerResourcePtrOutput)
}

// Optional. Resources used by Airflow web server.
func (o WorkloadsConfigPtrOutput) WebServer() WebServerResourcePtrOutput {
	return o.ApplyT(func(v *WorkloadsConfig) *WebServerResource {
		if v == nil {
			return nil
		}
		return v.WebServer
	}).(WebServerResourcePtrOutput)
}

// Optional. Resources used by Airflow workers.
func (o WorkloadsConfigPtrOutput) Worker() WorkerResourcePtrOutput {
	return o.ApplyT(func(v *WorkloadsConfig) *WorkerResource {
		if v == nil {
			return nil
		}
		return v.Worker
	}).(WorkerResourcePtrOutput)
}

// The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
type WorkloadsConfigResponse struct {
	// Optional. Resources used by Airflow schedulers.
	Scheduler SchedulerResourceResponse `pulumi:"scheduler"`
	// Optional. Resources used by Airflow web server.
	WebServer WebServerResourceResponse `pulumi:"webServer"`
	// Optional. Resources used by Airflow workers.
	Worker WorkerResourceResponse `pulumi:"worker"`
}

// The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
type WorkloadsConfigResponseOutput struct{ *pulumi.OutputState }

func (WorkloadsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadsConfigResponse)(nil)).Elem()
}

func (o WorkloadsConfigResponseOutput) ToWorkloadsConfigResponseOutput() WorkloadsConfigResponseOutput {
	return o
}

func (o WorkloadsConfigResponseOutput) ToWorkloadsConfigResponseOutputWithContext(ctx context.Context) WorkloadsConfigResponseOutput {
	return o
}

// Optional. Resources used by Airflow schedulers.
func (o WorkloadsConfigResponseOutput) Scheduler() SchedulerResourceResponseOutput {
	return o.ApplyT(func(v WorkloadsConfigResponse) SchedulerResourceResponse { return v.Scheduler }).(SchedulerResourceResponseOutput)
}

// Optional. Resources used by Airflow web server.
func (o WorkloadsConfigResponseOutput) WebServer() WebServerResourceResponseOutput {
	return o.ApplyT(func(v WorkloadsConfigResponse) WebServerResourceResponse { return v.WebServer }).(WebServerResourceResponseOutput)
}

// Optional. Resources used by Airflow workers.
func (o WorkloadsConfigResponseOutput) Worker() WorkerResourceResponseOutput {
	return o.ApplyT(func(v WorkloadsConfigResponse) WorkerResourceResponse { return v.Worker }).(WorkerResourceResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AllowedIpRangeInput)(nil)).Elem(), AllowedIpRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowedIpRangeArrayInput)(nil)).Elem(), AllowedIpRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConfigInput)(nil)).Elem(), DatabaseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConfigPtrInput)(nil)).Elem(), DatabaseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigPtrInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentConfigInput)(nil)).Elem(), EnvironmentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentConfigPtrInput)(nil)).Elem(), EnvironmentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAllocationPolicyInput)(nil)).Elem(), IPAllocationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IPAllocationPolicyPtrInput)(nil)).Elem(), IPAllocationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowInput)(nil)).Elem(), MaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowPtrInput)(nil)).Elem(), MaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigInput)(nil)).Elem(), NodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigPtrInput)(nil)).Elem(), NodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateClusterConfigInput)(nil)).Elem(), PrivateClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateClusterConfigPtrInput)(nil)).Elem(), PrivateClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateEnvironmentConfigInput)(nil)).Elem(), PrivateEnvironmentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateEnvironmentConfigPtrInput)(nil)).Elem(), PrivateEnvironmentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulerResourceInput)(nil)).Elem(), SchedulerResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulerResourcePtrInput)(nil)).Elem(), SchedulerResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareConfigInput)(nil)).Elem(), SoftwareConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareConfigPtrInput)(nil)).Elem(), SoftwareConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebServerConfigInput)(nil)).Elem(), WebServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebServerConfigPtrInput)(nil)).Elem(), WebServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebServerNetworkAccessControlInput)(nil)).Elem(), WebServerNetworkAccessControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebServerNetworkAccessControlPtrInput)(nil)).Elem(), WebServerNetworkAccessControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebServerResourceInput)(nil)).Elem(), WebServerResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebServerResourcePtrInput)(nil)).Elem(), WebServerResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerResourceInput)(nil)).Elem(), WorkerResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerResourcePtrInput)(nil)).Elem(), WorkerResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadsConfigInput)(nil)).Elem(), WorkloadsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadsConfigPtrInput)(nil)).Elem(), WorkloadsConfigArgs{})
	pulumi.RegisterOutputType(AllowedIpRangeOutput{})
	pulumi.RegisterOutputType(AllowedIpRangeArrayOutput{})
	pulumi.RegisterOutputType(AllowedIpRangeResponseOutput{})
	pulumi.RegisterOutputType(AllowedIpRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseConfigOutput{})
	pulumi.RegisterOutputType(DatabaseConfigPtrOutput{})
	pulumi.RegisterOutputType(DatabaseConfigResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentConfigResponseOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyPtrOutput{})
	pulumi.RegisterOutputType(IPAllocationPolicyResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(NodeConfigOutput{})
	pulumi.RegisterOutputType(NodeConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeConfigResponseOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigResponseOutput{})
	pulumi.RegisterOutputType(PrivateEnvironmentConfigOutput{})
	pulumi.RegisterOutputType(PrivateEnvironmentConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateEnvironmentConfigResponseOutput{})
	pulumi.RegisterOutputType(SchedulerResourceOutput{})
	pulumi.RegisterOutputType(SchedulerResourcePtrOutput{})
	pulumi.RegisterOutputType(SchedulerResourceResponseOutput{})
	pulumi.RegisterOutputType(SoftwareConfigOutput{})
	pulumi.RegisterOutputType(SoftwareConfigPtrOutput{})
	pulumi.RegisterOutputType(SoftwareConfigResponseOutput{})
	pulumi.RegisterOutputType(WebServerConfigOutput{})
	pulumi.RegisterOutputType(WebServerConfigPtrOutput{})
	pulumi.RegisterOutputType(WebServerConfigResponseOutput{})
	pulumi.RegisterOutputType(WebServerNetworkAccessControlOutput{})
	pulumi.RegisterOutputType(WebServerNetworkAccessControlPtrOutput{})
	pulumi.RegisterOutputType(WebServerNetworkAccessControlResponseOutput{})
	pulumi.RegisterOutputType(WebServerResourceOutput{})
	pulumi.RegisterOutputType(WebServerResourcePtrOutput{})
	pulumi.RegisterOutputType(WebServerResourceResponseOutput{})
	pulumi.RegisterOutputType(WorkerResourceOutput{})
	pulumi.RegisterOutputType(WorkerResourcePtrOutput{})
	pulumi.RegisterOutputType(WorkerResourceResponseOutput{})
	pulumi.RegisterOutputType(WorkloadsConfigOutput{})
	pulumi.RegisterOutputType(WorkloadsConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkloadsConfigResponseOutput{})
}
