// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieve the details of a single BackupPlan.
func LookupBackupPlan(ctx *pulumi.Context, args *LookupBackupPlanArgs, opts ...pulumi.InvokeOption) (*LookupBackupPlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBackupPlanResult
	err := ctx.Invoke("google-native:gkebackup/v1:getBackupPlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBackupPlanArgs struct {
	BackupPlanId string  `pulumi:"backupPlanId"`
	Location     string  `pulumi:"location"`
	Project      *string `pulumi:"project"`
}

type LookupBackupPlanResult struct {
	// Optional. Defines the configuration of Backups created via this BackupPlan.
	BackupConfig BackupConfigResponse `pulumi:"backupConfig"`
	// Optional. Defines a schedule for automatic Backup creation via this BackupPlan.
	BackupSchedule ScheduleResponse `pulumi:"backupSchedule"`
	// Immutable. The source cluster from which Backups will be created via this BackupPlan. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*`
	Cluster string `pulumi:"cluster"`
	// The timestamp when this BackupPlan resource was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False
	Deactivated bool `pulumi:"deactivated"`
	// Optional. User specified descriptive string for this BackupPlan.
	Description string `pulumi:"description"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from overwriting each other. It is strongly suggested that systems make use of the 'etag' in the read-modify-write cycle to perform BackupPlan updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackupPlan`, and systems are expected to put that etag in the request to `UpdateBackupPlan` or `DeleteBackupPlan` to ensure that their change will be applied to the same version of the resource.
	Etag string `pulumi:"etag"`
	// Optional. A set of custom labels supplied by user.
	Labels map[string]string `pulumi:"labels"`
	// The full name of the BackupPlan resource. Format: `projects/*/locations/*/backupPlans/*`
	Name string `pulumi:"name"`
	// The number of Kubernetes Pods backed up in the last successful Backup created via this BackupPlan.
	ProtectedPodCount int `pulumi:"protectedPodCount"`
	// Optional. RetentionPolicy governs lifecycle of Backups created under this plan.
	RetentionPolicy RetentionPolicyResponse `pulumi:"retentionPolicy"`
	// State of the BackupPlan. This State field reflects the various stages a BackupPlan can be in during the Create operation. It will be set to "DEACTIVATED" if the BackupPlan is deactivated on an Update
	State string `pulumi:"state"`
	// Human-readable description of why BackupPlan is in the current `state`
	StateReason string `pulumi:"stateReason"`
	// Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
	Uid string `pulumi:"uid"`
	// The timestamp when this BackupPlan resource was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupBackupPlanOutput(ctx *pulumi.Context, args LookupBackupPlanOutputArgs, opts ...pulumi.InvokeOption) LookupBackupPlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBackupPlanResult, error) {
			args := v.(LookupBackupPlanArgs)
			r, err := LookupBackupPlan(ctx, &args, opts...)
			var s LookupBackupPlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBackupPlanResultOutput)
}

type LookupBackupPlanOutputArgs struct {
	BackupPlanId pulumi.StringInput    `pulumi:"backupPlanId"`
	Location     pulumi.StringInput    `pulumi:"location"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupBackupPlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackupPlanArgs)(nil)).Elem()
}

type LookupBackupPlanResultOutput struct{ *pulumi.OutputState }

func (LookupBackupPlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackupPlanResult)(nil)).Elem()
}

func (o LookupBackupPlanResultOutput) ToLookupBackupPlanResultOutput() LookupBackupPlanResultOutput {
	return o
}

func (o LookupBackupPlanResultOutput) ToLookupBackupPlanResultOutputWithContext(ctx context.Context) LookupBackupPlanResultOutput {
	return o
}

func (o LookupBackupPlanResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupBackupPlanResult] {
	return pulumix.Output[LookupBackupPlanResult]{
		OutputState: o.OutputState,
	}
}

// Optional. Defines the configuration of Backups created via this BackupPlan.
func (o LookupBackupPlanResultOutput) BackupConfig() BackupConfigResponseOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) BackupConfigResponse { return v.BackupConfig }).(BackupConfigResponseOutput)
}

// Optional. Defines a schedule for automatic Backup creation via this BackupPlan.
func (o LookupBackupPlanResultOutput) BackupSchedule() ScheduleResponseOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) ScheduleResponse { return v.BackupSchedule }).(ScheduleResponseOutput)
}

// Immutable. The source cluster from which Backups will be created via this BackupPlan. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*`
func (o LookupBackupPlanResultOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) string { return v.Cluster }).(pulumi.StringOutput)
}

// The timestamp when this BackupPlan resource was created.
func (o LookupBackupPlanResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False
func (o LookupBackupPlanResultOutput) Deactivated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) bool { return v.Deactivated }).(pulumi.BoolOutput)
}

// Optional. User specified descriptive string for this BackupPlan.
func (o LookupBackupPlanResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) string { return v.Description }).(pulumi.StringOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from overwriting each other. It is strongly suggested that systems make use of the 'etag' in the read-modify-write cycle to perform BackupPlan updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackupPlan`, and systems are expected to put that etag in the request to `UpdateBackupPlan` or `DeleteBackupPlan` to ensure that their change will be applied to the same version of the resource.
func (o LookupBackupPlanResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Optional. A set of custom labels supplied by user.
func (o LookupBackupPlanResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The full name of the BackupPlan resource. Format: `projects/*/locations/*/backupPlans/*`
func (o LookupBackupPlanResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of Kubernetes Pods backed up in the last successful Backup created via this BackupPlan.
func (o LookupBackupPlanResultOutput) ProtectedPodCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) int { return v.ProtectedPodCount }).(pulumi.IntOutput)
}

// Optional. RetentionPolicy governs lifecycle of Backups created under this plan.
func (o LookupBackupPlanResultOutput) RetentionPolicy() RetentionPolicyResponseOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) RetentionPolicyResponse { return v.RetentionPolicy }).(RetentionPolicyResponseOutput)
}

// State of the BackupPlan. This State field reflects the various stages a BackupPlan can be in during the Create operation. It will be set to "DEACTIVATED" if the BackupPlan is deactivated on an Update
func (o LookupBackupPlanResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) string { return v.State }).(pulumi.StringOutput)
}

// Human-readable description of why BackupPlan is in the current `state`
func (o LookupBackupPlanResultOutput) StateReason() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) string { return v.StateReason }).(pulumi.StringOutput)
}

// Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
func (o LookupBackupPlanResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The timestamp when this BackupPlan resource was last updated.
func (o LookupBackupPlanResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPlanResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBackupPlanResultOutput{})
}
