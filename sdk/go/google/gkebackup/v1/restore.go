// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Restore for the given RestorePlan.
// Auto-naming is currently not supported for this resource.
type Restore struct {
	pulumi.CustomResourceState

	// Immutable. A reference to the Backup used as the source from which this Restore will restore. Note that this Backup must be a sub-resource of the RestorePlan's backup_plan. Format: projects/*/locations/*/backupPlans/*/backups/*.
	Backup pulumi.StringOutput `pulumi:"backup"`
	// The target cluster into which this Restore will restore data. Valid formats: - projects/*/locations/*/clusters/* - projects/*/zones/*/clusters/* Inherited from parent RestorePlan's cluster value.
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// Timestamp of when the restore operation completed.
	CompleteTime pulumi.StringOutput `pulumi:"completeTime"`
	// The timestamp when this Restore resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User specified descriptive string for this Restore.
	Description pulumi.StringOutput `pulumi:"description"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform restore updates in order to avoid race conditions: An `etag` is returned in the response to `GetRestore`, and systems are expected to put that etag in the request to `UpdateRestore` or `DeleteRestore` to ensure that their change will be applied to the same version of the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// A set of custom labels supplied by user.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The full name of the Restore resource. Format: projects/*/locations/*/restorePlans/*/restores/*
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of resources excluded during the restore execution.
	ResourcesExcludedCount pulumi.IntOutput `pulumi:"resourcesExcludedCount"`
	// Number of resources that failed to be restored during the restore execution.
	ResourcesFailedCount pulumi.IntOutput `pulumi:"resourcesFailedCount"`
	// Number of resources restored during the restore execution.
	ResourcesRestoredCount pulumi.IntOutput `pulumi:"resourcesRestoredCount"`
	// Configuration of the Restore. Inherited from parent RestorePlan's restore_config.
	RestoreConfig RestoreConfigResponseOutput `pulumi:"restoreConfig"`
	// The current state of the Restore.
	State pulumi.StringOutput `pulumi:"state"`
	// Human-readable description of why the Restore is in its current state.
	StateReason pulumi.StringOutput `pulumi:"stateReason"`
	// Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The timestamp when this Restore resource was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Number of volumes restored during the restore execution.
	VolumesRestoredCount pulumi.IntOutput `pulumi:"volumesRestoredCount"`
}

// NewRestore registers a new resource with the given unique name, arguments, and options.
func NewRestore(ctx *pulumi.Context,
	name string, args *RestoreArgs, opts ...pulumi.ResourceOption) (*Restore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backup == nil {
		return nil, errors.New("invalid value for required argument 'Backup'")
	}
	if args.RestoreId == nil {
		return nil, errors.New("invalid value for required argument 'RestoreId'")
	}
	if args.RestorePlanId == nil {
		return nil, errors.New("invalid value for required argument 'RestorePlanId'")
	}
	var resource Restore
	err := ctx.RegisterResource("google-native:gkebackup/v1:Restore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestore gets an existing Restore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestoreState, opts ...pulumi.ResourceOption) (*Restore, error) {
	var resource Restore
	err := ctx.ReadResource("google-native:gkebackup/v1:Restore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Restore resources.
type restoreState struct {
}

type RestoreState struct {
}

func (RestoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*restoreState)(nil)).Elem()
}

type restoreArgs struct {
	// Immutable. A reference to the Backup used as the source from which this Restore will restore. Note that this Backup must be a sub-resource of the RestorePlan's backup_plan. Format: projects/*/locations/*/backupPlans/*/backups/*.
	Backup string `pulumi:"backup"`
	// User specified descriptive string for this Restore.
	Description *string `pulumi:"description"`
	// A set of custom labels supplied by user.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	Project  *string           `pulumi:"project"`
	// Required. The client-provided short name for the Restore resource. This name must: - be between 1 and 63 characters long (inclusive) - consist of only lower-case ASCII letters, numbers, and dashes - start with a lower-case letter - end with a lower-case letter or number - be unique within the set of Restores in this RestorePlan.
	RestoreId     string `pulumi:"restoreId"`
	RestorePlanId string `pulumi:"restorePlanId"`
}

// The set of arguments for constructing a Restore resource.
type RestoreArgs struct {
	// Immutable. A reference to the Backup used as the source from which this Restore will restore. Note that this Backup must be a sub-resource of the RestorePlan's backup_plan. Format: projects/*/locations/*/backupPlans/*/backups/*.
	Backup pulumi.StringInput
	// User specified descriptive string for this Restore.
	Description pulumi.StringPtrInput
	// A set of custom labels supplied by user.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// Required. The client-provided short name for the Restore resource. This name must: - be between 1 and 63 characters long (inclusive) - consist of only lower-case ASCII letters, numbers, and dashes - start with a lower-case letter - end with a lower-case letter or number - be unique within the set of Restores in this RestorePlan.
	RestoreId     pulumi.StringInput
	RestorePlanId pulumi.StringInput
}

func (RestoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restoreArgs)(nil)).Elem()
}

type RestoreInput interface {
	pulumi.Input

	ToRestoreOutput() RestoreOutput
	ToRestoreOutputWithContext(ctx context.Context) RestoreOutput
}

func (*Restore) ElementType() reflect.Type {
	return reflect.TypeOf((**Restore)(nil)).Elem()
}

func (i *Restore) ToRestoreOutput() RestoreOutput {
	return i.ToRestoreOutputWithContext(context.Background())
}

func (i *Restore) ToRestoreOutputWithContext(ctx context.Context) RestoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreOutput)
}

type RestoreOutput struct{ *pulumi.OutputState }

func (RestoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Restore)(nil)).Elem()
}

func (o RestoreOutput) ToRestoreOutput() RestoreOutput {
	return o
}

func (o RestoreOutput) ToRestoreOutputWithContext(ctx context.Context) RestoreOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestoreInput)(nil)).Elem(), &Restore{})
	pulumi.RegisterOutputType(RestoreOutput{})
}
