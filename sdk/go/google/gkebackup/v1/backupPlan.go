// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new BackupPlan in a given location.
// Auto-naming is currently not supported for this resource.
type BackupPlan struct {
	pulumi.CustomResourceState

	// Defines the configuration of Backups created via this BackupPlan.
	BackupConfig BackupConfigResponseOutput `pulumi:"backupConfig"`
	// Defines a schedule for automatic Backup creation via this BackupPlan.
	BackupSchedule ScheduleResponseOutput `pulumi:"backupSchedule"`
	// Immutable. The source cluster from which Backups will be created via this BackupPlan. Possible formats: 1. projects/*/locations/*/clusters/* 2. projects/*/zones/*/clusters/*
	Cluster pulumi.StringOutput `pulumi:"cluster"`
	// The timestamp when this BackupPlan resource was created - can be converted to and from [RFC3339](https://www.ietf.org/rfc/rfc3339.txt)
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed, including the deactivated field. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False
	Deactivated pulumi.BoolOutput `pulumi:"deactivated"`
	// User specified descriptive string for this BackupPlan.
	Description pulumi.StringOutput `pulumi:"description"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from overwriting each other. It is strongly suggested that systems make use of the 'etag' in the read-modify-write cycle to perform BackupPlan updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackupPlan`, and systems are expected to put that etag in the request to `UpdateBackupPlan` to ensure that their change will be applied to the same version.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// A set of custom labels supplied by user.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The full name of the BackupPlan resource. Format: projects/*/locations/*/backupPlans/*
	Name pulumi.StringOutput `pulumi:"name"`
	// Represents the number of Kubernetes Pods backed up in the last successful Backup created underneath this BackupPlan.
	ProtectedPodCount pulumi.IntOutput `pulumi:"protectedPodCount"`
	// RetentionPolicy governs lifecycle of Backups created under this plan.
	RetentionPolicy RetentionPolicyResponseOutput `pulumi:"retentionPolicy"`
	// Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The timestamp when this BackupPlan resource was last updated - can be converted to and from [RFC3339](https://www.ietf.org/rfc/rfc3339.txt)
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBackupPlan registers a new resource with the given unique name, arguments, and options.
func NewBackupPlan(ctx *pulumi.Context,
	name string, args *BackupPlanArgs, opts ...pulumi.ResourceOption) (*BackupPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupPlanId == nil {
		return nil, errors.New("invalid value for required argument 'BackupPlanId'")
	}
	if args.Cluster == nil {
		return nil, errors.New("invalid value for required argument 'Cluster'")
	}
	var resource BackupPlan
	err := ctx.RegisterResource("google-native:gkebackup/v1:BackupPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPlan gets an existing BackupPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPlanState, opts ...pulumi.ResourceOption) (*BackupPlan, error) {
	var resource BackupPlan
	err := ctx.ReadResource("google-native:gkebackup/v1:BackupPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPlan resources.
type backupPlanState struct {
}

type BackupPlanState struct {
}

func (BackupPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanState)(nil)).Elem()
}

type backupPlanArgs struct {
	// Defines the configuration of Backups created via this BackupPlan.
	BackupConfig *BackupConfig `pulumi:"backupConfig"`
	// Required. The client-provided short name for the BackupPlan resource. This name must: a. be between 1 and 63 characters long (inclusive) b. consist of only lower-case ASCII letters, numbers, and dashes c. start with a lower-case letter d. end with a lower-case letter or number e. be unique within the set of BackupPlans in this location
	BackupPlanId string `pulumi:"backupPlanId"`
	// Defines a schedule for automatic Backup creation via this BackupPlan.
	BackupSchedule *Schedule `pulumi:"backupSchedule"`
	// Immutable. The source cluster from which Backups will be created via this BackupPlan. Possible formats: 1. projects/*/locations/*/clusters/* 2. projects/*/zones/*/clusters/*
	Cluster string `pulumi:"cluster"`
	// This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed, including the deactivated field. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False
	Deactivated *bool `pulumi:"deactivated"`
	// User specified descriptive string for this BackupPlan.
	Description *string `pulumi:"description"`
	// A set of custom labels supplied by user.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	Project  *string           `pulumi:"project"`
	// RetentionPolicy governs lifecycle of Backups created under this plan.
	RetentionPolicy *RetentionPolicy `pulumi:"retentionPolicy"`
}

// The set of arguments for constructing a BackupPlan resource.
type BackupPlanArgs struct {
	// Defines the configuration of Backups created via this BackupPlan.
	BackupConfig BackupConfigPtrInput
	// Required. The client-provided short name for the BackupPlan resource. This name must: a. be between 1 and 63 characters long (inclusive) b. consist of only lower-case ASCII letters, numbers, and dashes c. start with a lower-case letter d. end with a lower-case letter or number e. be unique within the set of BackupPlans in this location
	BackupPlanId pulumi.StringInput
	// Defines a schedule for automatic Backup creation via this BackupPlan.
	BackupSchedule SchedulePtrInput
	// Immutable. The source cluster from which Backups will be created via this BackupPlan. Possible formats: 1. projects/*/locations/*/clusters/* 2. projects/*/zones/*/clusters/*
	Cluster pulumi.StringInput
	// This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed, including the deactivated field. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False
	Deactivated pulumi.BoolPtrInput
	// User specified descriptive string for this BackupPlan.
	Description pulumi.StringPtrInput
	// A set of custom labels supplied by user.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// RetentionPolicy governs lifecycle of Backups created under this plan.
	RetentionPolicy RetentionPolicyPtrInput
}

func (BackupPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPlanArgs)(nil)).Elem()
}

type BackupPlanInput interface {
	pulumi.Input

	ToBackupPlanOutput() BackupPlanOutput
	ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput
}

func (*BackupPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPlan)(nil)).Elem()
}

func (i *BackupPlan) ToBackupPlanOutput() BackupPlanOutput {
	return i.ToBackupPlanOutputWithContext(context.Background())
}

func (i *BackupPlan) ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPlanOutput)
}

type BackupPlanOutput struct{ *pulumi.OutputState }

func (BackupPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPlan)(nil)).Elem()
}

func (o BackupPlanOutput) ToBackupPlanOutput() BackupPlanOutput {
	return o
}

func (o BackupPlanOutput) ToBackupPlanOutputWithContext(ctx context.Context) BackupPlanOutput {
	return o
}

// Defines the configuration of Backups created via this BackupPlan.
func (o BackupPlanOutput) BackupConfig() BackupConfigResponseOutput {
	return o.ApplyT(func(v *BackupPlan) BackupConfigResponseOutput { return v.BackupConfig }).(BackupConfigResponseOutput)
}

// Defines a schedule for automatic Backup creation via this BackupPlan.
func (o BackupPlanOutput) BackupSchedule() ScheduleResponseOutput {
	return o.ApplyT(func(v *BackupPlan) ScheduleResponseOutput { return v.BackupSchedule }).(ScheduleResponseOutput)
}

// Immutable. The source cluster from which Backups will be created via this BackupPlan. Possible formats: 1. projects/*/locations/*/clusters/* 2. projects/*/zones/*/clusters/*
func (o BackupPlanOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.Cluster }).(pulumi.StringOutput)
}

// The timestamp when this BackupPlan resource was created - can be converted to and from [RFC3339](https://www.ietf.org/rfc/rfc3339.txt)
func (o BackupPlanOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed, including the deactivated field. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False
func (o BackupPlanOutput) Deactivated() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.BoolOutput { return v.Deactivated }).(pulumi.BoolOutput)
}

// User specified descriptive string for this BackupPlan.
func (o BackupPlanOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from overwriting each other. It is strongly suggested that systems make use of the 'etag' in the read-modify-write cycle to perform BackupPlan updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackupPlan`, and systems are expected to put that etag in the request to `UpdateBackupPlan` to ensure that their change will be applied to the same version.
func (o BackupPlanOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// A set of custom labels supplied by user.
func (o BackupPlanOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The full name of the BackupPlan resource. Format: projects/*/locations/*/backupPlans/*
func (o BackupPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Represents the number of Kubernetes Pods backed up in the last successful Backup created underneath this BackupPlan.
func (o BackupPlanOutput) ProtectedPodCount() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.IntOutput { return v.ProtectedPodCount }).(pulumi.IntOutput)
}

// RetentionPolicy governs lifecycle of Backups created under this plan.
func (o BackupPlanOutput) RetentionPolicy() RetentionPolicyResponseOutput {
	return o.ApplyT(func(v *BackupPlan) RetentionPolicyResponseOutput { return v.RetentionPolicy }).(RetentionPolicyResponseOutput)
}

// Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
func (o BackupPlanOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The timestamp when this BackupPlan resource was last updated - can be converted to and from [RFC3339](https://www.ietf.org/rfc/rfc3339.txt)
func (o BackupPlanOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPlan) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPlanInput)(nil)).Elem(), &BackupPlan{})
	pulumi.RegisterOutputType(BackupPlanOutput{})
}
