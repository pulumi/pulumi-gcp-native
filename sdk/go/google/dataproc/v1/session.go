// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Create an interactive session asynchronously.
type Session struct {
	pulumi.CustomResourceState

	// The time when the session was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The email address of the user who created the session.
	Creator pulumi.StringOutput `pulumi:"creator"`
	// Optional. Environment configuration for the session execution.
	EnvironmentConfig EnvironmentConfigResponseOutput `pulumi:"environmentConfig"`
	// Optional. Jupyter session config.
	JupyterSession JupyterConfigResponseOutput `pulumi:"jupyterSession"`
	// Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// The resource name of the session.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. A unique ID used to identify the request. If the service receives two CreateSessionRequests (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateSessionRequest)s with the same ID, the second request is ignored, and the first Session is created and stored in the backend.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The value must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Optional. Runtime configuration for the session execution.
	RuntimeConfig RuntimeConfigResponseOutput `pulumi:"runtimeConfig"`
	// Runtime information about session execution.
	RuntimeInfo RuntimeInfoResponseOutput `pulumi:"runtimeInfo"`
	// Required. The ID to use for the session, which becomes the final component of the session's resource name.This value must be 4-63 characters. Valid characters are /a-z-/.
	SessionId pulumi.StringOutput `pulumi:"sessionId"`
	// Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
	SessionTemplate pulumi.StringOutput `pulumi:"sessionTemplate"`
	// A state of the session.
	State pulumi.StringOutput `pulumi:"state"`
	// Historical state information for the session.
	StateHistory SessionStateHistoryResponseArrayOutput `pulumi:"stateHistory"`
	// Session state details, such as the failure description if the state is FAILED.
	StateMessage pulumi.StringOutput `pulumi:"stateMessage"`
	// The time when the session entered the current state.
	StateTime pulumi.StringOutput `pulumi:"stateTime"`
	// Optional. The email address of the user who owns the session.
	User pulumi.StringOutput `pulumi:"user"`
	// A session UUID (Unique Universal Identifier). The service generates this value when it creates the session.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewSession registers a new resource with the given unique name, arguments, and options.
func NewSession(ctx *pulumi.Context,
	name string, args *SessionArgs, opts ...pulumi.ResourceOption) (*Session, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SessionId == nil {
		return nil, errors.New("invalid value for required argument 'SessionId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"sessionId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Session
	err := ctx.RegisterResource("google-native:dataproc/v1:Session", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSession gets an existing Session resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SessionState, opts ...pulumi.ResourceOption) (*Session, error) {
	var resource Session
	err := ctx.ReadResource("google-native:dataproc/v1:Session", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Session resources.
type sessionState struct {
}

type SessionState struct {
}

func (SessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionState)(nil)).Elem()
}

type sessionArgs struct {
	// Optional. Environment configuration for the session execution.
	EnvironmentConfig *EnvironmentConfig `pulumi:"environmentConfig"`
	// Optional. Jupyter session config.
	JupyterSession *JupyterConfig `pulumi:"jupyterSession"`
	// Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// The resource name of the session.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. A unique ID used to identify the request. If the service receives two CreateSessionRequests (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateSessionRequest)s with the same ID, the second request is ignored, and the first Session is created and stored in the backend.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The value must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId *string `pulumi:"requestId"`
	// Optional. Runtime configuration for the session execution.
	RuntimeConfig *RuntimeConfig `pulumi:"runtimeConfig"`
	// Required. The ID to use for the session, which becomes the final component of the session's resource name.This value must be 4-63 characters. Valid characters are /a-z-/.
	SessionId string `pulumi:"sessionId"`
	// Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
	SessionTemplate *string `pulumi:"sessionTemplate"`
	// Optional. The email address of the user who owns the session.
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a Session resource.
type SessionArgs struct {
	// Optional. Environment configuration for the session execution.
	EnvironmentConfig EnvironmentConfigPtrInput
	// Optional. Jupyter session config.
	JupyterSession JupyterConfigPtrInput
	// Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// The resource name of the session.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. A unique ID used to identify the request. If the service receives two CreateSessionRequests (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateSessionRequest)s with the same ID, the second request is ignored, and the first Session is created and stored in the backend.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The value must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId pulumi.StringPtrInput
	// Optional. Runtime configuration for the session execution.
	RuntimeConfig RuntimeConfigPtrInput
	// Required. The ID to use for the session, which becomes the final component of the session's resource name.This value must be 4-63 characters. Valid characters are /a-z-/.
	SessionId pulumi.StringInput
	// Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
	SessionTemplate pulumi.StringPtrInput
	// Optional. The email address of the user who owns the session.
	User pulumi.StringPtrInput
}

func (SessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionArgs)(nil)).Elem()
}

type SessionInput interface {
	pulumi.Input

	ToSessionOutput() SessionOutput
	ToSessionOutputWithContext(ctx context.Context) SessionOutput
}

func (*Session) ElementType() reflect.Type {
	return reflect.TypeOf((**Session)(nil)).Elem()
}

func (i *Session) ToSessionOutput() SessionOutput {
	return i.ToSessionOutputWithContext(context.Background())
}

func (i *Session) ToSessionOutputWithContext(ctx context.Context) SessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionOutput)
}

func (i *Session) ToOutput(ctx context.Context) pulumix.Output[*Session] {
	return pulumix.Output[*Session]{
		OutputState: i.ToSessionOutputWithContext(ctx).OutputState,
	}
}

type SessionOutput struct{ *pulumi.OutputState }

func (SessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Session)(nil)).Elem()
}

func (o SessionOutput) ToSessionOutput() SessionOutput {
	return o
}

func (o SessionOutput) ToSessionOutputWithContext(ctx context.Context) SessionOutput {
	return o
}

func (o SessionOutput) ToOutput(ctx context.Context) pulumix.Output[*Session] {
	return pulumix.Output[*Session]{
		OutputState: o.OutputState,
	}
}

// The time when the session was created.
func (o SessionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The email address of the user who created the session.
func (o SessionOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// Optional. Environment configuration for the session execution.
func (o SessionOutput) EnvironmentConfig() EnvironmentConfigResponseOutput {
	return o.ApplyT(func(v *Session) EnvironmentConfigResponseOutput { return v.EnvironmentConfig }).(EnvironmentConfigResponseOutput)
}

// Optional. Jupyter session config.
func (o SessionOutput) JupyterSession() JupyterConfigResponseOutput {
	return o.ApplyT(func(v *Session) JupyterConfigResponseOutput { return v.JupyterSession }).(JupyterConfigResponseOutput)
}

// Optional. The labels to associate with the session. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a session.
func (o SessionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Session) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o SessionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the session.
func (o SessionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SessionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. A unique ID used to identify the request. If the service receives two CreateSessionRequests (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateSessionRequest)s with the same ID, the second request is ignored, and the first Session is created and stored in the backend.Recommendation: Set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The value must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
func (o SessionOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Session) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Optional. Runtime configuration for the session execution.
func (o SessionOutput) RuntimeConfig() RuntimeConfigResponseOutput {
	return o.ApplyT(func(v *Session) RuntimeConfigResponseOutput { return v.RuntimeConfig }).(RuntimeConfigResponseOutput)
}

// Runtime information about session execution.
func (o SessionOutput) RuntimeInfo() RuntimeInfoResponseOutput {
	return o.ApplyT(func(v *Session) RuntimeInfoResponseOutput { return v.RuntimeInfo }).(RuntimeInfoResponseOutput)
}

// Required. The ID to use for the session, which becomes the final component of the session's resource name.This value must be 4-63 characters. Valid characters are /a-z-/.
func (o SessionOutput) SessionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.SessionId }).(pulumi.StringOutput)
}

// Optional. The session template used by the session.Only resource names, including project ID and location, are valid.Example: * https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id] * projects/[project_id]/locations/[dataproc_region]/sessionTemplates/[template_id]The template must be in the same project and Dataproc region as the session.
func (o SessionOutput) SessionTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.SessionTemplate }).(pulumi.StringOutput)
}

// A state of the session.
func (o SessionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Historical state information for the session.
func (o SessionOutput) StateHistory() SessionStateHistoryResponseArrayOutput {
	return o.ApplyT(func(v *Session) SessionStateHistoryResponseArrayOutput { return v.StateHistory }).(SessionStateHistoryResponseArrayOutput)
}

// Session state details, such as the failure description if the state is FAILED.
func (o SessionOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.StateMessage }).(pulumi.StringOutput)
}

// The time when the session entered the current state.
func (o SessionOutput) StateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.StateTime }).(pulumi.StringOutput)
}

// Optional. The email address of the user who owns the session.
func (o SessionOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

// A session UUID (Unique Universal Identifier). The service generates this value when it creates the session.
func (o SessionOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SessionInput)(nil)).Elem(), &Session{})
	pulumi.RegisterOutputType(SessionOutput{})
}
