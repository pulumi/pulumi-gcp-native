// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Submits a job to a cluster.
// Auto-naming is currently not supported for this resource.
type Job struct {
	pulumi.CustomResourceState

	// Indicates whether the job is completed. If the value is false, the job is still in progress. If true, the job is completed, and status.state field will indicate if it was successful, failed, or cancelled.
	Done pulumi.BoolOutput `pulumi:"done"`
	// If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.
	DriverControlFilesUri pulumi.StringOutput `pulumi:"driverControlFilesUri"`
	// A URI pointing to the location of the stdout of the job's driver program.
	DriverOutputResourceUri pulumi.StringOutput `pulumi:"driverOutputResourceUri"`
	// Optional. Driver scheduling configuration.
	DriverSchedulingConfig DriverSchedulingConfigResponseOutput `pulumi:"driverSchedulingConfig"`
	// Optional. Job is a Hadoop job.
	HadoopJob HadoopJobResponseOutput `pulumi:"hadoopJob"`
	// Optional. Job is a Hive job.
	HiveJob HiveJobResponseOutput `pulumi:"hiveJob"`
	// A UUID that uniquely identifies a job within the project over time. This is in contrast to a user-settable reference.job_id that may be reused over time.
	JobUuid pulumi.StringOutput `pulumi:"jobUuid"`
	// Optional. The labels to associate with this job. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Optional. Job is a Pig job.
	PigJob PigJobResponseOutput `pulumi:"pigJob"`
	// Job information, including how, when, and where to run the job.
	Placement JobPlacementResponseOutput `pulumi:"placement"`
	// Optional. Job is a Presto job.
	PrestoJob PrestoJobResponseOutput `pulumi:"prestoJob"`
	Project   pulumi.StringOutput     `pulumi:"project"`
	// Optional. Job is a PySpark job.
	PysparkJob PySparkJobResponseOutput `pulumi:"pysparkJob"`
	// Optional. The fully qualified reference to the job, which can be used to obtain the equivalent REST path of the job resource. If this property is not specified when a job is created, the server generates a job_id.
	Reference JobReferenceResponseOutput `pulumi:"reference"`
	Region    pulumi.StringOutput        `pulumi:"region"`
	// Optional. Job scheduling configuration.
	Scheduling JobSchedulingResponseOutput `pulumi:"scheduling"`
	// Optional. Job is a Spark job.
	SparkJob SparkJobResponseOutput `pulumi:"sparkJob"`
	// Optional. Job is a SparkR job.
	SparkRJob SparkRJobResponseOutput `pulumi:"sparkRJob"`
	// Optional. Job is a SparkSql job.
	SparkSqlJob SparkSqlJobResponseOutput `pulumi:"sparkSqlJob"`
	// The job status. Additional application-specific status information may be contained in the type_job and yarn_applications fields.
	Status JobStatusResponseOutput `pulumi:"status"`
	// The previous job status.
	StatusHistory JobStatusResponseArrayOutput `pulumi:"statusHistory"`
	// Optional. Job is a Trino job.
	TrinoJob TrinoJobResponseOutput `pulumi:"trinoJob"`
	// The collection of YARN applications spun up by this job.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
	YarnApplications YarnApplicationResponseArrayOutput `pulumi:"yarnApplications"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Placement == nil {
		return nil, errors.New("invalid value for required argument 'Placement'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
		"region",
	})
	opts = append(opts, replaceOnChanges)
	var resource Job
	err := ctx.RegisterResource("google-native:dataproc/v1:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("google-native:dataproc/v1:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
}

type JobState struct {
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// Optional. Driver scheduling configuration.
	DriverSchedulingConfig *DriverSchedulingConfig `pulumi:"driverSchedulingConfig"`
	// Optional. Job is a Hadoop job.
	HadoopJob *HadoopJob `pulumi:"hadoopJob"`
	// Optional. Job is a Hive job.
	HiveJob *HiveJob `pulumi:"hiveJob"`
	// Optional. The labels to associate with this job. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Job is a Pig job.
	PigJob *PigJob `pulumi:"pigJob"`
	// Job information, including how, when, and where to run the job.
	Placement JobPlacement `pulumi:"placement"`
	// Optional. Job is a Presto job.
	PrestoJob *PrestoJob `pulumi:"prestoJob"`
	Project   *string    `pulumi:"project"`
	// Optional. Job is a PySpark job.
	PysparkJob *PySparkJob `pulumi:"pysparkJob"`
	// Optional. The fully qualified reference to the job, which can be used to obtain the equivalent REST path of the job resource. If this property is not specified when a job is created, the server generates a job_id.
	Reference *JobReference `pulumi:"reference"`
	Region    string        `pulumi:"region"`
	// Optional. A unique id used to identify the request. If the server receives two SubmitJobRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.SubmitJobRequest)s with the same id, then the second request will be ignored and the first Job created and stored in the backend is returned.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId *string `pulumi:"requestId"`
	// Optional. Job scheduling configuration.
	Scheduling *JobScheduling `pulumi:"scheduling"`
	// Optional. Job is a Spark job.
	SparkJob *SparkJob `pulumi:"sparkJob"`
	// Optional. Job is a SparkR job.
	SparkRJob *SparkRJob `pulumi:"sparkRJob"`
	// Optional. Job is a SparkSql job.
	SparkSqlJob *SparkSqlJob `pulumi:"sparkSqlJob"`
	// Optional. Job is a Trino job.
	TrinoJob *TrinoJob `pulumi:"trinoJob"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Optional. Driver scheduling configuration.
	DriverSchedulingConfig DriverSchedulingConfigPtrInput
	// Optional. Job is a Hadoop job.
	HadoopJob HadoopJobPtrInput
	// Optional. Job is a Hive job.
	HiveJob HiveJobPtrInput
	// Optional. The labels to associate with this job. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job.
	Labels pulumi.StringMapInput
	// Optional. Job is a Pig job.
	PigJob PigJobPtrInput
	// Job information, including how, when, and where to run the job.
	Placement JobPlacementInput
	// Optional. Job is a Presto job.
	PrestoJob PrestoJobPtrInput
	Project   pulumi.StringPtrInput
	// Optional. Job is a PySpark job.
	PysparkJob PySparkJobPtrInput
	// Optional. The fully qualified reference to the job, which can be used to obtain the equivalent REST path of the job resource. If this property is not specified when a job is created, the server generates a job_id.
	Reference JobReferencePtrInput
	Region    pulumi.StringInput
	// Optional. A unique id used to identify the request. If the server receives two SubmitJobRequest (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.SubmitJobRequest)s with the same id, then the second request will be ignored and the first Job created and stored in the backend is returned.It is recommended to always set this value to a UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.
	RequestId pulumi.StringPtrInput
	// Optional. Job scheduling configuration.
	Scheduling JobSchedulingPtrInput
	// Optional. Job is a Spark job.
	SparkJob SparkJobPtrInput
	// Optional. Job is a SparkR job.
	SparkRJob SparkRJobPtrInput
	// Optional. Job is a SparkSql job.
	SparkSqlJob SparkSqlJobPtrInput
	// Optional. Job is a Trino job.
	TrinoJob TrinoJobPtrInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Indicates whether the job is completed. If the value is false, the job is still in progress. If true, the job is completed, and status.state field will indicate if it was successful, failed, or cancelled.
func (o JobOutput) Done() pulumi.BoolOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolOutput { return v.Done }).(pulumi.BoolOutput)
}

// If present, the location of miscellaneous control files which may be used as part of job setup and handling. If not present, control files may be placed in the same location as driver_output_uri.
func (o JobOutput) DriverControlFilesUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.DriverControlFilesUri }).(pulumi.StringOutput)
}

// A URI pointing to the location of the stdout of the job's driver program.
func (o JobOutput) DriverOutputResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.DriverOutputResourceUri }).(pulumi.StringOutput)
}

// Optional. Driver scheduling configuration.
func (o JobOutput) DriverSchedulingConfig() DriverSchedulingConfigResponseOutput {
	return o.ApplyT(func(v *Job) DriverSchedulingConfigResponseOutput { return v.DriverSchedulingConfig }).(DriverSchedulingConfigResponseOutput)
}

// Optional. Job is a Hadoop job.
func (o JobOutput) HadoopJob() HadoopJobResponseOutput {
	return o.ApplyT(func(v *Job) HadoopJobResponseOutput { return v.HadoopJob }).(HadoopJobResponseOutput)
}

// Optional. Job is a Hive job.
func (o JobOutput) HiveJob() HiveJobResponseOutput {
	return o.ApplyT(func(v *Job) HiveJobResponseOutput { return v.HiveJob }).(HiveJobResponseOutput)
}

// A UUID that uniquely identifies a job within the project over time. This is in contrast to a user-settable reference.job_id that may be reused over time.
func (o JobOutput) JobUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.JobUuid }).(pulumi.StringOutput)
}

// Optional. The labels to associate with this job. Label keys must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must contain 1 to 63 characters, and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a job.
func (o JobOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Optional. Job is a Pig job.
func (o JobOutput) PigJob() PigJobResponseOutput {
	return o.ApplyT(func(v *Job) PigJobResponseOutput { return v.PigJob }).(PigJobResponseOutput)
}

// Job information, including how, when, and where to run the job.
func (o JobOutput) Placement() JobPlacementResponseOutput {
	return o.ApplyT(func(v *Job) JobPlacementResponseOutput { return v.Placement }).(JobPlacementResponseOutput)
}

// Optional. Job is a Presto job.
func (o JobOutput) PrestoJob() PrestoJobResponseOutput {
	return o.ApplyT(func(v *Job) PrestoJobResponseOutput { return v.PrestoJob }).(PrestoJobResponseOutput)
}

func (o JobOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. Job is a PySpark job.
func (o JobOutput) PysparkJob() PySparkJobResponseOutput {
	return o.ApplyT(func(v *Job) PySparkJobResponseOutput { return v.PysparkJob }).(PySparkJobResponseOutput)
}

// Optional. The fully qualified reference to the job, which can be used to obtain the equivalent REST path of the job resource. If this property is not specified when a job is created, the server generates a job_id.
func (o JobOutput) Reference() JobReferenceResponseOutput {
	return o.ApplyT(func(v *Job) JobReferenceResponseOutput { return v.Reference }).(JobReferenceResponseOutput)
}

func (o JobOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Optional. Job scheduling configuration.
func (o JobOutput) Scheduling() JobSchedulingResponseOutput {
	return o.ApplyT(func(v *Job) JobSchedulingResponseOutput { return v.Scheduling }).(JobSchedulingResponseOutput)
}

// Optional. Job is a Spark job.
func (o JobOutput) SparkJob() SparkJobResponseOutput {
	return o.ApplyT(func(v *Job) SparkJobResponseOutput { return v.SparkJob }).(SparkJobResponseOutput)
}

// Optional. Job is a SparkR job.
func (o JobOutput) SparkRJob() SparkRJobResponseOutput {
	return o.ApplyT(func(v *Job) SparkRJobResponseOutput { return v.SparkRJob }).(SparkRJobResponseOutput)
}

// Optional. Job is a SparkSql job.
func (o JobOutput) SparkSqlJob() SparkSqlJobResponseOutput {
	return o.ApplyT(func(v *Job) SparkSqlJobResponseOutput { return v.SparkSqlJob }).(SparkSqlJobResponseOutput)
}

// The job status. Additional application-specific status information may be contained in the type_job and yarn_applications fields.
func (o JobOutput) Status() JobStatusResponseOutput {
	return o.ApplyT(func(v *Job) JobStatusResponseOutput { return v.Status }).(JobStatusResponseOutput)
}

// The previous job status.
func (o JobOutput) StatusHistory() JobStatusResponseArrayOutput {
	return o.ApplyT(func(v *Job) JobStatusResponseArrayOutput { return v.StatusHistory }).(JobStatusResponseArrayOutput)
}

// Optional. Job is a Trino job.
func (o JobOutput) TrinoJob() TrinoJobResponseOutput {
	return o.ApplyT(func(v *Job) TrinoJobResponseOutput { return v.TrinoJob }).(TrinoJobResponseOutput)
}

// The collection of YARN applications spun up by this job.Beta Feature: This report is available for testing purposes only. It may be changed before final release.
func (o JobOutput) YarnApplications() YarnApplicationResponseArrayOutput {
	return o.ApplyT(func(v *Job) YarnApplicationResponseArrayOutput { return v.YarnApplications }).(YarnApplicationResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterOutputType(JobOutput{})
}
