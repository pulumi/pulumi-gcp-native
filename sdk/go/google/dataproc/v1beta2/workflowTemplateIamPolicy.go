// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
type WorkflowTemplateIamPolicy struct {
	pulumi.CustomResourceState
}

// NewWorkflowTemplateIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTemplateIamPolicy(ctx *pulumi.Context,
	name string, args *WorkflowTemplateIamPolicyArgs, opts ...pulumi.ResourceOption) (*WorkflowTemplateIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.WorkflowTemplatesId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowTemplatesId'")
	}
	var resource WorkflowTemplateIamPolicy
	err := ctx.RegisterResource("google-cloud:dataproc/v1beta2:WorkflowTemplateIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTemplateIamPolicy gets an existing WorkflowTemplateIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTemplateIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTemplateIamPolicyState, opts ...pulumi.ResourceOption) (*WorkflowTemplateIamPolicy, error) {
	var resource WorkflowTemplateIamPolicy
	err := ctx.ReadResource("google-cloud:dataproc/v1beta2:WorkflowTemplateIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTemplateIamPolicy resources.
type workflowTemplateIamPolicyState struct {
}

type WorkflowTemplateIamPolicyState struct {
}

func (WorkflowTemplateIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTemplateIamPolicyState)(nil)).Elem()
}

type workflowTemplateIamPolicyArgs struct {
	LocationsId string `pulumi:"locationsId"`
	// REQUIRED: The complete policy to be applied to the resource. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy              *Policy `pulumi:"policy"`
	ProjectsId          string  `pulumi:"projectsId"`
	WorkflowTemplatesId string  `pulumi:"workflowTemplatesId"`
}

// The set of arguments for constructing a WorkflowTemplateIamPolicy resource.
type WorkflowTemplateIamPolicyArgs struct {
	LocationsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the resource. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy              PolicyPtrInput
	ProjectsId          pulumi.StringInput
	WorkflowTemplatesId pulumi.StringInput
}

func (WorkflowTemplateIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTemplateIamPolicyArgs)(nil)).Elem()
}

type WorkflowTemplateIamPolicyInput interface {
	pulumi.Input

	ToWorkflowTemplateIamPolicyOutput() WorkflowTemplateIamPolicyOutput
	ToWorkflowTemplateIamPolicyOutputWithContext(ctx context.Context) WorkflowTemplateIamPolicyOutput
}

func (*WorkflowTemplateIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTemplateIamPolicy)(nil))
}

func (i *WorkflowTemplateIamPolicy) ToWorkflowTemplateIamPolicyOutput() WorkflowTemplateIamPolicyOutput {
	return i.ToWorkflowTemplateIamPolicyOutputWithContext(context.Background())
}

func (i *WorkflowTemplateIamPolicy) ToWorkflowTemplateIamPolicyOutputWithContext(ctx context.Context) WorkflowTemplateIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTemplateIamPolicyOutput)
}

type WorkflowTemplateIamPolicyOutput struct {
	*pulumi.OutputState
}

func (WorkflowTemplateIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTemplateIamPolicy)(nil))
}

func (o WorkflowTemplateIamPolicyOutput) ToWorkflowTemplateIamPolicyOutput() WorkflowTemplateIamPolicyOutput {
	return o
}

func (o WorkflowTemplateIamPolicyOutput) ToWorkflowTemplateIamPolicyOutputWithContext(ctx context.Context) WorkflowTemplateIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WorkflowTemplateIamPolicyOutput{})
}
