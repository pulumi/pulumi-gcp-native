// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
type RegionWorkflowTemplateIamPolicy struct {
	pulumi.CustomResourceState
}

// NewRegionWorkflowTemplateIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegionWorkflowTemplateIamPolicy(ctx *pulumi.Context,
	name string, args *RegionWorkflowTemplateIamPolicyArgs, opts ...pulumi.ResourceOption) (*RegionWorkflowTemplateIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.RegionsId == nil {
		return nil, errors.New("invalid value for required argument 'RegionsId'")
	}
	if args.WorkflowTemplatesId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowTemplatesId'")
	}
	var resource RegionWorkflowTemplateIamPolicy
	err := ctx.RegisterResource("google-cloud:dataproc/v1beta2:RegionWorkflowTemplateIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionWorkflowTemplateIamPolicy gets an existing RegionWorkflowTemplateIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionWorkflowTemplateIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionWorkflowTemplateIamPolicyState, opts ...pulumi.ResourceOption) (*RegionWorkflowTemplateIamPolicy, error) {
	var resource RegionWorkflowTemplateIamPolicy
	err := ctx.ReadResource("google-cloud:dataproc/v1beta2:RegionWorkflowTemplateIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionWorkflowTemplateIamPolicy resources.
type regionWorkflowTemplateIamPolicyState struct {
}

type RegionWorkflowTemplateIamPolicyState struct {
}

func (RegionWorkflowTemplateIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionWorkflowTemplateIamPolicyState)(nil)).Elem()
}

type regionWorkflowTemplateIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the resource. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy              *Policy `pulumi:"policy"`
	ProjectsId          string  `pulumi:"projectsId"`
	RegionsId           string  `pulumi:"regionsId"`
	WorkflowTemplatesId string  `pulumi:"workflowTemplatesId"`
}

// The set of arguments for constructing a RegionWorkflowTemplateIamPolicy resource.
type RegionWorkflowTemplateIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the resource. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy              PolicyPtrInput
	ProjectsId          pulumi.StringInput
	RegionsId           pulumi.StringInput
	WorkflowTemplatesId pulumi.StringInput
}

func (RegionWorkflowTemplateIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionWorkflowTemplateIamPolicyArgs)(nil)).Elem()
}

type RegionWorkflowTemplateIamPolicyInput interface {
	pulumi.Input

	ToRegionWorkflowTemplateIamPolicyOutput() RegionWorkflowTemplateIamPolicyOutput
	ToRegionWorkflowTemplateIamPolicyOutputWithContext(ctx context.Context) RegionWorkflowTemplateIamPolicyOutput
}

func (*RegionWorkflowTemplateIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionWorkflowTemplateIamPolicy)(nil))
}

func (i *RegionWorkflowTemplateIamPolicy) ToRegionWorkflowTemplateIamPolicyOutput() RegionWorkflowTemplateIamPolicyOutput {
	return i.ToRegionWorkflowTemplateIamPolicyOutputWithContext(context.Background())
}

func (i *RegionWorkflowTemplateIamPolicy) ToRegionWorkflowTemplateIamPolicyOutputWithContext(ctx context.Context) RegionWorkflowTemplateIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionWorkflowTemplateIamPolicyOutput)
}

type RegionWorkflowTemplateIamPolicyOutput struct {
	*pulumi.OutputState
}

func (RegionWorkflowTemplateIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionWorkflowTemplateIamPolicy)(nil))
}

func (o RegionWorkflowTemplateIamPolicyOutput) ToRegionWorkflowTemplateIamPolicyOutput() RegionWorkflowTemplateIamPolicyOutput {
	return o
}

func (o RegionWorkflowTemplateIamPolicyOutput) ToRegionWorkflowTemplateIamPolicyOutputWithContext(ctx context.Context) RegionWorkflowTemplateIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RegionWorkflowTemplateIamPolicyOutput{})
}
