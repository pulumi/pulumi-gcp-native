// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
type RegionOperationIamPolicy struct {
	pulumi.CustomResourceState
}

// NewRegionOperationIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegionOperationIamPolicy(ctx *pulumi.Context,
	name string, args *RegionOperationIamPolicyArgs, opts ...pulumi.ResourceOption) (*RegionOperationIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OperationsId == nil {
		return nil, errors.New("invalid value for required argument 'OperationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.RegionsId == nil {
		return nil, errors.New("invalid value for required argument 'RegionsId'")
	}
	var resource RegionOperationIamPolicy
	err := ctx.RegisterResource("google-cloud:dataproc/v1beta2:RegionOperationIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionOperationIamPolicy gets an existing RegionOperationIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionOperationIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionOperationIamPolicyState, opts ...pulumi.ResourceOption) (*RegionOperationIamPolicy, error) {
	var resource RegionOperationIamPolicy
	err := ctx.ReadResource("google-cloud:dataproc/v1beta2:RegionOperationIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionOperationIamPolicy resources.
type regionOperationIamPolicyState struct {
}

type RegionOperationIamPolicyState struct {
}

func (RegionOperationIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionOperationIamPolicyState)(nil)).Elem()
}

type regionOperationIamPolicyArgs struct {
	OperationsId string `pulumi:"operationsId"`
	// REQUIRED: The complete policy to be applied to the resource. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	RegionsId  string  `pulumi:"regionsId"`
}

// The set of arguments for constructing a RegionOperationIamPolicy resource.
type RegionOperationIamPolicyArgs struct {
	OperationsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the resource. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	RegionsId  pulumi.StringInput
}

func (RegionOperationIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionOperationIamPolicyArgs)(nil)).Elem()
}

type RegionOperationIamPolicyInput interface {
	pulumi.Input

	ToRegionOperationIamPolicyOutput() RegionOperationIamPolicyOutput
	ToRegionOperationIamPolicyOutputWithContext(ctx context.Context) RegionOperationIamPolicyOutput
}

func (*RegionOperationIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionOperationIamPolicy)(nil))
}

func (i *RegionOperationIamPolicy) ToRegionOperationIamPolicyOutput() RegionOperationIamPolicyOutput {
	return i.ToRegionOperationIamPolicyOutputWithContext(context.Background())
}

func (i *RegionOperationIamPolicy) ToRegionOperationIamPolicyOutputWithContext(ctx context.Context) RegionOperationIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionOperationIamPolicyOutput)
}

type RegionOperationIamPolicyOutput struct {
	*pulumi.OutputState
}

func (RegionOperationIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionOperationIamPolicy)(nil))
}

func (o RegionOperationIamPolicyOutput) ToRegionOperationIamPolicyOutput() RegionOperationIamPolicyOutput {
	return o
}

func (o RegionOperationIamPolicyOutput) ToRegionOperationIamPolicyOutputWithContext(ctx context.Context) RegionOperationIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RegionOperationIamPolicyOutput{})
}
