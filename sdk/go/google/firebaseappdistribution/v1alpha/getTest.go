// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get results for automated test run on release.
func LookupTest(ctx *pulumi.Context, args *LookupTestArgs, opts ...pulumi.InvokeOption) (*LookupTestResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTestResult
	err := ctx.Invoke("google-native:firebaseappdistribution/v1alpha:getTest", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTestArgs struct {
	AppId     string  `pulumi:"appId"`
	Project   *string `pulumi:"project"`
	ReleaseId string  `pulumi:"releaseId"`
	TestId    string  `pulumi:"testId"`
}

type LookupTestResult struct {
	// Timestamp when the test was run.
	CreateTime string `pulumi:"createTime"`
	// The results of the test on each device.
	DeviceExecutions []GoogleFirebaseAppdistroV1alphaDeviceExecutionResponse `pulumi:"deviceExecutions"`
	// Optional. Input only. Login credentials for the test. Input only.
	LoginCredential GoogleFirebaseAppdistroV1alphaLoginCredentialResponse `pulumi:"loginCredential"`
	// The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
	Name string `pulumi:"name"`
}

func LookupTestOutput(ctx *pulumi.Context, args LookupTestOutputArgs, opts ...pulumi.InvokeOption) LookupTestResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTestResult, error) {
			args := v.(LookupTestArgs)
			r, err := LookupTest(ctx, &args, opts...)
			var s LookupTestResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTestResultOutput)
}

type LookupTestOutputArgs struct {
	AppId     pulumi.StringInput    `pulumi:"appId"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
	ReleaseId pulumi.StringInput    `pulumi:"releaseId"`
	TestId    pulumi.StringInput    `pulumi:"testId"`
}

func (LookupTestOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTestArgs)(nil)).Elem()
}

type LookupTestResultOutput struct{ *pulumi.OutputState }

func (LookupTestResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTestResult)(nil)).Elem()
}

func (o LookupTestResultOutput) ToLookupTestResultOutput() LookupTestResultOutput {
	return o
}

func (o LookupTestResultOutput) ToLookupTestResultOutputWithContext(ctx context.Context) LookupTestResultOutput {
	return o
}

// Timestamp when the test was run.
func (o LookupTestResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTestResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The results of the test on each device.
func (o LookupTestResultOutput) DeviceExecutions() GoogleFirebaseAppdistroV1alphaDeviceExecutionResponseArrayOutput {
	return o.ApplyT(func(v LookupTestResult) []GoogleFirebaseAppdistroV1alphaDeviceExecutionResponse {
		return v.DeviceExecutions
	}).(GoogleFirebaseAppdistroV1alphaDeviceExecutionResponseArrayOutput)
}

// Optional. Input only. Login credentials for the test. Input only.
func (o LookupTestResultOutput) LoginCredential() GoogleFirebaseAppdistroV1alphaLoginCredentialResponseOutput {
	return o.ApplyT(func(v LookupTestResult) GoogleFirebaseAppdistroV1alphaLoginCredentialResponse {
		return v.LoginCredential
	}).(GoogleFirebaseAppdistroV1alphaLoginCredentialResponseOutput)
}

// The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
func (o LookupTestResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTestResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTestResultOutput{})
}
