// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Run automated test(s) on release.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type Test struct {
	pulumi.CustomResourceState

	AppId pulumi.StringOutput `pulumi:"appId"`
	// Timestamp when the test was run.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The results of the test on each device.
	DeviceExecutions GoogleFirebaseAppdistroV1alphaDeviceExecutionResponseArrayOutput `pulumi:"deviceExecutions"`
	// Optional. Input only. Login credentials for the test. Input only.
	LoginCredential GoogleFirebaseAppdistroV1alphaLoginCredentialResponseOutput `pulumi:"loginCredential"`
	// The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
	Name      pulumi.StringOutput `pulumi:"name"`
	Project   pulumi.StringOutput `pulumi:"project"`
	ReleaseId pulumi.StringOutput `pulumi:"releaseId"`
	// Optional. The ID to use for the test, which will become the final component of the tests's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. If it is not provided one will be automatically generated.
	ReleaseTestId pulumi.StringPtrOutput `pulumi:"releaseTestId"`
}

// NewTest registers a new resource with the given unique name, arguments, and options.
func NewTest(ctx *pulumi.Context,
	name string, args *TestArgs, opts ...pulumi.ResourceOption) (*Test, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.DeviceExecutions == nil {
		return nil, errors.New("invalid value for required argument 'DeviceExecutions'")
	}
	if args.ReleaseId == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"appId",
		"project",
		"releaseId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Test
	err := ctx.RegisterResource("google-native:firebaseappdistribution/v1alpha:Test", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTest gets an existing Test resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TestState, opts ...pulumi.ResourceOption) (*Test, error) {
	var resource Test
	err := ctx.ReadResource("google-native:firebaseappdistribution/v1alpha:Test", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Test resources.
type testState struct {
}

type TestState struct {
}

func (TestState) ElementType() reflect.Type {
	return reflect.TypeOf((*testState)(nil)).Elem()
}

type testArgs struct {
	AppId string `pulumi:"appId"`
	// The results of the test on each device.
	DeviceExecutions []GoogleFirebaseAppdistroV1alphaDeviceExecution `pulumi:"deviceExecutions"`
	// Optional. Input only. Login credentials for the test. Input only.
	LoginCredential *GoogleFirebaseAppdistroV1alphaLoginCredential `pulumi:"loginCredential"`
	// The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
	Name      *string `pulumi:"name"`
	Project   *string `pulumi:"project"`
	ReleaseId string  `pulumi:"releaseId"`
	// Optional. The ID to use for the test, which will become the final component of the tests's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. If it is not provided one will be automatically generated.
	ReleaseTestId *string `pulumi:"releaseTestId"`
}

// The set of arguments for constructing a Test resource.
type TestArgs struct {
	AppId pulumi.StringInput
	// The results of the test on each device.
	DeviceExecutions GoogleFirebaseAppdistroV1alphaDeviceExecutionArrayInput
	// Optional. Input only. Login credentials for the test. Input only.
	LoginCredential GoogleFirebaseAppdistroV1alphaLoginCredentialPtrInput
	// The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	ReleaseId pulumi.StringInput
	// Optional. The ID to use for the test, which will become the final component of the tests's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. If it is not provided one will be automatically generated.
	ReleaseTestId pulumi.StringPtrInput
}

func (TestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*testArgs)(nil)).Elem()
}

type TestInput interface {
	pulumi.Input

	ToTestOutput() TestOutput
	ToTestOutputWithContext(ctx context.Context) TestOutput
}

func (*Test) ElementType() reflect.Type {
	return reflect.TypeOf((**Test)(nil)).Elem()
}

func (i *Test) ToTestOutput() TestOutput {
	return i.ToTestOutputWithContext(context.Background())
}

func (i *Test) ToTestOutputWithContext(ctx context.Context) TestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestOutput)
}

type TestOutput struct{ *pulumi.OutputState }

func (TestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Test)(nil)).Elem()
}

func (o TestOutput) ToTestOutput() TestOutput {
	return o
}

func (o TestOutput) ToTestOutputWithContext(ctx context.Context) TestOutput {
	return o
}

func (o TestOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *Test) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Timestamp when the test was run.
func (o TestOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Test) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The results of the test on each device.
func (o TestOutput) DeviceExecutions() GoogleFirebaseAppdistroV1alphaDeviceExecutionResponseArrayOutput {
	return o.ApplyT(func(v *Test) GoogleFirebaseAppdistroV1alphaDeviceExecutionResponseArrayOutput {
		return v.DeviceExecutions
	}).(GoogleFirebaseAppdistroV1alphaDeviceExecutionResponseArrayOutput)
}

// Optional. Input only. Login credentials for the test. Input only.
func (o TestOutput) LoginCredential() GoogleFirebaseAppdistroV1alphaLoginCredentialResponseOutput {
	return o.ApplyT(func(v *Test) GoogleFirebaseAppdistroV1alphaLoginCredentialResponseOutput { return v.LoginCredential }).(GoogleFirebaseAppdistroV1alphaLoginCredentialResponseOutput)
}

// The name of the release test resource. Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}/tests/{test_id}`
func (o TestOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Test) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TestOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Test) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o TestOutput) ReleaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Test) pulumi.StringOutput { return v.ReleaseId }).(pulumi.StringOutput)
}

// Optional. The ID to use for the test, which will become the final component of the tests's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. If it is not provided one will be automatically generated.
func (o TestOutput) ReleaseTestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Test) pulumi.StringPtrOutput { return v.ReleaseTestId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TestInput)(nil)).Elem(), &Test{})
	pulumi.RegisterOutputType(TestOutput{})
}
