// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3p1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new company entity.
type Company struct {
	pulumi.CustomResourceState
}

// NewCompany registers a new resource with the given unique name, arguments, and options.
func NewCompany(ctx *pulumi.Context,
	name string, args *CompanyArgs, opts ...pulumi.ResourceOption) (*Company, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompaniesId == nil {
		return nil, errors.New("invalid value for required argument 'CompaniesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource Company
	err := ctx.RegisterResource("google-cloud:jobs/v3p1beta1:Company", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCompany gets an existing Company resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCompany(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CompanyState, opts ...pulumi.ResourceOption) (*Company, error) {
	var resource Company
	err := ctx.ReadResource("google-cloud:jobs/v3p1beta1:Company", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Company resources.
type companyState struct {
}

type CompanyState struct {
}

func (CompanyState) ElementType() reflect.Type {
	return reflect.TypeOf((*companyState)(nil)).Elem()
}

type companyArgs struct {
	CompaniesId string `pulumi:"companiesId"`
	// Required. The company to be created.
	Company    *CompanyType `pulumi:"company"`
	ProjectsId string       `pulumi:"projectsId"`
}

// The set of arguments for constructing a Company resource.
type CompanyArgs struct {
	CompaniesId pulumi.StringInput
	// Required. The company to be created.
	Company    CompanyTypePtrInput
	ProjectsId pulumi.StringInput
}

func (CompanyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*companyArgs)(nil)).Elem()
}

type CompanyInput interface {
	pulumi.Input

	ToCompanyOutput() CompanyOutput
	ToCompanyOutputWithContext(ctx context.Context) CompanyOutput
}

func (*Company) ElementType() reflect.Type {
	return reflect.TypeOf((*Company)(nil))
}

func (i *Company) ToCompanyOutput() CompanyOutput {
	return i.ToCompanyOutputWithContext(context.Background())
}

func (i *Company) ToCompanyOutputWithContext(ctx context.Context) CompanyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompanyOutput)
}

type CompanyOutput struct {
	*pulumi.OutputState
}

func (CompanyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Company)(nil))
}

func (o CompanyOutput) ToCompanyOutput() CompanyOutput {
	return o
}

func (o CompanyOutput) ToCompanyOutputWithContext(ctx context.Context) CompanyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CompanyOutput{})
}
