// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets an individual WorkloadIdentityPoolProviderKey.
func LookupWorkloadIdentityPoolKey(ctx *pulumi.Context, args *LookupWorkloadIdentityPoolKeyArgs, opts ...pulumi.InvokeOption) (*LookupWorkloadIdentityPoolKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkloadIdentityPoolKeyResult
	err := ctx.Invoke("google-native:iam/v1:getWorkloadIdentityPoolKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWorkloadIdentityPoolKeyArgs struct {
	KeyId                  string  `pulumi:"keyId"`
	Location               string  `pulumi:"location"`
	Project                *string `pulumi:"project"`
	ProviderId             string  `pulumi:"providerId"`
	WorkloadIdentityPoolId string  `pulumi:"workloadIdentityPoolId"`
}

type LookupWorkloadIdentityPoolKeyResult struct {
	// Time after which the key will be permanently purged and cannot be recovered. Note that the key may get purged before this timestamp if the total limit of keys per provider is crossed.
	ExpireTime string `pulumi:"expireTime"`
	// Immutable. Public half of the asymmetric key.
	KeyData KeyDataResponse `pulumi:"keyData"`
	// The resource name of the key.
	Name string `pulumi:"name"`
	// The state of the key.
	State string `pulumi:"state"`
	// The purpose of the key.
	Use string `pulumi:"use"`
}

func LookupWorkloadIdentityPoolKeyOutput(ctx *pulumi.Context, args LookupWorkloadIdentityPoolKeyOutputArgs, opts ...pulumi.InvokeOption) LookupWorkloadIdentityPoolKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkloadIdentityPoolKeyResult, error) {
			args := v.(LookupWorkloadIdentityPoolKeyArgs)
			r, err := LookupWorkloadIdentityPoolKey(ctx, &args, opts...)
			var s LookupWorkloadIdentityPoolKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkloadIdentityPoolKeyResultOutput)
}

type LookupWorkloadIdentityPoolKeyOutputArgs struct {
	KeyId                  pulumi.StringInput    `pulumi:"keyId"`
	Location               pulumi.StringInput    `pulumi:"location"`
	Project                pulumi.StringPtrInput `pulumi:"project"`
	ProviderId             pulumi.StringInput    `pulumi:"providerId"`
	WorkloadIdentityPoolId pulumi.StringInput    `pulumi:"workloadIdentityPoolId"`
}

func (LookupWorkloadIdentityPoolKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkloadIdentityPoolKeyArgs)(nil)).Elem()
}

type LookupWorkloadIdentityPoolKeyResultOutput struct{ *pulumi.OutputState }

func (LookupWorkloadIdentityPoolKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkloadIdentityPoolKeyResult)(nil)).Elem()
}

func (o LookupWorkloadIdentityPoolKeyResultOutput) ToLookupWorkloadIdentityPoolKeyResultOutput() LookupWorkloadIdentityPoolKeyResultOutput {
	return o
}

func (o LookupWorkloadIdentityPoolKeyResultOutput) ToLookupWorkloadIdentityPoolKeyResultOutputWithContext(ctx context.Context) LookupWorkloadIdentityPoolKeyResultOutput {
	return o
}

func (o LookupWorkloadIdentityPoolKeyResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupWorkloadIdentityPoolKeyResult] {
	return pulumix.Output[LookupWorkloadIdentityPoolKeyResult]{
		OutputState: o.OutputState,
	}
}

// Time after which the key will be permanently purged and cannot be recovered. Note that the key may get purged before this timestamp if the total limit of keys per provider is crossed.
func (o LookupWorkloadIdentityPoolKeyResultOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkloadIdentityPoolKeyResult) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Immutable. Public half of the asymmetric key.
func (o LookupWorkloadIdentityPoolKeyResultOutput) KeyData() KeyDataResponseOutput {
	return o.ApplyT(func(v LookupWorkloadIdentityPoolKeyResult) KeyDataResponse { return v.KeyData }).(KeyDataResponseOutput)
}

// The resource name of the key.
func (o LookupWorkloadIdentityPoolKeyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkloadIdentityPoolKeyResult) string { return v.Name }).(pulumi.StringOutput)
}

// The state of the key.
func (o LookupWorkloadIdentityPoolKeyResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkloadIdentityPoolKeyResult) string { return v.State }).(pulumi.StringOutput)
}

// The purpose of the key.
func (o LookupWorkloadIdentityPoolKeyResultOutput) Use() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkloadIdentityPoolKeyResult) string { return v.Use }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkloadIdentityPoolKeyResultOutput{})
}
