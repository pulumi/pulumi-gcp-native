// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Access related restrictions on the workforce pool.
type AccessRestrictions struct {
	// Optional. Immutable. Services allowed for web sign-in with the workforce pool. If not set by default there are no restrictions.
	AllowedServices []ServiceConfig `pulumi:"allowedServices"`
	// Optional. Disable programmatic sign-in by disabling token issue via the Security Token API endpoint. See [Security Token Service API] (https://cloud.google.com/iam/docs/reference/sts/rest).
	DisableProgrammaticSignin *bool `pulumi:"disableProgrammaticSignin"`
}

// AccessRestrictionsInput is an input type that accepts AccessRestrictionsArgs and AccessRestrictionsOutput values.
// You can construct a concrete instance of `AccessRestrictionsInput` via:
//
//	AccessRestrictionsArgs{...}
type AccessRestrictionsInput interface {
	pulumi.Input

	ToAccessRestrictionsOutput() AccessRestrictionsOutput
	ToAccessRestrictionsOutputWithContext(context.Context) AccessRestrictionsOutput
}

// Access related restrictions on the workforce pool.
type AccessRestrictionsArgs struct {
	// Optional. Immutable. Services allowed for web sign-in with the workforce pool. If not set by default there are no restrictions.
	AllowedServices ServiceConfigArrayInput `pulumi:"allowedServices"`
	// Optional. Disable programmatic sign-in by disabling token issue via the Security Token API endpoint. See [Security Token Service API] (https://cloud.google.com/iam/docs/reference/sts/rest).
	DisableProgrammaticSignin pulumi.BoolPtrInput `pulumi:"disableProgrammaticSignin"`
}

func (AccessRestrictionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessRestrictions)(nil)).Elem()
}

func (i AccessRestrictionsArgs) ToAccessRestrictionsOutput() AccessRestrictionsOutput {
	return i.ToAccessRestrictionsOutputWithContext(context.Background())
}

func (i AccessRestrictionsArgs) ToAccessRestrictionsOutputWithContext(ctx context.Context) AccessRestrictionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessRestrictionsOutput)
}

func (i AccessRestrictionsArgs) ToOutput(ctx context.Context) pulumix.Output[AccessRestrictions] {
	return pulumix.Output[AccessRestrictions]{
		OutputState: i.ToAccessRestrictionsOutputWithContext(ctx).OutputState,
	}
}

func (i AccessRestrictionsArgs) ToAccessRestrictionsPtrOutput() AccessRestrictionsPtrOutput {
	return i.ToAccessRestrictionsPtrOutputWithContext(context.Background())
}

func (i AccessRestrictionsArgs) ToAccessRestrictionsPtrOutputWithContext(ctx context.Context) AccessRestrictionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessRestrictionsOutput).ToAccessRestrictionsPtrOutputWithContext(ctx)
}

// AccessRestrictionsPtrInput is an input type that accepts AccessRestrictionsArgs, AccessRestrictionsPtr and AccessRestrictionsPtrOutput values.
// You can construct a concrete instance of `AccessRestrictionsPtrInput` via:
//
//	        AccessRestrictionsArgs{...}
//
//	or:
//
//	        nil
type AccessRestrictionsPtrInput interface {
	pulumi.Input

	ToAccessRestrictionsPtrOutput() AccessRestrictionsPtrOutput
	ToAccessRestrictionsPtrOutputWithContext(context.Context) AccessRestrictionsPtrOutput
}

type accessRestrictionsPtrType AccessRestrictionsArgs

func AccessRestrictionsPtr(v *AccessRestrictionsArgs) AccessRestrictionsPtrInput {
	return (*accessRestrictionsPtrType)(v)
}

func (*accessRestrictionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessRestrictions)(nil)).Elem()
}

func (i *accessRestrictionsPtrType) ToAccessRestrictionsPtrOutput() AccessRestrictionsPtrOutput {
	return i.ToAccessRestrictionsPtrOutputWithContext(context.Background())
}

func (i *accessRestrictionsPtrType) ToAccessRestrictionsPtrOutputWithContext(ctx context.Context) AccessRestrictionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessRestrictionsPtrOutput)
}

func (i *accessRestrictionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AccessRestrictions] {
	return pulumix.Output[*AccessRestrictions]{
		OutputState: i.ToAccessRestrictionsPtrOutputWithContext(ctx).OutputState,
	}
}

// Access related restrictions on the workforce pool.
type AccessRestrictionsOutput struct{ *pulumi.OutputState }

func (AccessRestrictionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessRestrictions)(nil)).Elem()
}

func (o AccessRestrictionsOutput) ToAccessRestrictionsOutput() AccessRestrictionsOutput {
	return o
}

func (o AccessRestrictionsOutput) ToAccessRestrictionsOutputWithContext(ctx context.Context) AccessRestrictionsOutput {
	return o
}

func (o AccessRestrictionsOutput) ToAccessRestrictionsPtrOutput() AccessRestrictionsPtrOutput {
	return o.ToAccessRestrictionsPtrOutputWithContext(context.Background())
}

func (o AccessRestrictionsOutput) ToAccessRestrictionsPtrOutputWithContext(ctx context.Context) AccessRestrictionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessRestrictions) *AccessRestrictions {
		return &v
	}).(AccessRestrictionsPtrOutput)
}

func (o AccessRestrictionsOutput) ToOutput(ctx context.Context) pulumix.Output[AccessRestrictions] {
	return pulumix.Output[AccessRestrictions]{
		OutputState: o.OutputState,
	}
}

// Optional. Immutable. Services allowed for web sign-in with the workforce pool. If not set by default there are no restrictions.
func (o AccessRestrictionsOutput) AllowedServices() ServiceConfigArrayOutput {
	return o.ApplyT(func(v AccessRestrictions) []ServiceConfig { return v.AllowedServices }).(ServiceConfigArrayOutput)
}

// Optional. Disable programmatic sign-in by disabling token issue via the Security Token API endpoint. See [Security Token Service API] (https://cloud.google.com/iam/docs/reference/sts/rest).
func (o AccessRestrictionsOutput) DisableProgrammaticSignin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessRestrictions) *bool { return v.DisableProgrammaticSignin }).(pulumi.BoolPtrOutput)
}

type AccessRestrictionsPtrOutput struct{ *pulumi.OutputState }

func (AccessRestrictionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessRestrictions)(nil)).Elem()
}

func (o AccessRestrictionsPtrOutput) ToAccessRestrictionsPtrOutput() AccessRestrictionsPtrOutput {
	return o
}

func (o AccessRestrictionsPtrOutput) ToAccessRestrictionsPtrOutputWithContext(ctx context.Context) AccessRestrictionsPtrOutput {
	return o
}

func (o AccessRestrictionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AccessRestrictions] {
	return pulumix.Output[*AccessRestrictions]{
		OutputState: o.OutputState,
	}
}

func (o AccessRestrictionsPtrOutput) Elem() AccessRestrictionsOutput {
	return o.ApplyT(func(v *AccessRestrictions) AccessRestrictions {
		if v != nil {
			return *v
		}
		var ret AccessRestrictions
		return ret
	}).(AccessRestrictionsOutput)
}

// Optional. Immutable. Services allowed for web sign-in with the workforce pool. If not set by default there are no restrictions.
func (o AccessRestrictionsPtrOutput) AllowedServices() ServiceConfigArrayOutput {
	return o.ApplyT(func(v *AccessRestrictions) []ServiceConfig {
		if v == nil {
			return nil
		}
		return v.AllowedServices
	}).(ServiceConfigArrayOutput)
}

// Optional. Disable programmatic sign-in by disabling token issue via the Security Token API endpoint. See [Security Token Service API] (https://cloud.google.com/iam/docs/reference/sts/rest).
func (o AccessRestrictionsPtrOutput) DisableProgrammaticSignin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessRestrictions) *bool {
		if v == nil {
			return nil
		}
		return v.DisableProgrammaticSignin
	}).(pulumi.BoolPtrOutput)
}

// Access related restrictions on the workforce pool.
type AccessRestrictionsResponse struct {
	// Optional. Immutable. Services allowed for web sign-in with the workforce pool. If not set by default there are no restrictions.
	AllowedServices []ServiceConfigResponse `pulumi:"allowedServices"`
	// Optional. Disable programmatic sign-in by disabling token issue via the Security Token API endpoint. See [Security Token Service API] (https://cloud.google.com/iam/docs/reference/sts/rest).
	DisableProgrammaticSignin bool `pulumi:"disableProgrammaticSignin"`
}

// Access related restrictions on the workforce pool.
type AccessRestrictionsResponseOutput struct{ *pulumi.OutputState }

func (AccessRestrictionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessRestrictionsResponse)(nil)).Elem()
}

func (o AccessRestrictionsResponseOutput) ToAccessRestrictionsResponseOutput() AccessRestrictionsResponseOutput {
	return o
}

func (o AccessRestrictionsResponseOutput) ToAccessRestrictionsResponseOutputWithContext(ctx context.Context) AccessRestrictionsResponseOutput {
	return o
}

func (o AccessRestrictionsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AccessRestrictionsResponse] {
	return pulumix.Output[AccessRestrictionsResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Immutable. Services allowed for web sign-in with the workforce pool. If not set by default there are no restrictions.
func (o AccessRestrictionsResponseOutput) AllowedServices() ServiceConfigResponseArrayOutput {
	return o.ApplyT(func(v AccessRestrictionsResponse) []ServiceConfigResponse { return v.AllowedServices }).(ServiceConfigResponseArrayOutput)
}

// Optional. Disable programmatic sign-in by disabling token issue via the Security Token API endpoint. See [Security Token Service API] (https://cloud.google.com/iam/docs/reference/sts/rest).
func (o AccessRestrictionsResponseOutput) DisableProgrammaticSignin() pulumi.BoolOutput {
	return o.ApplyT(func(v AccessRestrictionsResponse) bool { return v.DisableProgrammaticSignin }).(pulumi.BoolOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

func (i AuditConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuditConfig] {
	return pulumix.Output[AuditConfig]{
		OutputState: i.ToAuditConfigOutputWithContext(ctx).OutputState,
	}
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

func (i AuditConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfig] {
	return pulumix.Output[[]AuditConfig]{
		OutputState: i.ToAuditConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuditConfig] {
	return pulumix.Output[AuditConfig]{
		OutputState: o.OutputState,
	}
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfig] {
	return pulumix.Output[[]AuditConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuditConfigResponse] {
	return pulumix.Output[AuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfigResponse] {
	return pulumix.Output[[]AuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

func (i AuditLogConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfig] {
	return pulumix.Output[AuditLogConfig]{
		OutputState: i.ToAuditLogConfigOutputWithContext(ctx).OutputState,
	}
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

func (i AuditLogConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfig] {
	return pulumix.Output[[]AuditLogConfig]{
		OutputState: i.ToAuditLogConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfig] {
	return pulumix.Output[AuditLogConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfig] {
	return pulumix.Output[[]AuditLogConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfigResponse] {
	return pulumix.Output[AuditLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfigResponse] {
	return pulumix.Output[[]AuditLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Represents an Amazon Web Services identity provider.
type Aws struct {
	// The AWS account ID.
	AccountId string `pulumi:"accountId"`
}

// AwsInput is an input type that accepts AwsArgs and AwsOutput values.
// You can construct a concrete instance of `AwsInput` via:
//
//	AwsArgs{...}
type AwsInput interface {
	pulumi.Input

	ToAwsOutput() AwsOutput
	ToAwsOutputWithContext(context.Context) AwsOutput
}

// Represents an Amazon Web Services identity provider.
type AwsArgs struct {
	// The AWS account ID.
	AccountId pulumi.StringInput `pulumi:"accountId"`
}

func (AwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Aws)(nil)).Elem()
}

func (i AwsArgs) ToAwsOutput() AwsOutput {
	return i.ToAwsOutputWithContext(context.Background())
}

func (i AwsArgs) ToAwsOutputWithContext(ctx context.Context) AwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsOutput)
}

func (i AwsArgs) ToOutput(ctx context.Context) pulumix.Output[Aws] {
	return pulumix.Output[Aws]{
		OutputState: i.ToAwsOutputWithContext(ctx).OutputState,
	}
}

func (i AwsArgs) ToAwsPtrOutput() AwsPtrOutput {
	return i.ToAwsPtrOutputWithContext(context.Background())
}

func (i AwsArgs) ToAwsPtrOutputWithContext(ctx context.Context) AwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsOutput).ToAwsPtrOutputWithContext(ctx)
}

// AwsPtrInput is an input type that accepts AwsArgs, AwsPtr and AwsPtrOutput values.
// You can construct a concrete instance of `AwsPtrInput` via:
//
//	        AwsArgs{...}
//
//	or:
//
//	        nil
type AwsPtrInput interface {
	pulumi.Input

	ToAwsPtrOutput() AwsPtrOutput
	ToAwsPtrOutputWithContext(context.Context) AwsPtrOutput
}

type awsPtrType AwsArgs

func AwsPtr(v *AwsArgs) AwsPtrInput {
	return (*awsPtrType)(v)
}

func (*awsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Aws)(nil)).Elem()
}

func (i *awsPtrType) ToAwsPtrOutput() AwsPtrOutput {
	return i.ToAwsPtrOutputWithContext(context.Background())
}

func (i *awsPtrType) ToAwsPtrOutputWithContext(ctx context.Context) AwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsPtrOutput)
}

func (i *awsPtrType) ToOutput(ctx context.Context) pulumix.Output[*Aws] {
	return pulumix.Output[*Aws]{
		OutputState: i.ToAwsPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents an Amazon Web Services identity provider.
type AwsOutput struct{ *pulumi.OutputState }

func (AwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Aws)(nil)).Elem()
}

func (o AwsOutput) ToAwsOutput() AwsOutput {
	return o
}

func (o AwsOutput) ToAwsOutputWithContext(ctx context.Context) AwsOutput {
	return o
}

func (o AwsOutput) ToAwsPtrOutput() AwsPtrOutput {
	return o.ToAwsPtrOutputWithContext(context.Background())
}

func (o AwsOutput) ToAwsPtrOutputWithContext(ctx context.Context) AwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Aws) *Aws {
		return &v
	}).(AwsPtrOutput)
}

func (o AwsOutput) ToOutput(ctx context.Context) pulumix.Output[Aws] {
	return pulumix.Output[Aws]{
		OutputState: o.OutputState,
	}
}

// The AWS account ID.
func (o AwsOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v Aws) string { return v.AccountId }).(pulumi.StringOutput)
}

type AwsPtrOutput struct{ *pulumi.OutputState }

func (AwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Aws)(nil)).Elem()
}

func (o AwsPtrOutput) ToAwsPtrOutput() AwsPtrOutput {
	return o
}

func (o AwsPtrOutput) ToAwsPtrOutputWithContext(ctx context.Context) AwsPtrOutput {
	return o
}

func (o AwsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Aws] {
	return pulumix.Output[*Aws]{
		OutputState: o.OutputState,
	}
}

func (o AwsPtrOutput) Elem() AwsOutput {
	return o.ApplyT(func(v *Aws) Aws {
		if v != nil {
			return *v
		}
		var ret Aws
		return ret
	}).(AwsOutput)
}

// The AWS account ID.
func (o AwsPtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aws) *string {
		if v == nil {
			return nil
		}
		return &v.AccountId
	}).(pulumi.StringPtrOutput)
}

// Represents an Amazon Web Services identity provider.
type AwsResponse struct {
	// The AWS account ID.
	AccountId string `pulumi:"accountId"`
}

// Represents an Amazon Web Services identity provider.
type AwsResponseOutput struct{ *pulumi.OutputState }

func (AwsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsResponse)(nil)).Elem()
}

func (o AwsResponseOutput) ToAwsResponseOutput() AwsResponseOutput {
	return o
}

func (o AwsResponseOutput) ToAwsResponseOutputWithContext(ctx context.Context) AwsResponseOutput {
	return o
}

func (o AwsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AwsResponse] {
	return pulumix.Output[AwsResponse]{
		OutputState: o.OutputState,
	}
}

// The AWS account ID.
func (o AwsResponseOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AwsResponse) string { return v.AccountId }).(pulumi.StringOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

func (i BindingArgs) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: i.ToBindingOutputWithContext(ctx).OutputState,
	}
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

func (i BindingArray) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: i.ToBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

func (o BindingOutput) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: o.OutputState,
	}
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BindingResponse] {
	return pulumix.Output[BindingResponse]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BindingResponse] {
	return pulumix.Output[[]BindingResponse]{
		OutputState: o.OutputState,
	}
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// An IAM Condition for a given binding. See https://cloud.google.com/iam/docs/conditions-overview for additional details.
type Condition struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g., when hovering over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title string `pulumi:"title"`
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//	ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// An IAM Condition for a given binding. See https://cloud.google.com/iam/docs/conditions-overview for additional details.
type ConditionArgs struct {
	// An optional description of the expression. This is a longer text which describes the expression, e.g., when hovering over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// A title for the expression, i.e. a short string describing its purpose.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

func (i ConditionArgs) ToOutput(ctx context.Context) pulumix.Output[Condition] {
	return pulumix.Output[Condition]{
		OutputState: i.ToConditionOutputWithContext(ctx).OutputState,
	}
}

func (i ConditionArgs) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput).ToConditionPtrOutputWithContext(ctx)
}

// ConditionPtrInput is an input type that accepts ConditionArgs, ConditionPtr and ConditionPtrOutput values.
// You can construct a concrete instance of `ConditionPtrInput` via:
//
//	        ConditionArgs{...}
//
//	or:
//
//	        nil
type ConditionPtrInput interface {
	pulumi.Input

	ToConditionPtrOutput() ConditionPtrOutput
	ToConditionPtrOutputWithContext(context.Context) ConditionPtrOutput
}

type conditionPtrType ConditionArgs

func ConditionPtr(v *ConditionArgs) ConditionPtrInput {
	return (*conditionPtrType)(v)
}

func (*conditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (i *conditionPtrType) ToConditionPtrOutput() ConditionPtrOutput {
	return i.ToConditionPtrOutputWithContext(context.Background())
}

func (i *conditionPtrType) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionPtrOutput)
}

func (i *conditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*Condition] {
	return pulumix.Output[*Condition]{
		OutputState: i.ToConditionPtrOutputWithContext(ctx).OutputState,
	}
}

// An IAM Condition for a given binding. See https://cloud.google.com/iam/docs/conditions-overview for additional details.
type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionPtrOutput() ConditionPtrOutput {
	return o.ToConditionPtrOutputWithContext(context.Background())
}

func (o ConditionOutput) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Condition) *Condition {
		return &v
	}).(ConditionPtrOutput)
}

func (o ConditionOutput) ToOutput(ctx context.Context) pulumix.Output[Condition] {
	return pulumix.Output[Condition]{
		OutputState: o.OutputState,
	}
}

// An optional description of the expression. This is a longer text which describes the expression, e.g., when hovering over it in a UI.
func (o ConditionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ConditionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v Condition) string { return v.Expression }).(pulumi.StringOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o ConditionOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v Condition) string { return v.Title }).(pulumi.StringOutput)
}

type ConditionPtrOutput struct{ *pulumi.OutputState }

func (ConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Condition)(nil)).Elem()
}

func (o ConditionPtrOutput) ToConditionPtrOutput() ConditionPtrOutput {
	return o
}

func (o ConditionPtrOutput) ToConditionPtrOutputWithContext(ctx context.Context) ConditionPtrOutput {
	return o
}

func (o ConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Condition] {
	return pulumix.Output[*Condition]{
		OutputState: o.OutputState,
	}
}

func (o ConditionPtrOutput) Elem() ConditionOutput {
	return o.ApplyT(func(v *Condition) Condition {
		if v != nil {
			return *v
		}
		var ret Condition
		return ret
	}).(ConditionOutput)
}

// An optional description of the expression. This is a longer text which describes the expression, e.g., when hovering over it in a UI.
func (o ConditionPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ConditionPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// A title for the expression, i.e. a short string describing its purpose.
func (o ConditionPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Condition) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: i.ToExprOutputWithContext(ctx).OutputState,
	}
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

func (i *exprPtrType) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: i.ToExprPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

func (o ExprOutput) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: o.OutputState,
	}
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExprResponse] {
	return pulumix.Output[ExprResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Represents an OpenId Connect 1.0 identity provider.
type GoogleIamAdminV1WorkforcePoolProviderOidc struct {
	// The client ID. Must match the audience claim of the JWT issued by the identity provider.
	ClientId string `pulumi:"clientId"`
	// The optional client secret. Required to enable Authorization Code flow for web sign-in.
	ClientSecret *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret `pulumi:"clientSecret"`
	// The OIDC issuer URI. Must be a valid URI using the 'https' scheme.
	IssuerUri string `pulumi:"issuerUri"`
	// OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
	JwksJson *string `pulumi:"jwksJson"`
	// Configuration for web single sign-on for the OIDC provider. Here, web sign-in refers to console sign-in and gcloud sign-in through the browser.
	WebSsoConfig GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig `pulumi:"webSsoConfig"`
}

// GoogleIamAdminV1WorkforcePoolProviderOidcInput is an input type that accepts GoogleIamAdminV1WorkforcePoolProviderOidcArgs and GoogleIamAdminV1WorkforcePoolProviderOidcOutput values.
// You can construct a concrete instance of `GoogleIamAdminV1WorkforcePoolProviderOidcInput` via:
//
//	GoogleIamAdminV1WorkforcePoolProviderOidcArgs{...}
type GoogleIamAdminV1WorkforcePoolProviderOidcInput interface {
	pulumi.Input

	ToGoogleIamAdminV1WorkforcePoolProviderOidcOutput() GoogleIamAdminV1WorkforcePoolProviderOidcOutput
	ToGoogleIamAdminV1WorkforcePoolProviderOidcOutputWithContext(context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcOutput
}

// Represents an OpenId Connect 1.0 identity provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcArgs struct {
	// The client ID. Must match the audience claim of the JWT issued by the identity provider.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The optional client secret. Required to enable Authorization Code flow for web sign-in.
	ClientSecret GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrInput `pulumi:"clientSecret"`
	// The OIDC issuer URI. Must be a valid URI using the 'https' scheme.
	IssuerUri pulumi.StringInput `pulumi:"issuerUri"`
	// OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
	JwksJson pulumi.StringPtrInput `pulumi:"jwksJson"`
	// Configuration for web single sign-on for the OIDC provider. Here, web sign-in refers to console sign-in and gcloud sign-in through the browser.
	WebSsoConfig GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigInput `pulumi:"webSsoConfig"`
}

func (GoogleIamAdminV1WorkforcePoolProviderOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidc)(nil)).Elem()
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcOutput() GoogleIamAdminV1WorkforcePoolProviderOidcOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcOutputWithContext(context.Background())
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcOutput)
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidc] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidc]{
		OutputState: i.ToGoogleIamAdminV1WorkforcePoolProviderOidcOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutputWithContext(context.Background())
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcOutput).ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutputWithContext(ctx)
}

// GoogleIamAdminV1WorkforcePoolProviderOidcPtrInput is an input type that accepts GoogleIamAdminV1WorkforcePoolProviderOidcArgs, GoogleIamAdminV1WorkforcePoolProviderOidcPtr and GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput values.
// You can construct a concrete instance of `GoogleIamAdminV1WorkforcePoolProviderOidcPtrInput` via:
//
//	        GoogleIamAdminV1WorkforcePoolProviderOidcArgs{...}
//
//	or:
//
//	        nil
type GoogleIamAdminV1WorkforcePoolProviderOidcPtrInput interface {
	pulumi.Input

	ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput
	ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutputWithContext(context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput
}

type googleIamAdminV1WorkforcePoolProviderOidcPtrType GoogleIamAdminV1WorkforcePoolProviderOidcArgs

func GoogleIamAdminV1WorkforcePoolProviderOidcPtr(v *GoogleIamAdminV1WorkforcePoolProviderOidcArgs) GoogleIamAdminV1WorkforcePoolProviderOidcPtrInput {
	return (*googleIamAdminV1WorkforcePoolProviderOidcPtrType)(v)
}

func (*googleIamAdminV1WorkforcePoolProviderOidcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleIamAdminV1WorkforcePoolProviderOidc)(nil)).Elem()
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcPtrType) ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutputWithContext(context.Background())
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcPtrType) ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput)
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidc] {
	return pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidc]{
		OutputState: i.ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents an OpenId Connect 1.0 identity provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidc)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcOutput() GoogleIamAdminV1WorkforcePoolProviderOidcOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput {
	return o.ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutputWithContext(context.Background())
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleIamAdminV1WorkforcePoolProviderOidc) *GoogleIamAdminV1WorkforcePoolProviderOidc {
		return &v
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput)
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidc] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidc]{
		OutputState: o.OutputState,
	}
}

// The client ID. Must match the audience claim of the JWT issued by the identity provider.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidc) string { return v.ClientId }).(pulumi.StringOutput)
}

// The optional client secret. Required to enable Authorization Code flow for web sign-in.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcOutput) ClientSecret() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidc) *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret {
		return v.ClientSecret
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput)
}

// The OIDC issuer URI. Must be a valid URI using the 'https' scheme.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcOutput) IssuerUri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidc) string { return v.IssuerUri }).(pulumi.StringOutput)
}

// OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
func (o GoogleIamAdminV1WorkforcePoolProviderOidcOutput) JwksJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidc) *string { return v.JwksJson }).(pulumi.StringPtrOutput)
}

// Configuration for web single sign-on for the OIDC provider. Here, web sign-in refers to console sign-in and gcloud sign-in through the browser.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcOutput) WebSsoConfig() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidc) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig {
		return v.WebSsoConfig
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput)
}

type GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleIamAdminV1WorkforcePoolProviderOidc)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidc] {
	return pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidc]{
		OutputState: o.OutputState,
	}
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput) Elem() GoogleIamAdminV1WorkforcePoolProviderOidcOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidc) GoogleIamAdminV1WorkforcePoolProviderOidc {
		if v != nil {
			return *v
		}
		var ret GoogleIamAdminV1WorkforcePoolProviderOidc
		return ret
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcOutput)
}

// The client ID. Must match the audience claim of the JWT issued by the identity provider.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidc) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The optional client secret. Required to enable Authorization Code flow for web sign-in.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput) ClientSecret() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidc) *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput)
}

// The OIDC issuer URI. Must be a valid URI using the 'https' scheme.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput) IssuerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidc) *string {
		if v == nil {
			return nil
		}
		return &v.IssuerUri
	}).(pulumi.StringPtrOutput)
}

// OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
func (o GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput) JwksJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidc) *string {
		if v == nil {
			return nil
		}
		return v.JwksJson
	}).(pulumi.StringPtrOutput)
}

// Configuration for web single sign-on for the OIDC provider. Here, web sign-in refers to console sign-in and gcloud sign-in through the browser.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput) WebSsoConfig() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidc) *GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig {
		if v == nil {
			return nil
		}
		return &v.WebSsoConfig
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput)
}

// Representation of a client secret configured for the OIDC provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret struct {
	// The value of the client secret.
	Value *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue `pulumi:"value"`
}

// GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretInput is an input type that accepts GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs and GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput values.
// You can construct a concrete instance of `GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretInput` via:
//
//	GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs{...}
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretInput interface {
	pulumi.Input

	ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput
	ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutputWithContext(context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput
}

// Representation of a client secret configured for the OIDC provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs struct {
	// The value of the client secret.
	Value GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrInput `pulumi:"value"`
}

func (GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret)(nil)).Elem()
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutputWithContext(context.Background())
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput)
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret]{
		OutputState: i.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutputWithContext(context.Background())
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput).ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutputWithContext(ctx)
}

// GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrInput is an input type that accepts GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs, GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtr and GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput values.
// You can construct a concrete instance of `GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrInput` via:
//
//	        GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs{...}
//
//	or:
//
//	        nil
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrInput interface {
	pulumi.Input

	ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput
	ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutputWithContext(context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput
}

type googleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrType GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs

func GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtr(v *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrInput {
	return (*googleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrType)(v)
}

func (*googleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret)(nil)).Elem()
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrType) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutputWithContext(context.Background())
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrType) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput)
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret] {
	return pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret]{
		OutputState: i.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutputWithContext(ctx).OutputState,
	}
}

// Representation of a client secret configured for the OIDC provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput {
	return o.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutputWithContext(context.Background())
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret) *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret {
		return &v
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput)
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret]{
		OutputState: o.OutputState,
	}
}

// The value of the client secret.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput) Value() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret) *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue {
		return v.Value
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput)
}

type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret] {
	return pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret]{
		OutputState: o.OutputState,
	}
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput) Elem() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret {
		if v != nil {
			return *v
		}
		var ret GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret
		return ret
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput)
}

// The value of the client secret.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput) Value() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret) *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue {
		if v == nil {
			return nil
		}
		return v.Value
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput)
}

// Representation of a client secret configured for the OIDC provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse struct {
	// The value of the client secret.
	Value GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse `pulumi:"value"`
}

// Representation of a client secret configured for the OIDC provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse]{
		OutputState: o.OutputState,
	}
}

// The value of the client secret.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput) Value() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse {
		return v.Value
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput)
}

// Representation of the value of the client secret.
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue struct {
	// Input only. The plain text of the client secret value. For security reasons, this field is only used for input and will never be populated in any response.
	PlainText *string `pulumi:"plainText"`
}

// GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueInput is an input type that accepts GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs and GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput values.
// You can construct a concrete instance of `GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueInput` via:
//
//	GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs{...}
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueInput interface {
	pulumi.Input

	ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput
	ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutputWithContext(context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput
}

// Representation of the value of the client secret.
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs struct {
	// Input only. The plain text of the client secret value. For security reasons, this field is only used for input and will never be populated in any response.
	PlainText pulumi.StringPtrInput `pulumi:"plainText"`
}

func (GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue)(nil)).Elem()
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutputWithContext(context.Background())
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput)
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue]{
		OutputState: i.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutputWithContext(context.Background())
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput).ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutputWithContext(ctx)
}

// GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrInput is an input type that accepts GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs, GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtr and GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput values.
// You can construct a concrete instance of `GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrInput` via:
//
//	        GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs{...}
//
//	or:
//
//	        nil
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrInput interface {
	pulumi.Input

	ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput
	ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutputWithContext(context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput
}

type googleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrType GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs

func GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtr(v *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrInput {
	return (*googleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrType)(v)
}

func (*googleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue)(nil)).Elem()
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrType) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutputWithContext(context.Background())
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrType) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput)
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue] {
	return pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue]{
		OutputState: i.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutputWithContext(ctx).OutputState,
	}
}

// Representation of the value of the client secret.
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput {
	return o.ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutputWithContext(context.Background())
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue) *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue {
		return &v
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput)
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue]{
		OutputState: o.OutputState,
	}
}

// Input only. The plain text of the client secret value. For security reasons, this field is only used for input and will never be populated in any response.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue) *string { return v.PlainText }).(pulumi.StringPtrOutput)
}

type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue] {
	return pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue]{
		OutputState: o.OutputState,
	}
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput) Elem() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue {
		if v != nil {
			return *v
		}
		var ret GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue
		return ret
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput)
}

// Input only. The plain text of the client secret value. For security reasons, this field is only used for input and will never be populated in any response.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput) PlainText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValue) *string {
		if v == nil {
			return nil
		}
		return v.PlainText
	}).(pulumi.StringPtrOutput)
}

// Representation of the value of the client secret.
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse struct {
	// Input only. The plain text of the client secret value. For security reasons, this field is only used for input and will never be populated in any response.
	PlainText string `pulumi:"plainText"`
	// A thumbprint to represent the current client secret value.
	Thumbprint string `pulumi:"thumbprint"`
}

// Representation of the value of the client secret.
type GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse]{
		OutputState: o.OutputState,
	}
}

// Input only. The plain text of the client secret value. For security reasons, this field is only used for input and will never be populated in any response.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput) PlainText() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse) string { return v.PlainText }).(pulumi.StringOutput)
}

// A thumbprint to represent the current client secret value.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponse) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Represents an OpenId Connect 1.0 identity provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcResponse struct {
	// The client ID. Must match the audience claim of the JWT issued by the identity provider.
	ClientId string `pulumi:"clientId"`
	// The optional client secret. Required to enable Authorization Code flow for web sign-in.
	ClientSecret GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse `pulumi:"clientSecret"`
	// The OIDC issuer URI. Must be a valid URI using the 'https' scheme.
	IssuerUri string `pulumi:"issuerUri"`
	// OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
	JwksJson string `pulumi:"jwksJson"`
	// Configuration for web single sign-on for the OIDC provider. Here, web sign-in refers to console sign-in and gcloud sign-in through the browser.
	WebSsoConfig GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse `pulumi:"webSsoConfig"`
}

// Represents an OpenId Connect 1.0 identity provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcResponse)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput() GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcResponseOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcResponse] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcResponse]{
		OutputState: o.OutputState,
	}
}

// The client ID. Must match the audience claim of the JWT issued by the identity provider.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The optional client secret. Required to enable Authorization Code flow for web sign-in.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput) ClientSecret() GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcResponse) GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponse {
		return v.ClientSecret
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput)
}

// The OIDC issuer URI. Must be a valid URI using the 'https' scheme.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput) IssuerUri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcResponse) string { return v.IssuerUri }).(pulumi.StringOutput)
}

// OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
func (o GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput) JwksJson() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcResponse) string { return v.JwksJson }).(pulumi.StringOutput)
}

// Configuration for web single sign-on for the OIDC provider. Here, web sign-in refers to console sign-in and gcloud sign-in through the browser.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput) WebSsoConfig() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcResponse) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse {
		return v.WebSsoConfig
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput)
}

// Configuration for web single sign-on for the OIDC provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig struct {
	// Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested. Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.
	AdditionalScopes []string `pulumi:"additionalScopes"`
	// The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
	AssertionClaimsBehavior GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehavior `pulumi:"assertionClaimsBehavior"`
	// The Response Type to request for in the OIDC Authorization Request for web sign-in. The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
	ResponseType GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseType `pulumi:"responseType"`
}

// GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigInput is an input type that accepts GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs and GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput values.
// You can construct a concrete instance of `GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigInput` via:
//
//	GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs{...}
type GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigInput interface {
	pulumi.Input

	ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput
	ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutputWithContext(context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput
}

// Configuration for web single sign-on for the OIDC provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs struct {
	// Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested. Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.
	AdditionalScopes pulumi.StringArrayInput `pulumi:"additionalScopes"`
	// The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
	AssertionClaimsBehavior GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehaviorInput `pulumi:"assertionClaimsBehavior"`
	// The Response Type to request for in the OIDC Authorization Request for web sign-in. The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
	ResponseType GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseTypeInput `pulumi:"responseType"`
}

func (GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig)(nil)).Elem()
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutputWithContext(context.Background())
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput)
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig]{
		OutputState: i.ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutputWithContext(context.Background())
}

func (i GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput).ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutputWithContext(ctx)
}

// GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrInput is an input type that accepts GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs, GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtr and GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput values.
// You can construct a concrete instance of `GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrInput` via:
//
//	        GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs{...}
//
//	or:
//
//	        nil
type GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrInput interface {
	pulumi.Input

	ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput
	ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutputWithContext(context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput
}

type googleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrType GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs

func GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtr(v *GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrInput {
	return (*googleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrType)(v)
}

func (*googleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig)(nil)).Elem()
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrType) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutputWithContext(context.Background())
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrType) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput)
}

func (i *googleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig] {
	return pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig]{
		OutputState: i.ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration for web single sign-on for the OIDC provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput {
	return o.ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutputWithContext(context.Background())
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig) *GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig {
		return &v
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput)
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig]{
		OutputState: o.OutputState,
	}
}

// Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested. Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput) AdditionalScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig) []string { return v.AdditionalScopes }).(pulumi.StringArrayOutput)
}

// The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput) AssertionClaimsBehavior() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehaviorOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehavior {
		return v.AssertionClaimsBehavior
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehaviorOutput)
}

// The Response Type to request for in the OIDC Authorization Request for web sign-in. The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput) ResponseType() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseTypeOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseType {
		return v.ResponseType
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseTypeOutput)
}

type GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig] {
	return pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig]{
		OutputState: o.OutputState,
	}
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput) Elem() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig {
		if v != nil {
			return *v
		}
		var ret GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig
		return ret
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput)
}

// Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested. Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput) AdditionalScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalScopes
	}).(pulumi.StringArrayOutput)
}

// The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput) AssertionClaimsBehavior() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehaviorPtrOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig) *GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehavior {
		if v == nil {
			return nil
		}
		return &v.AssertionClaimsBehavior
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehaviorPtrOutput)
}

// The Response Type to request for in the OIDC Authorization Request for web sign-in. The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput) ResponseType() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseTypePtrOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig) *GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseType {
		if v == nil {
			return nil
		}
		return &v.ResponseType
	}).(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseTypePtrOutput)
}

// Configuration for web single sign-on for the OIDC provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse struct {
	// Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested. Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.
	AdditionalScopes []string `pulumi:"additionalScopes"`
	// The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
	AssertionClaimsBehavior string `pulumi:"assertionClaimsBehavior"`
	// The Response Type to request for in the OIDC Authorization Request for web sign-in. The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
	ResponseType string `pulumi:"responseType"`
}

// Configuration for web single sign-on for the OIDC provider.
type GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput() GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput) ToGoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested. Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput) AdditionalScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse) []string {
		return v.AdditionalScopes
	}).(pulumi.StringArrayOutput)
}

// The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput) AssertionClaimsBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse) string {
		return v.AssertionClaimsBehavior
	}).(pulumi.StringOutput)
}

// The Response Type to request for in the OIDC Authorization Request for web sign-in. The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.
func (o GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput) ResponseType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponse) string { return v.ResponseType }).(pulumi.StringOutput)
}

// Represents a SAML identity provider.
type GoogleIamAdminV1WorkforcePoolProviderSaml struct {
	// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Up to 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at least one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata.
	IdpMetadataXml string `pulumi:"idpMetadataXml"`
}

// GoogleIamAdminV1WorkforcePoolProviderSamlInput is an input type that accepts GoogleIamAdminV1WorkforcePoolProviderSamlArgs and GoogleIamAdminV1WorkforcePoolProviderSamlOutput values.
// You can construct a concrete instance of `GoogleIamAdminV1WorkforcePoolProviderSamlInput` via:
//
//	GoogleIamAdminV1WorkforcePoolProviderSamlArgs{...}
type GoogleIamAdminV1WorkforcePoolProviderSamlInput interface {
	pulumi.Input

	ToGoogleIamAdminV1WorkforcePoolProviderSamlOutput() GoogleIamAdminV1WorkforcePoolProviderSamlOutput
	ToGoogleIamAdminV1WorkforcePoolProviderSamlOutputWithContext(context.Context) GoogleIamAdminV1WorkforcePoolProviderSamlOutput
}

// Represents a SAML identity provider.
type GoogleIamAdminV1WorkforcePoolProviderSamlArgs struct {
	// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Up to 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at least one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata.
	IdpMetadataXml pulumi.StringInput `pulumi:"idpMetadataXml"`
}

func (GoogleIamAdminV1WorkforcePoolProviderSamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderSaml)(nil)).Elem()
}

func (i GoogleIamAdminV1WorkforcePoolProviderSamlArgs) ToGoogleIamAdminV1WorkforcePoolProviderSamlOutput() GoogleIamAdminV1WorkforcePoolProviderSamlOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderSamlOutputWithContext(context.Background())
}

func (i GoogleIamAdminV1WorkforcePoolProviderSamlArgs) ToGoogleIamAdminV1WorkforcePoolProviderSamlOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderSamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderSamlOutput)
}

func (i GoogleIamAdminV1WorkforcePoolProviderSamlArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderSaml] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderSaml]{
		OutputState: i.ToGoogleIamAdminV1WorkforcePoolProviderSamlOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleIamAdminV1WorkforcePoolProviderSamlArgs) ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput() GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutputWithContext(context.Background())
}

func (i GoogleIamAdminV1WorkforcePoolProviderSamlArgs) ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderSamlOutput).ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutputWithContext(ctx)
}

// GoogleIamAdminV1WorkforcePoolProviderSamlPtrInput is an input type that accepts GoogleIamAdminV1WorkforcePoolProviderSamlArgs, GoogleIamAdminV1WorkforcePoolProviderSamlPtr and GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput values.
// You can construct a concrete instance of `GoogleIamAdminV1WorkforcePoolProviderSamlPtrInput` via:
//
//	        GoogleIamAdminV1WorkforcePoolProviderSamlArgs{...}
//
//	or:
//
//	        nil
type GoogleIamAdminV1WorkforcePoolProviderSamlPtrInput interface {
	pulumi.Input

	ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput() GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput
	ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutputWithContext(context.Context) GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput
}

type googleIamAdminV1WorkforcePoolProviderSamlPtrType GoogleIamAdminV1WorkforcePoolProviderSamlArgs

func GoogleIamAdminV1WorkforcePoolProviderSamlPtr(v *GoogleIamAdminV1WorkforcePoolProviderSamlArgs) GoogleIamAdminV1WorkforcePoolProviderSamlPtrInput {
	return (*googleIamAdminV1WorkforcePoolProviderSamlPtrType)(v)
}

func (*googleIamAdminV1WorkforcePoolProviderSamlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleIamAdminV1WorkforcePoolProviderSaml)(nil)).Elem()
}

func (i *googleIamAdminV1WorkforcePoolProviderSamlPtrType) ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput() GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput {
	return i.ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutputWithContext(context.Background())
}

func (i *googleIamAdminV1WorkforcePoolProviderSamlPtrType) ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput)
}

func (i *googleIamAdminV1WorkforcePoolProviderSamlPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderSaml] {
	return pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderSaml]{
		OutputState: i.ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a SAML identity provider.
type GoogleIamAdminV1WorkforcePoolProviderSamlOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderSamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderSaml)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlOutput) ToGoogleIamAdminV1WorkforcePoolProviderSamlOutput() GoogleIamAdminV1WorkforcePoolProviderSamlOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlOutput) ToGoogleIamAdminV1WorkforcePoolProviderSamlOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderSamlOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlOutput) ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput() GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput {
	return o.ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutputWithContext(context.Background())
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlOutput) ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleIamAdminV1WorkforcePoolProviderSaml) *GoogleIamAdminV1WorkforcePoolProviderSaml {
		return &v
	}).(GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput)
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderSaml] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderSaml]{
		OutputState: o.OutputState,
	}
}

// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Up to 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at least one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata.
func (o GoogleIamAdminV1WorkforcePoolProviderSamlOutput) IdpMetadataXml() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderSaml) string { return v.IdpMetadataXml }).(pulumi.StringOutput)
}

type GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleIamAdminV1WorkforcePoolProviderSaml)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput) ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput() GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput) ToGoogleIamAdminV1WorkforcePoolProviderSamlPtrOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderSaml] {
	return pulumix.Output[*GoogleIamAdminV1WorkforcePoolProviderSaml]{
		OutputState: o.OutputState,
	}
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput) Elem() GoogleIamAdminV1WorkforcePoolProviderSamlOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderSaml) GoogleIamAdminV1WorkforcePoolProviderSaml {
		if v != nil {
			return *v
		}
		var ret GoogleIamAdminV1WorkforcePoolProviderSaml
		return ret
	}).(GoogleIamAdminV1WorkforcePoolProviderSamlOutput)
}

// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Up to 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at least one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata.
func (o GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput) IdpMetadataXml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleIamAdminV1WorkforcePoolProviderSaml) *string {
		if v == nil {
			return nil
		}
		return &v.IdpMetadataXml
	}).(pulumi.StringPtrOutput)
}

// Represents a SAML identity provider.
type GoogleIamAdminV1WorkforcePoolProviderSamlResponse struct {
	// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Up to 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at least one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata.
	IdpMetadataXml string `pulumi:"idpMetadataXml"`
}

// Represents a SAML identity provider.
type GoogleIamAdminV1WorkforcePoolProviderSamlResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamAdminV1WorkforcePoolProviderSamlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderSamlResponse)(nil)).Elem()
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlResponseOutput) ToGoogleIamAdminV1WorkforcePoolProviderSamlResponseOutput() GoogleIamAdminV1WorkforcePoolProviderSamlResponseOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlResponseOutput) ToGoogleIamAdminV1WorkforcePoolProviderSamlResponseOutputWithContext(ctx context.Context) GoogleIamAdminV1WorkforcePoolProviderSamlResponseOutput {
	return o
}

func (o GoogleIamAdminV1WorkforcePoolProviderSamlResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderSamlResponse] {
	return pulumix.Output[GoogleIamAdminV1WorkforcePoolProviderSamlResponse]{
		OutputState: o.OutputState,
	}
}

// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Up to 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at least one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata.
func (o GoogleIamAdminV1WorkforcePoolProviderSamlResponseOutput) IdpMetadataXml() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamAdminV1WorkforcePoolProviderSamlResponse) string { return v.IdpMetadataXml }).(pulumi.StringOutput)
}

// Represents a public key data along with its format.
type KeyData struct {
	// The specifications for the key.
	KeySpec KeyDataKeySpec `pulumi:"keySpec"`
}

// KeyDataInput is an input type that accepts KeyDataArgs and KeyDataOutput values.
// You can construct a concrete instance of `KeyDataInput` via:
//
//	KeyDataArgs{...}
type KeyDataInput interface {
	pulumi.Input

	ToKeyDataOutput() KeyDataOutput
	ToKeyDataOutputWithContext(context.Context) KeyDataOutput
}

// Represents a public key data along with its format.
type KeyDataArgs struct {
	// The specifications for the key.
	KeySpec KeyDataKeySpecInput `pulumi:"keySpec"`
}

func (KeyDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyData)(nil)).Elem()
}

func (i KeyDataArgs) ToKeyDataOutput() KeyDataOutput {
	return i.ToKeyDataOutputWithContext(context.Background())
}

func (i KeyDataArgs) ToKeyDataOutputWithContext(ctx context.Context) KeyDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyDataOutput)
}

func (i KeyDataArgs) ToOutput(ctx context.Context) pulumix.Output[KeyData] {
	return pulumix.Output[KeyData]{
		OutputState: i.ToKeyDataOutputWithContext(ctx).OutputState,
	}
}

func (i KeyDataArgs) ToKeyDataPtrOutput() KeyDataPtrOutput {
	return i.ToKeyDataPtrOutputWithContext(context.Background())
}

func (i KeyDataArgs) ToKeyDataPtrOutputWithContext(ctx context.Context) KeyDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyDataOutput).ToKeyDataPtrOutputWithContext(ctx)
}

// KeyDataPtrInput is an input type that accepts KeyDataArgs, KeyDataPtr and KeyDataPtrOutput values.
// You can construct a concrete instance of `KeyDataPtrInput` via:
//
//	        KeyDataArgs{...}
//
//	or:
//
//	        nil
type KeyDataPtrInput interface {
	pulumi.Input

	ToKeyDataPtrOutput() KeyDataPtrOutput
	ToKeyDataPtrOutputWithContext(context.Context) KeyDataPtrOutput
}

type keyDataPtrType KeyDataArgs

func KeyDataPtr(v *KeyDataArgs) KeyDataPtrInput {
	return (*keyDataPtrType)(v)
}

func (*keyDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyData)(nil)).Elem()
}

func (i *keyDataPtrType) ToKeyDataPtrOutput() KeyDataPtrOutput {
	return i.ToKeyDataPtrOutputWithContext(context.Background())
}

func (i *keyDataPtrType) ToKeyDataPtrOutputWithContext(ctx context.Context) KeyDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyDataPtrOutput)
}

func (i *keyDataPtrType) ToOutput(ctx context.Context) pulumix.Output[*KeyData] {
	return pulumix.Output[*KeyData]{
		OutputState: i.ToKeyDataPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a public key data along with its format.
type KeyDataOutput struct{ *pulumi.OutputState }

func (KeyDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyData)(nil)).Elem()
}

func (o KeyDataOutput) ToKeyDataOutput() KeyDataOutput {
	return o
}

func (o KeyDataOutput) ToKeyDataOutputWithContext(ctx context.Context) KeyDataOutput {
	return o
}

func (o KeyDataOutput) ToKeyDataPtrOutput() KeyDataPtrOutput {
	return o.ToKeyDataPtrOutputWithContext(context.Background())
}

func (o KeyDataOutput) ToKeyDataPtrOutputWithContext(ctx context.Context) KeyDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyData) *KeyData {
		return &v
	}).(KeyDataPtrOutput)
}

func (o KeyDataOutput) ToOutput(ctx context.Context) pulumix.Output[KeyData] {
	return pulumix.Output[KeyData]{
		OutputState: o.OutputState,
	}
}

// The specifications for the key.
func (o KeyDataOutput) KeySpec() KeyDataKeySpecOutput {
	return o.ApplyT(func(v KeyData) KeyDataKeySpec { return v.KeySpec }).(KeyDataKeySpecOutput)
}

type KeyDataPtrOutput struct{ *pulumi.OutputState }

func (KeyDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyData)(nil)).Elem()
}

func (o KeyDataPtrOutput) ToKeyDataPtrOutput() KeyDataPtrOutput {
	return o
}

func (o KeyDataPtrOutput) ToKeyDataPtrOutputWithContext(ctx context.Context) KeyDataPtrOutput {
	return o
}

func (o KeyDataPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KeyData] {
	return pulumix.Output[*KeyData]{
		OutputState: o.OutputState,
	}
}

func (o KeyDataPtrOutput) Elem() KeyDataOutput {
	return o.ApplyT(func(v *KeyData) KeyData {
		if v != nil {
			return *v
		}
		var ret KeyData
		return ret
	}).(KeyDataOutput)
}

// The specifications for the key.
func (o KeyDataPtrOutput) KeySpec() KeyDataKeySpecPtrOutput {
	return o.ApplyT(func(v *KeyData) *KeyDataKeySpec {
		if v == nil {
			return nil
		}
		return &v.KeySpec
	}).(KeyDataKeySpecPtrOutput)
}

// Represents a public key data along with its format.
type KeyDataResponse struct {
	// The format of the key.
	Format string `pulumi:"format"`
	// The key data. The format of the key is represented by the format field.
	Key string `pulumi:"key"`
	// The specifications for the key.
	KeySpec string `pulumi:"keySpec"`
	// Latest timestamp when this key is valid. Attempts to use this key after this time will fail. Only present if the key data represents a X.509 certificate.
	NotAfterTime string `pulumi:"notAfterTime"`
	// Earliest timestamp when this key is valid. Attempts to use this key before this time will fail. Only present if the key data represents a X.509 certificate.
	NotBeforeTime string `pulumi:"notBeforeTime"`
}

// Represents a public key data along with its format.
type KeyDataResponseOutput struct{ *pulumi.OutputState }

func (KeyDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyDataResponse)(nil)).Elem()
}

func (o KeyDataResponseOutput) ToKeyDataResponseOutput() KeyDataResponseOutput {
	return o
}

func (o KeyDataResponseOutput) ToKeyDataResponseOutputWithContext(ctx context.Context) KeyDataResponseOutput {
	return o
}

func (o KeyDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[KeyDataResponse] {
	return pulumix.Output[KeyDataResponse]{
		OutputState: o.OutputState,
	}
}

// The format of the key.
func (o KeyDataResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v KeyDataResponse) string { return v.Format }).(pulumi.StringOutput)
}

// The key data. The format of the key is represented by the format field.
func (o KeyDataResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KeyDataResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The specifications for the key.
func (o KeyDataResponseOutput) KeySpec() pulumi.StringOutput {
	return o.ApplyT(func(v KeyDataResponse) string { return v.KeySpec }).(pulumi.StringOutput)
}

// Latest timestamp when this key is valid. Attempts to use this key after this time will fail. Only present if the key data represents a X.509 certificate.
func (o KeyDataResponseOutput) NotAfterTime() pulumi.StringOutput {
	return o.ApplyT(func(v KeyDataResponse) string { return v.NotAfterTime }).(pulumi.StringOutput)
}

// Earliest timestamp when this key is valid. Attempts to use this key before this time will fail. Only present if the key data represents a X.509 certificate.
func (o KeyDataResponseOutput) NotBeforeTime() pulumi.StringOutput {
	return o.ApplyT(func(v KeyDataResponse) string { return v.NotBeforeTime }).(pulumi.StringOutput)
}

// Represents an OpenId Connect 1.0 identity provider.
type Oidc struct {
	// Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange requests are rejected if the token audience does not match one of the configured values. Each audience may be at most 256 characters. A maximum of 10 audiences may be configured. If this list is empty, the OIDC token audience must be equal to the full canonical resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix. For example: ```//iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ https://iam.googleapis.com/projects//locations//workloadIdentityPools//providers/```
	AllowedAudiences []string `pulumi:"allowedAudiences"`
	// The OIDC issuer URL. Must be an HTTPS endpoint.
	IssuerUri string `pulumi:"issuerUri"`
	// Optional. OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
	JwksJson *string `pulumi:"jwksJson"`
}

// OidcInput is an input type that accepts OidcArgs and OidcOutput values.
// You can construct a concrete instance of `OidcInput` via:
//
//	OidcArgs{...}
type OidcInput interface {
	pulumi.Input

	ToOidcOutput() OidcOutput
	ToOidcOutputWithContext(context.Context) OidcOutput
}

// Represents an OpenId Connect 1.0 identity provider.
type OidcArgs struct {
	// Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange requests are rejected if the token audience does not match one of the configured values. Each audience may be at most 256 characters. A maximum of 10 audiences may be configured. If this list is empty, the OIDC token audience must be equal to the full canonical resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix. For example: ```//iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ https://iam.googleapis.com/projects//locations//workloadIdentityPools//providers/```
	AllowedAudiences pulumi.StringArrayInput `pulumi:"allowedAudiences"`
	// The OIDC issuer URL. Must be an HTTPS endpoint.
	IssuerUri pulumi.StringInput `pulumi:"issuerUri"`
	// Optional. OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
	JwksJson pulumi.StringPtrInput `pulumi:"jwksJson"`
}

func (OidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Oidc)(nil)).Elem()
}

func (i OidcArgs) ToOidcOutput() OidcOutput {
	return i.ToOidcOutputWithContext(context.Background())
}

func (i OidcArgs) ToOidcOutputWithContext(ctx context.Context) OidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcOutput)
}

func (i OidcArgs) ToOutput(ctx context.Context) pulumix.Output[Oidc] {
	return pulumix.Output[Oidc]{
		OutputState: i.ToOidcOutputWithContext(ctx).OutputState,
	}
}

func (i OidcArgs) ToOidcPtrOutput() OidcPtrOutput {
	return i.ToOidcPtrOutputWithContext(context.Background())
}

func (i OidcArgs) ToOidcPtrOutputWithContext(ctx context.Context) OidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcOutput).ToOidcPtrOutputWithContext(ctx)
}

// OidcPtrInput is an input type that accepts OidcArgs, OidcPtr and OidcPtrOutput values.
// You can construct a concrete instance of `OidcPtrInput` via:
//
//	        OidcArgs{...}
//
//	or:
//
//	        nil
type OidcPtrInput interface {
	pulumi.Input

	ToOidcPtrOutput() OidcPtrOutput
	ToOidcPtrOutputWithContext(context.Context) OidcPtrOutput
}

type oidcPtrType OidcArgs

func OidcPtr(v *OidcArgs) OidcPtrInput {
	return (*oidcPtrType)(v)
}

func (*oidcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Oidc)(nil)).Elem()
}

func (i *oidcPtrType) ToOidcPtrOutput() OidcPtrOutput {
	return i.ToOidcPtrOutputWithContext(context.Background())
}

func (i *oidcPtrType) ToOidcPtrOutputWithContext(ctx context.Context) OidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcPtrOutput)
}

func (i *oidcPtrType) ToOutput(ctx context.Context) pulumix.Output[*Oidc] {
	return pulumix.Output[*Oidc]{
		OutputState: i.ToOidcPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents an OpenId Connect 1.0 identity provider.
type OidcOutput struct{ *pulumi.OutputState }

func (OidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oidc)(nil)).Elem()
}

func (o OidcOutput) ToOidcOutput() OidcOutput {
	return o
}

func (o OidcOutput) ToOidcOutputWithContext(ctx context.Context) OidcOutput {
	return o
}

func (o OidcOutput) ToOidcPtrOutput() OidcPtrOutput {
	return o.ToOidcPtrOutputWithContext(context.Background())
}

func (o OidcOutput) ToOidcPtrOutputWithContext(ctx context.Context) OidcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Oidc) *Oidc {
		return &v
	}).(OidcPtrOutput)
}

func (o OidcOutput) ToOutput(ctx context.Context) pulumix.Output[Oidc] {
	return pulumix.Output[Oidc]{
		OutputState: o.OutputState,
	}
}

// Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange requests are rejected if the token audience does not match one of the configured values. Each audience may be at most 256 characters. A maximum of 10 audiences may be configured. If this list is empty, the OIDC token audience must be equal to the full canonical resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix. For example: ```//iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ https://iam.googleapis.com/projects//locations//workloadIdentityPools//providers/```
func (o OidcOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Oidc) []string { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

// The OIDC issuer URL. Must be an HTTPS endpoint.
func (o OidcOutput) IssuerUri() pulumi.StringOutput {
	return o.ApplyT(func(v Oidc) string { return v.IssuerUri }).(pulumi.StringOutput)
}

// Optional. OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
func (o OidcOutput) JwksJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Oidc) *string { return v.JwksJson }).(pulumi.StringPtrOutput)
}

type OidcPtrOutput struct{ *pulumi.OutputState }

func (OidcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Oidc)(nil)).Elem()
}

func (o OidcPtrOutput) ToOidcPtrOutput() OidcPtrOutput {
	return o
}

func (o OidcPtrOutput) ToOidcPtrOutputWithContext(ctx context.Context) OidcPtrOutput {
	return o
}

func (o OidcPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Oidc] {
	return pulumix.Output[*Oidc]{
		OutputState: o.OutputState,
	}
}

func (o OidcPtrOutput) Elem() OidcOutput {
	return o.ApplyT(func(v *Oidc) Oidc {
		if v != nil {
			return *v
		}
		var ret Oidc
		return ret
	}).(OidcOutput)
}

// Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange requests are rejected if the token audience does not match one of the configured values. Each audience may be at most 256 characters. A maximum of 10 audiences may be configured. If this list is empty, the OIDC token audience must be equal to the full canonical resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix. For example: ```//iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ https://iam.googleapis.com/projects//locations//workloadIdentityPools//providers/```
func (o OidcPtrOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Oidc) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAudiences
	}).(pulumi.StringArrayOutput)
}

// The OIDC issuer URL. Must be an HTTPS endpoint.
func (o OidcPtrOutput) IssuerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) *string {
		if v == nil {
			return nil
		}
		return &v.IssuerUri
	}).(pulumi.StringPtrOutput)
}

// Optional. OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
func (o OidcPtrOutput) JwksJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oidc) *string {
		if v == nil {
			return nil
		}
		return v.JwksJson
	}).(pulumi.StringPtrOutput)
}

// Represents an OpenId Connect 1.0 identity provider.
type OidcResponse struct {
	// Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange requests are rejected if the token audience does not match one of the configured values. Each audience may be at most 256 characters. A maximum of 10 audiences may be configured. If this list is empty, the OIDC token audience must be equal to the full canonical resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix. For example: ```//iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ https://iam.googleapis.com/projects//locations//workloadIdentityPools//providers/```
	AllowedAudiences []string `pulumi:"allowedAudiences"`
	// The OIDC issuer URL. Must be an HTTPS endpoint.
	IssuerUri string `pulumi:"issuerUri"`
	// Optional. OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
	JwksJson string `pulumi:"jwksJson"`
}

// Represents an OpenId Connect 1.0 identity provider.
type OidcResponseOutput struct{ *pulumi.OutputState }

func (OidcResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcResponse)(nil)).Elem()
}

func (o OidcResponseOutput) ToOidcResponseOutput() OidcResponseOutput {
	return o
}

func (o OidcResponseOutput) ToOidcResponseOutputWithContext(ctx context.Context) OidcResponseOutput {
	return o
}

func (o OidcResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OidcResponse] {
	return pulumix.Output[OidcResponse]{
		OutputState: o.OutputState,
	}
}

// Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange requests are rejected if the token audience does not match one of the configured values. Each audience may be at most 256 characters. A maximum of 10 audiences may be configured. If this list is empty, the OIDC token audience must be equal to the full canonical resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix. For example: ```//iam.googleapis.com/projects//locations//workloadIdentityPools//providers/ https://iam.googleapis.com/projects//locations//workloadIdentityPools//providers/```
func (o OidcResponseOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OidcResponse) []string { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

// The OIDC issuer URL. Must be an HTTPS endpoint.
func (o OidcResponseOutput) IssuerUri() pulumi.StringOutput {
	return o.ApplyT(func(v OidcResponse) string { return v.IssuerUri }).(pulumi.StringOutput)
}

// Optional. OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { "keys": [ { "kty": "RSA/EC", "alg": "", "use": "sig", "kid": "", "n": "", "e": "", "x": "", "y": "", "crv": "" } ] }
func (o OidcResponseOutput) JwksJson() pulumi.StringOutput {
	return o.ApplyT(func(v OidcResponse) string { return v.JwksJson }).(pulumi.StringOutput)
}

// Represents an SAML 2.0 identity provider.
type Saml struct {
	// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://www.oasis-open.org/committees/download.php/56785/sstc-saml-metadata-errata-2.0-wd-05.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Upto 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at lease one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata
	IdpMetadataXml string `pulumi:"idpMetadataXml"`
}

// SamlInput is an input type that accepts SamlArgs and SamlOutput values.
// You can construct a concrete instance of `SamlInput` via:
//
//	SamlArgs{...}
type SamlInput interface {
	pulumi.Input

	ToSamlOutput() SamlOutput
	ToSamlOutputWithContext(context.Context) SamlOutput
}

// Represents an SAML 2.0 identity provider.
type SamlArgs struct {
	// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://www.oasis-open.org/committees/download.php/56785/sstc-saml-metadata-errata-2.0-wd-05.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Upto 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at lease one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata
	IdpMetadataXml pulumi.StringInput `pulumi:"idpMetadataXml"`
}

func (SamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Saml)(nil)).Elem()
}

func (i SamlArgs) ToSamlOutput() SamlOutput {
	return i.ToSamlOutputWithContext(context.Background())
}

func (i SamlArgs) ToSamlOutputWithContext(ctx context.Context) SamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlOutput)
}

func (i SamlArgs) ToOutput(ctx context.Context) pulumix.Output[Saml] {
	return pulumix.Output[Saml]{
		OutputState: i.ToSamlOutputWithContext(ctx).OutputState,
	}
}

func (i SamlArgs) ToSamlPtrOutput() SamlPtrOutput {
	return i.ToSamlPtrOutputWithContext(context.Background())
}

func (i SamlArgs) ToSamlPtrOutputWithContext(ctx context.Context) SamlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlOutput).ToSamlPtrOutputWithContext(ctx)
}

// SamlPtrInput is an input type that accepts SamlArgs, SamlPtr and SamlPtrOutput values.
// You can construct a concrete instance of `SamlPtrInput` via:
//
//	        SamlArgs{...}
//
//	or:
//
//	        nil
type SamlPtrInput interface {
	pulumi.Input

	ToSamlPtrOutput() SamlPtrOutput
	ToSamlPtrOutputWithContext(context.Context) SamlPtrOutput
}

type samlPtrType SamlArgs

func SamlPtr(v *SamlArgs) SamlPtrInput {
	return (*samlPtrType)(v)
}

func (*samlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Saml)(nil)).Elem()
}

func (i *samlPtrType) ToSamlPtrOutput() SamlPtrOutput {
	return i.ToSamlPtrOutputWithContext(context.Background())
}

func (i *samlPtrType) ToSamlPtrOutputWithContext(ctx context.Context) SamlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlPtrOutput)
}

func (i *samlPtrType) ToOutput(ctx context.Context) pulumix.Output[*Saml] {
	return pulumix.Output[*Saml]{
		OutputState: i.ToSamlPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents an SAML 2.0 identity provider.
type SamlOutput struct{ *pulumi.OutputState }

func (SamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Saml)(nil)).Elem()
}

func (o SamlOutput) ToSamlOutput() SamlOutput {
	return o
}

func (o SamlOutput) ToSamlOutputWithContext(ctx context.Context) SamlOutput {
	return o
}

func (o SamlOutput) ToSamlPtrOutput() SamlPtrOutput {
	return o.ToSamlPtrOutputWithContext(context.Background())
}

func (o SamlOutput) ToSamlPtrOutputWithContext(ctx context.Context) SamlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Saml) *Saml {
		return &v
	}).(SamlPtrOutput)
}

func (o SamlOutput) ToOutput(ctx context.Context) pulumix.Output[Saml] {
	return pulumix.Output[Saml]{
		OutputState: o.OutputState,
	}
}

// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://www.oasis-open.org/committees/download.php/56785/sstc-saml-metadata-errata-2.0-wd-05.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Upto 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at lease one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata
func (o SamlOutput) IdpMetadataXml() pulumi.StringOutput {
	return o.ApplyT(func(v Saml) string { return v.IdpMetadataXml }).(pulumi.StringOutput)
}

type SamlPtrOutput struct{ *pulumi.OutputState }

func (SamlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Saml)(nil)).Elem()
}

func (o SamlPtrOutput) ToSamlPtrOutput() SamlPtrOutput {
	return o
}

func (o SamlPtrOutput) ToSamlPtrOutputWithContext(ctx context.Context) SamlPtrOutput {
	return o
}

func (o SamlPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Saml] {
	return pulumix.Output[*Saml]{
		OutputState: o.OutputState,
	}
}

func (o SamlPtrOutput) Elem() SamlOutput {
	return o.ApplyT(func(v *Saml) Saml {
		if v != nil {
			return *v
		}
		var ret Saml
		return ret
	}).(SamlOutput)
}

// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://www.oasis-open.org/committees/download.php/56785/sstc-saml-metadata-errata-2.0-wd-05.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Upto 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at lease one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata
func (o SamlPtrOutput) IdpMetadataXml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Saml) *string {
		if v == nil {
			return nil
		}
		return &v.IdpMetadataXml
	}).(pulumi.StringPtrOutput)
}

// Represents an SAML 2.0 identity provider.
type SamlResponse struct {
	// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://www.oasis-open.org/committees/download.php/56785/sstc-saml-metadata-errata-2.0-wd-05.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Upto 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at lease one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata
	IdpMetadataXml string `pulumi:"idpMetadataXml"`
}

// Represents an SAML 2.0 identity provider.
type SamlResponseOutput struct{ *pulumi.OutputState }

func (SamlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlResponse)(nil)).Elem()
}

func (o SamlResponseOutput) ToSamlResponseOutput() SamlResponseOutput {
	return o
}

func (o SamlResponseOutput) ToSamlResponseOutputWithContext(ctx context.Context) SamlResponseOutput {
	return o
}

func (o SamlResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SamlResponse] {
	return pulumix.Output[SamlResponse]{
		OutputState: o.OutputState,
	}
}

// SAML Identity provider configuration metadata xml doc. The xml document should comply with [SAML 2.0 specification](https://www.oasis-open.org/committees/download.php/56785/sstc-saml-metadata-errata-2.0-wd-05.pdf). The max size of the acceptable xml document will be bounded to 128k characters. The metadata xml document should satisfy the following constraints: 1) Must contain an Identity Provider Entity ID. 2) Must contain at least one non-expired signing key certificate. 3) For each signing key: a) Valid from should be no more than 7 days from now. b) Valid to should be no more than 15 years in the future. 4) Upto 3 IdP signing keys are allowed in the metadata xml. When updating the provider's metadata xml, at lease one non-expired signing key must overlap with the existing metadata. This requirement is skipped if there are no non-expired signing keys present in the existing metadata
func (o SamlResponseOutput) IdpMetadataXml() pulumi.StringOutput {
	return o.ApplyT(func(v SamlResponse) string { return v.IdpMetadataXml }).(pulumi.StringOutput)
}

// Configuration for a service.
type ServiceConfig struct {
	// Optional. Domain name of the service. Example: console.cloud.google
	Domain *string `pulumi:"domain"`
}

// ServiceConfigInput is an input type that accepts ServiceConfigArgs and ServiceConfigOutput values.
// You can construct a concrete instance of `ServiceConfigInput` via:
//
//	ServiceConfigArgs{...}
type ServiceConfigInput interface {
	pulumi.Input

	ToServiceConfigOutput() ServiceConfigOutput
	ToServiceConfigOutputWithContext(context.Context) ServiceConfigOutput
}

// Configuration for a service.
type ServiceConfigArgs struct {
	// Optional. Domain name of the service. Example: console.cloud.google
	Domain pulumi.StringPtrInput `pulumi:"domain"`
}

func (ServiceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConfig)(nil)).Elem()
}

func (i ServiceConfigArgs) ToServiceConfigOutput() ServiceConfigOutput {
	return i.ToServiceConfigOutputWithContext(context.Background())
}

func (i ServiceConfigArgs) ToServiceConfigOutputWithContext(ctx context.Context) ServiceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConfigOutput)
}

func (i ServiceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceConfig] {
	return pulumix.Output[ServiceConfig]{
		OutputState: i.ToServiceConfigOutputWithContext(ctx).OutputState,
	}
}

// ServiceConfigArrayInput is an input type that accepts ServiceConfigArray and ServiceConfigArrayOutput values.
// You can construct a concrete instance of `ServiceConfigArrayInput` via:
//
//	ServiceConfigArray{ ServiceConfigArgs{...} }
type ServiceConfigArrayInput interface {
	pulumi.Input

	ToServiceConfigArrayOutput() ServiceConfigArrayOutput
	ToServiceConfigArrayOutputWithContext(context.Context) ServiceConfigArrayOutput
}

type ServiceConfigArray []ServiceConfigInput

func (ServiceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConfig)(nil)).Elem()
}

func (i ServiceConfigArray) ToServiceConfigArrayOutput() ServiceConfigArrayOutput {
	return i.ToServiceConfigArrayOutputWithContext(context.Background())
}

func (i ServiceConfigArray) ToServiceConfigArrayOutputWithContext(ctx context.Context) ServiceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConfigArrayOutput)
}

func (i ServiceConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceConfig] {
	return pulumix.Output[[]ServiceConfig]{
		OutputState: i.ToServiceConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a service.
type ServiceConfigOutput struct{ *pulumi.OutputState }

func (ServiceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConfig)(nil)).Elem()
}

func (o ServiceConfigOutput) ToServiceConfigOutput() ServiceConfigOutput {
	return o
}

func (o ServiceConfigOutput) ToServiceConfigOutputWithContext(ctx context.Context) ServiceConfigOutput {
	return o
}

func (o ServiceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceConfig] {
	return pulumix.Output[ServiceConfig]{
		OutputState: o.OutputState,
	}
}

// Optional. Domain name of the service. Example: console.cloud.google
func (o ServiceConfigOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceConfig) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

type ServiceConfigArrayOutput struct{ *pulumi.OutputState }

func (ServiceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConfig)(nil)).Elem()
}

func (o ServiceConfigArrayOutput) ToServiceConfigArrayOutput() ServiceConfigArrayOutput {
	return o
}

func (o ServiceConfigArrayOutput) ToServiceConfigArrayOutputWithContext(ctx context.Context) ServiceConfigArrayOutput {
	return o
}

func (o ServiceConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceConfig] {
	return pulumix.Output[[]ServiceConfig]{
		OutputState: o.OutputState,
	}
}

func (o ServiceConfigArrayOutput) Index(i pulumi.IntInput) ServiceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceConfig {
		return vs[0].([]ServiceConfig)[vs[1].(int)]
	}).(ServiceConfigOutput)
}

// Configuration for a service.
type ServiceConfigResponse struct {
	// Optional. Domain name of the service. Example: console.cloud.google
	Domain string `pulumi:"domain"`
}

// Configuration for a service.
type ServiceConfigResponseOutput struct{ *pulumi.OutputState }

func (ServiceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConfigResponse)(nil)).Elem()
}

func (o ServiceConfigResponseOutput) ToServiceConfigResponseOutput() ServiceConfigResponseOutput {
	return o
}

func (o ServiceConfigResponseOutput) ToServiceConfigResponseOutputWithContext(ctx context.Context) ServiceConfigResponseOutput {
	return o
}

func (o ServiceConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceConfigResponse] {
	return pulumix.Output[ServiceConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Domain name of the service. Example: console.cloud.google
func (o ServiceConfigResponseOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceConfigResponse) string { return v.Domain }).(pulumi.StringOutput)
}

type ServiceConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceConfigResponse)(nil)).Elem()
}

func (o ServiceConfigResponseArrayOutput) ToServiceConfigResponseArrayOutput() ServiceConfigResponseArrayOutput {
	return o
}

func (o ServiceConfigResponseArrayOutput) ToServiceConfigResponseArrayOutputWithContext(ctx context.Context) ServiceConfigResponseArrayOutput {
	return o
}

func (o ServiceConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceConfigResponse] {
	return pulumix.Output[[]ServiceConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o ServiceConfigResponseArrayOutput) Index(i pulumi.IntInput) ServiceConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceConfigResponse {
		return vs[0].([]ServiceConfigResponse)[vs[1].(int)]
	}).(ServiceConfigResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessRestrictionsInput)(nil)).Elem(), AccessRestrictionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessRestrictionsPtrInput)(nil)).Elem(), AccessRestrictionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsInput)(nil)).Elem(), AwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsPtrInput)(nil)).Elem(), AwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionInput)(nil)).Elem(), ConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionPtrInput)(nil)).Elem(), ConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcInput)(nil)).Elem(), GoogleIamAdminV1WorkforcePoolProviderOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcPtrInput)(nil)).Elem(), GoogleIamAdminV1WorkforcePoolProviderOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretInput)(nil)).Elem(), GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrInput)(nil)).Elem(), GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueInput)(nil)).Elem(), GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrInput)(nil)).Elem(), GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigInput)(nil)).Elem(), GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrInput)(nil)).Elem(), GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderSamlInput)(nil)).Elem(), GoogleIamAdminV1WorkforcePoolProviderSamlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamAdminV1WorkforcePoolProviderSamlPtrInput)(nil)).Elem(), GoogleIamAdminV1WorkforcePoolProviderSamlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyDataInput)(nil)).Elem(), KeyDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyDataPtrInput)(nil)).Elem(), KeyDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcInput)(nil)).Elem(), OidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OidcPtrInput)(nil)).Elem(), OidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlInput)(nil)).Elem(), SamlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlPtrInput)(nil)).Elem(), SamlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConfigInput)(nil)).Elem(), ServiceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceConfigArrayInput)(nil)).Elem(), ServiceConfigArray{})
	pulumi.RegisterOutputType(AccessRestrictionsOutput{})
	pulumi.RegisterOutputType(AccessRestrictionsPtrOutput{})
	pulumi.RegisterOutputType(AccessRestrictionsResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AwsOutput{})
	pulumi.RegisterOutputType(AwsPtrOutput{})
	pulumi.RegisterOutputType(AwsResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionPtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcPtrOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretPtrOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValuePtrOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcClientSecretValueResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigPtrOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderSamlOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderSamlPtrOutput{})
	pulumi.RegisterOutputType(GoogleIamAdminV1WorkforcePoolProviderSamlResponseOutput{})
	pulumi.RegisterOutputType(KeyDataOutput{})
	pulumi.RegisterOutputType(KeyDataPtrOutput{})
	pulumi.RegisterOutputType(KeyDataResponseOutput{})
	pulumi.RegisterOutputType(OidcOutput{})
	pulumi.RegisterOutputType(OidcPtrOutput{})
	pulumi.RegisterOutputType(OidcResponseOutput{})
	pulumi.RegisterOutputType(SamlOutput{})
	pulumi.RegisterOutputType(SamlPtrOutput{})
	pulumi.RegisterOutputType(SamlResponseOutput{})
	pulumi.RegisterOutputType(ServiceConfigOutput{})
	pulumi.RegisterOutputType(ServiceConfigArrayOutput{})
	pulumi.RegisterOutputType(ServiceConfigResponseOutput{})
	pulumi.RegisterOutputType(ServiceConfigResponseArrayOutput{})
}
