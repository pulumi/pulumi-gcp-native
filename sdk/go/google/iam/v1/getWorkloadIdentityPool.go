// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets an individual WorkloadIdentityPool.
func LookupWorkloadIdentityPool(ctx *pulumi.Context, args *LookupWorkloadIdentityPoolArgs, opts ...pulumi.InvokeOption) (*LookupWorkloadIdentityPoolResult, error) {
	var rv LookupWorkloadIdentityPoolResult
	err := ctx.Invoke("google-native:iam/v1:getWorkloadIdentityPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWorkloadIdentityPoolArgs struct {
	Location               string  `pulumi:"location"`
	Project                *string `pulumi:"project"`
	WorkloadIdentityPoolId string  `pulumi:"workloadIdentityPoolId"`
}

type LookupWorkloadIdentityPoolResult struct {
	// A description of the pool. Cannot exceed 256 characters.
	Description string `pulumi:"description"`
	// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access resources. If the pool is re-enabled, existing tokens grant access again.
	Disabled bool `pulumi:"disabled"`
	// A display name for the pool. Cannot exceed 32 characters.
	DisplayName string `pulumi:"displayName"`
	// The resource name of the pool.
	Name string `pulumi:"name"`
	// The state of the pool.
	State string `pulumi:"state"`
}

func LookupWorkloadIdentityPoolOutput(ctx *pulumi.Context, args LookupWorkloadIdentityPoolOutputArgs, opts ...pulumi.InvokeOption) LookupWorkloadIdentityPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkloadIdentityPoolResult, error) {
			args := v.(LookupWorkloadIdentityPoolArgs)
			r, err := LookupWorkloadIdentityPool(ctx, &args, opts...)
			var s LookupWorkloadIdentityPoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkloadIdentityPoolResultOutput)
}

type LookupWorkloadIdentityPoolOutputArgs struct {
	Location               pulumi.StringInput    `pulumi:"location"`
	Project                pulumi.StringPtrInput `pulumi:"project"`
	WorkloadIdentityPoolId pulumi.StringInput    `pulumi:"workloadIdentityPoolId"`
}

func (LookupWorkloadIdentityPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkloadIdentityPoolArgs)(nil)).Elem()
}

type LookupWorkloadIdentityPoolResultOutput struct{ *pulumi.OutputState }

func (LookupWorkloadIdentityPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkloadIdentityPoolResult)(nil)).Elem()
}

func (o LookupWorkloadIdentityPoolResultOutput) ToLookupWorkloadIdentityPoolResultOutput() LookupWorkloadIdentityPoolResultOutput {
	return o
}

func (o LookupWorkloadIdentityPoolResultOutput) ToLookupWorkloadIdentityPoolResultOutputWithContext(ctx context.Context) LookupWorkloadIdentityPoolResultOutput {
	return o
}

// A description of the pool. Cannot exceed 256 characters.
func (o LookupWorkloadIdentityPoolResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkloadIdentityPoolResult) string { return v.Description }).(pulumi.StringOutput)
}

// Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access resources. If the pool is re-enabled, existing tokens grant access again.
func (o LookupWorkloadIdentityPoolResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkloadIdentityPoolResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// A display name for the pool. Cannot exceed 32 characters.
func (o LookupWorkloadIdentityPoolResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkloadIdentityPoolResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The resource name of the pool.
func (o LookupWorkloadIdentityPoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkloadIdentityPoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// The state of the pool.
func (o LookupWorkloadIdentityPoolResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkloadIdentityPoolResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkloadIdentityPoolResultOutput{})
}
