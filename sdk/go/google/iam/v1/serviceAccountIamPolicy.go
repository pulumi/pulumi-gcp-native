// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the IAM policy that is attached to a ServiceAccount. Use this method to grant or revoke access to the service account. For example, you could grant a member the ability to impersonate the service account. This method does not enable the service account to access other resources. To grant roles to a service account on a resource, follow these steps: 1. Call the resource's `getIamPolicy` method to get its current IAM policy. 2. Edit the policy so that it binds the service account to an IAM role for the resource. 3. Call the resource's `setIamPolicy` method to update its IAM policy. For detailed instructions, see [Granting roles to a service account for specific resources](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts).
type ServiceAccountIamPolicy struct {
	pulumi.CustomResourceState
}

// NewServiceAccountIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewServiceAccountIamPolicy(ctx *pulumi.Context,
	name string, args *ServiceAccountIamPolicyArgs, opts ...pulumi.ResourceOption) (*ServiceAccountIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.ServiceAccountsId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountsId'")
	}
	var resource ServiceAccountIamPolicy
	err := ctx.RegisterResource("google-cloud:iam/v1:ServiceAccountIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAccountIamPolicy gets an existing ServiceAccountIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAccountIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAccountIamPolicyState, opts ...pulumi.ResourceOption) (*ServiceAccountIamPolicy, error) {
	var resource ServiceAccountIamPolicy
	err := ctx.ReadResource("google-cloud:iam/v1:ServiceAccountIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAccountIamPolicy resources.
type serviceAccountIamPolicyState struct {
}

type ServiceAccountIamPolicyState struct {
}

func (ServiceAccountIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountIamPolicyState)(nil)).Elem()
}

type serviceAccountIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy            *Policy `pulumi:"policy"`
	ProjectsId        string  `pulumi:"projectsId"`
	ServiceAccountsId string  `pulumi:"serviceAccountsId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a ServiceAccountIamPolicy resource.
type ServiceAccountIamPolicyArgs struct {
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy            PolicyPtrInput
	ProjectsId        pulumi.StringInput
	ServiceAccountsId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (ServiceAccountIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAccountIamPolicyArgs)(nil)).Elem()
}

type ServiceAccountIamPolicyInput interface {
	pulumi.Input

	ToServiceAccountIamPolicyOutput() ServiceAccountIamPolicyOutput
	ToServiceAccountIamPolicyOutputWithContext(ctx context.Context) ServiceAccountIamPolicyOutput
}

func (*ServiceAccountIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountIamPolicy)(nil))
}

func (i *ServiceAccountIamPolicy) ToServiceAccountIamPolicyOutput() ServiceAccountIamPolicyOutput {
	return i.ToServiceAccountIamPolicyOutputWithContext(context.Background())
}

func (i *ServiceAccountIamPolicy) ToServiceAccountIamPolicyOutputWithContext(ctx context.Context) ServiceAccountIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountIamPolicyOutput)
}

type ServiceAccountIamPolicyOutput struct {
	*pulumi.OutputState
}

func (ServiceAccountIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountIamPolicy)(nil))
}

func (o ServiceAccountIamPolicyOutput) ToServiceAccountIamPolicyOutput() ServiceAccountIamPolicyOutput {
	return o
}

func (o ServiceAccountIamPolicyOutput) ToServiceAccountIamPolicyOutputWithContext(ctx context.Context) ServiceAccountIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServiceAccountIamPolicyOutput{})
}
