// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Create a new WorkloadIdentityPoolProviderKey in a WorkloadIdentityPoolProvider.
// Auto-naming is currently not supported for this resource.
type WorkloadIdentityPoolKey struct {
	pulumi.CustomResourceState

	// Time after which the key will be permanently purged and cannot be recovered. Note that the key may get purged before this timestamp if the total limit of keys per provider is crossed.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Immutable. Public half of the asymmetric key.
	KeyData  KeyDataResponseOutput `pulumi:"keyData"`
	Location pulumi.StringOutput   `pulumi:"location"`
	// The resource name of the key.
	Name       pulumi.StringOutput `pulumi:"name"`
	Project    pulumi.StringOutput `pulumi:"project"`
	ProviderId pulumi.StringOutput `pulumi:"providerId"`
	// The state of the key.
	State pulumi.StringOutput `pulumi:"state"`
	// The purpose of the key.
	Use                    pulumi.StringOutput `pulumi:"use"`
	WorkloadIdentityPoolId pulumi.StringOutput `pulumi:"workloadIdentityPoolId"`
	// Required. The ID to use for the key, which becomes the final component of the resource name. This value should be 4-32 characters, and may contain the characters [a-z0-9-].
	WorkloadIdentityPoolProviderKeyId pulumi.StringOutput `pulumi:"workloadIdentityPoolProviderKeyId"`
}

// NewWorkloadIdentityPoolKey registers a new resource with the given unique name, arguments, and options.
func NewWorkloadIdentityPoolKey(ctx *pulumi.Context,
	name string, args *WorkloadIdentityPoolKeyArgs, opts ...pulumi.ResourceOption) (*WorkloadIdentityPoolKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProviderId == nil {
		return nil, errors.New("invalid value for required argument 'ProviderId'")
	}
	if args.Use == nil {
		return nil, errors.New("invalid value for required argument 'Use'")
	}
	if args.WorkloadIdentityPoolId == nil {
		return nil, errors.New("invalid value for required argument 'WorkloadIdentityPoolId'")
	}
	if args.WorkloadIdentityPoolProviderKeyId == nil {
		return nil, errors.New("invalid value for required argument 'WorkloadIdentityPoolProviderKeyId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"providerId",
		"workloadIdentityPoolId",
		"workloadIdentityPoolProviderKeyId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkloadIdentityPoolKey
	err := ctx.RegisterResource("google-native:iam/v1:WorkloadIdentityPoolKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkloadIdentityPoolKey gets an existing WorkloadIdentityPoolKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkloadIdentityPoolKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkloadIdentityPoolKeyState, opts ...pulumi.ResourceOption) (*WorkloadIdentityPoolKey, error) {
	var resource WorkloadIdentityPoolKey
	err := ctx.ReadResource("google-native:iam/v1:WorkloadIdentityPoolKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkloadIdentityPoolKey resources.
type workloadIdentityPoolKeyState struct {
}

type WorkloadIdentityPoolKeyState struct {
}

func (WorkloadIdentityPoolKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadIdentityPoolKeyState)(nil)).Elem()
}

type workloadIdentityPoolKeyArgs struct {
	// Immutable. Public half of the asymmetric key.
	KeyData    *KeyData `pulumi:"keyData"`
	Location   *string  `pulumi:"location"`
	Project    *string  `pulumi:"project"`
	ProviderId string   `pulumi:"providerId"`
	// The purpose of the key.
	Use                    WorkloadIdentityPoolKeyUse `pulumi:"use"`
	WorkloadIdentityPoolId string                     `pulumi:"workloadIdentityPoolId"`
	// Required. The ID to use for the key, which becomes the final component of the resource name. This value should be 4-32 characters, and may contain the characters [a-z0-9-].
	WorkloadIdentityPoolProviderKeyId string `pulumi:"workloadIdentityPoolProviderKeyId"`
}

// The set of arguments for constructing a WorkloadIdentityPoolKey resource.
type WorkloadIdentityPoolKeyArgs struct {
	// Immutable. Public half of the asymmetric key.
	KeyData    KeyDataPtrInput
	Location   pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	ProviderId pulumi.StringInput
	// The purpose of the key.
	Use                    WorkloadIdentityPoolKeyUseInput
	WorkloadIdentityPoolId pulumi.StringInput
	// Required. The ID to use for the key, which becomes the final component of the resource name. This value should be 4-32 characters, and may contain the characters [a-z0-9-].
	WorkloadIdentityPoolProviderKeyId pulumi.StringInput
}

func (WorkloadIdentityPoolKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadIdentityPoolKeyArgs)(nil)).Elem()
}

type WorkloadIdentityPoolKeyInput interface {
	pulumi.Input

	ToWorkloadIdentityPoolKeyOutput() WorkloadIdentityPoolKeyOutput
	ToWorkloadIdentityPoolKeyOutputWithContext(ctx context.Context) WorkloadIdentityPoolKeyOutput
}

func (*WorkloadIdentityPoolKey) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityPoolKey)(nil)).Elem()
}

func (i *WorkloadIdentityPoolKey) ToWorkloadIdentityPoolKeyOutput() WorkloadIdentityPoolKeyOutput {
	return i.ToWorkloadIdentityPoolKeyOutputWithContext(context.Background())
}

func (i *WorkloadIdentityPoolKey) ToWorkloadIdentityPoolKeyOutputWithContext(ctx context.Context) WorkloadIdentityPoolKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadIdentityPoolKeyOutput)
}

func (i *WorkloadIdentityPoolKey) ToOutput(ctx context.Context) pulumix.Output[*WorkloadIdentityPoolKey] {
	return pulumix.Output[*WorkloadIdentityPoolKey]{
		OutputState: i.ToWorkloadIdentityPoolKeyOutputWithContext(ctx).OutputState,
	}
}

type WorkloadIdentityPoolKeyOutput struct{ *pulumi.OutputState }

func (WorkloadIdentityPoolKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadIdentityPoolKey)(nil)).Elem()
}

func (o WorkloadIdentityPoolKeyOutput) ToWorkloadIdentityPoolKeyOutput() WorkloadIdentityPoolKeyOutput {
	return o
}

func (o WorkloadIdentityPoolKeyOutput) ToWorkloadIdentityPoolKeyOutputWithContext(ctx context.Context) WorkloadIdentityPoolKeyOutput {
	return o
}

func (o WorkloadIdentityPoolKeyOutput) ToOutput(ctx context.Context) pulumix.Output[*WorkloadIdentityPoolKey] {
	return pulumix.Output[*WorkloadIdentityPoolKey]{
		OutputState: o.OutputState,
	}
}

// Time after which the key will be permanently purged and cannot be recovered. Note that the key may get purged before this timestamp if the total limit of keys per provider is crossed.
func (o WorkloadIdentityPoolKeyOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolKey) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// Immutable. Public half of the asymmetric key.
func (o WorkloadIdentityPoolKeyOutput) KeyData() KeyDataResponseOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolKey) KeyDataResponseOutput { return v.KeyData }).(KeyDataResponseOutput)
}

func (o WorkloadIdentityPoolKeyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolKey) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the key.
func (o WorkloadIdentityPoolKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WorkloadIdentityPoolKeyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolKey) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o WorkloadIdentityPoolKeyOutput) ProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolKey) pulumi.StringOutput { return v.ProviderId }).(pulumi.StringOutput)
}

// The state of the key.
func (o WorkloadIdentityPoolKeyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolKey) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The purpose of the key.
func (o WorkloadIdentityPoolKeyOutput) Use() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolKey) pulumi.StringOutput { return v.Use }).(pulumi.StringOutput)
}

func (o WorkloadIdentityPoolKeyOutput) WorkloadIdentityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolKey) pulumi.StringOutput { return v.WorkloadIdentityPoolId }).(pulumi.StringOutput)
}

// Required. The ID to use for the key, which becomes the final component of the resource name. This value should be 4-32 characters, and may contain the characters [a-z0-9-].
func (o WorkloadIdentityPoolKeyOutput) WorkloadIdentityPoolProviderKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkloadIdentityPoolKey) pulumi.StringOutput { return v.WorkloadIdentityPoolProviderKeyId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadIdentityPoolKeyInput)(nil)).Elem(), &WorkloadIdentityPoolKey{})
	pulumi.RegisterOutputType(WorkloadIdentityPoolKeyOutput{})
}
