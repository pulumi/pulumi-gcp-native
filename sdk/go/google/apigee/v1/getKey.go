// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details for a consumer key for a developer app, including the key and secret value, associated API products, and other information.
func GetKey(ctx *pulumi.Context, args *GetKeyArgs, opts ...pulumi.InvokeOption) (*GetKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetKeyResult
	err := ctx.Invoke("google-native:apigee/v1:getKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetKeyArgs struct {
	AppId          string `pulumi:"appId"`
	DeveloperId    string `pulumi:"developerId"`
	KeyId          string `pulumi:"keyId"`
	OrganizationId string `pulumi:"organizationId"`
}

type GetKeyResult struct {
	// List of API products for which the credential can be used. **Note**: Do not specify the list of API products when creating a consumer key and secret for a developer app. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created.
	ApiProducts []interface{} `pulumi:"apiProducts"`
	// List of attributes associated with the credential.
	Attributes []GoogleCloudApigeeV1AttributeResponse `pulumi:"attributes"`
	// Consumer key.
	ConsumerKey string `pulumi:"consumerKey"`
	// Secret key.
	ConsumerSecret string `pulumi:"consumerSecret"`
	// Time the developer app expires in milliseconds since epoch.
	ExpiresAt string `pulumi:"expiresAt"`
	// Input only. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
	ExpiresInSeconds string `pulumi:"expiresInSeconds"`
	// Time the developer app was created in milliseconds since epoch.
	IssuedAt string `pulumi:"issuedAt"`
	// Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.
	Scopes []string `pulumi:"scopes"`
	// Status of the credential. Valid values include `approved` or `revoked`.
	Status string `pulumi:"status"`
}

func GetKeyOutput(ctx *pulumi.Context, args GetKeyOutputArgs, opts ...pulumi.InvokeOption) GetKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetKeyResult, error) {
			args := v.(GetKeyArgs)
			r, err := GetKey(ctx, &args, opts...)
			var s GetKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetKeyResultOutput)
}

type GetKeyOutputArgs struct {
	AppId          pulumi.StringInput `pulumi:"appId"`
	DeveloperId    pulumi.StringInput `pulumi:"developerId"`
	KeyId          pulumi.StringInput `pulumi:"keyId"`
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
}

func (GetKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyArgs)(nil)).Elem()
}

type GetKeyResultOutput struct{ *pulumi.OutputState }

func (GetKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyResult)(nil)).Elem()
}

func (o GetKeyResultOutput) ToGetKeyResultOutput() GetKeyResultOutput {
	return o
}

func (o GetKeyResultOutput) ToGetKeyResultOutputWithContext(ctx context.Context) GetKeyResultOutput {
	return o
}

func (o GetKeyResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetKeyResult] {
	return pulumix.Output[GetKeyResult]{
		OutputState: o.OutputState,
	}
}

// List of API products for which the credential can be used. **Note**: Do not specify the list of API products when creating a consumer key and secret for a developer app. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created.
func (o GetKeyResultOutput) ApiProducts() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetKeyResult) []interface{} { return v.ApiProducts }).(pulumi.ArrayOutput)
}

// List of attributes associated with the credential.
func (o GetKeyResultOutput) Attributes() GoogleCloudApigeeV1AttributeResponseArrayOutput {
	return o.ApplyT(func(v GetKeyResult) []GoogleCloudApigeeV1AttributeResponse { return v.Attributes }).(GoogleCloudApigeeV1AttributeResponseArrayOutput)
}

// Consumer key.
func (o GetKeyResultOutput) ConsumerKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyResult) string { return v.ConsumerKey }).(pulumi.StringOutput)
}

// Secret key.
func (o GetKeyResultOutput) ConsumerSecret() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyResult) string { return v.ConsumerSecret }).(pulumi.StringOutput)
}

// Time the developer app expires in milliseconds since epoch.
func (o GetKeyResultOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyResult) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// Input only. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
func (o GetKeyResultOutput) ExpiresInSeconds() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyResult) string { return v.ExpiresInSeconds }).(pulumi.StringOutput)
}

// Time the developer app was created in milliseconds since epoch.
func (o GetKeyResultOutput) IssuedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyResult) string { return v.IssuedAt }).(pulumi.StringOutput)
}

// Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.
func (o GetKeyResultOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKeyResult) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Status of the credential. Valid values include `approved` or `revoked`.
func (o GetKeyResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyResult) string { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetKeyResultOutput{})
}
