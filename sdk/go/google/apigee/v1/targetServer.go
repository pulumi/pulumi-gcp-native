// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a TargetServer in the specified environment.
type TargetServer struct {
	pulumi.CustomResourceState

	// Optional. A human-readable description of this TargetServer.
	Description pulumi.StringOutput `pulumi:"description"`
	// The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host pulumi.StringOutput `pulumi:"host"`
	// Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// The resource id of this target server. Values must match the regular expression
	Name pulumi.StringOutput `pulumi:"name"`
	// The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port pulumi.IntOutput `pulumi:"port"`
	// Immutable. The protocol used by this TargetServer.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	SSLInfo GoogleCloudApigeeV1TlsInfoResponseOutput `pulumi:"sSLInfo"`
}

// NewTargetServer registers a new resource with the given unique name, arguments, and options.
func NewTargetServer(ctx *pulumi.Context,
	name string, args *TargetServerArgs, opts ...pulumi.ResourceOption) (*TargetServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	var resource TargetServer
	err := ctx.RegisterResource("google-native:apigee/v1:TargetServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetServer gets an existing TargetServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetServerState, opts ...pulumi.ResourceOption) (*TargetServer, error) {
	var resource TargetServer
	err := ctx.ReadResource("google-native:apigee/v1:TargetServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetServer resources.
type targetServerState struct {
}

type TargetServerState struct {
}

func (TargetServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetServerState)(nil)).Elem()
}

type targetServerArgs struct {
	// Optional. A human-readable description of this TargetServer.
	Description   *string `pulumi:"description"`
	EnvironmentId string  `pulumi:"environmentId"`
	// The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host string `pulumi:"host"`
	// Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The resource id of this target server. Values must match the regular expression
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
	// The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port int `pulumi:"port"`
	// Immutable. The protocol used by this TargetServer.
	Protocol *TargetServerProtocol `pulumi:"protocol"`
	// Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	SSLInfo *GoogleCloudApigeeV1TlsInfo `pulumi:"sSLInfo"`
}

// The set of arguments for constructing a TargetServer resource.
type TargetServerArgs struct {
	// Optional. A human-readable description of this TargetServer.
	Description   pulumi.StringPtrInput
	EnvironmentId pulumi.StringInput
	// The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host pulumi.StringInput
	// Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled pulumi.BoolPtrInput
	// The resource id of this target server. Values must match the regular expression
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	// The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port pulumi.IntInput
	// Immutable. The protocol used by this TargetServer.
	Protocol TargetServerProtocolPtrInput
	// Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	SSLInfo GoogleCloudApigeeV1TlsInfoPtrInput
}

func (TargetServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetServerArgs)(nil)).Elem()
}

type TargetServerInput interface {
	pulumi.Input

	ToTargetServerOutput() TargetServerOutput
	ToTargetServerOutputWithContext(ctx context.Context) TargetServerOutput
}

func (*TargetServer) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetServer)(nil)).Elem()
}

func (i *TargetServer) ToTargetServerOutput() TargetServerOutput {
	return i.ToTargetServerOutputWithContext(context.Background())
}

func (i *TargetServer) ToTargetServerOutputWithContext(ctx context.Context) TargetServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetServerOutput)
}

type TargetServerOutput struct{ *pulumi.OutputState }

func (TargetServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetServer)(nil)).Elem()
}

func (o TargetServerOutput) ToTargetServerOutput() TargetServerOutput {
	return o
}

func (o TargetServerOutput) ToTargetServerOutputWithContext(ctx context.Context) TargetServerOutput {
	return o
}

// Optional. A human-readable description of this TargetServer.
func (o TargetServerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
func (o TargetServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
func (o TargetServerOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The resource id of this target server. Values must match the regular expression
func (o TargetServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
func (o TargetServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Immutable. The protocol used by this TargetServer.
func (o TargetServerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetServer) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
func (o TargetServerOutput) SSLInfo() GoogleCloudApigeeV1TlsInfoResponseOutput {
	return o.ApplyT(func(v *TargetServer) GoogleCloudApigeeV1TlsInfoResponseOutput { return v.SSLInfo }).(GoogleCloudApigeeV1TlsInfoResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetServerInput)(nil)).Elem(), &TargetServer{})
	pulumi.RegisterOutputType(TargetServerOutput{})
}
