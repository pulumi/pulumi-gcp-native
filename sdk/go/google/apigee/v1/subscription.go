// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a subscription to an API product.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type Subscription struct {
	pulumi.CustomResourceState

	// Name of the API product for which the developer is purchasing a subscription.
	Apiproduct pulumi.StringOutput `pulumi:"apiproduct"`
	// Time when the API product subscription was created in milliseconds since epoch.
	CreatedAt   pulumi.StringOutput `pulumi:"createdAt"`
	DeveloperId pulumi.StringOutput `pulumi:"developerId"`
	// Time when the API product subscription ends in milliseconds since epoch.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Time when the API product subscription was last modified in milliseconds since epoch.
	LastModifiedAt pulumi.StringOutput `pulumi:"lastModifiedAt"`
	// Name of the API product subscription.
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Time when the API product subscription starts in milliseconds since epoch.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
}

// NewSubscription registers a new resource with the given unique name, arguments, and options.
func NewSubscription(ctx *pulumi.Context,
	name string, args *SubscriptionArgs, opts ...pulumi.ResourceOption) (*Subscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeveloperId == nil {
		return nil, errors.New("invalid value for required argument 'DeveloperId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"developerId",
		"organizationId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subscription
	err := ctx.RegisterResource("google-native:apigee/v1:Subscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscription gets an existing Subscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionState, opts ...pulumi.ResourceOption) (*Subscription, error) {
	var resource Subscription
	err := ctx.ReadResource("google-native:apigee/v1:Subscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subscription resources.
type subscriptionState struct {
}

type SubscriptionState struct {
}

func (SubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionState)(nil)).Elem()
}

type subscriptionArgs struct {
	// Name of the API product for which the developer is purchasing a subscription.
	Apiproduct  *string `pulumi:"apiproduct"`
	DeveloperId string  `pulumi:"developerId"`
	// Time when the API product subscription ends in milliseconds since epoch.
	EndTime        *string `pulumi:"endTime"`
	OrganizationId string  `pulumi:"organizationId"`
	// Time when the API product subscription starts in milliseconds since epoch.
	StartTime *string `pulumi:"startTime"`
}

// The set of arguments for constructing a Subscription resource.
type SubscriptionArgs struct {
	// Name of the API product for which the developer is purchasing a subscription.
	Apiproduct  pulumi.StringPtrInput
	DeveloperId pulumi.StringInput
	// Time when the API product subscription ends in milliseconds since epoch.
	EndTime        pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	// Time when the API product subscription starts in milliseconds since epoch.
	StartTime pulumi.StringPtrInput
}

func (SubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionArgs)(nil)).Elem()
}

type SubscriptionInput interface {
	pulumi.Input

	ToSubscriptionOutput() SubscriptionOutput
	ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput
}

func (*Subscription) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscription)(nil)).Elem()
}

func (i *Subscription) ToSubscriptionOutput() SubscriptionOutput {
	return i.ToSubscriptionOutputWithContext(context.Background())
}

func (i *Subscription) ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionOutput)
}

type SubscriptionOutput struct{ *pulumi.OutputState }

func (SubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subscription)(nil)).Elem()
}

func (o SubscriptionOutput) ToSubscriptionOutput() SubscriptionOutput {
	return o
}

func (o SubscriptionOutput) ToSubscriptionOutputWithContext(ctx context.Context) SubscriptionOutput {
	return o
}

// Name of the API product for which the developer is purchasing a subscription.
func (o SubscriptionOutput) Apiproduct() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.Apiproduct }).(pulumi.StringOutput)
}

// Time when the API product subscription was created in milliseconds since epoch.
func (o SubscriptionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o SubscriptionOutput) DeveloperId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.DeveloperId }).(pulumi.StringOutput)
}

// Time when the API product subscription ends in milliseconds since epoch.
func (o SubscriptionOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// Time when the API product subscription was last modified in milliseconds since epoch.
func (o SubscriptionOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// Name of the API product subscription.
func (o SubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SubscriptionOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Time when the API product subscription starts in milliseconds since epoch.
func (o SubscriptionOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subscription) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionInput)(nil)).Elem(), &Subscription{})
	pulumi.RegisterOutputType(SubscriptionOutput{})
}
