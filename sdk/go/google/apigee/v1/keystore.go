// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a keystore or truststore. - Keystore: Contains certificates and their associated keys. - Truststore: Contains trusted certificates used to validate a server's certificate. These certificates are typically self-signed certificates or certificates that are not signed by a trusted CA.
type Keystore struct {
	pulumi.CustomResourceState

	// Aliases in this keystore.
	Aliases       pulumi.StringArrayOutput `pulumi:"aliases"`
	EnvironmentId pulumi.StringOutput      `pulumi:"environmentId"`
	// Optional. Name of the keystore. Overrides the value in Keystore.
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
}

// NewKeystore registers a new resource with the given unique name, arguments, and options.
func NewKeystore(ctx *pulumi.Context,
	name string, args *KeystoreArgs, opts ...pulumi.ResourceOption) (*Keystore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	var resource Keystore
	err := ctx.RegisterResource("google-native:apigee/v1:Keystore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeystore gets an existing Keystore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeystore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeystoreState, opts ...pulumi.ResourceOption) (*Keystore, error) {
	var resource Keystore
	err := ctx.ReadResource("google-native:apigee/v1:Keystore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keystore resources.
type keystoreState struct {
}

type KeystoreState struct {
}

func (KeystoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*keystoreState)(nil)).Elem()
}

type keystoreArgs struct {
	EnvironmentId string `pulumi:"environmentId"`
	// Resource ID for this keystore. Values must match the regular expression `[\w[:space:]-.]{1,255}`.
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
}

// The set of arguments for constructing a Keystore resource.
type KeystoreArgs struct {
	EnvironmentId pulumi.StringInput
	// Resource ID for this keystore. Values must match the regular expression `[\w[:space:]-.]{1,255}`.
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
}

func (KeystoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keystoreArgs)(nil)).Elem()
}

type KeystoreInput interface {
	pulumi.Input

	ToKeystoreOutput() KeystoreOutput
	ToKeystoreOutputWithContext(ctx context.Context) KeystoreOutput
}

func (*Keystore) ElementType() reflect.Type {
	return reflect.TypeOf((**Keystore)(nil)).Elem()
}

func (i *Keystore) ToKeystoreOutput() KeystoreOutput {
	return i.ToKeystoreOutputWithContext(context.Background())
}

func (i *Keystore) ToKeystoreOutputWithContext(ctx context.Context) KeystoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeystoreOutput)
}

type KeystoreOutput struct{ *pulumi.OutputState }

func (KeystoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keystore)(nil)).Elem()
}

func (o KeystoreOutput) ToKeystoreOutput() KeystoreOutput {
	return o
}

func (o KeystoreOutput) ToKeystoreOutputWithContext(ctx context.Context) KeystoreOutput {
	return o
}

// Aliases in this keystore.
func (o KeystoreOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Keystore) pulumi.StringArrayOutput { return v.Aliases }).(pulumi.StringArrayOutput)
}

func (o KeystoreOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Keystore) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Optional. Name of the keystore. Overrides the value in Keystore.
func (o KeystoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Keystore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KeystoreOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Keystore) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeystoreInput)(nil)).Elem(), &Keystore{})
	pulumi.RegisterOutputType(KeystoreOutput{})
}
