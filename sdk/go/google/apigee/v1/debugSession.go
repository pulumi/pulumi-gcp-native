// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a debug session for a deployed API Proxy revision.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type DebugSession struct {
	pulumi.CustomResourceState

	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.
	Count pulumi.IntOutput `pulumi:"count"`
	// The first transaction creation timestamp, recorded by UAP.
	CreateTime    pulumi.StringOutput `pulumi:"createTime"`
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// A unique ID for this DebugSession.
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	RevisionId     pulumi.StringOutput `pulumi:"revisionId"`
	// Optional. The time in seconds after which this DebugSession should end. A timeout specified in DebugSession will overwrite this value.
	Timeout pulumi.StringOutput `pulumi:"timeout"`
	// Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.
	Tracesize pulumi.IntOutput `pulumi:"tracesize"`
	// Optional. The length of time, in seconds, that this debug session is valid, starting from when it's received in the control plane. Min = 1, Max = 15, Default = 10.
	Validity pulumi.IntOutput `pulumi:"validity"`
}

// NewDebugSession registers a new resource with the given unique name, arguments, and options.
func NewDebugSession(ctx *pulumi.Context,
	name string, args *DebugSessionArgs, opts ...pulumi.ResourceOption) (*DebugSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.RevisionId == nil {
		return nil, errors.New("invalid value for required argument 'RevisionId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiId",
		"environmentId",
		"organizationId",
		"revisionId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DebugSession
	err := ctx.RegisterResource("google-native:apigee/v1:DebugSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDebugSession gets an existing DebugSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDebugSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DebugSessionState, opts ...pulumi.ResourceOption) (*DebugSession, error) {
	var resource DebugSession
	err := ctx.ReadResource("google-native:apigee/v1:DebugSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DebugSession resources.
type debugSessionState struct {
}

type DebugSessionState struct {
}

func (DebugSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*debugSessionState)(nil)).Elem()
}

type debugSessionArgs struct {
	ApiId string `pulumi:"apiId"`
	// Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.
	Count         *int   `pulumi:"count"`
	EnvironmentId string `pulumi:"environmentId"`
	// Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.
	Filter *string `pulumi:"filter"`
	// A unique ID for this DebugSession.
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
	RevisionId     string  `pulumi:"revisionId"`
	// Optional. The time in seconds after which this DebugSession should end. This value will override the value in query param, if both are provided.
	Timeout *string `pulumi:"timeout"`
	// Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.
	Tracesize *int `pulumi:"tracesize"`
	// Optional. The length of time, in seconds, that this debug session is valid, starting from when it's received in the control plane. Min = 1, Max = 15, Default = 10.
	Validity *int `pulumi:"validity"`
}

// The set of arguments for constructing a DebugSession resource.
type DebugSessionArgs struct {
	ApiId pulumi.StringInput
	// Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.
	Count         pulumi.IntPtrInput
	EnvironmentId pulumi.StringInput
	// Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.
	Filter pulumi.StringPtrInput
	// A unique ID for this DebugSession.
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	RevisionId     pulumi.StringInput
	// Optional. The time in seconds after which this DebugSession should end. This value will override the value in query param, if both are provided.
	Timeout pulumi.StringPtrInput
	// Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.
	Tracesize pulumi.IntPtrInput
	// Optional. The length of time, in seconds, that this debug session is valid, starting from when it's received in the control plane. Min = 1, Max = 15, Default = 10.
	Validity pulumi.IntPtrInput
}

func (DebugSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*debugSessionArgs)(nil)).Elem()
}

type DebugSessionInput interface {
	pulumi.Input

	ToDebugSessionOutput() DebugSessionOutput
	ToDebugSessionOutputWithContext(ctx context.Context) DebugSessionOutput
}

func (*DebugSession) ElementType() reflect.Type {
	return reflect.TypeOf((**DebugSession)(nil)).Elem()
}

func (i *DebugSession) ToDebugSessionOutput() DebugSessionOutput {
	return i.ToDebugSessionOutputWithContext(context.Background())
}

func (i *DebugSession) ToDebugSessionOutputWithContext(ctx context.Context) DebugSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DebugSessionOutput)
}

func (i *DebugSession) ToOutput(ctx context.Context) pulumix.Output[*DebugSession] {
	return pulumix.Output[*DebugSession]{
		OutputState: i.ToDebugSessionOutputWithContext(ctx).OutputState,
	}
}

type DebugSessionOutput struct{ *pulumi.OutputState }

func (DebugSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DebugSession)(nil)).Elem()
}

func (o DebugSessionOutput) ToDebugSessionOutput() DebugSessionOutput {
	return o
}

func (o DebugSessionOutput) ToDebugSessionOutputWithContext(ctx context.Context) DebugSessionOutput {
	return o
}

func (o DebugSessionOutput) ToOutput(ctx context.Context) pulumix.Output[*DebugSession] {
	return pulumix.Output[*DebugSession]{
		OutputState: o.OutputState,
	}
}

func (o DebugSessionOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.
func (o DebugSessionOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.IntOutput { return v.Count }).(pulumi.IntOutput)
}

// The first transaction creation timestamp, recorded by UAP.
func (o DebugSessionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o DebugSessionOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.
func (o DebugSessionOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// A unique ID for this DebugSession.
func (o DebugSessionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DebugSessionOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o DebugSessionOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.StringOutput { return v.RevisionId }).(pulumi.StringOutput)
}

// Optional. The time in seconds after which this DebugSession should end. A timeout specified in DebugSession will overwrite this value.
func (o DebugSessionOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.StringOutput { return v.Timeout }).(pulumi.StringOutput)
}

// Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.
func (o DebugSessionOutput) Tracesize() pulumi.IntOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.IntOutput { return v.Tracesize }).(pulumi.IntOutput)
}

// Optional. The length of time, in seconds, that this debug session is valid, starting from when it's received in the control plane. Min = 1, Max = 15, Default = 10.
func (o DebugSessionOutput) Validity() pulumi.IntOutput {
	return o.ApplyT(func(v *DebugSession) pulumi.IntOutput { return v.Validity }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DebugSessionInput)(nil)).Elem(), &DebugSession{})
	pulumi.RegisterOutputType(DebugSessionOutput{})
}
