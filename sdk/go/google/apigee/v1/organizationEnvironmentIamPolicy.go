// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the IAM policy on an environment, if the policy already exists it will be replaced. For more information, see [Manage users, roles, and permissions using the API](https://cloud.google.com/apigee/docs/api-platform/system-administration/manage-users-roles). You must have the `apigee.environments.setIamPolicy` permission to call this API.
type OrganizationEnvironmentIamPolicy struct {
	pulumi.CustomResourceState
}

// NewOrganizationEnvironmentIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewOrganizationEnvironmentIamPolicy(ctx *pulumi.Context,
	name string, args *OrganizationEnvironmentIamPolicyArgs, opts ...pulumi.ResourceOption) (*OrganizationEnvironmentIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentsId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentsId'")
	}
	if args.OrganizationsId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationsId'")
	}
	var resource OrganizationEnvironmentIamPolicy
	err := ctx.RegisterResource("google-cloud:apigee/v1:OrganizationEnvironmentIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationEnvironmentIamPolicy gets an existing OrganizationEnvironmentIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationEnvironmentIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationEnvironmentIamPolicyState, opts ...pulumi.ResourceOption) (*OrganizationEnvironmentIamPolicy, error) {
	var resource OrganizationEnvironmentIamPolicy
	err := ctx.ReadResource("google-cloud:apigee/v1:OrganizationEnvironmentIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationEnvironmentIamPolicy resources.
type organizationEnvironmentIamPolicyState struct {
}

type OrganizationEnvironmentIamPolicyState struct {
}

func (OrganizationEnvironmentIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationEnvironmentIamPolicyState)(nil)).Elem()
}

type organizationEnvironmentIamPolicyArgs struct {
	EnvironmentsId  string `pulumi:"environmentsId"`
	OrganizationsId string `pulumi:"organizationsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy *GoogleIamV1Policy `pulumi:"policy"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a OrganizationEnvironmentIamPolicy resource.
type OrganizationEnvironmentIamPolicyArgs struct {
	EnvironmentsId  pulumi.StringInput
	OrganizationsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy GoogleIamV1PolicyPtrInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (OrganizationEnvironmentIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationEnvironmentIamPolicyArgs)(nil)).Elem()
}

type OrganizationEnvironmentIamPolicyInput interface {
	pulumi.Input

	ToOrganizationEnvironmentIamPolicyOutput() OrganizationEnvironmentIamPolicyOutput
	ToOrganizationEnvironmentIamPolicyOutputWithContext(ctx context.Context) OrganizationEnvironmentIamPolicyOutput
}

func (*OrganizationEnvironmentIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationEnvironmentIamPolicy)(nil))
}

func (i *OrganizationEnvironmentIamPolicy) ToOrganizationEnvironmentIamPolicyOutput() OrganizationEnvironmentIamPolicyOutput {
	return i.ToOrganizationEnvironmentIamPolicyOutputWithContext(context.Background())
}

func (i *OrganizationEnvironmentIamPolicy) ToOrganizationEnvironmentIamPolicyOutputWithContext(ctx context.Context) OrganizationEnvironmentIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationEnvironmentIamPolicyOutput)
}

type OrganizationEnvironmentIamPolicyOutput struct {
	*pulumi.OutputState
}

func (OrganizationEnvironmentIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationEnvironmentIamPolicy)(nil))
}

func (o OrganizationEnvironmentIamPolicyOutput) ToOrganizationEnvironmentIamPolicyOutput() OrganizationEnvironmentIamPolicyOutput {
	return o
}

func (o OrganizationEnvironmentIamPolicyOutput) ToOrganizationEnvironmentIamPolicyOutputWithContext(ctx context.Context) OrganizationEnvironmentIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OrganizationEnvironmentIamPolicyOutput{})
}
