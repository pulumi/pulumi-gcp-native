// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new attachment of an environment to an environment group.
type EnvgroupAttachment struct {
	pulumi.CustomResourceState

	// The time at which the environment group attachment was created as milliseconds since epoch.
	CreatedAt  pulumi.StringOutput `pulumi:"createdAt"`
	EnvgroupId pulumi.StringOutput `pulumi:"envgroupId"`
	// ID of the attached environment.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// ID of the environment group.
	EnvironmentGroupId pulumi.StringOutput `pulumi:"environmentGroupId"`
	// ID of the environment group attachment.
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
}

// NewEnvgroupAttachment registers a new resource with the given unique name, arguments, and options.
func NewEnvgroupAttachment(ctx *pulumi.Context,
	name string, args *EnvgroupAttachmentArgs, opts ...pulumi.ResourceOption) (*EnvgroupAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvgroupId == nil {
		return nil, errors.New("invalid value for required argument 'EnvgroupId'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"envgroupId",
		"organizationId",
	})
	opts = append(opts, replaceOnChanges)
	var resource EnvgroupAttachment
	err := ctx.RegisterResource("google-native:apigee/v1:EnvgroupAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvgroupAttachment gets an existing EnvgroupAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvgroupAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvgroupAttachmentState, opts ...pulumi.ResourceOption) (*EnvgroupAttachment, error) {
	var resource EnvgroupAttachment
	err := ctx.ReadResource("google-native:apigee/v1:EnvgroupAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvgroupAttachment resources.
type envgroupAttachmentState struct {
}

type EnvgroupAttachmentState struct {
}

func (EnvgroupAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*envgroupAttachmentState)(nil)).Elem()
}

type envgroupAttachmentArgs struct {
	EnvgroupId string `pulumi:"envgroupId"`
	// ID of the attached environment.
	Environment string `pulumi:"environment"`
	// ID of the environment group attachment.
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
}

// The set of arguments for constructing a EnvgroupAttachment resource.
type EnvgroupAttachmentArgs struct {
	EnvgroupId pulumi.StringInput
	// ID of the attached environment.
	Environment pulumi.StringInput
	// ID of the environment group attachment.
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
}

func (EnvgroupAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envgroupAttachmentArgs)(nil)).Elem()
}

type EnvgroupAttachmentInput interface {
	pulumi.Input

	ToEnvgroupAttachmentOutput() EnvgroupAttachmentOutput
	ToEnvgroupAttachmentOutputWithContext(ctx context.Context) EnvgroupAttachmentOutput
}

func (*EnvgroupAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvgroupAttachment)(nil)).Elem()
}

func (i *EnvgroupAttachment) ToEnvgroupAttachmentOutput() EnvgroupAttachmentOutput {
	return i.ToEnvgroupAttachmentOutputWithContext(context.Background())
}

func (i *EnvgroupAttachment) ToEnvgroupAttachmentOutputWithContext(ctx context.Context) EnvgroupAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvgroupAttachmentOutput)
}

type EnvgroupAttachmentOutput struct{ *pulumi.OutputState }

func (EnvgroupAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvgroupAttachment)(nil)).Elem()
}

func (o EnvgroupAttachmentOutput) ToEnvgroupAttachmentOutput() EnvgroupAttachmentOutput {
	return o
}

func (o EnvgroupAttachmentOutput) ToEnvgroupAttachmentOutputWithContext(ctx context.Context) EnvgroupAttachmentOutput {
	return o
}

// The time at which the environment group attachment was created as milliseconds since epoch.
func (o EnvgroupAttachmentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvgroupAttachment) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o EnvgroupAttachmentOutput) EnvgroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvgroupAttachment) pulumi.StringOutput { return v.EnvgroupId }).(pulumi.StringOutput)
}

// ID of the attached environment.
func (o EnvgroupAttachmentOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvgroupAttachment) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// ID of the environment group.
func (o EnvgroupAttachmentOutput) EnvironmentGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvgroupAttachment) pulumi.StringOutput { return v.EnvironmentGroupId }).(pulumi.StringOutput)
}

// ID of the environment group attachment.
func (o EnvgroupAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvgroupAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EnvgroupAttachmentOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvgroupAttachment) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvgroupAttachmentInput)(nil)).Elem(), &EnvgroupAttachment{})
	pulumi.RegisterOutputType(EnvgroupAttachmentOutput{})
}
