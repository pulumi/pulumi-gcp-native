// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Submit a data export job to be processed in the background. If the request is successful, the API returns a 201 status, a URI that can be used to retrieve the status of the export job, and the `state` value of "enqueued".
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type Export struct {
	pulumi.CustomResourceState

	// Time the export job was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// Name of the datastore that is the destination of the export job [datastore]
	DatastoreName pulumi.StringOutput `pulumi:"datastoreName"`
	// Description of the export job.
	Description pulumi.StringOutput `pulumi:"description"`
	// Error is set when export fails
	Error pulumi.StringOutput `pulumi:"error"`
	// Execution time for this export job. If the job is still in progress, it will be set to the amount of time that has elapsed since`created`, in seconds. Else, it will set to (`updated` - `created`), in seconds.
	ExecutionTime pulumi.StringOutput `pulumi:"executionTime"`
	// Display name of the export job.
	Name pulumi.StringOutput `pulumi:"name"`
	// Self link of the export job. A URI that can be used to retrieve the status of an export job. Example: `/organizations/myorg/environments/myenv/analytics/exports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`
	Self pulumi.StringOutput `pulumi:"self"`
	// Status of the export job. Valid values include `enqueued`, `running`, `completed`, and `failed`.
	State pulumi.StringOutput `pulumi:"state"`
	// Time the export job was last updated.
	Updated pulumi.StringOutput `pulumi:"updated"`
}

// NewExport registers a new resource with the given unique name, arguments, and options.
func NewExport(ctx *pulumi.Context,
	name string, args *ExportArgs, opts ...pulumi.ResourceOption) (*Export, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatastoreName == nil {
		return nil, errors.New("invalid value for required argument 'DatastoreName'")
	}
	if args.DateRange == nil {
		return nil, errors.New("invalid value for required argument 'DateRange'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	var resource Export
	err := ctx.RegisterResource("google-native:apigee/v1:Export", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExport gets an existing Export resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExportState, opts ...pulumi.ResourceOption) (*Export, error) {
	var resource Export
	err := ctx.ReadResource("google-native:apigee/v1:Export", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Export resources.
type exportState struct {
}

type ExportState struct {
}

func (ExportState) ElementType() reflect.Type {
	return reflect.TypeOf((*exportState)(nil)).Elem()
}

type exportArgs struct {
	// Optional. Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
	CsvDelimiter *string `pulumi:"csvDelimiter"`
	// Name of the preconfigured datastore.
	DatastoreName string `pulumi:"datastoreName"`
	// Date range of the data to export.
	DateRange GoogleCloudApigeeV1DateRange `pulumi:"dateRange"`
	// Optional. Description of the export job.
	Description   *string `pulumi:"description"`
	EnvironmentId string  `pulumi:"environmentId"`
	// Display name of the export job.
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
	// Optional. Output format of the export. Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the `csvDelimiter` property.
	OutputFormat *string `pulumi:"outputFormat"`
}

// The set of arguments for constructing a Export resource.
type ExportArgs struct {
	// Optional. Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
	CsvDelimiter pulumi.StringPtrInput
	// Name of the preconfigured datastore.
	DatastoreName pulumi.StringInput
	// Date range of the data to export.
	DateRange GoogleCloudApigeeV1DateRangeInput
	// Optional. Description of the export job.
	Description   pulumi.StringPtrInput
	EnvironmentId pulumi.StringInput
	// Display name of the export job.
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	// Optional. Output format of the export. Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the `csvDelimiter` property.
	OutputFormat pulumi.StringPtrInput
}

func (ExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exportArgs)(nil)).Elem()
}

type ExportInput interface {
	pulumi.Input

	ToExportOutput() ExportOutput
	ToExportOutputWithContext(ctx context.Context) ExportOutput
}

func (*Export) ElementType() reflect.Type {
	return reflect.TypeOf((**Export)(nil)).Elem()
}

func (i *Export) ToExportOutput() ExportOutput {
	return i.ToExportOutputWithContext(context.Background())
}

func (i *Export) ToExportOutputWithContext(ctx context.Context) ExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportOutput)
}

type ExportOutput struct{ *pulumi.OutputState }

func (ExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Export)(nil)).Elem()
}

func (o ExportOutput) ToExportOutput() ExportOutput {
	return o
}

func (o ExportOutput) ToExportOutputWithContext(ctx context.Context) ExportOutput {
	return o
}

// Time the export job was created.
func (o ExportOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Export) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Name of the datastore that is the destination of the export job [datastore]
func (o ExportOutput) DatastoreName() pulumi.StringOutput {
	return o.ApplyT(func(v *Export) pulumi.StringOutput { return v.DatastoreName }).(pulumi.StringOutput)
}

// Description of the export job.
func (o ExportOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Export) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Error is set when export fails
func (o ExportOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v *Export) pulumi.StringOutput { return v.Error }).(pulumi.StringOutput)
}

// Execution time for this export job. If the job is still in progress, it will be set to the amount of time that has elapsed since`created`, in seconds. Else, it will set to (`updated` - `created`), in seconds.
func (o ExportOutput) ExecutionTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Export) pulumi.StringOutput { return v.ExecutionTime }).(pulumi.StringOutput)
}

// Display name of the export job.
func (o ExportOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Export) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Self link of the export job. A URI that can be used to retrieve the status of an export job. Example: `/organizations/myorg/environments/myenv/analytics/exports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`
func (o ExportOutput) Self() pulumi.StringOutput {
	return o.ApplyT(func(v *Export) pulumi.StringOutput { return v.Self }).(pulumi.StringOutput)
}

// Status of the export job. Valid values include `enqueued`, `running`, `completed`, and `failed`.
func (o ExportOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Export) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Time the export job was last updated.
func (o ExportOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *Export) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExportInput)(nil)).Elem(), &Export{})
	pulumi.RegisterOutputType(ExportOutput{})
}
