// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets the endpoint attachment.
func LookupEndpointAttachment(ctx *pulumi.Context, args *LookupEndpointAttachmentArgs, opts ...pulumi.InvokeOption) (*LookupEndpointAttachmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEndpointAttachmentResult
	err := ctx.Invoke("google-native:apigee/v1:getEndpointAttachment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEndpointAttachmentArgs struct {
	EndpointAttachmentId string `pulumi:"endpointAttachmentId"`
	OrganizationId       string `pulumi:"organizationId"`
}

type LookupEndpointAttachmentResult struct {
	// State of the endpoint attachment connection to the service attachment.
	ConnectionState string `pulumi:"connectionState"`
	// Host that can be used in either the HTTP target endpoint directly or as the host in target server.
	Host string `pulumi:"host"`
	// Location of the endpoint attachment.
	Location string `pulumi:"location"`
	// Name of the endpoint attachment. Use the following structure in your request: `organizations/{org}/endpointAttachments/{endpoint_attachment}`
	Name string `pulumi:"name"`
	// Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment string `pulumi:"serviceAttachment"`
	// State of the endpoint attachment. Values other than `ACTIVE` mean the resource is not ready to use.
	State string `pulumi:"state"`
}

func LookupEndpointAttachmentOutput(ctx *pulumi.Context, args LookupEndpointAttachmentOutputArgs, opts ...pulumi.InvokeOption) LookupEndpointAttachmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEndpointAttachmentResult, error) {
			args := v.(LookupEndpointAttachmentArgs)
			r, err := LookupEndpointAttachment(ctx, &args, opts...)
			var s LookupEndpointAttachmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEndpointAttachmentResultOutput)
}

type LookupEndpointAttachmentOutputArgs struct {
	EndpointAttachmentId pulumi.StringInput `pulumi:"endpointAttachmentId"`
	OrganizationId       pulumi.StringInput `pulumi:"organizationId"`
}

func (LookupEndpointAttachmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointAttachmentArgs)(nil)).Elem()
}

type LookupEndpointAttachmentResultOutput struct{ *pulumi.OutputState }

func (LookupEndpointAttachmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointAttachmentResult)(nil)).Elem()
}

func (o LookupEndpointAttachmentResultOutput) ToLookupEndpointAttachmentResultOutput() LookupEndpointAttachmentResultOutput {
	return o
}

func (o LookupEndpointAttachmentResultOutput) ToLookupEndpointAttachmentResultOutputWithContext(ctx context.Context) LookupEndpointAttachmentResultOutput {
	return o
}

func (o LookupEndpointAttachmentResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupEndpointAttachmentResult] {
	return pulumix.Output[LookupEndpointAttachmentResult]{
		OutputState: o.OutputState,
	}
}

// State of the endpoint attachment connection to the service attachment.
func (o LookupEndpointAttachmentResultOutput) ConnectionState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointAttachmentResult) string { return v.ConnectionState }).(pulumi.StringOutput)
}

// Host that can be used in either the HTTP target endpoint directly or as the host in target server.
func (o LookupEndpointAttachmentResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointAttachmentResult) string { return v.Host }).(pulumi.StringOutput)
}

// Location of the endpoint attachment.
func (o LookupEndpointAttachmentResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointAttachmentResult) string { return v.Location }).(pulumi.StringOutput)
}

// Name of the endpoint attachment. Use the following structure in your request: `organizations/{org}/endpointAttachments/{endpoint_attachment}`
func (o LookupEndpointAttachmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointAttachmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// Format: projects/*/regions/*/serviceAttachments/*
func (o LookupEndpointAttachmentResultOutput) ServiceAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointAttachmentResult) string { return v.ServiceAttachment }).(pulumi.StringOutput)
}

// State of the endpoint attachment. Values other than `ACTIVE` mean the resource is not ready to use.
func (o LookupEndpointAttachmentResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointAttachmentResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEndpointAttachmentResultOutput{})
}
