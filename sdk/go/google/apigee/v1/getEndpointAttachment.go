// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the specified EndpointAttachment.
func LookupEndpointAttachment(ctx *pulumi.Context, args *LookupEndpointAttachmentArgs, opts ...pulumi.InvokeOption) (*LookupEndpointAttachmentResult, error) {
	var rv LookupEndpointAttachmentResult
	err := ctx.Invoke("google-native:apigee/v1:getEndpointAttachment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEndpointAttachmentArgs struct {
	EndpointAttachmentId string `pulumi:"endpointAttachmentId"`
	OrganizationId       string `pulumi:"organizationId"`
}

type LookupEndpointAttachmentResult struct {
	// Host that can be used in either HTTP Target Endpoint directly, or as the host in Target Server.
	Host string `pulumi:"host"`
	// Location of the endpoint attachment.
	Location string `pulumi:"location"`
	// Name of the Endpoint Attachment in the following format: `organizations/{organization}/endpointAttachments/{endpoint_attachment}`.
	Name string `pulumi:"name"`
	// Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment string `pulumi:"serviceAttachment"`
}

func LookupEndpointAttachmentOutput(ctx *pulumi.Context, args LookupEndpointAttachmentOutputArgs, opts ...pulumi.InvokeOption) LookupEndpointAttachmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEndpointAttachmentResult, error) {
			args := v.(LookupEndpointAttachmentArgs)
			r, err := LookupEndpointAttachment(ctx, &args, opts...)
			return *r, err
		}).(LookupEndpointAttachmentResultOutput)
}

type LookupEndpointAttachmentOutputArgs struct {
	EndpointAttachmentId pulumi.StringInput `pulumi:"endpointAttachmentId"`
	OrganizationId       pulumi.StringInput `pulumi:"organizationId"`
}

func (LookupEndpointAttachmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointAttachmentArgs)(nil)).Elem()
}

type LookupEndpointAttachmentResultOutput struct{ *pulumi.OutputState }

func (LookupEndpointAttachmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointAttachmentResult)(nil)).Elem()
}

func (o LookupEndpointAttachmentResultOutput) ToLookupEndpointAttachmentResultOutput() LookupEndpointAttachmentResultOutput {
	return o
}

func (o LookupEndpointAttachmentResultOutput) ToLookupEndpointAttachmentResultOutputWithContext(ctx context.Context) LookupEndpointAttachmentResultOutput {
	return o
}

// Host that can be used in either HTTP Target Endpoint directly, or as the host in Target Server.
func (o LookupEndpointAttachmentResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointAttachmentResult) string { return v.Host }).(pulumi.StringOutput)
}

// Location of the endpoint attachment.
func (o LookupEndpointAttachmentResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointAttachmentResult) string { return v.Location }).(pulumi.StringOutput)
}

// Name of the Endpoint Attachment in the following format: `organizations/{organization}/endpointAttachments/{endpoint_attachment}`.
func (o LookupEndpointAttachmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointAttachmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// Format: projects/*/regions/*/serviceAttachments/*
func (o LookupEndpointAttachmentResultOutput) ServiceAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointAttachmentResult) string { return v.ServiceAttachment }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEndpointAttachmentResultOutput{})
}
