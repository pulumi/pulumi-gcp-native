// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a TargetServer in the specified environment.
type Targetserver struct {
	pulumi.CustomResourceState

	// Optional. A human-readable description of this TargetServer.
	Description pulumi.StringOutput `pulumi:"description"`
	// Required. The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host pulumi.StringOutput `pulumi:"host"`
	// Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// Required. The resource id of this target server. Values must match the regular expression
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port pulumi.IntOutput `pulumi:"port"`
	// Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	SSLInfo GoogleCloudApigeeV1TlsInfoResponseOutput `pulumi:"sSLInfo"`
}

// NewTargetserver registers a new resource with the given unique name, arguments, and options.
func NewTargetserver(ctx *pulumi.Context,
	name string, args *TargetserverArgs, opts ...pulumi.ResourceOption) (*Targetserver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	var resource Targetserver
	err := ctx.RegisterResource("google-native:apigee/v1:Targetserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetserver gets an existing Targetserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetserverState, opts ...pulumi.ResourceOption) (*Targetserver, error) {
	var resource Targetserver
	err := ctx.ReadResource("google-native:apigee/v1:Targetserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Targetserver resources.
type targetserverState struct {
	// Optional. A human-readable description of this TargetServer.
	Description *string `pulumi:"description"`
	// Required. The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host *string `pulumi:"host"`
	// Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Required. The resource id of this target server. Values must match the regular expression
	Name *string `pulumi:"name"`
	// Required. The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port *int `pulumi:"port"`
	// Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	SSLInfo *GoogleCloudApigeeV1TlsInfoResponse `pulumi:"sSLInfo"`
}

type TargetserverState struct {
	// Optional. A human-readable description of this TargetServer.
	Description pulumi.StringPtrInput
	// Required. The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host pulumi.StringPtrInput
	// Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled pulumi.BoolPtrInput
	// Required. The resource id of this target server. Values must match the regular expression
	Name pulumi.StringPtrInput
	// Required. The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port pulumi.IntPtrInput
	// Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	SSLInfo GoogleCloudApigeeV1TlsInfoResponsePtrInput
}

func (TargetserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetserverState)(nil)).Elem()
}

type targetserverArgs struct {
	// Optional. A human-readable description of this TargetServer.
	Description   *string `pulumi:"description"`
	EnvironmentId string  `pulumi:"environmentId"`
	// Required. The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host *string `pulumi:"host"`
	// Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Required. The resource id of this target server. Values must match the regular expression
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
	// Required. The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port *int `pulumi:"port"`
	// Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	SSLInfo *GoogleCloudApigeeV1TlsInfo `pulumi:"sSLInfo"`
}

// The set of arguments for constructing a Targetserver resource.
type TargetserverArgs struct {
	// Optional. A human-readable description of this TargetServer.
	Description   pulumi.StringPtrInput
	EnvironmentId pulumi.StringInput
	// Required. The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host pulumi.StringPtrInput
	// Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled pulumi.BoolPtrInput
	// Required. The resource id of this target server. Values must match the regular expression
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	// Required. The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port pulumi.IntPtrInput
	// Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	SSLInfo GoogleCloudApigeeV1TlsInfoPtrInput
}

func (TargetserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetserverArgs)(nil)).Elem()
}

type TargetserverInput interface {
	pulumi.Input

	ToTargetserverOutput() TargetserverOutput
	ToTargetserverOutputWithContext(ctx context.Context) TargetserverOutput
}

func (*Targetserver) ElementType() reflect.Type {
	return reflect.TypeOf((*Targetserver)(nil))
}

func (i *Targetserver) ToTargetserverOutput() TargetserverOutput {
	return i.ToTargetserverOutputWithContext(context.Background())
}

func (i *Targetserver) ToTargetserverOutputWithContext(ctx context.Context) TargetserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetserverOutput)
}

type TargetserverOutput struct {
	*pulumi.OutputState
}

func (TargetserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Targetserver)(nil))
}

func (o TargetserverOutput) ToTargetserverOutput() TargetserverOutput {
	return o
}

func (o TargetserverOutput) ToTargetserverOutputWithContext(ctx context.Context) TargetserverOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TargetserverOutput{})
}
