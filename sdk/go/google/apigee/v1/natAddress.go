// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a NAT address. The address is created in the RESERVED state and a static external IP address will be provisioned. At this time, the instance will not use this IP address for Internet egress traffic. The address can be activated for use once any required firewall IP whitelisting has been completed. **Note:** Not supported for Apigee hybrid.
type NatAddress struct {
	pulumi.CustomResourceState

	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The static IPV4 address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Resource ID of the NAT address.
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// State of the nat address.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewNatAddress registers a new resource with the given unique name, arguments, and options.
func NewNatAddress(ctx *pulumi.Context,
	name string, args *NatAddressArgs, opts ...pulumi.ResourceOption) (*NatAddress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"instanceId",
		"organizationId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatAddress
	err := ctx.RegisterResource("google-native:apigee/v1:NatAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatAddress gets an existing NatAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatAddressState, opts ...pulumi.ResourceOption) (*NatAddress, error) {
	var resource NatAddress
	err := ctx.ReadResource("google-native:apigee/v1:NatAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatAddress resources.
type natAddressState struct {
}

type NatAddressState struct {
}

func (NatAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*natAddressState)(nil)).Elem()
}

type natAddressArgs struct {
	InstanceId string `pulumi:"instanceId"`
	// Resource ID of the NAT address.
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
}

// The set of arguments for constructing a NatAddress resource.
type NatAddressArgs struct {
	InstanceId pulumi.StringInput
	// Resource ID of the NAT address.
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
}

func (NatAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natAddressArgs)(nil)).Elem()
}

type NatAddressInput interface {
	pulumi.Input

	ToNatAddressOutput() NatAddressOutput
	ToNatAddressOutputWithContext(ctx context.Context) NatAddressOutput
}

func (*NatAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**NatAddress)(nil)).Elem()
}

func (i *NatAddress) ToNatAddressOutput() NatAddressOutput {
	return i.ToNatAddressOutputWithContext(context.Background())
}

func (i *NatAddress) ToNatAddressOutputWithContext(ctx context.Context) NatAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatAddressOutput)
}

type NatAddressOutput struct{ *pulumi.OutputState }

func (NatAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatAddress)(nil)).Elem()
}

func (o NatAddressOutput) ToNatAddressOutput() NatAddressOutput {
	return o
}

func (o NatAddressOutput) ToNatAddressOutputWithContext(ctx context.Context) NatAddressOutput {
	return o
}

func (o NatAddressOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatAddress) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The static IPV4 address.
func (o NatAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NatAddress) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Resource ID of the NAT address.
func (o NatAddressOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NatAddress) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NatAddressOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatAddress) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// State of the nat address.
func (o NatAddressOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NatAddress) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatAddressInput)(nil)).Elem(), &NatAddress{})
	pulumi.RegisterOutputType(NatAddressOutput{})
}
