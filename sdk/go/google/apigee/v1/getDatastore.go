// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a Datastore
func LookupDatastore(ctx *pulumi.Context, args *LookupDatastoreArgs, opts ...pulumi.InvokeOption) (*LookupDatastoreResult, error) {
	var rv LookupDatastoreResult
	err := ctx.Invoke("google-native:apigee/v1:getDatastore", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDatastoreArgs struct {
	DatastoreId    string `pulumi:"datastoreId"`
	OrganizationId string `pulumi:"organizationId"`
}

type LookupDatastoreResult struct {
	// Datastore create time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
	CreateTime string `pulumi:"createTime"`
	// Datastore Configurations.
	DatastoreConfig GoogleCloudApigeeV1DatastoreConfigResponse `pulumi:"datastoreConfig"`
	// Display name in UI
	DisplayName string `pulumi:"displayName"`
	// Datastore last update time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
	LastUpdateTime string `pulumi:"lastUpdateTime"`
	// Organization that the datastore belongs to
	Org string `pulumi:"org"`
	// Resource link of Datastore. Example: `/organizations/{org}/analytics/datastores/{uuid}`
	Self string `pulumi:"self"`
	// Destination storage type. Supported types `gcs` or `bigquery`.
	TargetType string `pulumi:"targetType"`
}

func LookupDatastoreOutput(ctx *pulumi.Context, args LookupDatastoreOutputArgs, opts ...pulumi.InvokeOption) LookupDatastoreResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatastoreResult, error) {
			args := v.(LookupDatastoreArgs)
			r, err := LookupDatastore(ctx, &args, opts...)
			var s LookupDatastoreResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatastoreResultOutput)
}

type LookupDatastoreOutputArgs struct {
	DatastoreId    pulumi.StringInput `pulumi:"datastoreId"`
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
}

func (LookupDatastoreOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatastoreArgs)(nil)).Elem()
}

type LookupDatastoreResultOutput struct{ *pulumi.OutputState }

func (LookupDatastoreResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatastoreResult)(nil)).Elem()
}

func (o LookupDatastoreResultOutput) ToLookupDatastoreResultOutput() LookupDatastoreResultOutput {
	return o
}

func (o LookupDatastoreResultOutput) ToLookupDatastoreResultOutputWithContext(ctx context.Context) LookupDatastoreResultOutput {
	return o
}

// Datastore create time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
func (o LookupDatastoreResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatastoreResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Datastore Configurations.
func (o LookupDatastoreResultOutput) DatastoreConfig() GoogleCloudApigeeV1DatastoreConfigResponseOutput {
	return o.ApplyT(func(v LookupDatastoreResult) GoogleCloudApigeeV1DatastoreConfigResponse { return v.DatastoreConfig }).(GoogleCloudApigeeV1DatastoreConfigResponseOutput)
}

// Display name in UI
func (o LookupDatastoreResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatastoreResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Datastore last update time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
func (o LookupDatastoreResultOutput) LastUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatastoreResult) string { return v.LastUpdateTime }).(pulumi.StringOutput)
}

// Organization that the datastore belongs to
func (o LookupDatastoreResultOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatastoreResult) string { return v.Org }).(pulumi.StringOutput)
}

// Resource link of Datastore. Example: `/organizations/{org}/analytics/datastores/{uuid}`
func (o LookupDatastoreResultOutput) Self() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatastoreResult) string { return v.Self }).(pulumi.StringOutput)
}

// Destination storage type. Supported types `gcs` or `bigquery`.
func (o LookupDatastoreResultOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatastoreResult) string { return v.TargetType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatastoreResultOutput{})
}
