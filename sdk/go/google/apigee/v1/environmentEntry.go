// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
type EnvironmentEntry struct {
	pulumi.CustomResourceState

	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	KeyvaluemapId pulumi.StringOutput `pulumi:"keyvaluemapId"`
	// Resource URI that can be used to identify the scope of the key value map entries.
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Data or payload that is being retrieved and associated with the unique key.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewEnvironmentEntry registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentEntry(ctx *pulumi.Context,
	name string, args *EnvironmentEntryArgs, opts ...pulumi.ResourceOption) (*EnvironmentEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.KeyvaluemapId == nil {
		return nil, errors.New("invalid value for required argument 'KeyvaluemapId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"environmentId",
		"keyvaluemapId",
		"organizationId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvironmentEntry
	err := ctx.RegisterResource("google-native:apigee/v1:EnvironmentEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentEntry gets an existing EnvironmentEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentEntryState, opts ...pulumi.ResourceOption) (*EnvironmentEntry, error) {
	var resource EnvironmentEntry
	err := ctx.ReadResource("google-native:apigee/v1:EnvironmentEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentEntry resources.
type environmentEntryState struct {
}

type EnvironmentEntryState struct {
}

func (EnvironmentEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentEntryState)(nil)).Elem()
}

type environmentEntryArgs struct {
	EnvironmentId string `pulumi:"environmentId"`
	KeyvaluemapId string `pulumi:"keyvaluemapId"`
	// Resource URI that can be used to identify the scope of the key value map entries.
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
	// Data or payload that is being retrieved and associated with the unique key.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a EnvironmentEntry resource.
type EnvironmentEntryArgs struct {
	EnvironmentId pulumi.StringInput
	KeyvaluemapId pulumi.StringInput
	// Resource URI that can be used to identify the scope of the key value map entries.
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	// Data or payload that is being retrieved and associated with the unique key.
	Value pulumi.StringInput
}

func (EnvironmentEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentEntryArgs)(nil)).Elem()
}

type EnvironmentEntryInput interface {
	pulumi.Input

	ToEnvironmentEntryOutput() EnvironmentEntryOutput
	ToEnvironmentEntryOutputWithContext(ctx context.Context) EnvironmentEntryOutput
}

func (*EnvironmentEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentEntry)(nil)).Elem()
}

func (i *EnvironmentEntry) ToEnvironmentEntryOutput() EnvironmentEntryOutput {
	return i.ToEnvironmentEntryOutputWithContext(context.Background())
}

func (i *EnvironmentEntry) ToEnvironmentEntryOutputWithContext(ctx context.Context) EnvironmentEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentEntryOutput)
}

func (i *EnvironmentEntry) ToOutput(ctx context.Context) pulumix.Output[*EnvironmentEntry] {
	return pulumix.Output[*EnvironmentEntry]{
		OutputState: i.ToEnvironmentEntryOutputWithContext(ctx).OutputState,
	}
}

type EnvironmentEntryOutput struct{ *pulumi.OutputState }

func (EnvironmentEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentEntry)(nil)).Elem()
}

func (o EnvironmentEntryOutput) ToEnvironmentEntryOutput() EnvironmentEntryOutput {
	return o
}

func (o EnvironmentEntryOutput) ToEnvironmentEntryOutputWithContext(ctx context.Context) EnvironmentEntryOutput {
	return o
}

func (o EnvironmentEntryOutput) ToOutput(ctx context.Context) pulumix.Output[*EnvironmentEntry] {
	return pulumix.Output[*EnvironmentEntry]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentEntryOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEntry) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

func (o EnvironmentEntryOutput) KeyvaluemapId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEntry) pulumi.StringOutput { return v.KeyvaluemapId }).(pulumi.StringOutput)
}

// Resource URI that can be used to identify the scope of the key value map entries.
func (o EnvironmentEntryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEntry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EnvironmentEntryOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEntry) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Data or payload that is being retrieved and associated with the unique key.
func (o EnvironmentEntryOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEntry) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentEntryInput)(nil)).Elem(), &EnvironmentEntry{})
	pulumi.RegisterOutputType(EnvironmentEntryOutput{})
}
