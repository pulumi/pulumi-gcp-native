// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the contents of a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
func LookupResourcefile(ctx *pulumi.Context, args *LookupResourcefileArgs, opts ...pulumi.InvokeOption) (*LookupResourcefileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResourcefileResult
	err := ctx.Invoke("google-native:apigee/v1:getResourcefile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupResourcefileArgs struct {
	EnvironmentId  string `pulumi:"environmentId"`
	Name           string `pulumi:"name"`
	OrganizationId string `pulumi:"organizationId"`
	Type           string `pulumi:"type"`
}

type LookupResourcefileResult struct {
	// The HTTP Content-Type header value specifying the content type of the body.
	ContentType string `pulumi:"contentType"`
	// The HTTP request/response body as raw binary.
	Data string `pulumi:"data"`
	// Application specific response metadata. Must be set in the first response for streaming APIs.
	Extensions []map[string]interface{} `pulumi:"extensions"`
}

func LookupResourcefileOutput(ctx *pulumi.Context, args LookupResourcefileOutputArgs, opts ...pulumi.InvokeOption) LookupResourcefileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupResourcefileResult, error) {
			args := v.(LookupResourcefileArgs)
			r, err := LookupResourcefile(ctx, &args, opts...)
			var s LookupResourcefileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupResourcefileResultOutput)
}

type LookupResourcefileOutputArgs struct {
	EnvironmentId  pulumi.StringInput `pulumi:"environmentId"`
	Name           pulumi.StringInput `pulumi:"name"`
	OrganizationId pulumi.StringInput `pulumi:"organizationId"`
	Type           pulumi.StringInput `pulumi:"type"`
}

func (LookupResourcefileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourcefileArgs)(nil)).Elem()
}

type LookupResourcefileResultOutput struct{ *pulumi.OutputState }

func (LookupResourcefileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResourcefileResult)(nil)).Elem()
}

func (o LookupResourcefileResultOutput) ToLookupResourcefileResultOutput() LookupResourcefileResultOutput {
	return o
}

func (o LookupResourcefileResultOutput) ToLookupResourcefileResultOutputWithContext(ctx context.Context) LookupResourcefileResultOutput {
	return o
}

// The HTTP Content-Type header value specifying the content type of the body.
func (o LookupResourcefileResultOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResourcefileResult) string { return v.ContentType }).(pulumi.StringOutput)
}

// The HTTP request/response body as raw binary.
func (o LookupResourcefileResultOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResourcefileResult) string { return v.Data }).(pulumi.StringOutput)
}

// Application specific response metadata. Must be set in the first response for streaming APIs.
func (o LookupResourcefileResultOutput) Extensions() pulumi.MapArrayOutput {
	return o.ApplyT(func(v LookupResourcefileResult) []map[string]interface{} { return v.Extensions }).(pulumi.MapArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResourcefileResultOutput{})
}
