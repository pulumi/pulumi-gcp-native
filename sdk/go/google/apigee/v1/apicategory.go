// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new category on the portal.
type Apicategory struct {
	pulumi.CustomResourceState

	// Details of category.
	Data GoogleCloudApigeeV1ApiCategoryDataResponseOutput `pulumi:"data"`
	// ID that can be used to find errors in the log files.
	ErrorCode pulumi.StringOutput `pulumi:"errorCode"`
	// Description of the operation.
	Message        pulumi.StringOutput `pulumi:"message"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// ID that can be used to find request details in the log files.
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	SiteId    pulumi.StringOutput `pulumi:"siteId"`
	// Status of the operation.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewApicategory registers a new resource with the given unique name, arguments, and options.
func NewApicategory(ctx *pulumi.Context,
	name string, args *ApicategoryArgs, opts ...pulumi.ResourceOption) (*Apicategory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	var resource Apicategory
	err := ctx.RegisterResource("google-native:apigee/v1:Apicategory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApicategory gets an existing Apicategory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApicategory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApicategoryState, opts ...pulumi.ResourceOption) (*Apicategory, error) {
	var resource Apicategory
	err := ctx.ReadResource("google-native:apigee/v1:Apicategory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Apicategory resources.
type apicategoryState struct {
}

type ApicategoryState struct {
}

func (ApicategoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*apicategoryState)(nil)).Elem()
}

type apicategoryArgs struct {
	// ID of the category (a UUID).
	ApicategoryId *string `pulumi:"apicategoryId"`
	// Name of the category.
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
	// Name of the portal.
	SiteId string `pulumi:"siteId"`
	// Time the category was last modified in milliseconds since epoch.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a Apicategory resource.
type ApicategoryArgs struct {
	// ID of the category (a UUID).
	ApicategoryId pulumi.StringPtrInput
	// Name of the category.
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	// Name of the portal.
	SiteId pulumi.StringInput
	// Time the category was last modified in milliseconds since epoch.
	UpdateTime pulumi.StringPtrInput
}

func (ApicategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apicategoryArgs)(nil)).Elem()
}

type ApicategoryInput interface {
	pulumi.Input

	ToApicategoryOutput() ApicategoryOutput
	ToApicategoryOutputWithContext(ctx context.Context) ApicategoryOutput
}

func (*Apicategory) ElementType() reflect.Type {
	return reflect.TypeOf((**Apicategory)(nil)).Elem()
}

func (i *Apicategory) ToApicategoryOutput() ApicategoryOutput {
	return i.ToApicategoryOutputWithContext(context.Background())
}

func (i *Apicategory) ToApicategoryOutputWithContext(ctx context.Context) ApicategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApicategoryOutput)
}

type ApicategoryOutput struct{ *pulumi.OutputState }

func (ApicategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Apicategory)(nil)).Elem()
}

func (o ApicategoryOutput) ToApicategoryOutput() ApicategoryOutput {
	return o
}

func (o ApicategoryOutput) ToApicategoryOutputWithContext(ctx context.Context) ApicategoryOutput {
	return o
}

// Details of category.
func (o ApicategoryOutput) Data() GoogleCloudApigeeV1ApiCategoryDataResponseOutput {
	return o.ApplyT(func(v *Apicategory) GoogleCloudApigeeV1ApiCategoryDataResponseOutput { return v.Data }).(GoogleCloudApigeeV1ApiCategoryDataResponseOutput)
}

// ID that can be used to find errors in the log files.
func (o ApicategoryOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Apicategory) pulumi.StringOutput { return v.ErrorCode }).(pulumi.StringOutput)
}

// Description of the operation.
func (o ApicategoryOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *Apicategory) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

func (o ApicategoryOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Apicategory) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// ID that can be used to find request details in the log files.
func (o ApicategoryOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *Apicategory) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o ApicategoryOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *Apicategory) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

// Status of the operation.
func (o ApicategoryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Apicategory) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApicategoryInput)(nil)).Elem(), &Apicategory{})
	pulumi.RegisterOutputType(ApicategoryOutput{})
}
