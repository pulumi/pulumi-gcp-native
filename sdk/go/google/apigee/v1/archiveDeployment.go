// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new ArchiveDeployment.
type ArchiveDeployment struct {
	pulumi.CustomResourceState

	// The time at which the Archive Deployment was created in milliseconds since the epoch.
	CreatedAt     pulumi.StringOutput `pulumi:"createdAt"`
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Input only. The Google Cloud Storage signed URL returned from GenerateUploadUrl and used to upload the Archive zip file.
	GcsUri pulumi.StringOutput `pulumi:"gcsUri"`
	// User-supplied key-value pairs used to organize ArchiveDeployments. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the Archive Deployment in the following format: `organizations/{org}/environments/{env}/archiveDeployments/{id}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// A reference to the LRO that created this Archive Deployment in the following format: `organizations/{org}/operations/{id}`
	Operation      pulumi.StringOutput `pulumi:"operation"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The time at which the Archive Deployment was updated in milliseconds since the epoch.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewArchiveDeployment registers a new resource with the given unique name, arguments, and options.
func NewArchiveDeployment(ctx *pulumi.Context,
	name string, args *ArchiveDeploymentArgs, opts ...pulumi.ResourceOption) (*ArchiveDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"environmentId",
		"organizationId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ArchiveDeployment
	err := ctx.RegisterResource("google-native:apigee/v1:ArchiveDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArchiveDeployment gets an existing ArchiveDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArchiveDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArchiveDeploymentState, opts ...pulumi.ResourceOption) (*ArchiveDeployment, error) {
	var resource ArchiveDeployment
	err := ctx.ReadResource("google-native:apigee/v1:ArchiveDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArchiveDeployment resources.
type archiveDeploymentState struct {
}

type ArchiveDeploymentState struct {
}

func (ArchiveDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*archiveDeploymentState)(nil)).Elem()
}

type archiveDeploymentArgs struct {
	EnvironmentId string `pulumi:"environmentId"`
	// Input only. The Google Cloud Storage signed URL returned from GenerateUploadUrl and used to upload the Archive zip file.
	GcsUri *string `pulumi:"gcsUri"`
	// User-supplied key-value pairs used to organize ArchiveDeployments. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels map[string]string `pulumi:"labels"`
	// Name of the Archive Deployment in the following format: `organizations/{org}/environments/{env}/archiveDeployments/{id}`.
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
}

// The set of arguments for constructing a ArchiveDeployment resource.
type ArchiveDeploymentArgs struct {
	EnvironmentId pulumi.StringInput
	// Input only. The Google Cloud Storage signed URL returned from GenerateUploadUrl and used to upload the Archive zip file.
	GcsUri pulumi.StringPtrInput
	// User-supplied key-value pairs used to organize ArchiveDeployments. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels pulumi.StringMapInput
	// Name of the Archive Deployment in the following format: `organizations/{org}/environments/{env}/archiveDeployments/{id}`.
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
}

func (ArchiveDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*archiveDeploymentArgs)(nil)).Elem()
}

type ArchiveDeploymentInput interface {
	pulumi.Input

	ToArchiveDeploymentOutput() ArchiveDeploymentOutput
	ToArchiveDeploymentOutputWithContext(ctx context.Context) ArchiveDeploymentOutput
}

func (*ArchiveDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**ArchiveDeployment)(nil)).Elem()
}

func (i *ArchiveDeployment) ToArchiveDeploymentOutput() ArchiveDeploymentOutput {
	return i.ToArchiveDeploymentOutputWithContext(context.Background())
}

func (i *ArchiveDeployment) ToArchiveDeploymentOutputWithContext(ctx context.Context) ArchiveDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchiveDeploymentOutput)
}

func (i *ArchiveDeployment) ToOutput(ctx context.Context) pulumix.Output[*ArchiveDeployment] {
	return pulumix.Output[*ArchiveDeployment]{
		OutputState: i.ToArchiveDeploymentOutputWithContext(ctx).OutputState,
	}
}

type ArchiveDeploymentOutput struct{ *pulumi.OutputState }

func (ArchiveDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArchiveDeployment)(nil)).Elem()
}

func (o ArchiveDeploymentOutput) ToArchiveDeploymentOutput() ArchiveDeploymentOutput {
	return o
}

func (o ArchiveDeploymentOutput) ToArchiveDeploymentOutputWithContext(ctx context.Context) ArchiveDeploymentOutput {
	return o
}

func (o ArchiveDeploymentOutput) ToOutput(ctx context.Context) pulumix.Output[*ArchiveDeployment] {
	return pulumix.Output[*ArchiveDeployment]{
		OutputState: o.OutputState,
	}
}

// The time at which the Archive Deployment was created in milliseconds since the epoch.
func (o ArchiveDeploymentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ArchiveDeployment) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ArchiveDeploymentOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ArchiveDeployment) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Input only. The Google Cloud Storage signed URL returned from GenerateUploadUrl and used to upload the Archive zip file.
func (o ArchiveDeploymentOutput) GcsUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ArchiveDeployment) pulumi.StringOutput { return v.GcsUri }).(pulumi.StringOutput)
}

// User-supplied key-value pairs used to organize ArchiveDeployments. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
func (o ArchiveDeploymentOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArchiveDeployment) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the Archive Deployment in the following format: `organizations/{org}/environments/{env}/archiveDeployments/{id}`.
func (o ArchiveDeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ArchiveDeployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A reference to the LRO that created this Archive Deployment in the following format: `organizations/{org}/operations/{id}`
func (o ArchiveDeploymentOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v *ArchiveDeployment) pulumi.StringOutput { return v.Operation }).(pulumi.StringOutput)
}

func (o ArchiveDeploymentOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ArchiveDeployment) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The time at which the Archive Deployment was updated in milliseconds since the epoch.
func (o ArchiveDeploymentOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ArchiveDeployment) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArchiveDeploymentInput)(nil)).Elem(), &ArchiveDeployment{})
	pulumi.RegisterOutputType(ArchiveDeploymentOutput{})
}
