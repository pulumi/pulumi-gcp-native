// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a Datastore for an org
// Auto-naming is currently not supported for this resource.
type Datastore struct {
	pulumi.CustomResourceState

	// Datastore create time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Datastore Configurations.
	DatastoreConfig GoogleCloudApigeeV1DatastoreConfigResponseOutput `pulumi:"datastoreConfig"`
	// Display name in UI
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Datastore last update time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
	LastUpdateTime pulumi.StringOutput `pulumi:"lastUpdateTime"`
	// Organization that the datastore belongs to
	Org            pulumi.StringOutput `pulumi:"org"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Resource link of Datastore. Example: `/organizations/{org}/analytics/datastores/{uuid}`
	Self pulumi.StringOutput `pulumi:"self"`
	// Destination storage type. Supported types `gcs` or `bigquery`.
	TargetType pulumi.StringOutput `pulumi:"targetType"`
}

// NewDatastore registers a new resource with the given unique name, arguments, and options.
func NewDatastore(ctx *pulumi.Context,
	name string, args *DatastoreArgs, opts ...pulumi.ResourceOption) (*Datastore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	var resource Datastore
	err := ctx.RegisterResource("google-native:apigee/v1:Datastore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatastore gets an existing Datastore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatastore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatastoreState, opts ...pulumi.ResourceOption) (*Datastore, error) {
	var resource Datastore
	err := ctx.ReadResource("google-native:apigee/v1:Datastore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datastore resources.
type datastoreState struct {
}

type DatastoreState struct {
}

func (DatastoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreState)(nil)).Elem()
}

type datastoreArgs struct {
	// Datastore Configurations.
	DatastoreConfig *GoogleCloudApigeeV1DatastoreConfig `pulumi:"datastoreConfig"`
	// Display name in UI
	DisplayName    string `pulumi:"displayName"`
	OrganizationId string `pulumi:"organizationId"`
	// Destination storage type. Supported types `gcs` or `bigquery`.
	TargetType *string `pulumi:"targetType"`
}

// The set of arguments for constructing a Datastore resource.
type DatastoreArgs struct {
	// Datastore Configurations.
	DatastoreConfig GoogleCloudApigeeV1DatastoreConfigPtrInput
	// Display name in UI
	DisplayName    pulumi.StringInput
	OrganizationId pulumi.StringInput
	// Destination storage type. Supported types `gcs` or `bigquery`.
	TargetType pulumi.StringPtrInput
}

func (DatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datastoreArgs)(nil)).Elem()
}

type DatastoreInput interface {
	pulumi.Input

	ToDatastoreOutput() DatastoreOutput
	ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput
}

func (*Datastore) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastore)(nil)).Elem()
}

func (i *Datastore) ToDatastoreOutput() DatastoreOutput {
	return i.ToDatastoreOutputWithContext(context.Background())
}

func (i *Datastore) ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreOutput)
}

type DatastoreOutput struct{ *pulumi.OutputState }

func (DatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastore)(nil)).Elem()
}

func (o DatastoreOutput) ToDatastoreOutput() DatastoreOutput {
	return o
}

func (o DatastoreOutput) ToDatastoreOutputWithContext(ctx context.Context) DatastoreOutput {
	return o
}

// Datastore create time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
func (o DatastoreOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Datastore Configurations.
func (o DatastoreOutput) DatastoreConfig() GoogleCloudApigeeV1DatastoreConfigResponseOutput {
	return o.ApplyT(func(v *Datastore) GoogleCloudApigeeV1DatastoreConfigResponseOutput { return v.DatastoreConfig }).(GoogleCloudApigeeV1DatastoreConfigResponseOutput)
}

// Display name in UI
func (o DatastoreOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Datastore last update time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
func (o DatastoreOutput) LastUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.LastUpdateTime }).(pulumi.StringOutput)
}

// Organization that the datastore belongs to
func (o DatastoreOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.Org }).(pulumi.StringOutput)
}

func (o DatastoreOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Resource link of Datastore. Example: `/organizations/{org}/analytics/datastores/{uuid}`
func (o DatastoreOutput) Self() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.Self }).(pulumi.StringOutput)
}

// Destination storage type. Supported types `gcs` or `bigquery`.
func (o DatastoreOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastore) pulumi.StringOutput { return v.TargetType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreInput)(nil)).Elem(), &Datastore{})
	pulumi.RegisterOutputType(DatastoreOutput{})
}
