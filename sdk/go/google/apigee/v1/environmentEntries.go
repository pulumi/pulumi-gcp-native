// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates key value entries in a org, env or apis scoped key value map.
type EnvironmentEntries struct {
	pulumi.CustomResourceState

	// Resource URI that can be used to identify the scope of the key value map entries.
	Name pulumi.StringOutput `pulumi:"name"`
	// Data or payload that is being retrieved and associated with the unique key.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewEnvironmentEntries registers a new resource with the given unique name, arguments, and options.
func NewEnvironmentEntries(ctx *pulumi.Context,
	name string, args *EnvironmentEntriesArgs, opts ...pulumi.ResourceOption) (*EnvironmentEntries, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.KeyvaluemapId == nil {
		return nil, errors.New("invalid value for required argument 'KeyvaluemapId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	var resource EnvironmentEntries
	err := ctx.RegisterResource("google-native:apigee/v1:EnvironmentEntries", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironmentEntries gets an existing EnvironmentEntries resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironmentEntries(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentEntriesState, opts ...pulumi.ResourceOption) (*EnvironmentEntries, error) {
	var resource EnvironmentEntries
	err := ctx.ReadResource("google-native:apigee/v1:EnvironmentEntries", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvironmentEntries resources.
type environmentEntriesState struct {
}

type EnvironmentEntriesState struct {
}

func (EnvironmentEntriesState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentEntriesState)(nil)).Elem()
}

type environmentEntriesArgs struct {
	EnvironmentId string `pulumi:"environmentId"`
	KeyvaluemapId string `pulumi:"keyvaluemapId"`
	// Resource URI that can be used to identify the scope of the key value map entries.
	Name           *string `pulumi:"name"`
	OrganizationId string  `pulumi:"organizationId"`
	// Data or payload that is being retrieved and associated with the unique key.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a EnvironmentEntries resource.
type EnvironmentEntriesArgs struct {
	EnvironmentId pulumi.StringInput
	KeyvaluemapId pulumi.StringInput
	// Resource URI that can be used to identify the scope of the key value map entries.
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	// Data or payload that is being retrieved and associated with the unique key.
	Value pulumi.StringInput
}

func (EnvironmentEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentEntriesArgs)(nil)).Elem()
}

type EnvironmentEntriesInput interface {
	pulumi.Input

	ToEnvironmentEntriesOutput() EnvironmentEntriesOutput
	ToEnvironmentEntriesOutputWithContext(ctx context.Context) EnvironmentEntriesOutput
}

func (*EnvironmentEntries) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentEntries)(nil)).Elem()
}

func (i *EnvironmentEntries) ToEnvironmentEntriesOutput() EnvironmentEntriesOutput {
	return i.ToEnvironmentEntriesOutputWithContext(context.Background())
}

func (i *EnvironmentEntries) ToEnvironmentEntriesOutputWithContext(ctx context.Context) EnvironmentEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentEntriesOutput)
}

type EnvironmentEntriesOutput struct{ *pulumi.OutputState }

func (EnvironmentEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvironmentEntries)(nil)).Elem()
}

func (o EnvironmentEntriesOutput) ToEnvironmentEntriesOutput() EnvironmentEntriesOutput {
	return o
}

func (o EnvironmentEntriesOutput) ToEnvironmentEntriesOutputWithContext(ctx context.Context) EnvironmentEntriesOutput {
	return o
}

// Resource URI that can be used to identify the scope of the key value map entries.
func (o EnvironmentEntriesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEntries) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Data or payload that is being retrieved and associated with the unique key.
func (o EnvironmentEntriesOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *EnvironmentEntries) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentEntriesInput)(nil)).Elem(), &EnvironmentEntries{})
	pulumi.RegisterOutputType(EnvironmentEntriesOutput{})
}
