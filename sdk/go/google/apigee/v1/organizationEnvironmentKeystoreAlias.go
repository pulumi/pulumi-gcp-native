// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an alias from a key/certificate pair. The structure of the request is controlled by the `format` query parameter: - `keycertfile` - Separate PEM-encoded key and certificate files are uploaded. Set `Content-Type: multipart/form-data` and include the `keyFile`, `certFile`, and `password` (if keys are encrypted) fields in the request body. If uploading to a truststore, omit `keyFile`. - `pkcs12` - A PKCS12 file is uploaded. Set `Content-Type: multipart/form-data`, provide the file in the `file` field, and include the `password` field if the file is encrypted in the request body. - `selfsignedcert` - A new private key and certificate are generated. Set `Content-Type: application/json` and include CertificateGenerationSpec in the request body.
type OrganizationEnvironmentKeystoreAlias struct {
	pulumi.CustomResourceState
}

// NewOrganizationEnvironmentKeystoreAlias registers a new resource with the given unique name, arguments, and options.
func NewOrganizationEnvironmentKeystoreAlias(ctx *pulumi.Context,
	name string, args *OrganizationEnvironmentKeystoreAliasArgs, opts ...pulumi.ResourceOption) (*OrganizationEnvironmentKeystoreAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AliasesId == nil {
		return nil, errors.New("invalid value for required argument 'AliasesId'")
	}
	if args.EnvironmentsId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentsId'")
	}
	if args.KeystoresId == nil {
		return nil, errors.New("invalid value for required argument 'KeystoresId'")
	}
	if args.OrganizationsId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationsId'")
	}
	var resource OrganizationEnvironmentKeystoreAlias
	err := ctx.RegisterResource("google-cloud:apigee/v1:OrganizationEnvironmentKeystoreAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationEnvironmentKeystoreAlias gets an existing OrganizationEnvironmentKeystoreAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationEnvironmentKeystoreAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationEnvironmentKeystoreAliasState, opts ...pulumi.ResourceOption) (*OrganizationEnvironmentKeystoreAlias, error) {
	var resource OrganizationEnvironmentKeystoreAlias
	err := ctx.ReadResource("google-cloud:apigee/v1:OrganizationEnvironmentKeystoreAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationEnvironmentKeystoreAlias resources.
type organizationEnvironmentKeystoreAliasState struct {
}

type OrganizationEnvironmentKeystoreAliasState struct {
}

func (OrganizationEnvironmentKeystoreAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationEnvironmentKeystoreAliasState)(nil)).Elem()
}

type organizationEnvironmentKeystoreAliasArgs struct {
	AliasesId string `pulumi:"aliasesId"`
	// The HTTP Content-Type header value specifying the content type of the body.
	ContentType *string `pulumi:"contentType"`
	// The HTTP request/response body as raw binary.
	Data           *string `pulumi:"data"`
	EnvironmentsId string  `pulumi:"environmentsId"`
	// Application specific response metadata. Must be set in the first response for streaming APIs.
	Extensions      []map[string]string `pulumi:"extensions"`
	KeystoresId     string              `pulumi:"keystoresId"`
	OrganizationsId string              `pulumi:"organizationsId"`
}

// The set of arguments for constructing a OrganizationEnvironmentKeystoreAlias resource.
type OrganizationEnvironmentKeystoreAliasArgs struct {
	AliasesId pulumi.StringInput
	// The HTTP Content-Type header value specifying the content type of the body.
	ContentType pulumi.StringPtrInput
	// The HTTP request/response body as raw binary.
	Data           pulumi.StringPtrInput
	EnvironmentsId pulumi.StringInput
	// Application specific response metadata. Must be set in the first response for streaming APIs.
	Extensions      pulumi.StringMapArrayInput
	KeystoresId     pulumi.StringInput
	OrganizationsId pulumi.StringInput
}

func (OrganizationEnvironmentKeystoreAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationEnvironmentKeystoreAliasArgs)(nil)).Elem()
}

type OrganizationEnvironmentKeystoreAliasInput interface {
	pulumi.Input

	ToOrganizationEnvironmentKeystoreAliasOutput() OrganizationEnvironmentKeystoreAliasOutput
	ToOrganizationEnvironmentKeystoreAliasOutputWithContext(ctx context.Context) OrganizationEnvironmentKeystoreAliasOutput
}

func (*OrganizationEnvironmentKeystoreAlias) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationEnvironmentKeystoreAlias)(nil))
}

func (i *OrganizationEnvironmentKeystoreAlias) ToOrganizationEnvironmentKeystoreAliasOutput() OrganizationEnvironmentKeystoreAliasOutput {
	return i.ToOrganizationEnvironmentKeystoreAliasOutputWithContext(context.Background())
}

func (i *OrganizationEnvironmentKeystoreAlias) ToOrganizationEnvironmentKeystoreAliasOutputWithContext(ctx context.Context) OrganizationEnvironmentKeystoreAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationEnvironmentKeystoreAliasOutput)
}

type OrganizationEnvironmentKeystoreAliasOutput struct {
	*pulumi.OutputState
}

func (OrganizationEnvironmentKeystoreAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationEnvironmentKeystoreAlias)(nil))
}

func (o OrganizationEnvironmentKeystoreAliasOutput) ToOrganizationEnvironmentKeystoreAliasOutput() OrganizationEnvironmentKeystoreAliasOutput {
	return o
}

func (o OrganizationEnvironmentKeystoreAliasOutput) ToOrganizationEnvironmentKeystoreAliasOutputWithContext(ctx context.Context) OrganizationEnvironmentKeystoreAliasOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OrganizationEnvironmentKeystoreAliasOutput{})
}
