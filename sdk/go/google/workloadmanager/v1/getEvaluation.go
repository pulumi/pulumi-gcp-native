// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details of a single Evaluation.
func LookupEvaluation(ctx *pulumi.Context, args *LookupEvaluationArgs, opts ...pulumi.InvokeOption) (*LookupEvaluationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEvaluationResult
	err := ctx.Invoke("google-native:workloadmanager/v1:getEvaluation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEvaluationArgs struct {
	EvaluationId string  `pulumi:"evaluationId"`
	Location     string  `pulumi:"location"`
	Project      *string `pulumi:"project"`
}

type LookupEvaluationResult struct {
	// [Output only] Create time stamp
	CreateTime string `pulumi:"createTime"`
	// The Cloud Storage bucket name for custom rules.
	CustomRulesBucket string `pulumi:"customRulesBucket"`
	// Description of the Evaluation
	Description string `pulumi:"description"`
	// Labels as key value pairs
	Labels map[string]string `pulumi:"labels"`
	// name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'
	Name string `pulumi:"name"`
	// annotations as key value pairs
	ResourceFilter ResourceFilterResponse `pulumi:"resourceFilter"`
	// [Output only] The updated rule ids if exist.
	ResourceStatus ResourceStatusResponse `pulumi:"resourceStatus"`
	// the name of the rule
	RuleNames []string `pulumi:"ruleNames"`
	// [Output only] The updated rule ids if exist.
	RuleVersions []string `pulumi:"ruleVersions"`
	// crontab format schedule for scheduled evaluation, currently only support the following schedule: "0 */1 * * *", "0 */6 * * *", "0 */12 * * *", "0 0 */1 * *", "0 0 */7 * *",
	Schedule string `pulumi:"schedule"`
	// [Output only] Update time stamp
	UpdateTime string `pulumi:"updateTime"`
}

func LookupEvaluationOutput(ctx *pulumi.Context, args LookupEvaluationOutputArgs, opts ...pulumi.InvokeOption) LookupEvaluationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEvaluationResult, error) {
			args := v.(LookupEvaluationArgs)
			r, err := LookupEvaluation(ctx, &args, opts...)
			var s LookupEvaluationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEvaluationResultOutput)
}

type LookupEvaluationOutputArgs struct {
	EvaluationId pulumi.StringInput    `pulumi:"evaluationId"`
	Location     pulumi.StringInput    `pulumi:"location"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupEvaluationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEvaluationArgs)(nil)).Elem()
}

type LookupEvaluationResultOutput struct{ *pulumi.OutputState }

func (LookupEvaluationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEvaluationResult)(nil)).Elem()
}

func (o LookupEvaluationResultOutput) ToLookupEvaluationResultOutput() LookupEvaluationResultOutput {
	return o
}

func (o LookupEvaluationResultOutput) ToLookupEvaluationResultOutputWithContext(ctx context.Context) LookupEvaluationResultOutput {
	return o
}

func (o LookupEvaluationResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupEvaluationResult] {
	return pulumix.Output[LookupEvaluationResult]{
		OutputState: o.OutputState,
	}
}

// [Output only] Create time stamp
func (o LookupEvaluationResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvaluationResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The Cloud Storage bucket name for custom rules.
func (o LookupEvaluationResultOutput) CustomRulesBucket() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvaluationResult) string { return v.CustomRulesBucket }).(pulumi.StringOutput)
}

// Description of the Evaluation
func (o LookupEvaluationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvaluationResult) string { return v.Description }).(pulumi.StringOutput)
}

// Labels as key value pairs
func (o LookupEvaluationResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupEvaluationResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// name of resource names have the form 'projects/{project_id}/locations/{location_id}/evaluations/{evaluation_id}'
func (o LookupEvaluationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvaluationResult) string { return v.Name }).(pulumi.StringOutput)
}

// annotations as key value pairs
func (o LookupEvaluationResultOutput) ResourceFilter() ResourceFilterResponseOutput {
	return o.ApplyT(func(v LookupEvaluationResult) ResourceFilterResponse { return v.ResourceFilter }).(ResourceFilterResponseOutput)
}

// [Output only] The updated rule ids if exist.
func (o LookupEvaluationResultOutput) ResourceStatus() ResourceStatusResponseOutput {
	return o.ApplyT(func(v LookupEvaluationResult) ResourceStatusResponse { return v.ResourceStatus }).(ResourceStatusResponseOutput)
}

// the name of the rule
func (o LookupEvaluationResultOutput) RuleNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEvaluationResult) []string { return v.RuleNames }).(pulumi.StringArrayOutput)
}

// [Output only] The updated rule ids if exist.
func (o LookupEvaluationResultOutput) RuleVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEvaluationResult) []string { return v.RuleVersions }).(pulumi.StringArrayOutput)
}

// crontab format schedule for scheduled evaluation, currently only support the following schedule: "0 */1 * * *", "0 */6 * * *", "0 */12 * * *", "0 0 */1 * *", "0 0 */7 * *",
func (o LookupEvaluationResultOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvaluationResult) string { return v.Schedule }).(pulumi.StringOutput)
}

// [Output only] Update time stamp
func (o LookupEvaluationResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvaluationResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEvaluationResultOutput{})
}
