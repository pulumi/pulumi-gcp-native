// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single blockchain node.
func LookupBlockchainNode(ctx *pulumi.Context, args *LookupBlockchainNodeArgs, opts ...pulumi.InvokeOption) (*LookupBlockchainNodeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBlockchainNodeResult
	err := ctx.Invoke("google-native:blockchainnodeengine/v1:getBlockchainNode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBlockchainNodeArgs struct {
	BlockchainNodeId string  `pulumi:"blockchainNodeId"`
	Location         string  `pulumi:"location"`
	Project          *string `pulumi:"project"`
}

type LookupBlockchainNodeResult struct {
	// Immutable. The blockchain type of the node.
	BlockchainType string `pulumi:"blockchainType"`
	// The connection information used to interact with a blockchain node.
	ConnectionInfo ConnectionInfoResponse `pulumi:"connectionInfo"`
	// The timestamp at which the blockchain node was first created.
	CreateTime string `pulumi:"createTime"`
	// Ethereum-specific blockchain node details.
	EthereumDetails EthereumDetailsResponse `pulumi:"ethereumDetails"`
	// User-provided key-value pairs.
	Labels map[string]string `pulumi:"labels"`
	// The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
	Name string `pulumi:"name"`
	// Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
	PrivateServiceConnectEnabled bool `pulumi:"privateServiceConnectEnabled"`
	// A status representing the state of the node.
	State string `pulumi:"state"`
	// The timestamp at which the blockchain node was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupBlockchainNodeOutput(ctx *pulumi.Context, args LookupBlockchainNodeOutputArgs, opts ...pulumi.InvokeOption) LookupBlockchainNodeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBlockchainNodeResult, error) {
			args := v.(LookupBlockchainNodeArgs)
			r, err := LookupBlockchainNode(ctx, &args, opts...)
			var s LookupBlockchainNodeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBlockchainNodeResultOutput)
}

type LookupBlockchainNodeOutputArgs struct {
	BlockchainNodeId pulumi.StringInput    `pulumi:"blockchainNodeId"`
	Location         pulumi.StringInput    `pulumi:"location"`
	Project          pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupBlockchainNodeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBlockchainNodeArgs)(nil)).Elem()
}

type LookupBlockchainNodeResultOutput struct{ *pulumi.OutputState }

func (LookupBlockchainNodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBlockchainNodeResult)(nil)).Elem()
}

func (o LookupBlockchainNodeResultOutput) ToLookupBlockchainNodeResultOutput() LookupBlockchainNodeResultOutput {
	return o
}

func (o LookupBlockchainNodeResultOutput) ToLookupBlockchainNodeResultOutputWithContext(ctx context.Context) LookupBlockchainNodeResultOutput {
	return o
}

// Immutable. The blockchain type of the node.
func (o LookupBlockchainNodeResultOutput) BlockchainType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBlockchainNodeResult) string { return v.BlockchainType }).(pulumi.StringOutput)
}

// The connection information used to interact with a blockchain node.
func (o LookupBlockchainNodeResultOutput) ConnectionInfo() ConnectionInfoResponseOutput {
	return o.ApplyT(func(v LookupBlockchainNodeResult) ConnectionInfoResponse { return v.ConnectionInfo }).(ConnectionInfoResponseOutput)
}

// The timestamp at which the blockchain node was first created.
func (o LookupBlockchainNodeResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBlockchainNodeResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Ethereum-specific blockchain node details.
func (o LookupBlockchainNodeResultOutput) EthereumDetails() EthereumDetailsResponseOutput {
	return o.ApplyT(func(v LookupBlockchainNodeResult) EthereumDetailsResponse { return v.EthereumDetails }).(EthereumDetailsResponseOutput)
}

// User-provided key-value pairs.
func (o LookupBlockchainNodeResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupBlockchainNodeResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
func (o LookupBlockchainNodeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBlockchainNodeResult) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
func (o LookupBlockchainNodeResultOutput) PrivateServiceConnectEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBlockchainNodeResult) bool { return v.PrivateServiceConnectEnabled }).(pulumi.BoolOutput)
}

// A status representing the state of the node.
func (o LookupBlockchainNodeResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBlockchainNodeResult) string { return v.State }).(pulumi.StringOutput)
}

// The timestamp at which the blockchain node was last updated.
func (o LookupBlockchainNodeResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBlockchainNodeResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBlockchainNodeResultOutput{})
}
