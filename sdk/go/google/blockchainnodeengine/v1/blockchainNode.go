// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new blockchain node in a given project and location.
// Auto-naming is currently not supported for this resource.
type BlockchainNode struct {
	pulumi.CustomResourceState

	// Required. ID of the requesting object.
	BlockchainNodeId pulumi.StringOutput `pulumi:"blockchainNodeId"`
	// Immutable. The blockchain type of the node.
	BlockchainType pulumi.StringOutput `pulumi:"blockchainType"`
	// The connection information used to interact with a blockchain node.
	ConnectionInfo ConnectionInfoResponseOutput `pulumi:"connectionInfo"`
	// The timestamp at which the blockchain node was first created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Ethereum-specific blockchain node details.
	EthereumDetails EthereumDetailsResponseOutput `pulumi:"ethereumDetails"`
	// User-provided key-value pairs.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
	PrivateServiceConnectEnabled pulumi.BoolOutput   `pulumi:"privateServiceConnectEnabled"`
	Project                      pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// A status representing the state of the node.
	State pulumi.StringOutput `pulumi:"state"`
	// The timestamp at which the blockchain node was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBlockchainNode registers a new resource with the given unique name, arguments, and options.
func NewBlockchainNode(ctx *pulumi.Context,
	name string, args *BlockchainNodeArgs, opts ...pulumi.ResourceOption) (*BlockchainNode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlockchainNodeId == nil {
		return nil, errors.New("invalid value for required argument 'BlockchainNodeId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"blockchainNodeId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BlockchainNode
	err := ctx.RegisterResource("google-native:blockchainnodeengine/v1:BlockchainNode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockchainNode gets an existing BlockchainNode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockchainNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockchainNodeState, opts ...pulumi.ResourceOption) (*BlockchainNode, error) {
	var resource BlockchainNode
	err := ctx.ReadResource("google-native:blockchainnodeengine/v1:BlockchainNode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockchainNode resources.
type blockchainNodeState struct {
}

type BlockchainNodeState struct {
}

func (BlockchainNodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockchainNodeState)(nil)).Elem()
}

type blockchainNodeArgs struct {
	// Required. ID of the requesting object.
	BlockchainNodeId string `pulumi:"blockchainNodeId"`
	// Immutable. The blockchain type of the node.
	BlockchainType *BlockchainNodeBlockchainType `pulumi:"blockchainType"`
	// Ethereum-specific blockchain node details.
	EthereumDetails *EthereumDetails `pulumi:"ethereumDetails"`
	// User-provided key-value pairs.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
	PrivateServiceConnectEnabled *bool   `pulumi:"privateServiceConnectEnabled"`
	Project                      *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
}

// The set of arguments for constructing a BlockchainNode resource.
type BlockchainNodeArgs struct {
	// Required. ID of the requesting object.
	BlockchainNodeId pulumi.StringInput
	// Immutable. The blockchain type of the node.
	BlockchainType BlockchainNodeBlockchainTypePtrInput
	// Ethereum-specific blockchain node details.
	EthereumDetails EthereumDetailsPtrInput
	// User-provided key-value pairs.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
	PrivateServiceConnectEnabled pulumi.BoolPtrInput
	Project                      pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
}

func (BlockchainNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockchainNodeArgs)(nil)).Elem()
}

type BlockchainNodeInput interface {
	pulumi.Input

	ToBlockchainNodeOutput() BlockchainNodeOutput
	ToBlockchainNodeOutputWithContext(ctx context.Context) BlockchainNodeOutput
}

func (*BlockchainNode) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockchainNode)(nil)).Elem()
}

func (i *BlockchainNode) ToBlockchainNodeOutput() BlockchainNodeOutput {
	return i.ToBlockchainNodeOutputWithContext(context.Background())
}

func (i *BlockchainNode) ToBlockchainNodeOutputWithContext(ctx context.Context) BlockchainNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainNodeOutput)
}

func (i *BlockchainNode) ToOutput(ctx context.Context) pulumix.Output[*BlockchainNode] {
	return pulumix.Output[*BlockchainNode]{
		OutputState: i.ToBlockchainNodeOutputWithContext(ctx).OutputState,
	}
}

type BlockchainNodeOutput struct{ *pulumi.OutputState }

func (BlockchainNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockchainNode)(nil)).Elem()
}

func (o BlockchainNodeOutput) ToBlockchainNodeOutput() BlockchainNodeOutput {
	return o
}

func (o BlockchainNodeOutput) ToBlockchainNodeOutputWithContext(ctx context.Context) BlockchainNodeOutput {
	return o
}

func (o BlockchainNodeOutput) ToOutput(ctx context.Context) pulumix.Output[*BlockchainNode] {
	return pulumix.Output[*BlockchainNode]{
		OutputState: o.OutputState,
	}
}

// Required. ID of the requesting object.
func (o BlockchainNodeOutput) BlockchainNodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.StringOutput { return v.BlockchainNodeId }).(pulumi.StringOutput)
}

// Immutable. The blockchain type of the node.
func (o BlockchainNodeOutput) BlockchainType() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.StringOutput { return v.BlockchainType }).(pulumi.StringOutput)
}

// The connection information used to interact with a blockchain node.
func (o BlockchainNodeOutput) ConnectionInfo() ConnectionInfoResponseOutput {
	return o.ApplyT(func(v *BlockchainNode) ConnectionInfoResponseOutput { return v.ConnectionInfo }).(ConnectionInfoResponseOutput)
}

// The timestamp at which the blockchain node was first created.
func (o BlockchainNodeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Ethereum-specific blockchain node details.
func (o BlockchainNodeOutput) EthereumDetails() EthereumDetailsResponseOutput {
	return o.ApplyT(func(v *BlockchainNode) EthereumDetailsResponseOutput { return v.EthereumDetails }).(EthereumDetailsResponseOutput)
}

// User-provided key-value pairs.
func (o BlockchainNodeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o BlockchainNodeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
func (o BlockchainNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. See https://cloud.google.com/vpc/docs/private-service-connect.
func (o BlockchainNodeOutput) PrivateServiceConnectEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.BoolOutput { return v.PrivateServiceConnectEnabled }).(pulumi.BoolOutput)
}

func (o BlockchainNodeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o BlockchainNodeOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// A status representing the state of the node.
func (o BlockchainNodeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The timestamp at which the blockchain node was last updated.
func (o BlockchainNodeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockchainNode) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockchainNodeInput)(nil)).Elem(), &BlockchainNode{})
	pulumi.RegisterOutputType(BlockchainNodeOutput{})
}
