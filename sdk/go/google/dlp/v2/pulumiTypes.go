// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// A task to execute on the completion of a job. See https://cloud.google.com/dlp/docs/concepts-actions to learn more.
type GooglePrivacyDlpV2Action struct {
	// Create a de-identified copy of the input data.
	Deidentify *GooglePrivacyDlpV2Deidentify `pulumi:"deidentify"`
	// Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
	JobNotificationEmails *GooglePrivacyDlpV2JobNotificationEmails `pulumi:"jobNotificationEmails"`
	// Publish a notification to a Pub/Sub topic.
	PubSub *GooglePrivacyDlpV2PublishToPubSub `pulumi:"pubSub"`
	// Publish findings to Cloud Datahub.
	PublishFindingsToCloudDataCatalog *GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog `pulumi:"publishFindingsToCloudDataCatalog"`
	// Publish summary to Cloud Security Command Center (Alpha).
	PublishSummaryToCscc *GooglePrivacyDlpV2PublishSummaryToCscc `pulumi:"publishSummaryToCscc"`
	// Enable Stackdriver metric dlp.googleapis.com/finding_count.
	PublishToStackdriver *GooglePrivacyDlpV2PublishToStackdriver `pulumi:"publishToStackdriver"`
	// Save resulting findings in a provided location.
	SaveFindings *GooglePrivacyDlpV2SaveFindings `pulumi:"saveFindings"`
}

// GooglePrivacyDlpV2ActionInput is an input type that accepts GooglePrivacyDlpV2ActionArgs and GooglePrivacyDlpV2ActionOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ActionInput` via:
//
//	GooglePrivacyDlpV2ActionArgs{...}
type GooglePrivacyDlpV2ActionInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ActionOutput() GooglePrivacyDlpV2ActionOutput
	ToGooglePrivacyDlpV2ActionOutputWithContext(context.Context) GooglePrivacyDlpV2ActionOutput
}

// A task to execute on the completion of a job. See https://cloud.google.com/dlp/docs/concepts-actions to learn more.
type GooglePrivacyDlpV2ActionArgs struct {
	// Create a de-identified copy of the input data.
	Deidentify GooglePrivacyDlpV2DeidentifyPtrInput `pulumi:"deidentify"`
	// Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
	JobNotificationEmails GooglePrivacyDlpV2JobNotificationEmailsPtrInput `pulumi:"jobNotificationEmails"`
	// Publish a notification to a Pub/Sub topic.
	PubSub GooglePrivacyDlpV2PublishToPubSubPtrInput `pulumi:"pubSub"`
	// Publish findings to Cloud Datahub.
	PublishFindingsToCloudDataCatalog GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrInput `pulumi:"publishFindingsToCloudDataCatalog"`
	// Publish summary to Cloud Security Command Center (Alpha).
	PublishSummaryToCscc GooglePrivacyDlpV2PublishSummaryToCsccPtrInput `pulumi:"publishSummaryToCscc"`
	// Enable Stackdriver metric dlp.googleapis.com/finding_count.
	PublishToStackdriver GooglePrivacyDlpV2PublishToStackdriverPtrInput `pulumi:"publishToStackdriver"`
	// Save resulting findings in a provided location.
	SaveFindings GooglePrivacyDlpV2SaveFindingsPtrInput `pulumi:"saveFindings"`
}

func (GooglePrivacyDlpV2ActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Action)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ActionArgs) ToGooglePrivacyDlpV2ActionOutput() GooglePrivacyDlpV2ActionOutput {
	return i.ToGooglePrivacyDlpV2ActionOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ActionArgs) ToGooglePrivacyDlpV2ActionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ActionOutput)
}

// GooglePrivacyDlpV2ActionArrayInput is an input type that accepts GooglePrivacyDlpV2ActionArray and GooglePrivacyDlpV2ActionArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ActionArrayInput` via:
//
//	GooglePrivacyDlpV2ActionArray{ GooglePrivacyDlpV2ActionArgs{...} }
type GooglePrivacyDlpV2ActionArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ActionArrayOutput() GooglePrivacyDlpV2ActionArrayOutput
	ToGooglePrivacyDlpV2ActionArrayOutputWithContext(context.Context) GooglePrivacyDlpV2ActionArrayOutput
}

type GooglePrivacyDlpV2ActionArray []GooglePrivacyDlpV2ActionInput

func (GooglePrivacyDlpV2ActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2Action)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ActionArray) ToGooglePrivacyDlpV2ActionArrayOutput() GooglePrivacyDlpV2ActionArrayOutput {
	return i.ToGooglePrivacyDlpV2ActionArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ActionArray) ToGooglePrivacyDlpV2ActionArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ActionArrayOutput)
}

// A task to execute on the completion of a job. See https://cloud.google.com/dlp/docs/concepts-actions to learn more.
type GooglePrivacyDlpV2ActionOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Action)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ActionOutput) ToGooglePrivacyDlpV2ActionOutput() GooglePrivacyDlpV2ActionOutput {
	return o
}

func (o GooglePrivacyDlpV2ActionOutput) ToGooglePrivacyDlpV2ActionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ActionOutput {
	return o
}

// Create a de-identified copy of the input data.
func (o GooglePrivacyDlpV2ActionOutput) Deidentify() GooglePrivacyDlpV2DeidentifyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Action) *GooglePrivacyDlpV2Deidentify { return v.Deidentify }).(GooglePrivacyDlpV2DeidentifyPtrOutput)
}

// Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
func (o GooglePrivacyDlpV2ActionOutput) JobNotificationEmails() GooglePrivacyDlpV2JobNotificationEmailsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Action) *GooglePrivacyDlpV2JobNotificationEmails {
		return v.JobNotificationEmails
	}).(GooglePrivacyDlpV2JobNotificationEmailsPtrOutput)
}

// Publish a notification to a Pub/Sub topic.
func (o GooglePrivacyDlpV2ActionOutput) PubSub() GooglePrivacyDlpV2PublishToPubSubPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Action) *GooglePrivacyDlpV2PublishToPubSub { return v.PubSub }).(GooglePrivacyDlpV2PublishToPubSubPtrOutput)
}

// Publish findings to Cloud Datahub.
func (o GooglePrivacyDlpV2ActionOutput) PublishFindingsToCloudDataCatalog() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Action) *GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog {
		return v.PublishFindingsToCloudDataCatalog
	}).(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput)
}

// Publish summary to Cloud Security Command Center (Alpha).
func (o GooglePrivacyDlpV2ActionOutput) PublishSummaryToCscc() GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Action) *GooglePrivacyDlpV2PublishSummaryToCscc {
		return v.PublishSummaryToCscc
	}).(GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput)
}

// Enable Stackdriver metric dlp.googleapis.com/finding_count.
func (o GooglePrivacyDlpV2ActionOutput) PublishToStackdriver() GooglePrivacyDlpV2PublishToStackdriverPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Action) *GooglePrivacyDlpV2PublishToStackdriver {
		return v.PublishToStackdriver
	}).(GooglePrivacyDlpV2PublishToStackdriverPtrOutput)
}

// Save resulting findings in a provided location.
func (o GooglePrivacyDlpV2ActionOutput) SaveFindings() GooglePrivacyDlpV2SaveFindingsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Action) *GooglePrivacyDlpV2SaveFindings { return v.SaveFindings }).(GooglePrivacyDlpV2SaveFindingsPtrOutput)
}

type GooglePrivacyDlpV2ActionArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2Action)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ActionArrayOutput) ToGooglePrivacyDlpV2ActionArrayOutput() GooglePrivacyDlpV2ActionArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ActionArrayOutput) ToGooglePrivacyDlpV2ActionArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ActionArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ActionArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2ActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2Action {
		return vs[0].([]GooglePrivacyDlpV2Action)[vs[1].(int)]
	}).(GooglePrivacyDlpV2ActionOutput)
}

// The results of an Action.
type GooglePrivacyDlpV2ActionDetailsResponse struct {
	// Outcome of a de-identification action.
	DeidentifyDetails GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponse `pulumi:"deidentifyDetails"`
}

// The results of an Action.
type GooglePrivacyDlpV2ActionDetailsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ActionDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ActionDetailsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ActionDetailsResponseOutput) ToGooglePrivacyDlpV2ActionDetailsResponseOutput() GooglePrivacyDlpV2ActionDetailsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ActionDetailsResponseOutput) ToGooglePrivacyDlpV2ActionDetailsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ActionDetailsResponseOutput {
	return o
}

// Outcome of a de-identification action.
func (o GooglePrivacyDlpV2ActionDetailsResponseOutput) DeidentifyDetails() GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ActionDetailsResponse) GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponse {
		return v.DeidentifyDetails
	}).(GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput)
}

type GooglePrivacyDlpV2ActionDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ActionDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2ActionDetailsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ActionDetailsResponseArrayOutput) ToGooglePrivacyDlpV2ActionDetailsResponseArrayOutput() GooglePrivacyDlpV2ActionDetailsResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ActionDetailsResponseArrayOutput) ToGooglePrivacyDlpV2ActionDetailsResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ActionDetailsResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ActionDetailsResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2ActionDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2ActionDetailsResponse {
		return vs[0].([]GooglePrivacyDlpV2ActionDetailsResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2ActionDetailsResponseOutput)
}

// A task to execute on the completion of a job. See https://cloud.google.com/dlp/docs/concepts-actions to learn more.
type GooglePrivacyDlpV2ActionResponse struct {
	// Create a de-identified copy of the input data.
	Deidentify GooglePrivacyDlpV2DeidentifyResponse `pulumi:"deidentify"`
	// Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
	JobNotificationEmails GooglePrivacyDlpV2JobNotificationEmailsResponse `pulumi:"jobNotificationEmails"`
	// Publish a notification to a Pub/Sub topic.
	PubSub GooglePrivacyDlpV2PublishToPubSubResponse `pulumi:"pubSub"`
	// Publish findings to Cloud Datahub.
	PublishFindingsToCloudDataCatalog GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponse `pulumi:"publishFindingsToCloudDataCatalog"`
	// Publish summary to Cloud Security Command Center (Alpha).
	PublishSummaryToCscc GooglePrivacyDlpV2PublishSummaryToCsccResponse `pulumi:"publishSummaryToCscc"`
	// Enable Stackdriver metric dlp.googleapis.com/finding_count.
	PublishToStackdriver GooglePrivacyDlpV2PublishToStackdriverResponse `pulumi:"publishToStackdriver"`
	// Save resulting findings in a provided location.
	SaveFindings GooglePrivacyDlpV2SaveFindingsResponse `pulumi:"saveFindings"`
}

// A task to execute on the completion of a job. See https://cloud.google.com/dlp/docs/concepts-actions to learn more.
type GooglePrivacyDlpV2ActionResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ActionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ActionResponseOutput) ToGooglePrivacyDlpV2ActionResponseOutput() GooglePrivacyDlpV2ActionResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ActionResponseOutput) ToGooglePrivacyDlpV2ActionResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ActionResponseOutput {
	return o
}

// Create a de-identified copy of the input data.
func (o GooglePrivacyDlpV2ActionResponseOutput) Deidentify() GooglePrivacyDlpV2DeidentifyResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ActionResponse) GooglePrivacyDlpV2DeidentifyResponse { return v.Deidentify }).(GooglePrivacyDlpV2DeidentifyResponseOutput)
}

// Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
func (o GooglePrivacyDlpV2ActionResponseOutput) JobNotificationEmails() GooglePrivacyDlpV2JobNotificationEmailsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ActionResponse) GooglePrivacyDlpV2JobNotificationEmailsResponse {
		return v.JobNotificationEmails
	}).(GooglePrivacyDlpV2JobNotificationEmailsResponseOutput)
}

// Publish a notification to a Pub/Sub topic.
func (o GooglePrivacyDlpV2ActionResponseOutput) PubSub() GooglePrivacyDlpV2PublishToPubSubResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ActionResponse) GooglePrivacyDlpV2PublishToPubSubResponse { return v.PubSub }).(GooglePrivacyDlpV2PublishToPubSubResponseOutput)
}

// Publish findings to Cloud Datahub.
func (o GooglePrivacyDlpV2ActionResponseOutput) PublishFindingsToCloudDataCatalog() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ActionResponse) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponse {
		return v.PublishFindingsToCloudDataCatalog
	}).(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutput)
}

// Publish summary to Cloud Security Command Center (Alpha).
func (o GooglePrivacyDlpV2ActionResponseOutput) PublishSummaryToCscc() GooglePrivacyDlpV2PublishSummaryToCsccResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ActionResponse) GooglePrivacyDlpV2PublishSummaryToCsccResponse {
		return v.PublishSummaryToCscc
	}).(GooglePrivacyDlpV2PublishSummaryToCsccResponseOutput)
}

// Enable Stackdriver metric dlp.googleapis.com/finding_count.
func (o GooglePrivacyDlpV2ActionResponseOutput) PublishToStackdriver() GooglePrivacyDlpV2PublishToStackdriverResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ActionResponse) GooglePrivacyDlpV2PublishToStackdriverResponse {
		return v.PublishToStackdriver
	}).(GooglePrivacyDlpV2PublishToStackdriverResponseOutput)
}

// Save resulting findings in a provided location.
func (o GooglePrivacyDlpV2ActionResponseOutput) SaveFindings() GooglePrivacyDlpV2SaveFindingsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ActionResponse) GooglePrivacyDlpV2SaveFindingsResponse { return v.SaveFindings }).(GooglePrivacyDlpV2SaveFindingsResponseOutput)
}

type GooglePrivacyDlpV2ActionResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2ActionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ActionResponseArrayOutput) ToGooglePrivacyDlpV2ActionResponseArrayOutput() GooglePrivacyDlpV2ActionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ActionResponseArrayOutput) ToGooglePrivacyDlpV2ActionResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ActionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ActionResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2ActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2ActionResponse {
		return vs[0].([]GooglePrivacyDlpV2ActionResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2ActionResponseOutput)
}

// Apply transformation to all findings.
type GooglePrivacyDlpV2AllInfoTypes struct {
}

// GooglePrivacyDlpV2AllInfoTypesInput is an input type that accepts GooglePrivacyDlpV2AllInfoTypesArgs and GooglePrivacyDlpV2AllInfoTypesOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2AllInfoTypesInput` via:
//
//	GooglePrivacyDlpV2AllInfoTypesArgs{...}
type GooglePrivacyDlpV2AllInfoTypesInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2AllInfoTypesOutput() GooglePrivacyDlpV2AllInfoTypesOutput
	ToGooglePrivacyDlpV2AllInfoTypesOutputWithContext(context.Context) GooglePrivacyDlpV2AllInfoTypesOutput
}

// Apply transformation to all findings.
type GooglePrivacyDlpV2AllInfoTypesArgs struct {
}

func (GooglePrivacyDlpV2AllInfoTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AllInfoTypes)(nil)).Elem()
}

func (i GooglePrivacyDlpV2AllInfoTypesArgs) ToGooglePrivacyDlpV2AllInfoTypesOutput() GooglePrivacyDlpV2AllInfoTypesOutput {
	return i.ToGooglePrivacyDlpV2AllInfoTypesOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2AllInfoTypesArgs) ToGooglePrivacyDlpV2AllInfoTypesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllInfoTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AllInfoTypesOutput)
}

func (i GooglePrivacyDlpV2AllInfoTypesArgs) ToGooglePrivacyDlpV2AllInfoTypesPtrOutput() GooglePrivacyDlpV2AllInfoTypesPtrOutput {
	return i.ToGooglePrivacyDlpV2AllInfoTypesPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2AllInfoTypesArgs) ToGooglePrivacyDlpV2AllInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllInfoTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AllInfoTypesOutput).ToGooglePrivacyDlpV2AllInfoTypesPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2AllInfoTypesPtrInput is an input type that accepts GooglePrivacyDlpV2AllInfoTypesArgs, GooglePrivacyDlpV2AllInfoTypesPtr and GooglePrivacyDlpV2AllInfoTypesPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2AllInfoTypesPtrInput` via:
//
//	        GooglePrivacyDlpV2AllInfoTypesArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2AllInfoTypesPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2AllInfoTypesPtrOutput() GooglePrivacyDlpV2AllInfoTypesPtrOutput
	ToGooglePrivacyDlpV2AllInfoTypesPtrOutputWithContext(context.Context) GooglePrivacyDlpV2AllInfoTypesPtrOutput
}

type googlePrivacyDlpV2AllInfoTypesPtrType GooglePrivacyDlpV2AllInfoTypesArgs

func GooglePrivacyDlpV2AllInfoTypesPtr(v *GooglePrivacyDlpV2AllInfoTypesArgs) GooglePrivacyDlpV2AllInfoTypesPtrInput {
	return (*googlePrivacyDlpV2AllInfoTypesPtrType)(v)
}

func (*googlePrivacyDlpV2AllInfoTypesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2AllInfoTypes)(nil)).Elem()
}

func (i *googlePrivacyDlpV2AllInfoTypesPtrType) ToGooglePrivacyDlpV2AllInfoTypesPtrOutput() GooglePrivacyDlpV2AllInfoTypesPtrOutput {
	return i.ToGooglePrivacyDlpV2AllInfoTypesPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2AllInfoTypesPtrType) ToGooglePrivacyDlpV2AllInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllInfoTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AllInfoTypesPtrOutput)
}

// Apply transformation to all findings.
type GooglePrivacyDlpV2AllInfoTypesOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AllInfoTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AllInfoTypes)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AllInfoTypesOutput) ToGooglePrivacyDlpV2AllInfoTypesOutput() GooglePrivacyDlpV2AllInfoTypesOutput {
	return o
}

func (o GooglePrivacyDlpV2AllInfoTypesOutput) ToGooglePrivacyDlpV2AllInfoTypesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllInfoTypesOutput {
	return o
}

func (o GooglePrivacyDlpV2AllInfoTypesOutput) ToGooglePrivacyDlpV2AllInfoTypesPtrOutput() GooglePrivacyDlpV2AllInfoTypesPtrOutput {
	return o.ToGooglePrivacyDlpV2AllInfoTypesPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2AllInfoTypesOutput) ToGooglePrivacyDlpV2AllInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllInfoTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2AllInfoTypes) *GooglePrivacyDlpV2AllInfoTypes {
		return &v
	}).(GooglePrivacyDlpV2AllInfoTypesPtrOutput)
}

type GooglePrivacyDlpV2AllInfoTypesPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AllInfoTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2AllInfoTypes)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AllInfoTypesPtrOutput) ToGooglePrivacyDlpV2AllInfoTypesPtrOutput() GooglePrivacyDlpV2AllInfoTypesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2AllInfoTypesPtrOutput) ToGooglePrivacyDlpV2AllInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllInfoTypesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2AllInfoTypesPtrOutput) Elem() GooglePrivacyDlpV2AllInfoTypesOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2AllInfoTypes) GooglePrivacyDlpV2AllInfoTypes {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2AllInfoTypes
		return ret
	}).(GooglePrivacyDlpV2AllInfoTypesOutput)
}

// Apply transformation to all findings.
type GooglePrivacyDlpV2AllInfoTypesResponse struct {
}

// Apply transformation to all findings.
type GooglePrivacyDlpV2AllInfoTypesResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AllInfoTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AllInfoTypesResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AllInfoTypesResponseOutput) ToGooglePrivacyDlpV2AllInfoTypesResponseOutput() GooglePrivacyDlpV2AllInfoTypesResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2AllInfoTypesResponseOutput) ToGooglePrivacyDlpV2AllInfoTypesResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllInfoTypesResponseOutput {
	return o
}

// Catch-all for all other tables not specified by other filters. Should always be last, except for single-table configurations, which will only have a TableReference target.
type GooglePrivacyDlpV2AllOtherBigQueryTables struct {
}

// GooglePrivacyDlpV2AllOtherBigQueryTablesInput is an input type that accepts GooglePrivacyDlpV2AllOtherBigQueryTablesArgs and GooglePrivacyDlpV2AllOtherBigQueryTablesOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2AllOtherBigQueryTablesInput` via:
//
//	GooglePrivacyDlpV2AllOtherBigQueryTablesArgs{...}
type GooglePrivacyDlpV2AllOtherBigQueryTablesInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2AllOtherBigQueryTablesOutput() GooglePrivacyDlpV2AllOtherBigQueryTablesOutput
	ToGooglePrivacyDlpV2AllOtherBigQueryTablesOutputWithContext(context.Context) GooglePrivacyDlpV2AllOtherBigQueryTablesOutput
}

// Catch-all for all other tables not specified by other filters. Should always be last, except for single-table configurations, which will only have a TableReference target.
type GooglePrivacyDlpV2AllOtherBigQueryTablesArgs struct {
}

func (GooglePrivacyDlpV2AllOtherBigQueryTablesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AllOtherBigQueryTables)(nil)).Elem()
}

func (i GooglePrivacyDlpV2AllOtherBigQueryTablesArgs) ToGooglePrivacyDlpV2AllOtherBigQueryTablesOutput() GooglePrivacyDlpV2AllOtherBigQueryTablesOutput {
	return i.ToGooglePrivacyDlpV2AllOtherBigQueryTablesOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2AllOtherBigQueryTablesArgs) ToGooglePrivacyDlpV2AllOtherBigQueryTablesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllOtherBigQueryTablesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AllOtherBigQueryTablesOutput)
}

func (i GooglePrivacyDlpV2AllOtherBigQueryTablesArgs) ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput() GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput {
	return i.ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2AllOtherBigQueryTablesArgs) ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AllOtherBigQueryTablesOutput).ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2AllOtherBigQueryTablesPtrInput is an input type that accepts GooglePrivacyDlpV2AllOtherBigQueryTablesArgs, GooglePrivacyDlpV2AllOtherBigQueryTablesPtr and GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2AllOtherBigQueryTablesPtrInput` via:
//
//	        GooglePrivacyDlpV2AllOtherBigQueryTablesArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2AllOtherBigQueryTablesPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput() GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput
	ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutputWithContext(context.Context) GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput
}

type googlePrivacyDlpV2AllOtherBigQueryTablesPtrType GooglePrivacyDlpV2AllOtherBigQueryTablesArgs

func GooglePrivacyDlpV2AllOtherBigQueryTablesPtr(v *GooglePrivacyDlpV2AllOtherBigQueryTablesArgs) GooglePrivacyDlpV2AllOtherBigQueryTablesPtrInput {
	return (*googlePrivacyDlpV2AllOtherBigQueryTablesPtrType)(v)
}

func (*googlePrivacyDlpV2AllOtherBigQueryTablesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2AllOtherBigQueryTables)(nil)).Elem()
}

func (i *googlePrivacyDlpV2AllOtherBigQueryTablesPtrType) ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput() GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput {
	return i.ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2AllOtherBigQueryTablesPtrType) ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput)
}

// Catch-all for all other tables not specified by other filters. Should always be last, except for single-table configurations, which will only have a TableReference target.
type GooglePrivacyDlpV2AllOtherBigQueryTablesOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AllOtherBigQueryTablesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AllOtherBigQueryTables)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AllOtherBigQueryTablesOutput) ToGooglePrivacyDlpV2AllOtherBigQueryTablesOutput() GooglePrivacyDlpV2AllOtherBigQueryTablesOutput {
	return o
}

func (o GooglePrivacyDlpV2AllOtherBigQueryTablesOutput) ToGooglePrivacyDlpV2AllOtherBigQueryTablesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllOtherBigQueryTablesOutput {
	return o
}

func (o GooglePrivacyDlpV2AllOtherBigQueryTablesOutput) ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput() GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput {
	return o.ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2AllOtherBigQueryTablesOutput) ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2AllOtherBigQueryTables) *GooglePrivacyDlpV2AllOtherBigQueryTables {
		return &v
	}).(GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput)
}

type GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2AllOtherBigQueryTables)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput) ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput() GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput) ToGooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput) Elem() GooglePrivacyDlpV2AllOtherBigQueryTablesOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2AllOtherBigQueryTables) GooglePrivacyDlpV2AllOtherBigQueryTables {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2AllOtherBigQueryTables
		return ret
	}).(GooglePrivacyDlpV2AllOtherBigQueryTablesOutput)
}

// Catch-all for all other tables not specified by other filters. Should always be last, except for single-table configurations, which will only have a TableReference target.
type GooglePrivacyDlpV2AllOtherBigQueryTablesResponse struct {
}

// Catch-all for all other tables not specified by other filters. Should always be last, except for single-table configurations, which will only have a TableReference target.
type GooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AllOtherBigQueryTablesResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutput) ToGooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutput() GooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutput) ToGooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutput {
	return o
}

// Apply to all text.
type GooglePrivacyDlpV2AllText struct {
}

// GooglePrivacyDlpV2AllTextInput is an input type that accepts GooglePrivacyDlpV2AllTextArgs and GooglePrivacyDlpV2AllTextOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2AllTextInput` via:
//
//	GooglePrivacyDlpV2AllTextArgs{...}
type GooglePrivacyDlpV2AllTextInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2AllTextOutput() GooglePrivacyDlpV2AllTextOutput
	ToGooglePrivacyDlpV2AllTextOutputWithContext(context.Context) GooglePrivacyDlpV2AllTextOutput
}

// Apply to all text.
type GooglePrivacyDlpV2AllTextArgs struct {
}

func (GooglePrivacyDlpV2AllTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AllText)(nil)).Elem()
}

func (i GooglePrivacyDlpV2AllTextArgs) ToGooglePrivacyDlpV2AllTextOutput() GooglePrivacyDlpV2AllTextOutput {
	return i.ToGooglePrivacyDlpV2AllTextOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2AllTextArgs) ToGooglePrivacyDlpV2AllTextOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AllTextOutput)
}

func (i GooglePrivacyDlpV2AllTextArgs) ToGooglePrivacyDlpV2AllTextPtrOutput() GooglePrivacyDlpV2AllTextPtrOutput {
	return i.ToGooglePrivacyDlpV2AllTextPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2AllTextArgs) ToGooglePrivacyDlpV2AllTextPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AllTextOutput).ToGooglePrivacyDlpV2AllTextPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2AllTextPtrInput is an input type that accepts GooglePrivacyDlpV2AllTextArgs, GooglePrivacyDlpV2AllTextPtr and GooglePrivacyDlpV2AllTextPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2AllTextPtrInput` via:
//
//	        GooglePrivacyDlpV2AllTextArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2AllTextPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2AllTextPtrOutput() GooglePrivacyDlpV2AllTextPtrOutput
	ToGooglePrivacyDlpV2AllTextPtrOutputWithContext(context.Context) GooglePrivacyDlpV2AllTextPtrOutput
}

type googlePrivacyDlpV2AllTextPtrType GooglePrivacyDlpV2AllTextArgs

func GooglePrivacyDlpV2AllTextPtr(v *GooglePrivacyDlpV2AllTextArgs) GooglePrivacyDlpV2AllTextPtrInput {
	return (*googlePrivacyDlpV2AllTextPtrType)(v)
}

func (*googlePrivacyDlpV2AllTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2AllText)(nil)).Elem()
}

func (i *googlePrivacyDlpV2AllTextPtrType) ToGooglePrivacyDlpV2AllTextPtrOutput() GooglePrivacyDlpV2AllTextPtrOutput {
	return i.ToGooglePrivacyDlpV2AllTextPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2AllTextPtrType) ToGooglePrivacyDlpV2AllTextPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AllTextPtrOutput)
}

// Apply to all text.
type GooglePrivacyDlpV2AllTextOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AllTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AllText)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AllTextOutput) ToGooglePrivacyDlpV2AllTextOutput() GooglePrivacyDlpV2AllTextOutput {
	return o
}

func (o GooglePrivacyDlpV2AllTextOutput) ToGooglePrivacyDlpV2AllTextOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllTextOutput {
	return o
}

func (o GooglePrivacyDlpV2AllTextOutput) ToGooglePrivacyDlpV2AllTextPtrOutput() GooglePrivacyDlpV2AllTextPtrOutput {
	return o.ToGooglePrivacyDlpV2AllTextPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2AllTextOutput) ToGooglePrivacyDlpV2AllTextPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2AllText) *GooglePrivacyDlpV2AllText {
		return &v
	}).(GooglePrivacyDlpV2AllTextPtrOutput)
}

type GooglePrivacyDlpV2AllTextPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AllTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2AllText)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AllTextPtrOutput) ToGooglePrivacyDlpV2AllTextPtrOutput() GooglePrivacyDlpV2AllTextPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2AllTextPtrOutput) ToGooglePrivacyDlpV2AllTextPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllTextPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2AllTextPtrOutput) Elem() GooglePrivacyDlpV2AllTextOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2AllText) GooglePrivacyDlpV2AllText {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2AllText
		return ret
	}).(GooglePrivacyDlpV2AllTextOutput)
}

// Apply to all text.
type GooglePrivacyDlpV2AllTextResponse struct {
}

// Apply to all text.
type GooglePrivacyDlpV2AllTextResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AllTextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AllTextResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AllTextResponseOutput) ToGooglePrivacyDlpV2AllTextResponseOutput() GooglePrivacyDlpV2AllTextResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2AllTextResponseOutput) ToGooglePrivacyDlpV2AllTextResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AllTextResponseOutput {
	return o
}

// Result of a risk analysis operation request.
type GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse struct {
	// Categorical stats result
	CategoricalStatsResult GooglePrivacyDlpV2CategoricalStatsResultResponse `pulumi:"categoricalStatsResult"`
	// Delta-presence result
	DeltaPresenceEstimationResult GooglePrivacyDlpV2DeltaPresenceEstimationResultResponse `pulumi:"deltaPresenceEstimationResult"`
	// K-anonymity result
	KAnonymityResult GooglePrivacyDlpV2KAnonymityResultResponse `pulumi:"kAnonymityResult"`
	// K-map result
	KMapEstimationResult GooglePrivacyDlpV2KMapEstimationResultResponse `pulumi:"kMapEstimationResult"`
	// L-divesity result
	LDiversityResult GooglePrivacyDlpV2LDiversityResultResponse `pulumi:"lDiversityResult"`
	// Numerical stats result
	NumericalStatsResult GooglePrivacyDlpV2NumericalStatsResultResponse `pulumi:"numericalStatsResult"`
	// The configuration used for this job.
	RequestedOptions GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponse `pulumi:"requestedOptions"`
	// Privacy metric to compute.
	RequestedPrivacyMetric GooglePrivacyDlpV2PrivacyMetricResponse `pulumi:"requestedPrivacyMetric"`
	// Input dataset to compute metrics over.
	RequestedSourceTable GooglePrivacyDlpV2BigQueryTableResponse `pulumi:"requestedSourceTable"`
}

// Result of a risk analysis operation request.
type GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) ToGooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput() GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) ToGooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput {
	return o
}

// Categorical stats result
func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) CategoricalStatsResult() GooglePrivacyDlpV2CategoricalStatsResultResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse) GooglePrivacyDlpV2CategoricalStatsResultResponse {
		return v.CategoricalStatsResult
	}).(GooglePrivacyDlpV2CategoricalStatsResultResponseOutput)
}

// Delta-presence result
func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) DeltaPresenceEstimationResult() GooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse) GooglePrivacyDlpV2DeltaPresenceEstimationResultResponse {
		return v.DeltaPresenceEstimationResult
	}).(GooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput)
}

// K-anonymity result
func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) KAnonymityResult() GooglePrivacyDlpV2KAnonymityResultResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse) GooglePrivacyDlpV2KAnonymityResultResponse {
		return v.KAnonymityResult
	}).(GooglePrivacyDlpV2KAnonymityResultResponseOutput)
}

// K-map result
func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) KMapEstimationResult() GooglePrivacyDlpV2KMapEstimationResultResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse) GooglePrivacyDlpV2KMapEstimationResultResponse {
		return v.KMapEstimationResult
	}).(GooglePrivacyDlpV2KMapEstimationResultResponseOutput)
}

// L-divesity result
func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) LDiversityResult() GooglePrivacyDlpV2LDiversityResultResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse) GooglePrivacyDlpV2LDiversityResultResponse {
		return v.LDiversityResult
	}).(GooglePrivacyDlpV2LDiversityResultResponseOutput)
}

// Numerical stats result
func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) NumericalStatsResult() GooglePrivacyDlpV2NumericalStatsResultResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse) GooglePrivacyDlpV2NumericalStatsResultResponse {
		return v.NumericalStatsResult
	}).(GooglePrivacyDlpV2NumericalStatsResultResponseOutput)
}

// The configuration used for this job.
func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) RequestedOptions() GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse) GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponse {
		return v.RequestedOptions
	}).(GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput)
}

// Privacy metric to compute.
func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) RequestedPrivacyMetric() GooglePrivacyDlpV2PrivacyMetricResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse) GooglePrivacyDlpV2PrivacyMetricResponse {
		return v.RequestedPrivacyMetric
	}).(GooglePrivacyDlpV2PrivacyMetricResponseOutput)
}

// Input dataset to compute metrics over.
func (o GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput) RequestedSourceTable() GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse) GooglePrivacyDlpV2BigQueryTableResponse {
		return v.RequestedSourceTable
	}).(GooglePrivacyDlpV2BigQueryTableResponseOutput)
}

// An auxiliary table contains statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
type GooglePrivacyDlpV2AuxiliaryTable struct {
	// Quasi-identifier columns.
	QuasiIds []GooglePrivacyDlpV2QuasiIdField `pulumi:"quasiIds"`
	// The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
	RelativeFrequency GooglePrivacyDlpV2FieldId `pulumi:"relativeFrequency"`
	// Auxiliary table location.
	Table GooglePrivacyDlpV2BigQueryTable `pulumi:"table"`
}

// GooglePrivacyDlpV2AuxiliaryTableInput is an input type that accepts GooglePrivacyDlpV2AuxiliaryTableArgs and GooglePrivacyDlpV2AuxiliaryTableOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2AuxiliaryTableInput` via:
//
//	GooglePrivacyDlpV2AuxiliaryTableArgs{...}
type GooglePrivacyDlpV2AuxiliaryTableInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2AuxiliaryTableOutput() GooglePrivacyDlpV2AuxiliaryTableOutput
	ToGooglePrivacyDlpV2AuxiliaryTableOutputWithContext(context.Context) GooglePrivacyDlpV2AuxiliaryTableOutput
}

// An auxiliary table contains statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
type GooglePrivacyDlpV2AuxiliaryTableArgs struct {
	// Quasi-identifier columns.
	QuasiIds GooglePrivacyDlpV2QuasiIdFieldArrayInput `pulumi:"quasiIds"`
	// The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
	RelativeFrequency GooglePrivacyDlpV2FieldIdInput `pulumi:"relativeFrequency"`
	// Auxiliary table location.
	Table GooglePrivacyDlpV2BigQueryTableInput `pulumi:"table"`
}

func (GooglePrivacyDlpV2AuxiliaryTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AuxiliaryTable)(nil)).Elem()
}

func (i GooglePrivacyDlpV2AuxiliaryTableArgs) ToGooglePrivacyDlpV2AuxiliaryTableOutput() GooglePrivacyDlpV2AuxiliaryTableOutput {
	return i.ToGooglePrivacyDlpV2AuxiliaryTableOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2AuxiliaryTableArgs) ToGooglePrivacyDlpV2AuxiliaryTableOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AuxiliaryTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AuxiliaryTableOutput)
}

// GooglePrivacyDlpV2AuxiliaryTableArrayInput is an input type that accepts GooglePrivacyDlpV2AuxiliaryTableArray and GooglePrivacyDlpV2AuxiliaryTableArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2AuxiliaryTableArrayInput` via:
//
//	GooglePrivacyDlpV2AuxiliaryTableArray{ GooglePrivacyDlpV2AuxiliaryTableArgs{...} }
type GooglePrivacyDlpV2AuxiliaryTableArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2AuxiliaryTableArrayOutput() GooglePrivacyDlpV2AuxiliaryTableArrayOutput
	ToGooglePrivacyDlpV2AuxiliaryTableArrayOutputWithContext(context.Context) GooglePrivacyDlpV2AuxiliaryTableArrayOutput
}

type GooglePrivacyDlpV2AuxiliaryTableArray []GooglePrivacyDlpV2AuxiliaryTableInput

func (GooglePrivacyDlpV2AuxiliaryTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2AuxiliaryTable)(nil)).Elem()
}

func (i GooglePrivacyDlpV2AuxiliaryTableArray) ToGooglePrivacyDlpV2AuxiliaryTableArrayOutput() GooglePrivacyDlpV2AuxiliaryTableArrayOutput {
	return i.ToGooglePrivacyDlpV2AuxiliaryTableArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2AuxiliaryTableArray) ToGooglePrivacyDlpV2AuxiliaryTableArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AuxiliaryTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2AuxiliaryTableArrayOutput)
}

// An auxiliary table contains statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
type GooglePrivacyDlpV2AuxiliaryTableOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AuxiliaryTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AuxiliaryTable)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AuxiliaryTableOutput) ToGooglePrivacyDlpV2AuxiliaryTableOutput() GooglePrivacyDlpV2AuxiliaryTableOutput {
	return o
}

func (o GooglePrivacyDlpV2AuxiliaryTableOutput) ToGooglePrivacyDlpV2AuxiliaryTableOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AuxiliaryTableOutput {
	return o
}

// Quasi-identifier columns.
func (o GooglePrivacyDlpV2AuxiliaryTableOutput) QuasiIds() GooglePrivacyDlpV2QuasiIdFieldArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AuxiliaryTable) []GooglePrivacyDlpV2QuasiIdField { return v.QuasiIds }).(GooglePrivacyDlpV2QuasiIdFieldArrayOutput)
}

// The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
func (o GooglePrivacyDlpV2AuxiliaryTableOutput) RelativeFrequency() GooglePrivacyDlpV2FieldIdOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AuxiliaryTable) GooglePrivacyDlpV2FieldId { return v.RelativeFrequency }).(GooglePrivacyDlpV2FieldIdOutput)
}

// Auxiliary table location.
func (o GooglePrivacyDlpV2AuxiliaryTableOutput) Table() GooglePrivacyDlpV2BigQueryTableOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AuxiliaryTable) GooglePrivacyDlpV2BigQueryTable { return v.Table }).(GooglePrivacyDlpV2BigQueryTableOutput)
}

type GooglePrivacyDlpV2AuxiliaryTableArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AuxiliaryTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2AuxiliaryTable)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AuxiliaryTableArrayOutput) ToGooglePrivacyDlpV2AuxiliaryTableArrayOutput() GooglePrivacyDlpV2AuxiliaryTableArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2AuxiliaryTableArrayOutput) ToGooglePrivacyDlpV2AuxiliaryTableArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AuxiliaryTableArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2AuxiliaryTableArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2AuxiliaryTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2AuxiliaryTable {
		return vs[0].([]GooglePrivacyDlpV2AuxiliaryTable)[vs[1].(int)]
	}).(GooglePrivacyDlpV2AuxiliaryTableOutput)
}

// An auxiliary table contains statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
type GooglePrivacyDlpV2AuxiliaryTableResponse struct {
	// Quasi-identifier columns.
	QuasiIds []GooglePrivacyDlpV2QuasiIdFieldResponse `pulumi:"quasiIds"`
	// The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
	RelativeFrequency GooglePrivacyDlpV2FieldIdResponse `pulumi:"relativeFrequency"`
	// Auxiliary table location.
	Table GooglePrivacyDlpV2BigQueryTableResponse `pulumi:"table"`
}

// An auxiliary table contains statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
type GooglePrivacyDlpV2AuxiliaryTableResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AuxiliaryTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2AuxiliaryTableResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AuxiliaryTableResponseOutput) ToGooglePrivacyDlpV2AuxiliaryTableResponseOutput() GooglePrivacyDlpV2AuxiliaryTableResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2AuxiliaryTableResponseOutput) ToGooglePrivacyDlpV2AuxiliaryTableResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AuxiliaryTableResponseOutput {
	return o
}

// Quasi-identifier columns.
func (o GooglePrivacyDlpV2AuxiliaryTableResponseOutput) QuasiIds() GooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AuxiliaryTableResponse) []GooglePrivacyDlpV2QuasiIdFieldResponse {
		return v.QuasiIds
	}).(GooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput)
}

// The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
func (o GooglePrivacyDlpV2AuxiliaryTableResponseOutput) RelativeFrequency() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AuxiliaryTableResponse) GooglePrivacyDlpV2FieldIdResponse {
		return v.RelativeFrequency
	}).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// Auxiliary table location.
func (o GooglePrivacyDlpV2AuxiliaryTableResponseOutput) Table() GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2AuxiliaryTableResponse) GooglePrivacyDlpV2BigQueryTableResponse {
		return v.Table
	}).(GooglePrivacyDlpV2BigQueryTableResponseOutput)
}

type GooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2AuxiliaryTableResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput) ToGooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput() GooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput) ToGooglePrivacyDlpV2AuxiliaryTableResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2AuxiliaryTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2AuxiliaryTableResponse {
		return vs[0].([]GooglePrivacyDlpV2AuxiliaryTableResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2AuxiliaryTableResponseOutput)
}

// Target used to match against for discovery with BigQuery tables
type GooglePrivacyDlpV2BigQueryDiscoveryTarget struct {
	// How often and when to update profiles. New tables that match both the filter and conditions are scanned as quickly as possible depending on system capacity.
	Cadence *GooglePrivacyDlpV2DiscoveryGenerationCadence `pulumi:"cadence"`
	// In addition to matching the filter, these conditions must be true before a profile is generated.
	Conditions *GooglePrivacyDlpV2DiscoveryBigQueryConditions `pulumi:"conditions"`
	// Tables that match this filter will not have profiles created.
	Disabled *GooglePrivacyDlpV2Disabled `pulumi:"disabled"`
	// The tables the discovery cadence applies to. The first target with a matching filter will be the one to apply to a table.
	Filter GooglePrivacyDlpV2DiscoveryBigQueryFilter `pulumi:"filter"`
}

// GooglePrivacyDlpV2BigQueryDiscoveryTargetInput is an input type that accepts GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs and GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryDiscoveryTargetInput` via:
//
//	GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs{...}
type GooglePrivacyDlpV2BigQueryDiscoveryTargetInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryDiscoveryTargetOutput() GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput
	ToGooglePrivacyDlpV2BigQueryDiscoveryTargetOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput
}

// Target used to match against for discovery with BigQuery tables
type GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs struct {
	// How often and when to update profiles. New tables that match both the filter and conditions are scanned as quickly as possible depending on system capacity.
	Cadence GooglePrivacyDlpV2DiscoveryGenerationCadencePtrInput `pulumi:"cadence"`
	// In addition to matching the filter, these conditions must be true before a profile is generated.
	Conditions GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrInput `pulumi:"conditions"`
	// Tables that match this filter will not have profiles created.
	Disabled GooglePrivacyDlpV2DisabledPtrInput `pulumi:"disabled"`
	// The tables the discovery cadence applies to. The first target with a matching filter will be the one to apply to a table.
	Filter GooglePrivacyDlpV2DiscoveryBigQueryFilterInput `pulumi:"filter"`
}

func (GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryDiscoveryTarget)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetOutput() GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput {
	return i.ToGooglePrivacyDlpV2BigQueryDiscoveryTargetOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput)
}

func (i GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput() GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput).ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrInput is an input type that accepts GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs, GooglePrivacyDlpV2BigQueryDiscoveryTargetPtr and GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrInput` via:
//
//	        GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput() GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput
	ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput
}

type googlePrivacyDlpV2BigQueryDiscoveryTargetPtrType GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs

func GooglePrivacyDlpV2BigQueryDiscoveryTargetPtr(v *GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs) GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrInput {
	return (*googlePrivacyDlpV2BigQueryDiscoveryTargetPtrType)(v)
}

func (*googlePrivacyDlpV2BigQueryDiscoveryTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryDiscoveryTarget)(nil)).Elem()
}

func (i *googlePrivacyDlpV2BigQueryDiscoveryTargetPtrType) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput() GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2BigQueryDiscoveryTargetPtrType) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput)
}

// Target used to match against for discovery with BigQuery tables
type GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryDiscoveryTarget)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetOutput() GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput() GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput {
	return o.ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2BigQueryDiscoveryTarget) *GooglePrivacyDlpV2BigQueryDiscoveryTarget {
		return &v
	}).(GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput)
}

// How often and when to update profiles. New tables that match both the filter and conditions are scanned as quickly as possible depending on system capacity.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput) Cadence() GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryDiscoveryTarget) *GooglePrivacyDlpV2DiscoveryGenerationCadence {
		return v.Cadence
	}).(GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput)
}

// In addition to matching the filter, these conditions must be true before a profile is generated.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput) Conditions() GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryDiscoveryTarget) *GooglePrivacyDlpV2DiscoveryBigQueryConditions {
		return v.Conditions
	}).(GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput)
}

// Tables that match this filter will not have profiles created.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput) Disabled() GooglePrivacyDlpV2DisabledPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryDiscoveryTarget) *GooglePrivacyDlpV2Disabled { return v.Disabled }).(GooglePrivacyDlpV2DisabledPtrOutput)
}

// The tables the discovery cadence applies to. The first target with a matching filter will be the one to apply to a table.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput) Filter() GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryDiscoveryTarget) GooglePrivacyDlpV2DiscoveryBigQueryFilter {
		return v.Filter
	}).(GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput)
}

type GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryDiscoveryTarget)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput() GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput) Elem() GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryDiscoveryTarget) GooglePrivacyDlpV2BigQueryDiscoveryTarget {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2BigQueryDiscoveryTarget
		return ret
	}).(GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput)
}

// How often and when to update profiles. New tables that match both the filter and conditions are scanned as quickly as possible depending on system capacity.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput) Cadence() GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryDiscoveryTarget) *GooglePrivacyDlpV2DiscoveryGenerationCadence {
		if v == nil {
			return nil
		}
		return v.Cadence
	}).(GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput)
}

// In addition to matching the filter, these conditions must be true before a profile is generated.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput) Conditions() GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryDiscoveryTarget) *GooglePrivacyDlpV2DiscoveryBigQueryConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput)
}

// Tables that match this filter will not have profiles created.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput) Disabled() GooglePrivacyDlpV2DisabledPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryDiscoveryTarget) *GooglePrivacyDlpV2Disabled {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(GooglePrivacyDlpV2DisabledPtrOutput)
}

// The tables the discovery cadence applies to. The first target with a matching filter will be the one to apply to a table.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput) Filter() GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryDiscoveryTarget) *GooglePrivacyDlpV2DiscoveryBigQueryFilter {
		if v == nil {
			return nil
		}
		return &v.Filter
	}).(GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput)
}

// Target used to match against for discovery with BigQuery tables
type GooglePrivacyDlpV2BigQueryDiscoveryTargetResponse struct {
	// How often and when to update profiles. New tables that match both the filter and conditions are scanned as quickly as possible depending on system capacity.
	Cadence GooglePrivacyDlpV2DiscoveryGenerationCadenceResponse `pulumi:"cadence"`
	// In addition to matching the filter, these conditions must be true before a profile is generated.
	Conditions GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponse `pulumi:"conditions"`
	// Tables that match this filter will not have profiles created.
	Disabled GooglePrivacyDlpV2DisabledResponse `pulumi:"disabled"`
	// The tables the discovery cadence applies to. The first target with a matching filter will be the one to apply to a table.
	Filter GooglePrivacyDlpV2DiscoveryBigQueryFilterResponse `pulumi:"filter"`
}

// Target used to match against for discovery with BigQuery tables
type GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryDiscoveryTargetResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput() GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput) ToGooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput {
	return o
}

// How often and when to update profiles. New tables that match both the filter and conditions are scanned as quickly as possible depending on system capacity.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput) Cadence() GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryDiscoveryTargetResponse) GooglePrivacyDlpV2DiscoveryGenerationCadenceResponse {
		return v.Cadence
	}).(GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput)
}

// In addition to matching the filter, these conditions must be true before a profile is generated.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput) Conditions() GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryDiscoveryTargetResponse) GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponse {
		return v.Conditions
	}).(GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput)
}

// Tables that match this filter will not have profiles created.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput) Disabled() GooglePrivacyDlpV2DisabledResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryDiscoveryTargetResponse) GooglePrivacyDlpV2DisabledResponse {
		return v.Disabled
	}).(GooglePrivacyDlpV2DisabledResponseOutput)
}

// The tables the discovery cadence applies to. The first target with a matching filter will be the one to apply to a table.
func (o GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput) Filter() GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryDiscoveryTargetResponse) GooglePrivacyDlpV2DiscoveryBigQueryFilterResponse {
		return v.Filter
	}).(GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput)
}

// Message defining a field of a BigQuery table.
type GooglePrivacyDlpV2BigQueryField struct {
	// Designated field in the BigQuery table.
	Field *GooglePrivacyDlpV2FieldId `pulumi:"field"`
	// Source table of the field.
	Table *GooglePrivacyDlpV2BigQueryTable `pulumi:"table"`
}

// GooglePrivacyDlpV2BigQueryFieldInput is an input type that accepts GooglePrivacyDlpV2BigQueryFieldArgs and GooglePrivacyDlpV2BigQueryFieldOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryFieldInput` via:
//
//	GooglePrivacyDlpV2BigQueryFieldArgs{...}
type GooglePrivacyDlpV2BigQueryFieldInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryFieldOutput() GooglePrivacyDlpV2BigQueryFieldOutput
	ToGooglePrivacyDlpV2BigQueryFieldOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryFieldOutput
}

// Message defining a field of a BigQuery table.
type GooglePrivacyDlpV2BigQueryFieldArgs struct {
	// Designated field in the BigQuery table.
	Field GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"field"`
	// Source table of the field.
	Table GooglePrivacyDlpV2BigQueryTablePtrInput `pulumi:"table"`
}

func (GooglePrivacyDlpV2BigQueryFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryField)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BigQueryFieldArgs) ToGooglePrivacyDlpV2BigQueryFieldOutput() GooglePrivacyDlpV2BigQueryFieldOutput {
	return i.ToGooglePrivacyDlpV2BigQueryFieldOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryFieldArgs) ToGooglePrivacyDlpV2BigQueryFieldOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryFieldOutput)
}

func (i GooglePrivacyDlpV2BigQueryFieldArgs) ToGooglePrivacyDlpV2BigQueryFieldPtrOutput() GooglePrivacyDlpV2BigQueryFieldPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryFieldPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryFieldArgs) ToGooglePrivacyDlpV2BigQueryFieldPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryFieldOutput).ToGooglePrivacyDlpV2BigQueryFieldPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2BigQueryFieldPtrInput is an input type that accepts GooglePrivacyDlpV2BigQueryFieldArgs, GooglePrivacyDlpV2BigQueryFieldPtr and GooglePrivacyDlpV2BigQueryFieldPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryFieldPtrInput` via:
//
//	        GooglePrivacyDlpV2BigQueryFieldArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2BigQueryFieldPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryFieldPtrOutput() GooglePrivacyDlpV2BigQueryFieldPtrOutput
	ToGooglePrivacyDlpV2BigQueryFieldPtrOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryFieldPtrOutput
}

type googlePrivacyDlpV2BigQueryFieldPtrType GooglePrivacyDlpV2BigQueryFieldArgs

func GooglePrivacyDlpV2BigQueryFieldPtr(v *GooglePrivacyDlpV2BigQueryFieldArgs) GooglePrivacyDlpV2BigQueryFieldPtrInput {
	return (*googlePrivacyDlpV2BigQueryFieldPtrType)(v)
}

func (*googlePrivacyDlpV2BigQueryFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryField)(nil)).Elem()
}

func (i *googlePrivacyDlpV2BigQueryFieldPtrType) ToGooglePrivacyDlpV2BigQueryFieldPtrOutput() GooglePrivacyDlpV2BigQueryFieldPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryFieldPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2BigQueryFieldPtrType) ToGooglePrivacyDlpV2BigQueryFieldPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryFieldPtrOutput)
}

// Message defining a field of a BigQuery table.
type GooglePrivacyDlpV2BigQueryFieldOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryField)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryFieldOutput) ToGooglePrivacyDlpV2BigQueryFieldOutput() GooglePrivacyDlpV2BigQueryFieldOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryFieldOutput) ToGooglePrivacyDlpV2BigQueryFieldOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryFieldOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryFieldOutput) ToGooglePrivacyDlpV2BigQueryFieldPtrOutput() GooglePrivacyDlpV2BigQueryFieldPtrOutput {
	return o.ToGooglePrivacyDlpV2BigQueryFieldPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2BigQueryFieldOutput) ToGooglePrivacyDlpV2BigQueryFieldPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2BigQueryField) *GooglePrivacyDlpV2BigQueryField {
		return &v
	}).(GooglePrivacyDlpV2BigQueryFieldPtrOutput)
}

// Designated field in the BigQuery table.
func (o GooglePrivacyDlpV2BigQueryFieldOutput) Field() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryField) *GooglePrivacyDlpV2FieldId { return v.Field }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// Source table of the field.
func (o GooglePrivacyDlpV2BigQueryFieldOutput) Table() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryField) *GooglePrivacyDlpV2BigQueryTable { return v.Table }).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

type GooglePrivacyDlpV2BigQueryFieldPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryField)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryFieldPtrOutput) ToGooglePrivacyDlpV2BigQueryFieldPtrOutput() GooglePrivacyDlpV2BigQueryFieldPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryFieldPtrOutput) ToGooglePrivacyDlpV2BigQueryFieldPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryFieldPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryFieldPtrOutput) Elem() GooglePrivacyDlpV2BigQueryFieldOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryField) GooglePrivacyDlpV2BigQueryField {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2BigQueryField
		return ret
	}).(GooglePrivacyDlpV2BigQueryFieldOutput)
}

// Designated field in the BigQuery table.
func (o GooglePrivacyDlpV2BigQueryFieldPtrOutput) Field() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryField) *GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.Field
	}).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// Source table of the field.
func (o GooglePrivacyDlpV2BigQueryFieldPtrOutput) Table() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryField) *GooglePrivacyDlpV2BigQueryTable {
		if v == nil {
			return nil
		}
		return v.Table
	}).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

// Message defining a field of a BigQuery table.
type GooglePrivacyDlpV2BigQueryFieldResponse struct {
	// Designated field in the BigQuery table.
	Field GooglePrivacyDlpV2FieldIdResponse `pulumi:"field"`
	// Source table of the field.
	Table GooglePrivacyDlpV2BigQueryTableResponse `pulumi:"table"`
}

// Message defining a field of a BigQuery table.
type GooglePrivacyDlpV2BigQueryFieldResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryFieldResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryFieldResponseOutput) ToGooglePrivacyDlpV2BigQueryFieldResponseOutput() GooglePrivacyDlpV2BigQueryFieldResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryFieldResponseOutput) ToGooglePrivacyDlpV2BigQueryFieldResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryFieldResponseOutput {
	return o
}

// Designated field in the BigQuery table.
func (o GooglePrivacyDlpV2BigQueryFieldResponseOutput) Field() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryFieldResponse) GooglePrivacyDlpV2FieldIdResponse { return v.Field }).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// Source table of the field.
func (o GooglePrivacyDlpV2BigQueryFieldResponseOutput) Table() GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryFieldResponse) GooglePrivacyDlpV2BigQueryTableResponse {
		return v.Table
	}).(GooglePrivacyDlpV2BigQueryTableResponseOutput)
}

// Options defining BigQuery table and row identifiers.
type GooglePrivacyDlpV2BigQueryOptions struct {
	// References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
	ExcludedFields []GooglePrivacyDlpV2FieldId `pulumi:"excludedFields"`
	// Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.
	IdentifyingFields []GooglePrivacyDlpV2FieldId `pulumi:"identifyingFields"`
	// Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
	IncludedFields []GooglePrivacyDlpV2FieldId `pulumi:"includedFields"`
	// Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
	RowsLimit *string `pulumi:"rowsLimit"`
	// Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.
	RowsLimitPercent *int                                           `pulumi:"rowsLimitPercent"`
	SampleMethod     *GooglePrivacyDlpV2BigQueryOptionsSampleMethod `pulumi:"sampleMethod"`
	// Complete BigQuery table reference.
	TableReference *GooglePrivacyDlpV2BigQueryTable `pulumi:"tableReference"`
}

// GooglePrivacyDlpV2BigQueryOptionsInput is an input type that accepts GooglePrivacyDlpV2BigQueryOptionsArgs and GooglePrivacyDlpV2BigQueryOptionsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryOptionsInput` via:
//
//	GooglePrivacyDlpV2BigQueryOptionsArgs{...}
type GooglePrivacyDlpV2BigQueryOptionsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryOptionsOutput() GooglePrivacyDlpV2BigQueryOptionsOutput
	ToGooglePrivacyDlpV2BigQueryOptionsOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryOptionsOutput
}

// Options defining BigQuery table and row identifiers.
type GooglePrivacyDlpV2BigQueryOptionsArgs struct {
	// References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
	ExcludedFields GooglePrivacyDlpV2FieldIdArrayInput `pulumi:"excludedFields"`
	// Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.
	IdentifyingFields GooglePrivacyDlpV2FieldIdArrayInput `pulumi:"identifyingFields"`
	// Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
	IncludedFields GooglePrivacyDlpV2FieldIdArrayInput `pulumi:"includedFields"`
	// Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
	RowsLimit pulumi.StringPtrInput `pulumi:"rowsLimit"`
	// Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.
	RowsLimitPercent pulumi.IntPtrInput                                    `pulumi:"rowsLimitPercent"`
	SampleMethod     GooglePrivacyDlpV2BigQueryOptionsSampleMethodPtrInput `pulumi:"sampleMethod"`
	// Complete BigQuery table reference.
	TableReference GooglePrivacyDlpV2BigQueryTablePtrInput `pulumi:"tableReference"`
}

func (GooglePrivacyDlpV2BigQueryOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryOptions)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BigQueryOptionsArgs) ToGooglePrivacyDlpV2BigQueryOptionsOutput() GooglePrivacyDlpV2BigQueryOptionsOutput {
	return i.ToGooglePrivacyDlpV2BigQueryOptionsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryOptionsArgs) ToGooglePrivacyDlpV2BigQueryOptionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryOptionsOutput)
}

func (i GooglePrivacyDlpV2BigQueryOptionsArgs) ToGooglePrivacyDlpV2BigQueryOptionsPtrOutput() GooglePrivacyDlpV2BigQueryOptionsPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryOptionsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryOptionsArgs) ToGooglePrivacyDlpV2BigQueryOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryOptionsOutput).ToGooglePrivacyDlpV2BigQueryOptionsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2BigQueryOptionsPtrInput is an input type that accepts GooglePrivacyDlpV2BigQueryOptionsArgs, GooglePrivacyDlpV2BigQueryOptionsPtr and GooglePrivacyDlpV2BigQueryOptionsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryOptionsPtrInput` via:
//
//	        GooglePrivacyDlpV2BigQueryOptionsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2BigQueryOptionsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryOptionsPtrOutput() GooglePrivacyDlpV2BigQueryOptionsPtrOutput
	ToGooglePrivacyDlpV2BigQueryOptionsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryOptionsPtrOutput
}

type googlePrivacyDlpV2BigQueryOptionsPtrType GooglePrivacyDlpV2BigQueryOptionsArgs

func GooglePrivacyDlpV2BigQueryOptionsPtr(v *GooglePrivacyDlpV2BigQueryOptionsArgs) GooglePrivacyDlpV2BigQueryOptionsPtrInput {
	return (*googlePrivacyDlpV2BigQueryOptionsPtrType)(v)
}

func (*googlePrivacyDlpV2BigQueryOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryOptions)(nil)).Elem()
}

func (i *googlePrivacyDlpV2BigQueryOptionsPtrType) ToGooglePrivacyDlpV2BigQueryOptionsPtrOutput() GooglePrivacyDlpV2BigQueryOptionsPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryOptionsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2BigQueryOptionsPtrType) ToGooglePrivacyDlpV2BigQueryOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryOptionsPtrOutput)
}

// Options defining BigQuery table and row identifiers.
type GooglePrivacyDlpV2BigQueryOptionsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryOptions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryOptionsOutput) ToGooglePrivacyDlpV2BigQueryOptionsOutput() GooglePrivacyDlpV2BigQueryOptionsOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryOptionsOutput) ToGooglePrivacyDlpV2BigQueryOptionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryOptionsOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryOptionsOutput) ToGooglePrivacyDlpV2BigQueryOptionsPtrOutput() GooglePrivacyDlpV2BigQueryOptionsPtrOutput {
	return o.ToGooglePrivacyDlpV2BigQueryOptionsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2BigQueryOptionsOutput) ToGooglePrivacyDlpV2BigQueryOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2BigQueryOptions) *GooglePrivacyDlpV2BigQueryOptions {
		return &v
	}).(GooglePrivacyDlpV2BigQueryOptionsPtrOutput)
}

// References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
func (o GooglePrivacyDlpV2BigQueryOptionsOutput) ExcludedFields() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptions) []GooglePrivacyDlpV2FieldId { return v.ExcludedFields }).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.
func (o GooglePrivacyDlpV2BigQueryOptionsOutput) IdentifyingFields() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptions) []GooglePrivacyDlpV2FieldId { return v.IdentifyingFields }).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
func (o GooglePrivacyDlpV2BigQueryOptionsOutput) IncludedFields() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptions) []GooglePrivacyDlpV2FieldId { return v.IncludedFields }).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
func (o GooglePrivacyDlpV2BigQueryOptionsOutput) RowsLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptions) *string { return v.RowsLimit }).(pulumi.StringPtrOutput)
}

// Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.
func (o GooglePrivacyDlpV2BigQueryOptionsOutput) RowsLimitPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptions) *int { return v.RowsLimitPercent }).(pulumi.IntPtrOutput)
}

func (o GooglePrivacyDlpV2BigQueryOptionsOutput) SampleMethod() GooglePrivacyDlpV2BigQueryOptionsSampleMethodPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptions) *GooglePrivacyDlpV2BigQueryOptionsSampleMethod {
		return v.SampleMethod
	}).(GooglePrivacyDlpV2BigQueryOptionsSampleMethodPtrOutput)
}

// Complete BigQuery table reference.
func (o GooglePrivacyDlpV2BigQueryOptionsOutput) TableReference() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptions) *GooglePrivacyDlpV2BigQueryTable { return v.TableReference }).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

type GooglePrivacyDlpV2BigQueryOptionsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryOptions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryOptionsPtrOutput) ToGooglePrivacyDlpV2BigQueryOptionsPtrOutput() GooglePrivacyDlpV2BigQueryOptionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryOptionsPtrOutput) ToGooglePrivacyDlpV2BigQueryOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryOptionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryOptionsPtrOutput) Elem() GooglePrivacyDlpV2BigQueryOptionsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryOptions) GooglePrivacyDlpV2BigQueryOptions {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2BigQueryOptions
		return ret
	}).(GooglePrivacyDlpV2BigQueryOptionsOutput)
}

// References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
func (o GooglePrivacyDlpV2BigQueryOptionsPtrOutput) ExcludedFields() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryOptions) []GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.ExcludedFields
	}).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.
func (o GooglePrivacyDlpV2BigQueryOptionsPtrOutput) IdentifyingFields() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryOptions) []GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.IdentifyingFields
	}).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
func (o GooglePrivacyDlpV2BigQueryOptionsPtrOutput) IncludedFields() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryOptions) []GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.IncludedFields
	}).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
func (o GooglePrivacyDlpV2BigQueryOptionsPtrOutput) RowsLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryOptions) *string {
		if v == nil {
			return nil
		}
		return v.RowsLimit
	}).(pulumi.StringPtrOutput)
}

// Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.
func (o GooglePrivacyDlpV2BigQueryOptionsPtrOutput) RowsLimitPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryOptions) *int {
		if v == nil {
			return nil
		}
		return v.RowsLimitPercent
	}).(pulumi.IntPtrOutput)
}

func (o GooglePrivacyDlpV2BigQueryOptionsPtrOutput) SampleMethod() GooglePrivacyDlpV2BigQueryOptionsSampleMethodPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryOptions) *GooglePrivacyDlpV2BigQueryOptionsSampleMethod {
		if v == nil {
			return nil
		}
		return v.SampleMethod
	}).(GooglePrivacyDlpV2BigQueryOptionsSampleMethodPtrOutput)
}

// Complete BigQuery table reference.
func (o GooglePrivacyDlpV2BigQueryOptionsPtrOutput) TableReference() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryOptions) *GooglePrivacyDlpV2BigQueryTable {
		if v == nil {
			return nil
		}
		return v.TableReference
	}).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

// Options defining BigQuery table and row identifiers.
type GooglePrivacyDlpV2BigQueryOptionsResponse struct {
	// References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
	ExcludedFields []GooglePrivacyDlpV2FieldIdResponse `pulumi:"excludedFields"`
	// Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.
	IdentifyingFields []GooglePrivacyDlpV2FieldIdResponse `pulumi:"identifyingFields"`
	// Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
	IncludedFields []GooglePrivacyDlpV2FieldIdResponse `pulumi:"includedFields"`
	// Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
	RowsLimit string `pulumi:"rowsLimit"`
	// Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.
	RowsLimitPercent int    `pulumi:"rowsLimitPercent"`
	SampleMethod     string `pulumi:"sampleMethod"`
	// Complete BigQuery table reference.
	TableReference GooglePrivacyDlpV2BigQueryTableResponse `pulumi:"tableReference"`
}

// Options defining BigQuery table and row identifiers.
type GooglePrivacyDlpV2BigQueryOptionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryOptionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryOptionsResponseOutput) ToGooglePrivacyDlpV2BigQueryOptionsResponseOutput() GooglePrivacyDlpV2BigQueryOptionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryOptionsResponseOutput) ToGooglePrivacyDlpV2BigQueryOptionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryOptionsResponseOutput {
	return o
}

// References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
func (o GooglePrivacyDlpV2BigQueryOptionsResponseOutput) ExcludedFields() GooglePrivacyDlpV2FieldIdResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptionsResponse) []GooglePrivacyDlpV2FieldIdResponse {
		return v.ExcludedFields
	}).(GooglePrivacyDlpV2FieldIdResponseArrayOutput)
}

// Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.
func (o GooglePrivacyDlpV2BigQueryOptionsResponseOutput) IdentifyingFields() GooglePrivacyDlpV2FieldIdResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptionsResponse) []GooglePrivacyDlpV2FieldIdResponse {
		return v.IdentifyingFields
	}).(GooglePrivacyDlpV2FieldIdResponseArrayOutput)
}

// Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
func (o GooglePrivacyDlpV2BigQueryOptionsResponseOutput) IncludedFields() GooglePrivacyDlpV2FieldIdResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptionsResponse) []GooglePrivacyDlpV2FieldIdResponse {
		return v.IncludedFields
	}).(GooglePrivacyDlpV2FieldIdResponseArrayOutput)
}

// Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
func (o GooglePrivacyDlpV2BigQueryOptionsResponseOutput) RowsLimit() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptionsResponse) string { return v.RowsLimit }).(pulumi.StringOutput)
}

// Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.
func (o GooglePrivacyDlpV2BigQueryOptionsResponseOutput) RowsLimitPercent() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptionsResponse) int { return v.RowsLimitPercent }).(pulumi.IntOutput)
}

func (o GooglePrivacyDlpV2BigQueryOptionsResponseOutput) SampleMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptionsResponse) string { return v.SampleMethod }).(pulumi.StringOutput)
}

// Complete BigQuery table reference.
func (o GooglePrivacyDlpV2BigQueryOptionsResponseOutput) TableReference() GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryOptionsResponse) GooglePrivacyDlpV2BigQueryTableResponse {
		return v.TableReference
	}).(GooglePrivacyDlpV2BigQueryTableResponseOutput)
}

// A pattern to match against one or more tables, datasets, or projects that contain BigQuery tables. At least one pattern must be specified. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
type GooglePrivacyDlpV2BigQueryRegex struct {
	// If unset, this property matches all datasets.
	DatasetIdRegex *string `pulumi:"datasetIdRegex"`
	// For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.
	ProjectIdRegex *string `pulumi:"projectIdRegex"`
	// If unset, this property matches all tables.
	TableIdRegex *string `pulumi:"tableIdRegex"`
}

// GooglePrivacyDlpV2BigQueryRegexInput is an input type that accepts GooglePrivacyDlpV2BigQueryRegexArgs and GooglePrivacyDlpV2BigQueryRegexOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryRegexInput` via:
//
//	GooglePrivacyDlpV2BigQueryRegexArgs{...}
type GooglePrivacyDlpV2BigQueryRegexInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryRegexOutput() GooglePrivacyDlpV2BigQueryRegexOutput
	ToGooglePrivacyDlpV2BigQueryRegexOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryRegexOutput
}

// A pattern to match against one or more tables, datasets, or projects that contain BigQuery tables. At least one pattern must be specified. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
type GooglePrivacyDlpV2BigQueryRegexArgs struct {
	// If unset, this property matches all datasets.
	DatasetIdRegex pulumi.StringPtrInput `pulumi:"datasetIdRegex"`
	// For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.
	ProjectIdRegex pulumi.StringPtrInput `pulumi:"projectIdRegex"`
	// If unset, this property matches all tables.
	TableIdRegex pulumi.StringPtrInput `pulumi:"tableIdRegex"`
}

func (GooglePrivacyDlpV2BigQueryRegexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryRegex)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BigQueryRegexArgs) ToGooglePrivacyDlpV2BigQueryRegexOutput() GooglePrivacyDlpV2BigQueryRegexOutput {
	return i.ToGooglePrivacyDlpV2BigQueryRegexOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryRegexArgs) ToGooglePrivacyDlpV2BigQueryRegexOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryRegexOutput)
}

// GooglePrivacyDlpV2BigQueryRegexArrayInput is an input type that accepts GooglePrivacyDlpV2BigQueryRegexArray and GooglePrivacyDlpV2BigQueryRegexArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryRegexArrayInput` via:
//
//	GooglePrivacyDlpV2BigQueryRegexArray{ GooglePrivacyDlpV2BigQueryRegexArgs{...} }
type GooglePrivacyDlpV2BigQueryRegexArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryRegexArrayOutput() GooglePrivacyDlpV2BigQueryRegexArrayOutput
	ToGooglePrivacyDlpV2BigQueryRegexArrayOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryRegexArrayOutput
}

type GooglePrivacyDlpV2BigQueryRegexArray []GooglePrivacyDlpV2BigQueryRegexInput

func (GooglePrivacyDlpV2BigQueryRegexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2BigQueryRegex)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BigQueryRegexArray) ToGooglePrivacyDlpV2BigQueryRegexArrayOutput() GooglePrivacyDlpV2BigQueryRegexArrayOutput {
	return i.ToGooglePrivacyDlpV2BigQueryRegexArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryRegexArray) ToGooglePrivacyDlpV2BigQueryRegexArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryRegexArrayOutput)
}

// A pattern to match against one or more tables, datasets, or projects that contain BigQuery tables. At least one pattern must be specified. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
type GooglePrivacyDlpV2BigQueryRegexOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryRegexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryRegex)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryRegexOutput) ToGooglePrivacyDlpV2BigQueryRegexOutput() GooglePrivacyDlpV2BigQueryRegexOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexOutput) ToGooglePrivacyDlpV2BigQueryRegexOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexOutput {
	return o
}

// If unset, this property matches all datasets.
func (o GooglePrivacyDlpV2BigQueryRegexOutput) DatasetIdRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryRegex) *string { return v.DatasetIdRegex }).(pulumi.StringPtrOutput)
}

// For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.
func (o GooglePrivacyDlpV2BigQueryRegexOutput) ProjectIdRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryRegex) *string { return v.ProjectIdRegex }).(pulumi.StringPtrOutput)
}

// If unset, this property matches all tables.
func (o GooglePrivacyDlpV2BigQueryRegexOutput) TableIdRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryRegex) *string { return v.TableIdRegex }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2BigQueryRegexArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryRegexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2BigQueryRegex)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryRegexArrayOutput) ToGooglePrivacyDlpV2BigQueryRegexArrayOutput() GooglePrivacyDlpV2BigQueryRegexArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexArrayOutput) ToGooglePrivacyDlpV2BigQueryRegexArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2BigQueryRegexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2BigQueryRegex {
		return vs[0].([]GooglePrivacyDlpV2BigQueryRegex)[vs[1].(int)]
	}).(GooglePrivacyDlpV2BigQueryRegexOutput)
}

// A pattern to match against one or more tables, datasets, or projects that contain BigQuery tables. At least one pattern must be specified. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
type GooglePrivacyDlpV2BigQueryRegexResponse struct {
	// If unset, this property matches all datasets.
	DatasetIdRegex string `pulumi:"datasetIdRegex"`
	// For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.
	ProjectIdRegex string `pulumi:"projectIdRegex"`
	// If unset, this property matches all tables.
	TableIdRegex string `pulumi:"tableIdRegex"`
}

// A pattern to match against one or more tables, datasets, or projects that contain BigQuery tables. At least one pattern must be specified. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
type GooglePrivacyDlpV2BigQueryRegexResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryRegexResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryRegexResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryRegexResponseOutput) ToGooglePrivacyDlpV2BigQueryRegexResponseOutput() GooglePrivacyDlpV2BigQueryRegexResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexResponseOutput) ToGooglePrivacyDlpV2BigQueryRegexResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexResponseOutput {
	return o
}

// If unset, this property matches all datasets.
func (o GooglePrivacyDlpV2BigQueryRegexResponseOutput) DatasetIdRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryRegexResponse) string { return v.DatasetIdRegex }).(pulumi.StringOutput)
}

// For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.
func (o GooglePrivacyDlpV2BigQueryRegexResponseOutput) ProjectIdRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryRegexResponse) string { return v.ProjectIdRegex }).(pulumi.StringOutput)
}

// If unset, this property matches all tables.
func (o GooglePrivacyDlpV2BigQueryRegexResponseOutput) TableIdRegex() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryRegexResponse) string { return v.TableIdRegex }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2BigQueryRegexResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryRegexResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2BigQueryRegexResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryRegexResponseArrayOutput) ToGooglePrivacyDlpV2BigQueryRegexResponseArrayOutput() GooglePrivacyDlpV2BigQueryRegexResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexResponseArrayOutput) ToGooglePrivacyDlpV2BigQueryRegexResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2BigQueryRegexResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2BigQueryRegexResponse {
		return vs[0].([]GooglePrivacyDlpV2BigQueryRegexResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2BigQueryRegexResponseOutput)
}

// A collection of regular expressions to determine what tables to match against.
type GooglePrivacyDlpV2BigQueryRegexes struct {
	// A single BigQuery regular expression pattern to match against one or more tables, datasets, or projects that contain BigQuery tables.
	Patterns []GooglePrivacyDlpV2BigQueryRegex `pulumi:"patterns"`
}

// GooglePrivacyDlpV2BigQueryRegexesInput is an input type that accepts GooglePrivacyDlpV2BigQueryRegexesArgs and GooglePrivacyDlpV2BigQueryRegexesOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryRegexesInput` via:
//
//	GooglePrivacyDlpV2BigQueryRegexesArgs{...}
type GooglePrivacyDlpV2BigQueryRegexesInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryRegexesOutput() GooglePrivacyDlpV2BigQueryRegexesOutput
	ToGooglePrivacyDlpV2BigQueryRegexesOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryRegexesOutput
}

// A collection of regular expressions to determine what tables to match against.
type GooglePrivacyDlpV2BigQueryRegexesArgs struct {
	// A single BigQuery regular expression pattern to match against one or more tables, datasets, or projects that contain BigQuery tables.
	Patterns GooglePrivacyDlpV2BigQueryRegexArrayInput `pulumi:"patterns"`
}

func (GooglePrivacyDlpV2BigQueryRegexesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryRegexes)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BigQueryRegexesArgs) ToGooglePrivacyDlpV2BigQueryRegexesOutput() GooglePrivacyDlpV2BigQueryRegexesOutput {
	return i.ToGooglePrivacyDlpV2BigQueryRegexesOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryRegexesArgs) ToGooglePrivacyDlpV2BigQueryRegexesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryRegexesOutput)
}

func (i GooglePrivacyDlpV2BigQueryRegexesArgs) ToGooglePrivacyDlpV2BigQueryRegexesPtrOutput() GooglePrivacyDlpV2BigQueryRegexesPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryRegexesPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryRegexesArgs) ToGooglePrivacyDlpV2BigQueryRegexesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryRegexesOutput).ToGooglePrivacyDlpV2BigQueryRegexesPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2BigQueryRegexesPtrInput is an input type that accepts GooglePrivacyDlpV2BigQueryRegexesArgs, GooglePrivacyDlpV2BigQueryRegexesPtr and GooglePrivacyDlpV2BigQueryRegexesPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryRegexesPtrInput` via:
//
//	        GooglePrivacyDlpV2BigQueryRegexesArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2BigQueryRegexesPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryRegexesPtrOutput() GooglePrivacyDlpV2BigQueryRegexesPtrOutput
	ToGooglePrivacyDlpV2BigQueryRegexesPtrOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryRegexesPtrOutput
}

type googlePrivacyDlpV2BigQueryRegexesPtrType GooglePrivacyDlpV2BigQueryRegexesArgs

func GooglePrivacyDlpV2BigQueryRegexesPtr(v *GooglePrivacyDlpV2BigQueryRegexesArgs) GooglePrivacyDlpV2BigQueryRegexesPtrInput {
	return (*googlePrivacyDlpV2BigQueryRegexesPtrType)(v)
}

func (*googlePrivacyDlpV2BigQueryRegexesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryRegexes)(nil)).Elem()
}

func (i *googlePrivacyDlpV2BigQueryRegexesPtrType) ToGooglePrivacyDlpV2BigQueryRegexesPtrOutput() GooglePrivacyDlpV2BigQueryRegexesPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryRegexesPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2BigQueryRegexesPtrType) ToGooglePrivacyDlpV2BigQueryRegexesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryRegexesPtrOutput)
}

// A collection of regular expressions to determine what tables to match against.
type GooglePrivacyDlpV2BigQueryRegexesOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryRegexesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryRegexes)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryRegexesOutput) ToGooglePrivacyDlpV2BigQueryRegexesOutput() GooglePrivacyDlpV2BigQueryRegexesOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexesOutput) ToGooglePrivacyDlpV2BigQueryRegexesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexesOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexesOutput) ToGooglePrivacyDlpV2BigQueryRegexesPtrOutput() GooglePrivacyDlpV2BigQueryRegexesPtrOutput {
	return o.ToGooglePrivacyDlpV2BigQueryRegexesPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2BigQueryRegexesOutput) ToGooglePrivacyDlpV2BigQueryRegexesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2BigQueryRegexes) *GooglePrivacyDlpV2BigQueryRegexes {
		return &v
	}).(GooglePrivacyDlpV2BigQueryRegexesPtrOutput)
}

// A single BigQuery regular expression pattern to match against one or more tables, datasets, or projects that contain BigQuery tables.
func (o GooglePrivacyDlpV2BigQueryRegexesOutput) Patterns() GooglePrivacyDlpV2BigQueryRegexArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryRegexes) []GooglePrivacyDlpV2BigQueryRegex { return v.Patterns }).(GooglePrivacyDlpV2BigQueryRegexArrayOutput)
}

type GooglePrivacyDlpV2BigQueryRegexesPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryRegexesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryRegexes)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryRegexesPtrOutput) ToGooglePrivacyDlpV2BigQueryRegexesPtrOutput() GooglePrivacyDlpV2BigQueryRegexesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexesPtrOutput) ToGooglePrivacyDlpV2BigQueryRegexesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexesPtrOutput) Elem() GooglePrivacyDlpV2BigQueryRegexesOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryRegexes) GooglePrivacyDlpV2BigQueryRegexes {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2BigQueryRegexes
		return ret
	}).(GooglePrivacyDlpV2BigQueryRegexesOutput)
}

// A single BigQuery regular expression pattern to match against one or more tables, datasets, or projects that contain BigQuery tables.
func (o GooglePrivacyDlpV2BigQueryRegexesPtrOutput) Patterns() GooglePrivacyDlpV2BigQueryRegexArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryRegexes) []GooglePrivacyDlpV2BigQueryRegex {
		if v == nil {
			return nil
		}
		return v.Patterns
	}).(GooglePrivacyDlpV2BigQueryRegexArrayOutput)
}

// A collection of regular expressions to determine what tables to match against.
type GooglePrivacyDlpV2BigQueryRegexesResponse struct {
	// A single BigQuery regular expression pattern to match against one or more tables, datasets, or projects that contain BigQuery tables.
	Patterns []GooglePrivacyDlpV2BigQueryRegexResponse `pulumi:"patterns"`
}

// A collection of regular expressions to determine what tables to match against.
type GooglePrivacyDlpV2BigQueryRegexesResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryRegexesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryRegexesResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryRegexesResponseOutput) ToGooglePrivacyDlpV2BigQueryRegexesResponseOutput() GooglePrivacyDlpV2BigQueryRegexesResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryRegexesResponseOutput) ToGooglePrivacyDlpV2BigQueryRegexesResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryRegexesResponseOutput {
	return o
}

// A single BigQuery regular expression pattern to match against one or more tables, datasets, or projects that contain BigQuery tables.
func (o GooglePrivacyDlpV2BigQueryRegexesResponseOutput) Patterns() GooglePrivacyDlpV2BigQueryRegexResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryRegexesResponse) []GooglePrivacyDlpV2BigQueryRegexResponse {
		return v.Patterns
	}).(GooglePrivacyDlpV2BigQueryRegexResponseArrayOutput)
}

// Message defining the location of a BigQuery table. A table is uniquely identified by its project_id, dataset_id, and table_name. Within a query a table is often referenced with a string in the format of: `:.` or `..`.
type GooglePrivacyDlpV2BigQueryTable struct {
	// Dataset ID of the table.
	DatasetId *string `pulumi:"datasetId"`
	// The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.
	Project *string `pulumi:"project"`
	// Name of the table.
	TableId *string `pulumi:"tableId"`
}

// GooglePrivacyDlpV2BigQueryTableInput is an input type that accepts GooglePrivacyDlpV2BigQueryTableArgs and GooglePrivacyDlpV2BigQueryTableOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryTableInput` via:
//
//	GooglePrivacyDlpV2BigQueryTableArgs{...}
type GooglePrivacyDlpV2BigQueryTableInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryTableOutput() GooglePrivacyDlpV2BigQueryTableOutput
	ToGooglePrivacyDlpV2BigQueryTableOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryTableOutput
}

// Message defining the location of a BigQuery table. A table is uniquely identified by its project_id, dataset_id, and table_name. Within a query a table is often referenced with a string in the format of: `:.` or `..`.
type GooglePrivacyDlpV2BigQueryTableArgs struct {
	// Dataset ID of the table.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Name of the table.
	TableId pulumi.StringPtrInput `pulumi:"tableId"`
}

func (GooglePrivacyDlpV2BigQueryTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTable)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BigQueryTableArgs) ToGooglePrivacyDlpV2BigQueryTableOutput() GooglePrivacyDlpV2BigQueryTableOutput {
	return i.ToGooglePrivacyDlpV2BigQueryTableOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryTableArgs) ToGooglePrivacyDlpV2BigQueryTableOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryTableOutput)
}

func (i GooglePrivacyDlpV2BigQueryTableArgs) ToGooglePrivacyDlpV2BigQueryTablePtrOutput() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryTablePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryTableArgs) ToGooglePrivacyDlpV2BigQueryTablePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryTableOutput).ToGooglePrivacyDlpV2BigQueryTablePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2BigQueryTablePtrInput is an input type that accepts GooglePrivacyDlpV2BigQueryTableArgs, GooglePrivacyDlpV2BigQueryTablePtr and GooglePrivacyDlpV2BigQueryTablePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryTablePtrInput` via:
//
//	        GooglePrivacyDlpV2BigQueryTableArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2BigQueryTablePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryTablePtrOutput() GooglePrivacyDlpV2BigQueryTablePtrOutput
	ToGooglePrivacyDlpV2BigQueryTablePtrOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryTablePtrOutput
}

type googlePrivacyDlpV2BigQueryTablePtrType GooglePrivacyDlpV2BigQueryTableArgs

func GooglePrivacyDlpV2BigQueryTablePtr(v *GooglePrivacyDlpV2BigQueryTableArgs) GooglePrivacyDlpV2BigQueryTablePtrInput {
	return (*googlePrivacyDlpV2BigQueryTablePtrType)(v)
}

func (*googlePrivacyDlpV2BigQueryTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryTable)(nil)).Elem()
}

func (i *googlePrivacyDlpV2BigQueryTablePtrType) ToGooglePrivacyDlpV2BigQueryTablePtrOutput() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryTablePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2BigQueryTablePtrType) ToGooglePrivacyDlpV2BigQueryTablePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

// Message defining the location of a BigQuery table. A table is uniquely identified by its project_id, dataset_id, and table_name. Within a query a table is often referenced with a string in the format of: `:.` or `..`.
type GooglePrivacyDlpV2BigQueryTableOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTable)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryTableOutput) ToGooglePrivacyDlpV2BigQueryTableOutput() GooglePrivacyDlpV2BigQueryTableOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableOutput) ToGooglePrivacyDlpV2BigQueryTableOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableOutput) ToGooglePrivacyDlpV2BigQueryTablePtrOutput() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ToGooglePrivacyDlpV2BigQueryTablePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2BigQueryTableOutput) ToGooglePrivacyDlpV2BigQueryTablePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2BigQueryTable) *GooglePrivacyDlpV2BigQueryTable {
		return &v
	}).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

// Dataset ID of the table.
func (o GooglePrivacyDlpV2BigQueryTableOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryTable) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.
func (o GooglePrivacyDlpV2BigQueryTableOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryTable) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Name of the table.
func (o GooglePrivacyDlpV2BigQueryTableOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryTable) *string { return v.TableId }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2BigQueryTablePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryTable)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryTablePtrOutput) ToGooglePrivacyDlpV2BigQueryTablePtrOutput() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTablePtrOutput) ToGooglePrivacyDlpV2BigQueryTablePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTablePtrOutput) Elem() GooglePrivacyDlpV2BigQueryTableOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryTable) GooglePrivacyDlpV2BigQueryTable {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2BigQueryTable
		return ret
	}).(GooglePrivacyDlpV2BigQueryTableOutput)
}

// Dataset ID of the table.
func (o GooglePrivacyDlpV2BigQueryTablePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryTable) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.
func (o GooglePrivacyDlpV2BigQueryTablePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryTable) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Name of the table.
func (o GooglePrivacyDlpV2BigQueryTablePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryTable) *string {
		if v == nil {
			return nil
		}
		return v.TableId
	}).(pulumi.StringPtrOutput)
}

// Specifies a collection of BigQuery tables. Used for Discovery.
type GooglePrivacyDlpV2BigQueryTableCollection struct {
	// A collection of regular expressions to match a BigQuery table against.
	IncludeRegexes *GooglePrivacyDlpV2BigQueryRegexes `pulumi:"includeRegexes"`
}

// GooglePrivacyDlpV2BigQueryTableCollectionInput is an input type that accepts GooglePrivacyDlpV2BigQueryTableCollectionArgs and GooglePrivacyDlpV2BigQueryTableCollectionOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryTableCollectionInput` via:
//
//	GooglePrivacyDlpV2BigQueryTableCollectionArgs{...}
type GooglePrivacyDlpV2BigQueryTableCollectionInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryTableCollectionOutput() GooglePrivacyDlpV2BigQueryTableCollectionOutput
	ToGooglePrivacyDlpV2BigQueryTableCollectionOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryTableCollectionOutput
}

// Specifies a collection of BigQuery tables. Used for Discovery.
type GooglePrivacyDlpV2BigQueryTableCollectionArgs struct {
	// A collection of regular expressions to match a BigQuery table against.
	IncludeRegexes GooglePrivacyDlpV2BigQueryRegexesPtrInput `pulumi:"includeRegexes"`
}

func (GooglePrivacyDlpV2BigQueryTableCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableCollection)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BigQueryTableCollectionArgs) ToGooglePrivacyDlpV2BigQueryTableCollectionOutput() GooglePrivacyDlpV2BigQueryTableCollectionOutput {
	return i.ToGooglePrivacyDlpV2BigQueryTableCollectionOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryTableCollectionArgs) ToGooglePrivacyDlpV2BigQueryTableCollectionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryTableCollectionOutput)
}

func (i GooglePrivacyDlpV2BigQueryTableCollectionArgs) ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutput() GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryTableCollectionArgs) ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryTableCollectionOutput).ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2BigQueryTableCollectionPtrInput is an input type that accepts GooglePrivacyDlpV2BigQueryTableCollectionArgs, GooglePrivacyDlpV2BigQueryTableCollectionPtr and GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryTableCollectionPtrInput` via:
//
//	        GooglePrivacyDlpV2BigQueryTableCollectionArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2BigQueryTableCollectionPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutput() GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput
	ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput
}

type googlePrivacyDlpV2BigQueryTableCollectionPtrType GooglePrivacyDlpV2BigQueryTableCollectionArgs

func GooglePrivacyDlpV2BigQueryTableCollectionPtr(v *GooglePrivacyDlpV2BigQueryTableCollectionArgs) GooglePrivacyDlpV2BigQueryTableCollectionPtrInput {
	return (*googlePrivacyDlpV2BigQueryTableCollectionPtrType)(v)
}

func (*googlePrivacyDlpV2BigQueryTableCollectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryTableCollection)(nil)).Elem()
}

func (i *googlePrivacyDlpV2BigQueryTableCollectionPtrType) ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutput() GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2BigQueryTableCollectionPtrType) ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput)
}

// Specifies a collection of BigQuery tables. Used for Discovery.
type GooglePrivacyDlpV2BigQueryTableCollectionOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryTableCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableCollection)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryTableCollectionOutput) ToGooglePrivacyDlpV2BigQueryTableCollectionOutput() GooglePrivacyDlpV2BigQueryTableCollectionOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableCollectionOutput) ToGooglePrivacyDlpV2BigQueryTableCollectionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableCollectionOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableCollectionOutput) ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutput() GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput {
	return o.ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2BigQueryTableCollectionOutput) ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2BigQueryTableCollection) *GooglePrivacyDlpV2BigQueryTableCollection {
		return &v
	}).(GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput)
}

// A collection of regular expressions to match a BigQuery table against.
func (o GooglePrivacyDlpV2BigQueryTableCollectionOutput) IncludeRegexes() GooglePrivacyDlpV2BigQueryRegexesPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryTableCollection) *GooglePrivacyDlpV2BigQueryRegexes {
		return v.IncludeRegexes
	}).(GooglePrivacyDlpV2BigQueryRegexesPtrOutput)
}

type GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryTableCollection)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput) ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutput() GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput) ToGooglePrivacyDlpV2BigQueryTableCollectionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput) Elem() GooglePrivacyDlpV2BigQueryTableCollectionOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryTableCollection) GooglePrivacyDlpV2BigQueryTableCollection {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2BigQueryTableCollection
		return ret
	}).(GooglePrivacyDlpV2BigQueryTableCollectionOutput)
}

// A collection of regular expressions to match a BigQuery table against.
func (o GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput) IncludeRegexes() GooglePrivacyDlpV2BigQueryRegexesPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryTableCollection) *GooglePrivacyDlpV2BigQueryRegexes {
		if v == nil {
			return nil
		}
		return v.IncludeRegexes
	}).(GooglePrivacyDlpV2BigQueryRegexesPtrOutput)
}

// Specifies a collection of BigQuery tables. Used for Discovery.
type GooglePrivacyDlpV2BigQueryTableCollectionResponse struct {
	// A collection of regular expressions to match a BigQuery table against.
	IncludeRegexes GooglePrivacyDlpV2BigQueryRegexesResponse `pulumi:"includeRegexes"`
}

// Specifies a collection of BigQuery tables. Used for Discovery.
type GooglePrivacyDlpV2BigQueryTableCollectionResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryTableCollectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableCollectionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryTableCollectionResponseOutput) ToGooglePrivacyDlpV2BigQueryTableCollectionResponseOutput() GooglePrivacyDlpV2BigQueryTableCollectionResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableCollectionResponseOutput) ToGooglePrivacyDlpV2BigQueryTableCollectionResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableCollectionResponseOutput {
	return o
}

// A collection of regular expressions to match a BigQuery table against.
func (o GooglePrivacyDlpV2BigQueryTableCollectionResponseOutput) IncludeRegexes() GooglePrivacyDlpV2BigQueryRegexesResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryTableCollectionResponse) GooglePrivacyDlpV2BigQueryRegexesResponse {
		return v.IncludeRegexes
	}).(GooglePrivacyDlpV2BigQueryRegexesResponseOutput)
}

// Message defining the location of a BigQuery table. A table is uniquely identified by its project_id, dataset_id, and table_name. Within a query a table is often referenced with a string in the format of: `:.` or `..`.
type GooglePrivacyDlpV2BigQueryTableResponse struct {
	// Dataset ID of the table.
	DatasetId string `pulumi:"datasetId"`
	// The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.
	Project string `pulumi:"project"`
	// Name of the table.
	TableId string `pulumi:"tableId"`
}

// Message defining the location of a BigQuery table. A table is uniquely identified by its project_id, dataset_id, and table_name. Within a query a table is often referenced with a string in the format of: `:.` or `..`.
type GooglePrivacyDlpV2BigQueryTableResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryTableResponseOutput) ToGooglePrivacyDlpV2BigQueryTableResponseOutput() GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableResponseOutput) ToGooglePrivacyDlpV2BigQueryTableResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o
}

// Dataset ID of the table.
func (o GooglePrivacyDlpV2BigQueryTableResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryTableResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.
func (o GooglePrivacyDlpV2BigQueryTableResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryTableResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Name of the table.
func (o GooglePrivacyDlpV2BigQueryTableResponseOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryTableResponse) string { return v.TableId }).(pulumi.StringOutput)
}

// The types of BigQuery tables supported by Cloud DLP.
type GooglePrivacyDlpV2BigQueryTableTypes struct {
	// A set of BigQuery table types.
	Types []GooglePrivacyDlpV2BigQueryTableTypesTypesItem `pulumi:"types"`
}

// GooglePrivacyDlpV2BigQueryTableTypesInput is an input type that accepts GooglePrivacyDlpV2BigQueryTableTypesArgs and GooglePrivacyDlpV2BigQueryTableTypesOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryTableTypesInput` via:
//
//	GooglePrivacyDlpV2BigQueryTableTypesArgs{...}
type GooglePrivacyDlpV2BigQueryTableTypesInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryTableTypesOutput() GooglePrivacyDlpV2BigQueryTableTypesOutput
	ToGooglePrivacyDlpV2BigQueryTableTypesOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryTableTypesOutput
}

// The types of BigQuery tables supported by Cloud DLP.
type GooglePrivacyDlpV2BigQueryTableTypesArgs struct {
	// A set of BigQuery table types.
	Types GooglePrivacyDlpV2BigQueryTableTypesTypesItemArrayInput `pulumi:"types"`
}

func (GooglePrivacyDlpV2BigQueryTableTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableTypes)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BigQueryTableTypesArgs) ToGooglePrivacyDlpV2BigQueryTableTypesOutput() GooglePrivacyDlpV2BigQueryTableTypesOutput {
	return i.ToGooglePrivacyDlpV2BigQueryTableTypesOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryTableTypesArgs) ToGooglePrivacyDlpV2BigQueryTableTypesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryTableTypesOutput)
}

func (i GooglePrivacyDlpV2BigQueryTableTypesArgs) ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutput() GooglePrivacyDlpV2BigQueryTableTypesPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BigQueryTableTypesArgs) ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryTableTypesOutput).ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2BigQueryTableTypesPtrInput is an input type that accepts GooglePrivacyDlpV2BigQueryTableTypesArgs, GooglePrivacyDlpV2BigQueryTableTypesPtr and GooglePrivacyDlpV2BigQueryTableTypesPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BigQueryTableTypesPtrInput` via:
//
//	        GooglePrivacyDlpV2BigQueryTableTypesArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2BigQueryTableTypesPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutput() GooglePrivacyDlpV2BigQueryTableTypesPtrOutput
	ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutputWithContext(context.Context) GooglePrivacyDlpV2BigQueryTableTypesPtrOutput
}

type googlePrivacyDlpV2BigQueryTableTypesPtrType GooglePrivacyDlpV2BigQueryTableTypesArgs

func GooglePrivacyDlpV2BigQueryTableTypesPtr(v *GooglePrivacyDlpV2BigQueryTableTypesArgs) GooglePrivacyDlpV2BigQueryTableTypesPtrInput {
	return (*googlePrivacyDlpV2BigQueryTableTypesPtrType)(v)
}

func (*googlePrivacyDlpV2BigQueryTableTypesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryTableTypes)(nil)).Elem()
}

func (i *googlePrivacyDlpV2BigQueryTableTypesPtrType) ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutput() GooglePrivacyDlpV2BigQueryTableTypesPtrOutput {
	return i.ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2BigQueryTableTypesPtrType) ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BigQueryTableTypesPtrOutput)
}

// The types of BigQuery tables supported by Cloud DLP.
type GooglePrivacyDlpV2BigQueryTableTypesOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryTableTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableTypes)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryTableTypesOutput) ToGooglePrivacyDlpV2BigQueryTableTypesOutput() GooglePrivacyDlpV2BigQueryTableTypesOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableTypesOutput) ToGooglePrivacyDlpV2BigQueryTableTypesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableTypesOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableTypesOutput) ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutput() GooglePrivacyDlpV2BigQueryTableTypesPtrOutput {
	return o.ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2BigQueryTableTypesOutput) ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2BigQueryTableTypes) *GooglePrivacyDlpV2BigQueryTableTypes {
		return &v
	}).(GooglePrivacyDlpV2BigQueryTableTypesPtrOutput)
}

// A set of BigQuery table types.
func (o GooglePrivacyDlpV2BigQueryTableTypesOutput) Types() GooglePrivacyDlpV2BigQueryTableTypesTypesItemArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryTableTypes) []GooglePrivacyDlpV2BigQueryTableTypesTypesItem {
		return v.Types
	}).(GooglePrivacyDlpV2BigQueryTableTypesTypesItemArrayOutput)
}

type GooglePrivacyDlpV2BigQueryTableTypesPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryTableTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BigQueryTableTypes)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryTableTypesPtrOutput) ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutput() GooglePrivacyDlpV2BigQueryTableTypesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableTypesPtrOutput) ToGooglePrivacyDlpV2BigQueryTableTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableTypesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableTypesPtrOutput) Elem() GooglePrivacyDlpV2BigQueryTableTypesOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryTableTypes) GooglePrivacyDlpV2BigQueryTableTypes {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2BigQueryTableTypes
		return ret
	}).(GooglePrivacyDlpV2BigQueryTableTypesOutput)
}

// A set of BigQuery table types.
func (o GooglePrivacyDlpV2BigQueryTableTypesPtrOutput) Types() GooglePrivacyDlpV2BigQueryTableTypesTypesItemArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BigQueryTableTypes) []GooglePrivacyDlpV2BigQueryTableTypesTypesItem {
		if v == nil {
			return nil
		}
		return v.Types
	}).(GooglePrivacyDlpV2BigQueryTableTypesTypesItemArrayOutput)
}

// The types of BigQuery tables supported by Cloud DLP.
type GooglePrivacyDlpV2BigQueryTableTypesResponse struct {
	// A set of BigQuery table types.
	Types []string `pulumi:"types"`
}

// The types of BigQuery tables supported by Cloud DLP.
type GooglePrivacyDlpV2BigQueryTableTypesResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BigQueryTableTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableTypesResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BigQueryTableTypesResponseOutput) ToGooglePrivacyDlpV2BigQueryTableTypesResponseOutput() GooglePrivacyDlpV2BigQueryTableTypesResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2BigQueryTableTypesResponseOutput) ToGooglePrivacyDlpV2BigQueryTableTypesResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BigQueryTableTypesResponseOutput {
	return o
}

// A set of BigQuery table types.
func (o GooglePrivacyDlpV2BigQueryTableTypesResponseOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BigQueryTableTypesResponse) []string { return v.Types }).(pulumi.StringArrayOutput)
}

// Bucket is represented as a range, along with replacement values.
type GooglePrivacyDlpV2Bucket struct {
	// Upper bound of the range, exclusive; type must match min.
	Max *GooglePrivacyDlpV2Value `pulumi:"max"`
	// Lower bound of the range, inclusive. Type should be the same as max if used.
	Min *GooglePrivacyDlpV2Value `pulumi:"min"`
	// Replacement value for this bucket.
	ReplacementValue GooglePrivacyDlpV2Value `pulumi:"replacementValue"`
}

// GooglePrivacyDlpV2BucketInput is an input type that accepts GooglePrivacyDlpV2BucketArgs and GooglePrivacyDlpV2BucketOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BucketInput` via:
//
//	GooglePrivacyDlpV2BucketArgs{...}
type GooglePrivacyDlpV2BucketInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BucketOutput() GooglePrivacyDlpV2BucketOutput
	ToGooglePrivacyDlpV2BucketOutputWithContext(context.Context) GooglePrivacyDlpV2BucketOutput
}

// Bucket is represented as a range, along with replacement values.
type GooglePrivacyDlpV2BucketArgs struct {
	// Upper bound of the range, exclusive; type must match min.
	Max GooglePrivacyDlpV2ValuePtrInput `pulumi:"max"`
	// Lower bound of the range, inclusive. Type should be the same as max if used.
	Min GooglePrivacyDlpV2ValuePtrInput `pulumi:"min"`
	// Replacement value for this bucket.
	ReplacementValue GooglePrivacyDlpV2ValueInput `pulumi:"replacementValue"`
}

func (GooglePrivacyDlpV2BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Bucket)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BucketArgs) ToGooglePrivacyDlpV2BucketOutput() GooglePrivacyDlpV2BucketOutput {
	return i.ToGooglePrivacyDlpV2BucketOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BucketArgs) ToGooglePrivacyDlpV2BucketOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BucketOutput)
}

// GooglePrivacyDlpV2BucketArrayInput is an input type that accepts GooglePrivacyDlpV2BucketArray and GooglePrivacyDlpV2BucketArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BucketArrayInput` via:
//
//	GooglePrivacyDlpV2BucketArray{ GooglePrivacyDlpV2BucketArgs{...} }
type GooglePrivacyDlpV2BucketArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BucketArrayOutput() GooglePrivacyDlpV2BucketArrayOutput
	ToGooglePrivacyDlpV2BucketArrayOutputWithContext(context.Context) GooglePrivacyDlpV2BucketArrayOutput
}

type GooglePrivacyDlpV2BucketArray []GooglePrivacyDlpV2BucketInput

func (GooglePrivacyDlpV2BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2Bucket)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BucketArray) ToGooglePrivacyDlpV2BucketArrayOutput() GooglePrivacyDlpV2BucketArrayOutput {
	return i.ToGooglePrivacyDlpV2BucketArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BucketArray) ToGooglePrivacyDlpV2BucketArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BucketArrayOutput)
}

// Bucket is represented as a range, along with replacement values.
type GooglePrivacyDlpV2BucketOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Bucket)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BucketOutput) ToGooglePrivacyDlpV2BucketOutput() GooglePrivacyDlpV2BucketOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketOutput) ToGooglePrivacyDlpV2BucketOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketOutput {
	return o
}

// Upper bound of the range, exclusive; type must match min.
func (o GooglePrivacyDlpV2BucketOutput) Max() GooglePrivacyDlpV2ValuePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Bucket) *GooglePrivacyDlpV2Value { return v.Max }).(GooglePrivacyDlpV2ValuePtrOutput)
}

// Lower bound of the range, inclusive. Type should be the same as max if used.
func (o GooglePrivacyDlpV2BucketOutput) Min() GooglePrivacyDlpV2ValuePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Bucket) *GooglePrivacyDlpV2Value { return v.Min }).(GooglePrivacyDlpV2ValuePtrOutput)
}

// Replacement value for this bucket.
func (o GooglePrivacyDlpV2BucketOutput) ReplacementValue() GooglePrivacyDlpV2ValueOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Bucket) GooglePrivacyDlpV2Value { return v.ReplacementValue }).(GooglePrivacyDlpV2ValueOutput)
}

type GooglePrivacyDlpV2BucketArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2Bucket)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BucketArrayOutput) ToGooglePrivacyDlpV2BucketArrayOutput() GooglePrivacyDlpV2BucketArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketArrayOutput) ToGooglePrivacyDlpV2BucketArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2Bucket {
		return vs[0].([]GooglePrivacyDlpV2Bucket)[vs[1].(int)]
	}).(GooglePrivacyDlpV2BucketOutput)
}

// Bucket is represented as a range, along with replacement values.
type GooglePrivacyDlpV2BucketResponse struct {
	// Upper bound of the range, exclusive; type must match min.
	Max GooglePrivacyDlpV2ValueResponse `pulumi:"max"`
	// Lower bound of the range, inclusive. Type should be the same as max if used.
	Min GooglePrivacyDlpV2ValueResponse `pulumi:"min"`
	// Replacement value for this bucket.
	ReplacementValue GooglePrivacyDlpV2ValueResponse `pulumi:"replacementValue"`
}

// Bucket is represented as a range, along with replacement values.
type GooglePrivacyDlpV2BucketResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BucketResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BucketResponseOutput) ToGooglePrivacyDlpV2BucketResponseOutput() GooglePrivacyDlpV2BucketResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketResponseOutput) ToGooglePrivacyDlpV2BucketResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketResponseOutput {
	return o
}

// Upper bound of the range, exclusive; type must match min.
func (o GooglePrivacyDlpV2BucketResponseOutput) Max() GooglePrivacyDlpV2ValueResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BucketResponse) GooglePrivacyDlpV2ValueResponse { return v.Max }).(GooglePrivacyDlpV2ValueResponseOutput)
}

// Lower bound of the range, inclusive. Type should be the same as max if used.
func (o GooglePrivacyDlpV2BucketResponseOutput) Min() GooglePrivacyDlpV2ValueResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BucketResponse) GooglePrivacyDlpV2ValueResponse { return v.Min }).(GooglePrivacyDlpV2ValueResponseOutput)
}

// Replacement value for this bucket.
func (o GooglePrivacyDlpV2BucketResponseOutput) ReplacementValue() GooglePrivacyDlpV2ValueResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BucketResponse) GooglePrivacyDlpV2ValueResponse { return v.ReplacementValue }).(GooglePrivacyDlpV2ValueResponseOutput)
}

type GooglePrivacyDlpV2BucketResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BucketResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2BucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BucketResponseArrayOutput) ToGooglePrivacyDlpV2BucketResponseArrayOutput() GooglePrivacyDlpV2BucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketResponseArrayOutput) ToGooglePrivacyDlpV2BucketResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2BucketResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2BucketResponse {
		return vs[0].([]GooglePrivacyDlpV2BucketResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2BucketResponseOutput)
}

// Generalization function that buckets values based on ranges. The ranges and replacement values are dynamically provided by the user for custom behavior, such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH This can be used on data of type: number, long, string, timestamp. If the bound `Value` type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
type GooglePrivacyDlpV2BucketingConfig struct {
	// Set of buckets. Ranges must be non-overlapping.
	Buckets []GooglePrivacyDlpV2Bucket `pulumi:"buckets"`
}

// GooglePrivacyDlpV2BucketingConfigInput is an input type that accepts GooglePrivacyDlpV2BucketingConfigArgs and GooglePrivacyDlpV2BucketingConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BucketingConfigInput` via:
//
//	GooglePrivacyDlpV2BucketingConfigArgs{...}
type GooglePrivacyDlpV2BucketingConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BucketingConfigOutput() GooglePrivacyDlpV2BucketingConfigOutput
	ToGooglePrivacyDlpV2BucketingConfigOutputWithContext(context.Context) GooglePrivacyDlpV2BucketingConfigOutput
}

// Generalization function that buckets values based on ranges. The ranges and replacement values are dynamically provided by the user for custom behavior, such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH This can be used on data of type: number, long, string, timestamp. If the bound `Value` type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
type GooglePrivacyDlpV2BucketingConfigArgs struct {
	// Set of buckets. Ranges must be non-overlapping.
	Buckets GooglePrivacyDlpV2BucketArrayInput `pulumi:"buckets"`
}

func (GooglePrivacyDlpV2BucketingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BucketingConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2BucketingConfigArgs) ToGooglePrivacyDlpV2BucketingConfigOutput() GooglePrivacyDlpV2BucketingConfigOutput {
	return i.ToGooglePrivacyDlpV2BucketingConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BucketingConfigArgs) ToGooglePrivacyDlpV2BucketingConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BucketingConfigOutput)
}

func (i GooglePrivacyDlpV2BucketingConfigArgs) ToGooglePrivacyDlpV2BucketingConfigPtrOutput() GooglePrivacyDlpV2BucketingConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2BucketingConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2BucketingConfigArgs) ToGooglePrivacyDlpV2BucketingConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BucketingConfigOutput).ToGooglePrivacyDlpV2BucketingConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2BucketingConfigPtrInput is an input type that accepts GooglePrivacyDlpV2BucketingConfigArgs, GooglePrivacyDlpV2BucketingConfigPtr and GooglePrivacyDlpV2BucketingConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2BucketingConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2BucketingConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2BucketingConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2BucketingConfigPtrOutput() GooglePrivacyDlpV2BucketingConfigPtrOutput
	ToGooglePrivacyDlpV2BucketingConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2BucketingConfigPtrOutput
}

type googlePrivacyDlpV2BucketingConfigPtrType GooglePrivacyDlpV2BucketingConfigArgs

func GooglePrivacyDlpV2BucketingConfigPtr(v *GooglePrivacyDlpV2BucketingConfigArgs) GooglePrivacyDlpV2BucketingConfigPtrInput {
	return (*googlePrivacyDlpV2BucketingConfigPtrType)(v)
}

func (*googlePrivacyDlpV2BucketingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BucketingConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2BucketingConfigPtrType) ToGooglePrivacyDlpV2BucketingConfigPtrOutput() GooglePrivacyDlpV2BucketingConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2BucketingConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2BucketingConfigPtrType) ToGooglePrivacyDlpV2BucketingConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2BucketingConfigPtrOutput)
}

// Generalization function that buckets values based on ranges. The ranges and replacement values are dynamically provided by the user for custom behavior, such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH This can be used on data of type: number, long, string, timestamp. If the bound `Value` type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
type GooglePrivacyDlpV2BucketingConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BucketingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BucketingConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BucketingConfigOutput) ToGooglePrivacyDlpV2BucketingConfigOutput() GooglePrivacyDlpV2BucketingConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketingConfigOutput) ToGooglePrivacyDlpV2BucketingConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketingConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketingConfigOutput) ToGooglePrivacyDlpV2BucketingConfigPtrOutput() GooglePrivacyDlpV2BucketingConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2BucketingConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2BucketingConfigOutput) ToGooglePrivacyDlpV2BucketingConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2BucketingConfig) *GooglePrivacyDlpV2BucketingConfig {
		return &v
	}).(GooglePrivacyDlpV2BucketingConfigPtrOutput)
}

// Set of buckets. Ranges must be non-overlapping.
func (o GooglePrivacyDlpV2BucketingConfigOutput) Buckets() GooglePrivacyDlpV2BucketArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BucketingConfig) []GooglePrivacyDlpV2Bucket { return v.Buckets }).(GooglePrivacyDlpV2BucketArrayOutput)
}

type GooglePrivacyDlpV2BucketingConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BucketingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2BucketingConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BucketingConfigPtrOutput) ToGooglePrivacyDlpV2BucketingConfigPtrOutput() GooglePrivacyDlpV2BucketingConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketingConfigPtrOutput) ToGooglePrivacyDlpV2BucketingConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketingConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketingConfigPtrOutput) Elem() GooglePrivacyDlpV2BucketingConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BucketingConfig) GooglePrivacyDlpV2BucketingConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2BucketingConfig
		return ret
	}).(GooglePrivacyDlpV2BucketingConfigOutput)
}

// Set of buckets. Ranges must be non-overlapping.
func (o GooglePrivacyDlpV2BucketingConfigPtrOutput) Buckets() GooglePrivacyDlpV2BucketArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2BucketingConfig) []GooglePrivacyDlpV2Bucket {
		if v == nil {
			return nil
		}
		return v.Buckets
	}).(GooglePrivacyDlpV2BucketArrayOutput)
}

// Generalization function that buckets values based on ranges. The ranges and replacement values are dynamically provided by the user for custom behavior, such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH This can be used on data of type: number, long, string, timestamp. If the bound `Value` type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
type GooglePrivacyDlpV2BucketingConfigResponse struct {
	// Set of buckets. Ranges must be non-overlapping.
	Buckets []GooglePrivacyDlpV2BucketResponse `pulumi:"buckets"`
}

// Generalization function that buckets values based on ranges. The ranges and replacement values are dynamically provided by the user for custom behavior, such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH This can be used on data of type: number, long, string, timestamp. If the bound `Value` type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
type GooglePrivacyDlpV2BucketingConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2BucketingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2BucketingConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2BucketingConfigResponseOutput) ToGooglePrivacyDlpV2BucketingConfigResponseOutput() GooglePrivacyDlpV2BucketingConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2BucketingConfigResponseOutput) ToGooglePrivacyDlpV2BucketingConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2BucketingConfigResponseOutput {
	return o
}

// Set of buckets. Ranges must be non-overlapping.
func (o GooglePrivacyDlpV2BucketingConfigResponseOutput) Buckets() GooglePrivacyDlpV2BucketResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2BucketingConfigResponse) []GooglePrivacyDlpV2BucketResponse { return v.Buckets }).(GooglePrivacyDlpV2BucketResponseArrayOutput)
}

// Compute numerical stats over an individual column, including number of distinct values and value count distribution.
type GooglePrivacyDlpV2CategoricalStatsConfig struct {
	// Field to compute categorical stats on. All column types are supported except for arrays and structs. However, it may be more informative to use NumericalStats when the field type is supported, depending on the data.
	Field *GooglePrivacyDlpV2FieldId `pulumi:"field"`
}

// GooglePrivacyDlpV2CategoricalStatsConfigInput is an input type that accepts GooglePrivacyDlpV2CategoricalStatsConfigArgs and GooglePrivacyDlpV2CategoricalStatsConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CategoricalStatsConfigInput` via:
//
//	GooglePrivacyDlpV2CategoricalStatsConfigArgs{...}
type GooglePrivacyDlpV2CategoricalStatsConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CategoricalStatsConfigOutput() GooglePrivacyDlpV2CategoricalStatsConfigOutput
	ToGooglePrivacyDlpV2CategoricalStatsConfigOutputWithContext(context.Context) GooglePrivacyDlpV2CategoricalStatsConfigOutput
}

// Compute numerical stats over an individual column, including number of distinct values and value count distribution.
type GooglePrivacyDlpV2CategoricalStatsConfigArgs struct {
	// Field to compute categorical stats on. All column types are supported except for arrays and structs. However, it may be more informative to use NumericalStats when the field type is supported, depending on the data.
	Field GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"field"`
}

func (GooglePrivacyDlpV2CategoricalStatsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CategoricalStatsConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CategoricalStatsConfigArgs) ToGooglePrivacyDlpV2CategoricalStatsConfigOutput() GooglePrivacyDlpV2CategoricalStatsConfigOutput {
	return i.ToGooglePrivacyDlpV2CategoricalStatsConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CategoricalStatsConfigArgs) ToGooglePrivacyDlpV2CategoricalStatsConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CategoricalStatsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CategoricalStatsConfigOutput)
}

func (i GooglePrivacyDlpV2CategoricalStatsConfigArgs) ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutput() GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CategoricalStatsConfigArgs) ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CategoricalStatsConfigOutput).ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2CategoricalStatsConfigPtrInput is an input type that accepts GooglePrivacyDlpV2CategoricalStatsConfigArgs, GooglePrivacyDlpV2CategoricalStatsConfigPtr and GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CategoricalStatsConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2CategoricalStatsConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2CategoricalStatsConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutput() GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput
	ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput
}

type googlePrivacyDlpV2CategoricalStatsConfigPtrType GooglePrivacyDlpV2CategoricalStatsConfigArgs

func GooglePrivacyDlpV2CategoricalStatsConfigPtr(v *GooglePrivacyDlpV2CategoricalStatsConfigArgs) GooglePrivacyDlpV2CategoricalStatsConfigPtrInput {
	return (*googlePrivacyDlpV2CategoricalStatsConfigPtrType)(v)
}

func (*googlePrivacyDlpV2CategoricalStatsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CategoricalStatsConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2CategoricalStatsConfigPtrType) ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutput() GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2CategoricalStatsConfigPtrType) ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput)
}

// Compute numerical stats over an individual column, including number of distinct values and value count distribution.
type GooglePrivacyDlpV2CategoricalStatsConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CategoricalStatsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CategoricalStatsConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CategoricalStatsConfigOutput) ToGooglePrivacyDlpV2CategoricalStatsConfigOutput() GooglePrivacyDlpV2CategoricalStatsConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2CategoricalStatsConfigOutput) ToGooglePrivacyDlpV2CategoricalStatsConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CategoricalStatsConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2CategoricalStatsConfigOutput) ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutput() GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2CategoricalStatsConfigOutput) ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2CategoricalStatsConfig) *GooglePrivacyDlpV2CategoricalStatsConfig {
		return &v
	}).(GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput)
}

// Field to compute categorical stats on. All column types are supported except for arrays and structs. However, it may be more informative to use NumericalStats when the field type is supported, depending on the data.
func (o GooglePrivacyDlpV2CategoricalStatsConfigOutput) Field() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CategoricalStatsConfig) *GooglePrivacyDlpV2FieldId { return v.Field }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

type GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CategoricalStatsConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput) ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutput() GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput) ToGooglePrivacyDlpV2CategoricalStatsConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput) Elem() GooglePrivacyDlpV2CategoricalStatsConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CategoricalStatsConfig) GooglePrivacyDlpV2CategoricalStatsConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2CategoricalStatsConfig
		return ret
	}).(GooglePrivacyDlpV2CategoricalStatsConfigOutput)
}

// Field to compute categorical stats on. All column types are supported except for arrays and structs. However, it may be more informative to use NumericalStats when the field type is supported, depending on the data.
func (o GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput) Field() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CategoricalStatsConfig) *GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.Field
	}).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// Compute numerical stats over an individual column, including number of distinct values and value count distribution.
type GooglePrivacyDlpV2CategoricalStatsConfigResponse struct {
	// Field to compute categorical stats on. All column types are supported except for arrays and structs. However, it may be more informative to use NumericalStats when the field type is supported, depending on the data.
	Field GooglePrivacyDlpV2FieldIdResponse `pulumi:"field"`
}

// Compute numerical stats over an individual column, including number of distinct values and value count distribution.
type GooglePrivacyDlpV2CategoricalStatsConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CategoricalStatsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CategoricalStatsConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CategoricalStatsConfigResponseOutput) ToGooglePrivacyDlpV2CategoricalStatsConfigResponseOutput() GooglePrivacyDlpV2CategoricalStatsConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CategoricalStatsConfigResponseOutput) ToGooglePrivacyDlpV2CategoricalStatsConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CategoricalStatsConfigResponseOutput {
	return o
}

// Field to compute categorical stats on. All column types are supported except for arrays and structs. However, it may be more informative to use NumericalStats when the field type is supported, depending on the data.
func (o GooglePrivacyDlpV2CategoricalStatsConfigResponseOutput) Field() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CategoricalStatsConfigResponse) GooglePrivacyDlpV2FieldIdResponse {
		return v.Field
	}).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// Histogram of value frequencies in the column.
type GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse struct {
	// Total number of values in this bucket.
	BucketSize string `pulumi:"bucketSize"`
	// Total number of distinct values in this bucket.
	BucketValueCount string `pulumi:"bucketValueCount"`
	// Sample of value frequencies in this bucket. The total number of values returned per bucket is capped at 20.
	BucketValues []GooglePrivacyDlpV2ValueFrequencyResponse `pulumi:"bucketValues"`
	// Lower bound on the value frequency of the values in this bucket.
	ValueFrequencyLowerBound string `pulumi:"valueFrequencyLowerBound"`
	// Upper bound on the value frequency of the values in this bucket.
	ValueFrequencyUpperBound string `pulumi:"valueFrequencyUpperBound"`
}

// Histogram of value frequencies in the column.
type GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput) ToGooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput() GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput) ToGooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput {
	return o
}

// Total number of values in this bucket.
func (o GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput) BucketSize() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse) string { return v.BucketSize }).(pulumi.StringOutput)
}

// Total number of distinct values in this bucket.
func (o GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput) BucketValueCount() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse) string { return v.BucketValueCount }).(pulumi.StringOutput)
}

// Sample of value frequencies in this bucket. The total number of values returned per bucket is capped at 20.
func (o GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput) BucketValues() GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse) []GooglePrivacyDlpV2ValueFrequencyResponse {
		return v.BucketValues
	}).(GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput)
}

// Lower bound on the value frequency of the values in this bucket.
func (o GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput) ValueFrequencyLowerBound() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse) string {
		return v.ValueFrequencyLowerBound
	}).(pulumi.StringOutput)
}

// Upper bound on the value frequency of the values in this bucket.
func (o GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput) ValueFrequencyUpperBound() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse) string {
		return v.ValueFrequencyUpperBound
	}).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput) ToGooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput() GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput) ToGooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse {
		return vs[0].([]GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput)
}

// Result of the categorical stats computation.
type GooglePrivacyDlpV2CategoricalStatsResultResponse struct {
	// Histogram of value frequencies in the column.
	ValueFrequencyHistogramBuckets []GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse `pulumi:"valueFrequencyHistogramBuckets"`
}

// Result of the categorical stats computation.
type GooglePrivacyDlpV2CategoricalStatsResultResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CategoricalStatsResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CategoricalStatsResultResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CategoricalStatsResultResponseOutput) ToGooglePrivacyDlpV2CategoricalStatsResultResponseOutput() GooglePrivacyDlpV2CategoricalStatsResultResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CategoricalStatsResultResponseOutput) ToGooglePrivacyDlpV2CategoricalStatsResultResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CategoricalStatsResultResponseOutput {
	return o
}

// Histogram of value frequencies in the column.
func (o GooglePrivacyDlpV2CategoricalStatsResultResponseOutput) ValueFrequencyHistogramBuckets() GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CategoricalStatsResultResponse) []GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponse {
		return v.ValueFrequencyHistogramBuckets
	}).(GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput)
}

// Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we'll attempt to preserve the original data's type. (This allows you to take a long like 123 and modify it to a string like **3.
type GooglePrivacyDlpV2CharacterMaskConfig struct {
	// When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
	CharactersToIgnore []GooglePrivacyDlpV2CharsToIgnore `pulumi:"charactersToIgnore"`
	// Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
	MaskingCharacter *string `pulumi:"maskingCharacter"`
	// Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
	NumberToMask *int `pulumi:"numberToMask"`
	// Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
	ReverseOrder *bool `pulumi:"reverseOrder"`
}

// GooglePrivacyDlpV2CharacterMaskConfigInput is an input type that accepts GooglePrivacyDlpV2CharacterMaskConfigArgs and GooglePrivacyDlpV2CharacterMaskConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CharacterMaskConfigInput` via:
//
//	GooglePrivacyDlpV2CharacterMaskConfigArgs{...}
type GooglePrivacyDlpV2CharacterMaskConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CharacterMaskConfigOutput() GooglePrivacyDlpV2CharacterMaskConfigOutput
	ToGooglePrivacyDlpV2CharacterMaskConfigOutputWithContext(context.Context) GooglePrivacyDlpV2CharacterMaskConfigOutput
}

// Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we'll attempt to preserve the original data's type. (This allows you to take a long like 123 and modify it to a string like **3.
type GooglePrivacyDlpV2CharacterMaskConfigArgs struct {
	// When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
	CharactersToIgnore GooglePrivacyDlpV2CharsToIgnoreArrayInput `pulumi:"charactersToIgnore"`
	// Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
	MaskingCharacter pulumi.StringPtrInput `pulumi:"maskingCharacter"`
	// Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
	NumberToMask pulumi.IntPtrInput `pulumi:"numberToMask"`
	// Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
	ReverseOrder pulumi.BoolPtrInput `pulumi:"reverseOrder"`
}

func (GooglePrivacyDlpV2CharacterMaskConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CharacterMaskConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CharacterMaskConfigArgs) ToGooglePrivacyDlpV2CharacterMaskConfigOutput() GooglePrivacyDlpV2CharacterMaskConfigOutput {
	return i.ToGooglePrivacyDlpV2CharacterMaskConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CharacterMaskConfigArgs) ToGooglePrivacyDlpV2CharacterMaskConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharacterMaskConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CharacterMaskConfigOutput)
}

func (i GooglePrivacyDlpV2CharacterMaskConfigArgs) ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutput() GooglePrivacyDlpV2CharacterMaskConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CharacterMaskConfigArgs) ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharacterMaskConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CharacterMaskConfigOutput).ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2CharacterMaskConfigPtrInput is an input type that accepts GooglePrivacyDlpV2CharacterMaskConfigArgs, GooglePrivacyDlpV2CharacterMaskConfigPtr and GooglePrivacyDlpV2CharacterMaskConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CharacterMaskConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2CharacterMaskConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2CharacterMaskConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutput() GooglePrivacyDlpV2CharacterMaskConfigPtrOutput
	ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2CharacterMaskConfigPtrOutput
}

type googlePrivacyDlpV2CharacterMaskConfigPtrType GooglePrivacyDlpV2CharacterMaskConfigArgs

func GooglePrivacyDlpV2CharacterMaskConfigPtr(v *GooglePrivacyDlpV2CharacterMaskConfigArgs) GooglePrivacyDlpV2CharacterMaskConfigPtrInput {
	return (*googlePrivacyDlpV2CharacterMaskConfigPtrType)(v)
}

func (*googlePrivacyDlpV2CharacterMaskConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CharacterMaskConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2CharacterMaskConfigPtrType) ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutput() GooglePrivacyDlpV2CharacterMaskConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2CharacterMaskConfigPtrType) ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharacterMaskConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CharacterMaskConfigPtrOutput)
}

// Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we'll attempt to preserve the original data's type. (This allows you to take a long like 123 and modify it to a string like **3.
type GooglePrivacyDlpV2CharacterMaskConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CharacterMaskConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CharacterMaskConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CharacterMaskConfigOutput) ToGooglePrivacyDlpV2CharacterMaskConfigOutput() GooglePrivacyDlpV2CharacterMaskConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2CharacterMaskConfigOutput) ToGooglePrivacyDlpV2CharacterMaskConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharacterMaskConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2CharacterMaskConfigOutput) ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutput() GooglePrivacyDlpV2CharacterMaskConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2CharacterMaskConfigOutput) ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharacterMaskConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2CharacterMaskConfig) *GooglePrivacyDlpV2CharacterMaskConfig {
		return &v
	}).(GooglePrivacyDlpV2CharacterMaskConfigPtrOutput)
}

// When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
func (o GooglePrivacyDlpV2CharacterMaskConfigOutput) CharactersToIgnore() GooglePrivacyDlpV2CharsToIgnoreArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharacterMaskConfig) []GooglePrivacyDlpV2CharsToIgnore {
		return v.CharactersToIgnore
	}).(GooglePrivacyDlpV2CharsToIgnoreArrayOutput)
}

// Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
func (o GooglePrivacyDlpV2CharacterMaskConfigOutput) MaskingCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharacterMaskConfig) *string { return v.MaskingCharacter }).(pulumi.StringPtrOutput)
}

// Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
func (o GooglePrivacyDlpV2CharacterMaskConfigOutput) NumberToMask() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharacterMaskConfig) *int { return v.NumberToMask }).(pulumi.IntPtrOutput)
}

// Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
func (o GooglePrivacyDlpV2CharacterMaskConfigOutput) ReverseOrder() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharacterMaskConfig) *bool { return v.ReverseOrder }).(pulumi.BoolPtrOutput)
}

type GooglePrivacyDlpV2CharacterMaskConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CharacterMaskConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CharacterMaskConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CharacterMaskConfigPtrOutput) ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutput() GooglePrivacyDlpV2CharacterMaskConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CharacterMaskConfigPtrOutput) ToGooglePrivacyDlpV2CharacterMaskConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharacterMaskConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CharacterMaskConfigPtrOutput) Elem() GooglePrivacyDlpV2CharacterMaskConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CharacterMaskConfig) GooglePrivacyDlpV2CharacterMaskConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2CharacterMaskConfig
		return ret
	}).(GooglePrivacyDlpV2CharacterMaskConfigOutput)
}

// When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
func (o GooglePrivacyDlpV2CharacterMaskConfigPtrOutput) CharactersToIgnore() GooglePrivacyDlpV2CharsToIgnoreArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CharacterMaskConfig) []GooglePrivacyDlpV2CharsToIgnore {
		if v == nil {
			return nil
		}
		return v.CharactersToIgnore
	}).(GooglePrivacyDlpV2CharsToIgnoreArrayOutput)
}

// Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
func (o GooglePrivacyDlpV2CharacterMaskConfigPtrOutput) MaskingCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CharacterMaskConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaskingCharacter
	}).(pulumi.StringPtrOutput)
}

// Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
func (o GooglePrivacyDlpV2CharacterMaskConfigPtrOutput) NumberToMask() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CharacterMaskConfig) *int {
		if v == nil {
			return nil
		}
		return v.NumberToMask
	}).(pulumi.IntPtrOutput)
}

// Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
func (o GooglePrivacyDlpV2CharacterMaskConfigPtrOutput) ReverseOrder() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CharacterMaskConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ReverseOrder
	}).(pulumi.BoolPtrOutput)
}

// Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we'll attempt to preserve the original data's type. (This allows you to take a long like 123 and modify it to a string like **3.
type GooglePrivacyDlpV2CharacterMaskConfigResponse struct {
	// When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
	CharactersToIgnore []GooglePrivacyDlpV2CharsToIgnoreResponse `pulumi:"charactersToIgnore"`
	// Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
	MaskingCharacter string `pulumi:"maskingCharacter"`
	// Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
	NumberToMask int `pulumi:"numberToMask"`
	// Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
	ReverseOrder bool `pulumi:"reverseOrder"`
}

// Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we'll attempt to preserve the original data's type. (This allows you to take a long like 123 and modify it to a string like **3.
type GooglePrivacyDlpV2CharacterMaskConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CharacterMaskConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CharacterMaskConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CharacterMaskConfigResponseOutput) ToGooglePrivacyDlpV2CharacterMaskConfigResponseOutput() GooglePrivacyDlpV2CharacterMaskConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CharacterMaskConfigResponseOutput) ToGooglePrivacyDlpV2CharacterMaskConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharacterMaskConfigResponseOutput {
	return o
}

// When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.
func (o GooglePrivacyDlpV2CharacterMaskConfigResponseOutput) CharactersToIgnore() GooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharacterMaskConfigResponse) []GooglePrivacyDlpV2CharsToIgnoreResponse {
		return v.CharactersToIgnore
	}).(GooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput)
}

// Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.
func (o GooglePrivacyDlpV2CharacterMaskConfigResponseOutput) MaskingCharacter() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharacterMaskConfigResponse) string { return v.MaskingCharacter }).(pulumi.StringOutput)
}

// Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.
func (o GooglePrivacyDlpV2CharacterMaskConfigResponseOutput) NumberToMask() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharacterMaskConfigResponse) int { return v.NumberToMask }).(pulumi.IntOutput)
}

// Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.
func (o GooglePrivacyDlpV2CharacterMaskConfigResponseOutput) ReverseOrder() pulumi.BoolOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharacterMaskConfigResponse) bool { return v.ReverseOrder }).(pulumi.BoolOutput)
}

// Characters to skip when doing deidentification of a value. These will be left alone and skipped.
type GooglePrivacyDlpV2CharsToIgnore struct {
	// Characters to not transform when masking.
	CharactersToSkip *string `pulumi:"charactersToSkip"`
	// Common characters to not transform when masking. Useful to avoid removing punctuation.
	CommonCharactersToIgnore *GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore `pulumi:"commonCharactersToIgnore"`
}

// GooglePrivacyDlpV2CharsToIgnoreInput is an input type that accepts GooglePrivacyDlpV2CharsToIgnoreArgs and GooglePrivacyDlpV2CharsToIgnoreOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CharsToIgnoreInput` via:
//
//	GooglePrivacyDlpV2CharsToIgnoreArgs{...}
type GooglePrivacyDlpV2CharsToIgnoreInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CharsToIgnoreOutput() GooglePrivacyDlpV2CharsToIgnoreOutput
	ToGooglePrivacyDlpV2CharsToIgnoreOutputWithContext(context.Context) GooglePrivacyDlpV2CharsToIgnoreOutput
}

// Characters to skip when doing deidentification of a value. These will be left alone and skipped.
type GooglePrivacyDlpV2CharsToIgnoreArgs struct {
	// Characters to not transform when masking.
	CharactersToSkip pulumi.StringPtrInput `pulumi:"charactersToSkip"`
	// Common characters to not transform when masking. Useful to avoid removing punctuation.
	CommonCharactersToIgnore GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnorePtrInput `pulumi:"commonCharactersToIgnore"`
}

func (GooglePrivacyDlpV2CharsToIgnoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CharsToIgnore)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CharsToIgnoreArgs) ToGooglePrivacyDlpV2CharsToIgnoreOutput() GooglePrivacyDlpV2CharsToIgnoreOutput {
	return i.ToGooglePrivacyDlpV2CharsToIgnoreOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CharsToIgnoreArgs) ToGooglePrivacyDlpV2CharsToIgnoreOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharsToIgnoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CharsToIgnoreOutput)
}

// GooglePrivacyDlpV2CharsToIgnoreArrayInput is an input type that accepts GooglePrivacyDlpV2CharsToIgnoreArray and GooglePrivacyDlpV2CharsToIgnoreArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CharsToIgnoreArrayInput` via:
//
//	GooglePrivacyDlpV2CharsToIgnoreArray{ GooglePrivacyDlpV2CharsToIgnoreArgs{...} }
type GooglePrivacyDlpV2CharsToIgnoreArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CharsToIgnoreArrayOutput() GooglePrivacyDlpV2CharsToIgnoreArrayOutput
	ToGooglePrivacyDlpV2CharsToIgnoreArrayOutputWithContext(context.Context) GooglePrivacyDlpV2CharsToIgnoreArrayOutput
}

type GooglePrivacyDlpV2CharsToIgnoreArray []GooglePrivacyDlpV2CharsToIgnoreInput

func (GooglePrivacyDlpV2CharsToIgnoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2CharsToIgnore)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CharsToIgnoreArray) ToGooglePrivacyDlpV2CharsToIgnoreArrayOutput() GooglePrivacyDlpV2CharsToIgnoreArrayOutput {
	return i.ToGooglePrivacyDlpV2CharsToIgnoreArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CharsToIgnoreArray) ToGooglePrivacyDlpV2CharsToIgnoreArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharsToIgnoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CharsToIgnoreArrayOutput)
}

// Characters to skip when doing deidentification of a value. These will be left alone and skipped.
type GooglePrivacyDlpV2CharsToIgnoreOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CharsToIgnoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CharsToIgnore)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CharsToIgnoreOutput) ToGooglePrivacyDlpV2CharsToIgnoreOutput() GooglePrivacyDlpV2CharsToIgnoreOutput {
	return o
}

func (o GooglePrivacyDlpV2CharsToIgnoreOutput) ToGooglePrivacyDlpV2CharsToIgnoreOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharsToIgnoreOutput {
	return o
}

// Characters to not transform when masking.
func (o GooglePrivacyDlpV2CharsToIgnoreOutput) CharactersToSkip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharsToIgnore) *string { return v.CharactersToSkip }).(pulumi.StringPtrOutput)
}

// Common characters to not transform when masking. Useful to avoid removing punctuation.
func (o GooglePrivacyDlpV2CharsToIgnoreOutput) CommonCharactersToIgnore() GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnorePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharsToIgnore) *GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnore {
		return v.CommonCharactersToIgnore
	}).(GooglePrivacyDlpV2CharsToIgnoreCommonCharactersToIgnorePtrOutput)
}

type GooglePrivacyDlpV2CharsToIgnoreArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CharsToIgnoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2CharsToIgnore)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CharsToIgnoreArrayOutput) ToGooglePrivacyDlpV2CharsToIgnoreArrayOutput() GooglePrivacyDlpV2CharsToIgnoreArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2CharsToIgnoreArrayOutput) ToGooglePrivacyDlpV2CharsToIgnoreArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharsToIgnoreArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2CharsToIgnoreArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2CharsToIgnoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2CharsToIgnore {
		return vs[0].([]GooglePrivacyDlpV2CharsToIgnore)[vs[1].(int)]
	}).(GooglePrivacyDlpV2CharsToIgnoreOutput)
}

// Characters to skip when doing deidentification of a value. These will be left alone and skipped.
type GooglePrivacyDlpV2CharsToIgnoreResponse struct {
	// Characters to not transform when masking.
	CharactersToSkip string `pulumi:"charactersToSkip"`
	// Common characters to not transform when masking. Useful to avoid removing punctuation.
	CommonCharactersToIgnore string `pulumi:"commonCharactersToIgnore"`
}

// Characters to skip when doing deidentification of a value. These will be left alone and skipped.
type GooglePrivacyDlpV2CharsToIgnoreResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CharsToIgnoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CharsToIgnoreResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CharsToIgnoreResponseOutput) ToGooglePrivacyDlpV2CharsToIgnoreResponseOutput() GooglePrivacyDlpV2CharsToIgnoreResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CharsToIgnoreResponseOutput) ToGooglePrivacyDlpV2CharsToIgnoreResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharsToIgnoreResponseOutput {
	return o
}

// Characters to not transform when masking.
func (o GooglePrivacyDlpV2CharsToIgnoreResponseOutput) CharactersToSkip() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharsToIgnoreResponse) string { return v.CharactersToSkip }).(pulumi.StringOutput)
}

// Common characters to not transform when masking. Useful to avoid removing punctuation.
func (o GooglePrivacyDlpV2CharsToIgnoreResponseOutput) CommonCharactersToIgnore() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CharsToIgnoreResponse) string { return v.CommonCharactersToIgnore }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2CharsToIgnoreResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput) ToGooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput() GooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput) ToGooglePrivacyDlpV2CharsToIgnoreResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2CharsToIgnoreResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2CharsToIgnoreResponse {
		return vs[0].([]GooglePrivacyDlpV2CharsToIgnoreResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2CharsToIgnoreResponseOutput)
}

// Message representing a set of files in Cloud Storage.
type GooglePrivacyDlpV2CloudStorageFileSet struct {
	// The url, in the format `gs:///`. Trailing wildcard in the path is allowed.
	Url *string `pulumi:"url"`
}

// GooglePrivacyDlpV2CloudStorageFileSetInput is an input type that accepts GooglePrivacyDlpV2CloudStorageFileSetArgs and GooglePrivacyDlpV2CloudStorageFileSetOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CloudStorageFileSetInput` via:
//
//	GooglePrivacyDlpV2CloudStorageFileSetArgs{...}
type GooglePrivacyDlpV2CloudStorageFileSetInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CloudStorageFileSetOutput() GooglePrivacyDlpV2CloudStorageFileSetOutput
	ToGooglePrivacyDlpV2CloudStorageFileSetOutputWithContext(context.Context) GooglePrivacyDlpV2CloudStorageFileSetOutput
}

// Message representing a set of files in Cloud Storage.
type GooglePrivacyDlpV2CloudStorageFileSetArgs struct {
	// The url, in the format `gs:///`. Trailing wildcard in the path is allowed.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GooglePrivacyDlpV2CloudStorageFileSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageFileSet)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CloudStorageFileSetArgs) ToGooglePrivacyDlpV2CloudStorageFileSetOutput() GooglePrivacyDlpV2CloudStorageFileSetOutput {
	return i.ToGooglePrivacyDlpV2CloudStorageFileSetOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CloudStorageFileSetArgs) ToGooglePrivacyDlpV2CloudStorageFileSetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageFileSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStorageFileSetOutput)
}

func (i GooglePrivacyDlpV2CloudStorageFileSetArgs) ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutput() GooglePrivacyDlpV2CloudStorageFileSetPtrOutput {
	return i.ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CloudStorageFileSetArgs) ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageFileSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStorageFileSetOutput).ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2CloudStorageFileSetPtrInput is an input type that accepts GooglePrivacyDlpV2CloudStorageFileSetArgs, GooglePrivacyDlpV2CloudStorageFileSetPtr and GooglePrivacyDlpV2CloudStorageFileSetPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CloudStorageFileSetPtrInput` via:
//
//	        GooglePrivacyDlpV2CloudStorageFileSetArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2CloudStorageFileSetPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutput() GooglePrivacyDlpV2CloudStorageFileSetPtrOutput
	ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutputWithContext(context.Context) GooglePrivacyDlpV2CloudStorageFileSetPtrOutput
}

type googlePrivacyDlpV2CloudStorageFileSetPtrType GooglePrivacyDlpV2CloudStorageFileSetArgs

func GooglePrivacyDlpV2CloudStorageFileSetPtr(v *GooglePrivacyDlpV2CloudStorageFileSetArgs) GooglePrivacyDlpV2CloudStorageFileSetPtrInput {
	return (*googlePrivacyDlpV2CloudStorageFileSetPtrType)(v)
}

func (*googlePrivacyDlpV2CloudStorageFileSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CloudStorageFileSet)(nil)).Elem()
}

func (i *googlePrivacyDlpV2CloudStorageFileSetPtrType) ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutput() GooglePrivacyDlpV2CloudStorageFileSetPtrOutput {
	return i.ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2CloudStorageFileSetPtrType) ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageFileSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStorageFileSetPtrOutput)
}

// Message representing a set of files in Cloud Storage.
type GooglePrivacyDlpV2CloudStorageFileSetOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStorageFileSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageFileSet)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStorageFileSetOutput) ToGooglePrivacyDlpV2CloudStorageFileSetOutput() GooglePrivacyDlpV2CloudStorageFileSetOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageFileSetOutput) ToGooglePrivacyDlpV2CloudStorageFileSetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageFileSetOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageFileSetOutput) ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutput() GooglePrivacyDlpV2CloudStorageFileSetPtrOutput {
	return o.ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2CloudStorageFileSetOutput) ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageFileSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2CloudStorageFileSet) *GooglePrivacyDlpV2CloudStorageFileSet {
		return &v
	}).(GooglePrivacyDlpV2CloudStorageFileSetPtrOutput)
}

// The url, in the format `gs:///`. Trailing wildcard in the path is allowed.
func (o GooglePrivacyDlpV2CloudStorageFileSetOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageFileSet) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2CloudStorageFileSetPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStorageFileSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CloudStorageFileSet)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStorageFileSetPtrOutput) ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutput() GooglePrivacyDlpV2CloudStorageFileSetPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageFileSetPtrOutput) ToGooglePrivacyDlpV2CloudStorageFileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageFileSetPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageFileSetPtrOutput) Elem() GooglePrivacyDlpV2CloudStorageFileSetOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageFileSet) GooglePrivacyDlpV2CloudStorageFileSet {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2CloudStorageFileSet
		return ret
	}).(GooglePrivacyDlpV2CloudStorageFileSetOutput)
}

// The url, in the format `gs:///`. Trailing wildcard in the path is allowed.
func (o GooglePrivacyDlpV2CloudStorageFileSetPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageFileSet) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Message representing a set of files in Cloud Storage.
type GooglePrivacyDlpV2CloudStorageFileSetResponse struct {
	// The url, in the format `gs:///`. Trailing wildcard in the path is allowed.
	Url string `pulumi:"url"`
}

// Message representing a set of files in Cloud Storage.
type GooglePrivacyDlpV2CloudStorageFileSetResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStorageFileSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageFileSetResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStorageFileSetResponseOutput) ToGooglePrivacyDlpV2CloudStorageFileSetResponseOutput() GooglePrivacyDlpV2CloudStorageFileSetResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageFileSetResponseOutput) ToGooglePrivacyDlpV2CloudStorageFileSetResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageFileSetResponseOutput {
	return o
}

// The url, in the format `gs:///`. Trailing wildcard in the path is allowed.
func (o GooglePrivacyDlpV2CloudStorageFileSetResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageFileSetResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Options defining a file or a set of files within a Cloud Storage bucket.
type GooglePrivacyDlpV2CloudStorageOptions struct {
	// Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
	BytesLimitPerFile *string `pulumi:"bytesLimitPerFile"`
	// Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
	BytesLimitPerFilePercent *int `pulumi:"bytesLimitPerFilePercent"`
	// The set of one or more files to scan.
	FileSet *GooglePrivacyDlpV2FileSet `pulumi:"fileSet"`
	// List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
	FileTypes []GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem `pulumi:"fileTypes"`
	// Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
	FilesLimitPercent *int                                               `pulumi:"filesLimitPercent"`
	SampleMethod      *GooglePrivacyDlpV2CloudStorageOptionsSampleMethod `pulumi:"sampleMethod"`
}

// GooglePrivacyDlpV2CloudStorageOptionsInput is an input type that accepts GooglePrivacyDlpV2CloudStorageOptionsArgs and GooglePrivacyDlpV2CloudStorageOptionsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CloudStorageOptionsInput` via:
//
//	GooglePrivacyDlpV2CloudStorageOptionsArgs{...}
type GooglePrivacyDlpV2CloudStorageOptionsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CloudStorageOptionsOutput() GooglePrivacyDlpV2CloudStorageOptionsOutput
	ToGooglePrivacyDlpV2CloudStorageOptionsOutputWithContext(context.Context) GooglePrivacyDlpV2CloudStorageOptionsOutput
}

// Options defining a file or a set of files within a Cloud Storage bucket.
type GooglePrivacyDlpV2CloudStorageOptionsArgs struct {
	// Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
	BytesLimitPerFile pulumi.StringPtrInput `pulumi:"bytesLimitPerFile"`
	// Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
	BytesLimitPerFilePercent pulumi.IntPtrInput `pulumi:"bytesLimitPerFilePercent"`
	// The set of one or more files to scan.
	FileSet GooglePrivacyDlpV2FileSetPtrInput `pulumi:"fileSet"`
	// List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
	FileTypes GooglePrivacyDlpV2CloudStorageOptionsFileTypesItemArrayInput `pulumi:"fileTypes"`
	// Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
	FilesLimitPercent pulumi.IntPtrInput                                        `pulumi:"filesLimitPercent"`
	SampleMethod      GooglePrivacyDlpV2CloudStorageOptionsSampleMethodPtrInput `pulumi:"sampleMethod"`
}

func (GooglePrivacyDlpV2CloudStorageOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageOptions)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CloudStorageOptionsArgs) ToGooglePrivacyDlpV2CloudStorageOptionsOutput() GooglePrivacyDlpV2CloudStorageOptionsOutput {
	return i.ToGooglePrivacyDlpV2CloudStorageOptionsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CloudStorageOptionsArgs) ToGooglePrivacyDlpV2CloudStorageOptionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStorageOptionsOutput)
}

func (i GooglePrivacyDlpV2CloudStorageOptionsArgs) ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutput() GooglePrivacyDlpV2CloudStorageOptionsPtrOutput {
	return i.ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CloudStorageOptionsArgs) ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStorageOptionsOutput).ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2CloudStorageOptionsPtrInput is an input type that accepts GooglePrivacyDlpV2CloudStorageOptionsArgs, GooglePrivacyDlpV2CloudStorageOptionsPtr and GooglePrivacyDlpV2CloudStorageOptionsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CloudStorageOptionsPtrInput` via:
//
//	        GooglePrivacyDlpV2CloudStorageOptionsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2CloudStorageOptionsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutput() GooglePrivacyDlpV2CloudStorageOptionsPtrOutput
	ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2CloudStorageOptionsPtrOutput
}

type googlePrivacyDlpV2CloudStorageOptionsPtrType GooglePrivacyDlpV2CloudStorageOptionsArgs

func GooglePrivacyDlpV2CloudStorageOptionsPtr(v *GooglePrivacyDlpV2CloudStorageOptionsArgs) GooglePrivacyDlpV2CloudStorageOptionsPtrInput {
	return (*googlePrivacyDlpV2CloudStorageOptionsPtrType)(v)
}

func (*googlePrivacyDlpV2CloudStorageOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CloudStorageOptions)(nil)).Elem()
}

func (i *googlePrivacyDlpV2CloudStorageOptionsPtrType) ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutput() GooglePrivacyDlpV2CloudStorageOptionsPtrOutput {
	return i.ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2CloudStorageOptionsPtrType) ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStorageOptionsPtrOutput)
}

// Options defining a file or a set of files within a Cloud Storage bucket.
type GooglePrivacyDlpV2CloudStorageOptionsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStorageOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageOptions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStorageOptionsOutput) ToGooglePrivacyDlpV2CloudStorageOptionsOutput() GooglePrivacyDlpV2CloudStorageOptionsOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageOptionsOutput) ToGooglePrivacyDlpV2CloudStorageOptionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageOptionsOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageOptionsOutput) ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutput() GooglePrivacyDlpV2CloudStorageOptionsPtrOutput {
	return o.ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2CloudStorageOptionsOutput) ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2CloudStorageOptions) *GooglePrivacyDlpV2CloudStorageOptions {
		return &v
	}).(GooglePrivacyDlpV2CloudStorageOptionsPtrOutput)
}

// Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
func (o GooglePrivacyDlpV2CloudStorageOptionsOutput) BytesLimitPerFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptions) *string { return v.BytesLimitPerFile }).(pulumi.StringPtrOutput)
}

// Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
func (o GooglePrivacyDlpV2CloudStorageOptionsOutput) BytesLimitPerFilePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptions) *int { return v.BytesLimitPerFilePercent }).(pulumi.IntPtrOutput)
}

// The set of one or more files to scan.
func (o GooglePrivacyDlpV2CloudStorageOptionsOutput) FileSet() GooglePrivacyDlpV2FileSetPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptions) *GooglePrivacyDlpV2FileSet { return v.FileSet }).(GooglePrivacyDlpV2FileSetPtrOutput)
}

// List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
func (o GooglePrivacyDlpV2CloudStorageOptionsOutput) FileTypes() GooglePrivacyDlpV2CloudStorageOptionsFileTypesItemArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptions) []GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem {
		return v.FileTypes
	}).(GooglePrivacyDlpV2CloudStorageOptionsFileTypesItemArrayOutput)
}

// Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
func (o GooglePrivacyDlpV2CloudStorageOptionsOutput) FilesLimitPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptions) *int { return v.FilesLimitPercent }).(pulumi.IntPtrOutput)
}

func (o GooglePrivacyDlpV2CloudStorageOptionsOutput) SampleMethod() GooglePrivacyDlpV2CloudStorageOptionsSampleMethodPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptions) *GooglePrivacyDlpV2CloudStorageOptionsSampleMethod {
		return v.SampleMethod
	}).(GooglePrivacyDlpV2CloudStorageOptionsSampleMethodPtrOutput)
}

type GooglePrivacyDlpV2CloudStorageOptionsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStorageOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CloudStorageOptions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStorageOptionsPtrOutput) ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutput() GooglePrivacyDlpV2CloudStorageOptionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageOptionsPtrOutput) ToGooglePrivacyDlpV2CloudStorageOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageOptionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageOptionsPtrOutput) Elem() GooglePrivacyDlpV2CloudStorageOptionsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageOptions) GooglePrivacyDlpV2CloudStorageOptions {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2CloudStorageOptions
		return ret
	}).(GooglePrivacyDlpV2CloudStorageOptionsOutput)
}

// Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
func (o GooglePrivacyDlpV2CloudStorageOptionsPtrOutput) BytesLimitPerFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageOptions) *string {
		if v == nil {
			return nil
		}
		return v.BytesLimitPerFile
	}).(pulumi.StringPtrOutput)
}

// Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
func (o GooglePrivacyDlpV2CloudStorageOptionsPtrOutput) BytesLimitPerFilePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageOptions) *int {
		if v == nil {
			return nil
		}
		return v.BytesLimitPerFilePercent
	}).(pulumi.IntPtrOutput)
}

// The set of one or more files to scan.
func (o GooglePrivacyDlpV2CloudStorageOptionsPtrOutput) FileSet() GooglePrivacyDlpV2FileSetPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageOptions) *GooglePrivacyDlpV2FileSet {
		if v == nil {
			return nil
		}
		return v.FileSet
	}).(GooglePrivacyDlpV2FileSetPtrOutput)
}

// List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
func (o GooglePrivacyDlpV2CloudStorageOptionsPtrOutput) FileTypes() GooglePrivacyDlpV2CloudStorageOptionsFileTypesItemArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageOptions) []GooglePrivacyDlpV2CloudStorageOptionsFileTypesItem {
		if v == nil {
			return nil
		}
		return v.FileTypes
	}).(GooglePrivacyDlpV2CloudStorageOptionsFileTypesItemArrayOutput)
}

// Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
func (o GooglePrivacyDlpV2CloudStorageOptionsPtrOutput) FilesLimitPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageOptions) *int {
		if v == nil {
			return nil
		}
		return v.FilesLimitPercent
	}).(pulumi.IntPtrOutput)
}

func (o GooglePrivacyDlpV2CloudStorageOptionsPtrOutput) SampleMethod() GooglePrivacyDlpV2CloudStorageOptionsSampleMethodPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageOptions) *GooglePrivacyDlpV2CloudStorageOptionsSampleMethod {
		if v == nil {
			return nil
		}
		return v.SampleMethod
	}).(GooglePrivacyDlpV2CloudStorageOptionsSampleMethodPtrOutput)
}

// Options defining a file or a set of files within a Cloud Storage bucket.
type GooglePrivacyDlpV2CloudStorageOptionsResponse struct {
	// Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
	BytesLimitPerFile string `pulumi:"bytesLimitPerFile"`
	// Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
	BytesLimitPerFilePercent int `pulumi:"bytesLimitPerFilePercent"`
	// The set of one or more files to scan.
	FileSet GooglePrivacyDlpV2FileSetResponse `pulumi:"fileSet"`
	// List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
	FileTypes []string `pulumi:"fileTypes"`
	// Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
	FilesLimitPercent int    `pulumi:"filesLimitPercent"`
	SampleMethod      string `pulumi:"sampleMethod"`
}

// Options defining a file or a set of files within a Cloud Storage bucket.
type GooglePrivacyDlpV2CloudStorageOptionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStorageOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageOptionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStorageOptionsResponseOutput) ToGooglePrivacyDlpV2CloudStorageOptionsResponseOutput() GooglePrivacyDlpV2CloudStorageOptionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageOptionsResponseOutput) ToGooglePrivacyDlpV2CloudStorageOptionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageOptionsResponseOutput {
	return o
}

// Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
func (o GooglePrivacyDlpV2CloudStorageOptionsResponseOutput) BytesLimitPerFile() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptionsResponse) string { return v.BytesLimitPerFile }).(pulumi.StringOutput)
}

// Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/dlp/docs/supported-file-types#max-byte-size-per-file).
func (o GooglePrivacyDlpV2CloudStorageOptionsResponseOutput) BytesLimitPerFilePercent() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptionsResponse) int { return v.BytesLimitPerFilePercent }).(pulumi.IntOutput)
}

// The set of one or more files to scan.
func (o GooglePrivacyDlpV2CloudStorageOptionsResponseOutput) FileSet() GooglePrivacyDlpV2FileSetResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptionsResponse) GooglePrivacyDlpV2FileSetResponse {
		return v.FileSet
	}).(GooglePrivacyDlpV2FileSetResponseOutput)
}

// List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
func (o GooglePrivacyDlpV2CloudStorageOptionsResponseOutput) FileTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptionsResponse) []string { return v.FileTypes }).(pulumi.StringArrayOutput)
}

// Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
func (o GooglePrivacyDlpV2CloudStorageOptionsResponseOutput) FilesLimitPercent() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptionsResponse) int { return v.FilesLimitPercent }).(pulumi.IntOutput)
}

func (o GooglePrivacyDlpV2CloudStorageOptionsResponseOutput) SampleMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageOptionsResponse) string { return v.SampleMethod }).(pulumi.StringOutput)
}

// Message representing a single file or path in Cloud Storage.
type GooglePrivacyDlpV2CloudStoragePath struct {
	// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
	Path *string `pulumi:"path"`
}

// GooglePrivacyDlpV2CloudStoragePathInput is an input type that accepts GooglePrivacyDlpV2CloudStoragePathArgs and GooglePrivacyDlpV2CloudStoragePathOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CloudStoragePathInput` via:
//
//	GooglePrivacyDlpV2CloudStoragePathArgs{...}
type GooglePrivacyDlpV2CloudStoragePathInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CloudStoragePathOutput() GooglePrivacyDlpV2CloudStoragePathOutput
	ToGooglePrivacyDlpV2CloudStoragePathOutputWithContext(context.Context) GooglePrivacyDlpV2CloudStoragePathOutput
}

// Message representing a single file or path in Cloud Storage.
type GooglePrivacyDlpV2CloudStoragePathArgs struct {
	// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (GooglePrivacyDlpV2CloudStoragePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStoragePath)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CloudStoragePathArgs) ToGooglePrivacyDlpV2CloudStoragePathOutput() GooglePrivacyDlpV2CloudStoragePathOutput {
	return i.ToGooglePrivacyDlpV2CloudStoragePathOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CloudStoragePathArgs) ToGooglePrivacyDlpV2CloudStoragePathOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStoragePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStoragePathOutput)
}

func (i GooglePrivacyDlpV2CloudStoragePathArgs) ToGooglePrivacyDlpV2CloudStoragePathPtrOutput() GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return i.ToGooglePrivacyDlpV2CloudStoragePathPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CloudStoragePathArgs) ToGooglePrivacyDlpV2CloudStoragePathPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStoragePathOutput).ToGooglePrivacyDlpV2CloudStoragePathPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2CloudStoragePathPtrInput is an input type that accepts GooglePrivacyDlpV2CloudStoragePathArgs, GooglePrivacyDlpV2CloudStoragePathPtr and GooglePrivacyDlpV2CloudStoragePathPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CloudStoragePathPtrInput` via:
//
//	        GooglePrivacyDlpV2CloudStoragePathArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2CloudStoragePathPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CloudStoragePathPtrOutput() GooglePrivacyDlpV2CloudStoragePathPtrOutput
	ToGooglePrivacyDlpV2CloudStoragePathPtrOutputWithContext(context.Context) GooglePrivacyDlpV2CloudStoragePathPtrOutput
}

type googlePrivacyDlpV2CloudStoragePathPtrType GooglePrivacyDlpV2CloudStoragePathArgs

func GooglePrivacyDlpV2CloudStoragePathPtr(v *GooglePrivacyDlpV2CloudStoragePathArgs) GooglePrivacyDlpV2CloudStoragePathPtrInput {
	return (*googlePrivacyDlpV2CloudStoragePathPtrType)(v)
}

func (*googlePrivacyDlpV2CloudStoragePathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CloudStoragePath)(nil)).Elem()
}

func (i *googlePrivacyDlpV2CloudStoragePathPtrType) ToGooglePrivacyDlpV2CloudStoragePathPtrOutput() GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return i.ToGooglePrivacyDlpV2CloudStoragePathPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2CloudStoragePathPtrType) ToGooglePrivacyDlpV2CloudStoragePathPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStoragePathPtrOutput)
}

// Message representing a single file or path in Cloud Storage.
type GooglePrivacyDlpV2CloudStoragePathOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStoragePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStoragePath)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStoragePathOutput) ToGooglePrivacyDlpV2CloudStoragePathOutput() GooglePrivacyDlpV2CloudStoragePathOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStoragePathOutput) ToGooglePrivacyDlpV2CloudStoragePathOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStoragePathOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStoragePathOutput) ToGooglePrivacyDlpV2CloudStoragePathPtrOutput() GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return o.ToGooglePrivacyDlpV2CloudStoragePathPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2CloudStoragePathOutput) ToGooglePrivacyDlpV2CloudStoragePathPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2CloudStoragePath) *GooglePrivacyDlpV2CloudStoragePath {
		return &v
	}).(GooglePrivacyDlpV2CloudStoragePathPtrOutput)
}

// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
func (o GooglePrivacyDlpV2CloudStoragePathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStoragePath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2CloudStoragePathPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStoragePathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CloudStoragePath)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStoragePathPtrOutput) ToGooglePrivacyDlpV2CloudStoragePathPtrOutput() GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStoragePathPtrOutput) ToGooglePrivacyDlpV2CloudStoragePathPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStoragePathPtrOutput) Elem() GooglePrivacyDlpV2CloudStoragePathOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStoragePath) GooglePrivacyDlpV2CloudStoragePath {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2CloudStoragePath
		return ret
	}).(GooglePrivacyDlpV2CloudStoragePathOutput)
}

// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
func (o GooglePrivacyDlpV2CloudStoragePathPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStoragePath) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Message representing a single file or path in Cloud Storage.
type GooglePrivacyDlpV2CloudStoragePathResponse struct {
	// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
	Path string `pulumi:"path"`
}

// Message representing a single file or path in Cloud Storage.
type GooglePrivacyDlpV2CloudStoragePathResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStoragePathResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStoragePathResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStoragePathResponseOutput) ToGooglePrivacyDlpV2CloudStoragePathResponseOutput() GooglePrivacyDlpV2CloudStoragePathResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStoragePathResponseOutput) ToGooglePrivacyDlpV2CloudStoragePathResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStoragePathResponseOutput {
	return o
}

// A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt
func (o GooglePrivacyDlpV2CloudStoragePathResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStoragePathResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Message representing a set of files in a Cloud Storage bucket. Regular expressions are used to allow fine-grained control over which files in the bucket to include. Included files are those that match at least one item in `include_regex` and do not match any items in `exclude_regex`. Note that a file that matches items from both lists will _not_ be included. For a match to occur, the entire file path (i.e., everything in the url after the bucket name) must match the regular expression. For example, given the input `{bucket_name: "mybucket", include_regex: ["directory1/.*"], exclude_regex: ["directory1/excluded.*"]}`: * `gs://mybucket/directory1/myfile` will be included * `gs://mybucket/directory1/directory2/myfile` will be included (`.*` matches across `/`) * `gs://mybucket/directory0/directory1/myfile` will _not_ be included (the full path doesn't match any items in `include_regex`) * `gs://mybucket/directory1/excludedfile` will _not_ be included (the path matches an item in `exclude_regex`) If `include_regex` is left empty, it will match all files by default (this is equivalent to setting `include_regex: [".*"]`). Some other common use cases: * `{bucket_name: "mybucket", exclude_regex: [".*\.pdf"]}` will include all files in `mybucket` except for .pdf files * `{bucket_name: "mybucket", include_regex: ["directory/[^/]+"]}` will include all files directly under `gs://mybucket/directory/`, without matching across `/`
type GooglePrivacyDlpV2CloudStorageRegexFileSet struct {
	// The name of a Cloud Storage bucket. Required.
	BucketName *string `pulumi:"bucketName"`
	// A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
	ExcludeRegex []string `pulumi:"excludeRegex"`
	// A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
	IncludeRegex []string `pulumi:"includeRegex"`
}

// GooglePrivacyDlpV2CloudStorageRegexFileSetInput is an input type that accepts GooglePrivacyDlpV2CloudStorageRegexFileSetArgs and GooglePrivacyDlpV2CloudStorageRegexFileSetOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CloudStorageRegexFileSetInput` via:
//
//	GooglePrivacyDlpV2CloudStorageRegexFileSetArgs{...}
type GooglePrivacyDlpV2CloudStorageRegexFileSetInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CloudStorageRegexFileSetOutput() GooglePrivacyDlpV2CloudStorageRegexFileSetOutput
	ToGooglePrivacyDlpV2CloudStorageRegexFileSetOutputWithContext(context.Context) GooglePrivacyDlpV2CloudStorageRegexFileSetOutput
}

// Message representing a set of files in a Cloud Storage bucket. Regular expressions are used to allow fine-grained control over which files in the bucket to include. Included files are those that match at least one item in `include_regex` and do not match any items in `exclude_regex`. Note that a file that matches items from both lists will _not_ be included. For a match to occur, the entire file path (i.e., everything in the url after the bucket name) must match the regular expression. For example, given the input `{bucket_name: "mybucket", include_regex: ["directory1/.*"], exclude_regex: ["directory1/excluded.*"]}`: * `gs://mybucket/directory1/myfile` will be included * `gs://mybucket/directory1/directory2/myfile` will be included (`.*` matches across `/`) * `gs://mybucket/directory0/directory1/myfile` will _not_ be included (the full path doesn't match any items in `include_regex`) * `gs://mybucket/directory1/excludedfile` will _not_ be included (the path matches an item in `exclude_regex`) If `include_regex` is left empty, it will match all files by default (this is equivalent to setting `include_regex: [".*"]`). Some other common use cases: * `{bucket_name: "mybucket", exclude_regex: [".*\.pdf"]}` will include all files in `mybucket` except for .pdf files * `{bucket_name: "mybucket", include_regex: ["directory/[^/]+"]}` will include all files directly under `gs://mybucket/directory/`, without matching across `/`
type GooglePrivacyDlpV2CloudStorageRegexFileSetArgs struct {
	// The name of a Cloud Storage bucket. Required.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
	ExcludeRegex pulumi.StringArrayInput `pulumi:"excludeRegex"`
	// A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
	IncludeRegex pulumi.StringArrayInput `pulumi:"includeRegex"`
}

func (GooglePrivacyDlpV2CloudStorageRegexFileSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageRegexFileSet)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CloudStorageRegexFileSetArgs) ToGooglePrivacyDlpV2CloudStorageRegexFileSetOutput() GooglePrivacyDlpV2CloudStorageRegexFileSetOutput {
	return i.ToGooglePrivacyDlpV2CloudStorageRegexFileSetOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CloudStorageRegexFileSetArgs) ToGooglePrivacyDlpV2CloudStorageRegexFileSetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageRegexFileSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStorageRegexFileSetOutput)
}

func (i GooglePrivacyDlpV2CloudStorageRegexFileSetArgs) ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput() GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput {
	return i.ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CloudStorageRegexFileSetArgs) ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStorageRegexFileSetOutput).ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2CloudStorageRegexFileSetPtrInput is an input type that accepts GooglePrivacyDlpV2CloudStorageRegexFileSetArgs, GooglePrivacyDlpV2CloudStorageRegexFileSetPtr and GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CloudStorageRegexFileSetPtrInput` via:
//
//	        GooglePrivacyDlpV2CloudStorageRegexFileSetArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2CloudStorageRegexFileSetPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput() GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput
	ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutputWithContext(context.Context) GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput
}

type googlePrivacyDlpV2CloudStorageRegexFileSetPtrType GooglePrivacyDlpV2CloudStorageRegexFileSetArgs

func GooglePrivacyDlpV2CloudStorageRegexFileSetPtr(v *GooglePrivacyDlpV2CloudStorageRegexFileSetArgs) GooglePrivacyDlpV2CloudStorageRegexFileSetPtrInput {
	return (*googlePrivacyDlpV2CloudStorageRegexFileSetPtrType)(v)
}

func (*googlePrivacyDlpV2CloudStorageRegexFileSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CloudStorageRegexFileSet)(nil)).Elem()
}

func (i *googlePrivacyDlpV2CloudStorageRegexFileSetPtrType) ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput() GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput {
	return i.ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2CloudStorageRegexFileSetPtrType) ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput)
}

// Message representing a set of files in a Cloud Storage bucket. Regular expressions are used to allow fine-grained control over which files in the bucket to include. Included files are those that match at least one item in `include_regex` and do not match any items in `exclude_regex`. Note that a file that matches items from both lists will _not_ be included. For a match to occur, the entire file path (i.e., everything in the url after the bucket name) must match the regular expression. For example, given the input `{bucket_name: "mybucket", include_regex: ["directory1/.*"], exclude_regex: ["directory1/excluded.*"]}`: * `gs://mybucket/directory1/myfile` will be included * `gs://mybucket/directory1/directory2/myfile` will be included (`.*` matches across `/`) * `gs://mybucket/directory0/directory1/myfile` will _not_ be included (the full path doesn't match any items in `include_regex`) * `gs://mybucket/directory1/excludedfile` will _not_ be included (the path matches an item in `exclude_regex`) If `include_regex` is left empty, it will match all files by default (this is equivalent to setting `include_regex: [".*"]`). Some other common use cases: * `{bucket_name: "mybucket", exclude_regex: [".*\.pdf"]}` will include all files in `mybucket` except for .pdf files * `{bucket_name: "mybucket", include_regex: ["directory/[^/]+"]}` will include all files directly under `gs://mybucket/directory/`, without matching across `/`
type GooglePrivacyDlpV2CloudStorageRegexFileSetOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStorageRegexFileSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageRegexFileSet)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStorageRegexFileSetOutput) ToGooglePrivacyDlpV2CloudStorageRegexFileSetOutput() GooglePrivacyDlpV2CloudStorageRegexFileSetOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageRegexFileSetOutput) ToGooglePrivacyDlpV2CloudStorageRegexFileSetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageRegexFileSetOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageRegexFileSetOutput) ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput() GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput {
	return o.ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2CloudStorageRegexFileSetOutput) ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2CloudStorageRegexFileSet) *GooglePrivacyDlpV2CloudStorageRegexFileSet {
		return &v
	}).(GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput)
}

// The name of a Cloud Storage bucket. Required.
func (o GooglePrivacyDlpV2CloudStorageRegexFileSetOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageRegexFileSet) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
func (o GooglePrivacyDlpV2CloudStorageRegexFileSetOutput) ExcludeRegex() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageRegexFileSet) []string { return v.ExcludeRegex }).(pulumi.StringArrayOutput)
}

// A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
func (o GooglePrivacyDlpV2CloudStorageRegexFileSetOutput) IncludeRegex() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageRegexFileSet) []string { return v.IncludeRegex }).(pulumi.StringArrayOutput)
}

type GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CloudStorageRegexFileSet)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput) ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput() GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput) ToGooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput) Elem() GooglePrivacyDlpV2CloudStorageRegexFileSetOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageRegexFileSet) GooglePrivacyDlpV2CloudStorageRegexFileSet {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2CloudStorageRegexFileSet
		return ret
	}).(GooglePrivacyDlpV2CloudStorageRegexFileSetOutput)
}

// The name of a Cloud Storage bucket. Required.
func (o GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageRegexFileSet) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
func (o GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput) ExcludeRegex() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageRegexFileSet) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeRegex
	}).(pulumi.StringArrayOutput)
}

// A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
func (o GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput) IncludeRegex() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CloudStorageRegexFileSet) []string {
		if v == nil {
			return nil
		}
		return v.IncludeRegex
	}).(pulumi.StringArrayOutput)
}

// Message representing a set of files in a Cloud Storage bucket. Regular expressions are used to allow fine-grained control over which files in the bucket to include. Included files are those that match at least one item in `include_regex` and do not match any items in `exclude_regex`. Note that a file that matches items from both lists will _not_ be included. For a match to occur, the entire file path (i.e., everything in the url after the bucket name) must match the regular expression. For example, given the input `{bucket_name: "mybucket", include_regex: ["directory1/.*"], exclude_regex: ["directory1/excluded.*"]}`: * `gs://mybucket/directory1/myfile` will be included * `gs://mybucket/directory1/directory2/myfile` will be included (`.*` matches across `/`) * `gs://mybucket/directory0/directory1/myfile` will _not_ be included (the full path doesn't match any items in `include_regex`) * `gs://mybucket/directory1/excludedfile` will _not_ be included (the path matches an item in `exclude_regex`) If `include_regex` is left empty, it will match all files by default (this is equivalent to setting `include_regex: [".*"]`). Some other common use cases: * `{bucket_name: "mybucket", exclude_regex: [".*\.pdf"]}` will include all files in `mybucket` except for .pdf files * `{bucket_name: "mybucket", include_regex: ["directory/[^/]+"]}` will include all files directly under `gs://mybucket/directory/`, without matching across `/`
type GooglePrivacyDlpV2CloudStorageRegexFileSetResponse struct {
	// The name of a Cloud Storage bucket. Required.
	BucketName string `pulumi:"bucketName"`
	// A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
	ExcludeRegex []string `pulumi:"excludeRegex"`
	// A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
	IncludeRegex []string `pulumi:"includeRegex"`
}

// Message representing a set of files in a Cloud Storage bucket. Regular expressions are used to allow fine-grained control over which files in the bucket to include. Included files are those that match at least one item in `include_regex` and do not match any items in `exclude_regex`. Note that a file that matches items from both lists will _not_ be included. For a match to occur, the entire file path (i.e., everything in the url after the bucket name) must match the regular expression. For example, given the input `{bucket_name: "mybucket", include_regex: ["directory1/.*"], exclude_regex: ["directory1/excluded.*"]}`: * `gs://mybucket/directory1/myfile` will be included * `gs://mybucket/directory1/directory2/myfile` will be included (`.*` matches across `/`) * `gs://mybucket/directory0/directory1/myfile` will _not_ be included (the full path doesn't match any items in `include_regex`) * `gs://mybucket/directory1/excludedfile` will _not_ be included (the path matches an item in `exclude_regex`) If `include_regex` is left empty, it will match all files by default (this is equivalent to setting `include_regex: [".*"]`). Some other common use cases: * `{bucket_name: "mybucket", exclude_regex: [".*\.pdf"]}` will include all files in `mybucket` except for .pdf files * `{bucket_name: "mybucket", include_regex: ["directory/[^/]+"]}` will include all files directly under `gs://mybucket/directory/`, without matching across `/`
type GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageRegexFileSetResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput) ToGooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput() GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput) ToGooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput {
	return o
}

// The name of a Cloud Storage bucket. Required.
func (o GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageRegexFileSetResponse) string { return v.BucketName }).(pulumi.StringOutput)
}

// A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
func (o GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput) ExcludeRegex() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageRegexFileSetResponse) []string { return v.ExcludeRegex }).(pulumi.StringArrayOutput)
}

// A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
func (o GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput) IncludeRegex() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CloudStorageRegexFileSetResponse) []string { return v.IncludeRegex }).(pulumi.StringArrayOutput)
}

// Represents a color in the RGB color space.
type GooglePrivacyDlpV2Color struct {
	// The amount of blue in the color as a value in the interval [0, 1].
	Blue *float64 `pulumi:"blue"`
	// The amount of green in the color as a value in the interval [0, 1].
	Green *float64 `pulumi:"green"`
	// The amount of red in the color as a value in the interval [0, 1].
	Red *float64 `pulumi:"red"`
}

// GooglePrivacyDlpV2ColorInput is an input type that accepts GooglePrivacyDlpV2ColorArgs and GooglePrivacyDlpV2ColorOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ColorInput` via:
//
//	GooglePrivacyDlpV2ColorArgs{...}
type GooglePrivacyDlpV2ColorInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ColorOutput() GooglePrivacyDlpV2ColorOutput
	ToGooglePrivacyDlpV2ColorOutputWithContext(context.Context) GooglePrivacyDlpV2ColorOutput
}

// Represents a color in the RGB color space.
type GooglePrivacyDlpV2ColorArgs struct {
	// The amount of blue in the color as a value in the interval [0, 1].
	Blue pulumi.Float64PtrInput `pulumi:"blue"`
	// The amount of green in the color as a value in the interval [0, 1].
	Green pulumi.Float64PtrInput `pulumi:"green"`
	// The amount of red in the color as a value in the interval [0, 1].
	Red pulumi.Float64PtrInput `pulumi:"red"`
}

func (GooglePrivacyDlpV2ColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Color)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ColorArgs) ToGooglePrivacyDlpV2ColorOutput() GooglePrivacyDlpV2ColorOutput {
	return i.ToGooglePrivacyDlpV2ColorOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ColorArgs) ToGooglePrivacyDlpV2ColorOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ColorOutput)
}

func (i GooglePrivacyDlpV2ColorArgs) ToGooglePrivacyDlpV2ColorPtrOutput() GooglePrivacyDlpV2ColorPtrOutput {
	return i.ToGooglePrivacyDlpV2ColorPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ColorArgs) ToGooglePrivacyDlpV2ColorPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ColorOutput).ToGooglePrivacyDlpV2ColorPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ColorPtrInput is an input type that accepts GooglePrivacyDlpV2ColorArgs, GooglePrivacyDlpV2ColorPtr and GooglePrivacyDlpV2ColorPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ColorPtrInput` via:
//
//	        GooglePrivacyDlpV2ColorArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ColorPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ColorPtrOutput() GooglePrivacyDlpV2ColorPtrOutput
	ToGooglePrivacyDlpV2ColorPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ColorPtrOutput
}

type googlePrivacyDlpV2ColorPtrType GooglePrivacyDlpV2ColorArgs

func GooglePrivacyDlpV2ColorPtr(v *GooglePrivacyDlpV2ColorArgs) GooglePrivacyDlpV2ColorPtrInput {
	return (*googlePrivacyDlpV2ColorPtrType)(v)
}

func (*googlePrivacyDlpV2ColorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Color)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ColorPtrType) ToGooglePrivacyDlpV2ColorPtrOutput() GooglePrivacyDlpV2ColorPtrOutput {
	return i.ToGooglePrivacyDlpV2ColorPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ColorPtrType) ToGooglePrivacyDlpV2ColorPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ColorPtrOutput)
}

// Represents a color in the RGB color space.
type GooglePrivacyDlpV2ColorOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Color)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ColorOutput) ToGooglePrivacyDlpV2ColorOutput() GooglePrivacyDlpV2ColorOutput {
	return o
}

func (o GooglePrivacyDlpV2ColorOutput) ToGooglePrivacyDlpV2ColorOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ColorOutput {
	return o
}

func (o GooglePrivacyDlpV2ColorOutput) ToGooglePrivacyDlpV2ColorPtrOutput() GooglePrivacyDlpV2ColorPtrOutput {
	return o.ToGooglePrivacyDlpV2ColorPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ColorOutput) ToGooglePrivacyDlpV2ColorPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ColorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Color) *GooglePrivacyDlpV2Color {
		return &v
	}).(GooglePrivacyDlpV2ColorPtrOutput)
}

// The amount of blue in the color as a value in the interval [0, 1].
func (o GooglePrivacyDlpV2ColorOutput) Blue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Color) *float64 { return v.Blue }).(pulumi.Float64PtrOutput)
}

// The amount of green in the color as a value in the interval [0, 1].
func (o GooglePrivacyDlpV2ColorOutput) Green() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Color) *float64 { return v.Green }).(pulumi.Float64PtrOutput)
}

// The amount of red in the color as a value in the interval [0, 1].
func (o GooglePrivacyDlpV2ColorOutput) Red() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Color) *float64 { return v.Red }).(pulumi.Float64PtrOutput)
}

type GooglePrivacyDlpV2ColorPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ColorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Color)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ColorPtrOutput) ToGooglePrivacyDlpV2ColorPtrOutput() GooglePrivacyDlpV2ColorPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ColorPtrOutput) ToGooglePrivacyDlpV2ColorPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ColorPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ColorPtrOutput) Elem() GooglePrivacyDlpV2ColorOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Color) GooglePrivacyDlpV2Color {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Color
		return ret
	}).(GooglePrivacyDlpV2ColorOutput)
}

// The amount of blue in the color as a value in the interval [0, 1].
func (o GooglePrivacyDlpV2ColorPtrOutput) Blue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Color) *float64 {
		if v == nil {
			return nil
		}
		return v.Blue
	}).(pulumi.Float64PtrOutput)
}

// The amount of green in the color as a value in the interval [0, 1].
func (o GooglePrivacyDlpV2ColorPtrOutput) Green() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Color) *float64 {
		if v == nil {
			return nil
		}
		return v.Green
	}).(pulumi.Float64PtrOutput)
}

// The amount of red in the color as a value in the interval [0, 1].
func (o GooglePrivacyDlpV2ColorPtrOutput) Red() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Color) *float64 {
		if v == nil {
			return nil
		}
		return v.Red
	}).(pulumi.Float64PtrOutput)
}

// Represents a color in the RGB color space.
type GooglePrivacyDlpV2ColorResponse struct {
	// The amount of blue in the color as a value in the interval [0, 1].
	Blue float64 `pulumi:"blue"`
	// The amount of green in the color as a value in the interval [0, 1].
	Green float64 `pulumi:"green"`
	// The amount of red in the color as a value in the interval [0, 1].
	Red float64 `pulumi:"red"`
}

// Represents a color in the RGB color space.
type GooglePrivacyDlpV2ColorResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ColorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ColorResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ColorResponseOutput) ToGooglePrivacyDlpV2ColorResponseOutput() GooglePrivacyDlpV2ColorResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ColorResponseOutput) ToGooglePrivacyDlpV2ColorResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ColorResponseOutput {
	return o
}

// The amount of blue in the color as a value in the interval [0, 1].
func (o GooglePrivacyDlpV2ColorResponseOutput) Blue() pulumi.Float64Output {
	return o.ApplyT(func(v GooglePrivacyDlpV2ColorResponse) float64 { return v.Blue }).(pulumi.Float64Output)
}

// The amount of green in the color as a value in the interval [0, 1].
func (o GooglePrivacyDlpV2ColorResponseOutput) Green() pulumi.Float64Output {
	return o.ApplyT(func(v GooglePrivacyDlpV2ColorResponse) float64 { return v.Green }).(pulumi.Float64Output)
}

// The amount of red in the color as a value in the interval [0, 1].
func (o GooglePrivacyDlpV2ColorResponseOutput) Red() pulumi.Float64Output {
	return o.ApplyT(func(v GooglePrivacyDlpV2ColorResponse) float64 { return v.Red }).(pulumi.Float64Output)
}

// The field type of `value` and `field` do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A `value` of type: - `string` can be compared against all other types - `boolean` can only be compared against other booleans - `integer` can be compared against doubles or a string if the string value can be parsed as an integer. - `double` can be compared against integers or a string if the string can be parsed as a double. - `Timestamp` can be compared against strings in RFC 3339 date string format. - `TimeOfDay` can be compared against timestamps and strings in the format of 'HH:mm:ss'. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
type GooglePrivacyDlpV2Condition struct {
	// Field within the record this condition is evaluated against.
	Field GooglePrivacyDlpV2FieldId `pulumi:"field"`
	// Operator used to compare the field or infoType to the value.
	Operator GooglePrivacyDlpV2ConditionOperator `pulumi:"operator"`
	// Value to compare against. [Mandatory, except for `EXISTS` tests.]
	Value *GooglePrivacyDlpV2Value `pulumi:"value"`
}

// GooglePrivacyDlpV2ConditionInput is an input type that accepts GooglePrivacyDlpV2ConditionArgs and GooglePrivacyDlpV2ConditionOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ConditionInput` via:
//
//	GooglePrivacyDlpV2ConditionArgs{...}
type GooglePrivacyDlpV2ConditionInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ConditionOutput() GooglePrivacyDlpV2ConditionOutput
	ToGooglePrivacyDlpV2ConditionOutputWithContext(context.Context) GooglePrivacyDlpV2ConditionOutput
}

// The field type of `value` and `field` do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A `value` of type: - `string` can be compared against all other types - `boolean` can only be compared against other booleans - `integer` can be compared against doubles or a string if the string value can be parsed as an integer. - `double` can be compared against integers or a string if the string can be parsed as a double. - `Timestamp` can be compared against strings in RFC 3339 date string format. - `TimeOfDay` can be compared against timestamps and strings in the format of 'HH:mm:ss'. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
type GooglePrivacyDlpV2ConditionArgs struct {
	// Field within the record this condition is evaluated against.
	Field GooglePrivacyDlpV2FieldIdInput `pulumi:"field"`
	// Operator used to compare the field or infoType to the value.
	Operator GooglePrivacyDlpV2ConditionOperatorInput `pulumi:"operator"`
	// Value to compare against. [Mandatory, except for `EXISTS` tests.]
	Value GooglePrivacyDlpV2ValuePtrInput `pulumi:"value"`
}

func (GooglePrivacyDlpV2ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Condition)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ConditionArgs) ToGooglePrivacyDlpV2ConditionOutput() GooglePrivacyDlpV2ConditionOutput {
	return i.ToGooglePrivacyDlpV2ConditionOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ConditionArgs) ToGooglePrivacyDlpV2ConditionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ConditionOutput)
}

// GooglePrivacyDlpV2ConditionArrayInput is an input type that accepts GooglePrivacyDlpV2ConditionArray and GooglePrivacyDlpV2ConditionArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ConditionArrayInput` via:
//
//	GooglePrivacyDlpV2ConditionArray{ GooglePrivacyDlpV2ConditionArgs{...} }
type GooglePrivacyDlpV2ConditionArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ConditionArrayOutput() GooglePrivacyDlpV2ConditionArrayOutput
	ToGooglePrivacyDlpV2ConditionArrayOutputWithContext(context.Context) GooglePrivacyDlpV2ConditionArrayOutput
}

type GooglePrivacyDlpV2ConditionArray []GooglePrivacyDlpV2ConditionInput

func (GooglePrivacyDlpV2ConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2Condition)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ConditionArray) ToGooglePrivacyDlpV2ConditionArrayOutput() GooglePrivacyDlpV2ConditionArrayOutput {
	return i.ToGooglePrivacyDlpV2ConditionArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ConditionArray) ToGooglePrivacyDlpV2ConditionArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ConditionArrayOutput)
}

// The field type of `value` and `field` do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A `value` of type: - `string` can be compared against all other types - `boolean` can only be compared against other booleans - `integer` can be compared against doubles or a string if the string value can be parsed as an integer. - `double` can be compared against integers or a string if the string can be parsed as a double. - `Timestamp` can be compared against strings in RFC 3339 date string format. - `TimeOfDay` can be compared against timestamps and strings in the format of 'HH:mm:ss'. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
type GooglePrivacyDlpV2ConditionOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Condition)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ConditionOutput) ToGooglePrivacyDlpV2ConditionOutput() GooglePrivacyDlpV2ConditionOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionOutput) ToGooglePrivacyDlpV2ConditionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionOutput {
	return o
}

// Field within the record this condition is evaluated against.
func (o GooglePrivacyDlpV2ConditionOutput) Field() GooglePrivacyDlpV2FieldIdOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Condition) GooglePrivacyDlpV2FieldId { return v.Field }).(GooglePrivacyDlpV2FieldIdOutput)
}

// Operator used to compare the field or infoType to the value.
func (o GooglePrivacyDlpV2ConditionOutput) Operator() GooglePrivacyDlpV2ConditionOperatorOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Condition) GooglePrivacyDlpV2ConditionOperator { return v.Operator }).(GooglePrivacyDlpV2ConditionOperatorOutput)
}

// Value to compare against. [Mandatory, except for `EXISTS` tests.]
func (o GooglePrivacyDlpV2ConditionOutput) Value() GooglePrivacyDlpV2ValuePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Condition) *GooglePrivacyDlpV2Value { return v.Value }).(GooglePrivacyDlpV2ValuePtrOutput)
}

type GooglePrivacyDlpV2ConditionArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2Condition)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ConditionArrayOutput) ToGooglePrivacyDlpV2ConditionArrayOutput() GooglePrivacyDlpV2ConditionArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionArrayOutput) ToGooglePrivacyDlpV2ConditionArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2ConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2Condition {
		return vs[0].([]GooglePrivacyDlpV2Condition)[vs[1].(int)]
	}).(GooglePrivacyDlpV2ConditionOutput)
}

// The field type of `value` and `field` do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A `value` of type: - `string` can be compared against all other types - `boolean` can only be compared against other booleans - `integer` can be compared against doubles or a string if the string value can be parsed as an integer. - `double` can be compared against integers or a string if the string can be parsed as a double. - `Timestamp` can be compared against strings in RFC 3339 date string format. - `TimeOfDay` can be compared against timestamps and strings in the format of 'HH:mm:ss'. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
type GooglePrivacyDlpV2ConditionResponse struct {
	// Field within the record this condition is evaluated against.
	Field GooglePrivacyDlpV2FieldIdResponse `pulumi:"field"`
	// Operator used to compare the field or infoType to the value.
	Operator string `pulumi:"operator"`
	// Value to compare against. [Mandatory, except for `EXISTS` tests.]
	Value GooglePrivacyDlpV2ValueResponse `pulumi:"value"`
}

// The field type of `value` and `field` do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A `value` of type: - `string` can be compared against all other types - `boolean` can only be compared against other booleans - `integer` can be compared against doubles or a string if the string value can be parsed as an integer. - `double` can be compared against integers or a string if the string can be parsed as a double. - `Timestamp` can be compared against strings in RFC 3339 date string format. - `TimeOfDay` can be compared against timestamps and strings in the format of 'HH:mm:ss'. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
type GooglePrivacyDlpV2ConditionResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ConditionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ConditionResponseOutput) ToGooglePrivacyDlpV2ConditionResponseOutput() GooglePrivacyDlpV2ConditionResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionResponseOutput) ToGooglePrivacyDlpV2ConditionResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionResponseOutput {
	return o
}

// Field within the record this condition is evaluated against.
func (o GooglePrivacyDlpV2ConditionResponseOutput) Field() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ConditionResponse) GooglePrivacyDlpV2FieldIdResponse { return v.Field }).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// Operator used to compare the field or infoType to the value.
func (o GooglePrivacyDlpV2ConditionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ConditionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Value to compare against. [Mandatory, except for `EXISTS` tests.]
func (o GooglePrivacyDlpV2ConditionResponseOutput) Value() GooglePrivacyDlpV2ValueResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ConditionResponse) GooglePrivacyDlpV2ValueResponse { return v.Value }).(GooglePrivacyDlpV2ValueResponseOutput)
}

type GooglePrivacyDlpV2ConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2ConditionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ConditionResponseArrayOutput) ToGooglePrivacyDlpV2ConditionResponseArrayOutput() GooglePrivacyDlpV2ConditionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionResponseArrayOutput) ToGooglePrivacyDlpV2ConditionResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2ConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2ConditionResponse {
		return vs[0].([]GooglePrivacyDlpV2ConditionResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2ConditionResponseOutput)
}

// A collection of conditions.
type GooglePrivacyDlpV2Conditions struct {
	// A collection of conditions.
	Conditions []GooglePrivacyDlpV2Condition `pulumi:"conditions"`
}

// GooglePrivacyDlpV2ConditionsInput is an input type that accepts GooglePrivacyDlpV2ConditionsArgs and GooglePrivacyDlpV2ConditionsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ConditionsInput` via:
//
//	GooglePrivacyDlpV2ConditionsArgs{...}
type GooglePrivacyDlpV2ConditionsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ConditionsOutput() GooglePrivacyDlpV2ConditionsOutput
	ToGooglePrivacyDlpV2ConditionsOutputWithContext(context.Context) GooglePrivacyDlpV2ConditionsOutput
}

// A collection of conditions.
type GooglePrivacyDlpV2ConditionsArgs struct {
	// A collection of conditions.
	Conditions GooglePrivacyDlpV2ConditionArrayInput `pulumi:"conditions"`
}

func (GooglePrivacyDlpV2ConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Conditions)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ConditionsArgs) ToGooglePrivacyDlpV2ConditionsOutput() GooglePrivacyDlpV2ConditionsOutput {
	return i.ToGooglePrivacyDlpV2ConditionsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ConditionsArgs) ToGooglePrivacyDlpV2ConditionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ConditionsOutput)
}

func (i GooglePrivacyDlpV2ConditionsArgs) ToGooglePrivacyDlpV2ConditionsPtrOutput() GooglePrivacyDlpV2ConditionsPtrOutput {
	return i.ToGooglePrivacyDlpV2ConditionsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ConditionsArgs) ToGooglePrivacyDlpV2ConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ConditionsOutput).ToGooglePrivacyDlpV2ConditionsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ConditionsPtrInput is an input type that accepts GooglePrivacyDlpV2ConditionsArgs, GooglePrivacyDlpV2ConditionsPtr and GooglePrivacyDlpV2ConditionsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ConditionsPtrInput` via:
//
//	        GooglePrivacyDlpV2ConditionsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ConditionsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ConditionsPtrOutput() GooglePrivacyDlpV2ConditionsPtrOutput
	ToGooglePrivacyDlpV2ConditionsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ConditionsPtrOutput
}

type googlePrivacyDlpV2ConditionsPtrType GooglePrivacyDlpV2ConditionsArgs

func GooglePrivacyDlpV2ConditionsPtr(v *GooglePrivacyDlpV2ConditionsArgs) GooglePrivacyDlpV2ConditionsPtrInput {
	return (*googlePrivacyDlpV2ConditionsPtrType)(v)
}

func (*googlePrivacyDlpV2ConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Conditions)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ConditionsPtrType) ToGooglePrivacyDlpV2ConditionsPtrOutput() GooglePrivacyDlpV2ConditionsPtrOutput {
	return i.ToGooglePrivacyDlpV2ConditionsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ConditionsPtrType) ToGooglePrivacyDlpV2ConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ConditionsPtrOutput)
}

// A collection of conditions.
type GooglePrivacyDlpV2ConditionsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Conditions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ConditionsOutput) ToGooglePrivacyDlpV2ConditionsOutput() GooglePrivacyDlpV2ConditionsOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionsOutput) ToGooglePrivacyDlpV2ConditionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionsOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionsOutput) ToGooglePrivacyDlpV2ConditionsPtrOutput() GooglePrivacyDlpV2ConditionsPtrOutput {
	return o.ToGooglePrivacyDlpV2ConditionsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ConditionsOutput) ToGooglePrivacyDlpV2ConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Conditions) *GooglePrivacyDlpV2Conditions {
		return &v
	}).(GooglePrivacyDlpV2ConditionsPtrOutput)
}

// A collection of conditions.
func (o GooglePrivacyDlpV2ConditionsOutput) Conditions() GooglePrivacyDlpV2ConditionArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Conditions) []GooglePrivacyDlpV2Condition { return v.Conditions }).(GooglePrivacyDlpV2ConditionArrayOutput)
}

type GooglePrivacyDlpV2ConditionsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Conditions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ConditionsPtrOutput) ToGooglePrivacyDlpV2ConditionsPtrOutput() GooglePrivacyDlpV2ConditionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionsPtrOutput) ToGooglePrivacyDlpV2ConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionsPtrOutput) Elem() GooglePrivacyDlpV2ConditionsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Conditions) GooglePrivacyDlpV2Conditions {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Conditions
		return ret
	}).(GooglePrivacyDlpV2ConditionsOutput)
}

// A collection of conditions.
func (o GooglePrivacyDlpV2ConditionsPtrOutput) Conditions() GooglePrivacyDlpV2ConditionArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Conditions) []GooglePrivacyDlpV2Condition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GooglePrivacyDlpV2ConditionArrayOutput)
}

// A collection of conditions.
type GooglePrivacyDlpV2ConditionsResponse struct {
	// A collection of conditions.
	Conditions []GooglePrivacyDlpV2ConditionResponse `pulumi:"conditions"`
}

// A collection of conditions.
type GooglePrivacyDlpV2ConditionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ConditionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ConditionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ConditionsResponseOutput) ToGooglePrivacyDlpV2ConditionsResponseOutput() GooglePrivacyDlpV2ConditionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ConditionsResponseOutput) ToGooglePrivacyDlpV2ConditionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ConditionsResponseOutput {
	return o
}

// A collection of conditions.
func (o GooglePrivacyDlpV2ConditionsResponseOutput) Conditions() GooglePrivacyDlpV2ConditionResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ConditionsResponse) []GooglePrivacyDlpV2ConditionResponse {
		return v.Conditions
	}).(GooglePrivacyDlpV2ConditionResponseArrayOutput)
}

// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
type GooglePrivacyDlpV2CryptoDeterministicConfig struct {
	// A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s.
	Context *GooglePrivacyDlpV2FieldId `pulumi:"context"`
	// The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.
	CryptoKey *GooglePrivacyDlpV2CryptoKey `pulumi:"cryptoKey"`
	// The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.
	SurrogateInfoType *GooglePrivacyDlpV2InfoType `pulumi:"surrogateInfoType"`
}

// GooglePrivacyDlpV2CryptoDeterministicConfigInput is an input type that accepts GooglePrivacyDlpV2CryptoDeterministicConfigArgs and GooglePrivacyDlpV2CryptoDeterministicConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CryptoDeterministicConfigInput` via:
//
//	GooglePrivacyDlpV2CryptoDeterministicConfigArgs{...}
type GooglePrivacyDlpV2CryptoDeterministicConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CryptoDeterministicConfigOutput() GooglePrivacyDlpV2CryptoDeterministicConfigOutput
	ToGooglePrivacyDlpV2CryptoDeterministicConfigOutputWithContext(context.Context) GooglePrivacyDlpV2CryptoDeterministicConfigOutput
}

// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
type GooglePrivacyDlpV2CryptoDeterministicConfigArgs struct {
	// A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s.
	Context GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"context"`
	// The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.
	CryptoKey GooglePrivacyDlpV2CryptoKeyPtrInput `pulumi:"cryptoKey"`
	// The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.
	SurrogateInfoType GooglePrivacyDlpV2InfoTypePtrInput `pulumi:"surrogateInfoType"`
}

func (GooglePrivacyDlpV2CryptoDeterministicConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoDeterministicConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CryptoDeterministicConfigArgs) ToGooglePrivacyDlpV2CryptoDeterministicConfigOutput() GooglePrivacyDlpV2CryptoDeterministicConfigOutput {
	return i.ToGooglePrivacyDlpV2CryptoDeterministicConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CryptoDeterministicConfigArgs) ToGooglePrivacyDlpV2CryptoDeterministicConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoDeterministicConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoDeterministicConfigOutput)
}

func (i GooglePrivacyDlpV2CryptoDeterministicConfigArgs) ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput() GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CryptoDeterministicConfigArgs) ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoDeterministicConfigOutput).ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2CryptoDeterministicConfigPtrInput is an input type that accepts GooglePrivacyDlpV2CryptoDeterministicConfigArgs, GooglePrivacyDlpV2CryptoDeterministicConfigPtr and GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CryptoDeterministicConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2CryptoDeterministicConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2CryptoDeterministicConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput() GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput
	ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput
}

type googlePrivacyDlpV2CryptoDeterministicConfigPtrType GooglePrivacyDlpV2CryptoDeterministicConfigArgs

func GooglePrivacyDlpV2CryptoDeterministicConfigPtr(v *GooglePrivacyDlpV2CryptoDeterministicConfigArgs) GooglePrivacyDlpV2CryptoDeterministicConfigPtrInput {
	return (*googlePrivacyDlpV2CryptoDeterministicConfigPtrType)(v)
}

func (*googlePrivacyDlpV2CryptoDeterministicConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CryptoDeterministicConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2CryptoDeterministicConfigPtrType) ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput() GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2CryptoDeterministicConfigPtrType) ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput)
}

// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
type GooglePrivacyDlpV2CryptoDeterministicConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoDeterministicConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoDeterministicConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoDeterministicConfigOutput) ToGooglePrivacyDlpV2CryptoDeterministicConfigOutput() GooglePrivacyDlpV2CryptoDeterministicConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoDeterministicConfigOutput) ToGooglePrivacyDlpV2CryptoDeterministicConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoDeterministicConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoDeterministicConfigOutput) ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput() GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2CryptoDeterministicConfigOutput) ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2CryptoDeterministicConfig) *GooglePrivacyDlpV2CryptoDeterministicConfig {
		return &v
	}).(GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput)
}

// A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s.
func (o GooglePrivacyDlpV2CryptoDeterministicConfigOutput) Context() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoDeterministicConfig) *GooglePrivacyDlpV2FieldId { return v.Context }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.
func (o GooglePrivacyDlpV2CryptoDeterministicConfigOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoDeterministicConfig) *GooglePrivacyDlpV2CryptoKey { return v.CryptoKey }).(GooglePrivacyDlpV2CryptoKeyPtrOutput)
}

// The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.
func (o GooglePrivacyDlpV2CryptoDeterministicConfigOutput) SurrogateInfoType() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoDeterministicConfig) *GooglePrivacyDlpV2InfoType {
		return v.SurrogateInfoType
	}).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

type GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CryptoDeterministicConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput) ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput() GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput) ToGooglePrivacyDlpV2CryptoDeterministicConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput) Elem() GooglePrivacyDlpV2CryptoDeterministicConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoDeterministicConfig) GooglePrivacyDlpV2CryptoDeterministicConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2CryptoDeterministicConfig
		return ret
	}).(GooglePrivacyDlpV2CryptoDeterministicConfigOutput)
}

// A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s.
func (o GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput) Context() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoDeterministicConfig) *GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.Context
	}).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.
func (o GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoDeterministicConfig) *GooglePrivacyDlpV2CryptoKey {
		if v == nil {
			return nil
		}
		return v.CryptoKey
	}).(GooglePrivacyDlpV2CryptoKeyPtrOutput)
}

// The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.
func (o GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput) SurrogateInfoType() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoDeterministicConfig) *GooglePrivacyDlpV2InfoType {
		if v == nil {
			return nil
		}
		return v.SurrogateInfoType
	}).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
type GooglePrivacyDlpV2CryptoDeterministicConfigResponse struct {
	// A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s.
	Context GooglePrivacyDlpV2FieldIdResponse `pulumi:"context"`
	// The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.
	CryptoKey GooglePrivacyDlpV2CryptoKeyResponse `pulumi:"cryptoKey"`
	// The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.
	SurrogateInfoType GooglePrivacyDlpV2InfoTypeResponse `pulumi:"surrogateInfoType"`
}

// Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
type GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoDeterministicConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput) ToGooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput() GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput) ToGooglePrivacyDlpV2CryptoDeterministicConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput {
	return o
}

// A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s.
func (o GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput) Context() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoDeterministicConfigResponse) GooglePrivacyDlpV2FieldIdResponse {
		return v.Context
	}).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.
func (o GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoDeterministicConfigResponse) GooglePrivacyDlpV2CryptoKeyResponse {
		return v.CryptoKey
	}).(GooglePrivacyDlpV2CryptoKeyResponseOutput)
}

// The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.
func (o GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput) SurrogateInfoType() GooglePrivacyDlpV2InfoTypeResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoDeterministicConfigResponse) GooglePrivacyDlpV2InfoTypeResponse {
		return v.SurrogateInfoType
	}).(GooglePrivacyDlpV2InfoTypeResponseOutput)
}

// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes. Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=). Currently, only string and integer values can be hashed. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
type GooglePrivacyDlpV2CryptoHashConfig struct {
	// The key used by the hash function.
	CryptoKey *GooglePrivacyDlpV2CryptoKey `pulumi:"cryptoKey"`
}

// GooglePrivacyDlpV2CryptoHashConfigInput is an input type that accepts GooglePrivacyDlpV2CryptoHashConfigArgs and GooglePrivacyDlpV2CryptoHashConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CryptoHashConfigInput` via:
//
//	GooglePrivacyDlpV2CryptoHashConfigArgs{...}
type GooglePrivacyDlpV2CryptoHashConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CryptoHashConfigOutput() GooglePrivacyDlpV2CryptoHashConfigOutput
	ToGooglePrivacyDlpV2CryptoHashConfigOutputWithContext(context.Context) GooglePrivacyDlpV2CryptoHashConfigOutput
}

// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes. Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=). Currently, only string and integer values can be hashed. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
type GooglePrivacyDlpV2CryptoHashConfigArgs struct {
	// The key used by the hash function.
	CryptoKey GooglePrivacyDlpV2CryptoKeyPtrInput `pulumi:"cryptoKey"`
}

func (GooglePrivacyDlpV2CryptoHashConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoHashConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CryptoHashConfigArgs) ToGooglePrivacyDlpV2CryptoHashConfigOutput() GooglePrivacyDlpV2CryptoHashConfigOutput {
	return i.ToGooglePrivacyDlpV2CryptoHashConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CryptoHashConfigArgs) ToGooglePrivacyDlpV2CryptoHashConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoHashConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoHashConfigOutput)
}

func (i GooglePrivacyDlpV2CryptoHashConfigArgs) ToGooglePrivacyDlpV2CryptoHashConfigPtrOutput() GooglePrivacyDlpV2CryptoHashConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2CryptoHashConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CryptoHashConfigArgs) ToGooglePrivacyDlpV2CryptoHashConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoHashConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoHashConfigOutput).ToGooglePrivacyDlpV2CryptoHashConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2CryptoHashConfigPtrInput is an input type that accepts GooglePrivacyDlpV2CryptoHashConfigArgs, GooglePrivacyDlpV2CryptoHashConfigPtr and GooglePrivacyDlpV2CryptoHashConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CryptoHashConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2CryptoHashConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2CryptoHashConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CryptoHashConfigPtrOutput() GooglePrivacyDlpV2CryptoHashConfigPtrOutput
	ToGooglePrivacyDlpV2CryptoHashConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2CryptoHashConfigPtrOutput
}

type googlePrivacyDlpV2CryptoHashConfigPtrType GooglePrivacyDlpV2CryptoHashConfigArgs

func GooglePrivacyDlpV2CryptoHashConfigPtr(v *GooglePrivacyDlpV2CryptoHashConfigArgs) GooglePrivacyDlpV2CryptoHashConfigPtrInput {
	return (*googlePrivacyDlpV2CryptoHashConfigPtrType)(v)
}

func (*googlePrivacyDlpV2CryptoHashConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CryptoHashConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2CryptoHashConfigPtrType) ToGooglePrivacyDlpV2CryptoHashConfigPtrOutput() GooglePrivacyDlpV2CryptoHashConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2CryptoHashConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2CryptoHashConfigPtrType) ToGooglePrivacyDlpV2CryptoHashConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoHashConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoHashConfigPtrOutput)
}

// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes. Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=). Currently, only string and integer values can be hashed. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
type GooglePrivacyDlpV2CryptoHashConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoHashConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoHashConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoHashConfigOutput) ToGooglePrivacyDlpV2CryptoHashConfigOutput() GooglePrivacyDlpV2CryptoHashConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoHashConfigOutput) ToGooglePrivacyDlpV2CryptoHashConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoHashConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoHashConfigOutput) ToGooglePrivacyDlpV2CryptoHashConfigPtrOutput() GooglePrivacyDlpV2CryptoHashConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2CryptoHashConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2CryptoHashConfigOutput) ToGooglePrivacyDlpV2CryptoHashConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoHashConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2CryptoHashConfig) *GooglePrivacyDlpV2CryptoHashConfig {
		return &v
	}).(GooglePrivacyDlpV2CryptoHashConfigPtrOutput)
}

// The key used by the hash function.
func (o GooglePrivacyDlpV2CryptoHashConfigOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoHashConfig) *GooglePrivacyDlpV2CryptoKey { return v.CryptoKey }).(GooglePrivacyDlpV2CryptoKeyPtrOutput)
}

type GooglePrivacyDlpV2CryptoHashConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoHashConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CryptoHashConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoHashConfigPtrOutput) ToGooglePrivacyDlpV2CryptoHashConfigPtrOutput() GooglePrivacyDlpV2CryptoHashConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoHashConfigPtrOutput) ToGooglePrivacyDlpV2CryptoHashConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoHashConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoHashConfigPtrOutput) Elem() GooglePrivacyDlpV2CryptoHashConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoHashConfig) GooglePrivacyDlpV2CryptoHashConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2CryptoHashConfig
		return ret
	}).(GooglePrivacyDlpV2CryptoHashConfigOutput)
}

// The key used by the hash function.
func (o GooglePrivacyDlpV2CryptoHashConfigPtrOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoHashConfig) *GooglePrivacyDlpV2CryptoKey {
		if v == nil {
			return nil
		}
		return v.CryptoKey
	}).(GooglePrivacyDlpV2CryptoKeyPtrOutput)
}

// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes. Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=). Currently, only string and integer values can be hashed. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
type GooglePrivacyDlpV2CryptoHashConfigResponse struct {
	// The key used by the hash function.
	CryptoKey GooglePrivacyDlpV2CryptoKeyResponse `pulumi:"cryptoKey"`
}

// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes. Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=). Currently, only string and integer values can be hashed. See https://cloud.google.com/dlp/docs/pseudonymization to learn more.
type GooglePrivacyDlpV2CryptoHashConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoHashConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoHashConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoHashConfigResponseOutput) ToGooglePrivacyDlpV2CryptoHashConfigResponseOutput() GooglePrivacyDlpV2CryptoHashConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoHashConfigResponseOutput) ToGooglePrivacyDlpV2CryptoHashConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoHashConfigResponseOutput {
	return o
}

// The key used by the hash function.
func (o GooglePrivacyDlpV2CryptoHashConfigResponseOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoHashConfigResponse) GooglePrivacyDlpV2CryptoKeyResponse {
		return v.CryptoKey
	}).(GooglePrivacyDlpV2CryptoKeyResponseOutput)
}

// This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.
type GooglePrivacyDlpV2CryptoKey struct {
	// Key wrapped using Cloud KMS
	KmsWrapped *GooglePrivacyDlpV2KmsWrappedCryptoKey `pulumi:"kmsWrapped"`
	// Transient crypto key
	Transient *GooglePrivacyDlpV2TransientCryptoKey `pulumi:"transient"`
	// Unwrapped crypto key
	Unwrapped *GooglePrivacyDlpV2UnwrappedCryptoKey `pulumi:"unwrapped"`
}

// GooglePrivacyDlpV2CryptoKeyInput is an input type that accepts GooglePrivacyDlpV2CryptoKeyArgs and GooglePrivacyDlpV2CryptoKeyOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CryptoKeyInput` via:
//
//	GooglePrivacyDlpV2CryptoKeyArgs{...}
type GooglePrivacyDlpV2CryptoKeyInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CryptoKeyOutput() GooglePrivacyDlpV2CryptoKeyOutput
	ToGooglePrivacyDlpV2CryptoKeyOutputWithContext(context.Context) GooglePrivacyDlpV2CryptoKeyOutput
}

// This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.
type GooglePrivacyDlpV2CryptoKeyArgs struct {
	// Key wrapped using Cloud KMS
	KmsWrapped GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrInput `pulumi:"kmsWrapped"`
	// Transient crypto key
	Transient GooglePrivacyDlpV2TransientCryptoKeyPtrInput `pulumi:"transient"`
	// Unwrapped crypto key
	Unwrapped GooglePrivacyDlpV2UnwrappedCryptoKeyPtrInput `pulumi:"unwrapped"`
}

func (GooglePrivacyDlpV2CryptoKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoKey)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CryptoKeyArgs) ToGooglePrivacyDlpV2CryptoKeyOutput() GooglePrivacyDlpV2CryptoKeyOutput {
	return i.ToGooglePrivacyDlpV2CryptoKeyOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CryptoKeyArgs) ToGooglePrivacyDlpV2CryptoKeyOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoKeyOutput)
}

func (i GooglePrivacyDlpV2CryptoKeyArgs) ToGooglePrivacyDlpV2CryptoKeyPtrOutput() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return i.ToGooglePrivacyDlpV2CryptoKeyPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CryptoKeyArgs) ToGooglePrivacyDlpV2CryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoKeyOutput).ToGooglePrivacyDlpV2CryptoKeyPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2CryptoKeyPtrInput is an input type that accepts GooglePrivacyDlpV2CryptoKeyArgs, GooglePrivacyDlpV2CryptoKeyPtr and GooglePrivacyDlpV2CryptoKeyPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CryptoKeyPtrInput` via:
//
//	        GooglePrivacyDlpV2CryptoKeyArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2CryptoKeyPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CryptoKeyPtrOutput() GooglePrivacyDlpV2CryptoKeyPtrOutput
	ToGooglePrivacyDlpV2CryptoKeyPtrOutputWithContext(context.Context) GooglePrivacyDlpV2CryptoKeyPtrOutput
}

type googlePrivacyDlpV2CryptoKeyPtrType GooglePrivacyDlpV2CryptoKeyArgs

func GooglePrivacyDlpV2CryptoKeyPtr(v *GooglePrivacyDlpV2CryptoKeyArgs) GooglePrivacyDlpV2CryptoKeyPtrInput {
	return (*googlePrivacyDlpV2CryptoKeyPtrType)(v)
}

func (*googlePrivacyDlpV2CryptoKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CryptoKey)(nil)).Elem()
}

func (i *googlePrivacyDlpV2CryptoKeyPtrType) ToGooglePrivacyDlpV2CryptoKeyPtrOutput() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return i.ToGooglePrivacyDlpV2CryptoKeyPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2CryptoKeyPtrType) ToGooglePrivacyDlpV2CryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoKeyPtrOutput)
}

// This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.
type GooglePrivacyDlpV2CryptoKeyOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoKey)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoKeyOutput) ToGooglePrivacyDlpV2CryptoKeyOutput() GooglePrivacyDlpV2CryptoKeyOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoKeyOutput) ToGooglePrivacyDlpV2CryptoKeyOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoKeyOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoKeyOutput) ToGooglePrivacyDlpV2CryptoKeyPtrOutput() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o.ToGooglePrivacyDlpV2CryptoKeyPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2CryptoKeyOutput) ToGooglePrivacyDlpV2CryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2CryptoKey) *GooglePrivacyDlpV2CryptoKey {
		return &v
	}).(GooglePrivacyDlpV2CryptoKeyPtrOutput)
}

// Key wrapped using Cloud KMS
func (o GooglePrivacyDlpV2CryptoKeyOutput) KmsWrapped() GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoKey) *GooglePrivacyDlpV2KmsWrappedCryptoKey { return v.KmsWrapped }).(GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput)
}

// Transient crypto key
func (o GooglePrivacyDlpV2CryptoKeyOutput) Transient() GooglePrivacyDlpV2TransientCryptoKeyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoKey) *GooglePrivacyDlpV2TransientCryptoKey { return v.Transient }).(GooglePrivacyDlpV2TransientCryptoKeyPtrOutput)
}

// Unwrapped crypto key
func (o GooglePrivacyDlpV2CryptoKeyOutput) Unwrapped() GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoKey) *GooglePrivacyDlpV2UnwrappedCryptoKey { return v.Unwrapped }).(GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput)
}

type GooglePrivacyDlpV2CryptoKeyPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CryptoKey)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoKeyPtrOutput) ToGooglePrivacyDlpV2CryptoKeyPtrOutput() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoKeyPtrOutput) ToGooglePrivacyDlpV2CryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoKeyPtrOutput) Elem() GooglePrivacyDlpV2CryptoKeyOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoKey) GooglePrivacyDlpV2CryptoKey {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2CryptoKey
		return ret
	}).(GooglePrivacyDlpV2CryptoKeyOutput)
}

// Key wrapped using Cloud KMS
func (o GooglePrivacyDlpV2CryptoKeyPtrOutput) KmsWrapped() GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoKey) *GooglePrivacyDlpV2KmsWrappedCryptoKey {
		if v == nil {
			return nil
		}
		return v.KmsWrapped
	}).(GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput)
}

// Transient crypto key
func (o GooglePrivacyDlpV2CryptoKeyPtrOutput) Transient() GooglePrivacyDlpV2TransientCryptoKeyPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoKey) *GooglePrivacyDlpV2TransientCryptoKey {
		if v == nil {
			return nil
		}
		return v.Transient
	}).(GooglePrivacyDlpV2TransientCryptoKeyPtrOutput)
}

// Unwrapped crypto key
func (o GooglePrivacyDlpV2CryptoKeyPtrOutput) Unwrapped() GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoKey) *GooglePrivacyDlpV2UnwrappedCryptoKey {
		if v == nil {
			return nil
		}
		return v.Unwrapped
	}).(GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput)
}

// This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.
type GooglePrivacyDlpV2CryptoKeyResponse struct {
	// Key wrapped using Cloud KMS
	KmsWrapped GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse `pulumi:"kmsWrapped"`
	// Transient crypto key
	Transient GooglePrivacyDlpV2TransientCryptoKeyResponse `pulumi:"transient"`
	// Unwrapped crypto key
	Unwrapped GooglePrivacyDlpV2UnwrappedCryptoKeyResponse `pulumi:"unwrapped"`
}

// This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.
type GooglePrivacyDlpV2CryptoKeyResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoKeyResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoKeyResponseOutput) ToGooglePrivacyDlpV2CryptoKeyResponseOutput() GooglePrivacyDlpV2CryptoKeyResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoKeyResponseOutput) ToGooglePrivacyDlpV2CryptoKeyResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoKeyResponseOutput {
	return o
}

// Key wrapped using Cloud KMS
func (o GooglePrivacyDlpV2CryptoKeyResponseOutput) KmsWrapped() GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoKeyResponse) GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse {
		return v.KmsWrapped
	}).(GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput)
}

// Transient crypto key
func (o GooglePrivacyDlpV2CryptoKeyResponseOutput) Transient() GooglePrivacyDlpV2TransientCryptoKeyResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoKeyResponse) GooglePrivacyDlpV2TransientCryptoKeyResponse {
		return v.Transient
	}).(GooglePrivacyDlpV2TransientCryptoKeyResponseOutput)
}

// Unwrapped crypto key
func (o GooglePrivacyDlpV2CryptoKeyResponseOutput) Unwrapped() GooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoKeyResponse) GooglePrivacyDlpV2UnwrappedCryptoKeyResponse {
		return v.Unwrapped
	}).(GooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput)
}

// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the `ReidentifyContent` API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more. Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
type GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig struct {
	// Common alphabets.
	CommonAlphabet *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet `pulumi:"commonAlphabet"`
	// The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2
	Context *GooglePrivacyDlpV2FieldId `pulumi:"context"`
	// The key used by the encryption algorithm.
	CryptoKey GooglePrivacyDlpV2CryptoKey `pulumi:"cryptoKey"`
	// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\:;"'<,>.?/
	CustomAlphabet *string `pulumi:"customAlphabet"`
	// The native way to select the alphabet. Must be in the range [2, 95].
	Radix *int `pulumi:"radix"`
	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	SurrogateInfoType *GooglePrivacyDlpV2InfoType `pulumi:"surrogateInfoType"`
}

// GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigInput is an input type that accepts GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs and GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigInput` via:
//
//	GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs{...}
type GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput
	ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutputWithContext(context.Context) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput
}

// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the `ReidentifyContent` API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more. Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
type GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs struct {
	// Common alphabets.
	CommonAlphabet GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabetPtrInput `pulumi:"commonAlphabet"`
	// The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2
	Context GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"context"`
	// The key used by the encryption algorithm.
	CryptoKey GooglePrivacyDlpV2CryptoKeyInput `pulumi:"cryptoKey"`
	// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\:;"'<,>.?/
	CustomAlphabet pulumi.StringPtrInput `pulumi:"customAlphabet"`
	// The native way to select the alphabet. Must be in the range [2, 95].
	Radix pulumi.IntPtrInput `pulumi:"radix"`
	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	SurrogateInfoType GooglePrivacyDlpV2InfoTypePtrInput `pulumi:"surrogateInfoType"`
}

func (GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput {
	return i.ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput)
}

func (i GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput).ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrInput is an input type that accepts GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs, GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtr and GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput
	ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput
}

type googlePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrType GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs

func GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtr(v *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrInput {
	return (*googlePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrType)(v)
}

func (*googlePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrType) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrType) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput)
}

// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the `ReidentifyContent` API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more. Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
type GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig {
		return &v
	}).(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput)
}

// Common alphabets.
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) CommonAlphabet() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabetPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet {
		return v.CommonAlphabet
	}).(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabetPtrOutput)
}

// The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) Context() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *GooglePrivacyDlpV2FieldId { return v.Context }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// The key used by the encryption algorithm.
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) GooglePrivacyDlpV2CryptoKey { return v.CryptoKey }).(GooglePrivacyDlpV2CryptoKeyOutput)
}

// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\:;"'<,>.?/
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) CustomAlphabet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *string { return v.CustomAlphabet }).(pulumi.StringPtrOutput)
}

// The native way to select the alphabet. Must be in the range [2, 95].
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) Radix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *int { return v.Radix }).(pulumi.IntPtrOutput)
}

// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput) SurrogateInfoType() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *GooglePrivacyDlpV2InfoType {
		return v.SurrogateInfoType
	}).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

type GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput) Elem() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig
		return ret
	}).(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput)
}

// Common alphabets.
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput) CommonAlphabet() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabetPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabet {
		if v == nil {
			return nil
		}
		return v.CommonAlphabet
	}).(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigCommonAlphabetPtrOutput)
}

// The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput) Context() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.Context
	}).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// The key used by the encryption algorithm.
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *GooglePrivacyDlpV2CryptoKey {
		if v == nil {
			return nil
		}
		return &v.CryptoKey
	}).(GooglePrivacyDlpV2CryptoKeyPtrOutput)
}

// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\:;"'<,>.?/
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput) CustomAlphabet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *string {
		if v == nil {
			return nil
		}
		return v.CustomAlphabet
	}).(pulumi.StringPtrOutput)
}

// The native way to select the alphabet. Must be in the range [2, 95].
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput) Radix() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *int {
		if v == nil {
			return nil
		}
		return v.Radix
	}).(pulumi.IntPtrOutput)
}

// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput) SurrogateInfoType() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig) *GooglePrivacyDlpV2InfoType {
		if v == nil {
			return nil
		}
		return v.SurrogateInfoType
	}).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the `ReidentifyContent` API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more. Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
type GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponse struct {
	// Common alphabets.
	CommonAlphabet string `pulumi:"commonAlphabet"`
	// The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2
	Context GooglePrivacyDlpV2FieldIdResponse `pulumi:"context"`
	// The key used by the encryption algorithm.
	CryptoKey GooglePrivacyDlpV2CryptoKeyResponse `pulumi:"cryptoKey"`
	// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\:;"'<,>.?/
	CustomAlphabet string `pulumi:"customAlphabet"`
	// The native way to select the alphabet. Must be in the range [2, 95].
	Radix int `pulumi:"radix"`
	// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
	SurrogateInfoType GooglePrivacyDlpV2InfoTypeResponse `pulumi:"surrogateInfoType"`
}

// Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the `ReidentifyContent` API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to learn more. Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
type GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput) ToGooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput {
	return o
}

// Common alphabets.
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput) CommonAlphabet() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponse) string { return v.CommonAlphabet }).(pulumi.StringOutput)
}

// The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and unstructured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput) Context() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponse) GooglePrivacyDlpV2FieldIdResponse {
		return v.Context
	}).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// The key used by the encryption algorithm.
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponse) GooglePrivacyDlpV2CryptoKeyResponse {
		return v.CryptoKey
	}).(GooglePrivacyDlpV2CryptoKeyResponseOutput)
}

// This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\:;"'<,>.?/
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput) CustomAlphabet() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponse) string { return v.CustomAlphabet }).(pulumi.StringOutput)
}

// The native way to select the alphabet. Must be in the range [2, 95].
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput) Radix() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponse) int { return v.Radix }).(pulumi.IntOutput)
}

// The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE
func (o GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput) SurrogateInfoType() GooglePrivacyDlpV2InfoTypeResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponse) GooglePrivacyDlpV2InfoTypeResponse {
		return v.SurrogateInfoType
	}).(GooglePrivacyDlpV2InfoTypeResponseOutput)
}

// Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
type GooglePrivacyDlpV2CustomInfoType struct {
	// Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
	DetectionRules []GooglePrivacyDlpV2DetectionRule `pulumi:"detectionRules"`
	// A list of phrases to detect as a CustomInfoType.
	Dictionary *GooglePrivacyDlpV2Dictionary `pulumi:"dictionary"`
	// If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
	ExclusionType *GooglePrivacyDlpV2CustomInfoTypeExclusionType `pulumi:"exclusionType"`
	// CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.
	InfoType *GooglePrivacyDlpV2InfoType `pulumi:"infoType"`
	// Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
	Likelihood *GooglePrivacyDlpV2CustomInfoTypeLikelihood `pulumi:"likelihood"`
	// Regular expression based CustomInfoType.
	Regex *GooglePrivacyDlpV2Regex `pulumi:"regex"`
	// Sensitivity for this CustomInfoType. If this CustomInfoType extends an existing InfoType, the sensitivity here will take precedence over that of the original InfoType. If unset for a CustomInfoType, it will default to HIGH. This only applies to data profiling.
	SensitivityScore *GooglePrivacyDlpV2SensitivityScore `pulumi:"sensitivityScore"`
	// Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.
	StoredType *GooglePrivacyDlpV2StoredType `pulumi:"storedType"`
	// Message for detecting output from deidentification transformations that support reversing.
	SurrogateType *GooglePrivacyDlpV2SurrogateType `pulumi:"surrogateType"`
}

// GooglePrivacyDlpV2CustomInfoTypeInput is an input type that accepts GooglePrivacyDlpV2CustomInfoTypeArgs and GooglePrivacyDlpV2CustomInfoTypeOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CustomInfoTypeInput` via:
//
//	GooglePrivacyDlpV2CustomInfoTypeArgs{...}
type GooglePrivacyDlpV2CustomInfoTypeInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CustomInfoTypeOutput() GooglePrivacyDlpV2CustomInfoTypeOutput
	ToGooglePrivacyDlpV2CustomInfoTypeOutputWithContext(context.Context) GooglePrivacyDlpV2CustomInfoTypeOutput
}

// Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
type GooglePrivacyDlpV2CustomInfoTypeArgs struct {
	// Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
	DetectionRules GooglePrivacyDlpV2DetectionRuleArrayInput `pulumi:"detectionRules"`
	// A list of phrases to detect as a CustomInfoType.
	Dictionary GooglePrivacyDlpV2DictionaryPtrInput `pulumi:"dictionary"`
	// If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
	ExclusionType GooglePrivacyDlpV2CustomInfoTypeExclusionTypePtrInput `pulumi:"exclusionType"`
	// CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.
	InfoType GooglePrivacyDlpV2InfoTypePtrInput `pulumi:"infoType"`
	// Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
	Likelihood GooglePrivacyDlpV2CustomInfoTypeLikelihoodPtrInput `pulumi:"likelihood"`
	// Regular expression based CustomInfoType.
	Regex GooglePrivacyDlpV2RegexPtrInput `pulumi:"regex"`
	// Sensitivity for this CustomInfoType. If this CustomInfoType extends an existing InfoType, the sensitivity here will take precedence over that of the original InfoType. If unset for a CustomInfoType, it will default to HIGH. This only applies to data profiling.
	SensitivityScore GooglePrivacyDlpV2SensitivityScorePtrInput `pulumi:"sensitivityScore"`
	// Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.
	StoredType GooglePrivacyDlpV2StoredTypePtrInput `pulumi:"storedType"`
	// Message for detecting output from deidentification transformations that support reversing.
	SurrogateType GooglePrivacyDlpV2SurrogateTypePtrInput `pulumi:"surrogateType"`
}

func (GooglePrivacyDlpV2CustomInfoTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CustomInfoType)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CustomInfoTypeArgs) ToGooglePrivacyDlpV2CustomInfoTypeOutput() GooglePrivacyDlpV2CustomInfoTypeOutput {
	return i.ToGooglePrivacyDlpV2CustomInfoTypeOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CustomInfoTypeArgs) ToGooglePrivacyDlpV2CustomInfoTypeOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CustomInfoTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CustomInfoTypeOutput)
}

// GooglePrivacyDlpV2CustomInfoTypeArrayInput is an input type that accepts GooglePrivacyDlpV2CustomInfoTypeArray and GooglePrivacyDlpV2CustomInfoTypeArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2CustomInfoTypeArrayInput` via:
//
//	GooglePrivacyDlpV2CustomInfoTypeArray{ GooglePrivacyDlpV2CustomInfoTypeArgs{...} }
type GooglePrivacyDlpV2CustomInfoTypeArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2CustomInfoTypeArrayOutput() GooglePrivacyDlpV2CustomInfoTypeArrayOutput
	ToGooglePrivacyDlpV2CustomInfoTypeArrayOutputWithContext(context.Context) GooglePrivacyDlpV2CustomInfoTypeArrayOutput
}

type GooglePrivacyDlpV2CustomInfoTypeArray []GooglePrivacyDlpV2CustomInfoTypeInput

func (GooglePrivacyDlpV2CustomInfoTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2CustomInfoType)(nil)).Elem()
}

func (i GooglePrivacyDlpV2CustomInfoTypeArray) ToGooglePrivacyDlpV2CustomInfoTypeArrayOutput() GooglePrivacyDlpV2CustomInfoTypeArrayOutput {
	return i.ToGooglePrivacyDlpV2CustomInfoTypeArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2CustomInfoTypeArray) ToGooglePrivacyDlpV2CustomInfoTypeArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CustomInfoTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2CustomInfoTypeArrayOutput)
}

// Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
type GooglePrivacyDlpV2CustomInfoTypeOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CustomInfoTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CustomInfoType)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CustomInfoTypeOutput) ToGooglePrivacyDlpV2CustomInfoTypeOutput() GooglePrivacyDlpV2CustomInfoTypeOutput {
	return o
}

func (o GooglePrivacyDlpV2CustomInfoTypeOutput) ToGooglePrivacyDlpV2CustomInfoTypeOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CustomInfoTypeOutput {
	return o
}

// Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
func (o GooglePrivacyDlpV2CustomInfoTypeOutput) DetectionRules() GooglePrivacyDlpV2DetectionRuleArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoType) []GooglePrivacyDlpV2DetectionRule { return v.DetectionRules }).(GooglePrivacyDlpV2DetectionRuleArrayOutput)
}

// A list of phrases to detect as a CustomInfoType.
func (o GooglePrivacyDlpV2CustomInfoTypeOutput) Dictionary() GooglePrivacyDlpV2DictionaryPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoType) *GooglePrivacyDlpV2Dictionary { return v.Dictionary }).(GooglePrivacyDlpV2DictionaryPtrOutput)
}

// If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
func (o GooglePrivacyDlpV2CustomInfoTypeOutput) ExclusionType() GooglePrivacyDlpV2CustomInfoTypeExclusionTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoType) *GooglePrivacyDlpV2CustomInfoTypeExclusionType {
		return v.ExclusionType
	}).(GooglePrivacyDlpV2CustomInfoTypeExclusionTypePtrOutput)
}

// CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.
func (o GooglePrivacyDlpV2CustomInfoTypeOutput) InfoType() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoType) *GooglePrivacyDlpV2InfoType { return v.InfoType }).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

// Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
func (o GooglePrivacyDlpV2CustomInfoTypeOutput) Likelihood() GooglePrivacyDlpV2CustomInfoTypeLikelihoodPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoType) *GooglePrivacyDlpV2CustomInfoTypeLikelihood {
		return v.Likelihood
	}).(GooglePrivacyDlpV2CustomInfoTypeLikelihoodPtrOutput)
}

// Regular expression based CustomInfoType.
func (o GooglePrivacyDlpV2CustomInfoTypeOutput) Regex() GooglePrivacyDlpV2RegexPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoType) *GooglePrivacyDlpV2Regex { return v.Regex }).(GooglePrivacyDlpV2RegexPtrOutput)
}

// Sensitivity for this CustomInfoType. If this CustomInfoType extends an existing InfoType, the sensitivity here will take precedence over that of the original InfoType. If unset for a CustomInfoType, it will default to HIGH. This only applies to data profiling.
func (o GooglePrivacyDlpV2CustomInfoTypeOutput) SensitivityScore() GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoType) *GooglePrivacyDlpV2SensitivityScore {
		return v.SensitivityScore
	}).(GooglePrivacyDlpV2SensitivityScorePtrOutput)
}

// Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.
func (o GooglePrivacyDlpV2CustomInfoTypeOutput) StoredType() GooglePrivacyDlpV2StoredTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoType) *GooglePrivacyDlpV2StoredType { return v.StoredType }).(GooglePrivacyDlpV2StoredTypePtrOutput)
}

// Message for detecting output from deidentification transformations that support reversing.
func (o GooglePrivacyDlpV2CustomInfoTypeOutput) SurrogateType() GooglePrivacyDlpV2SurrogateTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoType) *GooglePrivacyDlpV2SurrogateType { return v.SurrogateType }).(GooglePrivacyDlpV2SurrogateTypePtrOutput)
}

type GooglePrivacyDlpV2CustomInfoTypeArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CustomInfoTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2CustomInfoType)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CustomInfoTypeArrayOutput) ToGooglePrivacyDlpV2CustomInfoTypeArrayOutput() GooglePrivacyDlpV2CustomInfoTypeArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2CustomInfoTypeArrayOutput) ToGooglePrivacyDlpV2CustomInfoTypeArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CustomInfoTypeArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2CustomInfoTypeArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2CustomInfoTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2CustomInfoType {
		return vs[0].([]GooglePrivacyDlpV2CustomInfoType)[vs[1].(int)]
	}).(GooglePrivacyDlpV2CustomInfoTypeOutput)
}

// Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
type GooglePrivacyDlpV2CustomInfoTypeResponse struct {
	// Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
	DetectionRules []GooglePrivacyDlpV2DetectionRuleResponse `pulumi:"detectionRules"`
	// A list of phrases to detect as a CustomInfoType.
	Dictionary GooglePrivacyDlpV2DictionaryResponse `pulumi:"dictionary"`
	// If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
	ExclusionType string `pulumi:"exclusionType"`
	// CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.
	InfoType GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoType"`
	// Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
	Likelihood string `pulumi:"likelihood"`
	// Regular expression based CustomInfoType.
	Regex GooglePrivacyDlpV2RegexResponse `pulumi:"regex"`
	// Sensitivity for this CustomInfoType. If this CustomInfoType extends an existing InfoType, the sensitivity here will take precedence over that of the original InfoType. If unset for a CustomInfoType, it will default to HIGH. This only applies to data profiling.
	SensitivityScore GooglePrivacyDlpV2SensitivityScoreResponse `pulumi:"sensitivityScore"`
	// Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.
	StoredType GooglePrivacyDlpV2StoredTypeResponse `pulumi:"storedType"`
	// Message for detecting output from deidentification transformations that support reversing.
	SurrogateType GooglePrivacyDlpV2SurrogateTypeResponse `pulumi:"surrogateType"`
}

// Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
type GooglePrivacyDlpV2CustomInfoTypeResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CustomInfoTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2CustomInfoTypeResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) ToGooglePrivacyDlpV2CustomInfoTypeResponseOutput() GooglePrivacyDlpV2CustomInfoTypeResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) ToGooglePrivacyDlpV2CustomInfoTypeResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CustomInfoTypeResponseOutput {
	return o
}

// Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.
func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) DetectionRules() GooglePrivacyDlpV2DetectionRuleResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoTypeResponse) []GooglePrivacyDlpV2DetectionRuleResponse {
		return v.DetectionRules
	}).(GooglePrivacyDlpV2DetectionRuleResponseArrayOutput)
}

// A list of phrases to detect as a CustomInfoType.
func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) Dictionary() GooglePrivacyDlpV2DictionaryResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoTypeResponse) GooglePrivacyDlpV2DictionaryResponse {
		return v.Dictionary
	}).(GooglePrivacyDlpV2DictionaryResponseOutput)
}

// If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) ExclusionType() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoTypeResponse) string { return v.ExclusionType }).(pulumi.StringOutput)
}

// CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.
func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) InfoType() GooglePrivacyDlpV2InfoTypeResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoTypeResponse) GooglePrivacyDlpV2InfoTypeResponse { return v.InfoType }).(GooglePrivacyDlpV2InfoTypeResponseOutput)
}

// Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.
func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) Likelihood() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoTypeResponse) string { return v.Likelihood }).(pulumi.StringOutput)
}

// Regular expression based CustomInfoType.
func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) Regex() GooglePrivacyDlpV2RegexResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoTypeResponse) GooglePrivacyDlpV2RegexResponse { return v.Regex }).(GooglePrivacyDlpV2RegexResponseOutput)
}

// Sensitivity for this CustomInfoType. If this CustomInfoType extends an existing InfoType, the sensitivity here will take precedence over that of the original InfoType. If unset for a CustomInfoType, it will default to HIGH. This only applies to data profiling.
func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) SensitivityScore() GooglePrivacyDlpV2SensitivityScoreResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoTypeResponse) GooglePrivacyDlpV2SensitivityScoreResponse {
		return v.SensitivityScore
	}).(GooglePrivacyDlpV2SensitivityScoreResponseOutput)
}

// Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.
func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) StoredType() GooglePrivacyDlpV2StoredTypeResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoTypeResponse) GooglePrivacyDlpV2StoredTypeResponse {
		return v.StoredType
	}).(GooglePrivacyDlpV2StoredTypeResponseOutput)
}

// Message for detecting output from deidentification transformations that support reversing.
func (o GooglePrivacyDlpV2CustomInfoTypeResponseOutput) SurrogateType() GooglePrivacyDlpV2SurrogateTypeResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2CustomInfoTypeResponse) GooglePrivacyDlpV2SurrogateTypeResponse {
		return v.SurrogateType
	}).(GooglePrivacyDlpV2SurrogateTypeResponseOutput)
}

type GooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2CustomInfoTypeResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput) ToGooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput() GooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput) ToGooglePrivacyDlpV2CustomInfoTypeResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2CustomInfoTypeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2CustomInfoTypeResponse {
		return vs[0].([]GooglePrivacyDlpV2CustomInfoTypeResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2CustomInfoTypeResponseOutput)
}

// A task to execute when a data profile has been generated.
type GooglePrivacyDlpV2DataProfileAction struct {
	// Export data profiles into a provided location.
	ExportData *GooglePrivacyDlpV2Export `pulumi:"exportData"`
	// Publish a message into the Pub/Sub topic.
	PubSubNotification *GooglePrivacyDlpV2PubSubNotification `pulumi:"pubSubNotification"`
}

// GooglePrivacyDlpV2DataProfileActionInput is an input type that accepts GooglePrivacyDlpV2DataProfileActionArgs and GooglePrivacyDlpV2DataProfileActionOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DataProfileActionInput` via:
//
//	GooglePrivacyDlpV2DataProfileActionArgs{...}
type GooglePrivacyDlpV2DataProfileActionInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DataProfileActionOutput() GooglePrivacyDlpV2DataProfileActionOutput
	ToGooglePrivacyDlpV2DataProfileActionOutputWithContext(context.Context) GooglePrivacyDlpV2DataProfileActionOutput
}

// A task to execute when a data profile has been generated.
type GooglePrivacyDlpV2DataProfileActionArgs struct {
	// Export data profiles into a provided location.
	ExportData GooglePrivacyDlpV2ExportPtrInput `pulumi:"exportData"`
	// Publish a message into the Pub/Sub topic.
	PubSubNotification GooglePrivacyDlpV2PubSubNotificationPtrInput `pulumi:"pubSubNotification"`
}

func (GooglePrivacyDlpV2DataProfileActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DataProfileAction)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DataProfileActionArgs) ToGooglePrivacyDlpV2DataProfileActionOutput() GooglePrivacyDlpV2DataProfileActionOutput {
	return i.ToGooglePrivacyDlpV2DataProfileActionOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DataProfileActionArgs) ToGooglePrivacyDlpV2DataProfileActionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfileActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DataProfileActionOutput)
}

// GooglePrivacyDlpV2DataProfileActionArrayInput is an input type that accepts GooglePrivacyDlpV2DataProfileActionArray and GooglePrivacyDlpV2DataProfileActionArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DataProfileActionArrayInput` via:
//
//	GooglePrivacyDlpV2DataProfileActionArray{ GooglePrivacyDlpV2DataProfileActionArgs{...} }
type GooglePrivacyDlpV2DataProfileActionArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DataProfileActionArrayOutput() GooglePrivacyDlpV2DataProfileActionArrayOutput
	ToGooglePrivacyDlpV2DataProfileActionArrayOutputWithContext(context.Context) GooglePrivacyDlpV2DataProfileActionArrayOutput
}

type GooglePrivacyDlpV2DataProfileActionArray []GooglePrivacyDlpV2DataProfileActionInput

func (GooglePrivacyDlpV2DataProfileActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DataProfileAction)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DataProfileActionArray) ToGooglePrivacyDlpV2DataProfileActionArrayOutput() GooglePrivacyDlpV2DataProfileActionArrayOutput {
	return i.ToGooglePrivacyDlpV2DataProfileActionArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DataProfileActionArray) ToGooglePrivacyDlpV2DataProfileActionArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfileActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DataProfileActionArrayOutput)
}

// A task to execute when a data profile has been generated.
type GooglePrivacyDlpV2DataProfileActionOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DataProfileActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DataProfileAction)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DataProfileActionOutput) ToGooglePrivacyDlpV2DataProfileActionOutput() GooglePrivacyDlpV2DataProfileActionOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfileActionOutput) ToGooglePrivacyDlpV2DataProfileActionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfileActionOutput {
	return o
}

// Export data profiles into a provided location.
func (o GooglePrivacyDlpV2DataProfileActionOutput) ExportData() GooglePrivacyDlpV2ExportPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DataProfileAction) *GooglePrivacyDlpV2Export { return v.ExportData }).(GooglePrivacyDlpV2ExportPtrOutput)
}

// Publish a message into the Pub/Sub topic.
func (o GooglePrivacyDlpV2DataProfileActionOutput) PubSubNotification() GooglePrivacyDlpV2PubSubNotificationPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DataProfileAction) *GooglePrivacyDlpV2PubSubNotification {
		return v.PubSubNotification
	}).(GooglePrivacyDlpV2PubSubNotificationPtrOutput)
}

type GooglePrivacyDlpV2DataProfileActionArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DataProfileActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DataProfileAction)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DataProfileActionArrayOutput) ToGooglePrivacyDlpV2DataProfileActionArrayOutput() GooglePrivacyDlpV2DataProfileActionArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfileActionArrayOutput) ToGooglePrivacyDlpV2DataProfileActionArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfileActionArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfileActionArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2DataProfileActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2DataProfileAction {
		return vs[0].([]GooglePrivacyDlpV2DataProfileAction)[vs[1].(int)]
	}).(GooglePrivacyDlpV2DataProfileActionOutput)
}

// A task to execute when a data profile has been generated.
type GooglePrivacyDlpV2DataProfileActionResponse struct {
	// Export data profiles into a provided location.
	ExportData GooglePrivacyDlpV2ExportResponse `pulumi:"exportData"`
	// Publish a message into the Pub/Sub topic.
	PubSubNotification GooglePrivacyDlpV2PubSubNotificationResponse `pulumi:"pubSubNotification"`
}

// A task to execute when a data profile has been generated.
type GooglePrivacyDlpV2DataProfileActionResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DataProfileActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DataProfileActionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DataProfileActionResponseOutput) ToGooglePrivacyDlpV2DataProfileActionResponseOutput() GooglePrivacyDlpV2DataProfileActionResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfileActionResponseOutput) ToGooglePrivacyDlpV2DataProfileActionResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfileActionResponseOutput {
	return o
}

// Export data profiles into a provided location.
func (o GooglePrivacyDlpV2DataProfileActionResponseOutput) ExportData() GooglePrivacyDlpV2ExportResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DataProfileActionResponse) GooglePrivacyDlpV2ExportResponse {
		return v.ExportData
	}).(GooglePrivacyDlpV2ExportResponseOutput)
}

// Publish a message into the Pub/Sub topic.
func (o GooglePrivacyDlpV2DataProfileActionResponseOutput) PubSubNotification() GooglePrivacyDlpV2PubSubNotificationResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DataProfileActionResponse) GooglePrivacyDlpV2PubSubNotificationResponse {
		return v.PubSubNotification
	}).(GooglePrivacyDlpV2PubSubNotificationResponseOutput)
}

type GooglePrivacyDlpV2DataProfileActionResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DataProfileActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DataProfileActionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DataProfileActionResponseArrayOutput) ToGooglePrivacyDlpV2DataProfileActionResponseArrayOutput() GooglePrivacyDlpV2DataProfileActionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfileActionResponseArrayOutput) ToGooglePrivacyDlpV2DataProfileActionResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfileActionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfileActionResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2DataProfileActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2DataProfileActionResponse {
		return vs[0].([]GooglePrivacyDlpV2DataProfileActionResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2DataProfileActionResponseOutput)
}

// A condition for determining whether a Pub/Sub should be triggered.
type GooglePrivacyDlpV2DataProfilePubSubCondition struct {
	// An expression.
	Expressions *GooglePrivacyDlpV2PubSubExpressions `pulumi:"expressions"`
}

// GooglePrivacyDlpV2DataProfilePubSubConditionInput is an input type that accepts GooglePrivacyDlpV2DataProfilePubSubConditionArgs and GooglePrivacyDlpV2DataProfilePubSubConditionOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DataProfilePubSubConditionInput` via:
//
//	GooglePrivacyDlpV2DataProfilePubSubConditionArgs{...}
type GooglePrivacyDlpV2DataProfilePubSubConditionInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DataProfilePubSubConditionOutput() GooglePrivacyDlpV2DataProfilePubSubConditionOutput
	ToGooglePrivacyDlpV2DataProfilePubSubConditionOutputWithContext(context.Context) GooglePrivacyDlpV2DataProfilePubSubConditionOutput
}

// A condition for determining whether a Pub/Sub should be triggered.
type GooglePrivacyDlpV2DataProfilePubSubConditionArgs struct {
	// An expression.
	Expressions GooglePrivacyDlpV2PubSubExpressionsPtrInput `pulumi:"expressions"`
}

func (GooglePrivacyDlpV2DataProfilePubSubConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DataProfilePubSubCondition)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DataProfilePubSubConditionArgs) ToGooglePrivacyDlpV2DataProfilePubSubConditionOutput() GooglePrivacyDlpV2DataProfilePubSubConditionOutput {
	return i.ToGooglePrivacyDlpV2DataProfilePubSubConditionOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DataProfilePubSubConditionArgs) ToGooglePrivacyDlpV2DataProfilePubSubConditionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfilePubSubConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DataProfilePubSubConditionOutput)
}

func (i GooglePrivacyDlpV2DataProfilePubSubConditionArgs) ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput() GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput {
	return i.ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DataProfilePubSubConditionArgs) ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DataProfilePubSubConditionOutput).ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DataProfilePubSubConditionPtrInput is an input type that accepts GooglePrivacyDlpV2DataProfilePubSubConditionArgs, GooglePrivacyDlpV2DataProfilePubSubConditionPtr and GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DataProfilePubSubConditionPtrInput` via:
//
//	        GooglePrivacyDlpV2DataProfilePubSubConditionArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DataProfilePubSubConditionPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput() GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput
	ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput
}

type googlePrivacyDlpV2DataProfilePubSubConditionPtrType GooglePrivacyDlpV2DataProfilePubSubConditionArgs

func GooglePrivacyDlpV2DataProfilePubSubConditionPtr(v *GooglePrivacyDlpV2DataProfilePubSubConditionArgs) GooglePrivacyDlpV2DataProfilePubSubConditionPtrInput {
	return (*googlePrivacyDlpV2DataProfilePubSubConditionPtrType)(v)
}

func (*googlePrivacyDlpV2DataProfilePubSubConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DataProfilePubSubCondition)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DataProfilePubSubConditionPtrType) ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput() GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput {
	return i.ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DataProfilePubSubConditionPtrType) ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput)
}

// A condition for determining whether a Pub/Sub should be triggered.
type GooglePrivacyDlpV2DataProfilePubSubConditionOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DataProfilePubSubConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DataProfilePubSubCondition)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DataProfilePubSubConditionOutput) ToGooglePrivacyDlpV2DataProfilePubSubConditionOutput() GooglePrivacyDlpV2DataProfilePubSubConditionOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfilePubSubConditionOutput) ToGooglePrivacyDlpV2DataProfilePubSubConditionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfilePubSubConditionOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfilePubSubConditionOutput) ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput() GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput {
	return o.ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DataProfilePubSubConditionOutput) ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DataProfilePubSubCondition) *GooglePrivacyDlpV2DataProfilePubSubCondition {
		return &v
	}).(GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput)
}

// An expression.
func (o GooglePrivacyDlpV2DataProfilePubSubConditionOutput) Expressions() GooglePrivacyDlpV2PubSubExpressionsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DataProfilePubSubCondition) *GooglePrivacyDlpV2PubSubExpressions {
		return v.Expressions
	}).(GooglePrivacyDlpV2PubSubExpressionsPtrOutput)
}

type GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DataProfilePubSubCondition)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput) ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput() GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput) ToGooglePrivacyDlpV2DataProfilePubSubConditionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput) Elem() GooglePrivacyDlpV2DataProfilePubSubConditionOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DataProfilePubSubCondition) GooglePrivacyDlpV2DataProfilePubSubCondition {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DataProfilePubSubCondition
		return ret
	}).(GooglePrivacyDlpV2DataProfilePubSubConditionOutput)
}

// An expression.
func (o GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput) Expressions() GooglePrivacyDlpV2PubSubExpressionsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DataProfilePubSubCondition) *GooglePrivacyDlpV2PubSubExpressions {
		if v == nil {
			return nil
		}
		return v.Expressions
	}).(GooglePrivacyDlpV2PubSubExpressionsPtrOutput)
}

// A condition for determining whether a Pub/Sub should be triggered.
type GooglePrivacyDlpV2DataProfilePubSubConditionResponse struct {
	// An expression.
	Expressions GooglePrivacyDlpV2PubSubExpressionsResponse `pulumi:"expressions"`
}

// A condition for determining whether a Pub/Sub should be triggered.
type GooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DataProfilePubSubConditionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput) ToGooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput() GooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput) ToGooglePrivacyDlpV2DataProfilePubSubConditionResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput {
	return o
}

// An expression.
func (o GooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput) Expressions() GooglePrivacyDlpV2PubSubExpressionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DataProfilePubSubConditionResponse) GooglePrivacyDlpV2PubSubExpressionsResponse {
		return v.Expressions
	}).(GooglePrivacyDlpV2PubSubExpressionsResponseOutput)
}

// Options defining a data set within Google Cloud Datastore.
type GooglePrivacyDlpV2DatastoreOptions struct {
	// The kind to process.
	Kind *GooglePrivacyDlpV2KindExpression `pulumi:"kind"`
	// A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.
	PartitionId *GooglePrivacyDlpV2PartitionId `pulumi:"partitionId"`
}

// GooglePrivacyDlpV2DatastoreOptionsInput is an input type that accepts GooglePrivacyDlpV2DatastoreOptionsArgs and GooglePrivacyDlpV2DatastoreOptionsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DatastoreOptionsInput` via:
//
//	GooglePrivacyDlpV2DatastoreOptionsArgs{...}
type GooglePrivacyDlpV2DatastoreOptionsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DatastoreOptionsOutput() GooglePrivacyDlpV2DatastoreOptionsOutput
	ToGooglePrivacyDlpV2DatastoreOptionsOutputWithContext(context.Context) GooglePrivacyDlpV2DatastoreOptionsOutput
}

// Options defining a data set within Google Cloud Datastore.
type GooglePrivacyDlpV2DatastoreOptionsArgs struct {
	// The kind to process.
	Kind GooglePrivacyDlpV2KindExpressionPtrInput `pulumi:"kind"`
	// A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.
	PartitionId GooglePrivacyDlpV2PartitionIdPtrInput `pulumi:"partitionId"`
}

func (GooglePrivacyDlpV2DatastoreOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DatastoreOptions)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DatastoreOptionsArgs) ToGooglePrivacyDlpV2DatastoreOptionsOutput() GooglePrivacyDlpV2DatastoreOptionsOutput {
	return i.ToGooglePrivacyDlpV2DatastoreOptionsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DatastoreOptionsArgs) ToGooglePrivacyDlpV2DatastoreOptionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DatastoreOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DatastoreOptionsOutput)
}

func (i GooglePrivacyDlpV2DatastoreOptionsArgs) ToGooglePrivacyDlpV2DatastoreOptionsPtrOutput() GooglePrivacyDlpV2DatastoreOptionsPtrOutput {
	return i.ToGooglePrivacyDlpV2DatastoreOptionsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DatastoreOptionsArgs) ToGooglePrivacyDlpV2DatastoreOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DatastoreOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DatastoreOptionsOutput).ToGooglePrivacyDlpV2DatastoreOptionsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DatastoreOptionsPtrInput is an input type that accepts GooglePrivacyDlpV2DatastoreOptionsArgs, GooglePrivacyDlpV2DatastoreOptionsPtr and GooglePrivacyDlpV2DatastoreOptionsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DatastoreOptionsPtrInput` via:
//
//	        GooglePrivacyDlpV2DatastoreOptionsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DatastoreOptionsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DatastoreOptionsPtrOutput() GooglePrivacyDlpV2DatastoreOptionsPtrOutput
	ToGooglePrivacyDlpV2DatastoreOptionsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DatastoreOptionsPtrOutput
}

type googlePrivacyDlpV2DatastoreOptionsPtrType GooglePrivacyDlpV2DatastoreOptionsArgs

func GooglePrivacyDlpV2DatastoreOptionsPtr(v *GooglePrivacyDlpV2DatastoreOptionsArgs) GooglePrivacyDlpV2DatastoreOptionsPtrInput {
	return (*googlePrivacyDlpV2DatastoreOptionsPtrType)(v)
}

func (*googlePrivacyDlpV2DatastoreOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DatastoreOptions)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DatastoreOptionsPtrType) ToGooglePrivacyDlpV2DatastoreOptionsPtrOutput() GooglePrivacyDlpV2DatastoreOptionsPtrOutput {
	return i.ToGooglePrivacyDlpV2DatastoreOptionsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DatastoreOptionsPtrType) ToGooglePrivacyDlpV2DatastoreOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DatastoreOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DatastoreOptionsPtrOutput)
}

// Options defining a data set within Google Cloud Datastore.
type GooglePrivacyDlpV2DatastoreOptionsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DatastoreOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DatastoreOptions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DatastoreOptionsOutput) ToGooglePrivacyDlpV2DatastoreOptionsOutput() GooglePrivacyDlpV2DatastoreOptionsOutput {
	return o
}

func (o GooglePrivacyDlpV2DatastoreOptionsOutput) ToGooglePrivacyDlpV2DatastoreOptionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DatastoreOptionsOutput {
	return o
}

func (o GooglePrivacyDlpV2DatastoreOptionsOutput) ToGooglePrivacyDlpV2DatastoreOptionsPtrOutput() GooglePrivacyDlpV2DatastoreOptionsPtrOutput {
	return o.ToGooglePrivacyDlpV2DatastoreOptionsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DatastoreOptionsOutput) ToGooglePrivacyDlpV2DatastoreOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DatastoreOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DatastoreOptions) *GooglePrivacyDlpV2DatastoreOptions {
		return &v
	}).(GooglePrivacyDlpV2DatastoreOptionsPtrOutput)
}

// The kind to process.
func (o GooglePrivacyDlpV2DatastoreOptionsOutput) Kind() GooglePrivacyDlpV2KindExpressionPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DatastoreOptions) *GooglePrivacyDlpV2KindExpression { return v.Kind }).(GooglePrivacyDlpV2KindExpressionPtrOutput)
}

// A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.
func (o GooglePrivacyDlpV2DatastoreOptionsOutput) PartitionId() GooglePrivacyDlpV2PartitionIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DatastoreOptions) *GooglePrivacyDlpV2PartitionId { return v.PartitionId }).(GooglePrivacyDlpV2PartitionIdPtrOutput)
}

type GooglePrivacyDlpV2DatastoreOptionsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DatastoreOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DatastoreOptions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DatastoreOptionsPtrOutput) ToGooglePrivacyDlpV2DatastoreOptionsPtrOutput() GooglePrivacyDlpV2DatastoreOptionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DatastoreOptionsPtrOutput) ToGooglePrivacyDlpV2DatastoreOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DatastoreOptionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DatastoreOptionsPtrOutput) Elem() GooglePrivacyDlpV2DatastoreOptionsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DatastoreOptions) GooglePrivacyDlpV2DatastoreOptions {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DatastoreOptions
		return ret
	}).(GooglePrivacyDlpV2DatastoreOptionsOutput)
}

// The kind to process.
func (o GooglePrivacyDlpV2DatastoreOptionsPtrOutput) Kind() GooglePrivacyDlpV2KindExpressionPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DatastoreOptions) *GooglePrivacyDlpV2KindExpression {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(GooglePrivacyDlpV2KindExpressionPtrOutput)
}

// A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.
func (o GooglePrivacyDlpV2DatastoreOptionsPtrOutput) PartitionId() GooglePrivacyDlpV2PartitionIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DatastoreOptions) *GooglePrivacyDlpV2PartitionId {
		if v == nil {
			return nil
		}
		return v.PartitionId
	}).(GooglePrivacyDlpV2PartitionIdPtrOutput)
}

// Options defining a data set within Google Cloud Datastore.
type GooglePrivacyDlpV2DatastoreOptionsResponse struct {
	// The kind to process.
	Kind GooglePrivacyDlpV2KindExpressionResponse `pulumi:"kind"`
	// A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.
	PartitionId GooglePrivacyDlpV2PartitionIdResponse `pulumi:"partitionId"`
}

// Options defining a data set within Google Cloud Datastore.
type GooglePrivacyDlpV2DatastoreOptionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DatastoreOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DatastoreOptionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DatastoreOptionsResponseOutput) ToGooglePrivacyDlpV2DatastoreOptionsResponseOutput() GooglePrivacyDlpV2DatastoreOptionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DatastoreOptionsResponseOutput) ToGooglePrivacyDlpV2DatastoreOptionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DatastoreOptionsResponseOutput {
	return o
}

// The kind to process.
func (o GooglePrivacyDlpV2DatastoreOptionsResponseOutput) Kind() GooglePrivacyDlpV2KindExpressionResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DatastoreOptionsResponse) GooglePrivacyDlpV2KindExpressionResponse {
		return v.Kind
	}).(GooglePrivacyDlpV2KindExpressionResponseOutput)
}

// A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty.
func (o GooglePrivacyDlpV2DatastoreOptionsResponseOutput) PartitionId() GooglePrivacyDlpV2PartitionIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DatastoreOptionsResponse) GooglePrivacyDlpV2PartitionIdResponse {
		return v.PartitionId
	}).(GooglePrivacyDlpV2PartitionIdResponseOutput)
}

// Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
type GooglePrivacyDlpV2DateShiftConfig struct {
	// Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	Context *GooglePrivacyDlpV2FieldId `pulumi:"context"`
	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.
	CryptoKey *GooglePrivacyDlpV2CryptoKey `pulumi:"cryptoKey"`
	// For example, -5 means shift date to at most 5 days back in the past.
	LowerBoundDays int `pulumi:"lowerBoundDays"`
	// Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
	UpperBoundDays int `pulumi:"upperBoundDays"`
}

// GooglePrivacyDlpV2DateShiftConfigInput is an input type that accepts GooglePrivacyDlpV2DateShiftConfigArgs and GooglePrivacyDlpV2DateShiftConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DateShiftConfigInput` via:
//
//	GooglePrivacyDlpV2DateShiftConfigArgs{...}
type GooglePrivacyDlpV2DateShiftConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DateShiftConfigOutput() GooglePrivacyDlpV2DateShiftConfigOutput
	ToGooglePrivacyDlpV2DateShiftConfigOutputWithContext(context.Context) GooglePrivacyDlpV2DateShiftConfigOutput
}

// Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
type GooglePrivacyDlpV2DateShiftConfigArgs struct {
	// Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	Context GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"context"`
	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.
	CryptoKey GooglePrivacyDlpV2CryptoKeyPtrInput `pulumi:"cryptoKey"`
	// For example, -5 means shift date to at most 5 days back in the past.
	LowerBoundDays pulumi.IntInput `pulumi:"lowerBoundDays"`
	// Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
	UpperBoundDays pulumi.IntInput `pulumi:"upperBoundDays"`
}

func (GooglePrivacyDlpV2DateShiftConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DateShiftConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DateShiftConfigArgs) ToGooglePrivacyDlpV2DateShiftConfigOutput() GooglePrivacyDlpV2DateShiftConfigOutput {
	return i.ToGooglePrivacyDlpV2DateShiftConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DateShiftConfigArgs) ToGooglePrivacyDlpV2DateShiftConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DateShiftConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DateShiftConfigOutput)
}

func (i GooglePrivacyDlpV2DateShiftConfigArgs) ToGooglePrivacyDlpV2DateShiftConfigPtrOutput() GooglePrivacyDlpV2DateShiftConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2DateShiftConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DateShiftConfigArgs) ToGooglePrivacyDlpV2DateShiftConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DateShiftConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DateShiftConfigOutput).ToGooglePrivacyDlpV2DateShiftConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DateShiftConfigPtrInput is an input type that accepts GooglePrivacyDlpV2DateShiftConfigArgs, GooglePrivacyDlpV2DateShiftConfigPtr and GooglePrivacyDlpV2DateShiftConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DateShiftConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2DateShiftConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DateShiftConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DateShiftConfigPtrOutput() GooglePrivacyDlpV2DateShiftConfigPtrOutput
	ToGooglePrivacyDlpV2DateShiftConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DateShiftConfigPtrOutput
}

type googlePrivacyDlpV2DateShiftConfigPtrType GooglePrivacyDlpV2DateShiftConfigArgs

func GooglePrivacyDlpV2DateShiftConfigPtr(v *GooglePrivacyDlpV2DateShiftConfigArgs) GooglePrivacyDlpV2DateShiftConfigPtrInput {
	return (*googlePrivacyDlpV2DateShiftConfigPtrType)(v)
}

func (*googlePrivacyDlpV2DateShiftConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DateShiftConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DateShiftConfigPtrType) ToGooglePrivacyDlpV2DateShiftConfigPtrOutput() GooglePrivacyDlpV2DateShiftConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2DateShiftConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DateShiftConfigPtrType) ToGooglePrivacyDlpV2DateShiftConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DateShiftConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DateShiftConfigPtrOutput)
}

// Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
type GooglePrivacyDlpV2DateShiftConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DateShiftConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DateShiftConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DateShiftConfigOutput) ToGooglePrivacyDlpV2DateShiftConfigOutput() GooglePrivacyDlpV2DateShiftConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2DateShiftConfigOutput) ToGooglePrivacyDlpV2DateShiftConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DateShiftConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2DateShiftConfigOutput) ToGooglePrivacyDlpV2DateShiftConfigPtrOutput() GooglePrivacyDlpV2DateShiftConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2DateShiftConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DateShiftConfigOutput) ToGooglePrivacyDlpV2DateShiftConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DateShiftConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DateShiftConfig) *GooglePrivacyDlpV2DateShiftConfig {
		return &v
	}).(GooglePrivacyDlpV2DateShiftConfigPtrOutput)
}

// Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.
func (o GooglePrivacyDlpV2DateShiftConfigOutput) Context() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DateShiftConfig) *GooglePrivacyDlpV2FieldId { return v.Context }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.
func (o GooglePrivacyDlpV2DateShiftConfigOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DateShiftConfig) *GooglePrivacyDlpV2CryptoKey { return v.CryptoKey }).(GooglePrivacyDlpV2CryptoKeyPtrOutput)
}

// For example, -5 means shift date to at most 5 days back in the past.
func (o GooglePrivacyDlpV2DateShiftConfigOutput) LowerBoundDays() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DateShiftConfig) int { return v.LowerBoundDays }).(pulumi.IntOutput)
}

// Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
func (o GooglePrivacyDlpV2DateShiftConfigOutput) UpperBoundDays() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DateShiftConfig) int { return v.UpperBoundDays }).(pulumi.IntOutput)
}

type GooglePrivacyDlpV2DateShiftConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DateShiftConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DateShiftConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DateShiftConfigPtrOutput) ToGooglePrivacyDlpV2DateShiftConfigPtrOutput() GooglePrivacyDlpV2DateShiftConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DateShiftConfigPtrOutput) ToGooglePrivacyDlpV2DateShiftConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DateShiftConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DateShiftConfigPtrOutput) Elem() GooglePrivacyDlpV2DateShiftConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DateShiftConfig) GooglePrivacyDlpV2DateShiftConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DateShiftConfig
		return ret
	}).(GooglePrivacyDlpV2DateShiftConfigOutput)
}

// Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.
func (o GooglePrivacyDlpV2DateShiftConfigPtrOutput) Context() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DateShiftConfig) *GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.Context
	}).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.
func (o GooglePrivacyDlpV2DateShiftConfigPtrOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DateShiftConfig) *GooglePrivacyDlpV2CryptoKey {
		if v == nil {
			return nil
		}
		return v.CryptoKey
	}).(GooglePrivacyDlpV2CryptoKeyPtrOutput)
}

// For example, -5 means shift date to at most 5 days back in the past.
func (o GooglePrivacyDlpV2DateShiftConfigPtrOutput) LowerBoundDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DateShiftConfig) *int {
		if v == nil {
			return nil
		}
		return &v.LowerBoundDays
	}).(pulumi.IntPtrOutput)
}

// Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
func (o GooglePrivacyDlpV2DateShiftConfigPtrOutput) UpperBoundDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DateShiftConfig) *int {
		if v == nil {
			return nil
		}
		return &v.UpperBoundDays
	}).(pulumi.IntPtrOutput)
}

// Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
type GooglePrivacyDlpV2DateShiftConfigResponse struct {
	// Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.
	Context GooglePrivacyDlpV2FieldIdResponse `pulumi:"context"`
	// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.
	CryptoKey GooglePrivacyDlpV2CryptoKeyResponse `pulumi:"cryptoKey"`
	// For example, -5 means shift date to at most 5 days back in the past.
	LowerBoundDays int `pulumi:"lowerBoundDays"`
	// Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
	UpperBoundDays int `pulumi:"upperBoundDays"`
}

// Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting to learn more.
type GooglePrivacyDlpV2DateShiftConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DateShiftConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DateShiftConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DateShiftConfigResponseOutput) ToGooglePrivacyDlpV2DateShiftConfigResponseOutput() GooglePrivacyDlpV2DateShiftConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DateShiftConfigResponseOutput) ToGooglePrivacyDlpV2DateShiftConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DateShiftConfigResponseOutput {
	return o
}

// Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.
func (o GooglePrivacyDlpV2DateShiftConfigResponseOutput) Context() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DateShiftConfigResponse) GooglePrivacyDlpV2FieldIdResponse { return v.Context }).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.
func (o GooglePrivacyDlpV2DateShiftConfigResponseOutput) CryptoKey() GooglePrivacyDlpV2CryptoKeyResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DateShiftConfigResponse) GooglePrivacyDlpV2CryptoKeyResponse {
		return v.CryptoKey
	}).(GooglePrivacyDlpV2CryptoKeyResponseOutput)
}

// For example, -5 means shift date to at most 5 days back in the past.
func (o GooglePrivacyDlpV2DateShiftConfigResponseOutput) LowerBoundDays() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DateShiftConfigResponse) int { return v.LowerBoundDays }).(pulumi.IntOutput)
}

// Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
func (o GooglePrivacyDlpV2DateShiftConfigResponseOutput) UpperBoundDays() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DateShiftConfigResponse) int { return v.UpperBoundDays }).(pulumi.IntOutput)
}

// Create a de-identified copy of the requested table or files. A TransformationDetail will be created for each transformation. If any rows in BigQuery are skipped during de-identification (transformation errors or row size exceeds BigQuery insert API limits) they are placed in the failure output table. If the original row exceeds the BigQuery insert API limit it will be truncated when written to the failure output table. The failure output table can be set in the action.deidentify.output.big_query_output.deidentified_failure_output_table field, if no table is set, a table will be automatically created in the same project and dataset as the original table. Compatible with: Inspect
type GooglePrivacyDlpV2Deidentify struct {
	// User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket
	CloudStorageOutput string `pulumi:"cloudStorageOutput"`
	// List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.
	FileTypesToTransform []GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem `pulumi:"fileTypesToTransform"`
	// User specified deidentify templates and configs for structured, unstructured, and image files.
	TransformationConfig *GooglePrivacyDlpV2TransformationConfig `pulumi:"transformationConfig"`
	// Config for storing transformation details. This is separate from the de-identified content, and contains metadata about the successful transformations and/or failures that occurred while de-identifying. This needs to be set in order for users to access information about the status of each transformation (see TransformationDetails message for more information about what is noted).
	TransformationDetailsStorageConfig *GooglePrivacyDlpV2TransformationDetailsStorageConfig `pulumi:"transformationDetailsStorageConfig"`
}

// GooglePrivacyDlpV2DeidentifyInput is an input type that accepts GooglePrivacyDlpV2DeidentifyArgs and GooglePrivacyDlpV2DeidentifyOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DeidentifyInput` via:
//
//	GooglePrivacyDlpV2DeidentifyArgs{...}
type GooglePrivacyDlpV2DeidentifyInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DeidentifyOutput() GooglePrivacyDlpV2DeidentifyOutput
	ToGooglePrivacyDlpV2DeidentifyOutputWithContext(context.Context) GooglePrivacyDlpV2DeidentifyOutput
}

// Create a de-identified copy of the requested table or files. A TransformationDetail will be created for each transformation. If any rows in BigQuery are skipped during de-identification (transformation errors or row size exceeds BigQuery insert API limits) they are placed in the failure output table. If the original row exceeds the BigQuery insert API limit it will be truncated when written to the failure output table. The failure output table can be set in the action.deidentify.output.big_query_output.deidentified_failure_output_table field, if no table is set, a table will be automatically created in the same project and dataset as the original table. Compatible with: Inspect
type GooglePrivacyDlpV2DeidentifyArgs struct {
	// User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket
	CloudStorageOutput pulumi.StringInput `pulumi:"cloudStorageOutput"`
	// List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.
	FileTypesToTransform GooglePrivacyDlpV2DeidentifyFileTypesToTransformItemArrayInput `pulumi:"fileTypesToTransform"`
	// User specified deidentify templates and configs for structured, unstructured, and image files.
	TransformationConfig GooglePrivacyDlpV2TransformationConfigPtrInput `pulumi:"transformationConfig"`
	// Config for storing transformation details. This is separate from the de-identified content, and contains metadata about the successful transformations and/or failures that occurred while de-identifying. This needs to be set in order for users to access information about the status of each transformation (see TransformationDetails message for more information about what is noted).
	TransformationDetailsStorageConfig GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrInput `pulumi:"transformationDetailsStorageConfig"`
}

func (GooglePrivacyDlpV2DeidentifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Deidentify)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DeidentifyArgs) ToGooglePrivacyDlpV2DeidentifyOutput() GooglePrivacyDlpV2DeidentifyOutput {
	return i.ToGooglePrivacyDlpV2DeidentifyOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DeidentifyArgs) ToGooglePrivacyDlpV2DeidentifyOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DeidentifyOutput)
}

func (i GooglePrivacyDlpV2DeidentifyArgs) ToGooglePrivacyDlpV2DeidentifyPtrOutput() GooglePrivacyDlpV2DeidentifyPtrOutput {
	return i.ToGooglePrivacyDlpV2DeidentifyPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DeidentifyArgs) ToGooglePrivacyDlpV2DeidentifyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DeidentifyOutput).ToGooglePrivacyDlpV2DeidentifyPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DeidentifyPtrInput is an input type that accepts GooglePrivacyDlpV2DeidentifyArgs, GooglePrivacyDlpV2DeidentifyPtr and GooglePrivacyDlpV2DeidentifyPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DeidentifyPtrInput` via:
//
//	        GooglePrivacyDlpV2DeidentifyArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DeidentifyPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DeidentifyPtrOutput() GooglePrivacyDlpV2DeidentifyPtrOutput
	ToGooglePrivacyDlpV2DeidentifyPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DeidentifyPtrOutput
}

type googlePrivacyDlpV2DeidentifyPtrType GooglePrivacyDlpV2DeidentifyArgs

func GooglePrivacyDlpV2DeidentifyPtr(v *GooglePrivacyDlpV2DeidentifyArgs) GooglePrivacyDlpV2DeidentifyPtrInput {
	return (*googlePrivacyDlpV2DeidentifyPtrType)(v)
}

func (*googlePrivacyDlpV2DeidentifyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Deidentify)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DeidentifyPtrType) ToGooglePrivacyDlpV2DeidentifyPtrOutput() GooglePrivacyDlpV2DeidentifyPtrOutput {
	return i.ToGooglePrivacyDlpV2DeidentifyPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DeidentifyPtrType) ToGooglePrivacyDlpV2DeidentifyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DeidentifyPtrOutput)
}

// Create a de-identified copy of the requested table or files. A TransformationDetail will be created for each transformation. If any rows in BigQuery are skipped during de-identification (transformation errors or row size exceeds BigQuery insert API limits) they are placed in the failure output table. If the original row exceeds the BigQuery insert API limit it will be truncated when written to the failure output table. The failure output table can be set in the action.deidentify.output.big_query_output.deidentified_failure_output_table field, if no table is set, a table will be automatically created in the same project and dataset as the original table. Compatible with: Inspect
type GooglePrivacyDlpV2DeidentifyOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeidentifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Deidentify)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeidentifyOutput) ToGooglePrivacyDlpV2DeidentifyOutput() GooglePrivacyDlpV2DeidentifyOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyOutput) ToGooglePrivacyDlpV2DeidentifyOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyOutput) ToGooglePrivacyDlpV2DeidentifyPtrOutput() GooglePrivacyDlpV2DeidentifyPtrOutput {
	return o.ToGooglePrivacyDlpV2DeidentifyPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DeidentifyOutput) ToGooglePrivacyDlpV2DeidentifyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Deidentify) *GooglePrivacyDlpV2Deidentify {
		return &v
	}).(GooglePrivacyDlpV2DeidentifyPtrOutput)
}

// User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket
func (o GooglePrivacyDlpV2DeidentifyOutput) CloudStorageOutput() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Deidentify) string { return v.CloudStorageOutput }).(pulumi.StringOutput)
}

// List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.
func (o GooglePrivacyDlpV2DeidentifyOutput) FileTypesToTransform() GooglePrivacyDlpV2DeidentifyFileTypesToTransformItemArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Deidentify) []GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem {
		return v.FileTypesToTransform
	}).(GooglePrivacyDlpV2DeidentifyFileTypesToTransformItemArrayOutput)
}

// User specified deidentify templates and configs for structured, unstructured, and image files.
func (o GooglePrivacyDlpV2DeidentifyOutput) TransformationConfig() GooglePrivacyDlpV2TransformationConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Deidentify) *GooglePrivacyDlpV2TransformationConfig {
		return v.TransformationConfig
	}).(GooglePrivacyDlpV2TransformationConfigPtrOutput)
}

// Config for storing transformation details. This is separate from the de-identified content, and contains metadata about the successful transformations and/or failures that occurred while de-identifying. This needs to be set in order for users to access information about the status of each transformation (see TransformationDetails message for more information about what is noted).
func (o GooglePrivacyDlpV2DeidentifyOutput) TransformationDetailsStorageConfig() GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Deidentify) *GooglePrivacyDlpV2TransformationDetailsStorageConfig {
		return v.TransformationDetailsStorageConfig
	}).(GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput)
}

type GooglePrivacyDlpV2DeidentifyPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeidentifyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Deidentify)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeidentifyPtrOutput) ToGooglePrivacyDlpV2DeidentifyPtrOutput() GooglePrivacyDlpV2DeidentifyPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyPtrOutput) ToGooglePrivacyDlpV2DeidentifyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyPtrOutput) Elem() GooglePrivacyDlpV2DeidentifyOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Deidentify) GooglePrivacyDlpV2Deidentify {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Deidentify
		return ret
	}).(GooglePrivacyDlpV2DeidentifyOutput)
}

// User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket
func (o GooglePrivacyDlpV2DeidentifyPtrOutput) CloudStorageOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Deidentify) *string {
		if v == nil {
			return nil
		}
		return &v.CloudStorageOutput
	}).(pulumi.StringPtrOutput)
}

// List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.
func (o GooglePrivacyDlpV2DeidentifyPtrOutput) FileTypesToTransform() GooglePrivacyDlpV2DeidentifyFileTypesToTransformItemArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Deidentify) []GooglePrivacyDlpV2DeidentifyFileTypesToTransformItem {
		if v == nil {
			return nil
		}
		return v.FileTypesToTransform
	}).(GooglePrivacyDlpV2DeidentifyFileTypesToTransformItemArrayOutput)
}

// User specified deidentify templates and configs for structured, unstructured, and image files.
func (o GooglePrivacyDlpV2DeidentifyPtrOutput) TransformationConfig() GooglePrivacyDlpV2TransformationConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Deidentify) *GooglePrivacyDlpV2TransformationConfig {
		if v == nil {
			return nil
		}
		return v.TransformationConfig
	}).(GooglePrivacyDlpV2TransformationConfigPtrOutput)
}

// Config for storing transformation details. This is separate from the de-identified content, and contains metadata about the successful transformations and/or failures that occurred while de-identifying. This needs to be set in order for users to access information about the status of each transformation (see TransformationDetails message for more information about what is noted).
func (o GooglePrivacyDlpV2DeidentifyPtrOutput) TransformationDetailsStorageConfig() GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Deidentify) *GooglePrivacyDlpV2TransformationDetailsStorageConfig {
		if v == nil {
			return nil
		}
		return v.TransformationDetailsStorageConfig
	}).(GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput)
}

// The configuration that controls how the data will change.
type GooglePrivacyDlpV2DeidentifyConfig struct {
	// Treat the dataset as an image and redact.
	ImageTransformations *GooglePrivacyDlpV2ImageTransformations `pulumi:"imageTransformations"`
	// Treat the dataset as free-form text and apply the same free text transformation everywhere.
	InfoTypeTransformations *GooglePrivacyDlpV2InfoTypeTransformations `pulumi:"infoTypeTransformations"`
	// Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
	RecordTransformations *GooglePrivacyDlpV2RecordTransformations `pulumi:"recordTransformations"`
	// Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
	TransformationErrorHandling *GooglePrivacyDlpV2TransformationErrorHandling `pulumi:"transformationErrorHandling"`
}

// GooglePrivacyDlpV2DeidentifyConfigInput is an input type that accepts GooglePrivacyDlpV2DeidentifyConfigArgs and GooglePrivacyDlpV2DeidentifyConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DeidentifyConfigInput` via:
//
//	GooglePrivacyDlpV2DeidentifyConfigArgs{...}
type GooglePrivacyDlpV2DeidentifyConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DeidentifyConfigOutput() GooglePrivacyDlpV2DeidentifyConfigOutput
	ToGooglePrivacyDlpV2DeidentifyConfigOutputWithContext(context.Context) GooglePrivacyDlpV2DeidentifyConfigOutput
}

// The configuration that controls how the data will change.
type GooglePrivacyDlpV2DeidentifyConfigArgs struct {
	// Treat the dataset as an image and redact.
	ImageTransformations GooglePrivacyDlpV2ImageTransformationsPtrInput `pulumi:"imageTransformations"`
	// Treat the dataset as free-form text and apply the same free text transformation everywhere.
	InfoTypeTransformations GooglePrivacyDlpV2InfoTypeTransformationsPtrInput `pulumi:"infoTypeTransformations"`
	// Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
	RecordTransformations GooglePrivacyDlpV2RecordTransformationsPtrInput `pulumi:"recordTransformations"`
	// Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
	TransformationErrorHandling GooglePrivacyDlpV2TransformationErrorHandlingPtrInput `pulumi:"transformationErrorHandling"`
}

func (GooglePrivacyDlpV2DeidentifyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DeidentifyConfigArgs) ToGooglePrivacyDlpV2DeidentifyConfigOutput() GooglePrivacyDlpV2DeidentifyConfigOutput {
	return i.ToGooglePrivacyDlpV2DeidentifyConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DeidentifyConfigArgs) ToGooglePrivacyDlpV2DeidentifyConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DeidentifyConfigOutput)
}

func (i GooglePrivacyDlpV2DeidentifyConfigArgs) ToGooglePrivacyDlpV2DeidentifyConfigPtrOutput() GooglePrivacyDlpV2DeidentifyConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2DeidentifyConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DeidentifyConfigArgs) ToGooglePrivacyDlpV2DeidentifyConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DeidentifyConfigOutput).ToGooglePrivacyDlpV2DeidentifyConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DeidentifyConfigPtrInput is an input type that accepts GooglePrivacyDlpV2DeidentifyConfigArgs, GooglePrivacyDlpV2DeidentifyConfigPtr and GooglePrivacyDlpV2DeidentifyConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DeidentifyConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2DeidentifyConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DeidentifyConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DeidentifyConfigPtrOutput() GooglePrivacyDlpV2DeidentifyConfigPtrOutput
	ToGooglePrivacyDlpV2DeidentifyConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DeidentifyConfigPtrOutput
}

type googlePrivacyDlpV2DeidentifyConfigPtrType GooglePrivacyDlpV2DeidentifyConfigArgs

func GooglePrivacyDlpV2DeidentifyConfigPtr(v *GooglePrivacyDlpV2DeidentifyConfigArgs) GooglePrivacyDlpV2DeidentifyConfigPtrInput {
	return (*googlePrivacyDlpV2DeidentifyConfigPtrType)(v)
}

func (*googlePrivacyDlpV2DeidentifyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DeidentifyConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DeidentifyConfigPtrType) ToGooglePrivacyDlpV2DeidentifyConfigPtrOutput() GooglePrivacyDlpV2DeidentifyConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2DeidentifyConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DeidentifyConfigPtrType) ToGooglePrivacyDlpV2DeidentifyConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DeidentifyConfigPtrOutput)
}

// The configuration that controls how the data will change.
type GooglePrivacyDlpV2DeidentifyConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeidentifyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeidentifyConfigOutput) ToGooglePrivacyDlpV2DeidentifyConfigOutput() GooglePrivacyDlpV2DeidentifyConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyConfigOutput) ToGooglePrivacyDlpV2DeidentifyConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyConfigOutput) ToGooglePrivacyDlpV2DeidentifyConfigPtrOutput() GooglePrivacyDlpV2DeidentifyConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2DeidentifyConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DeidentifyConfigOutput) ToGooglePrivacyDlpV2DeidentifyConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DeidentifyConfig) *GooglePrivacyDlpV2DeidentifyConfig {
		return &v
	}).(GooglePrivacyDlpV2DeidentifyConfigPtrOutput)
}

// Treat the dataset as an image and redact.
func (o GooglePrivacyDlpV2DeidentifyConfigOutput) ImageTransformations() GooglePrivacyDlpV2ImageTransformationsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyConfig) *GooglePrivacyDlpV2ImageTransformations {
		return v.ImageTransformations
	}).(GooglePrivacyDlpV2ImageTransformationsPtrOutput)
}

// Treat the dataset as free-form text and apply the same free text transformation everywhere.
func (o GooglePrivacyDlpV2DeidentifyConfigOutput) InfoTypeTransformations() GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyConfig) *GooglePrivacyDlpV2InfoTypeTransformations {
		return v.InfoTypeTransformations
	}).(GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput)
}

// Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
func (o GooglePrivacyDlpV2DeidentifyConfigOutput) RecordTransformations() GooglePrivacyDlpV2RecordTransformationsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyConfig) *GooglePrivacyDlpV2RecordTransformations {
		return v.RecordTransformations
	}).(GooglePrivacyDlpV2RecordTransformationsPtrOutput)
}

// Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
func (o GooglePrivacyDlpV2DeidentifyConfigOutput) TransformationErrorHandling() GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyConfig) *GooglePrivacyDlpV2TransformationErrorHandling {
		return v.TransformationErrorHandling
	}).(GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput)
}

type GooglePrivacyDlpV2DeidentifyConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeidentifyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DeidentifyConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeidentifyConfigPtrOutput) ToGooglePrivacyDlpV2DeidentifyConfigPtrOutput() GooglePrivacyDlpV2DeidentifyConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyConfigPtrOutput) ToGooglePrivacyDlpV2DeidentifyConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyConfigPtrOutput) Elem() GooglePrivacyDlpV2DeidentifyConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DeidentifyConfig) GooglePrivacyDlpV2DeidentifyConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DeidentifyConfig
		return ret
	}).(GooglePrivacyDlpV2DeidentifyConfigOutput)
}

// Treat the dataset as an image and redact.
func (o GooglePrivacyDlpV2DeidentifyConfigPtrOutput) ImageTransformations() GooglePrivacyDlpV2ImageTransformationsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DeidentifyConfig) *GooglePrivacyDlpV2ImageTransformations {
		if v == nil {
			return nil
		}
		return v.ImageTransformations
	}).(GooglePrivacyDlpV2ImageTransformationsPtrOutput)
}

// Treat the dataset as free-form text and apply the same free text transformation everywhere.
func (o GooglePrivacyDlpV2DeidentifyConfigPtrOutput) InfoTypeTransformations() GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DeidentifyConfig) *GooglePrivacyDlpV2InfoTypeTransformations {
		if v == nil {
			return nil
		}
		return v.InfoTypeTransformations
	}).(GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput)
}

// Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
func (o GooglePrivacyDlpV2DeidentifyConfigPtrOutput) RecordTransformations() GooglePrivacyDlpV2RecordTransformationsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DeidentifyConfig) *GooglePrivacyDlpV2RecordTransformations {
		if v == nil {
			return nil
		}
		return v.RecordTransformations
	}).(GooglePrivacyDlpV2RecordTransformationsPtrOutput)
}

// Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
func (o GooglePrivacyDlpV2DeidentifyConfigPtrOutput) TransformationErrorHandling() GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DeidentifyConfig) *GooglePrivacyDlpV2TransformationErrorHandling {
		if v == nil {
			return nil
		}
		return v.TransformationErrorHandling
	}).(GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput)
}

// The configuration that controls how the data will change.
type GooglePrivacyDlpV2DeidentifyConfigResponse struct {
	// Treat the dataset as an image and redact.
	ImageTransformations GooglePrivacyDlpV2ImageTransformationsResponse `pulumi:"imageTransformations"`
	// Treat the dataset as free-form text and apply the same free text transformation everywhere.
	InfoTypeTransformations GooglePrivacyDlpV2InfoTypeTransformationsResponse `pulumi:"infoTypeTransformations"`
	// Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
	RecordTransformations GooglePrivacyDlpV2RecordTransformationsResponse `pulumi:"recordTransformations"`
	// Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
	TransformationErrorHandling GooglePrivacyDlpV2TransformationErrorHandlingResponse `pulumi:"transformationErrorHandling"`
}

// The configuration that controls how the data will change.
type GooglePrivacyDlpV2DeidentifyConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeidentifyConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeidentifyConfigResponseOutput) ToGooglePrivacyDlpV2DeidentifyConfigResponseOutput() GooglePrivacyDlpV2DeidentifyConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyConfigResponseOutput) ToGooglePrivacyDlpV2DeidentifyConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyConfigResponseOutput {
	return o
}

// Treat the dataset as an image and redact.
func (o GooglePrivacyDlpV2DeidentifyConfigResponseOutput) ImageTransformations() GooglePrivacyDlpV2ImageTransformationsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyConfigResponse) GooglePrivacyDlpV2ImageTransformationsResponse {
		return v.ImageTransformations
	}).(GooglePrivacyDlpV2ImageTransformationsResponseOutput)
}

// Treat the dataset as free-form text and apply the same free text transformation everywhere.
func (o GooglePrivacyDlpV2DeidentifyConfigResponseOutput) InfoTypeTransformations() GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyConfigResponse) GooglePrivacyDlpV2InfoTypeTransformationsResponse {
		return v.InfoTypeTransformations
	}).(GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput)
}

// Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.
func (o GooglePrivacyDlpV2DeidentifyConfigResponseOutput) RecordTransformations() GooglePrivacyDlpV2RecordTransformationsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyConfigResponse) GooglePrivacyDlpV2RecordTransformationsResponse {
		return v.RecordTransformations
	}).(GooglePrivacyDlpV2RecordTransformationsResponseOutput)
}

// Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.
func (o GooglePrivacyDlpV2DeidentifyConfigResponseOutput) TransformationErrorHandling() GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyConfigResponse) GooglePrivacyDlpV2TransformationErrorHandlingResponse {
		return v.TransformationErrorHandling
	}).(GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput)
}

// The results of a Deidentify action from an inspect job.
type GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponse struct {
	// Stats about the de-identification operation.
	DeidentifyStats GooglePrivacyDlpV2DeidentifyDataSourceStatsResponse `pulumi:"deidentifyStats"`
	// De-identification config used for the request.
	RequestedOptions GooglePrivacyDlpV2RequestedDeidentifyOptionsResponse `pulumi:"requestedOptions"`
}

// The results of a Deidentify action from an inspect job.
type GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput) ToGooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput() GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput) ToGooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput {
	return o
}

// Stats about the de-identification operation.
func (o GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput) DeidentifyStats() GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponse) GooglePrivacyDlpV2DeidentifyDataSourceStatsResponse {
		return v.DeidentifyStats
	}).(GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput)
}

// De-identification config used for the request.
func (o GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput) RequestedOptions() GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponse) GooglePrivacyDlpV2RequestedDeidentifyOptionsResponse {
		return v.RequestedOptions
	}).(GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput)
}

// Summary of what was modified during a transformation.
type GooglePrivacyDlpV2DeidentifyDataSourceStatsResponse struct {
	// Number of successfully applied transformations.
	TransformationCount string `pulumi:"transformationCount"`
	// Number of errors encountered while trying to apply transformations.
	TransformationErrorCount string `pulumi:"transformationErrorCount"`
	// Total size in bytes that were transformed in some way.
	TransformedBytes string `pulumi:"transformedBytes"`
}

// Summary of what was modified during a transformation.
type GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyDataSourceStatsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput) ToGooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput() GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput) ToGooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput {
	return o
}

// Number of successfully applied transformations.
func (o GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput) TransformationCount() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyDataSourceStatsResponse) string { return v.TransformationCount }).(pulumi.StringOutput)
}

// Number of errors encountered while trying to apply transformations.
func (o GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput) TransformationErrorCount() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyDataSourceStatsResponse) string { return v.TransformationErrorCount }).(pulumi.StringOutput)
}

// Total size in bytes that were transformed in some way.
func (o GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput) TransformedBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyDataSourceStatsResponse) string { return v.TransformedBytes }).(pulumi.StringOutput)
}

// Create a de-identified copy of the requested table or files. A TransformationDetail will be created for each transformation. If any rows in BigQuery are skipped during de-identification (transformation errors or row size exceeds BigQuery insert API limits) they are placed in the failure output table. If the original row exceeds the BigQuery insert API limit it will be truncated when written to the failure output table. The failure output table can be set in the action.deidentify.output.big_query_output.deidentified_failure_output_table field, if no table is set, a table will be automatically created in the same project and dataset as the original table. Compatible with: Inspect
type GooglePrivacyDlpV2DeidentifyResponse struct {
	// User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket
	CloudStorageOutput string `pulumi:"cloudStorageOutput"`
	// List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.
	FileTypesToTransform []string `pulumi:"fileTypesToTransform"`
	// User specified deidentify templates and configs for structured, unstructured, and image files.
	TransformationConfig GooglePrivacyDlpV2TransformationConfigResponse `pulumi:"transformationConfig"`
	// Config for storing transformation details. This is separate from the de-identified content, and contains metadata about the successful transformations and/or failures that occurred while de-identifying. This needs to be set in order for users to access information about the status of each transformation (see TransformationDetails message for more information about what is noted).
	TransformationDetailsStorageConfig GooglePrivacyDlpV2TransformationDetailsStorageConfigResponse `pulumi:"transformationDetailsStorageConfig"`
}

// Create a de-identified copy of the requested table or files. A TransformationDetail will be created for each transformation. If any rows in BigQuery are skipped during de-identification (transformation errors or row size exceeds BigQuery insert API limits) they are placed in the failure output table. If the original row exceeds the BigQuery insert API limit it will be truncated when written to the failure output table. The failure output table can be set in the action.deidentify.output.big_query_output.deidentified_failure_output_table field, if no table is set, a table will be automatically created in the same project and dataset as the original table. Compatible with: Inspect
type GooglePrivacyDlpV2DeidentifyResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeidentifyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeidentifyResponseOutput) ToGooglePrivacyDlpV2DeidentifyResponseOutput() GooglePrivacyDlpV2DeidentifyResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyResponseOutput) ToGooglePrivacyDlpV2DeidentifyResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyResponseOutput {
	return o
}

// User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket
func (o GooglePrivacyDlpV2DeidentifyResponseOutput) CloudStorageOutput() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyResponse) string { return v.CloudStorageOutput }).(pulumi.StringOutput)
}

// List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.
func (o GooglePrivacyDlpV2DeidentifyResponseOutput) FileTypesToTransform() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyResponse) []string { return v.FileTypesToTransform }).(pulumi.StringArrayOutput)
}

// User specified deidentify templates and configs for structured, unstructured, and image files.
func (o GooglePrivacyDlpV2DeidentifyResponseOutput) TransformationConfig() GooglePrivacyDlpV2TransformationConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyResponse) GooglePrivacyDlpV2TransformationConfigResponse {
		return v.TransformationConfig
	}).(GooglePrivacyDlpV2TransformationConfigResponseOutput)
}

// Config for storing transformation details. This is separate from the de-identified content, and contains metadata about the successful transformations and/or failures that occurred while de-identifying. This needs to be set in order for users to access information about the status of each transformation (see TransformationDetails message for more information about what is noted).
func (o GooglePrivacyDlpV2DeidentifyResponseOutput) TransformationDetailsStorageConfig() GooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyResponse) GooglePrivacyDlpV2TransformationDetailsStorageConfigResponse {
		return v.TransformationDetailsStorageConfig
	}).(GooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput)
}

// DeidentifyTemplates contains instructions on how to de-identify content. See https://cloud.google.com/dlp/docs/concepts-templates to learn more.
type GooglePrivacyDlpV2DeidentifyTemplateResponse struct {
	// The creation timestamp of an inspectTemplate.
	CreateTime string `pulumi:"createTime"`
	// The core content of the template.
	DeidentifyConfig GooglePrivacyDlpV2DeidentifyConfigResponse `pulumi:"deidentifyConfig"`
	// Short description (max 256 chars).
	Description string `pulumi:"description"`
	// Display name (max 256 chars).
	DisplayName string `pulumi:"displayName"`
	// The template name. The template will have one of the following formats: `projects/PROJECT_ID/deidentifyTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/deidentifyTemplates/TEMPLATE_ID`
	Name string `pulumi:"name"`
	// The last update timestamp of an inspectTemplate.
	UpdateTime string `pulumi:"updateTime"`
}

// DeidentifyTemplates contains instructions on how to de-identify content. See https://cloud.google.com/dlp/docs/concepts-templates to learn more.
type GooglePrivacyDlpV2DeidentifyTemplateResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeidentifyTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyTemplateResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeidentifyTemplateResponseOutput) ToGooglePrivacyDlpV2DeidentifyTemplateResponseOutput() GooglePrivacyDlpV2DeidentifyTemplateResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DeidentifyTemplateResponseOutput) ToGooglePrivacyDlpV2DeidentifyTemplateResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeidentifyTemplateResponseOutput {
	return o
}

// The creation timestamp of an inspectTemplate.
func (o GooglePrivacyDlpV2DeidentifyTemplateResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyTemplateResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The core content of the template.
func (o GooglePrivacyDlpV2DeidentifyTemplateResponseOutput) DeidentifyConfig() GooglePrivacyDlpV2DeidentifyConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyTemplateResponse) GooglePrivacyDlpV2DeidentifyConfigResponse {
		return v.DeidentifyConfig
	}).(GooglePrivacyDlpV2DeidentifyConfigResponseOutput)
}

// Short description (max 256 chars).
func (o GooglePrivacyDlpV2DeidentifyTemplateResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyTemplateResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Display name (max 256 chars).
func (o GooglePrivacyDlpV2DeidentifyTemplateResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyTemplateResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The template name. The template will have one of the following formats: `projects/PROJECT_ID/deidentifyTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/deidentifyTemplates/TEMPLATE_ID`
func (o GooglePrivacyDlpV2DeidentifyTemplateResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyTemplateResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The last update timestamp of an inspectTemplate.
func (o GooglePrivacyDlpV2DeidentifyTemplateResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeidentifyTemplateResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// δ-presence metric, used to estimate how likely it is for an attacker to figure out that one given individual appears in a de-identified dataset. Similarly to the k-map metric, we cannot compute δ-presence exactly without knowing the attack dataset, so we use a statistical model instead.
type GooglePrivacyDlpV2DeltaPresenceEstimationConfig struct {
	// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers field must appear in exactly one field of one auxiliary table.
	AuxiliaryTables []GooglePrivacyDlpV2StatisticalTable `pulumi:"auxiliaryTables"`
	// Fields considered to be quasi-identifiers. No two fields can have the same tag.
	QuasiIds []GooglePrivacyDlpV2QuasiId `pulumi:"quasiIds"`
	// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
	RegionCode *string `pulumi:"regionCode"`
}

// GooglePrivacyDlpV2DeltaPresenceEstimationConfigInput is an input type that accepts GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs and GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DeltaPresenceEstimationConfigInput` via:
//
//	GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs{...}
type GooglePrivacyDlpV2DeltaPresenceEstimationConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput() GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput
	ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigOutputWithContext(context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput
}

// δ-presence metric, used to estimate how likely it is for an attacker to figure out that one given individual appears in a de-identified dataset. Similarly to the k-map metric, we cannot compute δ-presence exactly without knowing the attack dataset, so we use a statistical model instead.
type GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs struct {
	// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers field must appear in exactly one field of one auxiliary table.
	AuxiliaryTables GooglePrivacyDlpV2StatisticalTableArrayInput `pulumi:"auxiliaryTables"`
	// Fields considered to be quasi-identifiers. No two fields can have the same tag.
	QuasiIds GooglePrivacyDlpV2QuasiIdArrayInput `pulumi:"quasiIds"`
	// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
	RegionCode pulumi.StringPtrInput `pulumi:"regionCode"`
}

func (GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeltaPresenceEstimationConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput() GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput {
	return i.ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput)
}

func (i GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput() GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput).ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrInput is an input type that accepts GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs, GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtr and GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput() GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput
	ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput
}

type googlePrivacyDlpV2DeltaPresenceEstimationConfigPtrType GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs

func GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtr(v *GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs) GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrInput {
	return (*googlePrivacyDlpV2DeltaPresenceEstimationConfigPtrType)(v)
}

func (*googlePrivacyDlpV2DeltaPresenceEstimationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DeltaPresenceEstimationConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DeltaPresenceEstimationConfigPtrType) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput() GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DeltaPresenceEstimationConfigPtrType) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput)
}

// δ-presence metric, used to estimate how likely it is for an attacker to figure out that one given individual appears in a de-identified dataset. Similarly to the k-map metric, we cannot compute δ-presence exactly without knowing the attack dataset, so we use a statistical model instead.
type GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeltaPresenceEstimationConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput() GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput() GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DeltaPresenceEstimationConfig) *GooglePrivacyDlpV2DeltaPresenceEstimationConfig {
		return &v
	}).(GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput)
}

// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers field must appear in exactly one field of one auxiliary table.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput) AuxiliaryTables() GooglePrivacyDlpV2StatisticalTableArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationConfig) []GooglePrivacyDlpV2StatisticalTable {
		return v.AuxiliaryTables
	}).(GooglePrivacyDlpV2StatisticalTableArrayOutput)
}

// Fields considered to be quasi-identifiers. No two fields can have the same tag.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput) QuasiIds() GooglePrivacyDlpV2QuasiIdArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationConfig) []GooglePrivacyDlpV2QuasiId { return v.QuasiIds }).(GooglePrivacyDlpV2QuasiIdArrayOutput)
}

// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput) RegionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationConfig) *string { return v.RegionCode }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DeltaPresenceEstimationConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput() GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput) Elem() GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DeltaPresenceEstimationConfig) GooglePrivacyDlpV2DeltaPresenceEstimationConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DeltaPresenceEstimationConfig
		return ret
	}).(GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput)
}

// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers field must appear in exactly one field of one auxiliary table.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput) AuxiliaryTables() GooglePrivacyDlpV2StatisticalTableArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DeltaPresenceEstimationConfig) []GooglePrivacyDlpV2StatisticalTable {
		if v == nil {
			return nil
		}
		return v.AuxiliaryTables
	}).(GooglePrivacyDlpV2StatisticalTableArrayOutput)
}

// Fields considered to be quasi-identifiers. No two fields can have the same tag.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput) QuasiIds() GooglePrivacyDlpV2QuasiIdArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DeltaPresenceEstimationConfig) []GooglePrivacyDlpV2QuasiId {
		if v == nil {
			return nil
		}
		return v.QuasiIds
	}).(GooglePrivacyDlpV2QuasiIdArrayOutput)
}

// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput) RegionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DeltaPresenceEstimationConfig) *string {
		if v == nil {
			return nil
		}
		return v.RegionCode
	}).(pulumi.StringPtrOutput)
}

// δ-presence metric, used to estimate how likely it is for an attacker to figure out that one given individual appears in a de-identified dataset. Similarly to the k-map metric, we cannot compute δ-presence exactly without knowing the attack dataset, so we use a statistical model instead.
type GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponse struct {
	// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers field must appear in exactly one field of one auxiliary table.
	AuxiliaryTables []GooglePrivacyDlpV2StatisticalTableResponse `pulumi:"auxiliaryTables"`
	// Fields considered to be quasi-identifiers. No two fields can have the same tag.
	QuasiIds []GooglePrivacyDlpV2QuasiIdResponse `pulumi:"quasiIds"`
	// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
	RegionCode string `pulumi:"regionCode"`
}

// δ-presence metric, used to estimate how likely it is for an attacker to figure out that one given individual appears in a de-identified dataset. Similarly to the k-map metric, we cannot compute δ-presence exactly without knowing the attack dataset, so we use a statistical model instead.
type GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput() GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput {
	return o
}

// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers field must appear in exactly one field of one auxiliary table.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput) AuxiliaryTables() GooglePrivacyDlpV2StatisticalTableResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponse) []GooglePrivacyDlpV2StatisticalTableResponse {
		return v.AuxiliaryTables
	}).(GooglePrivacyDlpV2StatisticalTableResponseArrayOutput)
}

// Fields considered to be quasi-identifiers. No two fields can have the same tag.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput) QuasiIds() GooglePrivacyDlpV2QuasiIdResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponse) []GooglePrivacyDlpV2QuasiIdResponse {
		return v.QuasiIds
	}).(GooglePrivacyDlpV2QuasiIdResponseArrayOutput)
}

// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput) RegionCode() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponse) string { return v.RegionCode }).(pulumi.StringOutput)
}

// A DeltaPresenceEstimationHistogramBucket message with the following values: min_probability: 0.1 max_probability: 0.2 frequency: 42 means that there are 42 records for which δ is in [0.1, 0.2). An important particular case is when min_probability = max_probability = 1: then, every individual who shares this quasi-identifier combination is in the dataset.
type GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse struct {
	// Number of records within these probability bounds.
	BucketSize string `pulumi:"bucketSize"`
	// Total number of distinct quasi-identifier tuple values in this bucket.
	BucketValueCount string `pulumi:"bucketValueCount"`
	// Sample of quasi-identifier tuple values in this bucket. The total number of classes returned per bucket is capped at 20.
	BucketValues []GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponse `pulumi:"bucketValues"`
	// Always greater than or equal to min_probability.
	MaxProbability float64 `pulumi:"maxProbability"`
	// Between 0 and 1.
	MinProbability float64 `pulumi:"minProbability"`
}

// A DeltaPresenceEstimationHistogramBucket message with the following values: min_probability: 0.1 max_probability: 0.2 frequency: 42 means that there are 42 records for which δ is in [0.1, 0.2). An important particular case is when min_probability = max_probability = 1: then, every individual who shares this quasi-identifier combination is in the dataset.
type GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput() GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput {
	return o
}

// Number of records within these probability bounds.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput) BucketSize() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse) string { return v.BucketSize }).(pulumi.StringOutput)
}

// Total number of distinct quasi-identifier tuple values in this bucket.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput) BucketValueCount() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse) string {
		return v.BucketValueCount
	}).(pulumi.StringOutput)
}

// Sample of quasi-identifier tuple values in this bucket. The total number of classes returned per bucket is capped at 20.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput) BucketValues() GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse) []GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponse {
		return v.BucketValues
	}).(GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput)
}

// Always greater than or equal to min_probability.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput) MaxProbability() pulumi.Float64Output {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse) float64 {
		return v.MaxProbability
	}).(pulumi.Float64Output)
}

// Between 0 and 1.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput) MinProbability() pulumi.Float64Output {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse) float64 {
		return v.MinProbability
	}).(pulumi.Float64Output)
}

type GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput() GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse {
		return vs[0].([]GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput)
}

// A tuple of values for the quasi-identifier columns.
type GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponse struct {
	// The estimated probability that a given individual sharing these quasi-identifier values is in the dataset. This value, typically called δ, is the ratio between the number of records in the dataset with these quasi-identifier values, and the total number of individuals (inside *and* outside the dataset) with these quasi-identifier values. For example, if there are 15 individuals in the dataset who share the same quasi-identifier values, and an estimated 100 people in the entire population with these values, then δ is 0.15.
	EstimatedProbability float64 `pulumi:"estimatedProbability"`
	// The quasi-identifier values.
	QuasiIdsValues []GooglePrivacyDlpV2ValueResponse `pulumi:"quasiIdsValues"`
}

// A tuple of values for the quasi-identifier columns.
type GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput() GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput {
	return o
}

// The estimated probability that a given individual sharing these quasi-identifier values is in the dataset. This value, typically called δ, is the ratio between the number of records in the dataset with these quasi-identifier values, and the total number of individuals (inside *and* outside the dataset) with these quasi-identifier values. For example, if there are 15 individuals in the dataset who share the same quasi-identifier values, and an estimated 100 people in the entire population with these values, then δ is 0.15.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput) EstimatedProbability() pulumi.Float64Output {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponse) float64 {
		return v.EstimatedProbability
	}).(pulumi.Float64Output)
}

// The quasi-identifier values.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput) QuasiIdsValues() GooglePrivacyDlpV2ValueResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponse) []GooglePrivacyDlpV2ValueResponse {
		return v.QuasiIdsValues
	}).(GooglePrivacyDlpV2ValueResponseArrayOutput)
}

type GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput() GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponse {
		return vs[0].([]GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput)
}

// Result of the δ-presence computation. Note that these results are an estimation, not exact values.
type GooglePrivacyDlpV2DeltaPresenceEstimationResultResponse struct {
	// The intervals [min_probability, max_probability) do not overlap. If a value doesn't correspond to any such interval, the associated frequency is zero. For example, the following records: {min_probability: 0, max_probability: 0.1, frequency: 17} {min_probability: 0.2, max_probability: 0.3, frequency: 42} {min_probability: 0.3, max_probability: 0.4, frequency: 99} mean that there are no record with an estimated probability in [0.1, 0.2) nor larger or equal to 0.4.
	DeltaPresenceEstimationHistogram []GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse `pulumi:"deltaPresenceEstimationHistogram"`
}

// Result of the δ-presence computation. Note that these results are an estimation, not exact values.
type GooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DeltaPresenceEstimationResultResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput() GooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput) ToGooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput {
	return o
}

// The intervals [min_probability, max_probability) do not overlap. If a value doesn't correspond to any such interval, the associated frequency is zero. For example, the following records: {min_probability: 0, max_probability: 0.1, frequency: 17} {min_probability: 0.2, max_probability: 0.3, frequency: 42} {min_probability: 0.3, max_probability: 0.4, frequency: 99} mean that there are no record with an estimated probability in [0.1, 0.2) nor larger or equal to 0.4.
func (o GooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput) DeltaPresenceEstimationHistogram() GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DeltaPresenceEstimationResultResponse) []GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponse {
		return v.DeltaPresenceEstimationHistogram
	}).(GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput)
}

// Deprecated; use `InspectionRuleSet` instead. Rule for modifying a `CustomInfoType` to alter behavior under certain circumstances, depending on the specific details of the rule. Not supported for the `surrogate_type` custom infoType.
type GooglePrivacyDlpV2DetectionRule struct {
	// Hotword-based detection rule.
	HotwordRule *GooglePrivacyDlpV2HotwordRule `pulumi:"hotwordRule"`
}

// GooglePrivacyDlpV2DetectionRuleInput is an input type that accepts GooglePrivacyDlpV2DetectionRuleArgs and GooglePrivacyDlpV2DetectionRuleOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DetectionRuleInput` via:
//
//	GooglePrivacyDlpV2DetectionRuleArgs{...}
type GooglePrivacyDlpV2DetectionRuleInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DetectionRuleOutput() GooglePrivacyDlpV2DetectionRuleOutput
	ToGooglePrivacyDlpV2DetectionRuleOutputWithContext(context.Context) GooglePrivacyDlpV2DetectionRuleOutput
}

// Deprecated; use `InspectionRuleSet` instead. Rule for modifying a `CustomInfoType` to alter behavior under certain circumstances, depending on the specific details of the rule. Not supported for the `surrogate_type` custom infoType.
type GooglePrivacyDlpV2DetectionRuleArgs struct {
	// Hotword-based detection rule.
	HotwordRule GooglePrivacyDlpV2HotwordRulePtrInput `pulumi:"hotwordRule"`
}

func (GooglePrivacyDlpV2DetectionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DetectionRule)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DetectionRuleArgs) ToGooglePrivacyDlpV2DetectionRuleOutput() GooglePrivacyDlpV2DetectionRuleOutput {
	return i.ToGooglePrivacyDlpV2DetectionRuleOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DetectionRuleArgs) ToGooglePrivacyDlpV2DetectionRuleOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DetectionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DetectionRuleOutput)
}

// GooglePrivacyDlpV2DetectionRuleArrayInput is an input type that accepts GooglePrivacyDlpV2DetectionRuleArray and GooglePrivacyDlpV2DetectionRuleArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DetectionRuleArrayInput` via:
//
//	GooglePrivacyDlpV2DetectionRuleArray{ GooglePrivacyDlpV2DetectionRuleArgs{...} }
type GooglePrivacyDlpV2DetectionRuleArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DetectionRuleArrayOutput() GooglePrivacyDlpV2DetectionRuleArrayOutput
	ToGooglePrivacyDlpV2DetectionRuleArrayOutputWithContext(context.Context) GooglePrivacyDlpV2DetectionRuleArrayOutput
}

type GooglePrivacyDlpV2DetectionRuleArray []GooglePrivacyDlpV2DetectionRuleInput

func (GooglePrivacyDlpV2DetectionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DetectionRule)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DetectionRuleArray) ToGooglePrivacyDlpV2DetectionRuleArrayOutput() GooglePrivacyDlpV2DetectionRuleArrayOutput {
	return i.ToGooglePrivacyDlpV2DetectionRuleArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DetectionRuleArray) ToGooglePrivacyDlpV2DetectionRuleArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DetectionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DetectionRuleArrayOutput)
}

// Deprecated; use `InspectionRuleSet` instead. Rule for modifying a `CustomInfoType` to alter behavior under certain circumstances, depending on the specific details of the rule. Not supported for the `surrogate_type` custom infoType.
type GooglePrivacyDlpV2DetectionRuleOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DetectionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DetectionRule)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DetectionRuleOutput) ToGooglePrivacyDlpV2DetectionRuleOutput() GooglePrivacyDlpV2DetectionRuleOutput {
	return o
}

func (o GooglePrivacyDlpV2DetectionRuleOutput) ToGooglePrivacyDlpV2DetectionRuleOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DetectionRuleOutput {
	return o
}

// Hotword-based detection rule.
func (o GooglePrivacyDlpV2DetectionRuleOutput) HotwordRule() GooglePrivacyDlpV2HotwordRulePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DetectionRule) *GooglePrivacyDlpV2HotwordRule { return v.HotwordRule }).(GooglePrivacyDlpV2HotwordRulePtrOutput)
}

type GooglePrivacyDlpV2DetectionRuleArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DetectionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DetectionRule)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DetectionRuleArrayOutput) ToGooglePrivacyDlpV2DetectionRuleArrayOutput() GooglePrivacyDlpV2DetectionRuleArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DetectionRuleArrayOutput) ToGooglePrivacyDlpV2DetectionRuleArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DetectionRuleArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DetectionRuleArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2DetectionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2DetectionRule {
		return vs[0].([]GooglePrivacyDlpV2DetectionRule)[vs[1].(int)]
	}).(GooglePrivacyDlpV2DetectionRuleOutput)
}

// Deprecated; use `InspectionRuleSet` instead. Rule for modifying a `CustomInfoType` to alter behavior under certain circumstances, depending on the specific details of the rule. Not supported for the `surrogate_type` custom infoType.
type GooglePrivacyDlpV2DetectionRuleResponse struct {
	// Hotword-based detection rule.
	HotwordRule GooglePrivacyDlpV2HotwordRuleResponse `pulumi:"hotwordRule"`
}

// Deprecated; use `InspectionRuleSet` instead. Rule for modifying a `CustomInfoType` to alter behavior under certain circumstances, depending on the specific details of the rule. Not supported for the `surrogate_type` custom infoType.
type GooglePrivacyDlpV2DetectionRuleResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DetectionRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DetectionRuleResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DetectionRuleResponseOutput) ToGooglePrivacyDlpV2DetectionRuleResponseOutput() GooglePrivacyDlpV2DetectionRuleResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DetectionRuleResponseOutput) ToGooglePrivacyDlpV2DetectionRuleResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DetectionRuleResponseOutput {
	return o
}

// Hotword-based detection rule.
func (o GooglePrivacyDlpV2DetectionRuleResponseOutput) HotwordRule() GooglePrivacyDlpV2HotwordRuleResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DetectionRuleResponse) GooglePrivacyDlpV2HotwordRuleResponse {
		return v.HotwordRule
	}).(GooglePrivacyDlpV2HotwordRuleResponseOutput)
}

type GooglePrivacyDlpV2DetectionRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DetectionRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DetectionRuleResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DetectionRuleResponseArrayOutput) ToGooglePrivacyDlpV2DetectionRuleResponseArrayOutput() GooglePrivacyDlpV2DetectionRuleResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DetectionRuleResponseArrayOutput) ToGooglePrivacyDlpV2DetectionRuleResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DetectionRuleResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DetectionRuleResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2DetectionRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2DetectionRuleResponse {
		return vs[0].([]GooglePrivacyDlpV2DetectionRuleResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2DetectionRuleResponseOutput)
}

// Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase "Sam Johnson" will match all three phrases "sam johnson", "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word "jen" will match the first three letters of the text "jen123" but will return no matches for "jennifer". Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using `LargeCustomDictionaryConfig` in the `StoredInfoType` API.
type GooglePrivacyDlpV2Dictionary struct {
	// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
	CloudStoragePath *GooglePrivacyDlpV2CloudStoragePath `pulumi:"cloudStoragePath"`
	// List of words or phrases to search for.
	WordList *GooglePrivacyDlpV2WordList `pulumi:"wordList"`
}

// GooglePrivacyDlpV2DictionaryInput is an input type that accepts GooglePrivacyDlpV2DictionaryArgs and GooglePrivacyDlpV2DictionaryOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DictionaryInput` via:
//
//	GooglePrivacyDlpV2DictionaryArgs{...}
type GooglePrivacyDlpV2DictionaryInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DictionaryOutput() GooglePrivacyDlpV2DictionaryOutput
	ToGooglePrivacyDlpV2DictionaryOutputWithContext(context.Context) GooglePrivacyDlpV2DictionaryOutput
}

// Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase "Sam Johnson" will match all three phrases "sam johnson", "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word "jen" will match the first three letters of the text "jen123" but will return no matches for "jennifer". Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using `LargeCustomDictionaryConfig` in the `StoredInfoType` API.
type GooglePrivacyDlpV2DictionaryArgs struct {
	// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
	CloudStoragePath GooglePrivacyDlpV2CloudStoragePathPtrInput `pulumi:"cloudStoragePath"`
	// List of words or phrases to search for.
	WordList GooglePrivacyDlpV2WordListPtrInput `pulumi:"wordList"`
}

func (GooglePrivacyDlpV2DictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Dictionary)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DictionaryArgs) ToGooglePrivacyDlpV2DictionaryOutput() GooglePrivacyDlpV2DictionaryOutput {
	return i.ToGooglePrivacyDlpV2DictionaryOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DictionaryArgs) ToGooglePrivacyDlpV2DictionaryOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DictionaryOutput)
}

func (i GooglePrivacyDlpV2DictionaryArgs) ToGooglePrivacyDlpV2DictionaryPtrOutput() GooglePrivacyDlpV2DictionaryPtrOutput {
	return i.ToGooglePrivacyDlpV2DictionaryPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DictionaryArgs) ToGooglePrivacyDlpV2DictionaryPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DictionaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DictionaryOutput).ToGooglePrivacyDlpV2DictionaryPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DictionaryPtrInput is an input type that accepts GooglePrivacyDlpV2DictionaryArgs, GooglePrivacyDlpV2DictionaryPtr and GooglePrivacyDlpV2DictionaryPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DictionaryPtrInput` via:
//
//	        GooglePrivacyDlpV2DictionaryArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DictionaryPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DictionaryPtrOutput() GooglePrivacyDlpV2DictionaryPtrOutput
	ToGooglePrivacyDlpV2DictionaryPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DictionaryPtrOutput
}

type googlePrivacyDlpV2DictionaryPtrType GooglePrivacyDlpV2DictionaryArgs

func GooglePrivacyDlpV2DictionaryPtr(v *GooglePrivacyDlpV2DictionaryArgs) GooglePrivacyDlpV2DictionaryPtrInput {
	return (*googlePrivacyDlpV2DictionaryPtrType)(v)
}

func (*googlePrivacyDlpV2DictionaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Dictionary)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DictionaryPtrType) ToGooglePrivacyDlpV2DictionaryPtrOutput() GooglePrivacyDlpV2DictionaryPtrOutput {
	return i.ToGooglePrivacyDlpV2DictionaryPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DictionaryPtrType) ToGooglePrivacyDlpV2DictionaryPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DictionaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DictionaryPtrOutput)
}

// Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase "Sam Johnson" will match all three phrases "sam johnson", "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word "jen" will match the first three letters of the text "jen123" but will return no matches for "jennifer". Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using `LargeCustomDictionaryConfig` in the `StoredInfoType` API.
type GooglePrivacyDlpV2DictionaryOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Dictionary)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DictionaryOutput) ToGooglePrivacyDlpV2DictionaryOutput() GooglePrivacyDlpV2DictionaryOutput {
	return o
}

func (o GooglePrivacyDlpV2DictionaryOutput) ToGooglePrivacyDlpV2DictionaryOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DictionaryOutput {
	return o
}

func (o GooglePrivacyDlpV2DictionaryOutput) ToGooglePrivacyDlpV2DictionaryPtrOutput() GooglePrivacyDlpV2DictionaryPtrOutput {
	return o.ToGooglePrivacyDlpV2DictionaryPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DictionaryOutput) ToGooglePrivacyDlpV2DictionaryPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DictionaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Dictionary) *GooglePrivacyDlpV2Dictionary {
		return &v
	}).(GooglePrivacyDlpV2DictionaryPtrOutput)
}

// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
func (o GooglePrivacyDlpV2DictionaryOutput) CloudStoragePath() GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Dictionary) *GooglePrivacyDlpV2CloudStoragePath { return v.CloudStoragePath }).(GooglePrivacyDlpV2CloudStoragePathPtrOutput)
}

// List of words or phrases to search for.
func (o GooglePrivacyDlpV2DictionaryOutput) WordList() GooglePrivacyDlpV2WordListPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Dictionary) *GooglePrivacyDlpV2WordList { return v.WordList }).(GooglePrivacyDlpV2WordListPtrOutput)
}

type GooglePrivacyDlpV2DictionaryPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DictionaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Dictionary)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DictionaryPtrOutput) ToGooglePrivacyDlpV2DictionaryPtrOutput() GooglePrivacyDlpV2DictionaryPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DictionaryPtrOutput) ToGooglePrivacyDlpV2DictionaryPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DictionaryPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DictionaryPtrOutput) Elem() GooglePrivacyDlpV2DictionaryOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Dictionary) GooglePrivacyDlpV2Dictionary {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Dictionary
		return ret
	}).(GooglePrivacyDlpV2DictionaryOutput)
}

// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
func (o GooglePrivacyDlpV2DictionaryPtrOutput) CloudStoragePath() GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Dictionary) *GooglePrivacyDlpV2CloudStoragePath {
		if v == nil {
			return nil
		}
		return v.CloudStoragePath
	}).(GooglePrivacyDlpV2CloudStoragePathPtrOutput)
}

// List of words or phrases to search for.
func (o GooglePrivacyDlpV2DictionaryPtrOutput) WordList() GooglePrivacyDlpV2WordListPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Dictionary) *GooglePrivacyDlpV2WordList {
		if v == nil {
			return nil
		}
		return v.WordList
	}).(GooglePrivacyDlpV2WordListPtrOutput)
}

// Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase "Sam Johnson" will match all three phrases "sam johnson", "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word "jen" will match the first three letters of the text "jen123" but will return no matches for "jennifer". Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using `LargeCustomDictionaryConfig` in the `StoredInfoType` API.
type GooglePrivacyDlpV2DictionaryResponse struct {
	// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
	CloudStoragePath GooglePrivacyDlpV2CloudStoragePathResponse `pulumi:"cloudStoragePath"`
	// List of words or phrases to search for.
	WordList GooglePrivacyDlpV2WordListResponse `pulumi:"wordList"`
}

// Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase "Sam Johnson" will match all three phrases "sam johnson", "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word "jen" will match the first three letters of the text "jen123" but will return no matches for "jennifer". Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using `LargeCustomDictionaryConfig` in the `StoredInfoType` API.
type GooglePrivacyDlpV2DictionaryResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DictionaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DictionaryResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DictionaryResponseOutput) ToGooglePrivacyDlpV2DictionaryResponseOutput() GooglePrivacyDlpV2DictionaryResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DictionaryResponseOutput) ToGooglePrivacyDlpV2DictionaryResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DictionaryResponseOutput {
	return o
}

// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
func (o GooglePrivacyDlpV2DictionaryResponseOutput) CloudStoragePath() GooglePrivacyDlpV2CloudStoragePathResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DictionaryResponse) GooglePrivacyDlpV2CloudStoragePathResponse {
		return v.CloudStoragePath
	}).(GooglePrivacyDlpV2CloudStoragePathResponseOutput)
}

// List of words or phrases to search for.
func (o GooglePrivacyDlpV2DictionaryResponseOutput) WordList() GooglePrivacyDlpV2WordListResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DictionaryResponse) GooglePrivacyDlpV2WordListResponse { return v.WordList }).(GooglePrivacyDlpV2WordListResponseOutput)
}

// Do not profile the tables.
type GooglePrivacyDlpV2Disabled struct {
}

// GooglePrivacyDlpV2DisabledInput is an input type that accepts GooglePrivacyDlpV2DisabledArgs and GooglePrivacyDlpV2DisabledOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DisabledInput` via:
//
//	GooglePrivacyDlpV2DisabledArgs{...}
type GooglePrivacyDlpV2DisabledInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DisabledOutput() GooglePrivacyDlpV2DisabledOutput
	ToGooglePrivacyDlpV2DisabledOutputWithContext(context.Context) GooglePrivacyDlpV2DisabledOutput
}

// Do not profile the tables.
type GooglePrivacyDlpV2DisabledArgs struct {
}

func (GooglePrivacyDlpV2DisabledArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Disabled)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DisabledArgs) ToGooglePrivacyDlpV2DisabledOutput() GooglePrivacyDlpV2DisabledOutput {
	return i.ToGooglePrivacyDlpV2DisabledOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DisabledArgs) ToGooglePrivacyDlpV2DisabledOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DisabledOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DisabledOutput)
}

func (i GooglePrivacyDlpV2DisabledArgs) ToGooglePrivacyDlpV2DisabledPtrOutput() GooglePrivacyDlpV2DisabledPtrOutput {
	return i.ToGooglePrivacyDlpV2DisabledPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DisabledArgs) ToGooglePrivacyDlpV2DisabledPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DisabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DisabledOutput).ToGooglePrivacyDlpV2DisabledPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DisabledPtrInput is an input type that accepts GooglePrivacyDlpV2DisabledArgs, GooglePrivacyDlpV2DisabledPtr and GooglePrivacyDlpV2DisabledPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DisabledPtrInput` via:
//
//	        GooglePrivacyDlpV2DisabledArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DisabledPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DisabledPtrOutput() GooglePrivacyDlpV2DisabledPtrOutput
	ToGooglePrivacyDlpV2DisabledPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DisabledPtrOutput
}

type googlePrivacyDlpV2DisabledPtrType GooglePrivacyDlpV2DisabledArgs

func GooglePrivacyDlpV2DisabledPtr(v *GooglePrivacyDlpV2DisabledArgs) GooglePrivacyDlpV2DisabledPtrInput {
	return (*googlePrivacyDlpV2DisabledPtrType)(v)
}

func (*googlePrivacyDlpV2DisabledPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Disabled)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DisabledPtrType) ToGooglePrivacyDlpV2DisabledPtrOutput() GooglePrivacyDlpV2DisabledPtrOutput {
	return i.ToGooglePrivacyDlpV2DisabledPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DisabledPtrType) ToGooglePrivacyDlpV2DisabledPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DisabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DisabledPtrOutput)
}

// Do not profile the tables.
type GooglePrivacyDlpV2DisabledOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DisabledOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Disabled)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DisabledOutput) ToGooglePrivacyDlpV2DisabledOutput() GooglePrivacyDlpV2DisabledOutput {
	return o
}

func (o GooglePrivacyDlpV2DisabledOutput) ToGooglePrivacyDlpV2DisabledOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DisabledOutput {
	return o
}

func (o GooglePrivacyDlpV2DisabledOutput) ToGooglePrivacyDlpV2DisabledPtrOutput() GooglePrivacyDlpV2DisabledPtrOutput {
	return o.ToGooglePrivacyDlpV2DisabledPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DisabledOutput) ToGooglePrivacyDlpV2DisabledPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DisabledPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Disabled) *GooglePrivacyDlpV2Disabled {
		return &v
	}).(GooglePrivacyDlpV2DisabledPtrOutput)
}

type GooglePrivacyDlpV2DisabledPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DisabledPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Disabled)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DisabledPtrOutput) ToGooglePrivacyDlpV2DisabledPtrOutput() GooglePrivacyDlpV2DisabledPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DisabledPtrOutput) ToGooglePrivacyDlpV2DisabledPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DisabledPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DisabledPtrOutput) Elem() GooglePrivacyDlpV2DisabledOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Disabled) GooglePrivacyDlpV2Disabled {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Disabled
		return ret
	}).(GooglePrivacyDlpV2DisabledOutput)
}

// Do not profile the tables.
type GooglePrivacyDlpV2DisabledResponse struct {
}

// Do not profile the tables.
type GooglePrivacyDlpV2DisabledResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DisabledResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DisabledResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DisabledResponseOutput) ToGooglePrivacyDlpV2DisabledResponseOutput() GooglePrivacyDlpV2DisabledResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DisabledResponseOutput) ToGooglePrivacyDlpV2DisabledResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DisabledResponseOutput {
	return o
}

// Requirements that must be true before a table is scanned in discovery for the first time. There is an AND relationship between the top-level attributes. Additionally, minimum conditions with an OR relationship that must be met before Cloud DLP scans a table can be set (like a minimum row count or a minimum table age).
type GooglePrivacyDlpV2DiscoveryBigQueryConditions struct {
	// BigQuery table must have been created after this date. Used to avoid backfilling.
	CreatedAfter *string `pulumi:"createdAfter"`
	// At least one of the conditions must be true for a table to be scanned.
	OrConditions *GooglePrivacyDlpV2OrConditions `pulumi:"orConditions"`
	// Restrict discovery to categories of table types.
	TypeCollection *GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection `pulumi:"typeCollection"`
	// Restrict discovery to specific table types.
	Types *GooglePrivacyDlpV2BigQueryTableTypes `pulumi:"types"`
}

// GooglePrivacyDlpV2DiscoveryBigQueryConditionsInput is an input type that accepts GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs and GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryBigQueryConditionsInput` via:
//
//	GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs{...}
type GooglePrivacyDlpV2DiscoveryBigQueryConditionsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput() GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput
	ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput
}

// Requirements that must be true before a table is scanned in discovery for the first time. There is an AND relationship between the top-level attributes. Additionally, minimum conditions with an OR relationship that must be met before Cloud DLP scans a table can be set (like a minimum row count or a minimum table age).
type GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs struct {
	// BigQuery table must have been created after this date. Used to avoid backfilling.
	CreatedAfter pulumi.StringPtrInput `pulumi:"createdAfter"`
	// At least one of the conditions must be true for a table to be scanned.
	OrConditions GooglePrivacyDlpV2OrConditionsPtrInput `pulumi:"orConditions"`
	// Restrict discovery to categories of table types.
	TypeCollection GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollectionPtrInput `pulumi:"typeCollection"`
	// Restrict discovery to specific table types.
	Types GooglePrivacyDlpV2BigQueryTableTypesPtrInput `pulumi:"types"`
}

func (GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryBigQueryConditions)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput() GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput)
}

func (i GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput() GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput).ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrInput is an input type that accepts GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs, GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtr and GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrInput` via:
//
//	        GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput() GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput
	ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput
}

type googlePrivacyDlpV2DiscoveryBigQueryConditionsPtrType GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs

func GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtr(v *GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs) GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrInput {
	return (*googlePrivacyDlpV2DiscoveryBigQueryConditionsPtrType)(v)
}

func (*googlePrivacyDlpV2DiscoveryBigQueryConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoveryBigQueryConditions)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DiscoveryBigQueryConditionsPtrType) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput() GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DiscoveryBigQueryConditionsPtrType) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput)
}

// Requirements that must be true before a table is scanned in discovery for the first time. There is an AND relationship between the top-level attributes. Additionally, minimum conditions with an OR relationship that must be met before Cloud DLP scans a table can be set (like a minimum row count or a minimum table age).
type GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryBigQueryConditions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput() GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput() GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput {
	return o.ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DiscoveryBigQueryConditions) *GooglePrivacyDlpV2DiscoveryBigQueryConditions {
		return &v
	}).(GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput)
}

// BigQuery table must have been created after this date. Used to avoid backfilling.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput) CreatedAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryConditions) *string { return v.CreatedAfter }).(pulumi.StringPtrOutput)
}

// At least one of the conditions must be true for a table to be scanned.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput) OrConditions() GooglePrivacyDlpV2OrConditionsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryConditions) *GooglePrivacyDlpV2OrConditions {
		return v.OrConditions
	}).(GooglePrivacyDlpV2OrConditionsPtrOutput)
}

// Restrict discovery to categories of table types.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput) TypeCollection() GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollectionPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryConditions) *GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection {
		return v.TypeCollection
	}).(GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollectionPtrOutput)
}

// Restrict discovery to specific table types.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput) Types() GooglePrivacyDlpV2BigQueryTableTypesPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryConditions) *GooglePrivacyDlpV2BigQueryTableTypes {
		return v.Types
	}).(GooglePrivacyDlpV2BigQueryTableTypesPtrOutput)
}

type GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoveryBigQueryConditions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput() GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput) Elem() GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryBigQueryConditions) GooglePrivacyDlpV2DiscoveryBigQueryConditions {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DiscoveryBigQueryConditions
		return ret
	}).(GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput)
}

// BigQuery table must have been created after this date. Used to avoid backfilling.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput) CreatedAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryBigQueryConditions) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAfter
	}).(pulumi.StringPtrOutput)
}

// At least one of the conditions must be true for a table to be scanned.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput) OrConditions() GooglePrivacyDlpV2OrConditionsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryBigQueryConditions) *GooglePrivacyDlpV2OrConditions {
		if v == nil {
			return nil
		}
		return v.OrConditions
	}).(GooglePrivacyDlpV2OrConditionsPtrOutput)
}

// Restrict discovery to categories of table types.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput) TypeCollection() GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollectionPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryBigQueryConditions) *GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollection {
		if v == nil {
			return nil
		}
		return v.TypeCollection
	}).(GooglePrivacyDlpV2DiscoveryBigQueryConditionsTypeCollectionPtrOutput)
}

// Restrict discovery to specific table types.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput) Types() GooglePrivacyDlpV2BigQueryTableTypesPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryBigQueryConditions) *GooglePrivacyDlpV2BigQueryTableTypes {
		if v == nil {
			return nil
		}
		return v.Types
	}).(GooglePrivacyDlpV2BigQueryTableTypesPtrOutput)
}

// Requirements that must be true before a table is scanned in discovery for the first time. There is an AND relationship between the top-level attributes. Additionally, minimum conditions with an OR relationship that must be met before Cloud DLP scans a table can be set (like a minimum row count or a minimum table age).
type GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponse struct {
	// BigQuery table must have been created after this date. Used to avoid backfilling.
	CreatedAfter string `pulumi:"createdAfter"`
	// At least one of the conditions must be true for a table to be scanned.
	OrConditions GooglePrivacyDlpV2OrConditionsResponse `pulumi:"orConditions"`
	// Restrict discovery to categories of table types.
	TypeCollection string `pulumi:"typeCollection"`
	// Restrict discovery to specific table types.
	Types GooglePrivacyDlpV2BigQueryTableTypesResponse `pulumi:"types"`
}

// Requirements that must be true before a table is scanned in discovery for the first time. There is an AND relationship between the top-level attributes. Additionally, minimum conditions with an OR relationship that must be met before Cloud DLP scans a table can be set (like a minimum row count or a minimum table age).
type GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput() GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput {
	return o
}

// BigQuery table must have been created after this date. Used to avoid backfilling.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput) CreatedAfter() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponse) string { return v.CreatedAfter }).(pulumi.StringOutput)
}

// At least one of the conditions must be true for a table to be scanned.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput) OrConditions() GooglePrivacyDlpV2OrConditionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponse) GooglePrivacyDlpV2OrConditionsResponse {
		return v.OrConditions
	}).(GooglePrivacyDlpV2OrConditionsResponseOutput)
}

// Restrict discovery to categories of table types.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput) TypeCollection() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponse) string { return v.TypeCollection }).(pulumi.StringOutput)
}

// Restrict discovery to specific table types.
func (o GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput) Types() GooglePrivacyDlpV2BigQueryTableTypesResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponse) GooglePrivacyDlpV2BigQueryTableTypesResponse {
		return v.Types
	}).(GooglePrivacyDlpV2BigQueryTableTypesResponseOutput)
}

// Determines what tables will have profiles generated within an organization or project. Includes the ability to filter by regular expression patterns on project ID, dataset ID, and table ID.
type GooglePrivacyDlpV2DiscoveryBigQueryFilter struct {
	// Catch-all. This should always be the last filter in the list because anything above it will apply first. Should only appear once in a configuration. If none is specified, a default one will be added automatically.
	OtherTables *GooglePrivacyDlpV2AllOtherBigQueryTables `pulumi:"otherTables"`
	// A specific set of tables for this filter to apply to. A table collection must be specified in only one filter per config. If a table id or dataset is empty, Cloud DLP assumes all tables in that collection must be profiled. Must specify a project ID.
	Tables *GooglePrivacyDlpV2BigQueryTableCollection `pulumi:"tables"`
}

// GooglePrivacyDlpV2DiscoveryBigQueryFilterInput is an input type that accepts GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs and GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryBigQueryFilterInput` via:
//
//	GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs{...}
type GooglePrivacyDlpV2DiscoveryBigQueryFilterInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryBigQueryFilterOutput() GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput
	ToGooglePrivacyDlpV2DiscoveryBigQueryFilterOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput
}

// Determines what tables will have profiles generated within an organization or project. Includes the ability to filter by regular expression patterns on project ID, dataset ID, and table ID.
type GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs struct {
	// Catch-all. This should always be the last filter in the list because anything above it will apply first. Should only appear once in a configuration. If none is specified, a default one will be added automatically.
	OtherTables GooglePrivacyDlpV2AllOtherBigQueryTablesPtrInput `pulumi:"otherTables"`
	// A specific set of tables for this filter to apply to. A table collection must be specified in only one filter per config. If a table id or dataset is empty, Cloud DLP assumes all tables in that collection must be profiled. Must specify a project ID.
	Tables GooglePrivacyDlpV2BigQueryTableCollectionPtrInput `pulumi:"tables"`
}

func (GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryBigQueryFilter)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterOutput() GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryBigQueryFilterOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput)
}

func (i GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput() GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput).ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrInput is an input type that accepts GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs, GooglePrivacyDlpV2DiscoveryBigQueryFilterPtr and GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrInput` via:
//
//	        GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput() GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput
	ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput
}

type googlePrivacyDlpV2DiscoveryBigQueryFilterPtrType GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs

func GooglePrivacyDlpV2DiscoveryBigQueryFilterPtr(v *GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs) GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrInput {
	return (*googlePrivacyDlpV2DiscoveryBigQueryFilterPtrType)(v)
}

func (*googlePrivacyDlpV2DiscoveryBigQueryFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoveryBigQueryFilter)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DiscoveryBigQueryFilterPtrType) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput() GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DiscoveryBigQueryFilterPtrType) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput)
}

// Determines what tables will have profiles generated within an organization or project. Includes the ability to filter by regular expression patterns on project ID, dataset ID, and table ID.
type GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryBigQueryFilter)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterOutput() GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput() GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput {
	return o.ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DiscoveryBigQueryFilter) *GooglePrivacyDlpV2DiscoveryBigQueryFilter {
		return &v
	}).(GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput)
}

// Catch-all. This should always be the last filter in the list because anything above it will apply first. Should only appear once in a configuration. If none is specified, a default one will be added automatically.
func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput) OtherTables() GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryFilter) *GooglePrivacyDlpV2AllOtherBigQueryTables {
		return v.OtherTables
	}).(GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput)
}

// A specific set of tables for this filter to apply to. A table collection must be specified in only one filter per config. If a table id or dataset is empty, Cloud DLP assumes all tables in that collection must be profiled. Must specify a project ID.
func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput) Tables() GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryFilter) *GooglePrivacyDlpV2BigQueryTableCollection {
		return v.Tables
	}).(GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput)
}

type GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoveryBigQueryFilter)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput() GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput) Elem() GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryBigQueryFilter) GooglePrivacyDlpV2DiscoveryBigQueryFilter {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DiscoveryBigQueryFilter
		return ret
	}).(GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput)
}

// Catch-all. This should always be the last filter in the list because anything above it will apply first. Should only appear once in a configuration. If none is specified, a default one will be added automatically.
func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput) OtherTables() GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryBigQueryFilter) *GooglePrivacyDlpV2AllOtherBigQueryTables {
		if v == nil {
			return nil
		}
		return v.OtherTables
	}).(GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput)
}

// A specific set of tables for this filter to apply to. A table collection must be specified in only one filter per config. If a table id or dataset is empty, Cloud DLP assumes all tables in that collection must be profiled. Must specify a project ID.
func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput) Tables() GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryBigQueryFilter) *GooglePrivacyDlpV2BigQueryTableCollection {
		if v == nil {
			return nil
		}
		return v.Tables
	}).(GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput)
}

// Determines what tables will have profiles generated within an organization or project. Includes the ability to filter by regular expression patterns on project ID, dataset ID, and table ID.
type GooglePrivacyDlpV2DiscoveryBigQueryFilterResponse struct {
	// Catch-all. This should always be the last filter in the list because anything above it will apply first. Should only appear once in a configuration. If none is specified, a default one will be added automatically.
	OtherTables GooglePrivacyDlpV2AllOtherBigQueryTablesResponse `pulumi:"otherTables"`
	// A specific set of tables for this filter to apply to. A table collection must be specified in only one filter per config. If a table id or dataset is empty, Cloud DLP assumes all tables in that collection must be profiled. Must specify a project ID.
	Tables GooglePrivacyDlpV2BigQueryTableCollectionResponse `pulumi:"tables"`
}

// Determines what tables will have profiles generated within an organization or project. Includes the ability to filter by regular expression patterns on project ID, dataset ID, and table ID.
type GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryBigQueryFilterResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput() GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput) ToGooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput {
	return o
}

// Catch-all. This should always be the last filter in the list because anything above it will apply first. Should only appear once in a configuration. If none is specified, a default one will be added automatically.
func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput) OtherTables() GooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryFilterResponse) GooglePrivacyDlpV2AllOtherBigQueryTablesResponse {
		return v.OtherTables
	}).(GooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutput)
}

// A specific set of tables for this filter to apply to. A table collection must be specified in only one filter per config. If a table id or dataset is empty, Cloud DLP assumes all tables in that collection must be profiled. Must specify a project ID.
func (o GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput) Tables() GooglePrivacyDlpV2BigQueryTableCollectionResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryBigQueryFilterResponse) GooglePrivacyDlpV2BigQueryTableCollectionResponse {
		return v.Tables
	}).(GooglePrivacyDlpV2BigQueryTableCollectionResponseOutput)
}

// What must take place for a profile to be updated and how frequently it should occur. New tables are scanned as quickly as possible depending on system capacity.
type GooglePrivacyDlpV2DiscoveryGenerationCadence struct {
	// Governs when to update data profiles when a schema is modified.
	SchemaModifiedCadence *GooglePrivacyDlpV2DiscoverySchemaModifiedCadence `pulumi:"schemaModifiedCadence"`
	// Governs when to update data profiles when a table is modified.
	TableModifiedCadence *GooglePrivacyDlpV2DiscoveryTableModifiedCadence `pulumi:"tableModifiedCadence"`
}

// GooglePrivacyDlpV2DiscoveryGenerationCadenceInput is an input type that accepts GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs and GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryGenerationCadenceInput` via:
//
//	GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs{...}
type GooglePrivacyDlpV2DiscoveryGenerationCadenceInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryGenerationCadenceOutput() GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput
	ToGooglePrivacyDlpV2DiscoveryGenerationCadenceOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput
}

// What must take place for a profile to be updated and how frequently it should occur. New tables are scanned as quickly as possible depending on system capacity.
type GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs struct {
	// Governs when to update data profiles when a schema is modified.
	SchemaModifiedCadence GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrInput `pulumi:"schemaModifiedCadence"`
	// Governs when to update data profiles when a table is modified.
	TableModifiedCadence GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrInput `pulumi:"tableModifiedCadence"`
}

func (GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryGenerationCadence)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs) ToGooglePrivacyDlpV2DiscoveryGenerationCadenceOutput() GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryGenerationCadenceOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs) ToGooglePrivacyDlpV2DiscoveryGenerationCadenceOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput)
}

func (i GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs) ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput() GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs) ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput).ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DiscoveryGenerationCadencePtrInput is an input type that accepts GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs, GooglePrivacyDlpV2DiscoveryGenerationCadencePtr and GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryGenerationCadencePtrInput` via:
//
//	        GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DiscoveryGenerationCadencePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput() GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput
	ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput
}

type googlePrivacyDlpV2DiscoveryGenerationCadencePtrType GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs

func GooglePrivacyDlpV2DiscoveryGenerationCadencePtr(v *GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs) GooglePrivacyDlpV2DiscoveryGenerationCadencePtrInput {
	return (*googlePrivacyDlpV2DiscoveryGenerationCadencePtrType)(v)
}

func (*googlePrivacyDlpV2DiscoveryGenerationCadencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoveryGenerationCadence)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DiscoveryGenerationCadencePtrType) ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput() GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DiscoveryGenerationCadencePtrType) ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput)
}

// What must take place for a profile to be updated and how frequently it should occur. New tables are scanned as quickly as possible depending on system capacity.
type GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryGenerationCadence)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput) ToGooglePrivacyDlpV2DiscoveryGenerationCadenceOutput() GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput) ToGooglePrivacyDlpV2DiscoveryGenerationCadenceOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput) ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput() GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput {
	return o.ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput) ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DiscoveryGenerationCadence) *GooglePrivacyDlpV2DiscoveryGenerationCadence {
		return &v
	}).(GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput)
}

// Governs when to update data profiles when a schema is modified.
func (o GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput) SchemaModifiedCadence() GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryGenerationCadence) *GooglePrivacyDlpV2DiscoverySchemaModifiedCadence {
		return v.SchemaModifiedCadence
	}).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput)
}

// Governs when to update data profiles when a table is modified.
func (o GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput) TableModifiedCadence() GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryGenerationCadence) *GooglePrivacyDlpV2DiscoveryTableModifiedCadence {
		return v.TableModifiedCadence
	}).(GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput)
}

type GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoveryGenerationCadence)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput) ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput() GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput) ToGooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput) Elem() GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryGenerationCadence) GooglePrivacyDlpV2DiscoveryGenerationCadence {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DiscoveryGenerationCadence
		return ret
	}).(GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput)
}

// Governs when to update data profiles when a schema is modified.
func (o GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput) SchemaModifiedCadence() GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryGenerationCadence) *GooglePrivacyDlpV2DiscoverySchemaModifiedCadence {
		if v == nil {
			return nil
		}
		return v.SchemaModifiedCadence
	}).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput)
}

// Governs when to update data profiles when a table is modified.
func (o GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput) TableModifiedCadence() GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryGenerationCadence) *GooglePrivacyDlpV2DiscoveryTableModifiedCadence {
		if v == nil {
			return nil
		}
		return v.TableModifiedCadence
	}).(GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput)
}

// What must take place for a profile to be updated and how frequently it should occur. New tables are scanned as quickly as possible depending on system capacity.
type GooglePrivacyDlpV2DiscoveryGenerationCadenceResponse struct {
	// Governs when to update data profiles when a schema is modified.
	SchemaModifiedCadence GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponse `pulumi:"schemaModifiedCadence"`
	// Governs when to update data profiles when a table is modified.
	TableModifiedCadence GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponse `pulumi:"tableModifiedCadence"`
}

// What must take place for a profile to be updated and how frequently it should occur. New tables are scanned as quickly as possible depending on system capacity.
type GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryGenerationCadenceResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput) ToGooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput() GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput) ToGooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput {
	return o
}

// Governs when to update data profiles when a schema is modified.
func (o GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput) SchemaModifiedCadence() GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryGenerationCadenceResponse) GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponse {
		return v.SchemaModifiedCadence
	}).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput)
}

// Governs when to update data profiles when a table is modified.
func (o GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput) TableModifiedCadence() GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryGenerationCadenceResponse) GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponse {
		return v.TableModifiedCadence
	}).(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput)
}

// The cadence at which to update data profiles when a schema is modified.
type GooglePrivacyDlpV2DiscoverySchemaModifiedCadence struct {
	// How frequently profiles may be updated when schemas are modified. Defaults to monthly.
	Frequency *GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency `pulumi:"frequency"`
	// The type of events to consider when deciding if the table's schema has been modified and should have the profile updated. Defaults to NEW_COLUMNS.
	Types []GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem `pulumi:"types"`
}

// GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceInput is an input type that accepts GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs and GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceInput` via:
//
//	GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs{...}
type GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput() GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput
	ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput
}

// The cadence at which to update data profiles when a schema is modified.
type GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs struct {
	// How frequently profiles may be updated when schemas are modified. Defaults to monthly.
	Frequency GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequencyPtrInput `pulumi:"frequency"`
	// The type of events to consider when deciding if the table's schema has been modified and should have the profile updated. Defaults to NEW_COLUMNS.
	Types GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItemArrayInput `pulumi:"types"`
}

func (GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoverySchemaModifiedCadence)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput() GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput {
	return i.ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput)
}

func (i GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput() GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput).ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrInput is an input type that accepts GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs, GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtr and GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrInput` via:
//
//	        GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput() GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput
	ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput
}

type googlePrivacyDlpV2DiscoverySchemaModifiedCadencePtrType GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs

func GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtr(v *GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs) GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrInput {
	return (*googlePrivacyDlpV2DiscoverySchemaModifiedCadencePtrType)(v)
}

func (*googlePrivacyDlpV2DiscoverySchemaModifiedCadencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoverySchemaModifiedCadence)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DiscoverySchemaModifiedCadencePtrType) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput() GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DiscoverySchemaModifiedCadencePtrType) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput)
}

// The cadence at which to update data profiles when a schema is modified.
type GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoverySchemaModifiedCadence)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput() GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput() GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput {
	return o.ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DiscoverySchemaModifiedCadence) *GooglePrivacyDlpV2DiscoverySchemaModifiedCadence {
		return &v
	}).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput)
}

// How frequently profiles may be updated when schemas are modified. Defaults to monthly.
func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput) Frequency() GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequencyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoverySchemaModifiedCadence) *GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency {
		return v.Frequency
	}).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequencyPtrOutput)
}

// The type of events to consider when deciding if the table's schema has been modified and should have the profile updated. Defaults to NEW_COLUMNS.
func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput) Types() GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItemArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoverySchemaModifiedCadence) []GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem {
		return v.Types
	}).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItemArrayOutput)
}

type GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoverySchemaModifiedCadence)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput() GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput) Elem() GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoverySchemaModifiedCadence) GooglePrivacyDlpV2DiscoverySchemaModifiedCadence {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DiscoverySchemaModifiedCadence
		return ret
	}).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput)
}

// How frequently profiles may be updated when schemas are modified. Defaults to monthly.
func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput) Frequency() GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequencyPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoverySchemaModifiedCadence) *GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequency {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceFrequencyPtrOutput)
}

// The type of events to consider when deciding if the table's schema has been modified and should have the profile updated. Defaults to NEW_COLUMNS.
func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput) Types() GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItemArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoverySchemaModifiedCadence) []GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItem {
		if v == nil {
			return nil
		}
		return v.Types
	}).(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceTypesItemArrayOutput)
}

// The cadence at which to update data profiles when a schema is modified.
type GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponse struct {
	// How frequently profiles may be updated when schemas are modified. Defaults to monthly.
	Frequency string `pulumi:"frequency"`
	// The type of events to consider when deciding if the table's schema has been modified and should have the profile updated. Defaults to NEW_COLUMNS.
	Types []string `pulumi:"types"`
}

// The cadence at which to update data profiles when a schema is modified.
type GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput() GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput) ToGooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput {
	return o
}

// How frequently profiles may be updated when schemas are modified. Defaults to monthly.
func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// The type of events to consider when deciding if the table's schema has been modified and should have the profile updated. Defaults to NEW_COLUMNS.
func (o GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponse) []string { return v.Types }).(pulumi.StringArrayOutput)
}

// The location to begin a discovery scan. Denotes an organization ID or folder ID within an organization.
type GooglePrivacyDlpV2DiscoveryStartingLocation struct {
	// The ID of the Folder within an organization to scan.
	FolderId *string `pulumi:"folderId"`
	// The ID of an organization to scan.
	OrganizationId *string `pulumi:"organizationId"`
}

// GooglePrivacyDlpV2DiscoveryStartingLocationInput is an input type that accepts GooglePrivacyDlpV2DiscoveryStartingLocationArgs and GooglePrivacyDlpV2DiscoveryStartingLocationOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryStartingLocationInput` via:
//
//	GooglePrivacyDlpV2DiscoveryStartingLocationArgs{...}
type GooglePrivacyDlpV2DiscoveryStartingLocationInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryStartingLocationOutput() GooglePrivacyDlpV2DiscoveryStartingLocationOutput
	ToGooglePrivacyDlpV2DiscoveryStartingLocationOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryStartingLocationOutput
}

// The location to begin a discovery scan. Denotes an organization ID or folder ID within an organization.
type GooglePrivacyDlpV2DiscoveryStartingLocationArgs struct {
	// The ID of the Folder within an organization to scan.
	FolderId pulumi.StringPtrInput `pulumi:"folderId"`
	// The ID of an organization to scan.
	OrganizationId pulumi.StringPtrInput `pulumi:"organizationId"`
}

func (GooglePrivacyDlpV2DiscoveryStartingLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryStartingLocation)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DiscoveryStartingLocationArgs) ToGooglePrivacyDlpV2DiscoveryStartingLocationOutput() GooglePrivacyDlpV2DiscoveryStartingLocationOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryStartingLocationOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryStartingLocationArgs) ToGooglePrivacyDlpV2DiscoveryStartingLocationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryStartingLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryStartingLocationOutput)
}

func (i GooglePrivacyDlpV2DiscoveryStartingLocationArgs) ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput() GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryStartingLocationArgs) ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryStartingLocationOutput).ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DiscoveryStartingLocationPtrInput is an input type that accepts GooglePrivacyDlpV2DiscoveryStartingLocationArgs, GooglePrivacyDlpV2DiscoveryStartingLocationPtr and GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryStartingLocationPtrInput` via:
//
//	        GooglePrivacyDlpV2DiscoveryStartingLocationArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DiscoveryStartingLocationPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput() GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput
	ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput
}

type googlePrivacyDlpV2DiscoveryStartingLocationPtrType GooglePrivacyDlpV2DiscoveryStartingLocationArgs

func GooglePrivacyDlpV2DiscoveryStartingLocationPtr(v *GooglePrivacyDlpV2DiscoveryStartingLocationArgs) GooglePrivacyDlpV2DiscoveryStartingLocationPtrInput {
	return (*googlePrivacyDlpV2DiscoveryStartingLocationPtrType)(v)
}

func (*googlePrivacyDlpV2DiscoveryStartingLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoveryStartingLocation)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DiscoveryStartingLocationPtrType) ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput() GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DiscoveryStartingLocationPtrType) ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput)
}

// The location to begin a discovery scan. Denotes an organization ID or folder ID within an organization.
type GooglePrivacyDlpV2DiscoveryStartingLocationOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryStartingLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryStartingLocation)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryStartingLocationOutput) ToGooglePrivacyDlpV2DiscoveryStartingLocationOutput() GooglePrivacyDlpV2DiscoveryStartingLocationOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryStartingLocationOutput) ToGooglePrivacyDlpV2DiscoveryStartingLocationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryStartingLocationOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryStartingLocationOutput) ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput() GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput {
	return o.ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DiscoveryStartingLocationOutput) ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DiscoveryStartingLocation) *GooglePrivacyDlpV2DiscoveryStartingLocation {
		return &v
	}).(GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput)
}

// The ID of the Folder within an organization to scan.
func (o GooglePrivacyDlpV2DiscoveryStartingLocationOutput) FolderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryStartingLocation) *string { return v.FolderId }).(pulumi.StringPtrOutput)
}

// The ID of an organization to scan.
func (o GooglePrivacyDlpV2DiscoveryStartingLocationOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryStartingLocation) *string { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoveryStartingLocation)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput) ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput() GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput) ToGooglePrivacyDlpV2DiscoveryStartingLocationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput) Elem() GooglePrivacyDlpV2DiscoveryStartingLocationOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryStartingLocation) GooglePrivacyDlpV2DiscoveryStartingLocation {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DiscoveryStartingLocation
		return ret
	}).(GooglePrivacyDlpV2DiscoveryStartingLocationOutput)
}

// The ID of the Folder within an organization to scan.
func (o GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput) FolderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryStartingLocation) *string {
		if v == nil {
			return nil
		}
		return v.FolderId
	}).(pulumi.StringPtrOutput)
}

// The ID of an organization to scan.
func (o GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryStartingLocation) *string {
		if v == nil {
			return nil
		}
		return v.OrganizationId
	}).(pulumi.StringPtrOutput)
}

// The location to begin a discovery scan. Denotes an organization ID or folder ID within an organization.
type GooglePrivacyDlpV2DiscoveryStartingLocationResponse struct {
	// The ID of the Folder within an organization to scan.
	FolderId string `pulumi:"folderId"`
	// The ID of an organization to scan.
	OrganizationId string `pulumi:"organizationId"`
}

// The location to begin a discovery scan. Denotes an organization ID or folder ID within an organization.
type GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryStartingLocationResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput) ToGooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput() GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput) ToGooglePrivacyDlpV2DiscoveryStartingLocationResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput {
	return o
}

// The ID of the Folder within an organization to scan.
func (o GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryStartingLocationResponse) string { return v.FolderId }).(pulumi.StringOutput)
}

// The ID of an organization to scan.
func (o GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryStartingLocationResponse) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// The cadence at which to update data profiles when a table is modified.
type GooglePrivacyDlpV2DiscoveryTableModifiedCadence struct {
	// How frequently data profiles can be updated when tables are modified. Defaults to never.
	Frequency *GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency `pulumi:"frequency"`
	// The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.
	Types []GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem `pulumi:"types"`
}

// GooglePrivacyDlpV2DiscoveryTableModifiedCadenceInput is an input type that accepts GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs and GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryTableModifiedCadenceInput` via:
//
//	GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs{...}
type GooglePrivacyDlpV2DiscoveryTableModifiedCadenceInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput() GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput
	ToGooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput
}

// The cadence at which to update data profiles when a table is modified.
type GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs struct {
	// How frequently data profiles can be updated when tables are modified. Defaults to never.
	Frequency GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequencyPtrInput `pulumi:"frequency"`
	// The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.
	Types GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItemArrayInput `pulumi:"types"`
}

func (GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryTableModifiedCadence)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput() GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput)
}

func (i GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput() GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput).ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrInput is an input type that accepts GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs, GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtr and GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrInput` via:
//
//	        GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput() GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput
	ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput
}

type googlePrivacyDlpV2DiscoveryTableModifiedCadencePtrType GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs

func GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtr(v *GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs) GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrInput {
	return (*googlePrivacyDlpV2DiscoveryTableModifiedCadencePtrType)(v)
}

func (*googlePrivacyDlpV2DiscoveryTableModifiedCadencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoveryTableModifiedCadence)(nil)).Elem()
}

func (i *googlePrivacyDlpV2DiscoveryTableModifiedCadencePtrType) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput() GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2DiscoveryTableModifiedCadencePtrType) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput)
}

// The cadence at which to update data profiles when a table is modified.
type GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryTableModifiedCadence)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput() GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput() GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput {
	return o.ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2DiscoveryTableModifiedCadence) *GooglePrivacyDlpV2DiscoveryTableModifiedCadence {
		return &v
	}).(GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput)
}

// How frequently data profiles can be updated when tables are modified. Defaults to never.
func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput) Frequency() GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequencyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryTableModifiedCadence) *GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency {
		return v.Frequency
	}).(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequencyPtrOutput)
}

// The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.
func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput) Types() GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItemArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryTableModifiedCadence) []GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem {
		return v.Types
	}).(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItemArrayOutput)
}

type GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2DiscoveryTableModifiedCadence)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput() GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput) Elem() GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryTableModifiedCadence) GooglePrivacyDlpV2DiscoveryTableModifiedCadence {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2DiscoveryTableModifiedCadence
		return ret
	}).(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput)
}

// How frequently data profiles can be updated when tables are modified. Defaults to never.
func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput) Frequency() GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequencyPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryTableModifiedCadence) *GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequency {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceFrequencyPtrOutput)
}

// The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.
func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput) Types() GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItemArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2DiscoveryTableModifiedCadence) []GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItem {
		if v == nil {
			return nil
		}
		return v.Types
	}).(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceTypesItemArrayOutput)
}

// The cadence at which to update data profiles when a table is modified.
type GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponse struct {
	// How frequently data profiles can be updated when tables are modified. Defaults to never.
	Frequency string `pulumi:"frequency"`
	// The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.
	Types []string `pulumi:"types"`
}

// The cadence at which to update data profiles when a table is modified.
type GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput() GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput) ToGooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput {
	return o
}

// How frequently data profiles can be updated when tables are modified. Defaults to never.
func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.
func (o GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponse) []string { return v.Types }).(pulumi.StringArrayOutput)
}

// Target used to match against for Discovery.
type GooglePrivacyDlpV2DiscoveryTarget struct {
	// BigQuery target for Discovery. The first target to match a table will be the one applied.
	BigQueryTarget *GooglePrivacyDlpV2BigQueryDiscoveryTarget `pulumi:"bigQueryTarget"`
}

// GooglePrivacyDlpV2DiscoveryTargetInput is an input type that accepts GooglePrivacyDlpV2DiscoveryTargetArgs and GooglePrivacyDlpV2DiscoveryTargetOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryTargetInput` via:
//
//	GooglePrivacyDlpV2DiscoveryTargetArgs{...}
type GooglePrivacyDlpV2DiscoveryTargetInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryTargetOutput() GooglePrivacyDlpV2DiscoveryTargetOutput
	ToGooglePrivacyDlpV2DiscoveryTargetOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryTargetOutput
}

// Target used to match against for Discovery.
type GooglePrivacyDlpV2DiscoveryTargetArgs struct {
	// BigQuery target for Discovery. The first target to match a table will be the one applied.
	BigQueryTarget GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrInput `pulumi:"bigQueryTarget"`
}

func (GooglePrivacyDlpV2DiscoveryTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryTarget)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DiscoveryTargetArgs) ToGooglePrivacyDlpV2DiscoveryTargetOutput() GooglePrivacyDlpV2DiscoveryTargetOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryTargetOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryTargetArgs) ToGooglePrivacyDlpV2DiscoveryTargetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryTargetOutput)
}

// GooglePrivacyDlpV2DiscoveryTargetArrayInput is an input type that accepts GooglePrivacyDlpV2DiscoveryTargetArray and GooglePrivacyDlpV2DiscoveryTargetArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2DiscoveryTargetArrayInput` via:
//
//	GooglePrivacyDlpV2DiscoveryTargetArray{ GooglePrivacyDlpV2DiscoveryTargetArgs{...} }
type GooglePrivacyDlpV2DiscoveryTargetArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2DiscoveryTargetArrayOutput() GooglePrivacyDlpV2DiscoveryTargetArrayOutput
	ToGooglePrivacyDlpV2DiscoveryTargetArrayOutputWithContext(context.Context) GooglePrivacyDlpV2DiscoveryTargetArrayOutput
}

type GooglePrivacyDlpV2DiscoveryTargetArray []GooglePrivacyDlpV2DiscoveryTargetInput

func (GooglePrivacyDlpV2DiscoveryTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DiscoveryTarget)(nil)).Elem()
}

func (i GooglePrivacyDlpV2DiscoveryTargetArray) ToGooglePrivacyDlpV2DiscoveryTargetArrayOutput() GooglePrivacyDlpV2DiscoveryTargetArrayOutput {
	return i.ToGooglePrivacyDlpV2DiscoveryTargetArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2DiscoveryTargetArray) ToGooglePrivacyDlpV2DiscoveryTargetArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2DiscoveryTargetArrayOutput)
}

// Target used to match against for Discovery.
type GooglePrivacyDlpV2DiscoveryTargetOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryTarget)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryTargetOutput) ToGooglePrivacyDlpV2DiscoveryTargetOutput() GooglePrivacyDlpV2DiscoveryTargetOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTargetOutput) ToGooglePrivacyDlpV2DiscoveryTargetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTargetOutput {
	return o
}

// BigQuery target for Discovery. The first target to match a table will be the one applied.
func (o GooglePrivacyDlpV2DiscoveryTargetOutput) BigQueryTarget() GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryTarget) *GooglePrivacyDlpV2BigQueryDiscoveryTarget {
		return v.BigQueryTarget
	}).(GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput)
}

type GooglePrivacyDlpV2DiscoveryTargetArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DiscoveryTarget)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryTargetArrayOutput) ToGooglePrivacyDlpV2DiscoveryTargetArrayOutput() GooglePrivacyDlpV2DiscoveryTargetArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTargetArrayOutput) ToGooglePrivacyDlpV2DiscoveryTargetArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTargetArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTargetArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2DiscoveryTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2DiscoveryTarget {
		return vs[0].([]GooglePrivacyDlpV2DiscoveryTarget)[vs[1].(int)]
	}).(GooglePrivacyDlpV2DiscoveryTargetOutput)
}

// Target used to match against for Discovery.
type GooglePrivacyDlpV2DiscoveryTargetResponse struct {
	// BigQuery target for Discovery. The first target to match a table will be the one applied.
	BigQueryTarget GooglePrivacyDlpV2BigQueryDiscoveryTargetResponse `pulumi:"bigQueryTarget"`
}

// Target used to match against for Discovery.
type GooglePrivacyDlpV2DiscoveryTargetResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryTargetResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryTargetResponseOutput) ToGooglePrivacyDlpV2DiscoveryTargetResponseOutput() GooglePrivacyDlpV2DiscoveryTargetResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTargetResponseOutput) ToGooglePrivacyDlpV2DiscoveryTargetResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTargetResponseOutput {
	return o
}

// BigQuery target for Discovery. The first target to match a table will be the one applied.
func (o GooglePrivacyDlpV2DiscoveryTargetResponseOutput) BigQueryTarget() GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2DiscoveryTargetResponse) GooglePrivacyDlpV2BigQueryDiscoveryTargetResponse {
		return v.BigQueryTarget
	}).(GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput)
}

type GooglePrivacyDlpV2DiscoveryTargetResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2DiscoveryTargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2DiscoveryTargetResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2DiscoveryTargetResponseArrayOutput) ToGooglePrivacyDlpV2DiscoveryTargetResponseArrayOutput() GooglePrivacyDlpV2DiscoveryTargetResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTargetResponseArrayOutput) ToGooglePrivacyDlpV2DiscoveryTargetResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2DiscoveryTargetResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2DiscoveryTargetResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2DiscoveryTargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2DiscoveryTargetResponse {
		return vs[0].([]GooglePrivacyDlpV2DiscoveryTargetResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2DiscoveryTargetResponseOutput)
}

// An entity in a dataset is a field or set of fields that correspond to a single person. For example, in medical records the `EntityId` might be a patient identifier, or for financial records it might be an account identifier. This message is used when generalizations or analysis must take into account that multiple rows correspond to the same entity.
type GooglePrivacyDlpV2EntityId struct {
	// Composite key indicating which field contains the entity identifier.
	Field *GooglePrivacyDlpV2FieldId `pulumi:"field"`
}

// GooglePrivacyDlpV2EntityIdInput is an input type that accepts GooglePrivacyDlpV2EntityIdArgs and GooglePrivacyDlpV2EntityIdOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2EntityIdInput` via:
//
//	GooglePrivacyDlpV2EntityIdArgs{...}
type GooglePrivacyDlpV2EntityIdInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2EntityIdOutput() GooglePrivacyDlpV2EntityIdOutput
	ToGooglePrivacyDlpV2EntityIdOutputWithContext(context.Context) GooglePrivacyDlpV2EntityIdOutput
}

// An entity in a dataset is a field or set of fields that correspond to a single person. For example, in medical records the `EntityId` might be a patient identifier, or for financial records it might be an account identifier. This message is used when generalizations or analysis must take into account that multiple rows correspond to the same entity.
type GooglePrivacyDlpV2EntityIdArgs struct {
	// Composite key indicating which field contains the entity identifier.
	Field GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"field"`
}

func (GooglePrivacyDlpV2EntityIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2EntityId)(nil)).Elem()
}

func (i GooglePrivacyDlpV2EntityIdArgs) ToGooglePrivacyDlpV2EntityIdOutput() GooglePrivacyDlpV2EntityIdOutput {
	return i.ToGooglePrivacyDlpV2EntityIdOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2EntityIdArgs) ToGooglePrivacyDlpV2EntityIdOutputWithContext(ctx context.Context) GooglePrivacyDlpV2EntityIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2EntityIdOutput)
}

func (i GooglePrivacyDlpV2EntityIdArgs) ToGooglePrivacyDlpV2EntityIdPtrOutput() GooglePrivacyDlpV2EntityIdPtrOutput {
	return i.ToGooglePrivacyDlpV2EntityIdPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2EntityIdArgs) ToGooglePrivacyDlpV2EntityIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2EntityIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2EntityIdOutput).ToGooglePrivacyDlpV2EntityIdPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2EntityIdPtrInput is an input type that accepts GooglePrivacyDlpV2EntityIdArgs, GooglePrivacyDlpV2EntityIdPtr and GooglePrivacyDlpV2EntityIdPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2EntityIdPtrInput` via:
//
//	        GooglePrivacyDlpV2EntityIdArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2EntityIdPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2EntityIdPtrOutput() GooglePrivacyDlpV2EntityIdPtrOutput
	ToGooglePrivacyDlpV2EntityIdPtrOutputWithContext(context.Context) GooglePrivacyDlpV2EntityIdPtrOutput
}

type googlePrivacyDlpV2EntityIdPtrType GooglePrivacyDlpV2EntityIdArgs

func GooglePrivacyDlpV2EntityIdPtr(v *GooglePrivacyDlpV2EntityIdArgs) GooglePrivacyDlpV2EntityIdPtrInput {
	return (*googlePrivacyDlpV2EntityIdPtrType)(v)
}

func (*googlePrivacyDlpV2EntityIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2EntityId)(nil)).Elem()
}

func (i *googlePrivacyDlpV2EntityIdPtrType) ToGooglePrivacyDlpV2EntityIdPtrOutput() GooglePrivacyDlpV2EntityIdPtrOutput {
	return i.ToGooglePrivacyDlpV2EntityIdPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2EntityIdPtrType) ToGooglePrivacyDlpV2EntityIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2EntityIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2EntityIdPtrOutput)
}

// An entity in a dataset is a field or set of fields that correspond to a single person. For example, in medical records the `EntityId` might be a patient identifier, or for financial records it might be an account identifier. This message is used when generalizations or analysis must take into account that multiple rows correspond to the same entity.
type GooglePrivacyDlpV2EntityIdOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2EntityIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2EntityId)(nil)).Elem()
}

func (o GooglePrivacyDlpV2EntityIdOutput) ToGooglePrivacyDlpV2EntityIdOutput() GooglePrivacyDlpV2EntityIdOutput {
	return o
}

func (o GooglePrivacyDlpV2EntityIdOutput) ToGooglePrivacyDlpV2EntityIdOutputWithContext(ctx context.Context) GooglePrivacyDlpV2EntityIdOutput {
	return o
}

func (o GooglePrivacyDlpV2EntityIdOutput) ToGooglePrivacyDlpV2EntityIdPtrOutput() GooglePrivacyDlpV2EntityIdPtrOutput {
	return o.ToGooglePrivacyDlpV2EntityIdPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2EntityIdOutput) ToGooglePrivacyDlpV2EntityIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2EntityIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2EntityId) *GooglePrivacyDlpV2EntityId {
		return &v
	}).(GooglePrivacyDlpV2EntityIdPtrOutput)
}

// Composite key indicating which field contains the entity identifier.
func (o GooglePrivacyDlpV2EntityIdOutput) Field() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2EntityId) *GooglePrivacyDlpV2FieldId { return v.Field }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

type GooglePrivacyDlpV2EntityIdPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2EntityIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2EntityId)(nil)).Elem()
}

func (o GooglePrivacyDlpV2EntityIdPtrOutput) ToGooglePrivacyDlpV2EntityIdPtrOutput() GooglePrivacyDlpV2EntityIdPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2EntityIdPtrOutput) ToGooglePrivacyDlpV2EntityIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2EntityIdPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2EntityIdPtrOutput) Elem() GooglePrivacyDlpV2EntityIdOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2EntityId) GooglePrivacyDlpV2EntityId {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2EntityId
		return ret
	}).(GooglePrivacyDlpV2EntityIdOutput)
}

// Composite key indicating which field contains the entity identifier.
func (o GooglePrivacyDlpV2EntityIdPtrOutput) Field() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2EntityId) *GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.Field
	}).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// An entity in a dataset is a field or set of fields that correspond to a single person. For example, in medical records the `EntityId` might be a patient identifier, or for financial records it might be an account identifier. This message is used when generalizations or analysis must take into account that multiple rows correspond to the same entity.
type GooglePrivacyDlpV2EntityIdResponse struct {
	// Composite key indicating which field contains the entity identifier.
	Field GooglePrivacyDlpV2FieldIdResponse `pulumi:"field"`
}

// An entity in a dataset is a field or set of fields that correspond to a single person. For example, in medical records the `EntityId` might be a patient identifier, or for financial records it might be an account identifier. This message is used when generalizations or analysis must take into account that multiple rows correspond to the same entity.
type GooglePrivacyDlpV2EntityIdResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2EntityIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2EntityIdResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2EntityIdResponseOutput) ToGooglePrivacyDlpV2EntityIdResponseOutput() GooglePrivacyDlpV2EntityIdResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2EntityIdResponseOutput) ToGooglePrivacyDlpV2EntityIdResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2EntityIdResponseOutput {
	return o
}

// Composite key indicating which field contains the entity identifier.
func (o GooglePrivacyDlpV2EntityIdResponseOutput) Field() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2EntityIdResponse) GooglePrivacyDlpV2FieldIdResponse { return v.Field }).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// Details information about an error encountered during job execution or the results of an unsuccessful activation of the JobTrigger.
type GooglePrivacyDlpV2ErrorResponse struct {
	// Detailed error codes and messages.
	Details GoogleRpcStatusResponse `pulumi:"details"`
	// The times the error occurred. List includes the oldest timestamp and the last 9 timestamps.
	Timestamps []string `pulumi:"timestamps"`
}

// Details information about an error encountered during job execution or the results of an unsuccessful activation of the JobTrigger.
type GooglePrivacyDlpV2ErrorResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ErrorResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ErrorResponseOutput) ToGooglePrivacyDlpV2ErrorResponseOutput() GooglePrivacyDlpV2ErrorResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ErrorResponseOutput) ToGooglePrivacyDlpV2ErrorResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ErrorResponseOutput {
	return o
}

// Detailed error codes and messages.
func (o GooglePrivacyDlpV2ErrorResponseOutput) Details() GoogleRpcStatusResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ErrorResponse) GoogleRpcStatusResponse { return v.Details }).(GoogleRpcStatusResponseOutput)
}

// The times the error occurred. List includes the oldest timestamp and the last 9 timestamps.
func (o GooglePrivacyDlpV2ErrorResponseOutput) Timestamps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ErrorResponse) []string { return v.Timestamps }).(pulumi.StringArrayOutput)
}

type GooglePrivacyDlpV2ErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2ErrorResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ErrorResponseArrayOutput) ToGooglePrivacyDlpV2ErrorResponseArrayOutput() GooglePrivacyDlpV2ErrorResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ErrorResponseArrayOutput) ToGooglePrivacyDlpV2ErrorResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ErrorResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ErrorResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2ErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2ErrorResponse {
		return vs[0].([]GooglePrivacyDlpV2ErrorResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2ErrorResponseOutput)
}

// The rule to exclude findings based on a hotword. For record inspection of tables, column names are considered hotwords. An example of this is to exclude a finding if it belongs to a BigQuery column that matches a specific pattern.
type GooglePrivacyDlpV2ExcludeByHotword struct {
	// Regular expression pattern defining what qualifies as a hotword.
	HotwordRegex *GooglePrivacyDlpV2Regex `pulumi:"hotwordRegex"`
	// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The windowBefore property in proximity should be set to 1 if the hotword needs to be included in a column header.
	Proximity *GooglePrivacyDlpV2Proximity `pulumi:"proximity"`
}

// GooglePrivacyDlpV2ExcludeByHotwordInput is an input type that accepts GooglePrivacyDlpV2ExcludeByHotwordArgs and GooglePrivacyDlpV2ExcludeByHotwordOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ExcludeByHotwordInput` via:
//
//	GooglePrivacyDlpV2ExcludeByHotwordArgs{...}
type GooglePrivacyDlpV2ExcludeByHotwordInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ExcludeByHotwordOutput() GooglePrivacyDlpV2ExcludeByHotwordOutput
	ToGooglePrivacyDlpV2ExcludeByHotwordOutputWithContext(context.Context) GooglePrivacyDlpV2ExcludeByHotwordOutput
}

// The rule to exclude findings based on a hotword. For record inspection of tables, column names are considered hotwords. An example of this is to exclude a finding if it belongs to a BigQuery column that matches a specific pattern.
type GooglePrivacyDlpV2ExcludeByHotwordArgs struct {
	// Regular expression pattern defining what qualifies as a hotword.
	HotwordRegex GooglePrivacyDlpV2RegexPtrInput `pulumi:"hotwordRegex"`
	// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The windowBefore property in proximity should be set to 1 if the hotword needs to be included in a column header.
	Proximity GooglePrivacyDlpV2ProximityPtrInput `pulumi:"proximity"`
}

func (GooglePrivacyDlpV2ExcludeByHotwordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExcludeByHotword)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ExcludeByHotwordArgs) ToGooglePrivacyDlpV2ExcludeByHotwordOutput() GooglePrivacyDlpV2ExcludeByHotwordOutput {
	return i.ToGooglePrivacyDlpV2ExcludeByHotwordOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ExcludeByHotwordArgs) ToGooglePrivacyDlpV2ExcludeByHotwordOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeByHotwordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExcludeByHotwordOutput)
}

func (i GooglePrivacyDlpV2ExcludeByHotwordArgs) ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutput() GooglePrivacyDlpV2ExcludeByHotwordPtrOutput {
	return i.ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ExcludeByHotwordArgs) ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeByHotwordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExcludeByHotwordOutput).ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ExcludeByHotwordPtrInput is an input type that accepts GooglePrivacyDlpV2ExcludeByHotwordArgs, GooglePrivacyDlpV2ExcludeByHotwordPtr and GooglePrivacyDlpV2ExcludeByHotwordPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ExcludeByHotwordPtrInput` via:
//
//	        GooglePrivacyDlpV2ExcludeByHotwordArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ExcludeByHotwordPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutput() GooglePrivacyDlpV2ExcludeByHotwordPtrOutput
	ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ExcludeByHotwordPtrOutput
}

type googlePrivacyDlpV2ExcludeByHotwordPtrType GooglePrivacyDlpV2ExcludeByHotwordArgs

func GooglePrivacyDlpV2ExcludeByHotwordPtr(v *GooglePrivacyDlpV2ExcludeByHotwordArgs) GooglePrivacyDlpV2ExcludeByHotwordPtrInput {
	return (*googlePrivacyDlpV2ExcludeByHotwordPtrType)(v)
}

func (*googlePrivacyDlpV2ExcludeByHotwordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ExcludeByHotword)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ExcludeByHotwordPtrType) ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutput() GooglePrivacyDlpV2ExcludeByHotwordPtrOutput {
	return i.ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ExcludeByHotwordPtrType) ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeByHotwordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExcludeByHotwordPtrOutput)
}

// The rule to exclude findings based on a hotword. For record inspection of tables, column names are considered hotwords. An example of this is to exclude a finding if it belongs to a BigQuery column that matches a specific pattern.
type GooglePrivacyDlpV2ExcludeByHotwordOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExcludeByHotwordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExcludeByHotword)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExcludeByHotwordOutput) ToGooglePrivacyDlpV2ExcludeByHotwordOutput() GooglePrivacyDlpV2ExcludeByHotwordOutput {
	return o
}

func (o GooglePrivacyDlpV2ExcludeByHotwordOutput) ToGooglePrivacyDlpV2ExcludeByHotwordOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeByHotwordOutput {
	return o
}

func (o GooglePrivacyDlpV2ExcludeByHotwordOutput) ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutput() GooglePrivacyDlpV2ExcludeByHotwordPtrOutput {
	return o.ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ExcludeByHotwordOutput) ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeByHotwordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2ExcludeByHotword) *GooglePrivacyDlpV2ExcludeByHotword {
		return &v
	}).(GooglePrivacyDlpV2ExcludeByHotwordPtrOutput)
}

// Regular expression pattern defining what qualifies as a hotword.
func (o GooglePrivacyDlpV2ExcludeByHotwordOutput) HotwordRegex() GooglePrivacyDlpV2RegexPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExcludeByHotword) *GooglePrivacyDlpV2Regex { return v.HotwordRegex }).(GooglePrivacyDlpV2RegexPtrOutput)
}

// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The windowBefore property in proximity should be set to 1 if the hotword needs to be included in a column header.
func (o GooglePrivacyDlpV2ExcludeByHotwordOutput) Proximity() GooglePrivacyDlpV2ProximityPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExcludeByHotword) *GooglePrivacyDlpV2Proximity { return v.Proximity }).(GooglePrivacyDlpV2ProximityPtrOutput)
}

type GooglePrivacyDlpV2ExcludeByHotwordPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExcludeByHotwordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ExcludeByHotword)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExcludeByHotwordPtrOutput) ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutput() GooglePrivacyDlpV2ExcludeByHotwordPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ExcludeByHotwordPtrOutput) ToGooglePrivacyDlpV2ExcludeByHotwordPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeByHotwordPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ExcludeByHotwordPtrOutput) Elem() GooglePrivacyDlpV2ExcludeByHotwordOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExcludeByHotword) GooglePrivacyDlpV2ExcludeByHotword {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2ExcludeByHotword
		return ret
	}).(GooglePrivacyDlpV2ExcludeByHotwordOutput)
}

// Regular expression pattern defining what qualifies as a hotword.
func (o GooglePrivacyDlpV2ExcludeByHotwordPtrOutput) HotwordRegex() GooglePrivacyDlpV2RegexPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExcludeByHotword) *GooglePrivacyDlpV2Regex {
		if v == nil {
			return nil
		}
		return v.HotwordRegex
	}).(GooglePrivacyDlpV2RegexPtrOutput)
}

// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The windowBefore property in proximity should be set to 1 if the hotword needs to be included in a column header.
func (o GooglePrivacyDlpV2ExcludeByHotwordPtrOutput) Proximity() GooglePrivacyDlpV2ProximityPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExcludeByHotword) *GooglePrivacyDlpV2Proximity {
		if v == nil {
			return nil
		}
		return v.Proximity
	}).(GooglePrivacyDlpV2ProximityPtrOutput)
}

// The rule to exclude findings based on a hotword. For record inspection of tables, column names are considered hotwords. An example of this is to exclude a finding if it belongs to a BigQuery column that matches a specific pattern.
type GooglePrivacyDlpV2ExcludeByHotwordResponse struct {
	// Regular expression pattern defining what qualifies as a hotword.
	HotwordRegex GooglePrivacyDlpV2RegexResponse `pulumi:"hotwordRegex"`
	// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The windowBefore property in proximity should be set to 1 if the hotword needs to be included in a column header.
	Proximity GooglePrivacyDlpV2ProximityResponse `pulumi:"proximity"`
}

// The rule to exclude findings based on a hotword. For record inspection of tables, column names are considered hotwords. An example of this is to exclude a finding if it belongs to a BigQuery column that matches a specific pattern.
type GooglePrivacyDlpV2ExcludeByHotwordResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExcludeByHotwordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExcludeByHotwordResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExcludeByHotwordResponseOutput) ToGooglePrivacyDlpV2ExcludeByHotwordResponseOutput() GooglePrivacyDlpV2ExcludeByHotwordResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ExcludeByHotwordResponseOutput) ToGooglePrivacyDlpV2ExcludeByHotwordResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeByHotwordResponseOutput {
	return o
}

// Regular expression pattern defining what qualifies as a hotword.
func (o GooglePrivacyDlpV2ExcludeByHotwordResponseOutput) HotwordRegex() GooglePrivacyDlpV2RegexResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExcludeByHotwordResponse) GooglePrivacyDlpV2RegexResponse {
		return v.HotwordRegex
	}).(GooglePrivacyDlpV2RegexResponseOutput)
}

// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The windowBefore property in proximity should be set to 1 if the hotword needs to be included in a column header.
func (o GooglePrivacyDlpV2ExcludeByHotwordResponseOutput) Proximity() GooglePrivacyDlpV2ProximityResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExcludeByHotwordResponse) GooglePrivacyDlpV2ProximityResponse {
		return v.Proximity
	}).(GooglePrivacyDlpV2ProximityResponseOutput)
}

// List of excluded infoTypes.
type GooglePrivacyDlpV2ExcludeInfoTypes struct {
	// InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"`and`exclusion_rule`containing`exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address.
	InfoTypes []GooglePrivacyDlpV2InfoType `pulumi:"infoTypes"`
}

// GooglePrivacyDlpV2ExcludeInfoTypesInput is an input type that accepts GooglePrivacyDlpV2ExcludeInfoTypesArgs and GooglePrivacyDlpV2ExcludeInfoTypesOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ExcludeInfoTypesInput` via:
//
//	GooglePrivacyDlpV2ExcludeInfoTypesArgs{...}
type GooglePrivacyDlpV2ExcludeInfoTypesInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ExcludeInfoTypesOutput() GooglePrivacyDlpV2ExcludeInfoTypesOutput
	ToGooglePrivacyDlpV2ExcludeInfoTypesOutputWithContext(context.Context) GooglePrivacyDlpV2ExcludeInfoTypesOutput
}

// List of excluded infoTypes.
type GooglePrivacyDlpV2ExcludeInfoTypesArgs struct {
	// InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"`and`exclusion_rule`containing`exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address.
	InfoTypes GooglePrivacyDlpV2InfoTypeArrayInput `pulumi:"infoTypes"`
}

func (GooglePrivacyDlpV2ExcludeInfoTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExcludeInfoTypes)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ExcludeInfoTypesArgs) ToGooglePrivacyDlpV2ExcludeInfoTypesOutput() GooglePrivacyDlpV2ExcludeInfoTypesOutput {
	return i.ToGooglePrivacyDlpV2ExcludeInfoTypesOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ExcludeInfoTypesArgs) ToGooglePrivacyDlpV2ExcludeInfoTypesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeInfoTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExcludeInfoTypesOutput)
}

func (i GooglePrivacyDlpV2ExcludeInfoTypesArgs) ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutput() GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput {
	return i.ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ExcludeInfoTypesArgs) ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExcludeInfoTypesOutput).ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ExcludeInfoTypesPtrInput is an input type that accepts GooglePrivacyDlpV2ExcludeInfoTypesArgs, GooglePrivacyDlpV2ExcludeInfoTypesPtr and GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ExcludeInfoTypesPtrInput` via:
//
//	        GooglePrivacyDlpV2ExcludeInfoTypesArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ExcludeInfoTypesPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutput() GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput
	ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput
}

type googlePrivacyDlpV2ExcludeInfoTypesPtrType GooglePrivacyDlpV2ExcludeInfoTypesArgs

func GooglePrivacyDlpV2ExcludeInfoTypesPtr(v *GooglePrivacyDlpV2ExcludeInfoTypesArgs) GooglePrivacyDlpV2ExcludeInfoTypesPtrInput {
	return (*googlePrivacyDlpV2ExcludeInfoTypesPtrType)(v)
}

func (*googlePrivacyDlpV2ExcludeInfoTypesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ExcludeInfoTypes)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ExcludeInfoTypesPtrType) ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutput() GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput {
	return i.ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ExcludeInfoTypesPtrType) ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput)
}

// List of excluded infoTypes.
type GooglePrivacyDlpV2ExcludeInfoTypesOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExcludeInfoTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExcludeInfoTypes)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExcludeInfoTypesOutput) ToGooglePrivacyDlpV2ExcludeInfoTypesOutput() GooglePrivacyDlpV2ExcludeInfoTypesOutput {
	return o
}

func (o GooglePrivacyDlpV2ExcludeInfoTypesOutput) ToGooglePrivacyDlpV2ExcludeInfoTypesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeInfoTypesOutput {
	return o
}

func (o GooglePrivacyDlpV2ExcludeInfoTypesOutput) ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutput() GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput {
	return o.ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ExcludeInfoTypesOutput) ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2ExcludeInfoTypes) *GooglePrivacyDlpV2ExcludeInfoTypes {
		return &v
	}).(GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput)
}

// InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"`and`exclusion_rule`containing`exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address.
func (o GooglePrivacyDlpV2ExcludeInfoTypesOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExcludeInfoTypes) []GooglePrivacyDlpV2InfoType { return v.InfoTypes }).(GooglePrivacyDlpV2InfoTypeArrayOutput)
}

type GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ExcludeInfoTypes)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput) ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutput() GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput) ToGooglePrivacyDlpV2ExcludeInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput) Elem() GooglePrivacyDlpV2ExcludeInfoTypesOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExcludeInfoTypes) GooglePrivacyDlpV2ExcludeInfoTypes {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2ExcludeInfoTypes
		return ret
	}).(GooglePrivacyDlpV2ExcludeInfoTypesOutput)
}

// InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"`and`exclusion_rule`containing`exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address.
func (o GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExcludeInfoTypes) []GooglePrivacyDlpV2InfoType {
		if v == nil {
			return nil
		}
		return v.InfoTypes
	}).(GooglePrivacyDlpV2InfoTypeArrayOutput)
}

// List of excluded infoTypes.
type GooglePrivacyDlpV2ExcludeInfoTypesResponse struct {
	// InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"`and`exclusion_rule`containing`exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address.
	InfoTypes []GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoTypes"`
}

// List of excluded infoTypes.
type GooglePrivacyDlpV2ExcludeInfoTypesResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExcludeInfoTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExcludeInfoTypesResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExcludeInfoTypesResponseOutput) ToGooglePrivacyDlpV2ExcludeInfoTypesResponseOutput() GooglePrivacyDlpV2ExcludeInfoTypesResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ExcludeInfoTypesResponseOutput) ToGooglePrivacyDlpV2ExcludeInfoTypesResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExcludeInfoTypesResponseOutput {
	return o
}

// InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"`and`exclusion_rule`containing`exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address.
func (o GooglePrivacyDlpV2ExcludeInfoTypesResponseOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExcludeInfoTypesResponse) []GooglePrivacyDlpV2InfoTypeResponse {
		return v.InfoTypes
	}).(GooglePrivacyDlpV2InfoTypeResponseArrayOutput)
}

// The rule that specifies conditions when findings of infoTypes specified in `InspectionRuleSet` are removed from results.
type GooglePrivacyDlpV2ExclusionRule struct {
	// Dictionary which defines the rule.
	Dictionary *GooglePrivacyDlpV2Dictionary `pulumi:"dictionary"`
	// Drop if the hotword rule is contained in the proximate context. For tabular data, the context includes the column name.
	ExcludeByHotword *GooglePrivacyDlpV2ExcludeByHotword `pulumi:"excludeByHotword"`
	// Set of infoTypes for which findings would affect this rule.
	ExcludeInfoTypes *GooglePrivacyDlpV2ExcludeInfoTypes `pulumi:"excludeInfoTypes"`
	// How the rule is applied, see MatchingType documentation for details.
	MatchingType *GooglePrivacyDlpV2ExclusionRuleMatchingType `pulumi:"matchingType"`
	// Regular expression which defines the rule.
	Regex *GooglePrivacyDlpV2Regex `pulumi:"regex"`
}

// GooglePrivacyDlpV2ExclusionRuleInput is an input type that accepts GooglePrivacyDlpV2ExclusionRuleArgs and GooglePrivacyDlpV2ExclusionRuleOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ExclusionRuleInput` via:
//
//	GooglePrivacyDlpV2ExclusionRuleArgs{...}
type GooglePrivacyDlpV2ExclusionRuleInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ExclusionRuleOutput() GooglePrivacyDlpV2ExclusionRuleOutput
	ToGooglePrivacyDlpV2ExclusionRuleOutputWithContext(context.Context) GooglePrivacyDlpV2ExclusionRuleOutput
}

// The rule that specifies conditions when findings of infoTypes specified in `InspectionRuleSet` are removed from results.
type GooglePrivacyDlpV2ExclusionRuleArgs struct {
	// Dictionary which defines the rule.
	Dictionary GooglePrivacyDlpV2DictionaryPtrInput `pulumi:"dictionary"`
	// Drop if the hotword rule is contained in the proximate context. For tabular data, the context includes the column name.
	ExcludeByHotword GooglePrivacyDlpV2ExcludeByHotwordPtrInput `pulumi:"excludeByHotword"`
	// Set of infoTypes for which findings would affect this rule.
	ExcludeInfoTypes GooglePrivacyDlpV2ExcludeInfoTypesPtrInput `pulumi:"excludeInfoTypes"`
	// How the rule is applied, see MatchingType documentation for details.
	MatchingType GooglePrivacyDlpV2ExclusionRuleMatchingTypePtrInput `pulumi:"matchingType"`
	// Regular expression which defines the rule.
	Regex GooglePrivacyDlpV2RegexPtrInput `pulumi:"regex"`
}

func (GooglePrivacyDlpV2ExclusionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExclusionRule)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ExclusionRuleArgs) ToGooglePrivacyDlpV2ExclusionRuleOutput() GooglePrivacyDlpV2ExclusionRuleOutput {
	return i.ToGooglePrivacyDlpV2ExclusionRuleOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ExclusionRuleArgs) ToGooglePrivacyDlpV2ExclusionRuleOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExclusionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExclusionRuleOutput)
}

func (i GooglePrivacyDlpV2ExclusionRuleArgs) ToGooglePrivacyDlpV2ExclusionRulePtrOutput() GooglePrivacyDlpV2ExclusionRulePtrOutput {
	return i.ToGooglePrivacyDlpV2ExclusionRulePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ExclusionRuleArgs) ToGooglePrivacyDlpV2ExclusionRulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExclusionRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExclusionRuleOutput).ToGooglePrivacyDlpV2ExclusionRulePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ExclusionRulePtrInput is an input type that accepts GooglePrivacyDlpV2ExclusionRuleArgs, GooglePrivacyDlpV2ExclusionRulePtr and GooglePrivacyDlpV2ExclusionRulePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ExclusionRulePtrInput` via:
//
//	        GooglePrivacyDlpV2ExclusionRuleArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ExclusionRulePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ExclusionRulePtrOutput() GooglePrivacyDlpV2ExclusionRulePtrOutput
	ToGooglePrivacyDlpV2ExclusionRulePtrOutputWithContext(context.Context) GooglePrivacyDlpV2ExclusionRulePtrOutput
}

type googlePrivacyDlpV2ExclusionRulePtrType GooglePrivacyDlpV2ExclusionRuleArgs

func GooglePrivacyDlpV2ExclusionRulePtr(v *GooglePrivacyDlpV2ExclusionRuleArgs) GooglePrivacyDlpV2ExclusionRulePtrInput {
	return (*googlePrivacyDlpV2ExclusionRulePtrType)(v)
}

func (*googlePrivacyDlpV2ExclusionRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ExclusionRule)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ExclusionRulePtrType) ToGooglePrivacyDlpV2ExclusionRulePtrOutput() GooglePrivacyDlpV2ExclusionRulePtrOutput {
	return i.ToGooglePrivacyDlpV2ExclusionRulePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ExclusionRulePtrType) ToGooglePrivacyDlpV2ExclusionRulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExclusionRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExclusionRulePtrOutput)
}

// The rule that specifies conditions when findings of infoTypes specified in `InspectionRuleSet` are removed from results.
type GooglePrivacyDlpV2ExclusionRuleOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExclusionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExclusionRule)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExclusionRuleOutput) ToGooglePrivacyDlpV2ExclusionRuleOutput() GooglePrivacyDlpV2ExclusionRuleOutput {
	return o
}

func (o GooglePrivacyDlpV2ExclusionRuleOutput) ToGooglePrivacyDlpV2ExclusionRuleOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExclusionRuleOutput {
	return o
}

func (o GooglePrivacyDlpV2ExclusionRuleOutput) ToGooglePrivacyDlpV2ExclusionRulePtrOutput() GooglePrivacyDlpV2ExclusionRulePtrOutput {
	return o.ToGooglePrivacyDlpV2ExclusionRulePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ExclusionRuleOutput) ToGooglePrivacyDlpV2ExclusionRulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExclusionRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2ExclusionRule {
		return &v
	}).(GooglePrivacyDlpV2ExclusionRulePtrOutput)
}

// Dictionary which defines the rule.
func (o GooglePrivacyDlpV2ExclusionRuleOutput) Dictionary() GooglePrivacyDlpV2DictionaryPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2Dictionary { return v.Dictionary }).(GooglePrivacyDlpV2DictionaryPtrOutput)
}

// Drop if the hotword rule is contained in the proximate context. For tabular data, the context includes the column name.
func (o GooglePrivacyDlpV2ExclusionRuleOutput) ExcludeByHotword() GooglePrivacyDlpV2ExcludeByHotwordPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2ExcludeByHotword { return v.ExcludeByHotword }).(GooglePrivacyDlpV2ExcludeByHotwordPtrOutput)
}

// Set of infoTypes for which findings would affect this rule.
func (o GooglePrivacyDlpV2ExclusionRuleOutput) ExcludeInfoTypes() GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2ExcludeInfoTypes { return v.ExcludeInfoTypes }).(GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput)
}

// How the rule is applied, see MatchingType documentation for details.
func (o GooglePrivacyDlpV2ExclusionRuleOutput) MatchingType() GooglePrivacyDlpV2ExclusionRuleMatchingTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2ExclusionRuleMatchingType {
		return v.MatchingType
	}).(GooglePrivacyDlpV2ExclusionRuleMatchingTypePtrOutput)
}

// Regular expression which defines the rule.
func (o GooglePrivacyDlpV2ExclusionRuleOutput) Regex() GooglePrivacyDlpV2RegexPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2Regex { return v.Regex }).(GooglePrivacyDlpV2RegexPtrOutput)
}

type GooglePrivacyDlpV2ExclusionRulePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExclusionRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ExclusionRule)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExclusionRulePtrOutput) ToGooglePrivacyDlpV2ExclusionRulePtrOutput() GooglePrivacyDlpV2ExclusionRulePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ExclusionRulePtrOutput) ToGooglePrivacyDlpV2ExclusionRulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExclusionRulePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ExclusionRulePtrOutput) Elem() GooglePrivacyDlpV2ExclusionRuleOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExclusionRule) GooglePrivacyDlpV2ExclusionRule {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2ExclusionRule
		return ret
	}).(GooglePrivacyDlpV2ExclusionRuleOutput)
}

// Dictionary which defines the rule.
func (o GooglePrivacyDlpV2ExclusionRulePtrOutput) Dictionary() GooglePrivacyDlpV2DictionaryPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2Dictionary {
		if v == nil {
			return nil
		}
		return v.Dictionary
	}).(GooglePrivacyDlpV2DictionaryPtrOutput)
}

// Drop if the hotword rule is contained in the proximate context. For tabular data, the context includes the column name.
func (o GooglePrivacyDlpV2ExclusionRulePtrOutput) ExcludeByHotword() GooglePrivacyDlpV2ExcludeByHotwordPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2ExcludeByHotword {
		if v == nil {
			return nil
		}
		return v.ExcludeByHotword
	}).(GooglePrivacyDlpV2ExcludeByHotwordPtrOutput)
}

// Set of infoTypes for which findings would affect this rule.
func (o GooglePrivacyDlpV2ExclusionRulePtrOutput) ExcludeInfoTypes() GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2ExcludeInfoTypes {
		if v == nil {
			return nil
		}
		return v.ExcludeInfoTypes
	}).(GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput)
}

// How the rule is applied, see MatchingType documentation for details.
func (o GooglePrivacyDlpV2ExclusionRulePtrOutput) MatchingType() GooglePrivacyDlpV2ExclusionRuleMatchingTypePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2ExclusionRuleMatchingType {
		if v == nil {
			return nil
		}
		return v.MatchingType
	}).(GooglePrivacyDlpV2ExclusionRuleMatchingTypePtrOutput)
}

// Regular expression which defines the rule.
func (o GooglePrivacyDlpV2ExclusionRulePtrOutput) Regex() GooglePrivacyDlpV2RegexPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ExclusionRule) *GooglePrivacyDlpV2Regex {
		if v == nil {
			return nil
		}
		return v.Regex
	}).(GooglePrivacyDlpV2RegexPtrOutput)
}

// The rule that specifies conditions when findings of infoTypes specified in `InspectionRuleSet` are removed from results.
type GooglePrivacyDlpV2ExclusionRuleResponse struct {
	// Dictionary which defines the rule.
	Dictionary GooglePrivacyDlpV2DictionaryResponse `pulumi:"dictionary"`
	// Drop if the hotword rule is contained in the proximate context. For tabular data, the context includes the column name.
	ExcludeByHotword GooglePrivacyDlpV2ExcludeByHotwordResponse `pulumi:"excludeByHotword"`
	// Set of infoTypes for which findings would affect this rule.
	ExcludeInfoTypes GooglePrivacyDlpV2ExcludeInfoTypesResponse `pulumi:"excludeInfoTypes"`
	// How the rule is applied, see MatchingType documentation for details.
	MatchingType string `pulumi:"matchingType"`
	// Regular expression which defines the rule.
	Regex GooglePrivacyDlpV2RegexResponse `pulumi:"regex"`
}

// The rule that specifies conditions when findings of infoTypes specified in `InspectionRuleSet` are removed from results.
type GooglePrivacyDlpV2ExclusionRuleResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExclusionRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExclusionRuleResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExclusionRuleResponseOutput) ToGooglePrivacyDlpV2ExclusionRuleResponseOutput() GooglePrivacyDlpV2ExclusionRuleResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ExclusionRuleResponseOutput) ToGooglePrivacyDlpV2ExclusionRuleResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExclusionRuleResponseOutput {
	return o
}

// Dictionary which defines the rule.
func (o GooglePrivacyDlpV2ExclusionRuleResponseOutput) Dictionary() GooglePrivacyDlpV2DictionaryResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExclusionRuleResponse) GooglePrivacyDlpV2DictionaryResponse {
		return v.Dictionary
	}).(GooglePrivacyDlpV2DictionaryResponseOutput)
}

// Drop if the hotword rule is contained in the proximate context. For tabular data, the context includes the column name.
func (o GooglePrivacyDlpV2ExclusionRuleResponseOutput) ExcludeByHotword() GooglePrivacyDlpV2ExcludeByHotwordResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExclusionRuleResponse) GooglePrivacyDlpV2ExcludeByHotwordResponse {
		return v.ExcludeByHotword
	}).(GooglePrivacyDlpV2ExcludeByHotwordResponseOutput)
}

// Set of infoTypes for which findings would affect this rule.
func (o GooglePrivacyDlpV2ExclusionRuleResponseOutput) ExcludeInfoTypes() GooglePrivacyDlpV2ExcludeInfoTypesResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExclusionRuleResponse) GooglePrivacyDlpV2ExcludeInfoTypesResponse {
		return v.ExcludeInfoTypes
	}).(GooglePrivacyDlpV2ExcludeInfoTypesResponseOutput)
}

// How the rule is applied, see MatchingType documentation for details.
func (o GooglePrivacyDlpV2ExclusionRuleResponseOutput) MatchingType() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExclusionRuleResponse) string { return v.MatchingType }).(pulumi.StringOutput)
}

// Regular expression which defines the rule.
func (o GooglePrivacyDlpV2ExclusionRuleResponseOutput) Regex() GooglePrivacyDlpV2RegexResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExclusionRuleResponse) GooglePrivacyDlpV2RegexResponse { return v.Regex }).(GooglePrivacyDlpV2RegexResponseOutput)
}

// If set, the detailed data profiles will be persisted to the location of your choice whenever updated.
type GooglePrivacyDlpV2Export struct {
	// Store all table and column profiles in an existing table or a new table in an existing dataset. Each re-generation will result in a new row in BigQuery.
	ProfileTable *GooglePrivacyDlpV2BigQueryTable `pulumi:"profileTable"`
}

// GooglePrivacyDlpV2ExportInput is an input type that accepts GooglePrivacyDlpV2ExportArgs and GooglePrivacyDlpV2ExportOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ExportInput` via:
//
//	GooglePrivacyDlpV2ExportArgs{...}
type GooglePrivacyDlpV2ExportInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ExportOutput() GooglePrivacyDlpV2ExportOutput
	ToGooglePrivacyDlpV2ExportOutputWithContext(context.Context) GooglePrivacyDlpV2ExportOutput
}

// If set, the detailed data profiles will be persisted to the location of your choice whenever updated.
type GooglePrivacyDlpV2ExportArgs struct {
	// Store all table and column profiles in an existing table or a new table in an existing dataset. Each re-generation will result in a new row in BigQuery.
	ProfileTable GooglePrivacyDlpV2BigQueryTablePtrInput `pulumi:"profileTable"`
}

func (GooglePrivacyDlpV2ExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Export)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ExportArgs) ToGooglePrivacyDlpV2ExportOutput() GooglePrivacyDlpV2ExportOutput {
	return i.ToGooglePrivacyDlpV2ExportOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ExportArgs) ToGooglePrivacyDlpV2ExportOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExportOutput)
}

func (i GooglePrivacyDlpV2ExportArgs) ToGooglePrivacyDlpV2ExportPtrOutput() GooglePrivacyDlpV2ExportPtrOutput {
	return i.ToGooglePrivacyDlpV2ExportPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ExportArgs) ToGooglePrivacyDlpV2ExportPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExportOutput).ToGooglePrivacyDlpV2ExportPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ExportPtrInput is an input type that accepts GooglePrivacyDlpV2ExportArgs, GooglePrivacyDlpV2ExportPtr and GooglePrivacyDlpV2ExportPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ExportPtrInput` via:
//
//	        GooglePrivacyDlpV2ExportArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ExportPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ExportPtrOutput() GooglePrivacyDlpV2ExportPtrOutput
	ToGooglePrivacyDlpV2ExportPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ExportPtrOutput
}

type googlePrivacyDlpV2ExportPtrType GooglePrivacyDlpV2ExportArgs

func GooglePrivacyDlpV2ExportPtr(v *GooglePrivacyDlpV2ExportArgs) GooglePrivacyDlpV2ExportPtrInput {
	return (*googlePrivacyDlpV2ExportPtrType)(v)
}

func (*googlePrivacyDlpV2ExportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Export)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ExportPtrType) ToGooglePrivacyDlpV2ExportPtrOutput() GooglePrivacyDlpV2ExportPtrOutput {
	return i.ToGooglePrivacyDlpV2ExportPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ExportPtrType) ToGooglePrivacyDlpV2ExportPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExportPtrOutput)
}

// If set, the detailed data profiles will be persisted to the location of your choice whenever updated.
type GooglePrivacyDlpV2ExportOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Export)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExportOutput) ToGooglePrivacyDlpV2ExportOutput() GooglePrivacyDlpV2ExportOutput {
	return o
}

func (o GooglePrivacyDlpV2ExportOutput) ToGooglePrivacyDlpV2ExportOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExportOutput {
	return o
}

func (o GooglePrivacyDlpV2ExportOutput) ToGooglePrivacyDlpV2ExportPtrOutput() GooglePrivacyDlpV2ExportPtrOutput {
	return o.ToGooglePrivacyDlpV2ExportPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ExportOutput) ToGooglePrivacyDlpV2ExportPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Export) *GooglePrivacyDlpV2Export {
		return &v
	}).(GooglePrivacyDlpV2ExportPtrOutput)
}

// Store all table and column profiles in an existing table or a new table in an existing dataset. Each re-generation will result in a new row in BigQuery.
func (o GooglePrivacyDlpV2ExportOutput) ProfileTable() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Export) *GooglePrivacyDlpV2BigQueryTable { return v.ProfileTable }).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

type GooglePrivacyDlpV2ExportPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Export)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExportPtrOutput) ToGooglePrivacyDlpV2ExportPtrOutput() GooglePrivacyDlpV2ExportPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ExportPtrOutput) ToGooglePrivacyDlpV2ExportPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExportPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ExportPtrOutput) Elem() GooglePrivacyDlpV2ExportOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Export) GooglePrivacyDlpV2Export {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Export
		return ret
	}).(GooglePrivacyDlpV2ExportOutput)
}

// Store all table and column profiles in an existing table or a new table in an existing dataset. Each re-generation will result in a new row in BigQuery.
func (o GooglePrivacyDlpV2ExportPtrOutput) ProfileTable() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Export) *GooglePrivacyDlpV2BigQueryTable {
		if v == nil {
			return nil
		}
		return v.ProfileTable
	}).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

// If set, the detailed data profiles will be persisted to the location of your choice whenever updated.
type GooglePrivacyDlpV2ExportResponse struct {
	// Store all table and column profiles in an existing table or a new table in an existing dataset. Each re-generation will result in a new row in BigQuery.
	ProfileTable GooglePrivacyDlpV2BigQueryTableResponse `pulumi:"profileTable"`
}

// If set, the detailed data profiles will be persisted to the location of your choice whenever updated.
type GooglePrivacyDlpV2ExportResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExportResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExportResponseOutput) ToGooglePrivacyDlpV2ExportResponseOutput() GooglePrivacyDlpV2ExportResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ExportResponseOutput) ToGooglePrivacyDlpV2ExportResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExportResponseOutput {
	return o
}

// Store all table and column profiles in an existing table or a new table in an existing dataset. Each re-generation will result in a new row in BigQuery.
func (o GooglePrivacyDlpV2ExportResponseOutput) ProfileTable() GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExportResponse) GooglePrivacyDlpV2BigQueryTableResponse {
		return v.ProfileTable
	}).(GooglePrivacyDlpV2BigQueryTableResponseOutput)
}

// An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2Expressions struct {
	// Conditions to apply to the expression.
	Conditions *GooglePrivacyDlpV2Conditions `pulumi:"conditions"`
	// The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
	LogicalOperator *GooglePrivacyDlpV2ExpressionsLogicalOperator `pulumi:"logicalOperator"`
}

// GooglePrivacyDlpV2ExpressionsInput is an input type that accepts GooglePrivacyDlpV2ExpressionsArgs and GooglePrivacyDlpV2ExpressionsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ExpressionsInput` via:
//
//	GooglePrivacyDlpV2ExpressionsArgs{...}
type GooglePrivacyDlpV2ExpressionsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ExpressionsOutput() GooglePrivacyDlpV2ExpressionsOutput
	ToGooglePrivacyDlpV2ExpressionsOutputWithContext(context.Context) GooglePrivacyDlpV2ExpressionsOutput
}

// An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2ExpressionsArgs struct {
	// Conditions to apply to the expression.
	Conditions GooglePrivacyDlpV2ConditionsPtrInput `pulumi:"conditions"`
	// The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
	LogicalOperator GooglePrivacyDlpV2ExpressionsLogicalOperatorPtrInput `pulumi:"logicalOperator"`
}

func (GooglePrivacyDlpV2ExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Expressions)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ExpressionsArgs) ToGooglePrivacyDlpV2ExpressionsOutput() GooglePrivacyDlpV2ExpressionsOutput {
	return i.ToGooglePrivacyDlpV2ExpressionsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ExpressionsArgs) ToGooglePrivacyDlpV2ExpressionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExpressionsOutput)
}

func (i GooglePrivacyDlpV2ExpressionsArgs) ToGooglePrivacyDlpV2ExpressionsPtrOutput() GooglePrivacyDlpV2ExpressionsPtrOutput {
	return i.ToGooglePrivacyDlpV2ExpressionsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ExpressionsArgs) ToGooglePrivacyDlpV2ExpressionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExpressionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExpressionsOutput).ToGooglePrivacyDlpV2ExpressionsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ExpressionsPtrInput is an input type that accepts GooglePrivacyDlpV2ExpressionsArgs, GooglePrivacyDlpV2ExpressionsPtr and GooglePrivacyDlpV2ExpressionsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ExpressionsPtrInput` via:
//
//	        GooglePrivacyDlpV2ExpressionsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ExpressionsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ExpressionsPtrOutput() GooglePrivacyDlpV2ExpressionsPtrOutput
	ToGooglePrivacyDlpV2ExpressionsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ExpressionsPtrOutput
}

type googlePrivacyDlpV2ExpressionsPtrType GooglePrivacyDlpV2ExpressionsArgs

func GooglePrivacyDlpV2ExpressionsPtr(v *GooglePrivacyDlpV2ExpressionsArgs) GooglePrivacyDlpV2ExpressionsPtrInput {
	return (*googlePrivacyDlpV2ExpressionsPtrType)(v)
}

func (*googlePrivacyDlpV2ExpressionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Expressions)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ExpressionsPtrType) ToGooglePrivacyDlpV2ExpressionsPtrOutput() GooglePrivacyDlpV2ExpressionsPtrOutput {
	return i.ToGooglePrivacyDlpV2ExpressionsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ExpressionsPtrType) ToGooglePrivacyDlpV2ExpressionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExpressionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ExpressionsPtrOutput)
}

// An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2ExpressionsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Expressions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExpressionsOutput) ToGooglePrivacyDlpV2ExpressionsOutput() GooglePrivacyDlpV2ExpressionsOutput {
	return o
}

func (o GooglePrivacyDlpV2ExpressionsOutput) ToGooglePrivacyDlpV2ExpressionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExpressionsOutput {
	return o
}

func (o GooglePrivacyDlpV2ExpressionsOutput) ToGooglePrivacyDlpV2ExpressionsPtrOutput() GooglePrivacyDlpV2ExpressionsPtrOutput {
	return o.ToGooglePrivacyDlpV2ExpressionsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ExpressionsOutput) ToGooglePrivacyDlpV2ExpressionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExpressionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Expressions) *GooglePrivacyDlpV2Expressions {
		return &v
	}).(GooglePrivacyDlpV2ExpressionsPtrOutput)
}

// Conditions to apply to the expression.
func (o GooglePrivacyDlpV2ExpressionsOutput) Conditions() GooglePrivacyDlpV2ConditionsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Expressions) *GooglePrivacyDlpV2Conditions { return v.Conditions }).(GooglePrivacyDlpV2ConditionsPtrOutput)
}

// The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
func (o GooglePrivacyDlpV2ExpressionsOutput) LogicalOperator() GooglePrivacyDlpV2ExpressionsLogicalOperatorPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Expressions) *GooglePrivacyDlpV2ExpressionsLogicalOperator {
		return v.LogicalOperator
	}).(GooglePrivacyDlpV2ExpressionsLogicalOperatorPtrOutput)
}

type GooglePrivacyDlpV2ExpressionsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExpressionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Expressions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExpressionsPtrOutput) ToGooglePrivacyDlpV2ExpressionsPtrOutput() GooglePrivacyDlpV2ExpressionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ExpressionsPtrOutput) ToGooglePrivacyDlpV2ExpressionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExpressionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ExpressionsPtrOutput) Elem() GooglePrivacyDlpV2ExpressionsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Expressions) GooglePrivacyDlpV2Expressions {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Expressions
		return ret
	}).(GooglePrivacyDlpV2ExpressionsOutput)
}

// Conditions to apply to the expression.
func (o GooglePrivacyDlpV2ExpressionsPtrOutput) Conditions() GooglePrivacyDlpV2ConditionsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Expressions) *GooglePrivacyDlpV2Conditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GooglePrivacyDlpV2ConditionsPtrOutput)
}

// The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
func (o GooglePrivacyDlpV2ExpressionsPtrOutput) LogicalOperator() GooglePrivacyDlpV2ExpressionsLogicalOperatorPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Expressions) *GooglePrivacyDlpV2ExpressionsLogicalOperator {
		if v == nil {
			return nil
		}
		return v.LogicalOperator
	}).(GooglePrivacyDlpV2ExpressionsLogicalOperatorPtrOutput)
}

// An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2ExpressionsResponse struct {
	// Conditions to apply to the expression.
	Conditions GooglePrivacyDlpV2ConditionsResponse `pulumi:"conditions"`
	// The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
	LogicalOperator string `pulumi:"logicalOperator"`
}

// An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2ExpressionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ExpressionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ExpressionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ExpressionsResponseOutput) ToGooglePrivacyDlpV2ExpressionsResponseOutput() GooglePrivacyDlpV2ExpressionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ExpressionsResponseOutput) ToGooglePrivacyDlpV2ExpressionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ExpressionsResponseOutput {
	return o
}

// Conditions to apply to the expression.
func (o GooglePrivacyDlpV2ExpressionsResponseOutput) Conditions() GooglePrivacyDlpV2ConditionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExpressionsResponse) GooglePrivacyDlpV2ConditionsResponse {
		return v.Conditions
	}).(GooglePrivacyDlpV2ConditionsResponseOutput)
}

// The operator to apply to the result of conditions. Default and currently only supported value is `AND`.
func (o GooglePrivacyDlpV2ExpressionsResponseOutput) LogicalOperator() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ExpressionsResponse) string { return v.LogicalOperator }).(pulumi.StringOutput)
}

// General identifier of a data field in a storage service.
type GooglePrivacyDlpV2FieldId struct {
	// Name describing the field.
	Name *string `pulumi:"name"`
}

// GooglePrivacyDlpV2FieldIdInput is an input type that accepts GooglePrivacyDlpV2FieldIdArgs and GooglePrivacyDlpV2FieldIdOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FieldIdInput` via:
//
//	GooglePrivacyDlpV2FieldIdArgs{...}
type GooglePrivacyDlpV2FieldIdInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FieldIdOutput() GooglePrivacyDlpV2FieldIdOutput
	ToGooglePrivacyDlpV2FieldIdOutputWithContext(context.Context) GooglePrivacyDlpV2FieldIdOutput
}

// General identifier of a data field in a storage service.
type GooglePrivacyDlpV2FieldIdArgs struct {
	// Name describing the field.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GooglePrivacyDlpV2FieldIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FieldId)(nil)).Elem()
}

func (i GooglePrivacyDlpV2FieldIdArgs) ToGooglePrivacyDlpV2FieldIdOutput() GooglePrivacyDlpV2FieldIdOutput {
	return i.ToGooglePrivacyDlpV2FieldIdOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FieldIdArgs) ToGooglePrivacyDlpV2FieldIdOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FieldIdOutput)
}

func (i GooglePrivacyDlpV2FieldIdArgs) ToGooglePrivacyDlpV2FieldIdPtrOutput() GooglePrivacyDlpV2FieldIdPtrOutput {
	return i.ToGooglePrivacyDlpV2FieldIdPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FieldIdArgs) ToGooglePrivacyDlpV2FieldIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FieldIdOutput).ToGooglePrivacyDlpV2FieldIdPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2FieldIdPtrInput is an input type that accepts GooglePrivacyDlpV2FieldIdArgs, GooglePrivacyDlpV2FieldIdPtr and GooglePrivacyDlpV2FieldIdPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FieldIdPtrInput` via:
//
//	        GooglePrivacyDlpV2FieldIdArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2FieldIdPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FieldIdPtrOutput() GooglePrivacyDlpV2FieldIdPtrOutput
	ToGooglePrivacyDlpV2FieldIdPtrOutputWithContext(context.Context) GooglePrivacyDlpV2FieldIdPtrOutput
}

type googlePrivacyDlpV2FieldIdPtrType GooglePrivacyDlpV2FieldIdArgs

func GooglePrivacyDlpV2FieldIdPtr(v *GooglePrivacyDlpV2FieldIdArgs) GooglePrivacyDlpV2FieldIdPtrInput {
	return (*googlePrivacyDlpV2FieldIdPtrType)(v)
}

func (*googlePrivacyDlpV2FieldIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2FieldId)(nil)).Elem()
}

func (i *googlePrivacyDlpV2FieldIdPtrType) ToGooglePrivacyDlpV2FieldIdPtrOutput() GooglePrivacyDlpV2FieldIdPtrOutput {
	return i.ToGooglePrivacyDlpV2FieldIdPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2FieldIdPtrType) ToGooglePrivacyDlpV2FieldIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// GooglePrivacyDlpV2FieldIdArrayInput is an input type that accepts GooglePrivacyDlpV2FieldIdArray and GooglePrivacyDlpV2FieldIdArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FieldIdArrayInput` via:
//
//	GooglePrivacyDlpV2FieldIdArray{ GooglePrivacyDlpV2FieldIdArgs{...} }
type GooglePrivacyDlpV2FieldIdArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FieldIdArrayOutput() GooglePrivacyDlpV2FieldIdArrayOutput
	ToGooglePrivacyDlpV2FieldIdArrayOutputWithContext(context.Context) GooglePrivacyDlpV2FieldIdArrayOutput
}

type GooglePrivacyDlpV2FieldIdArray []GooglePrivacyDlpV2FieldIdInput

func (GooglePrivacyDlpV2FieldIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2FieldId)(nil)).Elem()
}

func (i GooglePrivacyDlpV2FieldIdArray) ToGooglePrivacyDlpV2FieldIdArrayOutput() GooglePrivacyDlpV2FieldIdArrayOutput {
	return i.ToGooglePrivacyDlpV2FieldIdArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FieldIdArray) ToGooglePrivacyDlpV2FieldIdArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// General identifier of a data field in a storage service.
type GooglePrivacyDlpV2FieldIdOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FieldIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FieldId)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FieldIdOutput) ToGooglePrivacyDlpV2FieldIdOutput() GooglePrivacyDlpV2FieldIdOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldIdOutput) ToGooglePrivacyDlpV2FieldIdOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldIdOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldIdOutput) ToGooglePrivacyDlpV2FieldIdPtrOutput() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ToGooglePrivacyDlpV2FieldIdPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2FieldIdOutput) ToGooglePrivacyDlpV2FieldIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2FieldId) *GooglePrivacyDlpV2FieldId {
		return &v
	}).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// Name describing the field.
func (o GooglePrivacyDlpV2FieldIdOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FieldId) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2FieldIdPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FieldIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2FieldId)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FieldIdPtrOutput) ToGooglePrivacyDlpV2FieldIdPtrOutput() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldIdPtrOutput) ToGooglePrivacyDlpV2FieldIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldIdPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldIdPtrOutput) Elem() GooglePrivacyDlpV2FieldIdOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FieldId) GooglePrivacyDlpV2FieldId {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2FieldId
		return ret
	}).(GooglePrivacyDlpV2FieldIdOutput)
}

// Name describing the field.
func (o GooglePrivacyDlpV2FieldIdPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FieldId) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2FieldIdArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FieldIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2FieldId)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FieldIdArrayOutput) ToGooglePrivacyDlpV2FieldIdArrayOutput() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldIdArrayOutput) ToGooglePrivacyDlpV2FieldIdArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldIdArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldIdArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2FieldIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2FieldId {
		return vs[0].([]GooglePrivacyDlpV2FieldId)[vs[1].(int)]
	}).(GooglePrivacyDlpV2FieldIdOutput)
}

// General identifier of a data field in a storage service.
type GooglePrivacyDlpV2FieldIdResponse struct {
	// Name describing the field.
	Name string `pulumi:"name"`
}

// General identifier of a data field in a storage service.
type GooglePrivacyDlpV2FieldIdResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FieldIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FieldIdResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FieldIdResponseOutput) ToGooglePrivacyDlpV2FieldIdResponseOutput() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldIdResponseOutput) ToGooglePrivacyDlpV2FieldIdResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldIdResponseOutput {
	return o
}

// Name describing the field.
func (o GooglePrivacyDlpV2FieldIdResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FieldIdResponse) string { return v.Name }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2FieldIdResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FieldIdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2FieldIdResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FieldIdResponseArrayOutput) ToGooglePrivacyDlpV2FieldIdResponseArrayOutput() GooglePrivacyDlpV2FieldIdResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldIdResponseArrayOutput) ToGooglePrivacyDlpV2FieldIdResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldIdResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldIdResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2FieldIdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2FieldIdResponse {
		return vs[0].([]GooglePrivacyDlpV2FieldIdResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// The transformation to apply to the field.
type GooglePrivacyDlpV2FieldTransformation struct {
	// Only apply the transformation if the condition evaluates to true for the given `RecordCondition`. The conditions are allowed to reference fields that are not used in the actual transformation. Example Use Cases: - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85.
	Condition *GooglePrivacyDlpV2RecordCondition `pulumi:"condition"`
	// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
	Fields []GooglePrivacyDlpV2FieldId `pulumi:"fields"`
	// Treat the contents of the field as free text, and selectively transform content that matches an `InfoType`.
	InfoTypeTransformations *GooglePrivacyDlpV2InfoTypeTransformations `pulumi:"infoTypeTransformations"`
	// Apply the transformation to the entire field.
	PrimitiveTransformation *GooglePrivacyDlpV2PrimitiveTransformation `pulumi:"primitiveTransformation"`
}

// GooglePrivacyDlpV2FieldTransformationInput is an input type that accepts GooglePrivacyDlpV2FieldTransformationArgs and GooglePrivacyDlpV2FieldTransformationOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FieldTransformationInput` via:
//
//	GooglePrivacyDlpV2FieldTransformationArgs{...}
type GooglePrivacyDlpV2FieldTransformationInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FieldTransformationOutput() GooglePrivacyDlpV2FieldTransformationOutput
	ToGooglePrivacyDlpV2FieldTransformationOutputWithContext(context.Context) GooglePrivacyDlpV2FieldTransformationOutput
}

// The transformation to apply to the field.
type GooglePrivacyDlpV2FieldTransformationArgs struct {
	// Only apply the transformation if the condition evaluates to true for the given `RecordCondition`. The conditions are allowed to reference fields that are not used in the actual transformation. Example Use Cases: - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85.
	Condition GooglePrivacyDlpV2RecordConditionPtrInput `pulumi:"condition"`
	// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
	Fields GooglePrivacyDlpV2FieldIdArrayInput `pulumi:"fields"`
	// Treat the contents of the field as free text, and selectively transform content that matches an `InfoType`.
	InfoTypeTransformations GooglePrivacyDlpV2InfoTypeTransformationsPtrInput `pulumi:"infoTypeTransformations"`
	// Apply the transformation to the entire field.
	PrimitiveTransformation GooglePrivacyDlpV2PrimitiveTransformationPtrInput `pulumi:"primitiveTransformation"`
}

func (GooglePrivacyDlpV2FieldTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FieldTransformation)(nil)).Elem()
}

func (i GooglePrivacyDlpV2FieldTransformationArgs) ToGooglePrivacyDlpV2FieldTransformationOutput() GooglePrivacyDlpV2FieldTransformationOutput {
	return i.ToGooglePrivacyDlpV2FieldTransformationOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FieldTransformationArgs) ToGooglePrivacyDlpV2FieldTransformationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FieldTransformationOutput)
}

// GooglePrivacyDlpV2FieldTransformationArrayInput is an input type that accepts GooglePrivacyDlpV2FieldTransformationArray and GooglePrivacyDlpV2FieldTransformationArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FieldTransformationArrayInput` via:
//
//	GooglePrivacyDlpV2FieldTransformationArray{ GooglePrivacyDlpV2FieldTransformationArgs{...} }
type GooglePrivacyDlpV2FieldTransformationArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FieldTransformationArrayOutput() GooglePrivacyDlpV2FieldTransformationArrayOutput
	ToGooglePrivacyDlpV2FieldTransformationArrayOutputWithContext(context.Context) GooglePrivacyDlpV2FieldTransformationArrayOutput
}

type GooglePrivacyDlpV2FieldTransformationArray []GooglePrivacyDlpV2FieldTransformationInput

func (GooglePrivacyDlpV2FieldTransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2FieldTransformation)(nil)).Elem()
}

func (i GooglePrivacyDlpV2FieldTransformationArray) ToGooglePrivacyDlpV2FieldTransformationArrayOutput() GooglePrivacyDlpV2FieldTransformationArrayOutput {
	return i.ToGooglePrivacyDlpV2FieldTransformationArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FieldTransformationArray) ToGooglePrivacyDlpV2FieldTransformationArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldTransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FieldTransformationArrayOutput)
}

// The transformation to apply to the field.
type GooglePrivacyDlpV2FieldTransformationOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FieldTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FieldTransformation)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FieldTransformationOutput) ToGooglePrivacyDlpV2FieldTransformationOutput() GooglePrivacyDlpV2FieldTransformationOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldTransformationOutput) ToGooglePrivacyDlpV2FieldTransformationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldTransformationOutput {
	return o
}

// Only apply the transformation if the condition evaluates to true for the given `RecordCondition`. The conditions are allowed to reference fields that are not used in the actual transformation. Example Use Cases: - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85.
func (o GooglePrivacyDlpV2FieldTransformationOutput) Condition() GooglePrivacyDlpV2RecordConditionPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FieldTransformation) *GooglePrivacyDlpV2RecordCondition { return v.Condition }).(GooglePrivacyDlpV2RecordConditionPtrOutput)
}

// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
func (o GooglePrivacyDlpV2FieldTransformationOutput) Fields() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FieldTransformation) []GooglePrivacyDlpV2FieldId { return v.Fields }).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// Treat the contents of the field as free text, and selectively transform content that matches an `InfoType`.
func (o GooglePrivacyDlpV2FieldTransformationOutput) InfoTypeTransformations() GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FieldTransformation) *GooglePrivacyDlpV2InfoTypeTransformations {
		return v.InfoTypeTransformations
	}).(GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput)
}

// Apply the transformation to the entire field.
func (o GooglePrivacyDlpV2FieldTransformationOutput) PrimitiveTransformation() GooglePrivacyDlpV2PrimitiveTransformationPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FieldTransformation) *GooglePrivacyDlpV2PrimitiveTransformation {
		return v.PrimitiveTransformation
	}).(GooglePrivacyDlpV2PrimitiveTransformationPtrOutput)
}

type GooglePrivacyDlpV2FieldTransformationArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FieldTransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2FieldTransformation)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FieldTransformationArrayOutput) ToGooglePrivacyDlpV2FieldTransformationArrayOutput() GooglePrivacyDlpV2FieldTransformationArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldTransformationArrayOutput) ToGooglePrivacyDlpV2FieldTransformationArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldTransformationArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldTransformationArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2FieldTransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2FieldTransformation {
		return vs[0].([]GooglePrivacyDlpV2FieldTransformation)[vs[1].(int)]
	}).(GooglePrivacyDlpV2FieldTransformationOutput)
}

// The transformation to apply to the field.
type GooglePrivacyDlpV2FieldTransformationResponse struct {
	// Only apply the transformation if the condition evaluates to true for the given `RecordCondition`. The conditions are allowed to reference fields that are not used in the actual transformation. Example Use Cases: - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85.
	Condition GooglePrivacyDlpV2RecordConditionResponse `pulumi:"condition"`
	// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
	Fields []GooglePrivacyDlpV2FieldIdResponse `pulumi:"fields"`
	// Treat the contents of the field as free text, and selectively transform content that matches an `InfoType`.
	InfoTypeTransformations GooglePrivacyDlpV2InfoTypeTransformationsResponse `pulumi:"infoTypeTransformations"`
	// Apply the transformation to the entire field.
	PrimitiveTransformation GooglePrivacyDlpV2PrimitiveTransformationResponse `pulumi:"primitiveTransformation"`
}

// The transformation to apply to the field.
type GooglePrivacyDlpV2FieldTransformationResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FieldTransformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FieldTransformationResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FieldTransformationResponseOutput) ToGooglePrivacyDlpV2FieldTransformationResponseOutput() GooglePrivacyDlpV2FieldTransformationResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldTransformationResponseOutput) ToGooglePrivacyDlpV2FieldTransformationResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldTransformationResponseOutput {
	return o
}

// Only apply the transformation if the condition evaluates to true for the given `RecordCondition`. The conditions are allowed to reference fields that are not used in the actual transformation. Example Use Cases: - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85.
func (o GooglePrivacyDlpV2FieldTransformationResponseOutput) Condition() GooglePrivacyDlpV2RecordConditionResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FieldTransformationResponse) GooglePrivacyDlpV2RecordConditionResponse {
		return v.Condition
	}).(GooglePrivacyDlpV2RecordConditionResponseOutput)
}

// Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
func (o GooglePrivacyDlpV2FieldTransformationResponseOutput) Fields() GooglePrivacyDlpV2FieldIdResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FieldTransformationResponse) []GooglePrivacyDlpV2FieldIdResponse {
		return v.Fields
	}).(GooglePrivacyDlpV2FieldIdResponseArrayOutput)
}

// Treat the contents of the field as free text, and selectively transform content that matches an `InfoType`.
func (o GooglePrivacyDlpV2FieldTransformationResponseOutput) InfoTypeTransformations() GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FieldTransformationResponse) GooglePrivacyDlpV2InfoTypeTransformationsResponse {
		return v.InfoTypeTransformations
	}).(GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput)
}

// Apply the transformation to the entire field.
func (o GooglePrivacyDlpV2FieldTransformationResponseOutput) PrimitiveTransformation() GooglePrivacyDlpV2PrimitiveTransformationResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FieldTransformationResponse) GooglePrivacyDlpV2PrimitiveTransformationResponse {
		return v.PrimitiveTransformation
	}).(GooglePrivacyDlpV2PrimitiveTransformationResponseOutput)
}

type GooglePrivacyDlpV2FieldTransformationResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FieldTransformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2FieldTransformationResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FieldTransformationResponseArrayOutput) ToGooglePrivacyDlpV2FieldTransformationResponseArrayOutput() GooglePrivacyDlpV2FieldTransformationResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldTransformationResponseArrayOutput) ToGooglePrivacyDlpV2FieldTransformationResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FieldTransformationResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2FieldTransformationResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2FieldTransformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2FieldTransformationResponse {
		return vs[0].([]GooglePrivacyDlpV2FieldTransformationResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2FieldTransformationResponseOutput)
}

// Set of files to scan.
type GooglePrivacyDlpV2FileSet struct {
	// The regex-filtered set of files to scan. Exactly one of `url` or `regex_file_set` must be set.
	RegexFileSet *GooglePrivacyDlpV2CloudStorageRegexFileSet `pulumi:"regexFileSet"`
	// The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.
	Url *string `pulumi:"url"`
}

// GooglePrivacyDlpV2FileSetInput is an input type that accepts GooglePrivacyDlpV2FileSetArgs and GooglePrivacyDlpV2FileSetOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FileSetInput` via:
//
//	GooglePrivacyDlpV2FileSetArgs{...}
type GooglePrivacyDlpV2FileSetInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FileSetOutput() GooglePrivacyDlpV2FileSetOutput
	ToGooglePrivacyDlpV2FileSetOutputWithContext(context.Context) GooglePrivacyDlpV2FileSetOutput
}

// Set of files to scan.
type GooglePrivacyDlpV2FileSetArgs struct {
	// The regex-filtered set of files to scan. Exactly one of `url` or `regex_file_set` must be set.
	RegexFileSet GooglePrivacyDlpV2CloudStorageRegexFileSetPtrInput `pulumi:"regexFileSet"`
	// The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GooglePrivacyDlpV2FileSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FileSet)(nil)).Elem()
}

func (i GooglePrivacyDlpV2FileSetArgs) ToGooglePrivacyDlpV2FileSetOutput() GooglePrivacyDlpV2FileSetOutput {
	return i.ToGooglePrivacyDlpV2FileSetOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FileSetArgs) ToGooglePrivacyDlpV2FileSetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FileSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FileSetOutput)
}

func (i GooglePrivacyDlpV2FileSetArgs) ToGooglePrivacyDlpV2FileSetPtrOutput() GooglePrivacyDlpV2FileSetPtrOutput {
	return i.ToGooglePrivacyDlpV2FileSetPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FileSetArgs) ToGooglePrivacyDlpV2FileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FileSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FileSetOutput).ToGooglePrivacyDlpV2FileSetPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2FileSetPtrInput is an input type that accepts GooglePrivacyDlpV2FileSetArgs, GooglePrivacyDlpV2FileSetPtr and GooglePrivacyDlpV2FileSetPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FileSetPtrInput` via:
//
//	        GooglePrivacyDlpV2FileSetArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2FileSetPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FileSetPtrOutput() GooglePrivacyDlpV2FileSetPtrOutput
	ToGooglePrivacyDlpV2FileSetPtrOutputWithContext(context.Context) GooglePrivacyDlpV2FileSetPtrOutput
}

type googlePrivacyDlpV2FileSetPtrType GooglePrivacyDlpV2FileSetArgs

func GooglePrivacyDlpV2FileSetPtr(v *GooglePrivacyDlpV2FileSetArgs) GooglePrivacyDlpV2FileSetPtrInput {
	return (*googlePrivacyDlpV2FileSetPtrType)(v)
}

func (*googlePrivacyDlpV2FileSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2FileSet)(nil)).Elem()
}

func (i *googlePrivacyDlpV2FileSetPtrType) ToGooglePrivacyDlpV2FileSetPtrOutput() GooglePrivacyDlpV2FileSetPtrOutput {
	return i.ToGooglePrivacyDlpV2FileSetPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2FileSetPtrType) ToGooglePrivacyDlpV2FileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FileSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FileSetPtrOutput)
}

// Set of files to scan.
type GooglePrivacyDlpV2FileSetOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FileSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FileSet)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FileSetOutput) ToGooglePrivacyDlpV2FileSetOutput() GooglePrivacyDlpV2FileSetOutput {
	return o
}

func (o GooglePrivacyDlpV2FileSetOutput) ToGooglePrivacyDlpV2FileSetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FileSetOutput {
	return o
}

func (o GooglePrivacyDlpV2FileSetOutput) ToGooglePrivacyDlpV2FileSetPtrOutput() GooglePrivacyDlpV2FileSetPtrOutput {
	return o.ToGooglePrivacyDlpV2FileSetPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2FileSetOutput) ToGooglePrivacyDlpV2FileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FileSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2FileSet) *GooglePrivacyDlpV2FileSet {
		return &v
	}).(GooglePrivacyDlpV2FileSetPtrOutput)
}

// The regex-filtered set of files to scan. Exactly one of `url` or `regex_file_set` must be set.
func (o GooglePrivacyDlpV2FileSetOutput) RegexFileSet() GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FileSet) *GooglePrivacyDlpV2CloudStorageRegexFileSet { return v.RegexFileSet }).(GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput)
}

// The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.
func (o GooglePrivacyDlpV2FileSetOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FileSet) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2FileSetPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FileSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2FileSet)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FileSetPtrOutput) ToGooglePrivacyDlpV2FileSetPtrOutput() GooglePrivacyDlpV2FileSetPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2FileSetPtrOutput) ToGooglePrivacyDlpV2FileSetPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FileSetPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2FileSetPtrOutput) Elem() GooglePrivacyDlpV2FileSetOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FileSet) GooglePrivacyDlpV2FileSet {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2FileSet
		return ret
	}).(GooglePrivacyDlpV2FileSetOutput)
}

// The regex-filtered set of files to scan. Exactly one of `url` or `regex_file_set` must be set.
func (o GooglePrivacyDlpV2FileSetPtrOutput) RegexFileSet() GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FileSet) *GooglePrivacyDlpV2CloudStorageRegexFileSet {
		if v == nil {
			return nil
		}
		return v.RegexFileSet
	}).(GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput)
}

// The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.
func (o GooglePrivacyDlpV2FileSetPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FileSet) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Set of files to scan.
type GooglePrivacyDlpV2FileSetResponse struct {
	// The regex-filtered set of files to scan. Exactly one of `url` or `regex_file_set` must be set.
	RegexFileSet GooglePrivacyDlpV2CloudStorageRegexFileSetResponse `pulumi:"regexFileSet"`
	// The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.
	Url string `pulumi:"url"`
}

// Set of files to scan.
type GooglePrivacyDlpV2FileSetResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FileSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FileSetResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FileSetResponseOutput) ToGooglePrivacyDlpV2FileSetResponseOutput() GooglePrivacyDlpV2FileSetResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2FileSetResponseOutput) ToGooglePrivacyDlpV2FileSetResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FileSetResponseOutput {
	return o
}

// The regex-filtered set of files to scan. Exactly one of `url` or `regex_file_set` must be set.
func (o GooglePrivacyDlpV2FileSetResponseOutput) RegexFileSet() GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FileSetResponse) GooglePrivacyDlpV2CloudStorageRegexFileSetResponse {
		return v.RegexFileSet
	}).(GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput)
}

// The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.
func (o GooglePrivacyDlpV2FileSetResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FileSetResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Configuration to control the number of findings returned for inspection. This is not used for de-identification or data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error.
type GooglePrivacyDlpV2FindingLimits struct {
	// Configuration of findings limit given for specified infoTypes.
	MaxFindingsPerInfoType []GooglePrivacyDlpV2InfoTypeLimit `pulumi:"maxFindingsPerInfoType"`
	// Max number of findings that are returned for each item scanned. When set within an InspectContentRequest, this field is ignored. This value isn't a hard limit. If the number of findings for an item reaches this limit, the inspection of that item ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns for the item can be multiple times higher than this value.
	MaxFindingsPerItem *int `pulumi:"maxFindingsPerItem"`
	// Max number of findings that are returned per request or job. If you set this field in an InspectContentRequest, the resulting maximum value is the value that you set or 3,000, whichever is lower. This value isn't a hard limit. If an inspection reaches this limit, the inspection ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than this value.
	MaxFindingsPerRequest *int `pulumi:"maxFindingsPerRequest"`
}

// GooglePrivacyDlpV2FindingLimitsInput is an input type that accepts GooglePrivacyDlpV2FindingLimitsArgs and GooglePrivacyDlpV2FindingLimitsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FindingLimitsInput` via:
//
//	GooglePrivacyDlpV2FindingLimitsArgs{...}
type GooglePrivacyDlpV2FindingLimitsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FindingLimitsOutput() GooglePrivacyDlpV2FindingLimitsOutput
	ToGooglePrivacyDlpV2FindingLimitsOutputWithContext(context.Context) GooglePrivacyDlpV2FindingLimitsOutput
}

// Configuration to control the number of findings returned for inspection. This is not used for de-identification or data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error.
type GooglePrivacyDlpV2FindingLimitsArgs struct {
	// Configuration of findings limit given for specified infoTypes.
	MaxFindingsPerInfoType GooglePrivacyDlpV2InfoTypeLimitArrayInput `pulumi:"maxFindingsPerInfoType"`
	// Max number of findings that are returned for each item scanned. When set within an InspectContentRequest, this field is ignored. This value isn't a hard limit. If the number of findings for an item reaches this limit, the inspection of that item ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns for the item can be multiple times higher than this value.
	MaxFindingsPerItem pulumi.IntPtrInput `pulumi:"maxFindingsPerItem"`
	// Max number of findings that are returned per request or job. If you set this field in an InspectContentRequest, the resulting maximum value is the value that you set or 3,000, whichever is lower. This value isn't a hard limit. If an inspection reaches this limit, the inspection ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than this value.
	MaxFindingsPerRequest pulumi.IntPtrInput `pulumi:"maxFindingsPerRequest"`
}

func (GooglePrivacyDlpV2FindingLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FindingLimits)(nil)).Elem()
}

func (i GooglePrivacyDlpV2FindingLimitsArgs) ToGooglePrivacyDlpV2FindingLimitsOutput() GooglePrivacyDlpV2FindingLimitsOutput {
	return i.ToGooglePrivacyDlpV2FindingLimitsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FindingLimitsArgs) ToGooglePrivacyDlpV2FindingLimitsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FindingLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FindingLimitsOutput)
}

func (i GooglePrivacyDlpV2FindingLimitsArgs) ToGooglePrivacyDlpV2FindingLimitsPtrOutput() GooglePrivacyDlpV2FindingLimitsPtrOutput {
	return i.ToGooglePrivacyDlpV2FindingLimitsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FindingLimitsArgs) ToGooglePrivacyDlpV2FindingLimitsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FindingLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FindingLimitsOutput).ToGooglePrivacyDlpV2FindingLimitsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2FindingLimitsPtrInput is an input type that accepts GooglePrivacyDlpV2FindingLimitsArgs, GooglePrivacyDlpV2FindingLimitsPtr and GooglePrivacyDlpV2FindingLimitsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FindingLimitsPtrInput` via:
//
//	        GooglePrivacyDlpV2FindingLimitsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2FindingLimitsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FindingLimitsPtrOutput() GooglePrivacyDlpV2FindingLimitsPtrOutput
	ToGooglePrivacyDlpV2FindingLimitsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2FindingLimitsPtrOutput
}

type googlePrivacyDlpV2FindingLimitsPtrType GooglePrivacyDlpV2FindingLimitsArgs

func GooglePrivacyDlpV2FindingLimitsPtr(v *GooglePrivacyDlpV2FindingLimitsArgs) GooglePrivacyDlpV2FindingLimitsPtrInput {
	return (*googlePrivacyDlpV2FindingLimitsPtrType)(v)
}

func (*googlePrivacyDlpV2FindingLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2FindingLimits)(nil)).Elem()
}

func (i *googlePrivacyDlpV2FindingLimitsPtrType) ToGooglePrivacyDlpV2FindingLimitsPtrOutput() GooglePrivacyDlpV2FindingLimitsPtrOutput {
	return i.ToGooglePrivacyDlpV2FindingLimitsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2FindingLimitsPtrType) ToGooglePrivacyDlpV2FindingLimitsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FindingLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FindingLimitsPtrOutput)
}

// Configuration to control the number of findings returned for inspection. This is not used for de-identification or data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error.
type GooglePrivacyDlpV2FindingLimitsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FindingLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FindingLimits)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FindingLimitsOutput) ToGooglePrivacyDlpV2FindingLimitsOutput() GooglePrivacyDlpV2FindingLimitsOutput {
	return o
}

func (o GooglePrivacyDlpV2FindingLimitsOutput) ToGooglePrivacyDlpV2FindingLimitsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FindingLimitsOutput {
	return o
}

func (o GooglePrivacyDlpV2FindingLimitsOutput) ToGooglePrivacyDlpV2FindingLimitsPtrOutput() GooglePrivacyDlpV2FindingLimitsPtrOutput {
	return o.ToGooglePrivacyDlpV2FindingLimitsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2FindingLimitsOutput) ToGooglePrivacyDlpV2FindingLimitsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FindingLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2FindingLimits) *GooglePrivacyDlpV2FindingLimits {
		return &v
	}).(GooglePrivacyDlpV2FindingLimitsPtrOutput)
}

// Configuration of findings limit given for specified infoTypes.
func (o GooglePrivacyDlpV2FindingLimitsOutput) MaxFindingsPerInfoType() GooglePrivacyDlpV2InfoTypeLimitArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FindingLimits) []GooglePrivacyDlpV2InfoTypeLimit {
		return v.MaxFindingsPerInfoType
	}).(GooglePrivacyDlpV2InfoTypeLimitArrayOutput)
}

// Max number of findings that are returned for each item scanned. When set within an InspectContentRequest, this field is ignored. This value isn't a hard limit. If the number of findings for an item reaches this limit, the inspection of that item ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns for the item can be multiple times higher than this value.
func (o GooglePrivacyDlpV2FindingLimitsOutput) MaxFindingsPerItem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FindingLimits) *int { return v.MaxFindingsPerItem }).(pulumi.IntPtrOutput)
}

// Max number of findings that are returned per request or job. If you set this field in an InspectContentRequest, the resulting maximum value is the value that you set or 3,000, whichever is lower. This value isn't a hard limit. If an inspection reaches this limit, the inspection ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than this value.
func (o GooglePrivacyDlpV2FindingLimitsOutput) MaxFindingsPerRequest() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FindingLimits) *int { return v.MaxFindingsPerRequest }).(pulumi.IntPtrOutput)
}

type GooglePrivacyDlpV2FindingLimitsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FindingLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2FindingLimits)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FindingLimitsPtrOutput) ToGooglePrivacyDlpV2FindingLimitsPtrOutput() GooglePrivacyDlpV2FindingLimitsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2FindingLimitsPtrOutput) ToGooglePrivacyDlpV2FindingLimitsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FindingLimitsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2FindingLimitsPtrOutput) Elem() GooglePrivacyDlpV2FindingLimitsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FindingLimits) GooglePrivacyDlpV2FindingLimits {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2FindingLimits
		return ret
	}).(GooglePrivacyDlpV2FindingLimitsOutput)
}

// Configuration of findings limit given for specified infoTypes.
func (o GooglePrivacyDlpV2FindingLimitsPtrOutput) MaxFindingsPerInfoType() GooglePrivacyDlpV2InfoTypeLimitArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FindingLimits) []GooglePrivacyDlpV2InfoTypeLimit {
		if v == nil {
			return nil
		}
		return v.MaxFindingsPerInfoType
	}).(GooglePrivacyDlpV2InfoTypeLimitArrayOutput)
}

// Max number of findings that are returned for each item scanned. When set within an InspectContentRequest, this field is ignored. This value isn't a hard limit. If the number of findings for an item reaches this limit, the inspection of that item ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns for the item can be multiple times higher than this value.
func (o GooglePrivacyDlpV2FindingLimitsPtrOutput) MaxFindingsPerItem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FindingLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxFindingsPerItem
	}).(pulumi.IntPtrOutput)
}

// Max number of findings that are returned per request or job. If you set this field in an InspectContentRequest, the resulting maximum value is the value that you set or 3,000, whichever is lower. This value isn't a hard limit. If an inspection reaches this limit, the inspection ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than this value.
func (o GooglePrivacyDlpV2FindingLimitsPtrOutput) MaxFindingsPerRequest() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FindingLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxFindingsPerRequest
	}).(pulumi.IntPtrOutput)
}

// Configuration to control the number of findings returned for inspection. This is not used for de-identification or data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error.
type GooglePrivacyDlpV2FindingLimitsResponse struct {
	// Configuration of findings limit given for specified infoTypes.
	MaxFindingsPerInfoType []GooglePrivacyDlpV2InfoTypeLimitResponse `pulumi:"maxFindingsPerInfoType"`
	// Max number of findings that are returned for each item scanned. When set within an InspectContentRequest, this field is ignored. This value isn't a hard limit. If the number of findings for an item reaches this limit, the inspection of that item ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns for the item can be multiple times higher than this value.
	MaxFindingsPerItem int `pulumi:"maxFindingsPerItem"`
	// Max number of findings that are returned per request or job. If you set this field in an InspectContentRequest, the resulting maximum value is the value that you set or 3,000, whichever is lower. This value isn't a hard limit. If an inspection reaches this limit, the inspection ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than this value.
	MaxFindingsPerRequest int `pulumi:"maxFindingsPerRequest"`
}

// Configuration to control the number of findings returned for inspection. This is not used for de-identification or data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error.
type GooglePrivacyDlpV2FindingLimitsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FindingLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FindingLimitsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FindingLimitsResponseOutput) ToGooglePrivacyDlpV2FindingLimitsResponseOutput() GooglePrivacyDlpV2FindingLimitsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2FindingLimitsResponseOutput) ToGooglePrivacyDlpV2FindingLimitsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FindingLimitsResponseOutput {
	return o
}

// Configuration of findings limit given for specified infoTypes.
func (o GooglePrivacyDlpV2FindingLimitsResponseOutput) MaxFindingsPerInfoType() GooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FindingLimitsResponse) []GooglePrivacyDlpV2InfoTypeLimitResponse {
		return v.MaxFindingsPerInfoType
	}).(GooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput)
}

// Max number of findings that are returned for each item scanned. When set within an InspectContentRequest, this field is ignored. This value isn't a hard limit. If the number of findings for an item reaches this limit, the inspection of that item ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns for the item can be multiple times higher than this value.
func (o GooglePrivacyDlpV2FindingLimitsResponseOutput) MaxFindingsPerItem() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FindingLimitsResponse) int { return v.MaxFindingsPerItem }).(pulumi.IntOutput)
}

// Max number of findings that are returned per request or job. If you set this field in an InspectContentRequest, the resulting maximum value is the value that you set or 3,000, whichever is lower. This value isn't a hard limit. If an inspection reaches this limit, the inspection ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than this value.
func (o GooglePrivacyDlpV2FindingLimitsResponseOutput) MaxFindingsPerRequest() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FindingLimitsResponse) int { return v.MaxFindingsPerRequest }).(pulumi.IntOutput)
}

// Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies. The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound = 20, all values that are within this bucket will be replaced with "10-20". This can be used on data of type: double, long. If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
type GooglePrivacyDlpV2FixedSizeBucketingConfig struct {
	// Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
	BucketSize float64 `pulumi:"bucketSize"`
	// Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value "-10".
	LowerBound GooglePrivacyDlpV2Value `pulumi:"lowerBound"`
	// Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value "89+".
	UpperBound GooglePrivacyDlpV2Value `pulumi:"upperBound"`
}

// GooglePrivacyDlpV2FixedSizeBucketingConfigInput is an input type that accepts GooglePrivacyDlpV2FixedSizeBucketingConfigArgs and GooglePrivacyDlpV2FixedSizeBucketingConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FixedSizeBucketingConfigInput` via:
//
//	GooglePrivacyDlpV2FixedSizeBucketingConfigArgs{...}
type GooglePrivacyDlpV2FixedSizeBucketingConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FixedSizeBucketingConfigOutput() GooglePrivacyDlpV2FixedSizeBucketingConfigOutput
	ToGooglePrivacyDlpV2FixedSizeBucketingConfigOutputWithContext(context.Context) GooglePrivacyDlpV2FixedSizeBucketingConfigOutput
}

// Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies. The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound = 20, all values that are within this bucket will be replaced with "10-20". This can be used on data of type: double, long. If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
type GooglePrivacyDlpV2FixedSizeBucketingConfigArgs struct {
	// Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
	BucketSize pulumi.Float64Input `pulumi:"bucketSize"`
	// Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value "-10".
	LowerBound GooglePrivacyDlpV2ValueInput `pulumi:"lowerBound"`
	// Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value "89+".
	UpperBound GooglePrivacyDlpV2ValueInput `pulumi:"upperBound"`
}

func (GooglePrivacyDlpV2FixedSizeBucketingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FixedSizeBucketingConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2FixedSizeBucketingConfigArgs) ToGooglePrivacyDlpV2FixedSizeBucketingConfigOutput() GooglePrivacyDlpV2FixedSizeBucketingConfigOutput {
	return i.ToGooglePrivacyDlpV2FixedSizeBucketingConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FixedSizeBucketingConfigArgs) ToGooglePrivacyDlpV2FixedSizeBucketingConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FixedSizeBucketingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FixedSizeBucketingConfigOutput)
}

func (i GooglePrivacyDlpV2FixedSizeBucketingConfigArgs) ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput() GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2FixedSizeBucketingConfigArgs) ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FixedSizeBucketingConfigOutput).ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2FixedSizeBucketingConfigPtrInput is an input type that accepts GooglePrivacyDlpV2FixedSizeBucketingConfigArgs, GooglePrivacyDlpV2FixedSizeBucketingConfigPtr and GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2FixedSizeBucketingConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2FixedSizeBucketingConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2FixedSizeBucketingConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput() GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput
	ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput
}

type googlePrivacyDlpV2FixedSizeBucketingConfigPtrType GooglePrivacyDlpV2FixedSizeBucketingConfigArgs

func GooglePrivacyDlpV2FixedSizeBucketingConfigPtr(v *GooglePrivacyDlpV2FixedSizeBucketingConfigArgs) GooglePrivacyDlpV2FixedSizeBucketingConfigPtrInput {
	return (*googlePrivacyDlpV2FixedSizeBucketingConfigPtrType)(v)
}

func (*googlePrivacyDlpV2FixedSizeBucketingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2FixedSizeBucketingConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2FixedSizeBucketingConfigPtrType) ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput() GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2FixedSizeBucketingConfigPtrType) ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput)
}

// Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies. The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound = 20, all values that are within this bucket will be replaced with "10-20". This can be used on data of type: double, long. If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
type GooglePrivacyDlpV2FixedSizeBucketingConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FixedSizeBucketingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FixedSizeBucketingConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FixedSizeBucketingConfigOutput) ToGooglePrivacyDlpV2FixedSizeBucketingConfigOutput() GooglePrivacyDlpV2FixedSizeBucketingConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2FixedSizeBucketingConfigOutput) ToGooglePrivacyDlpV2FixedSizeBucketingConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FixedSizeBucketingConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2FixedSizeBucketingConfigOutput) ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput() GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2FixedSizeBucketingConfigOutput) ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2FixedSizeBucketingConfig) *GooglePrivacyDlpV2FixedSizeBucketingConfig {
		return &v
	}).(GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput)
}

// Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
func (o GooglePrivacyDlpV2FixedSizeBucketingConfigOutput) BucketSize() pulumi.Float64Output {
	return o.ApplyT(func(v GooglePrivacyDlpV2FixedSizeBucketingConfig) float64 { return v.BucketSize }).(pulumi.Float64Output)
}

// Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value "-10".
func (o GooglePrivacyDlpV2FixedSizeBucketingConfigOutput) LowerBound() GooglePrivacyDlpV2ValueOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FixedSizeBucketingConfig) GooglePrivacyDlpV2Value { return v.LowerBound }).(GooglePrivacyDlpV2ValueOutput)
}

// Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value "89+".
func (o GooglePrivacyDlpV2FixedSizeBucketingConfigOutput) UpperBound() GooglePrivacyDlpV2ValueOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FixedSizeBucketingConfig) GooglePrivacyDlpV2Value { return v.UpperBound }).(GooglePrivacyDlpV2ValueOutput)
}

type GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2FixedSizeBucketingConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput) ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput() GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput) ToGooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput) Elem() GooglePrivacyDlpV2FixedSizeBucketingConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FixedSizeBucketingConfig) GooglePrivacyDlpV2FixedSizeBucketingConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2FixedSizeBucketingConfig
		return ret
	}).(GooglePrivacyDlpV2FixedSizeBucketingConfigOutput)
}

// Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
func (o GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput) BucketSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FixedSizeBucketingConfig) *float64 {
		if v == nil {
			return nil
		}
		return &v.BucketSize
	}).(pulumi.Float64PtrOutput)
}

// Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value "-10".
func (o GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput) LowerBound() GooglePrivacyDlpV2ValuePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FixedSizeBucketingConfig) *GooglePrivacyDlpV2Value {
		if v == nil {
			return nil
		}
		return &v.LowerBound
	}).(GooglePrivacyDlpV2ValuePtrOutput)
}

// Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value "89+".
func (o GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput) UpperBound() GooglePrivacyDlpV2ValuePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2FixedSizeBucketingConfig) *GooglePrivacyDlpV2Value {
		if v == nil {
			return nil
		}
		return &v.UpperBound
	}).(GooglePrivacyDlpV2ValuePtrOutput)
}

// Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies. The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound = 20, all values that are within this bucket will be replaced with "10-20". This can be used on data of type: double, long. If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
type GooglePrivacyDlpV2FixedSizeBucketingConfigResponse struct {
	// Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
	BucketSize float64 `pulumi:"bucketSize"`
	// Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value "-10".
	LowerBound GooglePrivacyDlpV2ValueResponse `pulumi:"lowerBound"`
	// Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value "89+".
	UpperBound GooglePrivacyDlpV2ValueResponse `pulumi:"upperBound"`
}

// Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies. The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound = 20, all values that are within this bucket will be replaced with "10-20". This can be used on data of type: double, long. If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
type GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2FixedSizeBucketingConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput) ToGooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput() GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput) ToGooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput {
	return o
}

// Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
func (o GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput) BucketSize() pulumi.Float64Output {
	return o.ApplyT(func(v GooglePrivacyDlpV2FixedSizeBucketingConfigResponse) float64 { return v.BucketSize }).(pulumi.Float64Output)
}

// Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value "-10".
func (o GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput) LowerBound() GooglePrivacyDlpV2ValueResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FixedSizeBucketingConfigResponse) GooglePrivacyDlpV2ValueResponse {
		return v.LowerBound
	}).(GooglePrivacyDlpV2ValueResponseOutput)
}

// Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value "89+".
func (o GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput) UpperBound() GooglePrivacyDlpV2ValueResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2FixedSizeBucketingConfigResponse) GooglePrivacyDlpV2ValueResponse {
		return v.UpperBound
	}).(GooglePrivacyDlpV2ValueResponseOutput)
}

// The rule that adjusts the likelihood of findings within a certain proximity of hotwords.
type GooglePrivacyDlpV2HotwordRule struct {
	// Regular expression pattern defining what qualifies as a hotword.
	HotwordRegex *GooglePrivacyDlpV2Regex `pulumi:"hotwordRegex"`
	// Likelihood adjustment to apply to all matching findings.
	LikelihoodAdjustment *GooglePrivacyDlpV2LikelihoodAdjustment `pulumi:"likelihoodAdjustment"`
	// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The finding itself will be included in the window, so that hotwords can be used to match substrings of the finding itself. Suppose you want Cloud DLP to promote the likelihood of the phone number regex "\(\d{3}\) \d{3}-\d{4}" if the area code is known to be the area code of a company's office. In this case, use the hotword regex "\(xxx\)", where "xxx" is the area code in question. For tabular data, if you want to modify the likelihood of an entire column of findngs, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
	Proximity *GooglePrivacyDlpV2Proximity `pulumi:"proximity"`
}

// GooglePrivacyDlpV2HotwordRuleInput is an input type that accepts GooglePrivacyDlpV2HotwordRuleArgs and GooglePrivacyDlpV2HotwordRuleOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2HotwordRuleInput` via:
//
//	GooglePrivacyDlpV2HotwordRuleArgs{...}
type GooglePrivacyDlpV2HotwordRuleInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2HotwordRuleOutput() GooglePrivacyDlpV2HotwordRuleOutput
	ToGooglePrivacyDlpV2HotwordRuleOutputWithContext(context.Context) GooglePrivacyDlpV2HotwordRuleOutput
}

// The rule that adjusts the likelihood of findings within a certain proximity of hotwords.
type GooglePrivacyDlpV2HotwordRuleArgs struct {
	// Regular expression pattern defining what qualifies as a hotword.
	HotwordRegex GooglePrivacyDlpV2RegexPtrInput `pulumi:"hotwordRegex"`
	// Likelihood adjustment to apply to all matching findings.
	LikelihoodAdjustment GooglePrivacyDlpV2LikelihoodAdjustmentPtrInput `pulumi:"likelihoodAdjustment"`
	// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The finding itself will be included in the window, so that hotwords can be used to match substrings of the finding itself. Suppose you want Cloud DLP to promote the likelihood of the phone number regex "\(\d{3}\) \d{3}-\d{4}" if the area code is known to be the area code of a company's office. In this case, use the hotword regex "\(xxx\)", where "xxx" is the area code in question. For tabular data, if you want to modify the likelihood of an entire column of findngs, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
	Proximity GooglePrivacyDlpV2ProximityPtrInput `pulumi:"proximity"`
}

func (GooglePrivacyDlpV2HotwordRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2HotwordRule)(nil)).Elem()
}

func (i GooglePrivacyDlpV2HotwordRuleArgs) ToGooglePrivacyDlpV2HotwordRuleOutput() GooglePrivacyDlpV2HotwordRuleOutput {
	return i.ToGooglePrivacyDlpV2HotwordRuleOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2HotwordRuleArgs) ToGooglePrivacyDlpV2HotwordRuleOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HotwordRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2HotwordRuleOutput)
}

func (i GooglePrivacyDlpV2HotwordRuleArgs) ToGooglePrivacyDlpV2HotwordRulePtrOutput() GooglePrivacyDlpV2HotwordRulePtrOutput {
	return i.ToGooglePrivacyDlpV2HotwordRulePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2HotwordRuleArgs) ToGooglePrivacyDlpV2HotwordRulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HotwordRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2HotwordRuleOutput).ToGooglePrivacyDlpV2HotwordRulePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2HotwordRulePtrInput is an input type that accepts GooglePrivacyDlpV2HotwordRuleArgs, GooglePrivacyDlpV2HotwordRulePtr and GooglePrivacyDlpV2HotwordRulePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2HotwordRulePtrInput` via:
//
//	        GooglePrivacyDlpV2HotwordRuleArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2HotwordRulePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2HotwordRulePtrOutput() GooglePrivacyDlpV2HotwordRulePtrOutput
	ToGooglePrivacyDlpV2HotwordRulePtrOutputWithContext(context.Context) GooglePrivacyDlpV2HotwordRulePtrOutput
}

type googlePrivacyDlpV2HotwordRulePtrType GooglePrivacyDlpV2HotwordRuleArgs

func GooglePrivacyDlpV2HotwordRulePtr(v *GooglePrivacyDlpV2HotwordRuleArgs) GooglePrivacyDlpV2HotwordRulePtrInput {
	return (*googlePrivacyDlpV2HotwordRulePtrType)(v)
}

func (*googlePrivacyDlpV2HotwordRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2HotwordRule)(nil)).Elem()
}

func (i *googlePrivacyDlpV2HotwordRulePtrType) ToGooglePrivacyDlpV2HotwordRulePtrOutput() GooglePrivacyDlpV2HotwordRulePtrOutput {
	return i.ToGooglePrivacyDlpV2HotwordRulePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2HotwordRulePtrType) ToGooglePrivacyDlpV2HotwordRulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HotwordRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2HotwordRulePtrOutput)
}

// The rule that adjusts the likelihood of findings within a certain proximity of hotwords.
type GooglePrivacyDlpV2HotwordRuleOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2HotwordRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2HotwordRule)(nil)).Elem()
}

func (o GooglePrivacyDlpV2HotwordRuleOutput) ToGooglePrivacyDlpV2HotwordRuleOutput() GooglePrivacyDlpV2HotwordRuleOutput {
	return o
}

func (o GooglePrivacyDlpV2HotwordRuleOutput) ToGooglePrivacyDlpV2HotwordRuleOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HotwordRuleOutput {
	return o
}

func (o GooglePrivacyDlpV2HotwordRuleOutput) ToGooglePrivacyDlpV2HotwordRulePtrOutput() GooglePrivacyDlpV2HotwordRulePtrOutput {
	return o.ToGooglePrivacyDlpV2HotwordRulePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2HotwordRuleOutput) ToGooglePrivacyDlpV2HotwordRulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HotwordRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2HotwordRule) *GooglePrivacyDlpV2HotwordRule {
		return &v
	}).(GooglePrivacyDlpV2HotwordRulePtrOutput)
}

// Regular expression pattern defining what qualifies as a hotword.
func (o GooglePrivacyDlpV2HotwordRuleOutput) HotwordRegex() GooglePrivacyDlpV2RegexPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HotwordRule) *GooglePrivacyDlpV2Regex { return v.HotwordRegex }).(GooglePrivacyDlpV2RegexPtrOutput)
}

// Likelihood adjustment to apply to all matching findings.
func (o GooglePrivacyDlpV2HotwordRuleOutput) LikelihoodAdjustment() GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HotwordRule) *GooglePrivacyDlpV2LikelihoodAdjustment {
		return v.LikelihoodAdjustment
	}).(GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput)
}

// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The finding itself will be included in the window, so that hotwords can be used to match substrings of the finding itself. Suppose you want Cloud DLP to promote the likelihood of the phone number regex "\(\d{3}\) \d{3}-\d{4}" if the area code is known to be the area code of a company's office. In this case, use the hotword regex "\(xxx\)", where "xxx" is the area code in question. For tabular data, if you want to modify the likelihood of an entire column of findngs, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
func (o GooglePrivacyDlpV2HotwordRuleOutput) Proximity() GooglePrivacyDlpV2ProximityPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HotwordRule) *GooglePrivacyDlpV2Proximity { return v.Proximity }).(GooglePrivacyDlpV2ProximityPtrOutput)
}

type GooglePrivacyDlpV2HotwordRulePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2HotwordRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2HotwordRule)(nil)).Elem()
}

func (o GooglePrivacyDlpV2HotwordRulePtrOutput) ToGooglePrivacyDlpV2HotwordRulePtrOutput() GooglePrivacyDlpV2HotwordRulePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2HotwordRulePtrOutput) ToGooglePrivacyDlpV2HotwordRulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HotwordRulePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2HotwordRulePtrOutput) Elem() GooglePrivacyDlpV2HotwordRuleOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2HotwordRule) GooglePrivacyDlpV2HotwordRule {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2HotwordRule
		return ret
	}).(GooglePrivacyDlpV2HotwordRuleOutput)
}

// Regular expression pattern defining what qualifies as a hotword.
func (o GooglePrivacyDlpV2HotwordRulePtrOutput) HotwordRegex() GooglePrivacyDlpV2RegexPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2HotwordRule) *GooglePrivacyDlpV2Regex {
		if v == nil {
			return nil
		}
		return v.HotwordRegex
	}).(GooglePrivacyDlpV2RegexPtrOutput)
}

// Likelihood adjustment to apply to all matching findings.
func (o GooglePrivacyDlpV2HotwordRulePtrOutput) LikelihoodAdjustment() GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2HotwordRule) *GooglePrivacyDlpV2LikelihoodAdjustment {
		if v == nil {
			return nil
		}
		return v.LikelihoodAdjustment
	}).(GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput)
}

// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The finding itself will be included in the window, so that hotwords can be used to match substrings of the finding itself. Suppose you want Cloud DLP to promote the likelihood of the phone number regex "\(\d{3}\) \d{3}-\d{4}" if the area code is known to be the area code of a company's office. In this case, use the hotword regex "\(xxx\)", where "xxx" is the area code in question. For tabular data, if you want to modify the likelihood of an entire column of findngs, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
func (o GooglePrivacyDlpV2HotwordRulePtrOutput) Proximity() GooglePrivacyDlpV2ProximityPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2HotwordRule) *GooglePrivacyDlpV2Proximity {
		if v == nil {
			return nil
		}
		return v.Proximity
	}).(GooglePrivacyDlpV2ProximityPtrOutput)
}

// The rule that adjusts the likelihood of findings within a certain proximity of hotwords.
type GooglePrivacyDlpV2HotwordRuleResponse struct {
	// Regular expression pattern defining what qualifies as a hotword.
	HotwordRegex GooglePrivacyDlpV2RegexResponse `pulumi:"hotwordRegex"`
	// Likelihood adjustment to apply to all matching findings.
	LikelihoodAdjustment GooglePrivacyDlpV2LikelihoodAdjustmentResponse `pulumi:"likelihoodAdjustment"`
	// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The finding itself will be included in the window, so that hotwords can be used to match substrings of the finding itself. Suppose you want Cloud DLP to promote the likelihood of the phone number regex "\(\d{3}\) \d{3}-\d{4}" if the area code is known to be the area code of a company's office. In this case, use the hotword regex "\(xxx\)", where "xxx" is the area code in question. For tabular data, if you want to modify the likelihood of an entire column of findngs, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
	Proximity GooglePrivacyDlpV2ProximityResponse `pulumi:"proximity"`
}

// The rule that adjusts the likelihood of findings within a certain proximity of hotwords.
type GooglePrivacyDlpV2HotwordRuleResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2HotwordRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2HotwordRuleResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2HotwordRuleResponseOutput) ToGooglePrivacyDlpV2HotwordRuleResponseOutput() GooglePrivacyDlpV2HotwordRuleResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2HotwordRuleResponseOutput) ToGooglePrivacyDlpV2HotwordRuleResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HotwordRuleResponseOutput {
	return o
}

// Regular expression pattern defining what qualifies as a hotword.
func (o GooglePrivacyDlpV2HotwordRuleResponseOutput) HotwordRegex() GooglePrivacyDlpV2RegexResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HotwordRuleResponse) GooglePrivacyDlpV2RegexResponse { return v.HotwordRegex }).(GooglePrivacyDlpV2RegexResponseOutput)
}

// Likelihood adjustment to apply to all matching findings.
func (o GooglePrivacyDlpV2HotwordRuleResponseOutput) LikelihoodAdjustment() GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HotwordRuleResponse) GooglePrivacyDlpV2LikelihoodAdjustmentResponse {
		return v.LikelihoodAdjustment
	}).(GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput)
}

// Range of characters within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. The finding itself will be included in the window, so that hotwords can be used to match substrings of the finding itself. Suppose you want Cloud DLP to promote the likelihood of the phone number regex "\(\d{3}\) \d{3}-\d{4}" if the area code is known to be the area code of a company's office. In this case, use the hotword regex "\(xxx\)", where "xxx" is the area code in question. For tabular data, if you want to modify the likelihood of an entire column of findngs, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
func (o GooglePrivacyDlpV2HotwordRuleResponseOutput) Proximity() GooglePrivacyDlpV2ProximityResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HotwordRuleResponse) GooglePrivacyDlpV2ProximityResponse { return v.Proximity }).(GooglePrivacyDlpV2ProximityResponseOutput)
}

// Statistics related to processing hybrid inspect requests.
type GooglePrivacyDlpV2HybridInspectStatisticsResponse struct {
	// The number of hybrid inspection requests aborted because the job ran out of quota or was ended before they could be processed.
	AbortedCount string `pulumi:"abortedCount"`
	// The number of hybrid requests currently being processed. Only populated when called via method `getDlpJob`. A burst of traffic may cause hybrid inspect requests to be enqueued. Processing will take place as quickly as possible, but resource limitations may impact how long a request is enqueued for.
	PendingCount string `pulumi:"pendingCount"`
	// The number of hybrid inspection requests processed within this job.
	ProcessedCount string `pulumi:"processedCount"`
}

// Statistics related to processing hybrid inspect requests.
type GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2HybridInspectStatisticsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput) ToGooglePrivacyDlpV2HybridInspectStatisticsResponseOutput() GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput) ToGooglePrivacyDlpV2HybridInspectStatisticsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput {
	return o
}

// The number of hybrid inspection requests aborted because the job ran out of quota or was ended before they could be processed.
func (o GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput) AbortedCount() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridInspectStatisticsResponse) string { return v.AbortedCount }).(pulumi.StringOutput)
}

// The number of hybrid requests currently being processed. Only populated when called via method `getDlpJob`. A burst of traffic may cause hybrid inspect requests to be enqueued. Processing will take place as quickly as possible, but resource limitations may impact how long a request is enqueued for.
func (o GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput) PendingCount() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridInspectStatisticsResponse) string { return v.PendingCount }).(pulumi.StringOutput)
}

// The number of hybrid inspection requests processed within this job.
func (o GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput) ProcessedCount() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridInspectStatisticsResponse) string { return v.ProcessedCount }).(pulumi.StringOutput)
}

// Configuration to control jobs where the content being inspected is outside of Google Cloud Platform.
type GooglePrivacyDlpV2HybridOptions struct {
	// A short description of where the data is coming from. Will be stored once in the job. 256 max length.
	Description *string `pulumi:"description"`
	// To organize findings, these labels will be added to each finding. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `"environment" : "production"` * `"pipeline" : "etl"`
	Labels map[string]string `pulumi:"labels"`
	// These are labels that each inspection request must include within their 'finding_labels' map. Request may contain others, but any missing one of these will be rejected. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. No more than 10 keys can be required.
	RequiredFindingLabelKeys []string `pulumi:"requiredFindingLabelKeys"`
	// If the container is a table, additional information to make findings meaningful such as the columns that are primary keys.
	TableOptions *GooglePrivacyDlpV2TableOptions `pulumi:"tableOptions"`
}

// GooglePrivacyDlpV2HybridOptionsInput is an input type that accepts GooglePrivacyDlpV2HybridOptionsArgs and GooglePrivacyDlpV2HybridOptionsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2HybridOptionsInput` via:
//
//	GooglePrivacyDlpV2HybridOptionsArgs{...}
type GooglePrivacyDlpV2HybridOptionsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2HybridOptionsOutput() GooglePrivacyDlpV2HybridOptionsOutput
	ToGooglePrivacyDlpV2HybridOptionsOutputWithContext(context.Context) GooglePrivacyDlpV2HybridOptionsOutput
}

// Configuration to control jobs where the content being inspected is outside of Google Cloud Platform.
type GooglePrivacyDlpV2HybridOptionsArgs struct {
	// A short description of where the data is coming from. Will be stored once in the job. 256 max length.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// To organize findings, these labels will be added to each finding. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `"environment" : "production"` * `"pipeline" : "etl"`
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// These are labels that each inspection request must include within their 'finding_labels' map. Request may contain others, but any missing one of these will be rejected. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. No more than 10 keys can be required.
	RequiredFindingLabelKeys pulumi.StringArrayInput `pulumi:"requiredFindingLabelKeys"`
	// If the container is a table, additional information to make findings meaningful such as the columns that are primary keys.
	TableOptions GooglePrivacyDlpV2TableOptionsPtrInput `pulumi:"tableOptions"`
}

func (GooglePrivacyDlpV2HybridOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2HybridOptions)(nil)).Elem()
}

func (i GooglePrivacyDlpV2HybridOptionsArgs) ToGooglePrivacyDlpV2HybridOptionsOutput() GooglePrivacyDlpV2HybridOptionsOutput {
	return i.ToGooglePrivacyDlpV2HybridOptionsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2HybridOptionsArgs) ToGooglePrivacyDlpV2HybridOptionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HybridOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2HybridOptionsOutput)
}

func (i GooglePrivacyDlpV2HybridOptionsArgs) ToGooglePrivacyDlpV2HybridOptionsPtrOutput() GooglePrivacyDlpV2HybridOptionsPtrOutput {
	return i.ToGooglePrivacyDlpV2HybridOptionsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2HybridOptionsArgs) ToGooglePrivacyDlpV2HybridOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HybridOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2HybridOptionsOutput).ToGooglePrivacyDlpV2HybridOptionsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2HybridOptionsPtrInput is an input type that accepts GooglePrivacyDlpV2HybridOptionsArgs, GooglePrivacyDlpV2HybridOptionsPtr and GooglePrivacyDlpV2HybridOptionsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2HybridOptionsPtrInput` via:
//
//	        GooglePrivacyDlpV2HybridOptionsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2HybridOptionsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2HybridOptionsPtrOutput() GooglePrivacyDlpV2HybridOptionsPtrOutput
	ToGooglePrivacyDlpV2HybridOptionsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2HybridOptionsPtrOutput
}

type googlePrivacyDlpV2HybridOptionsPtrType GooglePrivacyDlpV2HybridOptionsArgs

func GooglePrivacyDlpV2HybridOptionsPtr(v *GooglePrivacyDlpV2HybridOptionsArgs) GooglePrivacyDlpV2HybridOptionsPtrInput {
	return (*googlePrivacyDlpV2HybridOptionsPtrType)(v)
}

func (*googlePrivacyDlpV2HybridOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2HybridOptions)(nil)).Elem()
}

func (i *googlePrivacyDlpV2HybridOptionsPtrType) ToGooglePrivacyDlpV2HybridOptionsPtrOutput() GooglePrivacyDlpV2HybridOptionsPtrOutput {
	return i.ToGooglePrivacyDlpV2HybridOptionsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2HybridOptionsPtrType) ToGooglePrivacyDlpV2HybridOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HybridOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2HybridOptionsPtrOutput)
}

// Configuration to control jobs where the content being inspected is outside of Google Cloud Platform.
type GooglePrivacyDlpV2HybridOptionsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2HybridOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2HybridOptions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2HybridOptionsOutput) ToGooglePrivacyDlpV2HybridOptionsOutput() GooglePrivacyDlpV2HybridOptionsOutput {
	return o
}

func (o GooglePrivacyDlpV2HybridOptionsOutput) ToGooglePrivacyDlpV2HybridOptionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HybridOptionsOutput {
	return o
}

func (o GooglePrivacyDlpV2HybridOptionsOutput) ToGooglePrivacyDlpV2HybridOptionsPtrOutput() GooglePrivacyDlpV2HybridOptionsPtrOutput {
	return o.ToGooglePrivacyDlpV2HybridOptionsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2HybridOptionsOutput) ToGooglePrivacyDlpV2HybridOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HybridOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2HybridOptions) *GooglePrivacyDlpV2HybridOptions {
		return &v
	}).(GooglePrivacyDlpV2HybridOptionsPtrOutput)
}

// A short description of where the data is coming from. Will be stored once in the job. 256 max length.
func (o GooglePrivacyDlpV2HybridOptionsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridOptions) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// To organize findings, these labels will be added to each finding. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `"environment" : "production"` * `"pipeline" : "etl"`
func (o GooglePrivacyDlpV2HybridOptionsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridOptions) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// These are labels that each inspection request must include within their 'finding_labels' map. Request may contain others, but any missing one of these will be rejected. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. No more than 10 keys can be required.
func (o GooglePrivacyDlpV2HybridOptionsOutput) RequiredFindingLabelKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridOptions) []string { return v.RequiredFindingLabelKeys }).(pulumi.StringArrayOutput)
}

// If the container is a table, additional information to make findings meaningful such as the columns that are primary keys.
func (o GooglePrivacyDlpV2HybridOptionsOutput) TableOptions() GooglePrivacyDlpV2TableOptionsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridOptions) *GooglePrivacyDlpV2TableOptions { return v.TableOptions }).(GooglePrivacyDlpV2TableOptionsPtrOutput)
}

type GooglePrivacyDlpV2HybridOptionsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2HybridOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2HybridOptions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2HybridOptionsPtrOutput) ToGooglePrivacyDlpV2HybridOptionsPtrOutput() GooglePrivacyDlpV2HybridOptionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2HybridOptionsPtrOutput) ToGooglePrivacyDlpV2HybridOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HybridOptionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2HybridOptionsPtrOutput) Elem() GooglePrivacyDlpV2HybridOptionsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2HybridOptions) GooglePrivacyDlpV2HybridOptions {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2HybridOptions
		return ret
	}).(GooglePrivacyDlpV2HybridOptionsOutput)
}

// A short description of where the data is coming from. Will be stored once in the job. 256 max length.
func (o GooglePrivacyDlpV2HybridOptionsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2HybridOptions) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// To organize findings, these labels will be added to each finding. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `"environment" : "production"` * `"pipeline" : "etl"`
func (o GooglePrivacyDlpV2HybridOptionsPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2HybridOptions) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// These are labels that each inspection request must include within their 'finding_labels' map. Request may contain others, but any missing one of these will be rejected. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. No more than 10 keys can be required.
func (o GooglePrivacyDlpV2HybridOptionsPtrOutput) RequiredFindingLabelKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2HybridOptions) []string {
		if v == nil {
			return nil
		}
		return v.RequiredFindingLabelKeys
	}).(pulumi.StringArrayOutput)
}

// If the container is a table, additional information to make findings meaningful such as the columns that are primary keys.
func (o GooglePrivacyDlpV2HybridOptionsPtrOutput) TableOptions() GooglePrivacyDlpV2TableOptionsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2HybridOptions) *GooglePrivacyDlpV2TableOptions {
		if v == nil {
			return nil
		}
		return v.TableOptions
	}).(GooglePrivacyDlpV2TableOptionsPtrOutput)
}

// Configuration to control jobs where the content being inspected is outside of Google Cloud Platform.
type GooglePrivacyDlpV2HybridOptionsResponse struct {
	// A short description of where the data is coming from. Will be stored once in the job. 256 max length.
	Description string `pulumi:"description"`
	// To organize findings, these labels will be added to each finding. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `"environment" : "production"` * `"pipeline" : "etl"`
	Labels map[string]string `pulumi:"labels"`
	// These are labels that each inspection request must include within their 'finding_labels' map. Request may contain others, but any missing one of these will be rejected. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. No more than 10 keys can be required.
	RequiredFindingLabelKeys []string `pulumi:"requiredFindingLabelKeys"`
	// If the container is a table, additional information to make findings meaningful such as the columns that are primary keys.
	TableOptions GooglePrivacyDlpV2TableOptionsResponse `pulumi:"tableOptions"`
}

// Configuration to control jobs where the content being inspected is outside of Google Cloud Platform.
type GooglePrivacyDlpV2HybridOptionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2HybridOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2HybridOptionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2HybridOptionsResponseOutput) ToGooglePrivacyDlpV2HybridOptionsResponseOutput() GooglePrivacyDlpV2HybridOptionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2HybridOptionsResponseOutput) ToGooglePrivacyDlpV2HybridOptionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2HybridOptionsResponseOutput {
	return o
}

// A short description of where the data is coming from. Will be stored once in the job. 256 max length.
func (o GooglePrivacyDlpV2HybridOptionsResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridOptionsResponse) string { return v.Description }).(pulumi.StringOutput)
}

// To organize findings, these labels will be added to each finding. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `"environment" : "production"` * `"pipeline" : "etl"`
func (o GooglePrivacyDlpV2HybridOptionsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridOptionsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// These are labels that each inspection request must include within their 'finding_labels' map. Request may contain others, but any missing one of these will be rejected. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. No more than 10 keys can be required.
func (o GooglePrivacyDlpV2HybridOptionsResponseOutput) RequiredFindingLabelKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridOptionsResponse) []string { return v.RequiredFindingLabelKeys }).(pulumi.StringArrayOutput)
}

// If the container is a table, additional information to make findings meaningful such as the columns that are primary keys.
func (o GooglePrivacyDlpV2HybridOptionsResponseOutput) TableOptions() GooglePrivacyDlpV2TableOptionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2HybridOptionsResponse) GooglePrivacyDlpV2TableOptionsResponse {
		return v.TableOptions
	}).(GooglePrivacyDlpV2TableOptionsResponseOutput)
}

// Configuration for determining how redaction of images should occur.
type GooglePrivacyDlpV2ImageTransformation struct {
	// Apply transformation to all findings not specified in other ImageTransformation's selected_info_types. Only one instance is allowed within the ImageTransformations message.
	AllInfoTypes *GooglePrivacyDlpV2AllInfoTypes `pulumi:"allInfoTypes"`
	// Apply transformation to all text that doesn't match an infoType. Only one instance is allowed within the ImageTransformations message.
	AllText *GooglePrivacyDlpV2AllText `pulumi:"allText"`
	// The color to use when redacting content from an image. If not specified, the default is black.
	RedactionColor *GooglePrivacyDlpV2Color `pulumi:"redactionColor"`
	// Apply transformation to the selected info_types.
	SelectedInfoTypes *GooglePrivacyDlpV2SelectedInfoTypes `pulumi:"selectedInfoTypes"`
}

// GooglePrivacyDlpV2ImageTransformationInput is an input type that accepts GooglePrivacyDlpV2ImageTransformationArgs and GooglePrivacyDlpV2ImageTransformationOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ImageTransformationInput` via:
//
//	GooglePrivacyDlpV2ImageTransformationArgs{...}
type GooglePrivacyDlpV2ImageTransformationInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ImageTransformationOutput() GooglePrivacyDlpV2ImageTransformationOutput
	ToGooglePrivacyDlpV2ImageTransformationOutputWithContext(context.Context) GooglePrivacyDlpV2ImageTransformationOutput
}

// Configuration for determining how redaction of images should occur.
type GooglePrivacyDlpV2ImageTransformationArgs struct {
	// Apply transformation to all findings not specified in other ImageTransformation's selected_info_types. Only one instance is allowed within the ImageTransformations message.
	AllInfoTypes GooglePrivacyDlpV2AllInfoTypesPtrInput `pulumi:"allInfoTypes"`
	// Apply transformation to all text that doesn't match an infoType. Only one instance is allowed within the ImageTransformations message.
	AllText GooglePrivacyDlpV2AllTextPtrInput `pulumi:"allText"`
	// The color to use when redacting content from an image. If not specified, the default is black.
	RedactionColor GooglePrivacyDlpV2ColorPtrInput `pulumi:"redactionColor"`
	// Apply transformation to the selected info_types.
	SelectedInfoTypes GooglePrivacyDlpV2SelectedInfoTypesPtrInput `pulumi:"selectedInfoTypes"`
}

func (GooglePrivacyDlpV2ImageTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ImageTransformation)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ImageTransformationArgs) ToGooglePrivacyDlpV2ImageTransformationOutput() GooglePrivacyDlpV2ImageTransformationOutput {
	return i.ToGooglePrivacyDlpV2ImageTransformationOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ImageTransformationArgs) ToGooglePrivacyDlpV2ImageTransformationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ImageTransformationOutput)
}

// GooglePrivacyDlpV2ImageTransformationArrayInput is an input type that accepts GooglePrivacyDlpV2ImageTransformationArray and GooglePrivacyDlpV2ImageTransformationArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ImageTransformationArrayInput` via:
//
//	GooglePrivacyDlpV2ImageTransformationArray{ GooglePrivacyDlpV2ImageTransformationArgs{...} }
type GooglePrivacyDlpV2ImageTransformationArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ImageTransformationArrayOutput() GooglePrivacyDlpV2ImageTransformationArrayOutput
	ToGooglePrivacyDlpV2ImageTransformationArrayOutputWithContext(context.Context) GooglePrivacyDlpV2ImageTransformationArrayOutput
}

type GooglePrivacyDlpV2ImageTransformationArray []GooglePrivacyDlpV2ImageTransformationInput

func (GooglePrivacyDlpV2ImageTransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2ImageTransformation)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ImageTransformationArray) ToGooglePrivacyDlpV2ImageTransformationArrayOutput() GooglePrivacyDlpV2ImageTransformationArrayOutput {
	return i.ToGooglePrivacyDlpV2ImageTransformationArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ImageTransformationArray) ToGooglePrivacyDlpV2ImageTransformationArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ImageTransformationArrayOutput)
}

// Configuration for determining how redaction of images should occur.
type GooglePrivacyDlpV2ImageTransformationOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ImageTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ImageTransformation)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ImageTransformationOutput) ToGooglePrivacyDlpV2ImageTransformationOutput() GooglePrivacyDlpV2ImageTransformationOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationOutput) ToGooglePrivacyDlpV2ImageTransformationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationOutput {
	return o
}

// Apply transformation to all findings not specified in other ImageTransformation's selected_info_types. Only one instance is allowed within the ImageTransformations message.
func (o GooglePrivacyDlpV2ImageTransformationOutput) AllInfoTypes() GooglePrivacyDlpV2AllInfoTypesPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ImageTransformation) *GooglePrivacyDlpV2AllInfoTypes { return v.AllInfoTypes }).(GooglePrivacyDlpV2AllInfoTypesPtrOutput)
}

// Apply transformation to all text that doesn't match an infoType. Only one instance is allowed within the ImageTransformations message.
func (o GooglePrivacyDlpV2ImageTransformationOutput) AllText() GooglePrivacyDlpV2AllTextPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ImageTransformation) *GooglePrivacyDlpV2AllText { return v.AllText }).(GooglePrivacyDlpV2AllTextPtrOutput)
}

// The color to use when redacting content from an image. If not specified, the default is black.
func (o GooglePrivacyDlpV2ImageTransformationOutput) RedactionColor() GooglePrivacyDlpV2ColorPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ImageTransformation) *GooglePrivacyDlpV2Color { return v.RedactionColor }).(GooglePrivacyDlpV2ColorPtrOutput)
}

// Apply transformation to the selected info_types.
func (o GooglePrivacyDlpV2ImageTransformationOutput) SelectedInfoTypes() GooglePrivacyDlpV2SelectedInfoTypesPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ImageTransformation) *GooglePrivacyDlpV2SelectedInfoTypes {
		return v.SelectedInfoTypes
	}).(GooglePrivacyDlpV2SelectedInfoTypesPtrOutput)
}

type GooglePrivacyDlpV2ImageTransformationArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ImageTransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2ImageTransformation)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ImageTransformationArrayOutput) ToGooglePrivacyDlpV2ImageTransformationArrayOutput() GooglePrivacyDlpV2ImageTransformationArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationArrayOutput) ToGooglePrivacyDlpV2ImageTransformationArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2ImageTransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2ImageTransformation {
		return vs[0].([]GooglePrivacyDlpV2ImageTransformation)[vs[1].(int)]
	}).(GooglePrivacyDlpV2ImageTransformationOutput)
}

// Configuration for determining how redaction of images should occur.
type GooglePrivacyDlpV2ImageTransformationResponse struct {
	// Apply transformation to all findings not specified in other ImageTransformation's selected_info_types. Only one instance is allowed within the ImageTransformations message.
	AllInfoTypes GooglePrivacyDlpV2AllInfoTypesResponse `pulumi:"allInfoTypes"`
	// Apply transformation to all text that doesn't match an infoType. Only one instance is allowed within the ImageTransformations message.
	AllText GooglePrivacyDlpV2AllTextResponse `pulumi:"allText"`
	// The color to use when redacting content from an image. If not specified, the default is black.
	RedactionColor GooglePrivacyDlpV2ColorResponse `pulumi:"redactionColor"`
	// Apply transformation to the selected info_types.
	SelectedInfoTypes GooglePrivacyDlpV2SelectedInfoTypesResponse `pulumi:"selectedInfoTypes"`
}

// Configuration for determining how redaction of images should occur.
type GooglePrivacyDlpV2ImageTransformationResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ImageTransformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ImageTransformationResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ImageTransformationResponseOutput) ToGooglePrivacyDlpV2ImageTransformationResponseOutput() GooglePrivacyDlpV2ImageTransformationResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationResponseOutput) ToGooglePrivacyDlpV2ImageTransformationResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationResponseOutput {
	return o
}

// Apply transformation to all findings not specified in other ImageTransformation's selected_info_types. Only one instance is allowed within the ImageTransformations message.
func (o GooglePrivacyDlpV2ImageTransformationResponseOutput) AllInfoTypes() GooglePrivacyDlpV2AllInfoTypesResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ImageTransformationResponse) GooglePrivacyDlpV2AllInfoTypesResponse {
		return v.AllInfoTypes
	}).(GooglePrivacyDlpV2AllInfoTypesResponseOutput)
}

// Apply transformation to all text that doesn't match an infoType. Only one instance is allowed within the ImageTransformations message.
func (o GooglePrivacyDlpV2ImageTransformationResponseOutput) AllText() GooglePrivacyDlpV2AllTextResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ImageTransformationResponse) GooglePrivacyDlpV2AllTextResponse {
		return v.AllText
	}).(GooglePrivacyDlpV2AllTextResponseOutput)
}

// The color to use when redacting content from an image. If not specified, the default is black.
func (o GooglePrivacyDlpV2ImageTransformationResponseOutput) RedactionColor() GooglePrivacyDlpV2ColorResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ImageTransformationResponse) GooglePrivacyDlpV2ColorResponse {
		return v.RedactionColor
	}).(GooglePrivacyDlpV2ColorResponseOutput)
}

// Apply transformation to the selected info_types.
func (o GooglePrivacyDlpV2ImageTransformationResponseOutput) SelectedInfoTypes() GooglePrivacyDlpV2SelectedInfoTypesResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ImageTransformationResponse) GooglePrivacyDlpV2SelectedInfoTypesResponse {
		return v.SelectedInfoTypes
	}).(GooglePrivacyDlpV2SelectedInfoTypesResponseOutput)
}

type GooglePrivacyDlpV2ImageTransformationResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ImageTransformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2ImageTransformationResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ImageTransformationResponseArrayOutput) ToGooglePrivacyDlpV2ImageTransformationResponseArrayOutput() GooglePrivacyDlpV2ImageTransformationResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationResponseArrayOutput) ToGooglePrivacyDlpV2ImageTransformationResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2ImageTransformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2ImageTransformationResponse {
		return vs[0].([]GooglePrivacyDlpV2ImageTransformationResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2ImageTransformationResponseOutput)
}

// A type of transformation that is applied over images.
type GooglePrivacyDlpV2ImageTransformations struct {
	Transforms []GooglePrivacyDlpV2ImageTransformation `pulumi:"transforms"`
}

// GooglePrivacyDlpV2ImageTransformationsInput is an input type that accepts GooglePrivacyDlpV2ImageTransformationsArgs and GooglePrivacyDlpV2ImageTransformationsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ImageTransformationsInput` via:
//
//	GooglePrivacyDlpV2ImageTransformationsArgs{...}
type GooglePrivacyDlpV2ImageTransformationsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ImageTransformationsOutput() GooglePrivacyDlpV2ImageTransformationsOutput
	ToGooglePrivacyDlpV2ImageTransformationsOutputWithContext(context.Context) GooglePrivacyDlpV2ImageTransformationsOutput
}

// A type of transformation that is applied over images.
type GooglePrivacyDlpV2ImageTransformationsArgs struct {
	Transforms GooglePrivacyDlpV2ImageTransformationArrayInput `pulumi:"transforms"`
}

func (GooglePrivacyDlpV2ImageTransformationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ImageTransformations)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ImageTransformationsArgs) ToGooglePrivacyDlpV2ImageTransformationsOutput() GooglePrivacyDlpV2ImageTransformationsOutput {
	return i.ToGooglePrivacyDlpV2ImageTransformationsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ImageTransformationsArgs) ToGooglePrivacyDlpV2ImageTransformationsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ImageTransformationsOutput)
}

func (i GooglePrivacyDlpV2ImageTransformationsArgs) ToGooglePrivacyDlpV2ImageTransformationsPtrOutput() GooglePrivacyDlpV2ImageTransformationsPtrOutput {
	return i.ToGooglePrivacyDlpV2ImageTransformationsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ImageTransformationsArgs) ToGooglePrivacyDlpV2ImageTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ImageTransformationsOutput).ToGooglePrivacyDlpV2ImageTransformationsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ImageTransformationsPtrInput is an input type that accepts GooglePrivacyDlpV2ImageTransformationsArgs, GooglePrivacyDlpV2ImageTransformationsPtr and GooglePrivacyDlpV2ImageTransformationsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ImageTransformationsPtrInput` via:
//
//	        GooglePrivacyDlpV2ImageTransformationsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ImageTransformationsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ImageTransformationsPtrOutput() GooglePrivacyDlpV2ImageTransformationsPtrOutput
	ToGooglePrivacyDlpV2ImageTransformationsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ImageTransformationsPtrOutput
}

type googlePrivacyDlpV2ImageTransformationsPtrType GooglePrivacyDlpV2ImageTransformationsArgs

func GooglePrivacyDlpV2ImageTransformationsPtr(v *GooglePrivacyDlpV2ImageTransformationsArgs) GooglePrivacyDlpV2ImageTransformationsPtrInput {
	return (*googlePrivacyDlpV2ImageTransformationsPtrType)(v)
}

func (*googlePrivacyDlpV2ImageTransformationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ImageTransformations)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ImageTransformationsPtrType) ToGooglePrivacyDlpV2ImageTransformationsPtrOutput() GooglePrivacyDlpV2ImageTransformationsPtrOutput {
	return i.ToGooglePrivacyDlpV2ImageTransformationsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ImageTransformationsPtrType) ToGooglePrivacyDlpV2ImageTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ImageTransformationsPtrOutput)
}

// A type of transformation that is applied over images.
type GooglePrivacyDlpV2ImageTransformationsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ImageTransformationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ImageTransformations)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ImageTransformationsOutput) ToGooglePrivacyDlpV2ImageTransformationsOutput() GooglePrivacyDlpV2ImageTransformationsOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationsOutput) ToGooglePrivacyDlpV2ImageTransformationsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationsOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationsOutput) ToGooglePrivacyDlpV2ImageTransformationsPtrOutput() GooglePrivacyDlpV2ImageTransformationsPtrOutput {
	return o.ToGooglePrivacyDlpV2ImageTransformationsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ImageTransformationsOutput) ToGooglePrivacyDlpV2ImageTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2ImageTransformations) *GooglePrivacyDlpV2ImageTransformations {
		return &v
	}).(GooglePrivacyDlpV2ImageTransformationsPtrOutput)
}

func (o GooglePrivacyDlpV2ImageTransformationsOutput) Transforms() GooglePrivacyDlpV2ImageTransformationArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ImageTransformations) []GooglePrivacyDlpV2ImageTransformation {
		return v.Transforms
	}).(GooglePrivacyDlpV2ImageTransformationArrayOutput)
}

type GooglePrivacyDlpV2ImageTransformationsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ImageTransformationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ImageTransformations)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ImageTransformationsPtrOutput) ToGooglePrivacyDlpV2ImageTransformationsPtrOutput() GooglePrivacyDlpV2ImageTransformationsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationsPtrOutput) ToGooglePrivacyDlpV2ImageTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationsPtrOutput) Elem() GooglePrivacyDlpV2ImageTransformationsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ImageTransformations) GooglePrivacyDlpV2ImageTransformations {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2ImageTransformations
		return ret
	}).(GooglePrivacyDlpV2ImageTransformationsOutput)
}

func (o GooglePrivacyDlpV2ImageTransformationsPtrOutput) Transforms() GooglePrivacyDlpV2ImageTransformationArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ImageTransformations) []GooglePrivacyDlpV2ImageTransformation {
		if v == nil {
			return nil
		}
		return v.Transforms
	}).(GooglePrivacyDlpV2ImageTransformationArrayOutput)
}

// A type of transformation that is applied over images.
type GooglePrivacyDlpV2ImageTransformationsResponse struct {
	Transforms []GooglePrivacyDlpV2ImageTransformationResponse `pulumi:"transforms"`
}

// A type of transformation that is applied over images.
type GooglePrivacyDlpV2ImageTransformationsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ImageTransformationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ImageTransformationsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ImageTransformationsResponseOutput) ToGooglePrivacyDlpV2ImageTransformationsResponseOutput() GooglePrivacyDlpV2ImageTransformationsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationsResponseOutput) ToGooglePrivacyDlpV2ImageTransformationsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ImageTransformationsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ImageTransformationsResponseOutput) Transforms() GooglePrivacyDlpV2ImageTransformationResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ImageTransformationsResponse) []GooglePrivacyDlpV2ImageTransformationResponse {
		return v.Transforms
	}).(GooglePrivacyDlpV2ImageTransformationResponseArrayOutput)
}

// Type of information detected by the API.
type GooglePrivacyDlpV2InfoType struct {
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$_-]{1,64}`.
	Name *string `pulumi:"name"`
	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	SensitivityScore *GooglePrivacyDlpV2SensitivityScore `pulumi:"sensitivityScore"`
	// Optional version name for this InfoType.
	Version *string `pulumi:"version"`
}

// GooglePrivacyDlpV2InfoTypeInput is an input type that accepts GooglePrivacyDlpV2InfoTypeArgs and GooglePrivacyDlpV2InfoTypeOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypeInput` via:
//
//	GooglePrivacyDlpV2InfoTypeArgs{...}
type GooglePrivacyDlpV2InfoTypeInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypeOutput() GooglePrivacyDlpV2InfoTypeOutput
	ToGooglePrivacyDlpV2InfoTypeOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypeOutput
}

// Type of information detected by the API.
type GooglePrivacyDlpV2InfoTypeArgs struct {
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$_-]{1,64}`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	SensitivityScore GooglePrivacyDlpV2SensitivityScorePtrInput `pulumi:"sensitivityScore"`
	// Optional version name for this InfoType.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GooglePrivacyDlpV2InfoTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoType)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InfoTypeArgs) ToGooglePrivacyDlpV2InfoTypeOutput() GooglePrivacyDlpV2InfoTypeOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeArgs) ToGooglePrivacyDlpV2InfoTypeOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeOutput)
}

func (i GooglePrivacyDlpV2InfoTypeArgs) ToGooglePrivacyDlpV2InfoTypePtrOutput() GooglePrivacyDlpV2InfoTypePtrOutput {
	return i.ToGooglePrivacyDlpV2InfoTypePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeArgs) ToGooglePrivacyDlpV2InfoTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeOutput).ToGooglePrivacyDlpV2InfoTypePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2InfoTypePtrInput is an input type that accepts GooglePrivacyDlpV2InfoTypeArgs, GooglePrivacyDlpV2InfoTypePtr and GooglePrivacyDlpV2InfoTypePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypePtrInput` via:
//
//	        GooglePrivacyDlpV2InfoTypeArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2InfoTypePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypePtrOutput() GooglePrivacyDlpV2InfoTypePtrOutput
	ToGooglePrivacyDlpV2InfoTypePtrOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypePtrOutput
}

type googlePrivacyDlpV2InfoTypePtrType GooglePrivacyDlpV2InfoTypeArgs

func GooglePrivacyDlpV2InfoTypePtr(v *GooglePrivacyDlpV2InfoTypeArgs) GooglePrivacyDlpV2InfoTypePtrInput {
	return (*googlePrivacyDlpV2InfoTypePtrType)(v)
}

func (*googlePrivacyDlpV2InfoTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2InfoType)(nil)).Elem()
}

func (i *googlePrivacyDlpV2InfoTypePtrType) ToGooglePrivacyDlpV2InfoTypePtrOutput() GooglePrivacyDlpV2InfoTypePtrOutput {
	return i.ToGooglePrivacyDlpV2InfoTypePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2InfoTypePtrType) ToGooglePrivacyDlpV2InfoTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

// GooglePrivacyDlpV2InfoTypeArrayInput is an input type that accepts GooglePrivacyDlpV2InfoTypeArray and GooglePrivacyDlpV2InfoTypeArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypeArrayInput` via:
//
//	GooglePrivacyDlpV2InfoTypeArray{ GooglePrivacyDlpV2InfoTypeArgs{...} }
type GooglePrivacyDlpV2InfoTypeArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypeArrayOutput() GooglePrivacyDlpV2InfoTypeArrayOutput
	ToGooglePrivacyDlpV2InfoTypeArrayOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypeArrayOutput
}

type GooglePrivacyDlpV2InfoTypeArray []GooglePrivacyDlpV2InfoTypeInput

func (GooglePrivacyDlpV2InfoTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoType)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InfoTypeArray) ToGooglePrivacyDlpV2InfoTypeArrayOutput() GooglePrivacyDlpV2InfoTypeArrayOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeArray) ToGooglePrivacyDlpV2InfoTypeArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeArrayOutput)
}

// Type of information detected by the API.
type GooglePrivacyDlpV2InfoTypeOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoType)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeOutput) ToGooglePrivacyDlpV2InfoTypeOutput() GooglePrivacyDlpV2InfoTypeOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeOutput) ToGooglePrivacyDlpV2InfoTypeOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeOutput) ToGooglePrivacyDlpV2InfoTypePtrOutput() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ToGooglePrivacyDlpV2InfoTypePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2InfoTypeOutput) ToGooglePrivacyDlpV2InfoTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2InfoType) *GooglePrivacyDlpV2InfoType {
		return &v
	}).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$_-]{1,64}`.
func (o GooglePrivacyDlpV2InfoTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional custom sensitivity for this InfoType. This only applies to data profiling.
func (o GooglePrivacyDlpV2InfoTypeOutput) SensitivityScore() GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoType) *GooglePrivacyDlpV2SensitivityScore { return v.SensitivityScore }).(GooglePrivacyDlpV2SensitivityScorePtrOutput)
}

// Optional version name for this InfoType.
func (o GooglePrivacyDlpV2InfoTypeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoType) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2InfoTypePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2InfoType)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypePtrOutput) ToGooglePrivacyDlpV2InfoTypePtrOutput() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypePtrOutput) ToGooglePrivacyDlpV2InfoTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypePtrOutput) Elem() GooglePrivacyDlpV2InfoTypeOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InfoType) GooglePrivacyDlpV2InfoType {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2InfoType
		return ret
	}).(GooglePrivacyDlpV2InfoTypeOutput)
}

// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$_-]{1,64}`.
func (o GooglePrivacyDlpV2InfoTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InfoType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Optional custom sensitivity for this InfoType. This only applies to data profiling.
func (o GooglePrivacyDlpV2InfoTypePtrOutput) SensitivityScore() GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InfoType) *GooglePrivacyDlpV2SensitivityScore {
		if v == nil {
			return nil
		}
		return v.SensitivityScore
	}).(GooglePrivacyDlpV2SensitivityScorePtrOutput)
}

// Optional version name for this InfoType.
func (o GooglePrivacyDlpV2InfoTypePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InfoType) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2InfoTypeArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoType)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeArrayOutput) ToGooglePrivacyDlpV2InfoTypeArrayOutput() GooglePrivacyDlpV2InfoTypeArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeArrayOutput) ToGooglePrivacyDlpV2InfoTypeArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InfoTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InfoType {
		return vs[0].([]GooglePrivacyDlpV2InfoType)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InfoTypeOutput)
}

// Configuration for setting a minimum likelihood per infotype. Used to customize the minimum likelihood level for specific infotypes in the request. For example, use this if you want to lower the precision for PERSON_NAME without lowering the precision for the other infotypes in the request.
type GooglePrivacyDlpV2InfoTypeLikelihood struct {
	// Type of information the likelihood threshold applies to. Only one likelihood per info_type should be provided. If InfoTypeLikelihood does not have an info_type, the configuration fails.
	InfoType *GooglePrivacyDlpV2InfoType `pulumi:"infoType"`
	// Only returns findings equal to or above this threshold. This field is required or else the configuration fails.
	MinLikelihood *GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood `pulumi:"minLikelihood"`
}

// GooglePrivacyDlpV2InfoTypeLikelihoodInput is an input type that accepts GooglePrivacyDlpV2InfoTypeLikelihoodArgs and GooglePrivacyDlpV2InfoTypeLikelihoodOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypeLikelihoodInput` via:
//
//	GooglePrivacyDlpV2InfoTypeLikelihoodArgs{...}
type GooglePrivacyDlpV2InfoTypeLikelihoodInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypeLikelihoodOutput() GooglePrivacyDlpV2InfoTypeLikelihoodOutput
	ToGooglePrivacyDlpV2InfoTypeLikelihoodOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypeLikelihoodOutput
}

// Configuration for setting a minimum likelihood per infotype. Used to customize the minimum likelihood level for specific infotypes in the request. For example, use this if you want to lower the precision for PERSON_NAME without lowering the precision for the other infotypes in the request.
type GooglePrivacyDlpV2InfoTypeLikelihoodArgs struct {
	// Type of information the likelihood threshold applies to. Only one likelihood per info_type should be provided. If InfoTypeLikelihood does not have an info_type, the configuration fails.
	InfoType GooglePrivacyDlpV2InfoTypePtrInput `pulumi:"infoType"`
	// Only returns findings equal to or above this threshold. This field is required or else the configuration fails.
	MinLikelihood GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihoodPtrInput `pulumi:"minLikelihood"`
}

func (GooglePrivacyDlpV2InfoTypeLikelihoodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeLikelihood)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InfoTypeLikelihoodArgs) ToGooglePrivacyDlpV2InfoTypeLikelihoodOutput() GooglePrivacyDlpV2InfoTypeLikelihoodOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeLikelihoodOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeLikelihoodArgs) ToGooglePrivacyDlpV2InfoTypeLikelihoodOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLikelihoodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeLikelihoodOutput)
}

// GooglePrivacyDlpV2InfoTypeLikelihoodArrayInput is an input type that accepts GooglePrivacyDlpV2InfoTypeLikelihoodArray and GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypeLikelihoodArrayInput` via:
//
//	GooglePrivacyDlpV2InfoTypeLikelihoodArray{ GooglePrivacyDlpV2InfoTypeLikelihoodArgs{...} }
type GooglePrivacyDlpV2InfoTypeLikelihoodArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput() GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput
	ToGooglePrivacyDlpV2InfoTypeLikelihoodArrayOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput
}

type GooglePrivacyDlpV2InfoTypeLikelihoodArray []GooglePrivacyDlpV2InfoTypeLikelihoodInput

func (GooglePrivacyDlpV2InfoTypeLikelihoodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeLikelihood)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InfoTypeLikelihoodArray) ToGooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput() GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeLikelihoodArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeLikelihoodArray) ToGooglePrivacyDlpV2InfoTypeLikelihoodArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput)
}

// Configuration for setting a minimum likelihood per infotype. Used to customize the minimum likelihood level for specific infotypes in the request. For example, use this if you want to lower the precision for PERSON_NAME without lowering the precision for the other infotypes in the request.
type GooglePrivacyDlpV2InfoTypeLikelihoodOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeLikelihoodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeLikelihood)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeLikelihoodOutput) ToGooglePrivacyDlpV2InfoTypeLikelihoodOutput() GooglePrivacyDlpV2InfoTypeLikelihoodOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLikelihoodOutput) ToGooglePrivacyDlpV2InfoTypeLikelihoodOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLikelihoodOutput {
	return o
}

// Type of information the likelihood threshold applies to. Only one likelihood per info_type should be provided. If InfoTypeLikelihood does not have an info_type, the configuration fails.
func (o GooglePrivacyDlpV2InfoTypeLikelihoodOutput) InfoType() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeLikelihood) *GooglePrivacyDlpV2InfoType { return v.InfoType }).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

// Only returns findings equal to or above this threshold. This field is required or else the configuration fails.
func (o GooglePrivacyDlpV2InfoTypeLikelihoodOutput) MinLikelihood() GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihoodPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeLikelihood) *GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihood {
		return v.MinLikelihood
	}).(GooglePrivacyDlpV2InfoTypeLikelihoodMinLikelihoodPtrOutput)
}

type GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeLikelihood)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput) ToGooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput() GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput) ToGooglePrivacyDlpV2InfoTypeLikelihoodArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InfoTypeLikelihoodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InfoTypeLikelihood {
		return vs[0].([]GooglePrivacyDlpV2InfoTypeLikelihood)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InfoTypeLikelihoodOutput)
}

// Configuration for setting a minimum likelihood per infotype. Used to customize the minimum likelihood level for specific infotypes in the request. For example, use this if you want to lower the precision for PERSON_NAME without lowering the precision for the other infotypes in the request.
type GooglePrivacyDlpV2InfoTypeLikelihoodResponse struct {
	// Type of information the likelihood threshold applies to. Only one likelihood per info_type should be provided. If InfoTypeLikelihood does not have an info_type, the configuration fails.
	InfoType GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoType"`
	// Only returns findings equal to or above this threshold. This field is required or else the configuration fails.
	MinLikelihood string `pulumi:"minLikelihood"`
}

// Configuration for setting a minimum likelihood per infotype. Used to customize the minimum likelihood level for specific infotypes in the request. For example, use this if you want to lower the precision for PERSON_NAME without lowering the precision for the other infotypes in the request.
type GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeLikelihoodResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput) ToGooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput() GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput) ToGooglePrivacyDlpV2InfoTypeLikelihoodResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput {
	return o
}

// Type of information the likelihood threshold applies to. Only one likelihood per info_type should be provided. If InfoTypeLikelihood does not have an info_type, the configuration fails.
func (o GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput) InfoType() GooglePrivacyDlpV2InfoTypeResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeLikelihoodResponse) GooglePrivacyDlpV2InfoTypeResponse {
		return v.InfoType
	}).(GooglePrivacyDlpV2InfoTypeResponseOutput)
}

// Only returns findings equal to or above this threshold. This field is required or else the configuration fails.
func (o GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput) MinLikelihood() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeLikelihoodResponse) string { return v.MinLikelihood }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeLikelihoodResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput) ToGooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput() GooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput) ToGooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InfoTypeLikelihoodResponse {
		return vs[0].([]GooglePrivacyDlpV2InfoTypeLikelihoodResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput)
}

// Max findings configuration per infoType, per content item or long running DlpJob.
type GooglePrivacyDlpV2InfoTypeLimit struct {
	// Type of information the findings limit applies to. Only one limit per info_type should be provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against all info_types that are found but not specified in another InfoTypeLimit.
	InfoType *GooglePrivacyDlpV2InfoType `pulumi:"infoType"`
	// Max findings limit for the given infoType.
	MaxFindings *int `pulumi:"maxFindings"`
}

// GooglePrivacyDlpV2InfoTypeLimitInput is an input type that accepts GooglePrivacyDlpV2InfoTypeLimitArgs and GooglePrivacyDlpV2InfoTypeLimitOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypeLimitInput` via:
//
//	GooglePrivacyDlpV2InfoTypeLimitArgs{...}
type GooglePrivacyDlpV2InfoTypeLimitInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypeLimitOutput() GooglePrivacyDlpV2InfoTypeLimitOutput
	ToGooglePrivacyDlpV2InfoTypeLimitOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypeLimitOutput
}

// Max findings configuration per infoType, per content item or long running DlpJob.
type GooglePrivacyDlpV2InfoTypeLimitArgs struct {
	// Type of information the findings limit applies to. Only one limit per info_type should be provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against all info_types that are found but not specified in another InfoTypeLimit.
	InfoType GooglePrivacyDlpV2InfoTypePtrInput `pulumi:"infoType"`
	// Max findings limit for the given infoType.
	MaxFindings pulumi.IntPtrInput `pulumi:"maxFindings"`
}

func (GooglePrivacyDlpV2InfoTypeLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeLimit)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InfoTypeLimitArgs) ToGooglePrivacyDlpV2InfoTypeLimitOutput() GooglePrivacyDlpV2InfoTypeLimitOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeLimitOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeLimitArgs) ToGooglePrivacyDlpV2InfoTypeLimitOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeLimitOutput)
}

// GooglePrivacyDlpV2InfoTypeLimitArrayInput is an input type that accepts GooglePrivacyDlpV2InfoTypeLimitArray and GooglePrivacyDlpV2InfoTypeLimitArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypeLimitArrayInput` via:
//
//	GooglePrivacyDlpV2InfoTypeLimitArray{ GooglePrivacyDlpV2InfoTypeLimitArgs{...} }
type GooglePrivacyDlpV2InfoTypeLimitArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypeLimitArrayOutput() GooglePrivacyDlpV2InfoTypeLimitArrayOutput
	ToGooglePrivacyDlpV2InfoTypeLimitArrayOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypeLimitArrayOutput
}

type GooglePrivacyDlpV2InfoTypeLimitArray []GooglePrivacyDlpV2InfoTypeLimitInput

func (GooglePrivacyDlpV2InfoTypeLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeLimit)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InfoTypeLimitArray) ToGooglePrivacyDlpV2InfoTypeLimitArrayOutput() GooglePrivacyDlpV2InfoTypeLimitArrayOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeLimitArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeLimitArray) ToGooglePrivacyDlpV2InfoTypeLimitArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeLimitArrayOutput)
}

// Max findings configuration per infoType, per content item or long running DlpJob.
type GooglePrivacyDlpV2InfoTypeLimitOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeLimit)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeLimitOutput) ToGooglePrivacyDlpV2InfoTypeLimitOutput() GooglePrivacyDlpV2InfoTypeLimitOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLimitOutput) ToGooglePrivacyDlpV2InfoTypeLimitOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLimitOutput {
	return o
}

// Type of information the findings limit applies to. Only one limit per info_type should be provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against all info_types that are found but not specified in another InfoTypeLimit.
func (o GooglePrivacyDlpV2InfoTypeLimitOutput) InfoType() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeLimit) *GooglePrivacyDlpV2InfoType { return v.InfoType }).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

// Max findings limit for the given infoType.
func (o GooglePrivacyDlpV2InfoTypeLimitOutput) MaxFindings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeLimit) *int { return v.MaxFindings }).(pulumi.IntPtrOutput)
}

type GooglePrivacyDlpV2InfoTypeLimitArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeLimit)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeLimitArrayOutput) ToGooglePrivacyDlpV2InfoTypeLimitArrayOutput() GooglePrivacyDlpV2InfoTypeLimitArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLimitArrayOutput) ToGooglePrivacyDlpV2InfoTypeLimitArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLimitArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLimitArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InfoTypeLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InfoTypeLimit {
		return vs[0].([]GooglePrivacyDlpV2InfoTypeLimit)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InfoTypeLimitOutput)
}

// Max findings configuration per infoType, per content item or long running DlpJob.
type GooglePrivacyDlpV2InfoTypeLimitResponse struct {
	// Type of information the findings limit applies to. Only one limit per info_type should be provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against all info_types that are found but not specified in another InfoTypeLimit.
	InfoType GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoType"`
	// Max findings limit for the given infoType.
	MaxFindings int `pulumi:"maxFindings"`
}

// Max findings configuration per infoType, per content item or long running DlpJob.
type GooglePrivacyDlpV2InfoTypeLimitResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeLimitResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeLimitResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeLimitResponseOutput) ToGooglePrivacyDlpV2InfoTypeLimitResponseOutput() GooglePrivacyDlpV2InfoTypeLimitResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLimitResponseOutput) ToGooglePrivacyDlpV2InfoTypeLimitResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLimitResponseOutput {
	return o
}

// Type of information the findings limit applies to. Only one limit per info_type should be provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against all info_types that are found but not specified in another InfoTypeLimit.
func (o GooglePrivacyDlpV2InfoTypeLimitResponseOutput) InfoType() GooglePrivacyDlpV2InfoTypeResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeLimitResponse) GooglePrivacyDlpV2InfoTypeResponse { return v.InfoType }).(GooglePrivacyDlpV2InfoTypeResponseOutput)
}

// Max findings limit for the given infoType.
func (o GooglePrivacyDlpV2InfoTypeLimitResponseOutput) MaxFindings() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeLimitResponse) int { return v.MaxFindings }).(pulumi.IntOutput)
}

type GooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeLimitResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput) ToGooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput() GooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput) ToGooglePrivacyDlpV2InfoTypeLimitResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InfoTypeLimitResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InfoTypeLimitResponse {
		return vs[0].([]GooglePrivacyDlpV2InfoTypeLimitResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InfoTypeLimitResponseOutput)
}

// Type of information detected by the API.
type GooglePrivacyDlpV2InfoTypeResponse struct {
	// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$_-]{1,64}`.
	Name string `pulumi:"name"`
	// Optional custom sensitivity for this InfoType. This only applies to data profiling.
	SensitivityScore GooglePrivacyDlpV2SensitivityScoreResponse `pulumi:"sensitivityScore"`
	// Optional version name for this InfoType.
	Version string `pulumi:"version"`
}

// Type of information detected by the API.
type GooglePrivacyDlpV2InfoTypeResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeResponseOutput) ToGooglePrivacyDlpV2InfoTypeResponseOutput() GooglePrivacyDlpV2InfoTypeResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeResponseOutput) ToGooglePrivacyDlpV2InfoTypeResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeResponseOutput {
	return o
}

// Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$_-]{1,64}`.
func (o GooglePrivacyDlpV2InfoTypeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional custom sensitivity for this InfoType. This only applies to data profiling.
func (o GooglePrivacyDlpV2InfoTypeResponseOutput) SensitivityScore() GooglePrivacyDlpV2SensitivityScoreResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeResponse) GooglePrivacyDlpV2SensitivityScoreResponse {
		return v.SensitivityScore
	}).(GooglePrivacyDlpV2SensitivityScoreResponseOutput)
}

// Optional version name for this InfoType.
func (o GooglePrivacyDlpV2InfoTypeResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeResponse) string { return v.Version }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2InfoTypeResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeResponseArrayOutput) ToGooglePrivacyDlpV2InfoTypeResponseArrayOutput() GooglePrivacyDlpV2InfoTypeResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeResponseArrayOutput) ToGooglePrivacyDlpV2InfoTypeResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InfoTypeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InfoTypeResponse {
		return vs[0].([]GooglePrivacyDlpV2InfoTypeResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InfoTypeResponseOutput)
}

// Statistics regarding a specific InfoType.
type GooglePrivacyDlpV2InfoTypeStatsResponse struct {
	// Number of findings for this infoType.
	Count string `pulumi:"count"`
	// The type of finding this stat is for.
	InfoType GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoType"`
}

// Statistics regarding a specific InfoType.
type GooglePrivacyDlpV2InfoTypeStatsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeStatsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeStatsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeStatsResponseOutput) ToGooglePrivacyDlpV2InfoTypeStatsResponseOutput() GooglePrivacyDlpV2InfoTypeStatsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeStatsResponseOutput) ToGooglePrivacyDlpV2InfoTypeStatsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeStatsResponseOutput {
	return o
}

// Number of findings for this infoType.
func (o GooglePrivacyDlpV2InfoTypeStatsResponseOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeStatsResponse) string { return v.Count }).(pulumi.StringOutput)
}

// The type of finding this stat is for.
func (o GooglePrivacyDlpV2InfoTypeStatsResponseOutput) InfoType() GooglePrivacyDlpV2InfoTypeResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeStatsResponse) GooglePrivacyDlpV2InfoTypeResponse { return v.InfoType }).(GooglePrivacyDlpV2InfoTypeResponseOutput)
}

type GooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeStatsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput) ToGooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput() GooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput) ToGooglePrivacyDlpV2InfoTypeStatsResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InfoTypeStatsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InfoTypeStatsResponse {
		return vs[0].([]GooglePrivacyDlpV2InfoTypeStatsResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InfoTypeStatsResponseOutput)
}

// A transformation to apply to text that is identified as a specific info_type.
type GooglePrivacyDlpV2InfoTypeTransformation struct {
	// InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.
	InfoTypes []GooglePrivacyDlpV2InfoType `pulumi:"infoTypes"`
	// Primitive transformation to apply to the infoType.
	PrimitiveTransformation GooglePrivacyDlpV2PrimitiveTransformation `pulumi:"primitiveTransformation"`
}

// GooglePrivacyDlpV2InfoTypeTransformationInput is an input type that accepts GooglePrivacyDlpV2InfoTypeTransformationArgs and GooglePrivacyDlpV2InfoTypeTransformationOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypeTransformationInput` via:
//
//	GooglePrivacyDlpV2InfoTypeTransformationArgs{...}
type GooglePrivacyDlpV2InfoTypeTransformationInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypeTransformationOutput() GooglePrivacyDlpV2InfoTypeTransformationOutput
	ToGooglePrivacyDlpV2InfoTypeTransformationOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypeTransformationOutput
}

// A transformation to apply to text that is identified as a specific info_type.
type GooglePrivacyDlpV2InfoTypeTransformationArgs struct {
	// InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.
	InfoTypes GooglePrivacyDlpV2InfoTypeArrayInput `pulumi:"infoTypes"`
	// Primitive transformation to apply to the infoType.
	PrimitiveTransformation GooglePrivacyDlpV2PrimitiveTransformationInput `pulumi:"primitiveTransformation"`
}

func (GooglePrivacyDlpV2InfoTypeTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeTransformation)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InfoTypeTransformationArgs) ToGooglePrivacyDlpV2InfoTypeTransformationOutput() GooglePrivacyDlpV2InfoTypeTransformationOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeTransformationOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeTransformationArgs) ToGooglePrivacyDlpV2InfoTypeTransformationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeTransformationOutput)
}

// GooglePrivacyDlpV2InfoTypeTransformationArrayInput is an input type that accepts GooglePrivacyDlpV2InfoTypeTransformationArray and GooglePrivacyDlpV2InfoTypeTransformationArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypeTransformationArrayInput` via:
//
//	GooglePrivacyDlpV2InfoTypeTransformationArray{ GooglePrivacyDlpV2InfoTypeTransformationArgs{...} }
type GooglePrivacyDlpV2InfoTypeTransformationArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypeTransformationArrayOutput() GooglePrivacyDlpV2InfoTypeTransformationArrayOutput
	ToGooglePrivacyDlpV2InfoTypeTransformationArrayOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypeTransformationArrayOutput
}

type GooglePrivacyDlpV2InfoTypeTransformationArray []GooglePrivacyDlpV2InfoTypeTransformationInput

func (GooglePrivacyDlpV2InfoTypeTransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeTransformation)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InfoTypeTransformationArray) ToGooglePrivacyDlpV2InfoTypeTransformationArrayOutput() GooglePrivacyDlpV2InfoTypeTransformationArrayOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeTransformationArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeTransformationArray) ToGooglePrivacyDlpV2InfoTypeTransformationArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeTransformationArrayOutput)
}

// A transformation to apply to text that is identified as a specific info_type.
type GooglePrivacyDlpV2InfoTypeTransformationOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeTransformation)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeTransformationOutput) ToGooglePrivacyDlpV2InfoTypeTransformationOutput() GooglePrivacyDlpV2InfoTypeTransformationOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationOutput) ToGooglePrivacyDlpV2InfoTypeTransformationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationOutput {
	return o
}

// InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.
func (o GooglePrivacyDlpV2InfoTypeTransformationOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeTransformation) []GooglePrivacyDlpV2InfoType { return v.InfoTypes }).(GooglePrivacyDlpV2InfoTypeArrayOutput)
}

// Primitive transformation to apply to the infoType.
func (o GooglePrivacyDlpV2InfoTypeTransformationOutput) PrimitiveTransformation() GooglePrivacyDlpV2PrimitiveTransformationOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeTransformation) GooglePrivacyDlpV2PrimitiveTransformation {
		return v.PrimitiveTransformation
	}).(GooglePrivacyDlpV2PrimitiveTransformationOutput)
}

type GooglePrivacyDlpV2InfoTypeTransformationArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeTransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeTransformation)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeTransformationArrayOutput) ToGooglePrivacyDlpV2InfoTypeTransformationArrayOutput() GooglePrivacyDlpV2InfoTypeTransformationArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationArrayOutput) ToGooglePrivacyDlpV2InfoTypeTransformationArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InfoTypeTransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InfoTypeTransformation {
		return vs[0].([]GooglePrivacyDlpV2InfoTypeTransformation)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InfoTypeTransformationOutput)
}

// A transformation to apply to text that is identified as a specific info_type.
type GooglePrivacyDlpV2InfoTypeTransformationResponse struct {
	// InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.
	InfoTypes []GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoTypes"`
	// Primitive transformation to apply to the infoType.
	PrimitiveTransformation GooglePrivacyDlpV2PrimitiveTransformationResponse `pulumi:"primitiveTransformation"`
}

// A transformation to apply to text that is identified as a specific info_type.
type GooglePrivacyDlpV2InfoTypeTransformationResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeTransformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeTransformationResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeTransformationResponseOutput) ToGooglePrivacyDlpV2InfoTypeTransformationResponseOutput() GooglePrivacyDlpV2InfoTypeTransformationResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationResponseOutput) ToGooglePrivacyDlpV2InfoTypeTransformationResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationResponseOutput {
	return o
}

// InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.
func (o GooglePrivacyDlpV2InfoTypeTransformationResponseOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeTransformationResponse) []GooglePrivacyDlpV2InfoTypeResponse {
		return v.InfoTypes
	}).(GooglePrivacyDlpV2InfoTypeResponseArrayOutput)
}

// Primitive transformation to apply to the infoType.
func (o GooglePrivacyDlpV2InfoTypeTransformationResponseOutput) PrimitiveTransformation() GooglePrivacyDlpV2PrimitiveTransformationResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeTransformationResponse) GooglePrivacyDlpV2PrimitiveTransformationResponse {
		return v.PrimitiveTransformation
	}).(GooglePrivacyDlpV2PrimitiveTransformationResponseOutput)
}

type GooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InfoTypeTransformationResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput) ToGooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput() GooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput) ToGooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InfoTypeTransformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InfoTypeTransformationResponse {
		return vs[0].([]GooglePrivacyDlpV2InfoTypeTransformationResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InfoTypeTransformationResponseOutput)
}

// A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.
type GooglePrivacyDlpV2InfoTypeTransformations struct {
	// Transformation for each infoType. Cannot specify more than one for a given infoType.
	Transformations []GooglePrivacyDlpV2InfoTypeTransformation `pulumi:"transformations"`
}

// GooglePrivacyDlpV2InfoTypeTransformationsInput is an input type that accepts GooglePrivacyDlpV2InfoTypeTransformationsArgs and GooglePrivacyDlpV2InfoTypeTransformationsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypeTransformationsInput` via:
//
//	GooglePrivacyDlpV2InfoTypeTransformationsArgs{...}
type GooglePrivacyDlpV2InfoTypeTransformationsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypeTransformationsOutput() GooglePrivacyDlpV2InfoTypeTransformationsOutput
	ToGooglePrivacyDlpV2InfoTypeTransformationsOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypeTransformationsOutput
}

// A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.
type GooglePrivacyDlpV2InfoTypeTransformationsArgs struct {
	// Transformation for each infoType. Cannot specify more than one for a given infoType.
	Transformations GooglePrivacyDlpV2InfoTypeTransformationArrayInput `pulumi:"transformations"`
}

func (GooglePrivacyDlpV2InfoTypeTransformationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeTransformations)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InfoTypeTransformationsArgs) ToGooglePrivacyDlpV2InfoTypeTransformationsOutput() GooglePrivacyDlpV2InfoTypeTransformationsOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeTransformationsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeTransformationsArgs) ToGooglePrivacyDlpV2InfoTypeTransformationsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeTransformationsOutput)
}

func (i GooglePrivacyDlpV2InfoTypeTransformationsArgs) ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutput() GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InfoTypeTransformationsArgs) ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeTransformationsOutput).ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2InfoTypeTransformationsPtrInput is an input type that accepts GooglePrivacyDlpV2InfoTypeTransformationsArgs, GooglePrivacyDlpV2InfoTypeTransformationsPtr and GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InfoTypeTransformationsPtrInput` via:
//
//	        GooglePrivacyDlpV2InfoTypeTransformationsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2InfoTypeTransformationsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutput() GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput
	ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput
}

type googlePrivacyDlpV2InfoTypeTransformationsPtrType GooglePrivacyDlpV2InfoTypeTransformationsArgs

func GooglePrivacyDlpV2InfoTypeTransformationsPtr(v *GooglePrivacyDlpV2InfoTypeTransformationsArgs) GooglePrivacyDlpV2InfoTypeTransformationsPtrInput {
	return (*googlePrivacyDlpV2InfoTypeTransformationsPtrType)(v)
}

func (*googlePrivacyDlpV2InfoTypeTransformationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2InfoTypeTransformations)(nil)).Elem()
}

func (i *googlePrivacyDlpV2InfoTypeTransformationsPtrType) ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutput() GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return i.ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2InfoTypeTransformationsPtrType) ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput)
}

// A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.
type GooglePrivacyDlpV2InfoTypeTransformationsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeTransformationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeTransformations)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeTransformationsOutput) ToGooglePrivacyDlpV2InfoTypeTransformationsOutput() GooglePrivacyDlpV2InfoTypeTransformationsOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationsOutput) ToGooglePrivacyDlpV2InfoTypeTransformationsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationsOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationsOutput) ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutput() GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return o.ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2InfoTypeTransformationsOutput) ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2InfoTypeTransformations) *GooglePrivacyDlpV2InfoTypeTransformations {
		return &v
	}).(GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput)
}

// Transformation for each infoType. Cannot specify more than one for a given infoType.
func (o GooglePrivacyDlpV2InfoTypeTransformationsOutput) Transformations() GooglePrivacyDlpV2InfoTypeTransformationArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeTransformations) []GooglePrivacyDlpV2InfoTypeTransformation {
		return v.Transformations
	}).(GooglePrivacyDlpV2InfoTypeTransformationArrayOutput)
}

type GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2InfoTypeTransformations)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput) ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutput() GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput) ToGooglePrivacyDlpV2InfoTypeTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput) Elem() GooglePrivacyDlpV2InfoTypeTransformationsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InfoTypeTransformations) GooglePrivacyDlpV2InfoTypeTransformations {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2InfoTypeTransformations
		return ret
	}).(GooglePrivacyDlpV2InfoTypeTransformationsOutput)
}

// Transformation for each infoType. Cannot specify more than one for a given infoType.
func (o GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput) Transformations() GooglePrivacyDlpV2InfoTypeTransformationArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InfoTypeTransformations) []GooglePrivacyDlpV2InfoTypeTransformation {
		if v == nil {
			return nil
		}
		return v.Transformations
	}).(GooglePrivacyDlpV2InfoTypeTransformationArrayOutput)
}

// A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.
type GooglePrivacyDlpV2InfoTypeTransformationsResponse struct {
	// Transformation for each infoType. Cannot specify more than one for a given infoType.
	Transformations []GooglePrivacyDlpV2InfoTypeTransformationResponse `pulumi:"transformations"`
}

// A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.
type GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeTransformationsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput) ToGooglePrivacyDlpV2InfoTypeTransformationsResponseOutput() GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput) ToGooglePrivacyDlpV2InfoTypeTransformationsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput {
	return o
}

// Transformation for each infoType. Cannot specify more than one for a given infoType.
func (o GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput) Transformations() GooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InfoTypeTransformationsResponse) []GooglePrivacyDlpV2InfoTypeTransformationResponse {
		return v.Transformations
	}).(GooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput)
}

// Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.
type GooglePrivacyDlpV2InspectConfig struct {
	// Deprecated and unused.
	//
	// Deprecated: Deprecated and unused.
	ContentOptions []GooglePrivacyDlpV2InspectConfigContentOptionsItem `pulumi:"contentOptions"`
	// CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
	CustomInfoTypes []GooglePrivacyDlpV2CustomInfoType `pulumi:"customInfoTypes"`
	// When true, excludes type information of the findings. This is not used for data profiling.
	ExcludeInfoTypes *bool `pulumi:"excludeInfoTypes"`
	// When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.
	IncludeQuote *bool `pulumi:"includeQuote"`
	// Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.
	InfoTypes []GooglePrivacyDlpV2InfoType `pulumi:"infoTypes"`
	// Configuration to control the number of findings returned. This is not used for data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error. When set within an InspectJobConfig, the specified maximum values aren't hard limits. If an inspection job reaches these limits, the job ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than these maximum values.
	Limits *GooglePrivacyDlpV2FindingLimits `pulumi:"limits"`
	// Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/dlp/docs/likelihood).
	MinLikelihood *GooglePrivacyDlpV2InspectConfigMinLikelihood `pulumi:"minLikelihood"`
	// Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.
	MinLikelihoodPerInfoType []GooglePrivacyDlpV2InfoTypeLikelihood `pulumi:"minLikelihoodPerInfoType"`
	// Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.
	RuleSet []GooglePrivacyDlpV2InspectionRuleSet `pulumi:"ruleSet"`
}

// GooglePrivacyDlpV2InspectConfigInput is an input type that accepts GooglePrivacyDlpV2InspectConfigArgs and GooglePrivacyDlpV2InspectConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InspectConfigInput` via:
//
//	GooglePrivacyDlpV2InspectConfigArgs{...}
type GooglePrivacyDlpV2InspectConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InspectConfigOutput() GooglePrivacyDlpV2InspectConfigOutput
	ToGooglePrivacyDlpV2InspectConfigOutputWithContext(context.Context) GooglePrivacyDlpV2InspectConfigOutput
}

// Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.
type GooglePrivacyDlpV2InspectConfigArgs struct {
	// Deprecated and unused.
	//
	// Deprecated: Deprecated and unused.
	ContentOptions GooglePrivacyDlpV2InspectConfigContentOptionsItemArrayInput `pulumi:"contentOptions"`
	// CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
	CustomInfoTypes GooglePrivacyDlpV2CustomInfoTypeArrayInput `pulumi:"customInfoTypes"`
	// When true, excludes type information of the findings. This is not used for data profiling.
	ExcludeInfoTypes pulumi.BoolPtrInput `pulumi:"excludeInfoTypes"`
	// When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.
	IncludeQuote pulumi.BoolPtrInput `pulumi:"includeQuote"`
	// Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.
	InfoTypes GooglePrivacyDlpV2InfoTypeArrayInput `pulumi:"infoTypes"`
	// Configuration to control the number of findings returned. This is not used for data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error. When set within an InspectJobConfig, the specified maximum values aren't hard limits. If an inspection job reaches these limits, the job ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than these maximum values.
	Limits GooglePrivacyDlpV2FindingLimitsPtrInput `pulumi:"limits"`
	// Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/dlp/docs/likelihood).
	MinLikelihood GooglePrivacyDlpV2InspectConfigMinLikelihoodPtrInput `pulumi:"minLikelihood"`
	// Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.
	MinLikelihoodPerInfoType GooglePrivacyDlpV2InfoTypeLikelihoodArrayInput `pulumi:"minLikelihoodPerInfoType"`
	// Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.
	RuleSet GooglePrivacyDlpV2InspectionRuleSetArrayInput `pulumi:"ruleSet"`
}

func (GooglePrivacyDlpV2InspectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InspectConfigArgs) ToGooglePrivacyDlpV2InspectConfigOutput() GooglePrivacyDlpV2InspectConfigOutput {
	return i.ToGooglePrivacyDlpV2InspectConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InspectConfigArgs) ToGooglePrivacyDlpV2InspectConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InspectConfigOutput)
}

func (i GooglePrivacyDlpV2InspectConfigArgs) ToGooglePrivacyDlpV2InspectConfigPtrOutput() GooglePrivacyDlpV2InspectConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2InspectConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InspectConfigArgs) ToGooglePrivacyDlpV2InspectConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InspectConfigOutput).ToGooglePrivacyDlpV2InspectConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2InspectConfigPtrInput is an input type that accepts GooglePrivacyDlpV2InspectConfigArgs, GooglePrivacyDlpV2InspectConfigPtr and GooglePrivacyDlpV2InspectConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InspectConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2InspectConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2InspectConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InspectConfigPtrOutput() GooglePrivacyDlpV2InspectConfigPtrOutput
	ToGooglePrivacyDlpV2InspectConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2InspectConfigPtrOutput
}

type googlePrivacyDlpV2InspectConfigPtrType GooglePrivacyDlpV2InspectConfigArgs

func GooglePrivacyDlpV2InspectConfigPtr(v *GooglePrivacyDlpV2InspectConfigArgs) GooglePrivacyDlpV2InspectConfigPtrInput {
	return (*googlePrivacyDlpV2InspectConfigPtrType)(v)
}

func (*googlePrivacyDlpV2InspectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2InspectConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2InspectConfigPtrType) ToGooglePrivacyDlpV2InspectConfigPtrOutput() GooglePrivacyDlpV2InspectConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2InspectConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2InspectConfigPtrType) ToGooglePrivacyDlpV2InspectConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InspectConfigPtrOutput)
}

// Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.
type GooglePrivacyDlpV2InspectConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectConfigOutput) ToGooglePrivacyDlpV2InspectConfigOutput() GooglePrivacyDlpV2InspectConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectConfigOutput) ToGooglePrivacyDlpV2InspectConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectConfigOutput) ToGooglePrivacyDlpV2InspectConfigPtrOutput() GooglePrivacyDlpV2InspectConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2InspectConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2InspectConfigOutput) ToGooglePrivacyDlpV2InspectConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2InspectConfig) *GooglePrivacyDlpV2InspectConfig {
		return &v
	}).(GooglePrivacyDlpV2InspectConfigPtrOutput)
}

// Deprecated and unused.
//
// Deprecated: Deprecated and unused.
func (o GooglePrivacyDlpV2InspectConfigOutput) ContentOptions() GooglePrivacyDlpV2InspectConfigContentOptionsItemArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfig) []GooglePrivacyDlpV2InspectConfigContentOptionsItem {
		return v.ContentOptions
	}).(GooglePrivacyDlpV2InspectConfigContentOptionsItemArrayOutput)
}

// CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
func (o GooglePrivacyDlpV2InspectConfigOutput) CustomInfoTypes() GooglePrivacyDlpV2CustomInfoTypeArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfig) []GooglePrivacyDlpV2CustomInfoType { return v.CustomInfoTypes }).(GooglePrivacyDlpV2CustomInfoTypeArrayOutput)
}

// When true, excludes type information of the findings. This is not used for data profiling.
func (o GooglePrivacyDlpV2InspectConfigOutput) ExcludeInfoTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfig) *bool { return v.ExcludeInfoTypes }).(pulumi.BoolPtrOutput)
}

// When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.
func (o GooglePrivacyDlpV2InspectConfigOutput) IncludeQuote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfig) *bool { return v.IncludeQuote }).(pulumi.BoolPtrOutput)
}

// Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.
func (o GooglePrivacyDlpV2InspectConfigOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfig) []GooglePrivacyDlpV2InfoType { return v.InfoTypes }).(GooglePrivacyDlpV2InfoTypeArrayOutput)
}

// Configuration to control the number of findings returned. This is not used for data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error. When set within an InspectJobConfig, the specified maximum values aren't hard limits. If an inspection job reaches these limits, the job ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than these maximum values.
func (o GooglePrivacyDlpV2InspectConfigOutput) Limits() GooglePrivacyDlpV2FindingLimitsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfig) *GooglePrivacyDlpV2FindingLimits { return v.Limits }).(GooglePrivacyDlpV2FindingLimitsPtrOutput)
}

// Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/dlp/docs/likelihood).
func (o GooglePrivacyDlpV2InspectConfigOutput) MinLikelihood() GooglePrivacyDlpV2InspectConfigMinLikelihoodPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfig) *GooglePrivacyDlpV2InspectConfigMinLikelihood {
		return v.MinLikelihood
	}).(GooglePrivacyDlpV2InspectConfigMinLikelihoodPtrOutput)
}

// Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.
func (o GooglePrivacyDlpV2InspectConfigOutput) MinLikelihoodPerInfoType() GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfig) []GooglePrivacyDlpV2InfoTypeLikelihood {
		return v.MinLikelihoodPerInfoType
	}).(GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput)
}

// Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.
func (o GooglePrivacyDlpV2InspectConfigOutput) RuleSet() GooglePrivacyDlpV2InspectionRuleSetArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfig) []GooglePrivacyDlpV2InspectionRuleSet { return v.RuleSet }).(GooglePrivacyDlpV2InspectionRuleSetArrayOutput)
}

type GooglePrivacyDlpV2InspectConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2InspectConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectConfigPtrOutput) ToGooglePrivacyDlpV2InspectConfigPtrOutput() GooglePrivacyDlpV2InspectConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectConfigPtrOutput) ToGooglePrivacyDlpV2InspectConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectConfigPtrOutput) Elem() GooglePrivacyDlpV2InspectConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectConfig) GooglePrivacyDlpV2InspectConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2InspectConfig
		return ret
	}).(GooglePrivacyDlpV2InspectConfigOutput)
}

// Deprecated and unused.
//
// Deprecated: Deprecated and unused.
func (o GooglePrivacyDlpV2InspectConfigPtrOutput) ContentOptions() GooglePrivacyDlpV2InspectConfigContentOptionsItemArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectConfig) []GooglePrivacyDlpV2InspectConfigContentOptionsItem {
		if v == nil {
			return nil
		}
		return v.ContentOptions
	}).(GooglePrivacyDlpV2InspectConfigContentOptionsItemArrayOutput)
}

// CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
func (o GooglePrivacyDlpV2InspectConfigPtrOutput) CustomInfoTypes() GooglePrivacyDlpV2CustomInfoTypeArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectConfig) []GooglePrivacyDlpV2CustomInfoType {
		if v == nil {
			return nil
		}
		return v.CustomInfoTypes
	}).(GooglePrivacyDlpV2CustomInfoTypeArrayOutput)
}

// When true, excludes type information of the findings. This is not used for data profiling.
func (o GooglePrivacyDlpV2InspectConfigPtrOutput) ExcludeInfoTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeInfoTypes
	}).(pulumi.BoolPtrOutput)
}

// When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.
func (o GooglePrivacyDlpV2InspectConfigPtrOutput) IncludeQuote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeQuote
	}).(pulumi.BoolPtrOutput)
}

// Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.
func (o GooglePrivacyDlpV2InspectConfigPtrOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectConfig) []GooglePrivacyDlpV2InfoType {
		if v == nil {
			return nil
		}
		return v.InfoTypes
	}).(GooglePrivacyDlpV2InfoTypeArrayOutput)
}

// Configuration to control the number of findings returned. This is not used for data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error. When set within an InspectJobConfig, the specified maximum values aren't hard limits. If an inspection job reaches these limits, the job ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than these maximum values.
func (o GooglePrivacyDlpV2InspectConfigPtrOutput) Limits() GooglePrivacyDlpV2FindingLimitsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectConfig) *GooglePrivacyDlpV2FindingLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(GooglePrivacyDlpV2FindingLimitsPtrOutput)
}

// Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/dlp/docs/likelihood).
func (o GooglePrivacyDlpV2InspectConfigPtrOutput) MinLikelihood() GooglePrivacyDlpV2InspectConfigMinLikelihoodPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectConfig) *GooglePrivacyDlpV2InspectConfigMinLikelihood {
		if v == nil {
			return nil
		}
		return v.MinLikelihood
	}).(GooglePrivacyDlpV2InspectConfigMinLikelihoodPtrOutput)
}

// Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.
func (o GooglePrivacyDlpV2InspectConfigPtrOutput) MinLikelihoodPerInfoType() GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectConfig) []GooglePrivacyDlpV2InfoTypeLikelihood {
		if v == nil {
			return nil
		}
		return v.MinLikelihoodPerInfoType
	}).(GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput)
}

// Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.
func (o GooglePrivacyDlpV2InspectConfigPtrOutput) RuleSet() GooglePrivacyDlpV2InspectionRuleSetArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectConfig) []GooglePrivacyDlpV2InspectionRuleSet {
		if v == nil {
			return nil
		}
		return v.RuleSet
	}).(GooglePrivacyDlpV2InspectionRuleSetArrayOutput)
}

// Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.
type GooglePrivacyDlpV2InspectConfigResponse struct {
	// Deprecated and unused.
	//
	// Deprecated: Deprecated and unused.
	ContentOptions []string `pulumi:"contentOptions"`
	// CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
	CustomInfoTypes []GooglePrivacyDlpV2CustomInfoTypeResponse `pulumi:"customInfoTypes"`
	// When true, excludes type information of the findings. This is not used for data profiling.
	ExcludeInfoTypes bool `pulumi:"excludeInfoTypes"`
	// When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.
	IncludeQuote bool `pulumi:"includeQuote"`
	// Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.
	InfoTypes []GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoTypes"`
	// Configuration to control the number of findings returned. This is not used for data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error. When set within an InspectJobConfig, the specified maximum values aren't hard limits. If an inspection job reaches these limits, the job ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than these maximum values.
	Limits GooglePrivacyDlpV2FindingLimitsResponse `pulumi:"limits"`
	// Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/dlp/docs/likelihood).
	MinLikelihood string `pulumi:"minLikelihood"`
	// Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.
	MinLikelihoodPerInfoType []GooglePrivacyDlpV2InfoTypeLikelihoodResponse `pulumi:"minLikelihoodPerInfoType"`
	// Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.
	RuleSet []GooglePrivacyDlpV2InspectionRuleSetResponse `pulumi:"ruleSet"`
}

// Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.
type GooglePrivacyDlpV2InspectConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectConfigResponseOutput) ToGooglePrivacyDlpV2InspectConfigResponseOutput() GooglePrivacyDlpV2InspectConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectConfigResponseOutput) ToGooglePrivacyDlpV2InspectConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectConfigResponseOutput {
	return o
}

// Deprecated and unused.
//
// Deprecated: Deprecated and unused.
func (o GooglePrivacyDlpV2InspectConfigResponseOutput) ContentOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfigResponse) []string { return v.ContentOptions }).(pulumi.StringArrayOutput)
}

// CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
func (o GooglePrivacyDlpV2InspectConfigResponseOutput) CustomInfoTypes() GooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfigResponse) []GooglePrivacyDlpV2CustomInfoTypeResponse {
		return v.CustomInfoTypes
	}).(GooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput)
}

// When true, excludes type information of the findings. This is not used for data profiling.
func (o GooglePrivacyDlpV2InspectConfigResponseOutput) ExcludeInfoTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfigResponse) bool { return v.ExcludeInfoTypes }).(pulumi.BoolOutput)
}

// When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.
func (o GooglePrivacyDlpV2InspectConfigResponseOutput) IncludeQuote() pulumi.BoolOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfigResponse) bool { return v.IncludeQuote }).(pulumi.BoolOutput)
}

// Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.
func (o GooglePrivacyDlpV2InspectConfigResponseOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfigResponse) []GooglePrivacyDlpV2InfoTypeResponse {
		return v.InfoTypes
	}).(GooglePrivacyDlpV2InfoTypeResponseArrayOutput)
}

// Configuration to control the number of findings returned. This is not used for data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error. When set within an InspectJobConfig, the specified maximum values aren't hard limits. If an inspection job reaches these limits, the job ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than these maximum values.
func (o GooglePrivacyDlpV2InspectConfigResponseOutput) Limits() GooglePrivacyDlpV2FindingLimitsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfigResponse) GooglePrivacyDlpV2FindingLimitsResponse {
		return v.Limits
	}).(GooglePrivacyDlpV2FindingLimitsResponseOutput)
}

// Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/dlp/docs/likelihood).
func (o GooglePrivacyDlpV2InspectConfigResponseOutput) MinLikelihood() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfigResponse) string { return v.MinLikelihood }).(pulumi.StringOutput)
}

// Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.
func (o GooglePrivacyDlpV2InspectConfigResponseOutput) MinLikelihoodPerInfoType() GooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfigResponse) []GooglePrivacyDlpV2InfoTypeLikelihoodResponse {
		return v.MinLikelihoodPerInfoType
	}).(GooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput)
}

// Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.
func (o GooglePrivacyDlpV2InspectConfigResponseOutput) RuleSet() GooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectConfigResponse) []GooglePrivacyDlpV2InspectionRuleSetResponse {
		return v.RuleSet
	}).(GooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput)
}

// The results of an inspect DataSource job.
type GooglePrivacyDlpV2InspectDataSourceDetailsResponse struct {
	// The configuration used for this job.
	RequestedOptions GooglePrivacyDlpV2RequestedOptionsResponse `pulumi:"requestedOptions"`
	// A summary of the outcome of this inspection job.
	Result GooglePrivacyDlpV2ResultResponse `pulumi:"result"`
}

// The results of an inspect DataSource job.
type GooglePrivacyDlpV2InspectDataSourceDetailsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectDataSourceDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectDataSourceDetailsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectDataSourceDetailsResponseOutput) ToGooglePrivacyDlpV2InspectDataSourceDetailsResponseOutput() GooglePrivacyDlpV2InspectDataSourceDetailsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectDataSourceDetailsResponseOutput) ToGooglePrivacyDlpV2InspectDataSourceDetailsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectDataSourceDetailsResponseOutput {
	return o
}

// The configuration used for this job.
func (o GooglePrivacyDlpV2InspectDataSourceDetailsResponseOutput) RequestedOptions() GooglePrivacyDlpV2RequestedOptionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectDataSourceDetailsResponse) GooglePrivacyDlpV2RequestedOptionsResponse {
		return v.RequestedOptions
	}).(GooglePrivacyDlpV2RequestedOptionsResponseOutput)
}

// A summary of the outcome of this inspection job.
func (o GooglePrivacyDlpV2InspectDataSourceDetailsResponseOutput) Result() GooglePrivacyDlpV2ResultResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectDataSourceDetailsResponse) GooglePrivacyDlpV2ResultResponse {
		return v.Result
	}).(GooglePrivacyDlpV2ResultResponseOutput)
}

// Controls what and how to inspect for findings.
type GooglePrivacyDlpV2InspectJobConfig struct {
	// Actions to execute at the completion of the job.
	Actions []GooglePrivacyDlpV2Action `pulumi:"actions"`
	// How and what to scan for.
	InspectConfig *GooglePrivacyDlpV2InspectConfig `pulumi:"inspectConfig"`
	// If provided, will be used as the default for all values in InspectConfig. `inspect_config` will be merged into the values persisted as part of the template.
	InspectTemplateName *string `pulumi:"inspectTemplateName"`
	// The data to scan.
	StorageConfig *GooglePrivacyDlpV2StorageConfig `pulumi:"storageConfig"`
}

// GooglePrivacyDlpV2InspectJobConfigInput is an input type that accepts GooglePrivacyDlpV2InspectJobConfigArgs and GooglePrivacyDlpV2InspectJobConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InspectJobConfigInput` via:
//
//	GooglePrivacyDlpV2InspectJobConfigArgs{...}
type GooglePrivacyDlpV2InspectJobConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InspectJobConfigOutput() GooglePrivacyDlpV2InspectJobConfigOutput
	ToGooglePrivacyDlpV2InspectJobConfigOutputWithContext(context.Context) GooglePrivacyDlpV2InspectJobConfigOutput
}

// Controls what and how to inspect for findings.
type GooglePrivacyDlpV2InspectJobConfigArgs struct {
	// Actions to execute at the completion of the job.
	Actions GooglePrivacyDlpV2ActionArrayInput `pulumi:"actions"`
	// How and what to scan for.
	InspectConfig GooglePrivacyDlpV2InspectConfigPtrInput `pulumi:"inspectConfig"`
	// If provided, will be used as the default for all values in InspectConfig. `inspect_config` will be merged into the values persisted as part of the template.
	InspectTemplateName pulumi.StringPtrInput `pulumi:"inspectTemplateName"`
	// The data to scan.
	StorageConfig GooglePrivacyDlpV2StorageConfigPtrInput `pulumi:"storageConfig"`
}

func (GooglePrivacyDlpV2InspectJobConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectJobConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InspectJobConfigArgs) ToGooglePrivacyDlpV2InspectJobConfigOutput() GooglePrivacyDlpV2InspectJobConfigOutput {
	return i.ToGooglePrivacyDlpV2InspectJobConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InspectJobConfigArgs) ToGooglePrivacyDlpV2InspectJobConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectJobConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InspectJobConfigOutput)
}

func (i GooglePrivacyDlpV2InspectJobConfigArgs) ToGooglePrivacyDlpV2InspectJobConfigPtrOutput() GooglePrivacyDlpV2InspectJobConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2InspectJobConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InspectJobConfigArgs) ToGooglePrivacyDlpV2InspectJobConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectJobConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InspectJobConfigOutput).ToGooglePrivacyDlpV2InspectJobConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2InspectJobConfigPtrInput is an input type that accepts GooglePrivacyDlpV2InspectJobConfigArgs, GooglePrivacyDlpV2InspectJobConfigPtr and GooglePrivacyDlpV2InspectJobConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InspectJobConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2InspectJobConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2InspectJobConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InspectJobConfigPtrOutput() GooglePrivacyDlpV2InspectJobConfigPtrOutput
	ToGooglePrivacyDlpV2InspectJobConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2InspectJobConfigPtrOutput
}

type googlePrivacyDlpV2InspectJobConfigPtrType GooglePrivacyDlpV2InspectJobConfigArgs

func GooglePrivacyDlpV2InspectJobConfigPtr(v *GooglePrivacyDlpV2InspectJobConfigArgs) GooglePrivacyDlpV2InspectJobConfigPtrInput {
	return (*googlePrivacyDlpV2InspectJobConfigPtrType)(v)
}

func (*googlePrivacyDlpV2InspectJobConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2InspectJobConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2InspectJobConfigPtrType) ToGooglePrivacyDlpV2InspectJobConfigPtrOutput() GooglePrivacyDlpV2InspectJobConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2InspectJobConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2InspectJobConfigPtrType) ToGooglePrivacyDlpV2InspectJobConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectJobConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InspectJobConfigPtrOutput)
}

// Controls what and how to inspect for findings.
type GooglePrivacyDlpV2InspectJobConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectJobConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectJobConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectJobConfigOutput) ToGooglePrivacyDlpV2InspectJobConfigOutput() GooglePrivacyDlpV2InspectJobConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectJobConfigOutput) ToGooglePrivacyDlpV2InspectJobConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectJobConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectJobConfigOutput) ToGooglePrivacyDlpV2InspectJobConfigPtrOutput() GooglePrivacyDlpV2InspectJobConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2InspectJobConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2InspectJobConfigOutput) ToGooglePrivacyDlpV2InspectJobConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectJobConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2InspectJobConfig) *GooglePrivacyDlpV2InspectJobConfig {
		return &v
	}).(GooglePrivacyDlpV2InspectJobConfigPtrOutput)
}

// Actions to execute at the completion of the job.
func (o GooglePrivacyDlpV2InspectJobConfigOutput) Actions() GooglePrivacyDlpV2ActionArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectJobConfig) []GooglePrivacyDlpV2Action { return v.Actions }).(GooglePrivacyDlpV2ActionArrayOutput)
}

// How and what to scan for.
func (o GooglePrivacyDlpV2InspectJobConfigOutput) InspectConfig() GooglePrivacyDlpV2InspectConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectJobConfig) *GooglePrivacyDlpV2InspectConfig { return v.InspectConfig }).(GooglePrivacyDlpV2InspectConfigPtrOutput)
}

// If provided, will be used as the default for all values in InspectConfig. `inspect_config` will be merged into the values persisted as part of the template.
func (o GooglePrivacyDlpV2InspectJobConfigOutput) InspectTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectJobConfig) *string { return v.InspectTemplateName }).(pulumi.StringPtrOutput)
}

// The data to scan.
func (o GooglePrivacyDlpV2InspectJobConfigOutput) StorageConfig() GooglePrivacyDlpV2StorageConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectJobConfig) *GooglePrivacyDlpV2StorageConfig { return v.StorageConfig }).(GooglePrivacyDlpV2StorageConfigPtrOutput)
}

type GooglePrivacyDlpV2InspectJobConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectJobConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2InspectJobConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectJobConfigPtrOutput) ToGooglePrivacyDlpV2InspectJobConfigPtrOutput() GooglePrivacyDlpV2InspectJobConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectJobConfigPtrOutput) ToGooglePrivacyDlpV2InspectJobConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectJobConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectJobConfigPtrOutput) Elem() GooglePrivacyDlpV2InspectJobConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectJobConfig) GooglePrivacyDlpV2InspectJobConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2InspectJobConfig
		return ret
	}).(GooglePrivacyDlpV2InspectJobConfigOutput)
}

// Actions to execute at the completion of the job.
func (o GooglePrivacyDlpV2InspectJobConfigPtrOutput) Actions() GooglePrivacyDlpV2ActionArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectJobConfig) []GooglePrivacyDlpV2Action {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(GooglePrivacyDlpV2ActionArrayOutput)
}

// How and what to scan for.
func (o GooglePrivacyDlpV2InspectJobConfigPtrOutput) InspectConfig() GooglePrivacyDlpV2InspectConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectJobConfig) *GooglePrivacyDlpV2InspectConfig {
		if v == nil {
			return nil
		}
		return v.InspectConfig
	}).(GooglePrivacyDlpV2InspectConfigPtrOutput)
}

// If provided, will be used as the default for all values in InspectConfig. `inspect_config` will be merged into the values persisted as part of the template.
func (o GooglePrivacyDlpV2InspectJobConfigPtrOutput) InspectTemplateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectJobConfig) *string {
		if v == nil {
			return nil
		}
		return v.InspectTemplateName
	}).(pulumi.StringPtrOutput)
}

// The data to scan.
func (o GooglePrivacyDlpV2InspectJobConfigPtrOutput) StorageConfig() GooglePrivacyDlpV2StorageConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2InspectJobConfig) *GooglePrivacyDlpV2StorageConfig {
		if v == nil {
			return nil
		}
		return v.StorageConfig
	}).(GooglePrivacyDlpV2StorageConfigPtrOutput)
}

// Controls what and how to inspect for findings.
type GooglePrivacyDlpV2InspectJobConfigResponse struct {
	// Actions to execute at the completion of the job.
	Actions []GooglePrivacyDlpV2ActionResponse `pulumi:"actions"`
	// How and what to scan for.
	InspectConfig GooglePrivacyDlpV2InspectConfigResponse `pulumi:"inspectConfig"`
	// If provided, will be used as the default for all values in InspectConfig. `inspect_config` will be merged into the values persisted as part of the template.
	InspectTemplateName string `pulumi:"inspectTemplateName"`
	// The data to scan.
	StorageConfig GooglePrivacyDlpV2StorageConfigResponse `pulumi:"storageConfig"`
}

// Controls what and how to inspect for findings.
type GooglePrivacyDlpV2InspectJobConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectJobConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectJobConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectJobConfigResponseOutput) ToGooglePrivacyDlpV2InspectJobConfigResponseOutput() GooglePrivacyDlpV2InspectJobConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectJobConfigResponseOutput) ToGooglePrivacyDlpV2InspectJobConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectJobConfigResponseOutput {
	return o
}

// Actions to execute at the completion of the job.
func (o GooglePrivacyDlpV2InspectJobConfigResponseOutput) Actions() GooglePrivacyDlpV2ActionResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectJobConfigResponse) []GooglePrivacyDlpV2ActionResponse {
		return v.Actions
	}).(GooglePrivacyDlpV2ActionResponseArrayOutput)
}

// How and what to scan for.
func (o GooglePrivacyDlpV2InspectJobConfigResponseOutput) InspectConfig() GooglePrivacyDlpV2InspectConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectJobConfigResponse) GooglePrivacyDlpV2InspectConfigResponse {
		return v.InspectConfig
	}).(GooglePrivacyDlpV2InspectConfigResponseOutput)
}

// If provided, will be used as the default for all values in InspectConfig. `inspect_config` will be merged into the values persisted as part of the template.
func (o GooglePrivacyDlpV2InspectJobConfigResponseOutput) InspectTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectJobConfigResponse) string { return v.InspectTemplateName }).(pulumi.StringOutput)
}

// The data to scan.
func (o GooglePrivacyDlpV2InspectJobConfigResponseOutput) StorageConfig() GooglePrivacyDlpV2StorageConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectJobConfigResponse) GooglePrivacyDlpV2StorageConfigResponse {
		return v.StorageConfig
	}).(GooglePrivacyDlpV2StorageConfigResponseOutput)
}

// The inspectTemplate contains a configuration (set of types of sensitive data to be detected) to be used anywhere you otherwise would normally specify InspectConfig. See https://cloud.google.com/dlp/docs/concepts-templates to learn more.
type GooglePrivacyDlpV2InspectTemplateResponse struct {
	// The creation timestamp of an inspectTemplate.
	CreateTime string `pulumi:"createTime"`
	// Short description (max 256 chars).
	Description string `pulumi:"description"`
	// Display name (max 256 chars).
	DisplayName string `pulumi:"displayName"`
	// The core content of the template. Configuration of the scanning process.
	InspectConfig GooglePrivacyDlpV2InspectConfigResponse `pulumi:"inspectConfig"`
	// The template name. The template will have one of the following formats: `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`;
	Name string `pulumi:"name"`
	// The last update timestamp of an inspectTemplate.
	UpdateTime string `pulumi:"updateTime"`
}

// The inspectTemplate contains a configuration (set of types of sensitive data to be detected) to be used anywhere you otherwise would normally specify InspectConfig. See https://cloud.google.com/dlp/docs/concepts-templates to learn more.
type GooglePrivacyDlpV2InspectTemplateResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectTemplateResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectTemplateResponseOutput) ToGooglePrivacyDlpV2InspectTemplateResponseOutput() GooglePrivacyDlpV2InspectTemplateResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectTemplateResponseOutput) ToGooglePrivacyDlpV2InspectTemplateResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectTemplateResponseOutput {
	return o
}

// The creation timestamp of an inspectTemplate.
func (o GooglePrivacyDlpV2InspectTemplateResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectTemplateResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Short description (max 256 chars).
func (o GooglePrivacyDlpV2InspectTemplateResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectTemplateResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Display name (max 256 chars).
func (o GooglePrivacyDlpV2InspectTemplateResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectTemplateResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The core content of the template. Configuration of the scanning process.
func (o GooglePrivacyDlpV2InspectTemplateResponseOutput) InspectConfig() GooglePrivacyDlpV2InspectConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectTemplateResponse) GooglePrivacyDlpV2InspectConfigResponse {
		return v.InspectConfig
	}).(GooglePrivacyDlpV2InspectConfigResponseOutput)
}

// The template name. The template will have one of the following formats: `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`;
func (o GooglePrivacyDlpV2InspectTemplateResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectTemplateResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The last update timestamp of an inspectTemplate.
func (o GooglePrivacyDlpV2InspectTemplateResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectTemplateResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// A single inspection rule to be applied to infoTypes, specified in `InspectionRuleSet`.
type GooglePrivacyDlpV2InspectionRule struct {
	// Exclusion rule.
	ExclusionRule *GooglePrivacyDlpV2ExclusionRule `pulumi:"exclusionRule"`
	// Hotword-based detection rule.
	HotwordRule *GooglePrivacyDlpV2HotwordRule `pulumi:"hotwordRule"`
}

// GooglePrivacyDlpV2InspectionRuleInput is an input type that accepts GooglePrivacyDlpV2InspectionRuleArgs and GooglePrivacyDlpV2InspectionRuleOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InspectionRuleInput` via:
//
//	GooglePrivacyDlpV2InspectionRuleArgs{...}
type GooglePrivacyDlpV2InspectionRuleInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InspectionRuleOutput() GooglePrivacyDlpV2InspectionRuleOutput
	ToGooglePrivacyDlpV2InspectionRuleOutputWithContext(context.Context) GooglePrivacyDlpV2InspectionRuleOutput
}

// A single inspection rule to be applied to infoTypes, specified in `InspectionRuleSet`.
type GooglePrivacyDlpV2InspectionRuleArgs struct {
	// Exclusion rule.
	ExclusionRule GooglePrivacyDlpV2ExclusionRulePtrInput `pulumi:"exclusionRule"`
	// Hotword-based detection rule.
	HotwordRule GooglePrivacyDlpV2HotwordRulePtrInput `pulumi:"hotwordRule"`
}

func (GooglePrivacyDlpV2InspectionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectionRule)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InspectionRuleArgs) ToGooglePrivacyDlpV2InspectionRuleOutput() GooglePrivacyDlpV2InspectionRuleOutput {
	return i.ToGooglePrivacyDlpV2InspectionRuleOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InspectionRuleArgs) ToGooglePrivacyDlpV2InspectionRuleOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InspectionRuleOutput)
}

// GooglePrivacyDlpV2InspectionRuleArrayInput is an input type that accepts GooglePrivacyDlpV2InspectionRuleArray and GooglePrivacyDlpV2InspectionRuleArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InspectionRuleArrayInput` via:
//
//	GooglePrivacyDlpV2InspectionRuleArray{ GooglePrivacyDlpV2InspectionRuleArgs{...} }
type GooglePrivacyDlpV2InspectionRuleArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InspectionRuleArrayOutput() GooglePrivacyDlpV2InspectionRuleArrayOutput
	ToGooglePrivacyDlpV2InspectionRuleArrayOutputWithContext(context.Context) GooglePrivacyDlpV2InspectionRuleArrayOutput
}

type GooglePrivacyDlpV2InspectionRuleArray []GooglePrivacyDlpV2InspectionRuleInput

func (GooglePrivacyDlpV2InspectionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InspectionRule)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InspectionRuleArray) ToGooglePrivacyDlpV2InspectionRuleArrayOutput() GooglePrivacyDlpV2InspectionRuleArrayOutput {
	return i.ToGooglePrivacyDlpV2InspectionRuleArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InspectionRuleArray) ToGooglePrivacyDlpV2InspectionRuleArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InspectionRuleArrayOutput)
}

// A single inspection rule to be applied to infoTypes, specified in `InspectionRuleSet`.
type GooglePrivacyDlpV2InspectionRuleOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectionRule)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectionRuleOutput) ToGooglePrivacyDlpV2InspectionRuleOutput() GooglePrivacyDlpV2InspectionRuleOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleOutput) ToGooglePrivacyDlpV2InspectionRuleOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleOutput {
	return o
}

// Exclusion rule.
func (o GooglePrivacyDlpV2InspectionRuleOutput) ExclusionRule() GooglePrivacyDlpV2ExclusionRulePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectionRule) *GooglePrivacyDlpV2ExclusionRule { return v.ExclusionRule }).(GooglePrivacyDlpV2ExclusionRulePtrOutput)
}

// Hotword-based detection rule.
func (o GooglePrivacyDlpV2InspectionRuleOutput) HotwordRule() GooglePrivacyDlpV2HotwordRulePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectionRule) *GooglePrivacyDlpV2HotwordRule { return v.HotwordRule }).(GooglePrivacyDlpV2HotwordRulePtrOutput)
}

type GooglePrivacyDlpV2InspectionRuleArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InspectionRule)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectionRuleArrayOutput) ToGooglePrivacyDlpV2InspectionRuleArrayOutput() GooglePrivacyDlpV2InspectionRuleArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleArrayOutput) ToGooglePrivacyDlpV2InspectionRuleArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InspectionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InspectionRule {
		return vs[0].([]GooglePrivacyDlpV2InspectionRule)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InspectionRuleOutput)
}

// A single inspection rule to be applied to infoTypes, specified in `InspectionRuleSet`.
type GooglePrivacyDlpV2InspectionRuleResponse struct {
	// Exclusion rule.
	ExclusionRule GooglePrivacyDlpV2ExclusionRuleResponse `pulumi:"exclusionRule"`
	// Hotword-based detection rule.
	HotwordRule GooglePrivacyDlpV2HotwordRuleResponse `pulumi:"hotwordRule"`
}

// A single inspection rule to be applied to infoTypes, specified in `InspectionRuleSet`.
type GooglePrivacyDlpV2InspectionRuleResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectionRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectionRuleResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectionRuleResponseOutput) ToGooglePrivacyDlpV2InspectionRuleResponseOutput() GooglePrivacyDlpV2InspectionRuleResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleResponseOutput) ToGooglePrivacyDlpV2InspectionRuleResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleResponseOutput {
	return o
}

// Exclusion rule.
func (o GooglePrivacyDlpV2InspectionRuleResponseOutput) ExclusionRule() GooglePrivacyDlpV2ExclusionRuleResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectionRuleResponse) GooglePrivacyDlpV2ExclusionRuleResponse {
		return v.ExclusionRule
	}).(GooglePrivacyDlpV2ExclusionRuleResponseOutput)
}

// Hotword-based detection rule.
func (o GooglePrivacyDlpV2InspectionRuleResponseOutput) HotwordRule() GooglePrivacyDlpV2HotwordRuleResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectionRuleResponse) GooglePrivacyDlpV2HotwordRuleResponse {
		return v.HotwordRule
	}).(GooglePrivacyDlpV2HotwordRuleResponseOutput)
}

type GooglePrivacyDlpV2InspectionRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectionRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InspectionRuleResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectionRuleResponseArrayOutput) ToGooglePrivacyDlpV2InspectionRuleResponseArrayOutput() GooglePrivacyDlpV2InspectionRuleResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleResponseArrayOutput) ToGooglePrivacyDlpV2InspectionRuleResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InspectionRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InspectionRuleResponse {
		return vs[0].([]GooglePrivacyDlpV2InspectionRuleResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InspectionRuleResponseOutput)
}

// Rule set for modifying a set of infoTypes to alter behavior under certain circumstances, depending on the specific details of the rules within the set.
type GooglePrivacyDlpV2InspectionRuleSet struct {
	// List of infoTypes this rule set is applied to.
	InfoTypes []GooglePrivacyDlpV2InfoType `pulumi:"infoTypes"`
	// Set of rules to be applied to infoTypes. The rules are applied in order.
	Rules []GooglePrivacyDlpV2InspectionRule `pulumi:"rules"`
}

// GooglePrivacyDlpV2InspectionRuleSetInput is an input type that accepts GooglePrivacyDlpV2InspectionRuleSetArgs and GooglePrivacyDlpV2InspectionRuleSetOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InspectionRuleSetInput` via:
//
//	GooglePrivacyDlpV2InspectionRuleSetArgs{...}
type GooglePrivacyDlpV2InspectionRuleSetInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InspectionRuleSetOutput() GooglePrivacyDlpV2InspectionRuleSetOutput
	ToGooglePrivacyDlpV2InspectionRuleSetOutputWithContext(context.Context) GooglePrivacyDlpV2InspectionRuleSetOutput
}

// Rule set for modifying a set of infoTypes to alter behavior under certain circumstances, depending on the specific details of the rules within the set.
type GooglePrivacyDlpV2InspectionRuleSetArgs struct {
	// List of infoTypes this rule set is applied to.
	InfoTypes GooglePrivacyDlpV2InfoTypeArrayInput `pulumi:"infoTypes"`
	// Set of rules to be applied to infoTypes. The rules are applied in order.
	Rules GooglePrivacyDlpV2InspectionRuleArrayInput `pulumi:"rules"`
}

func (GooglePrivacyDlpV2InspectionRuleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectionRuleSet)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InspectionRuleSetArgs) ToGooglePrivacyDlpV2InspectionRuleSetOutput() GooglePrivacyDlpV2InspectionRuleSetOutput {
	return i.ToGooglePrivacyDlpV2InspectionRuleSetOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InspectionRuleSetArgs) ToGooglePrivacyDlpV2InspectionRuleSetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InspectionRuleSetOutput)
}

// GooglePrivacyDlpV2InspectionRuleSetArrayInput is an input type that accepts GooglePrivacyDlpV2InspectionRuleSetArray and GooglePrivacyDlpV2InspectionRuleSetArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2InspectionRuleSetArrayInput` via:
//
//	GooglePrivacyDlpV2InspectionRuleSetArray{ GooglePrivacyDlpV2InspectionRuleSetArgs{...} }
type GooglePrivacyDlpV2InspectionRuleSetArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2InspectionRuleSetArrayOutput() GooglePrivacyDlpV2InspectionRuleSetArrayOutput
	ToGooglePrivacyDlpV2InspectionRuleSetArrayOutputWithContext(context.Context) GooglePrivacyDlpV2InspectionRuleSetArrayOutput
}

type GooglePrivacyDlpV2InspectionRuleSetArray []GooglePrivacyDlpV2InspectionRuleSetInput

func (GooglePrivacyDlpV2InspectionRuleSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InspectionRuleSet)(nil)).Elem()
}

func (i GooglePrivacyDlpV2InspectionRuleSetArray) ToGooglePrivacyDlpV2InspectionRuleSetArrayOutput() GooglePrivacyDlpV2InspectionRuleSetArrayOutput {
	return i.ToGooglePrivacyDlpV2InspectionRuleSetArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2InspectionRuleSetArray) ToGooglePrivacyDlpV2InspectionRuleSetArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2InspectionRuleSetArrayOutput)
}

// Rule set for modifying a set of infoTypes to alter behavior under certain circumstances, depending on the specific details of the rules within the set.
type GooglePrivacyDlpV2InspectionRuleSetOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectionRuleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectionRuleSet)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectionRuleSetOutput) ToGooglePrivacyDlpV2InspectionRuleSetOutput() GooglePrivacyDlpV2InspectionRuleSetOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleSetOutput) ToGooglePrivacyDlpV2InspectionRuleSetOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleSetOutput {
	return o
}

// List of infoTypes this rule set is applied to.
func (o GooglePrivacyDlpV2InspectionRuleSetOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectionRuleSet) []GooglePrivacyDlpV2InfoType { return v.InfoTypes }).(GooglePrivacyDlpV2InfoTypeArrayOutput)
}

// Set of rules to be applied to infoTypes. The rules are applied in order.
func (o GooglePrivacyDlpV2InspectionRuleSetOutput) Rules() GooglePrivacyDlpV2InspectionRuleArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectionRuleSet) []GooglePrivacyDlpV2InspectionRule { return v.Rules }).(GooglePrivacyDlpV2InspectionRuleArrayOutput)
}

type GooglePrivacyDlpV2InspectionRuleSetArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectionRuleSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InspectionRuleSet)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectionRuleSetArrayOutput) ToGooglePrivacyDlpV2InspectionRuleSetArrayOutput() GooglePrivacyDlpV2InspectionRuleSetArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleSetArrayOutput) ToGooglePrivacyDlpV2InspectionRuleSetArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleSetArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleSetArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InspectionRuleSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InspectionRuleSet {
		return vs[0].([]GooglePrivacyDlpV2InspectionRuleSet)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InspectionRuleSetOutput)
}

// Rule set for modifying a set of infoTypes to alter behavior under certain circumstances, depending on the specific details of the rules within the set.
type GooglePrivacyDlpV2InspectionRuleSetResponse struct {
	// List of infoTypes this rule set is applied to.
	InfoTypes []GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoTypes"`
	// Set of rules to be applied to infoTypes. The rules are applied in order.
	Rules []GooglePrivacyDlpV2InspectionRuleResponse `pulumi:"rules"`
}

// Rule set for modifying a set of infoTypes to alter behavior under certain circumstances, depending on the specific details of the rules within the set.
type GooglePrivacyDlpV2InspectionRuleSetResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectionRuleSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2InspectionRuleSetResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectionRuleSetResponseOutput) ToGooglePrivacyDlpV2InspectionRuleSetResponseOutput() GooglePrivacyDlpV2InspectionRuleSetResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleSetResponseOutput) ToGooglePrivacyDlpV2InspectionRuleSetResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleSetResponseOutput {
	return o
}

// List of infoTypes this rule set is applied to.
func (o GooglePrivacyDlpV2InspectionRuleSetResponseOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectionRuleSetResponse) []GooglePrivacyDlpV2InfoTypeResponse {
		return v.InfoTypes
	}).(GooglePrivacyDlpV2InfoTypeResponseArrayOutput)
}

// Set of rules to be applied to infoTypes. The rules are applied in order.
func (o GooglePrivacyDlpV2InspectionRuleSetResponseOutput) Rules() GooglePrivacyDlpV2InspectionRuleResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2InspectionRuleSetResponse) []GooglePrivacyDlpV2InspectionRuleResponse {
		return v.Rules
	}).(GooglePrivacyDlpV2InspectionRuleResponseArrayOutput)
}

type GooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2InspectionRuleSetResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput) ToGooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput() GooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput) ToGooglePrivacyDlpV2InspectionRuleSetResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2InspectionRuleSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2InspectionRuleSetResponse {
		return vs[0].([]GooglePrivacyDlpV2InspectionRuleSetResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2InspectionRuleSetResponseOutput)
}

// Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
type GooglePrivacyDlpV2JobNotificationEmails struct {
}

// GooglePrivacyDlpV2JobNotificationEmailsInput is an input type that accepts GooglePrivacyDlpV2JobNotificationEmailsArgs and GooglePrivacyDlpV2JobNotificationEmailsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2JobNotificationEmailsInput` via:
//
//	GooglePrivacyDlpV2JobNotificationEmailsArgs{...}
type GooglePrivacyDlpV2JobNotificationEmailsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2JobNotificationEmailsOutput() GooglePrivacyDlpV2JobNotificationEmailsOutput
	ToGooglePrivacyDlpV2JobNotificationEmailsOutputWithContext(context.Context) GooglePrivacyDlpV2JobNotificationEmailsOutput
}

// Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
type GooglePrivacyDlpV2JobNotificationEmailsArgs struct {
}

func (GooglePrivacyDlpV2JobNotificationEmailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2JobNotificationEmails)(nil)).Elem()
}

func (i GooglePrivacyDlpV2JobNotificationEmailsArgs) ToGooglePrivacyDlpV2JobNotificationEmailsOutput() GooglePrivacyDlpV2JobNotificationEmailsOutput {
	return i.ToGooglePrivacyDlpV2JobNotificationEmailsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2JobNotificationEmailsArgs) ToGooglePrivacyDlpV2JobNotificationEmailsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2JobNotificationEmailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2JobNotificationEmailsOutput)
}

func (i GooglePrivacyDlpV2JobNotificationEmailsArgs) ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutput() GooglePrivacyDlpV2JobNotificationEmailsPtrOutput {
	return i.ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2JobNotificationEmailsArgs) ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2JobNotificationEmailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2JobNotificationEmailsOutput).ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2JobNotificationEmailsPtrInput is an input type that accepts GooglePrivacyDlpV2JobNotificationEmailsArgs, GooglePrivacyDlpV2JobNotificationEmailsPtr and GooglePrivacyDlpV2JobNotificationEmailsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2JobNotificationEmailsPtrInput` via:
//
//	        GooglePrivacyDlpV2JobNotificationEmailsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2JobNotificationEmailsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutput() GooglePrivacyDlpV2JobNotificationEmailsPtrOutput
	ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2JobNotificationEmailsPtrOutput
}

type googlePrivacyDlpV2JobNotificationEmailsPtrType GooglePrivacyDlpV2JobNotificationEmailsArgs

func GooglePrivacyDlpV2JobNotificationEmailsPtr(v *GooglePrivacyDlpV2JobNotificationEmailsArgs) GooglePrivacyDlpV2JobNotificationEmailsPtrInput {
	return (*googlePrivacyDlpV2JobNotificationEmailsPtrType)(v)
}

func (*googlePrivacyDlpV2JobNotificationEmailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2JobNotificationEmails)(nil)).Elem()
}

func (i *googlePrivacyDlpV2JobNotificationEmailsPtrType) ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutput() GooglePrivacyDlpV2JobNotificationEmailsPtrOutput {
	return i.ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2JobNotificationEmailsPtrType) ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2JobNotificationEmailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2JobNotificationEmailsPtrOutput)
}

// Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
type GooglePrivacyDlpV2JobNotificationEmailsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2JobNotificationEmailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2JobNotificationEmails)(nil)).Elem()
}

func (o GooglePrivacyDlpV2JobNotificationEmailsOutput) ToGooglePrivacyDlpV2JobNotificationEmailsOutput() GooglePrivacyDlpV2JobNotificationEmailsOutput {
	return o
}

func (o GooglePrivacyDlpV2JobNotificationEmailsOutput) ToGooglePrivacyDlpV2JobNotificationEmailsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2JobNotificationEmailsOutput {
	return o
}

func (o GooglePrivacyDlpV2JobNotificationEmailsOutput) ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutput() GooglePrivacyDlpV2JobNotificationEmailsPtrOutput {
	return o.ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2JobNotificationEmailsOutput) ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2JobNotificationEmailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2JobNotificationEmails) *GooglePrivacyDlpV2JobNotificationEmails {
		return &v
	}).(GooglePrivacyDlpV2JobNotificationEmailsPtrOutput)
}

type GooglePrivacyDlpV2JobNotificationEmailsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2JobNotificationEmailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2JobNotificationEmails)(nil)).Elem()
}

func (o GooglePrivacyDlpV2JobNotificationEmailsPtrOutput) ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutput() GooglePrivacyDlpV2JobNotificationEmailsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2JobNotificationEmailsPtrOutput) ToGooglePrivacyDlpV2JobNotificationEmailsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2JobNotificationEmailsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2JobNotificationEmailsPtrOutput) Elem() GooglePrivacyDlpV2JobNotificationEmailsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2JobNotificationEmails) GooglePrivacyDlpV2JobNotificationEmails {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2JobNotificationEmails
		return ret
	}).(GooglePrivacyDlpV2JobNotificationEmailsOutput)
}

// Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
type GooglePrivacyDlpV2JobNotificationEmailsResponse struct {
}

// Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
type GooglePrivacyDlpV2JobNotificationEmailsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2JobNotificationEmailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2JobNotificationEmailsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2JobNotificationEmailsResponseOutput) ToGooglePrivacyDlpV2JobNotificationEmailsResponseOutput() GooglePrivacyDlpV2JobNotificationEmailsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2JobNotificationEmailsResponseOutput) ToGooglePrivacyDlpV2JobNotificationEmailsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2JobNotificationEmailsResponseOutput {
	return o
}

// k-anonymity metric, used for analysis of reidentification risk.
type GooglePrivacyDlpV2KAnonymityConfig struct {
	// Message indicating that multiple rows might be associated to a single individual. If the same entity_id is associated to multiple quasi-identifier tuples over distinct rows, we consider the entire collection of tuples as the composite quasi-identifier. This collection is a multiset: the order in which the different tuples appear in the dataset is ignored, but their frequency is taken into account. Important note: a maximum of 1000 rows can be associated to a single entity ID. If more rows are associated with the same entity ID, some might be ignored.
	EntityId *GooglePrivacyDlpV2EntityId `pulumi:"entityId"`
	// Set of fields to compute k-anonymity over. When multiple fields are specified, they are considered a single composite key. Structs and repeated data types are not supported; however, nested fields are supported so long as they are not structs themselves or nested within a repeated field.
	QuasiIds []GooglePrivacyDlpV2FieldId `pulumi:"quasiIds"`
}

// GooglePrivacyDlpV2KAnonymityConfigInput is an input type that accepts GooglePrivacyDlpV2KAnonymityConfigArgs and GooglePrivacyDlpV2KAnonymityConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2KAnonymityConfigInput` via:
//
//	GooglePrivacyDlpV2KAnonymityConfigArgs{...}
type GooglePrivacyDlpV2KAnonymityConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2KAnonymityConfigOutput() GooglePrivacyDlpV2KAnonymityConfigOutput
	ToGooglePrivacyDlpV2KAnonymityConfigOutputWithContext(context.Context) GooglePrivacyDlpV2KAnonymityConfigOutput
}

// k-anonymity metric, used for analysis of reidentification risk.
type GooglePrivacyDlpV2KAnonymityConfigArgs struct {
	// Message indicating that multiple rows might be associated to a single individual. If the same entity_id is associated to multiple quasi-identifier tuples over distinct rows, we consider the entire collection of tuples as the composite quasi-identifier. This collection is a multiset: the order in which the different tuples appear in the dataset is ignored, but their frequency is taken into account. Important note: a maximum of 1000 rows can be associated to a single entity ID. If more rows are associated with the same entity ID, some might be ignored.
	EntityId GooglePrivacyDlpV2EntityIdPtrInput `pulumi:"entityId"`
	// Set of fields to compute k-anonymity over. When multiple fields are specified, they are considered a single composite key. Structs and repeated data types are not supported; however, nested fields are supported so long as they are not structs themselves or nested within a repeated field.
	QuasiIds GooglePrivacyDlpV2FieldIdArrayInput `pulumi:"quasiIds"`
}

func (GooglePrivacyDlpV2KAnonymityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KAnonymityConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2KAnonymityConfigArgs) ToGooglePrivacyDlpV2KAnonymityConfigOutput() GooglePrivacyDlpV2KAnonymityConfigOutput {
	return i.ToGooglePrivacyDlpV2KAnonymityConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2KAnonymityConfigArgs) ToGooglePrivacyDlpV2KAnonymityConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KAnonymityConfigOutput)
}

func (i GooglePrivacyDlpV2KAnonymityConfigArgs) ToGooglePrivacyDlpV2KAnonymityConfigPtrOutput() GooglePrivacyDlpV2KAnonymityConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2KAnonymityConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2KAnonymityConfigArgs) ToGooglePrivacyDlpV2KAnonymityConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KAnonymityConfigOutput).ToGooglePrivacyDlpV2KAnonymityConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2KAnonymityConfigPtrInput is an input type that accepts GooglePrivacyDlpV2KAnonymityConfigArgs, GooglePrivacyDlpV2KAnonymityConfigPtr and GooglePrivacyDlpV2KAnonymityConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2KAnonymityConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2KAnonymityConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2KAnonymityConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2KAnonymityConfigPtrOutput() GooglePrivacyDlpV2KAnonymityConfigPtrOutput
	ToGooglePrivacyDlpV2KAnonymityConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2KAnonymityConfigPtrOutput
}

type googlePrivacyDlpV2KAnonymityConfigPtrType GooglePrivacyDlpV2KAnonymityConfigArgs

func GooglePrivacyDlpV2KAnonymityConfigPtr(v *GooglePrivacyDlpV2KAnonymityConfigArgs) GooglePrivacyDlpV2KAnonymityConfigPtrInput {
	return (*googlePrivacyDlpV2KAnonymityConfigPtrType)(v)
}

func (*googlePrivacyDlpV2KAnonymityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2KAnonymityConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2KAnonymityConfigPtrType) ToGooglePrivacyDlpV2KAnonymityConfigPtrOutput() GooglePrivacyDlpV2KAnonymityConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2KAnonymityConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2KAnonymityConfigPtrType) ToGooglePrivacyDlpV2KAnonymityConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KAnonymityConfigPtrOutput)
}

// k-anonymity metric, used for analysis of reidentification risk.
type GooglePrivacyDlpV2KAnonymityConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KAnonymityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KAnonymityConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KAnonymityConfigOutput) ToGooglePrivacyDlpV2KAnonymityConfigOutput() GooglePrivacyDlpV2KAnonymityConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityConfigOutput) ToGooglePrivacyDlpV2KAnonymityConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityConfigOutput) ToGooglePrivacyDlpV2KAnonymityConfigPtrOutput() GooglePrivacyDlpV2KAnonymityConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2KAnonymityConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2KAnonymityConfigOutput) ToGooglePrivacyDlpV2KAnonymityConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2KAnonymityConfig) *GooglePrivacyDlpV2KAnonymityConfig {
		return &v
	}).(GooglePrivacyDlpV2KAnonymityConfigPtrOutput)
}

// Message indicating that multiple rows might be associated to a single individual. If the same entity_id is associated to multiple quasi-identifier tuples over distinct rows, we consider the entire collection of tuples as the composite quasi-identifier. This collection is a multiset: the order in which the different tuples appear in the dataset is ignored, but their frequency is taken into account. Important note: a maximum of 1000 rows can be associated to a single entity ID. If more rows are associated with the same entity ID, some might be ignored.
func (o GooglePrivacyDlpV2KAnonymityConfigOutput) EntityId() GooglePrivacyDlpV2EntityIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityConfig) *GooglePrivacyDlpV2EntityId { return v.EntityId }).(GooglePrivacyDlpV2EntityIdPtrOutput)
}

// Set of fields to compute k-anonymity over. When multiple fields are specified, they are considered a single composite key. Structs and repeated data types are not supported; however, nested fields are supported so long as they are not structs themselves or nested within a repeated field.
func (o GooglePrivacyDlpV2KAnonymityConfigOutput) QuasiIds() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityConfig) []GooglePrivacyDlpV2FieldId { return v.QuasiIds }).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

type GooglePrivacyDlpV2KAnonymityConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KAnonymityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2KAnonymityConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KAnonymityConfigPtrOutput) ToGooglePrivacyDlpV2KAnonymityConfigPtrOutput() GooglePrivacyDlpV2KAnonymityConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityConfigPtrOutput) ToGooglePrivacyDlpV2KAnonymityConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityConfigPtrOutput) Elem() GooglePrivacyDlpV2KAnonymityConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KAnonymityConfig) GooglePrivacyDlpV2KAnonymityConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2KAnonymityConfig
		return ret
	}).(GooglePrivacyDlpV2KAnonymityConfigOutput)
}

// Message indicating that multiple rows might be associated to a single individual. If the same entity_id is associated to multiple quasi-identifier tuples over distinct rows, we consider the entire collection of tuples as the composite quasi-identifier. This collection is a multiset: the order in which the different tuples appear in the dataset is ignored, but their frequency is taken into account. Important note: a maximum of 1000 rows can be associated to a single entity ID. If more rows are associated with the same entity ID, some might be ignored.
func (o GooglePrivacyDlpV2KAnonymityConfigPtrOutput) EntityId() GooglePrivacyDlpV2EntityIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KAnonymityConfig) *GooglePrivacyDlpV2EntityId {
		if v == nil {
			return nil
		}
		return v.EntityId
	}).(GooglePrivacyDlpV2EntityIdPtrOutput)
}

// Set of fields to compute k-anonymity over. When multiple fields are specified, they are considered a single composite key. Structs and repeated data types are not supported; however, nested fields are supported so long as they are not structs themselves or nested within a repeated field.
func (o GooglePrivacyDlpV2KAnonymityConfigPtrOutput) QuasiIds() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KAnonymityConfig) []GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.QuasiIds
	}).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// k-anonymity metric, used for analysis of reidentification risk.
type GooglePrivacyDlpV2KAnonymityConfigResponse struct {
	// Message indicating that multiple rows might be associated to a single individual. If the same entity_id is associated to multiple quasi-identifier tuples over distinct rows, we consider the entire collection of tuples as the composite quasi-identifier. This collection is a multiset: the order in which the different tuples appear in the dataset is ignored, but their frequency is taken into account. Important note: a maximum of 1000 rows can be associated to a single entity ID. If more rows are associated with the same entity ID, some might be ignored.
	EntityId GooglePrivacyDlpV2EntityIdResponse `pulumi:"entityId"`
	// Set of fields to compute k-anonymity over. When multiple fields are specified, they are considered a single composite key. Structs and repeated data types are not supported; however, nested fields are supported so long as they are not structs themselves or nested within a repeated field.
	QuasiIds []GooglePrivacyDlpV2FieldIdResponse `pulumi:"quasiIds"`
}

// k-anonymity metric, used for analysis of reidentification risk.
type GooglePrivacyDlpV2KAnonymityConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KAnonymityConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KAnonymityConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KAnonymityConfigResponseOutput) ToGooglePrivacyDlpV2KAnonymityConfigResponseOutput() GooglePrivacyDlpV2KAnonymityConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityConfigResponseOutput) ToGooglePrivacyDlpV2KAnonymityConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityConfigResponseOutput {
	return o
}

// Message indicating that multiple rows might be associated to a single individual. If the same entity_id is associated to multiple quasi-identifier tuples over distinct rows, we consider the entire collection of tuples as the composite quasi-identifier. This collection is a multiset: the order in which the different tuples appear in the dataset is ignored, but their frequency is taken into account. Important note: a maximum of 1000 rows can be associated to a single entity ID. If more rows are associated with the same entity ID, some might be ignored.
func (o GooglePrivacyDlpV2KAnonymityConfigResponseOutput) EntityId() GooglePrivacyDlpV2EntityIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityConfigResponse) GooglePrivacyDlpV2EntityIdResponse {
		return v.EntityId
	}).(GooglePrivacyDlpV2EntityIdResponseOutput)
}

// Set of fields to compute k-anonymity over. When multiple fields are specified, they are considered a single composite key. Structs and repeated data types are not supported; however, nested fields are supported so long as they are not structs themselves or nested within a repeated field.
func (o GooglePrivacyDlpV2KAnonymityConfigResponseOutput) QuasiIds() GooglePrivacyDlpV2FieldIdResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityConfigResponse) []GooglePrivacyDlpV2FieldIdResponse {
		return v.QuasiIds
	}).(GooglePrivacyDlpV2FieldIdResponseArrayOutput)
}

// The set of columns' values that share the same ldiversity value
type GooglePrivacyDlpV2KAnonymityEquivalenceClassResponse struct {
	// Size of the equivalence class, for example number of rows with the above set of values.
	EquivalenceClassSize string `pulumi:"equivalenceClassSize"`
	// Set of values defining the equivalence class. One value per quasi-identifier column in the original KAnonymity metric message. The order is always the same as the original request.
	QuasiIdsValues []GooglePrivacyDlpV2ValueResponse `pulumi:"quasiIdsValues"`
}

// The set of columns' values that share the same ldiversity value
type GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KAnonymityEquivalenceClassResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput) ToGooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput() GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput) ToGooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput {
	return o
}

// Size of the equivalence class, for example number of rows with the above set of values.
func (o GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput) EquivalenceClassSize() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityEquivalenceClassResponse) string { return v.EquivalenceClassSize }).(pulumi.StringOutput)
}

// Set of values defining the equivalence class. One value per quasi-identifier column in the original KAnonymity metric message. The order is always the same as the original request.
func (o GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput) QuasiIdsValues() GooglePrivacyDlpV2ValueResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityEquivalenceClassResponse) []GooglePrivacyDlpV2ValueResponse {
		return v.QuasiIdsValues
	}).(GooglePrivacyDlpV2ValueResponseArrayOutput)
}

type GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2KAnonymityEquivalenceClassResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput) ToGooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput() GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput) ToGooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2KAnonymityEquivalenceClassResponse {
		return vs[0].([]GooglePrivacyDlpV2KAnonymityEquivalenceClassResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput)
}

// Histogram of k-anonymity equivalence classes.
type GooglePrivacyDlpV2KAnonymityHistogramBucketResponse struct {
	// Total number of equivalence classes in this bucket.
	BucketSize string `pulumi:"bucketSize"`
	// Total number of distinct equivalence classes in this bucket.
	BucketValueCount string `pulumi:"bucketValueCount"`
	// Sample of equivalence classes in this bucket. The total number of classes returned per bucket is capped at 20.
	BucketValues []GooglePrivacyDlpV2KAnonymityEquivalenceClassResponse `pulumi:"bucketValues"`
	// Lower bound on the size of the equivalence classes in this bucket.
	EquivalenceClassSizeLowerBound string `pulumi:"equivalenceClassSizeLowerBound"`
	// Upper bound on the size of the equivalence classes in this bucket.
	EquivalenceClassSizeUpperBound string `pulumi:"equivalenceClassSizeUpperBound"`
}

// Histogram of k-anonymity equivalence classes.
type GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KAnonymityHistogramBucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput) ToGooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput() GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput) ToGooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput {
	return o
}

// Total number of equivalence classes in this bucket.
func (o GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput) BucketSize() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityHistogramBucketResponse) string { return v.BucketSize }).(pulumi.StringOutput)
}

// Total number of distinct equivalence classes in this bucket.
func (o GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput) BucketValueCount() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityHistogramBucketResponse) string { return v.BucketValueCount }).(pulumi.StringOutput)
}

// Sample of equivalence classes in this bucket. The total number of classes returned per bucket is capped at 20.
func (o GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput) BucketValues() GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityHistogramBucketResponse) []GooglePrivacyDlpV2KAnonymityEquivalenceClassResponse {
		return v.BucketValues
	}).(GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput)
}

// Lower bound on the size of the equivalence classes in this bucket.
func (o GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput) EquivalenceClassSizeLowerBound() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityHistogramBucketResponse) string {
		return v.EquivalenceClassSizeLowerBound
	}).(pulumi.StringOutput)
}

// Upper bound on the size of the equivalence classes in this bucket.
func (o GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput) EquivalenceClassSizeUpperBound() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityHistogramBucketResponse) string {
		return v.EquivalenceClassSizeUpperBound
	}).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2KAnonymityHistogramBucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput) ToGooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput() GooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput) ToGooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2KAnonymityHistogramBucketResponse {
		return vs[0].([]GooglePrivacyDlpV2KAnonymityHistogramBucketResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput)
}

// Result of the k-anonymity computation.
type GooglePrivacyDlpV2KAnonymityResultResponse struct {
	// Histogram of k-anonymity equivalence classes.
	EquivalenceClassHistogramBuckets []GooglePrivacyDlpV2KAnonymityHistogramBucketResponse `pulumi:"equivalenceClassHistogramBuckets"`
}

// Result of the k-anonymity computation.
type GooglePrivacyDlpV2KAnonymityResultResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KAnonymityResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KAnonymityResultResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KAnonymityResultResponseOutput) ToGooglePrivacyDlpV2KAnonymityResultResponseOutput() GooglePrivacyDlpV2KAnonymityResultResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2KAnonymityResultResponseOutput) ToGooglePrivacyDlpV2KAnonymityResultResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KAnonymityResultResponseOutput {
	return o
}

// Histogram of k-anonymity equivalence classes.
func (o GooglePrivacyDlpV2KAnonymityResultResponseOutput) EquivalenceClassHistogramBuckets() GooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KAnonymityResultResponse) []GooglePrivacyDlpV2KAnonymityHistogramBucketResponse {
		return v.EquivalenceClassHistogramBuckets
	}).(GooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput)
}

// Reidentifiability metric. This corresponds to a risk model similar to what is called "journalist risk" in the literature, except the attack dataset is statistically modeled instead of being perfectly known. This can be done using publicly available data (like the US Census), or using a custom statistical model (indicated as one or several BigQuery tables), or by extrapolating from the distribution of values in the input dataset.
type GooglePrivacyDlpV2KMapEstimationConfig struct {
	// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers column must appear in exactly one column of one auxiliary table.
	AuxiliaryTables []GooglePrivacyDlpV2AuxiliaryTable `pulumi:"auxiliaryTables"`
	// Fields considered to be quasi-identifiers. No two columns can have the same tag.
	QuasiIds []GooglePrivacyDlpV2TaggedField `pulumi:"quasiIds"`
	// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
	RegionCode *string `pulumi:"regionCode"`
}

// GooglePrivacyDlpV2KMapEstimationConfigInput is an input type that accepts GooglePrivacyDlpV2KMapEstimationConfigArgs and GooglePrivacyDlpV2KMapEstimationConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2KMapEstimationConfigInput` via:
//
//	GooglePrivacyDlpV2KMapEstimationConfigArgs{...}
type GooglePrivacyDlpV2KMapEstimationConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2KMapEstimationConfigOutput() GooglePrivacyDlpV2KMapEstimationConfigOutput
	ToGooglePrivacyDlpV2KMapEstimationConfigOutputWithContext(context.Context) GooglePrivacyDlpV2KMapEstimationConfigOutput
}

// Reidentifiability metric. This corresponds to a risk model similar to what is called "journalist risk" in the literature, except the attack dataset is statistically modeled instead of being perfectly known. This can be done using publicly available data (like the US Census), or using a custom statistical model (indicated as one or several BigQuery tables), or by extrapolating from the distribution of values in the input dataset.
type GooglePrivacyDlpV2KMapEstimationConfigArgs struct {
	// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers column must appear in exactly one column of one auxiliary table.
	AuxiliaryTables GooglePrivacyDlpV2AuxiliaryTableArrayInput `pulumi:"auxiliaryTables"`
	// Fields considered to be quasi-identifiers. No two columns can have the same tag.
	QuasiIds GooglePrivacyDlpV2TaggedFieldArrayInput `pulumi:"quasiIds"`
	// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
	RegionCode pulumi.StringPtrInput `pulumi:"regionCode"`
}

func (GooglePrivacyDlpV2KMapEstimationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KMapEstimationConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2KMapEstimationConfigArgs) ToGooglePrivacyDlpV2KMapEstimationConfigOutput() GooglePrivacyDlpV2KMapEstimationConfigOutput {
	return i.ToGooglePrivacyDlpV2KMapEstimationConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2KMapEstimationConfigArgs) ToGooglePrivacyDlpV2KMapEstimationConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KMapEstimationConfigOutput)
}

func (i GooglePrivacyDlpV2KMapEstimationConfigArgs) ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutput() GooglePrivacyDlpV2KMapEstimationConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2KMapEstimationConfigArgs) ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KMapEstimationConfigOutput).ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2KMapEstimationConfigPtrInput is an input type that accepts GooglePrivacyDlpV2KMapEstimationConfigArgs, GooglePrivacyDlpV2KMapEstimationConfigPtr and GooglePrivacyDlpV2KMapEstimationConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2KMapEstimationConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2KMapEstimationConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2KMapEstimationConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutput() GooglePrivacyDlpV2KMapEstimationConfigPtrOutput
	ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2KMapEstimationConfigPtrOutput
}

type googlePrivacyDlpV2KMapEstimationConfigPtrType GooglePrivacyDlpV2KMapEstimationConfigArgs

func GooglePrivacyDlpV2KMapEstimationConfigPtr(v *GooglePrivacyDlpV2KMapEstimationConfigArgs) GooglePrivacyDlpV2KMapEstimationConfigPtrInput {
	return (*googlePrivacyDlpV2KMapEstimationConfigPtrType)(v)
}

func (*googlePrivacyDlpV2KMapEstimationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2KMapEstimationConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2KMapEstimationConfigPtrType) ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutput() GooglePrivacyDlpV2KMapEstimationConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2KMapEstimationConfigPtrType) ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KMapEstimationConfigPtrOutput)
}

// Reidentifiability metric. This corresponds to a risk model similar to what is called "journalist risk" in the literature, except the attack dataset is statistically modeled instead of being perfectly known. This can be done using publicly available data (like the US Census), or using a custom statistical model (indicated as one or several BigQuery tables), or by extrapolating from the distribution of values in the input dataset.
type GooglePrivacyDlpV2KMapEstimationConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KMapEstimationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KMapEstimationConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KMapEstimationConfigOutput) ToGooglePrivacyDlpV2KMapEstimationConfigOutput() GooglePrivacyDlpV2KMapEstimationConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationConfigOutput) ToGooglePrivacyDlpV2KMapEstimationConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationConfigOutput) ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutput() GooglePrivacyDlpV2KMapEstimationConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2KMapEstimationConfigOutput) ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2KMapEstimationConfig) *GooglePrivacyDlpV2KMapEstimationConfig {
		return &v
	}).(GooglePrivacyDlpV2KMapEstimationConfigPtrOutput)
}

// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers column must appear in exactly one column of one auxiliary table.
func (o GooglePrivacyDlpV2KMapEstimationConfigOutput) AuxiliaryTables() GooglePrivacyDlpV2AuxiliaryTableArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationConfig) []GooglePrivacyDlpV2AuxiliaryTable {
		return v.AuxiliaryTables
	}).(GooglePrivacyDlpV2AuxiliaryTableArrayOutput)
}

// Fields considered to be quasi-identifiers. No two columns can have the same tag.
func (o GooglePrivacyDlpV2KMapEstimationConfigOutput) QuasiIds() GooglePrivacyDlpV2TaggedFieldArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationConfig) []GooglePrivacyDlpV2TaggedField { return v.QuasiIds }).(GooglePrivacyDlpV2TaggedFieldArrayOutput)
}

// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
func (o GooglePrivacyDlpV2KMapEstimationConfigOutput) RegionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationConfig) *string { return v.RegionCode }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2KMapEstimationConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KMapEstimationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2KMapEstimationConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KMapEstimationConfigPtrOutput) ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutput() GooglePrivacyDlpV2KMapEstimationConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationConfigPtrOutput) ToGooglePrivacyDlpV2KMapEstimationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationConfigPtrOutput) Elem() GooglePrivacyDlpV2KMapEstimationConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KMapEstimationConfig) GooglePrivacyDlpV2KMapEstimationConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2KMapEstimationConfig
		return ret
	}).(GooglePrivacyDlpV2KMapEstimationConfigOutput)
}

// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers column must appear in exactly one column of one auxiliary table.
func (o GooglePrivacyDlpV2KMapEstimationConfigPtrOutput) AuxiliaryTables() GooglePrivacyDlpV2AuxiliaryTableArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KMapEstimationConfig) []GooglePrivacyDlpV2AuxiliaryTable {
		if v == nil {
			return nil
		}
		return v.AuxiliaryTables
	}).(GooglePrivacyDlpV2AuxiliaryTableArrayOutput)
}

// Fields considered to be quasi-identifiers. No two columns can have the same tag.
func (o GooglePrivacyDlpV2KMapEstimationConfigPtrOutput) QuasiIds() GooglePrivacyDlpV2TaggedFieldArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KMapEstimationConfig) []GooglePrivacyDlpV2TaggedField {
		if v == nil {
			return nil
		}
		return v.QuasiIds
	}).(GooglePrivacyDlpV2TaggedFieldArrayOutput)
}

// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
func (o GooglePrivacyDlpV2KMapEstimationConfigPtrOutput) RegionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KMapEstimationConfig) *string {
		if v == nil {
			return nil
		}
		return v.RegionCode
	}).(pulumi.StringPtrOutput)
}

// Reidentifiability metric. This corresponds to a risk model similar to what is called "journalist risk" in the literature, except the attack dataset is statistically modeled instead of being perfectly known. This can be done using publicly available data (like the US Census), or using a custom statistical model (indicated as one or several BigQuery tables), or by extrapolating from the distribution of values in the input dataset.
type GooglePrivacyDlpV2KMapEstimationConfigResponse struct {
	// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers column must appear in exactly one column of one auxiliary table.
	AuxiliaryTables []GooglePrivacyDlpV2AuxiliaryTableResponse `pulumi:"auxiliaryTables"`
	// Fields considered to be quasi-identifiers. No two columns can have the same tag.
	QuasiIds []GooglePrivacyDlpV2TaggedFieldResponse `pulumi:"quasiIds"`
	// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
	RegionCode string `pulumi:"regionCode"`
}

// Reidentifiability metric. This corresponds to a risk model similar to what is called "journalist risk" in the literature, except the attack dataset is statistically modeled instead of being perfectly known. This can be done using publicly available data (like the US Census), or using a custom statistical model (indicated as one or several BigQuery tables), or by extrapolating from the distribution of values in the input dataset.
type GooglePrivacyDlpV2KMapEstimationConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KMapEstimationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KMapEstimationConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KMapEstimationConfigResponseOutput) ToGooglePrivacyDlpV2KMapEstimationConfigResponseOutput() GooglePrivacyDlpV2KMapEstimationConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationConfigResponseOutput) ToGooglePrivacyDlpV2KMapEstimationConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationConfigResponseOutput {
	return o
}

// Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers column must appear in exactly one column of one auxiliary table.
func (o GooglePrivacyDlpV2KMapEstimationConfigResponseOutput) AuxiliaryTables() GooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationConfigResponse) []GooglePrivacyDlpV2AuxiliaryTableResponse {
		return v.AuxiliaryTables
	}).(GooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput)
}

// Fields considered to be quasi-identifiers. No two columns can have the same tag.
func (o GooglePrivacyDlpV2KMapEstimationConfigResponseOutput) QuasiIds() GooglePrivacyDlpV2TaggedFieldResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationConfigResponse) []GooglePrivacyDlpV2TaggedFieldResponse {
		return v.QuasiIds
	}).(GooglePrivacyDlpV2TaggedFieldResponseArrayOutput)
}

// ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.
func (o GooglePrivacyDlpV2KMapEstimationConfigResponseOutput) RegionCode() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationConfigResponse) string { return v.RegionCode }).(pulumi.StringOutput)
}

// A KMapEstimationHistogramBucket message with the following values: min_anonymity: 3 max_anonymity: 5 frequency: 42 means that there are 42 records whose quasi-identifier values correspond to 3, 4 or 5 people in the overlying population. An important particular case is when min_anonymity = max_anonymity = 1: the frequency field then corresponds to the number of uniquely identifiable records.
type GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse struct {
	// Number of records within these anonymity bounds.
	BucketSize string `pulumi:"bucketSize"`
	// Total number of distinct quasi-identifier tuple values in this bucket.
	BucketValueCount string `pulumi:"bucketValueCount"`
	// Sample of quasi-identifier tuple values in this bucket. The total number of classes returned per bucket is capped at 20.
	BucketValues []GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponse `pulumi:"bucketValues"`
	// Always greater than or equal to min_anonymity.
	MaxAnonymity string `pulumi:"maxAnonymity"`
	// Always positive.
	MinAnonymity string `pulumi:"minAnonymity"`
}

// A KMapEstimationHistogramBucket message with the following values: min_anonymity: 3 max_anonymity: 5 frequency: 42 means that there are 42 records whose quasi-identifier values correspond to 3, 4 or 5 people in the overlying population. An important particular case is when min_anonymity = max_anonymity = 1: the frequency field then corresponds to the number of uniquely identifiable records.
type GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput) ToGooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput() GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput) ToGooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput {
	return o
}

// Number of records within these anonymity bounds.
func (o GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput) BucketSize() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse) string { return v.BucketSize }).(pulumi.StringOutput)
}

// Total number of distinct quasi-identifier tuple values in this bucket.
func (o GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput) BucketValueCount() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse) string { return v.BucketValueCount }).(pulumi.StringOutput)
}

// Sample of quasi-identifier tuple values in this bucket. The total number of classes returned per bucket is capped at 20.
func (o GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput) BucketValues() GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse) []GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponse {
		return v.BucketValues
	}).(GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput)
}

// Always greater than or equal to min_anonymity.
func (o GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput) MaxAnonymity() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse) string { return v.MaxAnonymity }).(pulumi.StringOutput)
}

// Always positive.
func (o GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput) MinAnonymity() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse) string { return v.MinAnonymity }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput) ToGooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput() GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput) ToGooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse {
		return vs[0].([]GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput)
}

// A tuple of values for the quasi-identifier columns.
type GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponse struct {
	// The estimated anonymity for these quasi-identifier values.
	EstimatedAnonymity string `pulumi:"estimatedAnonymity"`
	// The quasi-identifier values.
	QuasiIdsValues []GooglePrivacyDlpV2ValueResponse `pulumi:"quasiIdsValues"`
}

// A tuple of values for the quasi-identifier columns.
type GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput) ToGooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput() GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput) ToGooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput {
	return o
}

// The estimated anonymity for these quasi-identifier values.
func (o GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput) EstimatedAnonymity() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponse) string { return v.EstimatedAnonymity }).(pulumi.StringOutput)
}

// The quasi-identifier values.
func (o GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput) QuasiIdsValues() GooglePrivacyDlpV2ValueResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponse) []GooglePrivacyDlpV2ValueResponse {
		return v.QuasiIdsValues
	}).(GooglePrivacyDlpV2ValueResponseArrayOutput)
}

type GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput) ToGooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput() GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput) ToGooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponse {
		return vs[0].([]GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput)
}

// Result of the reidentifiability analysis. Note that these results are an estimation, not exact values.
type GooglePrivacyDlpV2KMapEstimationResultResponse struct {
	// The intervals [min_anonymity, max_anonymity] do not overlap. If a value doesn't correspond to any such interval, the associated frequency is zero. For example, the following records: {min_anonymity: 1, max_anonymity: 1, frequency: 17} {min_anonymity: 2, max_anonymity: 3, frequency: 42} {min_anonymity: 5, max_anonymity: 10, frequency: 99} mean that there are no record with an estimated anonymity of 4, 5, or larger than 10.
	KMapEstimationHistogram []GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse `pulumi:"kMapEstimationHistogram"`
}

// Result of the reidentifiability analysis. Note that these results are an estimation, not exact values.
type GooglePrivacyDlpV2KMapEstimationResultResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KMapEstimationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KMapEstimationResultResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KMapEstimationResultResponseOutput) ToGooglePrivacyDlpV2KMapEstimationResultResponseOutput() GooglePrivacyDlpV2KMapEstimationResultResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2KMapEstimationResultResponseOutput) ToGooglePrivacyDlpV2KMapEstimationResultResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KMapEstimationResultResponseOutput {
	return o
}

// The intervals [min_anonymity, max_anonymity] do not overlap. If a value doesn't correspond to any such interval, the associated frequency is zero. For example, the following records: {min_anonymity: 1, max_anonymity: 1, frequency: 17} {min_anonymity: 2, max_anonymity: 3, frequency: 42} {min_anonymity: 5, max_anonymity: 10, frequency: 99} mean that there are no record with an estimated anonymity of 4, 5, or larger than 10.
func (o GooglePrivacyDlpV2KMapEstimationResultResponseOutput) KMapEstimationHistogram() GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KMapEstimationResultResponse) []GooglePrivacyDlpV2KMapEstimationHistogramBucketResponse {
		return v.KMapEstimationHistogram
	}).(GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput)
}

// A representation of a Datastore kind.
type GooglePrivacyDlpV2KindExpression struct {
	// The name of the kind.
	Name *string `pulumi:"name"`
}

// GooglePrivacyDlpV2KindExpressionInput is an input type that accepts GooglePrivacyDlpV2KindExpressionArgs and GooglePrivacyDlpV2KindExpressionOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2KindExpressionInput` via:
//
//	GooglePrivacyDlpV2KindExpressionArgs{...}
type GooglePrivacyDlpV2KindExpressionInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2KindExpressionOutput() GooglePrivacyDlpV2KindExpressionOutput
	ToGooglePrivacyDlpV2KindExpressionOutputWithContext(context.Context) GooglePrivacyDlpV2KindExpressionOutput
}

// A representation of a Datastore kind.
type GooglePrivacyDlpV2KindExpressionArgs struct {
	// The name of the kind.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GooglePrivacyDlpV2KindExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KindExpression)(nil)).Elem()
}

func (i GooglePrivacyDlpV2KindExpressionArgs) ToGooglePrivacyDlpV2KindExpressionOutput() GooglePrivacyDlpV2KindExpressionOutput {
	return i.ToGooglePrivacyDlpV2KindExpressionOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2KindExpressionArgs) ToGooglePrivacyDlpV2KindExpressionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KindExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KindExpressionOutput)
}

func (i GooglePrivacyDlpV2KindExpressionArgs) ToGooglePrivacyDlpV2KindExpressionPtrOutput() GooglePrivacyDlpV2KindExpressionPtrOutput {
	return i.ToGooglePrivacyDlpV2KindExpressionPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2KindExpressionArgs) ToGooglePrivacyDlpV2KindExpressionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KindExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KindExpressionOutput).ToGooglePrivacyDlpV2KindExpressionPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2KindExpressionPtrInput is an input type that accepts GooglePrivacyDlpV2KindExpressionArgs, GooglePrivacyDlpV2KindExpressionPtr and GooglePrivacyDlpV2KindExpressionPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2KindExpressionPtrInput` via:
//
//	        GooglePrivacyDlpV2KindExpressionArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2KindExpressionPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2KindExpressionPtrOutput() GooglePrivacyDlpV2KindExpressionPtrOutput
	ToGooglePrivacyDlpV2KindExpressionPtrOutputWithContext(context.Context) GooglePrivacyDlpV2KindExpressionPtrOutput
}

type googlePrivacyDlpV2KindExpressionPtrType GooglePrivacyDlpV2KindExpressionArgs

func GooglePrivacyDlpV2KindExpressionPtr(v *GooglePrivacyDlpV2KindExpressionArgs) GooglePrivacyDlpV2KindExpressionPtrInput {
	return (*googlePrivacyDlpV2KindExpressionPtrType)(v)
}

func (*googlePrivacyDlpV2KindExpressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2KindExpression)(nil)).Elem()
}

func (i *googlePrivacyDlpV2KindExpressionPtrType) ToGooglePrivacyDlpV2KindExpressionPtrOutput() GooglePrivacyDlpV2KindExpressionPtrOutput {
	return i.ToGooglePrivacyDlpV2KindExpressionPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2KindExpressionPtrType) ToGooglePrivacyDlpV2KindExpressionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KindExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KindExpressionPtrOutput)
}

// A representation of a Datastore kind.
type GooglePrivacyDlpV2KindExpressionOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KindExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KindExpression)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KindExpressionOutput) ToGooglePrivacyDlpV2KindExpressionOutput() GooglePrivacyDlpV2KindExpressionOutput {
	return o
}

func (o GooglePrivacyDlpV2KindExpressionOutput) ToGooglePrivacyDlpV2KindExpressionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KindExpressionOutput {
	return o
}

func (o GooglePrivacyDlpV2KindExpressionOutput) ToGooglePrivacyDlpV2KindExpressionPtrOutput() GooglePrivacyDlpV2KindExpressionPtrOutput {
	return o.ToGooglePrivacyDlpV2KindExpressionPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2KindExpressionOutput) ToGooglePrivacyDlpV2KindExpressionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KindExpressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2KindExpression) *GooglePrivacyDlpV2KindExpression {
		return &v
	}).(GooglePrivacyDlpV2KindExpressionPtrOutput)
}

// The name of the kind.
func (o GooglePrivacyDlpV2KindExpressionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KindExpression) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2KindExpressionPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KindExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2KindExpression)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KindExpressionPtrOutput) ToGooglePrivacyDlpV2KindExpressionPtrOutput() GooglePrivacyDlpV2KindExpressionPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2KindExpressionPtrOutput) ToGooglePrivacyDlpV2KindExpressionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KindExpressionPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2KindExpressionPtrOutput) Elem() GooglePrivacyDlpV2KindExpressionOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KindExpression) GooglePrivacyDlpV2KindExpression {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2KindExpression
		return ret
	}).(GooglePrivacyDlpV2KindExpressionOutput)
}

// The name of the kind.
func (o GooglePrivacyDlpV2KindExpressionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KindExpression) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A representation of a Datastore kind.
type GooglePrivacyDlpV2KindExpressionResponse struct {
	// The name of the kind.
	Name string `pulumi:"name"`
}

// A representation of a Datastore kind.
type GooglePrivacyDlpV2KindExpressionResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KindExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KindExpressionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KindExpressionResponseOutput) ToGooglePrivacyDlpV2KindExpressionResponseOutput() GooglePrivacyDlpV2KindExpressionResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2KindExpressionResponseOutput) ToGooglePrivacyDlpV2KindExpressionResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KindExpressionResponseOutput {
	return o
}

// The name of the kind.
func (o GooglePrivacyDlpV2KindExpressionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KindExpressionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).
type GooglePrivacyDlpV2KmsWrappedCryptoKey struct {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	CryptoKeyName string `pulumi:"cryptoKeyName"`
	// The wrapped data crypto key.
	WrappedKey string `pulumi:"wrappedKey"`
}

// GooglePrivacyDlpV2KmsWrappedCryptoKeyInput is an input type that accepts GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs and GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2KmsWrappedCryptoKeyInput` via:
//
//	GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs{...}
type GooglePrivacyDlpV2KmsWrappedCryptoKeyInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2KmsWrappedCryptoKeyOutput() GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput
	ToGooglePrivacyDlpV2KmsWrappedCryptoKeyOutputWithContext(context.Context) GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput
}

// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).
type GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs struct {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	CryptoKeyName pulumi.StringInput `pulumi:"cryptoKeyName"`
	// The wrapped data crypto key.
	WrappedKey pulumi.StringInput `pulumi:"wrappedKey"`
}

func (GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KmsWrappedCryptoKey)(nil)).Elem()
}

func (i GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyOutput() GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput {
	return i.ToGooglePrivacyDlpV2KmsWrappedCryptoKeyOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput)
}

func (i GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput() GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput {
	return i.ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput).ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrInput is an input type that accepts GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs, GooglePrivacyDlpV2KmsWrappedCryptoKeyPtr and GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrInput` via:
//
//	        GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput() GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput
	ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutputWithContext(context.Context) GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput
}

type googlePrivacyDlpV2KmsWrappedCryptoKeyPtrType GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs

func GooglePrivacyDlpV2KmsWrappedCryptoKeyPtr(v *GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs) GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrInput {
	return (*googlePrivacyDlpV2KmsWrappedCryptoKeyPtrType)(v)
}

func (*googlePrivacyDlpV2KmsWrappedCryptoKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2KmsWrappedCryptoKey)(nil)).Elem()
}

func (i *googlePrivacyDlpV2KmsWrappedCryptoKeyPtrType) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput() GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput {
	return i.ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2KmsWrappedCryptoKeyPtrType) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput)
}

// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).
type GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KmsWrappedCryptoKey)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyOutput() GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput {
	return o
}

func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput {
	return o
}

func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput() GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput {
	return o.ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2KmsWrappedCryptoKey) *GooglePrivacyDlpV2KmsWrappedCryptoKey {
		return &v
	}).(GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput)
}

// The resource name of the KMS CryptoKey to use for unwrapping.
func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput) CryptoKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KmsWrappedCryptoKey) string { return v.CryptoKeyName }).(pulumi.StringOutput)
}

// The wrapped data crypto key.
func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput) WrappedKey() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KmsWrappedCryptoKey) string { return v.WrappedKey }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2KmsWrappedCryptoKey)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput() GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput) Elem() GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KmsWrappedCryptoKey) GooglePrivacyDlpV2KmsWrappedCryptoKey {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2KmsWrappedCryptoKey
		return ret
	}).(GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput)
}

// The resource name of the KMS CryptoKey to use for unwrapping.
func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput) CryptoKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KmsWrappedCryptoKey) *string {
		if v == nil {
			return nil
		}
		return &v.CryptoKeyName
	}).(pulumi.StringPtrOutput)
}

// The wrapped data crypto key.
func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput) WrappedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2KmsWrappedCryptoKey) *string {
		if v == nil {
			return nil
		}
		return &v.WrappedKey
	}).(pulumi.StringPtrOutput)
}

// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).
type GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse struct {
	// The resource name of the KMS CryptoKey to use for unwrapping.
	CryptoKeyName string `pulumi:"cryptoKeyName"`
	// The wrapped data crypto key.
	WrappedKey string `pulumi:"wrappedKey"`
}

// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).
type GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput() GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput) ToGooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput {
	return o
}

// The resource name of the KMS CryptoKey to use for unwrapping.
func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput) CryptoKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse) string { return v.CryptoKeyName }).(pulumi.StringOutput)
}

// The wrapped data crypto key.
func (o GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput) WrappedKey() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2KmsWrappedCryptoKeyResponse) string { return v.WrappedKey }).(pulumi.StringOutput)
}

// l-diversity metric, used for analysis of reidentification risk.
type GooglePrivacyDlpV2LDiversityConfig struct {
	// Set of quasi-identifiers indicating how equivalence classes are defined for the l-diversity computation. When multiple fields are specified, they are considered a single composite key.
	QuasiIds []GooglePrivacyDlpV2FieldId `pulumi:"quasiIds"`
	// Sensitive field for computing the l-value.
	SensitiveAttribute *GooglePrivacyDlpV2FieldId `pulumi:"sensitiveAttribute"`
}

// GooglePrivacyDlpV2LDiversityConfigInput is an input type that accepts GooglePrivacyDlpV2LDiversityConfigArgs and GooglePrivacyDlpV2LDiversityConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2LDiversityConfigInput` via:
//
//	GooglePrivacyDlpV2LDiversityConfigArgs{...}
type GooglePrivacyDlpV2LDiversityConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2LDiversityConfigOutput() GooglePrivacyDlpV2LDiversityConfigOutput
	ToGooglePrivacyDlpV2LDiversityConfigOutputWithContext(context.Context) GooglePrivacyDlpV2LDiversityConfigOutput
}

// l-diversity metric, used for analysis of reidentification risk.
type GooglePrivacyDlpV2LDiversityConfigArgs struct {
	// Set of quasi-identifiers indicating how equivalence classes are defined for the l-diversity computation. When multiple fields are specified, they are considered a single composite key.
	QuasiIds GooglePrivacyDlpV2FieldIdArrayInput `pulumi:"quasiIds"`
	// Sensitive field for computing the l-value.
	SensitiveAttribute GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"sensitiveAttribute"`
}

func (GooglePrivacyDlpV2LDiversityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LDiversityConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2LDiversityConfigArgs) ToGooglePrivacyDlpV2LDiversityConfigOutput() GooglePrivacyDlpV2LDiversityConfigOutput {
	return i.ToGooglePrivacyDlpV2LDiversityConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2LDiversityConfigArgs) ToGooglePrivacyDlpV2LDiversityConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LDiversityConfigOutput)
}

func (i GooglePrivacyDlpV2LDiversityConfigArgs) ToGooglePrivacyDlpV2LDiversityConfigPtrOutput() GooglePrivacyDlpV2LDiversityConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2LDiversityConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2LDiversityConfigArgs) ToGooglePrivacyDlpV2LDiversityConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LDiversityConfigOutput).ToGooglePrivacyDlpV2LDiversityConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2LDiversityConfigPtrInput is an input type that accepts GooglePrivacyDlpV2LDiversityConfigArgs, GooglePrivacyDlpV2LDiversityConfigPtr and GooglePrivacyDlpV2LDiversityConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2LDiversityConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2LDiversityConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2LDiversityConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2LDiversityConfigPtrOutput() GooglePrivacyDlpV2LDiversityConfigPtrOutput
	ToGooglePrivacyDlpV2LDiversityConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2LDiversityConfigPtrOutput
}

type googlePrivacyDlpV2LDiversityConfigPtrType GooglePrivacyDlpV2LDiversityConfigArgs

func GooglePrivacyDlpV2LDiversityConfigPtr(v *GooglePrivacyDlpV2LDiversityConfigArgs) GooglePrivacyDlpV2LDiversityConfigPtrInput {
	return (*googlePrivacyDlpV2LDiversityConfigPtrType)(v)
}

func (*googlePrivacyDlpV2LDiversityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2LDiversityConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2LDiversityConfigPtrType) ToGooglePrivacyDlpV2LDiversityConfigPtrOutput() GooglePrivacyDlpV2LDiversityConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2LDiversityConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2LDiversityConfigPtrType) ToGooglePrivacyDlpV2LDiversityConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LDiversityConfigPtrOutput)
}

// l-diversity metric, used for analysis of reidentification risk.
type GooglePrivacyDlpV2LDiversityConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LDiversityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LDiversityConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LDiversityConfigOutput) ToGooglePrivacyDlpV2LDiversityConfigOutput() GooglePrivacyDlpV2LDiversityConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityConfigOutput) ToGooglePrivacyDlpV2LDiversityConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityConfigOutput) ToGooglePrivacyDlpV2LDiversityConfigPtrOutput() GooglePrivacyDlpV2LDiversityConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2LDiversityConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2LDiversityConfigOutput) ToGooglePrivacyDlpV2LDiversityConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2LDiversityConfig) *GooglePrivacyDlpV2LDiversityConfig {
		return &v
	}).(GooglePrivacyDlpV2LDiversityConfigPtrOutput)
}

// Set of quasi-identifiers indicating how equivalence classes are defined for the l-diversity computation. When multiple fields are specified, they are considered a single composite key.
func (o GooglePrivacyDlpV2LDiversityConfigOutput) QuasiIds() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityConfig) []GooglePrivacyDlpV2FieldId { return v.QuasiIds }).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// Sensitive field for computing the l-value.
func (o GooglePrivacyDlpV2LDiversityConfigOutput) SensitiveAttribute() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityConfig) *GooglePrivacyDlpV2FieldId { return v.SensitiveAttribute }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

type GooglePrivacyDlpV2LDiversityConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LDiversityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2LDiversityConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LDiversityConfigPtrOutput) ToGooglePrivacyDlpV2LDiversityConfigPtrOutput() GooglePrivacyDlpV2LDiversityConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityConfigPtrOutput) ToGooglePrivacyDlpV2LDiversityConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityConfigPtrOutput) Elem() GooglePrivacyDlpV2LDiversityConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LDiversityConfig) GooglePrivacyDlpV2LDiversityConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2LDiversityConfig
		return ret
	}).(GooglePrivacyDlpV2LDiversityConfigOutput)
}

// Set of quasi-identifiers indicating how equivalence classes are defined for the l-diversity computation. When multiple fields are specified, they are considered a single composite key.
func (o GooglePrivacyDlpV2LDiversityConfigPtrOutput) QuasiIds() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LDiversityConfig) []GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.QuasiIds
	}).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// Sensitive field for computing the l-value.
func (o GooglePrivacyDlpV2LDiversityConfigPtrOutput) SensitiveAttribute() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LDiversityConfig) *GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.SensitiveAttribute
	}).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// l-diversity metric, used for analysis of reidentification risk.
type GooglePrivacyDlpV2LDiversityConfigResponse struct {
	// Set of quasi-identifiers indicating how equivalence classes are defined for the l-diversity computation. When multiple fields are specified, they are considered a single composite key.
	QuasiIds []GooglePrivacyDlpV2FieldIdResponse `pulumi:"quasiIds"`
	// Sensitive field for computing the l-value.
	SensitiveAttribute GooglePrivacyDlpV2FieldIdResponse `pulumi:"sensitiveAttribute"`
}

// l-diversity metric, used for analysis of reidentification risk.
type GooglePrivacyDlpV2LDiversityConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LDiversityConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LDiversityConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LDiversityConfigResponseOutput) ToGooglePrivacyDlpV2LDiversityConfigResponseOutput() GooglePrivacyDlpV2LDiversityConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityConfigResponseOutput) ToGooglePrivacyDlpV2LDiversityConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityConfigResponseOutput {
	return o
}

// Set of quasi-identifiers indicating how equivalence classes are defined for the l-diversity computation. When multiple fields are specified, they are considered a single composite key.
func (o GooglePrivacyDlpV2LDiversityConfigResponseOutput) QuasiIds() GooglePrivacyDlpV2FieldIdResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityConfigResponse) []GooglePrivacyDlpV2FieldIdResponse {
		return v.QuasiIds
	}).(GooglePrivacyDlpV2FieldIdResponseArrayOutput)
}

// Sensitive field for computing the l-value.
func (o GooglePrivacyDlpV2LDiversityConfigResponseOutput) SensitiveAttribute() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityConfigResponse) GooglePrivacyDlpV2FieldIdResponse {
		return v.SensitiveAttribute
	}).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// The set of columns' values that share the same ldiversity value.
type GooglePrivacyDlpV2LDiversityEquivalenceClassResponse struct {
	// Size of the k-anonymity equivalence class.
	EquivalenceClassSize string `pulumi:"equivalenceClassSize"`
	// Number of distinct sensitive values in this equivalence class.
	NumDistinctSensitiveValues string `pulumi:"numDistinctSensitiveValues"`
	// Quasi-identifier values defining the k-anonymity equivalence class. The order is always the same as the original request.
	QuasiIdsValues []GooglePrivacyDlpV2ValueResponse `pulumi:"quasiIdsValues"`
	// Estimated frequencies of top sensitive values.
	TopSensitiveValues []GooglePrivacyDlpV2ValueFrequencyResponse `pulumi:"topSensitiveValues"`
}

// The set of columns' values that share the same ldiversity value.
type GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LDiversityEquivalenceClassResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput) ToGooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput() GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput) ToGooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput {
	return o
}

// Size of the k-anonymity equivalence class.
func (o GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput) EquivalenceClassSize() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityEquivalenceClassResponse) string { return v.EquivalenceClassSize }).(pulumi.StringOutput)
}

// Number of distinct sensitive values in this equivalence class.
func (o GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput) NumDistinctSensitiveValues() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityEquivalenceClassResponse) string {
		return v.NumDistinctSensitiveValues
	}).(pulumi.StringOutput)
}

// Quasi-identifier values defining the k-anonymity equivalence class. The order is always the same as the original request.
func (o GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput) QuasiIdsValues() GooglePrivacyDlpV2ValueResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityEquivalenceClassResponse) []GooglePrivacyDlpV2ValueResponse {
		return v.QuasiIdsValues
	}).(GooglePrivacyDlpV2ValueResponseArrayOutput)
}

// Estimated frequencies of top sensitive values.
func (o GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput) TopSensitiveValues() GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityEquivalenceClassResponse) []GooglePrivacyDlpV2ValueFrequencyResponse {
		return v.TopSensitiveValues
	}).(GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput)
}

type GooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2LDiversityEquivalenceClassResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput) ToGooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput() GooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput) ToGooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2LDiversityEquivalenceClassResponse {
		return vs[0].([]GooglePrivacyDlpV2LDiversityEquivalenceClassResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput)
}

// Histogram of l-diversity equivalence class sensitive value frequencies.
type GooglePrivacyDlpV2LDiversityHistogramBucketResponse struct {
	// Total number of equivalence classes in this bucket.
	BucketSize string `pulumi:"bucketSize"`
	// Total number of distinct equivalence classes in this bucket.
	BucketValueCount string `pulumi:"bucketValueCount"`
	// Sample of equivalence classes in this bucket. The total number of classes returned per bucket is capped at 20.
	BucketValues []GooglePrivacyDlpV2LDiversityEquivalenceClassResponse `pulumi:"bucketValues"`
	// Lower bound on the sensitive value frequencies of the equivalence classes in this bucket.
	SensitiveValueFrequencyLowerBound string `pulumi:"sensitiveValueFrequencyLowerBound"`
	// Upper bound on the sensitive value frequencies of the equivalence classes in this bucket.
	SensitiveValueFrequencyUpperBound string `pulumi:"sensitiveValueFrequencyUpperBound"`
}

// Histogram of l-diversity equivalence class sensitive value frequencies.
type GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LDiversityHistogramBucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput) ToGooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput() GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput) ToGooglePrivacyDlpV2LDiversityHistogramBucketResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput {
	return o
}

// Total number of equivalence classes in this bucket.
func (o GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput) BucketSize() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityHistogramBucketResponse) string { return v.BucketSize }).(pulumi.StringOutput)
}

// Total number of distinct equivalence classes in this bucket.
func (o GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput) BucketValueCount() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityHistogramBucketResponse) string { return v.BucketValueCount }).(pulumi.StringOutput)
}

// Sample of equivalence classes in this bucket. The total number of classes returned per bucket is capped at 20.
func (o GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput) BucketValues() GooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityHistogramBucketResponse) []GooglePrivacyDlpV2LDiversityEquivalenceClassResponse {
		return v.BucketValues
	}).(GooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput)
}

// Lower bound on the sensitive value frequencies of the equivalence classes in this bucket.
func (o GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput) SensitiveValueFrequencyLowerBound() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityHistogramBucketResponse) string {
		return v.SensitiveValueFrequencyLowerBound
	}).(pulumi.StringOutput)
}

// Upper bound on the sensitive value frequencies of the equivalence classes in this bucket.
func (o GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput) SensitiveValueFrequencyUpperBound() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityHistogramBucketResponse) string {
		return v.SensitiveValueFrequencyUpperBound
	}).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2LDiversityHistogramBucketResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput) ToGooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput() GooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput) ToGooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2LDiversityHistogramBucketResponse {
		return vs[0].([]GooglePrivacyDlpV2LDiversityHistogramBucketResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput)
}

// Result of the l-diversity computation.
type GooglePrivacyDlpV2LDiversityResultResponse struct {
	// Histogram of l-diversity equivalence class sensitive value frequencies.
	SensitiveValueFrequencyHistogramBuckets []GooglePrivacyDlpV2LDiversityHistogramBucketResponse `pulumi:"sensitiveValueFrequencyHistogramBuckets"`
}

// Result of the l-diversity computation.
type GooglePrivacyDlpV2LDiversityResultResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LDiversityResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LDiversityResultResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LDiversityResultResponseOutput) ToGooglePrivacyDlpV2LDiversityResultResponseOutput() GooglePrivacyDlpV2LDiversityResultResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2LDiversityResultResponseOutput) ToGooglePrivacyDlpV2LDiversityResultResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LDiversityResultResponseOutput {
	return o
}

// Histogram of l-diversity equivalence class sensitive value frequencies.
func (o GooglePrivacyDlpV2LDiversityResultResponseOutput) SensitiveValueFrequencyHistogramBuckets() GooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LDiversityResultResponse) []GooglePrivacyDlpV2LDiversityHistogramBucketResponse {
		return v.SensitiveValueFrequencyHistogramBuckets
	}).(GooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput)
}

// Configuration for a custom dictionary created from a data source of any size up to the maximum size defined in the [limits](https://cloud.google.com/dlp/limits) page. The artifacts of dictionary creation are stored in the specified Cloud Storage location. Consider using `CustomInfoType.Dictionary` for smaller dictionaries that satisfy the size requirements.
type GooglePrivacyDlpV2LargeCustomDictionaryConfig struct {
	// Field in a BigQuery table where each cell represents a dictionary phrase.
	BigQueryField *GooglePrivacyDlpV2BigQueryField `pulumi:"bigQueryField"`
	// Set of files containing newline-delimited lists of dictionary phrases.
	CloudStorageFileSet *GooglePrivacyDlpV2CloudStorageFileSet `pulumi:"cloudStorageFileSet"`
	// Location to store dictionary artifacts in Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
	OutputPath *GooglePrivacyDlpV2CloudStoragePath `pulumi:"outputPath"`
}

// GooglePrivacyDlpV2LargeCustomDictionaryConfigInput is an input type that accepts GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs and GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2LargeCustomDictionaryConfigInput` via:
//
//	GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs{...}
type GooglePrivacyDlpV2LargeCustomDictionaryConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2LargeCustomDictionaryConfigOutput() GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput
	ToGooglePrivacyDlpV2LargeCustomDictionaryConfigOutputWithContext(context.Context) GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput
}

// Configuration for a custom dictionary created from a data source of any size up to the maximum size defined in the [limits](https://cloud.google.com/dlp/limits) page. The artifacts of dictionary creation are stored in the specified Cloud Storage location. Consider using `CustomInfoType.Dictionary` for smaller dictionaries that satisfy the size requirements.
type GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs struct {
	// Field in a BigQuery table where each cell represents a dictionary phrase.
	BigQueryField GooglePrivacyDlpV2BigQueryFieldPtrInput `pulumi:"bigQueryField"`
	// Set of files containing newline-delimited lists of dictionary phrases.
	CloudStorageFileSet GooglePrivacyDlpV2CloudStorageFileSetPtrInput `pulumi:"cloudStorageFileSet"`
	// Location to store dictionary artifacts in Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
	OutputPath GooglePrivacyDlpV2CloudStoragePathPtrInput `pulumi:"outputPath"`
}

func (GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LargeCustomDictionaryConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigOutput() GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput {
	return i.ToGooglePrivacyDlpV2LargeCustomDictionaryConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput)
}

func (i GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput() GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput).ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrInput is an input type that accepts GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs, GooglePrivacyDlpV2LargeCustomDictionaryConfigPtr and GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput() GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput
	ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput
}

type googlePrivacyDlpV2LargeCustomDictionaryConfigPtrType GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs

func GooglePrivacyDlpV2LargeCustomDictionaryConfigPtr(v *GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs) GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrInput {
	return (*googlePrivacyDlpV2LargeCustomDictionaryConfigPtrType)(v)
}

func (*googlePrivacyDlpV2LargeCustomDictionaryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2LargeCustomDictionaryConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2LargeCustomDictionaryConfigPtrType) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput() GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2LargeCustomDictionaryConfigPtrType) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput)
}

// Configuration for a custom dictionary created from a data source of any size up to the maximum size defined in the [limits](https://cloud.google.com/dlp/limits) page. The artifacts of dictionary creation are stored in the specified Cloud Storage location. Consider using `CustomInfoType.Dictionary` for smaller dictionaries that satisfy the size requirements.
type GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LargeCustomDictionaryConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigOutput() GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput() GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2LargeCustomDictionaryConfig) *GooglePrivacyDlpV2LargeCustomDictionaryConfig {
		return &v
	}).(GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput)
}

// Field in a BigQuery table where each cell represents a dictionary phrase.
func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput) BigQueryField() GooglePrivacyDlpV2BigQueryFieldPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LargeCustomDictionaryConfig) *GooglePrivacyDlpV2BigQueryField {
		return v.BigQueryField
	}).(GooglePrivacyDlpV2BigQueryFieldPtrOutput)
}

// Set of files containing newline-delimited lists of dictionary phrases.
func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput) CloudStorageFileSet() GooglePrivacyDlpV2CloudStorageFileSetPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LargeCustomDictionaryConfig) *GooglePrivacyDlpV2CloudStorageFileSet {
		return v.CloudStorageFileSet
	}).(GooglePrivacyDlpV2CloudStorageFileSetPtrOutput)
}

// Location to store dictionary artifacts in Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput) OutputPath() GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LargeCustomDictionaryConfig) *GooglePrivacyDlpV2CloudStoragePath {
		return v.OutputPath
	}).(GooglePrivacyDlpV2CloudStoragePathPtrOutput)
}

type GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2LargeCustomDictionaryConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput() GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput) Elem() GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LargeCustomDictionaryConfig) GooglePrivacyDlpV2LargeCustomDictionaryConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2LargeCustomDictionaryConfig
		return ret
	}).(GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput)
}

// Field in a BigQuery table where each cell represents a dictionary phrase.
func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput) BigQueryField() GooglePrivacyDlpV2BigQueryFieldPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LargeCustomDictionaryConfig) *GooglePrivacyDlpV2BigQueryField {
		if v == nil {
			return nil
		}
		return v.BigQueryField
	}).(GooglePrivacyDlpV2BigQueryFieldPtrOutput)
}

// Set of files containing newline-delimited lists of dictionary phrases.
func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput) CloudStorageFileSet() GooglePrivacyDlpV2CloudStorageFileSetPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LargeCustomDictionaryConfig) *GooglePrivacyDlpV2CloudStorageFileSet {
		if v == nil {
			return nil
		}
		return v.CloudStorageFileSet
	}).(GooglePrivacyDlpV2CloudStorageFileSetPtrOutput)
}

// Location to store dictionary artifacts in Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput) OutputPath() GooglePrivacyDlpV2CloudStoragePathPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LargeCustomDictionaryConfig) *GooglePrivacyDlpV2CloudStoragePath {
		if v == nil {
			return nil
		}
		return v.OutputPath
	}).(GooglePrivacyDlpV2CloudStoragePathPtrOutput)
}

// Configuration for a custom dictionary created from a data source of any size up to the maximum size defined in the [limits](https://cloud.google.com/dlp/limits) page. The artifacts of dictionary creation are stored in the specified Cloud Storage location. Consider using `CustomInfoType.Dictionary` for smaller dictionaries that satisfy the size requirements.
type GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse struct {
	// Field in a BigQuery table where each cell represents a dictionary phrase.
	BigQueryField GooglePrivacyDlpV2BigQueryFieldResponse `pulumi:"bigQueryField"`
	// Set of files containing newline-delimited lists of dictionary phrases.
	CloudStorageFileSet GooglePrivacyDlpV2CloudStorageFileSetResponse `pulumi:"cloudStorageFileSet"`
	// Location to store dictionary artifacts in Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
	OutputPath GooglePrivacyDlpV2CloudStoragePathResponse `pulumi:"outputPath"`
}

// Configuration for a custom dictionary created from a data source of any size up to the maximum size defined in the [limits](https://cloud.google.com/dlp/limits) page. The artifacts of dictionary creation are stored in the specified Cloud Storage location. Consider using `CustomInfoType.Dictionary` for smaller dictionaries that satisfy the size requirements.
type GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput() GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput) ToGooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput {
	return o
}

// Field in a BigQuery table where each cell represents a dictionary phrase.
func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput) BigQueryField() GooglePrivacyDlpV2BigQueryFieldResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse) GooglePrivacyDlpV2BigQueryFieldResponse {
		return v.BigQueryField
	}).(GooglePrivacyDlpV2BigQueryFieldResponseOutput)
}

// Set of files containing newline-delimited lists of dictionary phrases.
func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput) CloudStorageFileSet() GooglePrivacyDlpV2CloudStorageFileSetResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse) GooglePrivacyDlpV2CloudStorageFileSetResponse {
		return v.CloudStorageFileSet
	}).(GooglePrivacyDlpV2CloudStorageFileSetResponseOutput)
}

// Location to store dictionary artifacts in Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
func (o GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput) OutputPath() GooglePrivacyDlpV2CloudStoragePathResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse) GooglePrivacyDlpV2CloudStoragePathResponse {
		return v.OutputPath
	}).(GooglePrivacyDlpV2CloudStoragePathResponseOutput)
}

// Summary statistics of a custom dictionary.
type GooglePrivacyDlpV2LargeCustomDictionaryStatsResponse struct {
	// Approximate number of distinct phrases in the dictionary.
	ApproxNumPhrases string `pulumi:"approxNumPhrases"`
}

// Summary statistics of a custom dictionary.
type GooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LargeCustomDictionaryStatsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput) ToGooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput() GooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput) ToGooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput {
	return o
}

// Approximate number of distinct phrases in the dictionary.
func (o GooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput) ApproxNumPhrases() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LargeCustomDictionaryStatsResponse) string { return v.ApproxNumPhrases }).(pulumi.StringOutput)
}

// Skips the data without modifying it if the requested transformation would cause an error. For example, if a `DateShift` transformation were applied an an IP address, this mode would leave the IP address unchanged in the response.
type GooglePrivacyDlpV2LeaveUntransformed struct {
}

// GooglePrivacyDlpV2LeaveUntransformedInput is an input type that accepts GooglePrivacyDlpV2LeaveUntransformedArgs and GooglePrivacyDlpV2LeaveUntransformedOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2LeaveUntransformedInput` via:
//
//	GooglePrivacyDlpV2LeaveUntransformedArgs{...}
type GooglePrivacyDlpV2LeaveUntransformedInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2LeaveUntransformedOutput() GooglePrivacyDlpV2LeaveUntransformedOutput
	ToGooglePrivacyDlpV2LeaveUntransformedOutputWithContext(context.Context) GooglePrivacyDlpV2LeaveUntransformedOutput
}

// Skips the data without modifying it if the requested transformation would cause an error. For example, if a `DateShift` transformation were applied an an IP address, this mode would leave the IP address unchanged in the response.
type GooglePrivacyDlpV2LeaveUntransformedArgs struct {
}

func (GooglePrivacyDlpV2LeaveUntransformedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LeaveUntransformed)(nil)).Elem()
}

func (i GooglePrivacyDlpV2LeaveUntransformedArgs) ToGooglePrivacyDlpV2LeaveUntransformedOutput() GooglePrivacyDlpV2LeaveUntransformedOutput {
	return i.ToGooglePrivacyDlpV2LeaveUntransformedOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2LeaveUntransformedArgs) ToGooglePrivacyDlpV2LeaveUntransformedOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LeaveUntransformedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LeaveUntransformedOutput)
}

func (i GooglePrivacyDlpV2LeaveUntransformedArgs) ToGooglePrivacyDlpV2LeaveUntransformedPtrOutput() GooglePrivacyDlpV2LeaveUntransformedPtrOutput {
	return i.ToGooglePrivacyDlpV2LeaveUntransformedPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2LeaveUntransformedArgs) ToGooglePrivacyDlpV2LeaveUntransformedPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LeaveUntransformedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LeaveUntransformedOutput).ToGooglePrivacyDlpV2LeaveUntransformedPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2LeaveUntransformedPtrInput is an input type that accepts GooglePrivacyDlpV2LeaveUntransformedArgs, GooglePrivacyDlpV2LeaveUntransformedPtr and GooglePrivacyDlpV2LeaveUntransformedPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2LeaveUntransformedPtrInput` via:
//
//	        GooglePrivacyDlpV2LeaveUntransformedArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2LeaveUntransformedPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2LeaveUntransformedPtrOutput() GooglePrivacyDlpV2LeaveUntransformedPtrOutput
	ToGooglePrivacyDlpV2LeaveUntransformedPtrOutputWithContext(context.Context) GooglePrivacyDlpV2LeaveUntransformedPtrOutput
}

type googlePrivacyDlpV2LeaveUntransformedPtrType GooglePrivacyDlpV2LeaveUntransformedArgs

func GooglePrivacyDlpV2LeaveUntransformedPtr(v *GooglePrivacyDlpV2LeaveUntransformedArgs) GooglePrivacyDlpV2LeaveUntransformedPtrInput {
	return (*googlePrivacyDlpV2LeaveUntransformedPtrType)(v)
}

func (*googlePrivacyDlpV2LeaveUntransformedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2LeaveUntransformed)(nil)).Elem()
}

func (i *googlePrivacyDlpV2LeaveUntransformedPtrType) ToGooglePrivacyDlpV2LeaveUntransformedPtrOutput() GooglePrivacyDlpV2LeaveUntransformedPtrOutput {
	return i.ToGooglePrivacyDlpV2LeaveUntransformedPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2LeaveUntransformedPtrType) ToGooglePrivacyDlpV2LeaveUntransformedPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LeaveUntransformedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LeaveUntransformedPtrOutput)
}

// Skips the data without modifying it if the requested transformation would cause an error. For example, if a `DateShift` transformation were applied an an IP address, this mode would leave the IP address unchanged in the response.
type GooglePrivacyDlpV2LeaveUntransformedOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LeaveUntransformedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LeaveUntransformed)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LeaveUntransformedOutput) ToGooglePrivacyDlpV2LeaveUntransformedOutput() GooglePrivacyDlpV2LeaveUntransformedOutput {
	return o
}

func (o GooglePrivacyDlpV2LeaveUntransformedOutput) ToGooglePrivacyDlpV2LeaveUntransformedOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LeaveUntransformedOutput {
	return o
}

func (o GooglePrivacyDlpV2LeaveUntransformedOutput) ToGooglePrivacyDlpV2LeaveUntransformedPtrOutput() GooglePrivacyDlpV2LeaveUntransformedPtrOutput {
	return o.ToGooglePrivacyDlpV2LeaveUntransformedPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2LeaveUntransformedOutput) ToGooglePrivacyDlpV2LeaveUntransformedPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LeaveUntransformedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2LeaveUntransformed) *GooglePrivacyDlpV2LeaveUntransformed {
		return &v
	}).(GooglePrivacyDlpV2LeaveUntransformedPtrOutput)
}

type GooglePrivacyDlpV2LeaveUntransformedPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LeaveUntransformedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2LeaveUntransformed)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LeaveUntransformedPtrOutput) ToGooglePrivacyDlpV2LeaveUntransformedPtrOutput() GooglePrivacyDlpV2LeaveUntransformedPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2LeaveUntransformedPtrOutput) ToGooglePrivacyDlpV2LeaveUntransformedPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LeaveUntransformedPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2LeaveUntransformedPtrOutput) Elem() GooglePrivacyDlpV2LeaveUntransformedOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LeaveUntransformed) GooglePrivacyDlpV2LeaveUntransformed {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2LeaveUntransformed
		return ret
	}).(GooglePrivacyDlpV2LeaveUntransformedOutput)
}

// Skips the data without modifying it if the requested transformation would cause an error. For example, if a `DateShift` transformation were applied an an IP address, this mode would leave the IP address unchanged in the response.
type GooglePrivacyDlpV2LeaveUntransformedResponse struct {
}

// Skips the data without modifying it if the requested transformation would cause an error. For example, if a `DateShift` transformation were applied an an IP address, this mode would leave the IP address unchanged in the response.
type GooglePrivacyDlpV2LeaveUntransformedResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LeaveUntransformedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LeaveUntransformedResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LeaveUntransformedResponseOutput) ToGooglePrivacyDlpV2LeaveUntransformedResponseOutput() GooglePrivacyDlpV2LeaveUntransformedResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2LeaveUntransformedResponseOutput) ToGooglePrivacyDlpV2LeaveUntransformedResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LeaveUntransformedResponseOutput {
	return o
}

// Message for specifying an adjustment to the likelihood of a finding as part of a detection rule.
type GooglePrivacyDlpV2LikelihoodAdjustment struct {
	// Set the likelihood of a finding to a fixed value.
	FixedLikelihood *GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood `pulumi:"fixedLikelihood"`
	// Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be `POSSIBLE` without the detection rule and `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will result in a final likelihood of `LIKELY`.
	RelativeLikelihood *int `pulumi:"relativeLikelihood"`
}

// GooglePrivacyDlpV2LikelihoodAdjustmentInput is an input type that accepts GooglePrivacyDlpV2LikelihoodAdjustmentArgs and GooglePrivacyDlpV2LikelihoodAdjustmentOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2LikelihoodAdjustmentInput` via:
//
//	GooglePrivacyDlpV2LikelihoodAdjustmentArgs{...}
type GooglePrivacyDlpV2LikelihoodAdjustmentInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2LikelihoodAdjustmentOutput() GooglePrivacyDlpV2LikelihoodAdjustmentOutput
	ToGooglePrivacyDlpV2LikelihoodAdjustmentOutputWithContext(context.Context) GooglePrivacyDlpV2LikelihoodAdjustmentOutput
}

// Message for specifying an adjustment to the likelihood of a finding as part of a detection rule.
type GooglePrivacyDlpV2LikelihoodAdjustmentArgs struct {
	// Set the likelihood of a finding to a fixed value.
	FixedLikelihood GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihoodPtrInput `pulumi:"fixedLikelihood"`
	// Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be `POSSIBLE` without the detection rule and `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will result in a final likelihood of `LIKELY`.
	RelativeLikelihood pulumi.IntPtrInput `pulumi:"relativeLikelihood"`
}

func (GooglePrivacyDlpV2LikelihoodAdjustmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LikelihoodAdjustment)(nil)).Elem()
}

func (i GooglePrivacyDlpV2LikelihoodAdjustmentArgs) ToGooglePrivacyDlpV2LikelihoodAdjustmentOutput() GooglePrivacyDlpV2LikelihoodAdjustmentOutput {
	return i.ToGooglePrivacyDlpV2LikelihoodAdjustmentOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2LikelihoodAdjustmentArgs) ToGooglePrivacyDlpV2LikelihoodAdjustmentOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LikelihoodAdjustmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LikelihoodAdjustmentOutput)
}

func (i GooglePrivacyDlpV2LikelihoodAdjustmentArgs) ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput() GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput {
	return i.ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2LikelihoodAdjustmentArgs) ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LikelihoodAdjustmentOutput).ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2LikelihoodAdjustmentPtrInput is an input type that accepts GooglePrivacyDlpV2LikelihoodAdjustmentArgs, GooglePrivacyDlpV2LikelihoodAdjustmentPtr and GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2LikelihoodAdjustmentPtrInput` via:
//
//	        GooglePrivacyDlpV2LikelihoodAdjustmentArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2LikelihoodAdjustmentPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput() GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput
	ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutputWithContext(context.Context) GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput
}

type googlePrivacyDlpV2LikelihoodAdjustmentPtrType GooglePrivacyDlpV2LikelihoodAdjustmentArgs

func GooglePrivacyDlpV2LikelihoodAdjustmentPtr(v *GooglePrivacyDlpV2LikelihoodAdjustmentArgs) GooglePrivacyDlpV2LikelihoodAdjustmentPtrInput {
	return (*googlePrivacyDlpV2LikelihoodAdjustmentPtrType)(v)
}

func (*googlePrivacyDlpV2LikelihoodAdjustmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2LikelihoodAdjustment)(nil)).Elem()
}

func (i *googlePrivacyDlpV2LikelihoodAdjustmentPtrType) ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput() GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput {
	return i.ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2LikelihoodAdjustmentPtrType) ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput)
}

// Message for specifying an adjustment to the likelihood of a finding as part of a detection rule.
type GooglePrivacyDlpV2LikelihoodAdjustmentOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LikelihoodAdjustmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LikelihoodAdjustment)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LikelihoodAdjustmentOutput) ToGooglePrivacyDlpV2LikelihoodAdjustmentOutput() GooglePrivacyDlpV2LikelihoodAdjustmentOutput {
	return o
}

func (o GooglePrivacyDlpV2LikelihoodAdjustmentOutput) ToGooglePrivacyDlpV2LikelihoodAdjustmentOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LikelihoodAdjustmentOutput {
	return o
}

func (o GooglePrivacyDlpV2LikelihoodAdjustmentOutput) ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput() GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput {
	return o.ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2LikelihoodAdjustmentOutput) ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2LikelihoodAdjustment) *GooglePrivacyDlpV2LikelihoodAdjustment {
		return &v
	}).(GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput)
}

// Set the likelihood of a finding to a fixed value.
func (o GooglePrivacyDlpV2LikelihoodAdjustmentOutput) FixedLikelihood() GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihoodPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LikelihoodAdjustment) *GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood {
		return v.FixedLikelihood
	}).(GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihoodPtrOutput)
}

// Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be `POSSIBLE` without the detection rule and `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will result in a final likelihood of `LIKELY`.
func (o GooglePrivacyDlpV2LikelihoodAdjustmentOutput) RelativeLikelihood() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LikelihoodAdjustment) *int { return v.RelativeLikelihood }).(pulumi.IntPtrOutput)
}

type GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2LikelihoodAdjustment)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput) ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput() GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput) ToGooglePrivacyDlpV2LikelihoodAdjustmentPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput) Elem() GooglePrivacyDlpV2LikelihoodAdjustmentOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LikelihoodAdjustment) GooglePrivacyDlpV2LikelihoodAdjustment {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2LikelihoodAdjustment
		return ret
	}).(GooglePrivacyDlpV2LikelihoodAdjustmentOutput)
}

// Set the likelihood of a finding to a fixed value.
func (o GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput) FixedLikelihood() GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihoodPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LikelihoodAdjustment) *GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihood {
		if v == nil {
			return nil
		}
		return v.FixedLikelihood
	}).(GooglePrivacyDlpV2LikelihoodAdjustmentFixedLikelihoodPtrOutput)
}

// Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be `POSSIBLE` without the detection rule and `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will result in a final likelihood of `LIKELY`.
func (o GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput) RelativeLikelihood() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2LikelihoodAdjustment) *int {
		if v == nil {
			return nil
		}
		return v.RelativeLikelihood
	}).(pulumi.IntPtrOutput)
}

// Message for specifying an adjustment to the likelihood of a finding as part of a detection rule.
type GooglePrivacyDlpV2LikelihoodAdjustmentResponse struct {
	// Set the likelihood of a finding to a fixed value.
	FixedLikelihood string `pulumi:"fixedLikelihood"`
	// Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be `POSSIBLE` without the detection rule and `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will result in a final likelihood of `LIKELY`.
	RelativeLikelihood int `pulumi:"relativeLikelihood"`
}

// Message for specifying an adjustment to the likelihood of a finding as part of a detection rule.
type GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2LikelihoodAdjustmentResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput) ToGooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput() GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput) ToGooglePrivacyDlpV2LikelihoodAdjustmentResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput {
	return o
}

// Set the likelihood of a finding to a fixed value.
func (o GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput) FixedLikelihood() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LikelihoodAdjustmentResponse) string { return v.FixedLikelihood }).(pulumi.StringOutput)
}

// Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be `POSSIBLE` without the detection rule and `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will result in a final likelihood of `LIKELY`.
func (o GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput) RelativeLikelihood() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2LikelihoodAdjustmentResponse) int { return v.RelativeLikelihood }).(pulumi.IntOutput)
}

// Job trigger option for hybrid jobs. Jobs must be manually created and finished.
type GooglePrivacyDlpV2Manual struct {
}

// GooglePrivacyDlpV2ManualInput is an input type that accepts GooglePrivacyDlpV2ManualArgs and GooglePrivacyDlpV2ManualOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ManualInput` via:
//
//	GooglePrivacyDlpV2ManualArgs{...}
type GooglePrivacyDlpV2ManualInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ManualOutput() GooglePrivacyDlpV2ManualOutput
	ToGooglePrivacyDlpV2ManualOutputWithContext(context.Context) GooglePrivacyDlpV2ManualOutput
}

// Job trigger option for hybrid jobs. Jobs must be manually created and finished.
type GooglePrivacyDlpV2ManualArgs struct {
}

func (GooglePrivacyDlpV2ManualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Manual)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ManualArgs) ToGooglePrivacyDlpV2ManualOutput() GooglePrivacyDlpV2ManualOutput {
	return i.ToGooglePrivacyDlpV2ManualOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ManualArgs) ToGooglePrivacyDlpV2ManualOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ManualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ManualOutput)
}

func (i GooglePrivacyDlpV2ManualArgs) ToGooglePrivacyDlpV2ManualPtrOutput() GooglePrivacyDlpV2ManualPtrOutput {
	return i.ToGooglePrivacyDlpV2ManualPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ManualArgs) ToGooglePrivacyDlpV2ManualPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ManualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ManualOutput).ToGooglePrivacyDlpV2ManualPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ManualPtrInput is an input type that accepts GooglePrivacyDlpV2ManualArgs, GooglePrivacyDlpV2ManualPtr and GooglePrivacyDlpV2ManualPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ManualPtrInput` via:
//
//	        GooglePrivacyDlpV2ManualArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ManualPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ManualPtrOutput() GooglePrivacyDlpV2ManualPtrOutput
	ToGooglePrivacyDlpV2ManualPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ManualPtrOutput
}

type googlePrivacyDlpV2ManualPtrType GooglePrivacyDlpV2ManualArgs

func GooglePrivacyDlpV2ManualPtr(v *GooglePrivacyDlpV2ManualArgs) GooglePrivacyDlpV2ManualPtrInput {
	return (*googlePrivacyDlpV2ManualPtrType)(v)
}

func (*googlePrivacyDlpV2ManualPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Manual)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ManualPtrType) ToGooglePrivacyDlpV2ManualPtrOutput() GooglePrivacyDlpV2ManualPtrOutput {
	return i.ToGooglePrivacyDlpV2ManualPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ManualPtrType) ToGooglePrivacyDlpV2ManualPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ManualPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ManualPtrOutput)
}

// Job trigger option for hybrid jobs. Jobs must be manually created and finished.
type GooglePrivacyDlpV2ManualOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ManualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Manual)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ManualOutput) ToGooglePrivacyDlpV2ManualOutput() GooglePrivacyDlpV2ManualOutput {
	return o
}

func (o GooglePrivacyDlpV2ManualOutput) ToGooglePrivacyDlpV2ManualOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ManualOutput {
	return o
}

func (o GooglePrivacyDlpV2ManualOutput) ToGooglePrivacyDlpV2ManualPtrOutput() GooglePrivacyDlpV2ManualPtrOutput {
	return o.ToGooglePrivacyDlpV2ManualPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ManualOutput) ToGooglePrivacyDlpV2ManualPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ManualPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Manual) *GooglePrivacyDlpV2Manual {
		return &v
	}).(GooglePrivacyDlpV2ManualPtrOutput)
}

type GooglePrivacyDlpV2ManualPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ManualPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Manual)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ManualPtrOutput) ToGooglePrivacyDlpV2ManualPtrOutput() GooglePrivacyDlpV2ManualPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ManualPtrOutput) ToGooglePrivacyDlpV2ManualPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ManualPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ManualPtrOutput) Elem() GooglePrivacyDlpV2ManualOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Manual) GooglePrivacyDlpV2Manual {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Manual
		return ret
	}).(GooglePrivacyDlpV2ManualOutput)
}

// Job trigger option for hybrid jobs. Jobs must be manually created and finished.
type GooglePrivacyDlpV2ManualResponse struct {
}

// Job trigger option for hybrid jobs. Jobs must be manually created and finished.
type GooglePrivacyDlpV2ManualResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ManualResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ManualResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ManualResponseOutput) ToGooglePrivacyDlpV2ManualResponseOutput() GooglePrivacyDlpV2ManualResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ManualResponseOutput) ToGooglePrivacyDlpV2ManualResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ManualResponseOutput {
	return o
}

// Compute numerical stats over an individual column, including min, max, and quantiles.
type GooglePrivacyDlpV2NumericalStatsConfig struct {
	// Field to compute numerical stats on. Supported types are integer, float, date, datetime, timestamp, time.
	Field *GooglePrivacyDlpV2FieldId `pulumi:"field"`
}

// GooglePrivacyDlpV2NumericalStatsConfigInput is an input type that accepts GooglePrivacyDlpV2NumericalStatsConfigArgs and GooglePrivacyDlpV2NumericalStatsConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2NumericalStatsConfigInput` via:
//
//	GooglePrivacyDlpV2NumericalStatsConfigArgs{...}
type GooglePrivacyDlpV2NumericalStatsConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2NumericalStatsConfigOutput() GooglePrivacyDlpV2NumericalStatsConfigOutput
	ToGooglePrivacyDlpV2NumericalStatsConfigOutputWithContext(context.Context) GooglePrivacyDlpV2NumericalStatsConfigOutput
}

// Compute numerical stats over an individual column, including min, max, and quantiles.
type GooglePrivacyDlpV2NumericalStatsConfigArgs struct {
	// Field to compute numerical stats on. Supported types are integer, float, date, datetime, timestamp, time.
	Field GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"field"`
}

func (GooglePrivacyDlpV2NumericalStatsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2NumericalStatsConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2NumericalStatsConfigArgs) ToGooglePrivacyDlpV2NumericalStatsConfigOutput() GooglePrivacyDlpV2NumericalStatsConfigOutput {
	return i.ToGooglePrivacyDlpV2NumericalStatsConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2NumericalStatsConfigArgs) ToGooglePrivacyDlpV2NumericalStatsConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2NumericalStatsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2NumericalStatsConfigOutput)
}

func (i GooglePrivacyDlpV2NumericalStatsConfigArgs) ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutput() GooglePrivacyDlpV2NumericalStatsConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2NumericalStatsConfigArgs) ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2NumericalStatsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2NumericalStatsConfigOutput).ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2NumericalStatsConfigPtrInput is an input type that accepts GooglePrivacyDlpV2NumericalStatsConfigArgs, GooglePrivacyDlpV2NumericalStatsConfigPtr and GooglePrivacyDlpV2NumericalStatsConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2NumericalStatsConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2NumericalStatsConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2NumericalStatsConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutput() GooglePrivacyDlpV2NumericalStatsConfigPtrOutput
	ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2NumericalStatsConfigPtrOutput
}

type googlePrivacyDlpV2NumericalStatsConfigPtrType GooglePrivacyDlpV2NumericalStatsConfigArgs

func GooglePrivacyDlpV2NumericalStatsConfigPtr(v *GooglePrivacyDlpV2NumericalStatsConfigArgs) GooglePrivacyDlpV2NumericalStatsConfigPtrInput {
	return (*googlePrivacyDlpV2NumericalStatsConfigPtrType)(v)
}

func (*googlePrivacyDlpV2NumericalStatsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2NumericalStatsConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2NumericalStatsConfigPtrType) ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutput() GooglePrivacyDlpV2NumericalStatsConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2NumericalStatsConfigPtrType) ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2NumericalStatsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2NumericalStatsConfigPtrOutput)
}

// Compute numerical stats over an individual column, including min, max, and quantiles.
type GooglePrivacyDlpV2NumericalStatsConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2NumericalStatsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2NumericalStatsConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2NumericalStatsConfigOutput) ToGooglePrivacyDlpV2NumericalStatsConfigOutput() GooglePrivacyDlpV2NumericalStatsConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2NumericalStatsConfigOutput) ToGooglePrivacyDlpV2NumericalStatsConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2NumericalStatsConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2NumericalStatsConfigOutput) ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutput() GooglePrivacyDlpV2NumericalStatsConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2NumericalStatsConfigOutput) ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2NumericalStatsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2NumericalStatsConfig) *GooglePrivacyDlpV2NumericalStatsConfig {
		return &v
	}).(GooglePrivacyDlpV2NumericalStatsConfigPtrOutput)
}

// Field to compute numerical stats on. Supported types are integer, float, date, datetime, timestamp, time.
func (o GooglePrivacyDlpV2NumericalStatsConfigOutput) Field() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2NumericalStatsConfig) *GooglePrivacyDlpV2FieldId { return v.Field }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

type GooglePrivacyDlpV2NumericalStatsConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2NumericalStatsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2NumericalStatsConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2NumericalStatsConfigPtrOutput) ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutput() GooglePrivacyDlpV2NumericalStatsConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2NumericalStatsConfigPtrOutput) ToGooglePrivacyDlpV2NumericalStatsConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2NumericalStatsConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2NumericalStatsConfigPtrOutput) Elem() GooglePrivacyDlpV2NumericalStatsConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2NumericalStatsConfig) GooglePrivacyDlpV2NumericalStatsConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2NumericalStatsConfig
		return ret
	}).(GooglePrivacyDlpV2NumericalStatsConfigOutput)
}

// Field to compute numerical stats on. Supported types are integer, float, date, datetime, timestamp, time.
func (o GooglePrivacyDlpV2NumericalStatsConfigPtrOutput) Field() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2NumericalStatsConfig) *GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.Field
	}).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// Compute numerical stats over an individual column, including min, max, and quantiles.
type GooglePrivacyDlpV2NumericalStatsConfigResponse struct {
	// Field to compute numerical stats on. Supported types are integer, float, date, datetime, timestamp, time.
	Field GooglePrivacyDlpV2FieldIdResponse `pulumi:"field"`
}

// Compute numerical stats over an individual column, including min, max, and quantiles.
type GooglePrivacyDlpV2NumericalStatsConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2NumericalStatsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2NumericalStatsConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2NumericalStatsConfigResponseOutput) ToGooglePrivacyDlpV2NumericalStatsConfigResponseOutput() GooglePrivacyDlpV2NumericalStatsConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2NumericalStatsConfigResponseOutput) ToGooglePrivacyDlpV2NumericalStatsConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2NumericalStatsConfigResponseOutput {
	return o
}

// Field to compute numerical stats on. Supported types are integer, float, date, datetime, timestamp, time.
func (o GooglePrivacyDlpV2NumericalStatsConfigResponseOutput) Field() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2NumericalStatsConfigResponse) GooglePrivacyDlpV2FieldIdResponse {
		return v.Field
	}).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// Result of the numerical stats computation.
type GooglePrivacyDlpV2NumericalStatsResultResponse struct {
	// Maximum value appearing in the column.
	MaxValue GooglePrivacyDlpV2ValueResponse `pulumi:"maxValue"`
	// Minimum value appearing in the column.
	MinValue GooglePrivacyDlpV2ValueResponse `pulumi:"minValue"`
	// List of 99 values that partition the set of field values into 100 equal sized buckets.
	QuantileValues []GooglePrivacyDlpV2ValueResponse `pulumi:"quantileValues"`
}

// Result of the numerical stats computation.
type GooglePrivacyDlpV2NumericalStatsResultResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2NumericalStatsResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2NumericalStatsResultResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2NumericalStatsResultResponseOutput) ToGooglePrivacyDlpV2NumericalStatsResultResponseOutput() GooglePrivacyDlpV2NumericalStatsResultResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2NumericalStatsResultResponseOutput) ToGooglePrivacyDlpV2NumericalStatsResultResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2NumericalStatsResultResponseOutput {
	return o
}

// Maximum value appearing in the column.
func (o GooglePrivacyDlpV2NumericalStatsResultResponseOutput) MaxValue() GooglePrivacyDlpV2ValueResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2NumericalStatsResultResponse) GooglePrivacyDlpV2ValueResponse {
		return v.MaxValue
	}).(GooglePrivacyDlpV2ValueResponseOutput)
}

// Minimum value appearing in the column.
func (o GooglePrivacyDlpV2NumericalStatsResultResponseOutput) MinValue() GooglePrivacyDlpV2ValueResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2NumericalStatsResultResponse) GooglePrivacyDlpV2ValueResponse {
		return v.MinValue
	}).(GooglePrivacyDlpV2ValueResponseOutput)
}

// List of 99 values that partition the set of field values into 100 equal sized buckets.
func (o GooglePrivacyDlpV2NumericalStatsResultResponseOutput) QuantileValues() GooglePrivacyDlpV2ValueResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2NumericalStatsResultResponse) []GooglePrivacyDlpV2ValueResponse {
		return v.QuantileValues
	}).(GooglePrivacyDlpV2ValueResponseArrayOutput)
}

// There is an OR relationship between these attributes. They are used to determine if a table should be scanned or not in Discovery.
type GooglePrivacyDlpV2OrConditions struct {
	// Minimum age a table must have before Cloud DLP can profile it. Value must be 1 hour or greater.
	MinAge *string `pulumi:"minAge"`
	// Minimum number of rows that should be present before Cloud DLP profiles a table
	MinRowCount *int `pulumi:"minRowCount"`
}

// GooglePrivacyDlpV2OrConditionsInput is an input type that accepts GooglePrivacyDlpV2OrConditionsArgs and GooglePrivacyDlpV2OrConditionsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2OrConditionsInput` via:
//
//	GooglePrivacyDlpV2OrConditionsArgs{...}
type GooglePrivacyDlpV2OrConditionsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2OrConditionsOutput() GooglePrivacyDlpV2OrConditionsOutput
	ToGooglePrivacyDlpV2OrConditionsOutputWithContext(context.Context) GooglePrivacyDlpV2OrConditionsOutput
}

// There is an OR relationship between these attributes. They are used to determine if a table should be scanned or not in Discovery.
type GooglePrivacyDlpV2OrConditionsArgs struct {
	// Minimum age a table must have before Cloud DLP can profile it. Value must be 1 hour or greater.
	MinAge pulumi.StringPtrInput `pulumi:"minAge"`
	// Minimum number of rows that should be present before Cloud DLP profiles a table
	MinRowCount pulumi.IntPtrInput `pulumi:"minRowCount"`
}

func (GooglePrivacyDlpV2OrConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2OrConditions)(nil)).Elem()
}

func (i GooglePrivacyDlpV2OrConditionsArgs) ToGooglePrivacyDlpV2OrConditionsOutput() GooglePrivacyDlpV2OrConditionsOutput {
	return i.ToGooglePrivacyDlpV2OrConditionsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2OrConditionsArgs) ToGooglePrivacyDlpV2OrConditionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2OrConditionsOutput)
}

func (i GooglePrivacyDlpV2OrConditionsArgs) ToGooglePrivacyDlpV2OrConditionsPtrOutput() GooglePrivacyDlpV2OrConditionsPtrOutput {
	return i.ToGooglePrivacyDlpV2OrConditionsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2OrConditionsArgs) ToGooglePrivacyDlpV2OrConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2OrConditionsOutput).ToGooglePrivacyDlpV2OrConditionsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2OrConditionsPtrInput is an input type that accepts GooglePrivacyDlpV2OrConditionsArgs, GooglePrivacyDlpV2OrConditionsPtr and GooglePrivacyDlpV2OrConditionsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2OrConditionsPtrInput` via:
//
//	        GooglePrivacyDlpV2OrConditionsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2OrConditionsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2OrConditionsPtrOutput() GooglePrivacyDlpV2OrConditionsPtrOutput
	ToGooglePrivacyDlpV2OrConditionsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2OrConditionsPtrOutput
}

type googlePrivacyDlpV2OrConditionsPtrType GooglePrivacyDlpV2OrConditionsArgs

func GooglePrivacyDlpV2OrConditionsPtr(v *GooglePrivacyDlpV2OrConditionsArgs) GooglePrivacyDlpV2OrConditionsPtrInput {
	return (*googlePrivacyDlpV2OrConditionsPtrType)(v)
}

func (*googlePrivacyDlpV2OrConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2OrConditions)(nil)).Elem()
}

func (i *googlePrivacyDlpV2OrConditionsPtrType) ToGooglePrivacyDlpV2OrConditionsPtrOutput() GooglePrivacyDlpV2OrConditionsPtrOutput {
	return i.ToGooglePrivacyDlpV2OrConditionsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2OrConditionsPtrType) ToGooglePrivacyDlpV2OrConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2OrConditionsPtrOutput)
}

// There is an OR relationship between these attributes. They are used to determine if a table should be scanned or not in Discovery.
type GooglePrivacyDlpV2OrConditionsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2OrConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2OrConditions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2OrConditionsOutput) ToGooglePrivacyDlpV2OrConditionsOutput() GooglePrivacyDlpV2OrConditionsOutput {
	return o
}

func (o GooglePrivacyDlpV2OrConditionsOutput) ToGooglePrivacyDlpV2OrConditionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrConditionsOutput {
	return o
}

func (o GooglePrivacyDlpV2OrConditionsOutput) ToGooglePrivacyDlpV2OrConditionsPtrOutput() GooglePrivacyDlpV2OrConditionsPtrOutput {
	return o.ToGooglePrivacyDlpV2OrConditionsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2OrConditionsOutput) ToGooglePrivacyDlpV2OrConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2OrConditions) *GooglePrivacyDlpV2OrConditions {
		return &v
	}).(GooglePrivacyDlpV2OrConditionsPtrOutput)
}

// Minimum age a table must have before Cloud DLP can profile it. Value must be 1 hour or greater.
func (o GooglePrivacyDlpV2OrConditionsOutput) MinAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OrConditions) *string { return v.MinAge }).(pulumi.StringPtrOutput)
}

// Minimum number of rows that should be present before Cloud DLP profiles a table
func (o GooglePrivacyDlpV2OrConditionsOutput) MinRowCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OrConditions) *int { return v.MinRowCount }).(pulumi.IntPtrOutput)
}

type GooglePrivacyDlpV2OrConditionsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2OrConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2OrConditions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2OrConditionsPtrOutput) ToGooglePrivacyDlpV2OrConditionsPtrOutput() GooglePrivacyDlpV2OrConditionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2OrConditionsPtrOutput) ToGooglePrivacyDlpV2OrConditionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrConditionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2OrConditionsPtrOutput) Elem() GooglePrivacyDlpV2OrConditionsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2OrConditions) GooglePrivacyDlpV2OrConditions {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2OrConditions
		return ret
	}).(GooglePrivacyDlpV2OrConditionsOutput)
}

// Minimum age a table must have before Cloud DLP can profile it. Value must be 1 hour or greater.
func (o GooglePrivacyDlpV2OrConditionsPtrOutput) MinAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2OrConditions) *string {
		if v == nil {
			return nil
		}
		return v.MinAge
	}).(pulumi.StringPtrOutput)
}

// Minimum number of rows that should be present before Cloud DLP profiles a table
func (o GooglePrivacyDlpV2OrConditionsPtrOutput) MinRowCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2OrConditions) *int {
		if v == nil {
			return nil
		}
		return v.MinRowCount
	}).(pulumi.IntPtrOutput)
}

// There is an OR relationship between these attributes. They are used to determine if a table should be scanned or not in Discovery.
type GooglePrivacyDlpV2OrConditionsResponse struct {
	// Minimum age a table must have before Cloud DLP can profile it. Value must be 1 hour or greater.
	MinAge string `pulumi:"minAge"`
	// Minimum number of rows that should be present before Cloud DLP profiles a table
	MinRowCount int `pulumi:"minRowCount"`
}

// There is an OR relationship between these attributes. They are used to determine if a table should be scanned or not in Discovery.
type GooglePrivacyDlpV2OrConditionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2OrConditionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2OrConditionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2OrConditionsResponseOutput) ToGooglePrivacyDlpV2OrConditionsResponseOutput() GooglePrivacyDlpV2OrConditionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2OrConditionsResponseOutput) ToGooglePrivacyDlpV2OrConditionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrConditionsResponseOutput {
	return o
}

// Minimum age a table must have before Cloud DLP can profile it. Value must be 1 hour or greater.
func (o GooglePrivacyDlpV2OrConditionsResponseOutput) MinAge() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OrConditionsResponse) string { return v.MinAge }).(pulumi.StringOutput)
}

// Minimum number of rows that should be present before Cloud DLP profiles a table
func (o GooglePrivacyDlpV2OrConditionsResponseOutput) MinRowCount() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OrConditionsResponse) int { return v.MinRowCount }).(pulumi.IntOutput)
}

// Project and scan location information. Only set when the parent is an org.
type GooglePrivacyDlpV2OrgConfig struct {
	// The data to scan: folder, org, or project
	Location *GooglePrivacyDlpV2DiscoveryStartingLocation `pulumi:"location"`
	// The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.
	Project *string `pulumi:"project"`
}

// GooglePrivacyDlpV2OrgConfigInput is an input type that accepts GooglePrivacyDlpV2OrgConfigArgs and GooglePrivacyDlpV2OrgConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2OrgConfigInput` via:
//
//	GooglePrivacyDlpV2OrgConfigArgs{...}
type GooglePrivacyDlpV2OrgConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2OrgConfigOutput() GooglePrivacyDlpV2OrgConfigOutput
	ToGooglePrivacyDlpV2OrgConfigOutputWithContext(context.Context) GooglePrivacyDlpV2OrgConfigOutput
}

// Project and scan location information. Only set when the parent is an org.
type GooglePrivacyDlpV2OrgConfigArgs struct {
	// The data to scan: folder, org, or project
	Location GooglePrivacyDlpV2DiscoveryStartingLocationPtrInput `pulumi:"location"`
	// The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GooglePrivacyDlpV2OrgConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2OrgConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2OrgConfigArgs) ToGooglePrivacyDlpV2OrgConfigOutput() GooglePrivacyDlpV2OrgConfigOutput {
	return i.ToGooglePrivacyDlpV2OrgConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2OrgConfigArgs) ToGooglePrivacyDlpV2OrgConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrgConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2OrgConfigOutput)
}

func (i GooglePrivacyDlpV2OrgConfigArgs) ToGooglePrivacyDlpV2OrgConfigPtrOutput() GooglePrivacyDlpV2OrgConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2OrgConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2OrgConfigArgs) ToGooglePrivacyDlpV2OrgConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrgConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2OrgConfigOutput).ToGooglePrivacyDlpV2OrgConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2OrgConfigPtrInput is an input type that accepts GooglePrivacyDlpV2OrgConfigArgs, GooglePrivacyDlpV2OrgConfigPtr and GooglePrivacyDlpV2OrgConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2OrgConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2OrgConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2OrgConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2OrgConfigPtrOutput() GooglePrivacyDlpV2OrgConfigPtrOutput
	ToGooglePrivacyDlpV2OrgConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2OrgConfigPtrOutput
}

type googlePrivacyDlpV2OrgConfigPtrType GooglePrivacyDlpV2OrgConfigArgs

func GooglePrivacyDlpV2OrgConfigPtr(v *GooglePrivacyDlpV2OrgConfigArgs) GooglePrivacyDlpV2OrgConfigPtrInput {
	return (*googlePrivacyDlpV2OrgConfigPtrType)(v)
}

func (*googlePrivacyDlpV2OrgConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2OrgConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2OrgConfigPtrType) ToGooglePrivacyDlpV2OrgConfigPtrOutput() GooglePrivacyDlpV2OrgConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2OrgConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2OrgConfigPtrType) ToGooglePrivacyDlpV2OrgConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrgConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2OrgConfigPtrOutput)
}

// Project and scan location information. Only set when the parent is an org.
type GooglePrivacyDlpV2OrgConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2OrgConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2OrgConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2OrgConfigOutput) ToGooglePrivacyDlpV2OrgConfigOutput() GooglePrivacyDlpV2OrgConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2OrgConfigOutput) ToGooglePrivacyDlpV2OrgConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrgConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2OrgConfigOutput) ToGooglePrivacyDlpV2OrgConfigPtrOutput() GooglePrivacyDlpV2OrgConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2OrgConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2OrgConfigOutput) ToGooglePrivacyDlpV2OrgConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrgConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2OrgConfig) *GooglePrivacyDlpV2OrgConfig {
		return &v
	}).(GooglePrivacyDlpV2OrgConfigPtrOutput)
}

// The data to scan: folder, org, or project
func (o GooglePrivacyDlpV2OrgConfigOutput) Location() GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OrgConfig) *GooglePrivacyDlpV2DiscoveryStartingLocation { return v.Location }).(GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput)
}

// The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.
func (o GooglePrivacyDlpV2OrgConfigOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OrgConfig) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2OrgConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2OrgConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2OrgConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2OrgConfigPtrOutput) ToGooglePrivacyDlpV2OrgConfigPtrOutput() GooglePrivacyDlpV2OrgConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2OrgConfigPtrOutput) ToGooglePrivacyDlpV2OrgConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrgConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2OrgConfigPtrOutput) Elem() GooglePrivacyDlpV2OrgConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2OrgConfig) GooglePrivacyDlpV2OrgConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2OrgConfig
		return ret
	}).(GooglePrivacyDlpV2OrgConfigOutput)
}

// The data to scan: folder, org, or project
func (o GooglePrivacyDlpV2OrgConfigPtrOutput) Location() GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2OrgConfig) *GooglePrivacyDlpV2DiscoveryStartingLocation {
		if v == nil {
			return nil
		}
		return v.Location
	}).(GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput)
}

// The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.
func (o GooglePrivacyDlpV2OrgConfigPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2OrgConfig) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Project and scan location information. Only set when the parent is an org.
type GooglePrivacyDlpV2OrgConfigResponse struct {
	// The data to scan: folder, org, or project
	Location GooglePrivacyDlpV2DiscoveryStartingLocationResponse `pulumi:"location"`
	// The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.
	Project string `pulumi:"project"`
}

// Project and scan location information. Only set when the parent is an org.
type GooglePrivacyDlpV2OrgConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2OrgConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2OrgConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2OrgConfigResponseOutput) ToGooglePrivacyDlpV2OrgConfigResponseOutput() GooglePrivacyDlpV2OrgConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2OrgConfigResponseOutput) ToGooglePrivacyDlpV2OrgConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OrgConfigResponseOutput {
	return o
}

// The data to scan: folder, org, or project
func (o GooglePrivacyDlpV2OrgConfigResponseOutput) Location() GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OrgConfigResponse) GooglePrivacyDlpV2DiscoveryStartingLocationResponse {
		return v.Location
	}).(GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput)
}

// The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.
func (o GooglePrivacyDlpV2OrgConfigResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OrgConfigResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Cloud repository for storing output.
type GooglePrivacyDlpV2OutputStorageConfig struct {
	// Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
	OutputSchema *GooglePrivacyDlpV2OutputStorageConfigOutputSchema `pulumi:"outputSchema"`
	// Store findings in an existing table or a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details. For Inspect, each column in an existing output table must have the same name, type, and mode of a field in the `Finding` object. For Risk, an existing output table should be the output of a previous Risk analysis job run on the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that analyze the same table but compute a different privacy metric, or use different sets of quasi-identifiers, cannot store their results in the same table.
	Table *GooglePrivacyDlpV2BigQueryTable `pulumi:"table"`
}

// GooglePrivacyDlpV2OutputStorageConfigInput is an input type that accepts GooglePrivacyDlpV2OutputStorageConfigArgs and GooglePrivacyDlpV2OutputStorageConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2OutputStorageConfigInput` via:
//
//	GooglePrivacyDlpV2OutputStorageConfigArgs{...}
type GooglePrivacyDlpV2OutputStorageConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2OutputStorageConfigOutput() GooglePrivacyDlpV2OutputStorageConfigOutput
	ToGooglePrivacyDlpV2OutputStorageConfigOutputWithContext(context.Context) GooglePrivacyDlpV2OutputStorageConfigOutput
}

// Cloud repository for storing output.
type GooglePrivacyDlpV2OutputStorageConfigArgs struct {
	// Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
	OutputSchema GooglePrivacyDlpV2OutputStorageConfigOutputSchemaPtrInput `pulumi:"outputSchema"`
	// Store findings in an existing table or a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details. For Inspect, each column in an existing output table must have the same name, type, and mode of a field in the `Finding` object. For Risk, an existing output table should be the output of a previous Risk analysis job run on the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that analyze the same table but compute a different privacy metric, or use different sets of quasi-identifiers, cannot store their results in the same table.
	Table GooglePrivacyDlpV2BigQueryTablePtrInput `pulumi:"table"`
}

func (GooglePrivacyDlpV2OutputStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2OutputStorageConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2OutputStorageConfigArgs) ToGooglePrivacyDlpV2OutputStorageConfigOutput() GooglePrivacyDlpV2OutputStorageConfigOutput {
	return i.ToGooglePrivacyDlpV2OutputStorageConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2OutputStorageConfigArgs) ToGooglePrivacyDlpV2OutputStorageConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OutputStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2OutputStorageConfigOutput)
}

func (i GooglePrivacyDlpV2OutputStorageConfigArgs) ToGooglePrivacyDlpV2OutputStorageConfigPtrOutput() GooglePrivacyDlpV2OutputStorageConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2OutputStorageConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2OutputStorageConfigArgs) ToGooglePrivacyDlpV2OutputStorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OutputStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2OutputStorageConfigOutput).ToGooglePrivacyDlpV2OutputStorageConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2OutputStorageConfigPtrInput is an input type that accepts GooglePrivacyDlpV2OutputStorageConfigArgs, GooglePrivacyDlpV2OutputStorageConfigPtr and GooglePrivacyDlpV2OutputStorageConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2OutputStorageConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2OutputStorageConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2OutputStorageConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2OutputStorageConfigPtrOutput() GooglePrivacyDlpV2OutputStorageConfigPtrOutput
	ToGooglePrivacyDlpV2OutputStorageConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2OutputStorageConfigPtrOutput
}

type googlePrivacyDlpV2OutputStorageConfigPtrType GooglePrivacyDlpV2OutputStorageConfigArgs

func GooglePrivacyDlpV2OutputStorageConfigPtr(v *GooglePrivacyDlpV2OutputStorageConfigArgs) GooglePrivacyDlpV2OutputStorageConfigPtrInput {
	return (*googlePrivacyDlpV2OutputStorageConfigPtrType)(v)
}

func (*googlePrivacyDlpV2OutputStorageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2OutputStorageConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2OutputStorageConfigPtrType) ToGooglePrivacyDlpV2OutputStorageConfigPtrOutput() GooglePrivacyDlpV2OutputStorageConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2OutputStorageConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2OutputStorageConfigPtrType) ToGooglePrivacyDlpV2OutputStorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OutputStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2OutputStorageConfigPtrOutput)
}

// Cloud repository for storing output.
type GooglePrivacyDlpV2OutputStorageConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2OutputStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2OutputStorageConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2OutputStorageConfigOutput) ToGooglePrivacyDlpV2OutputStorageConfigOutput() GooglePrivacyDlpV2OutputStorageConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2OutputStorageConfigOutput) ToGooglePrivacyDlpV2OutputStorageConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OutputStorageConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2OutputStorageConfigOutput) ToGooglePrivacyDlpV2OutputStorageConfigPtrOutput() GooglePrivacyDlpV2OutputStorageConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2OutputStorageConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2OutputStorageConfigOutput) ToGooglePrivacyDlpV2OutputStorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OutputStorageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2OutputStorageConfig) *GooglePrivacyDlpV2OutputStorageConfig {
		return &v
	}).(GooglePrivacyDlpV2OutputStorageConfigPtrOutput)
}

// Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
func (o GooglePrivacyDlpV2OutputStorageConfigOutput) OutputSchema() GooglePrivacyDlpV2OutputStorageConfigOutputSchemaPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OutputStorageConfig) *GooglePrivacyDlpV2OutputStorageConfigOutputSchema {
		return v.OutputSchema
	}).(GooglePrivacyDlpV2OutputStorageConfigOutputSchemaPtrOutput)
}

// Store findings in an existing table or a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details. For Inspect, each column in an existing output table must have the same name, type, and mode of a field in the `Finding` object. For Risk, an existing output table should be the output of a previous Risk analysis job run on the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that analyze the same table but compute a different privacy metric, or use different sets of quasi-identifiers, cannot store their results in the same table.
func (o GooglePrivacyDlpV2OutputStorageConfigOutput) Table() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OutputStorageConfig) *GooglePrivacyDlpV2BigQueryTable { return v.Table }).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

type GooglePrivacyDlpV2OutputStorageConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2OutputStorageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2OutputStorageConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2OutputStorageConfigPtrOutput) ToGooglePrivacyDlpV2OutputStorageConfigPtrOutput() GooglePrivacyDlpV2OutputStorageConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2OutputStorageConfigPtrOutput) ToGooglePrivacyDlpV2OutputStorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OutputStorageConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2OutputStorageConfigPtrOutput) Elem() GooglePrivacyDlpV2OutputStorageConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2OutputStorageConfig) GooglePrivacyDlpV2OutputStorageConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2OutputStorageConfig
		return ret
	}).(GooglePrivacyDlpV2OutputStorageConfigOutput)
}

// Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
func (o GooglePrivacyDlpV2OutputStorageConfigPtrOutput) OutputSchema() GooglePrivacyDlpV2OutputStorageConfigOutputSchemaPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2OutputStorageConfig) *GooglePrivacyDlpV2OutputStorageConfigOutputSchema {
		if v == nil {
			return nil
		}
		return v.OutputSchema
	}).(GooglePrivacyDlpV2OutputStorageConfigOutputSchemaPtrOutput)
}

// Store findings in an existing table or a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details. For Inspect, each column in an existing output table must have the same name, type, and mode of a field in the `Finding` object. For Risk, an existing output table should be the output of a previous Risk analysis job run on the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that analyze the same table but compute a different privacy metric, or use different sets of quasi-identifiers, cannot store their results in the same table.
func (o GooglePrivacyDlpV2OutputStorageConfigPtrOutput) Table() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2OutputStorageConfig) *GooglePrivacyDlpV2BigQueryTable {
		if v == nil {
			return nil
		}
		return v.Table
	}).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

// Cloud repository for storing output.
type GooglePrivacyDlpV2OutputStorageConfigResponse struct {
	// Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
	OutputSchema string `pulumi:"outputSchema"`
	// Store findings in an existing table or a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details. For Inspect, each column in an existing output table must have the same name, type, and mode of a field in the `Finding` object. For Risk, an existing output table should be the output of a previous Risk analysis job run on the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that analyze the same table but compute a different privacy metric, or use different sets of quasi-identifiers, cannot store their results in the same table.
	Table GooglePrivacyDlpV2BigQueryTableResponse `pulumi:"table"`
}

// Cloud repository for storing output.
type GooglePrivacyDlpV2OutputStorageConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2OutputStorageConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2OutputStorageConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2OutputStorageConfigResponseOutput) ToGooglePrivacyDlpV2OutputStorageConfigResponseOutput() GooglePrivacyDlpV2OutputStorageConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2OutputStorageConfigResponseOutput) ToGooglePrivacyDlpV2OutputStorageConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2OutputStorageConfigResponseOutput {
	return o
}

// Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
func (o GooglePrivacyDlpV2OutputStorageConfigResponseOutput) OutputSchema() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OutputStorageConfigResponse) string { return v.OutputSchema }).(pulumi.StringOutput)
}

// Store findings in an existing table or a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details. For Inspect, each column in an existing output table must have the same name, type, and mode of a field in the `Finding` object. For Risk, an existing output table should be the output of a previous Risk analysis job run on the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that analyze the same table but compute a different privacy metric, or use different sets of quasi-identifiers, cannot store their results in the same table.
func (o GooglePrivacyDlpV2OutputStorageConfigResponseOutput) Table() GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2OutputStorageConfigResponse) GooglePrivacyDlpV2BigQueryTableResponse {
		return v.Table
	}).(GooglePrivacyDlpV2BigQueryTableResponseOutput)
}

// Datastore partition ID. A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID.
type GooglePrivacyDlpV2PartitionId struct {
	// If not empty, the ID of the namespace to which the entities belong.
	NamespaceId *string `pulumi:"namespaceId"`
	// The ID of the project to which the entities belong.
	Project *string `pulumi:"project"`
}

// GooglePrivacyDlpV2PartitionIdInput is an input type that accepts GooglePrivacyDlpV2PartitionIdArgs and GooglePrivacyDlpV2PartitionIdOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PartitionIdInput` via:
//
//	GooglePrivacyDlpV2PartitionIdArgs{...}
type GooglePrivacyDlpV2PartitionIdInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PartitionIdOutput() GooglePrivacyDlpV2PartitionIdOutput
	ToGooglePrivacyDlpV2PartitionIdOutputWithContext(context.Context) GooglePrivacyDlpV2PartitionIdOutput
}

// Datastore partition ID. A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID.
type GooglePrivacyDlpV2PartitionIdArgs struct {
	// If not empty, the ID of the namespace to which the entities belong.
	NamespaceId pulumi.StringPtrInput `pulumi:"namespaceId"`
	// The ID of the project to which the entities belong.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (GooglePrivacyDlpV2PartitionIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PartitionId)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PartitionIdArgs) ToGooglePrivacyDlpV2PartitionIdOutput() GooglePrivacyDlpV2PartitionIdOutput {
	return i.ToGooglePrivacyDlpV2PartitionIdOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PartitionIdArgs) ToGooglePrivacyDlpV2PartitionIdOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PartitionIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PartitionIdOutput)
}

func (i GooglePrivacyDlpV2PartitionIdArgs) ToGooglePrivacyDlpV2PartitionIdPtrOutput() GooglePrivacyDlpV2PartitionIdPtrOutput {
	return i.ToGooglePrivacyDlpV2PartitionIdPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PartitionIdArgs) ToGooglePrivacyDlpV2PartitionIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PartitionIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PartitionIdOutput).ToGooglePrivacyDlpV2PartitionIdPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2PartitionIdPtrInput is an input type that accepts GooglePrivacyDlpV2PartitionIdArgs, GooglePrivacyDlpV2PartitionIdPtr and GooglePrivacyDlpV2PartitionIdPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PartitionIdPtrInput` via:
//
//	        GooglePrivacyDlpV2PartitionIdArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2PartitionIdPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PartitionIdPtrOutput() GooglePrivacyDlpV2PartitionIdPtrOutput
	ToGooglePrivacyDlpV2PartitionIdPtrOutputWithContext(context.Context) GooglePrivacyDlpV2PartitionIdPtrOutput
}

type googlePrivacyDlpV2PartitionIdPtrType GooglePrivacyDlpV2PartitionIdArgs

func GooglePrivacyDlpV2PartitionIdPtr(v *GooglePrivacyDlpV2PartitionIdArgs) GooglePrivacyDlpV2PartitionIdPtrInput {
	return (*googlePrivacyDlpV2PartitionIdPtrType)(v)
}

func (*googlePrivacyDlpV2PartitionIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PartitionId)(nil)).Elem()
}

func (i *googlePrivacyDlpV2PartitionIdPtrType) ToGooglePrivacyDlpV2PartitionIdPtrOutput() GooglePrivacyDlpV2PartitionIdPtrOutput {
	return i.ToGooglePrivacyDlpV2PartitionIdPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2PartitionIdPtrType) ToGooglePrivacyDlpV2PartitionIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PartitionIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PartitionIdPtrOutput)
}

// Datastore partition ID. A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID.
type GooglePrivacyDlpV2PartitionIdOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PartitionIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PartitionId)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PartitionIdOutput) ToGooglePrivacyDlpV2PartitionIdOutput() GooglePrivacyDlpV2PartitionIdOutput {
	return o
}

func (o GooglePrivacyDlpV2PartitionIdOutput) ToGooglePrivacyDlpV2PartitionIdOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PartitionIdOutput {
	return o
}

func (o GooglePrivacyDlpV2PartitionIdOutput) ToGooglePrivacyDlpV2PartitionIdPtrOutput() GooglePrivacyDlpV2PartitionIdPtrOutput {
	return o.ToGooglePrivacyDlpV2PartitionIdPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2PartitionIdOutput) ToGooglePrivacyDlpV2PartitionIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PartitionIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2PartitionId) *GooglePrivacyDlpV2PartitionId {
		return &v
	}).(GooglePrivacyDlpV2PartitionIdPtrOutput)
}

// If not empty, the ID of the namespace to which the entities belong.
func (o GooglePrivacyDlpV2PartitionIdOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PartitionId) *string { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

// The ID of the project to which the entities belong.
func (o GooglePrivacyDlpV2PartitionIdOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PartitionId) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2PartitionIdPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PartitionIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PartitionId)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PartitionIdPtrOutput) ToGooglePrivacyDlpV2PartitionIdPtrOutput() GooglePrivacyDlpV2PartitionIdPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PartitionIdPtrOutput) ToGooglePrivacyDlpV2PartitionIdPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PartitionIdPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PartitionIdPtrOutput) Elem() GooglePrivacyDlpV2PartitionIdOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PartitionId) GooglePrivacyDlpV2PartitionId {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2PartitionId
		return ret
	}).(GooglePrivacyDlpV2PartitionIdOutput)
}

// If not empty, the ID of the namespace to which the entities belong.
func (o GooglePrivacyDlpV2PartitionIdPtrOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PartitionId) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project to which the entities belong.
func (o GooglePrivacyDlpV2PartitionIdPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PartitionId) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Datastore partition ID. A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID.
type GooglePrivacyDlpV2PartitionIdResponse struct {
	// If not empty, the ID of the namespace to which the entities belong.
	NamespaceId string `pulumi:"namespaceId"`
	// The ID of the project to which the entities belong.
	Project string `pulumi:"project"`
}

// Datastore partition ID. A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID.
type GooglePrivacyDlpV2PartitionIdResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PartitionIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PartitionIdResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PartitionIdResponseOutput) ToGooglePrivacyDlpV2PartitionIdResponseOutput() GooglePrivacyDlpV2PartitionIdResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2PartitionIdResponseOutput) ToGooglePrivacyDlpV2PartitionIdResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PartitionIdResponseOutput {
	return o
}

// If not empty, the ID of the namespace to which the entities belong.
func (o GooglePrivacyDlpV2PartitionIdResponseOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PartitionIdResponse) string { return v.NamespaceId }).(pulumi.StringOutput)
}

// The ID of the project to which the entities belong.
func (o GooglePrivacyDlpV2PartitionIdResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PartitionIdResponse) string { return v.Project }).(pulumi.StringOutput)
}

// A rule for transforming a value.
type GooglePrivacyDlpV2PrimitiveTransformation struct {
	// Bucketing
	BucketingConfig *GooglePrivacyDlpV2BucketingConfig `pulumi:"bucketingConfig"`
	// Mask
	CharacterMaskConfig *GooglePrivacyDlpV2CharacterMaskConfig `pulumi:"characterMaskConfig"`
	// Deterministic Crypto
	CryptoDeterministicConfig *GooglePrivacyDlpV2CryptoDeterministicConfig `pulumi:"cryptoDeterministicConfig"`
	// Crypto
	CryptoHashConfig *GooglePrivacyDlpV2CryptoHashConfig `pulumi:"cryptoHashConfig"`
	// Ffx-Fpe
	CryptoReplaceFfxFpeConfig *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig `pulumi:"cryptoReplaceFfxFpeConfig"`
	// Date Shift
	DateShiftConfig *GooglePrivacyDlpV2DateShiftConfig `pulumi:"dateShiftConfig"`
	// Fixed size bucketing
	FixedSizeBucketingConfig *GooglePrivacyDlpV2FixedSizeBucketingConfig `pulumi:"fixedSizeBucketingConfig"`
	// Redact
	RedactConfig *GooglePrivacyDlpV2RedactConfig `pulumi:"redactConfig"`
	// Replace with a specified value.
	ReplaceConfig *GooglePrivacyDlpV2ReplaceValueConfig `pulumi:"replaceConfig"`
	// Replace with a value randomly drawn (with replacement) from a dictionary.
	ReplaceDictionaryConfig *GooglePrivacyDlpV2ReplaceDictionaryConfig `pulumi:"replaceDictionaryConfig"`
	// Replace with infotype
	ReplaceWithInfoTypeConfig *GooglePrivacyDlpV2ReplaceWithInfoTypeConfig `pulumi:"replaceWithInfoTypeConfig"`
	// Time extraction
	TimePartConfig *GooglePrivacyDlpV2TimePartConfig `pulumi:"timePartConfig"`
}

// GooglePrivacyDlpV2PrimitiveTransformationInput is an input type that accepts GooglePrivacyDlpV2PrimitiveTransformationArgs and GooglePrivacyDlpV2PrimitiveTransformationOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PrimitiveTransformationInput` via:
//
//	GooglePrivacyDlpV2PrimitiveTransformationArgs{...}
type GooglePrivacyDlpV2PrimitiveTransformationInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PrimitiveTransformationOutput() GooglePrivacyDlpV2PrimitiveTransformationOutput
	ToGooglePrivacyDlpV2PrimitiveTransformationOutputWithContext(context.Context) GooglePrivacyDlpV2PrimitiveTransformationOutput
}

// A rule for transforming a value.
type GooglePrivacyDlpV2PrimitiveTransformationArgs struct {
	// Bucketing
	BucketingConfig GooglePrivacyDlpV2BucketingConfigPtrInput `pulumi:"bucketingConfig"`
	// Mask
	CharacterMaskConfig GooglePrivacyDlpV2CharacterMaskConfigPtrInput `pulumi:"characterMaskConfig"`
	// Deterministic Crypto
	CryptoDeterministicConfig GooglePrivacyDlpV2CryptoDeterministicConfigPtrInput `pulumi:"cryptoDeterministicConfig"`
	// Crypto
	CryptoHashConfig GooglePrivacyDlpV2CryptoHashConfigPtrInput `pulumi:"cryptoHashConfig"`
	// Ffx-Fpe
	CryptoReplaceFfxFpeConfig GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrInput `pulumi:"cryptoReplaceFfxFpeConfig"`
	// Date Shift
	DateShiftConfig GooglePrivacyDlpV2DateShiftConfigPtrInput `pulumi:"dateShiftConfig"`
	// Fixed size bucketing
	FixedSizeBucketingConfig GooglePrivacyDlpV2FixedSizeBucketingConfigPtrInput `pulumi:"fixedSizeBucketingConfig"`
	// Redact
	RedactConfig GooglePrivacyDlpV2RedactConfigPtrInput `pulumi:"redactConfig"`
	// Replace with a specified value.
	ReplaceConfig GooglePrivacyDlpV2ReplaceValueConfigPtrInput `pulumi:"replaceConfig"`
	// Replace with a value randomly drawn (with replacement) from a dictionary.
	ReplaceDictionaryConfig GooglePrivacyDlpV2ReplaceDictionaryConfigPtrInput `pulumi:"replaceDictionaryConfig"`
	// Replace with infotype
	ReplaceWithInfoTypeConfig GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrInput `pulumi:"replaceWithInfoTypeConfig"`
	// Time extraction
	TimePartConfig GooglePrivacyDlpV2TimePartConfigPtrInput `pulumi:"timePartConfig"`
}

func (GooglePrivacyDlpV2PrimitiveTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PrimitiveTransformation)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PrimitiveTransformationArgs) ToGooglePrivacyDlpV2PrimitiveTransformationOutput() GooglePrivacyDlpV2PrimitiveTransformationOutput {
	return i.ToGooglePrivacyDlpV2PrimitiveTransformationOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PrimitiveTransformationArgs) ToGooglePrivacyDlpV2PrimitiveTransformationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrimitiveTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PrimitiveTransformationOutput)
}

func (i GooglePrivacyDlpV2PrimitiveTransformationArgs) ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutput() GooglePrivacyDlpV2PrimitiveTransformationPtrOutput {
	return i.ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PrimitiveTransformationArgs) ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrimitiveTransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PrimitiveTransformationOutput).ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2PrimitiveTransformationPtrInput is an input type that accepts GooglePrivacyDlpV2PrimitiveTransformationArgs, GooglePrivacyDlpV2PrimitiveTransformationPtr and GooglePrivacyDlpV2PrimitiveTransformationPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PrimitiveTransformationPtrInput` via:
//
//	        GooglePrivacyDlpV2PrimitiveTransformationArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2PrimitiveTransformationPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutput() GooglePrivacyDlpV2PrimitiveTransformationPtrOutput
	ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutputWithContext(context.Context) GooglePrivacyDlpV2PrimitiveTransformationPtrOutput
}

type googlePrivacyDlpV2PrimitiveTransformationPtrType GooglePrivacyDlpV2PrimitiveTransformationArgs

func GooglePrivacyDlpV2PrimitiveTransformationPtr(v *GooglePrivacyDlpV2PrimitiveTransformationArgs) GooglePrivacyDlpV2PrimitiveTransformationPtrInput {
	return (*googlePrivacyDlpV2PrimitiveTransformationPtrType)(v)
}

func (*googlePrivacyDlpV2PrimitiveTransformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PrimitiveTransformation)(nil)).Elem()
}

func (i *googlePrivacyDlpV2PrimitiveTransformationPtrType) ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutput() GooglePrivacyDlpV2PrimitiveTransformationPtrOutput {
	return i.ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2PrimitiveTransformationPtrType) ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrimitiveTransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PrimitiveTransformationPtrOutput)
}

// A rule for transforming a value.
type GooglePrivacyDlpV2PrimitiveTransformationOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PrimitiveTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PrimitiveTransformation)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) ToGooglePrivacyDlpV2PrimitiveTransformationOutput() GooglePrivacyDlpV2PrimitiveTransformationOutput {
	return o
}

func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) ToGooglePrivacyDlpV2PrimitiveTransformationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrimitiveTransformationOutput {
	return o
}

func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutput() GooglePrivacyDlpV2PrimitiveTransformationPtrOutput {
	return o.ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrimitiveTransformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2PrimitiveTransformation {
		return &v
	}).(GooglePrivacyDlpV2PrimitiveTransformationPtrOutput)
}

// Bucketing
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) BucketingConfig() GooglePrivacyDlpV2BucketingConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2BucketingConfig {
		return v.BucketingConfig
	}).(GooglePrivacyDlpV2BucketingConfigPtrOutput)
}

// Mask
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) CharacterMaskConfig() GooglePrivacyDlpV2CharacterMaskConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2CharacterMaskConfig {
		return v.CharacterMaskConfig
	}).(GooglePrivacyDlpV2CharacterMaskConfigPtrOutput)
}

// Deterministic Crypto
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) CryptoDeterministicConfig() GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2CryptoDeterministicConfig {
		return v.CryptoDeterministicConfig
	}).(GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput)
}

// Crypto
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) CryptoHashConfig() GooglePrivacyDlpV2CryptoHashConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2CryptoHashConfig {
		return v.CryptoHashConfig
	}).(GooglePrivacyDlpV2CryptoHashConfigPtrOutput)
}

// Ffx-Fpe
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) CryptoReplaceFfxFpeConfig() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig {
		return v.CryptoReplaceFfxFpeConfig
	}).(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput)
}

// Date Shift
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) DateShiftConfig() GooglePrivacyDlpV2DateShiftConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2DateShiftConfig {
		return v.DateShiftConfig
	}).(GooglePrivacyDlpV2DateShiftConfigPtrOutput)
}

// Fixed size bucketing
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) FixedSizeBucketingConfig() GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2FixedSizeBucketingConfig {
		return v.FixedSizeBucketingConfig
	}).(GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput)
}

// Redact
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) RedactConfig() GooglePrivacyDlpV2RedactConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2RedactConfig {
		return v.RedactConfig
	}).(GooglePrivacyDlpV2RedactConfigPtrOutput)
}

// Replace with a specified value.
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) ReplaceConfig() GooglePrivacyDlpV2ReplaceValueConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2ReplaceValueConfig {
		return v.ReplaceConfig
	}).(GooglePrivacyDlpV2ReplaceValueConfigPtrOutput)
}

// Replace with a value randomly drawn (with replacement) from a dictionary.
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) ReplaceDictionaryConfig() GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2ReplaceDictionaryConfig {
		return v.ReplaceDictionaryConfig
	}).(GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput)
}

// Replace with infotype
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) ReplaceWithInfoTypeConfig() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2ReplaceWithInfoTypeConfig {
		return v.ReplaceWithInfoTypeConfig
	}).(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput)
}

// Time extraction
func (o GooglePrivacyDlpV2PrimitiveTransformationOutput) TimePartConfig() GooglePrivacyDlpV2TimePartConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2TimePartConfig {
		return v.TimePartConfig
	}).(GooglePrivacyDlpV2TimePartConfigPtrOutput)
}

type GooglePrivacyDlpV2PrimitiveTransformationPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PrimitiveTransformation)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutput() GooglePrivacyDlpV2PrimitiveTransformationPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) ToGooglePrivacyDlpV2PrimitiveTransformationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrimitiveTransformationPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) Elem() GooglePrivacyDlpV2PrimitiveTransformationOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) GooglePrivacyDlpV2PrimitiveTransformation {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2PrimitiveTransformation
		return ret
	}).(GooglePrivacyDlpV2PrimitiveTransformationOutput)
}

// Bucketing
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) BucketingConfig() GooglePrivacyDlpV2BucketingConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2BucketingConfig {
		if v == nil {
			return nil
		}
		return v.BucketingConfig
	}).(GooglePrivacyDlpV2BucketingConfigPtrOutput)
}

// Mask
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) CharacterMaskConfig() GooglePrivacyDlpV2CharacterMaskConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2CharacterMaskConfig {
		if v == nil {
			return nil
		}
		return v.CharacterMaskConfig
	}).(GooglePrivacyDlpV2CharacterMaskConfigPtrOutput)
}

// Deterministic Crypto
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) CryptoDeterministicConfig() GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2CryptoDeterministicConfig {
		if v == nil {
			return nil
		}
		return v.CryptoDeterministicConfig
	}).(GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput)
}

// Crypto
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) CryptoHashConfig() GooglePrivacyDlpV2CryptoHashConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2CryptoHashConfig {
		if v == nil {
			return nil
		}
		return v.CryptoHashConfig
	}).(GooglePrivacyDlpV2CryptoHashConfigPtrOutput)
}

// Ffx-Fpe
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) CryptoReplaceFfxFpeConfig() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig {
		if v == nil {
			return nil
		}
		return v.CryptoReplaceFfxFpeConfig
	}).(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput)
}

// Date Shift
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) DateShiftConfig() GooglePrivacyDlpV2DateShiftConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2DateShiftConfig {
		if v == nil {
			return nil
		}
		return v.DateShiftConfig
	}).(GooglePrivacyDlpV2DateShiftConfigPtrOutput)
}

// Fixed size bucketing
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) FixedSizeBucketingConfig() GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2FixedSizeBucketingConfig {
		if v == nil {
			return nil
		}
		return v.FixedSizeBucketingConfig
	}).(GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput)
}

// Redact
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) RedactConfig() GooglePrivacyDlpV2RedactConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2RedactConfig {
		if v == nil {
			return nil
		}
		return v.RedactConfig
	}).(GooglePrivacyDlpV2RedactConfigPtrOutput)
}

// Replace with a specified value.
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) ReplaceConfig() GooglePrivacyDlpV2ReplaceValueConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2ReplaceValueConfig {
		if v == nil {
			return nil
		}
		return v.ReplaceConfig
	}).(GooglePrivacyDlpV2ReplaceValueConfigPtrOutput)
}

// Replace with a value randomly drawn (with replacement) from a dictionary.
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) ReplaceDictionaryConfig() GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2ReplaceDictionaryConfig {
		if v == nil {
			return nil
		}
		return v.ReplaceDictionaryConfig
	}).(GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput)
}

// Replace with infotype
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) ReplaceWithInfoTypeConfig() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2ReplaceWithInfoTypeConfig {
		if v == nil {
			return nil
		}
		return v.ReplaceWithInfoTypeConfig
	}).(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput)
}

// Time extraction
func (o GooglePrivacyDlpV2PrimitiveTransformationPtrOutput) TimePartConfig() GooglePrivacyDlpV2TimePartConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrimitiveTransformation) *GooglePrivacyDlpV2TimePartConfig {
		if v == nil {
			return nil
		}
		return v.TimePartConfig
	}).(GooglePrivacyDlpV2TimePartConfigPtrOutput)
}

// A rule for transforming a value.
type GooglePrivacyDlpV2PrimitiveTransformationResponse struct {
	// Bucketing
	BucketingConfig GooglePrivacyDlpV2BucketingConfigResponse `pulumi:"bucketingConfig"`
	// Mask
	CharacterMaskConfig GooglePrivacyDlpV2CharacterMaskConfigResponse `pulumi:"characterMaskConfig"`
	// Deterministic Crypto
	CryptoDeterministicConfig GooglePrivacyDlpV2CryptoDeterministicConfigResponse `pulumi:"cryptoDeterministicConfig"`
	// Crypto
	CryptoHashConfig GooglePrivacyDlpV2CryptoHashConfigResponse `pulumi:"cryptoHashConfig"`
	// Ffx-Fpe
	CryptoReplaceFfxFpeConfig GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponse `pulumi:"cryptoReplaceFfxFpeConfig"`
	// Date Shift
	DateShiftConfig GooglePrivacyDlpV2DateShiftConfigResponse `pulumi:"dateShiftConfig"`
	// Fixed size bucketing
	FixedSizeBucketingConfig GooglePrivacyDlpV2FixedSizeBucketingConfigResponse `pulumi:"fixedSizeBucketingConfig"`
	// Redact
	RedactConfig GooglePrivacyDlpV2RedactConfigResponse `pulumi:"redactConfig"`
	// Replace with a specified value.
	ReplaceConfig GooglePrivacyDlpV2ReplaceValueConfigResponse `pulumi:"replaceConfig"`
	// Replace with a value randomly drawn (with replacement) from a dictionary.
	ReplaceDictionaryConfig GooglePrivacyDlpV2ReplaceDictionaryConfigResponse `pulumi:"replaceDictionaryConfig"`
	// Replace with infotype
	ReplaceWithInfoTypeConfig GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponse `pulumi:"replaceWithInfoTypeConfig"`
	// Time extraction
	TimePartConfig GooglePrivacyDlpV2TimePartConfigResponse `pulumi:"timePartConfig"`
}

// A rule for transforming a value.
type GooglePrivacyDlpV2PrimitiveTransformationResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PrimitiveTransformationResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) ToGooglePrivacyDlpV2PrimitiveTransformationResponseOutput() GooglePrivacyDlpV2PrimitiveTransformationResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) ToGooglePrivacyDlpV2PrimitiveTransformationResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrimitiveTransformationResponseOutput {
	return o
}

// Bucketing
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) BucketingConfig() GooglePrivacyDlpV2BucketingConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2BucketingConfigResponse {
		return v.BucketingConfig
	}).(GooglePrivacyDlpV2BucketingConfigResponseOutput)
}

// Mask
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) CharacterMaskConfig() GooglePrivacyDlpV2CharacterMaskConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2CharacterMaskConfigResponse {
		return v.CharacterMaskConfig
	}).(GooglePrivacyDlpV2CharacterMaskConfigResponseOutput)
}

// Deterministic Crypto
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) CryptoDeterministicConfig() GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2CryptoDeterministicConfigResponse {
		return v.CryptoDeterministicConfig
	}).(GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput)
}

// Crypto
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) CryptoHashConfig() GooglePrivacyDlpV2CryptoHashConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2CryptoHashConfigResponse {
		return v.CryptoHashConfig
	}).(GooglePrivacyDlpV2CryptoHashConfigResponseOutput)
}

// Ffx-Fpe
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) CryptoReplaceFfxFpeConfig() GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponse {
		return v.CryptoReplaceFfxFpeConfig
	}).(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput)
}

// Date Shift
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) DateShiftConfig() GooglePrivacyDlpV2DateShiftConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2DateShiftConfigResponse {
		return v.DateShiftConfig
	}).(GooglePrivacyDlpV2DateShiftConfigResponseOutput)
}

// Fixed size bucketing
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) FixedSizeBucketingConfig() GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2FixedSizeBucketingConfigResponse {
		return v.FixedSizeBucketingConfig
	}).(GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput)
}

// Redact
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) RedactConfig() GooglePrivacyDlpV2RedactConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2RedactConfigResponse {
		return v.RedactConfig
	}).(GooglePrivacyDlpV2RedactConfigResponseOutput)
}

// Replace with a specified value.
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) ReplaceConfig() GooglePrivacyDlpV2ReplaceValueConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2ReplaceValueConfigResponse {
		return v.ReplaceConfig
	}).(GooglePrivacyDlpV2ReplaceValueConfigResponseOutput)
}

// Replace with a value randomly drawn (with replacement) from a dictionary.
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) ReplaceDictionaryConfig() GooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2ReplaceDictionaryConfigResponse {
		return v.ReplaceDictionaryConfig
	}).(GooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput)
}

// Replace with infotype
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) ReplaceWithInfoTypeConfig() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponse {
		return v.ReplaceWithInfoTypeConfig
	}).(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutput)
}

// Time extraction
func (o GooglePrivacyDlpV2PrimitiveTransformationResponseOutput) TimePartConfig() GooglePrivacyDlpV2TimePartConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrimitiveTransformationResponse) GooglePrivacyDlpV2TimePartConfigResponse {
		return v.TimePartConfig
	}).(GooglePrivacyDlpV2TimePartConfigResponseOutput)
}

// Privacy metric to compute for reidentification risk analysis.
type GooglePrivacyDlpV2PrivacyMetric struct {
	// Categorical stats
	CategoricalStatsConfig *GooglePrivacyDlpV2CategoricalStatsConfig `pulumi:"categoricalStatsConfig"`
	// delta-presence
	DeltaPresenceEstimationConfig *GooglePrivacyDlpV2DeltaPresenceEstimationConfig `pulumi:"deltaPresenceEstimationConfig"`
	// K-anonymity
	KAnonymityConfig *GooglePrivacyDlpV2KAnonymityConfig `pulumi:"kAnonymityConfig"`
	// k-map
	KMapEstimationConfig *GooglePrivacyDlpV2KMapEstimationConfig `pulumi:"kMapEstimationConfig"`
	// l-diversity
	LDiversityConfig *GooglePrivacyDlpV2LDiversityConfig `pulumi:"lDiversityConfig"`
	// Numerical stats
	NumericalStatsConfig *GooglePrivacyDlpV2NumericalStatsConfig `pulumi:"numericalStatsConfig"`
}

// GooglePrivacyDlpV2PrivacyMetricInput is an input type that accepts GooglePrivacyDlpV2PrivacyMetricArgs and GooglePrivacyDlpV2PrivacyMetricOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PrivacyMetricInput` via:
//
//	GooglePrivacyDlpV2PrivacyMetricArgs{...}
type GooglePrivacyDlpV2PrivacyMetricInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PrivacyMetricOutput() GooglePrivacyDlpV2PrivacyMetricOutput
	ToGooglePrivacyDlpV2PrivacyMetricOutputWithContext(context.Context) GooglePrivacyDlpV2PrivacyMetricOutput
}

// Privacy metric to compute for reidentification risk analysis.
type GooglePrivacyDlpV2PrivacyMetricArgs struct {
	// Categorical stats
	CategoricalStatsConfig GooglePrivacyDlpV2CategoricalStatsConfigPtrInput `pulumi:"categoricalStatsConfig"`
	// delta-presence
	DeltaPresenceEstimationConfig GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrInput `pulumi:"deltaPresenceEstimationConfig"`
	// K-anonymity
	KAnonymityConfig GooglePrivacyDlpV2KAnonymityConfigPtrInput `pulumi:"kAnonymityConfig"`
	// k-map
	KMapEstimationConfig GooglePrivacyDlpV2KMapEstimationConfigPtrInput `pulumi:"kMapEstimationConfig"`
	// l-diversity
	LDiversityConfig GooglePrivacyDlpV2LDiversityConfigPtrInput `pulumi:"lDiversityConfig"`
	// Numerical stats
	NumericalStatsConfig GooglePrivacyDlpV2NumericalStatsConfigPtrInput `pulumi:"numericalStatsConfig"`
}

func (GooglePrivacyDlpV2PrivacyMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PrivacyMetric)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PrivacyMetricArgs) ToGooglePrivacyDlpV2PrivacyMetricOutput() GooglePrivacyDlpV2PrivacyMetricOutput {
	return i.ToGooglePrivacyDlpV2PrivacyMetricOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PrivacyMetricArgs) ToGooglePrivacyDlpV2PrivacyMetricOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrivacyMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PrivacyMetricOutput)
}

func (i GooglePrivacyDlpV2PrivacyMetricArgs) ToGooglePrivacyDlpV2PrivacyMetricPtrOutput() GooglePrivacyDlpV2PrivacyMetricPtrOutput {
	return i.ToGooglePrivacyDlpV2PrivacyMetricPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PrivacyMetricArgs) ToGooglePrivacyDlpV2PrivacyMetricPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrivacyMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PrivacyMetricOutput).ToGooglePrivacyDlpV2PrivacyMetricPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2PrivacyMetricPtrInput is an input type that accepts GooglePrivacyDlpV2PrivacyMetricArgs, GooglePrivacyDlpV2PrivacyMetricPtr and GooglePrivacyDlpV2PrivacyMetricPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PrivacyMetricPtrInput` via:
//
//	        GooglePrivacyDlpV2PrivacyMetricArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2PrivacyMetricPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PrivacyMetricPtrOutput() GooglePrivacyDlpV2PrivacyMetricPtrOutput
	ToGooglePrivacyDlpV2PrivacyMetricPtrOutputWithContext(context.Context) GooglePrivacyDlpV2PrivacyMetricPtrOutput
}

type googlePrivacyDlpV2PrivacyMetricPtrType GooglePrivacyDlpV2PrivacyMetricArgs

func GooglePrivacyDlpV2PrivacyMetricPtr(v *GooglePrivacyDlpV2PrivacyMetricArgs) GooglePrivacyDlpV2PrivacyMetricPtrInput {
	return (*googlePrivacyDlpV2PrivacyMetricPtrType)(v)
}

func (*googlePrivacyDlpV2PrivacyMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PrivacyMetric)(nil)).Elem()
}

func (i *googlePrivacyDlpV2PrivacyMetricPtrType) ToGooglePrivacyDlpV2PrivacyMetricPtrOutput() GooglePrivacyDlpV2PrivacyMetricPtrOutput {
	return i.ToGooglePrivacyDlpV2PrivacyMetricPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2PrivacyMetricPtrType) ToGooglePrivacyDlpV2PrivacyMetricPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrivacyMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PrivacyMetricPtrOutput)
}

// Privacy metric to compute for reidentification risk analysis.
type GooglePrivacyDlpV2PrivacyMetricOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PrivacyMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PrivacyMetric)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PrivacyMetricOutput) ToGooglePrivacyDlpV2PrivacyMetricOutput() GooglePrivacyDlpV2PrivacyMetricOutput {
	return o
}

func (o GooglePrivacyDlpV2PrivacyMetricOutput) ToGooglePrivacyDlpV2PrivacyMetricOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrivacyMetricOutput {
	return o
}

func (o GooglePrivacyDlpV2PrivacyMetricOutput) ToGooglePrivacyDlpV2PrivacyMetricPtrOutput() GooglePrivacyDlpV2PrivacyMetricPtrOutput {
	return o.ToGooglePrivacyDlpV2PrivacyMetricPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2PrivacyMetricOutput) ToGooglePrivacyDlpV2PrivacyMetricPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrivacyMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2PrivacyMetric {
		return &v
	}).(GooglePrivacyDlpV2PrivacyMetricPtrOutput)
}

// Categorical stats
func (o GooglePrivacyDlpV2PrivacyMetricOutput) CategoricalStatsConfig() GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2CategoricalStatsConfig {
		return v.CategoricalStatsConfig
	}).(GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput)
}

// delta-presence
func (o GooglePrivacyDlpV2PrivacyMetricOutput) DeltaPresenceEstimationConfig() GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2DeltaPresenceEstimationConfig {
		return v.DeltaPresenceEstimationConfig
	}).(GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput)
}

// K-anonymity
func (o GooglePrivacyDlpV2PrivacyMetricOutput) KAnonymityConfig() GooglePrivacyDlpV2KAnonymityConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2KAnonymityConfig { return v.KAnonymityConfig }).(GooglePrivacyDlpV2KAnonymityConfigPtrOutput)
}

// k-map
func (o GooglePrivacyDlpV2PrivacyMetricOutput) KMapEstimationConfig() GooglePrivacyDlpV2KMapEstimationConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2KMapEstimationConfig {
		return v.KMapEstimationConfig
	}).(GooglePrivacyDlpV2KMapEstimationConfigPtrOutput)
}

// l-diversity
func (o GooglePrivacyDlpV2PrivacyMetricOutput) LDiversityConfig() GooglePrivacyDlpV2LDiversityConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2LDiversityConfig { return v.LDiversityConfig }).(GooglePrivacyDlpV2LDiversityConfigPtrOutput)
}

// Numerical stats
func (o GooglePrivacyDlpV2PrivacyMetricOutput) NumericalStatsConfig() GooglePrivacyDlpV2NumericalStatsConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2NumericalStatsConfig {
		return v.NumericalStatsConfig
	}).(GooglePrivacyDlpV2NumericalStatsConfigPtrOutput)
}

type GooglePrivacyDlpV2PrivacyMetricPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PrivacyMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PrivacyMetric)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PrivacyMetricPtrOutput) ToGooglePrivacyDlpV2PrivacyMetricPtrOutput() GooglePrivacyDlpV2PrivacyMetricPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PrivacyMetricPtrOutput) ToGooglePrivacyDlpV2PrivacyMetricPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrivacyMetricPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PrivacyMetricPtrOutput) Elem() GooglePrivacyDlpV2PrivacyMetricOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrivacyMetric) GooglePrivacyDlpV2PrivacyMetric {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2PrivacyMetric
		return ret
	}).(GooglePrivacyDlpV2PrivacyMetricOutput)
}

// Categorical stats
func (o GooglePrivacyDlpV2PrivacyMetricPtrOutput) CategoricalStatsConfig() GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2CategoricalStatsConfig {
		if v == nil {
			return nil
		}
		return v.CategoricalStatsConfig
	}).(GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput)
}

// delta-presence
func (o GooglePrivacyDlpV2PrivacyMetricPtrOutput) DeltaPresenceEstimationConfig() GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2DeltaPresenceEstimationConfig {
		if v == nil {
			return nil
		}
		return v.DeltaPresenceEstimationConfig
	}).(GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput)
}

// K-anonymity
func (o GooglePrivacyDlpV2PrivacyMetricPtrOutput) KAnonymityConfig() GooglePrivacyDlpV2KAnonymityConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2KAnonymityConfig {
		if v == nil {
			return nil
		}
		return v.KAnonymityConfig
	}).(GooglePrivacyDlpV2KAnonymityConfigPtrOutput)
}

// k-map
func (o GooglePrivacyDlpV2PrivacyMetricPtrOutput) KMapEstimationConfig() GooglePrivacyDlpV2KMapEstimationConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2KMapEstimationConfig {
		if v == nil {
			return nil
		}
		return v.KMapEstimationConfig
	}).(GooglePrivacyDlpV2KMapEstimationConfigPtrOutput)
}

// l-diversity
func (o GooglePrivacyDlpV2PrivacyMetricPtrOutput) LDiversityConfig() GooglePrivacyDlpV2LDiversityConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2LDiversityConfig {
		if v == nil {
			return nil
		}
		return v.LDiversityConfig
	}).(GooglePrivacyDlpV2LDiversityConfigPtrOutput)
}

// Numerical stats
func (o GooglePrivacyDlpV2PrivacyMetricPtrOutput) NumericalStatsConfig() GooglePrivacyDlpV2NumericalStatsConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PrivacyMetric) *GooglePrivacyDlpV2NumericalStatsConfig {
		if v == nil {
			return nil
		}
		return v.NumericalStatsConfig
	}).(GooglePrivacyDlpV2NumericalStatsConfigPtrOutput)
}

// Privacy metric to compute for reidentification risk analysis.
type GooglePrivacyDlpV2PrivacyMetricResponse struct {
	// Categorical stats
	CategoricalStatsConfig GooglePrivacyDlpV2CategoricalStatsConfigResponse `pulumi:"categoricalStatsConfig"`
	// delta-presence
	DeltaPresenceEstimationConfig GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponse `pulumi:"deltaPresenceEstimationConfig"`
	// K-anonymity
	KAnonymityConfig GooglePrivacyDlpV2KAnonymityConfigResponse `pulumi:"kAnonymityConfig"`
	// k-map
	KMapEstimationConfig GooglePrivacyDlpV2KMapEstimationConfigResponse `pulumi:"kMapEstimationConfig"`
	// l-diversity
	LDiversityConfig GooglePrivacyDlpV2LDiversityConfigResponse `pulumi:"lDiversityConfig"`
	// Numerical stats
	NumericalStatsConfig GooglePrivacyDlpV2NumericalStatsConfigResponse `pulumi:"numericalStatsConfig"`
}

// Privacy metric to compute for reidentification risk analysis.
type GooglePrivacyDlpV2PrivacyMetricResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PrivacyMetricResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PrivacyMetricResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PrivacyMetricResponseOutput) ToGooglePrivacyDlpV2PrivacyMetricResponseOutput() GooglePrivacyDlpV2PrivacyMetricResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2PrivacyMetricResponseOutput) ToGooglePrivacyDlpV2PrivacyMetricResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PrivacyMetricResponseOutput {
	return o
}

// Categorical stats
func (o GooglePrivacyDlpV2PrivacyMetricResponseOutput) CategoricalStatsConfig() GooglePrivacyDlpV2CategoricalStatsConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetricResponse) GooglePrivacyDlpV2CategoricalStatsConfigResponse {
		return v.CategoricalStatsConfig
	}).(GooglePrivacyDlpV2CategoricalStatsConfigResponseOutput)
}

// delta-presence
func (o GooglePrivacyDlpV2PrivacyMetricResponseOutput) DeltaPresenceEstimationConfig() GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetricResponse) GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponse {
		return v.DeltaPresenceEstimationConfig
	}).(GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput)
}

// K-anonymity
func (o GooglePrivacyDlpV2PrivacyMetricResponseOutput) KAnonymityConfig() GooglePrivacyDlpV2KAnonymityConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetricResponse) GooglePrivacyDlpV2KAnonymityConfigResponse {
		return v.KAnonymityConfig
	}).(GooglePrivacyDlpV2KAnonymityConfigResponseOutput)
}

// k-map
func (o GooglePrivacyDlpV2PrivacyMetricResponseOutput) KMapEstimationConfig() GooglePrivacyDlpV2KMapEstimationConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetricResponse) GooglePrivacyDlpV2KMapEstimationConfigResponse {
		return v.KMapEstimationConfig
	}).(GooglePrivacyDlpV2KMapEstimationConfigResponseOutput)
}

// l-diversity
func (o GooglePrivacyDlpV2PrivacyMetricResponseOutput) LDiversityConfig() GooglePrivacyDlpV2LDiversityConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetricResponse) GooglePrivacyDlpV2LDiversityConfigResponse {
		return v.LDiversityConfig
	}).(GooglePrivacyDlpV2LDiversityConfigResponseOutput)
}

// Numerical stats
func (o GooglePrivacyDlpV2PrivacyMetricResponseOutput) NumericalStatsConfig() GooglePrivacyDlpV2NumericalStatsConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PrivacyMetricResponse) GooglePrivacyDlpV2NumericalStatsConfigResponse {
		return v.NumericalStatsConfig
	}).(GooglePrivacyDlpV2NumericalStatsConfigResponseOutput)
}

// Message for specifying a window around a finding to apply a detection rule.
type GooglePrivacyDlpV2Proximity struct {
	// Number of characters after the finding to consider.
	WindowAfter *int `pulumi:"windowAfter"`
	// Number of characters before the finding to consider. For tabular data, if you want to modify the likelihood of an entire column of findngs, set this to 1. For more information, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
	WindowBefore *int `pulumi:"windowBefore"`
}

// GooglePrivacyDlpV2ProximityInput is an input type that accepts GooglePrivacyDlpV2ProximityArgs and GooglePrivacyDlpV2ProximityOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ProximityInput` via:
//
//	GooglePrivacyDlpV2ProximityArgs{...}
type GooglePrivacyDlpV2ProximityInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ProximityOutput() GooglePrivacyDlpV2ProximityOutput
	ToGooglePrivacyDlpV2ProximityOutputWithContext(context.Context) GooglePrivacyDlpV2ProximityOutput
}

// Message for specifying a window around a finding to apply a detection rule.
type GooglePrivacyDlpV2ProximityArgs struct {
	// Number of characters after the finding to consider.
	WindowAfter pulumi.IntPtrInput `pulumi:"windowAfter"`
	// Number of characters before the finding to consider. For tabular data, if you want to modify the likelihood of an entire column of findngs, set this to 1. For more information, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
	WindowBefore pulumi.IntPtrInput `pulumi:"windowBefore"`
}

func (GooglePrivacyDlpV2ProximityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Proximity)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ProximityArgs) ToGooglePrivacyDlpV2ProximityOutput() GooglePrivacyDlpV2ProximityOutput {
	return i.ToGooglePrivacyDlpV2ProximityOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ProximityArgs) ToGooglePrivacyDlpV2ProximityOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ProximityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ProximityOutput)
}

func (i GooglePrivacyDlpV2ProximityArgs) ToGooglePrivacyDlpV2ProximityPtrOutput() GooglePrivacyDlpV2ProximityPtrOutput {
	return i.ToGooglePrivacyDlpV2ProximityPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ProximityArgs) ToGooglePrivacyDlpV2ProximityPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ProximityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ProximityOutput).ToGooglePrivacyDlpV2ProximityPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ProximityPtrInput is an input type that accepts GooglePrivacyDlpV2ProximityArgs, GooglePrivacyDlpV2ProximityPtr and GooglePrivacyDlpV2ProximityPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ProximityPtrInput` via:
//
//	        GooglePrivacyDlpV2ProximityArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ProximityPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ProximityPtrOutput() GooglePrivacyDlpV2ProximityPtrOutput
	ToGooglePrivacyDlpV2ProximityPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ProximityPtrOutput
}

type googlePrivacyDlpV2ProximityPtrType GooglePrivacyDlpV2ProximityArgs

func GooglePrivacyDlpV2ProximityPtr(v *GooglePrivacyDlpV2ProximityArgs) GooglePrivacyDlpV2ProximityPtrInput {
	return (*googlePrivacyDlpV2ProximityPtrType)(v)
}

func (*googlePrivacyDlpV2ProximityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Proximity)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ProximityPtrType) ToGooglePrivacyDlpV2ProximityPtrOutput() GooglePrivacyDlpV2ProximityPtrOutput {
	return i.ToGooglePrivacyDlpV2ProximityPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ProximityPtrType) ToGooglePrivacyDlpV2ProximityPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ProximityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ProximityPtrOutput)
}

// Message for specifying a window around a finding to apply a detection rule.
type GooglePrivacyDlpV2ProximityOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ProximityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Proximity)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ProximityOutput) ToGooglePrivacyDlpV2ProximityOutput() GooglePrivacyDlpV2ProximityOutput {
	return o
}

func (o GooglePrivacyDlpV2ProximityOutput) ToGooglePrivacyDlpV2ProximityOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ProximityOutput {
	return o
}

func (o GooglePrivacyDlpV2ProximityOutput) ToGooglePrivacyDlpV2ProximityPtrOutput() GooglePrivacyDlpV2ProximityPtrOutput {
	return o.ToGooglePrivacyDlpV2ProximityPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ProximityOutput) ToGooglePrivacyDlpV2ProximityPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ProximityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Proximity) *GooglePrivacyDlpV2Proximity {
		return &v
	}).(GooglePrivacyDlpV2ProximityPtrOutput)
}

// Number of characters after the finding to consider.
func (o GooglePrivacyDlpV2ProximityOutput) WindowAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Proximity) *int { return v.WindowAfter }).(pulumi.IntPtrOutput)
}

// Number of characters before the finding to consider. For tabular data, if you want to modify the likelihood of an entire column of findngs, set this to 1. For more information, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
func (o GooglePrivacyDlpV2ProximityOutput) WindowBefore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Proximity) *int { return v.WindowBefore }).(pulumi.IntPtrOutput)
}

type GooglePrivacyDlpV2ProximityPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ProximityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Proximity)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ProximityPtrOutput) ToGooglePrivacyDlpV2ProximityPtrOutput() GooglePrivacyDlpV2ProximityPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ProximityPtrOutput) ToGooglePrivacyDlpV2ProximityPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ProximityPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ProximityPtrOutput) Elem() GooglePrivacyDlpV2ProximityOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Proximity) GooglePrivacyDlpV2Proximity {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Proximity
		return ret
	}).(GooglePrivacyDlpV2ProximityOutput)
}

// Number of characters after the finding to consider.
func (o GooglePrivacyDlpV2ProximityPtrOutput) WindowAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Proximity) *int {
		if v == nil {
			return nil
		}
		return v.WindowAfter
	}).(pulumi.IntPtrOutput)
}

// Number of characters before the finding to consider. For tabular data, if you want to modify the likelihood of an entire column of findngs, set this to 1. For more information, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
func (o GooglePrivacyDlpV2ProximityPtrOutput) WindowBefore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Proximity) *int {
		if v == nil {
			return nil
		}
		return v.WindowBefore
	}).(pulumi.IntPtrOutput)
}

// Message for specifying a window around a finding to apply a detection rule.
type GooglePrivacyDlpV2ProximityResponse struct {
	// Number of characters after the finding to consider.
	WindowAfter int `pulumi:"windowAfter"`
	// Number of characters before the finding to consider. For tabular data, if you want to modify the likelihood of an entire column of findngs, set this to 1. For more information, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
	WindowBefore int `pulumi:"windowBefore"`
}

// Message for specifying a window around a finding to apply a detection rule.
type GooglePrivacyDlpV2ProximityResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ProximityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ProximityResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ProximityResponseOutput) ToGooglePrivacyDlpV2ProximityResponseOutput() GooglePrivacyDlpV2ProximityResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ProximityResponseOutput) ToGooglePrivacyDlpV2ProximityResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ProximityResponseOutput {
	return o
}

// Number of characters after the finding to consider.
func (o GooglePrivacyDlpV2ProximityResponseOutput) WindowAfter() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ProximityResponse) int { return v.WindowAfter }).(pulumi.IntOutput)
}

// Number of characters before the finding to consider. For tabular data, if you want to modify the likelihood of an entire column of findngs, set this to 1. For more information, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
func (o GooglePrivacyDlpV2ProximityResponseOutput) WindowBefore() pulumi.IntOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ProximityResponse) int { return v.WindowBefore }).(pulumi.IntOutput)
}

// A condition consisting of a value.
type GooglePrivacyDlpV2PubSubCondition struct {
	// The minimum data risk score that triggers the condition.
	MinimumRiskScore *GooglePrivacyDlpV2PubSubConditionMinimumRiskScore `pulumi:"minimumRiskScore"`
	// The minimum sensitivity level that triggers the condition.
	MinimumSensitivityScore *GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore `pulumi:"minimumSensitivityScore"`
}

// GooglePrivacyDlpV2PubSubConditionInput is an input type that accepts GooglePrivacyDlpV2PubSubConditionArgs and GooglePrivacyDlpV2PubSubConditionOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PubSubConditionInput` via:
//
//	GooglePrivacyDlpV2PubSubConditionArgs{...}
type GooglePrivacyDlpV2PubSubConditionInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PubSubConditionOutput() GooglePrivacyDlpV2PubSubConditionOutput
	ToGooglePrivacyDlpV2PubSubConditionOutputWithContext(context.Context) GooglePrivacyDlpV2PubSubConditionOutput
}

// A condition consisting of a value.
type GooglePrivacyDlpV2PubSubConditionArgs struct {
	// The minimum data risk score that triggers the condition.
	MinimumRiskScore GooglePrivacyDlpV2PubSubConditionMinimumRiskScorePtrInput `pulumi:"minimumRiskScore"`
	// The minimum sensitivity level that triggers the condition.
	MinimumSensitivityScore GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScorePtrInput `pulumi:"minimumSensitivityScore"`
}

func (GooglePrivacyDlpV2PubSubConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PubSubCondition)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PubSubConditionArgs) ToGooglePrivacyDlpV2PubSubConditionOutput() GooglePrivacyDlpV2PubSubConditionOutput {
	return i.ToGooglePrivacyDlpV2PubSubConditionOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PubSubConditionArgs) ToGooglePrivacyDlpV2PubSubConditionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PubSubConditionOutput)
}

// GooglePrivacyDlpV2PubSubConditionArrayInput is an input type that accepts GooglePrivacyDlpV2PubSubConditionArray and GooglePrivacyDlpV2PubSubConditionArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PubSubConditionArrayInput` via:
//
//	GooglePrivacyDlpV2PubSubConditionArray{ GooglePrivacyDlpV2PubSubConditionArgs{...} }
type GooglePrivacyDlpV2PubSubConditionArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PubSubConditionArrayOutput() GooglePrivacyDlpV2PubSubConditionArrayOutput
	ToGooglePrivacyDlpV2PubSubConditionArrayOutputWithContext(context.Context) GooglePrivacyDlpV2PubSubConditionArrayOutput
}

type GooglePrivacyDlpV2PubSubConditionArray []GooglePrivacyDlpV2PubSubConditionInput

func (GooglePrivacyDlpV2PubSubConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2PubSubCondition)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PubSubConditionArray) ToGooglePrivacyDlpV2PubSubConditionArrayOutput() GooglePrivacyDlpV2PubSubConditionArrayOutput {
	return i.ToGooglePrivacyDlpV2PubSubConditionArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PubSubConditionArray) ToGooglePrivacyDlpV2PubSubConditionArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PubSubConditionArrayOutput)
}

// A condition consisting of a value.
type GooglePrivacyDlpV2PubSubConditionOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PubSubConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PubSubCondition)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PubSubConditionOutput) ToGooglePrivacyDlpV2PubSubConditionOutput() GooglePrivacyDlpV2PubSubConditionOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubConditionOutput) ToGooglePrivacyDlpV2PubSubConditionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubConditionOutput {
	return o
}

// The minimum data risk score that triggers the condition.
func (o GooglePrivacyDlpV2PubSubConditionOutput) MinimumRiskScore() GooglePrivacyDlpV2PubSubConditionMinimumRiskScorePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubCondition) *GooglePrivacyDlpV2PubSubConditionMinimumRiskScore {
		return v.MinimumRiskScore
	}).(GooglePrivacyDlpV2PubSubConditionMinimumRiskScorePtrOutput)
}

// The minimum sensitivity level that triggers the condition.
func (o GooglePrivacyDlpV2PubSubConditionOutput) MinimumSensitivityScore() GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScorePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubCondition) *GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScore {
		return v.MinimumSensitivityScore
	}).(GooglePrivacyDlpV2PubSubConditionMinimumSensitivityScorePtrOutput)
}

type GooglePrivacyDlpV2PubSubConditionArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PubSubConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2PubSubCondition)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PubSubConditionArrayOutput) ToGooglePrivacyDlpV2PubSubConditionArrayOutput() GooglePrivacyDlpV2PubSubConditionArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubConditionArrayOutput) ToGooglePrivacyDlpV2PubSubConditionArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubConditionArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubConditionArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2PubSubConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2PubSubCondition {
		return vs[0].([]GooglePrivacyDlpV2PubSubCondition)[vs[1].(int)]
	}).(GooglePrivacyDlpV2PubSubConditionOutput)
}

// A condition consisting of a value.
type GooglePrivacyDlpV2PubSubConditionResponse struct {
	// The minimum data risk score that triggers the condition.
	MinimumRiskScore string `pulumi:"minimumRiskScore"`
	// The minimum sensitivity level that triggers the condition.
	MinimumSensitivityScore string `pulumi:"minimumSensitivityScore"`
}

// A condition consisting of a value.
type GooglePrivacyDlpV2PubSubConditionResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PubSubConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PubSubConditionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PubSubConditionResponseOutput) ToGooglePrivacyDlpV2PubSubConditionResponseOutput() GooglePrivacyDlpV2PubSubConditionResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubConditionResponseOutput) ToGooglePrivacyDlpV2PubSubConditionResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubConditionResponseOutput {
	return o
}

// The minimum data risk score that triggers the condition.
func (o GooglePrivacyDlpV2PubSubConditionResponseOutput) MinimumRiskScore() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubConditionResponse) string { return v.MinimumRiskScore }).(pulumi.StringOutput)
}

// The minimum sensitivity level that triggers the condition.
func (o GooglePrivacyDlpV2PubSubConditionResponseOutput) MinimumSensitivityScore() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubConditionResponse) string { return v.MinimumSensitivityScore }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2PubSubConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PubSubConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2PubSubConditionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PubSubConditionResponseArrayOutput) ToGooglePrivacyDlpV2PubSubConditionResponseArrayOutput() GooglePrivacyDlpV2PubSubConditionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubConditionResponseArrayOutput) ToGooglePrivacyDlpV2PubSubConditionResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubConditionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubConditionResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2PubSubConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2PubSubConditionResponse {
		return vs[0].([]GooglePrivacyDlpV2PubSubConditionResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2PubSubConditionResponseOutput)
}

// An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2PubSubExpressions struct {
	// Conditions to apply to the expression.
	Conditions []GooglePrivacyDlpV2PubSubCondition `pulumi:"conditions"`
	// The operator to apply to the collection of conditions.
	LogicalOperator *GooglePrivacyDlpV2PubSubExpressionsLogicalOperator `pulumi:"logicalOperator"`
}

// GooglePrivacyDlpV2PubSubExpressionsInput is an input type that accepts GooglePrivacyDlpV2PubSubExpressionsArgs and GooglePrivacyDlpV2PubSubExpressionsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PubSubExpressionsInput` via:
//
//	GooglePrivacyDlpV2PubSubExpressionsArgs{...}
type GooglePrivacyDlpV2PubSubExpressionsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PubSubExpressionsOutput() GooglePrivacyDlpV2PubSubExpressionsOutput
	ToGooglePrivacyDlpV2PubSubExpressionsOutputWithContext(context.Context) GooglePrivacyDlpV2PubSubExpressionsOutput
}

// An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2PubSubExpressionsArgs struct {
	// Conditions to apply to the expression.
	Conditions GooglePrivacyDlpV2PubSubConditionArrayInput `pulumi:"conditions"`
	// The operator to apply to the collection of conditions.
	LogicalOperator GooglePrivacyDlpV2PubSubExpressionsLogicalOperatorPtrInput `pulumi:"logicalOperator"`
}

func (GooglePrivacyDlpV2PubSubExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PubSubExpressions)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PubSubExpressionsArgs) ToGooglePrivacyDlpV2PubSubExpressionsOutput() GooglePrivacyDlpV2PubSubExpressionsOutput {
	return i.ToGooglePrivacyDlpV2PubSubExpressionsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PubSubExpressionsArgs) ToGooglePrivacyDlpV2PubSubExpressionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PubSubExpressionsOutput)
}

func (i GooglePrivacyDlpV2PubSubExpressionsArgs) ToGooglePrivacyDlpV2PubSubExpressionsPtrOutput() GooglePrivacyDlpV2PubSubExpressionsPtrOutput {
	return i.ToGooglePrivacyDlpV2PubSubExpressionsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PubSubExpressionsArgs) ToGooglePrivacyDlpV2PubSubExpressionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubExpressionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PubSubExpressionsOutput).ToGooglePrivacyDlpV2PubSubExpressionsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2PubSubExpressionsPtrInput is an input type that accepts GooglePrivacyDlpV2PubSubExpressionsArgs, GooglePrivacyDlpV2PubSubExpressionsPtr and GooglePrivacyDlpV2PubSubExpressionsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PubSubExpressionsPtrInput` via:
//
//	        GooglePrivacyDlpV2PubSubExpressionsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2PubSubExpressionsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PubSubExpressionsPtrOutput() GooglePrivacyDlpV2PubSubExpressionsPtrOutput
	ToGooglePrivacyDlpV2PubSubExpressionsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2PubSubExpressionsPtrOutput
}

type googlePrivacyDlpV2PubSubExpressionsPtrType GooglePrivacyDlpV2PubSubExpressionsArgs

func GooglePrivacyDlpV2PubSubExpressionsPtr(v *GooglePrivacyDlpV2PubSubExpressionsArgs) GooglePrivacyDlpV2PubSubExpressionsPtrInput {
	return (*googlePrivacyDlpV2PubSubExpressionsPtrType)(v)
}

func (*googlePrivacyDlpV2PubSubExpressionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PubSubExpressions)(nil)).Elem()
}

func (i *googlePrivacyDlpV2PubSubExpressionsPtrType) ToGooglePrivacyDlpV2PubSubExpressionsPtrOutput() GooglePrivacyDlpV2PubSubExpressionsPtrOutput {
	return i.ToGooglePrivacyDlpV2PubSubExpressionsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2PubSubExpressionsPtrType) ToGooglePrivacyDlpV2PubSubExpressionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubExpressionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PubSubExpressionsPtrOutput)
}

// An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2PubSubExpressionsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PubSubExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PubSubExpressions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PubSubExpressionsOutput) ToGooglePrivacyDlpV2PubSubExpressionsOutput() GooglePrivacyDlpV2PubSubExpressionsOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubExpressionsOutput) ToGooglePrivacyDlpV2PubSubExpressionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubExpressionsOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubExpressionsOutput) ToGooglePrivacyDlpV2PubSubExpressionsPtrOutput() GooglePrivacyDlpV2PubSubExpressionsPtrOutput {
	return o.ToGooglePrivacyDlpV2PubSubExpressionsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2PubSubExpressionsOutput) ToGooglePrivacyDlpV2PubSubExpressionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubExpressionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2PubSubExpressions) *GooglePrivacyDlpV2PubSubExpressions {
		return &v
	}).(GooglePrivacyDlpV2PubSubExpressionsPtrOutput)
}

// Conditions to apply to the expression.
func (o GooglePrivacyDlpV2PubSubExpressionsOutput) Conditions() GooglePrivacyDlpV2PubSubConditionArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubExpressions) []GooglePrivacyDlpV2PubSubCondition { return v.Conditions }).(GooglePrivacyDlpV2PubSubConditionArrayOutput)
}

// The operator to apply to the collection of conditions.
func (o GooglePrivacyDlpV2PubSubExpressionsOutput) LogicalOperator() GooglePrivacyDlpV2PubSubExpressionsLogicalOperatorPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubExpressions) *GooglePrivacyDlpV2PubSubExpressionsLogicalOperator {
		return v.LogicalOperator
	}).(GooglePrivacyDlpV2PubSubExpressionsLogicalOperatorPtrOutput)
}

type GooglePrivacyDlpV2PubSubExpressionsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PubSubExpressionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PubSubExpressions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PubSubExpressionsPtrOutput) ToGooglePrivacyDlpV2PubSubExpressionsPtrOutput() GooglePrivacyDlpV2PubSubExpressionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubExpressionsPtrOutput) ToGooglePrivacyDlpV2PubSubExpressionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubExpressionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubExpressionsPtrOutput) Elem() GooglePrivacyDlpV2PubSubExpressionsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PubSubExpressions) GooglePrivacyDlpV2PubSubExpressions {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2PubSubExpressions
		return ret
	}).(GooglePrivacyDlpV2PubSubExpressionsOutput)
}

// Conditions to apply to the expression.
func (o GooglePrivacyDlpV2PubSubExpressionsPtrOutput) Conditions() GooglePrivacyDlpV2PubSubConditionArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PubSubExpressions) []GooglePrivacyDlpV2PubSubCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GooglePrivacyDlpV2PubSubConditionArrayOutput)
}

// The operator to apply to the collection of conditions.
func (o GooglePrivacyDlpV2PubSubExpressionsPtrOutput) LogicalOperator() GooglePrivacyDlpV2PubSubExpressionsLogicalOperatorPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PubSubExpressions) *GooglePrivacyDlpV2PubSubExpressionsLogicalOperator {
		if v == nil {
			return nil
		}
		return v.LogicalOperator
	}).(GooglePrivacyDlpV2PubSubExpressionsLogicalOperatorPtrOutput)
}

// An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2PubSubExpressionsResponse struct {
	// Conditions to apply to the expression.
	Conditions []GooglePrivacyDlpV2PubSubConditionResponse `pulumi:"conditions"`
	// The operator to apply to the collection of conditions.
	LogicalOperator string `pulumi:"logicalOperator"`
}

// An expression, consisting of an operator and conditions.
type GooglePrivacyDlpV2PubSubExpressionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PubSubExpressionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PubSubExpressionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PubSubExpressionsResponseOutput) ToGooglePrivacyDlpV2PubSubExpressionsResponseOutput() GooglePrivacyDlpV2PubSubExpressionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubExpressionsResponseOutput) ToGooglePrivacyDlpV2PubSubExpressionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubExpressionsResponseOutput {
	return o
}

// Conditions to apply to the expression.
func (o GooglePrivacyDlpV2PubSubExpressionsResponseOutput) Conditions() GooglePrivacyDlpV2PubSubConditionResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubExpressionsResponse) []GooglePrivacyDlpV2PubSubConditionResponse {
		return v.Conditions
	}).(GooglePrivacyDlpV2PubSubConditionResponseArrayOutput)
}

// The operator to apply to the collection of conditions.
func (o GooglePrivacyDlpV2PubSubExpressionsResponseOutput) LogicalOperator() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubExpressionsResponse) string { return v.LogicalOperator }).(pulumi.StringOutput)
}

// Send a Pub/Sub message into the given Pub/Sub topic to connect other systems to data profile generation. The message payload data will be the byte serialization of `DataProfilePubSubMessage`.
type GooglePrivacyDlpV2PubSubNotification struct {
	// How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
	DetailOfMessage *GooglePrivacyDlpV2PubSubNotificationDetailOfMessage `pulumi:"detailOfMessage"`
	// The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.
	Event *GooglePrivacyDlpV2PubSubNotificationEvent `pulumi:"event"`
	// Conditions (e.g., data risk or sensitivity level) for triggering a Pub/Sub.
	PubsubCondition *GooglePrivacyDlpV2DataProfilePubSubCondition `pulumi:"pubsubCondition"`
	// Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.
	Topic *string `pulumi:"topic"`
}

// GooglePrivacyDlpV2PubSubNotificationInput is an input type that accepts GooglePrivacyDlpV2PubSubNotificationArgs and GooglePrivacyDlpV2PubSubNotificationOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PubSubNotificationInput` via:
//
//	GooglePrivacyDlpV2PubSubNotificationArgs{...}
type GooglePrivacyDlpV2PubSubNotificationInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PubSubNotificationOutput() GooglePrivacyDlpV2PubSubNotificationOutput
	ToGooglePrivacyDlpV2PubSubNotificationOutputWithContext(context.Context) GooglePrivacyDlpV2PubSubNotificationOutput
}

// Send a Pub/Sub message into the given Pub/Sub topic to connect other systems to data profile generation. The message payload data will be the byte serialization of `DataProfilePubSubMessage`.
type GooglePrivacyDlpV2PubSubNotificationArgs struct {
	// How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
	DetailOfMessage GooglePrivacyDlpV2PubSubNotificationDetailOfMessagePtrInput `pulumi:"detailOfMessage"`
	// The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.
	Event GooglePrivacyDlpV2PubSubNotificationEventPtrInput `pulumi:"event"`
	// Conditions (e.g., data risk or sensitivity level) for triggering a Pub/Sub.
	PubsubCondition GooglePrivacyDlpV2DataProfilePubSubConditionPtrInput `pulumi:"pubsubCondition"`
	// Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (GooglePrivacyDlpV2PubSubNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PubSubNotification)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PubSubNotificationArgs) ToGooglePrivacyDlpV2PubSubNotificationOutput() GooglePrivacyDlpV2PubSubNotificationOutput {
	return i.ToGooglePrivacyDlpV2PubSubNotificationOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PubSubNotificationArgs) ToGooglePrivacyDlpV2PubSubNotificationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PubSubNotificationOutput)
}

func (i GooglePrivacyDlpV2PubSubNotificationArgs) ToGooglePrivacyDlpV2PubSubNotificationPtrOutput() GooglePrivacyDlpV2PubSubNotificationPtrOutput {
	return i.ToGooglePrivacyDlpV2PubSubNotificationPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PubSubNotificationArgs) ToGooglePrivacyDlpV2PubSubNotificationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PubSubNotificationOutput).ToGooglePrivacyDlpV2PubSubNotificationPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2PubSubNotificationPtrInput is an input type that accepts GooglePrivacyDlpV2PubSubNotificationArgs, GooglePrivacyDlpV2PubSubNotificationPtr and GooglePrivacyDlpV2PubSubNotificationPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PubSubNotificationPtrInput` via:
//
//	        GooglePrivacyDlpV2PubSubNotificationArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2PubSubNotificationPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PubSubNotificationPtrOutput() GooglePrivacyDlpV2PubSubNotificationPtrOutput
	ToGooglePrivacyDlpV2PubSubNotificationPtrOutputWithContext(context.Context) GooglePrivacyDlpV2PubSubNotificationPtrOutput
}

type googlePrivacyDlpV2PubSubNotificationPtrType GooglePrivacyDlpV2PubSubNotificationArgs

func GooglePrivacyDlpV2PubSubNotificationPtr(v *GooglePrivacyDlpV2PubSubNotificationArgs) GooglePrivacyDlpV2PubSubNotificationPtrInput {
	return (*googlePrivacyDlpV2PubSubNotificationPtrType)(v)
}

func (*googlePrivacyDlpV2PubSubNotificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PubSubNotification)(nil)).Elem()
}

func (i *googlePrivacyDlpV2PubSubNotificationPtrType) ToGooglePrivacyDlpV2PubSubNotificationPtrOutput() GooglePrivacyDlpV2PubSubNotificationPtrOutput {
	return i.ToGooglePrivacyDlpV2PubSubNotificationPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2PubSubNotificationPtrType) ToGooglePrivacyDlpV2PubSubNotificationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PubSubNotificationPtrOutput)
}

// Send a Pub/Sub message into the given Pub/Sub topic to connect other systems to data profile generation. The message payload data will be the byte serialization of `DataProfilePubSubMessage`.
type GooglePrivacyDlpV2PubSubNotificationOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PubSubNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PubSubNotification)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PubSubNotificationOutput) ToGooglePrivacyDlpV2PubSubNotificationOutput() GooglePrivacyDlpV2PubSubNotificationOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubNotificationOutput) ToGooglePrivacyDlpV2PubSubNotificationOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubNotificationOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubNotificationOutput) ToGooglePrivacyDlpV2PubSubNotificationPtrOutput() GooglePrivacyDlpV2PubSubNotificationPtrOutput {
	return o.ToGooglePrivacyDlpV2PubSubNotificationPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2PubSubNotificationOutput) ToGooglePrivacyDlpV2PubSubNotificationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubNotificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2PubSubNotification) *GooglePrivacyDlpV2PubSubNotification {
		return &v
	}).(GooglePrivacyDlpV2PubSubNotificationPtrOutput)
}

// How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
func (o GooglePrivacyDlpV2PubSubNotificationOutput) DetailOfMessage() GooglePrivacyDlpV2PubSubNotificationDetailOfMessagePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubNotification) *GooglePrivacyDlpV2PubSubNotificationDetailOfMessage {
		return v.DetailOfMessage
	}).(GooglePrivacyDlpV2PubSubNotificationDetailOfMessagePtrOutput)
}

// The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.
func (o GooglePrivacyDlpV2PubSubNotificationOutput) Event() GooglePrivacyDlpV2PubSubNotificationEventPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubNotification) *GooglePrivacyDlpV2PubSubNotificationEvent {
		return v.Event
	}).(GooglePrivacyDlpV2PubSubNotificationEventPtrOutput)
}

// Conditions (e.g., data risk or sensitivity level) for triggering a Pub/Sub.
func (o GooglePrivacyDlpV2PubSubNotificationOutput) PubsubCondition() GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubNotification) *GooglePrivacyDlpV2DataProfilePubSubCondition {
		return v.PubsubCondition
	}).(GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput)
}

// Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.
func (o GooglePrivacyDlpV2PubSubNotificationOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubNotification) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2PubSubNotificationPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PubSubNotificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PubSubNotification)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PubSubNotificationPtrOutput) ToGooglePrivacyDlpV2PubSubNotificationPtrOutput() GooglePrivacyDlpV2PubSubNotificationPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubNotificationPtrOutput) ToGooglePrivacyDlpV2PubSubNotificationPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubNotificationPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubNotificationPtrOutput) Elem() GooglePrivacyDlpV2PubSubNotificationOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PubSubNotification) GooglePrivacyDlpV2PubSubNotification {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2PubSubNotification
		return ret
	}).(GooglePrivacyDlpV2PubSubNotificationOutput)
}

// How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
func (o GooglePrivacyDlpV2PubSubNotificationPtrOutput) DetailOfMessage() GooglePrivacyDlpV2PubSubNotificationDetailOfMessagePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PubSubNotification) *GooglePrivacyDlpV2PubSubNotificationDetailOfMessage {
		if v == nil {
			return nil
		}
		return v.DetailOfMessage
	}).(GooglePrivacyDlpV2PubSubNotificationDetailOfMessagePtrOutput)
}

// The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.
func (o GooglePrivacyDlpV2PubSubNotificationPtrOutput) Event() GooglePrivacyDlpV2PubSubNotificationEventPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PubSubNotification) *GooglePrivacyDlpV2PubSubNotificationEvent {
		if v == nil {
			return nil
		}
		return v.Event
	}).(GooglePrivacyDlpV2PubSubNotificationEventPtrOutput)
}

// Conditions (e.g., data risk or sensitivity level) for triggering a Pub/Sub.
func (o GooglePrivacyDlpV2PubSubNotificationPtrOutput) PubsubCondition() GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PubSubNotification) *GooglePrivacyDlpV2DataProfilePubSubCondition {
		if v == nil {
			return nil
		}
		return v.PubsubCondition
	}).(GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput)
}

// Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.
func (o GooglePrivacyDlpV2PubSubNotificationPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PubSubNotification) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Send a Pub/Sub message into the given Pub/Sub topic to connect other systems to data profile generation. The message payload data will be the byte serialization of `DataProfilePubSubMessage`.
type GooglePrivacyDlpV2PubSubNotificationResponse struct {
	// How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
	DetailOfMessage string `pulumi:"detailOfMessage"`
	// The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.
	Event string `pulumi:"event"`
	// Conditions (e.g., data risk or sensitivity level) for triggering a Pub/Sub.
	PubsubCondition GooglePrivacyDlpV2DataProfilePubSubConditionResponse `pulumi:"pubsubCondition"`
	// Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.
	Topic string `pulumi:"topic"`
}

// Send a Pub/Sub message into the given Pub/Sub topic to connect other systems to data profile generation. The message payload data will be the byte serialization of `DataProfilePubSubMessage`.
type GooglePrivacyDlpV2PubSubNotificationResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PubSubNotificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PubSubNotificationResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PubSubNotificationResponseOutput) ToGooglePrivacyDlpV2PubSubNotificationResponseOutput() GooglePrivacyDlpV2PubSubNotificationResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2PubSubNotificationResponseOutput) ToGooglePrivacyDlpV2PubSubNotificationResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PubSubNotificationResponseOutput {
	return o
}

// How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
func (o GooglePrivacyDlpV2PubSubNotificationResponseOutput) DetailOfMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubNotificationResponse) string { return v.DetailOfMessage }).(pulumi.StringOutput)
}

// The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.
func (o GooglePrivacyDlpV2PubSubNotificationResponseOutput) Event() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubNotificationResponse) string { return v.Event }).(pulumi.StringOutput)
}

// Conditions (e.g., data risk or sensitivity level) for triggering a Pub/Sub.
func (o GooglePrivacyDlpV2PubSubNotificationResponseOutput) PubsubCondition() GooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubNotificationResponse) GooglePrivacyDlpV2DataProfilePubSubConditionResponse {
		return v.PubsubCondition
	}).(GooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput)
}

// Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.
func (o GooglePrivacyDlpV2PubSubNotificationResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PubSubNotificationResponse) string { return v.Topic }).(pulumi.StringOutput)
}

// Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag templates are applied to the resource that Cloud DLP scanned. Data Catalog tag templates are stored in the same project and region where the BigQuery table exists. For Cloud DLP to create and apply the tag template, the Cloud DLP service agent must have the `roles/datacatalog.tagTemplateOwner` permission on the project. The tag template contains fields summarizing the results of the DlpJob. Any field values previously written by another DlpJob are deleted. InfoType naming patterns are strictly enforced when using this feature. Findings are persisted in Data Catalog storage and are governed by service-specific policies for Data Catalog. For more information, see [Service Specific Terms](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. This action is allowed only if all resources being scanned are BigQuery tables. Compatible with: Inspect
type GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog struct {
}

// GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogInput is an input type that accepts GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs and GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogInput` via:
//
//	GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs{...}
type GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput
	ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutputWithContext(context.Context) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput
}

// Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag templates are applied to the resource that Cloud DLP scanned. Data Catalog tag templates are stored in the same project and region where the BigQuery table exists. For Cloud DLP to create and apply the tag template, the Cloud DLP service agent must have the `roles/datacatalog.tagTemplateOwner` permission on the project. The tag template contains fields summarizing the results of the DlpJob. Any field values previously written by another DlpJob are deleted. InfoType naming patterns are strictly enforced when using this feature. Findings are persisted in Data Catalog storage and are governed by service-specific policies for Data Catalog. For more information, see [Service Specific Terms](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. This action is allowed only if all resources being scanned are BigQuery tables. Compatible with: Inspect
type GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs struct {
}

func (GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput {
	return i.ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput)
}

func (i GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput {
	return i.ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput).ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrInput is an input type that accepts GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs, GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtr and GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrInput` via:
//
//	        GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput
	ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutputWithContext(context.Context) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput
}

type googlePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrType GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs

func GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtr(v *GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrInput {
	return (*googlePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrType)(v)
}

func (*googlePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog)(nil)).Elem()
}

func (i *googlePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrType) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput {
	return i.ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrType) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput)
}

// Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag templates are applied to the resource that Cloud DLP scanned. Data Catalog tag templates are stored in the same project and region where the BigQuery table exists. For Cloud DLP to create and apply the tag template, the Cloud DLP service agent must have the `roles/datacatalog.tagTemplateOwner` permission on the project. The tag template contains fields summarizing the results of the DlpJob. Any field values previously written by another DlpJob are deleted. InfoType naming patterns are strictly enforced when using this feature. Findings are persisted in Data Catalog storage and are governed by service-specific policies for Data Catalog. For more information, see [Service Specific Terms](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. This action is allowed only if all resources being scanned are BigQuery tables. Compatible with: Inspect
type GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput {
	return o.ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog) *GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog {
		return &v
	}).(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput)
}

type GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput) Elem() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog
		return ret
	}).(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput)
}

// Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag templates are applied to the resource that Cloud DLP scanned. Data Catalog tag templates are stored in the same project and region where the BigQuery table exists. For Cloud DLP to create and apply the tag template, the Cloud DLP service agent must have the `roles/datacatalog.tagTemplateOwner` permission on the project. The tag template contains fields summarizing the results of the DlpJob. Any field values previously written by another DlpJob are deleted. InfoType naming patterns are strictly enforced when using this feature. Findings are persisted in Data Catalog storage and are governed by service-specific policies for Data Catalog. For more information, see [Service Specific Terms](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. This action is allowed only if all resources being scanned are BigQuery tables. Compatible with: Inspect
type GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponse struct {
}

// Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag templates are applied to the resource that Cloud DLP scanned. Data Catalog tag templates are stored in the same project and region where the BigQuery table exists. For Cloud DLP to create and apply the tag template, the Cloud DLP service agent must have the `roles/datacatalog.tagTemplateOwner` permission on the project. The tag template contains fields summarizing the results of the DlpJob. Any field values previously written by another DlpJob are deleted. InfoType naming patterns are strictly enforced when using this feature. Findings are persisted in Data Catalog storage and are governed by service-specific policies for Data Catalog. For more information, see [Service Specific Terms](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. This action is allowed only if all resources being scanned are BigQuery tables. Compatible with: Inspect
type GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutput) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutput() GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutput) ToGooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutput {
	return o
}

// Publish the result summary of a DlpJob to [Security Command Center](https://cloud.google.com/security-command-center). This action is available for only projects that belong to an organization. This action publishes the count of finding instances and their infoTypes. The summary of findings are persisted in Security Command Center and are governed by [service-specific policies for Security Command Center](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. Compatible with: Inspect
type GooglePrivacyDlpV2PublishSummaryToCscc struct {
}

// GooglePrivacyDlpV2PublishSummaryToCsccInput is an input type that accepts GooglePrivacyDlpV2PublishSummaryToCsccArgs and GooglePrivacyDlpV2PublishSummaryToCsccOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PublishSummaryToCsccInput` via:
//
//	GooglePrivacyDlpV2PublishSummaryToCsccArgs{...}
type GooglePrivacyDlpV2PublishSummaryToCsccInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PublishSummaryToCsccOutput() GooglePrivacyDlpV2PublishSummaryToCsccOutput
	ToGooglePrivacyDlpV2PublishSummaryToCsccOutputWithContext(context.Context) GooglePrivacyDlpV2PublishSummaryToCsccOutput
}

// Publish the result summary of a DlpJob to [Security Command Center](https://cloud.google.com/security-command-center). This action is available for only projects that belong to an organization. This action publishes the count of finding instances and their infoTypes. The summary of findings are persisted in Security Command Center and are governed by [service-specific policies for Security Command Center](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. Compatible with: Inspect
type GooglePrivacyDlpV2PublishSummaryToCsccArgs struct {
}

func (GooglePrivacyDlpV2PublishSummaryToCsccArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishSummaryToCscc)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PublishSummaryToCsccArgs) ToGooglePrivacyDlpV2PublishSummaryToCsccOutput() GooglePrivacyDlpV2PublishSummaryToCsccOutput {
	return i.ToGooglePrivacyDlpV2PublishSummaryToCsccOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PublishSummaryToCsccArgs) ToGooglePrivacyDlpV2PublishSummaryToCsccOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishSummaryToCsccOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishSummaryToCsccOutput)
}

func (i GooglePrivacyDlpV2PublishSummaryToCsccArgs) ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutput() GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput {
	return i.ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PublishSummaryToCsccArgs) ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishSummaryToCsccOutput).ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2PublishSummaryToCsccPtrInput is an input type that accepts GooglePrivacyDlpV2PublishSummaryToCsccArgs, GooglePrivacyDlpV2PublishSummaryToCsccPtr and GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PublishSummaryToCsccPtrInput` via:
//
//	        GooglePrivacyDlpV2PublishSummaryToCsccArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2PublishSummaryToCsccPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutput() GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput
	ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutputWithContext(context.Context) GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput
}

type googlePrivacyDlpV2PublishSummaryToCsccPtrType GooglePrivacyDlpV2PublishSummaryToCsccArgs

func GooglePrivacyDlpV2PublishSummaryToCsccPtr(v *GooglePrivacyDlpV2PublishSummaryToCsccArgs) GooglePrivacyDlpV2PublishSummaryToCsccPtrInput {
	return (*googlePrivacyDlpV2PublishSummaryToCsccPtrType)(v)
}

func (*googlePrivacyDlpV2PublishSummaryToCsccPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PublishSummaryToCscc)(nil)).Elem()
}

func (i *googlePrivacyDlpV2PublishSummaryToCsccPtrType) ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutput() GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput {
	return i.ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2PublishSummaryToCsccPtrType) ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput)
}

// Publish the result summary of a DlpJob to [Security Command Center](https://cloud.google.com/security-command-center). This action is available for only projects that belong to an organization. This action publishes the count of finding instances and their infoTypes. The summary of findings are persisted in Security Command Center and are governed by [service-specific policies for Security Command Center](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. Compatible with: Inspect
type GooglePrivacyDlpV2PublishSummaryToCsccOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishSummaryToCsccOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishSummaryToCscc)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishSummaryToCsccOutput) ToGooglePrivacyDlpV2PublishSummaryToCsccOutput() GooglePrivacyDlpV2PublishSummaryToCsccOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishSummaryToCsccOutput) ToGooglePrivacyDlpV2PublishSummaryToCsccOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishSummaryToCsccOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishSummaryToCsccOutput) ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutput() GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput {
	return o.ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2PublishSummaryToCsccOutput) ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2PublishSummaryToCscc) *GooglePrivacyDlpV2PublishSummaryToCscc {
		return &v
	}).(GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput)
}

type GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PublishSummaryToCscc)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput) ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutput() GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput) ToGooglePrivacyDlpV2PublishSummaryToCsccPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput) Elem() GooglePrivacyDlpV2PublishSummaryToCsccOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PublishSummaryToCscc) GooglePrivacyDlpV2PublishSummaryToCscc {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2PublishSummaryToCscc
		return ret
	}).(GooglePrivacyDlpV2PublishSummaryToCsccOutput)
}

// Publish the result summary of a DlpJob to [Security Command Center](https://cloud.google.com/security-command-center). This action is available for only projects that belong to an organization. This action publishes the count of finding instances and their infoTypes. The summary of findings are persisted in Security Command Center and are governed by [service-specific policies for Security Command Center](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. Compatible with: Inspect
type GooglePrivacyDlpV2PublishSummaryToCsccResponse struct {
}

// Publish the result summary of a DlpJob to [Security Command Center](https://cloud.google.com/security-command-center). This action is available for only projects that belong to an organization. This action publishes the count of finding instances and their infoTypes. The summary of findings are persisted in Security Command Center and are governed by [service-specific policies for Security Command Center](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. Compatible with: Inspect
type GooglePrivacyDlpV2PublishSummaryToCsccResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishSummaryToCsccResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishSummaryToCsccResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishSummaryToCsccResponseOutput) ToGooglePrivacyDlpV2PublishSummaryToCsccResponseOutput() GooglePrivacyDlpV2PublishSummaryToCsccResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishSummaryToCsccResponseOutput) ToGooglePrivacyDlpV2PublishSummaryToCsccResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishSummaryToCsccResponseOutput {
	return o
}

// Publish a message into a given Pub/Sub topic when DlpJob has completed. The message contains a single field, `DlpJobName`, which is equal to the finished job's [`DlpJob.name`](https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs#DlpJob). Compatible with: Inspect, Risk
type GooglePrivacyDlpV2PublishToPubSub struct {
	// Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access rights to the DLP API service account executing the long running DlpJob sending the notifications. Format is projects/{project}/topics/{topic}.
	Topic *string `pulumi:"topic"`
}

// GooglePrivacyDlpV2PublishToPubSubInput is an input type that accepts GooglePrivacyDlpV2PublishToPubSubArgs and GooglePrivacyDlpV2PublishToPubSubOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PublishToPubSubInput` via:
//
//	GooglePrivacyDlpV2PublishToPubSubArgs{...}
type GooglePrivacyDlpV2PublishToPubSubInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PublishToPubSubOutput() GooglePrivacyDlpV2PublishToPubSubOutput
	ToGooglePrivacyDlpV2PublishToPubSubOutputWithContext(context.Context) GooglePrivacyDlpV2PublishToPubSubOutput
}

// Publish a message into a given Pub/Sub topic when DlpJob has completed. The message contains a single field, `DlpJobName`, which is equal to the finished job's [`DlpJob.name`](https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs#DlpJob). Compatible with: Inspect, Risk
type GooglePrivacyDlpV2PublishToPubSubArgs struct {
	// Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access rights to the DLP API service account executing the long running DlpJob sending the notifications. Format is projects/{project}/topics/{topic}.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (GooglePrivacyDlpV2PublishToPubSubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishToPubSub)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PublishToPubSubArgs) ToGooglePrivacyDlpV2PublishToPubSubOutput() GooglePrivacyDlpV2PublishToPubSubOutput {
	return i.ToGooglePrivacyDlpV2PublishToPubSubOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PublishToPubSubArgs) ToGooglePrivacyDlpV2PublishToPubSubOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToPubSubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishToPubSubOutput)
}

func (i GooglePrivacyDlpV2PublishToPubSubArgs) ToGooglePrivacyDlpV2PublishToPubSubPtrOutput() GooglePrivacyDlpV2PublishToPubSubPtrOutput {
	return i.ToGooglePrivacyDlpV2PublishToPubSubPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PublishToPubSubArgs) ToGooglePrivacyDlpV2PublishToPubSubPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToPubSubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishToPubSubOutput).ToGooglePrivacyDlpV2PublishToPubSubPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2PublishToPubSubPtrInput is an input type that accepts GooglePrivacyDlpV2PublishToPubSubArgs, GooglePrivacyDlpV2PublishToPubSubPtr and GooglePrivacyDlpV2PublishToPubSubPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PublishToPubSubPtrInput` via:
//
//	        GooglePrivacyDlpV2PublishToPubSubArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2PublishToPubSubPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PublishToPubSubPtrOutput() GooglePrivacyDlpV2PublishToPubSubPtrOutput
	ToGooglePrivacyDlpV2PublishToPubSubPtrOutputWithContext(context.Context) GooglePrivacyDlpV2PublishToPubSubPtrOutput
}

type googlePrivacyDlpV2PublishToPubSubPtrType GooglePrivacyDlpV2PublishToPubSubArgs

func GooglePrivacyDlpV2PublishToPubSubPtr(v *GooglePrivacyDlpV2PublishToPubSubArgs) GooglePrivacyDlpV2PublishToPubSubPtrInput {
	return (*googlePrivacyDlpV2PublishToPubSubPtrType)(v)
}

func (*googlePrivacyDlpV2PublishToPubSubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PublishToPubSub)(nil)).Elem()
}

func (i *googlePrivacyDlpV2PublishToPubSubPtrType) ToGooglePrivacyDlpV2PublishToPubSubPtrOutput() GooglePrivacyDlpV2PublishToPubSubPtrOutput {
	return i.ToGooglePrivacyDlpV2PublishToPubSubPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2PublishToPubSubPtrType) ToGooglePrivacyDlpV2PublishToPubSubPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToPubSubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishToPubSubPtrOutput)
}

// Publish a message into a given Pub/Sub topic when DlpJob has completed. The message contains a single field, `DlpJobName`, which is equal to the finished job's [`DlpJob.name`](https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs#DlpJob). Compatible with: Inspect, Risk
type GooglePrivacyDlpV2PublishToPubSubOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishToPubSubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishToPubSub)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishToPubSubOutput) ToGooglePrivacyDlpV2PublishToPubSubOutput() GooglePrivacyDlpV2PublishToPubSubOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishToPubSubOutput) ToGooglePrivacyDlpV2PublishToPubSubOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToPubSubOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishToPubSubOutput) ToGooglePrivacyDlpV2PublishToPubSubPtrOutput() GooglePrivacyDlpV2PublishToPubSubPtrOutput {
	return o.ToGooglePrivacyDlpV2PublishToPubSubPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2PublishToPubSubOutput) ToGooglePrivacyDlpV2PublishToPubSubPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToPubSubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2PublishToPubSub) *GooglePrivacyDlpV2PublishToPubSub {
		return &v
	}).(GooglePrivacyDlpV2PublishToPubSubPtrOutput)
}

// Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access rights to the DLP API service account executing the long running DlpJob sending the notifications. Format is projects/{project}/topics/{topic}.
func (o GooglePrivacyDlpV2PublishToPubSubOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PublishToPubSub) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2PublishToPubSubPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishToPubSubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PublishToPubSub)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishToPubSubPtrOutput) ToGooglePrivacyDlpV2PublishToPubSubPtrOutput() GooglePrivacyDlpV2PublishToPubSubPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishToPubSubPtrOutput) ToGooglePrivacyDlpV2PublishToPubSubPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToPubSubPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishToPubSubPtrOutput) Elem() GooglePrivacyDlpV2PublishToPubSubOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PublishToPubSub) GooglePrivacyDlpV2PublishToPubSub {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2PublishToPubSub
		return ret
	}).(GooglePrivacyDlpV2PublishToPubSubOutput)
}

// Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access rights to the DLP API service account executing the long running DlpJob sending the notifications. Format is projects/{project}/topics/{topic}.
func (o GooglePrivacyDlpV2PublishToPubSubPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PublishToPubSub) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Publish a message into a given Pub/Sub topic when DlpJob has completed. The message contains a single field, `DlpJobName`, which is equal to the finished job's [`DlpJob.name`](https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs#DlpJob). Compatible with: Inspect, Risk
type GooglePrivacyDlpV2PublishToPubSubResponse struct {
	// Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access rights to the DLP API service account executing the long running DlpJob sending the notifications. Format is projects/{project}/topics/{topic}.
	Topic string `pulumi:"topic"`
}

// Publish a message into a given Pub/Sub topic when DlpJob has completed. The message contains a single field, `DlpJobName`, which is equal to the finished job's [`DlpJob.name`](https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs#DlpJob). Compatible with: Inspect, Risk
type GooglePrivacyDlpV2PublishToPubSubResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishToPubSubResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishToPubSubResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishToPubSubResponseOutput) ToGooglePrivacyDlpV2PublishToPubSubResponseOutput() GooglePrivacyDlpV2PublishToPubSubResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishToPubSubResponseOutput) ToGooglePrivacyDlpV2PublishToPubSubResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToPubSubResponseOutput {
	return o
}

// Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access rights to the DLP API service account executing the long running DlpJob sending the notifications. Format is projects/{project}/topics/{topic}.
func (o GooglePrivacyDlpV2PublishToPubSubResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2PublishToPubSubResponse) string { return v.Topic }).(pulumi.StringOutput)
}

// Enable Stackdriver metric dlp.googleapis.com/finding_count. This will publish a metric to stack driver on each infotype requested and how many findings were found for it. CustomDetectors will be bucketed as 'Custom' under the Stackdriver label 'info_type'.
type GooglePrivacyDlpV2PublishToStackdriver struct {
}

// GooglePrivacyDlpV2PublishToStackdriverInput is an input type that accepts GooglePrivacyDlpV2PublishToStackdriverArgs and GooglePrivacyDlpV2PublishToStackdriverOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PublishToStackdriverInput` via:
//
//	GooglePrivacyDlpV2PublishToStackdriverArgs{...}
type GooglePrivacyDlpV2PublishToStackdriverInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PublishToStackdriverOutput() GooglePrivacyDlpV2PublishToStackdriverOutput
	ToGooglePrivacyDlpV2PublishToStackdriverOutputWithContext(context.Context) GooglePrivacyDlpV2PublishToStackdriverOutput
}

// Enable Stackdriver metric dlp.googleapis.com/finding_count. This will publish a metric to stack driver on each infotype requested and how many findings were found for it. CustomDetectors will be bucketed as 'Custom' under the Stackdriver label 'info_type'.
type GooglePrivacyDlpV2PublishToStackdriverArgs struct {
}

func (GooglePrivacyDlpV2PublishToStackdriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishToStackdriver)(nil)).Elem()
}

func (i GooglePrivacyDlpV2PublishToStackdriverArgs) ToGooglePrivacyDlpV2PublishToStackdriverOutput() GooglePrivacyDlpV2PublishToStackdriverOutput {
	return i.ToGooglePrivacyDlpV2PublishToStackdriverOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PublishToStackdriverArgs) ToGooglePrivacyDlpV2PublishToStackdriverOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToStackdriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishToStackdriverOutput)
}

func (i GooglePrivacyDlpV2PublishToStackdriverArgs) ToGooglePrivacyDlpV2PublishToStackdriverPtrOutput() GooglePrivacyDlpV2PublishToStackdriverPtrOutput {
	return i.ToGooglePrivacyDlpV2PublishToStackdriverPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2PublishToStackdriverArgs) ToGooglePrivacyDlpV2PublishToStackdriverPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToStackdriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishToStackdriverOutput).ToGooglePrivacyDlpV2PublishToStackdriverPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2PublishToStackdriverPtrInput is an input type that accepts GooglePrivacyDlpV2PublishToStackdriverArgs, GooglePrivacyDlpV2PublishToStackdriverPtr and GooglePrivacyDlpV2PublishToStackdriverPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2PublishToStackdriverPtrInput` via:
//
//	        GooglePrivacyDlpV2PublishToStackdriverArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2PublishToStackdriverPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2PublishToStackdriverPtrOutput() GooglePrivacyDlpV2PublishToStackdriverPtrOutput
	ToGooglePrivacyDlpV2PublishToStackdriverPtrOutputWithContext(context.Context) GooglePrivacyDlpV2PublishToStackdriverPtrOutput
}

type googlePrivacyDlpV2PublishToStackdriverPtrType GooglePrivacyDlpV2PublishToStackdriverArgs

func GooglePrivacyDlpV2PublishToStackdriverPtr(v *GooglePrivacyDlpV2PublishToStackdriverArgs) GooglePrivacyDlpV2PublishToStackdriverPtrInput {
	return (*googlePrivacyDlpV2PublishToStackdriverPtrType)(v)
}

func (*googlePrivacyDlpV2PublishToStackdriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PublishToStackdriver)(nil)).Elem()
}

func (i *googlePrivacyDlpV2PublishToStackdriverPtrType) ToGooglePrivacyDlpV2PublishToStackdriverPtrOutput() GooglePrivacyDlpV2PublishToStackdriverPtrOutput {
	return i.ToGooglePrivacyDlpV2PublishToStackdriverPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2PublishToStackdriverPtrType) ToGooglePrivacyDlpV2PublishToStackdriverPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToStackdriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2PublishToStackdriverPtrOutput)
}

// Enable Stackdriver metric dlp.googleapis.com/finding_count. This will publish a metric to stack driver on each infotype requested and how many findings were found for it. CustomDetectors will be bucketed as 'Custom' under the Stackdriver label 'info_type'.
type GooglePrivacyDlpV2PublishToStackdriverOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishToStackdriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishToStackdriver)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishToStackdriverOutput) ToGooglePrivacyDlpV2PublishToStackdriverOutput() GooglePrivacyDlpV2PublishToStackdriverOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishToStackdriverOutput) ToGooglePrivacyDlpV2PublishToStackdriverOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToStackdriverOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishToStackdriverOutput) ToGooglePrivacyDlpV2PublishToStackdriverPtrOutput() GooglePrivacyDlpV2PublishToStackdriverPtrOutput {
	return o.ToGooglePrivacyDlpV2PublishToStackdriverPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2PublishToStackdriverOutput) ToGooglePrivacyDlpV2PublishToStackdriverPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToStackdriverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2PublishToStackdriver) *GooglePrivacyDlpV2PublishToStackdriver {
		return &v
	}).(GooglePrivacyDlpV2PublishToStackdriverPtrOutput)
}

type GooglePrivacyDlpV2PublishToStackdriverPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishToStackdriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2PublishToStackdriver)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishToStackdriverPtrOutput) ToGooglePrivacyDlpV2PublishToStackdriverPtrOutput() GooglePrivacyDlpV2PublishToStackdriverPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishToStackdriverPtrOutput) ToGooglePrivacyDlpV2PublishToStackdriverPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToStackdriverPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishToStackdriverPtrOutput) Elem() GooglePrivacyDlpV2PublishToStackdriverOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2PublishToStackdriver) GooglePrivacyDlpV2PublishToStackdriver {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2PublishToStackdriver
		return ret
	}).(GooglePrivacyDlpV2PublishToStackdriverOutput)
}

// Enable Stackdriver metric dlp.googleapis.com/finding_count. This will publish a metric to stack driver on each infotype requested and how many findings were found for it. CustomDetectors will be bucketed as 'Custom' under the Stackdriver label 'info_type'.
type GooglePrivacyDlpV2PublishToStackdriverResponse struct {
}

// Enable Stackdriver metric dlp.googleapis.com/finding_count. This will publish a metric to stack driver on each infotype requested and how many findings were found for it. CustomDetectors will be bucketed as 'Custom' under the Stackdriver label 'info_type'.
type GooglePrivacyDlpV2PublishToStackdriverResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2PublishToStackdriverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2PublishToStackdriverResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2PublishToStackdriverResponseOutput) ToGooglePrivacyDlpV2PublishToStackdriverResponseOutput() GooglePrivacyDlpV2PublishToStackdriverResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2PublishToStackdriverResponseOutput) ToGooglePrivacyDlpV2PublishToStackdriverResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2PublishToStackdriverResponseOutput {
	return o
}

// A column with a semantic tag attached.
type GooglePrivacyDlpV2QuasiId struct {
	// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
	CustomTag *string `pulumi:"customTag"`
	// Identifies the column.
	Field GooglePrivacyDlpV2FieldId `pulumi:"field"`
	// If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
	Inferred *GoogleProtobufEmpty `pulumi:"inferred"`
	// A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
	InfoType *GooglePrivacyDlpV2InfoType `pulumi:"infoType"`
}

// GooglePrivacyDlpV2QuasiIdInput is an input type that accepts GooglePrivacyDlpV2QuasiIdArgs and GooglePrivacyDlpV2QuasiIdOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2QuasiIdInput` via:
//
//	GooglePrivacyDlpV2QuasiIdArgs{...}
type GooglePrivacyDlpV2QuasiIdInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2QuasiIdOutput() GooglePrivacyDlpV2QuasiIdOutput
	ToGooglePrivacyDlpV2QuasiIdOutputWithContext(context.Context) GooglePrivacyDlpV2QuasiIdOutput
}

// A column with a semantic tag attached.
type GooglePrivacyDlpV2QuasiIdArgs struct {
	// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
	CustomTag pulumi.StringPtrInput `pulumi:"customTag"`
	// Identifies the column.
	Field GooglePrivacyDlpV2FieldIdInput `pulumi:"field"`
	// If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
	Inferred GoogleProtobufEmptyPtrInput `pulumi:"inferred"`
	// A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
	InfoType GooglePrivacyDlpV2InfoTypePtrInput `pulumi:"infoType"`
}

func (GooglePrivacyDlpV2QuasiIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2QuasiId)(nil)).Elem()
}

func (i GooglePrivacyDlpV2QuasiIdArgs) ToGooglePrivacyDlpV2QuasiIdOutput() GooglePrivacyDlpV2QuasiIdOutput {
	return i.ToGooglePrivacyDlpV2QuasiIdOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2QuasiIdArgs) ToGooglePrivacyDlpV2QuasiIdOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2QuasiIdOutput)
}

// GooglePrivacyDlpV2QuasiIdArrayInput is an input type that accepts GooglePrivacyDlpV2QuasiIdArray and GooglePrivacyDlpV2QuasiIdArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2QuasiIdArrayInput` via:
//
//	GooglePrivacyDlpV2QuasiIdArray{ GooglePrivacyDlpV2QuasiIdArgs{...} }
type GooglePrivacyDlpV2QuasiIdArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2QuasiIdArrayOutput() GooglePrivacyDlpV2QuasiIdArrayOutput
	ToGooglePrivacyDlpV2QuasiIdArrayOutputWithContext(context.Context) GooglePrivacyDlpV2QuasiIdArrayOutput
}

type GooglePrivacyDlpV2QuasiIdArray []GooglePrivacyDlpV2QuasiIdInput

func (GooglePrivacyDlpV2QuasiIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2QuasiId)(nil)).Elem()
}

func (i GooglePrivacyDlpV2QuasiIdArray) ToGooglePrivacyDlpV2QuasiIdArrayOutput() GooglePrivacyDlpV2QuasiIdArrayOutput {
	return i.ToGooglePrivacyDlpV2QuasiIdArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2QuasiIdArray) ToGooglePrivacyDlpV2QuasiIdArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2QuasiIdArrayOutput)
}

// A column with a semantic tag attached.
type GooglePrivacyDlpV2QuasiIdOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2QuasiId)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdOutput) ToGooglePrivacyDlpV2QuasiIdOutput() GooglePrivacyDlpV2QuasiIdOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdOutput) ToGooglePrivacyDlpV2QuasiIdOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdOutput {
	return o
}

// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
func (o GooglePrivacyDlpV2QuasiIdOutput) CustomTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiId) *string { return v.CustomTag }).(pulumi.StringPtrOutput)
}

// Identifies the column.
func (o GooglePrivacyDlpV2QuasiIdOutput) Field() GooglePrivacyDlpV2FieldIdOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiId) GooglePrivacyDlpV2FieldId { return v.Field }).(GooglePrivacyDlpV2FieldIdOutput)
}

// If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
func (o GooglePrivacyDlpV2QuasiIdOutput) Inferred() GoogleProtobufEmptyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiId) *GoogleProtobufEmpty { return v.Inferred }).(GoogleProtobufEmptyPtrOutput)
}

// A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
func (o GooglePrivacyDlpV2QuasiIdOutput) InfoType() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiId) *GooglePrivacyDlpV2InfoType { return v.InfoType }).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

type GooglePrivacyDlpV2QuasiIdArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2QuasiId)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdArrayOutput) ToGooglePrivacyDlpV2QuasiIdArrayOutput() GooglePrivacyDlpV2QuasiIdArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdArrayOutput) ToGooglePrivacyDlpV2QuasiIdArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2QuasiIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2QuasiId {
		return vs[0].([]GooglePrivacyDlpV2QuasiId)[vs[1].(int)]
	}).(GooglePrivacyDlpV2QuasiIdOutput)
}

// A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
type GooglePrivacyDlpV2QuasiIdField struct {
	// A auxiliary field.
	CustomTag *string `pulumi:"customTag"`
	// Identifies the column.
	Field *GooglePrivacyDlpV2FieldId `pulumi:"field"`
}

// GooglePrivacyDlpV2QuasiIdFieldInput is an input type that accepts GooglePrivacyDlpV2QuasiIdFieldArgs and GooglePrivacyDlpV2QuasiIdFieldOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2QuasiIdFieldInput` via:
//
//	GooglePrivacyDlpV2QuasiIdFieldArgs{...}
type GooglePrivacyDlpV2QuasiIdFieldInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2QuasiIdFieldOutput() GooglePrivacyDlpV2QuasiIdFieldOutput
	ToGooglePrivacyDlpV2QuasiIdFieldOutputWithContext(context.Context) GooglePrivacyDlpV2QuasiIdFieldOutput
}

// A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
type GooglePrivacyDlpV2QuasiIdFieldArgs struct {
	// A auxiliary field.
	CustomTag pulumi.StringPtrInput `pulumi:"customTag"`
	// Identifies the column.
	Field GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"field"`
}

func (GooglePrivacyDlpV2QuasiIdFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdField)(nil)).Elem()
}

func (i GooglePrivacyDlpV2QuasiIdFieldArgs) ToGooglePrivacyDlpV2QuasiIdFieldOutput() GooglePrivacyDlpV2QuasiIdFieldOutput {
	return i.ToGooglePrivacyDlpV2QuasiIdFieldOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2QuasiIdFieldArgs) ToGooglePrivacyDlpV2QuasiIdFieldOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2QuasiIdFieldOutput)
}

// GooglePrivacyDlpV2QuasiIdFieldArrayInput is an input type that accepts GooglePrivacyDlpV2QuasiIdFieldArray and GooglePrivacyDlpV2QuasiIdFieldArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2QuasiIdFieldArrayInput` via:
//
//	GooglePrivacyDlpV2QuasiIdFieldArray{ GooglePrivacyDlpV2QuasiIdFieldArgs{...} }
type GooglePrivacyDlpV2QuasiIdFieldArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2QuasiIdFieldArrayOutput() GooglePrivacyDlpV2QuasiIdFieldArrayOutput
	ToGooglePrivacyDlpV2QuasiIdFieldArrayOutputWithContext(context.Context) GooglePrivacyDlpV2QuasiIdFieldArrayOutput
}

type GooglePrivacyDlpV2QuasiIdFieldArray []GooglePrivacyDlpV2QuasiIdFieldInput

func (GooglePrivacyDlpV2QuasiIdFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2QuasiIdField)(nil)).Elem()
}

func (i GooglePrivacyDlpV2QuasiIdFieldArray) ToGooglePrivacyDlpV2QuasiIdFieldArrayOutput() GooglePrivacyDlpV2QuasiIdFieldArrayOutput {
	return i.ToGooglePrivacyDlpV2QuasiIdFieldArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2QuasiIdFieldArray) ToGooglePrivacyDlpV2QuasiIdFieldArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2QuasiIdFieldArrayOutput)
}

// A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
type GooglePrivacyDlpV2QuasiIdFieldOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdField)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdFieldOutput) ToGooglePrivacyDlpV2QuasiIdFieldOutput() GooglePrivacyDlpV2QuasiIdFieldOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdFieldOutput) ToGooglePrivacyDlpV2QuasiIdFieldOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdFieldOutput {
	return o
}

// A auxiliary field.
func (o GooglePrivacyDlpV2QuasiIdFieldOutput) CustomTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdField) *string { return v.CustomTag }).(pulumi.StringPtrOutput)
}

// Identifies the column.
func (o GooglePrivacyDlpV2QuasiIdFieldOutput) Field() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdField) *GooglePrivacyDlpV2FieldId { return v.Field }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

type GooglePrivacyDlpV2QuasiIdFieldArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2QuasiIdField)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdFieldArrayOutput) ToGooglePrivacyDlpV2QuasiIdFieldArrayOutput() GooglePrivacyDlpV2QuasiIdFieldArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdFieldArrayOutput) ToGooglePrivacyDlpV2QuasiIdFieldArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdFieldArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdFieldArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2QuasiIdFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2QuasiIdField {
		return vs[0].([]GooglePrivacyDlpV2QuasiIdField)[vs[1].(int)]
	}).(GooglePrivacyDlpV2QuasiIdFieldOutput)
}

// A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
type GooglePrivacyDlpV2QuasiIdFieldResponse struct {
	// A auxiliary field.
	CustomTag string `pulumi:"customTag"`
	// Identifies the column.
	Field GooglePrivacyDlpV2FieldIdResponse `pulumi:"field"`
}

// A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
type GooglePrivacyDlpV2QuasiIdFieldResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdFieldResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdFieldResponseOutput) ToGooglePrivacyDlpV2QuasiIdFieldResponseOutput() GooglePrivacyDlpV2QuasiIdFieldResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdFieldResponseOutput) ToGooglePrivacyDlpV2QuasiIdFieldResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdFieldResponseOutput {
	return o
}

// A auxiliary field.
func (o GooglePrivacyDlpV2QuasiIdFieldResponseOutput) CustomTag() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdFieldResponse) string { return v.CustomTag }).(pulumi.StringOutput)
}

// Identifies the column.
func (o GooglePrivacyDlpV2QuasiIdFieldResponseOutput) Field() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdFieldResponse) GooglePrivacyDlpV2FieldIdResponse { return v.Field }).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

type GooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2QuasiIdFieldResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput) ToGooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput() GooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput) ToGooglePrivacyDlpV2QuasiIdFieldResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2QuasiIdFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2QuasiIdFieldResponse {
		return vs[0].([]GooglePrivacyDlpV2QuasiIdFieldResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2QuasiIdFieldResponseOutput)
}

// A column with a semantic tag attached.
type GooglePrivacyDlpV2QuasiIdResponse struct {
	// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
	CustomTag string `pulumi:"customTag"`
	// Identifies the column.
	Field GooglePrivacyDlpV2FieldIdResponse `pulumi:"field"`
	// If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
	Inferred GoogleProtobufEmptyResponse `pulumi:"inferred"`
	// A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
	InfoType GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoType"`
}

// A column with a semantic tag attached.
type GooglePrivacyDlpV2QuasiIdResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdResponseOutput) ToGooglePrivacyDlpV2QuasiIdResponseOutput() GooglePrivacyDlpV2QuasiIdResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdResponseOutput) ToGooglePrivacyDlpV2QuasiIdResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdResponseOutput {
	return o
}

// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
func (o GooglePrivacyDlpV2QuasiIdResponseOutput) CustomTag() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdResponse) string { return v.CustomTag }).(pulumi.StringOutput)
}

// Identifies the column.
func (o GooglePrivacyDlpV2QuasiIdResponseOutput) Field() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdResponse) GooglePrivacyDlpV2FieldIdResponse { return v.Field }).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
func (o GooglePrivacyDlpV2QuasiIdResponseOutput) Inferred() GoogleProtobufEmptyResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdResponse) GoogleProtobufEmptyResponse { return v.Inferred }).(GoogleProtobufEmptyResponseOutput)
}

// A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
func (o GooglePrivacyDlpV2QuasiIdResponseOutput) InfoType() GooglePrivacyDlpV2InfoTypeResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdResponse) GooglePrivacyDlpV2InfoTypeResponse { return v.InfoType }).(GooglePrivacyDlpV2InfoTypeResponseOutput)
}

type GooglePrivacyDlpV2QuasiIdResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2QuasiIdResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdResponseArrayOutput) ToGooglePrivacyDlpV2QuasiIdResponseArrayOutput() GooglePrivacyDlpV2QuasiIdResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdResponseArrayOutput) ToGooglePrivacyDlpV2QuasiIdResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2QuasiIdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2QuasiIdResponse {
		return vs[0].([]GooglePrivacyDlpV2QuasiIdResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2QuasiIdResponseOutput)
}

// A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
type GooglePrivacyDlpV2QuasiIdentifierField struct {
	// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
	CustomTag *string `pulumi:"customTag"`
	// Identifies the column.
	Field *GooglePrivacyDlpV2FieldId `pulumi:"field"`
}

// GooglePrivacyDlpV2QuasiIdentifierFieldInput is an input type that accepts GooglePrivacyDlpV2QuasiIdentifierFieldArgs and GooglePrivacyDlpV2QuasiIdentifierFieldOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2QuasiIdentifierFieldInput` via:
//
//	GooglePrivacyDlpV2QuasiIdentifierFieldArgs{...}
type GooglePrivacyDlpV2QuasiIdentifierFieldInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2QuasiIdentifierFieldOutput() GooglePrivacyDlpV2QuasiIdentifierFieldOutput
	ToGooglePrivacyDlpV2QuasiIdentifierFieldOutputWithContext(context.Context) GooglePrivacyDlpV2QuasiIdentifierFieldOutput
}

// A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
type GooglePrivacyDlpV2QuasiIdentifierFieldArgs struct {
	// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
	CustomTag pulumi.StringPtrInput `pulumi:"customTag"`
	// Identifies the column.
	Field GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"field"`
}

func (GooglePrivacyDlpV2QuasiIdentifierFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdentifierField)(nil)).Elem()
}

func (i GooglePrivacyDlpV2QuasiIdentifierFieldArgs) ToGooglePrivacyDlpV2QuasiIdentifierFieldOutput() GooglePrivacyDlpV2QuasiIdentifierFieldOutput {
	return i.ToGooglePrivacyDlpV2QuasiIdentifierFieldOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2QuasiIdentifierFieldArgs) ToGooglePrivacyDlpV2QuasiIdentifierFieldOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdentifierFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2QuasiIdentifierFieldOutput)
}

// GooglePrivacyDlpV2QuasiIdentifierFieldArrayInput is an input type that accepts GooglePrivacyDlpV2QuasiIdentifierFieldArray and GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2QuasiIdentifierFieldArrayInput` via:
//
//	GooglePrivacyDlpV2QuasiIdentifierFieldArray{ GooglePrivacyDlpV2QuasiIdentifierFieldArgs{...} }
type GooglePrivacyDlpV2QuasiIdentifierFieldArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput() GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput
	ToGooglePrivacyDlpV2QuasiIdentifierFieldArrayOutputWithContext(context.Context) GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput
}

type GooglePrivacyDlpV2QuasiIdentifierFieldArray []GooglePrivacyDlpV2QuasiIdentifierFieldInput

func (GooglePrivacyDlpV2QuasiIdentifierFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2QuasiIdentifierField)(nil)).Elem()
}

func (i GooglePrivacyDlpV2QuasiIdentifierFieldArray) ToGooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput() GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput {
	return i.ToGooglePrivacyDlpV2QuasiIdentifierFieldArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2QuasiIdentifierFieldArray) ToGooglePrivacyDlpV2QuasiIdentifierFieldArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput)
}

// A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
type GooglePrivacyDlpV2QuasiIdentifierFieldOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdentifierFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdentifierField)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdentifierFieldOutput) ToGooglePrivacyDlpV2QuasiIdentifierFieldOutput() GooglePrivacyDlpV2QuasiIdentifierFieldOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdentifierFieldOutput) ToGooglePrivacyDlpV2QuasiIdentifierFieldOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdentifierFieldOutput {
	return o
}

// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
func (o GooglePrivacyDlpV2QuasiIdentifierFieldOutput) CustomTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdentifierField) *string { return v.CustomTag }).(pulumi.StringPtrOutput)
}

// Identifies the column.
func (o GooglePrivacyDlpV2QuasiIdentifierFieldOutput) Field() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdentifierField) *GooglePrivacyDlpV2FieldId { return v.Field }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

type GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2QuasiIdentifierField)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput) ToGooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput() GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput) ToGooglePrivacyDlpV2QuasiIdentifierFieldArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2QuasiIdentifierFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2QuasiIdentifierField {
		return vs[0].([]GooglePrivacyDlpV2QuasiIdentifierField)[vs[1].(int)]
	}).(GooglePrivacyDlpV2QuasiIdentifierFieldOutput)
}

// A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
type GooglePrivacyDlpV2QuasiIdentifierFieldResponse struct {
	// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
	CustomTag string `pulumi:"customTag"`
	// Identifies the column.
	Field GooglePrivacyDlpV2FieldIdResponse `pulumi:"field"`
}

// A quasi-identifier column has a custom_tag, used to know which column in the data corresponds to which column in the statistical model.
type GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdentifierFieldResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput) ToGooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput() GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput) ToGooglePrivacyDlpV2QuasiIdentifierFieldResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput {
	return o
}

// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
func (o GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput) CustomTag() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdentifierFieldResponse) string { return v.CustomTag }).(pulumi.StringOutput)
}

// Identifies the column.
func (o GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput) Field() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2QuasiIdentifierFieldResponse) GooglePrivacyDlpV2FieldIdResponse {
		return v.Field
	}).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

type GooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2QuasiIdentifierFieldResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput) ToGooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput() GooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput) ToGooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2QuasiIdentifierFieldResponse {
		return vs[0].([]GooglePrivacyDlpV2QuasiIdentifierFieldResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput)
}

// A condition for determining whether a transformation should be applied to a field.
type GooglePrivacyDlpV2RecordCondition struct {
	// An expression.
	Expressions *GooglePrivacyDlpV2Expressions `pulumi:"expressions"`
}

// GooglePrivacyDlpV2RecordConditionInput is an input type that accepts GooglePrivacyDlpV2RecordConditionArgs and GooglePrivacyDlpV2RecordConditionOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RecordConditionInput` via:
//
//	GooglePrivacyDlpV2RecordConditionArgs{...}
type GooglePrivacyDlpV2RecordConditionInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RecordConditionOutput() GooglePrivacyDlpV2RecordConditionOutput
	ToGooglePrivacyDlpV2RecordConditionOutputWithContext(context.Context) GooglePrivacyDlpV2RecordConditionOutput
}

// A condition for determining whether a transformation should be applied to a field.
type GooglePrivacyDlpV2RecordConditionArgs struct {
	// An expression.
	Expressions GooglePrivacyDlpV2ExpressionsPtrInput `pulumi:"expressions"`
}

func (GooglePrivacyDlpV2RecordConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RecordCondition)(nil)).Elem()
}

func (i GooglePrivacyDlpV2RecordConditionArgs) ToGooglePrivacyDlpV2RecordConditionOutput() GooglePrivacyDlpV2RecordConditionOutput {
	return i.ToGooglePrivacyDlpV2RecordConditionOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RecordConditionArgs) ToGooglePrivacyDlpV2RecordConditionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RecordConditionOutput)
}

func (i GooglePrivacyDlpV2RecordConditionArgs) ToGooglePrivacyDlpV2RecordConditionPtrOutput() GooglePrivacyDlpV2RecordConditionPtrOutput {
	return i.ToGooglePrivacyDlpV2RecordConditionPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RecordConditionArgs) ToGooglePrivacyDlpV2RecordConditionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RecordConditionOutput).ToGooglePrivacyDlpV2RecordConditionPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2RecordConditionPtrInput is an input type that accepts GooglePrivacyDlpV2RecordConditionArgs, GooglePrivacyDlpV2RecordConditionPtr and GooglePrivacyDlpV2RecordConditionPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RecordConditionPtrInput` via:
//
//	        GooglePrivacyDlpV2RecordConditionArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2RecordConditionPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RecordConditionPtrOutput() GooglePrivacyDlpV2RecordConditionPtrOutput
	ToGooglePrivacyDlpV2RecordConditionPtrOutputWithContext(context.Context) GooglePrivacyDlpV2RecordConditionPtrOutput
}

type googlePrivacyDlpV2RecordConditionPtrType GooglePrivacyDlpV2RecordConditionArgs

func GooglePrivacyDlpV2RecordConditionPtr(v *GooglePrivacyDlpV2RecordConditionArgs) GooglePrivacyDlpV2RecordConditionPtrInput {
	return (*googlePrivacyDlpV2RecordConditionPtrType)(v)
}

func (*googlePrivacyDlpV2RecordConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2RecordCondition)(nil)).Elem()
}

func (i *googlePrivacyDlpV2RecordConditionPtrType) ToGooglePrivacyDlpV2RecordConditionPtrOutput() GooglePrivacyDlpV2RecordConditionPtrOutput {
	return i.ToGooglePrivacyDlpV2RecordConditionPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2RecordConditionPtrType) ToGooglePrivacyDlpV2RecordConditionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RecordConditionPtrOutput)
}

// A condition for determining whether a transformation should be applied to a field.
type GooglePrivacyDlpV2RecordConditionOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RecordConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RecordCondition)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RecordConditionOutput) ToGooglePrivacyDlpV2RecordConditionOutput() GooglePrivacyDlpV2RecordConditionOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordConditionOutput) ToGooglePrivacyDlpV2RecordConditionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordConditionOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordConditionOutput) ToGooglePrivacyDlpV2RecordConditionPtrOutput() GooglePrivacyDlpV2RecordConditionPtrOutput {
	return o.ToGooglePrivacyDlpV2RecordConditionPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2RecordConditionOutput) ToGooglePrivacyDlpV2RecordConditionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2RecordCondition) *GooglePrivacyDlpV2RecordCondition {
		return &v
	}).(GooglePrivacyDlpV2RecordConditionPtrOutput)
}

// An expression.
func (o GooglePrivacyDlpV2RecordConditionOutput) Expressions() GooglePrivacyDlpV2ExpressionsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RecordCondition) *GooglePrivacyDlpV2Expressions { return v.Expressions }).(GooglePrivacyDlpV2ExpressionsPtrOutput)
}

type GooglePrivacyDlpV2RecordConditionPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RecordConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2RecordCondition)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RecordConditionPtrOutput) ToGooglePrivacyDlpV2RecordConditionPtrOutput() GooglePrivacyDlpV2RecordConditionPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordConditionPtrOutput) ToGooglePrivacyDlpV2RecordConditionPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordConditionPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordConditionPtrOutput) Elem() GooglePrivacyDlpV2RecordConditionOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2RecordCondition) GooglePrivacyDlpV2RecordCondition {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2RecordCondition
		return ret
	}).(GooglePrivacyDlpV2RecordConditionOutput)
}

// An expression.
func (o GooglePrivacyDlpV2RecordConditionPtrOutput) Expressions() GooglePrivacyDlpV2ExpressionsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2RecordCondition) *GooglePrivacyDlpV2Expressions {
		if v == nil {
			return nil
		}
		return v.Expressions
	}).(GooglePrivacyDlpV2ExpressionsPtrOutput)
}

// A condition for determining whether a transformation should be applied to a field.
type GooglePrivacyDlpV2RecordConditionResponse struct {
	// An expression.
	Expressions GooglePrivacyDlpV2ExpressionsResponse `pulumi:"expressions"`
}

// A condition for determining whether a transformation should be applied to a field.
type GooglePrivacyDlpV2RecordConditionResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RecordConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RecordConditionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RecordConditionResponseOutput) ToGooglePrivacyDlpV2RecordConditionResponseOutput() GooglePrivacyDlpV2RecordConditionResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordConditionResponseOutput) ToGooglePrivacyDlpV2RecordConditionResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordConditionResponseOutput {
	return o
}

// An expression.
func (o GooglePrivacyDlpV2RecordConditionResponseOutput) Expressions() GooglePrivacyDlpV2ExpressionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RecordConditionResponse) GooglePrivacyDlpV2ExpressionsResponse {
		return v.Expressions
	}).(GooglePrivacyDlpV2ExpressionsResponseOutput)
}

// Configuration to suppress records whose suppression conditions evaluate to true.
type GooglePrivacyDlpV2RecordSuppression struct {
	// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
	Condition *GooglePrivacyDlpV2RecordCondition `pulumi:"condition"`
}

// GooglePrivacyDlpV2RecordSuppressionInput is an input type that accepts GooglePrivacyDlpV2RecordSuppressionArgs and GooglePrivacyDlpV2RecordSuppressionOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RecordSuppressionInput` via:
//
//	GooglePrivacyDlpV2RecordSuppressionArgs{...}
type GooglePrivacyDlpV2RecordSuppressionInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RecordSuppressionOutput() GooglePrivacyDlpV2RecordSuppressionOutput
	ToGooglePrivacyDlpV2RecordSuppressionOutputWithContext(context.Context) GooglePrivacyDlpV2RecordSuppressionOutput
}

// Configuration to suppress records whose suppression conditions evaluate to true.
type GooglePrivacyDlpV2RecordSuppressionArgs struct {
	// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
	Condition GooglePrivacyDlpV2RecordConditionPtrInput `pulumi:"condition"`
}

func (GooglePrivacyDlpV2RecordSuppressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RecordSuppression)(nil)).Elem()
}

func (i GooglePrivacyDlpV2RecordSuppressionArgs) ToGooglePrivacyDlpV2RecordSuppressionOutput() GooglePrivacyDlpV2RecordSuppressionOutput {
	return i.ToGooglePrivacyDlpV2RecordSuppressionOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RecordSuppressionArgs) ToGooglePrivacyDlpV2RecordSuppressionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordSuppressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RecordSuppressionOutput)
}

// GooglePrivacyDlpV2RecordSuppressionArrayInput is an input type that accepts GooglePrivacyDlpV2RecordSuppressionArray and GooglePrivacyDlpV2RecordSuppressionArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RecordSuppressionArrayInput` via:
//
//	GooglePrivacyDlpV2RecordSuppressionArray{ GooglePrivacyDlpV2RecordSuppressionArgs{...} }
type GooglePrivacyDlpV2RecordSuppressionArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RecordSuppressionArrayOutput() GooglePrivacyDlpV2RecordSuppressionArrayOutput
	ToGooglePrivacyDlpV2RecordSuppressionArrayOutputWithContext(context.Context) GooglePrivacyDlpV2RecordSuppressionArrayOutput
}

type GooglePrivacyDlpV2RecordSuppressionArray []GooglePrivacyDlpV2RecordSuppressionInput

func (GooglePrivacyDlpV2RecordSuppressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2RecordSuppression)(nil)).Elem()
}

func (i GooglePrivacyDlpV2RecordSuppressionArray) ToGooglePrivacyDlpV2RecordSuppressionArrayOutput() GooglePrivacyDlpV2RecordSuppressionArrayOutput {
	return i.ToGooglePrivacyDlpV2RecordSuppressionArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RecordSuppressionArray) ToGooglePrivacyDlpV2RecordSuppressionArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordSuppressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RecordSuppressionArrayOutput)
}

// Configuration to suppress records whose suppression conditions evaluate to true.
type GooglePrivacyDlpV2RecordSuppressionOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RecordSuppressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RecordSuppression)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RecordSuppressionOutput) ToGooglePrivacyDlpV2RecordSuppressionOutput() GooglePrivacyDlpV2RecordSuppressionOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordSuppressionOutput) ToGooglePrivacyDlpV2RecordSuppressionOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordSuppressionOutput {
	return o
}

// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
func (o GooglePrivacyDlpV2RecordSuppressionOutput) Condition() GooglePrivacyDlpV2RecordConditionPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RecordSuppression) *GooglePrivacyDlpV2RecordCondition { return v.Condition }).(GooglePrivacyDlpV2RecordConditionPtrOutput)
}

type GooglePrivacyDlpV2RecordSuppressionArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RecordSuppressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2RecordSuppression)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RecordSuppressionArrayOutput) ToGooglePrivacyDlpV2RecordSuppressionArrayOutput() GooglePrivacyDlpV2RecordSuppressionArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordSuppressionArrayOutput) ToGooglePrivacyDlpV2RecordSuppressionArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordSuppressionArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordSuppressionArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2RecordSuppressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2RecordSuppression {
		return vs[0].([]GooglePrivacyDlpV2RecordSuppression)[vs[1].(int)]
	}).(GooglePrivacyDlpV2RecordSuppressionOutput)
}

// Configuration to suppress records whose suppression conditions evaluate to true.
type GooglePrivacyDlpV2RecordSuppressionResponse struct {
	// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
	Condition GooglePrivacyDlpV2RecordConditionResponse `pulumi:"condition"`
}

// Configuration to suppress records whose suppression conditions evaluate to true.
type GooglePrivacyDlpV2RecordSuppressionResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RecordSuppressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RecordSuppressionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RecordSuppressionResponseOutput) ToGooglePrivacyDlpV2RecordSuppressionResponseOutput() GooglePrivacyDlpV2RecordSuppressionResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordSuppressionResponseOutput) ToGooglePrivacyDlpV2RecordSuppressionResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordSuppressionResponseOutput {
	return o
}

// A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.
func (o GooglePrivacyDlpV2RecordSuppressionResponseOutput) Condition() GooglePrivacyDlpV2RecordConditionResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RecordSuppressionResponse) GooglePrivacyDlpV2RecordConditionResponse {
		return v.Condition
	}).(GooglePrivacyDlpV2RecordConditionResponseOutput)
}

type GooglePrivacyDlpV2RecordSuppressionResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RecordSuppressionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2RecordSuppressionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RecordSuppressionResponseArrayOutput) ToGooglePrivacyDlpV2RecordSuppressionResponseArrayOutput() GooglePrivacyDlpV2RecordSuppressionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordSuppressionResponseArrayOutput) ToGooglePrivacyDlpV2RecordSuppressionResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordSuppressionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordSuppressionResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2RecordSuppressionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2RecordSuppressionResponse {
		return vs[0].([]GooglePrivacyDlpV2RecordSuppressionResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2RecordSuppressionResponseOutput)
}

// A type of transformation that is applied over structured data such as a table.
type GooglePrivacyDlpV2RecordTransformations struct {
	// Transform the record by applying various field transformations.
	FieldTransformations []GooglePrivacyDlpV2FieldTransformation `pulumi:"fieldTransformations"`
	// Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
	RecordSuppressions []GooglePrivacyDlpV2RecordSuppression `pulumi:"recordSuppressions"`
}

// GooglePrivacyDlpV2RecordTransformationsInput is an input type that accepts GooglePrivacyDlpV2RecordTransformationsArgs and GooglePrivacyDlpV2RecordTransformationsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RecordTransformationsInput` via:
//
//	GooglePrivacyDlpV2RecordTransformationsArgs{...}
type GooglePrivacyDlpV2RecordTransformationsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RecordTransformationsOutput() GooglePrivacyDlpV2RecordTransformationsOutput
	ToGooglePrivacyDlpV2RecordTransformationsOutputWithContext(context.Context) GooglePrivacyDlpV2RecordTransformationsOutput
}

// A type of transformation that is applied over structured data such as a table.
type GooglePrivacyDlpV2RecordTransformationsArgs struct {
	// Transform the record by applying various field transformations.
	FieldTransformations GooglePrivacyDlpV2FieldTransformationArrayInput `pulumi:"fieldTransformations"`
	// Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
	RecordSuppressions GooglePrivacyDlpV2RecordSuppressionArrayInput `pulumi:"recordSuppressions"`
}

func (GooglePrivacyDlpV2RecordTransformationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RecordTransformations)(nil)).Elem()
}

func (i GooglePrivacyDlpV2RecordTransformationsArgs) ToGooglePrivacyDlpV2RecordTransformationsOutput() GooglePrivacyDlpV2RecordTransformationsOutput {
	return i.ToGooglePrivacyDlpV2RecordTransformationsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RecordTransformationsArgs) ToGooglePrivacyDlpV2RecordTransformationsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordTransformationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RecordTransformationsOutput)
}

func (i GooglePrivacyDlpV2RecordTransformationsArgs) ToGooglePrivacyDlpV2RecordTransformationsPtrOutput() GooglePrivacyDlpV2RecordTransformationsPtrOutput {
	return i.ToGooglePrivacyDlpV2RecordTransformationsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RecordTransformationsArgs) ToGooglePrivacyDlpV2RecordTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordTransformationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RecordTransformationsOutput).ToGooglePrivacyDlpV2RecordTransformationsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2RecordTransformationsPtrInput is an input type that accepts GooglePrivacyDlpV2RecordTransformationsArgs, GooglePrivacyDlpV2RecordTransformationsPtr and GooglePrivacyDlpV2RecordTransformationsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RecordTransformationsPtrInput` via:
//
//	        GooglePrivacyDlpV2RecordTransformationsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2RecordTransformationsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RecordTransformationsPtrOutput() GooglePrivacyDlpV2RecordTransformationsPtrOutput
	ToGooglePrivacyDlpV2RecordTransformationsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2RecordTransformationsPtrOutput
}

type googlePrivacyDlpV2RecordTransformationsPtrType GooglePrivacyDlpV2RecordTransformationsArgs

func GooglePrivacyDlpV2RecordTransformationsPtr(v *GooglePrivacyDlpV2RecordTransformationsArgs) GooglePrivacyDlpV2RecordTransformationsPtrInput {
	return (*googlePrivacyDlpV2RecordTransformationsPtrType)(v)
}

func (*googlePrivacyDlpV2RecordTransformationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2RecordTransformations)(nil)).Elem()
}

func (i *googlePrivacyDlpV2RecordTransformationsPtrType) ToGooglePrivacyDlpV2RecordTransformationsPtrOutput() GooglePrivacyDlpV2RecordTransformationsPtrOutput {
	return i.ToGooglePrivacyDlpV2RecordTransformationsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2RecordTransformationsPtrType) ToGooglePrivacyDlpV2RecordTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordTransformationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RecordTransformationsPtrOutput)
}

// A type of transformation that is applied over structured data such as a table.
type GooglePrivacyDlpV2RecordTransformationsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RecordTransformationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RecordTransformations)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RecordTransformationsOutput) ToGooglePrivacyDlpV2RecordTransformationsOutput() GooglePrivacyDlpV2RecordTransformationsOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordTransformationsOutput) ToGooglePrivacyDlpV2RecordTransformationsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordTransformationsOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordTransformationsOutput) ToGooglePrivacyDlpV2RecordTransformationsPtrOutput() GooglePrivacyDlpV2RecordTransformationsPtrOutput {
	return o.ToGooglePrivacyDlpV2RecordTransformationsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2RecordTransformationsOutput) ToGooglePrivacyDlpV2RecordTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordTransformationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2RecordTransformations) *GooglePrivacyDlpV2RecordTransformations {
		return &v
	}).(GooglePrivacyDlpV2RecordTransformationsPtrOutput)
}

// Transform the record by applying various field transformations.
func (o GooglePrivacyDlpV2RecordTransformationsOutput) FieldTransformations() GooglePrivacyDlpV2FieldTransformationArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RecordTransformations) []GooglePrivacyDlpV2FieldTransformation {
		return v.FieldTransformations
	}).(GooglePrivacyDlpV2FieldTransformationArrayOutput)
}

// Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
func (o GooglePrivacyDlpV2RecordTransformationsOutput) RecordSuppressions() GooglePrivacyDlpV2RecordSuppressionArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RecordTransformations) []GooglePrivacyDlpV2RecordSuppression {
		return v.RecordSuppressions
	}).(GooglePrivacyDlpV2RecordSuppressionArrayOutput)
}

type GooglePrivacyDlpV2RecordTransformationsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RecordTransformationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2RecordTransformations)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RecordTransformationsPtrOutput) ToGooglePrivacyDlpV2RecordTransformationsPtrOutput() GooglePrivacyDlpV2RecordTransformationsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordTransformationsPtrOutput) ToGooglePrivacyDlpV2RecordTransformationsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordTransformationsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordTransformationsPtrOutput) Elem() GooglePrivacyDlpV2RecordTransformationsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2RecordTransformations) GooglePrivacyDlpV2RecordTransformations {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2RecordTransformations
		return ret
	}).(GooglePrivacyDlpV2RecordTransformationsOutput)
}

// Transform the record by applying various field transformations.
func (o GooglePrivacyDlpV2RecordTransformationsPtrOutput) FieldTransformations() GooglePrivacyDlpV2FieldTransformationArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2RecordTransformations) []GooglePrivacyDlpV2FieldTransformation {
		if v == nil {
			return nil
		}
		return v.FieldTransformations
	}).(GooglePrivacyDlpV2FieldTransformationArrayOutput)
}

// Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
func (o GooglePrivacyDlpV2RecordTransformationsPtrOutput) RecordSuppressions() GooglePrivacyDlpV2RecordSuppressionArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2RecordTransformations) []GooglePrivacyDlpV2RecordSuppression {
		if v == nil {
			return nil
		}
		return v.RecordSuppressions
	}).(GooglePrivacyDlpV2RecordSuppressionArrayOutput)
}

// A type of transformation that is applied over structured data such as a table.
type GooglePrivacyDlpV2RecordTransformationsResponse struct {
	// Transform the record by applying various field transformations.
	FieldTransformations []GooglePrivacyDlpV2FieldTransformationResponse `pulumi:"fieldTransformations"`
	// Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
	RecordSuppressions []GooglePrivacyDlpV2RecordSuppressionResponse `pulumi:"recordSuppressions"`
}

// A type of transformation that is applied over structured data such as a table.
type GooglePrivacyDlpV2RecordTransformationsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RecordTransformationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RecordTransformationsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RecordTransformationsResponseOutput) ToGooglePrivacyDlpV2RecordTransformationsResponseOutput() GooglePrivacyDlpV2RecordTransformationsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2RecordTransformationsResponseOutput) ToGooglePrivacyDlpV2RecordTransformationsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RecordTransformationsResponseOutput {
	return o
}

// Transform the record by applying various field transformations.
func (o GooglePrivacyDlpV2RecordTransformationsResponseOutput) FieldTransformations() GooglePrivacyDlpV2FieldTransformationResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RecordTransformationsResponse) []GooglePrivacyDlpV2FieldTransformationResponse {
		return v.FieldTransformations
	}).(GooglePrivacyDlpV2FieldTransformationResponseArrayOutput)
}

// Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.
func (o GooglePrivacyDlpV2RecordTransformationsResponseOutput) RecordSuppressions() GooglePrivacyDlpV2RecordSuppressionResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RecordTransformationsResponse) []GooglePrivacyDlpV2RecordSuppressionResponse {
		return v.RecordSuppressions
	}).(GooglePrivacyDlpV2RecordSuppressionResponseArrayOutput)
}

// Redact a given value. For example, if used with an `InfoTypeTransformation` transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.
type GooglePrivacyDlpV2RedactConfig struct {
}

// GooglePrivacyDlpV2RedactConfigInput is an input type that accepts GooglePrivacyDlpV2RedactConfigArgs and GooglePrivacyDlpV2RedactConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RedactConfigInput` via:
//
//	GooglePrivacyDlpV2RedactConfigArgs{...}
type GooglePrivacyDlpV2RedactConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RedactConfigOutput() GooglePrivacyDlpV2RedactConfigOutput
	ToGooglePrivacyDlpV2RedactConfigOutputWithContext(context.Context) GooglePrivacyDlpV2RedactConfigOutput
}

// Redact a given value. For example, if used with an `InfoTypeTransformation` transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.
type GooglePrivacyDlpV2RedactConfigArgs struct {
}

func (GooglePrivacyDlpV2RedactConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RedactConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2RedactConfigArgs) ToGooglePrivacyDlpV2RedactConfigOutput() GooglePrivacyDlpV2RedactConfigOutput {
	return i.ToGooglePrivacyDlpV2RedactConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RedactConfigArgs) ToGooglePrivacyDlpV2RedactConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RedactConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RedactConfigOutput)
}

func (i GooglePrivacyDlpV2RedactConfigArgs) ToGooglePrivacyDlpV2RedactConfigPtrOutput() GooglePrivacyDlpV2RedactConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2RedactConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RedactConfigArgs) ToGooglePrivacyDlpV2RedactConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RedactConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RedactConfigOutput).ToGooglePrivacyDlpV2RedactConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2RedactConfigPtrInput is an input type that accepts GooglePrivacyDlpV2RedactConfigArgs, GooglePrivacyDlpV2RedactConfigPtr and GooglePrivacyDlpV2RedactConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RedactConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2RedactConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2RedactConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RedactConfigPtrOutput() GooglePrivacyDlpV2RedactConfigPtrOutput
	ToGooglePrivacyDlpV2RedactConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2RedactConfigPtrOutput
}

type googlePrivacyDlpV2RedactConfigPtrType GooglePrivacyDlpV2RedactConfigArgs

func GooglePrivacyDlpV2RedactConfigPtr(v *GooglePrivacyDlpV2RedactConfigArgs) GooglePrivacyDlpV2RedactConfigPtrInput {
	return (*googlePrivacyDlpV2RedactConfigPtrType)(v)
}

func (*googlePrivacyDlpV2RedactConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2RedactConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2RedactConfigPtrType) ToGooglePrivacyDlpV2RedactConfigPtrOutput() GooglePrivacyDlpV2RedactConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2RedactConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2RedactConfigPtrType) ToGooglePrivacyDlpV2RedactConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RedactConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RedactConfigPtrOutput)
}

// Redact a given value. For example, if used with an `InfoTypeTransformation` transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.
type GooglePrivacyDlpV2RedactConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RedactConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RedactConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RedactConfigOutput) ToGooglePrivacyDlpV2RedactConfigOutput() GooglePrivacyDlpV2RedactConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2RedactConfigOutput) ToGooglePrivacyDlpV2RedactConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RedactConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2RedactConfigOutput) ToGooglePrivacyDlpV2RedactConfigPtrOutput() GooglePrivacyDlpV2RedactConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2RedactConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2RedactConfigOutput) ToGooglePrivacyDlpV2RedactConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RedactConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2RedactConfig) *GooglePrivacyDlpV2RedactConfig {
		return &v
	}).(GooglePrivacyDlpV2RedactConfigPtrOutput)
}

type GooglePrivacyDlpV2RedactConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RedactConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2RedactConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RedactConfigPtrOutput) ToGooglePrivacyDlpV2RedactConfigPtrOutput() GooglePrivacyDlpV2RedactConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2RedactConfigPtrOutput) ToGooglePrivacyDlpV2RedactConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RedactConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2RedactConfigPtrOutput) Elem() GooglePrivacyDlpV2RedactConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2RedactConfig) GooglePrivacyDlpV2RedactConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2RedactConfig
		return ret
	}).(GooglePrivacyDlpV2RedactConfigOutput)
}

// Redact a given value. For example, if used with an `InfoTypeTransformation` transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.
type GooglePrivacyDlpV2RedactConfigResponse struct {
}

// Redact a given value. For example, if used with an `InfoTypeTransformation` transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.
type GooglePrivacyDlpV2RedactConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RedactConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RedactConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RedactConfigResponseOutput) ToGooglePrivacyDlpV2RedactConfigResponseOutput() GooglePrivacyDlpV2RedactConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2RedactConfigResponseOutput) ToGooglePrivacyDlpV2RedactConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RedactConfigResponseOutput {
	return o
}

// Message defining a custom regular expression.
type GooglePrivacyDlpV2Regex struct {
	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes []int `pulumi:"groupIndexes"`
	// Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern *string `pulumi:"pattern"`
}

// GooglePrivacyDlpV2RegexInput is an input type that accepts GooglePrivacyDlpV2RegexArgs and GooglePrivacyDlpV2RegexOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RegexInput` via:
//
//	GooglePrivacyDlpV2RegexArgs{...}
type GooglePrivacyDlpV2RegexInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RegexOutput() GooglePrivacyDlpV2RegexOutput
	ToGooglePrivacyDlpV2RegexOutputWithContext(context.Context) GooglePrivacyDlpV2RegexOutput
}

// Message defining a custom regular expression.
type GooglePrivacyDlpV2RegexArgs struct {
	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes pulumi.IntArrayInput `pulumi:"groupIndexes"`
	// Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
}

func (GooglePrivacyDlpV2RegexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Regex)(nil)).Elem()
}

func (i GooglePrivacyDlpV2RegexArgs) ToGooglePrivacyDlpV2RegexOutput() GooglePrivacyDlpV2RegexOutput {
	return i.ToGooglePrivacyDlpV2RegexOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RegexArgs) ToGooglePrivacyDlpV2RegexOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RegexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RegexOutput)
}

func (i GooglePrivacyDlpV2RegexArgs) ToGooglePrivacyDlpV2RegexPtrOutput() GooglePrivacyDlpV2RegexPtrOutput {
	return i.ToGooglePrivacyDlpV2RegexPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RegexArgs) ToGooglePrivacyDlpV2RegexPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RegexPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RegexOutput).ToGooglePrivacyDlpV2RegexPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2RegexPtrInput is an input type that accepts GooglePrivacyDlpV2RegexArgs, GooglePrivacyDlpV2RegexPtr and GooglePrivacyDlpV2RegexPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RegexPtrInput` via:
//
//	        GooglePrivacyDlpV2RegexArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2RegexPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RegexPtrOutput() GooglePrivacyDlpV2RegexPtrOutput
	ToGooglePrivacyDlpV2RegexPtrOutputWithContext(context.Context) GooglePrivacyDlpV2RegexPtrOutput
}

type googlePrivacyDlpV2RegexPtrType GooglePrivacyDlpV2RegexArgs

func GooglePrivacyDlpV2RegexPtr(v *GooglePrivacyDlpV2RegexArgs) GooglePrivacyDlpV2RegexPtrInput {
	return (*googlePrivacyDlpV2RegexPtrType)(v)
}

func (*googlePrivacyDlpV2RegexPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Regex)(nil)).Elem()
}

func (i *googlePrivacyDlpV2RegexPtrType) ToGooglePrivacyDlpV2RegexPtrOutput() GooglePrivacyDlpV2RegexPtrOutput {
	return i.ToGooglePrivacyDlpV2RegexPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2RegexPtrType) ToGooglePrivacyDlpV2RegexPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RegexPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RegexPtrOutput)
}

// Message defining a custom regular expression.
type GooglePrivacyDlpV2RegexOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RegexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Regex)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RegexOutput) ToGooglePrivacyDlpV2RegexOutput() GooglePrivacyDlpV2RegexOutput {
	return o
}

func (o GooglePrivacyDlpV2RegexOutput) ToGooglePrivacyDlpV2RegexOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RegexOutput {
	return o
}

func (o GooglePrivacyDlpV2RegexOutput) ToGooglePrivacyDlpV2RegexPtrOutput() GooglePrivacyDlpV2RegexPtrOutput {
	return o.ToGooglePrivacyDlpV2RegexPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2RegexOutput) ToGooglePrivacyDlpV2RegexPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RegexPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Regex) *GooglePrivacyDlpV2Regex {
		return &v
	}).(GooglePrivacyDlpV2RegexPtrOutput)
}

// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
func (o GooglePrivacyDlpV2RegexOutput) GroupIndexes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Regex) []int { return v.GroupIndexes }).(pulumi.IntArrayOutput)
}

// Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
func (o GooglePrivacyDlpV2RegexOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Regex) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2RegexPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RegexPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Regex)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RegexPtrOutput) ToGooglePrivacyDlpV2RegexPtrOutput() GooglePrivacyDlpV2RegexPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2RegexPtrOutput) ToGooglePrivacyDlpV2RegexPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RegexPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2RegexPtrOutput) Elem() GooglePrivacyDlpV2RegexOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Regex) GooglePrivacyDlpV2Regex {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Regex
		return ret
	}).(GooglePrivacyDlpV2RegexOutput)
}

// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
func (o GooglePrivacyDlpV2RegexPtrOutput) GroupIndexes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Regex) []int {
		if v == nil {
			return nil
		}
		return v.GroupIndexes
	}).(pulumi.IntArrayOutput)
}

// Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
func (o GooglePrivacyDlpV2RegexPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Regex) *string {
		if v == nil {
			return nil
		}
		return v.Pattern
	}).(pulumi.StringPtrOutput)
}

// Message defining a custom regular expression.
type GooglePrivacyDlpV2RegexResponse struct {
	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	GroupIndexes []int `pulumi:"groupIndexes"`
	// Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	Pattern string `pulumi:"pattern"`
}

// Message defining a custom regular expression.
type GooglePrivacyDlpV2RegexResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RegexResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RegexResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RegexResponseOutput) ToGooglePrivacyDlpV2RegexResponseOutput() GooglePrivacyDlpV2RegexResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2RegexResponseOutput) ToGooglePrivacyDlpV2RegexResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RegexResponseOutput {
	return o
}

// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
func (o GooglePrivacyDlpV2RegexResponseOutput) GroupIndexes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RegexResponse) []int { return v.GroupIndexes }).(pulumi.IntArrayOutput)
}

// Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
func (o GooglePrivacyDlpV2RegexResponseOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RegexResponse) string { return v.Pattern }).(pulumi.StringOutput)
}

// Replace each input value with a value randomly selected from the dictionary.
type GooglePrivacyDlpV2ReplaceDictionaryConfig struct {
	// A list of words to select from for random replacement. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries.
	WordList *GooglePrivacyDlpV2WordList `pulumi:"wordList"`
}

// GooglePrivacyDlpV2ReplaceDictionaryConfigInput is an input type that accepts GooglePrivacyDlpV2ReplaceDictionaryConfigArgs and GooglePrivacyDlpV2ReplaceDictionaryConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ReplaceDictionaryConfigInput` via:
//
//	GooglePrivacyDlpV2ReplaceDictionaryConfigArgs{...}
type GooglePrivacyDlpV2ReplaceDictionaryConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ReplaceDictionaryConfigOutput() GooglePrivacyDlpV2ReplaceDictionaryConfigOutput
	ToGooglePrivacyDlpV2ReplaceDictionaryConfigOutputWithContext(context.Context) GooglePrivacyDlpV2ReplaceDictionaryConfigOutput
}

// Replace each input value with a value randomly selected from the dictionary.
type GooglePrivacyDlpV2ReplaceDictionaryConfigArgs struct {
	// A list of words to select from for random replacement. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries.
	WordList GooglePrivacyDlpV2WordListPtrInput `pulumi:"wordList"`
}

func (GooglePrivacyDlpV2ReplaceDictionaryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ReplaceDictionaryConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ReplaceDictionaryConfigArgs) ToGooglePrivacyDlpV2ReplaceDictionaryConfigOutput() GooglePrivacyDlpV2ReplaceDictionaryConfigOutput {
	return i.ToGooglePrivacyDlpV2ReplaceDictionaryConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ReplaceDictionaryConfigArgs) ToGooglePrivacyDlpV2ReplaceDictionaryConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceDictionaryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ReplaceDictionaryConfigOutput)
}

func (i GooglePrivacyDlpV2ReplaceDictionaryConfigArgs) ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput() GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ReplaceDictionaryConfigArgs) ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ReplaceDictionaryConfigOutput).ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ReplaceDictionaryConfigPtrInput is an input type that accepts GooglePrivacyDlpV2ReplaceDictionaryConfigArgs, GooglePrivacyDlpV2ReplaceDictionaryConfigPtr and GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ReplaceDictionaryConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2ReplaceDictionaryConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ReplaceDictionaryConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput() GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput
	ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput
}

type googlePrivacyDlpV2ReplaceDictionaryConfigPtrType GooglePrivacyDlpV2ReplaceDictionaryConfigArgs

func GooglePrivacyDlpV2ReplaceDictionaryConfigPtr(v *GooglePrivacyDlpV2ReplaceDictionaryConfigArgs) GooglePrivacyDlpV2ReplaceDictionaryConfigPtrInput {
	return (*googlePrivacyDlpV2ReplaceDictionaryConfigPtrType)(v)
}

func (*googlePrivacyDlpV2ReplaceDictionaryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ReplaceDictionaryConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ReplaceDictionaryConfigPtrType) ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput() GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ReplaceDictionaryConfigPtrType) ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput)
}

// Replace each input value with a value randomly selected from the dictionary.
type GooglePrivacyDlpV2ReplaceDictionaryConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ReplaceDictionaryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ReplaceDictionaryConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ReplaceDictionaryConfigOutput) ToGooglePrivacyDlpV2ReplaceDictionaryConfigOutput() GooglePrivacyDlpV2ReplaceDictionaryConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceDictionaryConfigOutput) ToGooglePrivacyDlpV2ReplaceDictionaryConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceDictionaryConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceDictionaryConfigOutput) ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput() GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ReplaceDictionaryConfigOutput) ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2ReplaceDictionaryConfig) *GooglePrivacyDlpV2ReplaceDictionaryConfig {
		return &v
	}).(GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput)
}

// A list of words to select from for random replacement. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries.
func (o GooglePrivacyDlpV2ReplaceDictionaryConfigOutput) WordList() GooglePrivacyDlpV2WordListPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ReplaceDictionaryConfig) *GooglePrivacyDlpV2WordList { return v.WordList }).(GooglePrivacyDlpV2WordListPtrOutput)
}

type GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ReplaceDictionaryConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput) ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput() GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput) ToGooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput) Elem() GooglePrivacyDlpV2ReplaceDictionaryConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ReplaceDictionaryConfig) GooglePrivacyDlpV2ReplaceDictionaryConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2ReplaceDictionaryConfig
		return ret
	}).(GooglePrivacyDlpV2ReplaceDictionaryConfigOutput)
}

// A list of words to select from for random replacement. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries.
func (o GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput) WordList() GooglePrivacyDlpV2WordListPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ReplaceDictionaryConfig) *GooglePrivacyDlpV2WordList {
		if v == nil {
			return nil
		}
		return v.WordList
	}).(GooglePrivacyDlpV2WordListPtrOutput)
}

// Replace each input value with a value randomly selected from the dictionary.
type GooglePrivacyDlpV2ReplaceDictionaryConfigResponse struct {
	// A list of words to select from for random replacement. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries.
	WordList GooglePrivacyDlpV2WordListResponse `pulumi:"wordList"`
}

// Replace each input value with a value randomly selected from the dictionary.
type GooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ReplaceDictionaryConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput) ToGooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput() GooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput) ToGooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput {
	return o
}

// A list of words to select from for random replacement. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries.
func (o GooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput) WordList() GooglePrivacyDlpV2WordListResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ReplaceDictionaryConfigResponse) GooglePrivacyDlpV2WordListResponse {
		return v.WordList
	}).(GooglePrivacyDlpV2WordListResponseOutput)
}

// Replace each input value with a given `Value`.
type GooglePrivacyDlpV2ReplaceValueConfig struct {
	// Value to replace it with.
	NewValue *GooglePrivacyDlpV2Value `pulumi:"newValue"`
}

// GooglePrivacyDlpV2ReplaceValueConfigInput is an input type that accepts GooglePrivacyDlpV2ReplaceValueConfigArgs and GooglePrivacyDlpV2ReplaceValueConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ReplaceValueConfigInput` via:
//
//	GooglePrivacyDlpV2ReplaceValueConfigArgs{...}
type GooglePrivacyDlpV2ReplaceValueConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ReplaceValueConfigOutput() GooglePrivacyDlpV2ReplaceValueConfigOutput
	ToGooglePrivacyDlpV2ReplaceValueConfigOutputWithContext(context.Context) GooglePrivacyDlpV2ReplaceValueConfigOutput
}

// Replace each input value with a given `Value`.
type GooglePrivacyDlpV2ReplaceValueConfigArgs struct {
	// Value to replace it with.
	NewValue GooglePrivacyDlpV2ValuePtrInput `pulumi:"newValue"`
}

func (GooglePrivacyDlpV2ReplaceValueConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ReplaceValueConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ReplaceValueConfigArgs) ToGooglePrivacyDlpV2ReplaceValueConfigOutput() GooglePrivacyDlpV2ReplaceValueConfigOutput {
	return i.ToGooglePrivacyDlpV2ReplaceValueConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ReplaceValueConfigArgs) ToGooglePrivacyDlpV2ReplaceValueConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceValueConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ReplaceValueConfigOutput)
}

func (i GooglePrivacyDlpV2ReplaceValueConfigArgs) ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutput() GooglePrivacyDlpV2ReplaceValueConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ReplaceValueConfigArgs) ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceValueConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ReplaceValueConfigOutput).ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ReplaceValueConfigPtrInput is an input type that accepts GooglePrivacyDlpV2ReplaceValueConfigArgs, GooglePrivacyDlpV2ReplaceValueConfigPtr and GooglePrivacyDlpV2ReplaceValueConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ReplaceValueConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2ReplaceValueConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ReplaceValueConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutput() GooglePrivacyDlpV2ReplaceValueConfigPtrOutput
	ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ReplaceValueConfigPtrOutput
}

type googlePrivacyDlpV2ReplaceValueConfigPtrType GooglePrivacyDlpV2ReplaceValueConfigArgs

func GooglePrivacyDlpV2ReplaceValueConfigPtr(v *GooglePrivacyDlpV2ReplaceValueConfigArgs) GooglePrivacyDlpV2ReplaceValueConfigPtrInput {
	return (*googlePrivacyDlpV2ReplaceValueConfigPtrType)(v)
}

func (*googlePrivacyDlpV2ReplaceValueConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ReplaceValueConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ReplaceValueConfigPtrType) ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutput() GooglePrivacyDlpV2ReplaceValueConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ReplaceValueConfigPtrType) ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceValueConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ReplaceValueConfigPtrOutput)
}

// Replace each input value with a given `Value`.
type GooglePrivacyDlpV2ReplaceValueConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ReplaceValueConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ReplaceValueConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ReplaceValueConfigOutput) ToGooglePrivacyDlpV2ReplaceValueConfigOutput() GooglePrivacyDlpV2ReplaceValueConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceValueConfigOutput) ToGooglePrivacyDlpV2ReplaceValueConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceValueConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceValueConfigOutput) ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutput() GooglePrivacyDlpV2ReplaceValueConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ReplaceValueConfigOutput) ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceValueConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2ReplaceValueConfig) *GooglePrivacyDlpV2ReplaceValueConfig {
		return &v
	}).(GooglePrivacyDlpV2ReplaceValueConfigPtrOutput)
}

// Value to replace it with.
func (o GooglePrivacyDlpV2ReplaceValueConfigOutput) NewValue() GooglePrivacyDlpV2ValuePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ReplaceValueConfig) *GooglePrivacyDlpV2Value { return v.NewValue }).(GooglePrivacyDlpV2ValuePtrOutput)
}

type GooglePrivacyDlpV2ReplaceValueConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ReplaceValueConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ReplaceValueConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ReplaceValueConfigPtrOutput) ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutput() GooglePrivacyDlpV2ReplaceValueConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceValueConfigPtrOutput) ToGooglePrivacyDlpV2ReplaceValueConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceValueConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceValueConfigPtrOutput) Elem() GooglePrivacyDlpV2ReplaceValueConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ReplaceValueConfig) GooglePrivacyDlpV2ReplaceValueConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2ReplaceValueConfig
		return ret
	}).(GooglePrivacyDlpV2ReplaceValueConfigOutput)
}

// Value to replace it with.
func (o GooglePrivacyDlpV2ReplaceValueConfigPtrOutput) NewValue() GooglePrivacyDlpV2ValuePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ReplaceValueConfig) *GooglePrivacyDlpV2Value {
		if v == nil {
			return nil
		}
		return v.NewValue
	}).(GooglePrivacyDlpV2ValuePtrOutput)
}

// Replace each input value with a given `Value`.
type GooglePrivacyDlpV2ReplaceValueConfigResponse struct {
	// Value to replace it with.
	NewValue GooglePrivacyDlpV2ValueResponse `pulumi:"newValue"`
}

// Replace each input value with a given `Value`.
type GooglePrivacyDlpV2ReplaceValueConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ReplaceValueConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ReplaceValueConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ReplaceValueConfigResponseOutput) ToGooglePrivacyDlpV2ReplaceValueConfigResponseOutput() GooglePrivacyDlpV2ReplaceValueConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceValueConfigResponseOutput) ToGooglePrivacyDlpV2ReplaceValueConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceValueConfigResponseOutput {
	return o
}

// Value to replace it with.
func (o GooglePrivacyDlpV2ReplaceValueConfigResponseOutput) NewValue() GooglePrivacyDlpV2ValueResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ReplaceValueConfigResponse) GooglePrivacyDlpV2ValueResponse {
		return v.NewValue
	}).(GooglePrivacyDlpV2ValueResponseOutput)
}

// Replace each matching finding with the name of the info_type.
type GooglePrivacyDlpV2ReplaceWithInfoTypeConfig struct {
}

// GooglePrivacyDlpV2ReplaceWithInfoTypeConfigInput is an input type that accepts GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs and GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ReplaceWithInfoTypeConfigInput` via:
//
//	GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs{...}
type GooglePrivacyDlpV2ReplaceWithInfoTypeConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput
	ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutputWithContext(context.Context) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput
}

// Replace each matching finding with the name of the info_type.
type GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs struct {
}

func (GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ReplaceWithInfoTypeConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput {
	return i.ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput)
}

func (i GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput).ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrInput is an input type that accepts GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs, GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtr and GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput
	ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput
}

type googlePrivacyDlpV2ReplaceWithInfoTypeConfigPtrType GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs

func GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtr(v *GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrInput {
	return (*googlePrivacyDlpV2ReplaceWithInfoTypeConfigPtrType)(v)
}

func (*googlePrivacyDlpV2ReplaceWithInfoTypeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ReplaceWithInfoTypeConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ReplaceWithInfoTypeConfigPtrType) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ReplaceWithInfoTypeConfigPtrType) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput)
}

// Replace each matching finding with the name of the info_type.
type GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ReplaceWithInfoTypeConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2ReplaceWithInfoTypeConfig) *GooglePrivacyDlpV2ReplaceWithInfoTypeConfig {
		return &v
	}).(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput)
}

type GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ReplaceWithInfoTypeConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput) Elem() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ReplaceWithInfoTypeConfig) GooglePrivacyDlpV2ReplaceWithInfoTypeConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2ReplaceWithInfoTypeConfig
		return ret
	}).(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput)
}

// Replace each matching finding with the name of the info_type.
type GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponse struct {
}

// Replace each matching finding with the name of the info_type.
type GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutput) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutput() GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutput) ToGooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutput {
	return o
}

// De-identification options.
type GooglePrivacyDlpV2RequestedDeidentifyOptionsResponse struct {
	// Snapshot of the state of the `DeidentifyTemplate` from the Deidentify action at the time this job was run.
	SnapshotDeidentifyTemplate GooglePrivacyDlpV2DeidentifyTemplateResponse `pulumi:"snapshotDeidentifyTemplate"`
	// Snapshot of the state of the image transformation `DeidentifyTemplate` from the `Deidentify` action at the time this job was run.
	SnapshotImageRedactTemplate GooglePrivacyDlpV2DeidentifyTemplateResponse `pulumi:"snapshotImageRedactTemplate"`
	// Snapshot of the state of the structured `DeidentifyTemplate` from the `Deidentify` action at the time this job was run.
	SnapshotStructuredDeidentifyTemplate GooglePrivacyDlpV2DeidentifyTemplateResponse `pulumi:"snapshotStructuredDeidentifyTemplate"`
}

// De-identification options.
type GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RequestedDeidentifyOptionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput) ToGooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput() GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput) ToGooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput {
	return o
}

// Snapshot of the state of the `DeidentifyTemplate` from the Deidentify action at the time this job was run.
func (o GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput) SnapshotDeidentifyTemplate() GooglePrivacyDlpV2DeidentifyTemplateResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RequestedDeidentifyOptionsResponse) GooglePrivacyDlpV2DeidentifyTemplateResponse {
		return v.SnapshotDeidentifyTemplate
	}).(GooglePrivacyDlpV2DeidentifyTemplateResponseOutput)
}

// Snapshot of the state of the image transformation `DeidentifyTemplate` from the `Deidentify` action at the time this job was run.
func (o GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput) SnapshotImageRedactTemplate() GooglePrivacyDlpV2DeidentifyTemplateResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RequestedDeidentifyOptionsResponse) GooglePrivacyDlpV2DeidentifyTemplateResponse {
		return v.SnapshotImageRedactTemplate
	}).(GooglePrivacyDlpV2DeidentifyTemplateResponseOutput)
}

// Snapshot of the state of the structured `DeidentifyTemplate` from the `Deidentify` action at the time this job was run.
func (o GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput) SnapshotStructuredDeidentifyTemplate() GooglePrivacyDlpV2DeidentifyTemplateResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RequestedDeidentifyOptionsResponse) GooglePrivacyDlpV2DeidentifyTemplateResponse {
		return v.SnapshotStructuredDeidentifyTemplate
	}).(GooglePrivacyDlpV2DeidentifyTemplateResponseOutput)
}

// Snapshot of the inspection configuration.
type GooglePrivacyDlpV2RequestedOptionsResponse struct {
	// Inspect config.
	JobConfig GooglePrivacyDlpV2InspectJobConfigResponse `pulumi:"jobConfig"`
	// If run with an InspectTemplate, a snapshot of its state at the time of this run.
	SnapshotInspectTemplate GooglePrivacyDlpV2InspectTemplateResponse `pulumi:"snapshotInspectTemplate"`
}

// Snapshot of the inspection configuration.
type GooglePrivacyDlpV2RequestedOptionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RequestedOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RequestedOptionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RequestedOptionsResponseOutput) ToGooglePrivacyDlpV2RequestedOptionsResponseOutput() GooglePrivacyDlpV2RequestedOptionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2RequestedOptionsResponseOutput) ToGooglePrivacyDlpV2RequestedOptionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RequestedOptionsResponseOutput {
	return o
}

// Inspect config.
func (o GooglePrivacyDlpV2RequestedOptionsResponseOutput) JobConfig() GooglePrivacyDlpV2InspectJobConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RequestedOptionsResponse) GooglePrivacyDlpV2InspectJobConfigResponse {
		return v.JobConfig
	}).(GooglePrivacyDlpV2InspectJobConfigResponseOutput)
}

// If run with an InspectTemplate, a snapshot of its state at the time of this run.
func (o GooglePrivacyDlpV2RequestedOptionsResponseOutput) SnapshotInspectTemplate() GooglePrivacyDlpV2InspectTemplateResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RequestedOptionsResponse) GooglePrivacyDlpV2InspectTemplateResponse {
		return v.SnapshotInspectTemplate
	}).(GooglePrivacyDlpV2InspectTemplateResponseOutput)
}

// Risk analysis options.
type GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponse struct {
	// The job config for the risk job.
	JobConfig GooglePrivacyDlpV2RiskAnalysisJobConfigResponse `pulumi:"jobConfig"`
}

// Risk analysis options.
type GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput) ToGooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput() GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput) ToGooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput {
	return o
}

// The job config for the risk job.
func (o GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput) JobConfig() GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponse) GooglePrivacyDlpV2RiskAnalysisJobConfigResponse {
		return v.JobConfig
	}).(GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput)
}

// All result fields mentioned below are updated while the job is processing.
type GooglePrivacyDlpV2ResultResponse struct {
	// Statistics related to the processing of hybrid inspect.
	HybridStats GooglePrivacyDlpV2HybridInspectStatisticsResponse `pulumi:"hybridStats"`
	// Statistics of how many instances of each info type were found during inspect job.
	InfoTypeStats []GooglePrivacyDlpV2InfoTypeStatsResponse `pulumi:"infoTypeStats"`
	// Total size in bytes that were processed.
	ProcessedBytes string `pulumi:"processedBytes"`
	// Estimate of the number of bytes to process.
	TotalEstimatedBytes string `pulumi:"totalEstimatedBytes"`
}

// All result fields mentioned below are updated while the job is processing.
type GooglePrivacyDlpV2ResultResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ResultResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ResultResponseOutput) ToGooglePrivacyDlpV2ResultResponseOutput() GooglePrivacyDlpV2ResultResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ResultResponseOutput) ToGooglePrivacyDlpV2ResultResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ResultResponseOutput {
	return o
}

// Statistics related to the processing of hybrid inspect.
func (o GooglePrivacyDlpV2ResultResponseOutput) HybridStats() GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ResultResponse) GooglePrivacyDlpV2HybridInspectStatisticsResponse {
		return v.HybridStats
	}).(GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput)
}

// Statistics of how many instances of each info type were found during inspect job.
func (o GooglePrivacyDlpV2ResultResponseOutput) InfoTypeStats() GooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ResultResponse) []GooglePrivacyDlpV2InfoTypeStatsResponse {
		return v.InfoTypeStats
	}).(GooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput)
}

// Total size in bytes that were processed.
func (o GooglePrivacyDlpV2ResultResponseOutput) ProcessedBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ResultResponse) string { return v.ProcessedBytes }).(pulumi.StringOutput)
}

// Estimate of the number of bytes to process.
func (o GooglePrivacyDlpV2ResultResponseOutput) TotalEstimatedBytes() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ResultResponse) string { return v.TotalEstimatedBytes }).(pulumi.StringOutput)
}

// Configuration for a risk analysis job. See https://cloud.google.com/dlp/docs/concepts-risk-analysis to learn more.
type GooglePrivacyDlpV2RiskAnalysisJobConfig struct {
	// Actions to execute at the completion of the job. Are executed in the order provided.
	Actions []GooglePrivacyDlpV2Action `pulumi:"actions"`
	// Privacy metric to compute.
	PrivacyMetric *GooglePrivacyDlpV2PrivacyMetric `pulumi:"privacyMetric"`
	// Input dataset to compute metrics over.
	SourceTable *GooglePrivacyDlpV2BigQueryTable `pulumi:"sourceTable"`
}

// GooglePrivacyDlpV2RiskAnalysisJobConfigInput is an input type that accepts GooglePrivacyDlpV2RiskAnalysisJobConfigArgs and GooglePrivacyDlpV2RiskAnalysisJobConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RiskAnalysisJobConfigInput` via:
//
//	GooglePrivacyDlpV2RiskAnalysisJobConfigArgs{...}
type GooglePrivacyDlpV2RiskAnalysisJobConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RiskAnalysisJobConfigOutput() GooglePrivacyDlpV2RiskAnalysisJobConfigOutput
	ToGooglePrivacyDlpV2RiskAnalysisJobConfigOutputWithContext(context.Context) GooglePrivacyDlpV2RiskAnalysisJobConfigOutput
}

// Configuration for a risk analysis job. See https://cloud.google.com/dlp/docs/concepts-risk-analysis to learn more.
type GooglePrivacyDlpV2RiskAnalysisJobConfigArgs struct {
	// Actions to execute at the completion of the job. Are executed in the order provided.
	Actions GooglePrivacyDlpV2ActionArrayInput `pulumi:"actions"`
	// Privacy metric to compute.
	PrivacyMetric GooglePrivacyDlpV2PrivacyMetricPtrInput `pulumi:"privacyMetric"`
	// Input dataset to compute metrics over.
	SourceTable GooglePrivacyDlpV2BigQueryTablePtrInput `pulumi:"sourceTable"`
}

func (GooglePrivacyDlpV2RiskAnalysisJobConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RiskAnalysisJobConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2RiskAnalysisJobConfigArgs) ToGooglePrivacyDlpV2RiskAnalysisJobConfigOutput() GooglePrivacyDlpV2RiskAnalysisJobConfigOutput {
	return i.ToGooglePrivacyDlpV2RiskAnalysisJobConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RiskAnalysisJobConfigArgs) ToGooglePrivacyDlpV2RiskAnalysisJobConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RiskAnalysisJobConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RiskAnalysisJobConfigOutput)
}

func (i GooglePrivacyDlpV2RiskAnalysisJobConfigArgs) ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput() GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2RiskAnalysisJobConfigArgs) ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RiskAnalysisJobConfigOutput).ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2RiskAnalysisJobConfigPtrInput is an input type that accepts GooglePrivacyDlpV2RiskAnalysisJobConfigArgs, GooglePrivacyDlpV2RiskAnalysisJobConfigPtr and GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2RiskAnalysisJobConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2RiskAnalysisJobConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2RiskAnalysisJobConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput() GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput
	ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput
}

type googlePrivacyDlpV2RiskAnalysisJobConfigPtrType GooglePrivacyDlpV2RiskAnalysisJobConfigArgs

func GooglePrivacyDlpV2RiskAnalysisJobConfigPtr(v *GooglePrivacyDlpV2RiskAnalysisJobConfigArgs) GooglePrivacyDlpV2RiskAnalysisJobConfigPtrInput {
	return (*googlePrivacyDlpV2RiskAnalysisJobConfigPtrType)(v)
}

func (*googlePrivacyDlpV2RiskAnalysisJobConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2RiskAnalysisJobConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2RiskAnalysisJobConfigPtrType) ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput() GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2RiskAnalysisJobConfigPtrType) ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput)
}

// Configuration for a risk analysis job. See https://cloud.google.com/dlp/docs/concepts-risk-analysis to learn more.
type GooglePrivacyDlpV2RiskAnalysisJobConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RiskAnalysisJobConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RiskAnalysisJobConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RiskAnalysisJobConfigOutput) ToGooglePrivacyDlpV2RiskAnalysisJobConfigOutput() GooglePrivacyDlpV2RiskAnalysisJobConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2RiskAnalysisJobConfigOutput) ToGooglePrivacyDlpV2RiskAnalysisJobConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RiskAnalysisJobConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2RiskAnalysisJobConfigOutput) ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput() GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2RiskAnalysisJobConfigOutput) ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2RiskAnalysisJobConfig) *GooglePrivacyDlpV2RiskAnalysisJobConfig {
		return &v
	}).(GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput)
}

// Actions to execute at the completion of the job. Are executed in the order provided.
func (o GooglePrivacyDlpV2RiskAnalysisJobConfigOutput) Actions() GooglePrivacyDlpV2ActionArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RiskAnalysisJobConfig) []GooglePrivacyDlpV2Action { return v.Actions }).(GooglePrivacyDlpV2ActionArrayOutput)
}

// Privacy metric to compute.
func (o GooglePrivacyDlpV2RiskAnalysisJobConfigOutput) PrivacyMetric() GooglePrivacyDlpV2PrivacyMetricPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RiskAnalysisJobConfig) *GooglePrivacyDlpV2PrivacyMetric {
		return v.PrivacyMetric
	}).(GooglePrivacyDlpV2PrivacyMetricPtrOutput)
}

// Input dataset to compute metrics over.
func (o GooglePrivacyDlpV2RiskAnalysisJobConfigOutput) SourceTable() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RiskAnalysisJobConfig) *GooglePrivacyDlpV2BigQueryTable { return v.SourceTable }).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

type GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2RiskAnalysisJobConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput) ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput() GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput) ToGooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput) Elem() GooglePrivacyDlpV2RiskAnalysisJobConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2RiskAnalysisJobConfig) GooglePrivacyDlpV2RiskAnalysisJobConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2RiskAnalysisJobConfig
		return ret
	}).(GooglePrivacyDlpV2RiskAnalysisJobConfigOutput)
}

// Actions to execute at the completion of the job. Are executed in the order provided.
func (o GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput) Actions() GooglePrivacyDlpV2ActionArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2RiskAnalysisJobConfig) []GooglePrivacyDlpV2Action {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(GooglePrivacyDlpV2ActionArrayOutput)
}

// Privacy metric to compute.
func (o GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput) PrivacyMetric() GooglePrivacyDlpV2PrivacyMetricPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2RiskAnalysisJobConfig) *GooglePrivacyDlpV2PrivacyMetric {
		if v == nil {
			return nil
		}
		return v.PrivacyMetric
	}).(GooglePrivacyDlpV2PrivacyMetricPtrOutput)
}

// Input dataset to compute metrics over.
func (o GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput) SourceTable() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2RiskAnalysisJobConfig) *GooglePrivacyDlpV2BigQueryTable {
		if v == nil {
			return nil
		}
		return v.SourceTable
	}).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

// Configuration for a risk analysis job. See https://cloud.google.com/dlp/docs/concepts-risk-analysis to learn more.
type GooglePrivacyDlpV2RiskAnalysisJobConfigResponse struct {
	// Actions to execute at the completion of the job. Are executed in the order provided.
	Actions []GooglePrivacyDlpV2ActionResponse `pulumi:"actions"`
	// Privacy metric to compute.
	PrivacyMetric GooglePrivacyDlpV2PrivacyMetricResponse `pulumi:"privacyMetric"`
	// Input dataset to compute metrics over.
	SourceTable GooglePrivacyDlpV2BigQueryTableResponse `pulumi:"sourceTable"`
}

// Configuration for a risk analysis job. See https://cloud.google.com/dlp/docs/concepts-risk-analysis to learn more.
type GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2RiskAnalysisJobConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput) ToGooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput() GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput) ToGooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput {
	return o
}

// Actions to execute at the completion of the job. Are executed in the order provided.
func (o GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput) Actions() GooglePrivacyDlpV2ActionResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RiskAnalysisJobConfigResponse) []GooglePrivacyDlpV2ActionResponse {
		return v.Actions
	}).(GooglePrivacyDlpV2ActionResponseArrayOutput)
}

// Privacy metric to compute.
func (o GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput) PrivacyMetric() GooglePrivacyDlpV2PrivacyMetricResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RiskAnalysisJobConfigResponse) GooglePrivacyDlpV2PrivacyMetricResponse {
		return v.PrivacyMetric
	}).(GooglePrivacyDlpV2PrivacyMetricResponseOutput)
}

// Input dataset to compute metrics over.
func (o GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput) SourceTable() GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2RiskAnalysisJobConfigResponse) GooglePrivacyDlpV2BigQueryTableResponse {
		return v.SourceTable
	}).(GooglePrivacyDlpV2BigQueryTableResponseOutput)
}

// If set, the detailed findings will be persisted to the specified OutputStorageConfig. Only a single instance of this action can be specified. Compatible with: Inspect, Risk
type GooglePrivacyDlpV2SaveFindings struct {
	// Location to store findings outside of DLP.
	OutputConfig *GooglePrivacyDlpV2OutputStorageConfig `pulumi:"outputConfig"`
}

// GooglePrivacyDlpV2SaveFindingsInput is an input type that accepts GooglePrivacyDlpV2SaveFindingsArgs and GooglePrivacyDlpV2SaveFindingsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2SaveFindingsInput` via:
//
//	GooglePrivacyDlpV2SaveFindingsArgs{...}
type GooglePrivacyDlpV2SaveFindingsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2SaveFindingsOutput() GooglePrivacyDlpV2SaveFindingsOutput
	ToGooglePrivacyDlpV2SaveFindingsOutputWithContext(context.Context) GooglePrivacyDlpV2SaveFindingsOutput
}

// If set, the detailed findings will be persisted to the specified OutputStorageConfig. Only a single instance of this action can be specified. Compatible with: Inspect, Risk
type GooglePrivacyDlpV2SaveFindingsArgs struct {
	// Location to store findings outside of DLP.
	OutputConfig GooglePrivacyDlpV2OutputStorageConfigPtrInput `pulumi:"outputConfig"`
}

func (GooglePrivacyDlpV2SaveFindingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SaveFindings)(nil)).Elem()
}

func (i GooglePrivacyDlpV2SaveFindingsArgs) ToGooglePrivacyDlpV2SaveFindingsOutput() GooglePrivacyDlpV2SaveFindingsOutput {
	return i.ToGooglePrivacyDlpV2SaveFindingsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2SaveFindingsArgs) ToGooglePrivacyDlpV2SaveFindingsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SaveFindingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SaveFindingsOutput)
}

func (i GooglePrivacyDlpV2SaveFindingsArgs) ToGooglePrivacyDlpV2SaveFindingsPtrOutput() GooglePrivacyDlpV2SaveFindingsPtrOutput {
	return i.ToGooglePrivacyDlpV2SaveFindingsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2SaveFindingsArgs) ToGooglePrivacyDlpV2SaveFindingsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SaveFindingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SaveFindingsOutput).ToGooglePrivacyDlpV2SaveFindingsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2SaveFindingsPtrInput is an input type that accepts GooglePrivacyDlpV2SaveFindingsArgs, GooglePrivacyDlpV2SaveFindingsPtr and GooglePrivacyDlpV2SaveFindingsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2SaveFindingsPtrInput` via:
//
//	        GooglePrivacyDlpV2SaveFindingsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2SaveFindingsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2SaveFindingsPtrOutput() GooglePrivacyDlpV2SaveFindingsPtrOutput
	ToGooglePrivacyDlpV2SaveFindingsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2SaveFindingsPtrOutput
}

type googlePrivacyDlpV2SaveFindingsPtrType GooglePrivacyDlpV2SaveFindingsArgs

func GooglePrivacyDlpV2SaveFindingsPtr(v *GooglePrivacyDlpV2SaveFindingsArgs) GooglePrivacyDlpV2SaveFindingsPtrInput {
	return (*googlePrivacyDlpV2SaveFindingsPtrType)(v)
}

func (*googlePrivacyDlpV2SaveFindingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2SaveFindings)(nil)).Elem()
}

func (i *googlePrivacyDlpV2SaveFindingsPtrType) ToGooglePrivacyDlpV2SaveFindingsPtrOutput() GooglePrivacyDlpV2SaveFindingsPtrOutput {
	return i.ToGooglePrivacyDlpV2SaveFindingsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2SaveFindingsPtrType) ToGooglePrivacyDlpV2SaveFindingsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SaveFindingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SaveFindingsPtrOutput)
}

// If set, the detailed findings will be persisted to the specified OutputStorageConfig. Only a single instance of this action can be specified. Compatible with: Inspect, Risk
type GooglePrivacyDlpV2SaveFindingsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SaveFindingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SaveFindings)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SaveFindingsOutput) ToGooglePrivacyDlpV2SaveFindingsOutput() GooglePrivacyDlpV2SaveFindingsOutput {
	return o
}

func (o GooglePrivacyDlpV2SaveFindingsOutput) ToGooglePrivacyDlpV2SaveFindingsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SaveFindingsOutput {
	return o
}

func (o GooglePrivacyDlpV2SaveFindingsOutput) ToGooglePrivacyDlpV2SaveFindingsPtrOutput() GooglePrivacyDlpV2SaveFindingsPtrOutput {
	return o.ToGooglePrivacyDlpV2SaveFindingsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2SaveFindingsOutput) ToGooglePrivacyDlpV2SaveFindingsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SaveFindingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2SaveFindings) *GooglePrivacyDlpV2SaveFindings {
		return &v
	}).(GooglePrivacyDlpV2SaveFindingsPtrOutput)
}

// Location to store findings outside of DLP.
func (o GooglePrivacyDlpV2SaveFindingsOutput) OutputConfig() GooglePrivacyDlpV2OutputStorageConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2SaveFindings) *GooglePrivacyDlpV2OutputStorageConfig { return v.OutputConfig }).(GooglePrivacyDlpV2OutputStorageConfigPtrOutput)
}

type GooglePrivacyDlpV2SaveFindingsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SaveFindingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2SaveFindings)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SaveFindingsPtrOutput) ToGooglePrivacyDlpV2SaveFindingsPtrOutput() GooglePrivacyDlpV2SaveFindingsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2SaveFindingsPtrOutput) ToGooglePrivacyDlpV2SaveFindingsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SaveFindingsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2SaveFindingsPtrOutput) Elem() GooglePrivacyDlpV2SaveFindingsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2SaveFindings) GooglePrivacyDlpV2SaveFindings {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2SaveFindings
		return ret
	}).(GooglePrivacyDlpV2SaveFindingsOutput)
}

// Location to store findings outside of DLP.
func (o GooglePrivacyDlpV2SaveFindingsPtrOutput) OutputConfig() GooglePrivacyDlpV2OutputStorageConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2SaveFindings) *GooglePrivacyDlpV2OutputStorageConfig {
		if v == nil {
			return nil
		}
		return v.OutputConfig
	}).(GooglePrivacyDlpV2OutputStorageConfigPtrOutput)
}

// If set, the detailed findings will be persisted to the specified OutputStorageConfig. Only a single instance of this action can be specified. Compatible with: Inspect, Risk
type GooglePrivacyDlpV2SaveFindingsResponse struct {
	// Location to store findings outside of DLP.
	OutputConfig GooglePrivacyDlpV2OutputStorageConfigResponse `pulumi:"outputConfig"`
}

// If set, the detailed findings will be persisted to the specified OutputStorageConfig. Only a single instance of this action can be specified. Compatible with: Inspect, Risk
type GooglePrivacyDlpV2SaveFindingsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SaveFindingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SaveFindingsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SaveFindingsResponseOutput) ToGooglePrivacyDlpV2SaveFindingsResponseOutput() GooglePrivacyDlpV2SaveFindingsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2SaveFindingsResponseOutput) ToGooglePrivacyDlpV2SaveFindingsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SaveFindingsResponseOutput {
	return o
}

// Location to store findings outside of DLP.
func (o GooglePrivacyDlpV2SaveFindingsResponseOutput) OutputConfig() GooglePrivacyDlpV2OutputStorageConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2SaveFindingsResponse) GooglePrivacyDlpV2OutputStorageConfigResponse {
		return v.OutputConfig
	}).(GooglePrivacyDlpV2OutputStorageConfigResponseOutput)
}

// Schedule for inspect job triggers.
type GooglePrivacyDlpV2Schedule struct {
	// With this option a job is started on a regular periodic basis. For example: every day (86400 seconds). A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs. This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days.
	RecurrencePeriodDuration *string `pulumi:"recurrencePeriodDuration"`
}

// GooglePrivacyDlpV2ScheduleInput is an input type that accepts GooglePrivacyDlpV2ScheduleArgs and GooglePrivacyDlpV2ScheduleOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ScheduleInput` via:
//
//	GooglePrivacyDlpV2ScheduleArgs{...}
type GooglePrivacyDlpV2ScheduleInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ScheduleOutput() GooglePrivacyDlpV2ScheduleOutput
	ToGooglePrivacyDlpV2ScheduleOutputWithContext(context.Context) GooglePrivacyDlpV2ScheduleOutput
}

// Schedule for inspect job triggers.
type GooglePrivacyDlpV2ScheduleArgs struct {
	// With this option a job is started on a regular periodic basis. For example: every day (86400 seconds). A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs. This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days.
	RecurrencePeriodDuration pulumi.StringPtrInput `pulumi:"recurrencePeriodDuration"`
}

func (GooglePrivacyDlpV2ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Schedule)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ScheduleArgs) ToGooglePrivacyDlpV2ScheduleOutput() GooglePrivacyDlpV2ScheduleOutput {
	return i.ToGooglePrivacyDlpV2ScheduleOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ScheduleArgs) ToGooglePrivacyDlpV2ScheduleOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ScheduleOutput)
}

func (i GooglePrivacyDlpV2ScheduleArgs) ToGooglePrivacyDlpV2SchedulePtrOutput() GooglePrivacyDlpV2SchedulePtrOutput {
	return i.ToGooglePrivacyDlpV2SchedulePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ScheduleArgs) ToGooglePrivacyDlpV2SchedulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ScheduleOutput).ToGooglePrivacyDlpV2SchedulePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2SchedulePtrInput is an input type that accepts GooglePrivacyDlpV2ScheduleArgs, GooglePrivacyDlpV2SchedulePtr and GooglePrivacyDlpV2SchedulePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2SchedulePtrInput` via:
//
//	        GooglePrivacyDlpV2ScheduleArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2SchedulePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2SchedulePtrOutput() GooglePrivacyDlpV2SchedulePtrOutput
	ToGooglePrivacyDlpV2SchedulePtrOutputWithContext(context.Context) GooglePrivacyDlpV2SchedulePtrOutput
}

type googlePrivacyDlpV2SchedulePtrType GooglePrivacyDlpV2ScheduleArgs

func GooglePrivacyDlpV2SchedulePtr(v *GooglePrivacyDlpV2ScheduleArgs) GooglePrivacyDlpV2SchedulePtrInput {
	return (*googlePrivacyDlpV2SchedulePtrType)(v)
}

func (*googlePrivacyDlpV2SchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Schedule)(nil)).Elem()
}

func (i *googlePrivacyDlpV2SchedulePtrType) ToGooglePrivacyDlpV2SchedulePtrOutput() GooglePrivacyDlpV2SchedulePtrOutput {
	return i.ToGooglePrivacyDlpV2SchedulePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2SchedulePtrType) ToGooglePrivacyDlpV2SchedulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SchedulePtrOutput)
}

// Schedule for inspect job triggers.
type GooglePrivacyDlpV2ScheduleOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Schedule)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ScheduleOutput) ToGooglePrivacyDlpV2ScheduleOutput() GooglePrivacyDlpV2ScheduleOutput {
	return o
}

func (o GooglePrivacyDlpV2ScheduleOutput) ToGooglePrivacyDlpV2ScheduleOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ScheduleOutput {
	return o
}

func (o GooglePrivacyDlpV2ScheduleOutput) ToGooglePrivacyDlpV2SchedulePtrOutput() GooglePrivacyDlpV2SchedulePtrOutput {
	return o.ToGooglePrivacyDlpV2SchedulePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ScheduleOutput) ToGooglePrivacyDlpV2SchedulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Schedule) *GooglePrivacyDlpV2Schedule {
		return &v
	}).(GooglePrivacyDlpV2SchedulePtrOutput)
}

// With this option a job is started on a regular periodic basis. For example: every day (86400 seconds). A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs. This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days.
func (o GooglePrivacyDlpV2ScheduleOutput) RecurrencePeriodDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Schedule) *string { return v.RecurrencePeriodDuration }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2SchedulePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Schedule)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SchedulePtrOutput) ToGooglePrivacyDlpV2SchedulePtrOutput() GooglePrivacyDlpV2SchedulePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2SchedulePtrOutput) ToGooglePrivacyDlpV2SchedulePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SchedulePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2SchedulePtrOutput) Elem() GooglePrivacyDlpV2ScheduleOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Schedule) GooglePrivacyDlpV2Schedule {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Schedule
		return ret
	}).(GooglePrivacyDlpV2ScheduleOutput)
}

// With this option a job is started on a regular periodic basis. For example: every day (86400 seconds). A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs. This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days.
func (o GooglePrivacyDlpV2SchedulePtrOutput) RecurrencePeriodDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Schedule) *string {
		if v == nil {
			return nil
		}
		return v.RecurrencePeriodDuration
	}).(pulumi.StringPtrOutput)
}

// Schedule for inspect job triggers.
type GooglePrivacyDlpV2ScheduleResponse struct {
	// With this option a job is started on a regular periodic basis. For example: every day (86400 seconds). A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs. This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days.
	RecurrencePeriodDuration string `pulumi:"recurrencePeriodDuration"`
}

// Schedule for inspect job triggers.
type GooglePrivacyDlpV2ScheduleResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ScheduleResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ScheduleResponseOutput) ToGooglePrivacyDlpV2ScheduleResponseOutput() GooglePrivacyDlpV2ScheduleResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ScheduleResponseOutput) ToGooglePrivacyDlpV2ScheduleResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ScheduleResponseOutput {
	return o
}

// With this option a job is started on a regular periodic basis. For example: every day (86400 seconds). A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs. This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days.
func (o GooglePrivacyDlpV2ScheduleResponseOutput) RecurrencePeriodDuration() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ScheduleResponse) string { return v.RecurrencePeriodDuration }).(pulumi.StringOutput)
}

// Apply transformation to the selected info_types.
type GooglePrivacyDlpV2SelectedInfoTypes struct {
	// InfoTypes to apply the transformation to. Required. Provided InfoType must be unique within the ImageTransformations message.
	InfoTypes []GooglePrivacyDlpV2InfoType `pulumi:"infoTypes"`
}

// GooglePrivacyDlpV2SelectedInfoTypesInput is an input type that accepts GooglePrivacyDlpV2SelectedInfoTypesArgs and GooglePrivacyDlpV2SelectedInfoTypesOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2SelectedInfoTypesInput` via:
//
//	GooglePrivacyDlpV2SelectedInfoTypesArgs{...}
type GooglePrivacyDlpV2SelectedInfoTypesInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2SelectedInfoTypesOutput() GooglePrivacyDlpV2SelectedInfoTypesOutput
	ToGooglePrivacyDlpV2SelectedInfoTypesOutputWithContext(context.Context) GooglePrivacyDlpV2SelectedInfoTypesOutput
}

// Apply transformation to the selected info_types.
type GooglePrivacyDlpV2SelectedInfoTypesArgs struct {
	// InfoTypes to apply the transformation to. Required. Provided InfoType must be unique within the ImageTransformations message.
	InfoTypes GooglePrivacyDlpV2InfoTypeArrayInput `pulumi:"infoTypes"`
}

func (GooglePrivacyDlpV2SelectedInfoTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SelectedInfoTypes)(nil)).Elem()
}

func (i GooglePrivacyDlpV2SelectedInfoTypesArgs) ToGooglePrivacyDlpV2SelectedInfoTypesOutput() GooglePrivacyDlpV2SelectedInfoTypesOutput {
	return i.ToGooglePrivacyDlpV2SelectedInfoTypesOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2SelectedInfoTypesArgs) ToGooglePrivacyDlpV2SelectedInfoTypesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SelectedInfoTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SelectedInfoTypesOutput)
}

func (i GooglePrivacyDlpV2SelectedInfoTypesArgs) ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutput() GooglePrivacyDlpV2SelectedInfoTypesPtrOutput {
	return i.ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2SelectedInfoTypesArgs) ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SelectedInfoTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SelectedInfoTypesOutput).ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2SelectedInfoTypesPtrInput is an input type that accepts GooglePrivacyDlpV2SelectedInfoTypesArgs, GooglePrivacyDlpV2SelectedInfoTypesPtr and GooglePrivacyDlpV2SelectedInfoTypesPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2SelectedInfoTypesPtrInput` via:
//
//	        GooglePrivacyDlpV2SelectedInfoTypesArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2SelectedInfoTypesPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutput() GooglePrivacyDlpV2SelectedInfoTypesPtrOutput
	ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutputWithContext(context.Context) GooglePrivacyDlpV2SelectedInfoTypesPtrOutput
}

type googlePrivacyDlpV2SelectedInfoTypesPtrType GooglePrivacyDlpV2SelectedInfoTypesArgs

func GooglePrivacyDlpV2SelectedInfoTypesPtr(v *GooglePrivacyDlpV2SelectedInfoTypesArgs) GooglePrivacyDlpV2SelectedInfoTypesPtrInput {
	return (*googlePrivacyDlpV2SelectedInfoTypesPtrType)(v)
}

func (*googlePrivacyDlpV2SelectedInfoTypesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2SelectedInfoTypes)(nil)).Elem()
}

func (i *googlePrivacyDlpV2SelectedInfoTypesPtrType) ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutput() GooglePrivacyDlpV2SelectedInfoTypesPtrOutput {
	return i.ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2SelectedInfoTypesPtrType) ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SelectedInfoTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SelectedInfoTypesPtrOutput)
}

// Apply transformation to the selected info_types.
type GooglePrivacyDlpV2SelectedInfoTypesOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SelectedInfoTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SelectedInfoTypes)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SelectedInfoTypesOutput) ToGooglePrivacyDlpV2SelectedInfoTypesOutput() GooglePrivacyDlpV2SelectedInfoTypesOutput {
	return o
}

func (o GooglePrivacyDlpV2SelectedInfoTypesOutput) ToGooglePrivacyDlpV2SelectedInfoTypesOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SelectedInfoTypesOutput {
	return o
}

func (o GooglePrivacyDlpV2SelectedInfoTypesOutput) ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutput() GooglePrivacyDlpV2SelectedInfoTypesPtrOutput {
	return o.ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2SelectedInfoTypesOutput) ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SelectedInfoTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2SelectedInfoTypes) *GooglePrivacyDlpV2SelectedInfoTypes {
		return &v
	}).(GooglePrivacyDlpV2SelectedInfoTypesPtrOutput)
}

// InfoTypes to apply the transformation to. Required. Provided InfoType must be unique within the ImageTransformations message.
func (o GooglePrivacyDlpV2SelectedInfoTypesOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2SelectedInfoTypes) []GooglePrivacyDlpV2InfoType { return v.InfoTypes }).(GooglePrivacyDlpV2InfoTypeArrayOutput)
}

type GooglePrivacyDlpV2SelectedInfoTypesPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SelectedInfoTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2SelectedInfoTypes)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SelectedInfoTypesPtrOutput) ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutput() GooglePrivacyDlpV2SelectedInfoTypesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2SelectedInfoTypesPtrOutput) ToGooglePrivacyDlpV2SelectedInfoTypesPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SelectedInfoTypesPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2SelectedInfoTypesPtrOutput) Elem() GooglePrivacyDlpV2SelectedInfoTypesOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2SelectedInfoTypes) GooglePrivacyDlpV2SelectedInfoTypes {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2SelectedInfoTypes
		return ret
	}).(GooglePrivacyDlpV2SelectedInfoTypesOutput)
}

// InfoTypes to apply the transformation to. Required. Provided InfoType must be unique within the ImageTransformations message.
func (o GooglePrivacyDlpV2SelectedInfoTypesPtrOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2SelectedInfoTypes) []GooglePrivacyDlpV2InfoType {
		if v == nil {
			return nil
		}
		return v.InfoTypes
	}).(GooglePrivacyDlpV2InfoTypeArrayOutput)
}

// Apply transformation to the selected info_types.
type GooglePrivacyDlpV2SelectedInfoTypesResponse struct {
	// InfoTypes to apply the transformation to. Required. Provided InfoType must be unique within the ImageTransformations message.
	InfoTypes []GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoTypes"`
}

// Apply transformation to the selected info_types.
type GooglePrivacyDlpV2SelectedInfoTypesResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SelectedInfoTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SelectedInfoTypesResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SelectedInfoTypesResponseOutput) ToGooglePrivacyDlpV2SelectedInfoTypesResponseOutput() GooglePrivacyDlpV2SelectedInfoTypesResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2SelectedInfoTypesResponseOutput) ToGooglePrivacyDlpV2SelectedInfoTypesResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SelectedInfoTypesResponseOutput {
	return o
}

// InfoTypes to apply the transformation to. Required. Provided InfoType must be unique within the ImageTransformations message.
func (o GooglePrivacyDlpV2SelectedInfoTypesResponseOutput) InfoTypes() GooglePrivacyDlpV2InfoTypeResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2SelectedInfoTypesResponse) []GooglePrivacyDlpV2InfoTypeResponse {
		return v.InfoTypes
	}).(GooglePrivacyDlpV2InfoTypeResponseArrayOutput)
}

// Score is calculated from of all elements in the data profile. A higher level means the data is more sensitive.
type GooglePrivacyDlpV2SensitivityScore struct {
	// The sensitivity score applied to the resource.
	Score *GooglePrivacyDlpV2SensitivityScoreScore `pulumi:"score"`
}

// GooglePrivacyDlpV2SensitivityScoreInput is an input type that accepts GooglePrivacyDlpV2SensitivityScoreArgs and GooglePrivacyDlpV2SensitivityScoreOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2SensitivityScoreInput` via:
//
//	GooglePrivacyDlpV2SensitivityScoreArgs{...}
type GooglePrivacyDlpV2SensitivityScoreInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2SensitivityScoreOutput() GooglePrivacyDlpV2SensitivityScoreOutput
	ToGooglePrivacyDlpV2SensitivityScoreOutputWithContext(context.Context) GooglePrivacyDlpV2SensitivityScoreOutput
}

// Score is calculated from of all elements in the data profile. A higher level means the data is more sensitive.
type GooglePrivacyDlpV2SensitivityScoreArgs struct {
	// The sensitivity score applied to the resource.
	Score GooglePrivacyDlpV2SensitivityScoreScorePtrInput `pulumi:"score"`
}

func (GooglePrivacyDlpV2SensitivityScoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SensitivityScore)(nil)).Elem()
}

func (i GooglePrivacyDlpV2SensitivityScoreArgs) ToGooglePrivacyDlpV2SensitivityScoreOutput() GooglePrivacyDlpV2SensitivityScoreOutput {
	return i.ToGooglePrivacyDlpV2SensitivityScoreOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2SensitivityScoreArgs) ToGooglePrivacyDlpV2SensitivityScoreOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SensitivityScoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SensitivityScoreOutput)
}

func (i GooglePrivacyDlpV2SensitivityScoreArgs) ToGooglePrivacyDlpV2SensitivityScorePtrOutput() GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return i.ToGooglePrivacyDlpV2SensitivityScorePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2SensitivityScoreArgs) ToGooglePrivacyDlpV2SensitivityScorePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SensitivityScoreOutput).ToGooglePrivacyDlpV2SensitivityScorePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2SensitivityScorePtrInput is an input type that accepts GooglePrivacyDlpV2SensitivityScoreArgs, GooglePrivacyDlpV2SensitivityScorePtr and GooglePrivacyDlpV2SensitivityScorePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2SensitivityScorePtrInput` via:
//
//	        GooglePrivacyDlpV2SensitivityScoreArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2SensitivityScorePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2SensitivityScorePtrOutput() GooglePrivacyDlpV2SensitivityScorePtrOutput
	ToGooglePrivacyDlpV2SensitivityScorePtrOutputWithContext(context.Context) GooglePrivacyDlpV2SensitivityScorePtrOutput
}

type googlePrivacyDlpV2SensitivityScorePtrType GooglePrivacyDlpV2SensitivityScoreArgs

func GooglePrivacyDlpV2SensitivityScorePtr(v *GooglePrivacyDlpV2SensitivityScoreArgs) GooglePrivacyDlpV2SensitivityScorePtrInput {
	return (*googlePrivacyDlpV2SensitivityScorePtrType)(v)
}

func (*googlePrivacyDlpV2SensitivityScorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2SensitivityScore)(nil)).Elem()
}

func (i *googlePrivacyDlpV2SensitivityScorePtrType) ToGooglePrivacyDlpV2SensitivityScorePtrOutput() GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return i.ToGooglePrivacyDlpV2SensitivityScorePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2SensitivityScorePtrType) ToGooglePrivacyDlpV2SensitivityScorePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SensitivityScorePtrOutput)
}

// Score is calculated from of all elements in the data profile. A higher level means the data is more sensitive.
type GooglePrivacyDlpV2SensitivityScoreOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SensitivityScoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SensitivityScore)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SensitivityScoreOutput) ToGooglePrivacyDlpV2SensitivityScoreOutput() GooglePrivacyDlpV2SensitivityScoreOutput {
	return o
}

func (o GooglePrivacyDlpV2SensitivityScoreOutput) ToGooglePrivacyDlpV2SensitivityScoreOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SensitivityScoreOutput {
	return o
}

func (o GooglePrivacyDlpV2SensitivityScoreOutput) ToGooglePrivacyDlpV2SensitivityScorePtrOutput() GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return o.ToGooglePrivacyDlpV2SensitivityScorePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2SensitivityScoreOutput) ToGooglePrivacyDlpV2SensitivityScorePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2SensitivityScore) *GooglePrivacyDlpV2SensitivityScore {
		return &v
	}).(GooglePrivacyDlpV2SensitivityScorePtrOutput)
}

// The sensitivity score applied to the resource.
func (o GooglePrivacyDlpV2SensitivityScoreOutput) Score() GooglePrivacyDlpV2SensitivityScoreScorePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2SensitivityScore) *GooglePrivacyDlpV2SensitivityScoreScore { return v.Score }).(GooglePrivacyDlpV2SensitivityScoreScorePtrOutput)
}

type GooglePrivacyDlpV2SensitivityScorePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SensitivityScorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2SensitivityScore)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SensitivityScorePtrOutput) ToGooglePrivacyDlpV2SensitivityScorePtrOutput() GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2SensitivityScorePtrOutput) ToGooglePrivacyDlpV2SensitivityScorePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SensitivityScorePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2SensitivityScorePtrOutput) Elem() GooglePrivacyDlpV2SensitivityScoreOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2SensitivityScore) GooglePrivacyDlpV2SensitivityScore {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2SensitivityScore
		return ret
	}).(GooglePrivacyDlpV2SensitivityScoreOutput)
}

// The sensitivity score applied to the resource.
func (o GooglePrivacyDlpV2SensitivityScorePtrOutput) Score() GooglePrivacyDlpV2SensitivityScoreScorePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2SensitivityScore) *GooglePrivacyDlpV2SensitivityScoreScore {
		if v == nil {
			return nil
		}
		return v.Score
	}).(GooglePrivacyDlpV2SensitivityScoreScorePtrOutput)
}

// Score is calculated from of all elements in the data profile. A higher level means the data is more sensitive.
type GooglePrivacyDlpV2SensitivityScoreResponse struct {
	// The sensitivity score applied to the resource.
	Score string `pulumi:"score"`
}

// Score is calculated from of all elements in the data profile. A higher level means the data is more sensitive.
type GooglePrivacyDlpV2SensitivityScoreResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SensitivityScoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SensitivityScoreResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SensitivityScoreResponseOutput) ToGooglePrivacyDlpV2SensitivityScoreResponseOutput() GooglePrivacyDlpV2SensitivityScoreResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2SensitivityScoreResponseOutput) ToGooglePrivacyDlpV2SensitivityScoreResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SensitivityScoreResponseOutput {
	return o
}

// The sensitivity score applied to the resource.
func (o GooglePrivacyDlpV2SensitivityScoreResponseOutput) Score() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2SensitivityScoreResponse) string { return v.Score }).(pulumi.StringOutput)
}

// An auxiliary table containing statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
type GooglePrivacyDlpV2StatisticalTable struct {
	// Quasi-identifier columns.
	QuasiIds []GooglePrivacyDlpV2QuasiIdentifierField `pulumi:"quasiIds"`
	// The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
	RelativeFrequency GooglePrivacyDlpV2FieldId `pulumi:"relativeFrequency"`
	// Auxiliary table location.
	Table GooglePrivacyDlpV2BigQueryTable `pulumi:"table"`
}

// GooglePrivacyDlpV2StatisticalTableInput is an input type that accepts GooglePrivacyDlpV2StatisticalTableArgs and GooglePrivacyDlpV2StatisticalTableOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2StatisticalTableInput` via:
//
//	GooglePrivacyDlpV2StatisticalTableArgs{...}
type GooglePrivacyDlpV2StatisticalTableInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2StatisticalTableOutput() GooglePrivacyDlpV2StatisticalTableOutput
	ToGooglePrivacyDlpV2StatisticalTableOutputWithContext(context.Context) GooglePrivacyDlpV2StatisticalTableOutput
}

// An auxiliary table containing statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
type GooglePrivacyDlpV2StatisticalTableArgs struct {
	// Quasi-identifier columns.
	QuasiIds GooglePrivacyDlpV2QuasiIdentifierFieldArrayInput `pulumi:"quasiIds"`
	// The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
	RelativeFrequency GooglePrivacyDlpV2FieldIdInput `pulumi:"relativeFrequency"`
	// Auxiliary table location.
	Table GooglePrivacyDlpV2BigQueryTableInput `pulumi:"table"`
}

func (GooglePrivacyDlpV2StatisticalTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StatisticalTable)(nil)).Elem()
}

func (i GooglePrivacyDlpV2StatisticalTableArgs) ToGooglePrivacyDlpV2StatisticalTableOutput() GooglePrivacyDlpV2StatisticalTableOutput {
	return i.ToGooglePrivacyDlpV2StatisticalTableOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2StatisticalTableArgs) ToGooglePrivacyDlpV2StatisticalTableOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StatisticalTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2StatisticalTableOutput)
}

// GooglePrivacyDlpV2StatisticalTableArrayInput is an input type that accepts GooglePrivacyDlpV2StatisticalTableArray and GooglePrivacyDlpV2StatisticalTableArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2StatisticalTableArrayInput` via:
//
//	GooglePrivacyDlpV2StatisticalTableArray{ GooglePrivacyDlpV2StatisticalTableArgs{...} }
type GooglePrivacyDlpV2StatisticalTableArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2StatisticalTableArrayOutput() GooglePrivacyDlpV2StatisticalTableArrayOutput
	ToGooglePrivacyDlpV2StatisticalTableArrayOutputWithContext(context.Context) GooglePrivacyDlpV2StatisticalTableArrayOutput
}

type GooglePrivacyDlpV2StatisticalTableArray []GooglePrivacyDlpV2StatisticalTableInput

func (GooglePrivacyDlpV2StatisticalTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2StatisticalTable)(nil)).Elem()
}

func (i GooglePrivacyDlpV2StatisticalTableArray) ToGooglePrivacyDlpV2StatisticalTableArrayOutput() GooglePrivacyDlpV2StatisticalTableArrayOutput {
	return i.ToGooglePrivacyDlpV2StatisticalTableArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2StatisticalTableArray) ToGooglePrivacyDlpV2StatisticalTableArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StatisticalTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2StatisticalTableArrayOutput)
}

// An auxiliary table containing statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
type GooglePrivacyDlpV2StatisticalTableOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StatisticalTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StatisticalTable)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StatisticalTableOutput) ToGooglePrivacyDlpV2StatisticalTableOutput() GooglePrivacyDlpV2StatisticalTableOutput {
	return o
}

func (o GooglePrivacyDlpV2StatisticalTableOutput) ToGooglePrivacyDlpV2StatisticalTableOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StatisticalTableOutput {
	return o
}

// Quasi-identifier columns.
func (o GooglePrivacyDlpV2StatisticalTableOutput) QuasiIds() GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StatisticalTable) []GooglePrivacyDlpV2QuasiIdentifierField { return v.QuasiIds }).(GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput)
}

// The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
func (o GooglePrivacyDlpV2StatisticalTableOutput) RelativeFrequency() GooglePrivacyDlpV2FieldIdOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StatisticalTable) GooglePrivacyDlpV2FieldId { return v.RelativeFrequency }).(GooglePrivacyDlpV2FieldIdOutput)
}

// Auxiliary table location.
func (o GooglePrivacyDlpV2StatisticalTableOutput) Table() GooglePrivacyDlpV2BigQueryTableOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StatisticalTable) GooglePrivacyDlpV2BigQueryTable { return v.Table }).(GooglePrivacyDlpV2BigQueryTableOutput)
}

type GooglePrivacyDlpV2StatisticalTableArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StatisticalTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2StatisticalTable)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StatisticalTableArrayOutput) ToGooglePrivacyDlpV2StatisticalTableArrayOutput() GooglePrivacyDlpV2StatisticalTableArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2StatisticalTableArrayOutput) ToGooglePrivacyDlpV2StatisticalTableArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StatisticalTableArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2StatisticalTableArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2StatisticalTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2StatisticalTable {
		return vs[0].([]GooglePrivacyDlpV2StatisticalTable)[vs[1].(int)]
	}).(GooglePrivacyDlpV2StatisticalTableOutput)
}

// An auxiliary table containing statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
type GooglePrivacyDlpV2StatisticalTableResponse struct {
	// Quasi-identifier columns.
	QuasiIds []GooglePrivacyDlpV2QuasiIdentifierFieldResponse `pulumi:"quasiIds"`
	// The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
	RelativeFrequency GooglePrivacyDlpV2FieldIdResponse `pulumi:"relativeFrequency"`
	// Auxiliary table location.
	Table GooglePrivacyDlpV2BigQueryTableResponse `pulumi:"table"`
}

// An auxiliary table containing statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
type GooglePrivacyDlpV2StatisticalTableResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StatisticalTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StatisticalTableResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StatisticalTableResponseOutput) ToGooglePrivacyDlpV2StatisticalTableResponseOutput() GooglePrivacyDlpV2StatisticalTableResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2StatisticalTableResponseOutput) ToGooglePrivacyDlpV2StatisticalTableResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StatisticalTableResponseOutput {
	return o
}

// Quasi-identifier columns.
func (o GooglePrivacyDlpV2StatisticalTableResponseOutput) QuasiIds() GooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StatisticalTableResponse) []GooglePrivacyDlpV2QuasiIdentifierFieldResponse {
		return v.QuasiIds
	}).(GooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput)
}

// The relative frequency column must contain a floating-point number between 0 and 1 (inclusive). Null values are assumed to be zero.
func (o GooglePrivacyDlpV2StatisticalTableResponseOutput) RelativeFrequency() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StatisticalTableResponse) GooglePrivacyDlpV2FieldIdResponse {
		return v.RelativeFrequency
	}).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// Auxiliary table location.
func (o GooglePrivacyDlpV2StatisticalTableResponseOutput) Table() GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StatisticalTableResponse) GooglePrivacyDlpV2BigQueryTableResponse {
		return v.Table
	}).(GooglePrivacyDlpV2BigQueryTableResponseOutput)
}

type GooglePrivacyDlpV2StatisticalTableResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StatisticalTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2StatisticalTableResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StatisticalTableResponseArrayOutput) ToGooglePrivacyDlpV2StatisticalTableResponseArrayOutput() GooglePrivacyDlpV2StatisticalTableResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2StatisticalTableResponseArrayOutput) ToGooglePrivacyDlpV2StatisticalTableResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StatisticalTableResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2StatisticalTableResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2StatisticalTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2StatisticalTableResponse {
		return vs[0].([]GooglePrivacyDlpV2StatisticalTableResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2StatisticalTableResponseOutput)
}

// Shared message indicating Cloud storage type.
type GooglePrivacyDlpV2StorageConfig struct {
	// BigQuery options.
	BigQueryOptions *GooglePrivacyDlpV2BigQueryOptions `pulumi:"bigQueryOptions"`
	// Cloud Storage options.
	CloudStorageOptions *GooglePrivacyDlpV2CloudStorageOptions `pulumi:"cloudStorageOptions"`
	// Google Cloud Datastore options.
	DatastoreOptions *GooglePrivacyDlpV2DatastoreOptions `pulumi:"datastoreOptions"`
	// Hybrid inspection options.
	HybridOptions  *GooglePrivacyDlpV2HybridOptions  `pulumi:"hybridOptions"`
	TimespanConfig *GooglePrivacyDlpV2TimespanConfig `pulumi:"timespanConfig"`
}

// GooglePrivacyDlpV2StorageConfigInput is an input type that accepts GooglePrivacyDlpV2StorageConfigArgs and GooglePrivacyDlpV2StorageConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2StorageConfigInput` via:
//
//	GooglePrivacyDlpV2StorageConfigArgs{...}
type GooglePrivacyDlpV2StorageConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2StorageConfigOutput() GooglePrivacyDlpV2StorageConfigOutput
	ToGooglePrivacyDlpV2StorageConfigOutputWithContext(context.Context) GooglePrivacyDlpV2StorageConfigOutput
}

// Shared message indicating Cloud storage type.
type GooglePrivacyDlpV2StorageConfigArgs struct {
	// BigQuery options.
	BigQueryOptions GooglePrivacyDlpV2BigQueryOptionsPtrInput `pulumi:"bigQueryOptions"`
	// Cloud Storage options.
	CloudStorageOptions GooglePrivacyDlpV2CloudStorageOptionsPtrInput `pulumi:"cloudStorageOptions"`
	// Google Cloud Datastore options.
	DatastoreOptions GooglePrivacyDlpV2DatastoreOptionsPtrInput `pulumi:"datastoreOptions"`
	// Hybrid inspection options.
	HybridOptions  GooglePrivacyDlpV2HybridOptionsPtrInput  `pulumi:"hybridOptions"`
	TimespanConfig GooglePrivacyDlpV2TimespanConfigPtrInput `pulumi:"timespanConfig"`
}

func (GooglePrivacyDlpV2StorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StorageConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2StorageConfigArgs) ToGooglePrivacyDlpV2StorageConfigOutput() GooglePrivacyDlpV2StorageConfigOutput {
	return i.ToGooglePrivacyDlpV2StorageConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2StorageConfigArgs) ToGooglePrivacyDlpV2StorageConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2StorageConfigOutput)
}

func (i GooglePrivacyDlpV2StorageConfigArgs) ToGooglePrivacyDlpV2StorageConfigPtrOutput() GooglePrivacyDlpV2StorageConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2StorageConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2StorageConfigArgs) ToGooglePrivacyDlpV2StorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2StorageConfigOutput).ToGooglePrivacyDlpV2StorageConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2StorageConfigPtrInput is an input type that accepts GooglePrivacyDlpV2StorageConfigArgs, GooglePrivacyDlpV2StorageConfigPtr and GooglePrivacyDlpV2StorageConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2StorageConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2StorageConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2StorageConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2StorageConfigPtrOutput() GooglePrivacyDlpV2StorageConfigPtrOutput
	ToGooglePrivacyDlpV2StorageConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2StorageConfigPtrOutput
}

type googlePrivacyDlpV2StorageConfigPtrType GooglePrivacyDlpV2StorageConfigArgs

func GooglePrivacyDlpV2StorageConfigPtr(v *GooglePrivacyDlpV2StorageConfigArgs) GooglePrivacyDlpV2StorageConfigPtrInput {
	return (*googlePrivacyDlpV2StorageConfigPtrType)(v)
}

func (*googlePrivacyDlpV2StorageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2StorageConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2StorageConfigPtrType) ToGooglePrivacyDlpV2StorageConfigPtrOutput() GooglePrivacyDlpV2StorageConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2StorageConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2StorageConfigPtrType) ToGooglePrivacyDlpV2StorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2StorageConfigPtrOutput)
}

// Shared message indicating Cloud storage type.
type GooglePrivacyDlpV2StorageConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StorageConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StorageConfigOutput) ToGooglePrivacyDlpV2StorageConfigOutput() GooglePrivacyDlpV2StorageConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2StorageConfigOutput) ToGooglePrivacyDlpV2StorageConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StorageConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2StorageConfigOutput) ToGooglePrivacyDlpV2StorageConfigPtrOutput() GooglePrivacyDlpV2StorageConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2StorageConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2StorageConfigOutput) ToGooglePrivacyDlpV2StorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StorageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2StorageConfig {
		return &v
	}).(GooglePrivacyDlpV2StorageConfigPtrOutput)
}

// BigQuery options.
func (o GooglePrivacyDlpV2StorageConfigOutput) BigQueryOptions() GooglePrivacyDlpV2BigQueryOptionsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2BigQueryOptions { return v.BigQueryOptions }).(GooglePrivacyDlpV2BigQueryOptionsPtrOutput)
}

// Cloud Storage options.
func (o GooglePrivacyDlpV2StorageConfigOutput) CloudStorageOptions() GooglePrivacyDlpV2CloudStorageOptionsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2CloudStorageOptions {
		return v.CloudStorageOptions
	}).(GooglePrivacyDlpV2CloudStorageOptionsPtrOutput)
}

// Google Cloud Datastore options.
func (o GooglePrivacyDlpV2StorageConfigOutput) DatastoreOptions() GooglePrivacyDlpV2DatastoreOptionsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2DatastoreOptions { return v.DatastoreOptions }).(GooglePrivacyDlpV2DatastoreOptionsPtrOutput)
}

// Hybrid inspection options.
func (o GooglePrivacyDlpV2StorageConfigOutput) HybridOptions() GooglePrivacyDlpV2HybridOptionsPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2HybridOptions { return v.HybridOptions }).(GooglePrivacyDlpV2HybridOptionsPtrOutput)
}

func (o GooglePrivacyDlpV2StorageConfigOutput) TimespanConfig() GooglePrivacyDlpV2TimespanConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2TimespanConfig { return v.TimespanConfig }).(GooglePrivacyDlpV2TimespanConfigPtrOutput)
}

type GooglePrivacyDlpV2StorageConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StorageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2StorageConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StorageConfigPtrOutput) ToGooglePrivacyDlpV2StorageConfigPtrOutput() GooglePrivacyDlpV2StorageConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2StorageConfigPtrOutput) ToGooglePrivacyDlpV2StorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StorageConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2StorageConfigPtrOutput) Elem() GooglePrivacyDlpV2StorageConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2StorageConfig) GooglePrivacyDlpV2StorageConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2StorageConfig
		return ret
	}).(GooglePrivacyDlpV2StorageConfigOutput)
}

// BigQuery options.
func (o GooglePrivacyDlpV2StorageConfigPtrOutput) BigQueryOptions() GooglePrivacyDlpV2BigQueryOptionsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2BigQueryOptions {
		if v == nil {
			return nil
		}
		return v.BigQueryOptions
	}).(GooglePrivacyDlpV2BigQueryOptionsPtrOutput)
}

// Cloud Storage options.
func (o GooglePrivacyDlpV2StorageConfigPtrOutput) CloudStorageOptions() GooglePrivacyDlpV2CloudStorageOptionsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2CloudStorageOptions {
		if v == nil {
			return nil
		}
		return v.CloudStorageOptions
	}).(GooglePrivacyDlpV2CloudStorageOptionsPtrOutput)
}

// Google Cloud Datastore options.
func (o GooglePrivacyDlpV2StorageConfigPtrOutput) DatastoreOptions() GooglePrivacyDlpV2DatastoreOptionsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2DatastoreOptions {
		if v == nil {
			return nil
		}
		return v.DatastoreOptions
	}).(GooglePrivacyDlpV2DatastoreOptionsPtrOutput)
}

// Hybrid inspection options.
func (o GooglePrivacyDlpV2StorageConfigPtrOutput) HybridOptions() GooglePrivacyDlpV2HybridOptionsPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2HybridOptions {
		if v == nil {
			return nil
		}
		return v.HybridOptions
	}).(GooglePrivacyDlpV2HybridOptionsPtrOutput)
}

func (o GooglePrivacyDlpV2StorageConfigPtrOutput) TimespanConfig() GooglePrivacyDlpV2TimespanConfigPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2StorageConfig) *GooglePrivacyDlpV2TimespanConfig {
		if v == nil {
			return nil
		}
		return v.TimespanConfig
	}).(GooglePrivacyDlpV2TimespanConfigPtrOutput)
}

// Shared message indicating Cloud storage type.
type GooglePrivacyDlpV2StorageConfigResponse struct {
	// BigQuery options.
	BigQueryOptions GooglePrivacyDlpV2BigQueryOptionsResponse `pulumi:"bigQueryOptions"`
	// Cloud Storage options.
	CloudStorageOptions GooglePrivacyDlpV2CloudStorageOptionsResponse `pulumi:"cloudStorageOptions"`
	// Google Cloud Datastore options.
	DatastoreOptions GooglePrivacyDlpV2DatastoreOptionsResponse `pulumi:"datastoreOptions"`
	// Hybrid inspection options.
	HybridOptions  GooglePrivacyDlpV2HybridOptionsResponse  `pulumi:"hybridOptions"`
	TimespanConfig GooglePrivacyDlpV2TimespanConfigResponse `pulumi:"timespanConfig"`
}

// Shared message indicating Cloud storage type.
type GooglePrivacyDlpV2StorageConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StorageConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StorageConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StorageConfigResponseOutput) ToGooglePrivacyDlpV2StorageConfigResponseOutput() GooglePrivacyDlpV2StorageConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2StorageConfigResponseOutput) ToGooglePrivacyDlpV2StorageConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StorageConfigResponseOutput {
	return o
}

// BigQuery options.
func (o GooglePrivacyDlpV2StorageConfigResponseOutput) BigQueryOptions() GooglePrivacyDlpV2BigQueryOptionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StorageConfigResponse) GooglePrivacyDlpV2BigQueryOptionsResponse {
		return v.BigQueryOptions
	}).(GooglePrivacyDlpV2BigQueryOptionsResponseOutput)
}

// Cloud Storage options.
func (o GooglePrivacyDlpV2StorageConfigResponseOutput) CloudStorageOptions() GooglePrivacyDlpV2CloudStorageOptionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StorageConfigResponse) GooglePrivacyDlpV2CloudStorageOptionsResponse {
		return v.CloudStorageOptions
	}).(GooglePrivacyDlpV2CloudStorageOptionsResponseOutput)
}

// Google Cloud Datastore options.
func (o GooglePrivacyDlpV2StorageConfigResponseOutput) DatastoreOptions() GooglePrivacyDlpV2DatastoreOptionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StorageConfigResponse) GooglePrivacyDlpV2DatastoreOptionsResponse {
		return v.DatastoreOptions
	}).(GooglePrivacyDlpV2DatastoreOptionsResponseOutput)
}

// Hybrid inspection options.
func (o GooglePrivacyDlpV2StorageConfigResponseOutput) HybridOptions() GooglePrivacyDlpV2HybridOptionsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StorageConfigResponse) GooglePrivacyDlpV2HybridOptionsResponse {
		return v.HybridOptions
	}).(GooglePrivacyDlpV2HybridOptionsResponseOutput)
}

func (o GooglePrivacyDlpV2StorageConfigResponseOutput) TimespanConfig() GooglePrivacyDlpV2TimespanConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StorageConfigResponse) GooglePrivacyDlpV2TimespanConfigResponse {
		return v.TimespanConfig
	}).(GooglePrivacyDlpV2TimespanConfigResponseOutput)
}

// Configuration for stored infoTypes. All fields and subfield are provided by the user. For more information, see https://cloud.google.com/dlp/docs/creating-custom-infotypes.
type GooglePrivacyDlpV2StoredInfoTypeConfig struct {
	// Description of the StoredInfoType (max 256 characters).
	Description *string `pulumi:"description"`
	// Store dictionary-based CustomInfoType.
	Dictionary *GooglePrivacyDlpV2Dictionary `pulumi:"dictionary"`
	// Display name of the StoredInfoType (max 256 characters).
	DisplayName *string `pulumi:"displayName"`
	// StoredInfoType where findings are defined by a dictionary of phrases.
	LargeCustomDictionary *GooglePrivacyDlpV2LargeCustomDictionaryConfig `pulumi:"largeCustomDictionary"`
	// Store regular expression-based StoredInfoType.
	Regex *GooglePrivacyDlpV2Regex `pulumi:"regex"`
}

// GooglePrivacyDlpV2StoredInfoTypeConfigInput is an input type that accepts GooglePrivacyDlpV2StoredInfoTypeConfigArgs and GooglePrivacyDlpV2StoredInfoTypeConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2StoredInfoTypeConfigInput` via:
//
//	GooglePrivacyDlpV2StoredInfoTypeConfigArgs{...}
type GooglePrivacyDlpV2StoredInfoTypeConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2StoredInfoTypeConfigOutput() GooglePrivacyDlpV2StoredInfoTypeConfigOutput
	ToGooglePrivacyDlpV2StoredInfoTypeConfigOutputWithContext(context.Context) GooglePrivacyDlpV2StoredInfoTypeConfigOutput
}

// Configuration for stored infoTypes. All fields and subfield are provided by the user. For more information, see https://cloud.google.com/dlp/docs/creating-custom-infotypes.
type GooglePrivacyDlpV2StoredInfoTypeConfigArgs struct {
	// Description of the StoredInfoType (max 256 characters).
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Store dictionary-based CustomInfoType.
	Dictionary GooglePrivacyDlpV2DictionaryPtrInput `pulumi:"dictionary"`
	// Display name of the StoredInfoType (max 256 characters).
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// StoredInfoType where findings are defined by a dictionary of phrases.
	LargeCustomDictionary GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrInput `pulumi:"largeCustomDictionary"`
	// Store regular expression-based StoredInfoType.
	Regex GooglePrivacyDlpV2RegexPtrInput `pulumi:"regex"`
}

func (GooglePrivacyDlpV2StoredInfoTypeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StoredInfoTypeConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2StoredInfoTypeConfigArgs) ToGooglePrivacyDlpV2StoredInfoTypeConfigOutput() GooglePrivacyDlpV2StoredInfoTypeConfigOutput {
	return i.ToGooglePrivacyDlpV2StoredInfoTypeConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2StoredInfoTypeConfigArgs) ToGooglePrivacyDlpV2StoredInfoTypeConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredInfoTypeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2StoredInfoTypeConfigOutput)
}

// Configuration for stored infoTypes. All fields and subfield are provided by the user. For more information, see https://cloud.google.com/dlp/docs/creating-custom-infotypes.
type GooglePrivacyDlpV2StoredInfoTypeConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StoredInfoTypeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StoredInfoTypeConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StoredInfoTypeConfigOutput) ToGooglePrivacyDlpV2StoredInfoTypeConfigOutput() GooglePrivacyDlpV2StoredInfoTypeConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredInfoTypeConfigOutput) ToGooglePrivacyDlpV2StoredInfoTypeConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredInfoTypeConfigOutput {
	return o
}

// Description of the StoredInfoType (max 256 characters).
func (o GooglePrivacyDlpV2StoredInfoTypeConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Store dictionary-based CustomInfoType.
func (o GooglePrivacyDlpV2StoredInfoTypeConfigOutput) Dictionary() GooglePrivacyDlpV2DictionaryPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeConfig) *GooglePrivacyDlpV2Dictionary { return v.Dictionary }).(GooglePrivacyDlpV2DictionaryPtrOutput)
}

// Display name of the StoredInfoType (max 256 characters).
func (o GooglePrivacyDlpV2StoredInfoTypeConfigOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeConfig) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// StoredInfoType where findings are defined by a dictionary of phrases.
func (o GooglePrivacyDlpV2StoredInfoTypeConfigOutput) LargeCustomDictionary() GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeConfig) *GooglePrivacyDlpV2LargeCustomDictionaryConfig {
		return v.LargeCustomDictionary
	}).(GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput)
}

// Store regular expression-based StoredInfoType.
func (o GooglePrivacyDlpV2StoredInfoTypeConfigOutput) Regex() GooglePrivacyDlpV2RegexPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeConfig) *GooglePrivacyDlpV2Regex { return v.Regex }).(GooglePrivacyDlpV2RegexPtrOutput)
}

// Configuration for stored infoTypes. All fields and subfield are provided by the user. For more information, see https://cloud.google.com/dlp/docs/creating-custom-infotypes.
type GooglePrivacyDlpV2StoredInfoTypeConfigResponse struct {
	// Description of the StoredInfoType (max 256 characters).
	Description string `pulumi:"description"`
	// Store dictionary-based CustomInfoType.
	Dictionary GooglePrivacyDlpV2DictionaryResponse `pulumi:"dictionary"`
	// Display name of the StoredInfoType (max 256 characters).
	DisplayName string `pulumi:"displayName"`
	// StoredInfoType where findings are defined by a dictionary of phrases.
	LargeCustomDictionary GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse `pulumi:"largeCustomDictionary"`
	// Store regular expression-based StoredInfoType.
	Regex GooglePrivacyDlpV2RegexResponse `pulumi:"regex"`
}

// Configuration for stored infoTypes. All fields and subfield are provided by the user. For more information, see https://cloud.google.com/dlp/docs/creating-custom-infotypes.
type GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StoredInfoTypeConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput) ToGooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput() GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput) ToGooglePrivacyDlpV2StoredInfoTypeConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput {
	return o
}

// Description of the StoredInfoType (max 256 characters).
func (o GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeConfigResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Store dictionary-based CustomInfoType.
func (o GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput) Dictionary() GooglePrivacyDlpV2DictionaryResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeConfigResponse) GooglePrivacyDlpV2DictionaryResponse {
		return v.Dictionary
	}).(GooglePrivacyDlpV2DictionaryResponseOutput)
}

// Display name of the StoredInfoType (max 256 characters).
func (o GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeConfigResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// StoredInfoType where findings are defined by a dictionary of phrases.
func (o GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput) LargeCustomDictionary() GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeConfigResponse) GooglePrivacyDlpV2LargeCustomDictionaryConfigResponse {
		return v.LargeCustomDictionary
	}).(GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput)
}

// Store regular expression-based StoredInfoType.
func (o GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput) Regex() GooglePrivacyDlpV2RegexResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeConfigResponse) GooglePrivacyDlpV2RegexResponse { return v.Regex }).(GooglePrivacyDlpV2RegexResponseOutput)
}

// Statistics for a StoredInfoType.
type GooglePrivacyDlpV2StoredInfoTypeStatsResponse struct {
	// StoredInfoType where findings are defined by a dictionary of phrases.
	LargeCustomDictionary GooglePrivacyDlpV2LargeCustomDictionaryStatsResponse `pulumi:"largeCustomDictionary"`
}

// Statistics for a StoredInfoType.
type GooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StoredInfoTypeStatsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput) ToGooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput() GooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput) ToGooglePrivacyDlpV2StoredInfoTypeStatsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput {
	return o
}

// StoredInfoType where findings are defined by a dictionary of phrases.
func (o GooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput) LargeCustomDictionary() GooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeStatsResponse) GooglePrivacyDlpV2LargeCustomDictionaryStatsResponse {
		return v.LargeCustomDictionary
	}).(GooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput)
}

// Version of a StoredInfoType, including the configuration used to build it, create timestamp, and current state.
type GooglePrivacyDlpV2StoredInfoTypeVersionResponse struct {
	// StoredInfoType configuration.
	Config GooglePrivacyDlpV2StoredInfoTypeConfigResponse `pulumi:"config"`
	// Create timestamp of the version. Read-only, determined by the system when the version is created.
	CreateTime string `pulumi:"createTime"`
	// Errors that occurred when creating this storedInfoType version, or anomalies detected in the storedInfoType data that render it unusable. Only the five most recent errors will be displayed, with the most recent error appearing first. For example, some of the data for stored custom dictionaries is put in the user's Cloud Storage bucket, and if this data is modified or deleted by the user or another system, the dictionary becomes invalid. If any errors occur, fix the problem indicated by the error message and use the UpdateStoredInfoType API method to create another version of the storedInfoType to continue using it, reusing the same `config` if it was not the source of the error.
	Errors []GooglePrivacyDlpV2ErrorResponse `pulumi:"errors"`
	// Stored info type version state. Read-only, updated by the system during dictionary creation.
	State string `pulumi:"state"`
	// Statistics about this storedInfoType version.
	Stats GooglePrivacyDlpV2StoredInfoTypeStatsResponse `pulumi:"stats"`
}

// Version of a StoredInfoType, including the configuration used to build it, create timestamp, and current state.
type GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StoredInfoTypeVersionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput) ToGooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput() GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput) ToGooglePrivacyDlpV2StoredInfoTypeVersionResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput {
	return o
}

// StoredInfoType configuration.
func (o GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput) Config() GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeVersionResponse) GooglePrivacyDlpV2StoredInfoTypeConfigResponse {
		return v.Config
	}).(GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput)
}

// Create timestamp of the version. Read-only, determined by the system when the version is created.
func (o GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeVersionResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Errors that occurred when creating this storedInfoType version, or anomalies detected in the storedInfoType data that render it unusable. Only the five most recent errors will be displayed, with the most recent error appearing first. For example, some of the data for stored custom dictionaries is put in the user's Cloud Storage bucket, and if this data is modified or deleted by the user or another system, the dictionary becomes invalid. If any errors occur, fix the problem indicated by the error message and use the UpdateStoredInfoType API method to create another version of the storedInfoType to continue using it, reusing the same `config` if it was not the source of the error.
func (o GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput) Errors() GooglePrivacyDlpV2ErrorResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeVersionResponse) []GooglePrivacyDlpV2ErrorResponse {
		return v.Errors
	}).(GooglePrivacyDlpV2ErrorResponseArrayOutput)
}

// Stored info type version state. Read-only, updated by the system during dictionary creation.
func (o GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeVersionResponse) string { return v.State }).(pulumi.StringOutput)
}

// Statistics about this storedInfoType version.
func (o GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput) Stats() GooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredInfoTypeVersionResponse) GooglePrivacyDlpV2StoredInfoTypeStatsResponse {
		return v.Stats
	}).(GooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput)
}

type GooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2StoredInfoTypeVersionResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutput) ToGooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutput() GooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutput) ToGooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2StoredInfoTypeVersionResponse {
		return vs[0].([]GooglePrivacyDlpV2StoredInfoTypeVersionResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput)
}

// A reference to a StoredInfoType to use with scanning.
type GooglePrivacyDlpV2StoredType struct {
	// Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
	CreateTime *string `pulumi:"createTime"`
	// Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
	Name *string `pulumi:"name"`
}

// GooglePrivacyDlpV2StoredTypeInput is an input type that accepts GooglePrivacyDlpV2StoredTypeArgs and GooglePrivacyDlpV2StoredTypeOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2StoredTypeInput` via:
//
//	GooglePrivacyDlpV2StoredTypeArgs{...}
type GooglePrivacyDlpV2StoredTypeInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2StoredTypeOutput() GooglePrivacyDlpV2StoredTypeOutput
	ToGooglePrivacyDlpV2StoredTypeOutputWithContext(context.Context) GooglePrivacyDlpV2StoredTypeOutput
}

// A reference to a StoredInfoType to use with scanning.
type GooglePrivacyDlpV2StoredTypeArgs struct {
	// Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GooglePrivacyDlpV2StoredTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StoredType)(nil)).Elem()
}

func (i GooglePrivacyDlpV2StoredTypeArgs) ToGooglePrivacyDlpV2StoredTypeOutput() GooglePrivacyDlpV2StoredTypeOutput {
	return i.ToGooglePrivacyDlpV2StoredTypeOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2StoredTypeArgs) ToGooglePrivacyDlpV2StoredTypeOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2StoredTypeOutput)
}

func (i GooglePrivacyDlpV2StoredTypeArgs) ToGooglePrivacyDlpV2StoredTypePtrOutput() GooglePrivacyDlpV2StoredTypePtrOutput {
	return i.ToGooglePrivacyDlpV2StoredTypePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2StoredTypeArgs) ToGooglePrivacyDlpV2StoredTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2StoredTypeOutput).ToGooglePrivacyDlpV2StoredTypePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2StoredTypePtrInput is an input type that accepts GooglePrivacyDlpV2StoredTypeArgs, GooglePrivacyDlpV2StoredTypePtr and GooglePrivacyDlpV2StoredTypePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2StoredTypePtrInput` via:
//
//	        GooglePrivacyDlpV2StoredTypeArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2StoredTypePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2StoredTypePtrOutput() GooglePrivacyDlpV2StoredTypePtrOutput
	ToGooglePrivacyDlpV2StoredTypePtrOutputWithContext(context.Context) GooglePrivacyDlpV2StoredTypePtrOutput
}

type googlePrivacyDlpV2StoredTypePtrType GooglePrivacyDlpV2StoredTypeArgs

func GooglePrivacyDlpV2StoredTypePtr(v *GooglePrivacyDlpV2StoredTypeArgs) GooglePrivacyDlpV2StoredTypePtrInput {
	return (*googlePrivacyDlpV2StoredTypePtrType)(v)
}

func (*googlePrivacyDlpV2StoredTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2StoredType)(nil)).Elem()
}

func (i *googlePrivacyDlpV2StoredTypePtrType) ToGooglePrivacyDlpV2StoredTypePtrOutput() GooglePrivacyDlpV2StoredTypePtrOutput {
	return i.ToGooglePrivacyDlpV2StoredTypePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2StoredTypePtrType) ToGooglePrivacyDlpV2StoredTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2StoredTypePtrOutput)
}

// A reference to a StoredInfoType to use with scanning.
type GooglePrivacyDlpV2StoredTypeOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StoredTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StoredType)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StoredTypeOutput) ToGooglePrivacyDlpV2StoredTypeOutput() GooglePrivacyDlpV2StoredTypeOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredTypeOutput) ToGooglePrivacyDlpV2StoredTypeOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredTypeOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredTypeOutput) ToGooglePrivacyDlpV2StoredTypePtrOutput() GooglePrivacyDlpV2StoredTypePtrOutput {
	return o.ToGooglePrivacyDlpV2StoredTypePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2StoredTypeOutput) ToGooglePrivacyDlpV2StoredTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2StoredType) *GooglePrivacyDlpV2StoredType {
		return &v
	}).(GooglePrivacyDlpV2StoredTypePtrOutput)
}

// Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
func (o GooglePrivacyDlpV2StoredTypeOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredType) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
func (o GooglePrivacyDlpV2StoredTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2StoredTypePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StoredTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2StoredType)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StoredTypePtrOutput) ToGooglePrivacyDlpV2StoredTypePtrOutput() GooglePrivacyDlpV2StoredTypePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredTypePtrOutput) ToGooglePrivacyDlpV2StoredTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredTypePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredTypePtrOutput) Elem() GooglePrivacyDlpV2StoredTypeOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2StoredType) GooglePrivacyDlpV2StoredType {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2StoredType
		return ret
	}).(GooglePrivacyDlpV2StoredTypeOutput)
}

// Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
func (o GooglePrivacyDlpV2StoredTypePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2StoredType) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
func (o GooglePrivacyDlpV2StoredTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2StoredType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A reference to a StoredInfoType to use with scanning.
type GooglePrivacyDlpV2StoredTypeResponse struct {
	// Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
	CreateTime string `pulumi:"createTime"`
	// Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
	Name string `pulumi:"name"`
}

// A reference to a StoredInfoType to use with scanning.
type GooglePrivacyDlpV2StoredTypeResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2StoredTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2StoredTypeResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2StoredTypeResponseOutput) ToGooglePrivacyDlpV2StoredTypeResponseOutput() GooglePrivacyDlpV2StoredTypeResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2StoredTypeResponseOutput) ToGooglePrivacyDlpV2StoredTypeResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2StoredTypeResponseOutput {
	return o
}

// Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.
func (o GooglePrivacyDlpV2StoredTypeResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredTypeResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.
func (o GooglePrivacyDlpV2StoredTypeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2StoredTypeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/dlp/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a "surrogate" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.
type GooglePrivacyDlpV2SurrogateType struct {
}

// GooglePrivacyDlpV2SurrogateTypeInput is an input type that accepts GooglePrivacyDlpV2SurrogateTypeArgs and GooglePrivacyDlpV2SurrogateTypeOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2SurrogateTypeInput` via:
//
//	GooglePrivacyDlpV2SurrogateTypeArgs{...}
type GooglePrivacyDlpV2SurrogateTypeInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2SurrogateTypeOutput() GooglePrivacyDlpV2SurrogateTypeOutput
	ToGooglePrivacyDlpV2SurrogateTypeOutputWithContext(context.Context) GooglePrivacyDlpV2SurrogateTypeOutput
}

// Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/dlp/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a "surrogate" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.
type GooglePrivacyDlpV2SurrogateTypeArgs struct {
}

func (GooglePrivacyDlpV2SurrogateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SurrogateType)(nil)).Elem()
}

func (i GooglePrivacyDlpV2SurrogateTypeArgs) ToGooglePrivacyDlpV2SurrogateTypeOutput() GooglePrivacyDlpV2SurrogateTypeOutput {
	return i.ToGooglePrivacyDlpV2SurrogateTypeOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2SurrogateTypeArgs) ToGooglePrivacyDlpV2SurrogateTypeOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SurrogateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SurrogateTypeOutput)
}

func (i GooglePrivacyDlpV2SurrogateTypeArgs) ToGooglePrivacyDlpV2SurrogateTypePtrOutput() GooglePrivacyDlpV2SurrogateTypePtrOutput {
	return i.ToGooglePrivacyDlpV2SurrogateTypePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2SurrogateTypeArgs) ToGooglePrivacyDlpV2SurrogateTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SurrogateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SurrogateTypeOutput).ToGooglePrivacyDlpV2SurrogateTypePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2SurrogateTypePtrInput is an input type that accepts GooglePrivacyDlpV2SurrogateTypeArgs, GooglePrivacyDlpV2SurrogateTypePtr and GooglePrivacyDlpV2SurrogateTypePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2SurrogateTypePtrInput` via:
//
//	        GooglePrivacyDlpV2SurrogateTypeArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2SurrogateTypePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2SurrogateTypePtrOutput() GooglePrivacyDlpV2SurrogateTypePtrOutput
	ToGooglePrivacyDlpV2SurrogateTypePtrOutputWithContext(context.Context) GooglePrivacyDlpV2SurrogateTypePtrOutput
}

type googlePrivacyDlpV2SurrogateTypePtrType GooglePrivacyDlpV2SurrogateTypeArgs

func GooglePrivacyDlpV2SurrogateTypePtr(v *GooglePrivacyDlpV2SurrogateTypeArgs) GooglePrivacyDlpV2SurrogateTypePtrInput {
	return (*googlePrivacyDlpV2SurrogateTypePtrType)(v)
}

func (*googlePrivacyDlpV2SurrogateTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2SurrogateType)(nil)).Elem()
}

func (i *googlePrivacyDlpV2SurrogateTypePtrType) ToGooglePrivacyDlpV2SurrogateTypePtrOutput() GooglePrivacyDlpV2SurrogateTypePtrOutput {
	return i.ToGooglePrivacyDlpV2SurrogateTypePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2SurrogateTypePtrType) ToGooglePrivacyDlpV2SurrogateTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SurrogateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2SurrogateTypePtrOutput)
}

// Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/dlp/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a "surrogate" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.
type GooglePrivacyDlpV2SurrogateTypeOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SurrogateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SurrogateType)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SurrogateTypeOutput) ToGooglePrivacyDlpV2SurrogateTypeOutput() GooglePrivacyDlpV2SurrogateTypeOutput {
	return o
}

func (o GooglePrivacyDlpV2SurrogateTypeOutput) ToGooglePrivacyDlpV2SurrogateTypeOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SurrogateTypeOutput {
	return o
}

func (o GooglePrivacyDlpV2SurrogateTypeOutput) ToGooglePrivacyDlpV2SurrogateTypePtrOutput() GooglePrivacyDlpV2SurrogateTypePtrOutput {
	return o.ToGooglePrivacyDlpV2SurrogateTypePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2SurrogateTypeOutput) ToGooglePrivacyDlpV2SurrogateTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SurrogateTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2SurrogateType) *GooglePrivacyDlpV2SurrogateType {
		return &v
	}).(GooglePrivacyDlpV2SurrogateTypePtrOutput)
}

type GooglePrivacyDlpV2SurrogateTypePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SurrogateTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2SurrogateType)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SurrogateTypePtrOutput) ToGooglePrivacyDlpV2SurrogateTypePtrOutput() GooglePrivacyDlpV2SurrogateTypePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2SurrogateTypePtrOutput) ToGooglePrivacyDlpV2SurrogateTypePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SurrogateTypePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2SurrogateTypePtrOutput) Elem() GooglePrivacyDlpV2SurrogateTypeOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2SurrogateType) GooglePrivacyDlpV2SurrogateType {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2SurrogateType
		return ret
	}).(GooglePrivacyDlpV2SurrogateTypeOutput)
}

// Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/dlp/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a "surrogate" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.
type GooglePrivacyDlpV2SurrogateTypeResponse struct {
}

// Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/dlp/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a "surrogate" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.
type GooglePrivacyDlpV2SurrogateTypeResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2SurrogateTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2SurrogateTypeResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2SurrogateTypeResponseOutput) ToGooglePrivacyDlpV2SurrogateTypeResponseOutput() GooglePrivacyDlpV2SurrogateTypeResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2SurrogateTypeResponseOutput) ToGooglePrivacyDlpV2SurrogateTypeResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2SurrogateTypeResponseOutput {
	return o
}

// Instructions regarding the table content being inspected.
type GooglePrivacyDlpV2TableOptions struct {
	// The columns that are the primary keys for table objects included in ContentItem. A copy of this cell's value will stored alongside alongside each finding so that the finding can be traced to the specific row it came from. No more than 3 may be provided.
	IdentifyingFields []GooglePrivacyDlpV2FieldId `pulumi:"identifyingFields"`
}

// GooglePrivacyDlpV2TableOptionsInput is an input type that accepts GooglePrivacyDlpV2TableOptionsArgs and GooglePrivacyDlpV2TableOptionsOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TableOptionsInput` via:
//
//	GooglePrivacyDlpV2TableOptionsArgs{...}
type GooglePrivacyDlpV2TableOptionsInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TableOptionsOutput() GooglePrivacyDlpV2TableOptionsOutput
	ToGooglePrivacyDlpV2TableOptionsOutputWithContext(context.Context) GooglePrivacyDlpV2TableOptionsOutput
}

// Instructions regarding the table content being inspected.
type GooglePrivacyDlpV2TableOptionsArgs struct {
	// The columns that are the primary keys for table objects included in ContentItem. A copy of this cell's value will stored alongside alongside each finding so that the finding can be traced to the specific row it came from. No more than 3 may be provided.
	IdentifyingFields GooglePrivacyDlpV2FieldIdArrayInput `pulumi:"identifyingFields"`
}

func (GooglePrivacyDlpV2TableOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TableOptions)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TableOptionsArgs) ToGooglePrivacyDlpV2TableOptionsOutput() GooglePrivacyDlpV2TableOptionsOutput {
	return i.ToGooglePrivacyDlpV2TableOptionsOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TableOptionsArgs) ToGooglePrivacyDlpV2TableOptionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TableOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TableOptionsOutput)
}

func (i GooglePrivacyDlpV2TableOptionsArgs) ToGooglePrivacyDlpV2TableOptionsPtrOutput() GooglePrivacyDlpV2TableOptionsPtrOutput {
	return i.ToGooglePrivacyDlpV2TableOptionsPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TableOptionsArgs) ToGooglePrivacyDlpV2TableOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TableOptionsOutput).ToGooglePrivacyDlpV2TableOptionsPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2TableOptionsPtrInput is an input type that accepts GooglePrivacyDlpV2TableOptionsArgs, GooglePrivacyDlpV2TableOptionsPtr and GooglePrivacyDlpV2TableOptionsPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TableOptionsPtrInput` via:
//
//	        GooglePrivacyDlpV2TableOptionsArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2TableOptionsPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TableOptionsPtrOutput() GooglePrivacyDlpV2TableOptionsPtrOutput
	ToGooglePrivacyDlpV2TableOptionsPtrOutputWithContext(context.Context) GooglePrivacyDlpV2TableOptionsPtrOutput
}

type googlePrivacyDlpV2TableOptionsPtrType GooglePrivacyDlpV2TableOptionsArgs

func GooglePrivacyDlpV2TableOptionsPtr(v *GooglePrivacyDlpV2TableOptionsArgs) GooglePrivacyDlpV2TableOptionsPtrInput {
	return (*googlePrivacyDlpV2TableOptionsPtrType)(v)
}

func (*googlePrivacyDlpV2TableOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TableOptions)(nil)).Elem()
}

func (i *googlePrivacyDlpV2TableOptionsPtrType) ToGooglePrivacyDlpV2TableOptionsPtrOutput() GooglePrivacyDlpV2TableOptionsPtrOutput {
	return i.ToGooglePrivacyDlpV2TableOptionsPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2TableOptionsPtrType) ToGooglePrivacyDlpV2TableOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TableOptionsPtrOutput)
}

// Instructions regarding the table content being inspected.
type GooglePrivacyDlpV2TableOptionsOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TableOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TableOptions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TableOptionsOutput) ToGooglePrivacyDlpV2TableOptionsOutput() GooglePrivacyDlpV2TableOptionsOutput {
	return o
}

func (o GooglePrivacyDlpV2TableOptionsOutput) ToGooglePrivacyDlpV2TableOptionsOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TableOptionsOutput {
	return o
}

func (o GooglePrivacyDlpV2TableOptionsOutput) ToGooglePrivacyDlpV2TableOptionsPtrOutput() GooglePrivacyDlpV2TableOptionsPtrOutput {
	return o.ToGooglePrivacyDlpV2TableOptionsPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2TableOptionsOutput) ToGooglePrivacyDlpV2TableOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TableOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2TableOptions) *GooglePrivacyDlpV2TableOptions {
		return &v
	}).(GooglePrivacyDlpV2TableOptionsPtrOutput)
}

// The columns that are the primary keys for table objects included in ContentItem. A copy of this cell's value will stored alongside alongside each finding so that the finding can be traced to the specific row it came from. No more than 3 may be provided.
func (o GooglePrivacyDlpV2TableOptionsOutput) IdentifyingFields() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TableOptions) []GooglePrivacyDlpV2FieldId { return v.IdentifyingFields }).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

type GooglePrivacyDlpV2TableOptionsPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TableOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TableOptions)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TableOptionsPtrOutput) ToGooglePrivacyDlpV2TableOptionsPtrOutput() GooglePrivacyDlpV2TableOptionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TableOptionsPtrOutput) ToGooglePrivacyDlpV2TableOptionsPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TableOptionsPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TableOptionsPtrOutput) Elem() GooglePrivacyDlpV2TableOptionsOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TableOptions) GooglePrivacyDlpV2TableOptions {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2TableOptions
		return ret
	}).(GooglePrivacyDlpV2TableOptionsOutput)
}

// The columns that are the primary keys for table objects included in ContentItem. A copy of this cell's value will stored alongside alongside each finding so that the finding can be traced to the specific row it came from. No more than 3 may be provided.
func (o GooglePrivacyDlpV2TableOptionsPtrOutput) IdentifyingFields() GooglePrivacyDlpV2FieldIdArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TableOptions) []GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.IdentifyingFields
	}).(GooglePrivacyDlpV2FieldIdArrayOutput)
}

// Instructions regarding the table content being inspected.
type GooglePrivacyDlpV2TableOptionsResponse struct {
	// The columns that are the primary keys for table objects included in ContentItem. A copy of this cell's value will stored alongside alongside each finding so that the finding can be traced to the specific row it came from. No more than 3 may be provided.
	IdentifyingFields []GooglePrivacyDlpV2FieldIdResponse `pulumi:"identifyingFields"`
}

// Instructions regarding the table content being inspected.
type GooglePrivacyDlpV2TableOptionsResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TableOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TableOptionsResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TableOptionsResponseOutput) ToGooglePrivacyDlpV2TableOptionsResponseOutput() GooglePrivacyDlpV2TableOptionsResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2TableOptionsResponseOutput) ToGooglePrivacyDlpV2TableOptionsResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TableOptionsResponseOutput {
	return o
}

// The columns that are the primary keys for table objects included in ContentItem. A copy of this cell's value will stored alongside alongside each finding so that the finding can be traced to the specific row it came from. No more than 3 may be provided.
func (o GooglePrivacyDlpV2TableOptionsResponseOutput) IdentifyingFields() GooglePrivacyDlpV2FieldIdResponseArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TableOptionsResponse) []GooglePrivacyDlpV2FieldIdResponse {
		return v.IdentifyingFields
	}).(GooglePrivacyDlpV2FieldIdResponseArrayOutput)
}

// A column with a semantic tag attached.
type GooglePrivacyDlpV2TaggedField struct {
	// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
	CustomTag *string `pulumi:"customTag"`
	// Identifies the column.
	Field GooglePrivacyDlpV2FieldId `pulumi:"field"`
	// If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
	Inferred *GoogleProtobufEmpty `pulumi:"inferred"`
	// A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
	InfoType *GooglePrivacyDlpV2InfoType `pulumi:"infoType"`
}

// GooglePrivacyDlpV2TaggedFieldInput is an input type that accepts GooglePrivacyDlpV2TaggedFieldArgs and GooglePrivacyDlpV2TaggedFieldOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TaggedFieldInput` via:
//
//	GooglePrivacyDlpV2TaggedFieldArgs{...}
type GooglePrivacyDlpV2TaggedFieldInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TaggedFieldOutput() GooglePrivacyDlpV2TaggedFieldOutput
	ToGooglePrivacyDlpV2TaggedFieldOutputWithContext(context.Context) GooglePrivacyDlpV2TaggedFieldOutput
}

// A column with a semantic tag attached.
type GooglePrivacyDlpV2TaggedFieldArgs struct {
	// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
	CustomTag pulumi.StringPtrInput `pulumi:"customTag"`
	// Identifies the column.
	Field GooglePrivacyDlpV2FieldIdInput `pulumi:"field"`
	// If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
	Inferred GoogleProtobufEmptyPtrInput `pulumi:"inferred"`
	// A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
	InfoType GooglePrivacyDlpV2InfoTypePtrInput `pulumi:"infoType"`
}

func (GooglePrivacyDlpV2TaggedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TaggedField)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TaggedFieldArgs) ToGooglePrivacyDlpV2TaggedFieldOutput() GooglePrivacyDlpV2TaggedFieldOutput {
	return i.ToGooglePrivacyDlpV2TaggedFieldOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TaggedFieldArgs) ToGooglePrivacyDlpV2TaggedFieldOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TaggedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TaggedFieldOutput)
}

// GooglePrivacyDlpV2TaggedFieldArrayInput is an input type that accepts GooglePrivacyDlpV2TaggedFieldArray and GooglePrivacyDlpV2TaggedFieldArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TaggedFieldArrayInput` via:
//
//	GooglePrivacyDlpV2TaggedFieldArray{ GooglePrivacyDlpV2TaggedFieldArgs{...} }
type GooglePrivacyDlpV2TaggedFieldArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TaggedFieldArrayOutput() GooglePrivacyDlpV2TaggedFieldArrayOutput
	ToGooglePrivacyDlpV2TaggedFieldArrayOutputWithContext(context.Context) GooglePrivacyDlpV2TaggedFieldArrayOutput
}

type GooglePrivacyDlpV2TaggedFieldArray []GooglePrivacyDlpV2TaggedFieldInput

func (GooglePrivacyDlpV2TaggedFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2TaggedField)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TaggedFieldArray) ToGooglePrivacyDlpV2TaggedFieldArrayOutput() GooglePrivacyDlpV2TaggedFieldArrayOutput {
	return i.ToGooglePrivacyDlpV2TaggedFieldArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TaggedFieldArray) ToGooglePrivacyDlpV2TaggedFieldArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TaggedFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TaggedFieldArrayOutput)
}

// A column with a semantic tag attached.
type GooglePrivacyDlpV2TaggedFieldOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TaggedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TaggedField)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TaggedFieldOutput) ToGooglePrivacyDlpV2TaggedFieldOutput() GooglePrivacyDlpV2TaggedFieldOutput {
	return o
}

func (o GooglePrivacyDlpV2TaggedFieldOutput) ToGooglePrivacyDlpV2TaggedFieldOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TaggedFieldOutput {
	return o
}

// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
func (o GooglePrivacyDlpV2TaggedFieldOutput) CustomTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TaggedField) *string { return v.CustomTag }).(pulumi.StringPtrOutput)
}

// Identifies the column.
func (o GooglePrivacyDlpV2TaggedFieldOutput) Field() GooglePrivacyDlpV2FieldIdOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TaggedField) GooglePrivacyDlpV2FieldId { return v.Field }).(GooglePrivacyDlpV2FieldIdOutput)
}

// If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
func (o GooglePrivacyDlpV2TaggedFieldOutput) Inferred() GoogleProtobufEmptyPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TaggedField) *GoogleProtobufEmpty { return v.Inferred }).(GoogleProtobufEmptyPtrOutput)
}

// A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
func (o GooglePrivacyDlpV2TaggedFieldOutput) InfoType() GooglePrivacyDlpV2InfoTypePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TaggedField) *GooglePrivacyDlpV2InfoType { return v.InfoType }).(GooglePrivacyDlpV2InfoTypePtrOutput)
}

type GooglePrivacyDlpV2TaggedFieldArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TaggedFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2TaggedField)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TaggedFieldArrayOutput) ToGooglePrivacyDlpV2TaggedFieldArrayOutput() GooglePrivacyDlpV2TaggedFieldArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2TaggedFieldArrayOutput) ToGooglePrivacyDlpV2TaggedFieldArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TaggedFieldArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2TaggedFieldArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2TaggedFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2TaggedField {
		return vs[0].([]GooglePrivacyDlpV2TaggedField)[vs[1].(int)]
	}).(GooglePrivacyDlpV2TaggedFieldOutput)
}

// A column with a semantic tag attached.
type GooglePrivacyDlpV2TaggedFieldResponse struct {
	// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
	CustomTag string `pulumi:"customTag"`
	// Identifies the column.
	Field GooglePrivacyDlpV2FieldIdResponse `pulumi:"field"`
	// If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
	Inferred GoogleProtobufEmptyResponse `pulumi:"inferred"`
	// A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
	InfoType GooglePrivacyDlpV2InfoTypeResponse `pulumi:"infoType"`
}

// A column with a semantic tag attached.
type GooglePrivacyDlpV2TaggedFieldResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TaggedFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TaggedFieldResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TaggedFieldResponseOutput) ToGooglePrivacyDlpV2TaggedFieldResponseOutput() GooglePrivacyDlpV2TaggedFieldResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2TaggedFieldResponseOutput) ToGooglePrivacyDlpV2TaggedFieldResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TaggedFieldResponseOutput {
	return o
}

// A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).
func (o GooglePrivacyDlpV2TaggedFieldResponseOutput) CustomTag() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TaggedFieldResponse) string { return v.CustomTag }).(pulumi.StringOutput)
}

// Identifies the column.
func (o GooglePrivacyDlpV2TaggedFieldResponseOutput) Field() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TaggedFieldResponse) GooglePrivacyDlpV2FieldIdResponse { return v.Field }).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// If no semantic tag is indicated, we infer the statistical model from the distribution of values in the input data
func (o GooglePrivacyDlpV2TaggedFieldResponseOutput) Inferred() GoogleProtobufEmptyResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TaggedFieldResponse) GoogleProtobufEmptyResponse { return v.Inferred }).(GoogleProtobufEmptyResponseOutput)
}

// A column can be tagged with a InfoType to use the relevant public dataset as a statistical model of population, if available. We currently support US ZIP codes, region codes, ages and genders. To programmatically obtain the list of supported InfoTypes, use ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
func (o GooglePrivacyDlpV2TaggedFieldResponseOutput) InfoType() GooglePrivacyDlpV2InfoTypeResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TaggedFieldResponse) GooglePrivacyDlpV2InfoTypeResponse { return v.InfoType }).(GooglePrivacyDlpV2InfoTypeResponseOutput)
}

type GooglePrivacyDlpV2TaggedFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TaggedFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2TaggedFieldResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TaggedFieldResponseArrayOutput) ToGooglePrivacyDlpV2TaggedFieldResponseArrayOutput() GooglePrivacyDlpV2TaggedFieldResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2TaggedFieldResponseArrayOutput) ToGooglePrivacyDlpV2TaggedFieldResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TaggedFieldResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2TaggedFieldResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2TaggedFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2TaggedFieldResponse {
		return vs[0].([]GooglePrivacyDlpV2TaggedFieldResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2TaggedFieldResponseOutput)
}

// Throw an error and fail the request when a transformation error occurs.
type GooglePrivacyDlpV2ThrowError struct {
}

// GooglePrivacyDlpV2ThrowErrorInput is an input type that accepts GooglePrivacyDlpV2ThrowErrorArgs and GooglePrivacyDlpV2ThrowErrorOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ThrowErrorInput` via:
//
//	GooglePrivacyDlpV2ThrowErrorArgs{...}
type GooglePrivacyDlpV2ThrowErrorInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ThrowErrorOutput() GooglePrivacyDlpV2ThrowErrorOutput
	ToGooglePrivacyDlpV2ThrowErrorOutputWithContext(context.Context) GooglePrivacyDlpV2ThrowErrorOutput
}

// Throw an error and fail the request when a transformation error occurs.
type GooglePrivacyDlpV2ThrowErrorArgs struct {
}

func (GooglePrivacyDlpV2ThrowErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ThrowError)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ThrowErrorArgs) ToGooglePrivacyDlpV2ThrowErrorOutput() GooglePrivacyDlpV2ThrowErrorOutput {
	return i.ToGooglePrivacyDlpV2ThrowErrorOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ThrowErrorArgs) ToGooglePrivacyDlpV2ThrowErrorOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ThrowErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ThrowErrorOutput)
}

func (i GooglePrivacyDlpV2ThrowErrorArgs) ToGooglePrivacyDlpV2ThrowErrorPtrOutput() GooglePrivacyDlpV2ThrowErrorPtrOutput {
	return i.ToGooglePrivacyDlpV2ThrowErrorPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ThrowErrorArgs) ToGooglePrivacyDlpV2ThrowErrorPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ThrowErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ThrowErrorOutput).ToGooglePrivacyDlpV2ThrowErrorPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ThrowErrorPtrInput is an input type that accepts GooglePrivacyDlpV2ThrowErrorArgs, GooglePrivacyDlpV2ThrowErrorPtr and GooglePrivacyDlpV2ThrowErrorPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ThrowErrorPtrInput` via:
//
//	        GooglePrivacyDlpV2ThrowErrorArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ThrowErrorPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ThrowErrorPtrOutput() GooglePrivacyDlpV2ThrowErrorPtrOutput
	ToGooglePrivacyDlpV2ThrowErrorPtrOutputWithContext(context.Context) GooglePrivacyDlpV2ThrowErrorPtrOutput
}

type googlePrivacyDlpV2ThrowErrorPtrType GooglePrivacyDlpV2ThrowErrorArgs

func GooglePrivacyDlpV2ThrowErrorPtr(v *GooglePrivacyDlpV2ThrowErrorArgs) GooglePrivacyDlpV2ThrowErrorPtrInput {
	return (*googlePrivacyDlpV2ThrowErrorPtrType)(v)
}

func (*googlePrivacyDlpV2ThrowErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ThrowError)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ThrowErrorPtrType) ToGooglePrivacyDlpV2ThrowErrorPtrOutput() GooglePrivacyDlpV2ThrowErrorPtrOutput {
	return i.ToGooglePrivacyDlpV2ThrowErrorPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ThrowErrorPtrType) ToGooglePrivacyDlpV2ThrowErrorPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ThrowErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ThrowErrorPtrOutput)
}

// Throw an error and fail the request when a transformation error occurs.
type GooglePrivacyDlpV2ThrowErrorOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ThrowErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ThrowError)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ThrowErrorOutput) ToGooglePrivacyDlpV2ThrowErrorOutput() GooglePrivacyDlpV2ThrowErrorOutput {
	return o
}

func (o GooglePrivacyDlpV2ThrowErrorOutput) ToGooglePrivacyDlpV2ThrowErrorOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ThrowErrorOutput {
	return o
}

func (o GooglePrivacyDlpV2ThrowErrorOutput) ToGooglePrivacyDlpV2ThrowErrorPtrOutput() GooglePrivacyDlpV2ThrowErrorPtrOutput {
	return o.ToGooglePrivacyDlpV2ThrowErrorPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ThrowErrorOutput) ToGooglePrivacyDlpV2ThrowErrorPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ThrowErrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2ThrowError) *GooglePrivacyDlpV2ThrowError {
		return &v
	}).(GooglePrivacyDlpV2ThrowErrorPtrOutput)
}

type GooglePrivacyDlpV2ThrowErrorPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ThrowErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2ThrowError)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ThrowErrorPtrOutput) ToGooglePrivacyDlpV2ThrowErrorPtrOutput() GooglePrivacyDlpV2ThrowErrorPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ThrowErrorPtrOutput) ToGooglePrivacyDlpV2ThrowErrorPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ThrowErrorPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ThrowErrorPtrOutput) Elem() GooglePrivacyDlpV2ThrowErrorOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2ThrowError) GooglePrivacyDlpV2ThrowError {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2ThrowError
		return ret
	}).(GooglePrivacyDlpV2ThrowErrorOutput)
}

// Throw an error and fail the request when a transformation error occurs.
type GooglePrivacyDlpV2ThrowErrorResponse struct {
}

// Throw an error and fail the request when a transformation error occurs.
type GooglePrivacyDlpV2ThrowErrorResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ThrowErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ThrowErrorResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ThrowErrorResponseOutput) ToGooglePrivacyDlpV2ThrowErrorResponseOutput() GooglePrivacyDlpV2ThrowErrorResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ThrowErrorResponseOutput) ToGooglePrivacyDlpV2ThrowErrorResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ThrowErrorResponseOutput {
	return o
}

// For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a portion of the value.
type GooglePrivacyDlpV2TimePartConfig struct {
	// The part of the time to keep.
	PartToExtract *GooglePrivacyDlpV2TimePartConfigPartToExtract `pulumi:"partToExtract"`
}

// GooglePrivacyDlpV2TimePartConfigInput is an input type that accepts GooglePrivacyDlpV2TimePartConfigArgs and GooglePrivacyDlpV2TimePartConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TimePartConfigInput` via:
//
//	GooglePrivacyDlpV2TimePartConfigArgs{...}
type GooglePrivacyDlpV2TimePartConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TimePartConfigOutput() GooglePrivacyDlpV2TimePartConfigOutput
	ToGooglePrivacyDlpV2TimePartConfigOutputWithContext(context.Context) GooglePrivacyDlpV2TimePartConfigOutput
}

// For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a portion of the value.
type GooglePrivacyDlpV2TimePartConfigArgs struct {
	// The part of the time to keep.
	PartToExtract GooglePrivacyDlpV2TimePartConfigPartToExtractPtrInput `pulumi:"partToExtract"`
}

func (GooglePrivacyDlpV2TimePartConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TimePartConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TimePartConfigArgs) ToGooglePrivacyDlpV2TimePartConfigOutput() GooglePrivacyDlpV2TimePartConfigOutput {
	return i.ToGooglePrivacyDlpV2TimePartConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TimePartConfigArgs) ToGooglePrivacyDlpV2TimePartConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimePartConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TimePartConfigOutput)
}

func (i GooglePrivacyDlpV2TimePartConfigArgs) ToGooglePrivacyDlpV2TimePartConfigPtrOutput() GooglePrivacyDlpV2TimePartConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2TimePartConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TimePartConfigArgs) ToGooglePrivacyDlpV2TimePartConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimePartConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TimePartConfigOutput).ToGooglePrivacyDlpV2TimePartConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2TimePartConfigPtrInput is an input type that accepts GooglePrivacyDlpV2TimePartConfigArgs, GooglePrivacyDlpV2TimePartConfigPtr and GooglePrivacyDlpV2TimePartConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TimePartConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2TimePartConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2TimePartConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TimePartConfigPtrOutput() GooglePrivacyDlpV2TimePartConfigPtrOutput
	ToGooglePrivacyDlpV2TimePartConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2TimePartConfigPtrOutput
}

type googlePrivacyDlpV2TimePartConfigPtrType GooglePrivacyDlpV2TimePartConfigArgs

func GooglePrivacyDlpV2TimePartConfigPtr(v *GooglePrivacyDlpV2TimePartConfigArgs) GooglePrivacyDlpV2TimePartConfigPtrInput {
	return (*googlePrivacyDlpV2TimePartConfigPtrType)(v)
}

func (*googlePrivacyDlpV2TimePartConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TimePartConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2TimePartConfigPtrType) ToGooglePrivacyDlpV2TimePartConfigPtrOutput() GooglePrivacyDlpV2TimePartConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2TimePartConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2TimePartConfigPtrType) ToGooglePrivacyDlpV2TimePartConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimePartConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TimePartConfigPtrOutput)
}

// For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a portion of the value.
type GooglePrivacyDlpV2TimePartConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TimePartConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TimePartConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TimePartConfigOutput) ToGooglePrivacyDlpV2TimePartConfigOutput() GooglePrivacyDlpV2TimePartConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2TimePartConfigOutput) ToGooglePrivacyDlpV2TimePartConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimePartConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2TimePartConfigOutput) ToGooglePrivacyDlpV2TimePartConfigPtrOutput() GooglePrivacyDlpV2TimePartConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2TimePartConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2TimePartConfigOutput) ToGooglePrivacyDlpV2TimePartConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimePartConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2TimePartConfig) *GooglePrivacyDlpV2TimePartConfig {
		return &v
	}).(GooglePrivacyDlpV2TimePartConfigPtrOutput)
}

// The part of the time to keep.
func (o GooglePrivacyDlpV2TimePartConfigOutput) PartToExtract() GooglePrivacyDlpV2TimePartConfigPartToExtractPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TimePartConfig) *GooglePrivacyDlpV2TimePartConfigPartToExtract {
		return v.PartToExtract
	}).(GooglePrivacyDlpV2TimePartConfigPartToExtractPtrOutput)
}

type GooglePrivacyDlpV2TimePartConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TimePartConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TimePartConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TimePartConfigPtrOutput) ToGooglePrivacyDlpV2TimePartConfigPtrOutput() GooglePrivacyDlpV2TimePartConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TimePartConfigPtrOutput) ToGooglePrivacyDlpV2TimePartConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimePartConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TimePartConfigPtrOutput) Elem() GooglePrivacyDlpV2TimePartConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TimePartConfig) GooglePrivacyDlpV2TimePartConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2TimePartConfig
		return ret
	}).(GooglePrivacyDlpV2TimePartConfigOutput)
}

// The part of the time to keep.
func (o GooglePrivacyDlpV2TimePartConfigPtrOutput) PartToExtract() GooglePrivacyDlpV2TimePartConfigPartToExtractPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TimePartConfig) *GooglePrivacyDlpV2TimePartConfigPartToExtract {
		if v == nil {
			return nil
		}
		return v.PartToExtract
	}).(GooglePrivacyDlpV2TimePartConfigPartToExtractPtrOutput)
}

// For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a portion of the value.
type GooglePrivacyDlpV2TimePartConfigResponse struct {
	// The part of the time to keep.
	PartToExtract string `pulumi:"partToExtract"`
}

// For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a portion of the value.
type GooglePrivacyDlpV2TimePartConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TimePartConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TimePartConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TimePartConfigResponseOutput) ToGooglePrivacyDlpV2TimePartConfigResponseOutput() GooglePrivacyDlpV2TimePartConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2TimePartConfigResponseOutput) ToGooglePrivacyDlpV2TimePartConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimePartConfigResponseOutput {
	return o
}

// The part of the time to keep.
func (o GooglePrivacyDlpV2TimePartConfigResponseOutput) PartToExtract() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TimePartConfigResponse) string { return v.PartToExtract }).(pulumi.StringOutput)
}

// Configuration of the timespan of the items to include in scanning. Currently only supported when inspecting Cloud Storage and BigQuery.
type GooglePrivacyDlpV2TimespanConfig struct {
	// When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger or the timespan end_time used in the last run of the JobTrigger.
	EnableAutoPopulationOfTimespanConfig *bool `pulumi:"enableAutoPopulationOfTimespanConfig"`
	// Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.
	EndTime *string `pulumi:"endTime"`
	// Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.
	StartTime *string `pulumi:"startTime"`
	// Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. *For BigQuery* If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. If your BigQuery table is [partitioned at ingestion time](https://cloud.google.com/bigquery/docs/partitioned-tables#ingestion_time), you can use any of the following pseudo-columns as your timestamp field. When used with Cloud DLP, these pseudo-column names are case sensitive. - _PARTITIONTIME - _PARTITIONDATE - _PARTITION_LOAD_TIME *For Datastore* If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`. See the [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-timespan) related to this operation.
	TimestampField *GooglePrivacyDlpV2FieldId `pulumi:"timestampField"`
}

// GooglePrivacyDlpV2TimespanConfigInput is an input type that accepts GooglePrivacyDlpV2TimespanConfigArgs and GooglePrivacyDlpV2TimespanConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TimespanConfigInput` via:
//
//	GooglePrivacyDlpV2TimespanConfigArgs{...}
type GooglePrivacyDlpV2TimespanConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TimespanConfigOutput() GooglePrivacyDlpV2TimespanConfigOutput
	ToGooglePrivacyDlpV2TimespanConfigOutputWithContext(context.Context) GooglePrivacyDlpV2TimespanConfigOutput
}

// Configuration of the timespan of the items to include in scanning. Currently only supported when inspecting Cloud Storage and BigQuery.
type GooglePrivacyDlpV2TimespanConfigArgs struct {
	// When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger or the timespan end_time used in the last run of the JobTrigger.
	EnableAutoPopulationOfTimespanConfig pulumi.BoolPtrInput `pulumi:"enableAutoPopulationOfTimespanConfig"`
	// Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. *For BigQuery* If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. If your BigQuery table is [partitioned at ingestion time](https://cloud.google.com/bigquery/docs/partitioned-tables#ingestion_time), you can use any of the following pseudo-columns as your timestamp field. When used with Cloud DLP, these pseudo-column names are case sensitive. - _PARTITIONTIME - _PARTITIONDATE - _PARTITION_LOAD_TIME *For Datastore* If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`. See the [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-timespan) related to this operation.
	TimestampField GooglePrivacyDlpV2FieldIdPtrInput `pulumi:"timestampField"`
}

func (GooglePrivacyDlpV2TimespanConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TimespanConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TimespanConfigArgs) ToGooglePrivacyDlpV2TimespanConfigOutput() GooglePrivacyDlpV2TimespanConfigOutput {
	return i.ToGooglePrivacyDlpV2TimespanConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TimespanConfigArgs) ToGooglePrivacyDlpV2TimespanConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimespanConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TimespanConfigOutput)
}

func (i GooglePrivacyDlpV2TimespanConfigArgs) ToGooglePrivacyDlpV2TimespanConfigPtrOutput() GooglePrivacyDlpV2TimespanConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2TimespanConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TimespanConfigArgs) ToGooglePrivacyDlpV2TimespanConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimespanConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TimespanConfigOutput).ToGooglePrivacyDlpV2TimespanConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2TimespanConfigPtrInput is an input type that accepts GooglePrivacyDlpV2TimespanConfigArgs, GooglePrivacyDlpV2TimespanConfigPtr and GooglePrivacyDlpV2TimespanConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TimespanConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2TimespanConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2TimespanConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TimespanConfigPtrOutput() GooglePrivacyDlpV2TimespanConfigPtrOutput
	ToGooglePrivacyDlpV2TimespanConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2TimespanConfigPtrOutput
}

type googlePrivacyDlpV2TimespanConfigPtrType GooglePrivacyDlpV2TimespanConfigArgs

func GooglePrivacyDlpV2TimespanConfigPtr(v *GooglePrivacyDlpV2TimespanConfigArgs) GooglePrivacyDlpV2TimespanConfigPtrInput {
	return (*googlePrivacyDlpV2TimespanConfigPtrType)(v)
}

func (*googlePrivacyDlpV2TimespanConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TimespanConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2TimespanConfigPtrType) ToGooglePrivacyDlpV2TimespanConfigPtrOutput() GooglePrivacyDlpV2TimespanConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2TimespanConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2TimespanConfigPtrType) ToGooglePrivacyDlpV2TimespanConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimespanConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TimespanConfigPtrOutput)
}

// Configuration of the timespan of the items to include in scanning. Currently only supported when inspecting Cloud Storage and BigQuery.
type GooglePrivacyDlpV2TimespanConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TimespanConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TimespanConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TimespanConfigOutput) ToGooglePrivacyDlpV2TimespanConfigOutput() GooglePrivacyDlpV2TimespanConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2TimespanConfigOutput) ToGooglePrivacyDlpV2TimespanConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimespanConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2TimespanConfigOutput) ToGooglePrivacyDlpV2TimespanConfigPtrOutput() GooglePrivacyDlpV2TimespanConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2TimespanConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2TimespanConfigOutput) ToGooglePrivacyDlpV2TimespanConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimespanConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2TimespanConfig) *GooglePrivacyDlpV2TimespanConfig {
		return &v
	}).(GooglePrivacyDlpV2TimespanConfigPtrOutput)
}

// When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger or the timespan end_time used in the last run of the JobTrigger.
func (o GooglePrivacyDlpV2TimespanConfigOutput) EnableAutoPopulationOfTimespanConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TimespanConfig) *bool { return v.EnableAutoPopulationOfTimespanConfig }).(pulumi.BoolPtrOutput)
}

// Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.
func (o GooglePrivacyDlpV2TimespanConfigOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TimespanConfig) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.
func (o GooglePrivacyDlpV2TimespanConfigOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TimespanConfig) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. *For BigQuery* If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. If your BigQuery table is [partitioned at ingestion time](https://cloud.google.com/bigquery/docs/partitioned-tables#ingestion_time), you can use any of the following pseudo-columns as your timestamp field. When used with Cloud DLP, these pseudo-column names are case sensitive. - _PARTITIONTIME - _PARTITIONDATE - _PARTITION_LOAD_TIME *For Datastore* If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`. See the [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-timespan) related to this operation.
func (o GooglePrivacyDlpV2TimespanConfigOutput) TimestampField() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TimespanConfig) *GooglePrivacyDlpV2FieldId { return v.TimestampField }).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

type GooglePrivacyDlpV2TimespanConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TimespanConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TimespanConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TimespanConfigPtrOutput) ToGooglePrivacyDlpV2TimespanConfigPtrOutput() GooglePrivacyDlpV2TimespanConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TimespanConfigPtrOutput) ToGooglePrivacyDlpV2TimespanConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimespanConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TimespanConfigPtrOutput) Elem() GooglePrivacyDlpV2TimespanConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TimespanConfig) GooglePrivacyDlpV2TimespanConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2TimespanConfig
		return ret
	}).(GooglePrivacyDlpV2TimespanConfigOutput)
}

// When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger or the timespan end_time used in the last run of the JobTrigger.
func (o GooglePrivacyDlpV2TimespanConfigPtrOutput) EnableAutoPopulationOfTimespanConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TimespanConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutoPopulationOfTimespanConfig
	}).(pulumi.BoolPtrOutput)
}

// Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.
func (o GooglePrivacyDlpV2TimespanConfigPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TimespanConfig) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.
func (o GooglePrivacyDlpV2TimespanConfigPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TimespanConfig) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. *For BigQuery* If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. If your BigQuery table is [partitioned at ingestion time](https://cloud.google.com/bigquery/docs/partitioned-tables#ingestion_time), you can use any of the following pseudo-columns as your timestamp field. When used with Cloud DLP, these pseudo-column names are case sensitive. - _PARTITIONTIME - _PARTITIONDATE - _PARTITION_LOAD_TIME *For Datastore* If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`. See the [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-timespan) related to this operation.
func (o GooglePrivacyDlpV2TimespanConfigPtrOutput) TimestampField() GooglePrivacyDlpV2FieldIdPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TimespanConfig) *GooglePrivacyDlpV2FieldId {
		if v == nil {
			return nil
		}
		return v.TimestampField
	}).(GooglePrivacyDlpV2FieldIdPtrOutput)
}

// Configuration of the timespan of the items to include in scanning. Currently only supported when inspecting Cloud Storage and BigQuery.
type GooglePrivacyDlpV2TimespanConfigResponse struct {
	// When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger or the timespan end_time used in the last run of the JobTrigger.
	EnableAutoPopulationOfTimespanConfig bool `pulumi:"enableAutoPopulationOfTimespanConfig"`
	// Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.
	EndTime string `pulumi:"endTime"`
	// Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.
	StartTime string `pulumi:"startTime"`
	// Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. *For BigQuery* If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. If your BigQuery table is [partitioned at ingestion time](https://cloud.google.com/bigquery/docs/partitioned-tables#ingestion_time), you can use any of the following pseudo-columns as your timestamp field. When used with Cloud DLP, these pseudo-column names are case sensitive. - _PARTITIONTIME - _PARTITIONDATE - _PARTITION_LOAD_TIME *For Datastore* If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`. See the [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-timespan) related to this operation.
	TimestampField GooglePrivacyDlpV2FieldIdResponse `pulumi:"timestampField"`
}

// Configuration of the timespan of the items to include in scanning. Currently only supported when inspecting Cloud Storage and BigQuery.
type GooglePrivacyDlpV2TimespanConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TimespanConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TimespanConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TimespanConfigResponseOutput) ToGooglePrivacyDlpV2TimespanConfigResponseOutput() GooglePrivacyDlpV2TimespanConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2TimespanConfigResponseOutput) ToGooglePrivacyDlpV2TimespanConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TimespanConfigResponseOutput {
	return o
}

// When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger or the timespan end_time used in the last run of the JobTrigger.
func (o GooglePrivacyDlpV2TimespanConfigResponseOutput) EnableAutoPopulationOfTimespanConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TimespanConfigResponse) bool { return v.EnableAutoPopulationOfTimespanConfig }).(pulumi.BoolOutput)
}

// Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.
func (o GooglePrivacyDlpV2TimespanConfigResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TimespanConfigResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.
func (o GooglePrivacyDlpV2TimespanConfigResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TimespanConfigResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. *For BigQuery* If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. If your BigQuery table is [partitioned at ingestion time](https://cloud.google.com/bigquery/docs/partitioned-tables#ingestion_time), you can use any of the following pseudo-columns as your timestamp field. When used with Cloud DLP, these pseudo-column names are case sensitive. - _PARTITIONTIME - _PARTITIONDATE - _PARTITION_LOAD_TIME *For Datastore* If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`. See the [known issue](https://cloud.google.com/dlp/docs/known-issues#bq-timespan) related to this operation.
func (o GooglePrivacyDlpV2TimespanConfigResponseOutput) TimestampField() GooglePrivacyDlpV2FieldIdResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TimespanConfigResponse) GooglePrivacyDlpV2FieldIdResponse {
		return v.TimestampField
	}).(GooglePrivacyDlpV2FieldIdResponseOutput)
}

// User specified templates and configs for how to deidentify structured, unstructures, and image files. User must provide either a unstructured deidentify template or at least one redact image config.
type GooglePrivacyDlpV2TransformationConfig struct {
	// De-identify template. If this template is specified, it will serve as the default de-identify template. This template cannot contain `record_transformations` since it can be used for unstructured content such as free-form text files. If this template is not set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured content.
	DeidentifyTemplate *string `pulumi:"deidentifyTemplate"`
	// Image redact template. If this template is specified, it will serve as the de-identify template for images. If this template is not set, all findings in the image will be redacted with a black box.
	ImageRedactTemplate *string `pulumi:"imageRedactTemplate"`
	// Structured de-identify template. If this template is specified, it will serve as the de-identify template for structured content such as delimited files and tables. If this template is not set but the `deidentify_template` is set, then `deidentify_template` will also apply to the structured content. If neither template is set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify structured content.
	StructuredDeidentifyTemplate *string `pulumi:"structuredDeidentifyTemplate"`
}

// GooglePrivacyDlpV2TransformationConfigInput is an input type that accepts GooglePrivacyDlpV2TransformationConfigArgs and GooglePrivacyDlpV2TransformationConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TransformationConfigInput` via:
//
//	GooglePrivacyDlpV2TransformationConfigArgs{...}
type GooglePrivacyDlpV2TransformationConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TransformationConfigOutput() GooglePrivacyDlpV2TransformationConfigOutput
	ToGooglePrivacyDlpV2TransformationConfigOutputWithContext(context.Context) GooglePrivacyDlpV2TransformationConfigOutput
}

// User specified templates and configs for how to deidentify structured, unstructures, and image files. User must provide either a unstructured deidentify template or at least one redact image config.
type GooglePrivacyDlpV2TransformationConfigArgs struct {
	// De-identify template. If this template is specified, it will serve as the default de-identify template. This template cannot contain `record_transformations` since it can be used for unstructured content such as free-form text files. If this template is not set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured content.
	DeidentifyTemplate pulumi.StringPtrInput `pulumi:"deidentifyTemplate"`
	// Image redact template. If this template is specified, it will serve as the de-identify template for images. If this template is not set, all findings in the image will be redacted with a black box.
	ImageRedactTemplate pulumi.StringPtrInput `pulumi:"imageRedactTemplate"`
	// Structured de-identify template. If this template is specified, it will serve as the de-identify template for structured content such as delimited files and tables. If this template is not set but the `deidentify_template` is set, then `deidentify_template` will also apply to the structured content. If neither template is set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify structured content.
	StructuredDeidentifyTemplate pulumi.StringPtrInput `pulumi:"structuredDeidentifyTemplate"`
}

func (GooglePrivacyDlpV2TransformationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransformationConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TransformationConfigArgs) ToGooglePrivacyDlpV2TransformationConfigOutput() GooglePrivacyDlpV2TransformationConfigOutput {
	return i.ToGooglePrivacyDlpV2TransformationConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TransformationConfigArgs) ToGooglePrivacyDlpV2TransformationConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransformationConfigOutput)
}

func (i GooglePrivacyDlpV2TransformationConfigArgs) ToGooglePrivacyDlpV2TransformationConfigPtrOutput() GooglePrivacyDlpV2TransformationConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2TransformationConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TransformationConfigArgs) ToGooglePrivacyDlpV2TransformationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransformationConfigOutput).ToGooglePrivacyDlpV2TransformationConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2TransformationConfigPtrInput is an input type that accepts GooglePrivacyDlpV2TransformationConfigArgs, GooglePrivacyDlpV2TransformationConfigPtr and GooglePrivacyDlpV2TransformationConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TransformationConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2TransformationConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2TransformationConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TransformationConfigPtrOutput() GooglePrivacyDlpV2TransformationConfigPtrOutput
	ToGooglePrivacyDlpV2TransformationConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2TransformationConfigPtrOutput
}

type googlePrivacyDlpV2TransformationConfigPtrType GooglePrivacyDlpV2TransformationConfigArgs

func GooglePrivacyDlpV2TransformationConfigPtr(v *GooglePrivacyDlpV2TransformationConfigArgs) GooglePrivacyDlpV2TransformationConfigPtrInput {
	return (*googlePrivacyDlpV2TransformationConfigPtrType)(v)
}

func (*googlePrivacyDlpV2TransformationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TransformationConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2TransformationConfigPtrType) ToGooglePrivacyDlpV2TransformationConfigPtrOutput() GooglePrivacyDlpV2TransformationConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2TransformationConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2TransformationConfigPtrType) ToGooglePrivacyDlpV2TransformationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransformationConfigPtrOutput)
}

// User specified templates and configs for how to deidentify structured, unstructures, and image files. User must provide either a unstructured deidentify template or at least one redact image config.
type GooglePrivacyDlpV2TransformationConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransformationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransformationConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransformationConfigOutput) ToGooglePrivacyDlpV2TransformationConfigOutput() GooglePrivacyDlpV2TransformationConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationConfigOutput) ToGooglePrivacyDlpV2TransformationConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationConfigOutput) ToGooglePrivacyDlpV2TransformationConfigPtrOutput() GooglePrivacyDlpV2TransformationConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2TransformationConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2TransformationConfigOutput) ToGooglePrivacyDlpV2TransformationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2TransformationConfig) *GooglePrivacyDlpV2TransformationConfig {
		return &v
	}).(GooglePrivacyDlpV2TransformationConfigPtrOutput)
}

// De-identify template. If this template is specified, it will serve as the default de-identify template. This template cannot contain `record_transformations` since it can be used for unstructured content such as free-form text files. If this template is not set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured content.
func (o GooglePrivacyDlpV2TransformationConfigOutput) DeidentifyTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationConfig) *string { return v.DeidentifyTemplate }).(pulumi.StringPtrOutput)
}

// Image redact template. If this template is specified, it will serve as the de-identify template for images. If this template is not set, all findings in the image will be redacted with a black box.
func (o GooglePrivacyDlpV2TransformationConfigOutput) ImageRedactTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationConfig) *string { return v.ImageRedactTemplate }).(pulumi.StringPtrOutput)
}

// Structured de-identify template. If this template is specified, it will serve as the de-identify template for structured content such as delimited files and tables. If this template is not set but the `deidentify_template` is set, then `deidentify_template` will also apply to the structured content. If neither template is set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify structured content.
func (o GooglePrivacyDlpV2TransformationConfigOutput) StructuredDeidentifyTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationConfig) *string { return v.StructuredDeidentifyTemplate }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2TransformationConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransformationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TransformationConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransformationConfigPtrOutput) ToGooglePrivacyDlpV2TransformationConfigPtrOutput() GooglePrivacyDlpV2TransformationConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationConfigPtrOutput) ToGooglePrivacyDlpV2TransformationConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationConfigPtrOutput) Elem() GooglePrivacyDlpV2TransformationConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransformationConfig) GooglePrivacyDlpV2TransformationConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2TransformationConfig
		return ret
	}).(GooglePrivacyDlpV2TransformationConfigOutput)
}

// De-identify template. If this template is specified, it will serve as the default de-identify template. This template cannot contain `record_transformations` since it can be used for unstructured content such as free-form text files. If this template is not set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured content.
func (o GooglePrivacyDlpV2TransformationConfigPtrOutput) DeidentifyTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransformationConfig) *string {
		if v == nil {
			return nil
		}
		return v.DeidentifyTemplate
	}).(pulumi.StringPtrOutput)
}

// Image redact template. If this template is specified, it will serve as the de-identify template for images. If this template is not set, all findings in the image will be redacted with a black box.
func (o GooglePrivacyDlpV2TransformationConfigPtrOutput) ImageRedactTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransformationConfig) *string {
		if v == nil {
			return nil
		}
		return v.ImageRedactTemplate
	}).(pulumi.StringPtrOutput)
}

// Structured de-identify template. If this template is specified, it will serve as the de-identify template for structured content such as delimited files and tables. If this template is not set but the `deidentify_template` is set, then `deidentify_template` will also apply to the structured content. If neither template is set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify structured content.
func (o GooglePrivacyDlpV2TransformationConfigPtrOutput) StructuredDeidentifyTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransformationConfig) *string {
		if v == nil {
			return nil
		}
		return v.StructuredDeidentifyTemplate
	}).(pulumi.StringPtrOutput)
}

// User specified templates and configs for how to deidentify structured, unstructures, and image files. User must provide either a unstructured deidentify template or at least one redact image config.
type GooglePrivacyDlpV2TransformationConfigResponse struct {
	// De-identify template. If this template is specified, it will serve as the default de-identify template. This template cannot contain `record_transformations` since it can be used for unstructured content such as free-form text files. If this template is not set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured content.
	DeidentifyTemplate string `pulumi:"deidentifyTemplate"`
	// Image redact template. If this template is specified, it will serve as the de-identify template for images. If this template is not set, all findings in the image will be redacted with a black box.
	ImageRedactTemplate string `pulumi:"imageRedactTemplate"`
	// Structured de-identify template. If this template is specified, it will serve as the de-identify template for structured content such as delimited files and tables. If this template is not set but the `deidentify_template` is set, then `deidentify_template` will also apply to the structured content. If neither template is set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify structured content.
	StructuredDeidentifyTemplate string `pulumi:"structuredDeidentifyTemplate"`
}

// User specified templates and configs for how to deidentify structured, unstructures, and image files. User must provide either a unstructured deidentify template or at least one redact image config.
type GooglePrivacyDlpV2TransformationConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransformationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransformationConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransformationConfigResponseOutput) ToGooglePrivacyDlpV2TransformationConfigResponseOutput() GooglePrivacyDlpV2TransformationConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationConfigResponseOutput) ToGooglePrivacyDlpV2TransformationConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationConfigResponseOutput {
	return o
}

// De-identify template. If this template is specified, it will serve as the default de-identify template. This template cannot contain `record_transformations` since it can be used for unstructured content such as free-form text files. If this template is not set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured content.
func (o GooglePrivacyDlpV2TransformationConfigResponseOutput) DeidentifyTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationConfigResponse) string { return v.DeidentifyTemplate }).(pulumi.StringOutput)
}

// Image redact template. If this template is specified, it will serve as the de-identify template for images. If this template is not set, all findings in the image will be redacted with a black box.
func (o GooglePrivacyDlpV2TransformationConfigResponseOutput) ImageRedactTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationConfigResponse) string { return v.ImageRedactTemplate }).(pulumi.StringOutput)
}

// Structured de-identify template. If this template is specified, it will serve as the de-identify template for structured content such as delimited files and tables. If this template is not set but the `deidentify_template` is set, then `deidentify_template` will also apply to the structured content. If neither template is set, a default `ReplaceWithInfoTypeConfig` will be used to de-identify structured content.
func (o GooglePrivacyDlpV2TransformationConfigResponseOutput) StructuredDeidentifyTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationConfigResponse) string { return v.StructuredDeidentifyTemplate }).(pulumi.StringOutput)
}

// Config for storing transformation details.
type GooglePrivacyDlpV2TransformationDetailsStorageConfig struct {
	// The BigQuery table in which to store the output. This may be an existing table or in a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_transformation_details_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details.
	Table *GooglePrivacyDlpV2BigQueryTable `pulumi:"table"`
}

// GooglePrivacyDlpV2TransformationDetailsStorageConfigInput is an input type that accepts GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs and GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TransformationDetailsStorageConfigInput` via:
//
//	GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs{...}
type GooglePrivacyDlpV2TransformationDetailsStorageConfigInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TransformationDetailsStorageConfigOutput() GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput
	ToGooglePrivacyDlpV2TransformationDetailsStorageConfigOutputWithContext(context.Context) GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput
}

// Config for storing transformation details.
type GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs struct {
	// The BigQuery table in which to store the output. This may be an existing table or in a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_transformation_details_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details.
	Table GooglePrivacyDlpV2BigQueryTablePtrInput `pulumi:"table"`
}

func (GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransformationDetailsStorageConfig)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigOutput() GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput {
	return i.ToGooglePrivacyDlpV2TransformationDetailsStorageConfigOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput)
}

func (i GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput() GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput).ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrInput is an input type that accepts GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs, GooglePrivacyDlpV2TransformationDetailsStorageConfigPtr and GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrInput` via:
//
//	        GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput() GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput
	ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutputWithContext(context.Context) GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput
}

type googlePrivacyDlpV2TransformationDetailsStorageConfigPtrType GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs

func GooglePrivacyDlpV2TransformationDetailsStorageConfigPtr(v *GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs) GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrInput {
	return (*googlePrivacyDlpV2TransformationDetailsStorageConfigPtrType)(v)
}

func (*googlePrivacyDlpV2TransformationDetailsStorageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TransformationDetailsStorageConfig)(nil)).Elem()
}

func (i *googlePrivacyDlpV2TransformationDetailsStorageConfigPtrType) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput() GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput {
	return i.ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2TransformationDetailsStorageConfigPtrType) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput)
}

// Config for storing transformation details.
type GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransformationDetailsStorageConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigOutput() GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput() GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput {
	return o.ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2TransformationDetailsStorageConfig) *GooglePrivacyDlpV2TransformationDetailsStorageConfig {
		return &v
	}).(GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput)
}

// The BigQuery table in which to store the output. This may be an existing table or in a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_transformation_details_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details.
func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput) Table() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationDetailsStorageConfig) *GooglePrivacyDlpV2BigQueryTable {
		return v.Table
	}).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

type GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TransformationDetailsStorageConfig)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput() GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput) Elem() GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransformationDetailsStorageConfig) GooglePrivacyDlpV2TransformationDetailsStorageConfig {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2TransformationDetailsStorageConfig
		return ret
	}).(GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput)
}

// The BigQuery table in which to store the output. This may be an existing table or in a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_transformation_details_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details.
func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput) Table() GooglePrivacyDlpV2BigQueryTablePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransformationDetailsStorageConfig) *GooglePrivacyDlpV2BigQueryTable {
		if v == nil {
			return nil
		}
		return v.Table
	}).(GooglePrivacyDlpV2BigQueryTablePtrOutput)
}

// Config for storing transformation details.
type GooglePrivacyDlpV2TransformationDetailsStorageConfigResponse struct {
	// The BigQuery table in which to store the output. This may be an existing table or in a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_transformation_details_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details.
	Table GooglePrivacyDlpV2BigQueryTableResponse `pulumi:"table"`
}

// Config for storing transformation details.
type GooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransformationDetailsStorageConfigResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput() GooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput) ToGooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput {
	return o
}

// The BigQuery table in which to store the output. This may be an existing table or in a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_transformation_details_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used for generating the date details.
func (o GooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput) Table() GooglePrivacyDlpV2BigQueryTableResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationDetailsStorageConfigResponse) GooglePrivacyDlpV2BigQueryTableResponse {
		return v.Table
	}).(GooglePrivacyDlpV2BigQueryTableResponseOutput)
}

// How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a `DateShift` transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the `TransformationOverviews`.
type GooglePrivacyDlpV2TransformationErrorHandling struct {
	// Ignore errors
	LeaveUntransformed *GooglePrivacyDlpV2LeaveUntransformed `pulumi:"leaveUntransformed"`
	// Throw an error
	ThrowError *GooglePrivacyDlpV2ThrowError `pulumi:"throwError"`
}

// GooglePrivacyDlpV2TransformationErrorHandlingInput is an input type that accepts GooglePrivacyDlpV2TransformationErrorHandlingArgs and GooglePrivacyDlpV2TransformationErrorHandlingOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TransformationErrorHandlingInput` via:
//
//	GooglePrivacyDlpV2TransformationErrorHandlingArgs{...}
type GooglePrivacyDlpV2TransformationErrorHandlingInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TransformationErrorHandlingOutput() GooglePrivacyDlpV2TransformationErrorHandlingOutput
	ToGooglePrivacyDlpV2TransformationErrorHandlingOutputWithContext(context.Context) GooglePrivacyDlpV2TransformationErrorHandlingOutput
}

// How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a `DateShift` transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the `TransformationOverviews`.
type GooglePrivacyDlpV2TransformationErrorHandlingArgs struct {
	// Ignore errors
	LeaveUntransformed GooglePrivacyDlpV2LeaveUntransformedPtrInput `pulumi:"leaveUntransformed"`
	// Throw an error
	ThrowError GooglePrivacyDlpV2ThrowErrorPtrInput `pulumi:"throwError"`
}

func (GooglePrivacyDlpV2TransformationErrorHandlingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransformationErrorHandling)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TransformationErrorHandlingArgs) ToGooglePrivacyDlpV2TransformationErrorHandlingOutput() GooglePrivacyDlpV2TransformationErrorHandlingOutput {
	return i.ToGooglePrivacyDlpV2TransformationErrorHandlingOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TransformationErrorHandlingArgs) ToGooglePrivacyDlpV2TransformationErrorHandlingOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationErrorHandlingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransformationErrorHandlingOutput)
}

func (i GooglePrivacyDlpV2TransformationErrorHandlingArgs) ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutput() GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput {
	return i.ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TransformationErrorHandlingArgs) ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransformationErrorHandlingOutput).ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2TransformationErrorHandlingPtrInput is an input type that accepts GooglePrivacyDlpV2TransformationErrorHandlingArgs, GooglePrivacyDlpV2TransformationErrorHandlingPtr and GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TransformationErrorHandlingPtrInput` via:
//
//	        GooglePrivacyDlpV2TransformationErrorHandlingArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2TransformationErrorHandlingPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutput() GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput
	ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutputWithContext(context.Context) GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput
}

type googlePrivacyDlpV2TransformationErrorHandlingPtrType GooglePrivacyDlpV2TransformationErrorHandlingArgs

func GooglePrivacyDlpV2TransformationErrorHandlingPtr(v *GooglePrivacyDlpV2TransformationErrorHandlingArgs) GooglePrivacyDlpV2TransformationErrorHandlingPtrInput {
	return (*googlePrivacyDlpV2TransformationErrorHandlingPtrType)(v)
}

func (*googlePrivacyDlpV2TransformationErrorHandlingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TransformationErrorHandling)(nil)).Elem()
}

func (i *googlePrivacyDlpV2TransformationErrorHandlingPtrType) ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutput() GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput {
	return i.ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2TransformationErrorHandlingPtrType) ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput)
}

// How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a `DateShift` transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the `TransformationOverviews`.
type GooglePrivacyDlpV2TransformationErrorHandlingOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransformationErrorHandlingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransformationErrorHandling)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransformationErrorHandlingOutput) ToGooglePrivacyDlpV2TransformationErrorHandlingOutput() GooglePrivacyDlpV2TransformationErrorHandlingOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationErrorHandlingOutput) ToGooglePrivacyDlpV2TransformationErrorHandlingOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationErrorHandlingOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationErrorHandlingOutput) ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutput() GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput {
	return o.ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2TransformationErrorHandlingOutput) ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2TransformationErrorHandling) *GooglePrivacyDlpV2TransformationErrorHandling {
		return &v
	}).(GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput)
}

// Ignore errors
func (o GooglePrivacyDlpV2TransformationErrorHandlingOutput) LeaveUntransformed() GooglePrivacyDlpV2LeaveUntransformedPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationErrorHandling) *GooglePrivacyDlpV2LeaveUntransformed {
		return v.LeaveUntransformed
	}).(GooglePrivacyDlpV2LeaveUntransformedPtrOutput)
}

// Throw an error
func (o GooglePrivacyDlpV2TransformationErrorHandlingOutput) ThrowError() GooglePrivacyDlpV2ThrowErrorPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationErrorHandling) *GooglePrivacyDlpV2ThrowError {
		return v.ThrowError
	}).(GooglePrivacyDlpV2ThrowErrorPtrOutput)
}

type GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TransformationErrorHandling)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput) ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutput() GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput) ToGooglePrivacyDlpV2TransformationErrorHandlingPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput) Elem() GooglePrivacyDlpV2TransformationErrorHandlingOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransformationErrorHandling) GooglePrivacyDlpV2TransformationErrorHandling {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2TransformationErrorHandling
		return ret
	}).(GooglePrivacyDlpV2TransformationErrorHandlingOutput)
}

// Ignore errors
func (o GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput) LeaveUntransformed() GooglePrivacyDlpV2LeaveUntransformedPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransformationErrorHandling) *GooglePrivacyDlpV2LeaveUntransformed {
		if v == nil {
			return nil
		}
		return v.LeaveUntransformed
	}).(GooglePrivacyDlpV2LeaveUntransformedPtrOutput)
}

// Throw an error
func (o GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput) ThrowError() GooglePrivacyDlpV2ThrowErrorPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransformationErrorHandling) *GooglePrivacyDlpV2ThrowError {
		if v == nil {
			return nil
		}
		return v.ThrowError
	}).(GooglePrivacyDlpV2ThrowErrorPtrOutput)
}

// How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a `DateShift` transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the `TransformationOverviews`.
type GooglePrivacyDlpV2TransformationErrorHandlingResponse struct {
	// Ignore errors
	LeaveUntransformed GooglePrivacyDlpV2LeaveUntransformedResponse `pulumi:"leaveUntransformed"`
	// Throw an error
	ThrowError GooglePrivacyDlpV2ThrowErrorResponse `pulumi:"throwError"`
}

// How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a `DateShift` transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the `TransformationOverviews`.
type GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransformationErrorHandlingResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput) ToGooglePrivacyDlpV2TransformationErrorHandlingResponseOutput() GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput) ToGooglePrivacyDlpV2TransformationErrorHandlingResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput {
	return o
}

// Ignore errors
func (o GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput) LeaveUntransformed() GooglePrivacyDlpV2LeaveUntransformedResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationErrorHandlingResponse) GooglePrivacyDlpV2LeaveUntransformedResponse {
		return v.LeaveUntransformed
	}).(GooglePrivacyDlpV2LeaveUntransformedResponseOutput)
}

// Throw an error
func (o GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput) ThrowError() GooglePrivacyDlpV2ThrowErrorResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransformationErrorHandlingResponse) GooglePrivacyDlpV2ThrowErrorResponse {
		return v.ThrowError
	}).(GooglePrivacyDlpV2ThrowErrorResponseOutput)
}

// Use this to have a random data crypto key generated. It will be discarded after the request finishes.
type GooglePrivacyDlpV2TransientCryptoKey struct {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	Name string `pulumi:"name"`
}

// GooglePrivacyDlpV2TransientCryptoKeyInput is an input type that accepts GooglePrivacyDlpV2TransientCryptoKeyArgs and GooglePrivacyDlpV2TransientCryptoKeyOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TransientCryptoKeyInput` via:
//
//	GooglePrivacyDlpV2TransientCryptoKeyArgs{...}
type GooglePrivacyDlpV2TransientCryptoKeyInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TransientCryptoKeyOutput() GooglePrivacyDlpV2TransientCryptoKeyOutput
	ToGooglePrivacyDlpV2TransientCryptoKeyOutputWithContext(context.Context) GooglePrivacyDlpV2TransientCryptoKeyOutput
}

// Use this to have a random data crypto key generated. It will be discarded after the request finishes.
type GooglePrivacyDlpV2TransientCryptoKeyArgs struct {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	Name pulumi.StringInput `pulumi:"name"`
}

func (GooglePrivacyDlpV2TransientCryptoKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransientCryptoKey)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TransientCryptoKeyArgs) ToGooglePrivacyDlpV2TransientCryptoKeyOutput() GooglePrivacyDlpV2TransientCryptoKeyOutput {
	return i.ToGooglePrivacyDlpV2TransientCryptoKeyOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TransientCryptoKeyArgs) ToGooglePrivacyDlpV2TransientCryptoKeyOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransientCryptoKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransientCryptoKeyOutput)
}

func (i GooglePrivacyDlpV2TransientCryptoKeyArgs) ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutput() GooglePrivacyDlpV2TransientCryptoKeyPtrOutput {
	return i.ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TransientCryptoKeyArgs) ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransientCryptoKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransientCryptoKeyOutput).ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2TransientCryptoKeyPtrInput is an input type that accepts GooglePrivacyDlpV2TransientCryptoKeyArgs, GooglePrivacyDlpV2TransientCryptoKeyPtr and GooglePrivacyDlpV2TransientCryptoKeyPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TransientCryptoKeyPtrInput` via:
//
//	        GooglePrivacyDlpV2TransientCryptoKeyArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2TransientCryptoKeyPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutput() GooglePrivacyDlpV2TransientCryptoKeyPtrOutput
	ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutputWithContext(context.Context) GooglePrivacyDlpV2TransientCryptoKeyPtrOutput
}

type googlePrivacyDlpV2TransientCryptoKeyPtrType GooglePrivacyDlpV2TransientCryptoKeyArgs

func GooglePrivacyDlpV2TransientCryptoKeyPtr(v *GooglePrivacyDlpV2TransientCryptoKeyArgs) GooglePrivacyDlpV2TransientCryptoKeyPtrInput {
	return (*googlePrivacyDlpV2TransientCryptoKeyPtrType)(v)
}

func (*googlePrivacyDlpV2TransientCryptoKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TransientCryptoKey)(nil)).Elem()
}

func (i *googlePrivacyDlpV2TransientCryptoKeyPtrType) ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutput() GooglePrivacyDlpV2TransientCryptoKeyPtrOutput {
	return i.ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2TransientCryptoKeyPtrType) ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransientCryptoKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TransientCryptoKeyPtrOutput)
}

// Use this to have a random data crypto key generated. It will be discarded after the request finishes.
type GooglePrivacyDlpV2TransientCryptoKeyOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransientCryptoKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransientCryptoKey)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransientCryptoKeyOutput) ToGooglePrivacyDlpV2TransientCryptoKeyOutput() GooglePrivacyDlpV2TransientCryptoKeyOutput {
	return o
}

func (o GooglePrivacyDlpV2TransientCryptoKeyOutput) ToGooglePrivacyDlpV2TransientCryptoKeyOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransientCryptoKeyOutput {
	return o
}

func (o GooglePrivacyDlpV2TransientCryptoKeyOutput) ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutput() GooglePrivacyDlpV2TransientCryptoKeyPtrOutput {
	return o.ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2TransientCryptoKeyOutput) ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransientCryptoKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2TransientCryptoKey) *GooglePrivacyDlpV2TransientCryptoKey {
		return &v
	}).(GooglePrivacyDlpV2TransientCryptoKeyPtrOutput)
}

// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
func (o GooglePrivacyDlpV2TransientCryptoKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransientCryptoKey) string { return v.Name }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2TransientCryptoKeyPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransientCryptoKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2TransientCryptoKey)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransientCryptoKeyPtrOutput) ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutput() GooglePrivacyDlpV2TransientCryptoKeyPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TransientCryptoKeyPtrOutput) ToGooglePrivacyDlpV2TransientCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransientCryptoKeyPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2TransientCryptoKeyPtrOutput) Elem() GooglePrivacyDlpV2TransientCryptoKeyOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransientCryptoKey) GooglePrivacyDlpV2TransientCryptoKey {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2TransientCryptoKey
		return ret
	}).(GooglePrivacyDlpV2TransientCryptoKeyOutput)
}

// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
func (o GooglePrivacyDlpV2TransientCryptoKeyPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2TransientCryptoKey) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Use this to have a random data crypto key generated. It will be discarded after the request finishes.
type GooglePrivacyDlpV2TransientCryptoKeyResponse struct {
	// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
	Name string `pulumi:"name"`
}

// Use this to have a random data crypto key generated. It will be discarded after the request finishes.
type GooglePrivacyDlpV2TransientCryptoKeyResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TransientCryptoKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TransientCryptoKeyResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TransientCryptoKeyResponseOutput) ToGooglePrivacyDlpV2TransientCryptoKeyResponseOutput() GooglePrivacyDlpV2TransientCryptoKeyResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2TransientCryptoKeyResponseOutput) ToGooglePrivacyDlpV2TransientCryptoKeyResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TransientCryptoKeyResponseOutput {
	return o
}

// Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).
func (o GooglePrivacyDlpV2TransientCryptoKeyResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TransientCryptoKeyResponse) string { return v.Name }).(pulumi.StringOutput)
}

// What event needs to occur for a new job to be started.
type GooglePrivacyDlpV2Trigger struct {
	// For use with hybrid jobs. Jobs must be manually created and finished.
	Manual *GooglePrivacyDlpV2Manual `pulumi:"manual"`
	// Create a job on a repeating basis based on the elapse of time.
	Schedule *GooglePrivacyDlpV2Schedule `pulumi:"schedule"`
}

// GooglePrivacyDlpV2TriggerInput is an input type that accepts GooglePrivacyDlpV2TriggerArgs and GooglePrivacyDlpV2TriggerOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TriggerInput` via:
//
//	GooglePrivacyDlpV2TriggerArgs{...}
type GooglePrivacyDlpV2TriggerInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TriggerOutput() GooglePrivacyDlpV2TriggerOutput
	ToGooglePrivacyDlpV2TriggerOutputWithContext(context.Context) GooglePrivacyDlpV2TriggerOutput
}

// What event needs to occur for a new job to be started.
type GooglePrivacyDlpV2TriggerArgs struct {
	// For use with hybrid jobs. Jobs must be manually created and finished.
	Manual GooglePrivacyDlpV2ManualPtrInput `pulumi:"manual"`
	// Create a job on a repeating basis based on the elapse of time.
	Schedule GooglePrivacyDlpV2SchedulePtrInput `pulumi:"schedule"`
}

func (GooglePrivacyDlpV2TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Trigger)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TriggerArgs) ToGooglePrivacyDlpV2TriggerOutput() GooglePrivacyDlpV2TriggerOutput {
	return i.ToGooglePrivacyDlpV2TriggerOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TriggerArgs) ToGooglePrivacyDlpV2TriggerOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TriggerOutput)
}

// GooglePrivacyDlpV2TriggerArrayInput is an input type that accepts GooglePrivacyDlpV2TriggerArray and GooglePrivacyDlpV2TriggerArrayOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2TriggerArrayInput` via:
//
//	GooglePrivacyDlpV2TriggerArray{ GooglePrivacyDlpV2TriggerArgs{...} }
type GooglePrivacyDlpV2TriggerArrayInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2TriggerArrayOutput() GooglePrivacyDlpV2TriggerArrayOutput
	ToGooglePrivacyDlpV2TriggerArrayOutputWithContext(context.Context) GooglePrivacyDlpV2TriggerArrayOutput
}

type GooglePrivacyDlpV2TriggerArray []GooglePrivacyDlpV2TriggerInput

func (GooglePrivacyDlpV2TriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2Trigger)(nil)).Elem()
}

func (i GooglePrivacyDlpV2TriggerArray) ToGooglePrivacyDlpV2TriggerArrayOutput() GooglePrivacyDlpV2TriggerArrayOutput {
	return i.ToGooglePrivacyDlpV2TriggerArrayOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2TriggerArray) ToGooglePrivacyDlpV2TriggerArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2TriggerArrayOutput)
}

// What event needs to occur for a new job to be started.
type GooglePrivacyDlpV2TriggerOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Trigger)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TriggerOutput) ToGooglePrivacyDlpV2TriggerOutput() GooglePrivacyDlpV2TriggerOutput {
	return o
}

func (o GooglePrivacyDlpV2TriggerOutput) ToGooglePrivacyDlpV2TriggerOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TriggerOutput {
	return o
}

// For use with hybrid jobs. Jobs must be manually created and finished.
func (o GooglePrivacyDlpV2TriggerOutput) Manual() GooglePrivacyDlpV2ManualPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Trigger) *GooglePrivacyDlpV2Manual { return v.Manual }).(GooglePrivacyDlpV2ManualPtrOutput)
}

// Create a job on a repeating basis based on the elapse of time.
func (o GooglePrivacyDlpV2TriggerOutput) Schedule() GooglePrivacyDlpV2SchedulePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Trigger) *GooglePrivacyDlpV2Schedule { return v.Schedule }).(GooglePrivacyDlpV2SchedulePtrOutput)
}

type GooglePrivacyDlpV2TriggerArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2Trigger)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TriggerArrayOutput) ToGooglePrivacyDlpV2TriggerArrayOutput() GooglePrivacyDlpV2TriggerArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2TriggerArrayOutput) ToGooglePrivacyDlpV2TriggerArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TriggerArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2TriggerArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2TriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2Trigger {
		return vs[0].([]GooglePrivacyDlpV2Trigger)[vs[1].(int)]
	}).(GooglePrivacyDlpV2TriggerOutput)
}

// What event needs to occur for a new job to be started.
type GooglePrivacyDlpV2TriggerResponse struct {
	// For use with hybrid jobs. Jobs must be manually created and finished.
	Manual GooglePrivacyDlpV2ManualResponse `pulumi:"manual"`
	// Create a job on a repeating basis based on the elapse of time.
	Schedule GooglePrivacyDlpV2ScheduleResponse `pulumi:"schedule"`
}

// What event needs to occur for a new job to be started.
type GooglePrivacyDlpV2TriggerResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2TriggerResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TriggerResponseOutput) ToGooglePrivacyDlpV2TriggerResponseOutput() GooglePrivacyDlpV2TriggerResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2TriggerResponseOutput) ToGooglePrivacyDlpV2TriggerResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TriggerResponseOutput {
	return o
}

// For use with hybrid jobs. Jobs must be manually created and finished.
func (o GooglePrivacyDlpV2TriggerResponseOutput) Manual() GooglePrivacyDlpV2ManualResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TriggerResponse) GooglePrivacyDlpV2ManualResponse { return v.Manual }).(GooglePrivacyDlpV2ManualResponseOutput)
}

// Create a job on a repeating basis based on the elapse of time.
func (o GooglePrivacyDlpV2TriggerResponseOutput) Schedule() GooglePrivacyDlpV2ScheduleResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2TriggerResponse) GooglePrivacyDlpV2ScheduleResponse { return v.Schedule }).(GooglePrivacyDlpV2ScheduleResponseOutput)
}

type GooglePrivacyDlpV2TriggerResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2TriggerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2TriggerResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2TriggerResponseArrayOutput) ToGooglePrivacyDlpV2TriggerResponseArrayOutput() GooglePrivacyDlpV2TriggerResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2TriggerResponseArrayOutput) ToGooglePrivacyDlpV2TriggerResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2TriggerResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2TriggerResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2TriggerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2TriggerResponse {
		return vs[0].([]GooglePrivacyDlpV2TriggerResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2TriggerResponseOutput)
}

// Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
type GooglePrivacyDlpV2UnwrappedCryptoKey struct {
	// A 128/192/256 bit key.
	Key string `pulumi:"key"`
}

// GooglePrivacyDlpV2UnwrappedCryptoKeyInput is an input type that accepts GooglePrivacyDlpV2UnwrappedCryptoKeyArgs and GooglePrivacyDlpV2UnwrappedCryptoKeyOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2UnwrappedCryptoKeyInput` via:
//
//	GooglePrivacyDlpV2UnwrappedCryptoKeyArgs{...}
type GooglePrivacyDlpV2UnwrappedCryptoKeyInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2UnwrappedCryptoKeyOutput() GooglePrivacyDlpV2UnwrappedCryptoKeyOutput
	ToGooglePrivacyDlpV2UnwrappedCryptoKeyOutputWithContext(context.Context) GooglePrivacyDlpV2UnwrappedCryptoKeyOutput
}

// Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
type GooglePrivacyDlpV2UnwrappedCryptoKeyArgs struct {
	// A 128/192/256 bit key.
	Key pulumi.StringInput `pulumi:"key"`
}

func (GooglePrivacyDlpV2UnwrappedCryptoKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2UnwrappedCryptoKey)(nil)).Elem()
}

func (i GooglePrivacyDlpV2UnwrappedCryptoKeyArgs) ToGooglePrivacyDlpV2UnwrappedCryptoKeyOutput() GooglePrivacyDlpV2UnwrappedCryptoKeyOutput {
	return i.ToGooglePrivacyDlpV2UnwrappedCryptoKeyOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2UnwrappedCryptoKeyArgs) ToGooglePrivacyDlpV2UnwrappedCryptoKeyOutputWithContext(ctx context.Context) GooglePrivacyDlpV2UnwrappedCryptoKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2UnwrappedCryptoKeyOutput)
}

func (i GooglePrivacyDlpV2UnwrappedCryptoKeyArgs) ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput() GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput {
	return i.ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2UnwrappedCryptoKeyArgs) ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2UnwrappedCryptoKeyOutput).ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2UnwrappedCryptoKeyPtrInput is an input type that accepts GooglePrivacyDlpV2UnwrappedCryptoKeyArgs, GooglePrivacyDlpV2UnwrappedCryptoKeyPtr and GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2UnwrappedCryptoKeyPtrInput` via:
//
//	        GooglePrivacyDlpV2UnwrappedCryptoKeyArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2UnwrappedCryptoKeyPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput() GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput
	ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutputWithContext(context.Context) GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput
}

type googlePrivacyDlpV2UnwrappedCryptoKeyPtrType GooglePrivacyDlpV2UnwrappedCryptoKeyArgs

func GooglePrivacyDlpV2UnwrappedCryptoKeyPtr(v *GooglePrivacyDlpV2UnwrappedCryptoKeyArgs) GooglePrivacyDlpV2UnwrappedCryptoKeyPtrInput {
	return (*googlePrivacyDlpV2UnwrappedCryptoKeyPtrType)(v)
}

func (*googlePrivacyDlpV2UnwrappedCryptoKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2UnwrappedCryptoKey)(nil)).Elem()
}

func (i *googlePrivacyDlpV2UnwrappedCryptoKeyPtrType) ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput() GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput {
	return i.ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2UnwrappedCryptoKeyPtrType) ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput)
}

// Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
type GooglePrivacyDlpV2UnwrappedCryptoKeyOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2UnwrappedCryptoKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2UnwrappedCryptoKey)(nil)).Elem()
}

func (o GooglePrivacyDlpV2UnwrappedCryptoKeyOutput) ToGooglePrivacyDlpV2UnwrappedCryptoKeyOutput() GooglePrivacyDlpV2UnwrappedCryptoKeyOutput {
	return o
}

func (o GooglePrivacyDlpV2UnwrappedCryptoKeyOutput) ToGooglePrivacyDlpV2UnwrappedCryptoKeyOutputWithContext(ctx context.Context) GooglePrivacyDlpV2UnwrappedCryptoKeyOutput {
	return o
}

func (o GooglePrivacyDlpV2UnwrappedCryptoKeyOutput) ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput() GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput {
	return o.ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2UnwrappedCryptoKeyOutput) ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2UnwrappedCryptoKey) *GooglePrivacyDlpV2UnwrappedCryptoKey {
		return &v
	}).(GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput)
}

// A 128/192/256 bit key.
func (o GooglePrivacyDlpV2UnwrappedCryptoKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2UnwrappedCryptoKey) string { return v.Key }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2UnwrappedCryptoKey)(nil)).Elem()
}

func (o GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput) ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput() GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput) ToGooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput) Elem() GooglePrivacyDlpV2UnwrappedCryptoKeyOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2UnwrappedCryptoKey) GooglePrivacyDlpV2UnwrappedCryptoKey {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2UnwrappedCryptoKey
		return ret
	}).(GooglePrivacyDlpV2UnwrappedCryptoKeyOutput)
}

// A 128/192/256 bit key.
func (o GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2UnwrappedCryptoKey) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
type GooglePrivacyDlpV2UnwrappedCryptoKeyResponse struct {
	// A 128/192/256 bit key.
	Key string `pulumi:"key"`
}

// Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
type GooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2UnwrappedCryptoKeyResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput) ToGooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput() GooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput) ToGooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput {
	return o
}

// A 128/192/256 bit key.
func (o GooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2UnwrappedCryptoKeyResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Set of primitive values supported by the system. Note that for the purposes of inspection or transformation, the number of bytes considered to comprise a 'Value' is based on its representation as a UTF-8 encoded string. For example, if 'integer_value' is set to 123456789, the number of bytes would be counted as 9, even though an int64 only holds up to 8 bytes of data.
type GooglePrivacyDlpV2Value struct {
	// boolean
	BooleanValue *bool `pulumi:"booleanValue"`
	// date
	DateValue *GoogleTypeDate `pulumi:"dateValue"`
	// day of week
	DayOfWeekValue *GooglePrivacyDlpV2ValueDayOfWeekValue `pulumi:"dayOfWeekValue"`
	// float
	FloatValue *float64 `pulumi:"floatValue"`
	// integer
	IntegerValue *string `pulumi:"integerValue"`
	// string
	StringValue *string `pulumi:"stringValue"`
	// time of day
	TimeValue *GoogleTypeTimeOfDay `pulumi:"timeValue"`
	// timestamp
	TimestampValue *string `pulumi:"timestampValue"`
}

// GooglePrivacyDlpV2ValueInput is an input type that accepts GooglePrivacyDlpV2ValueArgs and GooglePrivacyDlpV2ValueOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ValueInput` via:
//
//	GooglePrivacyDlpV2ValueArgs{...}
type GooglePrivacyDlpV2ValueInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ValueOutput() GooglePrivacyDlpV2ValueOutput
	ToGooglePrivacyDlpV2ValueOutputWithContext(context.Context) GooglePrivacyDlpV2ValueOutput
}

// Set of primitive values supported by the system. Note that for the purposes of inspection or transformation, the number of bytes considered to comprise a 'Value' is based on its representation as a UTF-8 encoded string. For example, if 'integer_value' is set to 123456789, the number of bytes would be counted as 9, even though an int64 only holds up to 8 bytes of data.
type GooglePrivacyDlpV2ValueArgs struct {
	// boolean
	BooleanValue pulumi.BoolPtrInput `pulumi:"booleanValue"`
	// date
	DateValue GoogleTypeDatePtrInput `pulumi:"dateValue"`
	// day of week
	DayOfWeekValue GooglePrivacyDlpV2ValueDayOfWeekValuePtrInput `pulumi:"dayOfWeekValue"`
	// float
	FloatValue pulumi.Float64PtrInput `pulumi:"floatValue"`
	// integer
	IntegerValue pulumi.StringPtrInput `pulumi:"integerValue"`
	// string
	StringValue pulumi.StringPtrInput `pulumi:"stringValue"`
	// time of day
	TimeValue GoogleTypeTimeOfDayPtrInput `pulumi:"timeValue"`
	// timestamp
	TimestampValue pulumi.StringPtrInput `pulumi:"timestampValue"`
}

func (GooglePrivacyDlpV2ValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Value)(nil)).Elem()
}

func (i GooglePrivacyDlpV2ValueArgs) ToGooglePrivacyDlpV2ValueOutput() GooglePrivacyDlpV2ValueOutput {
	return i.ToGooglePrivacyDlpV2ValueOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ValueArgs) ToGooglePrivacyDlpV2ValueOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ValueOutput)
}

func (i GooglePrivacyDlpV2ValueArgs) ToGooglePrivacyDlpV2ValuePtrOutput() GooglePrivacyDlpV2ValuePtrOutput {
	return i.ToGooglePrivacyDlpV2ValuePtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2ValueArgs) ToGooglePrivacyDlpV2ValuePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ValueOutput).ToGooglePrivacyDlpV2ValuePtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2ValuePtrInput is an input type that accepts GooglePrivacyDlpV2ValueArgs, GooglePrivacyDlpV2ValuePtr and GooglePrivacyDlpV2ValuePtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2ValuePtrInput` via:
//
//	        GooglePrivacyDlpV2ValueArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2ValuePtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2ValuePtrOutput() GooglePrivacyDlpV2ValuePtrOutput
	ToGooglePrivacyDlpV2ValuePtrOutputWithContext(context.Context) GooglePrivacyDlpV2ValuePtrOutput
}

type googlePrivacyDlpV2ValuePtrType GooglePrivacyDlpV2ValueArgs

func GooglePrivacyDlpV2ValuePtr(v *GooglePrivacyDlpV2ValueArgs) GooglePrivacyDlpV2ValuePtrInput {
	return (*googlePrivacyDlpV2ValuePtrType)(v)
}

func (*googlePrivacyDlpV2ValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Value)(nil)).Elem()
}

func (i *googlePrivacyDlpV2ValuePtrType) ToGooglePrivacyDlpV2ValuePtrOutput() GooglePrivacyDlpV2ValuePtrOutput {
	return i.ToGooglePrivacyDlpV2ValuePtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2ValuePtrType) ToGooglePrivacyDlpV2ValuePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2ValuePtrOutput)
}

// Set of primitive values supported by the system. Note that for the purposes of inspection or transformation, the number of bytes considered to comprise a 'Value' is based on its representation as a UTF-8 encoded string. For example, if 'integer_value' is set to 123456789, the number of bytes would be counted as 9, even though an int64 only holds up to 8 bytes of data.
type GooglePrivacyDlpV2ValueOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2Value)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ValueOutput) ToGooglePrivacyDlpV2ValueOutput() GooglePrivacyDlpV2ValueOutput {
	return o
}

func (o GooglePrivacyDlpV2ValueOutput) ToGooglePrivacyDlpV2ValueOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ValueOutput {
	return o
}

func (o GooglePrivacyDlpV2ValueOutput) ToGooglePrivacyDlpV2ValuePtrOutput() GooglePrivacyDlpV2ValuePtrOutput {
	return o.ToGooglePrivacyDlpV2ValuePtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2ValueOutput) ToGooglePrivacyDlpV2ValuePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2Value) *GooglePrivacyDlpV2Value {
		return &v
	}).(GooglePrivacyDlpV2ValuePtrOutput)
}

// boolean
func (o GooglePrivacyDlpV2ValueOutput) BooleanValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Value) *bool { return v.BooleanValue }).(pulumi.BoolPtrOutput)
}

// date
func (o GooglePrivacyDlpV2ValueOutput) DateValue() GoogleTypeDatePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Value) *GoogleTypeDate { return v.DateValue }).(GoogleTypeDatePtrOutput)
}

// day of week
func (o GooglePrivacyDlpV2ValueOutput) DayOfWeekValue() GooglePrivacyDlpV2ValueDayOfWeekValuePtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Value) *GooglePrivacyDlpV2ValueDayOfWeekValue { return v.DayOfWeekValue }).(GooglePrivacyDlpV2ValueDayOfWeekValuePtrOutput)
}

// float
func (o GooglePrivacyDlpV2ValueOutput) FloatValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Value) *float64 { return v.FloatValue }).(pulumi.Float64PtrOutput)
}

// integer
func (o GooglePrivacyDlpV2ValueOutput) IntegerValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Value) *string { return v.IntegerValue }).(pulumi.StringPtrOutput)
}

// string
func (o GooglePrivacyDlpV2ValueOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Value) *string { return v.StringValue }).(pulumi.StringPtrOutput)
}

// time of day
func (o GooglePrivacyDlpV2ValueOutput) TimeValue() GoogleTypeTimeOfDayPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Value) *GoogleTypeTimeOfDay { return v.TimeValue }).(GoogleTypeTimeOfDayPtrOutput)
}

// timestamp
func (o GooglePrivacyDlpV2ValueOutput) TimestampValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2Value) *string { return v.TimestampValue }).(pulumi.StringPtrOutput)
}

type GooglePrivacyDlpV2ValuePtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2Value)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ValuePtrOutput) ToGooglePrivacyDlpV2ValuePtrOutput() GooglePrivacyDlpV2ValuePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ValuePtrOutput) ToGooglePrivacyDlpV2ValuePtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ValuePtrOutput {
	return o
}

func (o GooglePrivacyDlpV2ValuePtrOutput) Elem() GooglePrivacyDlpV2ValueOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Value) GooglePrivacyDlpV2Value {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2Value
		return ret
	}).(GooglePrivacyDlpV2ValueOutput)
}

// boolean
func (o GooglePrivacyDlpV2ValuePtrOutput) BooleanValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Value) *bool {
		if v == nil {
			return nil
		}
		return v.BooleanValue
	}).(pulumi.BoolPtrOutput)
}

// date
func (o GooglePrivacyDlpV2ValuePtrOutput) DateValue() GoogleTypeDatePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Value) *GoogleTypeDate {
		if v == nil {
			return nil
		}
		return v.DateValue
	}).(GoogleTypeDatePtrOutput)
}

// day of week
func (o GooglePrivacyDlpV2ValuePtrOutput) DayOfWeekValue() GooglePrivacyDlpV2ValueDayOfWeekValuePtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Value) *GooglePrivacyDlpV2ValueDayOfWeekValue {
		if v == nil {
			return nil
		}
		return v.DayOfWeekValue
	}).(GooglePrivacyDlpV2ValueDayOfWeekValuePtrOutput)
}

// float
func (o GooglePrivacyDlpV2ValuePtrOutput) FloatValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Value) *float64 {
		if v == nil {
			return nil
		}
		return v.FloatValue
	}).(pulumi.Float64PtrOutput)
}

// integer
func (o GooglePrivacyDlpV2ValuePtrOutput) IntegerValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Value) *string {
		if v == nil {
			return nil
		}
		return v.IntegerValue
	}).(pulumi.StringPtrOutput)
}

// string
func (o GooglePrivacyDlpV2ValuePtrOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Value) *string {
		if v == nil {
			return nil
		}
		return v.StringValue
	}).(pulumi.StringPtrOutput)
}

// time of day
func (o GooglePrivacyDlpV2ValuePtrOutput) TimeValue() GoogleTypeTimeOfDayPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Value) *GoogleTypeTimeOfDay {
		if v == nil {
			return nil
		}
		return v.TimeValue
	}).(GoogleTypeTimeOfDayPtrOutput)
}

// timestamp
func (o GooglePrivacyDlpV2ValuePtrOutput) TimestampValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2Value) *string {
		if v == nil {
			return nil
		}
		return v.TimestampValue
	}).(pulumi.StringPtrOutput)
}

// A value of a field, including its frequency.
type GooglePrivacyDlpV2ValueFrequencyResponse struct {
	// How many times the value is contained in the field.
	Count string `pulumi:"count"`
	// A value contained in the field in question.
	Value GooglePrivacyDlpV2ValueResponse `pulumi:"value"`
}

// A value of a field, including its frequency.
type GooglePrivacyDlpV2ValueFrequencyResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ValueFrequencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ValueFrequencyResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ValueFrequencyResponseOutput) ToGooglePrivacyDlpV2ValueFrequencyResponseOutput() GooglePrivacyDlpV2ValueFrequencyResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ValueFrequencyResponseOutput) ToGooglePrivacyDlpV2ValueFrequencyResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ValueFrequencyResponseOutput {
	return o
}

// How many times the value is contained in the field.
func (o GooglePrivacyDlpV2ValueFrequencyResponseOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ValueFrequencyResponse) string { return v.Count }).(pulumi.StringOutput)
}

// A value contained in the field in question.
func (o GooglePrivacyDlpV2ValueFrequencyResponseOutput) Value() GooglePrivacyDlpV2ValueResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ValueFrequencyResponse) GooglePrivacyDlpV2ValueResponse { return v.Value }).(GooglePrivacyDlpV2ValueResponseOutput)
}

type GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2ValueFrequencyResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput) ToGooglePrivacyDlpV2ValueFrequencyResponseArrayOutput() GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput) ToGooglePrivacyDlpV2ValueFrequencyResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2ValueFrequencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2ValueFrequencyResponse {
		return vs[0].([]GooglePrivacyDlpV2ValueFrequencyResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2ValueFrequencyResponseOutput)
}

// Set of primitive values supported by the system. Note that for the purposes of inspection or transformation, the number of bytes considered to comprise a 'Value' is based on its representation as a UTF-8 encoded string. For example, if 'integer_value' is set to 123456789, the number of bytes would be counted as 9, even though an int64 only holds up to 8 bytes of data.
type GooglePrivacyDlpV2ValueResponse struct {
	// boolean
	BooleanValue bool `pulumi:"booleanValue"`
	// date
	DateValue GoogleTypeDateResponse `pulumi:"dateValue"`
	// day of week
	DayOfWeekValue string `pulumi:"dayOfWeekValue"`
	// float
	FloatValue float64 `pulumi:"floatValue"`
	// integer
	IntegerValue string `pulumi:"integerValue"`
	// string
	StringValue string `pulumi:"stringValue"`
	// time of day
	TimeValue GoogleTypeTimeOfDayResponse `pulumi:"timeValue"`
	// timestamp
	TimestampValue string `pulumi:"timestampValue"`
}

// Set of primitive values supported by the system. Note that for the purposes of inspection or transformation, the number of bytes considered to comprise a 'Value' is based on its representation as a UTF-8 encoded string. For example, if 'integer_value' is set to 123456789, the number of bytes would be counted as 9, even though an int64 only holds up to 8 bytes of data.
type GooglePrivacyDlpV2ValueResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2ValueResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ValueResponseOutput) ToGooglePrivacyDlpV2ValueResponseOutput() GooglePrivacyDlpV2ValueResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2ValueResponseOutput) ToGooglePrivacyDlpV2ValueResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ValueResponseOutput {
	return o
}

// boolean
func (o GooglePrivacyDlpV2ValueResponseOutput) BooleanValue() pulumi.BoolOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ValueResponse) bool { return v.BooleanValue }).(pulumi.BoolOutput)
}

// date
func (o GooglePrivacyDlpV2ValueResponseOutput) DateValue() GoogleTypeDateResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ValueResponse) GoogleTypeDateResponse { return v.DateValue }).(GoogleTypeDateResponseOutput)
}

// day of week
func (o GooglePrivacyDlpV2ValueResponseOutput) DayOfWeekValue() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ValueResponse) string { return v.DayOfWeekValue }).(pulumi.StringOutput)
}

// float
func (o GooglePrivacyDlpV2ValueResponseOutput) FloatValue() pulumi.Float64Output {
	return o.ApplyT(func(v GooglePrivacyDlpV2ValueResponse) float64 { return v.FloatValue }).(pulumi.Float64Output)
}

// integer
func (o GooglePrivacyDlpV2ValueResponseOutput) IntegerValue() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ValueResponse) string { return v.IntegerValue }).(pulumi.StringOutput)
}

// string
func (o GooglePrivacyDlpV2ValueResponseOutput) StringValue() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ValueResponse) string { return v.StringValue }).(pulumi.StringOutput)
}

// time of day
func (o GooglePrivacyDlpV2ValueResponseOutput) TimeValue() GoogleTypeTimeOfDayResponseOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ValueResponse) GoogleTypeTimeOfDayResponse { return v.TimeValue }).(GoogleTypeTimeOfDayResponseOutput)
}

// timestamp
func (o GooglePrivacyDlpV2ValueResponseOutput) TimestampValue() pulumi.StringOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2ValueResponse) string { return v.TimestampValue }).(pulumi.StringOutput)
}

type GooglePrivacyDlpV2ValueResponseArrayOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2ValueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GooglePrivacyDlpV2ValueResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2ValueResponseArrayOutput) ToGooglePrivacyDlpV2ValueResponseArrayOutput() GooglePrivacyDlpV2ValueResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ValueResponseArrayOutput) ToGooglePrivacyDlpV2ValueResponseArrayOutputWithContext(ctx context.Context) GooglePrivacyDlpV2ValueResponseArrayOutput {
	return o
}

func (o GooglePrivacyDlpV2ValueResponseArrayOutput) Index(i pulumi.IntInput) GooglePrivacyDlpV2ValueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GooglePrivacyDlpV2ValueResponse {
		return vs[0].([]GooglePrivacyDlpV2ValueResponse)[vs[1].(int)]
	}).(GooglePrivacyDlpV2ValueResponseOutput)
}

// Message defining a list of words or phrases to search for in the data.
type GooglePrivacyDlpV2WordList struct {
	// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]
	Words []string `pulumi:"words"`
}

// GooglePrivacyDlpV2WordListInput is an input type that accepts GooglePrivacyDlpV2WordListArgs and GooglePrivacyDlpV2WordListOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2WordListInput` via:
//
//	GooglePrivacyDlpV2WordListArgs{...}
type GooglePrivacyDlpV2WordListInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2WordListOutput() GooglePrivacyDlpV2WordListOutput
	ToGooglePrivacyDlpV2WordListOutputWithContext(context.Context) GooglePrivacyDlpV2WordListOutput
}

// Message defining a list of words or phrases to search for in the data.
type GooglePrivacyDlpV2WordListArgs struct {
	// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]
	Words pulumi.StringArrayInput `pulumi:"words"`
}

func (GooglePrivacyDlpV2WordListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2WordList)(nil)).Elem()
}

func (i GooglePrivacyDlpV2WordListArgs) ToGooglePrivacyDlpV2WordListOutput() GooglePrivacyDlpV2WordListOutput {
	return i.ToGooglePrivacyDlpV2WordListOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2WordListArgs) ToGooglePrivacyDlpV2WordListOutputWithContext(ctx context.Context) GooglePrivacyDlpV2WordListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2WordListOutput)
}

func (i GooglePrivacyDlpV2WordListArgs) ToGooglePrivacyDlpV2WordListPtrOutput() GooglePrivacyDlpV2WordListPtrOutput {
	return i.ToGooglePrivacyDlpV2WordListPtrOutputWithContext(context.Background())
}

func (i GooglePrivacyDlpV2WordListArgs) ToGooglePrivacyDlpV2WordListPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2WordListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2WordListOutput).ToGooglePrivacyDlpV2WordListPtrOutputWithContext(ctx)
}

// GooglePrivacyDlpV2WordListPtrInput is an input type that accepts GooglePrivacyDlpV2WordListArgs, GooglePrivacyDlpV2WordListPtr and GooglePrivacyDlpV2WordListPtrOutput values.
// You can construct a concrete instance of `GooglePrivacyDlpV2WordListPtrInput` via:
//
//	        GooglePrivacyDlpV2WordListArgs{...}
//
//	or:
//
//	        nil
type GooglePrivacyDlpV2WordListPtrInput interface {
	pulumi.Input

	ToGooglePrivacyDlpV2WordListPtrOutput() GooglePrivacyDlpV2WordListPtrOutput
	ToGooglePrivacyDlpV2WordListPtrOutputWithContext(context.Context) GooglePrivacyDlpV2WordListPtrOutput
}

type googlePrivacyDlpV2WordListPtrType GooglePrivacyDlpV2WordListArgs

func GooglePrivacyDlpV2WordListPtr(v *GooglePrivacyDlpV2WordListArgs) GooglePrivacyDlpV2WordListPtrInput {
	return (*googlePrivacyDlpV2WordListPtrType)(v)
}

func (*googlePrivacyDlpV2WordListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2WordList)(nil)).Elem()
}

func (i *googlePrivacyDlpV2WordListPtrType) ToGooglePrivacyDlpV2WordListPtrOutput() GooglePrivacyDlpV2WordListPtrOutput {
	return i.ToGooglePrivacyDlpV2WordListPtrOutputWithContext(context.Background())
}

func (i *googlePrivacyDlpV2WordListPtrType) ToGooglePrivacyDlpV2WordListPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2WordListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePrivacyDlpV2WordListPtrOutput)
}

// Message defining a list of words or phrases to search for in the data.
type GooglePrivacyDlpV2WordListOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2WordListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2WordList)(nil)).Elem()
}

func (o GooglePrivacyDlpV2WordListOutput) ToGooglePrivacyDlpV2WordListOutput() GooglePrivacyDlpV2WordListOutput {
	return o
}

func (o GooglePrivacyDlpV2WordListOutput) ToGooglePrivacyDlpV2WordListOutputWithContext(ctx context.Context) GooglePrivacyDlpV2WordListOutput {
	return o
}

func (o GooglePrivacyDlpV2WordListOutput) ToGooglePrivacyDlpV2WordListPtrOutput() GooglePrivacyDlpV2WordListPtrOutput {
	return o.ToGooglePrivacyDlpV2WordListPtrOutputWithContext(context.Background())
}

func (o GooglePrivacyDlpV2WordListOutput) ToGooglePrivacyDlpV2WordListPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2WordListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooglePrivacyDlpV2WordList) *GooglePrivacyDlpV2WordList {
		return &v
	}).(GooglePrivacyDlpV2WordListPtrOutput)
}

// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]
func (o GooglePrivacyDlpV2WordListOutput) Words() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2WordList) []string { return v.Words }).(pulumi.StringArrayOutput)
}

type GooglePrivacyDlpV2WordListPtrOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2WordListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooglePrivacyDlpV2WordList)(nil)).Elem()
}

func (o GooglePrivacyDlpV2WordListPtrOutput) ToGooglePrivacyDlpV2WordListPtrOutput() GooglePrivacyDlpV2WordListPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2WordListPtrOutput) ToGooglePrivacyDlpV2WordListPtrOutputWithContext(ctx context.Context) GooglePrivacyDlpV2WordListPtrOutput {
	return o
}

func (o GooglePrivacyDlpV2WordListPtrOutput) Elem() GooglePrivacyDlpV2WordListOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2WordList) GooglePrivacyDlpV2WordList {
		if v != nil {
			return *v
		}
		var ret GooglePrivacyDlpV2WordList
		return ret
	}).(GooglePrivacyDlpV2WordListOutput)
}

// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]
func (o GooglePrivacyDlpV2WordListPtrOutput) Words() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GooglePrivacyDlpV2WordList) []string {
		if v == nil {
			return nil
		}
		return v.Words
	}).(pulumi.StringArrayOutput)
}

// Message defining a list of words or phrases to search for in the data.
type GooglePrivacyDlpV2WordListResponse struct {
	// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]
	Words []string `pulumi:"words"`
}

// Message defining a list of words or phrases to search for in the data.
type GooglePrivacyDlpV2WordListResponseOutput struct{ *pulumi.OutputState }

func (GooglePrivacyDlpV2WordListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooglePrivacyDlpV2WordListResponse)(nil)).Elem()
}

func (o GooglePrivacyDlpV2WordListResponseOutput) ToGooglePrivacyDlpV2WordListResponseOutput() GooglePrivacyDlpV2WordListResponseOutput {
	return o
}

func (o GooglePrivacyDlpV2WordListResponseOutput) ToGooglePrivacyDlpV2WordListResponseOutputWithContext(ctx context.Context) GooglePrivacyDlpV2WordListResponseOutput {
	return o
}

// Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]
func (o GooglePrivacyDlpV2WordListResponseOutput) Words() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GooglePrivacyDlpV2WordListResponse) []string { return v.Words }).(pulumi.StringArrayOutput)
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type GoogleProtobufEmpty struct {
}

// GoogleProtobufEmptyInput is an input type that accepts GoogleProtobufEmptyArgs and GoogleProtobufEmptyOutput values.
// You can construct a concrete instance of `GoogleProtobufEmptyInput` via:
//
//	GoogleProtobufEmptyArgs{...}
type GoogleProtobufEmptyInput interface {
	pulumi.Input

	ToGoogleProtobufEmptyOutput() GoogleProtobufEmptyOutput
	ToGoogleProtobufEmptyOutputWithContext(context.Context) GoogleProtobufEmptyOutput
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type GoogleProtobufEmptyArgs struct {
}

func (GoogleProtobufEmptyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleProtobufEmpty)(nil)).Elem()
}

func (i GoogleProtobufEmptyArgs) ToGoogleProtobufEmptyOutput() GoogleProtobufEmptyOutput {
	return i.ToGoogleProtobufEmptyOutputWithContext(context.Background())
}

func (i GoogleProtobufEmptyArgs) ToGoogleProtobufEmptyOutputWithContext(ctx context.Context) GoogleProtobufEmptyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleProtobufEmptyOutput)
}

func (i GoogleProtobufEmptyArgs) ToGoogleProtobufEmptyPtrOutput() GoogleProtobufEmptyPtrOutput {
	return i.ToGoogleProtobufEmptyPtrOutputWithContext(context.Background())
}

func (i GoogleProtobufEmptyArgs) ToGoogleProtobufEmptyPtrOutputWithContext(ctx context.Context) GoogleProtobufEmptyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleProtobufEmptyOutput).ToGoogleProtobufEmptyPtrOutputWithContext(ctx)
}

// GoogleProtobufEmptyPtrInput is an input type that accepts GoogleProtobufEmptyArgs, GoogleProtobufEmptyPtr and GoogleProtobufEmptyPtrOutput values.
// You can construct a concrete instance of `GoogleProtobufEmptyPtrInput` via:
//
//	        GoogleProtobufEmptyArgs{...}
//
//	or:
//
//	        nil
type GoogleProtobufEmptyPtrInput interface {
	pulumi.Input

	ToGoogleProtobufEmptyPtrOutput() GoogleProtobufEmptyPtrOutput
	ToGoogleProtobufEmptyPtrOutputWithContext(context.Context) GoogleProtobufEmptyPtrOutput
}

type googleProtobufEmptyPtrType GoogleProtobufEmptyArgs

func GoogleProtobufEmptyPtr(v *GoogleProtobufEmptyArgs) GoogleProtobufEmptyPtrInput {
	return (*googleProtobufEmptyPtrType)(v)
}

func (*googleProtobufEmptyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleProtobufEmpty)(nil)).Elem()
}

func (i *googleProtobufEmptyPtrType) ToGoogleProtobufEmptyPtrOutput() GoogleProtobufEmptyPtrOutput {
	return i.ToGoogleProtobufEmptyPtrOutputWithContext(context.Background())
}

func (i *googleProtobufEmptyPtrType) ToGoogleProtobufEmptyPtrOutputWithContext(ctx context.Context) GoogleProtobufEmptyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleProtobufEmptyPtrOutput)
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type GoogleProtobufEmptyOutput struct{ *pulumi.OutputState }

func (GoogleProtobufEmptyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleProtobufEmpty)(nil)).Elem()
}

func (o GoogleProtobufEmptyOutput) ToGoogleProtobufEmptyOutput() GoogleProtobufEmptyOutput {
	return o
}

func (o GoogleProtobufEmptyOutput) ToGoogleProtobufEmptyOutputWithContext(ctx context.Context) GoogleProtobufEmptyOutput {
	return o
}

func (o GoogleProtobufEmptyOutput) ToGoogleProtobufEmptyPtrOutput() GoogleProtobufEmptyPtrOutput {
	return o.ToGoogleProtobufEmptyPtrOutputWithContext(context.Background())
}

func (o GoogleProtobufEmptyOutput) ToGoogleProtobufEmptyPtrOutputWithContext(ctx context.Context) GoogleProtobufEmptyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleProtobufEmpty) *GoogleProtobufEmpty {
		return &v
	}).(GoogleProtobufEmptyPtrOutput)
}

type GoogleProtobufEmptyPtrOutput struct{ *pulumi.OutputState }

func (GoogleProtobufEmptyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleProtobufEmpty)(nil)).Elem()
}

func (o GoogleProtobufEmptyPtrOutput) ToGoogleProtobufEmptyPtrOutput() GoogleProtobufEmptyPtrOutput {
	return o
}

func (o GoogleProtobufEmptyPtrOutput) ToGoogleProtobufEmptyPtrOutputWithContext(ctx context.Context) GoogleProtobufEmptyPtrOutput {
	return o
}

func (o GoogleProtobufEmptyPtrOutput) Elem() GoogleProtobufEmptyOutput {
	return o.ApplyT(func(v *GoogleProtobufEmpty) GoogleProtobufEmpty {
		if v != nil {
			return *v
		}
		var ret GoogleProtobufEmpty
		return ret
	}).(GoogleProtobufEmptyOutput)
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type GoogleProtobufEmptyResponse struct {
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type GoogleProtobufEmptyResponseOutput struct{ *pulumi.OutputState }

func (GoogleProtobufEmptyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleProtobufEmptyResponse)(nil)).Elem()
}

func (o GoogleProtobufEmptyResponseOutput) ToGoogleProtobufEmptyResponseOutput() GoogleProtobufEmptyResponseOutput {
	return o
}

func (o GoogleProtobufEmptyResponseOutput) ToGoogleProtobufEmptyResponseOutputWithContext(ctx context.Context) GoogleProtobufEmptyResponseOutput {
	return o
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatusResponseOutput struct{ *pulumi.OutputState }

func (GoogleRpcStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleRpcStatusResponse)(nil)).Elem()
}

func (o GoogleRpcStatusResponseOutput) ToGoogleRpcStatusResponseOutput() GoogleRpcStatusResponseOutput {
	return o
}

func (o GoogleRpcStatusResponseOutput) ToGoogleRpcStatusResponseOutputWithContext(ctx context.Context) GoogleRpcStatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o GoogleRpcStatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleRpcStatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o GoogleRpcStatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v GoogleRpcStatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o GoogleRpcStatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleRpcStatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type GoogleTypeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `pulumi:"year"`
}

// GoogleTypeDateInput is an input type that accepts GoogleTypeDateArgs and GoogleTypeDateOutput values.
// You can construct a concrete instance of `GoogleTypeDateInput` via:
//
//	GoogleTypeDateArgs{...}
type GoogleTypeDateInput interface {
	pulumi.Input

	ToGoogleTypeDateOutput() GoogleTypeDateOutput
	ToGoogleTypeDateOutputWithContext(context.Context) GoogleTypeDateOutput
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type GoogleTypeDateArgs struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day pulumi.IntPtrInput `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month pulumi.IntPtrInput `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year pulumi.IntPtrInput `pulumi:"year"`
}

func (GoogleTypeDateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeDate)(nil)).Elem()
}

func (i GoogleTypeDateArgs) ToGoogleTypeDateOutput() GoogleTypeDateOutput {
	return i.ToGoogleTypeDateOutputWithContext(context.Background())
}

func (i GoogleTypeDateArgs) ToGoogleTypeDateOutputWithContext(ctx context.Context) GoogleTypeDateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeDateOutput)
}

func (i GoogleTypeDateArgs) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return i.ToGoogleTypeDatePtrOutputWithContext(context.Background())
}

func (i GoogleTypeDateArgs) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeDateOutput).ToGoogleTypeDatePtrOutputWithContext(ctx)
}

// GoogleTypeDatePtrInput is an input type that accepts GoogleTypeDateArgs, GoogleTypeDatePtr and GoogleTypeDatePtrOutput values.
// You can construct a concrete instance of `GoogleTypeDatePtrInput` via:
//
//	        GoogleTypeDateArgs{...}
//
//	or:
//
//	        nil
type GoogleTypeDatePtrInput interface {
	pulumi.Input

	ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput
	ToGoogleTypeDatePtrOutputWithContext(context.Context) GoogleTypeDatePtrOutput
}

type googleTypeDatePtrType GoogleTypeDateArgs

func GoogleTypeDatePtr(v *GoogleTypeDateArgs) GoogleTypeDatePtrInput {
	return (*googleTypeDatePtrType)(v)
}

func (*googleTypeDatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeDate)(nil)).Elem()
}

func (i *googleTypeDatePtrType) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return i.ToGoogleTypeDatePtrOutputWithContext(context.Background())
}

func (i *googleTypeDatePtrType) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeDatePtrOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type GoogleTypeDateOutput struct{ *pulumi.OutputState }

func (GoogleTypeDateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeDate)(nil)).Elem()
}

func (o GoogleTypeDateOutput) ToGoogleTypeDateOutput() GoogleTypeDateOutput {
	return o
}

func (o GoogleTypeDateOutput) ToGoogleTypeDateOutputWithContext(ctx context.Context) GoogleTypeDateOutput {
	return o
}

func (o GoogleTypeDateOutput) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return o.ToGoogleTypeDatePtrOutputWithContext(context.Background())
}

func (o GoogleTypeDateOutput) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleTypeDate) *GoogleTypeDate {
		return &v
	}).(GoogleTypeDatePtrOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o GoogleTypeDateOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeDate) *int { return v.Day }).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o GoogleTypeDateOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeDate) *int { return v.Month }).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o GoogleTypeDateOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeDate) *int { return v.Year }).(pulumi.IntPtrOutput)
}

type GoogleTypeDatePtrOutput struct{ *pulumi.OutputState }

func (GoogleTypeDatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeDate)(nil)).Elem()
}

func (o GoogleTypeDatePtrOutput) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return o
}

func (o GoogleTypeDatePtrOutput) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return o
}

func (o GoogleTypeDatePtrOutput) Elem() GoogleTypeDateOutput {
	return o.ApplyT(func(v *GoogleTypeDate) GoogleTypeDate {
		if v != nil {
			return *v
		}
		var ret GoogleTypeDate
		return ret
	}).(GoogleTypeDateOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o GoogleTypeDatePtrOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeDate) *int {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o GoogleTypeDatePtrOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeDate) *int {
		if v == nil {
			return nil
		}
		return v.Month
	}).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o GoogleTypeDatePtrOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeDate) *int {
		if v == nil {
			return nil
		}
		return v.Year
	}).(pulumi.IntPtrOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type GoogleTypeDateResponse struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day int `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month int `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year int `pulumi:"year"`
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type GoogleTypeDateResponseOutput struct{ *pulumi.OutputState }

func (GoogleTypeDateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeDateResponse)(nil)).Elem()
}

func (o GoogleTypeDateResponseOutput) ToGoogleTypeDateResponseOutput() GoogleTypeDateResponseOutput {
	return o
}

func (o GoogleTypeDateResponseOutput) ToGoogleTypeDateResponseOutputWithContext(ctx context.Context) GoogleTypeDateResponseOutput {
	return o
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o GoogleTypeDateResponseOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeDateResponse) int { return v.Day }).(pulumi.IntOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o GoogleTypeDateResponseOutput) Month() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeDateResponse) int { return v.Month }).(pulumi.IntOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o GoogleTypeDateResponseOutput) Year() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeDateResponse) int { return v.Year }).(pulumi.IntOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type GoogleTypeTimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds *int `pulumi:"seconds"`
}

// GoogleTypeTimeOfDayInput is an input type that accepts GoogleTypeTimeOfDayArgs and GoogleTypeTimeOfDayOutput values.
// You can construct a concrete instance of `GoogleTypeTimeOfDayInput` via:
//
//	GoogleTypeTimeOfDayArgs{...}
type GoogleTypeTimeOfDayInput interface {
	pulumi.Input

	ToGoogleTypeTimeOfDayOutput() GoogleTypeTimeOfDayOutput
	ToGoogleTypeTimeOfDayOutputWithContext(context.Context) GoogleTypeTimeOfDayOutput
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type GoogleTypeTimeOfDayArgs struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours pulumi.IntPtrInput `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes pulumi.IntPtrInput `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds pulumi.IntPtrInput `pulumi:"seconds"`
}

func (GoogleTypeTimeOfDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeTimeOfDay)(nil)).Elem()
}

func (i GoogleTypeTimeOfDayArgs) ToGoogleTypeTimeOfDayOutput() GoogleTypeTimeOfDayOutput {
	return i.ToGoogleTypeTimeOfDayOutputWithContext(context.Background())
}

func (i GoogleTypeTimeOfDayArgs) ToGoogleTypeTimeOfDayOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeTimeOfDayOutput)
}

func (i GoogleTypeTimeOfDayArgs) ToGoogleTypeTimeOfDayPtrOutput() GoogleTypeTimeOfDayPtrOutput {
	return i.ToGoogleTypeTimeOfDayPtrOutputWithContext(context.Background())
}

func (i GoogleTypeTimeOfDayArgs) ToGoogleTypeTimeOfDayPtrOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeTimeOfDayOutput).ToGoogleTypeTimeOfDayPtrOutputWithContext(ctx)
}

// GoogleTypeTimeOfDayPtrInput is an input type that accepts GoogleTypeTimeOfDayArgs, GoogleTypeTimeOfDayPtr and GoogleTypeTimeOfDayPtrOutput values.
// You can construct a concrete instance of `GoogleTypeTimeOfDayPtrInput` via:
//
//	        GoogleTypeTimeOfDayArgs{...}
//
//	or:
//
//	        nil
type GoogleTypeTimeOfDayPtrInput interface {
	pulumi.Input

	ToGoogleTypeTimeOfDayPtrOutput() GoogleTypeTimeOfDayPtrOutput
	ToGoogleTypeTimeOfDayPtrOutputWithContext(context.Context) GoogleTypeTimeOfDayPtrOutput
}

type googleTypeTimeOfDayPtrType GoogleTypeTimeOfDayArgs

func GoogleTypeTimeOfDayPtr(v *GoogleTypeTimeOfDayArgs) GoogleTypeTimeOfDayPtrInput {
	return (*googleTypeTimeOfDayPtrType)(v)
}

func (*googleTypeTimeOfDayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeTimeOfDay)(nil)).Elem()
}

func (i *googleTypeTimeOfDayPtrType) ToGoogleTypeTimeOfDayPtrOutput() GoogleTypeTimeOfDayPtrOutput {
	return i.ToGoogleTypeTimeOfDayPtrOutputWithContext(context.Background())
}

func (i *googleTypeTimeOfDayPtrType) ToGoogleTypeTimeOfDayPtrOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeTimeOfDayPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type GoogleTypeTimeOfDayOutput struct{ *pulumi.OutputState }

func (GoogleTypeTimeOfDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeTimeOfDay)(nil)).Elem()
}

func (o GoogleTypeTimeOfDayOutput) ToGoogleTypeTimeOfDayOutput() GoogleTypeTimeOfDayOutput {
	return o
}

func (o GoogleTypeTimeOfDayOutput) ToGoogleTypeTimeOfDayOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayOutput {
	return o
}

func (o GoogleTypeTimeOfDayOutput) ToGoogleTypeTimeOfDayPtrOutput() GoogleTypeTimeOfDayPtrOutput {
	return o.ToGoogleTypeTimeOfDayPtrOutputWithContext(context.Background())
}

func (o GoogleTypeTimeOfDayOutput) ToGoogleTypeTimeOfDayPtrOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleTypeTimeOfDay) *GoogleTypeTimeOfDay {
		return &v
	}).(GoogleTypeTimeOfDayPtrOutput)
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o GoogleTypeTimeOfDayOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDay) *int { return v.Hours }).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o GoogleTypeTimeOfDayOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDay) *int { return v.Minutes }).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o GoogleTypeTimeOfDayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o GoogleTypeTimeOfDayOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDay) *int { return v.Seconds }).(pulumi.IntPtrOutput)
}

type GoogleTypeTimeOfDayPtrOutput struct{ *pulumi.OutputState }

func (GoogleTypeTimeOfDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeTimeOfDay)(nil)).Elem()
}

func (o GoogleTypeTimeOfDayPtrOutput) ToGoogleTypeTimeOfDayPtrOutput() GoogleTypeTimeOfDayPtrOutput {
	return o
}

func (o GoogleTypeTimeOfDayPtrOutput) ToGoogleTypeTimeOfDayPtrOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayPtrOutput {
	return o
}

func (o GoogleTypeTimeOfDayPtrOutput) Elem() GoogleTypeTimeOfDayOutput {
	return o.ApplyT(func(v *GoogleTypeTimeOfDay) GoogleTypeTimeOfDay {
		if v != nil {
			return *v
		}
		var ret GoogleTypeTimeOfDay
		return ret
	}).(GoogleTypeTimeOfDayOutput)
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o GoogleTypeTimeOfDayPtrOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeTimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o GoogleTypeTimeOfDayPtrOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeTimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o GoogleTypeTimeOfDayPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeTimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o GoogleTypeTimeOfDayPtrOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeTimeOfDay) *int {
		if v == nil {
			return nil
		}
		return v.Seconds
	}).(pulumi.IntPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type GoogleTypeTimeOfDayResponse struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds int `pulumi:"seconds"`
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type GoogleTypeTimeOfDayResponseOutput struct{ *pulumi.OutputState }

func (GoogleTypeTimeOfDayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeTimeOfDayResponse)(nil)).Elem()
}

func (o GoogleTypeTimeOfDayResponseOutput) ToGoogleTypeTimeOfDayResponseOutput() GoogleTypeTimeOfDayResponseOutput {
	return o
}

func (o GoogleTypeTimeOfDayResponseOutput) ToGoogleTypeTimeOfDayResponseOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayResponseOutput {
	return o
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o GoogleTypeTimeOfDayResponseOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDayResponse) int { return v.Hours }).(pulumi.IntOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o GoogleTypeTimeOfDayResponseOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDayResponse) int { return v.Minutes }).(pulumi.IntOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o GoogleTypeTimeOfDayResponseOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDayResponse) int { return v.Nanos }).(pulumi.IntOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o GoogleTypeTimeOfDayResponseOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDayResponse) int { return v.Seconds }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ActionInput)(nil)).Elem(), GooglePrivacyDlpV2ActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ActionArrayInput)(nil)).Elem(), GooglePrivacyDlpV2ActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2AllInfoTypesInput)(nil)).Elem(), GooglePrivacyDlpV2AllInfoTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2AllInfoTypesPtrInput)(nil)).Elem(), GooglePrivacyDlpV2AllInfoTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2AllOtherBigQueryTablesInput)(nil)).Elem(), GooglePrivacyDlpV2AllOtherBigQueryTablesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2AllOtherBigQueryTablesPtrInput)(nil)).Elem(), GooglePrivacyDlpV2AllOtherBigQueryTablesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2AllTextInput)(nil)).Elem(), GooglePrivacyDlpV2AllTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2AllTextPtrInput)(nil)).Elem(), GooglePrivacyDlpV2AllTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2AuxiliaryTableInput)(nil)).Elem(), GooglePrivacyDlpV2AuxiliaryTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2AuxiliaryTableArrayInput)(nil)).Elem(), GooglePrivacyDlpV2AuxiliaryTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryDiscoveryTargetInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryDiscoveryTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryFieldInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryFieldPtrInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryOptionsInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryOptionsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryRegexInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryRegexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryRegexArrayInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryRegexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryRegexesInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryRegexesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryRegexesPtrInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryRegexesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTablePtrInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableCollectionInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryTableCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableCollectionPtrInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryTableCollectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableTypesInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryTableTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BigQueryTableTypesPtrInput)(nil)).Elem(), GooglePrivacyDlpV2BigQueryTableTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BucketInput)(nil)).Elem(), GooglePrivacyDlpV2BucketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BucketArrayInput)(nil)).Elem(), GooglePrivacyDlpV2BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BucketingConfigInput)(nil)).Elem(), GooglePrivacyDlpV2BucketingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2BucketingConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2BucketingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CategoricalStatsConfigInput)(nil)).Elem(), GooglePrivacyDlpV2CategoricalStatsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CategoricalStatsConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2CategoricalStatsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CharacterMaskConfigInput)(nil)).Elem(), GooglePrivacyDlpV2CharacterMaskConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CharacterMaskConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2CharacterMaskConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CharsToIgnoreInput)(nil)).Elem(), GooglePrivacyDlpV2CharsToIgnoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CharsToIgnoreArrayInput)(nil)).Elem(), GooglePrivacyDlpV2CharsToIgnoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageFileSetInput)(nil)).Elem(), GooglePrivacyDlpV2CloudStorageFileSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageFileSetPtrInput)(nil)).Elem(), GooglePrivacyDlpV2CloudStorageFileSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageOptionsInput)(nil)).Elem(), GooglePrivacyDlpV2CloudStorageOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageOptionsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2CloudStorageOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CloudStoragePathInput)(nil)).Elem(), GooglePrivacyDlpV2CloudStoragePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CloudStoragePathPtrInput)(nil)).Elem(), GooglePrivacyDlpV2CloudStoragePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageRegexFileSetInput)(nil)).Elem(), GooglePrivacyDlpV2CloudStorageRegexFileSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CloudStorageRegexFileSetPtrInput)(nil)).Elem(), GooglePrivacyDlpV2CloudStorageRegexFileSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ColorInput)(nil)).Elem(), GooglePrivacyDlpV2ColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ColorPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ConditionInput)(nil)).Elem(), GooglePrivacyDlpV2ConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ConditionArrayInput)(nil)).Elem(), GooglePrivacyDlpV2ConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ConditionsInput)(nil)).Elem(), GooglePrivacyDlpV2ConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ConditionsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CryptoDeterministicConfigInput)(nil)).Elem(), GooglePrivacyDlpV2CryptoDeterministicConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CryptoDeterministicConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2CryptoDeterministicConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CryptoHashConfigInput)(nil)).Elem(), GooglePrivacyDlpV2CryptoHashConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CryptoHashConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2CryptoHashConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CryptoKeyInput)(nil)).Elem(), GooglePrivacyDlpV2CryptoKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CryptoKeyPtrInput)(nil)).Elem(), GooglePrivacyDlpV2CryptoKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigInput)(nil)).Elem(), GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CustomInfoTypeInput)(nil)).Elem(), GooglePrivacyDlpV2CustomInfoTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2CustomInfoTypeArrayInput)(nil)).Elem(), GooglePrivacyDlpV2CustomInfoTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DataProfileActionInput)(nil)).Elem(), GooglePrivacyDlpV2DataProfileActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DataProfileActionArrayInput)(nil)).Elem(), GooglePrivacyDlpV2DataProfileActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DataProfilePubSubConditionInput)(nil)).Elem(), GooglePrivacyDlpV2DataProfilePubSubConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DataProfilePubSubConditionPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DataProfilePubSubConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DatastoreOptionsInput)(nil)).Elem(), GooglePrivacyDlpV2DatastoreOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DatastoreOptionsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DatastoreOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DateShiftConfigInput)(nil)).Elem(), GooglePrivacyDlpV2DateShiftConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DateShiftConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DateShiftConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyInput)(nil)).Elem(), GooglePrivacyDlpV2DeidentifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DeidentifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyConfigInput)(nil)).Elem(), GooglePrivacyDlpV2DeidentifyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DeidentifyConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DeidentifyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DeltaPresenceEstimationConfigInput)(nil)).Elem(), GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DeltaPresenceEstimationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DetectionRuleInput)(nil)).Elem(), GooglePrivacyDlpV2DetectionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DetectionRuleArrayInput)(nil)).Elem(), GooglePrivacyDlpV2DetectionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DictionaryInput)(nil)).Elem(), GooglePrivacyDlpV2DictionaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DictionaryPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DictionaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DisabledInput)(nil)).Elem(), GooglePrivacyDlpV2DisabledArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DisabledPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DisabledArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryBigQueryConditionsInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryBigQueryConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryBigQueryFilterInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryBigQueryFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryGenerationCadenceInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryGenerationCadencePtrInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryGenerationCadenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryStartingLocationInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryStartingLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryStartingLocationPtrInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryStartingLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryTableModifiedCadenceInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryTableModifiedCadenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryTargetInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2DiscoveryTargetArrayInput)(nil)).Elem(), GooglePrivacyDlpV2DiscoveryTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2EntityIdInput)(nil)).Elem(), GooglePrivacyDlpV2EntityIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2EntityIdPtrInput)(nil)).Elem(), GooglePrivacyDlpV2EntityIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ExcludeByHotwordInput)(nil)).Elem(), GooglePrivacyDlpV2ExcludeByHotwordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ExcludeByHotwordPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ExcludeByHotwordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ExcludeInfoTypesInput)(nil)).Elem(), GooglePrivacyDlpV2ExcludeInfoTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ExcludeInfoTypesPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ExcludeInfoTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ExclusionRuleInput)(nil)).Elem(), GooglePrivacyDlpV2ExclusionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ExclusionRulePtrInput)(nil)).Elem(), GooglePrivacyDlpV2ExclusionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ExportInput)(nil)).Elem(), GooglePrivacyDlpV2ExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ExportPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ExpressionsInput)(nil)).Elem(), GooglePrivacyDlpV2ExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ExpressionsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FieldIdInput)(nil)).Elem(), GooglePrivacyDlpV2FieldIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FieldIdPtrInput)(nil)).Elem(), GooglePrivacyDlpV2FieldIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FieldIdArrayInput)(nil)).Elem(), GooglePrivacyDlpV2FieldIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FieldTransformationInput)(nil)).Elem(), GooglePrivacyDlpV2FieldTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FieldTransformationArrayInput)(nil)).Elem(), GooglePrivacyDlpV2FieldTransformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FileSetInput)(nil)).Elem(), GooglePrivacyDlpV2FileSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FileSetPtrInput)(nil)).Elem(), GooglePrivacyDlpV2FileSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FindingLimitsInput)(nil)).Elem(), GooglePrivacyDlpV2FindingLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FindingLimitsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2FindingLimitsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FixedSizeBucketingConfigInput)(nil)).Elem(), GooglePrivacyDlpV2FixedSizeBucketingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2FixedSizeBucketingConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2FixedSizeBucketingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2HotwordRuleInput)(nil)).Elem(), GooglePrivacyDlpV2HotwordRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2HotwordRulePtrInput)(nil)).Elem(), GooglePrivacyDlpV2HotwordRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2HybridOptionsInput)(nil)).Elem(), GooglePrivacyDlpV2HybridOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2HybridOptionsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2HybridOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ImageTransformationInput)(nil)).Elem(), GooglePrivacyDlpV2ImageTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ImageTransformationArrayInput)(nil)).Elem(), GooglePrivacyDlpV2ImageTransformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ImageTransformationsInput)(nil)).Elem(), GooglePrivacyDlpV2ImageTransformationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ImageTransformationsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ImageTransformationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypePtrInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeArrayInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeLikelihoodInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeLikelihoodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeLikelihoodArrayInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeLikelihoodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeLimitInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeLimitArrayInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeTransformationInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeTransformationArrayInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeTransformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeTransformationsInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeTransformationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InfoTypeTransformationsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2InfoTypeTransformationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InspectConfigInput)(nil)).Elem(), GooglePrivacyDlpV2InspectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InspectConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2InspectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InspectJobConfigInput)(nil)).Elem(), GooglePrivacyDlpV2InspectJobConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InspectJobConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2InspectJobConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InspectionRuleInput)(nil)).Elem(), GooglePrivacyDlpV2InspectionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InspectionRuleArrayInput)(nil)).Elem(), GooglePrivacyDlpV2InspectionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InspectionRuleSetInput)(nil)).Elem(), GooglePrivacyDlpV2InspectionRuleSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2InspectionRuleSetArrayInput)(nil)).Elem(), GooglePrivacyDlpV2InspectionRuleSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2JobNotificationEmailsInput)(nil)).Elem(), GooglePrivacyDlpV2JobNotificationEmailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2JobNotificationEmailsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2JobNotificationEmailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2KAnonymityConfigInput)(nil)).Elem(), GooglePrivacyDlpV2KAnonymityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2KAnonymityConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2KAnonymityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2KMapEstimationConfigInput)(nil)).Elem(), GooglePrivacyDlpV2KMapEstimationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2KMapEstimationConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2KMapEstimationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2KindExpressionInput)(nil)).Elem(), GooglePrivacyDlpV2KindExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2KindExpressionPtrInput)(nil)).Elem(), GooglePrivacyDlpV2KindExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2KmsWrappedCryptoKeyInput)(nil)).Elem(), GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrInput)(nil)).Elem(), GooglePrivacyDlpV2KmsWrappedCryptoKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2LDiversityConfigInput)(nil)).Elem(), GooglePrivacyDlpV2LDiversityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2LDiversityConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2LDiversityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2LargeCustomDictionaryConfigInput)(nil)).Elem(), GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2LargeCustomDictionaryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2LeaveUntransformedInput)(nil)).Elem(), GooglePrivacyDlpV2LeaveUntransformedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2LeaveUntransformedPtrInput)(nil)).Elem(), GooglePrivacyDlpV2LeaveUntransformedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2LikelihoodAdjustmentInput)(nil)).Elem(), GooglePrivacyDlpV2LikelihoodAdjustmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2LikelihoodAdjustmentPtrInput)(nil)).Elem(), GooglePrivacyDlpV2LikelihoodAdjustmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ManualInput)(nil)).Elem(), GooglePrivacyDlpV2ManualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ManualPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ManualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2NumericalStatsConfigInput)(nil)).Elem(), GooglePrivacyDlpV2NumericalStatsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2NumericalStatsConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2NumericalStatsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2OrConditionsInput)(nil)).Elem(), GooglePrivacyDlpV2OrConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2OrConditionsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2OrConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2OrgConfigInput)(nil)).Elem(), GooglePrivacyDlpV2OrgConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2OrgConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2OrgConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2OutputStorageConfigInput)(nil)).Elem(), GooglePrivacyDlpV2OutputStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2OutputStorageConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2OutputStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PartitionIdInput)(nil)).Elem(), GooglePrivacyDlpV2PartitionIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PartitionIdPtrInput)(nil)).Elem(), GooglePrivacyDlpV2PartitionIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PrimitiveTransformationInput)(nil)).Elem(), GooglePrivacyDlpV2PrimitiveTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PrimitiveTransformationPtrInput)(nil)).Elem(), GooglePrivacyDlpV2PrimitiveTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PrivacyMetricInput)(nil)).Elem(), GooglePrivacyDlpV2PrivacyMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PrivacyMetricPtrInput)(nil)).Elem(), GooglePrivacyDlpV2PrivacyMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ProximityInput)(nil)).Elem(), GooglePrivacyDlpV2ProximityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ProximityPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ProximityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PubSubConditionInput)(nil)).Elem(), GooglePrivacyDlpV2PubSubConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PubSubConditionArrayInput)(nil)).Elem(), GooglePrivacyDlpV2PubSubConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PubSubExpressionsInput)(nil)).Elem(), GooglePrivacyDlpV2PubSubExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PubSubExpressionsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2PubSubExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PubSubNotificationInput)(nil)).Elem(), GooglePrivacyDlpV2PubSubNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PubSubNotificationPtrInput)(nil)).Elem(), GooglePrivacyDlpV2PubSubNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogInput)(nil)).Elem(), GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrInput)(nil)).Elem(), GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PublishSummaryToCsccInput)(nil)).Elem(), GooglePrivacyDlpV2PublishSummaryToCsccArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PublishSummaryToCsccPtrInput)(nil)).Elem(), GooglePrivacyDlpV2PublishSummaryToCsccArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PublishToPubSubInput)(nil)).Elem(), GooglePrivacyDlpV2PublishToPubSubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PublishToPubSubPtrInput)(nil)).Elem(), GooglePrivacyDlpV2PublishToPubSubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PublishToStackdriverInput)(nil)).Elem(), GooglePrivacyDlpV2PublishToStackdriverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2PublishToStackdriverPtrInput)(nil)).Elem(), GooglePrivacyDlpV2PublishToStackdriverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdInput)(nil)).Elem(), GooglePrivacyDlpV2QuasiIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdArrayInput)(nil)).Elem(), GooglePrivacyDlpV2QuasiIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdFieldInput)(nil)).Elem(), GooglePrivacyDlpV2QuasiIdFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdFieldArrayInput)(nil)).Elem(), GooglePrivacyDlpV2QuasiIdFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdentifierFieldInput)(nil)).Elem(), GooglePrivacyDlpV2QuasiIdentifierFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2QuasiIdentifierFieldArrayInput)(nil)).Elem(), GooglePrivacyDlpV2QuasiIdentifierFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RecordConditionInput)(nil)).Elem(), GooglePrivacyDlpV2RecordConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RecordConditionPtrInput)(nil)).Elem(), GooglePrivacyDlpV2RecordConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RecordSuppressionInput)(nil)).Elem(), GooglePrivacyDlpV2RecordSuppressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RecordSuppressionArrayInput)(nil)).Elem(), GooglePrivacyDlpV2RecordSuppressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RecordTransformationsInput)(nil)).Elem(), GooglePrivacyDlpV2RecordTransformationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RecordTransformationsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2RecordTransformationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RedactConfigInput)(nil)).Elem(), GooglePrivacyDlpV2RedactConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RedactConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2RedactConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RegexInput)(nil)).Elem(), GooglePrivacyDlpV2RegexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RegexPtrInput)(nil)).Elem(), GooglePrivacyDlpV2RegexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ReplaceDictionaryConfigInput)(nil)).Elem(), GooglePrivacyDlpV2ReplaceDictionaryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ReplaceDictionaryConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ReplaceDictionaryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ReplaceValueConfigInput)(nil)).Elem(), GooglePrivacyDlpV2ReplaceValueConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ReplaceValueConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ReplaceValueConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ReplaceWithInfoTypeConfigInput)(nil)).Elem(), GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ReplaceWithInfoTypeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RiskAnalysisJobConfigInput)(nil)).Elem(), GooglePrivacyDlpV2RiskAnalysisJobConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2RiskAnalysisJobConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2RiskAnalysisJobConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2SaveFindingsInput)(nil)).Elem(), GooglePrivacyDlpV2SaveFindingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2SaveFindingsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2SaveFindingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ScheduleInput)(nil)).Elem(), GooglePrivacyDlpV2ScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2SchedulePtrInput)(nil)).Elem(), GooglePrivacyDlpV2ScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2SelectedInfoTypesInput)(nil)).Elem(), GooglePrivacyDlpV2SelectedInfoTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2SelectedInfoTypesPtrInput)(nil)).Elem(), GooglePrivacyDlpV2SelectedInfoTypesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2SensitivityScoreInput)(nil)).Elem(), GooglePrivacyDlpV2SensitivityScoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2SensitivityScorePtrInput)(nil)).Elem(), GooglePrivacyDlpV2SensitivityScoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2StatisticalTableInput)(nil)).Elem(), GooglePrivacyDlpV2StatisticalTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2StatisticalTableArrayInput)(nil)).Elem(), GooglePrivacyDlpV2StatisticalTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2StorageConfigInput)(nil)).Elem(), GooglePrivacyDlpV2StorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2StorageConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2StorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2StoredInfoTypeConfigInput)(nil)).Elem(), GooglePrivacyDlpV2StoredInfoTypeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2StoredTypeInput)(nil)).Elem(), GooglePrivacyDlpV2StoredTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2StoredTypePtrInput)(nil)).Elem(), GooglePrivacyDlpV2StoredTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2SurrogateTypeInput)(nil)).Elem(), GooglePrivacyDlpV2SurrogateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2SurrogateTypePtrInput)(nil)).Elem(), GooglePrivacyDlpV2SurrogateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TableOptionsInput)(nil)).Elem(), GooglePrivacyDlpV2TableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TableOptionsPtrInput)(nil)).Elem(), GooglePrivacyDlpV2TableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TaggedFieldInput)(nil)).Elem(), GooglePrivacyDlpV2TaggedFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TaggedFieldArrayInput)(nil)).Elem(), GooglePrivacyDlpV2TaggedFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ThrowErrorInput)(nil)).Elem(), GooglePrivacyDlpV2ThrowErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ThrowErrorPtrInput)(nil)).Elem(), GooglePrivacyDlpV2ThrowErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TimePartConfigInput)(nil)).Elem(), GooglePrivacyDlpV2TimePartConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TimePartConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2TimePartConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TimespanConfigInput)(nil)).Elem(), GooglePrivacyDlpV2TimespanConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TimespanConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2TimespanConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TransformationConfigInput)(nil)).Elem(), GooglePrivacyDlpV2TransformationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TransformationConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2TransformationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TransformationDetailsStorageConfigInput)(nil)).Elem(), GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrInput)(nil)).Elem(), GooglePrivacyDlpV2TransformationDetailsStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TransformationErrorHandlingInput)(nil)).Elem(), GooglePrivacyDlpV2TransformationErrorHandlingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TransformationErrorHandlingPtrInput)(nil)).Elem(), GooglePrivacyDlpV2TransformationErrorHandlingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TransientCryptoKeyInput)(nil)).Elem(), GooglePrivacyDlpV2TransientCryptoKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TransientCryptoKeyPtrInput)(nil)).Elem(), GooglePrivacyDlpV2TransientCryptoKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TriggerInput)(nil)).Elem(), GooglePrivacyDlpV2TriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2TriggerArrayInput)(nil)).Elem(), GooglePrivacyDlpV2TriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2UnwrappedCryptoKeyInput)(nil)).Elem(), GooglePrivacyDlpV2UnwrappedCryptoKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2UnwrappedCryptoKeyPtrInput)(nil)).Elem(), GooglePrivacyDlpV2UnwrappedCryptoKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ValueInput)(nil)).Elem(), GooglePrivacyDlpV2ValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2ValuePtrInput)(nil)).Elem(), GooglePrivacyDlpV2ValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2WordListInput)(nil)).Elem(), GooglePrivacyDlpV2WordListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooglePrivacyDlpV2WordListPtrInput)(nil)).Elem(), GooglePrivacyDlpV2WordListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleProtobufEmptyInput)(nil)).Elem(), GoogleProtobufEmptyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleProtobufEmptyPtrInput)(nil)).Elem(), GoogleProtobufEmptyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeDateInput)(nil)).Elem(), GoogleTypeDateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeDatePtrInput)(nil)).Elem(), GoogleTypeDateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeTimeOfDayInput)(nil)).Elem(), GoogleTypeTimeOfDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeTimeOfDayPtrInput)(nil)).Elem(), GoogleTypeTimeOfDayArgs{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ActionOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ActionArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ActionDetailsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ActionDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ActionResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ActionResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AllInfoTypesOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AllInfoTypesPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AllInfoTypesResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AllOtherBigQueryTablesOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AllOtherBigQueryTablesPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AllOtherBigQueryTablesResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AllTextOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AllTextPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AllTextResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AuxiliaryTableOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AuxiliaryTableArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AuxiliaryTableResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2AuxiliaryTableResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryDiscoveryTargetOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryDiscoveryTargetPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryDiscoveryTargetResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryFieldOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryFieldPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryFieldResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryOptionsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryOptionsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryOptionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryRegexOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryRegexArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryRegexResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryRegexResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryRegexesOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryRegexesPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryRegexesResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryTableOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryTablePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryTableCollectionOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryTableCollectionPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryTableCollectionResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryTableResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryTableTypesOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryTableTypesPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BigQueryTableTypesResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BucketOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BucketArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BucketResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BucketResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BucketingConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BucketingConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2BucketingConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CategoricalStatsConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CategoricalStatsConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CategoricalStatsConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CategoricalStatsHistogramBucketResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CategoricalStatsResultResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CharacterMaskConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CharacterMaskConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CharacterMaskConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CharsToIgnoreOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CharsToIgnoreArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CharsToIgnoreResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CharsToIgnoreResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStorageFileSetOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStorageFileSetPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStorageFileSetResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStorageOptionsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStorageOptionsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStorageOptionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStoragePathOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStoragePathPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStoragePathResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStorageRegexFileSetOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStorageRegexFileSetPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CloudStorageRegexFileSetResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ColorOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ColorPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ColorResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ConditionOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ConditionArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ConditionResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ConditionsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ConditionsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ConditionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoDeterministicConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoDeterministicConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoDeterministicConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoHashConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoHashConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoHashConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoKeyOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoKeyPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoKeyResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CryptoReplaceFfxFpeConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CustomInfoTypeOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CustomInfoTypeArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CustomInfoTypeResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2CustomInfoTypeResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DataProfileActionOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DataProfileActionArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DataProfileActionResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DataProfileActionResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DataProfilePubSubConditionOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DataProfilePubSubConditionPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DataProfilePubSubConditionResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DatastoreOptionsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DatastoreOptionsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DatastoreOptionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DateShiftConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DateShiftConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DateShiftConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeidentifyOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeidentifyPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeidentifyConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeidentifyConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeidentifyConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeidentifyDataSourceDetailsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeidentifyDataSourceStatsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeidentifyResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeidentifyTemplateResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeltaPresenceEstimationConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeltaPresenceEstimationConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeltaPresenceEstimationConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucketResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValuesResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DeltaPresenceEstimationResultResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DetectionRuleOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DetectionRuleArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DetectionRuleResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DetectionRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DictionaryOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DictionaryPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DictionaryResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DisabledOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DisabledPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DisabledResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryBigQueryConditionsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryBigQueryConditionsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryBigQueryConditionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryBigQueryFilterOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryBigQueryFilterPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryBigQueryFilterResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryGenerationCadenceOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryGenerationCadencePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryGenerationCadenceResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoverySchemaModifiedCadencePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoverySchemaModifiedCadenceResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryStartingLocationOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryStartingLocationPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryStartingLocationResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryTableModifiedCadencePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryTableModifiedCadenceResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryTargetOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryTargetArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryTargetResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2DiscoveryTargetResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2EntityIdOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2EntityIdPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2EntityIdResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ErrorResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExcludeByHotwordOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExcludeByHotwordPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExcludeByHotwordResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExcludeInfoTypesOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExcludeInfoTypesPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExcludeInfoTypesResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExclusionRuleOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExclusionRulePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExclusionRuleResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExportOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExportPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExportResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExpressionsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExpressionsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ExpressionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FieldIdOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FieldIdPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FieldIdArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FieldIdResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FieldIdResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FieldTransformationOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FieldTransformationArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FieldTransformationResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FieldTransformationResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FileSetOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FileSetPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FileSetResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FindingLimitsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FindingLimitsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FindingLimitsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FixedSizeBucketingConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FixedSizeBucketingConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2FixedSizeBucketingConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2HotwordRuleOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2HotwordRulePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2HotwordRuleResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2HybridInspectStatisticsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2HybridOptionsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2HybridOptionsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2HybridOptionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ImageTransformationOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ImageTransformationArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ImageTransformationResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ImageTransformationResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ImageTransformationsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ImageTransformationsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ImageTransformationsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeLikelihoodOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeLikelihoodArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeLikelihoodResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeLikelihoodResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeLimitOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeLimitArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeLimitResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeLimitResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeStatsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeStatsResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeTransformationOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeTransformationArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeTransformationResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeTransformationResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeTransformationsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeTransformationsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InfoTypeTransformationsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectDataSourceDetailsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectJobConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectJobConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectJobConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectTemplateResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectionRuleOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectionRuleArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectionRuleResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectionRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectionRuleSetOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectionRuleSetArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectionRuleSetResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2InspectionRuleSetResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2JobNotificationEmailsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2JobNotificationEmailsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2JobNotificationEmailsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KAnonymityConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KAnonymityConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KAnonymityConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KAnonymityEquivalenceClassResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KAnonymityHistogramBucketResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KAnonymityHistogramBucketResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KAnonymityResultResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KMapEstimationConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KMapEstimationConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KMapEstimationConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KMapEstimationHistogramBucketResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KMapEstimationQuasiIdValuesResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KMapEstimationResultResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KindExpressionOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KindExpressionPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KindExpressionResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KmsWrappedCryptoKeyOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KmsWrappedCryptoKeyPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2KmsWrappedCryptoKeyResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LDiversityConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LDiversityConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LDiversityConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LDiversityEquivalenceClassResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LDiversityEquivalenceClassResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LDiversityHistogramBucketResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LDiversityHistogramBucketResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LDiversityResultResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LargeCustomDictionaryConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LargeCustomDictionaryConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LargeCustomDictionaryConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LargeCustomDictionaryStatsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LeaveUntransformedOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LeaveUntransformedPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LeaveUntransformedResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LikelihoodAdjustmentOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LikelihoodAdjustmentPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2LikelihoodAdjustmentResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ManualOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ManualPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ManualResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2NumericalStatsConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2NumericalStatsConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2NumericalStatsConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2NumericalStatsResultResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2OrConditionsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2OrConditionsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2OrConditionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2OrgConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2OrgConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2OrgConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2OutputStorageConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2OutputStorageConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2OutputStorageConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PartitionIdOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PartitionIdPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PartitionIdResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PrimitiveTransformationOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PrimitiveTransformationPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PrimitiveTransformationResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PrivacyMetricOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PrivacyMetricPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PrivacyMetricResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ProximityOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ProximityPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ProximityResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PubSubConditionOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PubSubConditionArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PubSubConditionResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PubSubConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PubSubExpressionsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PubSubExpressionsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PubSubExpressionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PubSubNotificationOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PubSubNotificationPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PubSubNotificationResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishFindingsToCloudDataCatalogResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishSummaryToCsccOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishSummaryToCsccPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishSummaryToCsccResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishToPubSubOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishToPubSubPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishToPubSubResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishToStackdriverOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishToStackdriverPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2PublishToStackdriverResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdFieldOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdFieldArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdFieldResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdentifierFieldOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdentifierFieldArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdentifierFieldResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2QuasiIdentifierFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RecordConditionOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RecordConditionPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RecordConditionResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RecordSuppressionOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RecordSuppressionArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RecordSuppressionResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RecordSuppressionResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RecordTransformationsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RecordTransformationsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RecordTransformationsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RedactConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RedactConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RedactConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RegexOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RegexPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RegexResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ReplaceDictionaryConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ReplaceDictionaryConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ReplaceDictionaryConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ReplaceValueConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ReplaceValueConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ReplaceValueConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ReplaceWithInfoTypeConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RequestedDeidentifyOptionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RequestedOptionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RequestedRiskAnalysisOptionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ResultResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RiskAnalysisJobConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RiskAnalysisJobConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2RiskAnalysisJobConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SaveFindingsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SaveFindingsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SaveFindingsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ScheduleOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SchedulePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ScheduleResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SelectedInfoTypesOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SelectedInfoTypesPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SelectedInfoTypesResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SensitivityScoreOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SensitivityScorePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SensitivityScoreResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StatisticalTableOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StatisticalTableArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StatisticalTableResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StatisticalTableResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StorageConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StorageConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StorageConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StoredInfoTypeConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StoredInfoTypeConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StoredInfoTypeStatsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StoredInfoTypeVersionResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StoredInfoTypeVersionResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StoredTypeOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StoredTypePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2StoredTypeResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SurrogateTypeOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SurrogateTypePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2SurrogateTypeResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TableOptionsOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TableOptionsPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TableOptionsResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TaggedFieldOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TaggedFieldArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TaggedFieldResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TaggedFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ThrowErrorOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ThrowErrorPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ThrowErrorResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TimePartConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TimePartConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TimePartConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TimespanConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TimespanConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TimespanConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransformationConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransformationConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransformationConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransformationDetailsStorageConfigOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransformationDetailsStorageConfigPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransformationDetailsStorageConfigResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransformationErrorHandlingOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransformationErrorHandlingPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransformationErrorHandlingResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransientCryptoKeyOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransientCryptoKeyPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TransientCryptoKeyResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TriggerOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TriggerArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TriggerResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2TriggerResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2UnwrappedCryptoKeyOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2UnwrappedCryptoKeyPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2UnwrappedCryptoKeyResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ValueOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ValuePtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ValueFrequencyResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ValueFrequencyResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ValueResponseOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2ValueResponseArrayOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2WordListOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2WordListPtrOutput{})
	pulumi.RegisterOutputType(GooglePrivacyDlpV2WordListResponseOutput{})
	pulumi.RegisterOutputType(GoogleProtobufEmptyOutput{})
	pulumi.RegisterOutputType(GoogleProtobufEmptyPtrOutput{})
	pulumi.RegisterOutputType(GoogleProtobufEmptyResponseOutput{})
	pulumi.RegisterOutputType(GoogleRpcStatusResponseOutput{})
	pulumi.RegisterOutputType(GoogleTypeDateOutput{})
	pulumi.RegisterOutputType(GoogleTypeDatePtrOutput{})
	pulumi.RegisterOutputType(GoogleTypeDateResponseOutput{})
	pulumi.RegisterOutputType(GoogleTypeTimeOfDayOutput{})
	pulumi.RegisterOutputType(GoogleTypeTimeOfDayPtrOutput{})
	pulumi.RegisterOutputType(GoogleTypeTimeOfDayResponseOutput{})
}
