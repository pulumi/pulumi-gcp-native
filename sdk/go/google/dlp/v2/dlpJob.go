// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new job to inspect storage or calculate risk metrics. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more. When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
type DlpJob struct {
	pulumi.CustomResourceState
}

// NewDlpJob registers a new resource with the given unique name, arguments, and options.
func NewDlpJob(ctx *pulumi.Context,
	name string, args *DlpJobArgs, opts ...pulumi.ResourceOption) (*DlpJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DlpJobsId == nil {
		return nil, errors.New("invalid value for required argument 'DlpJobsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource DlpJob
	err := ctx.RegisterResource("google-cloud:dlp/v2:DlpJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDlpJob gets an existing DlpJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDlpJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DlpJobState, opts ...pulumi.ResourceOption) (*DlpJob, error) {
	var resource DlpJob
	err := ctx.ReadResource("google-cloud:dlp/v2:DlpJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DlpJob resources.
type dlpJobState struct {
}

type DlpJobState struct {
}

func (DlpJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpJobState)(nil)).Elem()
}

type dlpJobArgs struct {
	DlpJobsId string `pulumi:"dlpJobsId"`
	// An inspection job scans a storage repository for InfoTypes.
	InspectJob *GooglePrivacyDlpV2InspectJobConfig `pulumi:"inspectJob"`
	// The job id can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: `[a-zA-Z\d-_]+`. The maximum length is 100 characters. Can be empty to allow the system to generate one.
	JobId *string `pulumi:"jobId"`
	// Deprecated. This field has no effect.
	LocationId *string `pulumi:"locationId"`
	ProjectsId string  `pulumi:"projectsId"`
	// A risk analysis job calculates re-identification risk metrics for a BigQuery table.
	RiskJob *GooglePrivacyDlpV2RiskAnalysisJobConfig `pulumi:"riskJob"`
}

// The set of arguments for constructing a DlpJob resource.
type DlpJobArgs struct {
	DlpJobsId pulumi.StringInput
	// An inspection job scans a storage repository for InfoTypes.
	InspectJob GooglePrivacyDlpV2InspectJobConfigPtrInput
	// The job id can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: `[a-zA-Z\d-_]+`. The maximum length is 100 characters. Can be empty to allow the system to generate one.
	JobId pulumi.StringPtrInput
	// Deprecated. This field has no effect.
	LocationId pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// A risk analysis job calculates re-identification risk metrics for a BigQuery table.
	RiskJob GooglePrivacyDlpV2RiskAnalysisJobConfigPtrInput
}

func (DlpJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpJobArgs)(nil)).Elem()
}

type DlpJobInput interface {
	pulumi.Input

	ToDlpJobOutput() DlpJobOutput
	ToDlpJobOutputWithContext(ctx context.Context) DlpJobOutput
}

func (*DlpJob) ElementType() reflect.Type {
	return reflect.TypeOf((*DlpJob)(nil))
}

func (i *DlpJob) ToDlpJobOutput() DlpJobOutput {
	return i.ToDlpJobOutputWithContext(context.Background())
}

func (i *DlpJob) ToDlpJobOutputWithContext(ctx context.Context) DlpJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpJobOutput)
}

type DlpJobOutput struct {
	*pulumi.OutputState
}

func (DlpJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DlpJob)(nil))
}

func (o DlpJobOutput) ToDlpJobOutput() DlpJobOutput {
	return o
}

func (o DlpJobOutput) ToDlpJobOutputWithContext(ctx context.Context) DlpJobOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DlpJobOutput{})
}
