// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Connectivity Test. After you create a test, the reachability analysis is performed as part of the long running operation, which completes when the analysis completes. If the endpoint specifications in `ConnectivityTest` are invalid (for example, containing non-existent resources in the network, or you don't have read permissions to the network configurations of listed projects), then the reachability result returns a value of `UNKNOWN`. If the endpoint specifications in `ConnectivityTest` are incomplete, the reachability result returns a value of AMBIGUOUS. For more information, see the Connectivity Test documentation.
// Auto-naming is currently not supported for this resource.
type ConnectivityTest struct {
	pulumi.CustomResourceState

	// The time the test was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Destination specification of the Connectivity Test. You can use a combination of destination IP address, Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from route information. If the destination you specify is a VM instance and the instance has multiple network interfaces, then you must also specify either a destination IP address or VPC network to identify the destination interface. A reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints that you don't intend to test.
	Destination EndpointResponseOutput `pulumi:"destination"`
	// The display name of a Connectivity Test.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Resource labels to represent user-provided metadata.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test}`
	Name pulumi.StringOutput `pulumi:"name"`
	// The probing details of this test from the latest run, present for applicable tests only. The details are updated when creating a new test, updating an existing test, or triggering a one-time rerun of an existing test.
	ProbingDetails ProbingDetailsResponseOutput `pulumi:"probingDetails"`
	Project        pulumi.StringOutput          `pulumi:"project"`
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The reachability details of this test from the latest run. The details are updated when creating a new test, updating an existing test, or triggering a one-time rerun of an existing test.
	ReachabilityDetails ReachabilityDetailsResponseOutput `pulumi:"reachabilityDetails"`
	// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.
	RelatedProjects pulumi.StringArrayOutput `pulumi:"relatedProjects"`
	// Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information. If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend to test.
	Source EndpointResponseOutput `pulumi:"source"`
	// Required. The logical name of the Connectivity Test in your project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-40 characters. * Must end with a number or a letter. * Must be unique within the customer project
	TestId pulumi.StringOutput `pulumi:"testId"`
	// The time the test's configuration was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewConnectivityTest registers a new resource with the given unique name, arguments, and options.
func NewConnectivityTest(ctx *pulumi.Context,
	name string, args *ConnectivityTestArgs, opts ...pulumi.ResourceOption) (*ConnectivityTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.TestId == nil {
		return nil, errors.New("invalid value for required argument 'TestId'")
	}
	var resource ConnectivityTest
	err := ctx.RegisterResource("google-native:networkmanagement/v1beta1:ConnectivityTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectivityTest gets an existing ConnectivityTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectivityTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectivityTestState, opts ...pulumi.ResourceOption) (*ConnectivityTest, error) {
	var resource ConnectivityTest
	err := ctx.ReadResource("google-native:networkmanagement/v1beta1:ConnectivityTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectivityTest resources.
type connectivityTestState struct {
}

type ConnectivityTestState struct {
}

func (ConnectivityTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectivityTestState)(nil)).Elem()
}

type connectivityTestArgs struct {
	// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
	Description *string `pulumi:"description"`
	// Destination specification of the Connectivity Test. You can use a combination of destination IP address, Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from route information. If the destination you specify is a VM instance and the instance has multiple network interfaces, then you must also specify either a destination IP address or VPC network to identify the destination interface. A reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints that you don't intend to test.
	Destination Endpoint `pulumi:"destination"`
	// Resource labels to represent user-provided metadata.
	Labels map[string]string `pulumi:"labels"`
	// Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test}`
	Name    string  `pulumi:"name"`
	Project *string `pulumi:"project"`
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol *string `pulumi:"protocol"`
	// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.
	RelatedProjects []string `pulumi:"relatedProjects"`
	// Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information. If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend to test.
	Source Endpoint `pulumi:"source"`
	// Required. The logical name of the Connectivity Test in your project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-40 characters. * Must end with a number or a letter. * Must be unique within the customer project
	TestId string `pulumi:"testId"`
}

// The set of arguments for constructing a ConnectivityTest resource.
type ConnectivityTestArgs struct {
	// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
	Description pulumi.StringPtrInput
	// Destination specification of the Connectivity Test. You can use a combination of destination IP address, Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from route information. If the destination you specify is a VM instance and the instance has multiple network interfaces, then you must also specify either a destination IP address or VPC network to identify the destination interface. A reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints that you don't intend to test.
	Destination EndpointInput
	// Resource labels to represent user-provided metadata.
	Labels pulumi.StringMapInput
	// Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test}`
	Name    pulumi.StringInput
	Project pulumi.StringPtrInput
	// IP Protocol of the test. When not provided, "TCP" is assumed.
	Protocol pulumi.StringPtrInput
	// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.
	RelatedProjects pulumi.StringArrayInput
	// Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information. If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend to test.
	Source EndpointInput
	// Required. The logical name of the Connectivity Test in your project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-40 characters. * Must end with a number or a letter. * Must be unique within the customer project
	TestId pulumi.StringInput
}

func (ConnectivityTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectivityTestArgs)(nil)).Elem()
}

type ConnectivityTestInput interface {
	pulumi.Input

	ToConnectivityTestOutput() ConnectivityTestOutput
	ToConnectivityTestOutputWithContext(ctx context.Context) ConnectivityTestOutput
}

func (*ConnectivityTest) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectivityTest)(nil)).Elem()
}

func (i *ConnectivityTest) ToConnectivityTestOutput() ConnectivityTestOutput {
	return i.ToConnectivityTestOutputWithContext(context.Background())
}

func (i *ConnectivityTest) ToConnectivityTestOutputWithContext(ctx context.Context) ConnectivityTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectivityTestOutput)
}

type ConnectivityTestOutput struct{ *pulumi.OutputState }

func (ConnectivityTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectivityTest)(nil)).Elem()
}

func (o ConnectivityTestOutput) ToConnectivityTestOutput() ConnectivityTestOutput {
	return o
}

func (o ConnectivityTestOutput) ToConnectivityTestOutputWithContext(ctx context.Context) ConnectivityTestOutput {
	return o
}

// The time the test was created.
func (o ConnectivityTestOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The user-supplied description of the Connectivity Test. Maximum of 512 characters.
func (o ConnectivityTestOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Destination specification of the Connectivity Test. You can use a combination of destination IP address, Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from route information. If the destination you specify is a VM instance and the instance has multiple network interfaces, then you must also specify either a destination IP address or VPC network to identify the destination interface. A reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints that you don't intend to test.
func (o ConnectivityTestOutput) Destination() EndpointResponseOutput {
	return o.ApplyT(func(v *ConnectivityTest) EndpointResponseOutput { return v.Destination }).(EndpointResponseOutput)
}

// The display name of a Connectivity Test.
func (o ConnectivityTestOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Resource labels to represent user-provided metadata.
func (o ConnectivityTestOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test}`
func (o ConnectivityTestOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The probing details of this test from the latest run, present for applicable tests only. The details are updated when creating a new test, updating an existing test, or triggering a one-time rerun of an existing test.
func (o ConnectivityTestOutput) ProbingDetails() ProbingDetailsResponseOutput {
	return o.ApplyT(func(v *ConnectivityTest) ProbingDetailsResponseOutput { return v.ProbingDetails }).(ProbingDetailsResponseOutput)
}

func (o ConnectivityTestOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// IP Protocol of the test. When not provided, "TCP" is assumed.
func (o ConnectivityTestOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The reachability details of this test from the latest run. The details are updated when creating a new test, updating an existing test, or triggering a one-time rerun of an existing test.
func (o ConnectivityTestOutput) ReachabilityDetails() ReachabilityDetailsResponseOutput {
	return o.ApplyT(func(v *ConnectivityTest) ReachabilityDetailsResponseOutput { return v.ReachabilityDetails }).(ReachabilityDetailsResponseOutput)
}

// Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.
func (o ConnectivityTestOutput) RelatedProjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringArrayOutput { return v.RelatedProjects }).(pulumi.StringArrayOutput)
}

// Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information. If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend to test.
func (o ConnectivityTestOutput) Source() EndpointResponseOutput {
	return o.ApplyT(func(v *ConnectivityTest) EndpointResponseOutput { return v.Source }).(EndpointResponseOutput)
}

// Required. The logical name of the Connectivity Test in your project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-40 characters. * Must end with a number or a letter. * Must be unique within the customer project
func (o ConnectivityTestOutput) TestId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringOutput { return v.TestId }).(pulumi.StringOutput)
}

// The time the test's configuration was updated.
func (o ConnectivityTestOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectivityTest) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectivityTestInput)(nil)).Elem(), &ConnectivityTest{})
	pulumi.RegisterOutputType(ConnectivityTestOutput{})
}
