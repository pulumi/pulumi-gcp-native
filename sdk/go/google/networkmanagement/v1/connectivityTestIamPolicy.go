// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type ConnectivityTestIamPolicy struct {
	pulumi.CustomResourceState
}

// NewConnectivityTestIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewConnectivityTestIamPolicy(ctx *pulumi.Context,
	name string, args *ConnectivityTestIamPolicyArgs, opts ...pulumi.ResourceOption) (*ConnectivityTestIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectivityTestsId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectivityTestsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource ConnectivityTestIamPolicy
	err := ctx.RegisterResource("google-cloud:networkmanagement/v1:ConnectivityTestIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectivityTestIamPolicy gets an existing ConnectivityTestIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectivityTestIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectivityTestIamPolicyState, opts ...pulumi.ResourceOption) (*ConnectivityTestIamPolicy, error) {
	var resource ConnectivityTestIamPolicy
	err := ctx.ReadResource("google-cloud:networkmanagement/v1:ConnectivityTestIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectivityTestIamPolicy resources.
type connectivityTestIamPolicyState struct {
}

type ConnectivityTestIamPolicyState struct {
}

func (ConnectivityTestIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectivityTestIamPolicyState)(nil)).Elem()
}

type connectivityTestIamPolicyArgs struct {
	ConnectivityTestsId string `pulumi:"connectivityTestsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a ConnectivityTestIamPolicy resource.
type ConnectivityTestIamPolicyArgs struct {
	ConnectivityTestsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (ConnectivityTestIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectivityTestIamPolicyArgs)(nil)).Elem()
}

type ConnectivityTestIamPolicyInput interface {
	pulumi.Input

	ToConnectivityTestIamPolicyOutput() ConnectivityTestIamPolicyOutput
	ToConnectivityTestIamPolicyOutputWithContext(ctx context.Context) ConnectivityTestIamPolicyOutput
}

func (*ConnectivityTestIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityTestIamPolicy)(nil))
}

func (i *ConnectivityTestIamPolicy) ToConnectivityTestIamPolicyOutput() ConnectivityTestIamPolicyOutput {
	return i.ToConnectivityTestIamPolicyOutputWithContext(context.Background())
}

func (i *ConnectivityTestIamPolicy) ToConnectivityTestIamPolicyOutputWithContext(ctx context.Context) ConnectivityTestIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectivityTestIamPolicyOutput)
}

type ConnectivityTestIamPolicyOutput struct {
	*pulumi.OutputState
}

func (ConnectivityTestIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityTestIamPolicy)(nil))
}

func (o ConnectivityTestIamPolicyOutput) ToConnectivityTestIamPolicyOutput() ConnectivityTestIamPolicyOutput {
	return o
}

func (o ConnectivityTestIamPolicyOutput) ToConnectivityTestIamPolicyOutputWithContext(ctx context.Context) ConnectivityTestIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConnectivityTestIamPolicyOutput{})
}
