// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Details of the final state "abort" and associated resource.
type AbortInfo struct {
	// Causes that the analysis is aborted.
	Cause *string `pulumi:"cause"`
	// URI of the resource that caused the abort.
	ResourceUri *string `pulumi:"resourceUri"`
}

// AbortInfoInput is an input type that accepts AbortInfoArgs and AbortInfoOutput values.
// You can construct a concrete instance of `AbortInfoInput` via:
//
//          AbortInfoArgs{...}
type AbortInfoInput interface {
	pulumi.Input

	ToAbortInfoOutput() AbortInfoOutput
	ToAbortInfoOutputWithContext(context.Context) AbortInfoOutput
}

// Details of the final state "abort" and associated resource.
type AbortInfoArgs struct {
	// Causes that the analysis is aborted.
	Cause pulumi.StringPtrInput `pulumi:"cause"`
	// URI of the resource that caused the abort.
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
}

func (AbortInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AbortInfo)(nil)).Elem()
}

func (i AbortInfoArgs) ToAbortInfoOutput() AbortInfoOutput {
	return i.ToAbortInfoOutputWithContext(context.Background())
}

func (i AbortInfoArgs) ToAbortInfoOutputWithContext(ctx context.Context) AbortInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AbortInfoOutput)
}

func (i AbortInfoArgs) ToAbortInfoPtrOutput() AbortInfoPtrOutput {
	return i.ToAbortInfoPtrOutputWithContext(context.Background())
}

func (i AbortInfoArgs) ToAbortInfoPtrOutputWithContext(ctx context.Context) AbortInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AbortInfoOutput).ToAbortInfoPtrOutputWithContext(ctx)
}

// AbortInfoPtrInput is an input type that accepts AbortInfoArgs, AbortInfoPtr and AbortInfoPtrOutput values.
// You can construct a concrete instance of `AbortInfoPtrInput` via:
//
//          AbortInfoArgs{...}
//
//  or:
//
//          nil
type AbortInfoPtrInput interface {
	pulumi.Input

	ToAbortInfoPtrOutput() AbortInfoPtrOutput
	ToAbortInfoPtrOutputWithContext(context.Context) AbortInfoPtrOutput
}

type abortInfoPtrType AbortInfoArgs

func AbortInfoPtr(v *AbortInfoArgs) AbortInfoPtrInput {
	return (*abortInfoPtrType)(v)
}

func (*abortInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AbortInfo)(nil)).Elem()
}

func (i *abortInfoPtrType) ToAbortInfoPtrOutput() AbortInfoPtrOutput {
	return i.ToAbortInfoPtrOutputWithContext(context.Background())
}

func (i *abortInfoPtrType) ToAbortInfoPtrOutputWithContext(ctx context.Context) AbortInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AbortInfoPtrOutput)
}

// Details of the final state "abort" and associated resource.
type AbortInfoOutput struct{ *pulumi.OutputState }

func (AbortInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AbortInfo)(nil)).Elem()
}

func (o AbortInfoOutput) ToAbortInfoOutput() AbortInfoOutput {
	return o
}

func (o AbortInfoOutput) ToAbortInfoOutputWithContext(ctx context.Context) AbortInfoOutput {
	return o
}

func (o AbortInfoOutput) ToAbortInfoPtrOutput() AbortInfoPtrOutput {
	return o.ToAbortInfoPtrOutputWithContext(context.Background())
}

func (o AbortInfoOutput) ToAbortInfoPtrOutputWithContext(ctx context.Context) AbortInfoPtrOutput {
	return o.ApplyT(func(v AbortInfo) *AbortInfo {
		return &v
	}).(AbortInfoPtrOutput)
}

// Causes that the analysis is aborted.
func (o AbortInfoOutput) Cause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AbortInfo) *string { return v.Cause }).(pulumi.StringPtrOutput)
}

// URI of the resource that caused the abort.
func (o AbortInfoOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AbortInfo) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type AbortInfoPtrOutput struct{ *pulumi.OutputState }

func (AbortInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AbortInfo)(nil)).Elem()
}

func (o AbortInfoPtrOutput) ToAbortInfoPtrOutput() AbortInfoPtrOutput {
	return o
}

func (o AbortInfoPtrOutput) ToAbortInfoPtrOutputWithContext(ctx context.Context) AbortInfoPtrOutput {
	return o
}

func (o AbortInfoPtrOutput) Elem() AbortInfoOutput {
	return o.ApplyT(func(v *AbortInfo) AbortInfo { return *v }).(AbortInfoOutput)
}

// Causes that the analysis is aborted.
func (o AbortInfoPtrOutput) Cause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AbortInfo) *string {
		if v == nil {
			return nil
		}
		return v.Cause
	}).(pulumi.StringPtrOutput)
}

// URI of the resource that caused the abort.
func (o AbortInfoPtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AbortInfo) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Details of the final state "deliver" and associated resource.
type DeliverInfo struct {
	// URI of the resource that the packet is delivered to.
	ResourceUri *string `pulumi:"resourceUri"`
	// Target type where the packet is delivered to.
	Target *string `pulumi:"target"`
}

// DeliverInfoInput is an input type that accepts DeliverInfoArgs and DeliverInfoOutput values.
// You can construct a concrete instance of `DeliverInfoInput` via:
//
//          DeliverInfoArgs{...}
type DeliverInfoInput interface {
	pulumi.Input

	ToDeliverInfoOutput() DeliverInfoOutput
	ToDeliverInfoOutputWithContext(context.Context) DeliverInfoOutput
}

// Details of the final state "deliver" and associated resource.
type DeliverInfoArgs struct {
	// URI of the resource that the packet is delivered to.
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
	// Target type where the packet is delivered to.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (DeliverInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliverInfo)(nil)).Elem()
}

func (i DeliverInfoArgs) ToDeliverInfoOutput() DeliverInfoOutput {
	return i.ToDeliverInfoOutputWithContext(context.Background())
}

func (i DeliverInfoArgs) ToDeliverInfoOutputWithContext(ctx context.Context) DeliverInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliverInfoOutput)
}

func (i DeliverInfoArgs) ToDeliverInfoPtrOutput() DeliverInfoPtrOutput {
	return i.ToDeliverInfoPtrOutputWithContext(context.Background())
}

func (i DeliverInfoArgs) ToDeliverInfoPtrOutputWithContext(ctx context.Context) DeliverInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliverInfoOutput).ToDeliverInfoPtrOutputWithContext(ctx)
}

// DeliverInfoPtrInput is an input type that accepts DeliverInfoArgs, DeliverInfoPtr and DeliverInfoPtrOutput values.
// You can construct a concrete instance of `DeliverInfoPtrInput` via:
//
//          DeliverInfoArgs{...}
//
//  or:
//
//          nil
type DeliverInfoPtrInput interface {
	pulumi.Input

	ToDeliverInfoPtrOutput() DeliverInfoPtrOutput
	ToDeliverInfoPtrOutputWithContext(context.Context) DeliverInfoPtrOutput
}

type deliverInfoPtrType DeliverInfoArgs

func DeliverInfoPtr(v *DeliverInfoArgs) DeliverInfoPtrInput {
	return (*deliverInfoPtrType)(v)
}

func (*deliverInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliverInfo)(nil)).Elem()
}

func (i *deliverInfoPtrType) ToDeliverInfoPtrOutput() DeliverInfoPtrOutput {
	return i.ToDeliverInfoPtrOutputWithContext(context.Background())
}

func (i *deliverInfoPtrType) ToDeliverInfoPtrOutputWithContext(ctx context.Context) DeliverInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliverInfoPtrOutput)
}

// Details of the final state "deliver" and associated resource.
type DeliverInfoOutput struct{ *pulumi.OutputState }

func (DeliverInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliverInfo)(nil)).Elem()
}

func (o DeliverInfoOutput) ToDeliverInfoOutput() DeliverInfoOutput {
	return o
}

func (o DeliverInfoOutput) ToDeliverInfoOutputWithContext(ctx context.Context) DeliverInfoOutput {
	return o
}

func (o DeliverInfoOutput) ToDeliverInfoPtrOutput() DeliverInfoPtrOutput {
	return o.ToDeliverInfoPtrOutputWithContext(context.Background())
}

func (o DeliverInfoOutput) ToDeliverInfoPtrOutputWithContext(ctx context.Context) DeliverInfoPtrOutput {
	return o.ApplyT(func(v DeliverInfo) *DeliverInfo {
		return &v
	}).(DeliverInfoPtrOutput)
}

// URI of the resource that the packet is delivered to.
func (o DeliverInfoOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeliverInfo) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// Target type where the packet is delivered to.
func (o DeliverInfoOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeliverInfo) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type DeliverInfoPtrOutput struct{ *pulumi.OutputState }

func (DeliverInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeliverInfo)(nil)).Elem()
}

func (o DeliverInfoPtrOutput) ToDeliverInfoPtrOutput() DeliverInfoPtrOutput {
	return o
}

func (o DeliverInfoPtrOutput) ToDeliverInfoPtrOutputWithContext(ctx context.Context) DeliverInfoPtrOutput {
	return o
}

func (o DeliverInfoPtrOutput) Elem() DeliverInfoOutput {
	return o.ApplyT(func(v *DeliverInfo) DeliverInfo { return *v }).(DeliverInfoOutput)
}

// URI of the resource that the packet is delivered to.
func (o DeliverInfoPtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeliverInfo) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// Target type where the packet is delivered to.
func (o DeliverInfoPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeliverInfo) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Details of the final state "drop" and associated resource.
type DropInfo struct {
	// Cause that the packet is dropped.
	Cause *string `pulumi:"cause"`
	// URI of the resource that caused the drop.
	ResourceUri *string `pulumi:"resourceUri"`
}

// DropInfoInput is an input type that accepts DropInfoArgs and DropInfoOutput values.
// You can construct a concrete instance of `DropInfoInput` via:
//
//          DropInfoArgs{...}
type DropInfoInput interface {
	pulumi.Input

	ToDropInfoOutput() DropInfoOutput
	ToDropInfoOutputWithContext(context.Context) DropInfoOutput
}

// Details of the final state "drop" and associated resource.
type DropInfoArgs struct {
	// Cause that the packet is dropped.
	Cause pulumi.StringPtrInput `pulumi:"cause"`
	// URI of the resource that caused the drop.
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
}

func (DropInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DropInfo)(nil)).Elem()
}

func (i DropInfoArgs) ToDropInfoOutput() DropInfoOutput {
	return i.ToDropInfoOutputWithContext(context.Background())
}

func (i DropInfoArgs) ToDropInfoOutputWithContext(ctx context.Context) DropInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropInfoOutput)
}

func (i DropInfoArgs) ToDropInfoPtrOutput() DropInfoPtrOutput {
	return i.ToDropInfoPtrOutputWithContext(context.Background())
}

func (i DropInfoArgs) ToDropInfoPtrOutputWithContext(ctx context.Context) DropInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropInfoOutput).ToDropInfoPtrOutputWithContext(ctx)
}

// DropInfoPtrInput is an input type that accepts DropInfoArgs, DropInfoPtr and DropInfoPtrOutput values.
// You can construct a concrete instance of `DropInfoPtrInput` via:
//
//          DropInfoArgs{...}
//
//  or:
//
//          nil
type DropInfoPtrInput interface {
	pulumi.Input

	ToDropInfoPtrOutput() DropInfoPtrOutput
	ToDropInfoPtrOutputWithContext(context.Context) DropInfoPtrOutput
}

type dropInfoPtrType DropInfoArgs

func DropInfoPtr(v *DropInfoArgs) DropInfoPtrInput {
	return (*dropInfoPtrType)(v)
}

func (*dropInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DropInfo)(nil)).Elem()
}

func (i *dropInfoPtrType) ToDropInfoPtrOutput() DropInfoPtrOutput {
	return i.ToDropInfoPtrOutputWithContext(context.Background())
}

func (i *dropInfoPtrType) ToDropInfoPtrOutputWithContext(ctx context.Context) DropInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropInfoPtrOutput)
}

// Details of the final state "drop" and associated resource.
type DropInfoOutput struct{ *pulumi.OutputState }

func (DropInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DropInfo)(nil)).Elem()
}

func (o DropInfoOutput) ToDropInfoOutput() DropInfoOutput {
	return o
}

func (o DropInfoOutput) ToDropInfoOutputWithContext(ctx context.Context) DropInfoOutput {
	return o
}

func (o DropInfoOutput) ToDropInfoPtrOutput() DropInfoPtrOutput {
	return o.ToDropInfoPtrOutputWithContext(context.Background())
}

func (o DropInfoOutput) ToDropInfoPtrOutputWithContext(ctx context.Context) DropInfoPtrOutput {
	return o.ApplyT(func(v DropInfo) *DropInfo {
		return &v
	}).(DropInfoPtrOutput)
}

// Cause that the packet is dropped.
func (o DropInfoOutput) Cause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DropInfo) *string { return v.Cause }).(pulumi.StringPtrOutput)
}

// URI of the resource that caused the drop.
func (o DropInfoOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DropInfo) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type DropInfoPtrOutput struct{ *pulumi.OutputState }

func (DropInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropInfo)(nil)).Elem()
}

func (o DropInfoPtrOutput) ToDropInfoPtrOutput() DropInfoPtrOutput {
	return o
}

func (o DropInfoPtrOutput) ToDropInfoPtrOutputWithContext(ctx context.Context) DropInfoPtrOutput {
	return o
}

func (o DropInfoPtrOutput) Elem() DropInfoOutput {
	return o.ApplyT(func(v *DropInfo) DropInfo { return *v }).(DropInfoOutput)
}

// Cause that the packet is dropped.
func (o DropInfoPtrOutput) Cause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DropInfo) *string {
		if v == nil {
			return nil
		}
		return v.Cause
	}).(pulumi.StringPtrOutput)
}

// URI of the resource that caused the drop.
func (o DropInfoPtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DropInfo) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// Source or destination of the Connectivity Test.
type Endpoint struct {
	// A Compute Engine instance URI.
	Instance *string `pulumi:"instance"`
	// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
	IpAddress *string `pulumi:"ipAddress"`
	// A Compute Engine network URI.
	Network *string `pulumi:"network"`
	// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
	NetworkType *string `pulumi:"networkType"`
	// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
	Port *int `pulumi:"port"`
	// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
	ProjectId *string `pulumi:"projectId"`
}

// EndpointInput is an input type that accepts EndpointArgs and EndpointOutput values.
// You can construct a concrete instance of `EndpointInput` via:
//
//          EndpointArgs{...}
type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(context.Context) EndpointOutput
}

// Source or destination of the Connectivity Test.
type EndpointArgs struct {
	// A Compute Engine instance URI.
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// A Compute Engine network URI.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (i EndpointArgs) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i EndpointArgs) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

func (i EndpointArgs) ToEndpointPtrOutput() EndpointPtrOutput {
	return i.ToEndpointPtrOutputWithContext(context.Background())
}

func (i EndpointArgs) ToEndpointPtrOutputWithContext(ctx context.Context) EndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput).ToEndpointPtrOutputWithContext(ctx)
}

// EndpointPtrInput is an input type that accepts EndpointArgs, EndpointPtr and EndpointPtrOutput values.
// You can construct a concrete instance of `EndpointPtrInput` via:
//
//          EndpointArgs{...}
//
//  or:
//
//          nil
type EndpointPtrInput interface {
	pulumi.Input

	ToEndpointPtrOutput() EndpointPtrOutput
	ToEndpointPtrOutputWithContext(context.Context) EndpointPtrOutput
}

type endpointPtrType EndpointArgs

func EndpointPtr(v *EndpointArgs) EndpointPtrInput {
	return (*endpointPtrType)(v)
}

func (*endpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *endpointPtrType) ToEndpointPtrOutput() EndpointPtrOutput {
	return i.ToEndpointPtrOutputWithContext(context.Background())
}

func (i *endpointPtrType) ToEndpointPtrOutputWithContext(ctx context.Context) EndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPtrOutput)
}

// Source or destination of the Connectivity Test.
type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointPtrOutput() EndpointPtrOutput {
	return o.ToEndpointPtrOutputWithContext(context.Background())
}

func (o EndpointOutput) ToEndpointPtrOutputWithContext(ctx context.Context) EndpointPtrOutput {
	return o.ApplyT(func(v Endpoint) *Endpoint {
		return &v
	}).(EndpointPtrOutput)
}

// A Compute Engine instance URI.
func (o EndpointOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
func (o EndpointOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// A Compute Engine network URI.
func (o EndpointOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
func (o EndpointOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
func (o EndpointOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Endpoint) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
func (o EndpointOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

type EndpointPtrOutput struct{ *pulumi.OutputState }

func (EndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointPtrOutput) ToEndpointPtrOutput() EndpointPtrOutput {
	return o
}

func (o EndpointPtrOutput) ToEndpointPtrOutputWithContext(ctx context.Context) EndpointPtrOutput {
	return o
}

func (o EndpointPtrOutput) Elem() EndpointOutput {
	return o.ApplyT(func(v *Endpoint) Endpoint { return *v }).(EndpointOutput)
}

// A Compute Engine instance URI.
func (o EndpointPtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
func (o EndpointPtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// A Compute Engine network URI.
func (o EndpointPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
func (o EndpointPtrOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.NetworkType
	}).(pulumi.StringPtrOutput)
}

// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
func (o EndpointPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Endpoint) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
func (o EndpointPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
type EndpointInfo struct {
	// Destination IP address.
	DestinationIp *string `pulumi:"destinationIp"`
	// URI of the network where this packet is sent to.
	DestinationNetworkUri *string `pulumi:"destinationNetworkUri"`
	// Destination port. Only valid when protocol is TCP or UDP.
	DestinationPort *int `pulumi:"destinationPort"`
	// IP protocol in string format, for example: "TCP", "UDP", "ICMP".
	Protocol *string `pulumi:"protocol"`
	// Source IP address.
	SourceIp *string `pulumi:"sourceIp"`
	// URI of the network where this packet originates from.
	SourceNetworkUri *string `pulumi:"sourceNetworkUri"`
	// Source port. Only valid when protocol is TCP or UDP.
	SourcePort *int `pulumi:"sourcePort"`
}

// EndpointInfoInput is an input type that accepts EndpointInfoArgs and EndpointInfoOutput values.
// You can construct a concrete instance of `EndpointInfoInput` via:
//
//          EndpointInfoArgs{...}
type EndpointInfoInput interface {
	pulumi.Input

	ToEndpointInfoOutput() EndpointInfoOutput
	ToEndpointInfoOutputWithContext(context.Context) EndpointInfoOutput
}

// For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
type EndpointInfoArgs struct {
	// Destination IP address.
	DestinationIp pulumi.StringPtrInput `pulumi:"destinationIp"`
	// URI of the network where this packet is sent to.
	DestinationNetworkUri pulumi.StringPtrInput `pulumi:"destinationNetworkUri"`
	// Destination port. Only valid when protocol is TCP or UDP.
	DestinationPort pulumi.IntPtrInput `pulumi:"destinationPort"`
	// IP protocol in string format, for example: "TCP", "UDP", "ICMP".
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Source IP address.
	SourceIp pulumi.StringPtrInput `pulumi:"sourceIp"`
	// URI of the network where this packet originates from.
	SourceNetworkUri pulumi.StringPtrInput `pulumi:"sourceNetworkUri"`
	// Source port. Only valid when protocol is TCP or UDP.
	SourcePort pulumi.IntPtrInput `pulumi:"sourcePort"`
}

func (EndpointInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointInfo)(nil)).Elem()
}

func (i EndpointInfoArgs) ToEndpointInfoOutput() EndpointInfoOutput {
	return i.ToEndpointInfoOutputWithContext(context.Background())
}

func (i EndpointInfoArgs) ToEndpointInfoOutputWithContext(ctx context.Context) EndpointInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointInfoOutput)
}

func (i EndpointInfoArgs) ToEndpointInfoPtrOutput() EndpointInfoPtrOutput {
	return i.ToEndpointInfoPtrOutputWithContext(context.Background())
}

func (i EndpointInfoArgs) ToEndpointInfoPtrOutputWithContext(ctx context.Context) EndpointInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointInfoOutput).ToEndpointInfoPtrOutputWithContext(ctx)
}

// EndpointInfoPtrInput is an input type that accepts EndpointInfoArgs, EndpointInfoPtr and EndpointInfoPtrOutput values.
// You can construct a concrete instance of `EndpointInfoPtrInput` via:
//
//          EndpointInfoArgs{...}
//
//  or:
//
//          nil
type EndpointInfoPtrInput interface {
	pulumi.Input

	ToEndpointInfoPtrOutput() EndpointInfoPtrOutput
	ToEndpointInfoPtrOutputWithContext(context.Context) EndpointInfoPtrOutput
}

type endpointInfoPtrType EndpointInfoArgs

func EndpointInfoPtr(v *EndpointInfoArgs) EndpointInfoPtrInput {
	return (*endpointInfoPtrType)(v)
}

func (*endpointInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointInfo)(nil)).Elem()
}

func (i *endpointInfoPtrType) ToEndpointInfoPtrOutput() EndpointInfoPtrOutput {
	return i.ToEndpointInfoPtrOutputWithContext(context.Background())
}

func (i *endpointInfoPtrType) ToEndpointInfoPtrOutputWithContext(ctx context.Context) EndpointInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointInfoPtrOutput)
}

// For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
type EndpointInfoOutput struct{ *pulumi.OutputState }

func (EndpointInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointInfo)(nil)).Elem()
}

func (o EndpointInfoOutput) ToEndpointInfoOutput() EndpointInfoOutput {
	return o
}

func (o EndpointInfoOutput) ToEndpointInfoOutputWithContext(ctx context.Context) EndpointInfoOutput {
	return o
}

func (o EndpointInfoOutput) ToEndpointInfoPtrOutput() EndpointInfoPtrOutput {
	return o.ToEndpointInfoPtrOutputWithContext(context.Background())
}

func (o EndpointInfoOutput) ToEndpointInfoPtrOutputWithContext(ctx context.Context) EndpointInfoPtrOutput {
	return o.ApplyT(func(v EndpointInfo) *EndpointInfo {
		return &v
	}).(EndpointInfoPtrOutput)
}

// Destination IP address.
func (o EndpointInfoOutput) DestinationIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointInfo) *string { return v.DestinationIp }).(pulumi.StringPtrOutput)
}

// URI of the network where this packet is sent to.
func (o EndpointInfoOutput) DestinationNetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointInfo) *string { return v.DestinationNetworkUri }).(pulumi.StringPtrOutput)
}

// Destination port. Only valid when protocol is TCP or UDP.
func (o EndpointInfoOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointInfo) *int { return v.DestinationPort }).(pulumi.IntPtrOutput)
}

// IP protocol in string format, for example: "TCP", "UDP", "ICMP".
func (o EndpointInfoOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointInfo) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Source IP address.
func (o EndpointInfoOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointInfo) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

// URI of the network where this packet originates from.
func (o EndpointInfoOutput) SourceNetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointInfo) *string { return v.SourceNetworkUri }).(pulumi.StringPtrOutput)
}

// Source port. Only valid when protocol is TCP or UDP.
func (o EndpointInfoOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointInfo) *int { return v.SourcePort }).(pulumi.IntPtrOutput)
}

type EndpointInfoPtrOutput struct{ *pulumi.OutputState }

func (EndpointInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointInfo)(nil)).Elem()
}

func (o EndpointInfoPtrOutput) ToEndpointInfoPtrOutput() EndpointInfoPtrOutput {
	return o
}

func (o EndpointInfoPtrOutput) ToEndpointInfoPtrOutputWithContext(ctx context.Context) EndpointInfoPtrOutput {
	return o
}

func (o EndpointInfoPtrOutput) Elem() EndpointInfoOutput {
	return o.ApplyT(func(v *EndpointInfo) EndpointInfo { return *v }).(EndpointInfoOutput)
}

// Destination IP address.
func (o EndpointInfoPtrOutput) DestinationIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestinationIp
	}).(pulumi.StringPtrOutput)
}

// URI of the network where this packet is sent to.
func (o EndpointInfoPtrOutput) DestinationNetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestinationNetworkUri
	}).(pulumi.StringPtrOutput)
}

// Destination port. Only valid when protocol is TCP or UDP.
func (o EndpointInfoPtrOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointInfo) *int {
		if v == nil {
			return nil
		}
		return v.DestinationPort
	}).(pulumi.IntPtrOutput)
}

// IP protocol in string format, for example: "TCP", "UDP", "ICMP".
func (o EndpointInfoPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointInfo) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Source IP address.
func (o EndpointInfoPtrOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceIp
	}).(pulumi.StringPtrOutput)
}

// URI of the network where this packet originates from.
func (o EndpointInfoPtrOutput) SourceNetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceNetworkUri
	}).(pulumi.StringPtrOutput)
}

// Source port. Only valid when protocol is TCP or UDP.
func (o EndpointInfoPtrOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointInfo) *int {
		if v == nil {
			return nil
		}
		return v.SourcePort
	}).(pulumi.IntPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
type FirewallInfo struct {
	// Possible values: ALLOW, DENY
	Action *string `pulumi:"action"`
	// Possible values: INGRESS, EGRESS
	Direction *string `pulumi:"direction"`
	// The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
	DisplayName *string `pulumi:"displayName"`
	// The firewall rule's type.
	FirewallRuleType *string `pulumi:"firewallRuleType"`
	// The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
	NetworkUri *string `pulumi:"networkUri"`
	// The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
	Policy *string `pulumi:"policy"`
	// The priority of the firewall rule.
	Priority *int `pulumi:"priority"`
	// The target service accounts specified by the firewall rule.
	TargetServiceAccounts []string `pulumi:"targetServiceAccounts"`
	// The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
	TargetTags []string `pulumi:"targetTags"`
	// The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
	Uri *string `pulumi:"uri"`
}

// FirewallInfoInput is an input type that accepts FirewallInfoArgs and FirewallInfoOutput values.
// You can construct a concrete instance of `FirewallInfoInput` via:
//
//          FirewallInfoArgs{...}
type FirewallInfoInput interface {
	pulumi.Input

	ToFirewallInfoOutput() FirewallInfoOutput
	ToFirewallInfoOutputWithContext(context.Context) FirewallInfoOutput
}

// For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
type FirewallInfoArgs struct {
	// Possible values: ALLOW, DENY
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Possible values: INGRESS, EGRESS
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The firewall rule's type.
	FirewallRuleType pulumi.StringPtrInput `pulumi:"firewallRuleType"`
	// The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
	NetworkUri pulumi.StringPtrInput `pulumi:"networkUri"`
	// The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// The priority of the firewall rule.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The target service accounts specified by the firewall rule.
	TargetServiceAccounts pulumi.StringArrayInput `pulumi:"targetServiceAccounts"`
	// The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
	TargetTags pulumi.StringArrayInput `pulumi:"targetTags"`
	// The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (FirewallInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallInfo)(nil)).Elem()
}

func (i FirewallInfoArgs) ToFirewallInfoOutput() FirewallInfoOutput {
	return i.ToFirewallInfoOutputWithContext(context.Background())
}

func (i FirewallInfoArgs) ToFirewallInfoOutputWithContext(ctx context.Context) FirewallInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInfoOutput)
}

func (i FirewallInfoArgs) ToFirewallInfoPtrOutput() FirewallInfoPtrOutput {
	return i.ToFirewallInfoPtrOutputWithContext(context.Background())
}

func (i FirewallInfoArgs) ToFirewallInfoPtrOutputWithContext(ctx context.Context) FirewallInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInfoOutput).ToFirewallInfoPtrOutputWithContext(ctx)
}

// FirewallInfoPtrInput is an input type that accepts FirewallInfoArgs, FirewallInfoPtr and FirewallInfoPtrOutput values.
// You can construct a concrete instance of `FirewallInfoPtrInput` via:
//
//          FirewallInfoArgs{...}
//
//  or:
//
//          nil
type FirewallInfoPtrInput interface {
	pulumi.Input

	ToFirewallInfoPtrOutput() FirewallInfoPtrOutput
	ToFirewallInfoPtrOutputWithContext(context.Context) FirewallInfoPtrOutput
}

type firewallInfoPtrType FirewallInfoArgs

func FirewallInfoPtr(v *FirewallInfoArgs) FirewallInfoPtrInput {
	return (*firewallInfoPtrType)(v)
}

func (*firewallInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallInfo)(nil)).Elem()
}

func (i *firewallInfoPtrType) ToFirewallInfoPtrOutput() FirewallInfoPtrOutput {
	return i.ToFirewallInfoPtrOutputWithContext(context.Background())
}

func (i *firewallInfoPtrType) ToFirewallInfoPtrOutputWithContext(ctx context.Context) FirewallInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInfoPtrOutput)
}

// For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
type FirewallInfoOutput struct{ *pulumi.OutputState }

func (FirewallInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallInfo)(nil)).Elem()
}

func (o FirewallInfoOutput) ToFirewallInfoOutput() FirewallInfoOutput {
	return o
}

func (o FirewallInfoOutput) ToFirewallInfoOutputWithContext(ctx context.Context) FirewallInfoOutput {
	return o
}

func (o FirewallInfoOutput) ToFirewallInfoPtrOutput() FirewallInfoPtrOutput {
	return o.ToFirewallInfoPtrOutputWithContext(context.Background())
}

func (o FirewallInfoOutput) ToFirewallInfoPtrOutputWithContext(ctx context.Context) FirewallInfoPtrOutput {
	return o.ApplyT(func(v FirewallInfo) *FirewallInfo {
		return &v
	}).(FirewallInfoPtrOutput)
}

// Possible values: ALLOW, DENY
func (o FirewallInfoOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallInfo) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Possible values: INGRESS, EGRESS
func (o FirewallInfoOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallInfo) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
func (o FirewallInfoOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallInfo) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The firewall rule's type.
func (o FirewallInfoOutput) FirewallRuleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallInfo) *string { return v.FirewallRuleType }).(pulumi.StringPtrOutput)
}

// The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
func (o FirewallInfoOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallInfo) *string { return v.NetworkUri }).(pulumi.StringPtrOutput)
}

// The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
func (o FirewallInfoOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallInfo) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// The priority of the firewall rule.
func (o FirewallInfoOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallInfo) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The target service accounts specified by the firewall rule.
func (o FirewallInfoOutput) TargetServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallInfo) []string { return v.TargetServiceAccounts }).(pulumi.StringArrayOutput)
}

// The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
func (o FirewallInfoOutput) TargetTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallInfo) []string { return v.TargetTags }).(pulumi.StringArrayOutput)
}

// The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
func (o FirewallInfoOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallInfo) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type FirewallInfoPtrOutput struct{ *pulumi.OutputState }

func (FirewallInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallInfo)(nil)).Elem()
}

func (o FirewallInfoPtrOutput) ToFirewallInfoPtrOutput() FirewallInfoPtrOutput {
	return o
}

func (o FirewallInfoPtrOutput) ToFirewallInfoPtrOutputWithContext(ctx context.Context) FirewallInfoPtrOutput {
	return o
}

func (o FirewallInfoPtrOutput) Elem() FirewallInfoOutput {
	return o.ApplyT(func(v *FirewallInfo) FirewallInfo { return *v }).(FirewallInfoOutput)
}

// Possible values: ALLOW, DENY
func (o FirewallInfoPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInfo) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Possible values: INGRESS, EGRESS
func (o FirewallInfoPtrOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInfo) *string {
		if v == nil {
			return nil
		}
		return v.Direction
	}).(pulumi.StringPtrOutput)
}

// The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
func (o FirewallInfoPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInfo) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The firewall rule's type.
func (o FirewallInfoPtrOutput) FirewallRuleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInfo) *string {
		if v == nil {
			return nil
		}
		return v.FirewallRuleType
	}).(pulumi.StringPtrOutput)
}

// The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
func (o FirewallInfoPtrOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInfo) *string {
		if v == nil {
			return nil
		}
		return v.NetworkUri
	}).(pulumi.StringPtrOutput)
}

// The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
func (o FirewallInfoPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInfo) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// The priority of the firewall rule.
func (o FirewallInfoPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallInfo) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// The target service accounts specified by the firewall rule.
func (o FirewallInfoPtrOutput) TargetServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallInfo) []string {
		if v == nil {
			return nil
		}
		return v.TargetServiceAccounts
	}).(pulumi.StringArrayOutput)
}

// The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
func (o FirewallInfoPtrOutput) TargetTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallInfo) []string {
		if v == nil {
			return nil
		}
		return v.TargetTags
	}).(pulumi.StringArrayOutput)
}

// The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
func (o FirewallInfoPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInfo) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Details of the final state "forward" and associated resource.
type ForwardInfo struct {
	// URI of the resource that the packet is forwarded to.
	ResourceUri *string `pulumi:"resourceUri"`
	// Target type where this packet is forwarded to.
	Target *string `pulumi:"target"`
}

// ForwardInfoInput is an input type that accepts ForwardInfoArgs and ForwardInfoOutput values.
// You can construct a concrete instance of `ForwardInfoInput` via:
//
//          ForwardInfoArgs{...}
type ForwardInfoInput interface {
	pulumi.Input

	ToForwardInfoOutput() ForwardInfoOutput
	ToForwardInfoOutputWithContext(context.Context) ForwardInfoOutput
}

// Details of the final state "forward" and associated resource.
type ForwardInfoArgs struct {
	// URI of the resource that the packet is forwarded to.
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
	// Target type where this packet is forwarded to.
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (ForwardInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardInfo)(nil)).Elem()
}

func (i ForwardInfoArgs) ToForwardInfoOutput() ForwardInfoOutput {
	return i.ToForwardInfoOutputWithContext(context.Background())
}

func (i ForwardInfoArgs) ToForwardInfoOutputWithContext(ctx context.Context) ForwardInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardInfoOutput)
}

func (i ForwardInfoArgs) ToForwardInfoPtrOutput() ForwardInfoPtrOutput {
	return i.ToForwardInfoPtrOutputWithContext(context.Background())
}

func (i ForwardInfoArgs) ToForwardInfoPtrOutputWithContext(ctx context.Context) ForwardInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardInfoOutput).ToForwardInfoPtrOutputWithContext(ctx)
}

// ForwardInfoPtrInput is an input type that accepts ForwardInfoArgs, ForwardInfoPtr and ForwardInfoPtrOutput values.
// You can construct a concrete instance of `ForwardInfoPtrInput` via:
//
//          ForwardInfoArgs{...}
//
//  or:
//
//          nil
type ForwardInfoPtrInput interface {
	pulumi.Input

	ToForwardInfoPtrOutput() ForwardInfoPtrOutput
	ToForwardInfoPtrOutputWithContext(context.Context) ForwardInfoPtrOutput
}

type forwardInfoPtrType ForwardInfoArgs

func ForwardInfoPtr(v *ForwardInfoArgs) ForwardInfoPtrInput {
	return (*forwardInfoPtrType)(v)
}

func (*forwardInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardInfo)(nil)).Elem()
}

func (i *forwardInfoPtrType) ToForwardInfoPtrOutput() ForwardInfoPtrOutput {
	return i.ToForwardInfoPtrOutputWithContext(context.Background())
}

func (i *forwardInfoPtrType) ToForwardInfoPtrOutputWithContext(ctx context.Context) ForwardInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardInfoPtrOutput)
}

// Details of the final state "forward" and associated resource.
type ForwardInfoOutput struct{ *pulumi.OutputState }

func (ForwardInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardInfo)(nil)).Elem()
}

func (o ForwardInfoOutput) ToForwardInfoOutput() ForwardInfoOutput {
	return o
}

func (o ForwardInfoOutput) ToForwardInfoOutputWithContext(ctx context.Context) ForwardInfoOutput {
	return o
}

func (o ForwardInfoOutput) ToForwardInfoPtrOutput() ForwardInfoPtrOutput {
	return o.ToForwardInfoPtrOutputWithContext(context.Background())
}

func (o ForwardInfoOutput) ToForwardInfoPtrOutputWithContext(ctx context.Context) ForwardInfoPtrOutput {
	return o.ApplyT(func(v ForwardInfo) *ForwardInfo {
		return &v
	}).(ForwardInfoPtrOutput)
}

// URI of the resource that the packet is forwarded to.
func (o ForwardInfoOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardInfo) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// Target type where this packet is forwarded to.
func (o ForwardInfoOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardInfo) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ForwardInfoPtrOutput struct{ *pulumi.OutputState }

func (ForwardInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardInfo)(nil)).Elem()
}

func (o ForwardInfoPtrOutput) ToForwardInfoPtrOutput() ForwardInfoPtrOutput {
	return o
}

func (o ForwardInfoPtrOutput) ToForwardInfoPtrOutputWithContext(ctx context.Context) ForwardInfoPtrOutput {
	return o
}

func (o ForwardInfoPtrOutput) Elem() ForwardInfoOutput {
	return o.ApplyT(func(v *ForwardInfo) ForwardInfo { return *v }).(ForwardInfoOutput)
}

// URI of the resource that the packet is forwarded to.
func (o ForwardInfoPtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardInfo) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// Target type where this packet is forwarded to.
func (o ForwardInfoPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardInfo) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// For display only. Metadata associated with a Compute Engine forwarding rule.
type ForwardingRuleInfo struct {
	// Name of a Compute Engine forwarding rule.
	DisplayName *string `pulumi:"displayName"`
	// Port range defined in the forwarding rule that matches the test.
	MatchedPortRange *string `pulumi:"matchedPortRange"`
	// Protocol defined in the forwarding rule that matches the test.
	MatchedProtocol *string `pulumi:"matchedProtocol"`
	// Network URI. Only valid for Internal Load Balancer.
	NetworkUri *string `pulumi:"networkUri"`
	// Target type of the forwarding rule.
	Target *string `pulumi:"target"`
	// URI of a Compute Engine forwarding rule.
	Uri *string `pulumi:"uri"`
	// VIP of the forwarding rule.
	Vip *string `pulumi:"vip"`
}

// ForwardingRuleInfoInput is an input type that accepts ForwardingRuleInfoArgs and ForwardingRuleInfoOutput values.
// You can construct a concrete instance of `ForwardingRuleInfoInput` via:
//
//          ForwardingRuleInfoArgs{...}
type ForwardingRuleInfoInput interface {
	pulumi.Input

	ToForwardingRuleInfoOutput() ForwardingRuleInfoOutput
	ToForwardingRuleInfoOutputWithContext(context.Context) ForwardingRuleInfoOutput
}

// For display only. Metadata associated with a Compute Engine forwarding rule.
type ForwardingRuleInfoArgs struct {
	// Name of a Compute Engine forwarding rule.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Port range defined in the forwarding rule that matches the test.
	MatchedPortRange pulumi.StringPtrInput `pulumi:"matchedPortRange"`
	// Protocol defined in the forwarding rule that matches the test.
	MatchedProtocol pulumi.StringPtrInput `pulumi:"matchedProtocol"`
	// Network URI. Only valid for Internal Load Balancer.
	NetworkUri pulumi.StringPtrInput `pulumi:"networkUri"`
	// Target type of the forwarding rule.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// URI of a Compute Engine forwarding rule.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// VIP of the forwarding rule.
	Vip pulumi.StringPtrInput `pulumi:"vip"`
}

func (ForwardingRuleInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleInfo)(nil)).Elem()
}

func (i ForwardingRuleInfoArgs) ToForwardingRuleInfoOutput() ForwardingRuleInfoOutput {
	return i.ToForwardingRuleInfoOutputWithContext(context.Background())
}

func (i ForwardingRuleInfoArgs) ToForwardingRuleInfoOutputWithContext(ctx context.Context) ForwardingRuleInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleInfoOutput)
}

func (i ForwardingRuleInfoArgs) ToForwardingRuleInfoPtrOutput() ForwardingRuleInfoPtrOutput {
	return i.ToForwardingRuleInfoPtrOutputWithContext(context.Background())
}

func (i ForwardingRuleInfoArgs) ToForwardingRuleInfoPtrOutputWithContext(ctx context.Context) ForwardingRuleInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleInfoOutput).ToForwardingRuleInfoPtrOutputWithContext(ctx)
}

// ForwardingRuleInfoPtrInput is an input type that accepts ForwardingRuleInfoArgs, ForwardingRuleInfoPtr and ForwardingRuleInfoPtrOutput values.
// You can construct a concrete instance of `ForwardingRuleInfoPtrInput` via:
//
//          ForwardingRuleInfoArgs{...}
//
//  or:
//
//          nil
type ForwardingRuleInfoPtrInput interface {
	pulumi.Input

	ToForwardingRuleInfoPtrOutput() ForwardingRuleInfoPtrOutput
	ToForwardingRuleInfoPtrOutputWithContext(context.Context) ForwardingRuleInfoPtrOutput
}

type forwardingRuleInfoPtrType ForwardingRuleInfoArgs

func ForwardingRuleInfoPtr(v *ForwardingRuleInfoArgs) ForwardingRuleInfoPtrInput {
	return (*forwardingRuleInfoPtrType)(v)
}

func (*forwardingRuleInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardingRuleInfo)(nil)).Elem()
}

func (i *forwardingRuleInfoPtrType) ToForwardingRuleInfoPtrOutput() ForwardingRuleInfoPtrOutput {
	return i.ToForwardingRuleInfoPtrOutputWithContext(context.Background())
}

func (i *forwardingRuleInfoPtrType) ToForwardingRuleInfoPtrOutputWithContext(ctx context.Context) ForwardingRuleInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleInfoPtrOutput)
}

// For display only. Metadata associated with a Compute Engine forwarding rule.
type ForwardingRuleInfoOutput struct{ *pulumi.OutputState }

func (ForwardingRuleInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleInfo)(nil)).Elem()
}

func (o ForwardingRuleInfoOutput) ToForwardingRuleInfoOutput() ForwardingRuleInfoOutput {
	return o
}

func (o ForwardingRuleInfoOutput) ToForwardingRuleInfoOutputWithContext(ctx context.Context) ForwardingRuleInfoOutput {
	return o
}

func (o ForwardingRuleInfoOutput) ToForwardingRuleInfoPtrOutput() ForwardingRuleInfoPtrOutput {
	return o.ToForwardingRuleInfoPtrOutputWithContext(context.Background())
}

func (o ForwardingRuleInfoOutput) ToForwardingRuleInfoPtrOutputWithContext(ctx context.Context) ForwardingRuleInfoPtrOutput {
	return o.ApplyT(func(v ForwardingRuleInfo) *ForwardingRuleInfo {
		return &v
	}).(ForwardingRuleInfoPtrOutput)
}

// Name of a Compute Engine forwarding rule.
func (o ForwardingRuleInfoOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleInfo) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Port range defined in the forwarding rule that matches the test.
func (o ForwardingRuleInfoOutput) MatchedPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleInfo) *string { return v.MatchedPortRange }).(pulumi.StringPtrOutput)
}

// Protocol defined in the forwarding rule that matches the test.
func (o ForwardingRuleInfoOutput) MatchedProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleInfo) *string { return v.MatchedProtocol }).(pulumi.StringPtrOutput)
}

// Network URI. Only valid for Internal Load Balancer.
func (o ForwardingRuleInfoOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleInfo) *string { return v.NetworkUri }).(pulumi.StringPtrOutput)
}

// Target type of the forwarding rule.
func (o ForwardingRuleInfoOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleInfo) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine forwarding rule.
func (o ForwardingRuleInfoOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleInfo) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// VIP of the forwarding rule.
func (o ForwardingRuleInfoOutput) Vip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleInfo) *string { return v.Vip }).(pulumi.StringPtrOutput)
}

type ForwardingRuleInfoPtrOutput struct{ *pulumi.OutputState }

func (ForwardingRuleInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardingRuleInfo)(nil)).Elem()
}

func (o ForwardingRuleInfoPtrOutput) ToForwardingRuleInfoPtrOutput() ForwardingRuleInfoPtrOutput {
	return o
}

func (o ForwardingRuleInfoPtrOutput) ToForwardingRuleInfoPtrOutputWithContext(ctx context.Context) ForwardingRuleInfoPtrOutput {
	return o
}

func (o ForwardingRuleInfoPtrOutput) Elem() ForwardingRuleInfoOutput {
	return o.ApplyT(func(v *ForwardingRuleInfo) ForwardingRuleInfo { return *v }).(ForwardingRuleInfoOutput)
}

// Name of a Compute Engine forwarding rule.
func (o ForwardingRuleInfoPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingRuleInfo) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Port range defined in the forwarding rule that matches the test.
func (o ForwardingRuleInfoPtrOutput) MatchedPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingRuleInfo) *string {
		if v == nil {
			return nil
		}
		return v.MatchedPortRange
	}).(pulumi.StringPtrOutput)
}

// Protocol defined in the forwarding rule that matches the test.
func (o ForwardingRuleInfoPtrOutput) MatchedProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingRuleInfo) *string {
		if v == nil {
			return nil
		}
		return v.MatchedProtocol
	}).(pulumi.StringPtrOutput)
}

// Network URI. Only valid for Internal Load Balancer.
func (o ForwardingRuleInfoPtrOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingRuleInfo) *string {
		if v == nil {
			return nil
		}
		return v.NetworkUri
	}).(pulumi.StringPtrOutput)
}

// Target type of the forwarding rule.
func (o ForwardingRuleInfoPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingRuleInfo) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine forwarding rule.
func (o ForwardingRuleInfoPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingRuleInfo) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// VIP of the forwarding rule.
func (o ForwardingRuleInfoPtrOutput) Vip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingRuleInfo) *string {
		if v == nil {
			return nil
		}
		return v.Vip
	}).(pulumi.StringPtrOutput)
}

// For display only. Metadata associated with a Compute Engine instance.
type InstanceInfo struct {
	// Name of a Compute Engine instance.
	DisplayName *string `pulumi:"displayName"`
	// External IP address of the network interface.
	ExternalIp *string `pulumi:"externalIp"`
	// Name of the network interface of a Compute Engine instance.
	Interface *string `pulumi:"interface"`
	// Internal IP address of the network interface.
	InternalIp *string `pulumi:"internalIp"`
	// Network tags configured on the instance.
	NetworkTags []string `pulumi:"networkTags"`
	// URI of a Compute Engine network.
	NetworkUri *string `pulumi:"networkUri"`
	// Service account authorized for the instance.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// URI of a Compute Engine instance.
	Uri *string `pulumi:"uri"`
}

// InstanceInfoInput is an input type that accepts InstanceInfoArgs and InstanceInfoOutput values.
// You can construct a concrete instance of `InstanceInfoInput` via:
//
//          InstanceInfoArgs{...}
type InstanceInfoInput interface {
	pulumi.Input

	ToInstanceInfoOutput() InstanceInfoOutput
	ToInstanceInfoOutputWithContext(context.Context) InstanceInfoOutput
}

// For display only. Metadata associated with a Compute Engine instance.
type InstanceInfoArgs struct {
	// Name of a Compute Engine instance.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// External IP address of the network interface.
	ExternalIp pulumi.StringPtrInput `pulumi:"externalIp"`
	// Name of the network interface of a Compute Engine instance.
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// Internal IP address of the network interface.
	InternalIp pulumi.StringPtrInput `pulumi:"internalIp"`
	// Network tags configured on the instance.
	NetworkTags pulumi.StringArrayInput `pulumi:"networkTags"`
	// URI of a Compute Engine network.
	NetworkUri pulumi.StringPtrInput `pulumi:"networkUri"`
	// Service account authorized for the instance.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// URI of a Compute Engine instance.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (InstanceInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceInfo)(nil)).Elem()
}

func (i InstanceInfoArgs) ToInstanceInfoOutput() InstanceInfoOutput {
	return i.ToInstanceInfoOutputWithContext(context.Background())
}

func (i InstanceInfoArgs) ToInstanceInfoOutputWithContext(ctx context.Context) InstanceInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceInfoOutput)
}

func (i InstanceInfoArgs) ToInstanceInfoPtrOutput() InstanceInfoPtrOutput {
	return i.ToInstanceInfoPtrOutputWithContext(context.Background())
}

func (i InstanceInfoArgs) ToInstanceInfoPtrOutputWithContext(ctx context.Context) InstanceInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceInfoOutput).ToInstanceInfoPtrOutputWithContext(ctx)
}

// InstanceInfoPtrInput is an input type that accepts InstanceInfoArgs, InstanceInfoPtr and InstanceInfoPtrOutput values.
// You can construct a concrete instance of `InstanceInfoPtrInput` via:
//
//          InstanceInfoArgs{...}
//
//  or:
//
//          nil
type InstanceInfoPtrInput interface {
	pulumi.Input

	ToInstanceInfoPtrOutput() InstanceInfoPtrOutput
	ToInstanceInfoPtrOutputWithContext(context.Context) InstanceInfoPtrOutput
}

type instanceInfoPtrType InstanceInfoArgs

func InstanceInfoPtr(v *InstanceInfoArgs) InstanceInfoPtrInput {
	return (*instanceInfoPtrType)(v)
}

func (*instanceInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceInfo)(nil)).Elem()
}

func (i *instanceInfoPtrType) ToInstanceInfoPtrOutput() InstanceInfoPtrOutput {
	return i.ToInstanceInfoPtrOutputWithContext(context.Background())
}

func (i *instanceInfoPtrType) ToInstanceInfoPtrOutputWithContext(ctx context.Context) InstanceInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceInfoPtrOutput)
}

// For display only. Metadata associated with a Compute Engine instance.
type InstanceInfoOutput struct{ *pulumi.OutputState }

func (InstanceInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceInfo)(nil)).Elem()
}

func (o InstanceInfoOutput) ToInstanceInfoOutput() InstanceInfoOutput {
	return o
}

func (o InstanceInfoOutput) ToInstanceInfoOutputWithContext(ctx context.Context) InstanceInfoOutput {
	return o
}

func (o InstanceInfoOutput) ToInstanceInfoPtrOutput() InstanceInfoPtrOutput {
	return o.ToInstanceInfoPtrOutputWithContext(context.Background())
}

func (o InstanceInfoOutput) ToInstanceInfoPtrOutputWithContext(ctx context.Context) InstanceInfoPtrOutput {
	return o.ApplyT(func(v InstanceInfo) *InstanceInfo {
		return &v
	}).(InstanceInfoPtrOutput)
}

// Name of a Compute Engine instance.
func (o InstanceInfoOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInfo) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// External IP address of the network interface.
func (o InstanceInfoOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInfo) *string { return v.ExternalIp }).(pulumi.StringPtrOutput)
}

// Name of the network interface of a Compute Engine instance.
func (o InstanceInfoOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInfo) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// Internal IP address of the network interface.
func (o InstanceInfoOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInfo) *string { return v.InternalIp }).(pulumi.StringPtrOutput)
}

// Network tags configured on the instance.
func (o InstanceInfoOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceInfo) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// URI of a Compute Engine network.
func (o InstanceInfoOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInfo) *string { return v.NetworkUri }).(pulumi.StringPtrOutput)
}

// Service account authorized for the instance.
func (o InstanceInfoOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInfo) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine instance.
func (o InstanceInfoOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInfo) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type InstanceInfoPtrOutput struct{ *pulumi.OutputState }

func (InstanceInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceInfo)(nil)).Elem()
}

func (o InstanceInfoPtrOutput) ToInstanceInfoPtrOutput() InstanceInfoPtrOutput {
	return o
}

func (o InstanceInfoPtrOutput) ToInstanceInfoPtrOutputWithContext(ctx context.Context) InstanceInfoPtrOutput {
	return o
}

func (o InstanceInfoPtrOutput) Elem() InstanceInfoOutput {
	return o.ApplyT(func(v *InstanceInfo) InstanceInfo { return *v }).(InstanceInfoOutput)
}

// Name of a Compute Engine instance.
func (o InstanceInfoPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceInfo) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// External IP address of the network interface.
func (o InstanceInfoPtrOutput) ExternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceInfo) *string {
		if v == nil {
			return nil
		}
		return v.ExternalIp
	}).(pulumi.StringPtrOutput)
}

// Name of the network interface of a Compute Engine instance.
func (o InstanceInfoPtrOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceInfo) *string {
		if v == nil {
			return nil
		}
		return v.Interface
	}).(pulumi.StringPtrOutput)
}

// Internal IP address of the network interface.
func (o InstanceInfoPtrOutput) InternalIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceInfo) *string {
		if v == nil {
			return nil
		}
		return v.InternalIp
	}).(pulumi.StringPtrOutput)
}

// Network tags configured on the instance.
func (o InstanceInfoPtrOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceInfo) []string {
		if v == nil {
			return nil
		}
		return v.NetworkTags
	}).(pulumi.StringArrayOutput)
}

// URI of a Compute Engine network.
func (o InstanceInfoPtrOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceInfo) *string {
		if v == nil {
			return nil
		}
		return v.NetworkUri
	}).(pulumi.StringPtrOutput)
}

// Service account authorized for the instance.
func (o InstanceInfoPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceInfo) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine instance.
func (o InstanceInfoPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceInfo) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// For display only. Metadata associated with a specific load balancer backend.
type LoadBalancerBackend struct {
	// Name of a Compute Engine instance or network endpoint.
	DisplayName *string `pulumi:"displayName"`
	// A list of firewall rule URIs allowing probes from health check IP ranges.
	HealthCheckAllowingFirewallRules []string `pulumi:"healthCheckAllowingFirewallRules"`
	// A list of firewall rule URIs blocking probes from health check IP ranges.
	HealthCheckBlockingFirewallRules []string `pulumi:"healthCheckBlockingFirewallRules"`
	// State of the health check firewall configuration.
	HealthCheckFirewallState *string `pulumi:"healthCheckFirewallState"`
	// URI of a Compute Engine instance or network endpoint.
	Uri *string `pulumi:"uri"`
}

// LoadBalancerBackendInput is an input type that accepts LoadBalancerBackendArgs and LoadBalancerBackendOutput values.
// You can construct a concrete instance of `LoadBalancerBackendInput` via:
//
//          LoadBalancerBackendArgs{...}
type LoadBalancerBackendInput interface {
	pulumi.Input

	ToLoadBalancerBackendOutput() LoadBalancerBackendOutput
	ToLoadBalancerBackendOutputWithContext(context.Context) LoadBalancerBackendOutput
}

// For display only. Metadata associated with a specific load balancer backend.
type LoadBalancerBackendArgs struct {
	// Name of a Compute Engine instance or network endpoint.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// A list of firewall rule URIs allowing probes from health check IP ranges.
	HealthCheckAllowingFirewallRules pulumi.StringArrayInput `pulumi:"healthCheckAllowingFirewallRules"`
	// A list of firewall rule URIs blocking probes from health check IP ranges.
	HealthCheckBlockingFirewallRules pulumi.StringArrayInput `pulumi:"healthCheckBlockingFirewallRules"`
	// State of the health check firewall configuration.
	HealthCheckFirewallState pulumi.StringPtrInput `pulumi:"healthCheckFirewallState"`
	// URI of a Compute Engine instance or network endpoint.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (LoadBalancerBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerBackend)(nil)).Elem()
}

func (i LoadBalancerBackendArgs) ToLoadBalancerBackendOutput() LoadBalancerBackendOutput {
	return i.ToLoadBalancerBackendOutputWithContext(context.Background())
}

func (i LoadBalancerBackendArgs) ToLoadBalancerBackendOutputWithContext(ctx context.Context) LoadBalancerBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerBackendOutput)
}

// LoadBalancerBackendArrayInput is an input type that accepts LoadBalancerBackendArray and LoadBalancerBackendArrayOutput values.
// You can construct a concrete instance of `LoadBalancerBackendArrayInput` via:
//
//          LoadBalancerBackendArray{ LoadBalancerBackendArgs{...} }
type LoadBalancerBackendArrayInput interface {
	pulumi.Input

	ToLoadBalancerBackendArrayOutput() LoadBalancerBackendArrayOutput
	ToLoadBalancerBackendArrayOutputWithContext(context.Context) LoadBalancerBackendArrayOutput
}

type LoadBalancerBackendArray []LoadBalancerBackendInput

func (LoadBalancerBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerBackend)(nil)).Elem()
}

func (i LoadBalancerBackendArray) ToLoadBalancerBackendArrayOutput() LoadBalancerBackendArrayOutput {
	return i.ToLoadBalancerBackendArrayOutputWithContext(context.Background())
}

func (i LoadBalancerBackendArray) ToLoadBalancerBackendArrayOutputWithContext(ctx context.Context) LoadBalancerBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerBackendArrayOutput)
}

// For display only. Metadata associated with a specific load balancer backend.
type LoadBalancerBackendOutput struct{ *pulumi.OutputState }

func (LoadBalancerBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerBackend)(nil)).Elem()
}

func (o LoadBalancerBackendOutput) ToLoadBalancerBackendOutput() LoadBalancerBackendOutput {
	return o
}

func (o LoadBalancerBackendOutput) ToLoadBalancerBackendOutputWithContext(ctx context.Context) LoadBalancerBackendOutput {
	return o
}

// Name of a Compute Engine instance or network endpoint.
func (o LoadBalancerBackendOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerBackend) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// A list of firewall rule URIs allowing probes from health check IP ranges.
func (o LoadBalancerBackendOutput) HealthCheckAllowingFirewallRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerBackend) []string { return v.HealthCheckAllowingFirewallRules }).(pulumi.StringArrayOutput)
}

// A list of firewall rule URIs blocking probes from health check IP ranges.
func (o LoadBalancerBackendOutput) HealthCheckBlockingFirewallRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerBackend) []string { return v.HealthCheckBlockingFirewallRules }).(pulumi.StringArrayOutput)
}

// State of the health check firewall configuration.
func (o LoadBalancerBackendOutput) HealthCheckFirewallState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerBackend) *string { return v.HealthCheckFirewallState }).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine instance or network endpoint.
func (o LoadBalancerBackendOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerBackend) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type LoadBalancerBackendArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerBackend)(nil)).Elem()
}

func (o LoadBalancerBackendArrayOutput) ToLoadBalancerBackendArrayOutput() LoadBalancerBackendArrayOutput {
	return o
}

func (o LoadBalancerBackendArrayOutput) ToLoadBalancerBackendArrayOutputWithContext(ctx context.Context) LoadBalancerBackendArrayOutput {
	return o
}

func (o LoadBalancerBackendArrayOutput) Index(i pulumi.IntInput) LoadBalancerBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerBackend {
		return vs[0].([]LoadBalancerBackend)[vs[1].(int)]
	}).(LoadBalancerBackendOutput)
}

// For display only. Metadata associated with a load balancer.
type LoadBalancerInfo struct {
	// Type of load balancer's backend configuration.
	BackendType *string `pulumi:"backendType"`
	// Backend configuration URI.
	BackendUri *string `pulumi:"backendUri"`
	// Information for the loadbalancer backends.
	Backends []LoadBalancerBackend `pulumi:"backends"`
	// URI of the health check for the load balancer.
	HealthCheckUri *string `pulumi:"healthCheckUri"`
	// Type of the load balancer.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
}

// LoadBalancerInfoInput is an input type that accepts LoadBalancerInfoArgs and LoadBalancerInfoOutput values.
// You can construct a concrete instance of `LoadBalancerInfoInput` via:
//
//          LoadBalancerInfoArgs{...}
type LoadBalancerInfoInput interface {
	pulumi.Input

	ToLoadBalancerInfoOutput() LoadBalancerInfoOutput
	ToLoadBalancerInfoOutputWithContext(context.Context) LoadBalancerInfoOutput
}

// For display only. Metadata associated with a load balancer.
type LoadBalancerInfoArgs struct {
	// Type of load balancer's backend configuration.
	BackendType pulumi.StringPtrInput `pulumi:"backendType"`
	// Backend configuration URI.
	BackendUri pulumi.StringPtrInput `pulumi:"backendUri"`
	// Information for the loadbalancer backends.
	Backends LoadBalancerBackendArrayInput `pulumi:"backends"`
	// URI of the health check for the load balancer.
	HealthCheckUri pulumi.StringPtrInput `pulumi:"healthCheckUri"`
	// Type of the load balancer.
	LoadBalancerType pulumi.StringPtrInput `pulumi:"loadBalancerType"`
}

func (LoadBalancerInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerInfo)(nil)).Elem()
}

func (i LoadBalancerInfoArgs) ToLoadBalancerInfoOutput() LoadBalancerInfoOutput {
	return i.ToLoadBalancerInfoOutputWithContext(context.Background())
}

func (i LoadBalancerInfoArgs) ToLoadBalancerInfoOutputWithContext(ctx context.Context) LoadBalancerInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerInfoOutput)
}

func (i LoadBalancerInfoArgs) ToLoadBalancerInfoPtrOutput() LoadBalancerInfoPtrOutput {
	return i.ToLoadBalancerInfoPtrOutputWithContext(context.Background())
}

func (i LoadBalancerInfoArgs) ToLoadBalancerInfoPtrOutputWithContext(ctx context.Context) LoadBalancerInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerInfoOutput).ToLoadBalancerInfoPtrOutputWithContext(ctx)
}

// LoadBalancerInfoPtrInput is an input type that accepts LoadBalancerInfoArgs, LoadBalancerInfoPtr and LoadBalancerInfoPtrOutput values.
// You can construct a concrete instance of `LoadBalancerInfoPtrInput` via:
//
//          LoadBalancerInfoArgs{...}
//
//  or:
//
//          nil
type LoadBalancerInfoPtrInput interface {
	pulumi.Input

	ToLoadBalancerInfoPtrOutput() LoadBalancerInfoPtrOutput
	ToLoadBalancerInfoPtrOutputWithContext(context.Context) LoadBalancerInfoPtrOutput
}

type loadBalancerInfoPtrType LoadBalancerInfoArgs

func LoadBalancerInfoPtr(v *LoadBalancerInfoArgs) LoadBalancerInfoPtrInput {
	return (*loadBalancerInfoPtrType)(v)
}

func (*loadBalancerInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerInfo)(nil)).Elem()
}

func (i *loadBalancerInfoPtrType) ToLoadBalancerInfoPtrOutput() LoadBalancerInfoPtrOutput {
	return i.ToLoadBalancerInfoPtrOutputWithContext(context.Background())
}

func (i *loadBalancerInfoPtrType) ToLoadBalancerInfoPtrOutputWithContext(ctx context.Context) LoadBalancerInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerInfoPtrOutput)
}

// For display only. Metadata associated with a load balancer.
type LoadBalancerInfoOutput struct{ *pulumi.OutputState }

func (LoadBalancerInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerInfo)(nil)).Elem()
}

func (o LoadBalancerInfoOutput) ToLoadBalancerInfoOutput() LoadBalancerInfoOutput {
	return o
}

func (o LoadBalancerInfoOutput) ToLoadBalancerInfoOutputWithContext(ctx context.Context) LoadBalancerInfoOutput {
	return o
}

func (o LoadBalancerInfoOutput) ToLoadBalancerInfoPtrOutput() LoadBalancerInfoPtrOutput {
	return o.ToLoadBalancerInfoPtrOutputWithContext(context.Background())
}

func (o LoadBalancerInfoOutput) ToLoadBalancerInfoPtrOutputWithContext(ctx context.Context) LoadBalancerInfoPtrOutput {
	return o.ApplyT(func(v LoadBalancerInfo) *LoadBalancerInfo {
		return &v
	}).(LoadBalancerInfoPtrOutput)
}

// Type of load balancer's backend configuration.
func (o LoadBalancerInfoOutput) BackendType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerInfo) *string { return v.BackendType }).(pulumi.StringPtrOutput)
}

// Backend configuration URI.
func (o LoadBalancerInfoOutput) BackendUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerInfo) *string { return v.BackendUri }).(pulumi.StringPtrOutput)
}

// Information for the loadbalancer backends.
func (o LoadBalancerInfoOutput) Backends() LoadBalancerBackendArrayOutput {
	return o.ApplyT(func(v LoadBalancerInfo) []LoadBalancerBackend { return v.Backends }).(LoadBalancerBackendArrayOutput)
}

// URI of the health check for the load balancer.
func (o LoadBalancerInfoOutput) HealthCheckUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerInfo) *string { return v.HealthCheckUri }).(pulumi.StringPtrOutput)
}

// Type of the load balancer.
func (o LoadBalancerInfoOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerInfo) *string { return v.LoadBalancerType }).(pulumi.StringPtrOutput)
}

type LoadBalancerInfoPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerInfo)(nil)).Elem()
}

func (o LoadBalancerInfoPtrOutput) ToLoadBalancerInfoPtrOutput() LoadBalancerInfoPtrOutput {
	return o
}

func (o LoadBalancerInfoPtrOutput) ToLoadBalancerInfoPtrOutputWithContext(ctx context.Context) LoadBalancerInfoPtrOutput {
	return o
}

func (o LoadBalancerInfoPtrOutput) Elem() LoadBalancerInfoOutput {
	return o.ApplyT(func(v *LoadBalancerInfo) LoadBalancerInfo { return *v }).(LoadBalancerInfoOutput)
}

// Type of load balancer's backend configuration.
func (o LoadBalancerInfoPtrOutput) BackendType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerInfo) *string {
		if v == nil {
			return nil
		}
		return v.BackendType
	}).(pulumi.StringPtrOutput)
}

// Backend configuration URI.
func (o LoadBalancerInfoPtrOutput) BackendUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerInfo) *string {
		if v == nil {
			return nil
		}
		return v.BackendUri
	}).(pulumi.StringPtrOutput)
}

// Information for the loadbalancer backends.
func (o LoadBalancerInfoPtrOutput) Backends() LoadBalancerBackendArrayOutput {
	return o.ApplyT(func(v *LoadBalancerInfo) []LoadBalancerBackend {
		if v == nil {
			return nil
		}
		return v.Backends
	}).(LoadBalancerBackendArrayOutput)
}

// URI of the health check for the load balancer.
func (o LoadBalancerInfoPtrOutput) HealthCheckUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerInfo) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckUri
	}).(pulumi.StringPtrOutput)
}

// Type of the load balancer.
func (o LoadBalancerInfoPtrOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerInfo) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerType
	}).(pulumi.StringPtrOutput)
}

// For display only. Metadata associated with a Compute Engine network.
type NetworkInfo struct {
	// Name of a Compute Engine network.
	DisplayName *string `pulumi:"displayName"`
	// The IP range that matches the test.
	MatchedIpRange *string `pulumi:"matchedIpRange"`
	// URI of a Compute Engine network.
	Uri *string `pulumi:"uri"`
}

// NetworkInfoInput is an input type that accepts NetworkInfoArgs and NetworkInfoOutput values.
// You can construct a concrete instance of `NetworkInfoInput` via:
//
//          NetworkInfoArgs{...}
type NetworkInfoInput interface {
	pulumi.Input

	ToNetworkInfoOutput() NetworkInfoOutput
	ToNetworkInfoOutputWithContext(context.Context) NetworkInfoOutput
}

// For display only. Metadata associated with a Compute Engine network.
type NetworkInfoArgs struct {
	// Name of a Compute Engine network.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The IP range that matches the test.
	MatchedIpRange pulumi.StringPtrInput `pulumi:"matchedIpRange"`
	// URI of a Compute Engine network.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (NetworkInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInfo)(nil)).Elem()
}

func (i NetworkInfoArgs) ToNetworkInfoOutput() NetworkInfoOutput {
	return i.ToNetworkInfoOutputWithContext(context.Background())
}

func (i NetworkInfoArgs) ToNetworkInfoOutputWithContext(ctx context.Context) NetworkInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInfoOutput)
}

func (i NetworkInfoArgs) ToNetworkInfoPtrOutput() NetworkInfoPtrOutput {
	return i.ToNetworkInfoPtrOutputWithContext(context.Background())
}

func (i NetworkInfoArgs) ToNetworkInfoPtrOutputWithContext(ctx context.Context) NetworkInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInfoOutput).ToNetworkInfoPtrOutputWithContext(ctx)
}

// NetworkInfoPtrInput is an input type that accepts NetworkInfoArgs, NetworkInfoPtr and NetworkInfoPtrOutput values.
// You can construct a concrete instance of `NetworkInfoPtrInput` via:
//
//          NetworkInfoArgs{...}
//
//  or:
//
//          nil
type NetworkInfoPtrInput interface {
	pulumi.Input

	ToNetworkInfoPtrOutput() NetworkInfoPtrOutput
	ToNetworkInfoPtrOutputWithContext(context.Context) NetworkInfoPtrOutput
}

type networkInfoPtrType NetworkInfoArgs

func NetworkInfoPtr(v *NetworkInfoArgs) NetworkInfoPtrInput {
	return (*networkInfoPtrType)(v)
}

func (*networkInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInfo)(nil)).Elem()
}

func (i *networkInfoPtrType) ToNetworkInfoPtrOutput() NetworkInfoPtrOutput {
	return i.ToNetworkInfoPtrOutputWithContext(context.Background())
}

func (i *networkInfoPtrType) ToNetworkInfoPtrOutputWithContext(ctx context.Context) NetworkInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInfoPtrOutput)
}

// For display only. Metadata associated with a Compute Engine network.
type NetworkInfoOutput struct{ *pulumi.OutputState }

func (NetworkInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInfo)(nil)).Elem()
}

func (o NetworkInfoOutput) ToNetworkInfoOutput() NetworkInfoOutput {
	return o
}

func (o NetworkInfoOutput) ToNetworkInfoOutputWithContext(ctx context.Context) NetworkInfoOutput {
	return o
}

func (o NetworkInfoOutput) ToNetworkInfoPtrOutput() NetworkInfoPtrOutput {
	return o.ToNetworkInfoPtrOutputWithContext(context.Background())
}

func (o NetworkInfoOutput) ToNetworkInfoPtrOutputWithContext(ctx context.Context) NetworkInfoPtrOutput {
	return o.ApplyT(func(v NetworkInfo) *NetworkInfo {
		return &v
	}).(NetworkInfoPtrOutput)
}

// Name of a Compute Engine network.
func (o NetworkInfoOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInfo) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The IP range that matches the test.
func (o NetworkInfoOutput) MatchedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInfo) *string { return v.MatchedIpRange }).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine network.
func (o NetworkInfoOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInfo) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type NetworkInfoPtrOutput struct{ *pulumi.OutputState }

func (NetworkInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInfo)(nil)).Elem()
}

func (o NetworkInfoPtrOutput) ToNetworkInfoPtrOutput() NetworkInfoPtrOutput {
	return o
}

func (o NetworkInfoPtrOutput) ToNetworkInfoPtrOutputWithContext(ctx context.Context) NetworkInfoPtrOutput {
	return o
}

func (o NetworkInfoPtrOutput) Elem() NetworkInfoOutput {
	return o.ApplyT(func(v *NetworkInfo) NetworkInfo { return *v }).(NetworkInfoOutput)
}

// Name of a Compute Engine network.
func (o NetworkInfoPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkInfo) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The IP range that matches the test.
func (o NetworkInfoPtrOutput) MatchedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkInfo) *string {
		if v == nil {
			return nil
		}
		return v.MatchedIpRange
	}).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine network.
func (o NetworkInfoPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkInfo) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []AuditConfig `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs AuditConfigArrayInput `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v Policy) []AuditConfig { return v.AuditConfigs }).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyPtrOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v *Policy) []AuditConfig {
		if v == nil {
			return nil
		}
		return v.AuditConfigs
	}).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// Results of the configuration analysis from the last run of the test.
type ReachabilityDetails struct {
	// The details of a failure or a cancellation of reachability analysis.
	Error *Status `pulumi:"error"`
	// The overall result of the test's configuration analysis.
	Result *string `pulumi:"result"`
	// Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
	Traces []Trace `pulumi:"traces"`
	// The time of the configuration analysis.
	VerifyTime *string `pulumi:"verifyTime"`
}

// ReachabilityDetailsInput is an input type that accepts ReachabilityDetailsArgs and ReachabilityDetailsOutput values.
// You can construct a concrete instance of `ReachabilityDetailsInput` via:
//
//          ReachabilityDetailsArgs{...}
type ReachabilityDetailsInput interface {
	pulumi.Input

	ToReachabilityDetailsOutput() ReachabilityDetailsOutput
	ToReachabilityDetailsOutputWithContext(context.Context) ReachabilityDetailsOutput
}

// Results of the configuration analysis from the last run of the test.
type ReachabilityDetailsArgs struct {
	// The details of a failure or a cancellation of reachability analysis.
	Error StatusPtrInput `pulumi:"error"`
	// The overall result of the test's configuration analysis.
	Result pulumi.StringPtrInput `pulumi:"result"`
	// Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
	Traces TraceArrayInput `pulumi:"traces"`
	// The time of the configuration analysis.
	VerifyTime pulumi.StringPtrInput `pulumi:"verifyTime"`
}

func (ReachabilityDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReachabilityDetails)(nil)).Elem()
}

func (i ReachabilityDetailsArgs) ToReachabilityDetailsOutput() ReachabilityDetailsOutput {
	return i.ToReachabilityDetailsOutputWithContext(context.Background())
}

func (i ReachabilityDetailsArgs) ToReachabilityDetailsOutputWithContext(ctx context.Context) ReachabilityDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReachabilityDetailsOutput)
}

func (i ReachabilityDetailsArgs) ToReachabilityDetailsPtrOutput() ReachabilityDetailsPtrOutput {
	return i.ToReachabilityDetailsPtrOutputWithContext(context.Background())
}

func (i ReachabilityDetailsArgs) ToReachabilityDetailsPtrOutputWithContext(ctx context.Context) ReachabilityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReachabilityDetailsOutput).ToReachabilityDetailsPtrOutputWithContext(ctx)
}

// ReachabilityDetailsPtrInput is an input type that accepts ReachabilityDetailsArgs, ReachabilityDetailsPtr and ReachabilityDetailsPtrOutput values.
// You can construct a concrete instance of `ReachabilityDetailsPtrInput` via:
//
//          ReachabilityDetailsArgs{...}
//
//  or:
//
//          nil
type ReachabilityDetailsPtrInput interface {
	pulumi.Input

	ToReachabilityDetailsPtrOutput() ReachabilityDetailsPtrOutput
	ToReachabilityDetailsPtrOutputWithContext(context.Context) ReachabilityDetailsPtrOutput
}

type reachabilityDetailsPtrType ReachabilityDetailsArgs

func ReachabilityDetailsPtr(v *ReachabilityDetailsArgs) ReachabilityDetailsPtrInput {
	return (*reachabilityDetailsPtrType)(v)
}

func (*reachabilityDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReachabilityDetails)(nil)).Elem()
}

func (i *reachabilityDetailsPtrType) ToReachabilityDetailsPtrOutput() ReachabilityDetailsPtrOutput {
	return i.ToReachabilityDetailsPtrOutputWithContext(context.Background())
}

func (i *reachabilityDetailsPtrType) ToReachabilityDetailsPtrOutputWithContext(ctx context.Context) ReachabilityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReachabilityDetailsPtrOutput)
}

// Results of the configuration analysis from the last run of the test.
type ReachabilityDetailsOutput struct{ *pulumi.OutputState }

func (ReachabilityDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReachabilityDetails)(nil)).Elem()
}

func (o ReachabilityDetailsOutput) ToReachabilityDetailsOutput() ReachabilityDetailsOutput {
	return o
}

func (o ReachabilityDetailsOutput) ToReachabilityDetailsOutputWithContext(ctx context.Context) ReachabilityDetailsOutput {
	return o
}

func (o ReachabilityDetailsOutput) ToReachabilityDetailsPtrOutput() ReachabilityDetailsPtrOutput {
	return o.ToReachabilityDetailsPtrOutputWithContext(context.Background())
}

func (o ReachabilityDetailsOutput) ToReachabilityDetailsPtrOutputWithContext(ctx context.Context) ReachabilityDetailsPtrOutput {
	return o.ApplyT(func(v ReachabilityDetails) *ReachabilityDetails {
		return &v
	}).(ReachabilityDetailsPtrOutput)
}

// The details of a failure or a cancellation of reachability analysis.
func (o ReachabilityDetailsOutput) Error() StatusPtrOutput {
	return o.ApplyT(func(v ReachabilityDetails) *Status { return v.Error }).(StatusPtrOutput)
}

// The overall result of the test's configuration analysis.
func (o ReachabilityDetailsOutput) Result() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReachabilityDetails) *string { return v.Result }).(pulumi.StringPtrOutput)
}

// Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
func (o ReachabilityDetailsOutput) Traces() TraceArrayOutput {
	return o.ApplyT(func(v ReachabilityDetails) []Trace { return v.Traces }).(TraceArrayOutput)
}

// The time of the configuration analysis.
func (o ReachabilityDetailsOutput) VerifyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReachabilityDetails) *string { return v.VerifyTime }).(pulumi.StringPtrOutput)
}

type ReachabilityDetailsPtrOutput struct{ *pulumi.OutputState }

func (ReachabilityDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReachabilityDetails)(nil)).Elem()
}

func (o ReachabilityDetailsPtrOutput) ToReachabilityDetailsPtrOutput() ReachabilityDetailsPtrOutput {
	return o
}

func (o ReachabilityDetailsPtrOutput) ToReachabilityDetailsPtrOutputWithContext(ctx context.Context) ReachabilityDetailsPtrOutput {
	return o
}

func (o ReachabilityDetailsPtrOutput) Elem() ReachabilityDetailsOutput {
	return o.ApplyT(func(v *ReachabilityDetails) ReachabilityDetails { return *v }).(ReachabilityDetailsOutput)
}

// The details of a failure or a cancellation of reachability analysis.
func (o ReachabilityDetailsPtrOutput) Error() StatusPtrOutput {
	return o.ApplyT(func(v *ReachabilityDetails) *Status {
		if v == nil {
			return nil
		}
		return v.Error
	}).(StatusPtrOutput)
}

// The overall result of the test's configuration analysis.
func (o ReachabilityDetailsPtrOutput) Result() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReachabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.Result
	}).(pulumi.StringPtrOutput)
}

// Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
func (o ReachabilityDetailsPtrOutput) Traces() TraceArrayOutput {
	return o.ApplyT(func(v *ReachabilityDetails) []Trace {
		if v == nil {
			return nil
		}
		return v.Traces
	}).(TraceArrayOutput)
}

// The time of the configuration analysis.
func (o ReachabilityDetailsPtrOutput) VerifyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReachabilityDetails) *string {
		if v == nil {
			return nil
		}
		return v.VerifyTime
	}).(pulumi.StringPtrOutput)
}

// For display only. Metadata associated with a Compute Engine route.
type RouteInfo struct {
	// Destination IP range of the route.
	DestIpRange *string `pulumi:"destIpRange"`
	// Name of a Compute Engine route.
	DisplayName *string `pulumi:"displayName"`
	// Instance tags of the route.
	InstanceTags []string `pulumi:"instanceTags"`
	// URI of a Compute Engine network.
	NetworkUri *string `pulumi:"networkUri"`
	// Next hop of the route.
	NextHop *string `pulumi:"nextHop"`
	// Type of next hop.
	NextHopType *string `pulumi:"nextHopType"`
	// Priority of the route.
	Priority *int `pulumi:"priority"`
	// Type of route.
	RouteType *string `pulumi:"routeType"`
	// URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
	Uri *string `pulumi:"uri"`
}

// RouteInfoInput is an input type that accepts RouteInfoArgs and RouteInfoOutput values.
// You can construct a concrete instance of `RouteInfoInput` via:
//
//          RouteInfoArgs{...}
type RouteInfoInput interface {
	pulumi.Input

	ToRouteInfoOutput() RouteInfoOutput
	ToRouteInfoOutputWithContext(context.Context) RouteInfoOutput
}

// For display only. Metadata associated with a Compute Engine route.
type RouteInfoArgs struct {
	// Destination IP range of the route.
	DestIpRange pulumi.StringPtrInput `pulumi:"destIpRange"`
	// Name of a Compute Engine route.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Instance tags of the route.
	InstanceTags pulumi.StringArrayInput `pulumi:"instanceTags"`
	// URI of a Compute Engine network.
	NetworkUri pulumi.StringPtrInput `pulumi:"networkUri"`
	// Next hop of the route.
	NextHop pulumi.StringPtrInput `pulumi:"nextHop"`
	// Type of next hop.
	NextHopType pulumi.StringPtrInput `pulumi:"nextHopType"`
	// Priority of the route.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Type of route.
	RouteType pulumi.StringPtrInput `pulumi:"routeType"`
	// URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (RouteInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteInfo)(nil)).Elem()
}

func (i RouteInfoArgs) ToRouteInfoOutput() RouteInfoOutput {
	return i.ToRouteInfoOutputWithContext(context.Background())
}

func (i RouteInfoArgs) ToRouteInfoOutputWithContext(ctx context.Context) RouteInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteInfoOutput)
}

func (i RouteInfoArgs) ToRouteInfoPtrOutput() RouteInfoPtrOutput {
	return i.ToRouteInfoPtrOutputWithContext(context.Background())
}

func (i RouteInfoArgs) ToRouteInfoPtrOutputWithContext(ctx context.Context) RouteInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteInfoOutput).ToRouteInfoPtrOutputWithContext(ctx)
}

// RouteInfoPtrInput is an input type that accepts RouteInfoArgs, RouteInfoPtr and RouteInfoPtrOutput values.
// You can construct a concrete instance of `RouteInfoPtrInput` via:
//
//          RouteInfoArgs{...}
//
//  or:
//
//          nil
type RouteInfoPtrInput interface {
	pulumi.Input

	ToRouteInfoPtrOutput() RouteInfoPtrOutput
	ToRouteInfoPtrOutputWithContext(context.Context) RouteInfoPtrOutput
}

type routeInfoPtrType RouteInfoArgs

func RouteInfoPtr(v *RouteInfoArgs) RouteInfoPtrInput {
	return (*routeInfoPtrType)(v)
}

func (*routeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteInfo)(nil)).Elem()
}

func (i *routeInfoPtrType) ToRouteInfoPtrOutput() RouteInfoPtrOutput {
	return i.ToRouteInfoPtrOutputWithContext(context.Background())
}

func (i *routeInfoPtrType) ToRouteInfoPtrOutputWithContext(ctx context.Context) RouteInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteInfoPtrOutput)
}

// For display only. Metadata associated with a Compute Engine route.
type RouteInfoOutput struct{ *pulumi.OutputState }

func (RouteInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteInfo)(nil)).Elem()
}

func (o RouteInfoOutput) ToRouteInfoOutput() RouteInfoOutput {
	return o
}

func (o RouteInfoOutput) ToRouteInfoOutputWithContext(ctx context.Context) RouteInfoOutput {
	return o
}

func (o RouteInfoOutput) ToRouteInfoPtrOutput() RouteInfoPtrOutput {
	return o.ToRouteInfoPtrOutputWithContext(context.Background())
}

func (o RouteInfoOutput) ToRouteInfoPtrOutputWithContext(ctx context.Context) RouteInfoPtrOutput {
	return o.ApplyT(func(v RouteInfo) *RouteInfo {
		return &v
	}).(RouteInfoPtrOutput)
}

// Destination IP range of the route.
func (o RouteInfoOutput) DestIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteInfo) *string { return v.DestIpRange }).(pulumi.StringPtrOutput)
}

// Name of a Compute Engine route.
func (o RouteInfoOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteInfo) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Instance tags of the route.
func (o RouteInfoOutput) InstanceTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteInfo) []string { return v.InstanceTags }).(pulumi.StringArrayOutput)
}

// URI of a Compute Engine network.
func (o RouteInfoOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteInfo) *string { return v.NetworkUri }).(pulumi.StringPtrOutput)
}

// Next hop of the route.
func (o RouteInfoOutput) NextHop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteInfo) *string { return v.NextHop }).(pulumi.StringPtrOutput)
}

// Type of next hop.
func (o RouteInfoOutput) NextHopType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteInfo) *string { return v.NextHopType }).(pulumi.StringPtrOutput)
}

// Priority of the route.
func (o RouteInfoOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteInfo) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Type of route.
func (o RouteInfoOutput) RouteType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteInfo) *string { return v.RouteType }).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
func (o RouteInfoOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteInfo) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type RouteInfoPtrOutput struct{ *pulumi.OutputState }

func (RouteInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteInfo)(nil)).Elem()
}

func (o RouteInfoPtrOutput) ToRouteInfoPtrOutput() RouteInfoPtrOutput {
	return o
}

func (o RouteInfoPtrOutput) ToRouteInfoPtrOutputWithContext(ctx context.Context) RouteInfoPtrOutput {
	return o
}

func (o RouteInfoPtrOutput) Elem() RouteInfoOutput {
	return o.ApplyT(func(v *RouteInfo) RouteInfo { return *v }).(RouteInfoOutput)
}

// Destination IP range of the route.
func (o RouteInfoPtrOutput) DestIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestIpRange
	}).(pulumi.StringPtrOutput)
}

// Name of a Compute Engine route.
func (o RouteInfoPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteInfo) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Instance tags of the route.
func (o RouteInfoPtrOutput) InstanceTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteInfo) []string {
		if v == nil {
			return nil
		}
		return v.InstanceTags
	}).(pulumi.StringArrayOutput)
}

// URI of a Compute Engine network.
func (o RouteInfoPtrOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteInfo) *string {
		if v == nil {
			return nil
		}
		return v.NetworkUri
	}).(pulumi.StringPtrOutput)
}

// Next hop of the route.
func (o RouteInfoPtrOutput) NextHop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteInfo) *string {
		if v == nil {
			return nil
		}
		return v.NextHop
	}).(pulumi.StringPtrOutput)
}

// Type of next hop.
func (o RouteInfoPtrOutput) NextHopType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteInfo) *string {
		if v == nil {
			return nil
		}
		return v.NextHopType
	}).(pulumi.StringPtrOutput)
}

// Priority of the route.
func (o RouteInfoPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouteInfo) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Type of route.
func (o RouteInfoPtrOutput) RouteType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteInfo) *string {
		if v == nil {
			return nil
		}
		return v.RouteType
	}).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
func (o RouteInfoPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteInfo) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//          StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

func (i StatusArgs) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput).ToStatusPtrOutputWithContext(ctx)
}

// StatusPtrInput is an input type that accepts StatusArgs, StatusPtr and StatusPtrOutput values.
// You can construct a concrete instance of `StatusPtrInput` via:
//
//          StatusArgs{...}
//
//  or:
//
//          nil
type StatusPtrInput interface {
	pulumi.Input

	ToStatusPtrOutput() StatusPtrOutput
	ToStatusPtrOutputWithContext(context.Context) StatusPtrOutput
}

type statusPtrType StatusArgs

func StatusPtr(v *StatusArgs) StatusPtrInput {
	return (*statusPtrType)(v)
}

func (*statusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (i *statusPtrType) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i *statusPtrType) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyT(func(v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v Status) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status { return *v }).(StatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Status) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusPtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *Status) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Status) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
type Step struct {
	// Display info of the final state "abort" and reason.
	Abort *AbortInfo `pulumi:"abort"`
	// This is a step that leads to the final state Drop.
	CausesDrop *bool `pulumi:"causesDrop"`
	// Display info of the final state "deliver" and reason.
	Deliver *DeliverInfo `pulumi:"deliver"`
	// A description of the step. Usually this is a summary of the state.
	Description *string `pulumi:"description"`
	// Display info of the final state "drop" and reason.
	Drop *DropInfo `pulumi:"drop"`
	// Display info of the source and destination under analysis. The endpoint info in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
	Endpoint *EndpointInfo `pulumi:"endpoint"`
	// Display info of a Compute Engine firewall rule.
	Firewall *FirewallInfo `pulumi:"firewall"`
	// Display info of the final state "forward" and reason.
	Forward *ForwardInfo `pulumi:"forward"`
	// Display info of a Compute Engine forwarding rule.
	ForwardingRule *ForwardingRuleInfo `pulumi:"forwardingRule"`
	// Display info of a Compute Engine instance.
	Instance *InstanceInfo `pulumi:"instance"`
	// Display info of the load balancers.
	LoadBalancer *LoadBalancerInfo `pulumi:"loadBalancer"`
	// Display info of a GCP network.
	Network *NetworkInfo `pulumi:"network"`
	// Project ID that contains the configuration this step is validating.
	ProjectId *string `pulumi:"projectId"`
	// Display info of a Compute Engine route.
	Route *RouteInfo `pulumi:"route"`
	// Each step is in one of the pre-defined states.
	State *string `pulumi:"state"`
	// Display info of a Compute Engine VPN gateway.
	VpnGateway *VpnGatewayInfo `pulumi:"vpnGateway"`
	// Display info of a Compute Engine VPN tunnel.
	VpnTunnel *VpnTunnelInfo `pulumi:"vpnTunnel"`
}

// StepInput is an input type that accepts StepArgs and StepOutput values.
// You can construct a concrete instance of `StepInput` via:
//
//          StepArgs{...}
type StepInput interface {
	pulumi.Input

	ToStepOutput() StepOutput
	ToStepOutputWithContext(context.Context) StepOutput
}

// A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
type StepArgs struct {
	// Display info of the final state "abort" and reason.
	Abort AbortInfoPtrInput `pulumi:"abort"`
	// This is a step that leads to the final state Drop.
	CausesDrop pulumi.BoolPtrInput `pulumi:"causesDrop"`
	// Display info of the final state "deliver" and reason.
	Deliver DeliverInfoPtrInput `pulumi:"deliver"`
	// A description of the step. Usually this is a summary of the state.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display info of the final state "drop" and reason.
	Drop DropInfoPtrInput `pulumi:"drop"`
	// Display info of the source and destination under analysis. The endpoint info in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
	Endpoint EndpointInfoPtrInput `pulumi:"endpoint"`
	// Display info of a Compute Engine firewall rule.
	Firewall FirewallInfoPtrInput `pulumi:"firewall"`
	// Display info of the final state "forward" and reason.
	Forward ForwardInfoPtrInput `pulumi:"forward"`
	// Display info of a Compute Engine forwarding rule.
	ForwardingRule ForwardingRuleInfoPtrInput `pulumi:"forwardingRule"`
	// Display info of a Compute Engine instance.
	Instance InstanceInfoPtrInput `pulumi:"instance"`
	// Display info of the load balancers.
	LoadBalancer LoadBalancerInfoPtrInput `pulumi:"loadBalancer"`
	// Display info of a GCP network.
	Network NetworkInfoPtrInput `pulumi:"network"`
	// Project ID that contains the configuration this step is validating.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Display info of a Compute Engine route.
	Route RouteInfoPtrInput `pulumi:"route"`
	// Each step is in one of the pre-defined states.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Display info of a Compute Engine VPN gateway.
	VpnGateway VpnGatewayInfoPtrInput `pulumi:"vpnGateway"`
	// Display info of a Compute Engine VPN tunnel.
	VpnTunnel VpnTunnelInfoPtrInput `pulumi:"vpnTunnel"`
}

func (StepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Step)(nil)).Elem()
}

func (i StepArgs) ToStepOutput() StepOutput {
	return i.ToStepOutputWithContext(context.Background())
}

func (i StepArgs) ToStepOutputWithContext(ctx context.Context) StepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepOutput)
}

// StepArrayInput is an input type that accepts StepArray and StepArrayOutput values.
// You can construct a concrete instance of `StepArrayInput` via:
//
//          StepArray{ StepArgs{...} }
type StepArrayInput interface {
	pulumi.Input

	ToStepArrayOutput() StepArrayOutput
	ToStepArrayOutputWithContext(context.Context) StepArrayOutput
}

type StepArray []StepInput

func (StepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Step)(nil)).Elem()
}

func (i StepArray) ToStepArrayOutput() StepArrayOutput {
	return i.ToStepArrayOutputWithContext(context.Background())
}

func (i StepArray) ToStepArrayOutputWithContext(ctx context.Context) StepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepArrayOutput)
}

// A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
type StepOutput struct{ *pulumi.OutputState }

func (StepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Step)(nil)).Elem()
}

func (o StepOutput) ToStepOutput() StepOutput {
	return o
}

func (o StepOutput) ToStepOutputWithContext(ctx context.Context) StepOutput {
	return o
}

// Display info of the final state "abort" and reason.
func (o StepOutput) Abort() AbortInfoPtrOutput {
	return o.ApplyT(func(v Step) *AbortInfo { return v.Abort }).(AbortInfoPtrOutput)
}

// This is a step that leads to the final state Drop.
func (o StepOutput) CausesDrop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Step) *bool { return v.CausesDrop }).(pulumi.BoolPtrOutput)
}

// Display info of the final state "deliver" and reason.
func (o StepOutput) Deliver() DeliverInfoPtrOutput {
	return o.ApplyT(func(v Step) *DeliverInfo { return v.Deliver }).(DeliverInfoPtrOutput)
}

// A description of the step. Usually this is a summary of the state.
func (o StepOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Step) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display info of the final state "drop" and reason.
func (o StepOutput) Drop() DropInfoPtrOutput {
	return o.ApplyT(func(v Step) *DropInfo { return v.Drop }).(DropInfoPtrOutput)
}

// Display info of the source and destination under analysis. The endpoint info in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
func (o StepOutput) Endpoint() EndpointInfoPtrOutput {
	return o.ApplyT(func(v Step) *EndpointInfo { return v.Endpoint }).(EndpointInfoPtrOutput)
}

// Display info of a Compute Engine firewall rule.
func (o StepOutput) Firewall() FirewallInfoPtrOutput {
	return o.ApplyT(func(v Step) *FirewallInfo { return v.Firewall }).(FirewallInfoPtrOutput)
}

// Display info of the final state "forward" and reason.
func (o StepOutput) Forward() ForwardInfoPtrOutput {
	return o.ApplyT(func(v Step) *ForwardInfo { return v.Forward }).(ForwardInfoPtrOutput)
}

// Display info of a Compute Engine forwarding rule.
func (o StepOutput) ForwardingRule() ForwardingRuleInfoPtrOutput {
	return o.ApplyT(func(v Step) *ForwardingRuleInfo { return v.ForwardingRule }).(ForwardingRuleInfoPtrOutput)
}

// Display info of a Compute Engine instance.
func (o StepOutput) Instance() InstanceInfoPtrOutput {
	return o.ApplyT(func(v Step) *InstanceInfo { return v.Instance }).(InstanceInfoPtrOutput)
}

// Display info of the load balancers.
func (o StepOutput) LoadBalancer() LoadBalancerInfoPtrOutput {
	return o.ApplyT(func(v Step) *LoadBalancerInfo { return v.LoadBalancer }).(LoadBalancerInfoPtrOutput)
}

// Display info of a GCP network.
func (o StepOutput) Network() NetworkInfoPtrOutput {
	return o.ApplyT(func(v Step) *NetworkInfo { return v.Network }).(NetworkInfoPtrOutput)
}

// Project ID that contains the configuration this step is validating.
func (o StepOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Step) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Display info of a Compute Engine route.
func (o StepOutput) Route() RouteInfoPtrOutput {
	return o.ApplyT(func(v Step) *RouteInfo { return v.Route }).(RouteInfoPtrOutput)
}

// Each step is in one of the pre-defined states.
func (o StepOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Step) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Display info of a Compute Engine VPN gateway.
func (o StepOutput) VpnGateway() VpnGatewayInfoPtrOutput {
	return o.ApplyT(func(v Step) *VpnGatewayInfo { return v.VpnGateway }).(VpnGatewayInfoPtrOutput)
}

// Display info of a Compute Engine VPN tunnel.
func (o StepOutput) VpnTunnel() VpnTunnelInfoPtrOutput {
	return o.ApplyT(func(v Step) *VpnTunnelInfo { return v.VpnTunnel }).(VpnTunnelInfoPtrOutput)
}

type StepArrayOutput struct{ *pulumi.OutputState }

func (StepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Step)(nil)).Elem()
}

func (o StepArrayOutput) ToStepArrayOutput() StepArrayOutput {
	return o
}

func (o StepArrayOutput) ToStepArrayOutputWithContext(ctx context.Context) StepArrayOutput {
	return o
}

func (o StepArrayOutput) Index(i pulumi.IntInput) StepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Step {
		return vs[0].([]Step)[vs[1].(int)]
	}).(StepOutput)
}

// Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered Steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). ```|---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final))```
type Trace struct {
	// Derived from the source and destination endpoints definition, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
	EndpointInfo *EndpointInfo `pulumi:"endpointInfo"`
	// A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
	Steps []Step `pulumi:"steps"`
}

// TraceInput is an input type that accepts TraceArgs and TraceOutput values.
// You can construct a concrete instance of `TraceInput` via:
//
//          TraceArgs{...}
type TraceInput interface {
	pulumi.Input

	ToTraceOutput() TraceOutput
	ToTraceOutputWithContext(context.Context) TraceOutput
}

// Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered Steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). ```|---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final))```
type TraceArgs struct {
	// Derived from the source and destination endpoints definition, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
	EndpointInfo EndpointInfoPtrInput `pulumi:"endpointInfo"`
	// A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
	Steps StepArrayInput `pulumi:"steps"`
}

func (TraceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Trace)(nil)).Elem()
}

func (i TraceArgs) ToTraceOutput() TraceOutput {
	return i.ToTraceOutputWithContext(context.Background())
}

func (i TraceArgs) ToTraceOutputWithContext(ctx context.Context) TraceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TraceOutput)
}

// TraceArrayInput is an input type that accepts TraceArray and TraceArrayOutput values.
// You can construct a concrete instance of `TraceArrayInput` via:
//
//          TraceArray{ TraceArgs{...} }
type TraceArrayInput interface {
	pulumi.Input

	ToTraceArrayOutput() TraceArrayOutput
	ToTraceArrayOutputWithContext(context.Context) TraceArrayOutput
}

type TraceArray []TraceInput

func (TraceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Trace)(nil)).Elem()
}

func (i TraceArray) ToTraceArrayOutput() TraceArrayOutput {
	return i.ToTraceArrayOutputWithContext(context.Background())
}

func (i TraceArray) ToTraceArrayOutputWithContext(ctx context.Context) TraceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TraceArrayOutput)
}

// Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered Steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). ```|---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final))```
type TraceOutput struct{ *pulumi.OutputState }

func (TraceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Trace)(nil)).Elem()
}

func (o TraceOutput) ToTraceOutput() TraceOutput {
	return o
}

func (o TraceOutput) ToTraceOutputWithContext(ctx context.Context) TraceOutput {
	return o
}

// Derived from the source and destination endpoints definition, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
func (o TraceOutput) EndpointInfo() EndpointInfoPtrOutput {
	return o.ApplyT(func(v Trace) *EndpointInfo { return v.EndpointInfo }).(EndpointInfoPtrOutput)
}

// A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
func (o TraceOutput) Steps() StepArrayOutput {
	return o.ApplyT(func(v Trace) []Step { return v.Steps }).(StepArrayOutput)
}

type TraceArrayOutput struct{ *pulumi.OutputState }

func (TraceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Trace)(nil)).Elem()
}

func (o TraceArrayOutput) ToTraceArrayOutput() TraceArrayOutput {
	return o
}

func (o TraceArrayOutput) ToTraceArrayOutputWithContext(ctx context.Context) TraceArrayOutput {
	return o
}

func (o TraceArrayOutput) Index(i pulumi.IntInput) TraceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Trace {
		return vs[0].([]Trace)[vs[1].(int)]
	}).(TraceOutput)
}

// For display only. Metadata associated with a Compute Engine VPN gateway.
type VpnGatewayInfo struct {
	// Name of a VPN gateway.
	DisplayName *string `pulumi:"displayName"`
	// IP address of the VPN gateway.
	IpAddress *string `pulumi:"ipAddress"`
	// URI of a Compute Engine network where the VPN gateway is configured.
	NetworkUri *string `pulumi:"networkUri"`
	// Name of a GCP region where this VPN gateway is configured.
	Region *string `pulumi:"region"`
	// URI of a VPN gateway.
	Uri *string `pulumi:"uri"`
	// A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.
	VpnTunnelUri *string `pulumi:"vpnTunnelUri"`
}

// VpnGatewayInfoInput is an input type that accepts VpnGatewayInfoArgs and VpnGatewayInfoOutput values.
// You can construct a concrete instance of `VpnGatewayInfoInput` via:
//
//          VpnGatewayInfoArgs{...}
type VpnGatewayInfoInput interface {
	pulumi.Input

	ToVpnGatewayInfoOutput() VpnGatewayInfoOutput
	ToVpnGatewayInfoOutputWithContext(context.Context) VpnGatewayInfoOutput
}

// For display only. Metadata associated with a Compute Engine VPN gateway.
type VpnGatewayInfoArgs struct {
	// Name of a VPN gateway.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// IP address of the VPN gateway.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// URI of a Compute Engine network where the VPN gateway is configured.
	NetworkUri pulumi.StringPtrInput `pulumi:"networkUri"`
	// Name of a GCP region where this VPN gateway is configured.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// URI of a VPN gateway.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.
	VpnTunnelUri pulumi.StringPtrInput `pulumi:"vpnTunnelUri"`
}

func (VpnGatewayInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayInfo)(nil)).Elem()
}

func (i VpnGatewayInfoArgs) ToVpnGatewayInfoOutput() VpnGatewayInfoOutput {
	return i.ToVpnGatewayInfoOutputWithContext(context.Background())
}

func (i VpnGatewayInfoArgs) ToVpnGatewayInfoOutputWithContext(ctx context.Context) VpnGatewayInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayInfoOutput)
}

func (i VpnGatewayInfoArgs) ToVpnGatewayInfoPtrOutput() VpnGatewayInfoPtrOutput {
	return i.ToVpnGatewayInfoPtrOutputWithContext(context.Background())
}

func (i VpnGatewayInfoArgs) ToVpnGatewayInfoPtrOutputWithContext(ctx context.Context) VpnGatewayInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayInfoOutput).ToVpnGatewayInfoPtrOutputWithContext(ctx)
}

// VpnGatewayInfoPtrInput is an input type that accepts VpnGatewayInfoArgs, VpnGatewayInfoPtr and VpnGatewayInfoPtrOutput values.
// You can construct a concrete instance of `VpnGatewayInfoPtrInput` via:
//
//          VpnGatewayInfoArgs{...}
//
//  or:
//
//          nil
type VpnGatewayInfoPtrInput interface {
	pulumi.Input

	ToVpnGatewayInfoPtrOutput() VpnGatewayInfoPtrOutput
	ToVpnGatewayInfoPtrOutputWithContext(context.Context) VpnGatewayInfoPtrOutput
}

type vpnGatewayInfoPtrType VpnGatewayInfoArgs

func VpnGatewayInfoPtr(v *VpnGatewayInfoArgs) VpnGatewayInfoPtrInput {
	return (*vpnGatewayInfoPtrType)(v)
}

func (*vpnGatewayInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnGatewayInfo)(nil)).Elem()
}

func (i *vpnGatewayInfoPtrType) ToVpnGatewayInfoPtrOutput() VpnGatewayInfoPtrOutput {
	return i.ToVpnGatewayInfoPtrOutputWithContext(context.Background())
}

func (i *vpnGatewayInfoPtrType) ToVpnGatewayInfoPtrOutputWithContext(ctx context.Context) VpnGatewayInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayInfoPtrOutput)
}

// For display only. Metadata associated with a Compute Engine VPN gateway.
type VpnGatewayInfoOutput struct{ *pulumi.OutputState }

func (VpnGatewayInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayInfo)(nil)).Elem()
}

func (o VpnGatewayInfoOutput) ToVpnGatewayInfoOutput() VpnGatewayInfoOutput {
	return o
}

func (o VpnGatewayInfoOutput) ToVpnGatewayInfoOutputWithContext(ctx context.Context) VpnGatewayInfoOutput {
	return o
}

func (o VpnGatewayInfoOutput) ToVpnGatewayInfoPtrOutput() VpnGatewayInfoPtrOutput {
	return o.ToVpnGatewayInfoPtrOutputWithContext(context.Background())
}

func (o VpnGatewayInfoOutput) ToVpnGatewayInfoPtrOutputWithContext(ctx context.Context) VpnGatewayInfoPtrOutput {
	return o.ApplyT(func(v VpnGatewayInfo) *VpnGatewayInfo {
		return &v
	}).(VpnGatewayInfoPtrOutput)
}

// Name of a VPN gateway.
func (o VpnGatewayInfoOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnGatewayInfo) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// IP address of the VPN gateway.
func (o VpnGatewayInfoOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnGatewayInfo) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine network where the VPN gateway is configured.
func (o VpnGatewayInfoOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnGatewayInfo) *string { return v.NetworkUri }).(pulumi.StringPtrOutput)
}

// Name of a GCP region where this VPN gateway is configured.
func (o VpnGatewayInfoOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnGatewayInfo) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// URI of a VPN gateway.
func (o VpnGatewayInfoOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnGatewayInfo) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.
func (o VpnGatewayInfoOutput) VpnTunnelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnGatewayInfo) *string { return v.VpnTunnelUri }).(pulumi.StringPtrOutput)
}

type VpnGatewayInfoPtrOutput struct{ *pulumi.OutputState }

func (VpnGatewayInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnGatewayInfo)(nil)).Elem()
}

func (o VpnGatewayInfoPtrOutput) ToVpnGatewayInfoPtrOutput() VpnGatewayInfoPtrOutput {
	return o
}

func (o VpnGatewayInfoPtrOutput) ToVpnGatewayInfoPtrOutputWithContext(ctx context.Context) VpnGatewayInfoPtrOutput {
	return o
}

func (o VpnGatewayInfoPtrOutput) Elem() VpnGatewayInfoOutput {
	return o.ApplyT(func(v *VpnGatewayInfo) VpnGatewayInfo { return *v }).(VpnGatewayInfoOutput)
}

// Name of a VPN gateway.
func (o VpnGatewayInfoPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnGatewayInfo) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// IP address of the VPN gateway.
func (o VpnGatewayInfoPtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnGatewayInfo) *string {
		if v == nil {
			return nil
		}
		return v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine network where the VPN gateway is configured.
func (o VpnGatewayInfoPtrOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnGatewayInfo) *string {
		if v == nil {
			return nil
		}
		return v.NetworkUri
	}).(pulumi.StringPtrOutput)
}

// Name of a GCP region where this VPN gateway is configured.
func (o VpnGatewayInfoPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnGatewayInfo) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// URI of a VPN gateway.
func (o VpnGatewayInfoPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnGatewayInfo) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.
func (o VpnGatewayInfoPtrOutput) VpnTunnelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnGatewayInfo) *string {
		if v == nil {
			return nil
		}
		return v.VpnTunnelUri
	}).(pulumi.StringPtrOutput)
}

// For display only. Metadata associated with a Compute Engine VPN tunnel.
type VpnTunnelInfo struct {
	// Name of a VPN tunnel.
	DisplayName *string `pulumi:"displayName"`
	// URI of a Compute Engine network where the VPN tunnel is configured.
	NetworkUri *string `pulumi:"networkUri"`
	// Name of a GCP region where this VPN tunnel is configured.
	Region *string `pulumi:"region"`
	// URI of a VPN gateway at remote end of the tunnel.
	RemoteGateway *string `pulumi:"remoteGateway"`
	// Remote VPN gateway's IP address.
	RemoteGatewayIp *string `pulumi:"remoteGatewayIp"`
	// Type of the routing policy.
	RoutingType *string `pulumi:"routingType"`
	// URI of the VPN gateway at local end of the tunnel.
	SourceGateway *string `pulumi:"sourceGateway"`
	// Local VPN gateway's IP address.
	SourceGatewayIp *string `pulumi:"sourceGatewayIp"`
	// URI of a VPN tunnel.
	Uri *string `pulumi:"uri"`
}

// VpnTunnelInfoInput is an input type that accepts VpnTunnelInfoArgs and VpnTunnelInfoOutput values.
// You can construct a concrete instance of `VpnTunnelInfoInput` via:
//
//          VpnTunnelInfoArgs{...}
type VpnTunnelInfoInput interface {
	pulumi.Input

	ToVpnTunnelInfoOutput() VpnTunnelInfoOutput
	ToVpnTunnelInfoOutputWithContext(context.Context) VpnTunnelInfoOutput
}

// For display only. Metadata associated with a Compute Engine VPN tunnel.
type VpnTunnelInfoArgs struct {
	// Name of a VPN tunnel.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// URI of a Compute Engine network where the VPN tunnel is configured.
	NetworkUri pulumi.StringPtrInput `pulumi:"networkUri"`
	// Name of a GCP region where this VPN tunnel is configured.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// URI of a VPN gateway at remote end of the tunnel.
	RemoteGateway pulumi.StringPtrInput `pulumi:"remoteGateway"`
	// Remote VPN gateway's IP address.
	RemoteGatewayIp pulumi.StringPtrInput `pulumi:"remoteGatewayIp"`
	// Type of the routing policy.
	RoutingType pulumi.StringPtrInput `pulumi:"routingType"`
	// URI of the VPN gateway at local end of the tunnel.
	SourceGateway pulumi.StringPtrInput `pulumi:"sourceGateway"`
	// Local VPN gateway's IP address.
	SourceGatewayIp pulumi.StringPtrInput `pulumi:"sourceGatewayIp"`
	// URI of a VPN tunnel.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (VpnTunnelInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnTunnelInfo)(nil)).Elem()
}

func (i VpnTunnelInfoArgs) ToVpnTunnelInfoOutput() VpnTunnelInfoOutput {
	return i.ToVpnTunnelInfoOutputWithContext(context.Background())
}

func (i VpnTunnelInfoArgs) ToVpnTunnelInfoOutputWithContext(ctx context.Context) VpnTunnelInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnTunnelInfoOutput)
}

func (i VpnTunnelInfoArgs) ToVpnTunnelInfoPtrOutput() VpnTunnelInfoPtrOutput {
	return i.ToVpnTunnelInfoPtrOutputWithContext(context.Background())
}

func (i VpnTunnelInfoArgs) ToVpnTunnelInfoPtrOutputWithContext(ctx context.Context) VpnTunnelInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnTunnelInfoOutput).ToVpnTunnelInfoPtrOutputWithContext(ctx)
}

// VpnTunnelInfoPtrInput is an input type that accepts VpnTunnelInfoArgs, VpnTunnelInfoPtr and VpnTunnelInfoPtrOutput values.
// You can construct a concrete instance of `VpnTunnelInfoPtrInput` via:
//
//          VpnTunnelInfoArgs{...}
//
//  or:
//
//          nil
type VpnTunnelInfoPtrInput interface {
	pulumi.Input

	ToVpnTunnelInfoPtrOutput() VpnTunnelInfoPtrOutput
	ToVpnTunnelInfoPtrOutputWithContext(context.Context) VpnTunnelInfoPtrOutput
}

type vpnTunnelInfoPtrType VpnTunnelInfoArgs

func VpnTunnelInfoPtr(v *VpnTunnelInfoArgs) VpnTunnelInfoPtrInput {
	return (*vpnTunnelInfoPtrType)(v)
}

func (*vpnTunnelInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnTunnelInfo)(nil)).Elem()
}

func (i *vpnTunnelInfoPtrType) ToVpnTunnelInfoPtrOutput() VpnTunnelInfoPtrOutput {
	return i.ToVpnTunnelInfoPtrOutputWithContext(context.Background())
}

func (i *vpnTunnelInfoPtrType) ToVpnTunnelInfoPtrOutputWithContext(ctx context.Context) VpnTunnelInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnTunnelInfoPtrOutput)
}

// For display only. Metadata associated with a Compute Engine VPN tunnel.
type VpnTunnelInfoOutput struct{ *pulumi.OutputState }

func (VpnTunnelInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnTunnelInfo)(nil)).Elem()
}

func (o VpnTunnelInfoOutput) ToVpnTunnelInfoOutput() VpnTunnelInfoOutput {
	return o
}

func (o VpnTunnelInfoOutput) ToVpnTunnelInfoOutputWithContext(ctx context.Context) VpnTunnelInfoOutput {
	return o
}

func (o VpnTunnelInfoOutput) ToVpnTunnelInfoPtrOutput() VpnTunnelInfoPtrOutput {
	return o.ToVpnTunnelInfoPtrOutputWithContext(context.Background())
}

func (o VpnTunnelInfoOutput) ToVpnTunnelInfoPtrOutputWithContext(ctx context.Context) VpnTunnelInfoPtrOutput {
	return o.ApplyT(func(v VpnTunnelInfo) *VpnTunnelInfo {
		return &v
	}).(VpnTunnelInfoPtrOutput)
}

// Name of a VPN tunnel.
func (o VpnTunnelInfoOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnTunnelInfo) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine network where the VPN tunnel is configured.
func (o VpnTunnelInfoOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnTunnelInfo) *string { return v.NetworkUri }).(pulumi.StringPtrOutput)
}

// Name of a GCP region where this VPN tunnel is configured.
func (o VpnTunnelInfoOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnTunnelInfo) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// URI of a VPN gateway at remote end of the tunnel.
func (o VpnTunnelInfoOutput) RemoteGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnTunnelInfo) *string { return v.RemoteGateway }).(pulumi.StringPtrOutput)
}

// Remote VPN gateway's IP address.
func (o VpnTunnelInfoOutput) RemoteGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnTunnelInfo) *string { return v.RemoteGatewayIp }).(pulumi.StringPtrOutput)
}

// Type of the routing policy.
func (o VpnTunnelInfoOutput) RoutingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnTunnelInfo) *string { return v.RoutingType }).(pulumi.StringPtrOutput)
}

// URI of the VPN gateway at local end of the tunnel.
func (o VpnTunnelInfoOutput) SourceGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnTunnelInfo) *string { return v.SourceGateway }).(pulumi.StringPtrOutput)
}

// Local VPN gateway's IP address.
func (o VpnTunnelInfoOutput) SourceGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnTunnelInfo) *string { return v.SourceGatewayIp }).(pulumi.StringPtrOutput)
}

// URI of a VPN tunnel.
func (o VpnTunnelInfoOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnTunnelInfo) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type VpnTunnelInfoPtrOutput struct{ *pulumi.OutputState }

func (VpnTunnelInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnTunnelInfo)(nil)).Elem()
}

func (o VpnTunnelInfoPtrOutput) ToVpnTunnelInfoPtrOutput() VpnTunnelInfoPtrOutput {
	return o
}

func (o VpnTunnelInfoPtrOutput) ToVpnTunnelInfoPtrOutputWithContext(ctx context.Context) VpnTunnelInfoPtrOutput {
	return o
}

func (o VpnTunnelInfoPtrOutput) Elem() VpnTunnelInfoOutput {
	return o.ApplyT(func(v *VpnTunnelInfo) VpnTunnelInfo { return *v }).(VpnTunnelInfoOutput)
}

// Name of a VPN tunnel.
func (o VpnTunnelInfoPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnTunnelInfo) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URI of a Compute Engine network where the VPN tunnel is configured.
func (o VpnTunnelInfoPtrOutput) NetworkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnTunnelInfo) *string {
		if v == nil {
			return nil
		}
		return v.NetworkUri
	}).(pulumi.StringPtrOutput)
}

// Name of a GCP region where this VPN tunnel is configured.
func (o VpnTunnelInfoPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnTunnelInfo) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// URI of a VPN gateway at remote end of the tunnel.
func (o VpnTunnelInfoPtrOutput) RemoteGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnTunnelInfo) *string {
		if v == nil {
			return nil
		}
		return v.RemoteGateway
	}).(pulumi.StringPtrOutput)
}

// Remote VPN gateway's IP address.
func (o VpnTunnelInfoPtrOutput) RemoteGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnTunnelInfo) *string {
		if v == nil {
			return nil
		}
		return v.RemoteGatewayIp
	}).(pulumi.StringPtrOutput)
}

// Type of the routing policy.
func (o VpnTunnelInfoPtrOutput) RoutingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnTunnelInfo) *string {
		if v == nil {
			return nil
		}
		return v.RoutingType
	}).(pulumi.StringPtrOutput)
}

// URI of the VPN gateway at local end of the tunnel.
func (o VpnTunnelInfoPtrOutput) SourceGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnTunnelInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceGateway
	}).(pulumi.StringPtrOutput)
}

// Local VPN gateway's IP address.
func (o VpnTunnelInfoPtrOutput) SourceGatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnTunnelInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceGatewayIp
	}).(pulumi.StringPtrOutput)
}

// URI of a VPN tunnel.
func (o VpnTunnelInfoPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnTunnelInfo) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AbortInfoOutput{})
	pulumi.RegisterOutputType(AbortInfoPtrOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(DeliverInfoOutput{})
	pulumi.RegisterOutputType(DeliverInfoPtrOutput{})
	pulumi.RegisterOutputType(DropInfoOutput{})
	pulumi.RegisterOutputType(DropInfoPtrOutput{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointPtrOutput{})
	pulumi.RegisterOutputType(EndpointInfoOutput{})
	pulumi.RegisterOutputType(EndpointInfoPtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(FirewallInfoOutput{})
	pulumi.RegisterOutputType(FirewallInfoPtrOutput{})
	pulumi.RegisterOutputType(ForwardInfoOutput{})
	pulumi.RegisterOutputType(ForwardInfoPtrOutput{})
	pulumi.RegisterOutputType(ForwardingRuleInfoOutput{})
	pulumi.RegisterOutputType(ForwardingRuleInfoPtrOutput{})
	pulumi.RegisterOutputType(InstanceInfoOutput{})
	pulumi.RegisterOutputType(InstanceInfoPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerBackendOutput{})
	pulumi.RegisterOutputType(LoadBalancerBackendArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerInfoOutput{})
	pulumi.RegisterOutputType(LoadBalancerInfoPtrOutput{})
	pulumi.RegisterOutputType(NetworkInfoOutput{})
	pulumi.RegisterOutputType(NetworkInfoPtrOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(ReachabilityDetailsOutput{})
	pulumi.RegisterOutputType(ReachabilityDetailsPtrOutput{})
	pulumi.RegisterOutputType(RouteInfoOutput{})
	pulumi.RegisterOutputType(RouteInfoPtrOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
	pulumi.RegisterOutputType(StepOutput{})
	pulumi.RegisterOutputType(StepArrayOutput{})
	pulumi.RegisterOutputType(TraceOutput{})
	pulumi.RegisterOutputType(TraceArrayOutput{})
	pulumi.RegisterOutputType(VpnGatewayInfoOutput{})
	pulumi.RegisterOutputType(VpnGatewayInfoPtrOutput{})
	pulumi.RegisterOutputType(VpnTunnelInfoOutput{})
	pulumi.RegisterOutputType(VpnTunnelInfoPtrOutput{})
}
