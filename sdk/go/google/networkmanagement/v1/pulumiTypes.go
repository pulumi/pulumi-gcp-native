// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Details of the final state "abort" and associated resource.
type AbortInfoResponse struct {
	// Causes that the analysis is aborted.
	Cause string `pulumi:"cause"`
	// URI of the resource that caused the abort.
	ResourceUri string `pulumi:"resourceUri"`
}

// AbortInfoResponseInput is an input type that accepts AbortInfoResponseArgs and AbortInfoResponseOutput values.
// You can construct a concrete instance of `AbortInfoResponseInput` via:
//
//          AbortInfoResponseArgs{...}
type AbortInfoResponseInput interface {
	pulumi.Input

	ToAbortInfoResponseOutput() AbortInfoResponseOutput
	ToAbortInfoResponseOutputWithContext(context.Context) AbortInfoResponseOutput
}

// Details of the final state "abort" and associated resource.
type AbortInfoResponseArgs struct {
	// Causes that the analysis is aborted.
	Cause pulumi.StringInput `pulumi:"cause"`
	// URI of the resource that caused the abort.
	ResourceUri pulumi.StringInput `pulumi:"resourceUri"`
}

func (AbortInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AbortInfoResponse)(nil)).Elem()
}

func (i AbortInfoResponseArgs) ToAbortInfoResponseOutput() AbortInfoResponseOutput {
	return i.ToAbortInfoResponseOutputWithContext(context.Background())
}

func (i AbortInfoResponseArgs) ToAbortInfoResponseOutputWithContext(ctx context.Context) AbortInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AbortInfoResponseOutput)
}

// Details of the final state "abort" and associated resource.
type AbortInfoResponseOutput struct{ *pulumi.OutputState }

func (AbortInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AbortInfoResponse)(nil)).Elem()
}

func (o AbortInfoResponseOutput) ToAbortInfoResponseOutput() AbortInfoResponseOutput {
	return o
}

func (o AbortInfoResponseOutput) ToAbortInfoResponseOutputWithContext(ctx context.Context) AbortInfoResponseOutput {
	return o
}

// Causes that the analysis is aborted.
func (o AbortInfoResponseOutput) Cause() pulumi.StringOutput {
	return o.ApplyT(func(v AbortInfoResponse) string { return v.Cause }).(pulumi.StringOutput)
}

// URI of the resource that caused the abort.
func (o AbortInfoResponseOutput) ResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v AbortInfoResponse) string { return v.ResourceUri }).(pulumi.StringOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// AuditConfigResponseInput is an input type that accepts AuditConfigResponseArgs and AuditConfigResponseOutput values.
// You can construct a concrete instance of `AuditConfigResponseInput` via:
//
//          AuditConfigResponseArgs{...}
type AuditConfigResponseInput interface {
	pulumi.Input

	ToAuditConfigResponseOutput() AuditConfigResponseOutput
	ToAuditConfigResponseOutputWithContext(context.Context) AuditConfigResponseOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigResponseArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringInput `pulumi:"service"`
}

func (AuditConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return i.ToAuditConfigResponseOutputWithContext(context.Background())
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseOutput)
}

// AuditConfigResponseArrayInput is an input type that accepts AuditConfigResponseArray and AuditConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditConfigResponseArrayInput` via:
//
//          AuditConfigResponseArray{ AuditConfigResponseArgs{...} }
type AuditConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput
	ToAuditConfigResponseArrayOutputWithContext(context.Context) AuditConfigResponseArrayOutput
}

type AuditConfigResponseArray []AuditConfigResponseInput

func (AuditConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return i.ToAuditConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// AuditLogConfigResponseInput is an input type that accepts AuditLogConfigResponseArgs and AuditLogConfigResponseOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseInput` via:
//
//          AuditLogConfigResponseArgs{...}
type AuditLogConfigResponseInput interface {
	pulumi.Input

	ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput
	ToAuditLogConfigResponseOutputWithContext(context.Context) AuditLogConfigResponseOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringInput `pulumi:"logType"`
}

func (AuditLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return i.ToAuditLogConfigResponseOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseOutput)
}

// AuditLogConfigResponseArrayInput is an input type that accepts AuditLogConfigResponseArray and AuditLogConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseArrayInput` via:
//
//          AuditLogConfigResponseArray{ AuditLogConfigResponseArgs{...} }
type AuditLogConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput
	ToAuditLogConfigResponseArrayOutputWithContext(context.Context) AuditLogConfigResponseArrayOutput
}

type AuditLogConfigResponseArray []AuditLogConfigResponseInput

func (AuditLogConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return i.ToAuditLogConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members` with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// BindingResponseInput is an input type that accepts BindingResponseArgs and BindingResponseOutput values.
// You can construct a concrete instance of `BindingResponseInput` via:
//
//          BindingResponseArgs{...}
type BindingResponseInput interface {
	pulumi.Input

	ToBindingResponseOutput() BindingResponseOutput
	ToBindingResponseOutputWithContext(context.Context) BindingResponseOutput
}

// Associates `members` with a `role`.
type BindingResponseArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponseInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringInput `pulumi:"role"`
}

func (BindingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (i BindingResponseArgs) ToBindingResponseOutput() BindingResponseOutput {
	return i.ToBindingResponseOutputWithContext(context.Background())
}

func (i BindingResponseArgs) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseOutput)
}

// BindingResponseArrayInput is an input type that accepts BindingResponseArray and BindingResponseArrayOutput values.
// You can construct a concrete instance of `BindingResponseArrayInput` via:
//
//          BindingResponseArray{ BindingResponseArgs{...} }
type BindingResponseArrayInput interface {
	pulumi.Input

	ToBindingResponseArrayOutput() BindingResponseArrayOutput
	ToBindingResponseArrayOutputWithContext(context.Context) BindingResponseArrayOutput
}

type BindingResponseArray []BindingResponseInput

func (BindingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (i BindingResponseArray) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return i.ToBindingResponseArrayOutputWithContext(context.Background())
}

func (i BindingResponseArray) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseArrayOutput)
}

// Associates `members` with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// For display only. Metadata associated with a Cloud SQL instance.
type CloudSQLInstanceInfoResponse struct {
	// Name of a Cloud SQL instance.
	DisplayName string `pulumi:"displayName"`
	// External IP address of a Cloud SQL instance.
	ExternalIp string `pulumi:"externalIp"`
	// Internal IP address of a Cloud SQL instance.
	InternalIp string `pulumi:"internalIp"`
	// URI of a Cloud SQL instance network or empty string if the instance does not have one.
	NetworkUri string `pulumi:"networkUri"`
	// Region in which the Cloud SQL instance is running.
	Region string `pulumi:"region"`
	// URI of a Cloud SQL instance.
	Uri string `pulumi:"uri"`
}

// CloudSQLInstanceInfoResponseInput is an input type that accepts CloudSQLInstanceInfoResponseArgs and CloudSQLInstanceInfoResponseOutput values.
// You can construct a concrete instance of `CloudSQLInstanceInfoResponseInput` via:
//
//          CloudSQLInstanceInfoResponseArgs{...}
type CloudSQLInstanceInfoResponseInput interface {
	pulumi.Input

	ToCloudSQLInstanceInfoResponseOutput() CloudSQLInstanceInfoResponseOutput
	ToCloudSQLInstanceInfoResponseOutputWithContext(context.Context) CloudSQLInstanceInfoResponseOutput
}

// For display only. Metadata associated with a Cloud SQL instance.
type CloudSQLInstanceInfoResponseArgs struct {
	// Name of a Cloud SQL instance.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// External IP address of a Cloud SQL instance.
	ExternalIp pulumi.StringInput `pulumi:"externalIp"`
	// Internal IP address of a Cloud SQL instance.
	InternalIp pulumi.StringInput `pulumi:"internalIp"`
	// URI of a Cloud SQL instance network or empty string if the instance does not have one.
	NetworkUri pulumi.StringInput `pulumi:"networkUri"`
	// Region in which the Cloud SQL instance is running.
	Region pulumi.StringInput `pulumi:"region"`
	// URI of a Cloud SQL instance.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (CloudSQLInstanceInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSQLInstanceInfoResponse)(nil)).Elem()
}

func (i CloudSQLInstanceInfoResponseArgs) ToCloudSQLInstanceInfoResponseOutput() CloudSQLInstanceInfoResponseOutput {
	return i.ToCloudSQLInstanceInfoResponseOutputWithContext(context.Background())
}

func (i CloudSQLInstanceInfoResponseArgs) ToCloudSQLInstanceInfoResponseOutputWithContext(ctx context.Context) CloudSQLInstanceInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSQLInstanceInfoResponseOutput)
}

// For display only. Metadata associated with a Cloud SQL instance.
type CloudSQLInstanceInfoResponseOutput struct{ *pulumi.OutputState }

func (CloudSQLInstanceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSQLInstanceInfoResponse)(nil)).Elem()
}

func (o CloudSQLInstanceInfoResponseOutput) ToCloudSQLInstanceInfoResponseOutput() CloudSQLInstanceInfoResponseOutput {
	return o
}

func (o CloudSQLInstanceInfoResponseOutput) ToCloudSQLInstanceInfoResponseOutputWithContext(ctx context.Context) CloudSQLInstanceInfoResponseOutput {
	return o
}

// Name of a Cloud SQL instance.
func (o CloudSQLInstanceInfoResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSQLInstanceInfoResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// External IP address of a Cloud SQL instance.
func (o CloudSQLInstanceInfoResponseOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSQLInstanceInfoResponse) string { return v.ExternalIp }).(pulumi.StringOutput)
}

// Internal IP address of a Cloud SQL instance.
func (o CloudSQLInstanceInfoResponseOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSQLInstanceInfoResponse) string { return v.InternalIp }).(pulumi.StringOutput)
}

// URI of a Cloud SQL instance network or empty string if the instance does not have one.
func (o CloudSQLInstanceInfoResponseOutput) NetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSQLInstanceInfoResponse) string { return v.NetworkUri }).(pulumi.StringOutput)
}

// Region in which the Cloud SQL instance is running.
func (o CloudSQLInstanceInfoResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSQLInstanceInfoResponse) string { return v.Region }).(pulumi.StringOutput)
}

// URI of a Cloud SQL instance.
func (o CloudSQLInstanceInfoResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSQLInstanceInfoResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Details of the final state "deliver" and associated resource.
type DeliverInfoResponse struct {
	// URI of the resource that the packet is delivered to.
	ResourceUri string `pulumi:"resourceUri"`
	// Target type where the packet is delivered to.
	Target string `pulumi:"target"`
}

// DeliverInfoResponseInput is an input type that accepts DeliverInfoResponseArgs and DeliverInfoResponseOutput values.
// You can construct a concrete instance of `DeliverInfoResponseInput` via:
//
//          DeliverInfoResponseArgs{...}
type DeliverInfoResponseInput interface {
	pulumi.Input

	ToDeliverInfoResponseOutput() DeliverInfoResponseOutput
	ToDeliverInfoResponseOutputWithContext(context.Context) DeliverInfoResponseOutput
}

// Details of the final state "deliver" and associated resource.
type DeliverInfoResponseArgs struct {
	// URI of the resource that the packet is delivered to.
	ResourceUri pulumi.StringInput `pulumi:"resourceUri"`
	// Target type where the packet is delivered to.
	Target pulumi.StringInput `pulumi:"target"`
}

func (DeliverInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliverInfoResponse)(nil)).Elem()
}

func (i DeliverInfoResponseArgs) ToDeliverInfoResponseOutput() DeliverInfoResponseOutput {
	return i.ToDeliverInfoResponseOutputWithContext(context.Background())
}

func (i DeliverInfoResponseArgs) ToDeliverInfoResponseOutputWithContext(ctx context.Context) DeliverInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeliverInfoResponseOutput)
}

// Details of the final state "deliver" and associated resource.
type DeliverInfoResponseOutput struct{ *pulumi.OutputState }

func (DeliverInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeliverInfoResponse)(nil)).Elem()
}

func (o DeliverInfoResponseOutput) ToDeliverInfoResponseOutput() DeliverInfoResponseOutput {
	return o
}

func (o DeliverInfoResponseOutput) ToDeliverInfoResponseOutputWithContext(ctx context.Context) DeliverInfoResponseOutput {
	return o
}

// URI of the resource that the packet is delivered to.
func (o DeliverInfoResponseOutput) ResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v DeliverInfoResponse) string { return v.ResourceUri }).(pulumi.StringOutput)
}

// Target type where the packet is delivered to.
func (o DeliverInfoResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v DeliverInfoResponse) string { return v.Target }).(pulumi.StringOutput)
}

// Details of the final state "drop" and associated resource.
type DropInfoResponse struct {
	// Cause that the packet is dropped.
	Cause string `pulumi:"cause"`
	// URI of the resource that caused the drop.
	ResourceUri string `pulumi:"resourceUri"`
}

// DropInfoResponseInput is an input type that accepts DropInfoResponseArgs and DropInfoResponseOutput values.
// You can construct a concrete instance of `DropInfoResponseInput` via:
//
//          DropInfoResponseArgs{...}
type DropInfoResponseInput interface {
	pulumi.Input

	ToDropInfoResponseOutput() DropInfoResponseOutput
	ToDropInfoResponseOutputWithContext(context.Context) DropInfoResponseOutput
}

// Details of the final state "drop" and associated resource.
type DropInfoResponseArgs struct {
	// Cause that the packet is dropped.
	Cause pulumi.StringInput `pulumi:"cause"`
	// URI of the resource that caused the drop.
	ResourceUri pulumi.StringInput `pulumi:"resourceUri"`
}

func (DropInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DropInfoResponse)(nil)).Elem()
}

func (i DropInfoResponseArgs) ToDropInfoResponseOutput() DropInfoResponseOutput {
	return i.ToDropInfoResponseOutputWithContext(context.Background())
}

func (i DropInfoResponseArgs) ToDropInfoResponseOutputWithContext(ctx context.Context) DropInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropInfoResponseOutput)
}

// Details of the final state "drop" and associated resource.
type DropInfoResponseOutput struct{ *pulumi.OutputState }

func (DropInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DropInfoResponse)(nil)).Elem()
}

func (o DropInfoResponseOutput) ToDropInfoResponseOutput() DropInfoResponseOutput {
	return o
}

func (o DropInfoResponseOutput) ToDropInfoResponseOutputWithContext(ctx context.Context) DropInfoResponseOutput {
	return o
}

// Cause that the packet is dropped.
func (o DropInfoResponseOutput) Cause() pulumi.StringOutput {
	return o.ApplyT(func(v DropInfoResponse) string { return v.Cause }).(pulumi.StringOutput)
}

// URI of the resource that caused the drop.
func (o DropInfoResponseOutput) ResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v DropInfoResponse) string { return v.ResourceUri }).(pulumi.StringOutput)
}

// Source or destination of the Connectivity Test.
type Endpoint struct {
	// A [Cloud SQL](https://cloud.google.com/sql) instance URI.
	CloudSqlInstance *string `pulumi:"cloudSqlInstance"`
	// A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).
	GkeMasterCluster *string `pulumi:"gkeMasterCluster"`
	// A Compute Engine instance URI.
	Instance *string `pulumi:"instance"`
	// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
	IpAddress *string `pulumi:"ipAddress"`
	// A Compute Engine network URI.
	Network *string `pulumi:"network"`
	// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
	NetworkType *EndpointNetworkType `pulumi:"networkType"`
	// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
	Port *int `pulumi:"port"`
	// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
	Project *string `pulumi:"project"`
}

// EndpointInput is an input type that accepts EndpointArgs and EndpointOutput values.
// You can construct a concrete instance of `EndpointInput` via:
//
//          EndpointArgs{...}
type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(context.Context) EndpointOutput
}

// Source or destination of the Connectivity Test.
type EndpointArgs struct {
	// A [Cloud SQL](https://cloud.google.com/sql) instance URI.
	CloudSqlInstance pulumi.StringPtrInput `pulumi:"cloudSqlInstance"`
	// A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).
	GkeMasterCluster pulumi.StringPtrInput `pulumi:"gkeMasterCluster"`
	// A Compute Engine instance URI.
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// A Compute Engine network URI.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
	NetworkType EndpointNetworkTypePtrInput `pulumi:"networkType"`
	// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (i EndpointArgs) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i EndpointArgs) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

func (i EndpointArgs) ToEndpointPtrOutput() EndpointPtrOutput {
	return i.ToEndpointPtrOutputWithContext(context.Background())
}

func (i EndpointArgs) ToEndpointPtrOutputWithContext(ctx context.Context) EndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput).ToEndpointPtrOutputWithContext(ctx)
}

// EndpointPtrInput is an input type that accepts EndpointArgs, EndpointPtr and EndpointPtrOutput values.
// You can construct a concrete instance of `EndpointPtrInput` via:
//
//          EndpointArgs{...}
//
//  or:
//
//          nil
type EndpointPtrInput interface {
	pulumi.Input

	ToEndpointPtrOutput() EndpointPtrOutput
	ToEndpointPtrOutputWithContext(context.Context) EndpointPtrOutput
}

type endpointPtrType EndpointArgs

func EndpointPtr(v *EndpointArgs) EndpointPtrInput {
	return (*endpointPtrType)(v)
}

func (*endpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *endpointPtrType) ToEndpointPtrOutput() EndpointPtrOutput {
	return i.ToEndpointPtrOutputWithContext(context.Background())
}

func (i *endpointPtrType) ToEndpointPtrOutputWithContext(ctx context.Context) EndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointPtrOutput)
}

// Source or destination of the Connectivity Test.
type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointPtrOutput() EndpointPtrOutput {
	return o.ToEndpointPtrOutputWithContext(context.Background())
}

func (o EndpointOutput) ToEndpointPtrOutputWithContext(ctx context.Context) EndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Endpoint) *Endpoint {
		return &v
	}).(EndpointPtrOutput)
}

// A [Cloud SQL](https://cloud.google.com/sql) instance URI.
func (o EndpointOutput) CloudSqlInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.CloudSqlInstance }).(pulumi.StringPtrOutput)
}

// A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).
func (o EndpointOutput) GkeMasterCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.GkeMasterCluster }).(pulumi.StringPtrOutput)
}

// A Compute Engine instance URI.
func (o EndpointOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
func (o EndpointOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// A Compute Engine network URI.
func (o EndpointOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
func (o EndpointOutput) NetworkType() EndpointNetworkTypePtrOutput {
	return o.ApplyT(func(v Endpoint) *EndpointNetworkType { return v.NetworkType }).(EndpointNetworkTypePtrOutput)
}

// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
func (o EndpointOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Endpoint) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
func (o EndpointOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type EndpointPtrOutput struct{ *pulumi.OutputState }

func (EndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointPtrOutput) ToEndpointPtrOutput() EndpointPtrOutput {
	return o
}

func (o EndpointPtrOutput) ToEndpointPtrOutputWithContext(ctx context.Context) EndpointPtrOutput {
	return o
}

func (o EndpointPtrOutput) Elem() EndpointOutput {
	return o.ApplyT(func(v *Endpoint) Endpoint {
		if v != nil {
			return *v
		}
		var ret Endpoint
		return ret
	}).(EndpointOutput)
}

// A [Cloud SQL](https://cloud.google.com/sql) instance URI.
func (o EndpointPtrOutput) CloudSqlInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.CloudSqlInstance
	}).(pulumi.StringPtrOutput)
}

// A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).
func (o EndpointPtrOutput) GkeMasterCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.GkeMasterCluster
	}).(pulumi.StringPtrOutput)
}

// A Compute Engine instance URI.
func (o EndpointPtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
func (o EndpointPtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// A Compute Engine network URI.
func (o EndpointPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
func (o EndpointPtrOutput) NetworkType() EndpointNetworkTypePtrOutput {
	return o.ApplyT(func(v *Endpoint) *EndpointNetworkType {
		if v == nil {
			return nil
		}
		return v.NetworkType
	}).(EndpointNetworkTypePtrOutput)
}

// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
func (o EndpointPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Endpoint) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
func (o EndpointPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
type EndpointInfoResponse struct {
	// Destination IP address.
	DestinationIp string `pulumi:"destinationIp"`
	// URI of the network where this packet is sent to.
	DestinationNetworkUri string `pulumi:"destinationNetworkUri"`
	// Destination port. Only valid when protocol is TCP or UDP.
	DestinationPort int `pulumi:"destinationPort"`
	// IP protocol in string format, for example: "TCP", "UDP", "ICMP".
	Protocol string `pulumi:"protocol"`
	// Source IP address.
	SourceIp string `pulumi:"sourceIp"`
	// URI of the network where this packet originates from.
	SourceNetworkUri string `pulumi:"sourceNetworkUri"`
	// Source port. Only valid when protocol is TCP or UDP.
	SourcePort int `pulumi:"sourcePort"`
}

// EndpointInfoResponseInput is an input type that accepts EndpointInfoResponseArgs and EndpointInfoResponseOutput values.
// You can construct a concrete instance of `EndpointInfoResponseInput` via:
//
//          EndpointInfoResponseArgs{...}
type EndpointInfoResponseInput interface {
	pulumi.Input

	ToEndpointInfoResponseOutput() EndpointInfoResponseOutput
	ToEndpointInfoResponseOutputWithContext(context.Context) EndpointInfoResponseOutput
}

// For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
type EndpointInfoResponseArgs struct {
	// Destination IP address.
	DestinationIp pulumi.StringInput `pulumi:"destinationIp"`
	// URI of the network where this packet is sent to.
	DestinationNetworkUri pulumi.StringInput `pulumi:"destinationNetworkUri"`
	// Destination port. Only valid when protocol is TCP or UDP.
	DestinationPort pulumi.IntInput `pulumi:"destinationPort"`
	// IP protocol in string format, for example: "TCP", "UDP", "ICMP".
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Source IP address.
	SourceIp pulumi.StringInput `pulumi:"sourceIp"`
	// URI of the network where this packet originates from.
	SourceNetworkUri pulumi.StringInput `pulumi:"sourceNetworkUri"`
	// Source port. Only valid when protocol is TCP or UDP.
	SourcePort pulumi.IntInput `pulumi:"sourcePort"`
}

func (EndpointInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointInfoResponse)(nil)).Elem()
}

func (i EndpointInfoResponseArgs) ToEndpointInfoResponseOutput() EndpointInfoResponseOutput {
	return i.ToEndpointInfoResponseOutputWithContext(context.Background())
}

func (i EndpointInfoResponseArgs) ToEndpointInfoResponseOutputWithContext(ctx context.Context) EndpointInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointInfoResponseOutput)
}

// For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
type EndpointInfoResponseOutput struct{ *pulumi.OutputState }

func (EndpointInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointInfoResponse)(nil)).Elem()
}

func (o EndpointInfoResponseOutput) ToEndpointInfoResponseOutput() EndpointInfoResponseOutput {
	return o
}

func (o EndpointInfoResponseOutput) ToEndpointInfoResponseOutputWithContext(ctx context.Context) EndpointInfoResponseOutput {
	return o
}

// Destination IP address.
func (o EndpointInfoResponseOutput) DestinationIp() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointInfoResponse) string { return v.DestinationIp }).(pulumi.StringOutput)
}

// URI of the network where this packet is sent to.
func (o EndpointInfoResponseOutput) DestinationNetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointInfoResponse) string { return v.DestinationNetworkUri }).(pulumi.StringOutput)
}

// Destination port. Only valid when protocol is TCP or UDP.
func (o EndpointInfoResponseOutput) DestinationPort() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointInfoResponse) int { return v.DestinationPort }).(pulumi.IntOutput)
}

// IP protocol in string format, for example: "TCP", "UDP", "ICMP".
func (o EndpointInfoResponseOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointInfoResponse) string { return v.Protocol }).(pulumi.StringOutput)
}

// Source IP address.
func (o EndpointInfoResponseOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointInfoResponse) string { return v.SourceIp }).(pulumi.StringOutput)
}

// URI of the network where this packet originates from.
func (o EndpointInfoResponseOutput) SourceNetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointInfoResponse) string { return v.SourceNetworkUri }).(pulumi.StringOutput)
}

// Source port. Only valid when protocol is TCP or UDP.
func (o EndpointInfoResponseOutput) SourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointInfoResponse) int { return v.SourcePort }).(pulumi.IntOutput)
}

// Source or destination of the Connectivity Test.
type EndpointResponse struct {
	// A [Cloud SQL](https://cloud.google.com/sql) instance URI.
	CloudSqlInstance string `pulumi:"cloudSqlInstance"`
	// A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).
	GkeMasterCluster string `pulumi:"gkeMasterCluster"`
	// A Compute Engine instance URI.
	Instance string `pulumi:"instance"`
	// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
	IpAddress string `pulumi:"ipAddress"`
	// A Compute Engine network URI.
	Network string `pulumi:"network"`
	// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
	NetworkType string `pulumi:"networkType"`
	// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
	Port int `pulumi:"port"`
	// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
	Project string `pulumi:"project"`
}

// EndpointResponseInput is an input type that accepts EndpointResponseArgs and EndpointResponseOutput values.
// You can construct a concrete instance of `EndpointResponseInput` via:
//
//          EndpointResponseArgs{...}
type EndpointResponseInput interface {
	pulumi.Input

	ToEndpointResponseOutput() EndpointResponseOutput
	ToEndpointResponseOutputWithContext(context.Context) EndpointResponseOutput
}

// Source or destination of the Connectivity Test.
type EndpointResponseArgs struct {
	// A [Cloud SQL](https://cloud.google.com/sql) instance URI.
	CloudSqlInstance pulumi.StringInput `pulumi:"cloudSqlInstance"`
	// A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).
	GkeMasterCluster pulumi.StringInput `pulumi:"gkeMasterCluster"`
	// A Compute Engine instance URI.
	Instance pulumi.StringInput `pulumi:"instance"`
	// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// A Compute Engine network URI.
	Network pulumi.StringInput `pulumi:"network"`
	// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
	Port pulumi.IntInput `pulumi:"port"`
	// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
	Project pulumi.StringInput `pulumi:"project"`
}

func (EndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointResponse)(nil)).Elem()
}

func (i EndpointResponseArgs) ToEndpointResponseOutput() EndpointResponseOutput {
	return i.ToEndpointResponseOutputWithContext(context.Background())
}

func (i EndpointResponseArgs) ToEndpointResponseOutputWithContext(ctx context.Context) EndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointResponseOutput)
}

func (i EndpointResponseArgs) ToEndpointResponsePtrOutput() EndpointResponsePtrOutput {
	return i.ToEndpointResponsePtrOutputWithContext(context.Background())
}

func (i EndpointResponseArgs) ToEndpointResponsePtrOutputWithContext(ctx context.Context) EndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointResponseOutput).ToEndpointResponsePtrOutputWithContext(ctx)
}

// EndpointResponsePtrInput is an input type that accepts EndpointResponseArgs, EndpointResponsePtr and EndpointResponsePtrOutput values.
// You can construct a concrete instance of `EndpointResponsePtrInput` via:
//
//          EndpointResponseArgs{...}
//
//  or:
//
//          nil
type EndpointResponsePtrInput interface {
	pulumi.Input

	ToEndpointResponsePtrOutput() EndpointResponsePtrOutput
	ToEndpointResponsePtrOutputWithContext(context.Context) EndpointResponsePtrOutput
}

type endpointResponsePtrType EndpointResponseArgs

func EndpointResponsePtr(v *EndpointResponseArgs) EndpointResponsePtrInput {
	return (*endpointResponsePtrType)(v)
}

func (*endpointResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointResponse)(nil)).Elem()
}

func (i *endpointResponsePtrType) ToEndpointResponsePtrOutput() EndpointResponsePtrOutput {
	return i.ToEndpointResponsePtrOutputWithContext(context.Background())
}

func (i *endpointResponsePtrType) ToEndpointResponsePtrOutputWithContext(ctx context.Context) EndpointResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointResponsePtrOutput)
}

// Source or destination of the Connectivity Test.
type EndpointResponseOutput struct{ *pulumi.OutputState }

func (EndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointResponse)(nil)).Elem()
}

func (o EndpointResponseOutput) ToEndpointResponseOutput() EndpointResponseOutput {
	return o
}

func (o EndpointResponseOutput) ToEndpointResponseOutputWithContext(ctx context.Context) EndpointResponseOutput {
	return o
}

func (o EndpointResponseOutput) ToEndpointResponsePtrOutput() EndpointResponsePtrOutput {
	return o.ToEndpointResponsePtrOutputWithContext(context.Background())
}

func (o EndpointResponseOutput) ToEndpointResponsePtrOutputWithContext(ctx context.Context) EndpointResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointResponse) *EndpointResponse {
		return &v
	}).(EndpointResponsePtrOutput)
}

// A [Cloud SQL](https://cloud.google.com/sql) instance URI.
func (o EndpointResponseOutput) CloudSqlInstance() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointResponse) string { return v.CloudSqlInstance }).(pulumi.StringOutput)
}

// A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).
func (o EndpointResponseOutput) GkeMasterCluster() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointResponse) string { return v.GkeMasterCluster }).(pulumi.StringOutput)
}

// A Compute Engine instance URI.
func (o EndpointResponseOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointResponse) string { return v.Instance }).(pulumi.StringOutput)
}

// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
func (o EndpointResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// A Compute Engine network URI.
func (o EndpointResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
func (o EndpointResponseOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointResponse) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
func (o EndpointResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
func (o EndpointResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointResponse) string { return v.Project }).(pulumi.StringOutput)
}

type EndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (EndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointResponse)(nil)).Elem()
}

func (o EndpointResponsePtrOutput) ToEndpointResponsePtrOutput() EndpointResponsePtrOutput {
	return o
}

func (o EndpointResponsePtrOutput) ToEndpointResponsePtrOutputWithContext(ctx context.Context) EndpointResponsePtrOutput {
	return o
}

func (o EndpointResponsePtrOutput) Elem() EndpointResponseOutput {
	return o.ApplyT(func(v *EndpointResponse) EndpointResponse {
		if v != nil {
			return *v
		}
		var ret EndpointResponse
		return ret
	}).(EndpointResponseOutput)
}

// A [Cloud SQL](https://cloud.google.com/sql) instance URI.
func (o EndpointResponsePtrOutput) CloudSqlInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CloudSqlInstance
	}).(pulumi.StringPtrOutput)
}

// A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).
func (o EndpointResponsePtrOutput) GkeMasterCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GkeMasterCluster
	}).(pulumi.StringPtrOutput)
}

// A Compute Engine instance URI.
func (o EndpointResponsePtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Instance
	}).(pulumi.StringPtrOutput)
}

// The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](/load-balancing/docs/load-balancing-overview).
func (o EndpointResponsePtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// A Compute Engine network URI.
func (o EndpointResponsePtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Network
	}).(pulumi.StringPtrOutput)
}

// Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.
func (o EndpointResponsePtrOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NetworkType
	}).(pulumi.StringPtrOutput)
}

// The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.
func (o EndpointResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EndpointResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.
func (o EndpointResponsePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// ExprResponseInput is an input type that accepts ExprResponseArgs and ExprResponseOutput values.
// You can construct a concrete instance of `ExprResponseInput` via:
//
//          ExprResponseArgs{...}
type ExprResponseInput interface {
	pulumi.Input

	ToExprResponseOutput() ExprResponseOutput
	ToExprResponseOutputWithContext(context.Context) ExprResponseOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ExprResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (i ExprResponseArgs) ToExprResponseOutput() ExprResponseOutput {
	return i.ToExprResponseOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
type FirewallInfoResponse struct {
	// Possible values: ALLOW, DENY
	Action string `pulumi:"action"`
	// Possible values: INGRESS, EGRESS
	Direction string `pulumi:"direction"`
	// The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
	DisplayName string `pulumi:"displayName"`
	// The firewall rule's type.
	FirewallRuleType string `pulumi:"firewallRuleType"`
	// The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
	NetworkUri string `pulumi:"networkUri"`
	// The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
	Policy string `pulumi:"policy"`
	// The priority of the firewall rule.
	Priority int `pulumi:"priority"`
	// The target service accounts specified by the firewall rule.
	TargetServiceAccounts []string `pulumi:"targetServiceAccounts"`
	// The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
	TargetTags []string `pulumi:"targetTags"`
	// The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
	Uri string `pulumi:"uri"`
}

// FirewallInfoResponseInput is an input type that accepts FirewallInfoResponseArgs and FirewallInfoResponseOutput values.
// You can construct a concrete instance of `FirewallInfoResponseInput` via:
//
//          FirewallInfoResponseArgs{...}
type FirewallInfoResponseInput interface {
	pulumi.Input

	ToFirewallInfoResponseOutput() FirewallInfoResponseOutput
	ToFirewallInfoResponseOutputWithContext(context.Context) FirewallInfoResponseOutput
}

// For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
type FirewallInfoResponseArgs struct {
	// Possible values: ALLOW, DENY
	Action pulumi.StringInput `pulumi:"action"`
	// Possible values: INGRESS, EGRESS
	Direction pulumi.StringInput `pulumi:"direction"`
	// The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The firewall rule's type.
	FirewallRuleType pulumi.StringInput `pulumi:"firewallRuleType"`
	// The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
	NetworkUri pulumi.StringInput `pulumi:"networkUri"`
	// The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
	Policy pulumi.StringInput `pulumi:"policy"`
	// The priority of the firewall rule.
	Priority pulumi.IntInput `pulumi:"priority"`
	// The target service accounts specified by the firewall rule.
	TargetServiceAccounts pulumi.StringArrayInput `pulumi:"targetServiceAccounts"`
	// The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
	TargetTags pulumi.StringArrayInput `pulumi:"targetTags"`
	// The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (FirewallInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallInfoResponse)(nil)).Elem()
}

func (i FirewallInfoResponseArgs) ToFirewallInfoResponseOutput() FirewallInfoResponseOutput {
	return i.ToFirewallInfoResponseOutputWithContext(context.Background())
}

func (i FirewallInfoResponseArgs) ToFirewallInfoResponseOutputWithContext(ctx context.Context) FirewallInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInfoResponseOutput)
}

// For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
type FirewallInfoResponseOutput struct{ *pulumi.OutputState }

func (FirewallInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallInfoResponse)(nil)).Elem()
}

func (o FirewallInfoResponseOutput) ToFirewallInfoResponseOutput() FirewallInfoResponseOutput {
	return o
}

func (o FirewallInfoResponseOutput) ToFirewallInfoResponseOutputWithContext(ctx context.Context) FirewallInfoResponseOutput {
	return o
}

// Possible values: ALLOW, DENY
func (o FirewallInfoResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallInfoResponse) string { return v.Action }).(pulumi.StringOutput)
}

// Possible values: INGRESS, EGRESS
func (o FirewallInfoResponseOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallInfoResponse) string { return v.Direction }).(pulumi.StringOutput)
}

// The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
func (o FirewallInfoResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallInfoResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The firewall rule's type.
func (o FirewallInfoResponseOutput) FirewallRuleType() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallInfoResponse) string { return v.FirewallRuleType }).(pulumi.StringOutput)
}

// The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
func (o FirewallInfoResponseOutput) NetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallInfoResponse) string { return v.NetworkUri }).(pulumi.StringOutput)
}

// The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
func (o FirewallInfoResponseOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallInfoResponse) string { return v.Policy }).(pulumi.StringOutput)
}

// The priority of the firewall rule.
func (o FirewallInfoResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v FirewallInfoResponse) int { return v.Priority }).(pulumi.IntOutput)
}

// The target service accounts specified by the firewall rule.
func (o FirewallInfoResponseOutput) TargetServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallInfoResponse) []string { return v.TargetServiceAccounts }).(pulumi.StringArrayOutput)
}

// The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
func (o FirewallInfoResponseOutput) TargetTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallInfoResponse) []string { return v.TargetTags }).(pulumi.StringArrayOutput)
}

// The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
func (o FirewallInfoResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallInfoResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Details of the final state "forward" and associated resource.
type ForwardInfoResponse struct {
	// URI of the resource that the packet is forwarded to.
	ResourceUri string `pulumi:"resourceUri"`
	// Target type where this packet is forwarded to.
	Target string `pulumi:"target"`
}

// ForwardInfoResponseInput is an input type that accepts ForwardInfoResponseArgs and ForwardInfoResponseOutput values.
// You can construct a concrete instance of `ForwardInfoResponseInput` via:
//
//          ForwardInfoResponseArgs{...}
type ForwardInfoResponseInput interface {
	pulumi.Input

	ToForwardInfoResponseOutput() ForwardInfoResponseOutput
	ToForwardInfoResponseOutputWithContext(context.Context) ForwardInfoResponseOutput
}

// Details of the final state "forward" and associated resource.
type ForwardInfoResponseArgs struct {
	// URI of the resource that the packet is forwarded to.
	ResourceUri pulumi.StringInput `pulumi:"resourceUri"`
	// Target type where this packet is forwarded to.
	Target pulumi.StringInput `pulumi:"target"`
}

func (ForwardInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardInfoResponse)(nil)).Elem()
}

func (i ForwardInfoResponseArgs) ToForwardInfoResponseOutput() ForwardInfoResponseOutput {
	return i.ToForwardInfoResponseOutputWithContext(context.Background())
}

func (i ForwardInfoResponseArgs) ToForwardInfoResponseOutputWithContext(ctx context.Context) ForwardInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardInfoResponseOutput)
}

// Details of the final state "forward" and associated resource.
type ForwardInfoResponseOutput struct{ *pulumi.OutputState }

func (ForwardInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardInfoResponse)(nil)).Elem()
}

func (o ForwardInfoResponseOutput) ToForwardInfoResponseOutput() ForwardInfoResponseOutput {
	return o
}

func (o ForwardInfoResponseOutput) ToForwardInfoResponseOutputWithContext(ctx context.Context) ForwardInfoResponseOutput {
	return o
}

// URI of the resource that the packet is forwarded to.
func (o ForwardInfoResponseOutput) ResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardInfoResponse) string { return v.ResourceUri }).(pulumi.StringOutput)
}

// Target type where this packet is forwarded to.
func (o ForwardInfoResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardInfoResponse) string { return v.Target }).(pulumi.StringOutput)
}

// For display only. Metadata associated with a Compute Engine forwarding rule.
type ForwardingRuleInfoResponse struct {
	// Name of a Compute Engine forwarding rule.
	DisplayName string `pulumi:"displayName"`
	// Port range defined in the forwarding rule that matches the test.
	MatchedPortRange string `pulumi:"matchedPortRange"`
	// Protocol defined in the forwarding rule that matches the test.
	MatchedProtocol string `pulumi:"matchedProtocol"`
	// Network URI. Only valid for Internal Load Balancer.
	NetworkUri string `pulumi:"networkUri"`
	// Target type of the forwarding rule.
	Target string `pulumi:"target"`
	// URI of a Compute Engine forwarding rule.
	Uri string `pulumi:"uri"`
	// VIP of the forwarding rule.
	Vip string `pulumi:"vip"`
}

// ForwardingRuleInfoResponseInput is an input type that accepts ForwardingRuleInfoResponseArgs and ForwardingRuleInfoResponseOutput values.
// You can construct a concrete instance of `ForwardingRuleInfoResponseInput` via:
//
//          ForwardingRuleInfoResponseArgs{...}
type ForwardingRuleInfoResponseInput interface {
	pulumi.Input

	ToForwardingRuleInfoResponseOutput() ForwardingRuleInfoResponseOutput
	ToForwardingRuleInfoResponseOutputWithContext(context.Context) ForwardingRuleInfoResponseOutput
}

// For display only. Metadata associated with a Compute Engine forwarding rule.
type ForwardingRuleInfoResponseArgs struct {
	// Name of a Compute Engine forwarding rule.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Port range defined in the forwarding rule that matches the test.
	MatchedPortRange pulumi.StringInput `pulumi:"matchedPortRange"`
	// Protocol defined in the forwarding rule that matches the test.
	MatchedProtocol pulumi.StringInput `pulumi:"matchedProtocol"`
	// Network URI. Only valid for Internal Load Balancer.
	NetworkUri pulumi.StringInput `pulumi:"networkUri"`
	// Target type of the forwarding rule.
	Target pulumi.StringInput `pulumi:"target"`
	// URI of a Compute Engine forwarding rule.
	Uri pulumi.StringInput `pulumi:"uri"`
	// VIP of the forwarding rule.
	Vip pulumi.StringInput `pulumi:"vip"`
}

func (ForwardingRuleInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleInfoResponse)(nil)).Elem()
}

func (i ForwardingRuleInfoResponseArgs) ToForwardingRuleInfoResponseOutput() ForwardingRuleInfoResponseOutput {
	return i.ToForwardingRuleInfoResponseOutputWithContext(context.Background())
}

func (i ForwardingRuleInfoResponseArgs) ToForwardingRuleInfoResponseOutputWithContext(ctx context.Context) ForwardingRuleInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleInfoResponseOutput)
}

// For display only. Metadata associated with a Compute Engine forwarding rule.
type ForwardingRuleInfoResponseOutput struct{ *pulumi.OutputState }

func (ForwardingRuleInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleInfoResponse)(nil)).Elem()
}

func (o ForwardingRuleInfoResponseOutput) ToForwardingRuleInfoResponseOutput() ForwardingRuleInfoResponseOutput {
	return o
}

func (o ForwardingRuleInfoResponseOutput) ToForwardingRuleInfoResponseOutputWithContext(ctx context.Context) ForwardingRuleInfoResponseOutput {
	return o
}

// Name of a Compute Engine forwarding rule.
func (o ForwardingRuleInfoResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleInfoResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Port range defined in the forwarding rule that matches the test.
func (o ForwardingRuleInfoResponseOutput) MatchedPortRange() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleInfoResponse) string { return v.MatchedPortRange }).(pulumi.StringOutput)
}

// Protocol defined in the forwarding rule that matches the test.
func (o ForwardingRuleInfoResponseOutput) MatchedProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleInfoResponse) string { return v.MatchedProtocol }).(pulumi.StringOutput)
}

// Network URI. Only valid for Internal Load Balancer.
func (o ForwardingRuleInfoResponseOutput) NetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleInfoResponse) string { return v.NetworkUri }).(pulumi.StringOutput)
}

// Target type of the forwarding rule.
func (o ForwardingRuleInfoResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleInfoResponse) string { return v.Target }).(pulumi.StringOutput)
}

// URI of a Compute Engine forwarding rule.
func (o ForwardingRuleInfoResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleInfoResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// VIP of the forwarding rule.
func (o ForwardingRuleInfoResponseOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleInfoResponse) string { return v.Vip }).(pulumi.StringOutput)
}

// For display only. Metadata associated with a Google Kubernetes Engine (GKE) cluster master.
type GKEMasterInfoResponse struct {
	// URI of a GKE cluster network.
	ClusterNetworkUri string `pulumi:"clusterNetworkUri"`
	// URI of a GKE cluster.
	ClusterUri string `pulumi:"clusterUri"`
	// External IP address of a GKE cluster master.
	ExternalIp string `pulumi:"externalIp"`
	// Internal IP address of a GKE cluster master.
	InternalIp string `pulumi:"internalIp"`
}

// GKEMasterInfoResponseInput is an input type that accepts GKEMasterInfoResponseArgs and GKEMasterInfoResponseOutput values.
// You can construct a concrete instance of `GKEMasterInfoResponseInput` via:
//
//          GKEMasterInfoResponseArgs{...}
type GKEMasterInfoResponseInput interface {
	pulumi.Input

	ToGKEMasterInfoResponseOutput() GKEMasterInfoResponseOutput
	ToGKEMasterInfoResponseOutputWithContext(context.Context) GKEMasterInfoResponseOutput
}

// For display only. Metadata associated with a Google Kubernetes Engine (GKE) cluster master.
type GKEMasterInfoResponseArgs struct {
	// URI of a GKE cluster network.
	ClusterNetworkUri pulumi.StringInput `pulumi:"clusterNetworkUri"`
	// URI of a GKE cluster.
	ClusterUri pulumi.StringInput `pulumi:"clusterUri"`
	// External IP address of a GKE cluster master.
	ExternalIp pulumi.StringInput `pulumi:"externalIp"`
	// Internal IP address of a GKE cluster master.
	InternalIp pulumi.StringInput `pulumi:"internalIp"`
}

func (GKEMasterInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GKEMasterInfoResponse)(nil)).Elem()
}

func (i GKEMasterInfoResponseArgs) ToGKEMasterInfoResponseOutput() GKEMasterInfoResponseOutput {
	return i.ToGKEMasterInfoResponseOutputWithContext(context.Background())
}

func (i GKEMasterInfoResponseArgs) ToGKEMasterInfoResponseOutputWithContext(ctx context.Context) GKEMasterInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GKEMasterInfoResponseOutput)
}

// For display only. Metadata associated with a Google Kubernetes Engine (GKE) cluster master.
type GKEMasterInfoResponseOutput struct{ *pulumi.OutputState }

func (GKEMasterInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GKEMasterInfoResponse)(nil)).Elem()
}

func (o GKEMasterInfoResponseOutput) ToGKEMasterInfoResponseOutput() GKEMasterInfoResponseOutput {
	return o
}

func (o GKEMasterInfoResponseOutput) ToGKEMasterInfoResponseOutputWithContext(ctx context.Context) GKEMasterInfoResponseOutput {
	return o
}

// URI of a GKE cluster network.
func (o GKEMasterInfoResponseOutput) ClusterNetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v GKEMasterInfoResponse) string { return v.ClusterNetworkUri }).(pulumi.StringOutput)
}

// URI of a GKE cluster.
func (o GKEMasterInfoResponseOutput) ClusterUri() pulumi.StringOutput {
	return o.ApplyT(func(v GKEMasterInfoResponse) string { return v.ClusterUri }).(pulumi.StringOutput)
}

// External IP address of a GKE cluster master.
func (o GKEMasterInfoResponseOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v GKEMasterInfoResponse) string { return v.ExternalIp }).(pulumi.StringOutput)
}

// Internal IP address of a GKE cluster master.
func (o GKEMasterInfoResponseOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v GKEMasterInfoResponse) string { return v.InternalIp }).(pulumi.StringOutput)
}

// For display only. Metadata associated with a Compute Engine instance.
type InstanceInfoResponse struct {
	// Name of a Compute Engine instance.
	DisplayName string `pulumi:"displayName"`
	// External IP address of the network interface.
	ExternalIp string `pulumi:"externalIp"`
	// Name of the network interface of a Compute Engine instance.
	Interface string `pulumi:"interface"`
	// Internal IP address of the network interface.
	InternalIp string `pulumi:"internalIp"`
	// Network tags configured on the instance.
	NetworkTags []string `pulumi:"networkTags"`
	// URI of a Compute Engine network.
	NetworkUri string `pulumi:"networkUri"`
	// Service account authorized for the instance.
	ServiceAccount string `pulumi:"serviceAccount"`
	// URI of a Compute Engine instance.
	Uri string `pulumi:"uri"`
}

// InstanceInfoResponseInput is an input type that accepts InstanceInfoResponseArgs and InstanceInfoResponseOutput values.
// You can construct a concrete instance of `InstanceInfoResponseInput` via:
//
//          InstanceInfoResponseArgs{...}
type InstanceInfoResponseInput interface {
	pulumi.Input

	ToInstanceInfoResponseOutput() InstanceInfoResponseOutput
	ToInstanceInfoResponseOutputWithContext(context.Context) InstanceInfoResponseOutput
}

// For display only. Metadata associated with a Compute Engine instance.
type InstanceInfoResponseArgs struct {
	// Name of a Compute Engine instance.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// External IP address of the network interface.
	ExternalIp pulumi.StringInput `pulumi:"externalIp"`
	// Name of the network interface of a Compute Engine instance.
	Interface pulumi.StringInput `pulumi:"interface"`
	// Internal IP address of the network interface.
	InternalIp pulumi.StringInput `pulumi:"internalIp"`
	// Network tags configured on the instance.
	NetworkTags pulumi.StringArrayInput `pulumi:"networkTags"`
	// URI of a Compute Engine network.
	NetworkUri pulumi.StringInput `pulumi:"networkUri"`
	// Service account authorized for the instance.
	ServiceAccount pulumi.StringInput `pulumi:"serviceAccount"`
	// URI of a Compute Engine instance.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (InstanceInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceInfoResponse)(nil)).Elem()
}

func (i InstanceInfoResponseArgs) ToInstanceInfoResponseOutput() InstanceInfoResponseOutput {
	return i.ToInstanceInfoResponseOutputWithContext(context.Background())
}

func (i InstanceInfoResponseArgs) ToInstanceInfoResponseOutputWithContext(ctx context.Context) InstanceInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceInfoResponseOutput)
}

// For display only. Metadata associated with a Compute Engine instance.
type InstanceInfoResponseOutput struct{ *pulumi.OutputState }

func (InstanceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceInfoResponse)(nil)).Elem()
}

func (o InstanceInfoResponseOutput) ToInstanceInfoResponseOutput() InstanceInfoResponseOutput {
	return o
}

func (o InstanceInfoResponseOutput) ToInstanceInfoResponseOutputWithContext(ctx context.Context) InstanceInfoResponseOutput {
	return o
}

// Name of a Compute Engine instance.
func (o InstanceInfoResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceInfoResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// External IP address of the network interface.
func (o InstanceInfoResponseOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceInfoResponse) string { return v.ExternalIp }).(pulumi.StringOutput)
}

// Name of the network interface of a Compute Engine instance.
func (o InstanceInfoResponseOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceInfoResponse) string { return v.Interface }).(pulumi.StringOutput)
}

// Internal IP address of the network interface.
func (o InstanceInfoResponseOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceInfoResponse) string { return v.InternalIp }).(pulumi.StringOutput)
}

// Network tags configured on the instance.
func (o InstanceInfoResponseOutput) NetworkTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceInfoResponse) []string { return v.NetworkTags }).(pulumi.StringArrayOutput)
}

// URI of a Compute Engine network.
func (o InstanceInfoResponseOutput) NetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceInfoResponse) string { return v.NetworkUri }).(pulumi.StringOutput)
}

// Service account authorized for the instance.
func (o InstanceInfoResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceInfoResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// URI of a Compute Engine instance.
func (o InstanceInfoResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceInfoResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// For display only. Metadata associated with a specific load balancer backend.
type LoadBalancerBackendResponse struct {
	// Name of a Compute Engine instance or network endpoint.
	DisplayName string `pulumi:"displayName"`
	// A list of firewall rule URIs allowing probes from health check IP ranges.
	HealthCheckAllowingFirewallRules []string `pulumi:"healthCheckAllowingFirewallRules"`
	// A list of firewall rule URIs blocking probes from health check IP ranges.
	HealthCheckBlockingFirewallRules []string `pulumi:"healthCheckBlockingFirewallRules"`
	// State of the health check firewall configuration.
	HealthCheckFirewallState string `pulumi:"healthCheckFirewallState"`
	// URI of a Compute Engine instance or network endpoint.
	Uri string `pulumi:"uri"`
}

// LoadBalancerBackendResponseInput is an input type that accepts LoadBalancerBackendResponseArgs and LoadBalancerBackendResponseOutput values.
// You can construct a concrete instance of `LoadBalancerBackendResponseInput` via:
//
//          LoadBalancerBackendResponseArgs{...}
type LoadBalancerBackendResponseInput interface {
	pulumi.Input

	ToLoadBalancerBackendResponseOutput() LoadBalancerBackendResponseOutput
	ToLoadBalancerBackendResponseOutputWithContext(context.Context) LoadBalancerBackendResponseOutput
}

// For display only. Metadata associated with a specific load balancer backend.
type LoadBalancerBackendResponseArgs struct {
	// Name of a Compute Engine instance or network endpoint.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// A list of firewall rule URIs allowing probes from health check IP ranges.
	HealthCheckAllowingFirewallRules pulumi.StringArrayInput `pulumi:"healthCheckAllowingFirewallRules"`
	// A list of firewall rule URIs blocking probes from health check IP ranges.
	HealthCheckBlockingFirewallRules pulumi.StringArrayInput `pulumi:"healthCheckBlockingFirewallRules"`
	// State of the health check firewall configuration.
	HealthCheckFirewallState pulumi.StringInput `pulumi:"healthCheckFirewallState"`
	// URI of a Compute Engine instance or network endpoint.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (LoadBalancerBackendResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerBackendResponse)(nil)).Elem()
}

func (i LoadBalancerBackendResponseArgs) ToLoadBalancerBackendResponseOutput() LoadBalancerBackendResponseOutput {
	return i.ToLoadBalancerBackendResponseOutputWithContext(context.Background())
}

func (i LoadBalancerBackendResponseArgs) ToLoadBalancerBackendResponseOutputWithContext(ctx context.Context) LoadBalancerBackendResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerBackendResponseOutput)
}

// LoadBalancerBackendResponseArrayInput is an input type that accepts LoadBalancerBackendResponseArray and LoadBalancerBackendResponseArrayOutput values.
// You can construct a concrete instance of `LoadBalancerBackendResponseArrayInput` via:
//
//          LoadBalancerBackendResponseArray{ LoadBalancerBackendResponseArgs{...} }
type LoadBalancerBackendResponseArrayInput interface {
	pulumi.Input

	ToLoadBalancerBackendResponseArrayOutput() LoadBalancerBackendResponseArrayOutput
	ToLoadBalancerBackendResponseArrayOutputWithContext(context.Context) LoadBalancerBackendResponseArrayOutput
}

type LoadBalancerBackendResponseArray []LoadBalancerBackendResponseInput

func (LoadBalancerBackendResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerBackendResponse)(nil)).Elem()
}

func (i LoadBalancerBackendResponseArray) ToLoadBalancerBackendResponseArrayOutput() LoadBalancerBackendResponseArrayOutput {
	return i.ToLoadBalancerBackendResponseArrayOutputWithContext(context.Background())
}

func (i LoadBalancerBackendResponseArray) ToLoadBalancerBackendResponseArrayOutputWithContext(ctx context.Context) LoadBalancerBackendResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerBackendResponseArrayOutput)
}

// For display only. Metadata associated with a specific load balancer backend.
type LoadBalancerBackendResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancerBackendResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerBackendResponse)(nil)).Elem()
}

func (o LoadBalancerBackendResponseOutput) ToLoadBalancerBackendResponseOutput() LoadBalancerBackendResponseOutput {
	return o
}

func (o LoadBalancerBackendResponseOutput) ToLoadBalancerBackendResponseOutputWithContext(ctx context.Context) LoadBalancerBackendResponseOutput {
	return o
}

// Name of a Compute Engine instance or network endpoint.
func (o LoadBalancerBackendResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerBackendResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// A list of firewall rule URIs allowing probes from health check IP ranges.
func (o LoadBalancerBackendResponseOutput) HealthCheckAllowingFirewallRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerBackendResponse) []string { return v.HealthCheckAllowingFirewallRules }).(pulumi.StringArrayOutput)
}

// A list of firewall rule URIs blocking probes from health check IP ranges.
func (o LoadBalancerBackendResponseOutput) HealthCheckBlockingFirewallRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerBackendResponse) []string { return v.HealthCheckBlockingFirewallRules }).(pulumi.StringArrayOutput)
}

// State of the health check firewall configuration.
func (o LoadBalancerBackendResponseOutput) HealthCheckFirewallState() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerBackendResponse) string { return v.HealthCheckFirewallState }).(pulumi.StringOutput)
}

// URI of a Compute Engine instance or network endpoint.
func (o LoadBalancerBackendResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerBackendResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type LoadBalancerBackendResponseArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerBackendResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerBackendResponse)(nil)).Elem()
}

func (o LoadBalancerBackendResponseArrayOutput) ToLoadBalancerBackendResponseArrayOutput() LoadBalancerBackendResponseArrayOutput {
	return o
}

func (o LoadBalancerBackendResponseArrayOutput) ToLoadBalancerBackendResponseArrayOutputWithContext(ctx context.Context) LoadBalancerBackendResponseArrayOutput {
	return o
}

func (o LoadBalancerBackendResponseArrayOutput) Index(i pulumi.IntInput) LoadBalancerBackendResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerBackendResponse {
		return vs[0].([]LoadBalancerBackendResponse)[vs[1].(int)]
	}).(LoadBalancerBackendResponseOutput)
}

// For display only. Metadata associated with a load balancer.
type LoadBalancerInfoResponse struct {
	// Type of load balancer's backend configuration.
	BackendType string `pulumi:"backendType"`
	// Backend configuration URI.
	BackendUri string `pulumi:"backendUri"`
	// Information for the loadbalancer backends.
	Backends []LoadBalancerBackendResponse `pulumi:"backends"`
	// URI of the health check for the load balancer.
	HealthCheckUri string `pulumi:"healthCheckUri"`
	// Type of the load balancer.
	LoadBalancerType string `pulumi:"loadBalancerType"`
}

// LoadBalancerInfoResponseInput is an input type that accepts LoadBalancerInfoResponseArgs and LoadBalancerInfoResponseOutput values.
// You can construct a concrete instance of `LoadBalancerInfoResponseInput` via:
//
//          LoadBalancerInfoResponseArgs{...}
type LoadBalancerInfoResponseInput interface {
	pulumi.Input

	ToLoadBalancerInfoResponseOutput() LoadBalancerInfoResponseOutput
	ToLoadBalancerInfoResponseOutputWithContext(context.Context) LoadBalancerInfoResponseOutput
}

// For display only. Metadata associated with a load balancer.
type LoadBalancerInfoResponseArgs struct {
	// Type of load balancer's backend configuration.
	BackendType pulumi.StringInput `pulumi:"backendType"`
	// Backend configuration URI.
	BackendUri pulumi.StringInput `pulumi:"backendUri"`
	// Information for the loadbalancer backends.
	Backends LoadBalancerBackendResponseArrayInput `pulumi:"backends"`
	// URI of the health check for the load balancer.
	HealthCheckUri pulumi.StringInput `pulumi:"healthCheckUri"`
	// Type of the load balancer.
	LoadBalancerType pulumi.StringInput `pulumi:"loadBalancerType"`
}

func (LoadBalancerInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerInfoResponse)(nil)).Elem()
}

func (i LoadBalancerInfoResponseArgs) ToLoadBalancerInfoResponseOutput() LoadBalancerInfoResponseOutput {
	return i.ToLoadBalancerInfoResponseOutputWithContext(context.Background())
}

func (i LoadBalancerInfoResponseArgs) ToLoadBalancerInfoResponseOutputWithContext(ctx context.Context) LoadBalancerInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerInfoResponseOutput)
}

// For display only. Metadata associated with a load balancer.
type LoadBalancerInfoResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancerInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerInfoResponse)(nil)).Elem()
}

func (o LoadBalancerInfoResponseOutput) ToLoadBalancerInfoResponseOutput() LoadBalancerInfoResponseOutput {
	return o
}

func (o LoadBalancerInfoResponseOutput) ToLoadBalancerInfoResponseOutputWithContext(ctx context.Context) LoadBalancerInfoResponseOutput {
	return o
}

// Type of load balancer's backend configuration.
func (o LoadBalancerInfoResponseOutput) BackendType() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerInfoResponse) string { return v.BackendType }).(pulumi.StringOutput)
}

// Backend configuration URI.
func (o LoadBalancerInfoResponseOutput) BackendUri() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerInfoResponse) string { return v.BackendUri }).(pulumi.StringOutput)
}

// Information for the loadbalancer backends.
func (o LoadBalancerInfoResponseOutput) Backends() LoadBalancerBackendResponseArrayOutput {
	return o.ApplyT(func(v LoadBalancerInfoResponse) []LoadBalancerBackendResponse { return v.Backends }).(LoadBalancerBackendResponseArrayOutput)
}

// URI of the health check for the load balancer.
func (o LoadBalancerInfoResponseOutput) HealthCheckUri() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerInfoResponse) string { return v.HealthCheckUri }).(pulumi.StringOutput)
}

// Type of the load balancer.
func (o LoadBalancerInfoResponseOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerInfoResponse) string { return v.LoadBalancerType }).(pulumi.StringOutput)
}

// For display only. Metadata associated with a Compute Engine network.
type NetworkInfoResponse struct {
	// Name of a Compute Engine network.
	DisplayName string `pulumi:"displayName"`
	// The IP range that matches the test.
	MatchedIpRange string `pulumi:"matchedIpRange"`
	// URI of a Compute Engine network.
	Uri string `pulumi:"uri"`
}

// NetworkInfoResponseInput is an input type that accepts NetworkInfoResponseArgs and NetworkInfoResponseOutput values.
// You can construct a concrete instance of `NetworkInfoResponseInput` via:
//
//          NetworkInfoResponseArgs{...}
type NetworkInfoResponseInput interface {
	pulumi.Input

	ToNetworkInfoResponseOutput() NetworkInfoResponseOutput
	ToNetworkInfoResponseOutputWithContext(context.Context) NetworkInfoResponseOutput
}

// For display only. Metadata associated with a Compute Engine network.
type NetworkInfoResponseArgs struct {
	// Name of a Compute Engine network.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The IP range that matches the test.
	MatchedIpRange pulumi.StringInput `pulumi:"matchedIpRange"`
	// URI of a Compute Engine network.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (NetworkInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInfoResponse)(nil)).Elem()
}

func (i NetworkInfoResponseArgs) ToNetworkInfoResponseOutput() NetworkInfoResponseOutput {
	return i.ToNetworkInfoResponseOutputWithContext(context.Background())
}

func (i NetworkInfoResponseArgs) ToNetworkInfoResponseOutputWithContext(ctx context.Context) NetworkInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInfoResponseOutput)
}

// For display only. Metadata associated with a Compute Engine network.
type NetworkInfoResponseOutput struct{ *pulumi.OutputState }

func (NetworkInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInfoResponse)(nil)).Elem()
}

func (o NetworkInfoResponseOutput) ToNetworkInfoResponseOutput() NetworkInfoResponseOutput {
	return o
}

func (o NetworkInfoResponseOutput) ToNetworkInfoResponseOutputWithContext(ctx context.Context) NetworkInfoResponseOutput {
	return o
}

// Name of a Compute Engine network.
func (o NetworkInfoResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInfoResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The IP range that matches the test.
func (o NetworkInfoResponseOutput) MatchedIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInfoResponse) string { return v.MatchedIpRange }).(pulumi.StringOutput)
}

// URI of a Compute Engine network.
func (o NetworkInfoResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInfoResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Results of the configuration analysis from the last run of the test.
type ReachabilityDetailsResponse struct {
	// The details of a failure or a cancellation of reachability analysis.
	Error StatusResponse `pulumi:"error"`
	// The overall result of the test's configuration analysis.
	Result string `pulumi:"result"`
	// Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
	Traces []TraceResponse `pulumi:"traces"`
	// The time of the configuration analysis.
	VerifyTime string `pulumi:"verifyTime"`
}

// ReachabilityDetailsResponseInput is an input type that accepts ReachabilityDetailsResponseArgs and ReachabilityDetailsResponseOutput values.
// You can construct a concrete instance of `ReachabilityDetailsResponseInput` via:
//
//          ReachabilityDetailsResponseArgs{...}
type ReachabilityDetailsResponseInput interface {
	pulumi.Input

	ToReachabilityDetailsResponseOutput() ReachabilityDetailsResponseOutput
	ToReachabilityDetailsResponseOutputWithContext(context.Context) ReachabilityDetailsResponseOutput
}

// Results of the configuration analysis from the last run of the test.
type ReachabilityDetailsResponseArgs struct {
	// The details of a failure or a cancellation of reachability analysis.
	Error StatusResponseInput `pulumi:"error"`
	// The overall result of the test's configuration analysis.
	Result pulumi.StringInput `pulumi:"result"`
	// Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
	Traces TraceResponseArrayInput `pulumi:"traces"`
	// The time of the configuration analysis.
	VerifyTime pulumi.StringInput `pulumi:"verifyTime"`
}

func (ReachabilityDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReachabilityDetailsResponse)(nil)).Elem()
}

func (i ReachabilityDetailsResponseArgs) ToReachabilityDetailsResponseOutput() ReachabilityDetailsResponseOutput {
	return i.ToReachabilityDetailsResponseOutputWithContext(context.Background())
}

func (i ReachabilityDetailsResponseArgs) ToReachabilityDetailsResponseOutputWithContext(ctx context.Context) ReachabilityDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReachabilityDetailsResponseOutput)
}

func (i ReachabilityDetailsResponseArgs) ToReachabilityDetailsResponsePtrOutput() ReachabilityDetailsResponsePtrOutput {
	return i.ToReachabilityDetailsResponsePtrOutputWithContext(context.Background())
}

func (i ReachabilityDetailsResponseArgs) ToReachabilityDetailsResponsePtrOutputWithContext(ctx context.Context) ReachabilityDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReachabilityDetailsResponseOutput).ToReachabilityDetailsResponsePtrOutputWithContext(ctx)
}

// ReachabilityDetailsResponsePtrInput is an input type that accepts ReachabilityDetailsResponseArgs, ReachabilityDetailsResponsePtr and ReachabilityDetailsResponsePtrOutput values.
// You can construct a concrete instance of `ReachabilityDetailsResponsePtrInput` via:
//
//          ReachabilityDetailsResponseArgs{...}
//
//  or:
//
//          nil
type ReachabilityDetailsResponsePtrInput interface {
	pulumi.Input

	ToReachabilityDetailsResponsePtrOutput() ReachabilityDetailsResponsePtrOutput
	ToReachabilityDetailsResponsePtrOutputWithContext(context.Context) ReachabilityDetailsResponsePtrOutput
}

type reachabilityDetailsResponsePtrType ReachabilityDetailsResponseArgs

func ReachabilityDetailsResponsePtr(v *ReachabilityDetailsResponseArgs) ReachabilityDetailsResponsePtrInput {
	return (*reachabilityDetailsResponsePtrType)(v)
}

func (*reachabilityDetailsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReachabilityDetailsResponse)(nil)).Elem()
}

func (i *reachabilityDetailsResponsePtrType) ToReachabilityDetailsResponsePtrOutput() ReachabilityDetailsResponsePtrOutput {
	return i.ToReachabilityDetailsResponsePtrOutputWithContext(context.Background())
}

func (i *reachabilityDetailsResponsePtrType) ToReachabilityDetailsResponsePtrOutputWithContext(ctx context.Context) ReachabilityDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReachabilityDetailsResponsePtrOutput)
}

// Results of the configuration analysis from the last run of the test.
type ReachabilityDetailsResponseOutput struct{ *pulumi.OutputState }

func (ReachabilityDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReachabilityDetailsResponse)(nil)).Elem()
}

func (o ReachabilityDetailsResponseOutput) ToReachabilityDetailsResponseOutput() ReachabilityDetailsResponseOutput {
	return o
}

func (o ReachabilityDetailsResponseOutput) ToReachabilityDetailsResponseOutputWithContext(ctx context.Context) ReachabilityDetailsResponseOutput {
	return o
}

func (o ReachabilityDetailsResponseOutput) ToReachabilityDetailsResponsePtrOutput() ReachabilityDetailsResponsePtrOutput {
	return o.ToReachabilityDetailsResponsePtrOutputWithContext(context.Background())
}

func (o ReachabilityDetailsResponseOutput) ToReachabilityDetailsResponsePtrOutputWithContext(ctx context.Context) ReachabilityDetailsResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReachabilityDetailsResponse) *ReachabilityDetailsResponse {
		return &v
	}).(ReachabilityDetailsResponsePtrOutput)
}

// The details of a failure or a cancellation of reachability analysis.
func (o ReachabilityDetailsResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v ReachabilityDetailsResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// The overall result of the test's configuration analysis.
func (o ReachabilityDetailsResponseOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v ReachabilityDetailsResponse) string { return v.Result }).(pulumi.StringOutput)
}

// Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
func (o ReachabilityDetailsResponseOutput) Traces() TraceResponseArrayOutput {
	return o.ApplyT(func(v ReachabilityDetailsResponse) []TraceResponse { return v.Traces }).(TraceResponseArrayOutput)
}

// The time of the configuration analysis.
func (o ReachabilityDetailsResponseOutput) VerifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v ReachabilityDetailsResponse) string { return v.VerifyTime }).(pulumi.StringOutput)
}

type ReachabilityDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (ReachabilityDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReachabilityDetailsResponse)(nil)).Elem()
}

func (o ReachabilityDetailsResponsePtrOutput) ToReachabilityDetailsResponsePtrOutput() ReachabilityDetailsResponsePtrOutput {
	return o
}

func (o ReachabilityDetailsResponsePtrOutput) ToReachabilityDetailsResponsePtrOutputWithContext(ctx context.Context) ReachabilityDetailsResponsePtrOutput {
	return o
}

func (o ReachabilityDetailsResponsePtrOutput) Elem() ReachabilityDetailsResponseOutput {
	return o.ApplyT(func(v *ReachabilityDetailsResponse) ReachabilityDetailsResponse {
		if v != nil {
			return *v
		}
		var ret ReachabilityDetailsResponse
		return ret
	}).(ReachabilityDetailsResponseOutput)
}

// The details of a failure or a cancellation of reachability analysis.
func (o ReachabilityDetailsResponsePtrOutput) Error() StatusResponsePtrOutput {
	return o.ApplyT(func(v *ReachabilityDetailsResponse) *StatusResponse {
		if v == nil {
			return nil
		}
		return &v.Error
	}).(StatusResponsePtrOutput)
}

// The overall result of the test's configuration analysis.
func (o ReachabilityDetailsResponsePtrOutput) Result() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReachabilityDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Result
	}).(pulumi.StringPtrOutput)
}

// Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
func (o ReachabilityDetailsResponsePtrOutput) Traces() TraceResponseArrayOutput {
	return o.ApplyT(func(v *ReachabilityDetailsResponse) []TraceResponse {
		if v == nil {
			return nil
		}
		return v.Traces
	}).(TraceResponseArrayOutput)
}

// The time of the configuration analysis.
func (o ReachabilityDetailsResponsePtrOutput) VerifyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReachabilityDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VerifyTime
	}).(pulumi.StringPtrOutput)
}

// For display only. Metadata associated with a Compute Engine route.
type RouteInfoResponse struct {
	// Destination IP range of the route.
	DestIpRange string `pulumi:"destIpRange"`
	// Name of a Compute Engine route.
	DisplayName string `pulumi:"displayName"`
	// Instance tags of the route.
	InstanceTags []string `pulumi:"instanceTags"`
	// URI of a Compute Engine network.
	NetworkUri string `pulumi:"networkUri"`
	// Next hop of the route.
	NextHop string `pulumi:"nextHop"`
	// Type of next hop.
	NextHopType string `pulumi:"nextHopType"`
	// Priority of the route.
	Priority int `pulumi:"priority"`
	// Type of route.
	RouteType string `pulumi:"routeType"`
	// URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
	Uri string `pulumi:"uri"`
}

// RouteInfoResponseInput is an input type that accepts RouteInfoResponseArgs and RouteInfoResponseOutput values.
// You can construct a concrete instance of `RouteInfoResponseInput` via:
//
//          RouteInfoResponseArgs{...}
type RouteInfoResponseInput interface {
	pulumi.Input

	ToRouteInfoResponseOutput() RouteInfoResponseOutput
	ToRouteInfoResponseOutputWithContext(context.Context) RouteInfoResponseOutput
}

// For display only. Metadata associated with a Compute Engine route.
type RouteInfoResponseArgs struct {
	// Destination IP range of the route.
	DestIpRange pulumi.StringInput `pulumi:"destIpRange"`
	// Name of a Compute Engine route.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Instance tags of the route.
	InstanceTags pulumi.StringArrayInput `pulumi:"instanceTags"`
	// URI of a Compute Engine network.
	NetworkUri pulumi.StringInput `pulumi:"networkUri"`
	// Next hop of the route.
	NextHop pulumi.StringInput `pulumi:"nextHop"`
	// Type of next hop.
	NextHopType pulumi.StringInput `pulumi:"nextHopType"`
	// Priority of the route.
	Priority pulumi.IntInput `pulumi:"priority"`
	// Type of route.
	RouteType pulumi.StringInput `pulumi:"routeType"`
	// URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (RouteInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteInfoResponse)(nil)).Elem()
}

func (i RouteInfoResponseArgs) ToRouteInfoResponseOutput() RouteInfoResponseOutput {
	return i.ToRouteInfoResponseOutputWithContext(context.Background())
}

func (i RouteInfoResponseArgs) ToRouteInfoResponseOutputWithContext(ctx context.Context) RouteInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteInfoResponseOutput)
}

// For display only. Metadata associated with a Compute Engine route.
type RouteInfoResponseOutput struct{ *pulumi.OutputState }

func (RouteInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteInfoResponse)(nil)).Elem()
}

func (o RouteInfoResponseOutput) ToRouteInfoResponseOutput() RouteInfoResponseOutput {
	return o
}

func (o RouteInfoResponseOutput) ToRouteInfoResponseOutputWithContext(ctx context.Context) RouteInfoResponseOutput {
	return o
}

// Destination IP range of the route.
func (o RouteInfoResponseOutput) DestIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v RouteInfoResponse) string { return v.DestIpRange }).(pulumi.StringOutput)
}

// Name of a Compute Engine route.
func (o RouteInfoResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v RouteInfoResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Instance tags of the route.
func (o RouteInfoResponseOutput) InstanceTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteInfoResponse) []string { return v.InstanceTags }).(pulumi.StringArrayOutput)
}

// URI of a Compute Engine network.
func (o RouteInfoResponseOutput) NetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v RouteInfoResponse) string { return v.NetworkUri }).(pulumi.StringOutput)
}

// Next hop of the route.
func (o RouteInfoResponseOutput) NextHop() pulumi.StringOutput {
	return o.ApplyT(func(v RouteInfoResponse) string { return v.NextHop }).(pulumi.StringOutput)
}

// Type of next hop.
func (o RouteInfoResponseOutput) NextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v RouteInfoResponse) string { return v.NextHopType }).(pulumi.StringOutput)
}

// Priority of the route.
func (o RouteInfoResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v RouteInfoResponse) int { return v.Priority }).(pulumi.IntOutput)
}

// Type of route.
func (o RouteInfoResponseOutput) RouteType() pulumi.StringOutput {
	return o.ApplyT(func(v RouteInfoResponse) string { return v.RouteType }).(pulumi.StringOutput)
}

// URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.
func (o RouteInfoResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v RouteInfoResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// StatusResponseInput is an input type that accepts StatusResponseArgs and StatusResponseOutput values.
// You can construct a concrete instance of `StatusResponseInput` via:
//
//          StatusResponseArgs{...}
type StatusResponseInput interface {
	pulumi.Input

	ToStatusResponseOutput() StatusResponseOutput
	ToStatusResponseOutputWithContext(context.Context) StatusResponseOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringInput `pulumi:"message"`
}

func (StatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (i StatusResponseArgs) ToStatusResponseOutput() StatusResponseOutput {
	return i.ToStatusResponseOutputWithContext(context.Background())
}

func (i StatusResponseArgs) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponseOutput)
}

func (i StatusResponseArgs) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return i.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (i StatusResponseArgs) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponseOutput).ToStatusResponsePtrOutputWithContext(ctx)
}

// StatusResponsePtrInput is an input type that accepts StatusResponseArgs, StatusResponsePtr and StatusResponsePtrOutput values.
// You can construct a concrete instance of `StatusResponsePtrInput` via:
//
//          StatusResponseArgs{...}
//
//  or:
//
//          nil
type StatusResponsePtrInput interface {
	pulumi.Input

	ToStatusResponsePtrOutput() StatusResponsePtrOutput
	ToStatusResponsePtrOutputWithContext(context.Context) StatusResponsePtrOutput
}

type statusResponsePtrType StatusResponseArgs

func StatusResponsePtr(v *StatusResponseArgs) StatusResponsePtrInput {
	return (*statusResponsePtrType)(v)
}

func (*statusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusResponse)(nil)).Elem()
}

func (i *statusResponsePtrType) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return i.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (i *statusResponsePtrType) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponsePtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return o.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (o StatusResponseOutput) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatusResponse) *StatusResponse {
		return &v
	}).(StatusResponsePtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusResponsePtrOutput struct{ *pulumi.OutputState }

func (StatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusResponse)(nil)).Elem()
}

func (o StatusResponsePtrOutput) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return o
}

func (o StatusResponsePtrOutput) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return o
}

func (o StatusResponsePtrOutput) Elem() StatusResponseOutput {
	return o.ApplyT(func(v *StatusResponse) StatusResponse {
		if v != nil {
			return *v
		}
		var ret StatusResponse
		return ret
	}).(StatusResponseOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponsePtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatusResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponsePtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *StatusResponse) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
type StepResponse struct {
	// Display information of the final state "abort" and reason.
	Abort AbortInfoResponse `pulumi:"abort"`
	// This is a step that leads to the final state Drop.
	CausesDrop bool `pulumi:"causesDrop"`
	// Display information of a Cloud SQL instance.
	CloudSqlInstance CloudSQLInstanceInfoResponse `pulumi:"cloudSqlInstance"`
	// Display information of the final state "deliver" and reason.
	Deliver DeliverInfoResponse `pulumi:"deliver"`
	// A description of the step. Usually this is a summary of the state.
	Description string `pulumi:"description"`
	// Display information of the final state "drop" and reason.
	Drop DropInfoResponse `pulumi:"drop"`
	// Display information of the source and destination under analysis. The endpoint information in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
	Endpoint EndpointInfoResponse `pulumi:"endpoint"`
	// Display information of a Compute Engine firewall rule.
	Firewall FirewallInfoResponse `pulumi:"firewall"`
	// Display information of the final state "forward" and reason.
	Forward ForwardInfoResponse `pulumi:"forward"`
	// Display information of a Compute Engine forwarding rule.
	ForwardingRule ForwardingRuleInfoResponse `pulumi:"forwardingRule"`
	// Display information of a Google Kubernetes Engine cluster master.
	GkeMaster GKEMasterInfoResponse `pulumi:"gkeMaster"`
	// Display information of a Compute Engine instance.
	Instance InstanceInfoResponse `pulumi:"instance"`
	// Display information of the load balancers.
	LoadBalancer LoadBalancerInfoResponse `pulumi:"loadBalancer"`
	// Display information of a Google Cloud network.
	Network NetworkInfoResponse `pulumi:"network"`
	// Project ID that contains the configuration this step is validating.
	Project string `pulumi:"project"`
	// Display information of a Compute Engine route.
	Route RouteInfoResponse `pulumi:"route"`
	// Each step is in one of the pre-defined states.
	State string `pulumi:"state"`
	// Display information of a Compute Engine VPN gateway.
	VpnGateway VpnGatewayInfoResponse `pulumi:"vpnGateway"`
	// Display information of a Compute Engine VPN tunnel.
	VpnTunnel VpnTunnelInfoResponse `pulumi:"vpnTunnel"`
}

// StepResponseInput is an input type that accepts StepResponseArgs and StepResponseOutput values.
// You can construct a concrete instance of `StepResponseInput` via:
//
//          StepResponseArgs{...}
type StepResponseInput interface {
	pulumi.Input

	ToStepResponseOutput() StepResponseOutput
	ToStepResponseOutputWithContext(context.Context) StepResponseOutput
}

// A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
type StepResponseArgs struct {
	// Display information of the final state "abort" and reason.
	Abort AbortInfoResponseInput `pulumi:"abort"`
	// This is a step that leads to the final state Drop.
	CausesDrop pulumi.BoolInput `pulumi:"causesDrop"`
	// Display information of a Cloud SQL instance.
	CloudSqlInstance CloudSQLInstanceInfoResponseInput `pulumi:"cloudSqlInstance"`
	// Display information of the final state "deliver" and reason.
	Deliver DeliverInfoResponseInput `pulumi:"deliver"`
	// A description of the step. Usually this is a summary of the state.
	Description pulumi.StringInput `pulumi:"description"`
	// Display information of the final state "drop" and reason.
	Drop DropInfoResponseInput `pulumi:"drop"`
	// Display information of the source and destination under analysis. The endpoint information in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
	Endpoint EndpointInfoResponseInput `pulumi:"endpoint"`
	// Display information of a Compute Engine firewall rule.
	Firewall FirewallInfoResponseInput `pulumi:"firewall"`
	// Display information of the final state "forward" and reason.
	Forward ForwardInfoResponseInput `pulumi:"forward"`
	// Display information of a Compute Engine forwarding rule.
	ForwardingRule ForwardingRuleInfoResponseInput `pulumi:"forwardingRule"`
	// Display information of a Google Kubernetes Engine cluster master.
	GkeMaster GKEMasterInfoResponseInput `pulumi:"gkeMaster"`
	// Display information of a Compute Engine instance.
	Instance InstanceInfoResponseInput `pulumi:"instance"`
	// Display information of the load balancers.
	LoadBalancer LoadBalancerInfoResponseInput `pulumi:"loadBalancer"`
	// Display information of a Google Cloud network.
	Network NetworkInfoResponseInput `pulumi:"network"`
	// Project ID that contains the configuration this step is validating.
	Project pulumi.StringInput `pulumi:"project"`
	// Display information of a Compute Engine route.
	Route RouteInfoResponseInput `pulumi:"route"`
	// Each step is in one of the pre-defined states.
	State pulumi.StringInput `pulumi:"state"`
	// Display information of a Compute Engine VPN gateway.
	VpnGateway VpnGatewayInfoResponseInput `pulumi:"vpnGateway"`
	// Display information of a Compute Engine VPN tunnel.
	VpnTunnel VpnTunnelInfoResponseInput `pulumi:"vpnTunnel"`
}

func (StepResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StepResponse)(nil)).Elem()
}

func (i StepResponseArgs) ToStepResponseOutput() StepResponseOutput {
	return i.ToStepResponseOutputWithContext(context.Background())
}

func (i StepResponseArgs) ToStepResponseOutputWithContext(ctx context.Context) StepResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepResponseOutput)
}

// StepResponseArrayInput is an input type that accepts StepResponseArray and StepResponseArrayOutput values.
// You can construct a concrete instance of `StepResponseArrayInput` via:
//
//          StepResponseArray{ StepResponseArgs{...} }
type StepResponseArrayInput interface {
	pulumi.Input

	ToStepResponseArrayOutput() StepResponseArrayOutput
	ToStepResponseArrayOutputWithContext(context.Context) StepResponseArrayOutput
}

type StepResponseArray []StepResponseInput

func (StepResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepResponse)(nil)).Elem()
}

func (i StepResponseArray) ToStepResponseArrayOutput() StepResponseArrayOutput {
	return i.ToStepResponseArrayOutputWithContext(context.Background())
}

func (i StepResponseArray) ToStepResponseArrayOutputWithContext(ctx context.Context) StepResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepResponseArrayOutput)
}

// A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
type StepResponseOutput struct{ *pulumi.OutputState }

func (StepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepResponse)(nil)).Elem()
}

func (o StepResponseOutput) ToStepResponseOutput() StepResponseOutput {
	return o
}

func (o StepResponseOutput) ToStepResponseOutputWithContext(ctx context.Context) StepResponseOutput {
	return o
}

// Display information of the final state "abort" and reason.
func (o StepResponseOutput) Abort() AbortInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) AbortInfoResponse { return v.Abort }).(AbortInfoResponseOutput)
}

// This is a step that leads to the final state Drop.
func (o StepResponseOutput) CausesDrop() pulumi.BoolOutput {
	return o.ApplyT(func(v StepResponse) bool { return v.CausesDrop }).(pulumi.BoolOutput)
}

// Display information of a Cloud SQL instance.
func (o StepResponseOutput) CloudSqlInstance() CloudSQLInstanceInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) CloudSQLInstanceInfoResponse { return v.CloudSqlInstance }).(CloudSQLInstanceInfoResponseOutput)
}

// Display information of the final state "deliver" and reason.
func (o StepResponseOutput) Deliver() DeliverInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) DeliverInfoResponse { return v.Deliver }).(DeliverInfoResponseOutput)
}

// A description of the step. Usually this is a summary of the state.
func (o StepResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v StepResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Display information of the final state "drop" and reason.
func (o StepResponseOutput) Drop() DropInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) DropInfoResponse { return v.Drop }).(DropInfoResponseOutput)
}

// Display information of the source and destination under analysis. The endpoint information in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.
func (o StepResponseOutput) Endpoint() EndpointInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) EndpointInfoResponse { return v.Endpoint }).(EndpointInfoResponseOutput)
}

// Display information of a Compute Engine firewall rule.
func (o StepResponseOutput) Firewall() FirewallInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) FirewallInfoResponse { return v.Firewall }).(FirewallInfoResponseOutput)
}

// Display information of the final state "forward" and reason.
func (o StepResponseOutput) Forward() ForwardInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) ForwardInfoResponse { return v.Forward }).(ForwardInfoResponseOutput)
}

// Display information of a Compute Engine forwarding rule.
func (o StepResponseOutput) ForwardingRule() ForwardingRuleInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) ForwardingRuleInfoResponse { return v.ForwardingRule }).(ForwardingRuleInfoResponseOutput)
}

// Display information of a Google Kubernetes Engine cluster master.
func (o StepResponseOutput) GkeMaster() GKEMasterInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) GKEMasterInfoResponse { return v.GkeMaster }).(GKEMasterInfoResponseOutput)
}

// Display information of a Compute Engine instance.
func (o StepResponseOutput) Instance() InstanceInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) InstanceInfoResponse { return v.Instance }).(InstanceInfoResponseOutput)
}

// Display information of the load balancers.
func (o StepResponseOutput) LoadBalancer() LoadBalancerInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) LoadBalancerInfoResponse { return v.LoadBalancer }).(LoadBalancerInfoResponseOutput)
}

// Display information of a Google Cloud network.
func (o StepResponseOutput) Network() NetworkInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) NetworkInfoResponse { return v.Network }).(NetworkInfoResponseOutput)
}

// Project ID that contains the configuration this step is validating.
func (o StepResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v StepResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Display information of a Compute Engine route.
func (o StepResponseOutput) Route() RouteInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) RouteInfoResponse { return v.Route }).(RouteInfoResponseOutput)
}

// Each step is in one of the pre-defined states.
func (o StepResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v StepResponse) string { return v.State }).(pulumi.StringOutput)
}

// Display information of a Compute Engine VPN gateway.
func (o StepResponseOutput) VpnGateway() VpnGatewayInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) VpnGatewayInfoResponse { return v.VpnGateway }).(VpnGatewayInfoResponseOutput)
}

// Display information of a Compute Engine VPN tunnel.
func (o StepResponseOutput) VpnTunnel() VpnTunnelInfoResponseOutput {
	return o.ApplyT(func(v StepResponse) VpnTunnelInfoResponse { return v.VpnTunnel }).(VpnTunnelInfoResponseOutput)
}

type StepResponseArrayOutput struct{ *pulumi.OutputState }

func (StepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepResponse)(nil)).Elem()
}

func (o StepResponseArrayOutput) ToStepResponseArrayOutput() StepResponseArrayOutput {
	return o
}

func (o StepResponseArrayOutput) ToStepResponseArrayOutputWithContext(ctx context.Context) StepResponseArrayOutput {
	return o
}

func (o StepResponseArrayOutput) Index(i pulumi.IntInput) StepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepResponse {
		return vs[0].([]StepResponse)[vs[1].(int)]
	}).(StepResponseOutput)
}

// Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). ```|---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final))```
type TraceResponse struct {
	// Derived from the source and destination endpoints definition specified by user request, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
	EndpointInfo EndpointInfoResponse `pulumi:"endpointInfo"`
	// A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
	Steps []StepResponse `pulumi:"steps"`
}

// TraceResponseInput is an input type that accepts TraceResponseArgs and TraceResponseOutput values.
// You can construct a concrete instance of `TraceResponseInput` via:
//
//          TraceResponseArgs{...}
type TraceResponseInput interface {
	pulumi.Input

	ToTraceResponseOutput() TraceResponseOutput
	ToTraceResponseOutputWithContext(context.Context) TraceResponseOutput
}

// Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). ```|---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final))```
type TraceResponseArgs struct {
	// Derived from the source and destination endpoints definition specified by user request, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
	EndpointInfo EndpointInfoResponseInput `pulumi:"endpointInfo"`
	// A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
	Steps StepResponseArrayInput `pulumi:"steps"`
}

func (TraceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TraceResponse)(nil)).Elem()
}

func (i TraceResponseArgs) ToTraceResponseOutput() TraceResponseOutput {
	return i.ToTraceResponseOutputWithContext(context.Background())
}

func (i TraceResponseArgs) ToTraceResponseOutputWithContext(ctx context.Context) TraceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TraceResponseOutput)
}

// TraceResponseArrayInput is an input type that accepts TraceResponseArray and TraceResponseArrayOutput values.
// You can construct a concrete instance of `TraceResponseArrayInput` via:
//
//          TraceResponseArray{ TraceResponseArgs{...} }
type TraceResponseArrayInput interface {
	pulumi.Input

	ToTraceResponseArrayOutput() TraceResponseArrayOutput
	ToTraceResponseArrayOutputWithContext(context.Context) TraceResponseArrayOutput
}

type TraceResponseArray []TraceResponseInput

func (TraceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TraceResponse)(nil)).Elem()
}

func (i TraceResponseArray) ToTraceResponseArrayOutput() TraceResponseArrayOutput {
	return i.ToTraceResponseArrayOutputWithContext(context.Background())
}

func (i TraceResponseArray) ToTraceResponseArrayOutputWithContext(ctx context.Context) TraceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TraceResponseArrayOutput)
}

// Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). ```|---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final))```
type TraceResponseOutput struct{ *pulumi.OutputState }

func (TraceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TraceResponse)(nil)).Elem()
}

func (o TraceResponseOutput) ToTraceResponseOutput() TraceResponseOutput {
	return o
}

func (o TraceResponseOutput) ToTraceResponseOutputWithContext(ctx context.Context) TraceResponseOutput {
	return o
}

// Derived from the source and destination endpoints definition specified by user request, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.
func (o TraceResponseOutput) EndpointInfo() EndpointInfoResponseOutput {
	return o.ApplyT(func(v TraceResponse) EndpointInfoResponse { return v.EndpointInfo }).(EndpointInfoResponseOutput)
}

// A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
func (o TraceResponseOutput) Steps() StepResponseArrayOutput {
	return o.ApplyT(func(v TraceResponse) []StepResponse { return v.Steps }).(StepResponseArrayOutput)
}

type TraceResponseArrayOutput struct{ *pulumi.OutputState }

func (TraceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TraceResponse)(nil)).Elem()
}

func (o TraceResponseArrayOutput) ToTraceResponseArrayOutput() TraceResponseArrayOutput {
	return o
}

func (o TraceResponseArrayOutput) ToTraceResponseArrayOutputWithContext(ctx context.Context) TraceResponseArrayOutput {
	return o
}

func (o TraceResponseArrayOutput) Index(i pulumi.IntInput) TraceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TraceResponse {
		return vs[0].([]TraceResponse)[vs[1].(int)]
	}).(TraceResponseOutput)
}

// For display only. Metadata associated with a Compute Engine VPN gateway.
type VpnGatewayInfoResponse struct {
	// Name of a VPN gateway.
	DisplayName string `pulumi:"displayName"`
	// IP address of the VPN gateway.
	IpAddress string `pulumi:"ipAddress"`
	// URI of a Compute Engine network where the VPN gateway is configured.
	NetworkUri string `pulumi:"networkUri"`
	// Name of a Google Cloud region where this VPN gateway is configured.
	Region string `pulumi:"region"`
	// URI of a VPN gateway.
	Uri string `pulumi:"uri"`
	// A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.
	VpnTunnelUri string `pulumi:"vpnTunnelUri"`
}

// VpnGatewayInfoResponseInput is an input type that accepts VpnGatewayInfoResponseArgs and VpnGatewayInfoResponseOutput values.
// You can construct a concrete instance of `VpnGatewayInfoResponseInput` via:
//
//          VpnGatewayInfoResponseArgs{...}
type VpnGatewayInfoResponseInput interface {
	pulumi.Input

	ToVpnGatewayInfoResponseOutput() VpnGatewayInfoResponseOutput
	ToVpnGatewayInfoResponseOutputWithContext(context.Context) VpnGatewayInfoResponseOutput
}

// For display only. Metadata associated with a Compute Engine VPN gateway.
type VpnGatewayInfoResponseArgs struct {
	// Name of a VPN gateway.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// IP address of the VPN gateway.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// URI of a Compute Engine network where the VPN gateway is configured.
	NetworkUri pulumi.StringInput `pulumi:"networkUri"`
	// Name of a Google Cloud region where this VPN gateway is configured.
	Region pulumi.StringInput `pulumi:"region"`
	// URI of a VPN gateway.
	Uri pulumi.StringInput `pulumi:"uri"`
	// A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.
	VpnTunnelUri pulumi.StringInput `pulumi:"vpnTunnelUri"`
}

func (VpnGatewayInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayInfoResponse)(nil)).Elem()
}

func (i VpnGatewayInfoResponseArgs) ToVpnGatewayInfoResponseOutput() VpnGatewayInfoResponseOutput {
	return i.ToVpnGatewayInfoResponseOutputWithContext(context.Background())
}

func (i VpnGatewayInfoResponseArgs) ToVpnGatewayInfoResponseOutputWithContext(ctx context.Context) VpnGatewayInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayInfoResponseOutput)
}

// For display only. Metadata associated with a Compute Engine VPN gateway.
type VpnGatewayInfoResponseOutput struct{ *pulumi.OutputState }

func (VpnGatewayInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayInfoResponse)(nil)).Elem()
}

func (o VpnGatewayInfoResponseOutput) ToVpnGatewayInfoResponseOutput() VpnGatewayInfoResponseOutput {
	return o
}

func (o VpnGatewayInfoResponseOutput) ToVpnGatewayInfoResponseOutputWithContext(ctx context.Context) VpnGatewayInfoResponseOutput {
	return o
}

// Name of a VPN gateway.
func (o VpnGatewayInfoResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v VpnGatewayInfoResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// IP address of the VPN gateway.
func (o VpnGatewayInfoResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v VpnGatewayInfoResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// URI of a Compute Engine network where the VPN gateway is configured.
func (o VpnGatewayInfoResponseOutput) NetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v VpnGatewayInfoResponse) string { return v.NetworkUri }).(pulumi.StringOutput)
}

// Name of a Google Cloud region where this VPN gateway is configured.
func (o VpnGatewayInfoResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v VpnGatewayInfoResponse) string { return v.Region }).(pulumi.StringOutput)
}

// URI of a VPN gateway.
func (o VpnGatewayInfoResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v VpnGatewayInfoResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.
func (o VpnGatewayInfoResponseOutput) VpnTunnelUri() pulumi.StringOutput {
	return o.ApplyT(func(v VpnGatewayInfoResponse) string { return v.VpnTunnelUri }).(pulumi.StringOutput)
}

// For display only. Metadata associated with a Compute Engine VPN tunnel.
type VpnTunnelInfoResponse struct {
	// Name of a VPN tunnel.
	DisplayName string `pulumi:"displayName"`
	// URI of a Compute Engine network where the VPN tunnel is configured.
	NetworkUri string `pulumi:"networkUri"`
	// Name of a Google Cloud region where this VPN tunnel is configured.
	Region string `pulumi:"region"`
	// URI of a VPN gateway at remote end of the tunnel.
	RemoteGateway string `pulumi:"remoteGateway"`
	// Remote VPN gateway's IP address.
	RemoteGatewayIp string `pulumi:"remoteGatewayIp"`
	// Type of the routing policy.
	RoutingType string `pulumi:"routingType"`
	// URI of the VPN gateway at local end of the tunnel.
	SourceGateway string `pulumi:"sourceGateway"`
	// Local VPN gateway's IP address.
	SourceGatewayIp string `pulumi:"sourceGatewayIp"`
	// URI of a VPN tunnel.
	Uri string `pulumi:"uri"`
}

// VpnTunnelInfoResponseInput is an input type that accepts VpnTunnelInfoResponseArgs and VpnTunnelInfoResponseOutput values.
// You can construct a concrete instance of `VpnTunnelInfoResponseInput` via:
//
//          VpnTunnelInfoResponseArgs{...}
type VpnTunnelInfoResponseInput interface {
	pulumi.Input

	ToVpnTunnelInfoResponseOutput() VpnTunnelInfoResponseOutput
	ToVpnTunnelInfoResponseOutputWithContext(context.Context) VpnTunnelInfoResponseOutput
}

// For display only. Metadata associated with a Compute Engine VPN tunnel.
type VpnTunnelInfoResponseArgs struct {
	// Name of a VPN tunnel.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// URI of a Compute Engine network where the VPN tunnel is configured.
	NetworkUri pulumi.StringInput `pulumi:"networkUri"`
	// Name of a Google Cloud region where this VPN tunnel is configured.
	Region pulumi.StringInput `pulumi:"region"`
	// URI of a VPN gateway at remote end of the tunnel.
	RemoteGateway pulumi.StringInput `pulumi:"remoteGateway"`
	// Remote VPN gateway's IP address.
	RemoteGatewayIp pulumi.StringInput `pulumi:"remoteGatewayIp"`
	// Type of the routing policy.
	RoutingType pulumi.StringInput `pulumi:"routingType"`
	// URI of the VPN gateway at local end of the tunnel.
	SourceGateway pulumi.StringInput `pulumi:"sourceGateway"`
	// Local VPN gateway's IP address.
	SourceGatewayIp pulumi.StringInput `pulumi:"sourceGatewayIp"`
	// URI of a VPN tunnel.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (VpnTunnelInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnTunnelInfoResponse)(nil)).Elem()
}

func (i VpnTunnelInfoResponseArgs) ToVpnTunnelInfoResponseOutput() VpnTunnelInfoResponseOutput {
	return i.ToVpnTunnelInfoResponseOutputWithContext(context.Background())
}

func (i VpnTunnelInfoResponseArgs) ToVpnTunnelInfoResponseOutputWithContext(ctx context.Context) VpnTunnelInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnTunnelInfoResponseOutput)
}

// For display only. Metadata associated with a Compute Engine VPN tunnel.
type VpnTunnelInfoResponseOutput struct{ *pulumi.OutputState }

func (VpnTunnelInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnTunnelInfoResponse)(nil)).Elem()
}

func (o VpnTunnelInfoResponseOutput) ToVpnTunnelInfoResponseOutput() VpnTunnelInfoResponseOutput {
	return o
}

func (o VpnTunnelInfoResponseOutput) ToVpnTunnelInfoResponseOutputWithContext(ctx context.Context) VpnTunnelInfoResponseOutput {
	return o
}

// Name of a VPN tunnel.
func (o VpnTunnelInfoResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v VpnTunnelInfoResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// URI of a Compute Engine network where the VPN tunnel is configured.
func (o VpnTunnelInfoResponseOutput) NetworkUri() pulumi.StringOutput {
	return o.ApplyT(func(v VpnTunnelInfoResponse) string { return v.NetworkUri }).(pulumi.StringOutput)
}

// Name of a Google Cloud region where this VPN tunnel is configured.
func (o VpnTunnelInfoResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v VpnTunnelInfoResponse) string { return v.Region }).(pulumi.StringOutput)
}

// URI of a VPN gateway at remote end of the tunnel.
func (o VpnTunnelInfoResponseOutput) RemoteGateway() pulumi.StringOutput {
	return o.ApplyT(func(v VpnTunnelInfoResponse) string { return v.RemoteGateway }).(pulumi.StringOutput)
}

// Remote VPN gateway's IP address.
func (o VpnTunnelInfoResponseOutput) RemoteGatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v VpnTunnelInfoResponse) string { return v.RemoteGatewayIp }).(pulumi.StringOutput)
}

// Type of the routing policy.
func (o VpnTunnelInfoResponseOutput) RoutingType() pulumi.StringOutput {
	return o.ApplyT(func(v VpnTunnelInfoResponse) string { return v.RoutingType }).(pulumi.StringOutput)
}

// URI of the VPN gateway at local end of the tunnel.
func (o VpnTunnelInfoResponseOutput) SourceGateway() pulumi.StringOutput {
	return o.ApplyT(func(v VpnTunnelInfoResponse) string { return v.SourceGateway }).(pulumi.StringOutput)
}

// Local VPN gateway's IP address.
func (o VpnTunnelInfoResponseOutput) SourceGatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v VpnTunnelInfoResponse) string { return v.SourceGatewayIp }).(pulumi.StringOutput)
}

// URI of a VPN tunnel.
func (o VpnTunnelInfoResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v VpnTunnelInfoResponse) string { return v.Uri }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AbortInfoResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudSQLInstanceInfoResponseOutput{})
	pulumi.RegisterOutputType(DeliverInfoResponseOutput{})
	pulumi.RegisterOutputType(DropInfoResponseOutput{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointPtrOutput{})
	pulumi.RegisterOutputType(EndpointInfoResponseOutput{})
	pulumi.RegisterOutputType(EndpointResponseOutput{})
	pulumi.RegisterOutputType(EndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FirewallInfoResponseOutput{})
	pulumi.RegisterOutputType(ForwardInfoResponseOutput{})
	pulumi.RegisterOutputType(ForwardingRuleInfoResponseOutput{})
	pulumi.RegisterOutputType(GKEMasterInfoResponseOutput{})
	pulumi.RegisterOutputType(InstanceInfoResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancerBackendResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancerBackendResponseArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerInfoResponseOutput{})
	pulumi.RegisterOutputType(NetworkInfoResponseOutput{})
	pulumi.RegisterOutputType(ReachabilityDetailsResponseOutput{})
	pulumi.RegisterOutputType(ReachabilityDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(RouteInfoResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StatusResponsePtrOutput{})
	pulumi.RegisterOutputType(StepResponseOutput{})
	pulumi.RegisterOutputType(StepResponseArrayOutput{})
	pulumi.RegisterOutputType(TraceResponseOutput{})
	pulumi.RegisterOutputType(TraceResponseArrayOutput{})
	pulumi.RegisterOutputType(VpnGatewayInfoResponseOutput{})
	pulumi.RegisterOutputType(VpnTunnelInfoResponseOutput{})
}
