// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ScanConfigTargetPlatformsItem pulumi.String

const (
	// The target platform is unknown. Requests with this enum value will be rejected with INVALID_ARGUMENT error.
	ScanConfigTargetPlatformsItemTargetPlatformUnspecified = ScanConfigTargetPlatformsItem("TARGET_PLATFORM_UNSPECIFIED")
	// Google App Engine service.
	ScanConfigTargetPlatformsItemAppEngine = ScanConfigTargetPlatformsItem("APP_ENGINE")
	// Google Compute Engine service.
	ScanConfigTargetPlatformsItemCompute = ScanConfigTargetPlatformsItem("COMPUTE")
)

func (ScanConfigTargetPlatformsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ScanConfigTargetPlatformsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigTargetPlatformsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigTargetPlatformsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanConfigTargetPlatformsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// ScanConfigTargetPlatformsItemArrayInput is an input type that accepts ScanConfigTargetPlatformsItemArray and ScanConfigTargetPlatformsItemArrayOutput values.
// You can construct a concrete instance of `ScanConfigTargetPlatformsItemArrayInput` via:
//
//          ScanConfigTargetPlatformsItemArray{ ScanConfigTargetPlatformsItemArgs{...} }
type ScanConfigTargetPlatformsItemArrayInput interface {
	pulumi.Input

	ToScanConfigTargetPlatformsItemArrayOutput() ScanConfigTargetPlatformsItemArrayOutput
	ToScanConfigTargetPlatformsItemArrayOutputWithContext(context.Context) ScanConfigTargetPlatformsItemArrayOutput
}

type ScanConfigTargetPlatformsItemArray []ScanConfigTargetPlatformsItem

func (ScanConfigTargetPlatformsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScanConfigTargetPlatformsItem)(nil)).Elem()
}

func (i ScanConfigTargetPlatformsItemArray) ToScanConfigTargetPlatformsItemArrayOutput() ScanConfigTargetPlatformsItemArrayOutput {
	return i.ToScanConfigTargetPlatformsItemArrayOutputWithContext(context.Background())
}

func (i ScanConfigTargetPlatformsItemArray) ToScanConfigTargetPlatformsItemArrayOutputWithContext(ctx context.Context) ScanConfigTargetPlatformsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScanConfigTargetPlatformsItemArrayOutput)
}

type ScanConfigTargetPlatformsItemArrayOutput struct{ *pulumi.OutputState }

func (ScanConfigTargetPlatformsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScanConfigTargetPlatformsItem)(nil)).Elem()
}

func (o ScanConfigTargetPlatformsItemArrayOutput) ToScanConfigTargetPlatformsItemArrayOutput() ScanConfigTargetPlatformsItemArrayOutput {
	return o
}

func (o ScanConfigTargetPlatformsItemArrayOutput) ToScanConfigTargetPlatformsItemArrayOutputWithContext(ctx context.Context) ScanConfigTargetPlatformsItemArrayOutput {
	return o
}

func (o ScanConfigTargetPlatformsItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]ScanConfigTargetPlatformsItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}

// The user agent used during scanning.
type ScanConfigUserAgent pulumi.String

const (
	// The user agent is unknown. Service will default to CHROME_LINUX.
	ScanConfigUserAgentUserAgentUnspecified = ScanConfigUserAgent("USER_AGENT_UNSPECIFIED")
	// Chrome on Linux. This is the service default if unspecified.
	ScanConfigUserAgentChromeLinux = ScanConfigUserAgent("CHROME_LINUX")
	// Chrome on Android.
	ScanConfigUserAgentChromeAndroid = ScanConfigUserAgent("CHROME_ANDROID")
	// Safari on IPhone.
	ScanConfigUserAgentSafariIphone = ScanConfigUserAgent("SAFARI_IPHONE")
)

func (ScanConfigUserAgent) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ScanConfigUserAgent) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigUserAgent) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigUserAgent) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanConfigUserAgent) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The execution state of the ScanRun.
type ScanRunExecutionState pulumi.String

const (
	// Represents an invalid state caused by internal server error. This value should never be returned.
	ScanRunExecutionStateExecutionStateUnspecified = ScanRunExecutionState("EXECUTION_STATE_UNSPECIFIED")
	// The scan is waiting in the queue.
	ScanRunExecutionStateQueued = ScanRunExecutionState("QUEUED")
	// The scan is in progress.
	ScanRunExecutionStateScanning = ScanRunExecutionState("SCANNING")
	// The scan is either finished or stopped by user.
	ScanRunExecutionStateFinished = ScanRunExecutionState("FINISHED")
)

func (ScanRunExecutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ScanRunExecutionState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunExecutionState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunExecutionState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanRunExecutionState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The result state of the ScanRun. This field is only available after the execution state reaches "FINISHED".
type ScanRunResultState pulumi.String

const (
	// Default value. This value is returned when the ScanRun is not yet finished.
	ScanRunResultStateResultStateUnspecified = ScanRunResultState("RESULT_STATE_UNSPECIFIED")
	// The scan finished without errors.
	ScanRunResultStateSuccess = ScanRunResultState("SUCCESS")
	// The scan finished with errors.
	ScanRunResultStateError = ScanRunResultState("ERROR")
	// The scan was terminated by user.
	ScanRunResultStateKilled = ScanRunResultState("KILLED")
)

func (ScanRunResultState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ScanRunResultState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunResultState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunResultState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanRunResultState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
