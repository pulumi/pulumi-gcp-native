// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a ScanConfig.
func LookupScanConfig(ctx *pulumi.Context, args *LookupScanConfigArgs, opts ...pulumi.InvokeOption) (*LookupScanConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScanConfigResult
	err := ctx.Invoke("google-native:websecurityscanner/v1:getScanConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScanConfigArgs struct {
	Project      *string `pulumi:"project"`
	ScanConfigId string  `pulumi:"scanConfigId"`
}

type LookupScanConfigResult struct {
	// The authentication configuration. If specified, service will use the authentication configuration during scanning.
	Authentication AuthenticationResponse `pulumi:"authentication"`
	// The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
	BlacklistPatterns []string `pulumi:"blacklistPatterns"`
	// The user provided display name of the ScanConfig.
	DisplayName string `pulumi:"displayName"`
	// Controls export of scan configurations and results to Security Command Center.
	ExportToSecurityCommandCenter string `pulumi:"exportToSecurityCommandCenter"`
	// Whether to keep scanning even if most requests return HTTP error codes.
	IgnoreHttpStatusErrors bool `pulumi:"ignoreHttpStatusErrors"`
	// Whether the scan config is managed by Web Security Scanner, output only.
	ManagedScan bool `pulumi:"managedScan"`
	// The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
	MaxQps int `pulumi:"maxQps"`
	// The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.
	Name string `pulumi:"name"`
	// The risk level selected for the scan
	RiskLevel string `pulumi:"riskLevel"`
	// The schedule of the ScanConfig.
	Schedule ScheduleResponse `pulumi:"schedule"`
	// The starting URLs from which the scanner finds site pages.
	StartingUrls []string `pulumi:"startingUrls"`
	// Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.
	StaticIpScan bool `pulumi:"staticIpScan"`
	// The user agent used during scanning.
	UserAgent string `pulumi:"userAgent"`
}

func LookupScanConfigOutput(ctx *pulumi.Context, args LookupScanConfigOutputArgs, opts ...pulumi.InvokeOption) LookupScanConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScanConfigResult, error) {
			args := v.(LookupScanConfigArgs)
			r, err := LookupScanConfig(ctx, &args, opts...)
			var s LookupScanConfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScanConfigResultOutput)
}

type LookupScanConfigOutputArgs struct {
	Project      pulumi.StringPtrInput `pulumi:"project"`
	ScanConfigId pulumi.StringInput    `pulumi:"scanConfigId"`
}

func (LookupScanConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScanConfigArgs)(nil)).Elem()
}

type LookupScanConfigResultOutput struct{ *pulumi.OutputState }

func (LookupScanConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScanConfigResult)(nil)).Elem()
}

func (o LookupScanConfigResultOutput) ToLookupScanConfigResultOutput() LookupScanConfigResultOutput {
	return o
}

func (o LookupScanConfigResultOutput) ToLookupScanConfigResultOutputWithContext(ctx context.Context) LookupScanConfigResultOutput {
	return o
}

// The authentication configuration. If specified, service will use the authentication configuration during scanning.
func (o LookupScanConfigResultOutput) Authentication() AuthenticationResponseOutput {
	return o.ApplyT(func(v LookupScanConfigResult) AuthenticationResponse { return v.Authentication }).(AuthenticationResponseOutput)
}

// The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
func (o LookupScanConfigResultOutput) BlacklistPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupScanConfigResult) []string { return v.BlacklistPatterns }).(pulumi.StringArrayOutput)
}

// The user provided display name of the ScanConfig.
func (o LookupScanConfigResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScanConfigResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Controls export of scan configurations and results to Security Command Center.
func (o LookupScanConfigResultOutput) ExportToSecurityCommandCenter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScanConfigResult) string { return v.ExportToSecurityCommandCenter }).(pulumi.StringOutput)
}

// Whether to keep scanning even if most requests return HTTP error codes.
func (o LookupScanConfigResultOutput) IgnoreHttpStatusErrors() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupScanConfigResult) bool { return v.IgnoreHttpStatusErrors }).(pulumi.BoolOutput)
}

// Whether the scan config is managed by Web Security Scanner, output only.
func (o LookupScanConfigResultOutput) ManagedScan() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupScanConfigResult) bool { return v.ManagedScan }).(pulumi.BoolOutput)
}

// The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
func (o LookupScanConfigResultOutput) MaxQps() pulumi.IntOutput {
	return o.ApplyT(func(v LookupScanConfigResult) int { return v.MaxQps }).(pulumi.IntOutput)
}

// The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.
func (o LookupScanConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScanConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// The risk level selected for the scan
func (o LookupScanConfigResultOutput) RiskLevel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScanConfigResult) string { return v.RiskLevel }).(pulumi.StringOutput)
}

// The schedule of the ScanConfig.
func (o LookupScanConfigResultOutput) Schedule() ScheduleResponseOutput {
	return o.ApplyT(func(v LookupScanConfigResult) ScheduleResponse { return v.Schedule }).(ScheduleResponseOutput)
}

// The starting URLs from which the scanner finds site pages.
func (o LookupScanConfigResultOutput) StartingUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupScanConfigResult) []string { return v.StartingUrls }).(pulumi.StringArrayOutput)
}

// Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.
func (o LookupScanConfigResultOutput) StaticIpScan() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupScanConfigResult) bool { return v.StaticIpScan }).(pulumi.BoolOutput)
}

// The user agent used during scanning.
func (o LookupScanConfigResultOutput) UserAgent() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScanConfigResult) string { return v.UserAgent }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScanConfigResultOutput{})
}
