// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new ScanConfig.
type ScanConfig struct {
	pulumi.CustomResourceState

	// The authentication configuration. If specified, service will use the authentication configuration during scanning.
	Authentication AuthenticationResponseOutput `pulumi:"authentication"`
	// The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
	BlacklistPatterns pulumi.StringArrayOutput `pulumi:"blacklistPatterns"`
	// The user provided display name of the ScanConfig.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Controls export of scan configurations and results to Security Command Center.
	ExportToSecurityCommandCenter pulumi.StringOutput `pulumi:"exportToSecurityCommandCenter"`
	// Whether to keep scanning even if most requests return HTTP error codes.
	IgnoreHttpStatusErrors pulumi.BoolOutput `pulumi:"ignoreHttpStatusErrors"`
	// Whether the scan config is managed by Web Security Scanner, output only.
	ManagedScan pulumi.BoolOutput `pulumi:"managedScan"`
	// The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
	MaxQps pulumi.IntOutput `pulumi:"maxQps"`
	// The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.
	Name pulumi.StringOutput `pulumi:"name"`
	// The risk level selected for the scan
	RiskLevel pulumi.StringOutput `pulumi:"riskLevel"`
	// The schedule of the ScanConfig.
	Schedule ScheduleResponseOutput `pulumi:"schedule"`
	// The starting URLs from which the scanner finds site pages.
	StartingUrls pulumi.StringArrayOutput `pulumi:"startingUrls"`
	// Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.
	StaticIpScan pulumi.BoolOutput `pulumi:"staticIpScan"`
	// The user agent used during scanning.
	UserAgent pulumi.StringOutput `pulumi:"userAgent"`
}

// NewScanConfig registers a new resource with the given unique name, arguments, and options.
func NewScanConfig(ctx *pulumi.Context,
	name string, args *ScanConfigArgs, opts ...pulumi.ResourceOption) (*ScanConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.StartingUrls == nil {
		return nil, errors.New("invalid value for required argument 'StartingUrls'")
	}
	var resource ScanConfig
	err := ctx.RegisterResource("google-native:websecurityscanner/v1:ScanConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScanConfig gets an existing ScanConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScanConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScanConfigState, opts ...pulumi.ResourceOption) (*ScanConfig, error) {
	var resource ScanConfig
	err := ctx.ReadResource("google-native:websecurityscanner/v1:ScanConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScanConfig resources.
type scanConfigState struct {
}

type ScanConfigState struct {
}

func (ScanConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*scanConfigState)(nil)).Elem()
}

type scanConfigArgs struct {
	// The authentication configuration. If specified, service will use the authentication configuration during scanning.
	Authentication *Authentication `pulumi:"authentication"`
	// The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
	BlacklistPatterns []string `pulumi:"blacklistPatterns"`
	// The user provided display name of the ScanConfig.
	DisplayName string `pulumi:"displayName"`
	// Controls export of scan configurations and results to Security Command Center.
	ExportToSecurityCommandCenter *ScanConfigExportToSecurityCommandCenter `pulumi:"exportToSecurityCommandCenter"`
	// Whether to keep scanning even if most requests return HTTP error codes.
	IgnoreHttpStatusErrors *bool `pulumi:"ignoreHttpStatusErrors"`
	// Whether the scan config is managed by Web Security Scanner, output only.
	ManagedScan *bool `pulumi:"managedScan"`
	// The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
	MaxQps *int `pulumi:"maxQps"`
	// The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The risk level selected for the scan
	RiskLevel *ScanConfigRiskLevel `pulumi:"riskLevel"`
	// The schedule of the ScanConfig.
	Schedule *Schedule `pulumi:"schedule"`
	// The starting URLs from which the scanner finds site pages.
	StartingUrls []string `pulumi:"startingUrls"`
	// Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.
	StaticIpScan *bool `pulumi:"staticIpScan"`
	// The user agent used during scanning.
	UserAgent *ScanConfigUserAgent `pulumi:"userAgent"`
}

// The set of arguments for constructing a ScanConfig resource.
type ScanConfigArgs struct {
	// The authentication configuration. If specified, service will use the authentication configuration during scanning.
	Authentication AuthenticationPtrInput
	// The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
	BlacklistPatterns pulumi.StringArrayInput
	// The user provided display name of the ScanConfig.
	DisplayName pulumi.StringInput
	// Controls export of scan configurations and results to Security Command Center.
	ExportToSecurityCommandCenter ScanConfigExportToSecurityCommandCenterPtrInput
	// Whether to keep scanning even if most requests return HTTP error codes.
	IgnoreHttpStatusErrors pulumi.BoolPtrInput
	// Whether the scan config is managed by Web Security Scanner, output only.
	ManagedScan pulumi.BoolPtrInput
	// The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
	MaxQps pulumi.IntPtrInput
	// The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The risk level selected for the scan
	RiskLevel ScanConfigRiskLevelPtrInput
	// The schedule of the ScanConfig.
	Schedule SchedulePtrInput
	// The starting URLs from which the scanner finds site pages.
	StartingUrls pulumi.StringArrayInput
	// Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.
	StaticIpScan pulumi.BoolPtrInput
	// The user agent used during scanning.
	UserAgent ScanConfigUserAgentPtrInput
}

func (ScanConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scanConfigArgs)(nil)).Elem()
}

type ScanConfigInput interface {
	pulumi.Input

	ToScanConfigOutput() ScanConfigOutput
	ToScanConfigOutputWithContext(ctx context.Context) ScanConfigOutput
}

func (*ScanConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanConfig)(nil)).Elem()
}

func (i *ScanConfig) ToScanConfigOutput() ScanConfigOutput {
	return i.ToScanConfigOutputWithContext(context.Background())
}

func (i *ScanConfig) ToScanConfigOutputWithContext(ctx context.Context) ScanConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScanConfigOutput)
}

type ScanConfigOutput struct{ *pulumi.OutputState }

func (ScanConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanConfig)(nil)).Elem()
}

func (o ScanConfigOutput) ToScanConfigOutput() ScanConfigOutput {
	return o
}

func (o ScanConfigOutput) ToScanConfigOutputWithContext(ctx context.Context) ScanConfigOutput {
	return o
}

// The authentication configuration. If specified, service will use the authentication configuration during scanning.
func (o ScanConfigOutput) Authentication() AuthenticationResponseOutput {
	return o.ApplyT(func(v *ScanConfig) AuthenticationResponseOutput { return v.Authentication }).(AuthenticationResponseOutput)
}

// The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
func (o ScanConfigOutput) BlacklistPatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.StringArrayOutput { return v.BlacklistPatterns }).(pulumi.StringArrayOutput)
}

// The user provided display name of the ScanConfig.
func (o ScanConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Controls export of scan configurations and results to Security Command Center.
func (o ScanConfigOutput) ExportToSecurityCommandCenter() pulumi.StringOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.StringOutput { return v.ExportToSecurityCommandCenter }).(pulumi.StringOutput)
}

// Whether to keep scanning even if most requests return HTTP error codes.
func (o ScanConfigOutput) IgnoreHttpStatusErrors() pulumi.BoolOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.BoolOutput { return v.IgnoreHttpStatusErrors }).(pulumi.BoolOutput)
}

// Whether the scan config is managed by Web Security Scanner, output only.
func (o ScanConfigOutput) ManagedScan() pulumi.BoolOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.BoolOutput { return v.ManagedScan }).(pulumi.BoolOutput)
}

// The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
func (o ScanConfigOutput) MaxQps() pulumi.IntOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.IntOutput { return v.MaxQps }).(pulumi.IntOutput)
}

// The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.
func (o ScanConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The risk level selected for the scan
func (o ScanConfigOutput) RiskLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.StringOutput { return v.RiskLevel }).(pulumi.StringOutput)
}

// The schedule of the ScanConfig.
func (o ScanConfigOutput) Schedule() ScheduleResponseOutput {
	return o.ApplyT(func(v *ScanConfig) ScheduleResponseOutput { return v.Schedule }).(ScheduleResponseOutput)
}

// The starting URLs from which the scanner finds site pages.
func (o ScanConfigOutput) StartingUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.StringArrayOutput { return v.StartingUrls }).(pulumi.StringArrayOutput)
}

// Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.
func (o ScanConfigOutput) StaticIpScan() pulumi.BoolOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.BoolOutput { return v.StaticIpScan }).(pulumi.BoolOutput)
}

// The user agent used during scanning.
func (o ScanConfigOutput) UserAgent() pulumi.StringOutput {
	return o.ApplyT(func(v *ScanConfig) pulumi.StringOutput { return v.UserAgent }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigInput)(nil)).Elem(), &ScanConfig{})
	pulumi.RegisterOutputType(ScanConfigOutput{})
}
