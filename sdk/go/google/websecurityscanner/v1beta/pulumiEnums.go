// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Indicates the reason code for a configuration failure.
type ScanConfigErrorCode string

const (
	// There is no error.
	ScanConfigErrorCodeCodeUnspecified = ScanConfigErrorCode("CODE_UNSPECIFIED")
	// There is no error.
	ScanConfigErrorCodeOk = ScanConfigErrorCode("OK")
	// Indicates an internal server error. Please DO NOT USE THIS ERROR CODE unless the root cause is truly unknown.
	ScanConfigErrorCodeInternalError = ScanConfigErrorCode("INTERNAL_ERROR")
	// One of the seed URLs is an App Engine URL but we cannot validate the scan settings due to an App Engine API backend error.
	ScanConfigErrorCodeAppengineApiBackendError = ScanConfigErrorCode("APPENGINE_API_BACKEND_ERROR")
	// One of the seed URLs is an App Engine URL but we cannot access the App Engine API to validate scan settings.
	ScanConfigErrorCodeAppengineApiNotAccessible = ScanConfigErrorCode("APPENGINE_API_NOT_ACCESSIBLE")
	// One of the seed URLs is an App Engine URL but the Default Host of the App Engine is not set.
	ScanConfigErrorCodeAppengineDefaultHostMissing = ScanConfigErrorCode("APPENGINE_DEFAULT_HOST_MISSING")
	// Google corporate accounts can not be used for scanning.
	ScanConfigErrorCodeCannotUseGoogleComAccount = ScanConfigErrorCode("CANNOT_USE_GOOGLE_COM_ACCOUNT")
	// The account of the scan creator can not be used for scanning.
	ScanConfigErrorCodeCannotUseOwnerAccount = ScanConfigErrorCode("CANNOT_USE_OWNER_ACCOUNT")
	// This scan targets Compute Engine, but we cannot validate scan settings due to a Compute Engine API backend error.
	ScanConfigErrorCodeComputeApiBackendError = ScanConfigErrorCode("COMPUTE_API_BACKEND_ERROR")
	// This scan targets Compute Engine, but we cannot access the Compute Engine API to validate the scan settings.
	ScanConfigErrorCodeComputeApiNotAccessible = ScanConfigErrorCode("COMPUTE_API_NOT_ACCESSIBLE")
	// The Custom Login URL does not belong to the current project.
	ScanConfigErrorCodeCustomLoginUrlDoesNotBelongToCurrentProject = ScanConfigErrorCode("CUSTOM_LOGIN_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT")
	// The Custom Login URL is malformed (can not be parsed).
	ScanConfigErrorCodeCustomLoginUrlMalformed = ScanConfigErrorCode("CUSTOM_LOGIN_URL_MALFORMED")
	// The Custom Login URL is mapped to a non-routable IP address in DNS.
	ScanConfigErrorCodeCustomLoginUrlMappedToNonRoutableAddress = ScanConfigErrorCode("CUSTOM_LOGIN_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS")
	// The Custom Login URL is mapped to an IP address which is not reserved for the current project.
	ScanConfigErrorCodeCustomLoginUrlMappedToUnreservedAddress = ScanConfigErrorCode("CUSTOM_LOGIN_URL_MAPPED_TO_UNRESERVED_ADDRESS")
	// The Custom Login URL has a non-routable IP address.
	ScanConfigErrorCodeCustomLoginUrlHasNonRoutableIpAddress = ScanConfigErrorCode("CUSTOM_LOGIN_URL_HAS_NON_ROUTABLE_IP_ADDRESS")
	// The Custom Login URL has an IP address which is not reserved for the current project.
	ScanConfigErrorCodeCustomLoginUrlHasUnreservedIpAddress = ScanConfigErrorCode("CUSTOM_LOGIN_URL_HAS_UNRESERVED_IP_ADDRESS")
	// Another scan with the same name (case-sensitive) already exists.
	ScanConfigErrorCodeDuplicateScanName = ScanConfigErrorCode("DUPLICATE_SCAN_NAME")
	// A field is set to an invalid value.
	ScanConfigErrorCodeInvalidFieldValue = ScanConfigErrorCode("INVALID_FIELD_VALUE")
	// There was an error trying to authenticate to the scan target.
	ScanConfigErrorCodeFailedToAuthenticateToTarget = ScanConfigErrorCode("FAILED_TO_AUTHENTICATE_TO_TARGET")
	// Finding type value is not specified in the list findings request.
	ScanConfigErrorCodeFindingTypeUnspecified = ScanConfigErrorCode("FINDING_TYPE_UNSPECIFIED")
	// Scan targets Compute Engine, yet current project was not whitelisted for Google Compute Engine Scanning Alpha access.
	ScanConfigErrorCodeForbiddenToScanCompute = ScanConfigErrorCode("FORBIDDEN_TO_SCAN_COMPUTE")
	// User tries to update managed scan
	ScanConfigErrorCodeForbiddenUpdateToManagedScan = ScanConfigErrorCode("FORBIDDEN_UPDATE_TO_MANAGED_SCAN")
	// The supplied filter is malformed. For example, it can not be parsed, does not have a filter type in expression, or the same filter type appears more than once.
	ScanConfigErrorCodeMalformedFilter = ScanConfigErrorCode("MALFORMED_FILTER")
	// The supplied resource name is malformed (can not be parsed).
	ScanConfigErrorCodeMalformedResourceName = ScanConfigErrorCode("MALFORMED_RESOURCE_NAME")
	// The current project is not in an active state.
	ScanConfigErrorCodeProjectInactive = ScanConfigErrorCode("PROJECT_INACTIVE")
	// A required field is not set.
	ScanConfigErrorCodeRequiredField = ScanConfigErrorCode("REQUIRED_FIELD")
	// Project id, scanconfig id, scanrun id, or finding id are not consistent with each other in resource name.
	ScanConfigErrorCodeResourceNameInconsistent = ScanConfigErrorCode("RESOURCE_NAME_INCONSISTENT")
	// The scan being requested to start is already running.
	ScanConfigErrorCodeScanAlreadyRunning = ScanConfigErrorCode("SCAN_ALREADY_RUNNING")
	// The scan that was requested to be stopped is not running.
	ScanConfigErrorCodeScanNotRunning = ScanConfigErrorCode("SCAN_NOT_RUNNING")
	// One of the seed URLs does not belong to the current project.
	ScanConfigErrorCodeSeedUrlDoesNotBelongToCurrentProject = ScanConfigErrorCode("SEED_URL_DOES_NOT_BELONG_TO_CURRENT_PROJECT")
	// One of the seed URLs is malformed (can not be parsed).
	ScanConfigErrorCodeSeedUrlMalformed = ScanConfigErrorCode("SEED_URL_MALFORMED")
	// One of the seed URLs is mapped to a non-routable IP address in DNS.
	ScanConfigErrorCodeSeedUrlMappedToNonRoutableAddress = ScanConfigErrorCode("SEED_URL_MAPPED_TO_NON_ROUTABLE_ADDRESS")
	// One of the seed URLs is mapped to an IP address which is not reserved for the current project.
	ScanConfigErrorCodeSeedUrlMappedToUnreservedAddress = ScanConfigErrorCode("SEED_URL_MAPPED_TO_UNRESERVED_ADDRESS")
	// One of the seed URLs has on-routable IP address.
	ScanConfigErrorCodeSeedUrlHasNonRoutableIpAddress = ScanConfigErrorCode("SEED_URL_HAS_NON_ROUTABLE_IP_ADDRESS")
	// One of the seed URLs has an IP address that is not reserved for the current project.
	ScanConfigErrorCodeSeedUrlHasUnreservedIpAddress = ScanConfigErrorCode("SEED_URL_HAS_UNRESERVED_IP_ADDRESS")
	// The Web Security Scanner service account is not configured under the project.
	ScanConfigErrorCodeServiceAccountNotConfigured = ScanConfigErrorCode("SERVICE_ACCOUNT_NOT_CONFIGURED")
	// A project has reached the maximum number of scans.
	ScanConfigErrorCodeTooManyScans = ScanConfigErrorCode("TOO_MANY_SCANS")
	// Resolving the details of the current project fails.
	ScanConfigErrorCodeUnableToResolveProjectInfo = ScanConfigErrorCode("UNABLE_TO_RESOLVE_PROJECT_INFO")
	// One or more blacklist patterns were in the wrong format.
	ScanConfigErrorCodeUnsupportedBlacklistPatternFormat = ScanConfigErrorCode("UNSUPPORTED_BLACKLIST_PATTERN_FORMAT")
	// The supplied filter is not supported.
	ScanConfigErrorCodeUnsupportedFilter = ScanConfigErrorCode("UNSUPPORTED_FILTER")
	// The supplied finding type is not supported. For example, we do not provide findings of the given finding type.
	ScanConfigErrorCodeUnsupportedFindingType = ScanConfigErrorCode("UNSUPPORTED_FINDING_TYPE")
	// The URL scheme of one or more of the supplied URLs is not supported.
	ScanConfigErrorCodeUnsupportedUrlScheme = ScanConfigErrorCode("UNSUPPORTED_URL_SCHEME")
	// CAI is not able to list assets.
	ScanConfigErrorCodeCloudAssetInventoryAssetNotFound = ScanConfigErrorCode("CLOUD_ASSET_INVENTORY_ASSET_NOT_FOUND")
)

func (ScanConfigErrorCode) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanConfigErrorCode)(nil)).Elem()
}

func (e ScanConfigErrorCode) ToScanConfigErrorCodeOutput() ScanConfigErrorCodeOutput {
	return pulumi.ToOutput(e).(ScanConfigErrorCodeOutput)
}

func (e ScanConfigErrorCode) ToScanConfigErrorCodeOutputWithContext(ctx context.Context) ScanConfigErrorCodeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScanConfigErrorCodeOutput)
}

func (e ScanConfigErrorCode) ToScanConfigErrorCodePtrOutput() ScanConfigErrorCodePtrOutput {
	return e.ToScanConfigErrorCodePtrOutputWithContext(context.Background())
}

func (e ScanConfigErrorCode) ToScanConfigErrorCodePtrOutputWithContext(ctx context.Context) ScanConfigErrorCodePtrOutput {
	return ScanConfigErrorCode(e).ToScanConfigErrorCodeOutputWithContext(ctx).ToScanConfigErrorCodePtrOutputWithContext(ctx)
}

func (e ScanConfigErrorCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigErrorCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigErrorCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanConfigErrorCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScanConfigErrorCodeOutput struct{ *pulumi.OutputState }

func (ScanConfigErrorCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanConfigErrorCode)(nil)).Elem()
}

func (o ScanConfigErrorCodeOutput) ToScanConfigErrorCodeOutput() ScanConfigErrorCodeOutput {
	return o
}

func (o ScanConfigErrorCodeOutput) ToScanConfigErrorCodeOutputWithContext(ctx context.Context) ScanConfigErrorCodeOutput {
	return o
}

func (o ScanConfigErrorCodeOutput) ToScanConfigErrorCodePtrOutput() ScanConfigErrorCodePtrOutput {
	return o.ToScanConfigErrorCodePtrOutputWithContext(context.Background())
}

func (o ScanConfigErrorCodeOutput) ToScanConfigErrorCodePtrOutputWithContext(ctx context.Context) ScanConfigErrorCodePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScanConfigErrorCode) *ScanConfigErrorCode {
		return &v
	}).(ScanConfigErrorCodePtrOutput)
}

func (o ScanConfigErrorCodeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScanConfigErrorCodeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanConfigErrorCode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScanConfigErrorCodeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanConfigErrorCodeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanConfigErrorCode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScanConfigErrorCodePtrOutput struct{ *pulumi.OutputState }

func (ScanConfigErrorCodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanConfigErrorCode)(nil)).Elem()
}

func (o ScanConfigErrorCodePtrOutput) ToScanConfigErrorCodePtrOutput() ScanConfigErrorCodePtrOutput {
	return o
}

func (o ScanConfigErrorCodePtrOutput) ToScanConfigErrorCodePtrOutputWithContext(ctx context.Context) ScanConfigErrorCodePtrOutput {
	return o
}

func (o ScanConfigErrorCodePtrOutput) Elem() ScanConfigErrorCodeOutput {
	return o.ApplyT(func(v *ScanConfigErrorCode) ScanConfigErrorCode {
		if v != nil {
			return *v
		}
		var ret ScanConfigErrorCode
		return ret
	}).(ScanConfigErrorCodeOutput)
}

func (o ScanConfigErrorCodePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanConfigErrorCodePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScanConfigErrorCode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScanConfigErrorCodeInput is an input type that accepts ScanConfigErrorCodeArgs and ScanConfigErrorCodeOutput values.
// You can construct a concrete instance of `ScanConfigErrorCodeInput` via:
//
//	ScanConfigErrorCodeArgs{...}
type ScanConfigErrorCodeInput interface {
	pulumi.Input

	ToScanConfigErrorCodeOutput() ScanConfigErrorCodeOutput
	ToScanConfigErrorCodeOutputWithContext(context.Context) ScanConfigErrorCodeOutput
}

var scanConfigErrorCodePtrType = reflect.TypeOf((**ScanConfigErrorCode)(nil)).Elem()

type ScanConfigErrorCodePtrInput interface {
	pulumi.Input

	ToScanConfigErrorCodePtrOutput() ScanConfigErrorCodePtrOutput
	ToScanConfigErrorCodePtrOutputWithContext(context.Context) ScanConfigErrorCodePtrOutput
}

type scanConfigErrorCodePtr string

func ScanConfigErrorCodePtr(v string) ScanConfigErrorCodePtrInput {
	return (*scanConfigErrorCodePtr)(&v)
}

func (*scanConfigErrorCodePtr) ElementType() reflect.Type {
	return scanConfigErrorCodePtrType
}

func (in *scanConfigErrorCodePtr) ToScanConfigErrorCodePtrOutput() ScanConfigErrorCodePtrOutput {
	return pulumi.ToOutput(in).(ScanConfigErrorCodePtrOutput)
}

func (in *scanConfigErrorCodePtr) ToScanConfigErrorCodePtrOutputWithContext(ctx context.Context) ScanConfigErrorCodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScanConfigErrorCodePtrOutput)
}

func (in *scanConfigErrorCodePtr) ToOutput(ctx context.Context) pulumix.Output[*ScanConfigErrorCode] {
	return pulumix.Output[*ScanConfigErrorCode]{
		OutputState: in.ToScanConfigErrorCodePtrOutputWithContext(ctx).OutputState,
	}
}

// Controls export of scan configurations and results to Security Command Center.
type ScanConfigExportToSecurityCommandCenter string

const (
	// Use default, which is ENABLED.
	ScanConfigExportToSecurityCommandCenterExportToSecurityCommandCenterUnspecified = ScanConfigExportToSecurityCommandCenter("EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED")
	// Export results of this scan to Security Command Center.
	ScanConfigExportToSecurityCommandCenterEnabled = ScanConfigExportToSecurityCommandCenter("ENABLED")
	// Do not export results of this scan to Security Command Center.
	ScanConfigExportToSecurityCommandCenterDisabled = ScanConfigExportToSecurityCommandCenter("DISABLED")
)

func (ScanConfigExportToSecurityCommandCenter) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanConfigExportToSecurityCommandCenter)(nil)).Elem()
}

func (e ScanConfigExportToSecurityCommandCenter) ToScanConfigExportToSecurityCommandCenterOutput() ScanConfigExportToSecurityCommandCenterOutput {
	return pulumi.ToOutput(e).(ScanConfigExportToSecurityCommandCenterOutput)
}

func (e ScanConfigExportToSecurityCommandCenter) ToScanConfigExportToSecurityCommandCenterOutputWithContext(ctx context.Context) ScanConfigExportToSecurityCommandCenterOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScanConfigExportToSecurityCommandCenterOutput)
}

func (e ScanConfigExportToSecurityCommandCenter) ToScanConfigExportToSecurityCommandCenterPtrOutput() ScanConfigExportToSecurityCommandCenterPtrOutput {
	return e.ToScanConfigExportToSecurityCommandCenterPtrOutputWithContext(context.Background())
}

func (e ScanConfigExportToSecurityCommandCenter) ToScanConfigExportToSecurityCommandCenterPtrOutputWithContext(ctx context.Context) ScanConfigExportToSecurityCommandCenterPtrOutput {
	return ScanConfigExportToSecurityCommandCenter(e).ToScanConfigExportToSecurityCommandCenterOutputWithContext(ctx).ToScanConfigExportToSecurityCommandCenterPtrOutputWithContext(ctx)
}

func (e ScanConfigExportToSecurityCommandCenter) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigExportToSecurityCommandCenter) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigExportToSecurityCommandCenter) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanConfigExportToSecurityCommandCenter) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScanConfigExportToSecurityCommandCenterOutput struct{ *pulumi.OutputState }

func (ScanConfigExportToSecurityCommandCenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanConfigExportToSecurityCommandCenter)(nil)).Elem()
}

func (o ScanConfigExportToSecurityCommandCenterOutput) ToScanConfigExportToSecurityCommandCenterOutput() ScanConfigExportToSecurityCommandCenterOutput {
	return o
}

func (o ScanConfigExportToSecurityCommandCenterOutput) ToScanConfigExportToSecurityCommandCenterOutputWithContext(ctx context.Context) ScanConfigExportToSecurityCommandCenterOutput {
	return o
}

func (o ScanConfigExportToSecurityCommandCenterOutput) ToScanConfigExportToSecurityCommandCenterPtrOutput() ScanConfigExportToSecurityCommandCenterPtrOutput {
	return o.ToScanConfigExportToSecurityCommandCenterPtrOutputWithContext(context.Background())
}

func (o ScanConfigExportToSecurityCommandCenterOutput) ToScanConfigExportToSecurityCommandCenterPtrOutputWithContext(ctx context.Context) ScanConfigExportToSecurityCommandCenterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScanConfigExportToSecurityCommandCenter) *ScanConfigExportToSecurityCommandCenter {
		return &v
	}).(ScanConfigExportToSecurityCommandCenterPtrOutput)
}

func (o ScanConfigExportToSecurityCommandCenterOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScanConfigExportToSecurityCommandCenterOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanConfigExportToSecurityCommandCenter) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScanConfigExportToSecurityCommandCenterOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanConfigExportToSecurityCommandCenterOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanConfigExportToSecurityCommandCenter) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScanConfigExportToSecurityCommandCenterPtrOutput struct{ *pulumi.OutputState }

func (ScanConfigExportToSecurityCommandCenterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanConfigExportToSecurityCommandCenter)(nil)).Elem()
}

func (o ScanConfigExportToSecurityCommandCenterPtrOutput) ToScanConfigExportToSecurityCommandCenterPtrOutput() ScanConfigExportToSecurityCommandCenterPtrOutput {
	return o
}

func (o ScanConfigExportToSecurityCommandCenterPtrOutput) ToScanConfigExportToSecurityCommandCenterPtrOutputWithContext(ctx context.Context) ScanConfigExportToSecurityCommandCenterPtrOutput {
	return o
}

func (o ScanConfigExportToSecurityCommandCenterPtrOutput) Elem() ScanConfigExportToSecurityCommandCenterOutput {
	return o.ApplyT(func(v *ScanConfigExportToSecurityCommandCenter) ScanConfigExportToSecurityCommandCenter {
		if v != nil {
			return *v
		}
		var ret ScanConfigExportToSecurityCommandCenter
		return ret
	}).(ScanConfigExportToSecurityCommandCenterOutput)
}

func (o ScanConfigExportToSecurityCommandCenterPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanConfigExportToSecurityCommandCenterPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScanConfigExportToSecurityCommandCenter) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScanConfigExportToSecurityCommandCenterInput is an input type that accepts ScanConfigExportToSecurityCommandCenterArgs and ScanConfigExportToSecurityCommandCenterOutput values.
// You can construct a concrete instance of `ScanConfigExportToSecurityCommandCenterInput` via:
//
//	ScanConfigExportToSecurityCommandCenterArgs{...}
type ScanConfigExportToSecurityCommandCenterInput interface {
	pulumi.Input

	ToScanConfigExportToSecurityCommandCenterOutput() ScanConfigExportToSecurityCommandCenterOutput
	ToScanConfigExportToSecurityCommandCenterOutputWithContext(context.Context) ScanConfigExportToSecurityCommandCenterOutput
}

var scanConfigExportToSecurityCommandCenterPtrType = reflect.TypeOf((**ScanConfigExportToSecurityCommandCenter)(nil)).Elem()

type ScanConfigExportToSecurityCommandCenterPtrInput interface {
	pulumi.Input

	ToScanConfigExportToSecurityCommandCenterPtrOutput() ScanConfigExportToSecurityCommandCenterPtrOutput
	ToScanConfigExportToSecurityCommandCenterPtrOutputWithContext(context.Context) ScanConfigExportToSecurityCommandCenterPtrOutput
}

type scanConfigExportToSecurityCommandCenterPtr string

func ScanConfigExportToSecurityCommandCenterPtr(v string) ScanConfigExportToSecurityCommandCenterPtrInput {
	return (*scanConfigExportToSecurityCommandCenterPtr)(&v)
}

func (*scanConfigExportToSecurityCommandCenterPtr) ElementType() reflect.Type {
	return scanConfigExportToSecurityCommandCenterPtrType
}

func (in *scanConfigExportToSecurityCommandCenterPtr) ToScanConfigExportToSecurityCommandCenterPtrOutput() ScanConfigExportToSecurityCommandCenterPtrOutput {
	return pulumi.ToOutput(in).(ScanConfigExportToSecurityCommandCenterPtrOutput)
}

func (in *scanConfigExportToSecurityCommandCenterPtr) ToScanConfigExportToSecurityCommandCenterPtrOutputWithContext(ctx context.Context) ScanConfigExportToSecurityCommandCenterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScanConfigExportToSecurityCommandCenterPtrOutput)
}

func (in *scanConfigExportToSecurityCommandCenterPtr) ToOutput(ctx context.Context) pulumix.Output[*ScanConfigExportToSecurityCommandCenter] {
	return pulumix.Output[*ScanConfigExportToSecurityCommandCenter]{
		OutputState: in.ToScanConfigExportToSecurityCommandCenterPtrOutputWithContext(ctx).OutputState,
	}
}

// The risk level selected for the scan
type ScanConfigRiskLevel string

const (
	// Use default, which is NORMAL.
	ScanConfigRiskLevelRiskLevelUnspecified = ScanConfigRiskLevel("RISK_LEVEL_UNSPECIFIED")
	// Normal scanning (Recommended)
	ScanConfigRiskLevelNormal = ScanConfigRiskLevel("NORMAL")
	// Lower impact scanning
	ScanConfigRiskLevelLow = ScanConfigRiskLevel("LOW")
)

func (ScanConfigRiskLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanConfigRiskLevel)(nil)).Elem()
}

func (e ScanConfigRiskLevel) ToScanConfigRiskLevelOutput() ScanConfigRiskLevelOutput {
	return pulumi.ToOutput(e).(ScanConfigRiskLevelOutput)
}

func (e ScanConfigRiskLevel) ToScanConfigRiskLevelOutputWithContext(ctx context.Context) ScanConfigRiskLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScanConfigRiskLevelOutput)
}

func (e ScanConfigRiskLevel) ToScanConfigRiskLevelPtrOutput() ScanConfigRiskLevelPtrOutput {
	return e.ToScanConfigRiskLevelPtrOutputWithContext(context.Background())
}

func (e ScanConfigRiskLevel) ToScanConfigRiskLevelPtrOutputWithContext(ctx context.Context) ScanConfigRiskLevelPtrOutput {
	return ScanConfigRiskLevel(e).ToScanConfigRiskLevelOutputWithContext(ctx).ToScanConfigRiskLevelPtrOutputWithContext(ctx)
}

func (e ScanConfigRiskLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigRiskLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigRiskLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanConfigRiskLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScanConfigRiskLevelOutput struct{ *pulumi.OutputState }

func (ScanConfigRiskLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanConfigRiskLevel)(nil)).Elem()
}

func (o ScanConfigRiskLevelOutput) ToScanConfigRiskLevelOutput() ScanConfigRiskLevelOutput {
	return o
}

func (o ScanConfigRiskLevelOutput) ToScanConfigRiskLevelOutputWithContext(ctx context.Context) ScanConfigRiskLevelOutput {
	return o
}

func (o ScanConfigRiskLevelOutput) ToScanConfigRiskLevelPtrOutput() ScanConfigRiskLevelPtrOutput {
	return o.ToScanConfigRiskLevelPtrOutputWithContext(context.Background())
}

func (o ScanConfigRiskLevelOutput) ToScanConfigRiskLevelPtrOutputWithContext(ctx context.Context) ScanConfigRiskLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScanConfigRiskLevel) *ScanConfigRiskLevel {
		return &v
	}).(ScanConfigRiskLevelPtrOutput)
}

func (o ScanConfigRiskLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScanConfigRiskLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanConfigRiskLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScanConfigRiskLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanConfigRiskLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanConfigRiskLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScanConfigRiskLevelPtrOutput struct{ *pulumi.OutputState }

func (ScanConfigRiskLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanConfigRiskLevel)(nil)).Elem()
}

func (o ScanConfigRiskLevelPtrOutput) ToScanConfigRiskLevelPtrOutput() ScanConfigRiskLevelPtrOutput {
	return o
}

func (o ScanConfigRiskLevelPtrOutput) ToScanConfigRiskLevelPtrOutputWithContext(ctx context.Context) ScanConfigRiskLevelPtrOutput {
	return o
}

func (o ScanConfigRiskLevelPtrOutput) Elem() ScanConfigRiskLevelOutput {
	return o.ApplyT(func(v *ScanConfigRiskLevel) ScanConfigRiskLevel {
		if v != nil {
			return *v
		}
		var ret ScanConfigRiskLevel
		return ret
	}).(ScanConfigRiskLevelOutput)
}

func (o ScanConfigRiskLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanConfigRiskLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScanConfigRiskLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScanConfigRiskLevelInput is an input type that accepts ScanConfigRiskLevelArgs and ScanConfigRiskLevelOutput values.
// You can construct a concrete instance of `ScanConfigRiskLevelInput` via:
//
//	ScanConfigRiskLevelArgs{...}
type ScanConfigRiskLevelInput interface {
	pulumi.Input

	ToScanConfigRiskLevelOutput() ScanConfigRiskLevelOutput
	ToScanConfigRiskLevelOutputWithContext(context.Context) ScanConfigRiskLevelOutput
}

var scanConfigRiskLevelPtrType = reflect.TypeOf((**ScanConfigRiskLevel)(nil)).Elem()

type ScanConfigRiskLevelPtrInput interface {
	pulumi.Input

	ToScanConfigRiskLevelPtrOutput() ScanConfigRiskLevelPtrOutput
	ToScanConfigRiskLevelPtrOutputWithContext(context.Context) ScanConfigRiskLevelPtrOutput
}

type scanConfigRiskLevelPtr string

func ScanConfigRiskLevelPtr(v string) ScanConfigRiskLevelPtrInput {
	return (*scanConfigRiskLevelPtr)(&v)
}

func (*scanConfigRiskLevelPtr) ElementType() reflect.Type {
	return scanConfigRiskLevelPtrType
}

func (in *scanConfigRiskLevelPtr) ToScanConfigRiskLevelPtrOutput() ScanConfigRiskLevelPtrOutput {
	return pulumi.ToOutput(in).(ScanConfigRiskLevelPtrOutput)
}

func (in *scanConfigRiskLevelPtr) ToScanConfigRiskLevelPtrOutputWithContext(ctx context.Context) ScanConfigRiskLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScanConfigRiskLevelPtrOutput)
}

func (in *scanConfigRiskLevelPtr) ToOutput(ctx context.Context) pulumix.Output[*ScanConfigRiskLevel] {
	return pulumix.Output[*ScanConfigRiskLevel]{
		OutputState: in.ToScanConfigRiskLevelPtrOutputWithContext(ctx).OutputState,
	}
}

type ScanConfigTargetPlatformsItem string

const (
	// The target platform is unknown. Requests with this enum value will be rejected with INVALID_ARGUMENT error.
	ScanConfigTargetPlatformsItemTargetPlatformUnspecified = ScanConfigTargetPlatformsItem("TARGET_PLATFORM_UNSPECIFIED")
	// Google App Engine service.
	ScanConfigTargetPlatformsItemAppEngine = ScanConfigTargetPlatformsItem("APP_ENGINE")
	// Google Compute Engine service.
	ScanConfigTargetPlatformsItemCompute = ScanConfigTargetPlatformsItem("COMPUTE")
	// Google Cloud Run service.
	ScanConfigTargetPlatformsItemCloudRun = ScanConfigTargetPlatformsItem("CLOUD_RUN")
	// Google Cloud Function service.
	ScanConfigTargetPlatformsItemCloudFunctions = ScanConfigTargetPlatformsItem("CLOUD_FUNCTIONS")
)

func (ScanConfigTargetPlatformsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanConfigTargetPlatformsItem)(nil)).Elem()
}

func (e ScanConfigTargetPlatformsItem) ToScanConfigTargetPlatformsItemOutput() ScanConfigTargetPlatformsItemOutput {
	return pulumi.ToOutput(e).(ScanConfigTargetPlatformsItemOutput)
}

func (e ScanConfigTargetPlatformsItem) ToScanConfigTargetPlatformsItemOutputWithContext(ctx context.Context) ScanConfigTargetPlatformsItemOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScanConfigTargetPlatformsItemOutput)
}

func (e ScanConfigTargetPlatformsItem) ToScanConfigTargetPlatformsItemPtrOutput() ScanConfigTargetPlatformsItemPtrOutput {
	return e.ToScanConfigTargetPlatformsItemPtrOutputWithContext(context.Background())
}

func (e ScanConfigTargetPlatformsItem) ToScanConfigTargetPlatformsItemPtrOutputWithContext(ctx context.Context) ScanConfigTargetPlatformsItemPtrOutput {
	return ScanConfigTargetPlatformsItem(e).ToScanConfigTargetPlatformsItemOutputWithContext(ctx).ToScanConfigTargetPlatformsItemPtrOutputWithContext(ctx)
}

func (e ScanConfigTargetPlatformsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigTargetPlatformsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigTargetPlatformsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanConfigTargetPlatformsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScanConfigTargetPlatformsItemOutput struct{ *pulumi.OutputState }

func (ScanConfigTargetPlatformsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanConfigTargetPlatformsItem)(nil)).Elem()
}

func (o ScanConfigTargetPlatformsItemOutput) ToScanConfigTargetPlatformsItemOutput() ScanConfigTargetPlatformsItemOutput {
	return o
}

func (o ScanConfigTargetPlatformsItemOutput) ToScanConfigTargetPlatformsItemOutputWithContext(ctx context.Context) ScanConfigTargetPlatformsItemOutput {
	return o
}

func (o ScanConfigTargetPlatformsItemOutput) ToScanConfigTargetPlatformsItemPtrOutput() ScanConfigTargetPlatformsItemPtrOutput {
	return o.ToScanConfigTargetPlatformsItemPtrOutputWithContext(context.Background())
}

func (o ScanConfigTargetPlatformsItemOutput) ToScanConfigTargetPlatformsItemPtrOutputWithContext(ctx context.Context) ScanConfigTargetPlatformsItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScanConfigTargetPlatformsItem) *ScanConfigTargetPlatformsItem {
		return &v
	}).(ScanConfigTargetPlatformsItemPtrOutput)
}

func (o ScanConfigTargetPlatformsItemOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScanConfigTargetPlatformsItemOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanConfigTargetPlatformsItem) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScanConfigTargetPlatformsItemOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanConfigTargetPlatformsItemOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanConfigTargetPlatformsItem) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScanConfigTargetPlatformsItemPtrOutput struct{ *pulumi.OutputState }

func (ScanConfigTargetPlatformsItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanConfigTargetPlatformsItem)(nil)).Elem()
}

func (o ScanConfigTargetPlatformsItemPtrOutput) ToScanConfigTargetPlatformsItemPtrOutput() ScanConfigTargetPlatformsItemPtrOutput {
	return o
}

func (o ScanConfigTargetPlatformsItemPtrOutput) ToScanConfigTargetPlatformsItemPtrOutputWithContext(ctx context.Context) ScanConfigTargetPlatformsItemPtrOutput {
	return o
}

func (o ScanConfigTargetPlatformsItemPtrOutput) Elem() ScanConfigTargetPlatformsItemOutput {
	return o.ApplyT(func(v *ScanConfigTargetPlatformsItem) ScanConfigTargetPlatformsItem {
		if v != nil {
			return *v
		}
		var ret ScanConfigTargetPlatformsItem
		return ret
	}).(ScanConfigTargetPlatformsItemOutput)
}

func (o ScanConfigTargetPlatformsItemPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanConfigTargetPlatformsItemPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScanConfigTargetPlatformsItem) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScanConfigTargetPlatformsItemInput is an input type that accepts ScanConfigTargetPlatformsItemArgs and ScanConfigTargetPlatformsItemOutput values.
// You can construct a concrete instance of `ScanConfigTargetPlatformsItemInput` via:
//
//	ScanConfigTargetPlatformsItemArgs{...}
type ScanConfigTargetPlatformsItemInput interface {
	pulumi.Input

	ToScanConfigTargetPlatformsItemOutput() ScanConfigTargetPlatformsItemOutput
	ToScanConfigTargetPlatformsItemOutputWithContext(context.Context) ScanConfigTargetPlatformsItemOutput
}

var scanConfigTargetPlatformsItemPtrType = reflect.TypeOf((**ScanConfigTargetPlatformsItem)(nil)).Elem()

type ScanConfigTargetPlatformsItemPtrInput interface {
	pulumi.Input

	ToScanConfigTargetPlatformsItemPtrOutput() ScanConfigTargetPlatformsItemPtrOutput
	ToScanConfigTargetPlatformsItemPtrOutputWithContext(context.Context) ScanConfigTargetPlatformsItemPtrOutput
}

type scanConfigTargetPlatformsItemPtr string

func ScanConfigTargetPlatformsItemPtr(v string) ScanConfigTargetPlatformsItemPtrInput {
	return (*scanConfigTargetPlatformsItemPtr)(&v)
}

func (*scanConfigTargetPlatformsItemPtr) ElementType() reflect.Type {
	return scanConfigTargetPlatformsItemPtrType
}

func (in *scanConfigTargetPlatformsItemPtr) ToScanConfigTargetPlatformsItemPtrOutput() ScanConfigTargetPlatformsItemPtrOutput {
	return pulumi.ToOutput(in).(ScanConfigTargetPlatformsItemPtrOutput)
}

func (in *scanConfigTargetPlatformsItemPtr) ToScanConfigTargetPlatformsItemPtrOutputWithContext(ctx context.Context) ScanConfigTargetPlatformsItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScanConfigTargetPlatformsItemPtrOutput)
}

func (in *scanConfigTargetPlatformsItemPtr) ToOutput(ctx context.Context) pulumix.Output[*ScanConfigTargetPlatformsItem] {
	return pulumix.Output[*ScanConfigTargetPlatformsItem]{
		OutputState: in.ToScanConfigTargetPlatformsItemPtrOutputWithContext(ctx).OutputState,
	}
}

// ScanConfigTargetPlatformsItemArrayInput is an input type that accepts ScanConfigTargetPlatformsItemArray and ScanConfigTargetPlatformsItemArrayOutput values.
// You can construct a concrete instance of `ScanConfigTargetPlatformsItemArrayInput` via:
//
//	ScanConfigTargetPlatformsItemArray{ ScanConfigTargetPlatformsItemArgs{...} }
type ScanConfigTargetPlatformsItemArrayInput interface {
	pulumi.Input

	ToScanConfigTargetPlatformsItemArrayOutput() ScanConfigTargetPlatformsItemArrayOutput
	ToScanConfigTargetPlatformsItemArrayOutputWithContext(context.Context) ScanConfigTargetPlatformsItemArrayOutput
}

type ScanConfigTargetPlatformsItemArray []ScanConfigTargetPlatformsItem

func (ScanConfigTargetPlatformsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScanConfigTargetPlatformsItem)(nil)).Elem()
}

func (i ScanConfigTargetPlatformsItemArray) ToScanConfigTargetPlatformsItemArrayOutput() ScanConfigTargetPlatformsItemArrayOutput {
	return i.ToScanConfigTargetPlatformsItemArrayOutputWithContext(context.Background())
}

func (i ScanConfigTargetPlatformsItemArray) ToScanConfigTargetPlatformsItemArrayOutputWithContext(ctx context.Context) ScanConfigTargetPlatformsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScanConfigTargetPlatformsItemArrayOutput)
}

type ScanConfigTargetPlatformsItemArrayOutput struct{ *pulumi.OutputState }

func (ScanConfigTargetPlatformsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScanConfigTargetPlatformsItem)(nil)).Elem()
}

func (o ScanConfigTargetPlatformsItemArrayOutput) ToScanConfigTargetPlatformsItemArrayOutput() ScanConfigTargetPlatformsItemArrayOutput {
	return o
}

func (o ScanConfigTargetPlatformsItemArrayOutput) ToScanConfigTargetPlatformsItemArrayOutputWithContext(ctx context.Context) ScanConfigTargetPlatformsItemArrayOutput {
	return o
}

func (o ScanConfigTargetPlatformsItemArrayOutput) Index(i pulumi.IntInput) ScanConfigTargetPlatformsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScanConfigTargetPlatformsItem {
		return vs[0].([]ScanConfigTargetPlatformsItem)[vs[1].(int)]
	}).(ScanConfigTargetPlatformsItemOutput)
}

// The user agent used during scanning.
type ScanConfigUserAgent string

const (
	// The user agent is unknown. Service will default to CHROME_LINUX.
	ScanConfigUserAgentUserAgentUnspecified = ScanConfigUserAgent("USER_AGENT_UNSPECIFIED")
	// Chrome on Linux. This is the service default if unspecified.
	ScanConfigUserAgentChromeLinux = ScanConfigUserAgent("CHROME_LINUX")
	// Chrome on Android.
	ScanConfigUserAgentChromeAndroid = ScanConfigUserAgent("CHROME_ANDROID")
	// Safari on IPhone.
	ScanConfigUserAgentSafariIphone = ScanConfigUserAgent("SAFARI_IPHONE")
)

func (ScanConfigUserAgent) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanConfigUserAgent)(nil)).Elem()
}

func (e ScanConfigUserAgent) ToScanConfigUserAgentOutput() ScanConfigUserAgentOutput {
	return pulumi.ToOutput(e).(ScanConfigUserAgentOutput)
}

func (e ScanConfigUserAgent) ToScanConfigUserAgentOutputWithContext(ctx context.Context) ScanConfigUserAgentOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScanConfigUserAgentOutput)
}

func (e ScanConfigUserAgent) ToScanConfigUserAgentPtrOutput() ScanConfigUserAgentPtrOutput {
	return e.ToScanConfigUserAgentPtrOutputWithContext(context.Background())
}

func (e ScanConfigUserAgent) ToScanConfigUserAgentPtrOutputWithContext(ctx context.Context) ScanConfigUserAgentPtrOutput {
	return ScanConfigUserAgent(e).ToScanConfigUserAgentOutputWithContext(ctx).ToScanConfigUserAgentPtrOutputWithContext(ctx)
}

func (e ScanConfigUserAgent) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigUserAgent) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanConfigUserAgent) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanConfigUserAgent) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScanConfigUserAgentOutput struct{ *pulumi.OutputState }

func (ScanConfigUserAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanConfigUserAgent)(nil)).Elem()
}

func (o ScanConfigUserAgentOutput) ToScanConfigUserAgentOutput() ScanConfigUserAgentOutput {
	return o
}

func (o ScanConfigUserAgentOutput) ToScanConfigUserAgentOutputWithContext(ctx context.Context) ScanConfigUserAgentOutput {
	return o
}

func (o ScanConfigUserAgentOutput) ToScanConfigUserAgentPtrOutput() ScanConfigUserAgentPtrOutput {
	return o.ToScanConfigUserAgentPtrOutputWithContext(context.Background())
}

func (o ScanConfigUserAgentOutput) ToScanConfigUserAgentPtrOutputWithContext(ctx context.Context) ScanConfigUserAgentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScanConfigUserAgent) *ScanConfigUserAgent {
		return &v
	}).(ScanConfigUserAgentPtrOutput)
}

func (o ScanConfigUserAgentOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScanConfigUserAgentOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanConfigUserAgent) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScanConfigUserAgentOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanConfigUserAgentOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanConfigUserAgent) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScanConfigUserAgentPtrOutput struct{ *pulumi.OutputState }

func (ScanConfigUserAgentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanConfigUserAgent)(nil)).Elem()
}

func (o ScanConfigUserAgentPtrOutput) ToScanConfigUserAgentPtrOutput() ScanConfigUserAgentPtrOutput {
	return o
}

func (o ScanConfigUserAgentPtrOutput) ToScanConfigUserAgentPtrOutputWithContext(ctx context.Context) ScanConfigUserAgentPtrOutput {
	return o
}

func (o ScanConfigUserAgentPtrOutput) Elem() ScanConfigUserAgentOutput {
	return o.ApplyT(func(v *ScanConfigUserAgent) ScanConfigUserAgent {
		if v != nil {
			return *v
		}
		var ret ScanConfigUserAgent
		return ret
	}).(ScanConfigUserAgentOutput)
}

func (o ScanConfigUserAgentPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanConfigUserAgentPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScanConfigUserAgent) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScanConfigUserAgentInput is an input type that accepts ScanConfigUserAgentArgs and ScanConfigUserAgentOutput values.
// You can construct a concrete instance of `ScanConfigUserAgentInput` via:
//
//	ScanConfigUserAgentArgs{...}
type ScanConfigUserAgentInput interface {
	pulumi.Input

	ToScanConfigUserAgentOutput() ScanConfigUserAgentOutput
	ToScanConfigUserAgentOutputWithContext(context.Context) ScanConfigUserAgentOutput
}

var scanConfigUserAgentPtrType = reflect.TypeOf((**ScanConfigUserAgent)(nil)).Elem()

type ScanConfigUserAgentPtrInput interface {
	pulumi.Input

	ToScanConfigUserAgentPtrOutput() ScanConfigUserAgentPtrOutput
	ToScanConfigUserAgentPtrOutputWithContext(context.Context) ScanConfigUserAgentPtrOutput
}

type scanConfigUserAgentPtr string

func ScanConfigUserAgentPtr(v string) ScanConfigUserAgentPtrInput {
	return (*scanConfigUserAgentPtr)(&v)
}

func (*scanConfigUserAgentPtr) ElementType() reflect.Type {
	return scanConfigUserAgentPtrType
}

func (in *scanConfigUserAgentPtr) ToScanConfigUserAgentPtrOutput() ScanConfigUserAgentPtrOutput {
	return pulumi.ToOutput(in).(ScanConfigUserAgentPtrOutput)
}

func (in *scanConfigUserAgentPtr) ToScanConfigUserAgentPtrOutputWithContext(ctx context.Context) ScanConfigUserAgentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScanConfigUserAgentPtrOutput)
}

func (in *scanConfigUserAgentPtr) ToOutput(ctx context.Context) pulumix.Output[*ScanConfigUserAgent] {
	return pulumix.Output[*ScanConfigUserAgent]{
		OutputState: in.ToScanConfigUserAgentPtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates the error reason code.
type ScanRunErrorTraceCode string

const (
	// Default value is never used.
	ScanRunErrorTraceCodeCodeUnspecified = ScanRunErrorTraceCode("CODE_UNSPECIFIED")
	// Indicates that the scan run failed due to an internal server error.
	ScanRunErrorTraceCodeInternalError = ScanRunErrorTraceCode("INTERNAL_ERROR")
	// Indicates a scan configuration error, usually due to outdated ScanConfig settings, such as starting_urls or the DNS configuration.
	ScanRunErrorTraceCodeScanConfigIssue = ScanRunErrorTraceCode("SCAN_CONFIG_ISSUE")
	// Indicates an authentication error, usually due to outdated ScanConfig authentication settings.
	ScanRunErrorTraceCodeAuthenticationConfigIssue = ScanRunErrorTraceCode("AUTHENTICATION_CONFIG_ISSUE")
	// Indicates a scan operation timeout, usually caused by a very large site.
	ScanRunErrorTraceCodeTimedOutWhileScanning = ScanRunErrorTraceCode("TIMED_OUT_WHILE_SCANNING")
	// Indicates that a scan encountered excessive redirects, either to authentication or some other page outside of the scan scope.
	ScanRunErrorTraceCodeTooManyRedirects = ScanRunErrorTraceCode("TOO_MANY_REDIRECTS")
	// Indicates that a scan encountered numerous errors from the web site pages. When available, most_common_http_error_code field indicates the most common HTTP error code encountered during the scan.
	ScanRunErrorTraceCodeTooManyHttpErrors = ScanRunErrorTraceCode("TOO_MANY_HTTP_ERRORS")
	// Indicates that some of the starting web urls returned HTTP errors during the scan.
	ScanRunErrorTraceCodeStartingUrlsCrawlHttpErrors = ScanRunErrorTraceCode("STARTING_URLS_CRAWL_HTTP_ERRORS")
)

func (ScanRunErrorTraceCode) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanRunErrorTraceCode)(nil)).Elem()
}

func (e ScanRunErrorTraceCode) ToScanRunErrorTraceCodeOutput() ScanRunErrorTraceCodeOutput {
	return pulumi.ToOutput(e).(ScanRunErrorTraceCodeOutput)
}

func (e ScanRunErrorTraceCode) ToScanRunErrorTraceCodeOutputWithContext(ctx context.Context) ScanRunErrorTraceCodeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScanRunErrorTraceCodeOutput)
}

func (e ScanRunErrorTraceCode) ToScanRunErrorTraceCodePtrOutput() ScanRunErrorTraceCodePtrOutput {
	return e.ToScanRunErrorTraceCodePtrOutputWithContext(context.Background())
}

func (e ScanRunErrorTraceCode) ToScanRunErrorTraceCodePtrOutputWithContext(ctx context.Context) ScanRunErrorTraceCodePtrOutput {
	return ScanRunErrorTraceCode(e).ToScanRunErrorTraceCodeOutputWithContext(ctx).ToScanRunErrorTraceCodePtrOutputWithContext(ctx)
}

func (e ScanRunErrorTraceCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunErrorTraceCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunErrorTraceCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanRunErrorTraceCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScanRunErrorTraceCodeOutput struct{ *pulumi.OutputState }

func (ScanRunErrorTraceCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanRunErrorTraceCode)(nil)).Elem()
}

func (o ScanRunErrorTraceCodeOutput) ToScanRunErrorTraceCodeOutput() ScanRunErrorTraceCodeOutput {
	return o
}

func (o ScanRunErrorTraceCodeOutput) ToScanRunErrorTraceCodeOutputWithContext(ctx context.Context) ScanRunErrorTraceCodeOutput {
	return o
}

func (o ScanRunErrorTraceCodeOutput) ToScanRunErrorTraceCodePtrOutput() ScanRunErrorTraceCodePtrOutput {
	return o.ToScanRunErrorTraceCodePtrOutputWithContext(context.Background())
}

func (o ScanRunErrorTraceCodeOutput) ToScanRunErrorTraceCodePtrOutputWithContext(ctx context.Context) ScanRunErrorTraceCodePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScanRunErrorTraceCode) *ScanRunErrorTraceCode {
		return &v
	}).(ScanRunErrorTraceCodePtrOutput)
}

func (o ScanRunErrorTraceCodeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScanRunErrorTraceCodeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanRunErrorTraceCode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScanRunErrorTraceCodeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanRunErrorTraceCodeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanRunErrorTraceCode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScanRunErrorTraceCodePtrOutput struct{ *pulumi.OutputState }

func (ScanRunErrorTraceCodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanRunErrorTraceCode)(nil)).Elem()
}

func (o ScanRunErrorTraceCodePtrOutput) ToScanRunErrorTraceCodePtrOutput() ScanRunErrorTraceCodePtrOutput {
	return o
}

func (o ScanRunErrorTraceCodePtrOutput) ToScanRunErrorTraceCodePtrOutputWithContext(ctx context.Context) ScanRunErrorTraceCodePtrOutput {
	return o
}

func (o ScanRunErrorTraceCodePtrOutput) Elem() ScanRunErrorTraceCodeOutput {
	return o.ApplyT(func(v *ScanRunErrorTraceCode) ScanRunErrorTraceCode {
		if v != nil {
			return *v
		}
		var ret ScanRunErrorTraceCode
		return ret
	}).(ScanRunErrorTraceCodeOutput)
}

func (o ScanRunErrorTraceCodePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanRunErrorTraceCodePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScanRunErrorTraceCode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScanRunErrorTraceCodeInput is an input type that accepts ScanRunErrorTraceCodeArgs and ScanRunErrorTraceCodeOutput values.
// You can construct a concrete instance of `ScanRunErrorTraceCodeInput` via:
//
//	ScanRunErrorTraceCodeArgs{...}
type ScanRunErrorTraceCodeInput interface {
	pulumi.Input

	ToScanRunErrorTraceCodeOutput() ScanRunErrorTraceCodeOutput
	ToScanRunErrorTraceCodeOutputWithContext(context.Context) ScanRunErrorTraceCodeOutput
}

var scanRunErrorTraceCodePtrType = reflect.TypeOf((**ScanRunErrorTraceCode)(nil)).Elem()

type ScanRunErrorTraceCodePtrInput interface {
	pulumi.Input

	ToScanRunErrorTraceCodePtrOutput() ScanRunErrorTraceCodePtrOutput
	ToScanRunErrorTraceCodePtrOutputWithContext(context.Context) ScanRunErrorTraceCodePtrOutput
}

type scanRunErrorTraceCodePtr string

func ScanRunErrorTraceCodePtr(v string) ScanRunErrorTraceCodePtrInput {
	return (*scanRunErrorTraceCodePtr)(&v)
}

func (*scanRunErrorTraceCodePtr) ElementType() reflect.Type {
	return scanRunErrorTraceCodePtrType
}

func (in *scanRunErrorTraceCodePtr) ToScanRunErrorTraceCodePtrOutput() ScanRunErrorTraceCodePtrOutput {
	return pulumi.ToOutput(in).(ScanRunErrorTraceCodePtrOutput)
}

func (in *scanRunErrorTraceCodePtr) ToScanRunErrorTraceCodePtrOutputWithContext(ctx context.Context) ScanRunErrorTraceCodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScanRunErrorTraceCodePtrOutput)
}

func (in *scanRunErrorTraceCodePtr) ToOutput(ctx context.Context) pulumix.Output[*ScanRunErrorTraceCode] {
	return pulumix.Output[*ScanRunErrorTraceCode]{
		OutputState: in.ToScanRunErrorTraceCodePtrOutputWithContext(ctx).OutputState,
	}
}

// The execution state of the ScanRun.
type ScanRunExecutionState string

const (
	// Represents an invalid state caused by internal server error. This value should never be returned.
	ScanRunExecutionStateExecutionStateUnspecified = ScanRunExecutionState("EXECUTION_STATE_UNSPECIFIED")
	// The scan is waiting in the queue.
	ScanRunExecutionStateQueued = ScanRunExecutionState("QUEUED")
	// The scan is in progress.
	ScanRunExecutionStateScanning = ScanRunExecutionState("SCANNING")
	// The scan is either finished or stopped by user.
	ScanRunExecutionStateFinished = ScanRunExecutionState("FINISHED")
)

func (ScanRunExecutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanRunExecutionState)(nil)).Elem()
}

func (e ScanRunExecutionState) ToScanRunExecutionStateOutput() ScanRunExecutionStateOutput {
	return pulumi.ToOutput(e).(ScanRunExecutionStateOutput)
}

func (e ScanRunExecutionState) ToScanRunExecutionStateOutputWithContext(ctx context.Context) ScanRunExecutionStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScanRunExecutionStateOutput)
}

func (e ScanRunExecutionState) ToScanRunExecutionStatePtrOutput() ScanRunExecutionStatePtrOutput {
	return e.ToScanRunExecutionStatePtrOutputWithContext(context.Background())
}

func (e ScanRunExecutionState) ToScanRunExecutionStatePtrOutputWithContext(ctx context.Context) ScanRunExecutionStatePtrOutput {
	return ScanRunExecutionState(e).ToScanRunExecutionStateOutputWithContext(ctx).ToScanRunExecutionStatePtrOutputWithContext(ctx)
}

func (e ScanRunExecutionState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunExecutionState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunExecutionState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanRunExecutionState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScanRunExecutionStateOutput struct{ *pulumi.OutputState }

func (ScanRunExecutionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanRunExecutionState)(nil)).Elem()
}

func (o ScanRunExecutionStateOutput) ToScanRunExecutionStateOutput() ScanRunExecutionStateOutput {
	return o
}

func (o ScanRunExecutionStateOutput) ToScanRunExecutionStateOutputWithContext(ctx context.Context) ScanRunExecutionStateOutput {
	return o
}

func (o ScanRunExecutionStateOutput) ToScanRunExecutionStatePtrOutput() ScanRunExecutionStatePtrOutput {
	return o.ToScanRunExecutionStatePtrOutputWithContext(context.Background())
}

func (o ScanRunExecutionStateOutput) ToScanRunExecutionStatePtrOutputWithContext(ctx context.Context) ScanRunExecutionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScanRunExecutionState) *ScanRunExecutionState {
		return &v
	}).(ScanRunExecutionStatePtrOutput)
}

func (o ScanRunExecutionStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScanRunExecutionStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanRunExecutionState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScanRunExecutionStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanRunExecutionStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanRunExecutionState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScanRunExecutionStatePtrOutput struct{ *pulumi.OutputState }

func (ScanRunExecutionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanRunExecutionState)(nil)).Elem()
}

func (o ScanRunExecutionStatePtrOutput) ToScanRunExecutionStatePtrOutput() ScanRunExecutionStatePtrOutput {
	return o
}

func (o ScanRunExecutionStatePtrOutput) ToScanRunExecutionStatePtrOutputWithContext(ctx context.Context) ScanRunExecutionStatePtrOutput {
	return o
}

func (o ScanRunExecutionStatePtrOutput) Elem() ScanRunExecutionStateOutput {
	return o.ApplyT(func(v *ScanRunExecutionState) ScanRunExecutionState {
		if v != nil {
			return *v
		}
		var ret ScanRunExecutionState
		return ret
	}).(ScanRunExecutionStateOutput)
}

func (o ScanRunExecutionStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanRunExecutionStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScanRunExecutionState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScanRunExecutionStateInput is an input type that accepts ScanRunExecutionStateArgs and ScanRunExecutionStateOutput values.
// You can construct a concrete instance of `ScanRunExecutionStateInput` via:
//
//	ScanRunExecutionStateArgs{...}
type ScanRunExecutionStateInput interface {
	pulumi.Input

	ToScanRunExecutionStateOutput() ScanRunExecutionStateOutput
	ToScanRunExecutionStateOutputWithContext(context.Context) ScanRunExecutionStateOutput
}

var scanRunExecutionStatePtrType = reflect.TypeOf((**ScanRunExecutionState)(nil)).Elem()

type ScanRunExecutionStatePtrInput interface {
	pulumi.Input

	ToScanRunExecutionStatePtrOutput() ScanRunExecutionStatePtrOutput
	ToScanRunExecutionStatePtrOutputWithContext(context.Context) ScanRunExecutionStatePtrOutput
}

type scanRunExecutionStatePtr string

func ScanRunExecutionStatePtr(v string) ScanRunExecutionStatePtrInput {
	return (*scanRunExecutionStatePtr)(&v)
}

func (*scanRunExecutionStatePtr) ElementType() reflect.Type {
	return scanRunExecutionStatePtrType
}

func (in *scanRunExecutionStatePtr) ToScanRunExecutionStatePtrOutput() ScanRunExecutionStatePtrOutput {
	return pulumi.ToOutput(in).(ScanRunExecutionStatePtrOutput)
}

func (in *scanRunExecutionStatePtr) ToScanRunExecutionStatePtrOutputWithContext(ctx context.Context) ScanRunExecutionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScanRunExecutionStatePtrOutput)
}

func (in *scanRunExecutionStatePtr) ToOutput(ctx context.Context) pulumix.Output[*ScanRunExecutionState] {
	return pulumix.Output[*ScanRunExecutionState]{
		OutputState: in.ToScanRunExecutionStatePtrOutputWithContext(ctx).OutputState,
	}
}

// The result state of the ScanRun. This field is only available after the execution state reaches "FINISHED".
type ScanRunResultState string

const (
	// Default value. This value is returned when the ScanRun is not yet finished.
	ScanRunResultStateResultStateUnspecified = ScanRunResultState("RESULT_STATE_UNSPECIFIED")
	// The scan finished without errors.
	ScanRunResultStateSuccess = ScanRunResultState("SUCCESS")
	// The scan finished with errors.
	ScanRunResultStateError = ScanRunResultState("ERROR")
	// The scan was terminated by user.
	ScanRunResultStateKilled = ScanRunResultState("KILLED")
)

func (ScanRunResultState) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanRunResultState)(nil)).Elem()
}

func (e ScanRunResultState) ToScanRunResultStateOutput() ScanRunResultStateOutput {
	return pulumi.ToOutput(e).(ScanRunResultStateOutput)
}

func (e ScanRunResultState) ToScanRunResultStateOutputWithContext(ctx context.Context) ScanRunResultStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScanRunResultStateOutput)
}

func (e ScanRunResultState) ToScanRunResultStatePtrOutput() ScanRunResultStatePtrOutput {
	return e.ToScanRunResultStatePtrOutputWithContext(context.Background())
}

func (e ScanRunResultState) ToScanRunResultStatePtrOutputWithContext(ctx context.Context) ScanRunResultStatePtrOutput {
	return ScanRunResultState(e).ToScanRunResultStateOutputWithContext(ctx).ToScanRunResultStatePtrOutputWithContext(ctx)
}

func (e ScanRunResultState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunResultState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunResultState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanRunResultState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScanRunResultStateOutput struct{ *pulumi.OutputState }

func (ScanRunResultStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanRunResultState)(nil)).Elem()
}

func (o ScanRunResultStateOutput) ToScanRunResultStateOutput() ScanRunResultStateOutput {
	return o
}

func (o ScanRunResultStateOutput) ToScanRunResultStateOutputWithContext(ctx context.Context) ScanRunResultStateOutput {
	return o
}

func (o ScanRunResultStateOutput) ToScanRunResultStatePtrOutput() ScanRunResultStatePtrOutput {
	return o.ToScanRunResultStatePtrOutputWithContext(context.Background())
}

func (o ScanRunResultStateOutput) ToScanRunResultStatePtrOutputWithContext(ctx context.Context) ScanRunResultStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScanRunResultState) *ScanRunResultState {
		return &v
	}).(ScanRunResultStatePtrOutput)
}

func (o ScanRunResultStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScanRunResultStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanRunResultState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScanRunResultStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanRunResultStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanRunResultState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScanRunResultStatePtrOutput struct{ *pulumi.OutputState }

func (ScanRunResultStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanRunResultState)(nil)).Elem()
}

func (o ScanRunResultStatePtrOutput) ToScanRunResultStatePtrOutput() ScanRunResultStatePtrOutput {
	return o
}

func (o ScanRunResultStatePtrOutput) ToScanRunResultStatePtrOutputWithContext(ctx context.Context) ScanRunResultStatePtrOutput {
	return o
}

func (o ScanRunResultStatePtrOutput) Elem() ScanRunResultStateOutput {
	return o.ApplyT(func(v *ScanRunResultState) ScanRunResultState {
		if v != nil {
			return *v
		}
		var ret ScanRunResultState
		return ret
	}).(ScanRunResultStateOutput)
}

func (o ScanRunResultStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanRunResultStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScanRunResultState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScanRunResultStateInput is an input type that accepts ScanRunResultStateArgs and ScanRunResultStateOutput values.
// You can construct a concrete instance of `ScanRunResultStateInput` via:
//
//	ScanRunResultStateArgs{...}
type ScanRunResultStateInput interface {
	pulumi.Input

	ToScanRunResultStateOutput() ScanRunResultStateOutput
	ToScanRunResultStateOutputWithContext(context.Context) ScanRunResultStateOutput
}

var scanRunResultStatePtrType = reflect.TypeOf((**ScanRunResultState)(nil)).Elem()

type ScanRunResultStatePtrInput interface {
	pulumi.Input

	ToScanRunResultStatePtrOutput() ScanRunResultStatePtrOutput
	ToScanRunResultStatePtrOutputWithContext(context.Context) ScanRunResultStatePtrOutput
}

type scanRunResultStatePtr string

func ScanRunResultStatePtr(v string) ScanRunResultStatePtrInput {
	return (*scanRunResultStatePtr)(&v)
}

func (*scanRunResultStatePtr) ElementType() reflect.Type {
	return scanRunResultStatePtrType
}

func (in *scanRunResultStatePtr) ToScanRunResultStatePtrOutput() ScanRunResultStatePtrOutput {
	return pulumi.ToOutput(in).(ScanRunResultStatePtrOutput)
}

func (in *scanRunResultStatePtr) ToScanRunResultStatePtrOutputWithContext(ctx context.Context) ScanRunResultStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScanRunResultStatePtrOutput)
}

func (in *scanRunResultStatePtr) ToOutput(ctx context.Context) pulumix.Output[*ScanRunResultState] {
	return pulumix.Output[*ScanRunResultState]{
		OutputState: in.ToScanRunResultStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates the warning code.
type ScanRunWarningTraceCode string

const (
	// Default value is never used.
	ScanRunWarningTraceCodeCodeUnspecified = ScanRunWarningTraceCode("CODE_UNSPECIFIED")
	// Indicates that a scan discovered an unexpectedly low number of URLs. This is sometimes caused by complex navigation features or by using a single URL for numerous pages.
	ScanRunWarningTraceCodeInsufficientCrawlResults = ScanRunWarningTraceCode("INSUFFICIENT_CRAWL_RESULTS")
	// Indicates that a scan discovered too many URLs to test, or excessive redundant URLs.
	ScanRunWarningTraceCodeTooManyCrawlResults = ScanRunWarningTraceCode("TOO_MANY_CRAWL_RESULTS")
	// Indicates that too many tests have been generated for the scan. Customer should try reducing the number of starting URLs, increasing the QPS rate, or narrowing down the scope of the scan using the excluded patterns.
	ScanRunWarningTraceCodeTooManyFuzzTasks = ScanRunWarningTraceCode("TOO_MANY_FUZZ_TASKS")
	// Indicates that a scan is blocked by IAP.
	ScanRunWarningTraceCodeBlockedByIap = ScanRunWarningTraceCode("BLOCKED_BY_IAP")
	// Indicates that no seed is found for a scan
	ScanRunWarningTraceCodeNoStartingUrlFoundForManagedScan = ScanRunWarningTraceCode("NO_STARTING_URL_FOUND_FOR_MANAGED_SCAN")
)

func (ScanRunWarningTraceCode) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanRunWarningTraceCode)(nil)).Elem()
}

func (e ScanRunWarningTraceCode) ToScanRunWarningTraceCodeOutput() ScanRunWarningTraceCodeOutput {
	return pulumi.ToOutput(e).(ScanRunWarningTraceCodeOutput)
}

func (e ScanRunWarningTraceCode) ToScanRunWarningTraceCodeOutputWithContext(ctx context.Context) ScanRunWarningTraceCodeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScanRunWarningTraceCodeOutput)
}

func (e ScanRunWarningTraceCode) ToScanRunWarningTraceCodePtrOutput() ScanRunWarningTraceCodePtrOutput {
	return e.ToScanRunWarningTraceCodePtrOutputWithContext(context.Background())
}

func (e ScanRunWarningTraceCode) ToScanRunWarningTraceCodePtrOutputWithContext(ctx context.Context) ScanRunWarningTraceCodePtrOutput {
	return ScanRunWarningTraceCode(e).ToScanRunWarningTraceCodeOutputWithContext(ctx).ToScanRunWarningTraceCodePtrOutputWithContext(ctx)
}

func (e ScanRunWarningTraceCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunWarningTraceCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScanRunWarningTraceCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScanRunWarningTraceCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScanRunWarningTraceCodeOutput struct{ *pulumi.OutputState }

func (ScanRunWarningTraceCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScanRunWarningTraceCode)(nil)).Elem()
}

func (o ScanRunWarningTraceCodeOutput) ToScanRunWarningTraceCodeOutput() ScanRunWarningTraceCodeOutput {
	return o
}

func (o ScanRunWarningTraceCodeOutput) ToScanRunWarningTraceCodeOutputWithContext(ctx context.Context) ScanRunWarningTraceCodeOutput {
	return o
}

func (o ScanRunWarningTraceCodeOutput) ToScanRunWarningTraceCodePtrOutput() ScanRunWarningTraceCodePtrOutput {
	return o.ToScanRunWarningTraceCodePtrOutputWithContext(context.Background())
}

func (o ScanRunWarningTraceCodeOutput) ToScanRunWarningTraceCodePtrOutputWithContext(ctx context.Context) ScanRunWarningTraceCodePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScanRunWarningTraceCode) *ScanRunWarningTraceCode {
		return &v
	}).(ScanRunWarningTraceCodePtrOutput)
}

func (o ScanRunWarningTraceCodeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScanRunWarningTraceCodeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanRunWarningTraceCode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScanRunWarningTraceCodeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanRunWarningTraceCodeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScanRunWarningTraceCode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScanRunWarningTraceCodePtrOutput struct{ *pulumi.OutputState }

func (ScanRunWarningTraceCodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScanRunWarningTraceCode)(nil)).Elem()
}

func (o ScanRunWarningTraceCodePtrOutput) ToScanRunWarningTraceCodePtrOutput() ScanRunWarningTraceCodePtrOutput {
	return o
}

func (o ScanRunWarningTraceCodePtrOutput) ToScanRunWarningTraceCodePtrOutputWithContext(ctx context.Context) ScanRunWarningTraceCodePtrOutput {
	return o
}

func (o ScanRunWarningTraceCodePtrOutput) Elem() ScanRunWarningTraceCodeOutput {
	return o.ApplyT(func(v *ScanRunWarningTraceCode) ScanRunWarningTraceCode {
		if v != nil {
			return *v
		}
		var ret ScanRunWarningTraceCode
		return ret
	}).(ScanRunWarningTraceCodeOutput)
}

func (o ScanRunWarningTraceCodePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScanRunWarningTraceCodePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScanRunWarningTraceCode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScanRunWarningTraceCodeInput is an input type that accepts ScanRunWarningTraceCodeArgs and ScanRunWarningTraceCodeOutput values.
// You can construct a concrete instance of `ScanRunWarningTraceCodeInput` via:
//
//	ScanRunWarningTraceCodeArgs{...}
type ScanRunWarningTraceCodeInput interface {
	pulumi.Input

	ToScanRunWarningTraceCodeOutput() ScanRunWarningTraceCodeOutput
	ToScanRunWarningTraceCodeOutputWithContext(context.Context) ScanRunWarningTraceCodeOutput
}

var scanRunWarningTraceCodePtrType = reflect.TypeOf((**ScanRunWarningTraceCode)(nil)).Elem()

type ScanRunWarningTraceCodePtrInput interface {
	pulumi.Input

	ToScanRunWarningTraceCodePtrOutput() ScanRunWarningTraceCodePtrOutput
	ToScanRunWarningTraceCodePtrOutputWithContext(context.Context) ScanRunWarningTraceCodePtrOutput
}

type scanRunWarningTraceCodePtr string

func ScanRunWarningTraceCodePtr(v string) ScanRunWarningTraceCodePtrInput {
	return (*scanRunWarningTraceCodePtr)(&v)
}

func (*scanRunWarningTraceCodePtr) ElementType() reflect.Type {
	return scanRunWarningTraceCodePtrType
}

func (in *scanRunWarningTraceCodePtr) ToScanRunWarningTraceCodePtrOutput() ScanRunWarningTraceCodePtrOutput {
	return pulumi.ToOutput(in).(ScanRunWarningTraceCodePtrOutput)
}

func (in *scanRunWarningTraceCodePtr) ToScanRunWarningTraceCodePtrOutputWithContext(ctx context.Context) ScanRunWarningTraceCodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScanRunWarningTraceCodePtrOutput)
}

func (in *scanRunWarningTraceCodePtr) ToOutput(ctx context.Context) pulumix.Output[*ScanRunWarningTraceCode] {
	return pulumix.Output[*ScanRunWarningTraceCode]{
		OutputState: in.ToScanRunWarningTraceCodePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigErrorCodeInput)(nil)).Elem(), ScanConfigErrorCode("CODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigErrorCodePtrInput)(nil)).Elem(), ScanConfigErrorCode("CODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigExportToSecurityCommandCenterInput)(nil)).Elem(), ScanConfigExportToSecurityCommandCenter("EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigExportToSecurityCommandCenterPtrInput)(nil)).Elem(), ScanConfigExportToSecurityCommandCenter("EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigRiskLevelInput)(nil)).Elem(), ScanConfigRiskLevel("RISK_LEVEL_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigRiskLevelPtrInput)(nil)).Elem(), ScanConfigRiskLevel("RISK_LEVEL_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigTargetPlatformsItemInput)(nil)).Elem(), ScanConfigTargetPlatformsItem("TARGET_PLATFORM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigTargetPlatformsItemPtrInput)(nil)).Elem(), ScanConfigTargetPlatformsItem("TARGET_PLATFORM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigTargetPlatformsItemArrayInput)(nil)).Elem(), ScanConfigTargetPlatformsItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigUserAgentInput)(nil)).Elem(), ScanConfigUserAgent("USER_AGENT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanConfigUserAgentPtrInput)(nil)).Elem(), ScanConfigUserAgent("USER_AGENT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanRunErrorTraceCodeInput)(nil)).Elem(), ScanRunErrorTraceCode("CODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanRunErrorTraceCodePtrInput)(nil)).Elem(), ScanRunErrorTraceCode("CODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanRunExecutionStateInput)(nil)).Elem(), ScanRunExecutionState("EXECUTION_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanRunExecutionStatePtrInput)(nil)).Elem(), ScanRunExecutionState("EXECUTION_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanRunResultStateInput)(nil)).Elem(), ScanRunResultState("RESULT_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanRunResultStatePtrInput)(nil)).Elem(), ScanRunResultState("RESULT_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanRunWarningTraceCodeInput)(nil)).Elem(), ScanRunWarningTraceCode("CODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ScanRunWarningTraceCodePtrInput)(nil)).Elem(), ScanRunWarningTraceCode("CODE_UNSPECIFIED"))
	pulumi.RegisterOutputType(ScanConfigErrorCodeOutput{})
	pulumi.RegisterOutputType(ScanConfigErrorCodePtrOutput{})
	pulumi.RegisterOutputType(ScanConfigExportToSecurityCommandCenterOutput{})
	pulumi.RegisterOutputType(ScanConfigExportToSecurityCommandCenterPtrOutput{})
	pulumi.RegisterOutputType(ScanConfigRiskLevelOutput{})
	pulumi.RegisterOutputType(ScanConfigRiskLevelPtrOutput{})
	pulumi.RegisterOutputType(ScanConfigTargetPlatformsItemOutput{})
	pulumi.RegisterOutputType(ScanConfigTargetPlatformsItemPtrOutput{})
	pulumi.RegisterOutputType(ScanConfigTargetPlatformsItemArrayOutput{})
	pulumi.RegisterOutputType(ScanConfigUserAgentOutput{})
	pulumi.RegisterOutputType(ScanConfigUserAgentPtrOutput{})
	pulumi.RegisterOutputType(ScanRunErrorTraceCodeOutput{})
	pulumi.RegisterOutputType(ScanRunErrorTraceCodePtrOutput{})
	pulumi.RegisterOutputType(ScanRunExecutionStateOutput{})
	pulumi.RegisterOutputType(ScanRunExecutionStatePtrOutput{})
	pulumi.RegisterOutputType(ScanRunResultStateOutput{})
	pulumi.RegisterOutputType(ScanRunResultStatePtrOutput{})
	pulumi.RegisterOutputType(ScanRunWarningTraceCodeOutput{})
	pulumi.RegisterOutputType(ScanRunWarningTraceCodePtrOutput{})
}
