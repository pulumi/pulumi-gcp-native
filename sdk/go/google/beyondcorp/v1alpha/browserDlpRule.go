// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new BrowserDlpRule in a given organization and PartnerTenant.
// Auto-naming is currently not supported for this resource.
type BrowserDlpRule struct {
	pulumi.CustomResourceState

	// The group to which this Rule should be applied to.
	Group GoogleCloudBeyondcorpPartnerservicesV1alphaGroupResponseOutput `pulumi:"group"`
	// Unique resource name. The name is ignored when creating BrowserDlpRule.
	Name            pulumi.StringOutput `pulumi:"name"`
	OrganizationId  pulumi.StringOutput `pulumi:"organizationId"`
	PartnerTenantId pulumi.StringOutput `pulumi:"partnerTenantId"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The policy settings to apply.
	RuleSetting GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingResponseOutput `pulumi:"ruleSetting"`
}

// NewBrowserDlpRule registers a new resource with the given unique name, arguments, and options.
func NewBrowserDlpRule(ctx *pulumi.Context,
	name string, args *BrowserDlpRuleArgs, opts ...pulumi.ResourceOption) (*BrowserDlpRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.PartnerTenantId == nil {
		return nil, errors.New("invalid value for required argument 'PartnerTenantId'")
	}
	if args.RuleSetting == nil {
		return nil, errors.New("invalid value for required argument 'RuleSetting'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"organizationId",
		"partnerTenantId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrowserDlpRule
	err := ctx.RegisterResource("google-native:beyondcorp/v1alpha:BrowserDlpRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrowserDlpRule gets an existing BrowserDlpRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrowserDlpRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrowserDlpRuleState, opts ...pulumi.ResourceOption) (*BrowserDlpRule, error) {
	var resource BrowserDlpRule
	err := ctx.ReadResource("google-native:beyondcorp/v1alpha:BrowserDlpRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrowserDlpRule resources.
type browserDlpRuleState struct {
}

type BrowserDlpRuleState struct {
}

func (BrowserDlpRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*browserDlpRuleState)(nil)).Elem()
}

type browserDlpRuleArgs struct {
	// The group to which this Rule should be applied to.
	Group           GoogleCloudBeyondcorpPartnerservicesV1alphaGroup `pulumi:"group"`
	OrganizationId  string                                           `pulumi:"organizationId"`
	PartnerTenantId string                                           `pulumi:"partnerTenantId"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// The policy settings to apply.
	RuleSetting GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSetting `pulumi:"ruleSetting"`
}

// The set of arguments for constructing a BrowserDlpRule resource.
type BrowserDlpRuleArgs struct {
	// The group to which this Rule should be applied to.
	Group           GoogleCloudBeyondcorpPartnerservicesV1alphaGroupInput
	OrganizationId  pulumi.StringInput
	PartnerTenantId pulumi.StringInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// The policy settings to apply.
	RuleSetting GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingInput
}

func (BrowserDlpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*browserDlpRuleArgs)(nil)).Elem()
}

type BrowserDlpRuleInput interface {
	pulumi.Input

	ToBrowserDlpRuleOutput() BrowserDlpRuleOutput
	ToBrowserDlpRuleOutputWithContext(ctx context.Context) BrowserDlpRuleOutput
}

func (*BrowserDlpRule) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserDlpRule)(nil)).Elem()
}

func (i *BrowserDlpRule) ToBrowserDlpRuleOutput() BrowserDlpRuleOutput {
	return i.ToBrowserDlpRuleOutputWithContext(context.Background())
}

func (i *BrowserDlpRule) ToBrowserDlpRuleOutputWithContext(ctx context.Context) BrowserDlpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserDlpRuleOutput)
}

type BrowserDlpRuleOutput struct{ *pulumi.OutputState }

func (BrowserDlpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserDlpRule)(nil)).Elem()
}

func (o BrowserDlpRuleOutput) ToBrowserDlpRuleOutput() BrowserDlpRuleOutput {
	return o
}

func (o BrowserDlpRuleOutput) ToBrowserDlpRuleOutputWithContext(ctx context.Context) BrowserDlpRuleOutput {
	return o
}

// The group to which this Rule should be applied to.
func (o BrowserDlpRuleOutput) Group() GoogleCloudBeyondcorpPartnerservicesV1alphaGroupResponseOutput {
	return o.ApplyT(func(v *BrowserDlpRule) GoogleCloudBeyondcorpPartnerservicesV1alphaGroupResponseOutput { return v.Group }).(GoogleCloudBeyondcorpPartnerservicesV1alphaGroupResponseOutput)
}

// Unique resource name. The name is ignored when creating BrowserDlpRule.
func (o BrowserDlpRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserDlpRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BrowserDlpRuleOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserDlpRule) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o BrowserDlpRuleOutput) PartnerTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserDlpRule) pulumi.StringOutput { return v.PartnerTenantId }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o BrowserDlpRuleOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserDlpRule) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The policy settings to apply.
func (o BrowserDlpRuleOutput) RuleSetting() GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingResponseOutput {
	return o.ApplyT(func(v *BrowserDlpRule) GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingResponseOutput {
		return v.RuleSetting
	}).(GoogleCloudBeyondcorpPartnerservicesV1alphaRuleSettingResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserDlpRuleInput)(nil)).Elem(), &BrowserDlpRule{})
	pulumi.RegisterOutputType(BrowserDlpRuleOutput{})
}
