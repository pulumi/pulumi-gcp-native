// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.If there are AuditConfigs for both allServices and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.If there are AuditConfigs for both allServices and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.If there are AuditConfigs for both allServices and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Associates members with a role.
type Binding struct {
	// The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com.
	Members []string `pulumi:"members"`
	// Role that is assigned to members. For example, roles/viewer, roles/editor, or roles/owner.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates members with a role.
type BindingArgs struct {
	// The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to members. For example, roles/viewer, roles/editor, or roles/owner.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates members with a role.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to members. For example, roles/viewer, roles/editor, or roles/owner.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Specifies how metastore metadata should be integrated with the Data Catalog service.
type DataCatalogConfig struct {
	// Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
	Enabled *bool `pulumi:"enabled"`
}

// DataCatalogConfigInput is an input type that accepts DataCatalogConfigArgs and DataCatalogConfigOutput values.
// You can construct a concrete instance of `DataCatalogConfigInput` via:
//
//          DataCatalogConfigArgs{...}
type DataCatalogConfigInput interface {
	pulumi.Input

	ToDataCatalogConfigOutput() DataCatalogConfigOutput
	ToDataCatalogConfigOutputWithContext(context.Context) DataCatalogConfigOutput
}

// Specifies how metastore metadata should be integrated with the Data Catalog service.
type DataCatalogConfigArgs struct {
	// Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (DataCatalogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogConfig)(nil)).Elem()
}

func (i DataCatalogConfigArgs) ToDataCatalogConfigOutput() DataCatalogConfigOutput {
	return i.ToDataCatalogConfigOutputWithContext(context.Background())
}

func (i DataCatalogConfigArgs) ToDataCatalogConfigOutputWithContext(ctx context.Context) DataCatalogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogConfigOutput)
}

func (i DataCatalogConfigArgs) ToDataCatalogConfigPtrOutput() DataCatalogConfigPtrOutput {
	return i.ToDataCatalogConfigPtrOutputWithContext(context.Background())
}

func (i DataCatalogConfigArgs) ToDataCatalogConfigPtrOutputWithContext(ctx context.Context) DataCatalogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogConfigOutput).ToDataCatalogConfigPtrOutputWithContext(ctx)
}

// DataCatalogConfigPtrInput is an input type that accepts DataCatalogConfigArgs, DataCatalogConfigPtr and DataCatalogConfigPtrOutput values.
// You can construct a concrete instance of `DataCatalogConfigPtrInput` via:
//
//          DataCatalogConfigArgs{...}
//
//  or:
//
//          nil
type DataCatalogConfigPtrInput interface {
	pulumi.Input

	ToDataCatalogConfigPtrOutput() DataCatalogConfigPtrOutput
	ToDataCatalogConfigPtrOutputWithContext(context.Context) DataCatalogConfigPtrOutput
}

type dataCatalogConfigPtrType DataCatalogConfigArgs

func DataCatalogConfigPtr(v *DataCatalogConfigArgs) DataCatalogConfigPtrInput {
	return (*dataCatalogConfigPtrType)(v)
}

func (*dataCatalogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogConfig)(nil)).Elem()
}

func (i *dataCatalogConfigPtrType) ToDataCatalogConfigPtrOutput() DataCatalogConfigPtrOutput {
	return i.ToDataCatalogConfigPtrOutputWithContext(context.Background())
}

func (i *dataCatalogConfigPtrType) ToDataCatalogConfigPtrOutputWithContext(ctx context.Context) DataCatalogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogConfigPtrOutput)
}

// Specifies how metastore metadata should be integrated with the Data Catalog service.
type DataCatalogConfigOutput struct{ *pulumi.OutputState }

func (DataCatalogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogConfig)(nil)).Elem()
}

func (o DataCatalogConfigOutput) ToDataCatalogConfigOutput() DataCatalogConfigOutput {
	return o
}

func (o DataCatalogConfigOutput) ToDataCatalogConfigOutputWithContext(ctx context.Context) DataCatalogConfigOutput {
	return o
}

func (o DataCatalogConfigOutput) ToDataCatalogConfigPtrOutput() DataCatalogConfigPtrOutput {
	return o.ToDataCatalogConfigPtrOutputWithContext(context.Background())
}

func (o DataCatalogConfigOutput) ToDataCatalogConfigPtrOutputWithContext(ctx context.Context) DataCatalogConfigPtrOutput {
	return o.ApplyT(func(v DataCatalogConfig) *DataCatalogConfig {
		return &v
	}).(DataCatalogConfigPtrOutput)
}

// Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
func (o DataCatalogConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataCatalogConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DataCatalogConfigPtrOutput struct{ *pulumi.OutputState }

func (DataCatalogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogConfig)(nil)).Elem()
}

func (o DataCatalogConfigPtrOutput) ToDataCatalogConfigPtrOutput() DataCatalogConfigPtrOutput {
	return o
}

func (o DataCatalogConfigPtrOutput) ToDataCatalogConfigPtrOutputWithContext(ctx context.Context) DataCatalogConfigPtrOutput {
	return o
}

func (o DataCatalogConfigPtrOutput) Elem() DataCatalogConfigOutput {
	return o.ApplyT(func(v *DataCatalogConfig) DataCatalogConfig { return *v }).(DataCatalogConfigOutput)
}

// Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
func (o DataCatalogConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataCatalogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A specification of the location of and metadata about a database dump from a relational database management system.
type DatabaseDump struct {
	// The type of the database.
	DatabaseType *string `pulumi:"databaseType"`
	// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
	GcsUri *string `pulumi:"gcsUri"`
	// The name of the source database.
	SourceDatabase *string `pulumi:"sourceDatabase"`
	// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
	Type *string `pulumi:"type"`
}

// DatabaseDumpInput is an input type that accepts DatabaseDumpArgs and DatabaseDumpOutput values.
// You can construct a concrete instance of `DatabaseDumpInput` via:
//
//          DatabaseDumpArgs{...}
type DatabaseDumpInput interface {
	pulumi.Input

	ToDatabaseDumpOutput() DatabaseDumpOutput
	ToDatabaseDumpOutputWithContext(context.Context) DatabaseDumpOutput
}

// A specification of the location of and metadata about a database dump from a relational database management system.
type DatabaseDumpArgs struct {
	// The type of the database.
	DatabaseType pulumi.StringPtrInput `pulumi:"databaseType"`
	// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
	GcsUri pulumi.StringPtrInput `pulumi:"gcsUri"`
	// The name of the source database.
	SourceDatabase pulumi.StringPtrInput `pulumi:"sourceDatabase"`
	// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatabaseDumpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDump)(nil)).Elem()
}

func (i DatabaseDumpArgs) ToDatabaseDumpOutput() DatabaseDumpOutput {
	return i.ToDatabaseDumpOutputWithContext(context.Background())
}

func (i DatabaseDumpArgs) ToDatabaseDumpOutputWithContext(ctx context.Context) DatabaseDumpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDumpOutput)
}

func (i DatabaseDumpArgs) ToDatabaseDumpPtrOutput() DatabaseDumpPtrOutput {
	return i.ToDatabaseDumpPtrOutputWithContext(context.Background())
}

func (i DatabaseDumpArgs) ToDatabaseDumpPtrOutputWithContext(ctx context.Context) DatabaseDumpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDumpOutput).ToDatabaseDumpPtrOutputWithContext(ctx)
}

// DatabaseDumpPtrInput is an input type that accepts DatabaseDumpArgs, DatabaseDumpPtr and DatabaseDumpPtrOutput values.
// You can construct a concrete instance of `DatabaseDumpPtrInput` via:
//
//          DatabaseDumpArgs{...}
//
//  or:
//
//          nil
type DatabaseDumpPtrInput interface {
	pulumi.Input

	ToDatabaseDumpPtrOutput() DatabaseDumpPtrOutput
	ToDatabaseDumpPtrOutputWithContext(context.Context) DatabaseDumpPtrOutput
}

type databaseDumpPtrType DatabaseDumpArgs

func DatabaseDumpPtr(v *DatabaseDumpArgs) DatabaseDumpPtrInput {
	return (*databaseDumpPtrType)(v)
}

func (*databaseDumpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDump)(nil)).Elem()
}

func (i *databaseDumpPtrType) ToDatabaseDumpPtrOutput() DatabaseDumpPtrOutput {
	return i.ToDatabaseDumpPtrOutputWithContext(context.Background())
}

func (i *databaseDumpPtrType) ToDatabaseDumpPtrOutputWithContext(ctx context.Context) DatabaseDumpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDumpPtrOutput)
}

// A specification of the location of and metadata about a database dump from a relational database management system.
type DatabaseDumpOutput struct{ *pulumi.OutputState }

func (DatabaseDumpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDump)(nil)).Elem()
}

func (o DatabaseDumpOutput) ToDatabaseDumpOutput() DatabaseDumpOutput {
	return o
}

func (o DatabaseDumpOutput) ToDatabaseDumpOutputWithContext(ctx context.Context) DatabaseDumpOutput {
	return o
}

func (o DatabaseDumpOutput) ToDatabaseDumpPtrOutput() DatabaseDumpPtrOutput {
	return o.ToDatabaseDumpPtrOutputWithContext(context.Background())
}

func (o DatabaseDumpOutput) ToDatabaseDumpPtrOutputWithContext(ctx context.Context) DatabaseDumpPtrOutput {
	return o.ApplyT(func(v DatabaseDump) *DatabaseDump {
		return &v
	}).(DatabaseDumpPtrOutput)
}

// The type of the database.
func (o DatabaseDumpOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDump) *string { return v.DatabaseType }).(pulumi.StringPtrOutput)
}

// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
func (o DatabaseDumpOutput) GcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDump) *string { return v.GcsUri }).(pulumi.StringPtrOutput)
}

// The name of the source database.
func (o DatabaseDumpOutput) SourceDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDump) *string { return v.SourceDatabase }).(pulumi.StringPtrOutput)
}

// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
func (o DatabaseDumpOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDump) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatabaseDumpPtrOutput struct{ *pulumi.OutputState }

func (DatabaseDumpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDump)(nil)).Elem()
}

func (o DatabaseDumpPtrOutput) ToDatabaseDumpPtrOutput() DatabaseDumpPtrOutput {
	return o
}

func (o DatabaseDumpPtrOutput) ToDatabaseDumpPtrOutputWithContext(ctx context.Context) DatabaseDumpPtrOutput {
	return o
}

func (o DatabaseDumpPtrOutput) Elem() DatabaseDumpOutput {
	return o.ApplyT(func(v *DatabaseDump) DatabaseDump { return *v }).(DatabaseDumpOutput)
}

// The type of the database.
func (o DatabaseDumpPtrOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDump) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseType
	}).(pulumi.StringPtrOutput)
}

// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
func (o DatabaseDumpPtrOutput) GcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDump) *string {
		if v == nil {
			return nil
		}
		return v.GcsUri
	}).(pulumi.StringPtrOutput)
}

// The name of the source database.
func (o DatabaseDumpPtrOutput) SourceDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDump) *string {
		if v == nil {
			return nil
		}
		return v.SourceDatabase
	}).(pulumi.StringPtrOutput)
}

// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
func (o DatabaseDumpPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDump) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Specifies configuration information specific to running Hive metastore software as the metastore service.
type HiveMetastoreConfig struct {
	// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden).
	ConfigOverrides map[string]string `pulumi:"configOverrides"`
	// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
	KerberosConfig *KerberosConfig `pulumi:"kerberosConfig"`
	// Immutable. The Hive metastore schema version.
	Version *string `pulumi:"version"`
}

// HiveMetastoreConfigInput is an input type that accepts HiveMetastoreConfigArgs and HiveMetastoreConfigOutput values.
// You can construct a concrete instance of `HiveMetastoreConfigInput` via:
//
//          HiveMetastoreConfigArgs{...}
type HiveMetastoreConfigInput interface {
	pulumi.Input

	ToHiveMetastoreConfigOutput() HiveMetastoreConfigOutput
	ToHiveMetastoreConfigOutputWithContext(context.Context) HiveMetastoreConfigOutput
}

// Specifies configuration information specific to running Hive metastore software as the metastore service.
type HiveMetastoreConfigArgs struct {
	// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden).
	ConfigOverrides pulumi.StringMapInput `pulumi:"configOverrides"`
	// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
	KerberosConfig KerberosConfigPtrInput `pulumi:"kerberosConfig"`
	// Immutable. The Hive metastore schema version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HiveMetastoreConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveMetastoreConfig)(nil)).Elem()
}

func (i HiveMetastoreConfigArgs) ToHiveMetastoreConfigOutput() HiveMetastoreConfigOutput {
	return i.ToHiveMetastoreConfigOutputWithContext(context.Background())
}

func (i HiveMetastoreConfigArgs) ToHiveMetastoreConfigOutputWithContext(ctx context.Context) HiveMetastoreConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveMetastoreConfigOutput)
}

func (i HiveMetastoreConfigArgs) ToHiveMetastoreConfigPtrOutput() HiveMetastoreConfigPtrOutput {
	return i.ToHiveMetastoreConfigPtrOutputWithContext(context.Background())
}

func (i HiveMetastoreConfigArgs) ToHiveMetastoreConfigPtrOutputWithContext(ctx context.Context) HiveMetastoreConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveMetastoreConfigOutput).ToHiveMetastoreConfigPtrOutputWithContext(ctx)
}

// HiveMetastoreConfigPtrInput is an input type that accepts HiveMetastoreConfigArgs, HiveMetastoreConfigPtr and HiveMetastoreConfigPtrOutput values.
// You can construct a concrete instance of `HiveMetastoreConfigPtrInput` via:
//
//          HiveMetastoreConfigArgs{...}
//
//  or:
//
//          nil
type HiveMetastoreConfigPtrInput interface {
	pulumi.Input

	ToHiveMetastoreConfigPtrOutput() HiveMetastoreConfigPtrOutput
	ToHiveMetastoreConfigPtrOutputWithContext(context.Context) HiveMetastoreConfigPtrOutput
}

type hiveMetastoreConfigPtrType HiveMetastoreConfigArgs

func HiveMetastoreConfigPtr(v *HiveMetastoreConfigArgs) HiveMetastoreConfigPtrInput {
	return (*hiveMetastoreConfigPtrType)(v)
}

func (*hiveMetastoreConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HiveMetastoreConfig)(nil)).Elem()
}

func (i *hiveMetastoreConfigPtrType) ToHiveMetastoreConfigPtrOutput() HiveMetastoreConfigPtrOutput {
	return i.ToHiveMetastoreConfigPtrOutputWithContext(context.Background())
}

func (i *hiveMetastoreConfigPtrType) ToHiveMetastoreConfigPtrOutputWithContext(ctx context.Context) HiveMetastoreConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveMetastoreConfigPtrOutput)
}

// Specifies configuration information specific to running Hive metastore software as the metastore service.
type HiveMetastoreConfigOutput struct{ *pulumi.OutputState }

func (HiveMetastoreConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveMetastoreConfig)(nil)).Elem()
}

func (o HiveMetastoreConfigOutput) ToHiveMetastoreConfigOutput() HiveMetastoreConfigOutput {
	return o
}

func (o HiveMetastoreConfigOutput) ToHiveMetastoreConfigOutputWithContext(ctx context.Context) HiveMetastoreConfigOutput {
	return o
}

func (o HiveMetastoreConfigOutput) ToHiveMetastoreConfigPtrOutput() HiveMetastoreConfigPtrOutput {
	return o.ToHiveMetastoreConfigPtrOutputWithContext(context.Background())
}

func (o HiveMetastoreConfigOutput) ToHiveMetastoreConfigPtrOutputWithContext(ctx context.Context) HiveMetastoreConfigPtrOutput {
	return o.ApplyT(func(v HiveMetastoreConfig) *HiveMetastoreConfig {
		return &v
	}).(HiveMetastoreConfigPtrOutput)
}

// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden).
func (o HiveMetastoreConfigOutput) ConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v HiveMetastoreConfig) map[string]string { return v.ConfigOverrides }).(pulumi.StringMapOutput)
}

// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
func (o HiveMetastoreConfigOutput) KerberosConfig() KerberosConfigPtrOutput {
	return o.ApplyT(func(v HiveMetastoreConfig) *KerberosConfig { return v.KerberosConfig }).(KerberosConfigPtrOutput)
}

// Immutable. The Hive metastore schema version.
func (o HiveMetastoreConfigOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveMetastoreConfig) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HiveMetastoreConfigPtrOutput struct{ *pulumi.OutputState }

func (HiveMetastoreConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HiveMetastoreConfig)(nil)).Elem()
}

func (o HiveMetastoreConfigPtrOutput) ToHiveMetastoreConfigPtrOutput() HiveMetastoreConfigPtrOutput {
	return o
}

func (o HiveMetastoreConfigPtrOutput) ToHiveMetastoreConfigPtrOutputWithContext(ctx context.Context) HiveMetastoreConfigPtrOutput {
	return o
}

func (o HiveMetastoreConfigPtrOutput) Elem() HiveMetastoreConfigOutput {
	return o.ApplyT(func(v *HiveMetastoreConfig) HiveMetastoreConfig { return *v }).(HiveMetastoreConfigOutput)
}

// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden).
func (o HiveMetastoreConfigPtrOutput) ConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HiveMetastoreConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConfigOverrides
	}).(pulumi.StringMapOutput)
}

// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
func (o HiveMetastoreConfigPtrOutput) KerberosConfig() KerberosConfigPtrOutput {
	return o.ApplyT(func(v *HiveMetastoreConfig) *KerberosConfig {
		if v == nil {
			return nil
		}
		return v.KerberosConfig
	}).(KerberosConfigPtrOutput)
}

// Immutable. The Hive metastore schema version.
func (o HiveMetastoreConfigPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HiveMetastoreConfig) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Configuration information for a Kerberos principal.
type KerberosConfig struct {
	// A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
	Keytab *Secret `pulumi:"keytab"`
	// A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
	Krb5ConfigGcsUri *string `pulumi:"krb5ConfigGcsUri"`
	// A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
	Principal *string `pulumi:"principal"`
}

// KerberosConfigInput is an input type that accepts KerberosConfigArgs and KerberosConfigOutput values.
// You can construct a concrete instance of `KerberosConfigInput` via:
//
//          KerberosConfigArgs{...}
type KerberosConfigInput interface {
	pulumi.Input

	ToKerberosConfigOutput() KerberosConfigOutput
	ToKerberosConfigOutputWithContext(context.Context) KerberosConfigOutput
}

// Configuration information for a Kerberos principal.
type KerberosConfigArgs struct {
	// A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
	Keytab SecretPtrInput `pulumi:"keytab"`
	// A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
	Krb5ConfigGcsUri pulumi.StringPtrInput `pulumi:"krb5ConfigGcsUri"`
	// A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
	Principal pulumi.StringPtrInput `pulumi:"principal"`
}

func (KerberosConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosConfig)(nil)).Elem()
}

func (i KerberosConfigArgs) ToKerberosConfigOutput() KerberosConfigOutput {
	return i.ToKerberosConfigOutputWithContext(context.Background())
}

func (i KerberosConfigArgs) ToKerberosConfigOutputWithContext(ctx context.Context) KerberosConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosConfigOutput)
}

func (i KerberosConfigArgs) ToKerberosConfigPtrOutput() KerberosConfigPtrOutput {
	return i.ToKerberosConfigPtrOutputWithContext(context.Background())
}

func (i KerberosConfigArgs) ToKerberosConfigPtrOutputWithContext(ctx context.Context) KerberosConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosConfigOutput).ToKerberosConfigPtrOutputWithContext(ctx)
}

// KerberosConfigPtrInput is an input type that accepts KerberosConfigArgs, KerberosConfigPtr and KerberosConfigPtrOutput values.
// You can construct a concrete instance of `KerberosConfigPtrInput` via:
//
//          KerberosConfigArgs{...}
//
//  or:
//
//          nil
type KerberosConfigPtrInput interface {
	pulumi.Input

	ToKerberosConfigPtrOutput() KerberosConfigPtrOutput
	ToKerberosConfigPtrOutputWithContext(context.Context) KerberosConfigPtrOutput
}

type kerberosConfigPtrType KerberosConfigArgs

func KerberosConfigPtr(v *KerberosConfigArgs) KerberosConfigPtrInput {
	return (*kerberosConfigPtrType)(v)
}

func (*kerberosConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KerberosConfig)(nil)).Elem()
}

func (i *kerberosConfigPtrType) ToKerberosConfigPtrOutput() KerberosConfigPtrOutput {
	return i.ToKerberosConfigPtrOutputWithContext(context.Background())
}

func (i *kerberosConfigPtrType) ToKerberosConfigPtrOutputWithContext(ctx context.Context) KerberosConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosConfigPtrOutput)
}

// Configuration information for a Kerberos principal.
type KerberosConfigOutput struct{ *pulumi.OutputState }

func (KerberosConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosConfig)(nil)).Elem()
}

func (o KerberosConfigOutput) ToKerberosConfigOutput() KerberosConfigOutput {
	return o
}

func (o KerberosConfigOutput) ToKerberosConfigOutputWithContext(ctx context.Context) KerberosConfigOutput {
	return o
}

func (o KerberosConfigOutput) ToKerberosConfigPtrOutput() KerberosConfigPtrOutput {
	return o.ToKerberosConfigPtrOutputWithContext(context.Background())
}

func (o KerberosConfigOutput) ToKerberosConfigPtrOutputWithContext(ctx context.Context) KerberosConfigPtrOutput {
	return o.ApplyT(func(v KerberosConfig) *KerberosConfig {
		return &v
	}).(KerberosConfigPtrOutput)
}

// A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
func (o KerberosConfigOutput) Keytab() SecretPtrOutput {
	return o.ApplyT(func(v KerberosConfig) *Secret { return v.Keytab }).(SecretPtrOutput)
}

// A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
func (o KerberosConfigOutput) Krb5ConfigGcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KerberosConfig) *string { return v.Krb5ConfigGcsUri }).(pulumi.StringPtrOutput)
}

// A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
func (o KerberosConfigOutput) Principal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KerberosConfig) *string { return v.Principal }).(pulumi.StringPtrOutput)
}

type KerberosConfigPtrOutput struct{ *pulumi.OutputState }

func (KerberosConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KerberosConfig)(nil)).Elem()
}

func (o KerberosConfigPtrOutput) ToKerberosConfigPtrOutput() KerberosConfigPtrOutput {
	return o
}

func (o KerberosConfigPtrOutput) ToKerberosConfigPtrOutputWithContext(ctx context.Context) KerberosConfigPtrOutput {
	return o
}

func (o KerberosConfigPtrOutput) Elem() KerberosConfigOutput {
	return o.ApplyT(func(v *KerberosConfig) KerberosConfig { return *v }).(KerberosConfigOutput)
}

// A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
func (o KerberosConfigPtrOutput) Keytab() SecretPtrOutput {
	return o.ApplyT(func(v *KerberosConfig) *Secret {
		if v == nil {
			return nil
		}
		return v.Keytab
	}).(SecretPtrOutput)
}

// A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
func (o KerberosConfigPtrOutput) Krb5ConfigGcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KerberosConfig) *string {
		if v == nil {
			return nil
		}
		return v.Krb5ConfigGcsUri
	}).(pulumi.StringPtrOutput)
}

// A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
func (o KerberosConfigPtrOutput) Principal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KerberosConfig) *string {
		if v == nil {
			return nil
		}
		return v.Principal
	}).(pulumi.StringPtrOutput)
}

// Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
type MaintenanceWindow struct {
	// The day of week, when the window starts.
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// The hour of day (0-23) when the window starts.
	HourOfDay *int `pulumi:"hourOfDay"`
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//          MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
type MaintenanceWindowArgs struct {
	// The day of week, when the window starts.
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
	// The hour of day (0-23) when the window starts.
	HourOfDay pulumi.IntPtrInput `pulumi:"hourOfDay"`
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//          MaintenanceWindowArgs{...}
//
//  or:
//
//          nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

// Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

// The day of week, when the window starts.
func (o MaintenanceWindowOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

// The hour of day (0-23) when the window starts.
func (o MaintenanceWindowOutput) HourOfDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *int { return v.HourOfDay }).(pulumi.IntPtrOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow { return *v }).(MaintenanceWindowOutput)
}

// The day of week, when the window starts.
func (o MaintenanceWindowPtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// The hour of day (0-23) when the window starts.
func (o MaintenanceWindowPtrOutput) HourOfDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.HourOfDay
	}).(pulumi.IntPtrOutput)
}

// The details of a metadata export operation.
type MetadataExport struct {
	// Output only. The type of the database dump.
	DatabaseDumpType *string `pulumi:"databaseDumpType"`
	// Output only. A Cloud Storage URI of a folder that metadata are exported to, in the form of gs:////, where is automatically generated.
	DestinationGcsUri *string `pulumi:"destinationGcsUri"`
	// Output only. The time when the export ended.
	EndTime *string `pulumi:"endTime"`
	// Output only. The time when the export started.
	StartTime *string `pulumi:"startTime"`
	// Output only. The current state of the export.
	State *string `pulumi:"state"`
}

// MetadataExportInput is an input type that accepts MetadataExportArgs and MetadataExportOutput values.
// You can construct a concrete instance of `MetadataExportInput` via:
//
//          MetadataExportArgs{...}
type MetadataExportInput interface {
	pulumi.Input

	ToMetadataExportOutput() MetadataExportOutput
	ToMetadataExportOutputWithContext(context.Context) MetadataExportOutput
}

// The details of a metadata export operation.
type MetadataExportArgs struct {
	// Output only. The type of the database dump.
	DatabaseDumpType pulumi.StringPtrInput `pulumi:"databaseDumpType"`
	// Output only. A Cloud Storage URI of a folder that metadata are exported to, in the form of gs:////, where is automatically generated.
	DestinationGcsUri pulumi.StringPtrInput `pulumi:"destinationGcsUri"`
	// Output only. The time when the export ended.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Output only. The time when the export started.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Output only. The current state of the export.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (MetadataExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataExport)(nil)).Elem()
}

func (i MetadataExportArgs) ToMetadataExportOutput() MetadataExportOutput {
	return i.ToMetadataExportOutputWithContext(context.Background())
}

func (i MetadataExportArgs) ToMetadataExportOutputWithContext(ctx context.Context) MetadataExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataExportOutput)
}

// MetadataExportArrayInput is an input type that accepts MetadataExportArray and MetadataExportArrayOutput values.
// You can construct a concrete instance of `MetadataExportArrayInput` via:
//
//          MetadataExportArray{ MetadataExportArgs{...} }
type MetadataExportArrayInput interface {
	pulumi.Input

	ToMetadataExportArrayOutput() MetadataExportArrayOutput
	ToMetadataExportArrayOutputWithContext(context.Context) MetadataExportArrayOutput
}

type MetadataExportArray []MetadataExportInput

func (MetadataExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataExport)(nil)).Elem()
}

func (i MetadataExportArray) ToMetadataExportArrayOutput() MetadataExportArrayOutput {
	return i.ToMetadataExportArrayOutputWithContext(context.Background())
}

func (i MetadataExportArray) ToMetadataExportArrayOutputWithContext(ctx context.Context) MetadataExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataExportArrayOutput)
}

// The details of a metadata export operation.
type MetadataExportOutput struct{ *pulumi.OutputState }

func (MetadataExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataExport)(nil)).Elem()
}

func (o MetadataExportOutput) ToMetadataExportOutput() MetadataExportOutput {
	return o
}

func (o MetadataExportOutput) ToMetadataExportOutputWithContext(ctx context.Context) MetadataExportOutput {
	return o
}

// Output only. The type of the database dump.
func (o MetadataExportOutput) DatabaseDumpType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataExport) *string { return v.DatabaseDumpType }).(pulumi.StringPtrOutput)
}

// Output only. A Cloud Storage URI of a folder that metadata are exported to, in the form of gs:////, where is automatically generated.
func (o MetadataExportOutput) DestinationGcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataExport) *string { return v.DestinationGcsUri }).(pulumi.StringPtrOutput)
}

// Output only. The time when the export ended.
func (o MetadataExportOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataExport) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Output only. The time when the export started.
func (o MetadataExportOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataExport) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Output only. The current state of the export.
func (o MetadataExportOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataExport) *string { return v.State }).(pulumi.StringPtrOutput)
}

type MetadataExportArrayOutput struct{ *pulumi.OutputState }

func (MetadataExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataExport)(nil)).Elem()
}

func (o MetadataExportArrayOutput) ToMetadataExportArrayOutput() MetadataExportArrayOutput {
	return o
}

func (o MetadataExportArrayOutput) ToMetadataExportArrayOutputWithContext(ctx context.Context) MetadataExportArrayOutput {
	return o
}

func (o MetadataExportArrayOutput) Index(i pulumi.IntInput) MetadataExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataExport {
		return vs[0].([]MetadataExport)[vs[1].(int)]
	}).(MetadataExportOutput)
}

// Specifies how metastore metadata should be integrated with external services.
type MetadataIntegration struct {
	// The integration config for the Data Catalog service.
	DataCatalogConfig *DataCatalogConfig `pulumi:"dataCatalogConfig"`
}

// MetadataIntegrationInput is an input type that accepts MetadataIntegrationArgs and MetadataIntegrationOutput values.
// You can construct a concrete instance of `MetadataIntegrationInput` via:
//
//          MetadataIntegrationArgs{...}
type MetadataIntegrationInput interface {
	pulumi.Input

	ToMetadataIntegrationOutput() MetadataIntegrationOutput
	ToMetadataIntegrationOutputWithContext(context.Context) MetadataIntegrationOutput
}

// Specifies how metastore metadata should be integrated with external services.
type MetadataIntegrationArgs struct {
	// The integration config for the Data Catalog service.
	DataCatalogConfig DataCatalogConfigPtrInput `pulumi:"dataCatalogConfig"`
}

func (MetadataIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataIntegration)(nil)).Elem()
}

func (i MetadataIntegrationArgs) ToMetadataIntegrationOutput() MetadataIntegrationOutput {
	return i.ToMetadataIntegrationOutputWithContext(context.Background())
}

func (i MetadataIntegrationArgs) ToMetadataIntegrationOutputWithContext(ctx context.Context) MetadataIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataIntegrationOutput)
}

func (i MetadataIntegrationArgs) ToMetadataIntegrationPtrOutput() MetadataIntegrationPtrOutput {
	return i.ToMetadataIntegrationPtrOutputWithContext(context.Background())
}

func (i MetadataIntegrationArgs) ToMetadataIntegrationPtrOutputWithContext(ctx context.Context) MetadataIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataIntegrationOutput).ToMetadataIntegrationPtrOutputWithContext(ctx)
}

// MetadataIntegrationPtrInput is an input type that accepts MetadataIntegrationArgs, MetadataIntegrationPtr and MetadataIntegrationPtrOutput values.
// You can construct a concrete instance of `MetadataIntegrationPtrInput` via:
//
//          MetadataIntegrationArgs{...}
//
//  or:
//
//          nil
type MetadataIntegrationPtrInput interface {
	pulumi.Input

	ToMetadataIntegrationPtrOutput() MetadataIntegrationPtrOutput
	ToMetadataIntegrationPtrOutputWithContext(context.Context) MetadataIntegrationPtrOutput
}

type metadataIntegrationPtrType MetadataIntegrationArgs

func MetadataIntegrationPtr(v *MetadataIntegrationArgs) MetadataIntegrationPtrInput {
	return (*metadataIntegrationPtrType)(v)
}

func (*metadataIntegrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataIntegration)(nil)).Elem()
}

func (i *metadataIntegrationPtrType) ToMetadataIntegrationPtrOutput() MetadataIntegrationPtrOutput {
	return i.ToMetadataIntegrationPtrOutputWithContext(context.Background())
}

func (i *metadataIntegrationPtrType) ToMetadataIntegrationPtrOutputWithContext(ctx context.Context) MetadataIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataIntegrationPtrOutput)
}

// Specifies how metastore metadata should be integrated with external services.
type MetadataIntegrationOutput struct{ *pulumi.OutputState }

func (MetadataIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataIntegration)(nil)).Elem()
}

func (o MetadataIntegrationOutput) ToMetadataIntegrationOutput() MetadataIntegrationOutput {
	return o
}

func (o MetadataIntegrationOutput) ToMetadataIntegrationOutputWithContext(ctx context.Context) MetadataIntegrationOutput {
	return o
}

func (o MetadataIntegrationOutput) ToMetadataIntegrationPtrOutput() MetadataIntegrationPtrOutput {
	return o.ToMetadataIntegrationPtrOutputWithContext(context.Background())
}

func (o MetadataIntegrationOutput) ToMetadataIntegrationPtrOutputWithContext(ctx context.Context) MetadataIntegrationPtrOutput {
	return o.ApplyT(func(v MetadataIntegration) *MetadataIntegration {
		return &v
	}).(MetadataIntegrationPtrOutput)
}

// The integration config for the Data Catalog service.
func (o MetadataIntegrationOutput) DataCatalogConfig() DataCatalogConfigPtrOutput {
	return o.ApplyT(func(v MetadataIntegration) *DataCatalogConfig { return v.DataCatalogConfig }).(DataCatalogConfigPtrOutput)
}

type MetadataIntegrationPtrOutput struct{ *pulumi.OutputState }

func (MetadataIntegrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataIntegration)(nil)).Elem()
}

func (o MetadataIntegrationPtrOutput) ToMetadataIntegrationPtrOutput() MetadataIntegrationPtrOutput {
	return o
}

func (o MetadataIntegrationPtrOutput) ToMetadataIntegrationPtrOutputWithContext(ctx context.Context) MetadataIntegrationPtrOutput {
	return o
}

func (o MetadataIntegrationPtrOutput) Elem() MetadataIntegrationOutput {
	return o.ApplyT(func(v *MetadataIntegration) MetadataIntegration { return *v }).(MetadataIntegrationOutput)
}

// The integration config for the Data Catalog service.
func (o MetadataIntegrationPtrOutput) DataCatalogConfig() DataCatalogConfigPtrOutput {
	return o.ApplyT(func(v *MetadataIntegration) *DataCatalogConfig {
		if v == nil {
			return nil
		}
		return v.DataCatalogConfig
	}).(DataCatalogConfigPtrOutput)
}

// The metadata management activities of the metastore service.
type MetadataManagementActivity struct {
	// Output only. The latest metadata exports of the metastore service.
	MetadataExports []MetadataExport `pulumi:"metadataExports"`
	// Output only. The latest restores of the metastore service.
	Restores []Restore `pulumi:"restores"`
}

// MetadataManagementActivityInput is an input type that accepts MetadataManagementActivityArgs and MetadataManagementActivityOutput values.
// You can construct a concrete instance of `MetadataManagementActivityInput` via:
//
//          MetadataManagementActivityArgs{...}
type MetadataManagementActivityInput interface {
	pulumi.Input

	ToMetadataManagementActivityOutput() MetadataManagementActivityOutput
	ToMetadataManagementActivityOutputWithContext(context.Context) MetadataManagementActivityOutput
}

// The metadata management activities of the metastore service.
type MetadataManagementActivityArgs struct {
	// Output only. The latest metadata exports of the metastore service.
	MetadataExports MetadataExportArrayInput `pulumi:"metadataExports"`
	// Output only. The latest restores of the metastore service.
	Restores RestoreArrayInput `pulumi:"restores"`
}

func (MetadataManagementActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataManagementActivity)(nil)).Elem()
}

func (i MetadataManagementActivityArgs) ToMetadataManagementActivityOutput() MetadataManagementActivityOutput {
	return i.ToMetadataManagementActivityOutputWithContext(context.Background())
}

func (i MetadataManagementActivityArgs) ToMetadataManagementActivityOutputWithContext(ctx context.Context) MetadataManagementActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataManagementActivityOutput)
}

func (i MetadataManagementActivityArgs) ToMetadataManagementActivityPtrOutput() MetadataManagementActivityPtrOutput {
	return i.ToMetadataManagementActivityPtrOutputWithContext(context.Background())
}

func (i MetadataManagementActivityArgs) ToMetadataManagementActivityPtrOutputWithContext(ctx context.Context) MetadataManagementActivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataManagementActivityOutput).ToMetadataManagementActivityPtrOutputWithContext(ctx)
}

// MetadataManagementActivityPtrInput is an input type that accepts MetadataManagementActivityArgs, MetadataManagementActivityPtr and MetadataManagementActivityPtrOutput values.
// You can construct a concrete instance of `MetadataManagementActivityPtrInput` via:
//
//          MetadataManagementActivityArgs{...}
//
//  or:
//
//          nil
type MetadataManagementActivityPtrInput interface {
	pulumi.Input

	ToMetadataManagementActivityPtrOutput() MetadataManagementActivityPtrOutput
	ToMetadataManagementActivityPtrOutputWithContext(context.Context) MetadataManagementActivityPtrOutput
}

type metadataManagementActivityPtrType MetadataManagementActivityArgs

func MetadataManagementActivityPtr(v *MetadataManagementActivityArgs) MetadataManagementActivityPtrInput {
	return (*metadataManagementActivityPtrType)(v)
}

func (*metadataManagementActivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataManagementActivity)(nil)).Elem()
}

func (i *metadataManagementActivityPtrType) ToMetadataManagementActivityPtrOutput() MetadataManagementActivityPtrOutput {
	return i.ToMetadataManagementActivityPtrOutputWithContext(context.Background())
}

func (i *metadataManagementActivityPtrType) ToMetadataManagementActivityPtrOutputWithContext(ctx context.Context) MetadataManagementActivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataManagementActivityPtrOutput)
}

// The metadata management activities of the metastore service.
type MetadataManagementActivityOutput struct{ *pulumi.OutputState }

func (MetadataManagementActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataManagementActivity)(nil)).Elem()
}

func (o MetadataManagementActivityOutput) ToMetadataManagementActivityOutput() MetadataManagementActivityOutput {
	return o
}

func (o MetadataManagementActivityOutput) ToMetadataManagementActivityOutputWithContext(ctx context.Context) MetadataManagementActivityOutput {
	return o
}

func (o MetadataManagementActivityOutput) ToMetadataManagementActivityPtrOutput() MetadataManagementActivityPtrOutput {
	return o.ToMetadataManagementActivityPtrOutputWithContext(context.Background())
}

func (o MetadataManagementActivityOutput) ToMetadataManagementActivityPtrOutputWithContext(ctx context.Context) MetadataManagementActivityPtrOutput {
	return o.ApplyT(func(v MetadataManagementActivity) *MetadataManagementActivity {
		return &v
	}).(MetadataManagementActivityPtrOutput)
}

// Output only. The latest metadata exports of the metastore service.
func (o MetadataManagementActivityOutput) MetadataExports() MetadataExportArrayOutput {
	return o.ApplyT(func(v MetadataManagementActivity) []MetadataExport { return v.MetadataExports }).(MetadataExportArrayOutput)
}

// Output only. The latest restores of the metastore service.
func (o MetadataManagementActivityOutput) Restores() RestoreArrayOutput {
	return o.ApplyT(func(v MetadataManagementActivity) []Restore { return v.Restores }).(RestoreArrayOutput)
}

type MetadataManagementActivityPtrOutput struct{ *pulumi.OutputState }

func (MetadataManagementActivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataManagementActivity)(nil)).Elem()
}

func (o MetadataManagementActivityPtrOutput) ToMetadataManagementActivityPtrOutput() MetadataManagementActivityPtrOutput {
	return o
}

func (o MetadataManagementActivityPtrOutput) ToMetadataManagementActivityPtrOutputWithContext(ctx context.Context) MetadataManagementActivityPtrOutput {
	return o
}

func (o MetadataManagementActivityPtrOutput) Elem() MetadataManagementActivityOutput {
	return o.ApplyT(func(v *MetadataManagementActivity) MetadataManagementActivity { return *v }).(MetadataManagementActivityOutput)
}

// Output only. The latest metadata exports of the metastore service.
func (o MetadataManagementActivityPtrOutput) MetadataExports() MetadataExportArrayOutput {
	return o.ApplyT(func(v *MetadataManagementActivity) []MetadataExport {
		if v == nil {
			return nil
		}
		return v.MetadataExports
	}).(MetadataExportArrayOutput)
}

// Output only. The latest restores of the metastore service.
func (o MetadataManagementActivityPtrOutput) Restores() RestoreArrayOutput {
	return o.ApplyT(func(v *MetadataManagementActivity) []Restore {
		if v == nil {
			return nil
		}
		return v.Restores
	}).(RestoreArrayOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.A Policy is a collection of bindings. A binding binds one or more members to a single role. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).JSON example: { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } YAML example: bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the IAM documentation (https://cloud.google.com/iam/docs/).
type Policy struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []AuditConfig `pulumi:"auditConfigs"`
	// Associates a list of members to a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.A Policy is a collection of bindings. A binding binds one or more members to a single role. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).JSON example: { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } YAML example: bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the IAM documentation (https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs AuditConfigArrayInput `pulumi:"auditConfigs"`
	// Associates a list of members to a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.A Policy is a collection of bindings. A binding binds one or more members to a single role. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).JSON example: { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } YAML example: bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the IAM documentation (https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v Policy) []AuditConfig { return v.AuditConfigs }).(AuditConfigArrayOutput)
}

// Associates a list of members to a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyPtrOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v *Policy) []AuditConfig {
		if v == nil {
			return nil
		}
		return v.AuditConfigs
	}).(AuditConfigArrayOutput)
}

// Associates a list of members to a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// The details of a metadata restore operation.
type Restore struct {
	// Output only. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
	Backup *string `pulumi:"backup"`
	// Output only. The restore details containing the revision of the service to be restored to, in format of JSON.
	Details *string `pulumi:"details"`
	// Output only. The time when the restore ended.
	EndTime *string `pulumi:"endTime"`
	// Output only. The time when the restore started.
	StartTime *string `pulumi:"startTime"`
	// Output only. The current state of the restore.
	State *string `pulumi:"state"`
	// Output only. The type of restore.
	Type *string `pulumi:"type"`
}

// RestoreInput is an input type that accepts RestoreArgs and RestoreOutput values.
// You can construct a concrete instance of `RestoreInput` via:
//
//          RestoreArgs{...}
type RestoreInput interface {
	pulumi.Input

	ToRestoreOutput() RestoreOutput
	ToRestoreOutputWithContext(context.Context) RestoreOutput
}

// The details of a metadata restore operation.
type RestoreArgs struct {
	// Output only. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
	Backup pulumi.StringPtrInput `pulumi:"backup"`
	// Output only. The restore details containing the revision of the service to be restored to, in format of JSON.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// Output only. The time when the restore ended.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Output only. The time when the restore started.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Output only. The current state of the restore.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Output only. The type of restore.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RestoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Restore)(nil)).Elem()
}

func (i RestoreArgs) ToRestoreOutput() RestoreOutput {
	return i.ToRestoreOutputWithContext(context.Background())
}

func (i RestoreArgs) ToRestoreOutputWithContext(ctx context.Context) RestoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreOutput)
}

// RestoreArrayInput is an input type that accepts RestoreArray and RestoreArrayOutput values.
// You can construct a concrete instance of `RestoreArrayInput` via:
//
//          RestoreArray{ RestoreArgs{...} }
type RestoreArrayInput interface {
	pulumi.Input

	ToRestoreArrayOutput() RestoreArrayOutput
	ToRestoreArrayOutputWithContext(context.Context) RestoreArrayOutput
}

type RestoreArray []RestoreInput

func (RestoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Restore)(nil)).Elem()
}

func (i RestoreArray) ToRestoreArrayOutput() RestoreArrayOutput {
	return i.ToRestoreArrayOutputWithContext(context.Background())
}

func (i RestoreArray) ToRestoreArrayOutputWithContext(ctx context.Context) RestoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreArrayOutput)
}

// The details of a metadata restore operation.
type RestoreOutput struct{ *pulumi.OutputState }

func (RestoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Restore)(nil)).Elem()
}

func (o RestoreOutput) ToRestoreOutput() RestoreOutput {
	return o
}

func (o RestoreOutput) ToRestoreOutputWithContext(ctx context.Context) RestoreOutput {
	return o
}

// Output only. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
func (o RestoreOutput) Backup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Restore) *string { return v.Backup }).(pulumi.StringPtrOutput)
}

// Output only. The restore details containing the revision of the service to be restored to, in format of JSON.
func (o RestoreOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Restore) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// Output only. The time when the restore ended.
func (o RestoreOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Restore) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Output only. The time when the restore started.
func (o RestoreOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Restore) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Output only. The current state of the restore.
func (o RestoreOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Restore) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Output only. The type of restore.
func (o RestoreOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Restore) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RestoreArrayOutput struct{ *pulumi.OutputState }

func (RestoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Restore)(nil)).Elem()
}

func (o RestoreArrayOutput) ToRestoreArrayOutput() RestoreArrayOutput {
	return o
}

func (o RestoreArrayOutput) ToRestoreArrayOutputWithContext(ctx context.Context) RestoreArrayOutput {
	return o
}

func (o RestoreArrayOutput) Index(i pulumi.IntInput) RestoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Restore {
		return vs[0].([]Restore)[vs[1].(int)]
	}).(RestoreOutput)
}

// A securely stored value.
type Secret struct {
	// The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
	CloudSecret *string `pulumi:"cloudSecret"`
}

// SecretInput is an input type that accepts SecretArgs and SecretOutput values.
// You can construct a concrete instance of `SecretInput` via:
//
//          SecretArgs{...}
type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(context.Context) SecretOutput
}

// A securely stored value.
type SecretArgs struct {
	// The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
	CloudSecret pulumi.StringPtrInput `pulumi:"cloudSecret"`
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (i SecretArgs) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

func (i SecretArgs) ToSecretPtrOutput() SecretPtrOutput {
	return i.ToSecretPtrOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput).ToSecretPtrOutputWithContext(ctx)
}

// SecretPtrInput is an input type that accepts SecretArgs, SecretPtr and SecretPtrOutput values.
// You can construct a concrete instance of `SecretPtrInput` via:
//
//          SecretArgs{...}
//
//  or:
//
//          nil
type SecretPtrInput interface {
	pulumi.Input

	ToSecretPtrOutput() SecretPtrOutput
	ToSecretPtrOutputWithContext(context.Context) SecretPtrOutput
}

type secretPtrType SecretArgs

func SecretPtr(v *SecretArgs) SecretPtrInput {
	return (*secretPtrType)(v)
}

func (*secretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *secretPtrType) ToSecretPtrOutput() SecretPtrOutput {
	return i.ToSecretPtrOutputWithContext(context.Background())
}

func (i *secretPtrType) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretPtrOutput)
}

// A securely stored value.
type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

func (o SecretOutput) ToSecretPtrOutput() SecretPtrOutput {
	return o.ToSecretPtrOutputWithContext(context.Background())
}

func (o SecretOutput) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return o.ApplyT(func(v Secret) *Secret {
		return &v
	}).(SecretPtrOutput)
}

// The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
func (o SecretOutput) CloudSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secret) *string { return v.CloudSecret }).(pulumi.StringPtrOutput)
}

type SecretPtrOutput struct{ *pulumi.OutputState }

func (SecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretPtrOutput) ToSecretPtrOutput() SecretPtrOutput {
	return o
}

func (o SecretPtrOutput) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return o
}

func (o SecretPtrOutput) Elem() SecretOutput {
	return o.ApplyT(func(v *Secret) Secret { return *v }).(SecretOutput)
}

// The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
func (o SecretPtrOutput) CloudSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) *string {
		if v == nil {
			return nil
		}
		return v.CloudSecret
	}).(pulumi.StringPtrOutput)
}

// A managed metastore service that serves metadata queries.
type ServiceType struct {
	// Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
	ArtifactGcsUri *string `pulumi:"artifactGcsUri"`
	// Output only. The time when the metastore service was created.
	CreateTime *string `pulumi:"createTime"`
	// Output only. The URI of the endpoint used to access the metastore service.
	EndpointUri *string `pulumi:"endpointUri"`
	// Configuration information specific to running Hive metastore software as the metastore service.
	HiveMetastoreConfig *HiveMetastoreConfig `pulumi:"hiveMetastoreConfig"`
	// User-defined labels for the metastore service.
	Labels map[string]string `pulumi:"labels"`
	// The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time.
	MaintenanceWindow *MaintenanceWindow `pulumi:"maintenanceWindow"`
	// The setting that defines how metastore metadata should be integrated with external services and systems.
	MetadataIntegration *MetadataIntegration `pulumi:"metadataIntegration"`
	// Output only. The metadata management activities of the metastore service.
	MetadataManagementActivity *MetadataManagementActivity `pulumi:"metadataManagementActivity"`
	// Immutable. The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.
	Name *string `pulumi:"name"`
	// Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
	Network *string `pulumi:"network"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port *int `pulumi:"port"`
	// Immutable. The release channel of the service. If unspecified, defaults to STABLE.
	ReleaseChannel *string `pulumi:"releaseChannel"`
	// Output only. The current state of the metastore service.
	State *string `pulumi:"state"`
	// Output only. Additional information about the current state of the metastore service, if available.
	StateMessage *string `pulumi:"stateMessage"`
	// The tier of the service.
	Tier *string `pulumi:"tier"`
	// Output only. The globally unique resource identifier of the metastore service.
	Uid *string `pulumi:"uid"`
	// Output only. The time when the metastore service was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

// ServiceTypeInput is an input type that accepts ServiceTypeArgs and ServiceTypeOutput values.
// You can construct a concrete instance of `ServiceTypeInput` via:
//
//          ServiceTypeArgs{...}
type ServiceTypeInput interface {
	pulumi.Input

	ToServiceTypeOutput() ServiceTypeOutput
	ToServiceTypeOutputWithContext(context.Context) ServiceTypeOutput
}

// A managed metastore service that serves metadata queries.
type ServiceTypeArgs struct {
	// Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
	ArtifactGcsUri pulumi.StringPtrInput `pulumi:"artifactGcsUri"`
	// Output only. The time when the metastore service was created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Output only. The URI of the endpoint used to access the metastore service.
	EndpointUri pulumi.StringPtrInput `pulumi:"endpointUri"`
	// Configuration information specific to running Hive metastore software as the metastore service.
	HiveMetastoreConfig HiveMetastoreConfigPtrInput `pulumi:"hiveMetastoreConfig"`
	// User-defined labels for the metastore service.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time.
	MaintenanceWindow MaintenanceWindowPtrInput `pulumi:"maintenanceWindow"`
	// The setting that defines how metastore metadata should be integrated with external services and systems.
	MetadataIntegration MetadataIntegrationPtrInput `pulumi:"metadataIntegration"`
	// Output only. The metadata management activities of the metastore service.
	MetadataManagementActivity MetadataManagementActivityPtrInput `pulumi:"metadataManagementActivity"`
	// Immutable. The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Immutable. The release channel of the service. If unspecified, defaults to STABLE.
	ReleaseChannel pulumi.StringPtrInput `pulumi:"releaseChannel"`
	// Output only. The current state of the metastore service.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Output only. Additional information about the current state of the metastore service, if available.
	StateMessage pulumi.StringPtrInput `pulumi:"stateMessage"`
	// The tier of the service.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
	// Output only. The globally unique resource identifier of the metastore service.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// Output only. The time when the metastore service was last updated.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
}

func (ServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceType)(nil)).Elem()
}

func (i ServiceTypeArgs) ToServiceTypeOutput() ServiceTypeOutput {
	return i.ToServiceTypeOutputWithContext(context.Background())
}

func (i ServiceTypeArgs) ToServiceTypeOutputWithContext(ctx context.Context) ServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeOutput)
}

func (i ServiceTypeArgs) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return i.ToServiceTypePtrOutputWithContext(context.Background())
}

func (i ServiceTypeArgs) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypeOutput).ToServiceTypePtrOutputWithContext(ctx)
}

// ServiceTypePtrInput is an input type that accepts ServiceTypeArgs, ServiceTypePtr and ServiceTypePtrOutput values.
// You can construct a concrete instance of `ServiceTypePtrInput` via:
//
//          ServiceTypeArgs{...}
//
//  or:
//
//          nil
type ServiceTypePtrInput interface {
	pulumi.Input

	ToServiceTypePtrOutput() ServiceTypePtrOutput
	ToServiceTypePtrOutputWithContext(context.Context) ServiceTypePtrOutput
}

type serviceTypePtrType ServiceTypeArgs

func ServiceTypePtr(v *ServiceTypeArgs) ServiceTypePtrInput {
	return (*serviceTypePtrType)(v)
}

func (*serviceTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceType)(nil)).Elem()
}

func (i *serviceTypePtrType) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return i.ToServiceTypePtrOutputWithContext(context.Background())
}

func (i *serviceTypePtrType) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTypePtrOutput)
}

// A managed metastore service that serves metadata queries.
type ServiceTypeOutput struct{ *pulumi.OutputState }

func (ServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceType)(nil)).Elem()
}

func (o ServiceTypeOutput) ToServiceTypeOutput() ServiceTypeOutput {
	return o
}

func (o ServiceTypeOutput) ToServiceTypeOutputWithContext(ctx context.Context) ServiceTypeOutput {
	return o
}

func (o ServiceTypeOutput) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return o.ToServiceTypePtrOutputWithContext(context.Background())
}

func (o ServiceTypeOutput) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return o.ApplyT(func(v ServiceType) *ServiceType {
		return &v
	}).(ServiceTypePtrOutput)
}

// Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
func (o ServiceTypeOutput) ArtifactGcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.ArtifactGcsUri }).(pulumi.StringPtrOutput)
}

// Output only. The time when the metastore service was created.
func (o ServiceTypeOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Output only. The URI of the endpoint used to access the metastore service.
func (o ServiceTypeOutput) EndpointUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.EndpointUri }).(pulumi.StringPtrOutput)
}

// Configuration information specific to running Hive metastore software as the metastore service.
func (o ServiceTypeOutput) HiveMetastoreConfig() HiveMetastoreConfigPtrOutput {
	return o.ApplyT(func(v ServiceType) *HiveMetastoreConfig { return v.HiveMetastoreConfig }).(HiveMetastoreConfigPtrOutput)
}

// User-defined labels for the metastore service.
func (o ServiceTypeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceType) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time.
func (o ServiceTypeOutput) MaintenanceWindow() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v ServiceType) *MaintenanceWindow { return v.MaintenanceWindow }).(MaintenanceWindowPtrOutput)
}

// The setting that defines how metastore metadata should be integrated with external services and systems.
func (o ServiceTypeOutput) MetadataIntegration() MetadataIntegrationPtrOutput {
	return o.ApplyT(func(v ServiceType) *MetadataIntegration { return v.MetadataIntegration }).(MetadataIntegrationPtrOutput)
}

// Output only. The metadata management activities of the metastore service.
func (o ServiceTypeOutput) MetadataManagementActivity() MetadataManagementActivityPtrOutput {
	return o.ApplyT(func(v ServiceType) *MetadataManagementActivity { return v.MetadataManagementActivity }).(MetadataManagementActivityPtrOutput)
}

// Immutable. The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.
func (o ServiceTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
func (o ServiceTypeOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The TCP port at which the metastore service is reached. Default: 9083.
func (o ServiceTypeOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceType) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Immutable. The release channel of the service. If unspecified, defaults to STABLE.
func (o ServiceTypeOutput) ReleaseChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.ReleaseChannel }).(pulumi.StringPtrOutput)
}

// Output only. The current state of the metastore service.
func (o ServiceTypeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Output only. Additional information about the current state of the metastore service, if available.
func (o ServiceTypeOutput) StateMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.StateMessage }).(pulumi.StringPtrOutput)
}

// The tier of the service.
func (o ServiceTypeOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

// Output only. The globally unique resource identifier of the metastore service.
func (o ServiceTypeOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// Output only. The time when the metastore service was last updated.
func (o ServiceTypeOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceType) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

type ServiceTypePtrOutput struct{ *pulumi.OutputState }

func (ServiceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceType)(nil)).Elem()
}

func (o ServiceTypePtrOutput) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return o
}

func (o ServiceTypePtrOutput) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return o
}

func (o ServiceTypePtrOutput) Elem() ServiceTypeOutput {
	return o.ApplyT(func(v *ServiceType) ServiceType { return *v }).(ServiceTypeOutput)
}

// Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
func (o ServiceTypePtrOutput) ArtifactGcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.ArtifactGcsUri
	}).(pulumi.StringPtrOutput)
}

// Output only. The time when the metastore service was created.
func (o ServiceTypePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// Output only. The URI of the endpoint used to access the metastore service.
func (o ServiceTypePtrOutput) EndpointUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.EndpointUri
	}).(pulumi.StringPtrOutput)
}

// Configuration information specific to running Hive metastore software as the metastore service.
func (o ServiceTypePtrOutput) HiveMetastoreConfig() HiveMetastoreConfigPtrOutput {
	return o.ApplyT(func(v *ServiceType) *HiveMetastoreConfig {
		if v == nil {
			return nil
		}
		return v.HiveMetastoreConfig
	}).(HiveMetastoreConfigPtrOutput)
}

// User-defined labels for the metastore service.
func (o ServiceTypePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceType) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time.
func (o ServiceTypePtrOutput) MaintenanceWindow() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *ServiceType) *MaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindow
	}).(MaintenanceWindowPtrOutput)
}

// The setting that defines how metastore metadata should be integrated with external services and systems.
func (o ServiceTypePtrOutput) MetadataIntegration() MetadataIntegrationPtrOutput {
	return o.ApplyT(func(v *ServiceType) *MetadataIntegration {
		if v == nil {
			return nil
		}
		return v.MetadataIntegration
	}).(MetadataIntegrationPtrOutput)
}

// Output only. The metadata management activities of the metastore service.
func (o ServiceTypePtrOutput) MetadataManagementActivity() MetadataManagementActivityPtrOutput {
	return o.ApplyT(func(v *ServiceType) *MetadataManagementActivity {
		if v == nil {
			return nil
		}
		return v.MetadataManagementActivity
	}).(MetadataManagementActivityPtrOutput)
}

// Immutable. The relative resource name of the metastore service, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}.
func (o ServiceTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
func (o ServiceTypePtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// The TCP port at which the metastore service is reached. Default: 9083.
func (o ServiceTypePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceType) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Immutable. The release channel of the service. If unspecified, defaults to STABLE.
func (o ServiceTypePtrOutput) ReleaseChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseChannel
	}).(pulumi.StringPtrOutput)
}

// Output only. The current state of the metastore service.
func (o ServiceTypePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Output only. Additional information about the current state of the metastore service, if available.
func (o ServiceTypePtrOutput) StateMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.StateMessage
	}).(pulumi.StringPtrOutput)
}

// The tier of the service.
func (o ServiceTypePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Output only. The globally unique resource identifier of the metastore service.
func (o ServiceTypePtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Output only. The time when the metastore service was last updated.
func (o ServiceTypePtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceType) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(DataCatalogConfigOutput{})
	pulumi.RegisterOutputType(DataCatalogConfigPtrOutput{})
	pulumi.RegisterOutputType(DatabaseDumpOutput{})
	pulumi.RegisterOutputType(DatabaseDumpPtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(HiveMetastoreConfigOutput{})
	pulumi.RegisterOutputType(HiveMetastoreConfigPtrOutput{})
	pulumi.RegisterOutputType(KerberosConfigOutput{})
	pulumi.RegisterOutputType(KerberosConfigPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MetadataExportOutput{})
	pulumi.RegisterOutputType(MetadataExportArrayOutput{})
	pulumi.RegisterOutputType(MetadataIntegrationOutput{})
	pulumi.RegisterOutputType(MetadataIntegrationPtrOutput{})
	pulumi.RegisterOutputType(MetadataManagementActivityOutput{})
	pulumi.RegisterOutputType(MetadataManagementActivityPtrOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(RestoreOutput{})
	pulumi.RegisterOutputType(RestoreArrayOutput{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretPtrOutput{})
	pulumi.RegisterOutputType(ServiceTypeOutput{})
	pulumi.RegisterOutputType(ServiceTypePtrOutput{})
}
