// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new MetadataImport in a given project and location.
type MetadataImport struct {
	pulumi.CustomResourceState

	// The time when the metadata import was started.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Immutable. A database dump from a pre-existing metastore's database.
	DatabaseDump DatabaseDumpResponseOutput `pulumi:"databaseDump"`
	// The description of the metadata import.
	Description pulumi.StringOutput `pulumi:"description"`
	// The time when the metadata import finished.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
	Name pulumi.StringOutput `pulumi:"name"`
	// The current state of the metadata import.
	State pulumi.StringOutput `pulumi:"state"`
	// The time when the metadata import was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMetadataImport registers a new resource with the given unique name, arguments, and options.
func NewMetadataImport(ctx *pulumi.Context,
	name string, args *MetadataImportArgs, opts ...pulumi.ResourceOption) (*MetadataImport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.MetadataImportId == nil {
		return nil, errors.New("invalid value for required argument 'MetadataImportId'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	var resource MetadataImport
	err := ctx.RegisterResource("google-native:metastore/v1beta:MetadataImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetadataImport gets an existing MetadataImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetadataImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetadataImportState, opts ...pulumi.ResourceOption) (*MetadataImport, error) {
	var resource MetadataImport
	err := ctx.ReadResource("google-native:metastore/v1beta:MetadataImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetadataImport resources.
type metadataImportState struct {
	// The time when the metadata import was started.
	CreateTime *string `pulumi:"createTime"`
	// Immutable. A database dump from a pre-existing metastore's database.
	DatabaseDump *DatabaseDumpResponse `pulumi:"databaseDump"`
	// The description of the metadata import.
	Description *string `pulumi:"description"`
	// The time when the metadata import finished.
	EndTime *string `pulumi:"endTime"`
	// Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
	Name *string `pulumi:"name"`
	// The current state of the metadata import.
	State *string `pulumi:"state"`
	// The time when the metadata import was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type MetadataImportState struct {
	// The time when the metadata import was started.
	CreateTime pulumi.StringPtrInput
	// Immutable. A database dump from a pre-existing metastore's database.
	DatabaseDump DatabaseDumpResponsePtrInput
	// The description of the metadata import.
	Description pulumi.StringPtrInput
	// The time when the metadata import finished.
	EndTime pulumi.StringPtrInput
	// Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
	Name pulumi.StringPtrInput
	// The current state of the metadata import.
	State pulumi.StringPtrInput
	// The time when the metadata import was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (MetadataImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*metadataImportState)(nil)).Elem()
}

type metadataImportArgs struct {
	// Immutable. A database dump from a pre-existing metastore's database.
	DatabaseDump *DatabaseDump `pulumi:"databaseDump"`
	// The description of the metadata import.
	Description      *string `pulumi:"description"`
	Location         string  `pulumi:"location"`
	MetadataImportId string  `pulumi:"metadataImportId"`
	// Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
	Name      *string `pulumi:"name"`
	Project   string  `pulumi:"project"`
	RequestId *string `pulumi:"requestId"`
	ServiceId string  `pulumi:"serviceId"`
}

// The set of arguments for constructing a MetadataImport resource.
type MetadataImportArgs struct {
	// Immutable. A database dump from a pre-existing metastore's database.
	DatabaseDump DatabaseDumpPtrInput
	// The description of the metadata import.
	Description      pulumi.StringPtrInput
	Location         pulumi.StringInput
	MetadataImportId pulumi.StringInput
	// Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
	Name      pulumi.StringPtrInput
	Project   pulumi.StringInput
	RequestId pulumi.StringPtrInput
	ServiceId pulumi.StringInput
}

func (MetadataImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metadataImportArgs)(nil)).Elem()
}

type MetadataImportInput interface {
	pulumi.Input

	ToMetadataImportOutput() MetadataImportOutput
	ToMetadataImportOutputWithContext(ctx context.Context) MetadataImportOutput
}

func (*MetadataImport) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataImport)(nil))
}

func (i *MetadataImport) ToMetadataImportOutput() MetadataImportOutput {
	return i.ToMetadataImportOutputWithContext(context.Background())
}

func (i *MetadataImport) ToMetadataImportOutputWithContext(ctx context.Context) MetadataImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataImportOutput)
}

type MetadataImportOutput struct {
	*pulumi.OutputState
}

func (MetadataImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataImport)(nil))
}

func (o MetadataImportOutput) ToMetadataImportOutput() MetadataImportOutput {
	return o
}

func (o MetadataImportOutput) ToMetadataImportOutputWithContext(ctx context.Context) MetadataImportOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MetadataImportOutput{})
}
