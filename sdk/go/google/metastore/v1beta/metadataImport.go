// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new MetadataImport in a given project and location.
type MetadataImport struct {
	pulumi.CustomResourceState
}

// NewMetadataImport registers a new resource with the given unique name, arguments, and options.
func NewMetadataImport(ctx *pulumi.Context,
	name string, args *MetadataImportArgs, opts ...pulumi.ResourceOption) (*MetadataImport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource MetadataImport
	err := ctx.RegisterResource("google-cloud:metastore/v1beta:MetadataImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetadataImport gets an existing MetadataImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetadataImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetadataImportState, opts ...pulumi.ResourceOption) (*MetadataImport, error) {
	var resource MetadataImport
	err := ctx.ReadResource("google-cloud:metastore/v1beta:MetadataImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetadataImport resources.
type metadataImportState struct {
}

type MetadataImportState struct {
}

func (MetadataImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*metadataImportState)(nil)).Elem()
}

type metadataImportArgs struct {
	// Output only. The time when the metadata import was created.
	CreateTime *string `pulumi:"createTime"`
	// Immutable. A database dump from a pre-existing metastore's database.
	DatabaseDump *DatabaseDump `pulumi:"databaseDump"`
	// The description of the metadata import.
	Description *string `pulumi:"description"`
	// Required. The ID of the metadata import, which is used as the final component of the metadata import's name.This value must be between 1 and 64 characters long, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens.
	MetadataImportId *string `pulumi:"metadataImportId"`
	// Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
	Name *string `pulumi:"name"`
	// Required. The relative resource name of the service in which to create a metastore import, in the following form:projects/{project_number}/locations/{location_id}/services/{service_id}.
	Parent string `pulumi:"parent"`
	// Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
	RequestId *string `pulumi:"requestId"`
	// Output only. The current state of the metadata import.
	State *string `pulumi:"state"`
	// Output only. The time when the metadata import was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a MetadataImport resource.
type MetadataImportArgs struct {
	// Output only. The time when the metadata import was created.
	CreateTime pulumi.StringPtrInput
	// Immutable. A database dump from a pre-existing metastore's database.
	DatabaseDump DatabaseDumpPtrInput
	// The description of the metadata import.
	Description pulumi.StringPtrInput
	// Required. The ID of the metadata import, which is used as the final component of the metadata import's name.This value must be between 1 and 64 characters long, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens.
	MetadataImportId pulumi.StringPtrInput
	// Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
	Name pulumi.StringPtrInput
	// Required. The relative resource name of the service in which to create a metastore import, in the following form:projects/{project_number}/locations/{location_id}/services/{service_id}.
	Parent pulumi.StringInput
	// Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
	RequestId pulumi.StringPtrInput
	// Output only. The current state of the metadata import.
	State pulumi.StringPtrInput
	// Output only. The time when the metadata import was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (MetadataImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metadataImportArgs)(nil)).Elem()
}

type MetadataImportInput interface {
	pulumi.Input

	ToMetadataImportOutput() MetadataImportOutput
	ToMetadataImportOutputWithContext(ctx context.Context) MetadataImportOutput
}

func (*MetadataImport) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataImport)(nil))
}

func (i *MetadataImport) ToMetadataImportOutput() MetadataImportOutput {
	return i.ToMetadataImportOutputWithContext(context.Background())
}

func (i *MetadataImport) ToMetadataImportOutputWithContext(ctx context.Context) MetadataImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataImportOutput)
}

type MetadataImportOutput struct {
	*pulumi.OutputState
}

func (MetadataImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataImport)(nil))
}

func (o MetadataImportOutput) ToMetadataImportOutput() MetadataImportOutput {
	return o
}

func (o MetadataImportOutput) ToMetadataImportOutputWithContext(ctx context.Context) MetadataImportOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MetadataImportOutput{})
}
