// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.If there are AuditConfigs for both allServices and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.If there are AuditConfigs for both allServices and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.If there are AuditConfigs for both allServices and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.If there are AuditConfigs for both allServices and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.If there are AuditConfigs for both allServices and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Configuration information for the auxiliary service versions.
type AuxiliaryVersionConfig struct {
	// A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides. If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.
	ConfigOverrides map[string]string `pulumi:"configOverrides"`
	// The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.
	Version *string `pulumi:"version"`
}

// AuxiliaryVersionConfigInput is an input type that accepts AuxiliaryVersionConfigArgs and AuxiliaryVersionConfigOutput values.
// You can construct a concrete instance of `AuxiliaryVersionConfigInput` via:
//
//	AuxiliaryVersionConfigArgs{...}
type AuxiliaryVersionConfigInput interface {
	pulumi.Input

	ToAuxiliaryVersionConfigOutput() AuxiliaryVersionConfigOutput
	ToAuxiliaryVersionConfigOutputWithContext(context.Context) AuxiliaryVersionConfigOutput
}

// Configuration information for the auxiliary service versions.
type AuxiliaryVersionConfigArgs struct {
	// A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides. If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.
	ConfigOverrides pulumi.StringMapInput `pulumi:"configOverrides"`
	// The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (AuxiliaryVersionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuxiliaryVersionConfig)(nil)).Elem()
}

func (i AuxiliaryVersionConfigArgs) ToAuxiliaryVersionConfigOutput() AuxiliaryVersionConfigOutput {
	return i.ToAuxiliaryVersionConfigOutputWithContext(context.Background())
}

func (i AuxiliaryVersionConfigArgs) ToAuxiliaryVersionConfigOutputWithContext(ctx context.Context) AuxiliaryVersionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuxiliaryVersionConfigOutput)
}

func (i AuxiliaryVersionConfigArgs) ToAuxiliaryVersionConfigPtrOutput() AuxiliaryVersionConfigPtrOutput {
	return i.ToAuxiliaryVersionConfigPtrOutputWithContext(context.Background())
}

func (i AuxiliaryVersionConfigArgs) ToAuxiliaryVersionConfigPtrOutputWithContext(ctx context.Context) AuxiliaryVersionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuxiliaryVersionConfigOutput).ToAuxiliaryVersionConfigPtrOutputWithContext(ctx)
}

// AuxiliaryVersionConfigPtrInput is an input type that accepts AuxiliaryVersionConfigArgs, AuxiliaryVersionConfigPtr and AuxiliaryVersionConfigPtrOutput values.
// You can construct a concrete instance of `AuxiliaryVersionConfigPtrInput` via:
//
//	        AuxiliaryVersionConfigArgs{...}
//
//	or:
//
//	        nil
type AuxiliaryVersionConfigPtrInput interface {
	pulumi.Input

	ToAuxiliaryVersionConfigPtrOutput() AuxiliaryVersionConfigPtrOutput
	ToAuxiliaryVersionConfigPtrOutputWithContext(context.Context) AuxiliaryVersionConfigPtrOutput
}

type auxiliaryVersionConfigPtrType AuxiliaryVersionConfigArgs

func AuxiliaryVersionConfigPtr(v *AuxiliaryVersionConfigArgs) AuxiliaryVersionConfigPtrInput {
	return (*auxiliaryVersionConfigPtrType)(v)
}

func (*auxiliaryVersionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuxiliaryVersionConfig)(nil)).Elem()
}

func (i *auxiliaryVersionConfigPtrType) ToAuxiliaryVersionConfigPtrOutput() AuxiliaryVersionConfigPtrOutput {
	return i.ToAuxiliaryVersionConfigPtrOutputWithContext(context.Background())
}

func (i *auxiliaryVersionConfigPtrType) ToAuxiliaryVersionConfigPtrOutputWithContext(ctx context.Context) AuxiliaryVersionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuxiliaryVersionConfigPtrOutput)
}

// Configuration information for the auxiliary service versions.
type AuxiliaryVersionConfigOutput struct{ *pulumi.OutputState }

func (AuxiliaryVersionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuxiliaryVersionConfig)(nil)).Elem()
}

func (o AuxiliaryVersionConfigOutput) ToAuxiliaryVersionConfigOutput() AuxiliaryVersionConfigOutput {
	return o
}

func (o AuxiliaryVersionConfigOutput) ToAuxiliaryVersionConfigOutputWithContext(ctx context.Context) AuxiliaryVersionConfigOutput {
	return o
}

func (o AuxiliaryVersionConfigOutput) ToAuxiliaryVersionConfigPtrOutput() AuxiliaryVersionConfigPtrOutput {
	return o.ToAuxiliaryVersionConfigPtrOutputWithContext(context.Background())
}

func (o AuxiliaryVersionConfigOutput) ToAuxiliaryVersionConfigPtrOutputWithContext(ctx context.Context) AuxiliaryVersionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuxiliaryVersionConfig) *AuxiliaryVersionConfig {
		return &v
	}).(AuxiliaryVersionConfigPtrOutput)
}

// A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides. If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.
func (o AuxiliaryVersionConfigOutput) ConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v AuxiliaryVersionConfig) map[string]string { return v.ConfigOverrides }).(pulumi.StringMapOutput)
}

// The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.
func (o AuxiliaryVersionConfigOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuxiliaryVersionConfig) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type AuxiliaryVersionConfigPtrOutput struct{ *pulumi.OutputState }

func (AuxiliaryVersionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuxiliaryVersionConfig)(nil)).Elem()
}

func (o AuxiliaryVersionConfigPtrOutput) ToAuxiliaryVersionConfigPtrOutput() AuxiliaryVersionConfigPtrOutput {
	return o
}

func (o AuxiliaryVersionConfigPtrOutput) ToAuxiliaryVersionConfigPtrOutputWithContext(ctx context.Context) AuxiliaryVersionConfigPtrOutput {
	return o
}

func (o AuxiliaryVersionConfigPtrOutput) Elem() AuxiliaryVersionConfigOutput {
	return o.ApplyT(func(v *AuxiliaryVersionConfig) AuxiliaryVersionConfig {
		if v != nil {
			return *v
		}
		var ret AuxiliaryVersionConfig
		return ret
	}).(AuxiliaryVersionConfigOutput)
}

// A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides. If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.
func (o AuxiliaryVersionConfigPtrOutput) ConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AuxiliaryVersionConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConfigOverrides
	}).(pulumi.StringMapOutput)
}

// The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.
func (o AuxiliaryVersionConfigPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuxiliaryVersionConfig) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Configuration information for the auxiliary service versions.
type AuxiliaryVersionConfigResponse struct {
	// A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides. If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.
	ConfigOverrides map[string]string `pulumi:"configOverrides"`
	// The network configuration contains the endpoint URI(s) of the auxiliary Hive metastore service.
	NetworkConfig NetworkConfigResponse `pulumi:"networkConfig"`
	// The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.
	Version string `pulumi:"version"`
}

// Configuration information for the auxiliary service versions.
type AuxiliaryVersionConfigResponseOutput struct{ *pulumi.OutputState }

func (AuxiliaryVersionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuxiliaryVersionConfigResponse)(nil)).Elem()
}

func (o AuxiliaryVersionConfigResponseOutput) ToAuxiliaryVersionConfigResponseOutput() AuxiliaryVersionConfigResponseOutput {
	return o
}

func (o AuxiliaryVersionConfigResponseOutput) ToAuxiliaryVersionConfigResponseOutputWithContext(ctx context.Context) AuxiliaryVersionConfigResponseOutput {
	return o
}

// A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides. If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.
func (o AuxiliaryVersionConfigResponseOutput) ConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v AuxiliaryVersionConfigResponse) map[string]string { return v.ConfigOverrides }).(pulumi.StringMapOutput)
}

// The network configuration contains the endpoint URI(s) of the auxiliary Hive metastore service.
func (o AuxiliaryVersionConfigResponseOutput) NetworkConfig() NetworkConfigResponseOutput {
	return o.ApplyT(func(v AuxiliaryVersionConfigResponse) NetworkConfigResponse { return v.NetworkConfig }).(NetworkConfigResponseOutput)
}

// The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.
func (o AuxiliaryVersionConfigResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v AuxiliaryVersionConfigResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Represents a backend metastore for the federation.
type BackendMetastore struct {
	// The type of the backend metastore.
	MetastoreType *BackendMetastoreMetastoreType `pulumi:"metastoreType"`
	// The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}
	Name *string `pulumi:"name"`
}

// BackendMetastoreInput is an input type that accepts BackendMetastoreArgs and BackendMetastoreOutput values.
// You can construct a concrete instance of `BackendMetastoreInput` via:
//
//	BackendMetastoreArgs{...}
type BackendMetastoreInput interface {
	pulumi.Input

	ToBackendMetastoreOutput() BackendMetastoreOutput
	ToBackendMetastoreOutputWithContext(context.Context) BackendMetastoreOutput
}

// Represents a backend metastore for the federation.
type BackendMetastoreArgs struct {
	// The type of the backend metastore.
	MetastoreType BackendMetastoreMetastoreTypePtrInput `pulumi:"metastoreType"`
	// The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BackendMetastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendMetastore)(nil)).Elem()
}

func (i BackendMetastoreArgs) ToBackendMetastoreOutput() BackendMetastoreOutput {
	return i.ToBackendMetastoreOutputWithContext(context.Background())
}

func (i BackendMetastoreArgs) ToBackendMetastoreOutputWithContext(ctx context.Context) BackendMetastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendMetastoreOutput)
}

func (i BackendMetastoreArgs) ToBackendMetastorePtrOutput() BackendMetastorePtrOutput {
	return i.ToBackendMetastorePtrOutputWithContext(context.Background())
}

func (i BackendMetastoreArgs) ToBackendMetastorePtrOutputWithContext(ctx context.Context) BackendMetastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendMetastoreOutput).ToBackendMetastorePtrOutputWithContext(ctx)
}

// BackendMetastorePtrInput is an input type that accepts BackendMetastoreArgs, BackendMetastorePtr and BackendMetastorePtrOutput values.
// You can construct a concrete instance of `BackendMetastorePtrInput` via:
//
//	        BackendMetastoreArgs{...}
//
//	or:
//
//	        nil
type BackendMetastorePtrInput interface {
	pulumi.Input

	ToBackendMetastorePtrOutput() BackendMetastorePtrOutput
	ToBackendMetastorePtrOutputWithContext(context.Context) BackendMetastorePtrOutput
}

type backendMetastorePtrType BackendMetastoreArgs

func BackendMetastorePtr(v *BackendMetastoreArgs) BackendMetastorePtrInput {
	return (*backendMetastorePtrType)(v)
}

func (*backendMetastorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendMetastore)(nil)).Elem()
}

func (i *backendMetastorePtrType) ToBackendMetastorePtrOutput() BackendMetastorePtrOutput {
	return i.ToBackendMetastorePtrOutputWithContext(context.Background())
}

func (i *backendMetastorePtrType) ToBackendMetastorePtrOutputWithContext(ctx context.Context) BackendMetastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendMetastorePtrOutput)
}

// Represents a backend metastore for the federation.
type BackendMetastoreOutput struct{ *pulumi.OutputState }

func (BackendMetastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendMetastore)(nil)).Elem()
}

func (o BackendMetastoreOutput) ToBackendMetastoreOutput() BackendMetastoreOutput {
	return o
}

func (o BackendMetastoreOutput) ToBackendMetastoreOutputWithContext(ctx context.Context) BackendMetastoreOutput {
	return o
}

func (o BackendMetastoreOutput) ToBackendMetastorePtrOutput() BackendMetastorePtrOutput {
	return o.ToBackendMetastorePtrOutputWithContext(context.Background())
}

func (o BackendMetastoreOutput) ToBackendMetastorePtrOutputWithContext(ctx context.Context) BackendMetastorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendMetastore) *BackendMetastore {
		return &v
	}).(BackendMetastorePtrOutput)
}

// The type of the backend metastore.
func (o BackendMetastoreOutput) MetastoreType() BackendMetastoreMetastoreTypePtrOutput {
	return o.ApplyT(func(v BackendMetastore) *BackendMetastoreMetastoreType { return v.MetastoreType }).(BackendMetastoreMetastoreTypePtrOutput)
}

// The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}
func (o BackendMetastoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendMetastore) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BackendMetastorePtrOutput struct{ *pulumi.OutputState }

func (BackendMetastorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendMetastore)(nil)).Elem()
}

func (o BackendMetastorePtrOutput) ToBackendMetastorePtrOutput() BackendMetastorePtrOutput {
	return o
}

func (o BackendMetastorePtrOutput) ToBackendMetastorePtrOutputWithContext(ctx context.Context) BackendMetastorePtrOutput {
	return o
}

func (o BackendMetastorePtrOutput) Elem() BackendMetastoreOutput {
	return o.ApplyT(func(v *BackendMetastore) BackendMetastore {
		if v != nil {
			return *v
		}
		var ret BackendMetastore
		return ret
	}).(BackendMetastoreOutput)
}

// The type of the backend metastore.
func (o BackendMetastorePtrOutput) MetastoreType() BackendMetastoreMetastoreTypePtrOutput {
	return o.ApplyT(func(v *BackendMetastore) *BackendMetastoreMetastoreType {
		if v == nil {
			return nil
		}
		return v.MetastoreType
	}).(BackendMetastoreMetastoreTypePtrOutput)
}

// The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}
func (o BackendMetastorePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendMetastore) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Represents a backend metastore for the federation.
type BackendMetastoreResponse struct {
	// The type of the backend metastore.
	MetastoreType string `pulumi:"metastoreType"`
	// The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}
	Name string `pulumi:"name"`
}

// Represents a backend metastore for the federation.
type BackendMetastoreResponseOutput struct{ *pulumi.OutputState }

func (BackendMetastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendMetastoreResponse)(nil)).Elem()
}

func (o BackendMetastoreResponseOutput) ToBackendMetastoreResponseOutput() BackendMetastoreResponseOutput {
	return o
}

func (o BackendMetastoreResponseOutput) ToBackendMetastoreResponseOutputWithContext(ctx context.Context) BackendMetastoreResponseOutput {
	return o
}

// The type of the backend metastore.
func (o BackendMetastoreResponseOutput) MetastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v BackendMetastoreResponse) string { return v.MetastoreType }).(pulumi.StringOutput)
}

// The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}
func (o BackendMetastoreResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BackendMetastoreResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Associates members, or principals, with a role.
type Binding struct {
	// The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a Google service account. For example, my-other-app@appspot.gserviceaccount.com. serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An identifier for a Kubernetes service account (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa]. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of members, or principals. For example, roles/viewer, roles/editor, or roles/owner.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates members, or principals, with a role.
type BindingArgs struct {
	// The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a Google service account. For example, my-other-app@appspot.gserviceaccount.com. serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An identifier for a Kubernetes service account (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa]. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of members, or principals. For example, roles/viewer, roles/editor, or roles/owner.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates members, or principals, with a role.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a Google service account. For example, my-other-app@appspot.gserviceaccount.com. serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An identifier for a Kubernetes service account (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa]. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of members, or principals. For example, roles/viewer, roles/editor, or roles/owner.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates members, or principals, with a role.
type BindingResponse struct {
	// The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a Google service account. For example, my-other-app@appspot.gserviceaccount.com. serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An identifier for a Kubernetes service account (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa]. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of members, or principals. For example, roles/viewer, roles/editor, or roles/owner.
	Role string `pulumi:"role"`
}

// Associates members, or principals, with a role.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a Google service account. For example, my-other-app@appspot.gserviceaccount.com. serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An identifier for a Kubernetes service account (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa]. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of members, or principals. For example, roles/viewer, roles/editor, or roles/owner.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Contains information of the customer's network configurations.
type Consumer struct {
	// Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}
	Subnetwork *string `pulumi:"subnetwork"`
}

// ConsumerInput is an input type that accepts ConsumerArgs and ConsumerOutput values.
// You can construct a concrete instance of `ConsumerInput` via:
//
//	ConsumerArgs{...}
type ConsumerInput interface {
	pulumi.Input

	ToConsumerOutput() ConsumerOutput
	ToConsumerOutputWithContext(context.Context) ConsumerOutput
}

// Contains information of the customer's network configurations.
type ConsumerArgs struct {
	// Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (ConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Consumer)(nil)).Elem()
}

func (i ConsumerArgs) ToConsumerOutput() ConsumerOutput {
	return i.ToConsumerOutputWithContext(context.Background())
}

func (i ConsumerArgs) ToConsumerOutputWithContext(ctx context.Context) ConsumerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerOutput)
}

// ConsumerArrayInput is an input type that accepts ConsumerArray and ConsumerArrayOutput values.
// You can construct a concrete instance of `ConsumerArrayInput` via:
//
//	ConsumerArray{ ConsumerArgs{...} }
type ConsumerArrayInput interface {
	pulumi.Input

	ToConsumerArrayOutput() ConsumerArrayOutput
	ToConsumerArrayOutputWithContext(context.Context) ConsumerArrayOutput
}

type ConsumerArray []ConsumerInput

func (ConsumerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Consumer)(nil)).Elem()
}

func (i ConsumerArray) ToConsumerArrayOutput() ConsumerArrayOutput {
	return i.ToConsumerArrayOutputWithContext(context.Background())
}

func (i ConsumerArray) ToConsumerArrayOutputWithContext(ctx context.Context) ConsumerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerArrayOutput)
}

// Contains information of the customer's network configurations.
type ConsumerOutput struct{ *pulumi.OutputState }

func (ConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Consumer)(nil)).Elem()
}

func (o ConsumerOutput) ToConsumerOutput() ConsumerOutput {
	return o
}

func (o ConsumerOutput) ToConsumerOutputWithContext(ctx context.Context) ConsumerOutput {
	return o
}

// Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}
func (o ConsumerOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Consumer) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type ConsumerArrayOutput struct{ *pulumi.OutputState }

func (ConsumerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Consumer)(nil)).Elem()
}

func (o ConsumerArrayOutput) ToConsumerArrayOutput() ConsumerArrayOutput {
	return o
}

func (o ConsumerArrayOutput) ToConsumerArrayOutputWithContext(ctx context.Context) ConsumerArrayOutput {
	return o
}

func (o ConsumerArrayOutput) Index(i pulumi.IntInput) ConsumerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Consumer {
		return vs[0].([]Consumer)[vs[1].(int)]
	}).(ConsumerOutput)
}

// Contains information of the customer's network configurations.
type ConsumerResponse struct {
	// The location of the endpoint URI. Format: projects/{project}/locations/{location}.
	EndpointLocation string `pulumi:"endpointLocation"`
	// The URI of the endpoint used to access the metastore service.
	EndpointUri string `pulumi:"endpointUri"`
	// Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}
	Subnetwork string `pulumi:"subnetwork"`
}

// Contains information of the customer's network configurations.
type ConsumerResponseOutput struct{ *pulumi.OutputState }

func (ConsumerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerResponse)(nil)).Elem()
}

func (o ConsumerResponseOutput) ToConsumerResponseOutput() ConsumerResponseOutput {
	return o
}

func (o ConsumerResponseOutput) ToConsumerResponseOutputWithContext(ctx context.Context) ConsumerResponseOutput {
	return o
}

// The location of the endpoint URI. Format: projects/{project}/locations/{location}.
func (o ConsumerResponseOutput) EndpointLocation() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerResponse) string { return v.EndpointLocation }).(pulumi.StringOutput)
}

// The URI of the endpoint used to access the metastore service.
func (o ConsumerResponseOutput) EndpointUri() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerResponse) string { return v.EndpointUri }).(pulumi.StringOutput)
}

// Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}
func (o ConsumerResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

type ConsumerResponseArrayOutput struct{ *pulumi.OutputState }

func (ConsumerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumerResponse)(nil)).Elem()
}

func (o ConsumerResponseArrayOutput) ToConsumerResponseArrayOutput() ConsumerResponseArrayOutput {
	return o
}

func (o ConsumerResponseArrayOutput) ToConsumerResponseArrayOutputWithContext(ctx context.Context) ConsumerResponseArrayOutput {
	return o
}

func (o ConsumerResponseArrayOutput) Index(i pulumi.IntInput) ConsumerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConsumerResponse {
		return vs[0].([]ConsumerResponse)[vs[1].(int)]
	}).(ConsumerResponseOutput)
}

// Specifies how metastore metadata should be integrated with the Data Catalog service.
type DataCatalogConfig struct {
	// Optional. Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
	Enabled *bool `pulumi:"enabled"`
}

// DataCatalogConfigInput is an input type that accepts DataCatalogConfigArgs and DataCatalogConfigOutput values.
// You can construct a concrete instance of `DataCatalogConfigInput` via:
//
//	DataCatalogConfigArgs{...}
type DataCatalogConfigInput interface {
	pulumi.Input

	ToDataCatalogConfigOutput() DataCatalogConfigOutput
	ToDataCatalogConfigOutputWithContext(context.Context) DataCatalogConfigOutput
}

// Specifies how metastore metadata should be integrated with the Data Catalog service.
type DataCatalogConfigArgs struct {
	// Optional. Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (DataCatalogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogConfig)(nil)).Elem()
}

func (i DataCatalogConfigArgs) ToDataCatalogConfigOutput() DataCatalogConfigOutput {
	return i.ToDataCatalogConfigOutputWithContext(context.Background())
}

func (i DataCatalogConfigArgs) ToDataCatalogConfigOutputWithContext(ctx context.Context) DataCatalogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogConfigOutput)
}

func (i DataCatalogConfigArgs) ToDataCatalogConfigPtrOutput() DataCatalogConfigPtrOutput {
	return i.ToDataCatalogConfigPtrOutputWithContext(context.Background())
}

func (i DataCatalogConfigArgs) ToDataCatalogConfigPtrOutputWithContext(ctx context.Context) DataCatalogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogConfigOutput).ToDataCatalogConfigPtrOutputWithContext(ctx)
}

// DataCatalogConfigPtrInput is an input type that accepts DataCatalogConfigArgs, DataCatalogConfigPtr and DataCatalogConfigPtrOutput values.
// You can construct a concrete instance of `DataCatalogConfigPtrInput` via:
//
//	        DataCatalogConfigArgs{...}
//
//	or:
//
//	        nil
type DataCatalogConfigPtrInput interface {
	pulumi.Input

	ToDataCatalogConfigPtrOutput() DataCatalogConfigPtrOutput
	ToDataCatalogConfigPtrOutputWithContext(context.Context) DataCatalogConfigPtrOutput
}

type dataCatalogConfigPtrType DataCatalogConfigArgs

func DataCatalogConfigPtr(v *DataCatalogConfigArgs) DataCatalogConfigPtrInput {
	return (*dataCatalogConfigPtrType)(v)
}

func (*dataCatalogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogConfig)(nil)).Elem()
}

func (i *dataCatalogConfigPtrType) ToDataCatalogConfigPtrOutput() DataCatalogConfigPtrOutput {
	return i.ToDataCatalogConfigPtrOutputWithContext(context.Background())
}

func (i *dataCatalogConfigPtrType) ToDataCatalogConfigPtrOutputWithContext(ctx context.Context) DataCatalogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCatalogConfigPtrOutput)
}

// Specifies how metastore metadata should be integrated with the Data Catalog service.
type DataCatalogConfigOutput struct{ *pulumi.OutputState }

func (DataCatalogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogConfig)(nil)).Elem()
}

func (o DataCatalogConfigOutput) ToDataCatalogConfigOutput() DataCatalogConfigOutput {
	return o
}

func (o DataCatalogConfigOutput) ToDataCatalogConfigOutputWithContext(ctx context.Context) DataCatalogConfigOutput {
	return o
}

func (o DataCatalogConfigOutput) ToDataCatalogConfigPtrOutput() DataCatalogConfigPtrOutput {
	return o.ToDataCatalogConfigPtrOutputWithContext(context.Background())
}

func (o DataCatalogConfigOutput) ToDataCatalogConfigPtrOutputWithContext(ctx context.Context) DataCatalogConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCatalogConfig) *DataCatalogConfig {
		return &v
	}).(DataCatalogConfigPtrOutput)
}

// Optional. Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
func (o DataCatalogConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataCatalogConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type DataCatalogConfigPtrOutput struct{ *pulumi.OutputState }

func (DataCatalogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCatalogConfig)(nil)).Elem()
}

func (o DataCatalogConfigPtrOutput) ToDataCatalogConfigPtrOutput() DataCatalogConfigPtrOutput {
	return o
}

func (o DataCatalogConfigPtrOutput) ToDataCatalogConfigPtrOutputWithContext(ctx context.Context) DataCatalogConfigPtrOutput {
	return o
}

func (o DataCatalogConfigPtrOutput) Elem() DataCatalogConfigOutput {
	return o.ApplyT(func(v *DataCatalogConfig) DataCatalogConfig {
		if v != nil {
			return *v
		}
		var ret DataCatalogConfig
		return ret
	}).(DataCatalogConfigOutput)
}

// Optional. Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
func (o DataCatalogConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataCatalogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies how metastore metadata should be integrated with the Data Catalog service.
type DataCatalogConfigResponse struct {
	// Optional. Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
	Enabled bool `pulumi:"enabled"`
}

// Specifies how metastore metadata should be integrated with the Data Catalog service.
type DataCatalogConfigResponseOutput struct{ *pulumi.OutputState }

func (DataCatalogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCatalogConfigResponse)(nil)).Elem()
}

func (o DataCatalogConfigResponseOutput) ToDataCatalogConfigResponseOutput() DataCatalogConfigResponseOutput {
	return o
}

func (o DataCatalogConfigResponseOutput) ToDataCatalogConfigResponseOutputWithContext(ctx context.Context) DataCatalogConfigResponseOutput {
	return o
}

// Optional. Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.
func (o DataCatalogConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DataCatalogConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A specification of the location of and metadata about a database dump from a relational database management system.
type DatabaseDump struct {
	// The type of the database.
	DatabaseType *DatabaseDumpDatabaseType `pulumi:"databaseType"`
	// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
	GcsUri *string `pulumi:"gcsUri"`
	// The name of the source database.
	SourceDatabase *string `pulumi:"sourceDatabase"`
	// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
	Type *DatabaseDumpType `pulumi:"type"`
}

// DatabaseDumpInput is an input type that accepts DatabaseDumpArgs and DatabaseDumpOutput values.
// You can construct a concrete instance of `DatabaseDumpInput` via:
//
//	DatabaseDumpArgs{...}
type DatabaseDumpInput interface {
	pulumi.Input

	ToDatabaseDumpOutput() DatabaseDumpOutput
	ToDatabaseDumpOutputWithContext(context.Context) DatabaseDumpOutput
}

// A specification of the location of and metadata about a database dump from a relational database management system.
type DatabaseDumpArgs struct {
	// The type of the database.
	DatabaseType DatabaseDumpDatabaseTypePtrInput `pulumi:"databaseType"`
	// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
	GcsUri pulumi.StringPtrInput `pulumi:"gcsUri"`
	// The name of the source database.
	SourceDatabase pulumi.StringPtrInput `pulumi:"sourceDatabase"`
	// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
	Type DatabaseDumpTypePtrInput `pulumi:"type"`
}

func (DatabaseDumpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDump)(nil)).Elem()
}

func (i DatabaseDumpArgs) ToDatabaseDumpOutput() DatabaseDumpOutput {
	return i.ToDatabaseDumpOutputWithContext(context.Background())
}

func (i DatabaseDumpArgs) ToDatabaseDumpOutputWithContext(ctx context.Context) DatabaseDumpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDumpOutput)
}

func (i DatabaseDumpArgs) ToDatabaseDumpPtrOutput() DatabaseDumpPtrOutput {
	return i.ToDatabaseDumpPtrOutputWithContext(context.Background())
}

func (i DatabaseDumpArgs) ToDatabaseDumpPtrOutputWithContext(ctx context.Context) DatabaseDumpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDumpOutput).ToDatabaseDumpPtrOutputWithContext(ctx)
}

// DatabaseDumpPtrInput is an input type that accepts DatabaseDumpArgs, DatabaseDumpPtr and DatabaseDumpPtrOutput values.
// You can construct a concrete instance of `DatabaseDumpPtrInput` via:
//
//	        DatabaseDumpArgs{...}
//
//	or:
//
//	        nil
type DatabaseDumpPtrInput interface {
	pulumi.Input

	ToDatabaseDumpPtrOutput() DatabaseDumpPtrOutput
	ToDatabaseDumpPtrOutputWithContext(context.Context) DatabaseDumpPtrOutput
}

type databaseDumpPtrType DatabaseDumpArgs

func DatabaseDumpPtr(v *DatabaseDumpArgs) DatabaseDumpPtrInput {
	return (*databaseDumpPtrType)(v)
}

func (*databaseDumpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDump)(nil)).Elem()
}

func (i *databaseDumpPtrType) ToDatabaseDumpPtrOutput() DatabaseDumpPtrOutput {
	return i.ToDatabaseDumpPtrOutputWithContext(context.Background())
}

func (i *databaseDumpPtrType) ToDatabaseDumpPtrOutputWithContext(ctx context.Context) DatabaseDumpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDumpPtrOutput)
}

// A specification of the location of and metadata about a database dump from a relational database management system.
type DatabaseDumpOutput struct{ *pulumi.OutputState }

func (DatabaseDumpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDump)(nil)).Elem()
}

func (o DatabaseDumpOutput) ToDatabaseDumpOutput() DatabaseDumpOutput {
	return o
}

func (o DatabaseDumpOutput) ToDatabaseDumpOutputWithContext(ctx context.Context) DatabaseDumpOutput {
	return o
}

func (o DatabaseDumpOutput) ToDatabaseDumpPtrOutput() DatabaseDumpPtrOutput {
	return o.ToDatabaseDumpPtrOutputWithContext(context.Background())
}

func (o DatabaseDumpOutput) ToDatabaseDumpPtrOutputWithContext(ctx context.Context) DatabaseDumpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseDump) *DatabaseDump {
		return &v
	}).(DatabaseDumpPtrOutput)
}

// The type of the database.
func (o DatabaseDumpOutput) DatabaseType() DatabaseDumpDatabaseTypePtrOutput {
	return o.ApplyT(func(v DatabaseDump) *DatabaseDumpDatabaseType { return v.DatabaseType }).(DatabaseDumpDatabaseTypePtrOutput)
}

// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
func (o DatabaseDumpOutput) GcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDump) *string { return v.GcsUri }).(pulumi.StringPtrOutput)
}

// The name of the source database.
func (o DatabaseDumpOutput) SourceDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseDump) *string { return v.SourceDatabase }).(pulumi.StringPtrOutput)
}

// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
func (o DatabaseDumpOutput) Type() DatabaseDumpTypePtrOutput {
	return o.ApplyT(func(v DatabaseDump) *DatabaseDumpType { return v.Type }).(DatabaseDumpTypePtrOutput)
}

type DatabaseDumpPtrOutput struct{ *pulumi.OutputState }

func (DatabaseDumpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDump)(nil)).Elem()
}

func (o DatabaseDumpPtrOutput) ToDatabaseDumpPtrOutput() DatabaseDumpPtrOutput {
	return o
}

func (o DatabaseDumpPtrOutput) ToDatabaseDumpPtrOutputWithContext(ctx context.Context) DatabaseDumpPtrOutput {
	return o
}

func (o DatabaseDumpPtrOutput) Elem() DatabaseDumpOutput {
	return o.ApplyT(func(v *DatabaseDump) DatabaseDump {
		if v != nil {
			return *v
		}
		var ret DatabaseDump
		return ret
	}).(DatabaseDumpOutput)
}

// The type of the database.
func (o DatabaseDumpPtrOutput) DatabaseType() DatabaseDumpDatabaseTypePtrOutput {
	return o.ApplyT(func(v *DatabaseDump) *DatabaseDumpDatabaseType {
		if v == nil {
			return nil
		}
		return v.DatabaseType
	}).(DatabaseDumpDatabaseTypePtrOutput)
}

// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
func (o DatabaseDumpPtrOutput) GcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDump) *string {
		if v == nil {
			return nil
		}
		return v.GcsUri
	}).(pulumi.StringPtrOutput)
}

// The name of the source database.
func (o DatabaseDumpPtrOutput) SourceDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseDump) *string {
		if v == nil {
			return nil
		}
		return v.SourceDatabase
	}).(pulumi.StringPtrOutput)
}

// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
func (o DatabaseDumpPtrOutput) Type() DatabaseDumpTypePtrOutput {
	return o.ApplyT(func(v *DatabaseDump) *DatabaseDumpType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(DatabaseDumpTypePtrOutput)
}

// A specification of the location of and metadata about a database dump from a relational database management system.
type DatabaseDumpResponse struct {
	// The type of the database.
	DatabaseType string `pulumi:"databaseType"`
	// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
	GcsUri string `pulumi:"gcsUri"`
	// The name of the source database.
	SourceDatabase string `pulumi:"sourceDatabase"`
	// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
	Type string `pulumi:"type"`
}

// A specification of the location of and metadata about a database dump from a relational database management system.
type DatabaseDumpResponseOutput struct{ *pulumi.OutputState }

func (DatabaseDumpResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDumpResponse)(nil)).Elem()
}

func (o DatabaseDumpResponseOutput) ToDatabaseDumpResponseOutput() DatabaseDumpResponseOutput {
	return o
}

func (o DatabaseDumpResponseOutput) ToDatabaseDumpResponseOutputWithContext(ctx context.Context) DatabaseDumpResponseOutput {
	return o
}

// The type of the database.
func (o DatabaseDumpResponseOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseDumpResponse) string { return v.DatabaseType }).(pulumi.StringOutput)
}

// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
func (o DatabaseDumpResponseOutput) GcsUri() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseDumpResponse) string { return v.GcsUri }).(pulumi.StringOutput)
}

// The name of the source database.
func (o DatabaseDumpResponseOutput) SourceDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseDumpResponse) string { return v.SourceDatabase }).(pulumi.StringOutput)
}

// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
func (o DatabaseDumpResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseDumpResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Encryption settings for the service.
type EncryptionConfig struct {
	// The fully qualified customer provided Cloud KMS key name to use for customer data encryption, in the following form:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.
	KmsKey *string `pulumi:"kmsKey"`
}

// EncryptionConfigInput is an input type that accepts EncryptionConfigArgs and EncryptionConfigOutput values.
// You can construct a concrete instance of `EncryptionConfigInput` via:
//
//	EncryptionConfigArgs{...}
type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(context.Context) EncryptionConfigOutput
}

// Encryption settings for the service.
type EncryptionConfigArgs struct {
	// The fully qualified customer provided Cloud KMS key name to use for customer data encryption, in the following form:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.
	KmsKey pulumi.StringPtrInput `pulumi:"kmsKey"`
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput).ToEncryptionConfigPtrOutputWithContext(ctx)
}

// EncryptionConfigPtrInput is an input type that accepts EncryptionConfigArgs, EncryptionConfigPtr and EncryptionConfigPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigPtrInput` via:
//
//	        EncryptionConfigArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func EncryptionConfigPtr(v *EncryptionConfigArgs) EncryptionConfigPtrInput {
	return (*encryptionConfigPtrType)(v)
}

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

// Encryption settings for the service.
type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

// The fully qualified customer provided Cloud KMS key name to use for customer data encryption, in the following form:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.
func (o EncryptionConfigOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *string { return v.KmsKey }).(pulumi.StringPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig {
		if v != nil {
			return *v
		}
		var ret EncryptionConfig
		return ret
	}).(EncryptionConfigOutput)
}

// The fully qualified customer provided Cloud KMS key name to use for customer data encryption, in the following form:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.
func (o EncryptionConfigPtrOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKey
	}).(pulumi.StringPtrOutput)
}

// Encryption settings for the service.
type EncryptionConfigResponse struct {
	// The fully qualified customer provided Cloud KMS key name to use for customer data encryption, in the following form:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.
	KmsKey string `pulumi:"kmsKey"`
}

// Encryption settings for the service.
type EncryptionConfigResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigResponse)(nil)).Elem()
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutput() EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutputWithContext(ctx context.Context) EncryptionConfigResponseOutput {
	return o
}

// The fully qualified customer provided Cloud KMS key name to use for customer data encryption, in the following form:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.
func (o EncryptionConfigResponseOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigResponse) string { return v.KmsKey }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Specifies configuration information specific to running Hive metastore software as the metastore service.
type HiveMetastoreConfig struct {
	// A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
	AuxiliaryVersions *AuxiliaryVersionConfig `pulumi:"auxiliaryVersions"`
	// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.
	ConfigOverrides map[string]string `pulumi:"configOverrides"`
	// The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
	EndpointProtocol *HiveMetastoreConfigEndpointProtocol `pulumi:"endpointProtocol"`
	// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
	KerberosConfig *KerberosConfig `pulumi:"kerberosConfig"`
	// Immutable. The Hive metastore schema version.
	Version *string `pulumi:"version"`
}

// HiveMetastoreConfigInput is an input type that accepts HiveMetastoreConfigArgs and HiveMetastoreConfigOutput values.
// You can construct a concrete instance of `HiveMetastoreConfigInput` via:
//
//	HiveMetastoreConfigArgs{...}
type HiveMetastoreConfigInput interface {
	pulumi.Input

	ToHiveMetastoreConfigOutput() HiveMetastoreConfigOutput
	ToHiveMetastoreConfigOutputWithContext(context.Context) HiveMetastoreConfigOutput
}

// Specifies configuration information specific to running Hive metastore software as the metastore service.
type HiveMetastoreConfigArgs struct {
	// A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
	AuxiliaryVersions AuxiliaryVersionConfigPtrInput `pulumi:"auxiliaryVersions"`
	// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.
	ConfigOverrides pulumi.StringMapInput `pulumi:"configOverrides"`
	// The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
	EndpointProtocol HiveMetastoreConfigEndpointProtocolPtrInput `pulumi:"endpointProtocol"`
	// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
	KerberosConfig KerberosConfigPtrInput `pulumi:"kerberosConfig"`
	// Immutable. The Hive metastore schema version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HiveMetastoreConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveMetastoreConfig)(nil)).Elem()
}

func (i HiveMetastoreConfigArgs) ToHiveMetastoreConfigOutput() HiveMetastoreConfigOutput {
	return i.ToHiveMetastoreConfigOutputWithContext(context.Background())
}

func (i HiveMetastoreConfigArgs) ToHiveMetastoreConfigOutputWithContext(ctx context.Context) HiveMetastoreConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveMetastoreConfigOutput)
}

func (i HiveMetastoreConfigArgs) ToHiveMetastoreConfigPtrOutput() HiveMetastoreConfigPtrOutput {
	return i.ToHiveMetastoreConfigPtrOutputWithContext(context.Background())
}

func (i HiveMetastoreConfigArgs) ToHiveMetastoreConfigPtrOutputWithContext(ctx context.Context) HiveMetastoreConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveMetastoreConfigOutput).ToHiveMetastoreConfigPtrOutputWithContext(ctx)
}

// HiveMetastoreConfigPtrInput is an input type that accepts HiveMetastoreConfigArgs, HiveMetastoreConfigPtr and HiveMetastoreConfigPtrOutput values.
// You can construct a concrete instance of `HiveMetastoreConfigPtrInput` via:
//
//	        HiveMetastoreConfigArgs{...}
//
//	or:
//
//	        nil
type HiveMetastoreConfigPtrInput interface {
	pulumi.Input

	ToHiveMetastoreConfigPtrOutput() HiveMetastoreConfigPtrOutput
	ToHiveMetastoreConfigPtrOutputWithContext(context.Context) HiveMetastoreConfigPtrOutput
}

type hiveMetastoreConfigPtrType HiveMetastoreConfigArgs

func HiveMetastoreConfigPtr(v *HiveMetastoreConfigArgs) HiveMetastoreConfigPtrInput {
	return (*hiveMetastoreConfigPtrType)(v)
}

func (*hiveMetastoreConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HiveMetastoreConfig)(nil)).Elem()
}

func (i *hiveMetastoreConfigPtrType) ToHiveMetastoreConfigPtrOutput() HiveMetastoreConfigPtrOutput {
	return i.ToHiveMetastoreConfigPtrOutputWithContext(context.Background())
}

func (i *hiveMetastoreConfigPtrType) ToHiveMetastoreConfigPtrOutputWithContext(ctx context.Context) HiveMetastoreConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveMetastoreConfigPtrOutput)
}

// Specifies configuration information specific to running Hive metastore software as the metastore service.
type HiveMetastoreConfigOutput struct{ *pulumi.OutputState }

func (HiveMetastoreConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveMetastoreConfig)(nil)).Elem()
}

func (o HiveMetastoreConfigOutput) ToHiveMetastoreConfigOutput() HiveMetastoreConfigOutput {
	return o
}

func (o HiveMetastoreConfigOutput) ToHiveMetastoreConfigOutputWithContext(ctx context.Context) HiveMetastoreConfigOutput {
	return o
}

func (o HiveMetastoreConfigOutput) ToHiveMetastoreConfigPtrOutput() HiveMetastoreConfigPtrOutput {
	return o.ToHiveMetastoreConfigPtrOutputWithContext(context.Background())
}

func (o HiveMetastoreConfigOutput) ToHiveMetastoreConfigPtrOutputWithContext(ctx context.Context) HiveMetastoreConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HiveMetastoreConfig) *HiveMetastoreConfig {
		return &v
	}).(HiveMetastoreConfigPtrOutput)
}

// A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
func (o HiveMetastoreConfigOutput) AuxiliaryVersions() AuxiliaryVersionConfigPtrOutput {
	return o.ApplyT(func(v HiveMetastoreConfig) *AuxiliaryVersionConfig { return v.AuxiliaryVersions }).(AuxiliaryVersionConfigPtrOutput)
}

// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.
func (o HiveMetastoreConfigOutput) ConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v HiveMetastoreConfig) map[string]string { return v.ConfigOverrides }).(pulumi.StringMapOutput)
}

// The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
func (o HiveMetastoreConfigOutput) EndpointProtocol() HiveMetastoreConfigEndpointProtocolPtrOutput {
	return o.ApplyT(func(v HiveMetastoreConfig) *HiveMetastoreConfigEndpointProtocol { return v.EndpointProtocol }).(HiveMetastoreConfigEndpointProtocolPtrOutput)
}

// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
func (o HiveMetastoreConfigOutput) KerberosConfig() KerberosConfigPtrOutput {
	return o.ApplyT(func(v HiveMetastoreConfig) *KerberosConfig { return v.KerberosConfig }).(KerberosConfigPtrOutput)
}

// Immutable. The Hive metastore schema version.
func (o HiveMetastoreConfigOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveMetastoreConfig) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HiveMetastoreConfigPtrOutput struct{ *pulumi.OutputState }

func (HiveMetastoreConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HiveMetastoreConfig)(nil)).Elem()
}

func (o HiveMetastoreConfigPtrOutput) ToHiveMetastoreConfigPtrOutput() HiveMetastoreConfigPtrOutput {
	return o
}

func (o HiveMetastoreConfigPtrOutput) ToHiveMetastoreConfigPtrOutputWithContext(ctx context.Context) HiveMetastoreConfigPtrOutput {
	return o
}

func (o HiveMetastoreConfigPtrOutput) Elem() HiveMetastoreConfigOutput {
	return o.ApplyT(func(v *HiveMetastoreConfig) HiveMetastoreConfig {
		if v != nil {
			return *v
		}
		var ret HiveMetastoreConfig
		return ret
	}).(HiveMetastoreConfigOutput)
}

// A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
func (o HiveMetastoreConfigPtrOutput) AuxiliaryVersions() AuxiliaryVersionConfigPtrOutput {
	return o.ApplyT(func(v *HiveMetastoreConfig) *AuxiliaryVersionConfig {
		if v == nil {
			return nil
		}
		return v.AuxiliaryVersions
	}).(AuxiliaryVersionConfigPtrOutput)
}

// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.
func (o HiveMetastoreConfigPtrOutput) ConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HiveMetastoreConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConfigOverrides
	}).(pulumi.StringMapOutput)
}

// The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
func (o HiveMetastoreConfigPtrOutput) EndpointProtocol() HiveMetastoreConfigEndpointProtocolPtrOutput {
	return o.ApplyT(func(v *HiveMetastoreConfig) *HiveMetastoreConfigEndpointProtocol {
		if v == nil {
			return nil
		}
		return v.EndpointProtocol
	}).(HiveMetastoreConfigEndpointProtocolPtrOutput)
}

// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
func (o HiveMetastoreConfigPtrOutput) KerberosConfig() KerberosConfigPtrOutput {
	return o.ApplyT(func(v *HiveMetastoreConfig) *KerberosConfig {
		if v == nil {
			return nil
		}
		return v.KerberosConfig
	}).(KerberosConfigPtrOutput)
}

// Immutable. The Hive metastore schema version.
func (o HiveMetastoreConfigPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HiveMetastoreConfig) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Specifies configuration information specific to running Hive metastore software as the metastore service.
type HiveMetastoreConfigResponse struct {
	// A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
	AuxiliaryVersions AuxiliaryVersionConfigResponse `pulumi:"auxiliaryVersions"`
	// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.
	ConfigOverrides map[string]string `pulumi:"configOverrides"`
	// The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
	EndpointProtocol string `pulumi:"endpointProtocol"`
	// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
	KerberosConfig KerberosConfigResponse `pulumi:"kerberosConfig"`
	// Immutable. The Hive metastore schema version.
	Version string `pulumi:"version"`
}

// Specifies configuration information specific to running Hive metastore software as the metastore service.
type HiveMetastoreConfigResponseOutput struct{ *pulumi.OutputState }

func (HiveMetastoreConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveMetastoreConfigResponse)(nil)).Elem()
}

func (o HiveMetastoreConfigResponseOutput) ToHiveMetastoreConfigResponseOutput() HiveMetastoreConfigResponseOutput {
	return o
}

func (o HiveMetastoreConfigResponseOutput) ToHiveMetastoreConfigResponseOutputWithContext(ctx context.Context) HiveMetastoreConfigResponseOutput {
	return o
}

// A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
func (o HiveMetastoreConfigResponseOutput) AuxiliaryVersions() AuxiliaryVersionConfigResponseOutput {
	return o.ApplyT(func(v HiveMetastoreConfigResponse) AuxiliaryVersionConfigResponse { return v.AuxiliaryVersions }).(AuxiliaryVersionConfigResponseOutput)
}

// A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.
func (o HiveMetastoreConfigResponseOutput) ConfigOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v HiveMetastoreConfigResponse) map[string]string { return v.ConfigOverrides }).(pulumi.StringMapOutput)
}

// The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.
func (o HiveMetastoreConfigResponseOutput) EndpointProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v HiveMetastoreConfigResponse) string { return v.EndpointProtocol }).(pulumi.StringOutput)
}

// Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
func (o HiveMetastoreConfigResponseOutput) KerberosConfig() KerberosConfigResponseOutput {
	return o.ApplyT(func(v HiveMetastoreConfigResponse) KerberosConfigResponse { return v.KerberosConfig }).(KerberosConfigResponseOutput)
}

// Immutable. The Hive metastore schema version.
func (o HiveMetastoreConfigResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v HiveMetastoreConfigResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Configuration information for a Kerberos principal.
type KerberosConfig struct {
	// A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
	Keytab *Secret `pulumi:"keytab"`
	// A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
	Krb5ConfigGcsUri *string `pulumi:"krb5ConfigGcsUri"`
	// A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
	Principal *string `pulumi:"principal"`
}

// KerberosConfigInput is an input type that accepts KerberosConfigArgs and KerberosConfigOutput values.
// You can construct a concrete instance of `KerberosConfigInput` via:
//
//	KerberosConfigArgs{...}
type KerberosConfigInput interface {
	pulumi.Input

	ToKerberosConfigOutput() KerberosConfigOutput
	ToKerberosConfigOutputWithContext(context.Context) KerberosConfigOutput
}

// Configuration information for a Kerberos principal.
type KerberosConfigArgs struct {
	// A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
	Keytab SecretPtrInput `pulumi:"keytab"`
	// A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
	Krb5ConfigGcsUri pulumi.StringPtrInput `pulumi:"krb5ConfigGcsUri"`
	// A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
	Principal pulumi.StringPtrInput `pulumi:"principal"`
}

func (KerberosConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosConfig)(nil)).Elem()
}

func (i KerberosConfigArgs) ToKerberosConfigOutput() KerberosConfigOutput {
	return i.ToKerberosConfigOutputWithContext(context.Background())
}

func (i KerberosConfigArgs) ToKerberosConfigOutputWithContext(ctx context.Context) KerberosConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosConfigOutput)
}

func (i KerberosConfigArgs) ToKerberosConfigPtrOutput() KerberosConfigPtrOutput {
	return i.ToKerberosConfigPtrOutputWithContext(context.Background())
}

func (i KerberosConfigArgs) ToKerberosConfigPtrOutputWithContext(ctx context.Context) KerberosConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosConfigOutput).ToKerberosConfigPtrOutputWithContext(ctx)
}

// KerberosConfigPtrInput is an input type that accepts KerberosConfigArgs, KerberosConfigPtr and KerberosConfigPtrOutput values.
// You can construct a concrete instance of `KerberosConfigPtrInput` via:
//
//	        KerberosConfigArgs{...}
//
//	or:
//
//	        nil
type KerberosConfigPtrInput interface {
	pulumi.Input

	ToKerberosConfigPtrOutput() KerberosConfigPtrOutput
	ToKerberosConfigPtrOutputWithContext(context.Context) KerberosConfigPtrOutput
}

type kerberosConfigPtrType KerberosConfigArgs

func KerberosConfigPtr(v *KerberosConfigArgs) KerberosConfigPtrInput {
	return (*kerberosConfigPtrType)(v)
}

func (*kerberosConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KerberosConfig)(nil)).Elem()
}

func (i *kerberosConfigPtrType) ToKerberosConfigPtrOutput() KerberosConfigPtrOutput {
	return i.ToKerberosConfigPtrOutputWithContext(context.Background())
}

func (i *kerberosConfigPtrType) ToKerberosConfigPtrOutputWithContext(ctx context.Context) KerberosConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosConfigPtrOutput)
}

// Configuration information for a Kerberos principal.
type KerberosConfigOutput struct{ *pulumi.OutputState }

func (KerberosConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosConfig)(nil)).Elem()
}

func (o KerberosConfigOutput) ToKerberosConfigOutput() KerberosConfigOutput {
	return o
}

func (o KerberosConfigOutput) ToKerberosConfigOutputWithContext(ctx context.Context) KerberosConfigOutput {
	return o
}

func (o KerberosConfigOutput) ToKerberosConfigPtrOutput() KerberosConfigPtrOutput {
	return o.ToKerberosConfigPtrOutputWithContext(context.Background())
}

func (o KerberosConfigOutput) ToKerberosConfigPtrOutputWithContext(ctx context.Context) KerberosConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KerberosConfig) *KerberosConfig {
		return &v
	}).(KerberosConfigPtrOutput)
}

// A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
func (o KerberosConfigOutput) Keytab() SecretPtrOutput {
	return o.ApplyT(func(v KerberosConfig) *Secret { return v.Keytab }).(SecretPtrOutput)
}

// A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
func (o KerberosConfigOutput) Krb5ConfigGcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KerberosConfig) *string { return v.Krb5ConfigGcsUri }).(pulumi.StringPtrOutput)
}

// A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
func (o KerberosConfigOutput) Principal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KerberosConfig) *string { return v.Principal }).(pulumi.StringPtrOutput)
}

type KerberosConfigPtrOutput struct{ *pulumi.OutputState }

func (KerberosConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KerberosConfig)(nil)).Elem()
}

func (o KerberosConfigPtrOutput) ToKerberosConfigPtrOutput() KerberosConfigPtrOutput {
	return o
}

func (o KerberosConfigPtrOutput) ToKerberosConfigPtrOutputWithContext(ctx context.Context) KerberosConfigPtrOutput {
	return o
}

func (o KerberosConfigPtrOutput) Elem() KerberosConfigOutput {
	return o.ApplyT(func(v *KerberosConfig) KerberosConfig {
		if v != nil {
			return *v
		}
		var ret KerberosConfig
		return ret
	}).(KerberosConfigOutput)
}

// A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
func (o KerberosConfigPtrOutput) Keytab() SecretPtrOutput {
	return o.ApplyT(func(v *KerberosConfig) *Secret {
		if v == nil {
			return nil
		}
		return v.Keytab
	}).(SecretPtrOutput)
}

// A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
func (o KerberosConfigPtrOutput) Krb5ConfigGcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KerberosConfig) *string {
		if v == nil {
			return nil
		}
		return v.Krb5ConfigGcsUri
	}).(pulumi.StringPtrOutput)
}

// A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
func (o KerberosConfigPtrOutput) Principal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KerberosConfig) *string {
		if v == nil {
			return nil
		}
		return v.Principal
	}).(pulumi.StringPtrOutput)
}

// Configuration information for a Kerberos principal.
type KerberosConfigResponse struct {
	// A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
	Keytab SecretResponse `pulumi:"keytab"`
	// A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
	Krb5ConfigGcsUri string `pulumi:"krb5ConfigGcsUri"`
	// A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
	Principal string `pulumi:"principal"`
}

// Configuration information for a Kerberos principal.
type KerberosConfigResponseOutput struct{ *pulumi.OutputState }

func (KerberosConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosConfigResponse)(nil)).Elem()
}

func (o KerberosConfigResponseOutput) ToKerberosConfigResponseOutput() KerberosConfigResponseOutput {
	return o
}

func (o KerberosConfigResponseOutput) ToKerberosConfigResponseOutputWithContext(ctx context.Context) KerberosConfigResponseOutput {
	return o
}

// A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
func (o KerberosConfigResponseOutput) Keytab() SecretResponseOutput {
	return o.ApplyT(func(v KerberosConfigResponse) SecretResponse { return v.Keytab }).(SecretResponseOutput)
}

// A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
func (o KerberosConfigResponseOutput) Krb5ConfigGcsUri() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosConfigResponse) string { return v.Krb5ConfigGcsUri }).(pulumi.StringOutput)
}

// A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
func (o KerberosConfigResponseOutput) Principal() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosConfigResponse) string { return v.Principal }).(pulumi.StringOutput)
}

// Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
type MaintenanceWindow struct {
	// The day of week, when the window starts.
	DayOfWeek *MaintenanceWindowDayOfWeek `pulumi:"dayOfWeek"`
	// The hour of day (0-23) when the window starts.
	HourOfDay *int `pulumi:"hourOfDay"`
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//	MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
type MaintenanceWindowArgs struct {
	// The day of week, when the window starts.
	DayOfWeek MaintenanceWindowDayOfWeekPtrInput `pulumi:"dayOfWeek"`
	// The hour of day (0-23) when the window starts.
	HourOfDay pulumi.IntPtrInput `pulumi:"hourOfDay"`
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//	        MaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

// Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

// The day of week, when the window starts.
func (o MaintenanceWindowOutput) DayOfWeek() MaintenanceWindowDayOfWeekPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *MaintenanceWindowDayOfWeek { return v.DayOfWeek }).(MaintenanceWindowDayOfWeekPtrOutput)
}

// The hour of day (0-23) when the window starts.
func (o MaintenanceWindowOutput) HourOfDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *int { return v.HourOfDay }).(pulumi.IntPtrOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret MaintenanceWindow
		return ret
	}).(MaintenanceWindowOutput)
}

// The day of week, when the window starts.
func (o MaintenanceWindowPtrOutput) DayOfWeek() MaintenanceWindowDayOfWeekPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *MaintenanceWindowDayOfWeek {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(MaintenanceWindowDayOfWeekPtrOutput)
}

// The hour of day (0-23) when the window starts.
func (o MaintenanceWindowPtrOutput) HourOfDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.HourOfDay
	}).(pulumi.IntPtrOutput)
}

// Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
type MaintenanceWindowResponse struct {
	// The day of week, when the window starts.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The hour of day (0-23) when the window starts.
	HourOfDay int `pulumi:"hourOfDay"`
}

// Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
type MaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutput() MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutputWithContext(ctx context.Context) MaintenanceWindowResponseOutput {
	return o
}

// The day of week, when the window starts.
func (o MaintenanceWindowResponseOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The hour of day (0-23) when the window starts.
func (o MaintenanceWindowResponseOutput) HourOfDay() pulumi.IntOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) int { return v.HourOfDay }).(pulumi.IntOutput)
}

// The details of a metadata export operation.
type MetadataExportResponse struct {
	// The type of the database dump.
	DatabaseDumpType string `pulumi:"databaseDumpType"`
	// A Cloud Storage URI of a folder that metadata are exported to, in the form of gs:////, where is automatically generated.
	DestinationGcsUri string `pulumi:"destinationGcsUri"`
	// The time when the export ended.
	EndTime string `pulumi:"endTime"`
	// The time when the export started.
	StartTime string `pulumi:"startTime"`
	// The current state of the export.
	State string `pulumi:"state"`
}

// The details of a metadata export operation.
type MetadataExportResponseOutput struct{ *pulumi.OutputState }

func (MetadataExportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataExportResponse)(nil)).Elem()
}

func (o MetadataExportResponseOutput) ToMetadataExportResponseOutput() MetadataExportResponseOutput {
	return o
}

func (o MetadataExportResponseOutput) ToMetadataExportResponseOutputWithContext(ctx context.Context) MetadataExportResponseOutput {
	return o
}

// The type of the database dump.
func (o MetadataExportResponseOutput) DatabaseDumpType() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataExportResponse) string { return v.DatabaseDumpType }).(pulumi.StringOutput)
}

// A Cloud Storage URI of a folder that metadata are exported to, in the form of gs:////, where is automatically generated.
func (o MetadataExportResponseOutput) DestinationGcsUri() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataExportResponse) string { return v.DestinationGcsUri }).(pulumi.StringOutput)
}

// The time when the export ended.
func (o MetadataExportResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataExportResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// The time when the export started.
func (o MetadataExportResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataExportResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The current state of the export.
func (o MetadataExportResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataExportResponse) string { return v.State }).(pulumi.StringOutput)
}

type MetadataExportResponseArrayOutput struct{ *pulumi.OutputState }

func (MetadataExportResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataExportResponse)(nil)).Elem()
}

func (o MetadataExportResponseArrayOutput) ToMetadataExportResponseArrayOutput() MetadataExportResponseArrayOutput {
	return o
}

func (o MetadataExportResponseArrayOutput) ToMetadataExportResponseArrayOutputWithContext(ctx context.Context) MetadataExportResponseArrayOutput {
	return o
}

func (o MetadataExportResponseArrayOutput) Index(i pulumi.IntInput) MetadataExportResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataExportResponse {
		return vs[0].([]MetadataExportResponse)[vs[1].(int)]
	}).(MetadataExportResponseOutput)
}

// Specifies how metastore metadata should be integrated with external services.
type MetadataIntegration struct {
	// Optional. The integration config for the Data Catalog service.
	DataCatalogConfig *DataCatalogConfig `pulumi:"dataCatalogConfig"`
}

// MetadataIntegrationInput is an input type that accepts MetadataIntegrationArgs and MetadataIntegrationOutput values.
// You can construct a concrete instance of `MetadataIntegrationInput` via:
//
//	MetadataIntegrationArgs{...}
type MetadataIntegrationInput interface {
	pulumi.Input

	ToMetadataIntegrationOutput() MetadataIntegrationOutput
	ToMetadataIntegrationOutputWithContext(context.Context) MetadataIntegrationOutput
}

// Specifies how metastore metadata should be integrated with external services.
type MetadataIntegrationArgs struct {
	// Optional. The integration config for the Data Catalog service.
	DataCatalogConfig DataCatalogConfigPtrInput `pulumi:"dataCatalogConfig"`
}

func (MetadataIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataIntegration)(nil)).Elem()
}

func (i MetadataIntegrationArgs) ToMetadataIntegrationOutput() MetadataIntegrationOutput {
	return i.ToMetadataIntegrationOutputWithContext(context.Background())
}

func (i MetadataIntegrationArgs) ToMetadataIntegrationOutputWithContext(ctx context.Context) MetadataIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataIntegrationOutput)
}

func (i MetadataIntegrationArgs) ToMetadataIntegrationPtrOutput() MetadataIntegrationPtrOutput {
	return i.ToMetadataIntegrationPtrOutputWithContext(context.Background())
}

func (i MetadataIntegrationArgs) ToMetadataIntegrationPtrOutputWithContext(ctx context.Context) MetadataIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataIntegrationOutput).ToMetadataIntegrationPtrOutputWithContext(ctx)
}

// MetadataIntegrationPtrInput is an input type that accepts MetadataIntegrationArgs, MetadataIntegrationPtr and MetadataIntegrationPtrOutput values.
// You can construct a concrete instance of `MetadataIntegrationPtrInput` via:
//
//	        MetadataIntegrationArgs{...}
//
//	or:
//
//	        nil
type MetadataIntegrationPtrInput interface {
	pulumi.Input

	ToMetadataIntegrationPtrOutput() MetadataIntegrationPtrOutput
	ToMetadataIntegrationPtrOutputWithContext(context.Context) MetadataIntegrationPtrOutput
}

type metadataIntegrationPtrType MetadataIntegrationArgs

func MetadataIntegrationPtr(v *MetadataIntegrationArgs) MetadataIntegrationPtrInput {
	return (*metadataIntegrationPtrType)(v)
}

func (*metadataIntegrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataIntegration)(nil)).Elem()
}

func (i *metadataIntegrationPtrType) ToMetadataIntegrationPtrOutput() MetadataIntegrationPtrOutput {
	return i.ToMetadataIntegrationPtrOutputWithContext(context.Background())
}

func (i *metadataIntegrationPtrType) ToMetadataIntegrationPtrOutputWithContext(ctx context.Context) MetadataIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataIntegrationPtrOutput)
}

// Specifies how metastore metadata should be integrated with external services.
type MetadataIntegrationOutput struct{ *pulumi.OutputState }

func (MetadataIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataIntegration)(nil)).Elem()
}

func (o MetadataIntegrationOutput) ToMetadataIntegrationOutput() MetadataIntegrationOutput {
	return o
}

func (o MetadataIntegrationOutput) ToMetadataIntegrationOutputWithContext(ctx context.Context) MetadataIntegrationOutput {
	return o
}

func (o MetadataIntegrationOutput) ToMetadataIntegrationPtrOutput() MetadataIntegrationPtrOutput {
	return o.ToMetadataIntegrationPtrOutputWithContext(context.Background())
}

func (o MetadataIntegrationOutput) ToMetadataIntegrationPtrOutputWithContext(ctx context.Context) MetadataIntegrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetadataIntegration) *MetadataIntegration {
		return &v
	}).(MetadataIntegrationPtrOutput)
}

// Optional. The integration config for the Data Catalog service.
func (o MetadataIntegrationOutput) DataCatalogConfig() DataCatalogConfigPtrOutput {
	return o.ApplyT(func(v MetadataIntegration) *DataCatalogConfig { return v.DataCatalogConfig }).(DataCatalogConfigPtrOutput)
}

type MetadataIntegrationPtrOutput struct{ *pulumi.OutputState }

func (MetadataIntegrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataIntegration)(nil)).Elem()
}

func (o MetadataIntegrationPtrOutput) ToMetadataIntegrationPtrOutput() MetadataIntegrationPtrOutput {
	return o
}

func (o MetadataIntegrationPtrOutput) ToMetadataIntegrationPtrOutputWithContext(ctx context.Context) MetadataIntegrationPtrOutput {
	return o
}

func (o MetadataIntegrationPtrOutput) Elem() MetadataIntegrationOutput {
	return o.ApplyT(func(v *MetadataIntegration) MetadataIntegration {
		if v != nil {
			return *v
		}
		var ret MetadataIntegration
		return ret
	}).(MetadataIntegrationOutput)
}

// Optional. The integration config for the Data Catalog service.
func (o MetadataIntegrationPtrOutput) DataCatalogConfig() DataCatalogConfigPtrOutput {
	return o.ApplyT(func(v *MetadataIntegration) *DataCatalogConfig {
		if v == nil {
			return nil
		}
		return v.DataCatalogConfig
	}).(DataCatalogConfigPtrOutput)
}

// Specifies how metastore metadata should be integrated with external services.
type MetadataIntegrationResponse struct {
	// Optional. The integration config for the Data Catalog service.
	DataCatalogConfig DataCatalogConfigResponse `pulumi:"dataCatalogConfig"`
}

// Specifies how metastore metadata should be integrated with external services.
type MetadataIntegrationResponseOutput struct{ *pulumi.OutputState }

func (MetadataIntegrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataIntegrationResponse)(nil)).Elem()
}

func (o MetadataIntegrationResponseOutput) ToMetadataIntegrationResponseOutput() MetadataIntegrationResponseOutput {
	return o
}

func (o MetadataIntegrationResponseOutput) ToMetadataIntegrationResponseOutputWithContext(ctx context.Context) MetadataIntegrationResponseOutput {
	return o
}

// Optional. The integration config for the Data Catalog service.
func (o MetadataIntegrationResponseOutput) DataCatalogConfig() DataCatalogConfigResponseOutput {
	return o.ApplyT(func(v MetadataIntegrationResponse) DataCatalogConfigResponse { return v.DataCatalogConfig }).(DataCatalogConfigResponseOutput)
}

// The metadata management activities of the metastore service.
type MetadataManagementActivityResponse struct {
	// The latest metadata exports of the metastore service.
	MetadataExports []MetadataExportResponse `pulumi:"metadataExports"`
	// The latest restores of the metastore service.
	Restores []RestoreResponse `pulumi:"restores"`
}

// The metadata management activities of the metastore service.
type MetadataManagementActivityResponseOutput struct{ *pulumi.OutputState }

func (MetadataManagementActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataManagementActivityResponse)(nil)).Elem()
}

func (o MetadataManagementActivityResponseOutput) ToMetadataManagementActivityResponseOutput() MetadataManagementActivityResponseOutput {
	return o
}

func (o MetadataManagementActivityResponseOutput) ToMetadataManagementActivityResponseOutputWithContext(ctx context.Context) MetadataManagementActivityResponseOutput {
	return o
}

// The latest metadata exports of the metastore service.
func (o MetadataManagementActivityResponseOutput) MetadataExports() MetadataExportResponseArrayOutput {
	return o.ApplyT(func(v MetadataManagementActivityResponse) []MetadataExportResponse { return v.MetadataExports }).(MetadataExportResponseArrayOutput)
}

// The latest restores of the metastore service.
func (o MetadataManagementActivityResponseOutput) Restores() RestoreResponseArrayOutput {
	return o.ApplyT(func(v MetadataManagementActivityResponse) []RestoreResponse { return v.Restores }).(RestoreResponseArrayOutput)
}

// Network configuration for the Dataproc Metastore service.
type NetworkConfig struct {
	// Immutable. The consumer-side network configuration for the Dataproc Metastore instance.
	Consumers []Consumer `pulumi:"consumers"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//	NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// Network configuration for the Dataproc Metastore service.
type NetworkConfigArgs struct {
	// Immutable. The consumer-side network configuration for the Dataproc Metastore instance.
	Consumers ConsumerArrayInput `pulumi:"consumers"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput).ToNetworkConfigPtrOutputWithContext(ctx)
}

// NetworkConfigPtrInput is an input type that accepts NetworkConfigArgs, NetworkConfigPtr and NetworkConfigPtrOutput values.
// You can construct a concrete instance of `NetworkConfigPtrInput` via:
//
//	        NetworkConfigArgs{...}
//
//	or:
//
//	        nil
type NetworkConfigPtrInput interface {
	pulumi.Input

	ToNetworkConfigPtrOutput() NetworkConfigPtrOutput
	ToNetworkConfigPtrOutputWithContext(context.Context) NetworkConfigPtrOutput
}

type networkConfigPtrType NetworkConfigArgs

func NetworkConfigPtr(v *NetworkConfigArgs) NetworkConfigPtrInput {
	return (*networkConfigPtrType)(v)
}

func (*networkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigPtrOutput)
}

// Network configuration for the Dataproc Metastore service.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkConfig) *NetworkConfig {
		return &v
	}).(NetworkConfigPtrOutput)
}

// Immutable. The consumer-side network configuration for the Dataproc Metastore instance.
func (o NetworkConfigOutput) Consumers() ConsumerArrayOutput {
	return o.ApplyT(func(v NetworkConfig) []Consumer { return v.Consumers }).(ConsumerArrayOutput)
}

type NetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) Elem() NetworkConfigOutput {
	return o.ApplyT(func(v *NetworkConfig) NetworkConfig {
		if v != nil {
			return *v
		}
		var ret NetworkConfig
		return ret
	}).(NetworkConfigOutput)
}

// Immutable. The consumer-side network configuration for the Dataproc Metastore instance.
func (o NetworkConfigPtrOutput) Consumers() ConsumerArrayOutput {
	return o.ApplyT(func(v *NetworkConfig) []Consumer {
		if v == nil {
			return nil
		}
		return v.Consumers
	}).(ConsumerArrayOutput)
}

// Network configuration for the Dataproc Metastore service.
type NetworkConfigResponse struct {
	// Immutable. The consumer-side network configuration for the Dataproc Metastore instance.
	Consumers []ConsumerResponse `pulumi:"consumers"`
}

// Network configuration for the Dataproc Metastore service.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

// Immutable. The consumer-side network configuration for the Dataproc Metastore instance.
func (o NetworkConfigResponseOutput) Consumers() ConsumerResponseArrayOutput {
	return o.ApplyT(func(v NetworkConfigResponse) []ConsumerResponse { return v.Consumers }).(ConsumerResponseArrayOutput)
}

// The details of a metadata restore operation.
type RestoreResponse struct {
	// The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
	Backup string `pulumi:"backup"`
	// Optional. A Cloud Storage URI specifying where the backup artifacts are stored, in the format gs:///.
	BackupLocation string `pulumi:"backupLocation"`
	// The restore details containing the revision of the service to be restored to, in format of JSON.
	Details string `pulumi:"details"`
	// The time when the restore ended.
	EndTime string `pulumi:"endTime"`
	// The time when the restore started.
	StartTime string `pulumi:"startTime"`
	// The current state of the restore.
	State string `pulumi:"state"`
	// The type of restore.
	Type string `pulumi:"type"`
}

// The details of a metadata restore operation.
type RestoreResponseOutput struct{ *pulumi.OutputState }

func (RestoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreResponse)(nil)).Elem()
}

func (o RestoreResponseOutput) ToRestoreResponseOutput() RestoreResponseOutput {
	return o
}

func (o RestoreResponseOutput) ToRestoreResponseOutputWithContext(ctx context.Context) RestoreResponseOutput {
	return o
}

// The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
func (o RestoreResponseOutput) Backup() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreResponse) string { return v.Backup }).(pulumi.StringOutput)
}

// Optional. A Cloud Storage URI specifying where the backup artifacts are stored, in the format gs:///.
func (o RestoreResponseOutput) BackupLocation() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreResponse) string { return v.BackupLocation }).(pulumi.StringOutput)
}

// The restore details containing the revision of the service to be restored to, in format of JSON.
func (o RestoreResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreResponse) string { return v.Details }).(pulumi.StringOutput)
}

// The time when the restore ended.
func (o RestoreResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// The time when the restore started.
func (o RestoreResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The current state of the restore.
func (o RestoreResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreResponse) string { return v.State }).(pulumi.StringOutput)
}

// The type of restore.
func (o RestoreResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreResponse) string { return v.Type }).(pulumi.StringOutput)
}

type RestoreResponseArrayOutput struct{ *pulumi.OutputState }

func (RestoreResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestoreResponse)(nil)).Elem()
}

func (o RestoreResponseArrayOutput) ToRestoreResponseArrayOutput() RestoreResponseArrayOutput {
	return o
}

func (o RestoreResponseArrayOutput) ToRestoreResponseArrayOutputWithContext(ctx context.Context) RestoreResponseArrayOutput {
	return o
}

func (o RestoreResponseArrayOutput) Index(i pulumi.IntInput) RestoreResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RestoreResponse {
		return vs[0].([]RestoreResponse)[vs[1].(int)]
	}).(RestoreResponseOutput)
}

// Represents the scaling configuration of a metastore service.
type ScalingConfig struct {
	// An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))
	InstanceSize *ScalingConfigInstanceSize `pulumi:"instanceSize"`
	// Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
	ScalingFactor *float64 `pulumi:"scalingFactor"`
}

// ScalingConfigInput is an input type that accepts ScalingConfigArgs and ScalingConfigOutput values.
// You can construct a concrete instance of `ScalingConfigInput` via:
//
//	ScalingConfigArgs{...}
type ScalingConfigInput interface {
	pulumi.Input

	ToScalingConfigOutput() ScalingConfigOutput
	ToScalingConfigOutputWithContext(context.Context) ScalingConfigOutput
}

// Represents the scaling configuration of a metastore service.
type ScalingConfigArgs struct {
	// An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))
	InstanceSize ScalingConfigInstanceSizePtrInput `pulumi:"instanceSize"`
	// Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
	ScalingFactor pulumi.Float64PtrInput `pulumi:"scalingFactor"`
}

func (ScalingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingConfig)(nil)).Elem()
}

func (i ScalingConfigArgs) ToScalingConfigOutput() ScalingConfigOutput {
	return i.ToScalingConfigOutputWithContext(context.Background())
}

func (i ScalingConfigArgs) ToScalingConfigOutputWithContext(ctx context.Context) ScalingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingConfigOutput)
}

func (i ScalingConfigArgs) ToScalingConfigPtrOutput() ScalingConfigPtrOutput {
	return i.ToScalingConfigPtrOutputWithContext(context.Background())
}

func (i ScalingConfigArgs) ToScalingConfigPtrOutputWithContext(ctx context.Context) ScalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingConfigOutput).ToScalingConfigPtrOutputWithContext(ctx)
}

// ScalingConfigPtrInput is an input type that accepts ScalingConfigArgs, ScalingConfigPtr and ScalingConfigPtrOutput values.
// You can construct a concrete instance of `ScalingConfigPtrInput` via:
//
//	        ScalingConfigArgs{...}
//
//	or:
//
//	        nil
type ScalingConfigPtrInput interface {
	pulumi.Input

	ToScalingConfigPtrOutput() ScalingConfigPtrOutput
	ToScalingConfigPtrOutputWithContext(context.Context) ScalingConfigPtrOutput
}

type scalingConfigPtrType ScalingConfigArgs

func ScalingConfigPtr(v *ScalingConfigArgs) ScalingConfigPtrInput {
	return (*scalingConfigPtrType)(v)
}

func (*scalingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScalingConfig)(nil)).Elem()
}

func (i *scalingConfigPtrType) ToScalingConfigPtrOutput() ScalingConfigPtrOutput {
	return i.ToScalingConfigPtrOutputWithContext(context.Background())
}

func (i *scalingConfigPtrType) ToScalingConfigPtrOutputWithContext(ctx context.Context) ScalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingConfigPtrOutput)
}

// Represents the scaling configuration of a metastore service.
type ScalingConfigOutput struct{ *pulumi.OutputState }

func (ScalingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingConfig)(nil)).Elem()
}

func (o ScalingConfigOutput) ToScalingConfigOutput() ScalingConfigOutput {
	return o
}

func (o ScalingConfigOutput) ToScalingConfigOutputWithContext(ctx context.Context) ScalingConfigOutput {
	return o
}

func (o ScalingConfigOutput) ToScalingConfigPtrOutput() ScalingConfigPtrOutput {
	return o.ToScalingConfigPtrOutputWithContext(context.Background())
}

func (o ScalingConfigOutput) ToScalingConfigPtrOutputWithContext(ctx context.Context) ScalingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScalingConfig) *ScalingConfig {
		return &v
	}).(ScalingConfigPtrOutput)
}

// An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))
func (o ScalingConfigOutput) InstanceSize() ScalingConfigInstanceSizePtrOutput {
	return o.ApplyT(func(v ScalingConfig) *ScalingConfigInstanceSize { return v.InstanceSize }).(ScalingConfigInstanceSizePtrOutput)
}

// Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
func (o ScalingConfigOutput) ScalingFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ScalingConfig) *float64 { return v.ScalingFactor }).(pulumi.Float64PtrOutput)
}

type ScalingConfigPtrOutput struct{ *pulumi.OutputState }

func (ScalingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScalingConfig)(nil)).Elem()
}

func (o ScalingConfigPtrOutput) ToScalingConfigPtrOutput() ScalingConfigPtrOutput {
	return o
}

func (o ScalingConfigPtrOutput) ToScalingConfigPtrOutputWithContext(ctx context.Context) ScalingConfigPtrOutput {
	return o
}

func (o ScalingConfigPtrOutput) Elem() ScalingConfigOutput {
	return o.ApplyT(func(v *ScalingConfig) ScalingConfig {
		if v != nil {
			return *v
		}
		var ret ScalingConfig
		return ret
	}).(ScalingConfigOutput)
}

// An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))
func (o ScalingConfigPtrOutput) InstanceSize() ScalingConfigInstanceSizePtrOutput {
	return o.ApplyT(func(v *ScalingConfig) *ScalingConfigInstanceSize {
		if v == nil {
			return nil
		}
		return v.InstanceSize
	}).(ScalingConfigInstanceSizePtrOutput)
}

// Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
func (o ScalingConfigPtrOutput) ScalingFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ScalingConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.ScalingFactor
	}).(pulumi.Float64PtrOutput)
}

// Represents the scaling configuration of a metastore service.
type ScalingConfigResponse struct {
	// An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))
	InstanceSize string `pulumi:"instanceSize"`
	// Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
	ScalingFactor float64 `pulumi:"scalingFactor"`
}

// Represents the scaling configuration of a metastore service.
type ScalingConfigResponseOutput struct{ *pulumi.OutputState }

func (ScalingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingConfigResponse)(nil)).Elem()
}

func (o ScalingConfigResponseOutput) ToScalingConfigResponseOutput() ScalingConfigResponseOutput {
	return o
}

func (o ScalingConfigResponseOutput) ToScalingConfigResponseOutputWithContext(ctx context.Context) ScalingConfigResponseOutput {
	return o
}

// An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))
func (o ScalingConfigResponseOutput) InstanceSize() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingConfigResponse) string { return v.InstanceSize }).(pulumi.StringOutput)
}

// Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
func (o ScalingConfigResponseOutput) ScalingFactor() pulumi.Float64Output {
	return o.ApplyT(func(v ScalingConfigResponse) float64 { return v.ScalingFactor }).(pulumi.Float64Output)
}

// A securely stored value.
type Secret struct {
	// The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
	CloudSecret *string `pulumi:"cloudSecret"`
}

// SecretInput is an input type that accepts SecretArgs and SecretOutput values.
// You can construct a concrete instance of `SecretInput` via:
//
//	SecretArgs{...}
type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(context.Context) SecretOutput
}

// A securely stored value.
type SecretArgs struct {
	// The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
	CloudSecret pulumi.StringPtrInput `pulumi:"cloudSecret"`
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (i SecretArgs) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

func (i SecretArgs) ToSecretPtrOutput() SecretPtrOutput {
	return i.ToSecretPtrOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput).ToSecretPtrOutputWithContext(ctx)
}

// SecretPtrInput is an input type that accepts SecretArgs, SecretPtr and SecretPtrOutput values.
// You can construct a concrete instance of `SecretPtrInput` via:
//
//	        SecretArgs{...}
//
//	or:
//
//	        nil
type SecretPtrInput interface {
	pulumi.Input

	ToSecretPtrOutput() SecretPtrOutput
	ToSecretPtrOutputWithContext(context.Context) SecretPtrOutput
}

type secretPtrType SecretArgs

func SecretPtr(v *SecretArgs) SecretPtrInput {
	return (*secretPtrType)(v)
}

func (*secretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *secretPtrType) ToSecretPtrOutput() SecretPtrOutput {
	return i.ToSecretPtrOutputWithContext(context.Background())
}

func (i *secretPtrType) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretPtrOutput)
}

// A securely stored value.
type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

func (o SecretOutput) ToSecretPtrOutput() SecretPtrOutput {
	return o.ToSecretPtrOutputWithContext(context.Background())
}

func (o SecretOutput) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Secret) *Secret {
		return &v
	}).(SecretPtrOutput)
}

// The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
func (o SecretOutput) CloudSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secret) *string { return v.CloudSecret }).(pulumi.StringPtrOutput)
}

type SecretPtrOutput struct{ *pulumi.OutputState }

func (SecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretPtrOutput) ToSecretPtrOutput() SecretPtrOutput {
	return o
}

func (o SecretPtrOutput) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return o
}

func (o SecretPtrOutput) Elem() SecretOutput {
	return o.ApplyT(func(v *Secret) Secret {
		if v != nil {
			return *v
		}
		var ret Secret
		return ret
	}).(SecretOutput)
}

// The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
func (o SecretPtrOutput) CloudSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) *string {
		if v == nil {
			return nil
		}
		return v.CloudSecret
	}).(pulumi.StringPtrOutput)
}

// A securely stored value.
type SecretResponse struct {
	// The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
	CloudSecret string `pulumi:"cloudSecret"`
}

// A securely stored value.
type SecretResponseOutput struct{ *pulumi.OutputState }

func (SecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretResponse)(nil)).Elem()
}

func (o SecretResponseOutput) ToSecretResponseOutput() SecretResponseOutput {
	return o
}

func (o SecretResponseOutput) ToSecretResponseOutputWithContext(ctx context.Context) SecretResponseOutput {
	return o
}

// The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
func (o SecretResponseOutput) CloudSecret() pulumi.StringOutput {
	return o.ApplyT(func(v SecretResponse) string { return v.CloudSecret }).(pulumi.StringOutput)
}

// A managed metastore service that serves metadata queries.
type ServiceResponse struct {
	// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
	ArtifactGcsUri string `pulumi:"artifactGcsUri"`
	// The time when the metastore service was created.
	CreateTime string `pulumi:"createTime"`
	// Immutable. The database type that the Metastore service stores its data.
	DatabaseType string `pulumi:"databaseType"`
	// Immutable. Information used to configure the Dataproc Metastore service to encrypt customer data at rest. Cannot be updated.
	EncryptionConfig EncryptionConfigResponse `pulumi:"encryptionConfig"`
	// The URI of the endpoint used to access the metastore service.
	EndpointUri string `pulumi:"endpointUri"`
	// Configuration information specific to running Hive metastore software as the metastore service.
	HiveMetastoreConfig HiveMetastoreConfigResponse `pulumi:"hiveMetastoreConfig"`
	// User-defined labels for the metastore service.
	Labels map[string]string `pulumi:"labels"`
	// The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time. Maintenance window is not needed for services with the SPANNER database type.
	MaintenanceWindow MaintenanceWindowResponse `pulumi:"maintenanceWindow"`
	// Optional. The setting that defines how metastore metadata should be integrated with external services and systems.
	MetadataIntegration MetadataIntegrationResponse `pulumi:"metadataIntegration"`
	// The metadata management activities of the metastore service.
	MetadataManagementActivity MetadataManagementActivityResponse `pulumi:"metadataManagementActivity"`
	// Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.
	Name string `pulumi:"name"`
	// Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
	Network string `pulumi:"network"`
	// The configuration specifying the network settings for the Dataproc Metastore service.
	NetworkConfig NetworkConfigResponse `pulumi:"networkConfig"`
	// The TCP port at which the metastore service is reached. Default: 9083.
	Port int `pulumi:"port"`
	// Immutable. The release channel of the service. If unspecified, defaults to STABLE.
	ReleaseChannel string `pulumi:"releaseChannel"`
	// Scaling configuration of the metastore service.
	ScalingConfig ScalingConfigResponse `pulumi:"scalingConfig"`
	// The current state of the metastore service.
	State string `pulumi:"state"`
	// Additional information about the current state of the metastore service, if available.
	StateMessage string `pulumi:"stateMessage"`
	// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
	TelemetryConfig TelemetryConfigResponse `pulumi:"telemetryConfig"`
	// The tier of the service.
	Tier string `pulumi:"tier"`
	// The globally unique resource identifier of the metastore service.
	Uid string `pulumi:"uid"`
	// The time when the metastore service was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

// A managed metastore service that serves metadata queries.
type ServiceResponseOutput struct{ *pulumi.OutputState }

func (ServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResponse)(nil)).Elem()
}

func (o ServiceResponseOutput) ToServiceResponseOutput() ServiceResponseOutput {
	return o
}

func (o ServiceResponseOutput) ToServiceResponseOutputWithContext(ctx context.Context) ServiceResponseOutput {
	return o
}

// A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
func (o ServiceResponseOutput) ArtifactGcsUri() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.ArtifactGcsUri }).(pulumi.StringOutput)
}

// The time when the metastore service was created.
func (o ServiceResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Immutable. The database type that the Metastore service stores its data.
func (o ServiceResponseOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.DatabaseType }).(pulumi.StringOutput)
}

// Immutable. Information used to configure the Dataproc Metastore service to encrypt customer data at rest. Cannot be updated.
func (o ServiceResponseOutput) EncryptionConfig() EncryptionConfigResponseOutput {
	return o.ApplyT(func(v ServiceResponse) EncryptionConfigResponse { return v.EncryptionConfig }).(EncryptionConfigResponseOutput)
}

// The URI of the endpoint used to access the metastore service.
func (o ServiceResponseOutput) EndpointUri() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.EndpointUri }).(pulumi.StringOutput)
}

// Configuration information specific to running Hive metastore software as the metastore service.
func (o ServiceResponseOutput) HiveMetastoreConfig() HiveMetastoreConfigResponseOutput {
	return o.ApplyT(func(v ServiceResponse) HiveMetastoreConfigResponse { return v.HiveMetastoreConfig }).(HiveMetastoreConfigResponseOutput)
}

// User-defined labels for the metastore service.
func (o ServiceResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time. Maintenance window is not needed for services with the SPANNER database type.
func (o ServiceResponseOutput) MaintenanceWindow() MaintenanceWindowResponseOutput {
	return o.ApplyT(func(v ServiceResponse) MaintenanceWindowResponse { return v.MaintenanceWindow }).(MaintenanceWindowResponseOutput)
}

// Optional. The setting that defines how metastore metadata should be integrated with external services and systems.
func (o ServiceResponseOutput) MetadataIntegration() MetadataIntegrationResponseOutput {
	return o.ApplyT(func(v ServiceResponse) MetadataIntegrationResponse { return v.MetadataIntegration }).(MetadataIntegrationResponseOutput)
}

// The metadata management activities of the metastore service.
func (o ServiceResponseOutput) MetadataManagementActivity() MetadataManagementActivityResponseOutput {
	return o.ApplyT(func(v ServiceResponse) MetadataManagementActivityResponse { return v.MetadataManagementActivity }).(MetadataManagementActivityResponseOutput)
}

// Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.
func (o ServiceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
func (o ServiceResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The configuration specifying the network settings for the Dataproc Metastore service.
func (o ServiceResponseOutput) NetworkConfig() NetworkConfigResponseOutput {
	return o.ApplyT(func(v ServiceResponse) NetworkConfigResponse { return v.NetworkConfig }).(NetworkConfigResponseOutput)
}

// The TCP port at which the metastore service is reached. Default: 9083.
func (o ServiceResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Immutable. The release channel of the service. If unspecified, defaults to STABLE.
func (o ServiceResponseOutput) ReleaseChannel() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.ReleaseChannel }).(pulumi.StringOutput)
}

// Scaling configuration of the metastore service.
func (o ServiceResponseOutput) ScalingConfig() ScalingConfigResponseOutput {
	return o.ApplyT(func(v ServiceResponse) ScalingConfigResponse { return v.ScalingConfig }).(ScalingConfigResponseOutput)
}

// The current state of the metastore service.
func (o ServiceResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.State }).(pulumi.StringOutput)
}

// Additional information about the current state of the metastore service, if available.
func (o ServiceResponseOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.StateMessage }).(pulumi.StringOutput)
}

// The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
func (o ServiceResponseOutput) TelemetryConfig() TelemetryConfigResponseOutput {
	return o.ApplyT(func(v ServiceResponse) TelemetryConfigResponse { return v.TelemetryConfig }).(TelemetryConfigResponseOutput)
}

// The tier of the service.
func (o ServiceResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.Tier }).(pulumi.StringOutput)
}

// The globally unique resource identifier of the metastore service.
func (o ServiceResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.Uid }).(pulumi.StringOutput)
}

// The time when the metastore service was last updated.
func (o ServiceResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Telemetry Configuration for the Dataproc Metastore service.
type TelemetryConfig struct {
	// The output format of the Dataproc Metastore service's logs.
	LogFormat *TelemetryConfigLogFormat `pulumi:"logFormat"`
}

// TelemetryConfigInput is an input type that accepts TelemetryConfigArgs and TelemetryConfigOutput values.
// You can construct a concrete instance of `TelemetryConfigInput` via:
//
//	TelemetryConfigArgs{...}
type TelemetryConfigInput interface {
	pulumi.Input

	ToTelemetryConfigOutput() TelemetryConfigOutput
	ToTelemetryConfigOutputWithContext(context.Context) TelemetryConfigOutput
}

// Telemetry Configuration for the Dataproc Metastore service.
type TelemetryConfigArgs struct {
	// The output format of the Dataproc Metastore service's logs.
	LogFormat TelemetryConfigLogFormatPtrInput `pulumi:"logFormat"`
}

func (TelemetryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetryConfig)(nil)).Elem()
}

func (i TelemetryConfigArgs) ToTelemetryConfigOutput() TelemetryConfigOutput {
	return i.ToTelemetryConfigOutputWithContext(context.Background())
}

func (i TelemetryConfigArgs) ToTelemetryConfigOutputWithContext(ctx context.Context) TelemetryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryConfigOutput)
}

func (i TelemetryConfigArgs) ToTelemetryConfigPtrOutput() TelemetryConfigPtrOutput {
	return i.ToTelemetryConfigPtrOutputWithContext(context.Background())
}

func (i TelemetryConfigArgs) ToTelemetryConfigPtrOutputWithContext(ctx context.Context) TelemetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryConfigOutput).ToTelemetryConfigPtrOutputWithContext(ctx)
}

// TelemetryConfigPtrInput is an input type that accepts TelemetryConfigArgs, TelemetryConfigPtr and TelemetryConfigPtrOutput values.
// You can construct a concrete instance of `TelemetryConfigPtrInput` via:
//
//	        TelemetryConfigArgs{...}
//
//	or:
//
//	        nil
type TelemetryConfigPtrInput interface {
	pulumi.Input

	ToTelemetryConfigPtrOutput() TelemetryConfigPtrOutput
	ToTelemetryConfigPtrOutputWithContext(context.Context) TelemetryConfigPtrOutput
}

type telemetryConfigPtrType TelemetryConfigArgs

func TelemetryConfigPtr(v *TelemetryConfigArgs) TelemetryConfigPtrInput {
	return (*telemetryConfigPtrType)(v)
}

func (*telemetryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetryConfig)(nil)).Elem()
}

func (i *telemetryConfigPtrType) ToTelemetryConfigPtrOutput() TelemetryConfigPtrOutput {
	return i.ToTelemetryConfigPtrOutputWithContext(context.Background())
}

func (i *telemetryConfigPtrType) ToTelemetryConfigPtrOutputWithContext(ctx context.Context) TelemetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryConfigPtrOutput)
}

// Telemetry Configuration for the Dataproc Metastore service.
type TelemetryConfigOutput struct{ *pulumi.OutputState }

func (TelemetryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetryConfig)(nil)).Elem()
}

func (o TelemetryConfigOutput) ToTelemetryConfigOutput() TelemetryConfigOutput {
	return o
}

func (o TelemetryConfigOutput) ToTelemetryConfigOutputWithContext(ctx context.Context) TelemetryConfigOutput {
	return o
}

func (o TelemetryConfigOutput) ToTelemetryConfigPtrOutput() TelemetryConfigPtrOutput {
	return o.ToTelemetryConfigPtrOutputWithContext(context.Background())
}

func (o TelemetryConfigOutput) ToTelemetryConfigPtrOutputWithContext(ctx context.Context) TelemetryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetryConfig) *TelemetryConfig {
		return &v
	}).(TelemetryConfigPtrOutput)
}

// The output format of the Dataproc Metastore service's logs.
func (o TelemetryConfigOutput) LogFormat() TelemetryConfigLogFormatPtrOutput {
	return o.ApplyT(func(v TelemetryConfig) *TelemetryConfigLogFormat { return v.LogFormat }).(TelemetryConfigLogFormatPtrOutput)
}

type TelemetryConfigPtrOutput struct{ *pulumi.OutputState }

func (TelemetryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetryConfig)(nil)).Elem()
}

func (o TelemetryConfigPtrOutput) ToTelemetryConfigPtrOutput() TelemetryConfigPtrOutput {
	return o
}

func (o TelemetryConfigPtrOutput) ToTelemetryConfigPtrOutputWithContext(ctx context.Context) TelemetryConfigPtrOutput {
	return o
}

func (o TelemetryConfigPtrOutput) Elem() TelemetryConfigOutput {
	return o.ApplyT(func(v *TelemetryConfig) TelemetryConfig {
		if v != nil {
			return *v
		}
		var ret TelemetryConfig
		return ret
	}).(TelemetryConfigOutput)
}

// The output format of the Dataproc Metastore service's logs.
func (o TelemetryConfigPtrOutput) LogFormat() TelemetryConfigLogFormatPtrOutput {
	return o.ApplyT(func(v *TelemetryConfig) *TelemetryConfigLogFormat {
		if v == nil {
			return nil
		}
		return v.LogFormat
	}).(TelemetryConfigLogFormatPtrOutput)
}

// Telemetry Configuration for the Dataproc Metastore service.
type TelemetryConfigResponse struct {
	// The output format of the Dataproc Metastore service's logs.
	LogFormat string `pulumi:"logFormat"`
}

// Telemetry Configuration for the Dataproc Metastore service.
type TelemetryConfigResponseOutput struct{ *pulumi.OutputState }

func (TelemetryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetryConfigResponse)(nil)).Elem()
}

func (o TelemetryConfigResponseOutput) ToTelemetryConfigResponseOutput() TelemetryConfigResponseOutput {
	return o
}

func (o TelemetryConfigResponseOutput) ToTelemetryConfigResponseOutputWithContext(ctx context.Context) TelemetryConfigResponseOutput {
	return o
}

// The output format of the Dataproc Metastore service's logs.
func (o TelemetryConfigResponseOutput) LogFormat() pulumi.StringOutput {
	return o.ApplyT(func(v TelemetryConfigResponse) string { return v.LogFormat }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuxiliaryVersionConfigInput)(nil)).Elem(), AuxiliaryVersionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuxiliaryVersionConfigPtrInput)(nil)).Elem(), AuxiliaryVersionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendMetastoreInput)(nil)).Elem(), BackendMetastoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendMetastorePtrInput)(nil)).Elem(), BackendMetastoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerInput)(nil)).Elem(), ConsumerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerArrayInput)(nil)).Elem(), ConsumerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogConfigInput)(nil)).Elem(), DataCatalogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCatalogConfigPtrInput)(nil)).Elem(), DataCatalogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDumpInput)(nil)).Elem(), DatabaseDumpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseDumpPtrInput)(nil)).Elem(), DatabaseDumpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigPtrInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HiveMetastoreConfigInput)(nil)).Elem(), HiveMetastoreConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HiveMetastoreConfigPtrInput)(nil)).Elem(), HiveMetastoreConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KerberosConfigInput)(nil)).Elem(), KerberosConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KerberosConfigPtrInput)(nil)).Elem(), KerberosConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowInput)(nil)).Elem(), MaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowPtrInput)(nil)).Elem(), MaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataIntegrationInput)(nil)).Elem(), MetadataIntegrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataIntegrationPtrInput)(nil)).Elem(), MetadataIntegrationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigPtrInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingConfigInput)(nil)).Elem(), ScalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingConfigPtrInput)(nil)).Elem(), ScalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), SecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretPtrInput)(nil)).Elem(), SecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryConfigInput)(nil)).Elem(), TelemetryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryConfigPtrInput)(nil)).Elem(), TelemetryConfigArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuxiliaryVersionConfigOutput{})
	pulumi.RegisterOutputType(AuxiliaryVersionConfigPtrOutput{})
	pulumi.RegisterOutputType(AuxiliaryVersionConfigResponseOutput{})
	pulumi.RegisterOutputType(BackendMetastoreOutput{})
	pulumi.RegisterOutputType(BackendMetastorePtrOutput{})
	pulumi.RegisterOutputType(BackendMetastoreResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ConsumerOutput{})
	pulumi.RegisterOutputType(ConsumerArrayOutput{})
	pulumi.RegisterOutputType(ConsumerResponseOutput{})
	pulumi.RegisterOutputType(ConsumerResponseArrayOutput{})
	pulumi.RegisterOutputType(DataCatalogConfigOutput{})
	pulumi.RegisterOutputType(DataCatalogConfigPtrOutput{})
	pulumi.RegisterOutputType(DataCatalogConfigResponseOutput{})
	pulumi.RegisterOutputType(DatabaseDumpOutput{})
	pulumi.RegisterOutputType(DatabaseDumpPtrOutput{})
	pulumi.RegisterOutputType(DatabaseDumpResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(HiveMetastoreConfigOutput{})
	pulumi.RegisterOutputType(HiveMetastoreConfigPtrOutput{})
	pulumi.RegisterOutputType(HiveMetastoreConfigResponseOutput{})
	pulumi.RegisterOutputType(KerberosConfigOutput{})
	pulumi.RegisterOutputType(KerberosConfigPtrOutput{})
	pulumi.RegisterOutputType(KerberosConfigResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(MetadataExportResponseOutput{})
	pulumi.RegisterOutputType(MetadataExportResponseArrayOutput{})
	pulumi.RegisterOutputType(MetadataIntegrationOutput{})
	pulumi.RegisterOutputType(MetadataIntegrationPtrOutput{})
	pulumi.RegisterOutputType(MetadataIntegrationResponseOutput{})
	pulumi.RegisterOutputType(MetadataManagementActivityResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(RestoreResponseOutput{})
	pulumi.RegisterOutputType(RestoreResponseArrayOutput{})
	pulumi.RegisterOutputType(ScalingConfigOutput{})
	pulumi.RegisterOutputType(ScalingConfigPtrOutput{})
	pulumi.RegisterOutputType(ScalingConfigResponseOutput{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretPtrOutput{})
	pulumi.RegisterOutputType(SecretResponseOutput{})
	pulumi.RegisterOutputType(ServiceResponseOutput{})
	pulumi.RegisterOutputType(TelemetryConfigOutput{})
	pulumi.RegisterOutputType(TelemetryConfigPtrOutput{})
	pulumi.RegisterOutputType(TelemetryConfigResponseOutput{})
}
