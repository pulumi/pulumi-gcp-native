// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the details of a single federation.
func LookupFederation(ctx *pulumi.Context, args *LookupFederationArgs, opts ...pulumi.InvokeOption) (*LookupFederationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFederationResult
	err := ctx.Invoke("google-native:metastore/v1alpha:getFederation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupFederationArgs struct {
	FederationId string  `pulumi:"federationId"`
	Location     string  `pulumi:"location"`
	Project      *string `pulumi:"project"`
}

type LookupFederationResult struct {
	// A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.
	BackendMetastores BackendMetastoreResponse `pulumi:"backendMetastores"`
	// The time when the metastore federation was created.
	CreateTime string `pulumi:"createTime"`
	// The federation endpoint.
	EndpointUri string `pulumi:"endpointUri"`
	// User-defined labels for the metastore federation.
	Labels map[string]string `pulumi:"labels"`
	// Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
	Name string `pulumi:"name"`
	// The current state of the federation.
	State string `pulumi:"state"`
	// Additional information about the current state of the metastore federation, if available.
	StateMessage string `pulumi:"stateMessage"`
	// The globally unique resource identifier of the metastore federation.
	Uid string `pulumi:"uid"`
	// The time when the metastore federation was last updated.
	UpdateTime string `pulumi:"updateTime"`
	// Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.
	Version string `pulumi:"version"`
}

func LookupFederationOutput(ctx *pulumi.Context, args LookupFederationOutputArgs, opts ...pulumi.InvokeOption) LookupFederationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFederationResult, error) {
			args := v.(LookupFederationArgs)
			r, err := LookupFederation(ctx, &args, opts...)
			var s LookupFederationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFederationResultOutput)
}

type LookupFederationOutputArgs struct {
	FederationId pulumi.StringInput    `pulumi:"federationId"`
	Location     pulumi.StringInput    `pulumi:"location"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupFederationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFederationArgs)(nil)).Elem()
}

type LookupFederationResultOutput struct{ *pulumi.OutputState }

func (LookupFederationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFederationResult)(nil)).Elem()
}

func (o LookupFederationResultOutput) ToLookupFederationResultOutput() LookupFederationResultOutput {
	return o
}

func (o LookupFederationResultOutput) ToLookupFederationResultOutputWithContext(ctx context.Context) LookupFederationResultOutput {
	return o
}

// A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.
func (o LookupFederationResultOutput) BackendMetastores() BackendMetastoreResponseOutput {
	return o.ApplyT(func(v LookupFederationResult) BackendMetastoreResponse { return v.BackendMetastores }).(BackendMetastoreResponseOutput)
}

// The time when the metastore federation was created.
func (o LookupFederationResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFederationResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The federation endpoint.
func (o LookupFederationResultOutput) EndpointUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFederationResult) string { return v.EndpointUri }).(pulumi.StringOutput)
}

// User-defined labels for the metastore federation.
func (o LookupFederationResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupFederationResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
func (o LookupFederationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFederationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The current state of the federation.
func (o LookupFederationResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFederationResult) string { return v.State }).(pulumi.StringOutput)
}

// Additional information about the current state of the metastore federation, if available.
func (o LookupFederationResultOutput) StateMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFederationResult) string { return v.StateMessage }).(pulumi.StringOutput)
}

// The globally unique resource identifier of the metastore federation.
func (o LookupFederationResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFederationResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The time when the metastore federation was last updated.
func (o LookupFederationResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFederationResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.
func (o LookupFederationResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFederationResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFederationResultOutput{})
}
