// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fetches a single Repository.
func LookupRepository(ctx *pulumi.Context, args *LookupRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryResult, error) {
	var rv LookupRepositoryResult
	err := ctx.Invoke("google-native:dataform/v1beta1:getRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRepositoryArgs struct {
	Location     string  `pulumi:"location"`
	Project      *string `pulumi:"project"`
	RepositoryId string  `pulumi:"repositoryId"`
}

type LookupRepositoryResult struct {
	// Optional. If set, configures this repository to be linked to a Git remote.
	GitRemoteSettings GitRemoteSettingsResponse `pulumi:"gitRemoteSettings"`
	// Optional. Input only. The initial commit file contents. Represented as map from file path to contents. The path is the full file path to commit including filename, from repository root.
	InitialCommitFileContents map[string]string `pulumi:"initialCommitFileContents"`
	// Optional. Input only. An optional initial commit metadata for the Repository. The Repository must not have a value for `git_remote_settings.url`.
	InitialCommitMetadata CommitMetadataResponse `pulumi:"initialCommitMetadata"`
	// Optional. Repository user labels.
	Labels map[string]string `pulumi:"labels"`
	// The repository's name.
	Name string `pulumi:"name"`
	// Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format.
	NpmrcEnvironmentVariablesSecretVersion string `pulumi:"npmrcEnvironmentVariablesSecretVersion"`
	// Optional. If set, fields of `workspace_compilation_overrides` override the default compilation settings that are specified in dataform.json when creating workspace-scoped compilation results. See documentation for `WorkspaceCompilationOverrides` for more information.
	WorkspaceCompilationOverrides WorkspaceCompilationOverridesResponse `pulumi:"workspaceCompilationOverrides"`
}

func LookupRepositoryOutput(ctx *pulumi.Context, args LookupRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRepositoryResult, error) {
			args := v.(LookupRepositoryArgs)
			r, err := LookupRepository(ctx, &args, opts...)
			var s LookupRepositoryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRepositoryResultOutput)
}

type LookupRepositoryOutputArgs struct {
	Location     pulumi.StringInput    `pulumi:"location"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
	RepositoryId pulumi.StringInput    `pulumi:"repositoryId"`
}

func (LookupRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryArgs)(nil)).Elem()
}

type LookupRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryResult)(nil)).Elem()
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutput() LookupRepositoryResultOutput {
	return o
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutputWithContext(ctx context.Context) LookupRepositoryResultOutput {
	return o
}

// Optional. If set, configures this repository to be linked to a Git remote.
func (o LookupRepositoryResultOutput) GitRemoteSettings() GitRemoteSettingsResponseOutput {
	return o.ApplyT(func(v LookupRepositoryResult) GitRemoteSettingsResponse { return v.GitRemoteSettings }).(GitRemoteSettingsResponseOutput)
}

// Optional. Input only. The initial commit file contents. Represented as map from file path to contents. The path is the full file path to commit including filename, from repository root.
func (o LookupRepositoryResultOutput) InitialCommitFileContents() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRepositoryResult) map[string]string { return v.InitialCommitFileContents }).(pulumi.StringMapOutput)
}

// Optional. Input only. An optional initial commit metadata for the Repository. The Repository must not have a value for `git_remote_settings.url`.
func (o LookupRepositoryResultOutput) InitialCommitMetadata() CommitMetadataResponseOutput {
	return o.ApplyT(func(v LookupRepositoryResult) CommitMetadataResponse { return v.InitialCommitMetadata }).(CommitMetadataResponseOutput)
}

// Optional. Repository user labels.
func (o LookupRepositoryResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRepositoryResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The repository's name.
func (o LookupRepositoryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format.
func (o LookupRepositoryResultOutput) NpmrcEnvironmentVariablesSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.NpmrcEnvironmentVariablesSecretVersion }).(pulumi.StringOutput)
}

// Optional. If set, fields of `workspace_compilation_overrides` override the default compilation settings that are specified in dataform.json when creating workspace-scoped compilation results. See documentation for `WorkspaceCompilationOverrides` for more information.
func (o LookupRepositoryResultOutput) WorkspaceCompilationOverrides() WorkspaceCompilationOverridesResponseOutput {
	return o.ApplyT(func(v LookupRepositoryResult) WorkspaceCompilationOverridesResponse {
		return v.WorkspaceCompilationOverrides
	}).(WorkspaceCompilationOverridesResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryResultOutput{})
}
