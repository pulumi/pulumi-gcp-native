// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new ReleaseConfig in a given Repository.
// Auto-naming is currently not supported for this resource.
type ReleaseConfig struct {
	pulumi.CustomResourceState

	// Optional. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
	CodeCompilationConfig CodeCompilationConfigResponseOutput `pulumi:"codeCompilationConfig"`
	// Optional. Optional schedule (in cron format) for automatic creation of compilation results.
	CronSchedule pulumi.StringOutput `pulumi:"cronSchedule"`
	// Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
	GitCommitish pulumi.StringOutput `pulumi:"gitCommitish"`
	Location     pulumi.StringOutput `pulumi:"location"`
	// The release config's name.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Records of the 10 most recent scheduled release attempts. Updated whenever automatic creation of a compilation result is triggered by cron_schedule.
	RecentScheduledReleaseRecords ScheduledReleaseRecordResponseArrayOutput `pulumi:"recentScheduledReleaseRecords"`
	// Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is created from this release config, or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.
	ReleaseCompilationResult pulumi.StringOutput `pulumi:"releaseCompilationResult"`
	// Required. The ID to use for the release config, which will become the final component of the release config's resource name.
	ReleaseConfigId pulumi.StringOutput `pulumi:"releaseConfigId"`
	RepositoryId    pulumi.StringOutput `pulumi:"repositoryId"`
	// Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
}

// NewReleaseConfig registers a new resource with the given unique name, arguments, and options.
func NewReleaseConfig(ctx *pulumi.Context,
	name string, args *ReleaseConfigArgs, opts ...pulumi.ResourceOption) (*ReleaseConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GitCommitish == nil {
		return nil, errors.New("invalid value for required argument 'GitCommitish'")
	}
	if args.ReleaseConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ReleaseConfigId'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"releaseConfigId",
		"repositoryId",
	})
	opts = append(opts, replaceOnChanges)
	var resource ReleaseConfig
	err := ctx.RegisterResource("google-native:dataform/v1beta1:ReleaseConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReleaseConfig gets an existing ReleaseConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReleaseConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReleaseConfigState, opts ...pulumi.ResourceOption) (*ReleaseConfig, error) {
	var resource ReleaseConfig
	err := ctx.ReadResource("google-native:dataform/v1beta1:ReleaseConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReleaseConfig resources.
type releaseConfigState struct {
}

type ReleaseConfigState struct {
}

func (ReleaseConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseConfigState)(nil)).Elem()
}

type releaseConfigArgs struct {
	// Optional. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
	CodeCompilationConfig *CodeCompilationConfig `pulumi:"codeCompilationConfig"`
	// Optional. Optional schedule (in cron format) for automatic creation of compilation results.
	CronSchedule *string `pulumi:"cronSchedule"`
	// Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
	GitCommitish string  `pulumi:"gitCommitish"`
	Location     *string `pulumi:"location"`
	Project      *string `pulumi:"project"`
	// Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is created from this release config, or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.
	ReleaseCompilationResult *string `pulumi:"releaseCompilationResult"`
	// Required. The ID to use for the release config, which will become the final component of the release config's resource name.
	ReleaseConfigId string `pulumi:"releaseConfigId"`
	RepositoryId    string `pulumi:"repositoryId"`
	// Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
	TimeZone *string `pulumi:"timeZone"`
}

// The set of arguments for constructing a ReleaseConfig resource.
type ReleaseConfigArgs struct {
	// Optional. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
	CodeCompilationConfig CodeCompilationConfigPtrInput
	// Optional. Optional schedule (in cron format) for automatic creation of compilation results.
	CronSchedule pulumi.StringPtrInput
	// Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
	GitCommitish pulumi.StringInput
	Location     pulumi.StringPtrInput
	Project      pulumi.StringPtrInput
	// Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is created from this release config, or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.
	ReleaseCompilationResult pulumi.StringPtrInput
	// Required. The ID to use for the release config, which will become the final component of the release config's resource name.
	ReleaseConfigId pulumi.StringInput
	RepositoryId    pulumi.StringInput
	// Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
	TimeZone pulumi.StringPtrInput
}

func (ReleaseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseConfigArgs)(nil)).Elem()
}

type ReleaseConfigInput interface {
	pulumi.Input

	ToReleaseConfigOutput() ReleaseConfigOutput
	ToReleaseConfigOutputWithContext(ctx context.Context) ReleaseConfigOutput
}

func (*ReleaseConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseConfig)(nil)).Elem()
}

func (i *ReleaseConfig) ToReleaseConfigOutput() ReleaseConfigOutput {
	return i.ToReleaseConfigOutputWithContext(context.Background())
}

func (i *ReleaseConfig) ToReleaseConfigOutputWithContext(ctx context.Context) ReleaseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseConfigOutput)
}

type ReleaseConfigOutput struct{ *pulumi.OutputState }

func (ReleaseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseConfig)(nil)).Elem()
}

func (o ReleaseConfigOutput) ToReleaseConfigOutput() ReleaseConfigOutput {
	return o
}

func (o ReleaseConfigOutput) ToReleaseConfigOutputWithContext(ctx context.Context) ReleaseConfigOutput {
	return o
}

// Optional. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
func (o ReleaseConfigOutput) CodeCompilationConfig() CodeCompilationConfigResponseOutput {
	return o.ApplyT(func(v *ReleaseConfig) CodeCompilationConfigResponseOutput { return v.CodeCompilationConfig }).(CodeCompilationConfigResponseOutput)
}

// Optional. Optional schedule (in cron format) for automatic creation of compilation results.
func (o ReleaseConfigOutput) CronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseConfig) pulumi.StringOutput { return v.CronSchedule }).(pulumi.StringOutput)
}

// Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
func (o ReleaseConfigOutput) GitCommitish() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseConfig) pulumi.StringOutput { return v.GitCommitish }).(pulumi.StringOutput)
}

func (o ReleaseConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The release config's name.
func (o ReleaseConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReleaseConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Records of the 10 most recent scheduled release attempts. Updated whenever automatic creation of a compilation result is triggered by cron_schedule.
func (o ReleaseConfigOutput) RecentScheduledReleaseRecords() ScheduledReleaseRecordResponseArrayOutput {
	return o.ApplyT(func(v *ReleaseConfig) ScheduledReleaseRecordResponseArrayOutput {
		return v.RecentScheduledReleaseRecords
	}).(ScheduledReleaseRecordResponseArrayOutput)
}

// Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is created from this release config, or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.
func (o ReleaseConfigOutput) ReleaseCompilationResult() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseConfig) pulumi.StringOutput { return v.ReleaseCompilationResult }).(pulumi.StringOutput)
}

// Required. The ID to use for the release config, which will become the final component of the release config's resource name.
func (o ReleaseConfigOutput) ReleaseConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseConfig) pulumi.StringOutput { return v.ReleaseConfigId }).(pulumi.StringOutput)
}

func (o ReleaseConfigOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseConfig) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

// Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.
func (o ReleaseConfigOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseConfig) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseConfigInput)(nil)).Elem(), &ReleaseConfig{})
	pulumi.RegisterOutputType(ReleaseConfigOutput{})
}
