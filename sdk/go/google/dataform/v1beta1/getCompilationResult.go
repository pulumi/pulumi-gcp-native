// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Fetches a single CompilationResult.
func LookupCompilationResult(ctx *pulumi.Context, args *LookupCompilationResultArgs, opts ...pulumi.InvokeOption) (*LookupCompilationResultResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCompilationResultResult
	err := ctx.Invoke("google-native:dataform/v1beta1:getCompilationResult", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCompilationResultArgs struct {
	CompilationResultId string  `pulumi:"compilationResultId"`
	Location            string  `pulumi:"location"`
	Project             *string `pulumi:"project"`
	RepositoryId        string  `pulumi:"repositoryId"`
}

type LookupCompilationResultResult struct {
	// Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
	CodeCompilationConfig CodeCompilationConfigResponse `pulumi:"codeCompilationConfig"`
	// Errors encountered during project compilation.
	CompilationErrors []CompilationErrorResponse `pulumi:"compilationErrors"`
	// The version of `@dataform/core` that was used for compilation.
	DataformCoreVersion string `pulumi:"dataformCoreVersion"`
	// Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
	GitCommitish string `pulumi:"gitCommitish"`
	// The compilation result's name.
	Name string `pulumi:"name"`
	// Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.
	ReleaseConfig string `pulumi:"releaseConfig"`
	// The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.
	ResolvedGitCommitSha string `pulumi:"resolvedGitCommitSha"`
	// Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.
	Workspace string `pulumi:"workspace"`
}

func LookupCompilationResultOutput(ctx *pulumi.Context, args LookupCompilationResultOutputArgs, opts ...pulumi.InvokeOption) LookupCompilationResultResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCompilationResultResult, error) {
			args := v.(LookupCompilationResultArgs)
			r, err := LookupCompilationResult(ctx, &args, opts...)
			var s LookupCompilationResultResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCompilationResultResultOutput)
}

type LookupCompilationResultOutputArgs struct {
	CompilationResultId pulumi.StringInput    `pulumi:"compilationResultId"`
	Location            pulumi.StringInput    `pulumi:"location"`
	Project             pulumi.StringPtrInput `pulumi:"project"`
	RepositoryId        pulumi.StringInput    `pulumi:"repositoryId"`
}

func (LookupCompilationResultOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCompilationResultArgs)(nil)).Elem()
}

type LookupCompilationResultResultOutput struct{ *pulumi.OutputState }

func (LookupCompilationResultResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCompilationResultResult)(nil)).Elem()
}

func (o LookupCompilationResultResultOutput) ToLookupCompilationResultResultOutput() LookupCompilationResultResultOutput {
	return o
}

func (o LookupCompilationResultResultOutput) ToLookupCompilationResultResultOutputWithContext(ctx context.Context) LookupCompilationResultResultOutput {
	return o
}

func (o LookupCompilationResultResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCompilationResultResult] {
	return pulumix.Output[LookupCompilationResultResult]{
		OutputState: o.OutputState,
	}
}

// Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.
func (o LookupCompilationResultResultOutput) CodeCompilationConfig() CodeCompilationConfigResponseOutput {
	return o.ApplyT(func(v LookupCompilationResultResult) CodeCompilationConfigResponse { return v.CodeCompilationConfig }).(CodeCompilationConfigResponseOutput)
}

// Errors encountered during project compilation.
func (o LookupCompilationResultResultOutput) CompilationErrors() CompilationErrorResponseArrayOutput {
	return o.ApplyT(func(v LookupCompilationResultResult) []CompilationErrorResponse { return v.CompilationErrors }).(CompilationErrorResponseArrayOutput)
}

// The version of `@dataform/core` that was used for compilation.
func (o LookupCompilationResultResultOutput) DataformCoreVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCompilationResultResult) string { return v.DataformCoreVersion }).(pulumi.StringOutput)
}

// Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`
func (o LookupCompilationResultResultOutput) GitCommitish() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCompilationResultResult) string { return v.GitCommitish }).(pulumi.StringOutput)
}

// The compilation result's name.
func (o LookupCompilationResultResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCompilationResultResult) string { return v.Name }).(pulumi.StringOutput)
}

// Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.
func (o LookupCompilationResultResultOutput) ReleaseConfig() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCompilationResultResult) string { return v.ReleaseConfig }).(pulumi.StringOutput)
}

// The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.
func (o LookupCompilationResultResultOutput) ResolvedGitCommitSha() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCompilationResultResult) string { return v.ResolvedGitCommitSha }).(pulumi.StringOutput)
}

// Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.
func (o LookupCompilationResultResultOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCompilationResultResult) string { return v.Workspace }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCompilationResultResultOutput{})
}
