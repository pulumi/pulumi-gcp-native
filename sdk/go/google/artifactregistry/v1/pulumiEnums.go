// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// One of the publicly available Docker repositories supported by Artifact Registry.
type DockerRepositoryPublicRepository string

const (
	// Unspecified repository.
	DockerRepositoryPublicRepositoryPublicRepositoryUnspecified = DockerRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED")
	// Docker Hub.
	DockerRepositoryPublicRepositoryDockerHub = DockerRepositoryPublicRepository("DOCKER_HUB")
)

func (DockerRepositoryPublicRepository) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepositoryPublicRepository)(nil)).Elem()
}

func (e DockerRepositoryPublicRepository) ToDockerRepositoryPublicRepositoryOutput() DockerRepositoryPublicRepositoryOutput {
	return pulumi.ToOutput(e).(DockerRepositoryPublicRepositoryOutput)
}

func (e DockerRepositoryPublicRepository) ToDockerRepositoryPublicRepositoryOutputWithContext(ctx context.Context) DockerRepositoryPublicRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DockerRepositoryPublicRepositoryOutput)
}

func (e DockerRepositoryPublicRepository) ToDockerRepositoryPublicRepositoryPtrOutput() DockerRepositoryPublicRepositoryPtrOutput {
	return e.ToDockerRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (e DockerRepositoryPublicRepository) ToDockerRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPublicRepositoryPtrOutput {
	return DockerRepositoryPublicRepository(e).ToDockerRepositoryPublicRepositoryOutputWithContext(ctx).ToDockerRepositoryPublicRepositoryPtrOutputWithContext(ctx)
}

func (e DockerRepositoryPublicRepository) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DockerRepositoryPublicRepository) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DockerRepositoryPublicRepository) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DockerRepositoryPublicRepository) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DockerRepositoryPublicRepositoryOutput struct{ *pulumi.OutputState }

func (DockerRepositoryPublicRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepositoryPublicRepository)(nil)).Elem()
}

func (o DockerRepositoryPublicRepositoryOutput) ToDockerRepositoryPublicRepositoryOutput() DockerRepositoryPublicRepositoryOutput {
	return o
}

func (o DockerRepositoryPublicRepositoryOutput) ToDockerRepositoryPublicRepositoryOutputWithContext(ctx context.Context) DockerRepositoryPublicRepositoryOutput {
	return o
}

func (o DockerRepositoryPublicRepositoryOutput) ToDockerRepositoryPublicRepositoryPtrOutput() DockerRepositoryPublicRepositoryPtrOutput {
	return o.ToDockerRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (o DockerRepositoryPublicRepositoryOutput) ToDockerRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPublicRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerRepositoryPublicRepository) *DockerRepositoryPublicRepository {
		return &v
	}).(DockerRepositoryPublicRepositoryPtrOutput)
}

func (o DockerRepositoryPublicRepositoryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DockerRepositoryPublicRepositoryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DockerRepositoryPublicRepository) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DockerRepositoryPublicRepositoryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DockerRepositoryPublicRepositoryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DockerRepositoryPublicRepository) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DockerRepositoryPublicRepositoryPtrOutput struct{ *pulumi.OutputState }

func (DockerRepositoryPublicRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerRepositoryPublicRepository)(nil)).Elem()
}

func (o DockerRepositoryPublicRepositoryPtrOutput) ToDockerRepositoryPublicRepositoryPtrOutput() DockerRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o DockerRepositoryPublicRepositoryPtrOutput) ToDockerRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o DockerRepositoryPublicRepositoryPtrOutput) Elem() DockerRepositoryPublicRepositoryOutput {
	return o.ApplyT(func(v *DockerRepositoryPublicRepository) DockerRepositoryPublicRepository {
		if v != nil {
			return *v
		}
		var ret DockerRepositoryPublicRepository
		return ret
	}).(DockerRepositoryPublicRepositoryOutput)
}

func (o DockerRepositoryPublicRepositoryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DockerRepositoryPublicRepositoryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DockerRepositoryPublicRepository) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DockerRepositoryPublicRepositoryInput is an input type that accepts DockerRepositoryPublicRepositoryArgs and DockerRepositoryPublicRepositoryOutput values.
// You can construct a concrete instance of `DockerRepositoryPublicRepositoryInput` via:
//
//	DockerRepositoryPublicRepositoryArgs{...}
type DockerRepositoryPublicRepositoryInput interface {
	pulumi.Input

	ToDockerRepositoryPublicRepositoryOutput() DockerRepositoryPublicRepositoryOutput
	ToDockerRepositoryPublicRepositoryOutputWithContext(context.Context) DockerRepositoryPublicRepositoryOutput
}

var dockerRepositoryPublicRepositoryPtrType = reflect.TypeOf((**DockerRepositoryPublicRepository)(nil)).Elem()

type DockerRepositoryPublicRepositoryPtrInput interface {
	pulumi.Input

	ToDockerRepositoryPublicRepositoryPtrOutput() DockerRepositoryPublicRepositoryPtrOutput
	ToDockerRepositoryPublicRepositoryPtrOutputWithContext(context.Context) DockerRepositoryPublicRepositoryPtrOutput
}

type dockerRepositoryPublicRepositoryPtr string

func DockerRepositoryPublicRepositoryPtr(v string) DockerRepositoryPublicRepositoryPtrInput {
	return (*dockerRepositoryPublicRepositoryPtr)(&v)
}

func (*dockerRepositoryPublicRepositoryPtr) ElementType() reflect.Type {
	return dockerRepositoryPublicRepositoryPtrType
}

func (in *dockerRepositoryPublicRepositoryPtr) ToDockerRepositoryPublicRepositoryPtrOutput() DockerRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutput(in).(DockerRepositoryPublicRepositoryPtrOutput)
}

func (in *dockerRepositoryPublicRepositoryPtr) ToDockerRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DockerRepositoryPublicRepositoryPtrOutput)
}

// Version policy defines the versions that the registry will accept.
type MavenRepositoryConfigVersionPolicy string

const (
	// VERSION_POLICY_UNSPECIFIED - the version policy is not defined. When the version policy is not defined, no validation is performed for the versions.
	MavenRepositoryConfigVersionPolicyVersionPolicyUnspecified = MavenRepositoryConfigVersionPolicy("VERSION_POLICY_UNSPECIFIED")
	// RELEASE - repository will accept only Release versions.
	MavenRepositoryConfigVersionPolicyRelease = MavenRepositoryConfigVersionPolicy("RELEASE")
	// SNAPSHOT - repository will accept only Snapshot versions.
	MavenRepositoryConfigVersionPolicySnapshot = MavenRepositoryConfigVersionPolicy("SNAPSHOT")
)

func (MavenRepositoryConfigVersionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryConfigVersionPolicy)(nil)).Elem()
}

func (e MavenRepositoryConfigVersionPolicy) ToMavenRepositoryConfigVersionPolicyOutput() MavenRepositoryConfigVersionPolicyOutput {
	return pulumi.ToOutput(e).(MavenRepositoryConfigVersionPolicyOutput)
}

func (e MavenRepositoryConfigVersionPolicy) ToMavenRepositoryConfigVersionPolicyOutputWithContext(ctx context.Context) MavenRepositoryConfigVersionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MavenRepositoryConfigVersionPolicyOutput)
}

func (e MavenRepositoryConfigVersionPolicy) ToMavenRepositoryConfigVersionPolicyPtrOutput() MavenRepositoryConfigVersionPolicyPtrOutput {
	return e.ToMavenRepositoryConfigVersionPolicyPtrOutputWithContext(context.Background())
}

func (e MavenRepositoryConfigVersionPolicy) ToMavenRepositoryConfigVersionPolicyPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigVersionPolicyPtrOutput {
	return MavenRepositoryConfigVersionPolicy(e).ToMavenRepositoryConfigVersionPolicyOutputWithContext(ctx).ToMavenRepositoryConfigVersionPolicyPtrOutputWithContext(ctx)
}

func (e MavenRepositoryConfigVersionPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MavenRepositoryConfigVersionPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MavenRepositoryConfigVersionPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MavenRepositoryConfigVersionPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MavenRepositoryConfigVersionPolicyOutput struct{ *pulumi.OutputState }

func (MavenRepositoryConfigVersionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryConfigVersionPolicy)(nil)).Elem()
}

func (o MavenRepositoryConfigVersionPolicyOutput) ToMavenRepositoryConfigVersionPolicyOutput() MavenRepositoryConfigVersionPolicyOutput {
	return o
}

func (o MavenRepositoryConfigVersionPolicyOutput) ToMavenRepositoryConfigVersionPolicyOutputWithContext(ctx context.Context) MavenRepositoryConfigVersionPolicyOutput {
	return o
}

func (o MavenRepositoryConfigVersionPolicyOutput) ToMavenRepositoryConfigVersionPolicyPtrOutput() MavenRepositoryConfigVersionPolicyPtrOutput {
	return o.ToMavenRepositoryConfigVersionPolicyPtrOutputWithContext(context.Background())
}

func (o MavenRepositoryConfigVersionPolicyOutput) ToMavenRepositoryConfigVersionPolicyPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigVersionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MavenRepositoryConfigVersionPolicy) *MavenRepositoryConfigVersionPolicy {
		return &v
	}).(MavenRepositoryConfigVersionPolicyPtrOutput)
}

func (o MavenRepositoryConfigVersionPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MavenRepositoryConfigVersionPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MavenRepositoryConfigVersionPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MavenRepositoryConfigVersionPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MavenRepositoryConfigVersionPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MavenRepositoryConfigVersionPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MavenRepositoryConfigVersionPolicyPtrOutput struct{ *pulumi.OutputState }

func (MavenRepositoryConfigVersionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MavenRepositoryConfigVersionPolicy)(nil)).Elem()
}

func (o MavenRepositoryConfigVersionPolicyPtrOutput) ToMavenRepositoryConfigVersionPolicyPtrOutput() MavenRepositoryConfigVersionPolicyPtrOutput {
	return o
}

func (o MavenRepositoryConfigVersionPolicyPtrOutput) ToMavenRepositoryConfigVersionPolicyPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigVersionPolicyPtrOutput {
	return o
}

func (o MavenRepositoryConfigVersionPolicyPtrOutput) Elem() MavenRepositoryConfigVersionPolicyOutput {
	return o.ApplyT(func(v *MavenRepositoryConfigVersionPolicy) MavenRepositoryConfigVersionPolicy {
		if v != nil {
			return *v
		}
		var ret MavenRepositoryConfigVersionPolicy
		return ret
	}).(MavenRepositoryConfigVersionPolicyOutput)
}

func (o MavenRepositoryConfigVersionPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MavenRepositoryConfigVersionPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MavenRepositoryConfigVersionPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MavenRepositoryConfigVersionPolicyInput is an input type that accepts MavenRepositoryConfigVersionPolicyArgs and MavenRepositoryConfigVersionPolicyOutput values.
// You can construct a concrete instance of `MavenRepositoryConfigVersionPolicyInput` via:
//
//	MavenRepositoryConfigVersionPolicyArgs{...}
type MavenRepositoryConfigVersionPolicyInput interface {
	pulumi.Input

	ToMavenRepositoryConfigVersionPolicyOutput() MavenRepositoryConfigVersionPolicyOutput
	ToMavenRepositoryConfigVersionPolicyOutputWithContext(context.Context) MavenRepositoryConfigVersionPolicyOutput
}

var mavenRepositoryConfigVersionPolicyPtrType = reflect.TypeOf((**MavenRepositoryConfigVersionPolicy)(nil)).Elem()

type MavenRepositoryConfigVersionPolicyPtrInput interface {
	pulumi.Input

	ToMavenRepositoryConfigVersionPolicyPtrOutput() MavenRepositoryConfigVersionPolicyPtrOutput
	ToMavenRepositoryConfigVersionPolicyPtrOutputWithContext(context.Context) MavenRepositoryConfigVersionPolicyPtrOutput
}

type mavenRepositoryConfigVersionPolicyPtr string

func MavenRepositoryConfigVersionPolicyPtr(v string) MavenRepositoryConfigVersionPolicyPtrInput {
	return (*mavenRepositoryConfigVersionPolicyPtr)(&v)
}

func (*mavenRepositoryConfigVersionPolicyPtr) ElementType() reflect.Type {
	return mavenRepositoryConfigVersionPolicyPtrType
}

func (in *mavenRepositoryConfigVersionPolicyPtr) ToMavenRepositoryConfigVersionPolicyPtrOutput() MavenRepositoryConfigVersionPolicyPtrOutput {
	return pulumi.ToOutput(in).(MavenRepositoryConfigVersionPolicyPtrOutput)
}

func (in *mavenRepositoryConfigVersionPolicyPtr) ToMavenRepositoryConfigVersionPolicyPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigVersionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MavenRepositoryConfigVersionPolicyPtrOutput)
}

// One of the publicly available Maven repositories supported by Artifact Registry.
type MavenRepositoryPublicRepository string

const (
	// Unspecified repository.
	MavenRepositoryPublicRepositoryPublicRepositoryUnspecified = MavenRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED")
	// Maven Central.
	MavenRepositoryPublicRepositoryMavenCentral = MavenRepositoryPublicRepository("MAVEN_CENTRAL")
)

func (MavenRepositoryPublicRepository) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryPublicRepository)(nil)).Elem()
}

func (e MavenRepositoryPublicRepository) ToMavenRepositoryPublicRepositoryOutput() MavenRepositoryPublicRepositoryOutput {
	return pulumi.ToOutput(e).(MavenRepositoryPublicRepositoryOutput)
}

func (e MavenRepositoryPublicRepository) ToMavenRepositoryPublicRepositoryOutputWithContext(ctx context.Context) MavenRepositoryPublicRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MavenRepositoryPublicRepositoryOutput)
}

func (e MavenRepositoryPublicRepository) ToMavenRepositoryPublicRepositoryPtrOutput() MavenRepositoryPublicRepositoryPtrOutput {
	return e.ToMavenRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (e MavenRepositoryPublicRepository) ToMavenRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPublicRepositoryPtrOutput {
	return MavenRepositoryPublicRepository(e).ToMavenRepositoryPublicRepositoryOutputWithContext(ctx).ToMavenRepositoryPublicRepositoryPtrOutputWithContext(ctx)
}

func (e MavenRepositoryPublicRepository) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MavenRepositoryPublicRepository) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MavenRepositoryPublicRepository) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MavenRepositoryPublicRepository) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MavenRepositoryPublicRepositoryOutput struct{ *pulumi.OutputState }

func (MavenRepositoryPublicRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryPublicRepository)(nil)).Elem()
}

func (o MavenRepositoryPublicRepositoryOutput) ToMavenRepositoryPublicRepositoryOutput() MavenRepositoryPublicRepositoryOutput {
	return o
}

func (o MavenRepositoryPublicRepositoryOutput) ToMavenRepositoryPublicRepositoryOutputWithContext(ctx context.Context) MavenRepositoryPublicRepositoryOutput {
	return o
}

func (o MavenRepositoryPublicRepositoryOutput) ToMavenRepositoryPublicRepositoryPtrOutput() MavenRepositoryPublicRepositoryPtrOutput {
	return o.ToMavenRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (o MavenRepositoryPublicRepositoryOutput) ToMavenRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPublicRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MavenRepositoryPublicRepository) *MavenRepositoryPublicRepository {
		return &v
	}).(MavenRepositoryPublicRepositoryPtrOutput)
}

func (o MavenRepositoryPublicRepositoryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MavenRepositoryPublicRepositoryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MavenRepositoryPublicRepository) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MavenRepositoryPublicRepositoryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MavenRepositoryPublicRepositoryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MavenRepositoryPublicRepository) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MavenRepositoryPublicRepositoryPtrOutput struct{ *pulumi.OutputState }

func (MavenRepositoryPublicRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MavenRepositoryPublicRepository)(nil)).Elem()
}

func (o MavenRepositoryPublicRepositoryPtrOutput) ToMavenRepositoryPublicRepositoryPtrOutput() MavenRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o MavenRepositoryPublicRepositoryPtrOutput) ToMavenRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o MavenRepositoryPublicRepositoryPtrOutput) Elem() MavenRepositoryPublicRepositoryOutput {
	return o.ApplyT(func(v *MavenRepositoryPublicRepository) MavenRepositoryPublicRepository {
		if v != nil {
			return *v
		}
		var ret MavenRepositoryPublicRepository
		return ret
	}).(MavenRepositoryPublicRepositoryOutput)
}

func (o MavenRepositoryPublicRepositoryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MavenRepositoryPublicRepositoryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MavenRepositoryPublicRepository) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MavenRepositoryPublicRepositoryInput is an input type that accepts MavenRepositoryPublicRepositoryArgs and MavenRepositoryPublicRepositoryOutput values.
// You can construct a concrete instance of `MavenRepositoryPublicRepositoryInput` via:
//
//	MavenRepositoryPublicRepositoryArgs{...}
type MavenRepositoryPublicRepositoryInput interface {
	pulumi.Input

	ToMavenRepositoryPublicRepositoryOutput() MavenRepositoryPublicRepositoryOutput
	ToMavenRepositoryPublicRepositoryOutputWithContext(context.Context) MavenRepositoryPublicRepositoryOutput
}

var mavenRepositoryPublicRepositoryPtrType = reflect.TypeOf((**MavenRepositoryPublicRepository)(nil)).Elem()

type MavenRepositoryPublicRepositoryPtrInput interface {
	pulumi.Input

	ToMavenRepositoryPublicRepositoryPtrOutput() MavenRepositoryPublicRepositoryPtrOutput
	ToMavenRepositoryPublicRepositoryPtrOutputWithContext(context.Context) MavenRepositoryPublicRepositoryPtrOutput
}

type mavenRepositoryPublicRepositoryPtr string

func MavenRepositoryPublicRepositoryPtr(v string) MavenRepositoryPublicRepositoryPtrInput {
	return (*mavenRepositoryPublicRepositoryPtr)(&v)
}

func (*mavenRepositoryPublicRepositoryPtr) ElementType() reflect.Type {
	return mavenRepositoryPublicRepositoryPtrType
}

func (in *mavenRepositoryPublicRepositoryPtr) ToMavenRepositoryPublicRepositoryPtrOutput() MavenRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutput(in).(MavenRepositoryPublicRepositoryPtrOutput)
}

func (in *mavenRepositoryPublicRepositoryPtr) ToMavenRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MavenRepositoryPublicRepositoryPtrOutput)
}

// One of the publicly available Npm repositories supported by Artifact Registry.
type NpmRepositoryPublicRepository string

const (
	// Unspecified repository.
	NpmRepositoryPublicRepositoryPublicRepositoryUnspecified = NpmRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED")
	// npmjs.
	NpmRepositoryPublicRepositoryNpmjs = NpmRepositoryPublicRepository("NPMJS")
)

func (NpmRepositoryPublicRepository) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmRepositoryPublicRepository)(nil)).Elem()
}

func (e NpmRepositoryPublicRepository) ToNpmRepositoryPublicRepositoryOutput() NpmRepositoryPublicRepositoryOutput {
	return pulumi.ToOutput(e).(NpmRepositoryPublicRepositoryOutput)
}

func (e NpmRepositoryPublicRepository) ToNpmRepositoryPublicRepositoryOutputWithContext(ctx context.Context) NpmRepositoryPublicRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NpmRepositoryPublicRepositoryOutput)
}

func (e NpmRepositoryPublicRepository) ToNpmRepositoryPublicRepositoryPtrOutput() NpmRepositoryPublicRepositoryPtrOutput {
	return e.ToNpmRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (e NpmRepositoryPublicRepository) ToNpmRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPublicRepositoryPtrOutput {
	return NpmRepositoryPublicRepository(e).ToNpmRepositoryPublicRepositoryOutputWithContext(ctx).ToNpmRepositoryPublicRepositoryPtrOutputWithContext(ctx)
}

func (e NpmRepositoryPublicRepository) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NpmRepositoryPublicRepository) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NpmRepositoryPublicRepository) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NpmRepositoryPublicRepository) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NpmRepositoryPublicRepositoryOutput struct{ *pulumi.OutputState }

func (NpmRepositoryPublicRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmRepositoryPublicRepository)(nil)).Elem()
}

func (o NpmRepositoryPublicRepositoryOutput) ToNpmRepositoryPublicRepositoryOutput() NpmRepositoryPublicRepositoryOutput {
	return o
}

func (o NpmRepositoryPublicRepositoryOutput) ToNpmRepositoryPublicRepositoryOutputWithContext(ctx context.Context) NpmRepositoryPublicRepositoryOutput {
	return o
}

func (o NpmRepositoryPublicRepositoryOutput) ToNpmRepositoryPublicRepositoryPtrOutput() NpmRepositoryPublicRepositoryPtrOutput {
	return o.ToNpmRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (o NpmRepositoryPublicRepositoryOutput) ToNpmRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPublicRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NpmRepositoryPublicRepository) *NpmRepositoryPublicRepository {
		return &v
	}).(NpmRepositoryPublicRepositoryPtrOutput)
}

func (o NpmRepositoryPublicRepositoryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NpmRepositoryPublicRepositoryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NpmRepositoryPublicRepository) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NpmRepositoryPublicRepositoryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NpmRepositoryPublicRepositoryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NpmRepositoryPublicRepository) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NpmRepositoryPublicRepositoryPtrOutput struct{ *pulumi.OutputState }

func (NpmRepositoryPublicRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NpmRepositoryPublicRepository)(nil)).Elem()
}

func (o NpmRepositoryPublicRepositoryPtrOutput) ToNpmRepositoryPublicRepositoryPtrOutput() NpmRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o NpmRepositoryPublicRepositoryPtrOutput) ToNpmRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o NpmRepositoryPublicRepositoryPtrOutput) Elem() NpmRepositoryPublicRepositoryOutput {
	return o.ApplyT(func(v *NpmRepositoryPublicRepository) NpmRepositoryPublicRepository {
		if v != nil {
			return *v
		}
		var ret NpmRepositoryPublicRepository
		return ret
	}).(NpmRepositoryPublicRepositoryOutput)
}

func (o NpmRepositoryPublicRepositoryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NpmRepositoryPublicRepositoryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NpmRepositoryPublicRepository) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NpmRepositoryPublicRepositoryInput is an input type that accepts NpmRepositoryPublicRepositoryArgs and NpmRepositoryPublicRepositoryOutput values.
// You can construct a concrete instance of `NpmRepositoryPublicRepositoryInput` via:
//
//	NpmRepositoryPublicRepositoryArgs{...}
type NpmRepositoryPublicRepositoryInput interface {
	pulumi.Input

	ToNpmRepositoryPublicRepositoryOutput() NpmRepositoryPublicRepositoryOutput
	ToNpmRepositoryPublicRepositoryOutputWithContext(context.Context) NpmRepositoryPublicRepositoryOutput
}

var npmRepositoryPublicRepositoryPtrType = reflect.TypeOf((**NpmRepositoryPublicRepository)(nil)).Elem()

type NpmRepositoryPublicRepositoryPtrInput interface {
	pulumi.Input

	ToNpmRepositoryPublicRepositoryPtrOutput() NpmRepositoryPublicRepositoryPtrOutput
	ToNpmRepositoryPublicRepositoryPtrOutputWithContext(context.Context) NpmRepositoryPublicRepositoryPtrOutput
}

type npmRepositoryPublicRepositoryPtr string

func NpmRepositoryPublicRepositoryPtr(v string) NpmRepositoryPublicRepositoryPtrInput {
	return (*npmRepositoryPublicRepositoryPtr)(&v)
}

func (*npmRepositoryPublicRepositoryPtr) ElementType() reflect.Type {
	return npmRepositoryPublicRepositoryPtrType
}

func (in *npmRepositoryPublicRepositoryPtr) ToNpmRepositoryPublicRepositoryPtrOutput() NpmRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutput(in).(NpmRepositoryPublicRepositoryPtrOutput)
}

func (in *npmRepositoryPublicRepositoryPtr) ToNpmRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NpmRepositoryPublicRepositoryPtrOutput)
}

// One of the publicly available Python repositories supported by Artifact Registry.
type PythonRepositoryPublicRepository string

const (
	// Unspecified repository.
	PythonRepositoryPublicRepositoryPublicRepositoryUnspecified = PythonRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED")
	// PyPI.
	PythonRepositoryPublicRepositoryPypi = PythonRepositoryPublicRepository("PYPI")
)

func (PythonRepositoryPublicRepository) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonRepositoryPublicRepository)(nil)).Elem()
}

func (e PythonRepositoryPublicRepository) ToPythonRepositoryPublicRepositoryOutput() PythonRepositoryPublicRepositoryOutput {
	return pulumi.ToOutput(e).(PythonRepositoryPublicRepositoryOutput)
}

func (e PythonRepositoryPublicRepository) ToPythonRepositoryPublicRepositoryOutputWithContext(ctx context.Context) PythonRepositoryPublicRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PythonRepositoryPublicRepositoryOutput)
}

func (e PythonRepositoryPublicRepository) ToPythonRepositoryPublicRepositoryPtrOutput() PythonRepositoryPublicRepositoryPtrOutput {
	return e.ToPythonRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (e PythonRepositoryPublicRepository) ToPythonRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPublicRepositoryPtrOutput {
	return PythonRepositoryPublicRepository(e).ToPythonRepositoryPublicRepositoryOutputWithContext(ctx).ToPythonRepositoryPublicRepositoryPtrOutputWithContext(ctx)
}

func (e PythonRepositoryPublicRepository) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PythonRepositoryPublicRepository) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PythonRepositoryPublicRepository) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PythonRepositoryPublicRepository) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PythonRepositoryPublicRepositoryOutput struct{ *pulumi.OutputState }

func (PythonRepositoryPublicRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonRepositoryPublicRepository)(nil)).Elem()
}

func (o PythonRepositoryPublicRepositoryOutput) ToPythonRepositoryPublicRepositoryOutput() PythonRepositoryPublicRepositoryOutput {
	return o
}

func (o PythonRepositoryPublicRepositoryOutput) ToPythonRepositoryPublicRepositoryOutputWithContext(ctx context.Context) PythonRepositoryPublicRepositoryOutput {
	return o
}

func (o PythonRepositoryPublicRepositoryOutput) ToPythonRepositoryPublicRepositoryPtrOutput() PythonRepositoryPublicRepositoryPtrOutput {
	return o.ToPythonRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (o PythonRepositoryPublicRepositoryOutput) ToPythonRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPublicRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PythonRepositoryPublicRepository) *PythonRepositoryPublicRepository {
		return &v
	}).(PythonRepositoryPublicRepositoryPtrOutput)
}

func (o PythonRepositoryPublicRepositoryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PythonRepositoryPublicRepositoryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PythonRepositoryPublicRepository) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PythonRepositoryPublicRepositoryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PythonRepositoryPublicRepositoryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PythonRepositoryPublicRepository) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PythonRepositoryPublicRepositoryPtrOutput struct{ *pulumi.OutputState }

func (PythonRepositoryPublicRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PythonRepositoryPublicRepository)(nil)).Elem()
}

func (o PythonRepositoryPublicRepositoryPtrOutput) ToPythonRepositoryPublicRepositoryPtrOutput() PythonRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o PythonRepositoryPublicRepositoryPtrOutput) ToPythonRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o PythonRepositoryPublicRepositoryPtrOutput) Elem() PythonRepositoryPublicRepositoryOutput {
	return o.ApplyT(func(v *PythonRepositoryPublicRepository) PythonRepositoryPublicRepository {
		if v != nil {
			return *v
		}
		var ret PythonRepositoryPublicRepository
		return ret
	}).(PythonRepositoryPublicRepositoryOutput)
}

func (o PythonRepositoryPublicRepositoryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PythonRepositoryPublicRepositoryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PythonRepositoryPublicRepository) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PythonRepositoryPublicRepositoryInput is an input type that accepts PythonRepositoryPublicRepositoryArgs and PythonRepositoryPublicRepositoryOutput values.
// You can construct a concrete instance of `PythonRepositoryPublicRepositoryInput` via:
//
//	PythonRepositoryPublicRepositoryArgs{...}
type PythonRepositoryPublicRepositoryInput interface {
	pulumi.Input

	ToPythonRepositoryPublicRepositoryOutput() PythonRepositoryPublicRepositoryOutput
	ToPythonRepositoryPublicRepositoryOutputWithContext(context.Context) PythonRepositoryPublicRepositoryOutput
}

var pythonRepositoryPublicRepositoryPtrType = reflect.TypeOf((**PythonRepositoryPublicRepository)(nil)).Elem()

type PythonRepositoryPublicRepositoryPtrInput interface {
	pulumi.Input

	ToPythonRepositoryPublicRepositoryPtrOutput() PythonRepositoryPublicRepositoryPtrOutput
	ToPythonRepositoryPublicRepositoryPtrOutputWithContext(context.Context) PythonRepositoryPublicRepositoryPtrOutput
}

type pythonRepositoryPublicRepositoryPtr string

func PythonRepositoryPublicRepositoryPtr(v string) PythonRepositoryPublicRepositoryPtrInput {
	return (*pythonRepositoryPublicRepositoryPtr)(&v)
}

func (*pythonRepositoryPublicRepositoryPtr) ElementType() reflect.Type {
	return pythonRepositoryPublicRepositoryPtrType
}

func (in *pythonRepositoryPublicRepositoryPtr) ToPythonRepositoryPublicRepositoryPtrOutput() PythonRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutput(in).(PythonRepositoryPublicRepositoryPtrOutput)
}

func (in *pythonRepositoryPublicRepositoryPtr) ToPythonRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PythonRepositoryPublicRepositoryPtrOutput)
}

// The format of packages that are stored in the repository.
type RepositoryFormat string

const (
	// Unspecified package format.
	RepositoryFormatFormatUnspecified = RepositoryFormat("FORMAT_UNSPECIFIED")
	// Docker package format.
	RepositoryFormatDocker = RepositoryFormat("DOCKER")
	// Maven package format.
	RepositoryFormatMaven = RepositoryFormat("MAVEN")
	// NPM package format.
	RepositoryFormatNpm = RepositoryFormat("NPM")
	// APT package format.
	RepositoryFormatApt = RepositoryFormat("APT")
	// YUM package format.
	RepositoryFormatYum = RepositoryFormat("YUM")
	// Python package format.
	RepositoryFormatPython = RepositoryFormat("PYTHON")
	// Kubeflow Pipelines package format.
	RepositoryFormatKfp = RepositoryFormat("KFP")
)

func (RepositoryFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryFormat)(nil)).Elem()
}

func (e RepositoryFormat) ToRepositoryFormatOutput() RepositoryFormatOutput {
	return pulumi.ToOutput(e).(RepositoryFormatOutput)
}

func (e RepositoryFormat) ToRepositoryFormatOutputWithContext(ctx context.Context) RepositoryFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RepositoryFormatOutput)
}

func (e RepositoryFormat) ToRepositoryFormatPtrOutput() RepositoryFormatPtrOutput {
	return e.ToRepositoryFormatPtrOutputWithContext(context.Background())
}

func (e RepositoryFormat) ToRepositoryFormatPtrOutputWithContext(ctx context.Context) RepositoryFormatPtrOutput {
	return RepositoryFormat(e).ToRepositoryFormatOutputWithContext(ctx).ToRepositoryFormatPtrOutputWithContext(ctx)
}

func (e RepositoryFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RepositoryFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RepositoryFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RepositoryFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RepositoryFormatOutput struct{ *pulumi.OutputState }

func (RepositoryFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryFormat)(nil)).Elem()
}

func (o RepositoryFormatOutput) ToRepositoryFormatOutput() RepositoryFormatOutput {
	return o
}

func (o RepositoryFormatOutput) ToRepositoryFormatOutputWithContext(ctx context.Context) RepositoryFormatOutput {
	return o
}

func (o RepositoryFormatOutput) ToRepositoryFormatPtrOutput() RepositoryFormatPtrOutput {
	return o.ToRepositoryFormatPtrOutputWithContext(context.Background())
}

func (o RepositoryFormatOutput) ToRepositoryFormatPtrOutputWithContext(ctx context.Context) RepositoryFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryFormat) *RepositoryFormat {
		return &v
	}).(RepositoryFormatPtrOutput)
}

func (o RepositoryFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RepositoryFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RepositoryFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RepositoryFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RepositoryFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RepositoryFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RepositoryFormatPtrOutput struct{ *pulumi.OutputState }

func (RepositoryFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryFormat)(nil)).Elem()
}

func (o RepositoryFormatPtrOutput) ToRepositoryFormatPtrOutput() RepositoryFormatPtrOutput {
	return o
}

func (o RepositoryFormatPtrOutput) ToRepositoryFormatPtrOutputWithContext(ctx context.Context) RepositoryFormatPtrOutput {
	return o
}

func (o RepositoryFormatPtrOutput) Elem() RepositoryFormatOutput {
	return o.ApplyT(func(v *RepositoryFormat) RepositoryFormat {
		if v != nil {
			return *v
		}
		var ret RepositoryFormat
		return ret
	}).(RepositoryFormatOutput)
}

func (o RepositoryFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RepositoryFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RepositoryFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RepositoryFormatInput is an input type that accepts RepositoryFormatArgs and RepositoryFormatOutput values.
// You can construct a concrete instance of `RepositoryFormatInput` via:
//
//	RepositoryFormatArgs{...}
type RepositoryFormatInput interface {
	pulumi.Input

	ToRepositoryFormatOutput() RepositoryFormatOutput
	ToRepositoryFormatOutputWithContext(context.Context) RepositoryFormatOutput
}

var repositoryFormatPtrType = reflect.TypeOf((**RepositoryFormat)(nil)).Elem()

type RepositoryFormatPtrInput interface {
	pulumi.Input

	ToRepositoryFormatPtrOutput() RepositoryFormatPtrOutput
	ToRepositoryFormatPtrOutputWithContext(context.Context) RepositoryFormatPtrOutput
}

type repositoryFormatPtr string

func RepositoryFormatPtr(v string) RepositoryFormatPtrInput {
	return (*repositoryFormatPtr)(&v)
}

func (*repositoryFormatPtr) ElementType() reflect.Type {
	return repositoryFormatPtrType
}

func (in *repositoryFormatPtr) ToRepositoryFormatPtrOutput() RepositoryFormatPtrOutput {
	return pulumi.ToOutput(in).(RepositoryFormatPtrOutput)
}

func (in *repositoryFormatPtr) ToRepositoryFormatPtrOutputWithContext(ctx context.Context) RepositoryFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RepositoryFormatPtrOutput)
}

// The mode of the repository.
type RepositoryMode string

const (
	// Unspecified mode.
	RepositoryModeModeUnspecified = RepositoryMode("MODE_UNSPECIFIED")
	// A standard repository storing artifacts.
	RepositoryModeStandardRepository = RepositoryMode("STANDARD_REPOSITORY")
	// A virtual repository to serve artifacts from one or more sources.
	RepositoryModeVirtualRepository = RepositoryMode("VIRTUAL_REPOSITORY")
	// A remote repository to serve artifacts from a remote source.
	RepositoryModeRemoteRepository = RepositoryMode("REMOTE_REPOSITORY")
)

func (RepositoryMode) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryMode)(nil)).Elem()
}

func (e RepositoryMode) ToRepositoryModeOutput() RepositoryModeOutput {
	return pulumi.ToOutput(e).(RepositoryModeOutput)
}

func (e RepositoryMode) ToRepositoryModeOutputWithContext(ctx context.Context) RepositoryModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RepositoryModeOutput)
}

func (e RepositoryMode) ToRepositoryModePtrOutput() RepositoryModePtrOutput {
	return e.ToRepositoryModePtrOutputWithContext(context.Background())
}

func (e RepositoryMode) ToRepositoryModePtrOutputWithContext(ctx context.Context) RepositoryModePtrOutput {
	return RepositoryMode(e).ToRepositoryModeOutputWithContext(ctx).ToRepositoryModePtrOutputWithContext(ctx)
}

func (e RepositoryMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RepositoryMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RepositoryMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RepositoryMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RepositoryModeOutput struct{ *pulumi.OutputState }

func (RepositoryModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryMode)(nil)).Elem()
}

func (o RepositoryModeOutput) ToRepositoryModeOutput() RepositoryModeOutput {
	return o
}

func (o RepositoryModeOutput) ToRepositoryModeOutputWithContext(ctx context.Context) RepositoryModeOutput {
	return o
}

func (o RepositoryModeOutput) ToRepositoryModePtrOutput() RepositoryModePtrOutput {
	return o.ToRepositoryModePtrOutputWithContext(context.Background())
}

func (o RepositoryModeOutput) ToRepositoryModePtrOutputWithContext(ctx context.Context) RepositoryModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryMode) *RepositoryMode {
		return &v
	}).(RepositoryModePtrOutput)
}

func (o RepositoryModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RepositoryModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RepositoryMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RepositoryModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RepositoryModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RepositoryMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RepositoryModePtrOutput struct{ *pulumi.OutputState }

func (RepositoryModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryMode)(nil)).Elem()
}

func (o RepositoryModePtrOutput) ToRepositoryModePtrOutput() RepositoryModePtrOutput {
	return o
}

func (o RepositoryModePtrOutput) ToRepositoryModePtrOutputWithContext(ctx context.Context) RepositoryModePtrOutput {
	return o
}

func (o RepositoryModePtrOutput) Elem() RepositoryModeOutput {
	return o.ApplyT(func(v *RepositoryMode) RepositoryMode {
		if v != nil {
			return *v
		}
		var ret RepositoryMode
		return ret
	}).(RepositoryModeOutput)
}

func (o RepositoryModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RepositoryModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RepositoryMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RepositoryModeInput is an input type that accepts RepositoryModeArgs and RepositoryModeOutput values.
// You can construct a concrete instance of `RepositoryModeInput` via:
//
//	RepositoryModeArgs{...}
type RepositoryModeInput interface {
	pulumi.Input

	ToRepositoryModeOutput() RepositoryModeOutput
	ToRepositoryModeOutputWithContext(context.Context) RepositoryModeOutput
}

var repositoryModePtrType = reflect.TypeOf((**RepositoryMode)(nil)).Elem()

type RepositoryModePtrInput interface {
	pulumi.Input

	ToRepositoryModePtrOutput() RepositoryModePtrOutput
	ToRepositoryModePtrOutputWithContext(context.Context) RepositoryModePtrOutput
}

type repositoryModePtr string

func RepositoryModePtr(v string) RepositoryModePtrInput {
	return (*repositoryModePtr)(&v)
}

func (*repositoryModePtr) ElementType() reflect.Type {
	return repositoryModePtrType
}

func (in *repositoryModePtr) ToRepositoryModePtrOutput() RepositoryModePtrOutput {
	return pulumi.ToOutput(in).(RepositoryModePtrOutput)
}

func (in *repositoryModePtr) ToRepositoryModePtrOutputWithContext(ctx context.Context) RepositoryModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RepositoryModePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DockerRepositoryPublicRepositoryInput)(nil)).Elem(), DockerRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DockerRepositoryPublicRepositoryPtrInput)(nil)).Elem(), DockerRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryConfigVersionPolicyInput)(nil)).Elem(), MavenRepositoryConfigVersionPolicy("VERSION_POLICY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryConfigVersionPolicyPtrInput)(nil)).Elem(), MavenRepositoryConfigVersionPolicy("VERSION_POLICY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryPublicRepositoryInput)(nil)).Elem(), MavenRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryPublicRepositoryPtrInput)(nil)).Elem(), MavenRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*NpmRepositoryPublicRepositoryInput)(nil)).Elem(), NpmRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*NpmRepositoryPublicRepositoryPtrInput)(nil)).Elem(), NpmRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PythonRepositoryPublicRepositoryInput)(nil)).Elem(), PythonRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PythonRepositoryPublicRepositoryPtrInput)(nil)).Elem(), PythonRepositoryPublicRepository("PUBLIC_REPOSITORY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryFormatInput)(nil)).Elem(), RepositoryFormat("FORMAT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryFormatPtrInput)(nil)).Elem(), RepositoryFormat("FORMAT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryModeInput)(nil)).Elem(), RepositoryMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryModePtrInput)(nil)).Elem(), RepositoryMode("MODE_UNSPECIFIED"))
	pulumi.RegisterOutputType(DockerRepositoryPublicRepositoryOutput{})
	pulumi.RegisterOutputType(DockerRepositoryPublicRepositoryPtrOutput{})
	pulumi.RegisterOutputType(MavenRepositoryConfigVersionPolicyOutput{})
	pulumi.RegisterOutputType(MavenRepositoryConfigVersionPolicyPtrOutput{})
	pulumi.RegisterOutputType(MavenRepositoryPublicRepositoryOutput{})
	pulumi.RegisterOutputType(MavenRepositoryPublicRepositoryPtrOutput{})
	pulumi.RegisterOutputType(NpmRepositoryPublicRepositoryOutput{})
	pulumi.RegisterOutputType(NpmRepositoryPublicRepositoryPtrOutput{})
	pulumi.RegisterOutputType(PythonRepositoryPublicRepositoryOutput{})
	pulumi.RegisterOutputType(PythonRepositoryPublicRepositoryPtrOutput{})
	pulumi.RegisterOutputType(RepositoryFormatOutput{})
	pulumi.RegisterOutputType(RepositoryFormatPtrOutput{})
	pulumi.RegisterOutputType(RepositoryModeOutput{})
	pulumi.RegisterOutputType(RepositoryModePtrOutput{})
}
