// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.
type Repository struct {
	pulumi.CustomResourceState

	// Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
	CleanupPolicies CleanupPolicyResponseOutput `pulumi:"cleanupPolicies"`
	// Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.
	CleanupPolicyDryRun pulumi.BoolOutput `pulumi:"cleanupPolicyDryRun"`
	// The time when the repository was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The user-provided description of the repository.
	Description pulumi.StringOutput `pulumi:"description"`
	// Docker repository config contains repository level configuration for the repositories of docker type.
	DockerConfig DockerRepositoryConfigResponseOutput `pulumi:"dockerConfig"`
	// Optional. The format of packages that are stored in the repository.
	Format pulumi.StringOutput `pulumi:"format"`
	// The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.
	KmsKeyName pulumi.StringOutput `pulumi:"kmsKeyName"`
	// Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Maven repository config contains repository level configuration for the repositories of maven type.
	MavenConfig MavenRepositoryConfigResponseOutput `pulumi:"mavenConfig"`
	// Optional. The mode of the repository.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Configuration specific for a Remote Repository.
	RemoteRepositoryConfig RemoteRepositoryConfigResponseOutput `pulumi:"remoteRepositoryConfig"`
	// Required. The repository id to use for this repository.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// If set, the repository satisfies physical zone separation.
	SatisfiesPzs pulumi.BoolOutput `pulumi:"satisfiesPzs"`
	// The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.
	SizeBytes pulumi.StringOutput `pulumi:"sizeBytes"`
	// The time when the repository was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Configuration specific for a Virtual Repository.
	VirtualRepositoryConfig VirtualRepositoryConfigResponseOutput `pulumi:"virtualRepositoryConfig"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"repositoryId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Repository
	err := ctx.RegisterResource("google-native:artifactregistry/v1:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("google-native:artifactregistry/v1:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
}

type RepositoryState struct {
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	// Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
	CleanupPolicies *CleanupPolicy `pulumi:"cleanupPolicies"`
	// Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.
	CleanupPolicyDryRun *bool `pulumi:"cleanupPolicyDryRun"`
	// The user-provided description of the repository.
	Description *string `pulumi:"description"`
	// Docker repository config contains repository level configuration for the repositories of docker type.
	DockerConfig *DockerRepositoryConfig `pulumi:"dockerConfig"`
	// Optional. The format of packages that are stored in the repository.
	Format *RepositoryFormat `pulumi:"format"`
	// The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Maven repository config contains repository level configuration for the repositories of maven type.
	MavenConfig *MavenRepositoryConfig `pulumi:"mavenConfig"`
	// Optional. The mode of the repository.
	Mode *RepositoryMode `pulumi:"mode"`
	// The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Configuration specific for a Remote Repository.
	RemoteRepositoryConfig *RemoteRepositoryConfig `pulumi:"remoteRepositoryConfig"`
	// Required. The repository id to use for this repository.
	RepositoryId string `pulumi:"repositoryId"`
	// Configuration specific for a Virtual Repository.
	VirtualRepositoryConfig *VirtualRepositoryConfig `pulumi:"virtualRepositoryConfig"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
	CleanupPolicies CleanupPolicyPtrInput
	// Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.
	CleanupPolicyDryRun pulumi.BoolPtrInput
	// The user-provided description of the repository.
	Description pulumi.StringPtrInput
	// Docker repository config contains repository level configuration for the repositories of docker type.
	DockerConfig DockerRepositoryConfigPtrInput
	// Optional. The format of packages that are stored in the repository.
	Format RepositoryFormatPtrInput
	// The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.
	KmsKeyName pulumi.StringPtrInput
	// Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Maven repository config contains repository level configuration for the repositories of maven type.
	MavenConfig MavenRepositoryConfigPtrInput
	// Optional. The mode of the repository.
	Mode RepositoryModePtrInput
	// The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Configuration specific for a Remote Repository.
	RemoteRepositoryConfig RemoteRepositoryConfigPtrInput
	// Required. The repository id to use for this repository.
	RepositoryId pulumi.StringInput
	// Configuration specific for a Virtual Repository.
	VirtualRepositoryConfig VirtualRepositoryConfigPtrInput
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}

type RepositoryInput interface {
	pulumi.Input

	ToRepositoryOutput() RepositoryOutput
	ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput
}

func (*Repository) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (i *Repository) ToRepositoryOutput() RepositoryOutput {
	return i.ToRepositoryOutputWithContext(context.Background())
}

func (i *Repository) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOutput)
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

// Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
func (o RepositoryOutput) CleanupPolicies() CleanupPolicyResponseOutput {
	return o.ApplyT(func(v *Repository) CleanupPolicyResponseOutput { return v.CleanupPolicies }).(CleanupPolicyResponseOutput)
}

// Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.
func (o RepositoryOutput) CleanupPolicyDryRun() pulumi.BoolOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolOutput { return v.CleanupPolicyDryRun }).(pulumi.BoolOutput)
}

// The time when the repository was created.
func (o RepositoryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The user-provided description of the repository.
func (o RepositoryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Docker repository config contains repository level configuration for the repositories of docker type.
func (o RepositoryOutput) DockerConfig() DockerRepositoryConfigResponseOutput {
	return o.ApplyT(func(v *Repository) DockerRepositoryConfigResponseOutput { return v.DockerConfig }).(DockerRepositoryConfigResponseOutput)
}

// Optional. The format of packages that are stored in the repository.
func (o RepositoryOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.
func (o RepositoryOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
func (o RepositoryOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o RepositoryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Maven repository config contains repository level configuration for the repositories of maven type.
func (o RepositoryOutput) MavenConfig() MavenRepositoryConfigResponseOutput {
	return o.ApplyT(func(v *Repository) MavenRepositoryConfigResponseOutput { return v.MavenConfig }).(MavenRepositoryConfigResponseOutput)
}

// Optional. The mode of the repository.
func (o RepositoryOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.
func (o RepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RepositoryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Configuration specific for a Remote Repository.
func (o RepositoryOutput) RemoteRepositoryConfig() RemoteRepositoryConfigResponseOutput {
	return o.ApplyT(func(v *Repository) RemoteRepositoryConfigResponseOutput { return v.RemoteRepositoryConfig }).(RemoteRepositoryConfigResponseOutput)
}

// Required. The repository id to use for this repository.
func (o RepositoryOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

// If set, the repository satisfies physical zone separation.
func (o RepositoryOutput) SatisfiesPzs() pulumi.BoolOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolOutput { return v.SatisfiesPzs }).(pulumi.BoolOutput)
}

// The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.
func (o RepositoryOutput) SizeBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.SizeBytes }).(pulumi.StringOutput)
}

// The time when the repository was last updated.
func (o RepositoryOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Configuration specific for a Virtual Repository.
func (o RepositoryOutput) VirtualRepositoryConfig() VirtualRepositoryConfigResponseOutput {
	return o.ApplyT(func(v *Repository) VirtualRepositoryConfigResponseOutput { return v.VirtualRepositoryConfig }).(VirtualRepositoryConfigResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryInput)(nil)).Elem(), &Repository{})
	pulumi.RegisterOutputType(RepositoryOutput{})
}
