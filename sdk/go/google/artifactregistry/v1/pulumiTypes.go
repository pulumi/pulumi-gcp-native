// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Configuration for an Apt remote repository.
type AptRepository struct {
	// One of the publicly available Apt repositories supported by Artifact Registry.
	PublicRepository *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository `pulumi:"publicRepository"`
}

// AptRepositoryInput is an input type that accepts AptRepositoryArgs and AptRepositoryOutput values.
// You can construct a concrete instance of `AptRepositoryInput` via:
//
//	AptRepositoryArgs{...}
type AptRepositoryInput interface {
	pulumi.Input

	ToAptRepositoryOutput() AptRepositoryOutput
	ToAptRepositoryOutputWithContext(context.Context) AptRepositoryOutput
}

// Configuration for an Apt remote repository.
type AptRepositoryArgs struct {
	// One of the publicly available Apt repositories supported by Artifact Registry.
	PublicRepository GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (AptRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AptRepository)(nil)).Elem()
}

func (i AptRepositoryArgs) ToAptRepositoryOutput() AptRepositoryOutput {
	return i.ToAptRepositoryOutputWithContext(context.Background())
}

func (i AptRepositoryArgs) ToAptRepositoryOutputWithContext(ctx context.Context) AptRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptRepositoryOutput)
}

func (i AptRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[AptRepository] {
	return pulumix.Output[AptRepository]{
		OutputState: i.ToAptRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i AptRepositoryArgs) ToAptRepositoryPtrOutput() AptRepositoryPtrOutput {
	return i.ToAptRepositoryPtrOutputWithContext(context.Background())
}

func (i AptRepositoryArgs) ToAptRepositoryPtrOutputWithContext(ctx context.Context) AptRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptRepositoryOutput).ToAptRepositoryPtrOutputWithContext(ctx)
}

// AptRepositoryPtrInput is an input type that accepts AptRepositoryArgs, AptRepositoryPtr and AptRepositoryPtrOutput values.
// You can construct a concrete instance of `AptRepositoryPtrInput` via:
//
//	        AptRepositoryArgs{...}
//
//	or:
//
//	        nil
type AptRepositoryPtrInput interface {
	pulumi.Input

	ToAptRepositoryPtrOutput() AptRepositoryPtrOutput
	ToAptRepositoryPtrOutputWithContext(context.Context) AptRepositoryPtrOutput
}

type aptRepositoryPtrType AptRepositoryArgs

func AptRepositoryPtr(v *AptRepositoryArgs) AptRepositoryPtrInput {
	return (*aptRepositoryPtrType)(v)
}

func (*aptRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AptRepository)(nil)).Elem()
}

func (i *aptRepositoryPtrType) ToAptRepositoryPtrOutput() AptRepositoryPtrOutput {
	return i.ToAptRepositoryPtrOutputWithContext(context.Background())
}

func (i *aptRepositoryPtrType) ToAptRepositoryPtrOutputWithContext(ctx context.Context) AptRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptRepositoryPtrOutput)
}

func (i *aptRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*AptRepository] {
	return pulumix.Output[*AptRepository]{
		OutputState: i.ToAptRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration for an Apt remote repository.
type AptRepositoryOutput struct{ *pulumi.OutputState }

func (AptRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AptRepository)(nil)).Elem()
}

func (o AptRepositoryOutput) ToAptRepositoryOutput() AptRepositoryOutput {
	return o
}

func (o AptRepositoryOutput) ToAptRepositoryOutputWithContext(ctx context.Context) AptRepositoryOutput {
	return o
}

func (o AptRepositoryOutput) ToAptRepositoryPtrOutput() AptRepositoryPtrOutput {
	return o.ToAptRepositoryPtrOutputWithContext(context.Background())
}

func (o AptRepositoryOutput) ToAptRepositoryPtrOutputWithContext(ctx context.Context) AptRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AptRepository) *AptRepository {
		return &v
	}).(AptRepositoryPtrOutput)
}

func (o AptRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[AptRepository] {
	return pulumix.Output[AptRepository]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Apt repositories supported by Artifact Registry.
func (o AptRepositoryOutput) PublicRepository() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v AptRepository) *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository {
		return v.PublicRepository
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput)
}

type AptRepositoryPtrOutput struct{ *pulumi.OutputState }

func (AptRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AptRepository)(nil)).Elem()
}

func (o AptRepositoryPtrOutput) ToAptRepositoryPtrOutput() AptRepositoryPtrOutput {
	return o
}

func (o AptRepositoryPtrOutput) ToAptRepositoryPtrOutputWithContext(ctx context.Context) AptRepositoryPtrOutput {
	return o
}

func (o AptRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AptRepository] {
	return pulumix.Output[*AptRepository]{
		OutputState: o.OutputState,
	}
}

func (o AptRepositoryPtrOutput) Elem() AptRepositoryOutput {
	return o.ApplyT(func(v *AptRepository) AptRepository {
		if v != nil {
			return *v
		}
		var ret AptRepository
		return ret
	}).(AptRepositoryOutput)
}

// One of the publicly available Apt repositories supported by Artifact Registry.
func (o AptRepositoryPtrOutput) PublicRepository() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *AptRepository) *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput)
}

// Configuration for an Apt remote repository.
type AptRepositoryResponse struct {
	// One of the publicly available Apt repositories supported by Artifact Registry.
	PublicRepository GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse `pulumi:"publicRepository"`
}

// Configuration for an Apt remote repository.
type AptRepositoryResponseOutput struct{ *pulumi.OutputState }

func (AptRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AptRepositoryResponse)(nil)).Elem()
}

func (o AptRepositoryResponseOutput) ToAptRepositoryResponseOutput() AptRepositoryResponseOutput {
	return o
}

func (o AptRepositoryResponseOutput) ToAptRepositoryResponseOutputWithContext(ctx context.Context) AptRepositoryResponseOutput {
	return o
}

func (o AptRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AptRepositoryResponse] {
	return pulumix.Output[AptRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Apt repositories supported by Artifact Registry.
func (o AptRepositoryResponseOutput) PublicRepository() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput {
	return o.ApplyT(func(v AptRepositoryResponse) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse {
		return v.PublicRepository
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

func (i BindingArgs) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: i.ToBindingOutputWithContext(ctx).OutputState,
	}
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

func (i BindingArray) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: i.ToBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

func (o BindingOutput) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: o.OutputState,
	}
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BindingResponse] {
	return pulumix.Output[BindingResponse]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BindingResponse] {
	return pulumix.Output[[]BindingResponse]{
		OutputState: o.OutputState,
	}
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Configuration for a Docker remote repository.
type DockerRepository struct {
	// One of the publicly available Docker repositories supported by Artifact Registry.
	PublicRepository *DockerRepositoryPublicRepository `pulumi:"publicRepository"`
}

// DockerRepositoryInput is an input type that accepts DockerRepositoryArgs and DockerRepositoryOutput values.
// You can construct a concrete instance of `DockerRepositoryInput` via:
//
//	DockerRepositoryArgs{...}
type DockerRepositoryInput interface {
	pulumi.Input

	ToDockerRepositoryOutput() DockerRepositoryOutput
	ToDockerRepositoryOutputWithContext(context.Context) DockerRepositoryOutput
}

// Configuration for a Docker remote repository.
type DockerRepositoryArgs struct {
	// One of the publicly available Docker repositories supported by Artifact Registry.
	PublicRepository DockerRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (DockerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepository)(nil)).Elem()
}

func (i DockerRepositoryArgs) ToDockerRepositoryOutput() DockerRepositoryOutput {
	return i.ToDockerRepositoryOutputWithContext(context.Background())
}

func (i DockerRepositoryArgs) ToDockerRepositoryOutputWithContext(ctx context.Context) DockerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryOutput)
}

func (i DockerRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[DockerRepository] {
	return pulumix.Output[DockerRepository]{
		OutputState: i.ToDockerRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i DockerRepositoryArgs) ToDockerRepositoryPtrOutput() DockerRepositoryPtrOutput {
	return i.ToDockerRepositoryPtrOutputWithContext(context.Background())
}

func (i DockerRepositoryArgs) ToDockerRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryOutput).ToDockerRepositoryPtrOutputWithContext(ctx)
}

// DockerRepositoryPtrInput is an input type that accepts DockerRepositoryArgs, DockerRepositoryPtr and DockerRepositoryPtrOutput values.
// You can construct a concrete instance of `DockerRepositoryPtrInput` via:
//
//	        DockerRepositoryArgs{...}
//
//	or:
//
//	        nil
type DockerRepositoryPtrInput interface {
	pulumi.Input

	ToDockerRepositoryPtrOutput() DockerRepositoryPtrOutput
	ToDockerRepositoryPtrOutputWithContext(context.Context) DockerRepositoryPtrOutput
}

type dockerRepositoryPtrType DockerRepositoryArgs

func DockerRepositoryPtr(v *DockerRepositoryArgs) DockerRepositoryPtrInput {
	return (*dockerRepositoryPtrType)(v)
}

func (*dockerRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerRepository)(nil)).Elem()
}

func (i *dockerRepositoryPtrType) ToDockerRepositoryPtrOutput() DockerRepositoryPtrOutput {
	return i.ToDockerRepositoryPtrOutputWithContext(context.Background())
}

func (i *dockerRepositoryPtrType) ToDockerRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryPtrOutput)
}

func (i *dockerRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*DockerRepository] {
	return pulumix.Output[*DockerRepository]{
		OutputState: i.ToDockerRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a Docker remote repository.
type DockerRepositoryOutput struct{ *pulumi.OutputState }

func (DockerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepository)(nil)).Elem()
}

func (o DockerRepositoryOutput) ToDockerRepositoryOutput() DockerRepositoryOutput {
	return o
}

func (o DockerRepositoryOutput) ToDockerRepositoryOutputWithContext(ctx context.Context) DockerRepositoryOutput {
	return o
}

func (o DockerRepositoryOutput) ToDockerRepositoryPtrOutput() DockerRepositoryPtrOutput {
	return o.ToDockerRepositoryPtrOutputWithContext(context.Background())
}

func (o DockerRepositoryOutput) ToDockerRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerRepository) *DockerRepository {
		return &v
	}).(DockerRepositoryPtrOutput)
}

func (o DockerRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[DockerRepository] {
	return pulumix.Output[DockerRepository]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Docker repositories supported by Artifact Registry.
func (o DockerRepositoryOutput) PublicRepository() DockerRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v DockerRepository) *DockerRepositoryPublicRepository { return v.PublicRepository }).(DockerRepositoryPublicRepositoryPtrOutput)
}

type DockerRepositoryPtrOutput struct{ *pulumi.OutputState }

func (DockerRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerRepository)(nil)).Elem()
}

func (o DockerRepositoryPtrOutput) ToDockerRepositoryPtrOutput() DockerRepositoryPtrOutput {
	return o
}

func (o DockerRepositoryPtrOutput) ToDockerRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPtrOutput {
	return o
}

func (o DockerRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DockerRepository] {
	return pulumix.Output[*DockerRepository]{
		OutputState: o.OutputState,
	}
}

func (o DockerRepositoryPtrOutput) Elem() DockerRepositoryOutput {
	return o.ApplyT(func(v *DockerRepository) DockerRepository {
		if v != nil {
			return *v
		}
		var ret DockerRepository
		return ret
	}).(DockerRepositoryOutput)
}

// One of the publicly available Docker repositories supported by Artifact Registry.
func (o DockerRepositoryPtrOutput) PublicRepository() DockerRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *DockerRepository) *DockerRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(DockerRepositoryPublicRepositoryPtrOutput)
}

// DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
type DockerRepositoryConfig struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags *bool `pulumi:"immutableTags"`
}

// DockerRepositoryConfigInput is an input type that accepts DockerRepositoryConfigArgs and DockerRepositoryConfigOutput values.
// You can construct a concrete instance of `DockerRepositoryConfigInput` via:
//
//	DockerRepositoryConfigArgs{...}
type DockerRepositoryConfigInput interface {
	pulumi.Input

	ToDockerRepositoryConfigOutput() DockerRepositoryConfigOutput
	ToDockerRepositoryConfigOutputWithContext(context.Context) DockerRepositoryConfigOutput
}

// DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
type DockerRepositoryConfigArgs struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags pulumi.BoolPtrInput `pulumi:"immutableTags"`
}

func (DockerRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepositoryConfig)(nil)).Elem()
}

func (i DockerRepositoryConfigArgs) ToDockerRepositoryConfigOutput() DockerRepositoryConfigOutput {
	return i.ToDockerRepositoryConfigOutputWithContext(context.Background())
}

func (i DockerRepositoryConfigArgs) ToDockerRepositoryConfigOutputWithContext(ctx context.Context) DockerRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryConfigOutput)
}

func (i DockerRepositoryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[DockerRepositoryConfig] {
	return pulumix.Output[DockerRepositoryConfig]{
		OutputState: i.ToDockerRepositoryConfigOutputWithContext(ctx).OutputState,
	}
}

func (i DockerRepositoryConfigArgs) ToDockerRepositoryConfigPtrOutput() DockerRepositoryConfigPtrOutput {
	return i.ToDockerRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i DockerRepositoryConfigArgs) ToDockerRepositoryConfigPtrOutputWithContext(ctx context.Context) DockerRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryConfigOutput).ToDockerRepositoryConfigPtrOutputWithContext(ctx)
}

// DockerRepositoryConfigPtrInput is an input type that accepts DockerRepositoryConfigArgs, DockerRepositoryConfigPtr and DockerRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `DockerRepositoryConfigPtrInput` via:
//
//	        DockerRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type DockerRepositoryConfigPtrInput interface {
	pulumi.Input

	ToDockerRepositoryConfigPtrOutput() DockerRepositoryConfigPtrOutput
	ToDockerRepositoryConfigPtrOutputWithContext(context.Context) DockerRepositoryConfigPtrOutput
}

type dockerRepositoryConfigPtrType DockerRepositoryConfigArgs

func DockerRepositoryConfigPtr(v *DockerRepositoryConfigArgs) DockerRepositoryConfigPtrInput {
	return (*dockerRepositoryConfigPtrType)(v)
}

func (*dockerRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerRepositoryConfig)(nil)).Elem()
}

func (i *dockerRepositoryConfigPtrType) ToDockerRepositoryConfigPtrOutput() DockerRepositoryConfigPtrOutput {
	return i.ToDockerRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *dockerRepositoryConfigPtrType) ToDockerRepositoryConfigPtrOutputWithContext(ctx context.Context) DockerRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryConfigPtrOutput)
}

func (i *dockerRepositoryConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*DockerRepositoryConfig] {
	return pulumix.Output[*DockerRepositoryConfig]{
		OutputState: i.ToDockerRepositoryConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
type DockerRepositoryConfigOutput struct{ *pulumi.OutputState }

func (DockerRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepositoryConfig)(nil)).Elem()
}

func (o DockerRepositoryConfigOutput) ToDockerRepositoryConfigOutput() DockerRepositoryConfigOutput {
	return o
}

func (o DockerRepositoryConfigOutput) ToDockerRepositoryConfigOutputWithContext(ctx context.Context) DockerRepositoryConfigOutput {
	return o
}

func (o DockerRepositoryConfigOutput) ToDockerRepositoryConfigPtrOutput() DockerRepositoryConfigPtrOutput {
	return o.ToDockerRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o DockerRepositoryConfigOutput) ToDockerRepositoryConfigPtrOutputWithContext(ctx context.Context) DockerRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerRepositoryConfig) *DockerRepositoryConfig {
		return &v
	}).(DockerRepositoryConfigPtrOutput)
}

func (o DockerRepositoryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DockerRepositoryConfig] {
	return pulumix.Output[DockerRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o DockerRepositoryConfigOutput) ImmutableTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerRepositoryConfig) *bool { return v.ImmutableTags }).(pulumi.BoolPtrOutput)
}

type DockerRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (DockerRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerRepositoryConfig)(nil)).Elem()
}

func (o DockerRepositoryConfigPtrOutput) ToDockerRepositoryConfigPtrOutput() DockerRepositoryConfigPtrOutput {
	return o
}

func (o DockerRepositoryConfigPtrOutput) ToDockerRepositoryConfigPtrOutputWithContext(ctx context.Context) DockerRepositoryConfigPtrOutput {
	return o
}

func (o DockerRepositoryConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DockerRepositoryConfig] {
	return pulumix.Output[*DockerRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o DockerRepositoryConfigPtrOutput) Elem() DockerRepositoryConfigOutput {
	return o.ApplyT(func(v *DockerRepositoryConfig) DockerRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret DockerRepositoryConfig
		return ret
	}).(DockerRepositoryConfigOutput)
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o DockerRepositoryConfigPtrOutput) ImmutableTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerRepositoryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ImmutableTags
	}).(pulumi.BoolPtrOutput)
}

// DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
type DockerRepositoryConfigResponse struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags bool `pulumi:"immutableTags"`
}

// DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
type DockerRepositoryConfigResponseOutput struct{ *pulumi.OutputState }

func (DockerRepositoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepositoryConfigResponse)(nil)).Elem()
}

func (o DockerRepositoryConfigResponseOutput) ToDockerRepositoryConfigResponseOutput() DockerRepositoryConfigResponseOutput {
	return o
}

func (o DockerRepositoryConfigResponseOutput) ToDockerRepositoryConfigResponseOutputWithContext(ctx context.Context) DockerRepositoryConfigResponseOutput {
	return o
}

func (o DockerRepositoryConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DockerRepositoryConfigResponse] {
	return pulumix.Output[DockerRepositoryConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o DockerRepositoryConfigResponseOutput) ImmutableTags() pulumi.BoolOutput {
	return o.ApplyT(func(v DockerRepositoryConfigResponse) bool { return v.ImmutableTags }).(pulumi.BoolOutput)
}

// Configuration for a Docker remote repository.
type DockerRepositoryResponse struct {
	// One of the publicly available Docker repositories supported by Artifact Registry.
	PublicRepository string `pulumi:"publicRepository"`
}

// Configuration for a Docker remote repository.
type DockerRepositoryResponseOutput struct{ *pulumi.OutputState }

func (DockerRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepositoryResponse)(nil)).Elem()
}

func (o DockerRepositoryResponseOutput) ToDockerRepositoryResponseOutput() DockerRepositoryResponseOutput {
	return o
}

func (o DockerRepositoryResponseOutput) ToDockerRepositoryResponseOutputWithContext(ctx context.Context) DockerRepositoryResponseOutput {
	return o
}

func (o DockerRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DockerRepositoryResponse] {
	return pulumix.Output[DockerRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Docker repositories supported by Artifact Registry.
func (o DockerRepositoryResponseOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v DockerRepositoryResponse) string { return v.PublicRepository }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: i.ToExprOutputWithContext(ctx).OutputState,
	}
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

func (i *exprPtrType) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: i.ToExprPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

func (o ExprOutput) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: o.OutputState,
	}
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExprResponse] {
	return pulumix.Output[ExprResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Publicly available Apt repositories constructed from a common repository base and a custom repository path.
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository struct {
	// A common public repository base for Apt.
	RepositoryBase *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase `pulumi:"repositoryBase"`
	// A custom field to define a path to a specific repository from the base.
	RepositoryPath *string `pulumi:"repositoryPath"`
}

// GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryInput is an input type that accepts GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs and GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput values.
// You can construct a concrete instance of `GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryInput` via:
//
//	GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{...}
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryInput interface {
	pulumi.Input

	ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput
	ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput
}

// Publicly available Apt repositories constructed from a common repository base and a custom repository path.
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs struct {
	// A common public repository base for Apt.
	RepositoryBase GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBasePtrInput `pulumi:"repositoryBase"`
	// A custom field to define a path to a specific repository from the base.
	RepositoryPath pulumi.StringPtrInput `pulumi:"repositoryPath"`
}

func (GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (i GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return i.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(context.Background())
}

func (i GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput)
}

func (i GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository] {
	return pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository]{
		OutputState: i.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return i.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput).ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx)
}

// GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput is an input type that accepts GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs, GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtr and GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput` via:
//
//	        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput
	ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput
}

type googleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs

func GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtr(v *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput {
	return (*googleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType)(v)
}

func (*googleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (i *googleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return i.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput)
}

func (i *googleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository] {
	return pulumix.Output[*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository]{
		OutputState: i.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Publicly available Apt repositories constructed from a common repository base and a custom repository path.
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository) *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository {
		return &v
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput)
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository] {
	return pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository]{
		OutputState: o.OutputState,
	}
}

// A common public repository base for Apt.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) RepositoryBase() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBasePtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository) *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase {
		return v.RepositoryBase
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBasePtrOutput)
}

// A custom field to define a path to a specific repository from the base.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput) RepositoryPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository) *string {
		return v.RepositoryPath
	}).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository)(nil)).Elem()
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository] {
	return pulumix.Output[*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository]{
		OutputState: o.OutputState,
	}
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) Elem() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput {
	return o.ApplyT(func(v *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository
		return ret
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput)
}

// A common public repository base for Apt.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) RepositoryBase() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBasePtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository) *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBase {
		if v == nil {
			return nil
		}
		return v.RepositoryBase
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryRepositoryBasePtrOutput)
}

// A custom field to define a path to a specific repository from the base.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput) RepositoryPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryPath
	}).(pulumi.StringPtrOutput)
}

// Publicly available Apt repositories constructed from a common repository base and a custom repository path.
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse struct {
	// A common public repository base for Apt.
	RepositoryBase string `pulumi:"repositoryBase"`
	// A custom field to define a path to a specific repository from the base.
	RepositoryPath string `pulumi:"repositoryPath"`
}

// Publicly available Apt repositories constructed from a common repository base and a custom repository path.
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse)(nil)).Elem()
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse] {
	return pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// A common public repository base for Apt.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput) RepositoryBase() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse) string {
		return v.RepositoryBase
	}).(pulumi.StringOutput)
}

// A custom field to define a path to a specific repository from the base.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput) RepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponse) string {
		return v.RepositoryPath
	}).(pulumi.StringOutput)
}

// Publicly available Yum repositories constructed from a common repository base and a custom repository path.
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository struct {
	// A common public repository base for Yum.
	RepositoryBase *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase `pulumi:"repositoryBase"`
	// A custom field to define a path to a specific repository from the base.
	RepositoryPath *string `pulumi:"repositoryPath"`
}

// GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryInput is an input type that accepts GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs and GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput values.
// You can construct a concrete instance of `GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryInput` via:
//
//	GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{...}
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryInput interface {
	pulumi.Input

	ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput
	ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput
}

// Publicly available Yum repositories constructed from a common repository base and a custom repository path.
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs struct {
	// A common public repository base for Yum.
	RepositoryBase GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBasePtrInput `pulumi:"repositoryBase"`
	// A custom field to define a path to a specific repository from the base.
	RepositoryPath pulumi.StringPtrInput `pulumi:"repositoryPath"`
}

func (GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (i GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return i.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(context.Background())
}

func (i GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput)
}

func (i GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository] {
	return pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository]{
		OutputState: i.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return i.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput).ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx)
}

// GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput is an input type that accepts GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs, GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtr and GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput` via:
//
//	        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput
	ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput
}

type googleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs

func GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtr(v *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput {
	return (*googleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType)(v)
}

func (*googleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (i *googleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return i.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput)
}

func (i *googleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository] {
	return pulumix.Output[*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository]{
		OutputState: i.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Publicly available Yum repositories constructed from a common repository base and a custom repository path.
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o.ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository) *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository {
		return &v
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput)
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository] {
	return pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository]{
		OutputState: o.OutputState,
	}
}

// A common public repository base for Yum.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) RepositoryBase() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBasePtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository) *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase {
		return v.RepositoryBase
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBasePtrOutput)
}

// A custom field to define a path to a specific repository from the base.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput) RepositoryPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository) *string {
		return v.RepositoryPath
	}).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository)(nil)).Elem()
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository] {
	return pulumix.Output[*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository]{
		OutputState: o.OutputState,
	}
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) Elem() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput {
	return o.ApplyT(func(v *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository
		return ret
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput)
}

// A common public repository base for Yum.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) RepositoryBase() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBasePtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository) *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBase {
		if v == nil {
			return nil
		}
		return v.RepositoryBase
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryRepositoryBasePtrOutput)
}

// A custom field to define a path to a specific repository from the base.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput) RepositoryPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryPath
	}).(pulumi.StringPtrOutput)
}

// Publicly available Yum repositories constructed from a common repository base and a custom repository path.
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse struct {
	// A common public repository base for Yum.
	RepositoryBase string `pulumi:"repositoryBase"`
	// A custom field to define a path to a specific repository from the base.
	RepositoryPath string `pulumi:"repositoryPath"`
}

// Publicly available Yum repositories constructed from a common repository base and a custom repository path.
type GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse)(nil)).Elem()
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput) ToGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutputWithContext(ctx context.Context) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput {
	return o
}

func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse] {
	return pulumix.Output[GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// A common public repository base for Yum.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput) RepositoryBase() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse) string {
		return v.RepositoryBase
	}).(pulumi.StringOutput)
}

// A custom field to define a path to a specific repository from the base.
func (o GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput) RepositoryPath() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse) string {
		return v.RepositoryPath
	}).(pulumi.StringOutput)
}

// Configuration for a Maven remote repository.
type MavenRepository struct {
	// One of the publicly available Maven repositories supported by Artifact Registry.
	PublicRepository *MavenRepositoryPublicRepository `pulumi:"publicRepository"`
}

// MavenRepositoryInput is an input type that accepts MavenRepositoryArgs and MavenRepositoryOutput values.
// You can construct a concrete instance of `MavenRepositoryInput` via:
//
//	MavenRepositoryArgs{...}
type MavenRepositoryInput interface {
	pulumi.Input

	ToMavenRepositoryOutput() MavenRepositoryOutput
	ToMavenRepositoryOutputWithContext(context.Context) MavenRepositoryOutput
}

// Configuration for a Maven remote repository.
type MavenRepositoryArgs struct {
	// One of the publicly available Maven repositories supported by Artifact Registry.
	PublicRepository MavenRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (MavenRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepository)(nil)).Elem()
}

func (i MavenRepositoryArgs) ToMavenRepositoryOutput() MavenRepositoryOutput {
	return i.ToMavenRepositoryOutputWithContext(context.Background())
}

func (i MavenRepositoryArgs) ToMavenRepositoryOutputWithContext(ctx context.Context) MavenRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryOutput)
}

func (i MavenRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[MavenRepository] {
	return pulumix.Output[MavenRepository]{
		OutputState: i.ToMavenRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i MavenRepositoryArgs) ToMavenRepositoryPtrOutput() MavenRepositoryPtrOutput {
	return i.ToMavenRepositoryPtrOutputWithContext(context.Background())
}

func (i MavenRepositoryArgs) ToMavenRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryOutput).ToMavenRepositoryPtrOutputWithContext(ctx)
}

// MavenRepositoryPtrInput is an input type that accepts MavenRepositoryArgs, MavenRepositoryPtr and MavenRepositoryPtrOutput values.
// You can construct a concrete instance of `MavenRepositoryPtrInput` via:
//
//	        MavenRepositoryArgs{...}
//
//	or:
//
//	        nil
type MavenRepositoryPtrInput interface {
	pulumi.Input

	ToMavenRepositoryPtrOutput() MavenRepositoryPtrOutput
	ToMavenRepositoryPtrOutputWithContext(context.Context) MavenRepositoryPtrOutput
}

type mavenRepositoryPtrType MavenRepositoryArgs

func MavenRepositoryPtr(v *MavenRepositoryArgs) MavenRepositoryPtrInput {
	return (*mavenRepositoryPtrType)(v)
}

func (*mavenRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MavenRepository)(nil)).Elem()
}

func (i *mavenRepositoryPtrType) ToMavenRepositoryPtrOutput() MavenRepositoryPtrOutput {
	return i.ToMavenRepositoryPtrOutputWithContext(context.Background())
}

func (i *mavenRepositoryPtrType) ToMavenRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryPtrOutput)
}

func (i *mavenRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*MavenRepository] {
	return pulumix.Output[*MavenRepository]{
		OutputState: i.ToMavenRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a Maven remote repository.
type MavenRepositoryOutput struct{ *pulumi.OutputState }

func (MavenRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepository)(nil)).Elem()
}

func (o MavenRepositoryOutput) ToMavenRepositoryOutput() MavenRepositoryOutput {
	return o
}

func (o MavenRepositoryOutput) ToMavenRepositoryOutputWithContext(ctx context.Context) MavenRepositoryOutput {
	return o
}

func (o MavenRepositoryOutput) ToMavenRepositoryPtrOutput() MavenRepositoryPtrOutput {
	return o.ToMavenRepositoryPtrOutputWithContext(context.Background())
}

func (o MavenRepositoryOutput) ToMavenRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MavenRepository) *MavenRepository {
		return &v
	}).(MavenRepositoryPtrOutput)
}

func (o MavenRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[MavenRepository] {
	return pulumix.Output[MavenRepository]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Maven repositories supported by Artifact Registry.
func (o MavenRepositoryOutput) PublicRepository() MavenRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v MavenRepository) *MavenRepositoryPublicRepository { return v.PublicRepository }).(MavenRepositoryPublicRepositoryPtrOutput)
}

type MavenRepositoryPtrOutput struct{ *pulumi.OutputState }

func (MavenRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MavenRepository)(nil)).Elem()
}

func (o MavenRepositoryPtrOutput) ToMavenRepositoryPtrOutput() MavenRepositoryPtrOutput {
	return o
}

func (o MavenRepositoryPtrOutput) ToMavenRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPtrOutput {
	return o
}

func (o MavenRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MavenRepository] {
	return pulumix.Output[*MavenRepository]{
		OutputState: o.OutputState,
	}
}

func (o MavenRepositoryPtrOutput) Elem() MavenRepositoryOutput {
	return o.ApplyT(func(v *MavenRepository) MavenRepository {
		if v != nil {
			return *v
		}
		var ret MavenRepository
		return ret
	}).(MavenRepositoryOutput)
}

// One of the publicly available Maven repositories supported by Artifact Registry.
func (o MavenRepositoryPtrOutput) PublicRepository() MavenRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *MavenRepository) *MavenRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(MavenRepositoryPublicRepositoryPtrOutput)
}

// MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
type MavenRepositoryConfig struct {
	// The repository with this flag will allow publishing the same snapshot versions.
	AllowSnapshotOverwrites *bool `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	VersionPolicy *MavenRepositoryConfigVersionPolicy `pulumi:"versionPolicy"`
}

// MavenRepositoryConfigInput is an input type that accepts MavenRepositoryConfigArgs and MavenRepositoryConfigOutput values.
// You can construct a concrete instance of `MavenRepositoryConfigInput` via:
//
//	MavenRepositoryConfigArgs{...}
type MavenRepositoryConfigInput interface {
	pulumi.Input

	ToMavenRepositoryConfigOutput() MavenRepositoryConfigOutput
	ToMavenRepositoryConfigOutputWithContext(context.Context) MavenRepositoryConfigOutput
}

// MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
type MavenRepositoryConfigArgs struct {
	// The repository with this flag will allow publishing the same snapshot versions.
	AllowSnapshotOverwrites pulumi.BoolPtrInput `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	VersionPolicy MavenRepositoryConfigVersionPolicyPtrInput `pulumi:"versionPolicy"`
}

func (MavenRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryConfig)(nil)).Elem()
}

func (i MavenRepositoryConfigArgs) ToMavenRepositoryConfigOutput() MavenRepositoryConfigOutput {
	return i.ToMavenRepositoryConfigOutputWithContext(context.Background())
}

func (i MavenRepositoryConfigArgs) ToMavenRepositoryConfigOutputWithContext(ctx context.Context) MavenRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryConfigOutput)
}

func (i MavenRepositoryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[MavenRepositoryConfig] {
	return pulumix.Output[MavenRepositoryConfig]{
		OutputState: i.ToMavenRepositoryConfigOutputWithContext(ctx).OutputState,
	}
}

func (i MavenRepositoryConfigArgs) ToMavenRepositoryConfigPtrOutput() MavenRepositoryConfigPtrOutput {
	return i.ToMavenRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i MavenRepositoryConfigArgs) ToMavenRepositoryConfigPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryConfigOutput).ToMavenRepositoryConfigPtrOutputWithContext(ctx)
}

// MavenRepositoryConfigPtrInput is an input type that accepts MavenRepositoryConfigArgs, MavenRepositoryConfigPtr and MavenRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `MavenRepositoryConfigPtrInput` via:
//
//	        MavenRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type MavenRepositoryConfigPtrInput interface {
	pulumi.Input

	ToMavenRepositoryConfigPtrOutput() MavenRepositoryConfigPtrOutput
	ToMavenRepositoryConfigPtrOutputWithContext(context.Context) MavenRepositoryConfigPtrOutput
}

type mavenRepositoryConfigPtrType MavenRepositoryConfigArgs

func MavenRepositoryConfigPtr(v *MavenRepositoryConfigArgs) MavenRepositoryConfigPtrInput {
	return (*mavenRepositoryConfigPtrType)(v)
}

func (*mavenRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MavenRepositoryConfig)(nil)).Elem()
}

func (i *mavenRepositoryConfigPtrType) ToMavenRepositoryConfigPtrOutput() MavenRepositoryConfigPtrOutput {
	return i.ToMavenRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *mavenRepositoryConfigPtrType) ToMavenRepositoryConfigPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryConfigPtrOutput)
}

func (i *mavenRepositoryConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*MavenRepositoryConfig] {
	return pulumix.Output[*MavenRepositoryConfig]{
		OutputState: i.ToMavenRepositoryConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
type MavenRepositoryConfigOutput struct{ *pulumi.OutputState }

func (MavenRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryConfig)(nil)).Elem()
}

func (o MavenRepositoryConfigOutput) ToMavenRepositoryConfigOutput() MavenRepositoryConfigOutput {
	return o
}

func (o MavenRepositoryConfigOutput) ToMavenRepositoryConfigOutputWithContext(ctx context.Context) MavenRepositoryConfigOutput {
	return o
}

func (o MavenRepositoryConfigOutput) ToMavenRepositoryConfigPtrOutput() MavenRepositoryConfigPtrOutput {
	return o.ToMavenRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o MavenRepositoryConfigOutput) ToMavenRepositoryConfigPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MavenRepositoryConfig) *MavenRepositoryConfig {
		return &v
	}).(MavenRepositoryConfigPtrOutput)
}

func (o MavenRepositoryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[MavenRepositoryConfig] {
	return pulumix.Output[MavenRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

// The repository with this flag will allow publishing the same snapshot versions.
func (o MavenRepositoryConfigOutput) AllowSnapshotOverwrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MavenRepositoryConfig) *bool { return v.AllowSnapshotOverwrites }).(pulumi.BoolPtrOutput)
}

// Version policy defines the versions that the registry will accept.
func (o MavenRepositoryConfigOutput) VersionPolicy() MavenRepositoryConfigVersionPolicyPtrOutput {
	return o.ApplyT(func(v MavenRepositoryConfig) *MavenRepositoryConfigVersionPolicy { return v.VersionPolicy }).(MavenRepositoryConfigVersionPolicyPtrOutput)
}

type MavenRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (MavenRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MavenRepositoryConfig)(nil)).Elem()
}

func (o MavenRepositoryConfigPtrOutput) ToMavenRepositoryConfigPtrOutput() MavenRepositoryConfigPtrOutput {
	return o
}

func (o MavenRepositoryConfigPtrOutput) ToMavenRepositoryConfigPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigPtrOutput {
	return o
}

func (o MavenRepositoryConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MavenRepositoryConfig] {
	return pulumix.Output[*MavenRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o MavenRepositoryConfigPtrOutput) Elem() MavenRepositoryConfigOutput {
	return o.ApplyT(func(v *MavenRepositoryConfig) MavenRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret MavenRepositoryConfig
		return ret
	}).(MavenRepositoryConfigOutput)
}

// The repository with this flag will allow publishing the same snapshot versions.
func (o MavenRepositoryConfigPtrOutput) AllowSnapshotOverwrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MavenRepositoryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSnapshotOverwrites
	}).(pulumi.BoolPtrOutput)
}

// Version policy defines the versions that the registry will accept.
func (o MavenRepositoryConfigPtrOutput) VersionPolicy() MavenRepositoryConfigVersionPolicyPtrOutput {
	return o.ApplyT(func(v *MavenRepositoryConfig) *MavenRepositoryConfigVersionPolicy {
		if v == nil {
			return nil
		}
		return v.VersionPolicy
	}).(MavenRepositoryConfigVersionPolicyPtrOutput)
}

// MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
type MavenRepositoryConfigResponse struct {
	// The repository with this flag will allow publishing the same snapshot versions.
	AllowSnapshotOverwrites bool `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	VersionPolicy string `pulumi:"versionPolicy"`
}

// MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
type MavenRepositoryConfigResponseOutput struct{ *pulumi.OutputState }

func (MavenRepositoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryConfigResponse)(nil)).Elem()
}

func (o MavenRepositoryConfigResponseOutput) ToMavenRepositoryConfigResponseOutput() MavenRepositoryConfigResponseOutput {
	return o
}

func (o MavenRepositoryConfigResponseOutput) ToMavenRepositoryConfigResponseOutputWithContext(ctx context.Context) MavenRepositoryConfigResponseOutput {
	return o
}

func (o MavenRepositoryConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MavenRepositoryConfigResponse] {
	return pulumix.Output[MavenRepositoryConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The repository with this flag will allow publishing the same snapshot versions.
func (o MavenRepositoryConfigResponseOutput) AllowSnapshotOverwrites() pulumi.BoolOutput {
	return o.ApplyT(func(v MavenRepositoryConfigResponse) bool { return v.AllowSnapshotOverwrites }).(pulumi.BoolOutput)
}

// Version policy defines the versions that the registry will accept.
func (o MavenRepositoryConfigResponseOutput) VersionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v MavenRepositoryConfigResponse) string { return v.VersionPolicy }).(pulumi.StringOutput)
}

// Configuration for a Maven remote repository.
type MavenRepositoryResponse struct {
	// One of the publicly available Maven repositories supported by Artifact Registry.
	PublicRepository string `pulumi:"publicRepository"`
}

// Configuration for a Maven remote repository.
type MavenRepositoryResponseOutput struct{ *pulumi.OutputState }

func (MavenRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryResponse)(nil)).Elem()
}

func (o MavenRepositoryResponseOutput) ToMavenRepositoryResponseOutput() MavenRepositoryResponseOutput {
	return o
}

func (o MavenRepositoryResponseOutput) ToMavenRepositoryResponseOutputWithContext(ctx context.Context) MavenRepositoryResponseOutput {
	return o
}

func (o MavenRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MavenRepositoryResponse] {
	return pulumix.Output[MavenRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Maven repositories supported by Artifact Registry.
func (o MavenRepositoryResponseOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v MavenRepositoryResponse) string { return v.PublicRepository }).(pulumi.StringOutput)
}

// Configuration for a Npm remote repository.
type NpmRepository struct {
	// One of the publicly available Npm repositories supported by Artifact Registry.
	PublicRepository *NpmRepositoryPublicRepository `pulumi:"publicRepository"`
}

// NpmRepositoryInput is an input type that accepts NpmRepositoryArgs and NpmRepositoryOutput values.
// You can construct a concrete instance of `NpmRepositoryInput` via:
//
//	NpmRepositoryArgs{...}
type NpmRepositoryInput interface {
	pulumi.Input

	ToNpmRepositoryOutput() NpmRepositoryOutput
	ToNpmRepositoryOutputWithContext(context.Context) NpmRepositoryOutput
}

// Configuration for a Npm remote repository.
type NpmRepositoryArgs struct {
	// One of the publicly available Npm repositories supported by Artifact Registry.
	PublicRepository NpmRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (NpmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmRepository)(nil)).Elem()
}

func (i NpmRepositoryArgs) ToNpmRepositoryOutput() NpmRepositoryOutput {
	return i.ToNpmRepositoryOutputWithContext(context.Background())
}

func (i NpmRepositoryArgs) ToNpmRepositoryOutputWithContext(ctx context.Context) NpmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpmRepositoryOutput)
}

func (i NpmRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[NpmRepository] {
	return pulumix.Output[NpmRepository]{
		OutputState: i.ToNpmRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i NpmRepositoryArgs) ToNpmRepositoryPtrOutput() NpmRepositoryPtrOutput {
	return i.ToNpmRepositoryPtrOutputWithContext(context.Background())
}

func (i NpmRepositoryArgs) ToNpmRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpmRepositoryOutput).ToNpmRepositoryPtrOutputWithContext(ctx)
}

// NpmRepositoryPtrInput is an input type that accepts NpmRepositoryArgs, NpmRepositoryPtr and NpmRepositoryPtrOutput values.
// You can construct a concrete instance of `NpmRepositoryPtrInput` via:
//
//	        NpmRepositoryArgs{...}
//
//	or:
//
//	        nil
type NpmRepositoryPtrInput interface {
	pulumi.Input

	ToNpmRepositoryPtrOutput() NpmRepositoryPtrOutput
	ToNpmRepositoryPtrOutputWithContext(context.Context) NpmRepositoryPtrOutput
}

type npmRepositoryPtrType NpmRepositoryArgs

func NpmRepositoryPtr(v *NpmRepositoryArgs) NpmRepositoryPtrInput {
	return (*npmRepositoryPtrType)(v)
}

func (*npmRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NpmRepository)(nil)).Elem()
}

func (i *npmRepositoryPtrType) ToNpmRepositoryPtrOutput() NpmRepositoryPtrOutput {
	return i.ToNpmRepositoryPtrOutputWithContext(context.Background())
}

func (i *npmRepositoryPtrType) ToNpmRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpmRepositoryPtrOutput)
}

func (i *npmRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*NpmRepository] {
	return pulumix.Output[*NpmRepository]{
		OutputState: i.ToNpmRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a Npm remote repository.
type NpmRepositoryOutput struct{ *pulumi.OutputState }

func (NpmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmRepository)(nil)).Elem()
}

func (o NpmRepositoryOutput) ToNpmRepositoryOutput() NpmRepositoryOutput {
	return o
}

func (o NpmRepositoryOutput) ToNpmRepositoryOutputWithContext(ctx context.Context) NpmRepositoryOutput {
	return o
}

func (o NpmRepositoryOutput) ToNpmRepositoryPtrOutput() NpmRepositoryPtrOutput {
	return o.ToNpmRepositoryPtrOutputWithContext(context.Background())
}

func (o NpmRepositoryOutput) ToNpmRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NpmRepository) *NpmRepository {
		return &v
	}).(NpmRepositoryPtrOutput)
}

func (o NpmRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[NpmRepository] {
	return pulumix.Output[NpmRepository]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Npm repositories supported by Artifact Registry.
func (o NpmRepositoryOutput) PublicRepository() NpmRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v NpmRepository) *NpmRepositoryPublicRepository { return v.PublicRepository }).(NpmRepositoryPublicRepositoryPtrOutput)
}

type NpmRepositoryPtrOutput struct{ *pulumi.OutputState }

func (NpmRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NpmRepository)(nil)).Elem()
}

func (o NpmRepositoryPtrOutput) ToNpmRepositoryPtrOutput() NpmRepositoryPtrOutput {
	return o
}

func (o NpmRepositoryPtrOutput) ToNpmRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPtrOutput {
	return o
}

func (o NpmRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NpmRepository] {
	return pulumix.Output[*NpmRepository]{
		OutputState: o.OutputState,
	}
}

func (o NpmRepositoryPtrOutput) Elem() NpmRepositoryOutput {
	return o.ApplyT(func(v *NpmRepository) NpmRepository {
		if v != nil {
			return *v
		}
		var ret NpmRepository
		return ret
	}).(NpmRepositoryOutput)
}

// One of the publicly available Npm repositories supported by Artifact Registry.
func (o NpmRepositoryPtrOutput) PublicRepository() NpmRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *NpmRepository) *NpmRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(NpmRepositoryPublicRepositoryPtrOutput)
}

// Configuration for a Npm remote repository.
type NpmRepositoryResponse struct {
	// One of the publicly available Npm repositories supported by Artifact Registry.
	PublicRepository string `pulumi:"publicRepository"`
}

// Configuration for a Npm remote repository.
type NpmRepositoryResponseOutput struct{ *pulumi.OutputState }

func (NpmRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmRepositoryResponse)(nil)).Elem()
}

func (o NpmRepositoryResponseOutput) ToNpmRepositoryResponseOutput() NpmRepositoryResponseOutput {
	return o
}

func (o NpmRepositoryResponseOutput) ToNpmRepositoryResponseOutputWithContext(ctx context.Context) NpmRepositoryResponseOutput {
	return o
}

func (o NpmRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NpmRepositoryResponse] {
	return pulumix.Output[NpmRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Npm repositories supported by Artifact Registry.
func (o NpmRepositoryResponseOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v NpmRepositoryResponse) string { return v.PublicRepository }).(pulumi.StringOutput)
}

// Configuration for a Python remote repository.
type PythonRepository struct {
	// One of the publicly available Python repositories supported by Artifact Registry.
	PublicRepository *PythonRepositoryPublicRepository `pulumi:"publicRepository"`
}

// PythonRepositoryInput is an input type that accepts PythonRepositoryArgs and PythonRepositoryOutput values.
// You can construct a concrete instance of `PythonRepositoryInput` via:
//
//	PythonRepositoryArgs{...}
type PythonRepositoryInput interface {
	pulumi.Input

	ToPythonRepositoryOutput() PythonRepositoryOutput
	ToPythonRepositoryOutputWithContext(context.Context) PythonRepositoryOutput
}

// Configuration for a Python remote repository.
type PythonRepositoryArgs struct {
	// One of the publicly available Python repositories supported by Artifact Registry.
	PublicRepository PythonRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (PythonRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonRepository)(nil)).Elem()
}

func (i PythonRepositoryArgs) ToPythonRepositoryOutput() PythonRepositoryOutput {
	return i.ToPythonRepositoryOutputWithContext(context.Background())
}

func (i PythonRepositoryArgs) ToPythonRepositoryOutputWithContext(ctx context.Context) PythonRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PythonRepositoryOutput)
}

func (i PythonRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[PythonRepository] {
	return pulumix.Output[PythonRepository]{
		OutputState: i.ToPythonRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i PythonRepositoryArgs) ToPythonRepositoryPtrOutput() PythonRepositoryPtrOutput {
	return i.ToPythonRepositoryPtrOutputWithContext(context.Background())
}

func (i PythonRepositoryArgs) ToPythonRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PythonRepositoryOutput).ToPythonRepositoryPtrOutputWithContext(ctx)
}

// PythonRepositoryPtrInput is an input type that accepts PythonRepositoryArgs, PythonRepositoryPtr and PythonRepositoryPtrOutput values.
// You can construct a concrete instance of `PythonRepositoryPtrInput` via:
//
//	        PythonRepositoryArgs{...}
//
//	or:
//
//	        nil
type PythonRepositoryPtrInput interface {
	pulumi.Input

	ToPythonRepositoryPtrOutput() PythonRepositoryPtrOutput
	ToPythonRepositoryPtrOutputWithContext(context.Context) PythonRepositoryPtrOutput
}

type pythonRepositoryPtrType PythonRepositoryArgs

func PythonRepositoryPtr(v *PythonRepositoryArgs) PythonRepositoryPtrInput {
	return (*pythonRepositoryPtrType)(v)
}

func (*pythonRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PythonRepository)(nil)).Elem()
}

func (i *pythonRepositoryPtrType) ToPythonRepositoryPtrOutput() PythonRepositoryPtrOutput {
	return i.ToPythonRepositoryPtrOutputWithContext(context.Background())
}

func (i *pythonRepositoryPtrType) ToPythonRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PythonRepositoryPtrOutput)
}

func (i *pythonRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*PythonRepository] {
	return pulumix.Output[*PythonRepository]{
		OutputState: i.ToPythonRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a Python remote repository.
type PythonRepositoryOutput struct{ *pulumi.OutputState }

func (PythonRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonRepository)(nil)).Elem()
}

func (o PythonRepositoryOutput) ToPythonRepositoryOutput() PythonRepositoryOutput {
	return o
}

func (o PythonRepositoryOutput) ToPythonRepositoryOutputWithContext(ctx context.Context) PythonRepositoryOutput {
	return o
}

func (o PythonRepositoryOutput) ToPythonRepositoryPtrOutput() PythonRepositoryPtrOutput {
	return o.ToPythonRepositoryPtrOutputWithContext(context.Background())
}

func (o PythonRepositoryOutput) ToPythonRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PythonRepository) *PythonRepository {
		return &v
	}).(PythonRepositoryPtrOutput)
}

func (o PythonRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[PythonRepository] {
	return pulumix.Output[PythonRepository]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Python repositories supported by Artifact Registry.
func (o PythonRepositoryOutput) PublicRepository() PythonRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v PythonRepository) *PythonRepositoryPublicRepository { return v.PublicRepository }).(PythonRepositoryPublicRepositoryPtrOutput)
}

type PythonRepositoryPtrOutput struct{ *pulumi.OutputState }

func (PythonRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PythonRepository)(nil)).Elem()
}

func (o PythonRepositoryPtrOutput) ToPythonRepositoryPtrOutput() PythonRepositoryPtrOutput {
	return o
}

func (o PythonRepositoryPtrOutput) ToPythonRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPtrOutput {
	return o
}

func (o PythonRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PythonRepository] {
	return pulumix.Output[*PythonRepository]{
		OutputState: o.OutputState,
	}
}

func (o PythonRepositoryPtrOutput) Elem() PythonRepositoryOutput {
	return o.ApplyT(func(v *PythonRepository) PythonRepository {
		if v != nil {
			return *v
		}
		var ret PythonRepository
		return ret
	}).(PythonRepositoryOutput)
}

// One of the publicly available Python repositories supported by Artifact Registry.
func (o PythonRepositoryPtrOutput) PublicRepository() PythonRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *PythonRepository) *PythonRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(PythonRepositoryPublicRepositoryPtrOutput)
}

// Configuration for a Python remote repository.
type PythonRepositoryResponse struct {
	// One of the publicly available Python repositories supported by Artifact Registry.
	PublicRepository string `pulumi:"publicRepository"`
}

// Configuration for a Python remote repository.
type PythonRepositoryResponseOutput struct{ *pulumi.OutputState }

func (PythonRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonRepositoryResponse)(nil)).Elem()
}

func (o PythonRepositoryResponseOutput) ToPythonRepositoryResponseOutput() PythonRepositoryResponseOutput {
	return o
}

func (o PythonRepositoryResponseOutput) ToPythonRepositoryResponseOutputWithContext(ctx context.Context) PythonRepositoryResponseOutput {
	return o
}

func (o PythonRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PythonRepositoryResponse] {
	return pulumix.Output[PythonRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Python repositories supported by Artifact Registry.
func (o PythonRepositoryResponseOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v PythonRepositoryResponse) string { return v.PublicRepository }).(pulumi.StringOutput)
}

// Remote repository configuration.
type RemoteRepositoryConfig struct {
	// Specific settings for an Apt remote repository.
	AptRepository *AptRepository `pulumi:"aptRepository"`
	// The description of the remote source.
	Description *string `pulumi:"description"`
	// Specific settings for a Docker remote repository.
	DockerRepository *DockerRepository `pulumi:"dockerRepository"`
	// Specific settings for a Maven remote repository.
	MavenRepository *MavenRepository `pulumi:"mavenRepository"`
	// Specific settings for an Npm remote repository.
	NpmRepository *NpmRepository `pulumi:"npmRepository"`
	// Specific settings for a Python remote repository.
	PythonRepository *PythonRepository `pulumi:"pythonRepository"`
	// Optional. The credentials used to access the remote repository.
	UpstreamCredentials *UpstreamCredentials `pulumi:"upstreamCredentials"`
	// Specific settings for a Yum remote repository.
	YumRepository *YumRepository `pulumi:"yumRepository"`
}

// RemoteRepositoryConfigInput is an input type that accepts RemoteRepositoryConfigArgs and RemoteRepositoryConfigOutput values.
// You can construct a concrete instance of `RemoteRepositoryConfigInput` via:
//
//	RemoteRepositoryConfigArgs{...}
type RemoteRepositoryConfigInput interface {
	pulumi.Input

	ToRemoteRepositoryConfigOutput() RemoteRepositoryConfigOutput
	ToRemoteRepositoryConfigOutputWithContext(context.Context) RemoteRepositoryConfigOutput
}

// Remote repository configuration.
type RemoteRepositoryConfigArgs struct {
	// Specific settings for an Apt remote repository.
	AptRepository AptRepositoryPtrInput `pulumi:"aptRepository"`
	// The description of the remote source.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specific settings for a Docker remote repository.
	DockerRepository DockerRepositoryPtrInput `pulumi:"dockerRepository"`
	// Specific settings for a Maven remote repository.
	MavenRepository MavenRepositoryPtrInput `pulumi:"mavenRepository"`
	// Specific settings for an Npm remote repository.
	NpmRepository NpmRepositoryPtrInput `pulumi:"npmRepository"`
	// Specific settings for a Python remote repository.
	PythonRepository PythonRepositoryPtrInput `pulumi:"pythonRepository"`
	// Optional. The credentials used to access the remote repository.
	UpstreamCredentials UpstreamCredentialsPtrInput `pulumi:"upstreamCredentials"`
	// Specific settings for a Yum remote repository.
	YumRepository YumRepositoryPtrInput `pulumi:"yumRepository"`
}

func (RemoteRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteRepositoryConfig)(nil)).Elem()
}

func (i RemoteRepositoryConfigArgs) ToRemoteRepositoryConfigOutput() RemoteRepositoryConfigOutput {
	return i.ToRemoteRepositoryConfigOutputWithContext(context.Background())
}

func (i RemoteRepositoryConfigArgs) ToRemoteRepositoryConfigOutputWithContext(ctx context.Context) RemoteRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryConfigOutput)
}

func (i RemoteRepositoryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[RemoteRepositoryConfig] {
	return pulumix.Output[RemoteRepositoryConfig]{
		OutputState: i.ToRemoteRepositoryConfigOutputWithContext(ctx).OutputState,
	}
}

func (i RemoteRepositoryConfigArgs) ToRemoteRepositoryConfigPtrOutput() RemoteRepositoryConfigPtrOutput {
	return i.ToRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i RemoteRepositoryConfigArgs) ToRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RemoteRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryConfigOutput).ToRemoteRepositoryConfigPtrOutputWithContext(ctx)
}

// RemoteRepositoryConfigPtrInput is an input type that accepts RemoteRepositoryConfigArgs, RemoteRepositoryConfigPtr and RemoteRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `RemoteRepositoryConfigPtrInput` via:
//
//	        RemoteRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type RemoteRepositoryConfigPtrInput interface {
	pulumi.Input

	ToRemoteRepositoryConfigPtrOutput() RemoteRepositoryConfigPtrOutput
	ToRemoteRepositoryConfigPtrOutputWithContext(context.Context) RemoteRepositoryConfigPtrOutput
}

type remoteRepositoryConfigPtrType RemoteRepositoryConfigArgs

func RemoteRepositoryConfigPtr(v *RemoteRepositoryConfigArgs) RemoteRepositoryConfigPtrInput {
	return (*remoteRepositoryConfigPtrType)(v)
}

func (*remoteRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteRepositoryConfig)(nil)).Elem()
}

func (i *remoteRepositoryConfigPtrType) ToRemoteRepositoryConfigPtrOutput() RemoteRepositoryConfigPtrOutput {
	return i.ToRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *remoteRepositoryConfigPtrType) ToRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RemoteRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryConfigPtrOutput)
}

func (i *remoteRepositoryConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*RemoteRepositoryConfig] {
	return pulumix.Output[*RemoteRepositoryConfig]{
		OutputState: i.ToRemoteRepositoryConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Remote repository configuration.
type RemoteRepositoryConfigOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteRepositoryConfig)(nil)).Elem()
}

func (o RemoteRepositoryConfigOutput) ToRemoteRepositoryConfigOutput() RemoteRepositoryConfigOutput {
	return o
}

func (o RemoteRepositoryConfigOutput) ToRemoteRepositoryConfigOutputWithContext(ctx context.Context) RemoteRepositoryConfigOutput {
	return o
}

func (o RemoteRepositoryConfigOutput) ToRemoteRepositoryConfigPtrOutput() RemoteRepositoryConfigPtrOutput {
	return o.ToRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o RemoteRepositoryConfigOutput) ToRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RemoteRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteRepositoryConfig) *RemoteRepositoryConfig {
		return &v
	}).(RemoteRepositoryConfigPtrOutput)
}

func (o RemoteRepositoryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RemoteRepositoryConfig] {
	return pulumix.Output[RemoteRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

// Specific settings for an Apt remote repository.
func (o RemoteRepositoryConfigOutput) AptRepository() AptRepositoryPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *AptRepository { return v.AptRepository }).(AptRepositoryPtrOutput)
}

// The description of the remote source.
func (o RemoteRepositoryConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specific settings for a Docker remote repository.
func (o RemoteRepositoryConfigOutput) DockerRepository() DockerRepositoryPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *DockerRepository { return v.DockerRepository }).(DockerRepositoryPtrOutput)
}

// Specific settings for a Maven remote repository.
func (o RemoteRepositoryConfigOutput) MavenRepository() MavenRepositoryPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *MavenRepository { return v.MavenRepository }).(MavenRepositoryPtrOutput)
}

// Specific settings for an Npm remote repository.
func (o RemoteRepositoryConfigOutput) NpmRepository() NpmRepositoryPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *NpmRepository { return v.NpmRepository }).(NpmRepositoryPtrOutput)
}

// Specific settings for a Python remote repository.
func (o RemoteRepositoryConfigOutput) PythonRepository() PythonRepositoryPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *PythonRepository { return v.PythonRepository }).(PythonRepositoryPtrOutput)
}

// Optional. The credentials used to access the remote repository.
func (o RemoteRepositoryConfigOutput) UpstreamCredentials() UpstreamCredentialsPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *UpstreamCredentials { return v.UpstreamCredentials }).(UpstreamCredentialsPtrOutput)
}

// Specific settings for a Yum remote repository.
func (o RemoteRepositoryConfigOutput) YumRepository() YumRepositoryPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *YumRepository { return v.YumRepository }).(YumRepositoryPtrOutput)
}

type RemoteRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteRepositoryConfig)(nil)).Elem()
}

func (o RemoteRepositoryConfigPtrOutput) ToRemoteRepositoryConfigPtrOutput() RemoteRepositoryConfigPtrOutput {
	return o
}

func (o RemoteRepositoryConfigPtrOutput) ToRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RemoteRepositoryConfigPtrOutput {
	return o
}

func (o RemoteRepositoryConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RemoteRepositoryConfig] {
	return pulumix.Output[*RemoteRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o RemoteRepositoryConfigPtrOutput) Elem() RemoteRepositoryConfigOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) RemoteRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret RemoteRepositoryConfig
		return ret
	}).(RemoteRepositoryConfigOutput)
}

// Specific settings for an Apt remote repository.
func (o RemoteRepositoryConfigPtrOutput) AptRepository() AptRepositoryPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *AptRepository {
		if v == nil {
			return nil
		}
		return v.AptRepository
	}).(AptRepositoryPtrOutput)
}

// The description of the remote source.
func (o RemoteRepositoryConfigPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Specific settings for a Docker remote repository.
func (o RemoteRepositoryConfigPtrOutput) DockerRepository() DockerRepositoryPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *DockerRepository {
		if v == nil {
			return nil
		}
		return v.DockerRepository
	}).(DockerRepositoryPtrOutput)
}

// Specific settings for a Maven remote repository.
func (o RemoteRepositoryConfigPtrOutput) MavenRepository() MavenRepositoryPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *MavenRepository {
		if v == nil {
			return nil
		}
		return v.MavenRepository
	}).(MavenRepositoryPtrOutput)
}

// Specific settings for an Npm remote repository.
func (o RemoteRepositoryConfigPtrOutput) NpmRepository() NpmRepositoryPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *NpmRepository {
		if v == nil {
			return nil
		}
		return v.NpmRepository
	}).(NpmRepositoryPtrOutput)
}

// Specific settings for a Python remote repository.
func (o RemoteRepositoryConfigPtrOutput) PythonRepository() PythonRepositoryPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *PythonRepository {
		if v == nil {
			return nil
		}
		return v.PythonRepository
	}).(PythonRepositoryPtrOutput)
}

// Optional. The credentials used to access the remote repository.
func (o RemoteRepositoryConfigPtrOutput) UpstreamCredentials() UpstreamCredentialsPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *UpstreamCredentials {
		if v == nil {
			return nil
		}
		return v.UpstreamCredentials
	}).(UpstreamCredentialsPtrOutput)
}

// Specific settings for a Yum remote repository.
func (o RemoteRepositoryConfigPtrOutput) YumRepository() YumRepositoryPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *YumRepository {
		if v == nil {
			return nil
		}
		return v.YumRepository
	}).(YumRepositoryPtrOutput)
}

// Remote repository configuration.
type RemoteRepositoryConfigResponse struct {
	// Specific settings for an Apt remote repository.
	AptRepository AptRepositoryResponse `pulumi:"aptRepository"`
	// The description of the remote source.
	Description string `pulumi:"description"`
	// Specific settings for a Docker remote repository.
	DockerRepository DockerRepositoryResponse `pulumi:"dockerRepository"`
	// Specific settings for a Maven remote repository.
	MavenRepository MavenRepositoryResponse `pulumi:"mavenRepository"`
	// Specific settings for an Npm remote repository.
	NpmRepository NpmRepositoryResponse `pulumi:"npmRepository"`
	// Specific settings for a Python remote repository.
	PythonRepository PythonRepositoryResponse `pulumi:"pythonRepository"`
	// Optional. The credentials used to access the remote repository.
	UpstreamCredentials UpstreamCredentialsResponse `pulumi:"upstreamCredentials"`
	// Specific settings for a Yum remote repository.
	YumRepository YumRepositoryResponse `pulumi:"yumRepository"`
}

// Remote repository configuration.
type RemoteRepositoryConfigResponseOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteRepositoryConfigResponse)(nil)).Elem()
}

func (o RemoteRepositoryConfigResponseOutput) ToRemoteRepositoryConfigResponseOutput() RemoteRepositoryConfigResponseOutput {
	return o
}

func (o RemoteRepositoryConfigResponseOutput) ToRemoteRepositoryConfigResponseOutputWithContext(ctx context.Context) RemoteRepositoryConfigResponseOutput {
	return o
}

func (o RemoteRepositoryConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RemoteRepositoryConfigResponse] {
	return pulumix.Output[RemoteRepositoryConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Specific settings for an Apt remote repository.
func (o RemoteRepositoryConfigResponseOutput) AptRepository() AptRepositoryResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) AptRepositoryResponse { return v.AptRepository }).(AptRepositoryResponseOutput)
}

// The description of the remote source.
func (o RemoteRepositoryConfigResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Specific settings for a Docker remote repository.
func (o RemoteRepositoryConfigResponseOutput) DockerRepository() DockerRepositoryResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) DockerRepositoryResponse { return v.DockerRepository }).(DockerRepositoryResponseOutput)
}

// Specific settings for a Maven remote repository.
func (o RemoteRepositoryConfigResponseOutput) MavenRepository() MavenRepositoryResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) MavenRepositoryResponse { return v.MavenRepository }).(MavenRepositoryResponseOutput)
}

// Specific settings for an Npm remote repository.
func (o RemoteRepositoryConfigResponseOutput) NpmRepository() NpmRepositoryResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) NpmRepositoryResponse { return v.NpmRepository }).(NpmRepositoryResponseOutput)
}

// Specific settings for a Python remote repository.
func (o RemoteRepositoryConfigResponseOutput) PythonRepository() PythonRepositoryResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) PythonRepositoryResponse { return v.PythonRepository }).(PythonRepositoryResponseOutput)
}

// Optional. The credentials used to access the remote repository.
func (o RemoteRepositoryConfigResponseOutput) UpstreamCredentials() UpstreamCredentialsResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) UpstreamCredentialsResponse { return v.UpstreamCredentials }).(UpstreamCredentialsResponseOutput)
}

// Specific settings for a Yum remote repository.
func (o RemoteRepositoryConfigResponseOutput) YumRepository() YumRepositoryResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) YumRepositoryResponse { return v.YumRepository }).(YumRepositoryResponseOutput)
}

// The credentials to access the remote repository.
type UpstreamCredentials struct {
	// Use username and password to access the remote repository.
	UsernamePasswordCredentials *UsernamePasswordCredentials `pulumi:"usernamePasswordCredentials"`
}

// UpstreamCredentialsInput is an input type that accepts UpstreamCredentialsArgs and UpstreamCredentialsOutput values.
// You can construct a concrete instance of `UpstreamCredentialsInput` via:
//
//	UpstreamCredentialsArgs{...}
type UpstreamCredentialsInput interface {
	pulumi.Input

	ToUpstreamCredentialsOutput() UpstreamCredentialsOutput
	ToUpstreamCredentialsOutputWithContext(context.Context) UpstreamCredentialsOutput
}

// The credentials to access the remote repository.
type UpstreamCredentialsArgs struct {
	// Use username and password to access the remote repository.
	UsernamePasswordCredentials UsernamePasswordCredentialsPtrInput `pulumi:"usernamePasswordCredentials"`
}

func (UpstreamCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamCredentials)(nil)).Elem()
}

func (i UpstreamCredentialsArgs) ToUpstreamCredentialsOutput() UpstreamCredentialsOutput {
	return i.ToUpstreamCredentialsOutputWithContext(context.Background())
}

func (i UpstreamCredentialsArgs) ToUpstreamCredentialsOutputWithContext(ctx context.Context) UpstreamCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamCredentialsOutput)
}

func (i UpstreamCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[UpstreamCredentials] {
	return pulumix.Output[UpstreamCredentials]{
		OutputState: i.ToUpstreamCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i UpstreamCredentialsArgs) ToUpstreamCredentialsPtrOutput() UpstreamCredentialsPtrOutput {
	return i.ToUpstreamCredentialsPtrOutputWithContext(context.Background())
}

func (i UpstreamCredentialsArgs) ToUpstreamCredentialsPtrOutputWithContext(ctx context.Context) UpstreamCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamCredentialsOutput).ToUpstreamCredentialsPtrOutputWithContext(ctx)
}

// UpstreamCredentialsPtrInput is an input type that accepts UpstreamCredentialsArgs, UpstreamCredentialsPtr and UpstreamCredentialsPtrOutput values.
// You can construct a concrete instance of `UpstreamCredentialsPtrInput` via:
//
//	        UpstreamCredentialsArgs{...}
//
//	or:
//
//	        nil
type UpstreamCredentialsPtrInput interface {
	pulumi.Input

	ToUpstreamCredentialsPtrOutput() UpstreamCredentialsPtrOutput
	ToUpstreamCredentialsPtrOutputWithContext(context.Context) UpstreamCredentialsPtrOutput
}

type upstreamCredentialsPtrType UpstreamCredentialsArgs

func UpstreamCredentialsPtr(v *UpstreamCredentialsArgs) UpstreamCredentialsPtrInput {
	return (*upstreamCredentialsPtrType)(v)
}

func (*upstreamCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpstreamCredentials)(nil)).Elem()
}

func (i *upstreamCredentialsPtrType) ToUpstreamCredentialsPtrOutput() UpstreamCredentialsPtrOutput {
	return i.ToUpstreamCredentialsPtrOutputWithContext(context.Background())
}

func (i *upstreamCredentialsPtrType) ToUpstreamCredentialsPtrOutputWithContext(ctx context.Context) UpstreamCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamCredentialsPtrOutput)
}

func (i *upstreamCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*UpstreamCredentials] {
	return pulumix.Output[*UpstreamCredentials]{
		OutputState: i.ToUpstreamCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

// The credentials to access the remote repository.
type UpstreamCredentialsOutput struct{ *pulumi.OutputState }

func (UpstreamCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamCredentials)(nil)).Elem()
}

func (o UpstreamCredentialsOutput) ToUpstreamCredentialsOutput() UpstreamCredentialsOutput {
	return o
}

func (o UpstreamCredentialsOutput) ToUpstreamCredentialsOutputWithContext(ctx context.Context) UpstreamCredentialsOutput {
	return o
}

func (o UpstreamCredentialsOutput) ToUpstreamCredentialsPtrOutput() UpstreamCredentialsPtrOutput {
	return o.ToUpstreamCredentialsPtrOutputWithContext(context.Background())
}

func (o UpstreamCredentialsOutput) ToUpstreamCredentialsPtrOutputWithContext(ctx context.Context) UpstreamCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpstreamCredentials) *UpstreamCredentials {
		return &v
	}).(UpstreamCredentialsPtrOutput)
}

func (o UpstreamCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[UpstreamCredentials] {
	return pulumix.Output[UpstreamCredentials]{
		OutputState: o.OutputState,
	}
}

// Use username and password to access the remote repository.
func (o UpstreamCredentialsOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsPtrOutput {
	return o.ApplyT(func(v UpstreamCredentials) *UsernamePasswordCredentials { return v.UsernamePasswordCredentials }).(UsernamePasswordCredentialsPtrOutput)
}

type UpstreamCredentialsPtrOutput struct{ *pulumi.OutputState }

func (UpstreamCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpstreamCredentials)(nil)).Elem()
}

func (o UpstreamCredentialsPtrOutput) ToUpstreamCredentialsPtrOutput() UpstreamCredentialsPtrOutput {
	return o
}

func (o UpstreamCredentialsPtrOutput) ToUpstreamCredentialsPtrOutputWithContext(ctx context.Context) UpstreamCredentialsPtrOutput {
	return o
}

func (o UpstreamCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UpstreamCredentials] {
	return pulumix.Output[*UpstreamCredentials]{
		OutputState: o.OutputState,
	}
}

func (o UpstreamCredentialsPtrOutput) Elem() UpstreamCredentialsOutput {
	return o.ApplyT(func(v *UpstreamCredentials) UpstreamCredentials {
		if v != nil {
			return *v
		}
		var ret UpstreamCredentials
		return ret
	}).(UpstreamCredentialsOutput)
}

// Use username and password to access the remote repository.
func (o UpstreamCredentialsPtrOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsPtrOutput {
	return o.ApplyT(func(v *UpstreamCredentials) *UsernamePasswordCredentials {
		if v == nil {
			return nil
		}
		return v.UsernamePasswordCredentials
	}).(UsernamePasswordCredentialsPtrOutput)
}

// The credentials to access the remote repository.
type UpstreamCredentialsResponse struct {
	// Use username and password to access the remote repository.
	UsernamePasswordCredentials UsernamePasswordCredentialsResponse `pulumi:"usernamePasswordCredentials"`
}

// The credentials to access the remote repository.
type UpstreamCredentialsResponseOutput struct{ *pulumi.OutputState }

func (UpstreamCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamCredentialsResponse)(nil)).Elem()
}

func (o UpstreamCredentialsResponseOutput) ToUpstreamCredentialsResponseOutput() UpstreamCredentialsResponseOutput {
	return o
}

func (o UpstreamCredentialsResponseOutput) ToUpstreamCredentialsResponseOutputWithContext(ctx context.Context) UpstreamCredentialsResponseOutput {
	return o
}

func (o UpstreamCredentialsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UpstreamCredentialsResponse] {
	return pulumix.Output[UpstreamCredentialsResponse]{
		OutputState: o.OutputState,
	}
}

// Use username and password to access the remote repository.
func (o UpstreamCredentialsResponseOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsResponseOutput {
	return o.ApplyT(func(v UpstreamCredentialsResponse) UsernamePasswordCredentialsResponse {
		return v.UsernamePasswordCredentials
	}).(UsernamePasswordCredentialsResponseOutput)
}

// Artifact policy configuration for the repository contents.
type UpstreamPolicy struct {
	// The user-provided ID of the upstream policy.
	Id *string `pulumi:"id"`
	// Entries with a greater priority value take precedence in the pull order.
	Priority *int `pulumi:"priority"`
	// A reference to the repository resource, for example: `projects/p1/locations/us-central1/repositories/repo1`.
	Repository *string `pulumi:"repository"`
}

// UpstreamPolicyInput is an input type that accepts UpstreamPolicyArgs and UpstreamPolicyOutput values.
// You can construct a concrete instance of `UpstreamPolicyInput` via:
//
//	UpstreamPolicyArgs{...}
type UpstreamPolicyInput interface {
	pulumi.Input

	ToUpstreamPolicyOutput() UpstreamPolicyOutput
	ToUpstreamPolicyOutputWithContext(context.Context) UpstreamPolicyOutput
}

// Artifact policy configuration for the repository contents.
type UpstreamPolicyArgs struct {
	// The user-provided ID of the upstream policy.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Entries with a greater priority value take precedence in the pull order.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// A reference to the repository resource, for example: `projects/p1/locations/us-central1/repositories/repo1`.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
}

func (UpstreamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamPolicy)(nil)).Elem()
}

func (i UpstreamPolicyArgs) ToUpstreamPolicyOutput() UpstreamPolicyOutput {
	return i.ToUpstreamPolicyOutputWithContext(context.Background())
}

func (i UpstreamPolicyArgs) ToUpstreamPolicyOutputWithContext(ctx context.Context) UpstreamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamPolicyOutput)
}

func (i UpstreamPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[UpstreamPolicy] {
	return pulumix.Output[UpstreamPolicy]{
		OutputState: i.ToUpstreamPolicyOutputWithContext(ctx).OutputState,
	}
}

// UpstreamPolicyArrayInput is an input type that accepts UpstreamPolicyArray and UpstreamPolicyArrayOutput values.
// You can construct a concrete instance of `UpstreamPolicyArrayInput` via:
//
//	UpstreamPolicyArray{ UpstreamPolicyArgs{...} }
type UpstreamPolicyArrayInput interface {
	pulumi.Input

	ToUpstreamPolicyArrayOutput() UpstreamPolicyArrayOutput
	ToUpstreamPolicyArrayOutputWithContext(context.Context) UpstreamPolicyArrayOutput
}

type UpstreamPolicyArray []UpstreamPolicyInput

func (UpstreamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamPolicy)(nil)).Elem()
}

func (i UpstreamPolicyArray) ToUpstreamPolicyArrayOutput() UpstreamPolicyArrayOutput {
	return i.ToUpstreamPolicyArrayOutputWithContext(context.Background())
}

func (i UpstreamPolicyArray) ToUpstreamPolicyArrayOutputWithContext(ctx context.Context) UpstreamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamPolicyArrayOutput)
}

func (i UpstreamPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]UpstreamPolicy] {
	return pulumix.Output[[]UpstreamPolicy]{
		OutputState: i.ToUpstreamPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// Artifact policy configuration for the repository contents.
type UpstreamPolicyOutput struct{ *pulumi.OutputState }

func (UpstreamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamPolicy)(nil)).Elem()
}

func (o UpstreamPolicyOutput) ToUpstreamPolicyOutput() UpstreamPolicyOutput {
	return o
}

func (o UpstreamPolicyOutput) ToUpstreamPolicyOutputWithContext(ctx context.Context) UpstreamPolicyOutput {
	return o
}

func (o UpstreamPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[UpstreamPolicy] {
	return pulumix.Output[UpstreamPolicy]{
		OutputState: o.OutputState,
	}
}

// The user-provided ID of the upstream policy.
func (o UpstreamPolicyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamPolicy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Entries with a greater priority value take precedence in the pull order.
func (o UpstreamPolicyOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UpstreamPolicy) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// A reference to the repository resource, for example: `projects/p1/locations/us-central1/repositories/repo1`.
func (o UpstreamPolicyOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamPolicy) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

type UpstreamPolicyArrayOutput struct{ *pulumi.OutputState }

func (UpstreamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamPolicy)(nil)).Elem()
}

func (o UpstreamPolicyArrayOutput) ToUpstreamPolicyArrayOutput() UpstreamPolicyArrayOutput {
	return o
}

func (o UpstreamPolicyArrayOutput) ToUpstreamPolicyArrayOutputWithContext(ctx context.Context) UpstreamPolicyArrayOutput {
	return o
}

func (o UpstreamPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]UpstreamPolicy] {
	return pulumix.Output[[]UpstreamPolicy]{
		OutputState: o.OutputState,
	}
}

func (o UpstreamPolicyArrayOutput) Index(i pulumi.IntInput) UpstreamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpstreamPolicy {
		return vs[0].([]UpstreamPolicy)[vs[1].(int)]
	}).(UpstreamPolicyOutput)
}

// Artifact policy configuration for the repository contents.
type UpstreamPolicyResponse struct {
	// Entries with a greater priority value take precedence in the pull order.
	Priority int `pulumi:"priority"`
	// A reference to the repository resource, for example: `projects/p1/locations/us-central1/repositories/repo1`.
	Repository string `pulumi:"repository"`
}

// Artifact policy configuration for the repository contents.
type UpstreamPolicyResponseOutput struct{ *pulumi.OutputState }

func (UpstreamPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamPolicyResponse)(nil)).Elem()
}

func (o UpstreamPolicyResponseOutput) ToUpstreamPolicyResponseOutput() UpstreamPolicyResponseOutput {
	return o
}

func (o UpstreamPolicyResponseOutput) ToUpstreamPolicyResponseOutputWithContext(ctx context.Context) UpstreamPolicyResponseOutput {
	return o
}

func (o UpstreamPolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UpstreamPolicyResponse] {
	return pulumix.Output[UpstreamPolicyResponse]{
		OutputState: o.OutputState,
	}
}

// Entries with a greater priority value take precedence in the pull order.
func (o UpstreamPolicyResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v UpstreamPolicyResponse) int { return v.Priority }).(pulumi.IntOutput)
}

// A reference to the repository resource, for example: `projects/p1/locations/us-central1/repositories/repo1`.
func (o UpstreamPolicyResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v UpstreamPolicyResponse) string { return v.Repository }).(pulumi.StringOutput)
}

type UpstreamPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (UpstreamPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamPolicyResponse)(nil)).Elem()
}

func (o UpstreamPolicyResponseArrayOutput) ToUpstreamPolicyResponseArrayOutput() UpstreamPolicyResponseArrayOutput {
	return o
}

func (o UpstreamPolicyResponseArrayOutput) ToUpstreamPolicyResponseArrayOutputWithContext(ctx context.Context) UpstreamPolicyResponseArrayOutput {
	return o
}

func (o UpstreamPolicyResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]UpstreamPolicyResponse] {
	return pulumix.Output[[]UpstreamPolicyResponse]{
		OutputState: o.OutputState,
	}
}

func (o UpstreamPolicyResponseArrayOutput) Index(i pulumi.IntInput) UpstreamPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpstreamPolicyResponse {
		return vs[0].([]UpstreamPolicyResponse)[vs[1].(int)]
	}).(UpstreamPolicyResponseOutput)
}

// Username and password credentials.
type UsernamePasswordCredentials struct {
	// The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.
	PasswordSecretVersion *string `pulumi:"passwordSecretVersion"`
	// The username to access the remote repository.
	Username *string `pulumi:"username"`
}

// UsernamePasswordCredentialsInput is an input type that accepts UsernamePasswordCredentialsArgs and UsernamePasswordCredentialsOutput values.
// You can construct a concrete instance of `UsernamePasswordCredentialsInput` via:
//
//	UsernamePasswordCredentialsArgs{...}
type UsernamePasswordCredentialsInput interface {
	pulumi.Input

	ToUsernamePasswordCredentialsOutput() UsernamePasswordCredentialsOutput
	ToUsernamePasswordCredentialsOutputWithContext(context.Context) UsernamePasswordCredentialsOutput
}

// Username and password credentials.
type UsernamePasswordCredentialsArgs struct {
	// The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.
	PasswordSecretVersion pulumi.StringPtrInput `pulumi:"passwordSecretVersion"`
	// The username to access the remote repository.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (UsernamePasswordCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordCredentials)(nil)).Elem()
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsOutput() UsernamePasswordCredentialsOutput {
	return i.ToUsernamePasswordCredentialsOutputWithContext(context.Background())
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsOutputWithContext(ctx context.Context) UsernamePasswordCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernamePasswordCredentialsOutput)
}

func (i UsernamePasswordCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[UsernamePasswordCredentials] {
	return pulumix.Output[UsernamePasswordCredentials]{
		OutputState: i.ToUsernamePasswordCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return i.ToUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernamePasswordCredentialsOutput).ToUsernamePasswordCredentialsPtrOutputWithContext(ctx)
}

// UsernamePasswordCredentialsPtrInput is an input type that accepts UsernamePasswordCredentialsArgs, UsernamePasswordCredentialsPtr and UsernamePasswordCredentialsPtrOutput values.
// You can construct a concrete instance of `UsernamePasswordCredentialsPtrInput` via:
//
//	        UsernamePasswordCredentialsArgs{...}
//
//	or:
//
//	        nil
type UsernamePasswordCredentialsPtrInput interface {
	pulumi.Input

	ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput
	ToUsernamePasswordCredentialsPtrOutputWithContext(context.Context) UsernamePasswordCredentialsPtrOutput
}

type usernamePasswordCredentialsPtrType UsernamePasswordCredentialsArgs

func UsernamePasswordCredentialsPtr(v *UsernamePasswordCredentialsArgs) UsernamePasswordCredentialsPtrInput {
	return (*usernamePasswordCredentialsPtrType)(v)
}

func (*usernamePasswordCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsernamePasswordCredentials)(nil)).Elem()
}

func (i *usernamePasswordCredentialsPtrType) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return i.ToUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (i *usernamePasswordCredentialsPtrType) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernamePasswordCredentialsPtrOutput)
}

func (i *usernamePasswordCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*UsernamePasswordCredentials] {
	return pulumix.Output[*UsernamePasswordCredentials]{
		OutputState: i.ToUsernamePasswordCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

// Username and password credentials.
type UsernamePasswordCredentialsOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordCredentials)(nil)).Elem()
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsOutput() UsernamePasswordCredentialsOutput {
	return o
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsOutputWithContext(ctx context.Context) UsernamePasswordCredentialsOutput {
	return o
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return o.ToUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsernamePasswordCredentials) *UsernamePasswordCredentials {
		return &v
	}).(UsernamePasswordCredentialsPtrOutput)
}

func (o UsernamePasswordCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[UsernamePasswordCredentials] {
	return pulumix.Output[UsernamePasswordCredentials]{
		OutputState: o.OutputState,
	}
}

// The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.
func (o UsernamePasswordCredentialsOutput) PasswordSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsernamePasswordCredentials) *string { return v.PasswordSecretVersion }).(pulumi.StringPtrOutput)
}

// The username to access the remote repository.
func (o UsernamePasswordCredentialsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsernamePasswordCredentials) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type UsernamePasswordCredentialsPtrOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsernamePasswordCredentials)(nil)).Elem()
}

func (o UsernamePasswordCredentialsPtrOutput) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return o
}

func (o UsernamePasswordCredentialsPtrOutput) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return o
}

func (o UsernamePasswordCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UsernamePasswordCredentials] {
	return pulumix.Output[*UsernamePasswordCredentials]{
		OutputState: o.OutputState,
	}
}

func (o UsernamePasswordCredentialsPtrOutput) Elem() UsernamePasswordCredentialsOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentials) UsernamePasswordCredentials {
		if v != nil {
			return *v
		}
		var ret UsernamePasswordCredentials
		return ret
	}).(UsernamePasswordCredentialsOutput)
}

// The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.
func (o UsernamePasswordCredentialsPtrOutput) PasswordSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentials) *string {
		if v == nil {
			return nil
		}
		return v.PasswordSecretVersion
	}).(pulumi.StringPtrOutput)
}

// The username to access the remote repository.
func (o UsernamePasswordCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentials) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Username and password credentials.
type UsernamePasswordCredentialsResponse struct {
	// The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.
	PasswordSecretVersion string `pulumi:"passwordSecretVersion"`
	// The username to access the remote repository.
	Username string `pulumi:"username"`
}

// Username and password credentials.
type UsernamePasswordCredentialsResponseOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordCredentialsResponse)(nil)).Elem()
}

func (o UsernamePasswordCredentialsResponseOutput) ToUsernamePasswordCredentialsResponseOutput() UsernamePasswordCredentialsResponseOutput {
	return o
}

func (o UsernamePasswordCredentialsResponseOutput) ToUsernamePasswordCredentialsResponseOutputWithContext(ctx context.Context) UsernamePasswordCredentialsResponseOutput {
	return o
}

func (o UsernamePasswordCredentialsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UsernamePasswordCredentialsResponse] {
	return pulumix.Output[UsernamePasswordCredentialsResponse]{
		OutputState: o.OutputState,
	}
}

// The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.
func (o UsernamePasswordCredentialsResponseOutput) PasswordSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordCredentialsResponse) string { return v.PasswordSecretVersion }).(pulumi.StringOutput)
}

// The username to access the remote repository.
func (o UsernamePasswordCredentialsResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordCredentialsResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Virtual repository configuration.
type VirtualRepositoryConfig struct {
	// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
	UpstreamPolicies []UpstreamPolicy `pulumi:"upstreamPolicies"`
}

// VirtualRepositoryConfigInput is an input type that accepts VirtualRepositoryConfigArgs and VirtualRepositoryConfigOutput values.
// You can construct a concrete instance of `VirtualRepositoryConfigInput` via:
//
//	VirtualRepositoryConfigArgs{...}
type VirtualRepositoryConfigInput interface {
	pulumi.Input

	ToVirtualRepositoryConfigOutput() VirtualRepositoryConfigOutput
	ToVirtualRepositoryConfigOutputWithContext(context.Context) VirtualRepositoryConfigOutput
}

// Virtual repository configuration.
type VirtualRepositoryConfigArgs struct {
	// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
	UpstreamPolicies UpstreamPolicyArrayInput `pulumi:"upstreamPolicies"`
}

func (VirtualRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRepositoryConfig)(nil)).Elem()
}

func (i VirtualRepositoryConfigArgs) ToVirtualRepositoryConfigOutput() VirtualRepositoryConfigOutput {
	return i.ToVirtualRepositoryConfigOutputWithContext(context.Background())
}

func (i VirtualRepositoryConfigArgs) ToVirtualRepositoryConfigOutputWithContext(ctx context.Context) VirtualRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryConfigOutput)
}

func (i VirtualRepositoryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualRepositoryConfig] {
	return pulumix.Output[VirtualRepositoryConfig]{
		OutputState: i.ToVirtualRepositoryConfigOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualRepositoryConfigArgs) ToVirtualRepositoryConfigPtrOutput() VirtualRepositoryConfigPtrOutput {
	return i.ToVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i VirtualRepositoryConfigArgs) ToVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) VirtualRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryConfigOutput).ToVirtualRepositoryConfigPtrOutputWithContext(ctx)
}

// VirtualRepositoryConfigPtrInput is an input type that accepts VirtualRepositoryConfigArgs, VirtualRepositoryConfigPtr and VirtualRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `VirtualRepositoryConfigPtrInput` via:
//
//	        VirtualRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type VirtualRepositoryConfigPtrInput interface {
	pulumi.Input

	ToVirtualRepositoryConfigPtrOutput() VirtualRepositoryConfigPtrOutput
	ToVirtualRepositoryConfigPtrOutputWithContext(context.Context) VirtualRepositoryConfigPtrOutput
}

type virtualRepositoryConfigPtrType VirtualRepositoryConfigArgs

func VirtualRepositoryConfigPtr(v *VirtualRepositoryConfigArgs) VirtualRepositoryConfigPtrInput {
	return (*virtualRepositoryConfigPtrType)(v)
}

func (*virtualRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualRepositoryConfig)(nil)).Elem()
}

func (i *virtualRepositoryConfigPtrType) ToVirtualRepositoryConfigPtrOutput() VirtualRepositoryConfigPtrOutput {
	return i.ToVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *virtualRepositoryConfigPtrType) ToVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) VirtualRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryConfigPtrOutput)
}

func (i *virtualRepositoryConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualRepositoryConfig] {
	return pulumix.Output[*VirtualRepositoryConfig]{
		OutputState: i.ToVirtualRepositoryConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Virtual repository configuration.
type VirtualRepositoryConfigOutput struct{ *pulumi.OutputState }

func (VirtualRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRepositoryConfig)(nil)).Elem()
}

func (o VirtualRepositoryConfigOutput) ToVirtualRepositoryConfigOutput() VirtualRepositoryConfigOutput {
	return o
}

func (o VirtualRepositoryConfigOutput) ToVirtualRepositoryConfigOutputWithContext(ctx context.Context) VirtualRepositoryConfigOutput {
	return o
}

func (o VirtualRepositoryConfigOutput) ToVirtualRepositoryConfigPtrOutput() VirtualRepositoryConfigPtrOutput {
	return o.ToVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o VirtualRepositoryConfigOutput) ToVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) VirtualRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualRepositoryConfig) *VirtualRepositoryConfig {
		return &v
	}).(VirtualRepositoryConfigPtrOutput)
}

func (o VirtualRepositoryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualRepositoryConfig] {
	return pulumix.Output[VirtualRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
func (o VirtualRepositoryConfigOutput) UpstreamPolicies() UpstreamPolicyArrayOutput {
	return o.ApplyT(func(v VirtualRepositoryConfig) []UpstreamPolicy { return v.UpstreamPolicies }).(UpstreamPolicyArrayOutput)
}

type VirtualRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (VirtualRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualRepositoryConfig)(nil)).Elem()
}

func (o VirtualRepositoryConfigPtrOutput) ToVirtualRepositoryConfigPtrOutput() VirtualRepositoryConfigPtrOutput {
	return o
}

func (o VirtualRepositoryConfigPtrOutput) ToVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) VirtualRepositoryConfigPtrOutput {
	return o
}

func (o VirtualRepositoryConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualRepositoryConfig] {
	return pulumix.Output[*VirtualRepositoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o VirtualRepositoryConfigPtrOutput) Elem() VirtualRepositoryConfigOutput {
	return o.ApplyT(func(v *VirtualRepositoryConfig) VirtualRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret VirtualRepositoryConfig
		return ret
	}).(VirtualRepositoryConfigOutput)
}

// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
func (o VirtualRepositoryConfigPtrOutput) UpstreamPolicies() UpstreamPolicyArrayOutput {
	return o.ApplyT(func(v *VirtualRepositoryConfig) []UpstreamPolicy {
		if v == nil {
			return nil
		}
		return v.UpstreamPolicies
	}).(UpstreamPolicyArrayOutput)
}

// Virtual repository configuration.
type VirtualRepositoryConfigResponse struct {
	// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
	UpstreamPolicies []UpstreamPolicyResponse `pulumi:"upstreamPolicies"`
}

// Virtual repository configuration.
type VirtualRepositoryConfigResponseOutput struct{ *pulumi.OutputState }

func (VirtualRepositoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRepositoryConfigResponse)(nil)).Elem()
}

func (o VirtualRepositoryConfigResponseOutput) ToVirtualRepositoryConfigResponseOutput() VirtualRepositoryConfigResponseOutput {
	return o
}

func (o VirtualRepositoryConfigResponseOutput) ToVirtualRepositoryConfigResponseOutputWithContext(ctx context.Context) VirtualRepositoryConfigResponseOutput {
	return o
}

func (o VirtualRepositoryConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualRepositoryConfigResponse] {
	return pulumix.Output[VirtualRepositoryConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
func (o VirtualRepositoryConfigResponseOutput) UpstreamPolicies() UpstreamPolicyResponseArrayOutput {
	return o.ApplyT(func(v VirtualRepositoryConfigResponse) []UpstreamPolicyResponse { return v.UpstreamPolicies }).(UpstreamPolicyResponseArrayOutput)
}

// Configuration for a Yum remote repository.
type YumRepository struct {
	// One of the publicly available Yum repositories supported by Artifact Registry.
	PublicRepository *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository `pulumi:"publicRepository"`
}

// YumRepositoryInput is an input type that accepts YumRepositoryArgs and YumRepositoryOutput values.
// You can construct a concrete instance of `YumRepositoryInput` via:
//
//	YumRepositoryArgs{...}
type YumRepositoryInput interface {
	pulumi.Input

	ToYumRepositoryOutput() YumRepositoryOutput
	ToYumRepositoryOutputWithContext(context.Context) YumRepositoryOutput
}

// Configuration for a Yum remote repository.
type YumRepositoryArgs struct {
	// One of the publicly available Yum repositories supported by Artifact Registry.
	PublicRepository GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (YumRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*YumRepository)(nil)).Elem()
}

func (i YumRepositoryArgs) ToYumRepositoryOutput() YumRepositoryOutput {
	return i.ToYumRepositoryOutputWithContext(context.Background())
}

func (i YumRepositoryArgs) ToYumRepositoryOutputWithContext(ctx context.Context) YumRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumRepositoryOutput)
}

func (i YumRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[YumRepository] {
	return pulumix.Output[YumRepository]{
		OutputState: i.ToYumRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i YumRepositoryArgs) ToYumRepositoryPtrOutput() YumRepositoryPtrOutput {
	return i.ToYumRepositoryPtrOutputWithContext(context.Background())
}

func (i YumRepositoryArgs) ToYumRepositoryPtrOutputWithContext(ctx context.Context) YumRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumRepositoryOutput).ToYumRepositoryPtrOutputWithContext(ctx)
}

// YumRepositoryPtrInput is an input type that accepts YumRepositoryArgs, YumRepositoryPtr and YumRepositoryPtrOutput values.
// You can construct a concrete instance of `YumRepositoryPtrInput` via:
//
//	        YumRepositoryArgs{...}
//
//	or:
//
//	        nil
type YumRepositoryPtrInput interface {
	pulumi.Input

	ToYumRepositoryPtrOutput() YumRepositoryPtrOutput
	ToYumRepositoryPtrOutputWithContext(context.Context) YumRepositoryPtrOutput
}

type yumRepositoryPtrType YumRepositoryArgs

func YumRepositoryPtr(v *YumRepositoryArgs) YumRepositoryPtrInput {
	return (*yumRepositoryPtrType)(v)
}

func (*yumRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**YumRepository)(nil)).Elem()
}

func (i *yumRepositoryPtrType) ToYumRepositoryPtrOutput() YumRepositoryPtrOutput {
	return i.ToYumRepositoryPtrOutputWithContext(context.Background())
}

func (i *yumRepositoryPtrType) ToYumRepositoryPtrOutputWithContext(ctx context.Context) YumRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumRepositoryPtrOutput)
}

func (i *yumRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*YumRepository] {
	return pulumix.Output[*YumRepository]{
		OutputState: i.ToYumRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a Yum remote repository.
type YumRepositoryOutput struct{ *pulumi.OutputState }

func (YumRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YumRepository)(nil)).Elem()
}

func (o YumRepositoryOutput) ToYumRepositoryOutput() YumRepositoryOutput {
	return o
}

func (o YumRepositoryOutput) ToYumRepositoryOutputWithContext(ctx context.Context) YumRepositoryOutput {
	return o
}

func (o YumRepositoryOutput) ToYumRepositoryPtrOutput() YumRepositoryPtrOutput {
	return o.ToYumRepositoryPtrOutputWithContext(context.Background())
}

func (o YumRepositoryOutput) ToYumRepositoryPtrOutputWithContext(ctx context.Context) YumRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v YumRepository) *YumRepository {
		return &v
	}).(YumRepositoryPtrOutput)
}

func (o YumRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[YumRepository] {
	return pulumix.Output[YumRepository]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Yum repositories supported by Artifact Registry.
func (o YumRepositoryOutput) PublicRepository() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v YumRepository) *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository {
		return v.PublicRepository
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput)
}

type YumRepositoryPtrOutput struct{ *pulumi.OutputState }

func (YumRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YumRepository)(nil)).Elem()
}

func (o YumRepositoryPtrOutput) ToYumRepositoryPtrOutput() YumRepositoryPtrOutput {
	return o
}

func (o YumRepositoryPtrOutput) ToYumRepositoryPtrOutputWithContext(ctx context.Context) YumRepositoryPtrOutput {
	return o
}

func (o YumRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*YumRepository] {
	return pulumix.Output[*YumRepository]{
		OutputState: o.OutputState,
	}
}

func (o YumRepositoryPtrOutput) Elem() YumRepositoryOutput {
	return o.ApplyT(func(v *YumRepository) YumRepository {
		if v != nil {
			return *v
		}
		var ret YumRepository
		return ret
	}).(YumRepositoryOutput)
}

// One of the publicly available Yum repositories supported by Artifact Registry.
func (o YumRepositoryPtrOutput) PublicRepository() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *YumRepository) *GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput)
}

// Configuration for a Yum remote repository.
type YumRepositoryResponse struct {
	// One of the publicly available Yum repositories supported by Artifact Registry.
	PublicRepository GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse `pulumi:"publicRepository"`
}

// Configuration for a Yum remote repository.
type YumRepositoryResponseOutput struct{ *pulumi.OutputState }

func (YumRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YumRepositoryResponse)(nil)).Elem()
}

func (o YumRepositoryResponseOutput) ToYumRepositoryResponseOutput() YumRepositoryResponseOutput {
	return o
}

func (o YumRepositoryResponseOutput) ToYumRepositoryResponseOutputWithContext(ctx context.Context) YumRepositoryResponseOutput {
	return o
}

func (o YumRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[YumRepositoryResponse] {
	return pulumix.Output[YumRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// One of the publicly available Yum repositories supported by Artifact Registry.
func (o YumRepositoryResponseOutput) PublicRepository() GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput {
	return o.ApplyT(func(v YumRepositoryResponse) GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponse {
		return v.PublicRepository
	}).(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AptRepositoryInput)(nil)).Elem(), AptRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AptRepositoryPtrInput)(nil)).Elem(), AptRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerRepositoryInput)(nil)).Elem(), DockerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerRepositoryPtrInput)(nil)).Elem(), DockerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerRepositoryConfigInput)(nil)).Elem(), DockerRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerRepositoryConfigPtrInput)(nil)).Elem(), DockerRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryInput)(nil)).Elem(), GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrInput)(nil)).Elem(), GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryInput)(nil)).Elem(), GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrInput)(nil)).Elem(), GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryInput)(nil)).Elem(), MavenRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryPtrInput)(nil)).Elem(), MavenRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryConfigInput)(nil)).Elem(), MavenRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryConfigPtrInput)(nil)).Elem(), MavenRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NpmRepositoryInput)(nil)).Elem(), NpmRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NpmRepositoryPtrInput)(nil)).Elem(), NpmRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PythonRepositoryInput)(nil)).Elem(), PythonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PythonRepositoryPtrInput)(nil)).Elem(), PythonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRepositoryConfigInput)(nil)).Elem(), RemoteRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRepositoryConfigPtrInput)(nil)).Elem(), RemoteRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamCredentialsInput)(nil)).Elem(), UpstreamCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamCredentialsPtrInput)(nil)).Elem(), UpstreamCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamPolicyInput)(nil)).Elem(), UpstreamPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamPolicyArrayInput)(nil)).Elem(), UpstreamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsernamePasswordCredentialsInput)(nil)).Elem(), UsernamePasswordCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsernamePasswordCredentialsPtrInput)(nil)).Elem(), UsernamePasswordCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRepositoryConfigInput)(nil)).Elem(), VirtualRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRepositoryConfigPtrInput)(nil)).Elem(), VirtualRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*YumRepositoryInput)(nil)).Elem(), YumRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*YumRepositoryPtrInput)(nil)).Elem(), YumRepositoryArgs{})
	pulumi.RegisterOutputType(AptRepositoryOutput{})
	pulumi.RegisterOutputType(AptRepositoryPtrOutput{})
	pulumi.RegisterOutputType(AptRepositoryResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(DockerRepositoryOutput{})
	pulumi.RegisterOutputType(DockerRepositoryPtrOutput{})
	pulumi.RegisterOutputType(DockerRepositoryConfigOutput{})
	pulumi.RegisterOutputType(DockerRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(DockerRepositoryConfigResponseOutput{})
	pulumi.RegisterOutputType(DockerRepositoryResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepositoryResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepositoryResponseOutput{})
	pulumi.RegisterOutputType(MavenRepositoryOutput{})
	pulumi.RegisterOutputType(MavenRepositoryPtrOutput{})
	pulumi.RegisterOutputType(MavenRepositoryConfigOutput{})
	pulumi.RegisterOutputType(MavenRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(MavenRepositoryConfigResponseOutput{})
	pulumi.RegisterOutputType(MavenRepositoryResponseOutput{})
	pulumi.RegisterOutputType(NpmRepositoryOutput{})
	pulumi.RegisterOutputType(NpmRepositoryPtrOutput{})
	pulumi.RegisterOutputType(NpmRepositoryResponseOutput{})
	pulumi.RegisterOutputType(PythonRepositoryOutput{})
	pulumi.RegisterOutputType(PythonRepositoryPtrOutput{})
	pulumi.RegisterOutputType(PythonRepositoryResponseOutput{})
	pulumi.RegisterOutputType(RemoteRepositoryConfigOutput{})
	pulumi.RegisterOutputType(RemoteRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(RemoteRepositoryConfigResponseOutput{})
	pulumi.RegisterOutputType(UpstreamCredentialsOutput{})
	pulumi.RegisterOutputType(UpstreamCredentialsPtrOutput{})
	pulumi.RegisterOutputType(UpstreamCredentialsResponseOutput{})
	pulumi.RegisterOutputType(UpstreamPolicyOutput{})
	pulumi.RegisterOutputType(UpstreamPolicyArrayOutput{})
	pulumi.RegisterOutputType(UpstreamPolicyResponseOutput{})
	pulumi.RegisterOutputType(UpstreamPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsPtrOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsResponseOutput{})
	pulumi.RegisterOutputType(VirtualRepositoryConfigOutput{})
	pulumi.RegisterOutputType(VirtualRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(VirtualRepositoryConfigResponseOutput{})
	pulumi.RegisterOutputType(YumRepositoryOutput{})
	pulumi.RegisterOutputType(YumRepositoryPtrOutput{})
	pulumi.RegisterOutputType(YumRepositoryResponseOutput{})
}
