// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Configuration for a Docker remote repository.
type DockerRepository struct {
	// One of the publicly available Docker repositories supported by Artifact Registry.
	PublicRepository *DockerRepositoryPublicRepository `pulumi:"publicRepository"`
}

// DockerRepositoryInput is an input type that accepts DockerRepositoryArgs and DockerRepositoryOutput values.
// You can construct a concrete instance of `DockerRepositoryInput` via:
//
//	DockerRepositoryArgs{...}
type DockerRepositoryInput interface {
	pulumi.Input

	ToDockerRepositoryOutput() DockerRepositoryOutput
	ToDockerRepositoryOutputWithContext(context.Context) DockerRepositoryOutput
}

// Configuration for a Docker remote repository.
type DockerRepositoryArgs struct {
	// One of the publicly available Docker repositories supported by Artifact Registry.
	PublicRepository DockerRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (DockerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepository)(nil)).Elem()
}

func (i DockerRepositoryArgs) ToDockerRepositoryOutput() DockerRepositoryOutput {
	return i.ToDockerRepositoryOutputWithContext(context.Background())
}

func (i DockerRepositoryArgs) ToDockerRepositoryOutputWithContext(ctx context.Context) DockerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryOutput)
}

func (i DockerRepositoryArgs) ToDockerRepositoryPtrOutput() DockerRepositoryPtrOutput {
	return i.ToDockerRepositoryPtrOutputWithContext(context.Background())
}

func (i DockerRepositoryArgs) ToDockerRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryOutput).ToDockerRepositoryPtrOutputWithContext(ctx)
}

// DockerRepositoryPtrInput is an input type that accepts DockerRepositoryArgs, DockerRepositoryPtr and DockerRepositoryPtrOutput values.
// You can construct a concrete instance of `DockerRepositoryPtrInput` via:
//
//	        DockerRepositoryArgs{...}
//
//	or:
//
//	        nil
type DockerRepositoryPtrInput interface {
	pulumi.Input

	ToDockerRepositoryPtrOutput() DockerRepositoryPtrOutput
	ToDockerRepositoryPtrOutputWithContext(context.Context) DockerRepositoryPtrOutput
}

type dockerRepositoryPtrType DockerRepositoryArgs

func DockerRepositoryPtr(v *DockerRepositoryArgs) DockerRepositoryPtrInput {
	return (*dockerRepositoryPtrType)(v)
}

func (*dockerRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerRepository)(nil)).Elem()
}

func (i *dockerRepositoryPtrType) ToDockerRepositoryPtrOutput() DockerRepositoryPtrOutput {
	return i.ToDockerRepositoryPtrOutputWithContext(context.Background())
}

func (i *dockerRepositoryPtrType) ToDockerRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryPtrOutput)
}

// Configuration for a Docker remote repository.
type DockerRepositoryOutput struct{ *pulumi.OutputState }

func (DockerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepository)(nil)).Elem()
}

func (o DockerRepositoryOutput) ToDockerRepositoryOutput() DockerRepositoryOutput {
	return o
}

func (o DockerRepositoryOutput) ToDockerRepositoryOutputWithContext(ctx context.Context) DockerRepositoryOutput {
	return o
}

func (o DockerRepositoryOutput) ToDockerRepositoryPtrOutput() DockerRepositoryPtrOutput {
	return o.ToDockerRepositoryPtrOutputWithContext(context.Background())
}

func (o DockerRepositoryOutput) ToDockerRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerRepository) *DockerRepository {
		return &v
	}).(DockerRepositoryPtrOutput)
}

// One of the publicly available Docker repositories supported by Artifact Registry.
func (o DockerRepositoryOutput) PublicRepository() DockerRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v DockerRepository) *DockerRepositoryPublicRepository { return v.PublicRepository }).(DockerRepositoryPublicRepositoryPtrOutput)
}

type DockerRepositoryPtrOutput struct{ *pulumi.OutputState }

func (DockerRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerRepository)(nil)).Elem()
}

func (o DockerRepositoryPtrOutput) ToDockerRepositoryPtrOutput() DockerRepositoryPtrOutput {
	return o
}

func (o DockerRepositoryPtrOutput) ToDockerRepositoryPtrOutputWithContext(ctx context.Context) DockerRepositoryPtrOutput {
	return o
}

func (o DockerRepositoryPtrOutput) Elem() DockerRepositoryOutput {
	return o.ApplyT(func(v *DockerRepository) DockerRepository {
		if v != nil {
			return *v
		}
		var ret DockerRepository
		return ret
	}).(DockerRepositoryOutput)
}

// One of the publicly available Docker repositories supported by Artifact Registry.
func (o DockerRepositoryPtrOutput) PublicRepository() DockerRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *DockerRepository) *DockerRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(DockerRepositoryPublicRepositoryPtrOutput)
}

// DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
type DockerRepositoryConfig struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags *bool `pulumi:"immutableTags"`
}

// DockerRepositoryConfigInput is an input type that accepts DockerRepositoryConfigArgs and DockerRepositoryConfigOutput values.
// You can construct a concrete instance of `DockerRepositoryConfigInput` via:
//
//	DockerRepositoryConfigArgs{...}
type DockerRepositoryConfigInput interface {
	pulumi.Input

	ToDockerRepositoryConfigOutput() DockerRepositoryConfigOutput
	ToDockerRepositoryConfigOutputWithContext(context.Context) DockerRepositoryConfigOutput
}

// DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
type DockerRepositoryConfigArgs struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags pulumi.BoolPtrInput `pulumi:"immutableTags"`
}

func (DockerRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepositoryConfig)(nil)).Elem()
}

func (i DockerRepositoryConfigArgs) ToDockerRepositoryConfigOutput() DockerRepositoryConfigOutput {
	return i.ToDockerRepositoryConfigOutputWithContext(context.Background())
}

func (i DockerRepositoryConfigArgs) ToDockerRepositoryConfigOutputWithContext(ctx context.Context) DockerRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryConfigOutput)
}

func (i DockerRepositoryConfigArgs) ToDockerRepositoryConfigPtrOutput() DockerRepositoryConfigPtrOutput {
	return i.ToDockerRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i DockerRepositoryConfigArgs) ToDockerRepositoryConfigPtrOutputWithContext(ctx context.Context) DockerRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryConfigOutput).ToDockerRepositoryConfigPtrOutputWithContext(ctx)
}

// DockerRepositoryConfigPtrInput is an input type that accepts DockerRepositoryConfigArgs, DockerRepositoryConfigPtr and DockerRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `DockerRepositoryConfigPtrInput` via:
//
//	        DockerRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type DockerRepositoryConfigPtrInput interface {
	pulumi.Input

	ToDockerRepositoryConfigPtrOutput() DockerRepositoryConfigPtrOutput
	ToDockerRepositoryConfigPtrOutputWithContext(context.Context) DockerRepositoryConfigPtrOutput
}

type dockerRepositoryConfigPtrType DockerRepositoryConfigArgs

func DockerRepositoryConfigPtr(v *DockerRepositoryConfigArgs) DockerRepositoryConfigPtrInput {
	return (*dockerRepositoryConfigPtrType)(v)
}

func (*dockerRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerRepositoryConfig)(nil)).Elem()
}

func (i *dockerRepositoryConfigPtrType) ToDockerRepositoryConfigPtrOutput() DockerRepositoryConfigPtrOutput {
	return i.ToDockerRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *dockerRepositoryConfigPtrType) ToDockerRepositoryConfigPtrOutputWithContext(ctx context.Context) DockerRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerRepositoryConfigPtrOutput)
}

// DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
type DockerRepositoryConfigOutput struct{ *pulumi.OutputState }

func (DockerRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepositoryConfig)(nil)).Elem()
}

func (o DockerRepositoryConfigOutput) ToDockerRepositoryConfigOutput() DockerRepositoryConfigOutput {
	return o
}

func (o DockerRepositoryConfigOutput) ToDockerRepositoryConfigOutputWithContext(ctx context.Context) DockerRepositoryConfigOutput {
	return o
}

func (o DockerRepositoryConfigOutput) ToDockerRepositoryConfigPtrOutput() DockerRepositoryConfigPtrOutput {
	return o.ToDockerRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o DockerRepositoryConfigOutput) ToDockerRepositoryConfigPtrOutputWithContext(ctx context.Context) DockerRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerRepositoryConfig) *DockerRepositoryConfig {
		return &v
	}).(DockerRepositoryConfigPtrOutput)
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o DockerRepositoryConfigOutput) ImmutableTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerRepositoryConfig) *bool { return v.ImmutableTags }).(pulumi.BoolPtrOutput)
}

type DockerRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (DockerRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerRepositoryConfig)(nil)).Elem()
}

func (o DockerRepositoryConfigPtrOutput) ToDockerRepositoryConfigPtrOutput() DockerRepositoryConfigPtrOutput {
	return o
}

func (o DockerRepositoryConfigPtrOutput) ToDockerRepositoryConfigPtrOutputWithContext(ctx context.Context) DockerRepositoryConfigPtrOutput {
	return o
}

func (o DockerRepositoryConfigPtrOutput) Elem() DockerRepositoryConfigOutput {
	return o.ApplyT(func(v *DockerRepositoryConfig) DockerRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret DockerRepositoryConfig
		return ret
	}).(DockerRepositoryConfigOutput)
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o DockerRepositoryConfigPtrOutput) ImmutableTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerRepositoryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ImmutableTags
	}).(pulumi.BoolPtrOutput)
}

// DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
type DockerRepositoryConfigResponse struct {
	// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
	ImmutableTags bool `pulumi:"immutableTags"`
}

// DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
type DockerRepositoryConfigResponseOutput struct{ *pulumi.OutputState }

func (DockerRepositoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepositoryConfigResponse)(nil)).Elem()
}

func (o DockerRepositoryConfigResponseOutput) ToDockerRepositoryConfigResponseOutput() DockerRepositoryConfigResponseOutput {
	return o
}

func (o DockerRepositoryConfigResponseOutput) ToDockerRepositoryConfigResponseOutputWithContext(ctx context.Context) DockerRepositoryConfigResponseOutput {
	return o
}

// The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.
func (o DockerRepositoryConfigResponseOutput) ImmutableTags() pulumi.BoolOutput {
	return o.ApplyT(func(v DockerRepositoryConfigResponse) bool { return v.ImmutableTags }).(pulumi.BoolOutput)
}

// Configuration for a Docker remote repository.
type DockerRepositoryResponse struct {
	// One of the publicly available Docker repositories supported by Artifact Registry.
	PublicRepository string `pulumi:"publicRepository"`
}

// Configuration for a Docker remote repository.
type DockerRepositoryResponseOutput struct{ *pulumi.OutputState }

func (DockerRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerRepositoryResponse)(nil)).Elem()
}

func (o DockerRepositoryResponseOutput) ToDockerRepositoryResponseOutput() DockerRepositoryResponseOutput {
	return o
}

func (o DockerRepositoryResponseOutput) ToDockerRepositoryResponseOutputWithContext(ctx context.Context) DockerRepositoryResponseOutput {
	return o
}

// One of the publicly available Docker repositories supported by Artifact Registry.
func (o DockerRepositoryResponseOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v DockerRepositoryResponse) string { return v.PublicRepository }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Configuration for a Maven remote repository.
type MavenRepository struct {
	// One of the publicly available Maven repositories supported by Artifact Registry.
	PublicRepository *MavenRepositoryPublicRepository `pulumi:"publicRepository"`
}

// MavenRepositoryInput is an input type that accepts MavenRepositoryArgs and MavenRepositoryOutput values.
// You can construct a concrete instance of `MavenRepositoryInput` via:
//
//	MavenRepositoryArgs{...}
type MavenRepositoryInput interface {
	pulumi.Input

	ToMavenRepositoryOutput() MavenRepositoryOutput
	ToMavenRepositoryOutputWithContext(context.Context) MavenRepositoryOutput
}

// Configuration for a Maven remote repository.
type MavenRepositoryArgs struct {
	// One of the publicly available Maven repositories supported by Artifact Registry.
	PublicRepository MavenRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (MavenRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepository)(nil)).Elem()
}

func (i MavenRepositoryArgs) ToMavenRepositoryOutput() MavenRepositoryOutput {
	return i.ToMavenRepositoryOutputWithContext(context.Background())
}

func (i MavenRepositoryArgs) ToMavenRepositoryOutputWithContext(ctx context.Context) MavenRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryOutput)
}

func (i MavenRepositoryArgs) ToMavenRepositoryPtrOutput() MavenRepositoryPtrOutput {
	return i.ToMavenRepositoryPtrOutputWithContext(context.Background())
}

func (i MavenRepositoryArgs) ToMavenRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryOutput).ToMavenRepositoryPtrOutputWithContext(ctx)
}

// MavenRepositoryPtrInput is an input type that accepts MavenRepositoryArgs, MavenRepositoryPtr and MavenRepositoryPtrOutput values.
// You can construct a concrete instance of `MavenRepositoryPtrInput` via:
//
//	        MavenRepositoryArgs{...}
//
//	or:
//
//	        nil
type MavenRepositoryPtrInput interface {
	pulumi.Input

	ToMavenRepositoryPtrOutput() MavenRepositoryPtrOutput
	ToMavenRepositoryPtrOutputWithContext(context.Context) MavenRepositoryPtrOutput
}

type mavenRepositoryPtrType MavenRepositoryArgs

func MavenRepositoryPtr(v *MavenRepositoryArgs) MavenRepositoryPtrInput {
	return (*mavenRepositoryPtrType)(v)
}

func (*mavenRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MavenRepository)(nil)).Elem()
}

func (i *mavenRepositoryPtrType) ToMavenRepositoryPtrOutput() MavenRepositoryPtrOutput {
	return i.ToMavenRepositoryPtrOutputWithContext(context.Background())
}

func (i *mavenRepositoryPtrType) ToMavenRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryPtrOutput)
}

// Configuration for a Maven remote repository.
type MavenRepositoryOutput struct{ *pulumi.OutputState }

func (MavenRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepository)(nil)).Elem()
}

func (o MavenRepositoryOutput) ToMavenRepositoryOutput() MavenRepositoryOutput {
	return o
}

func (o MavenRepositoryOutput) ToMavenRepositoryOutputWithContext(ctx context.Context) MavenRepositoryOutput {
	return o
}

func (o MavenRepositoryOutput) ToMavenRepositoryPtrOutput() MavenRepositoryPtrOutput {
	return o.ToMavenRepositoryPtrOutputWithContext(context.Background())
}

func (o MavenRepositoryOutput) ToMavenRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MavenRepository) *MavenRepository {
		return &v
	}).(MavenRepositoryPtrOutput)
}

// One of the publicly available Maven repositories supported by Artifact Registry.
func (o MavenRepositoryOutput) PublicRepository() MavenRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v MavenRepository) *MavenRepositoryPublicRepository { return v.PublicRepository }).(MavenRepositoryPublicRepositoryPtrOutput)
}

type MavenRepositoryPtrOutput struct{ *pulumi.OutputState }

func (MavenRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MavenRepository)(nil)).Elem()
}

func (o MavenRepositoryPtrOutput) ToMavenRepositoryPtrOutput() MavenRepositoryPtrOutput {
	return o
}

func (o MavenRepositoryPtrOutput) ToMavenRepositoryPtrOutputWithContext(ctx context.Context) MavenRepositoryPtrOutput {
	return o
}

func (o MavenRepositoryPtrOutput) Elem() MavenRepositoryOutput {
	return o.ApplyT(func(v *MavenRepository) MavenRepository {
		if v != nil {
			return *v
		}
		var ret MavenRepository
		return ret
	}).(MavenRepositoryOutput)
}

// One of the publicly available Maven repositories supported by Artifact Registry.
func (o MavenRepositoryPtrOutput) PublicRepository() MavenRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *MavenRepository) *MavenRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(MavenRepositoryPublicRepositoryPtrOutput)
}

// MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
type MavenRepositoryConfig struct {
	// The repository with this flag will allow publishing the same snapshot versions.
	AllowSnapshotOverwrites *bool `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	VersionPolicy *MavenRepositoryConfigVersionPolicy `pulumi:"versionPolicy"`
}

// MavenRepositoryConfigInput is an input type that accepts MavenRepositoryConfigArgs and MavenRepositoryConfigOutput values.
// You can construct a concrete instance of `MavenRepositoryConfigInput` via:
//
//	MavenRepositoryConfigArgs{...}
type MavenRepositoryConfigInput interface {
	pulumi.Input

	ToMavenRepositoryConfigOutput() MavenRepositoryConfigOutput
	ToMavenRepositoryConfigOutputWithContext(context.Context) MavenRepositoryConfigOutput
}

// MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
type MavenRepositoryConfigArgs struct {
	// The repository with this flag will allow publishing the same snapshot versions.
	AllowSnapshotOverwrites pulumi.BoolPtrInput `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	VersionPolicy MavenRepositoryConfigVersionPolicyPtrInput `pulumi:"versionPolicy"`
}

func (MavenRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryConfig)(nil)).Elem()
}

func (i MavenRepositoryConfigArgs) ToMavenRepositoryConfigOutput() MavenRepositoryConfigOutput {
	return i.ToMavenRepositoryConfigOutputWithContext(context.Background())
}

func (i MavenRepositoryConfigArgs) ToMavenRepositoryConfigOutputWithContext(ctx context.Context) MavenRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryConfigOutput)
}

func (i MavenRepositoryConfigArgs) ToMavenRepositoryConfigPtrOutput() MavenRepositoryConfigPtrOutput {
	return i.ToMavenRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i MavenRepositoryConfigArgs) ToMavenRepositoryConfigPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryConfigOutput).ToMavenRepositoryConfigPtrOutputWithContext(ctx)
}

// MavenRepositoryConfigPtrInput is an input type that accepts MavenRepositoryConfigArgs, MavenRepositoryConfigPtr and MavenRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `MavenRepositoryConfigPtrInput` via:
//
//	        MavenRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type MavenRepositoryConfigPtrInput interface {
	pulumi.Input

	ToMavenRepositoryConfigPtrOutput() MavenRepositoryConfigPtrOutput
	ToMavenRepositoryConfigPtrOutputWithContext(context.Context) MavenRepositoryConfigPtrOutput
}

type mavenRepositoryConfigPtrType MavenRepositoryConfigArgs

func MavenRepositoryConfigPtr(v *MavenRepositoryConfigArgs) MavenRepositoryConfigPtrInput {
	return (*mavenRepositoryConfigPtrType)(v)
}

func (*mavenRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MavenRepositoryConfig)(nil)).Elem()
}

func (i *mavenRepositoryConfigPtrType) ToMavenRepositoryConfigPtrOutput() MavenRepositoryConfigPtrOutput {
	return i.ToMavenRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *mavenRepositoryConfigPtrType) ToMavenRepositoryConfigPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenRepositoryConfigPtrOutput)
}

// MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
type MavenRepositoryConfigOutput struct{ *pulumi.OutputState }

func (MavenRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryConfig)(nil)).Elem()
}

func (o MavenRepositoryConfigOutput) ToMavenRepositoryConfigOutput() MavenRepositoryConfigOutput {
	return o
}

func (o MavenRepositoryConfigOutput) ToMavenRepositoryConfigOutputWithContext(ctx context.Context) MavenRepositoryConfigOutput {
	return o
}

func (o MavenRepositoryConfigOutput) ToMavenRepositoryConfigPtrOutput() MavenRepositoryConfigPtrOutput {
	return o.ToMavenRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o MavenRepositoryConfigOutput) ToMavenRepositoryConfigPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MavenRepositoryConfig) *MavenRepositoryConfig {
		return &v
	}).(MavenRepositoryConfigPtrOutput)
}

// The repository with this flag will allow publishing the same snapshot versions.
func (o MavenRepositoryConfigOutput) AllowSnapshotOverwrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MavenRepositoryConfig) *bool { return v.AllowSnapshotOverwrites }).(pulumi.BoolPtrOutput)
}

// Version policy defines the versions that the registry will accept.
func (o MavenRepositoryConfigOutput) VersionPolicy() MavenRepositoryConfigVersionPolicyPtrOutput {
	return o.ApplyT(func(v MavenRepositoryConfig) *MavenRepositoryConfigVersionPolicy { return v.VersionPolicy }).(MavenRepositoryConfigVersionPolicyPtrOutput)
}

type MavenRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (MavenRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MavenRepositoryConfig)(nil)).Elem()
}

func (o MavenRepositoryConfigPtrOutput) ToMavenRepositoryConfigPtrOutput() MavenRepositoryConfigPtrOutput {
	return o
}

func (o MavenRepositoryConfigPtrOutput) ToMavenRepositoryConfigPtrOutputWithContext(ctx context.Context) MavenRepositoryConfigPtrOutput {
	return o
}

func (o MavenRepositoryConfigPtrOutput) Elem() MavenRepositoryConfigOutput {
	return o.ApplyT(func(v *MavenRepositoryConfig) MavenRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret MavenRepositoryConfig
		return ret
	}).(MavenRepositoryConfigOutput)
}

// The repository with this flag will allow publishing the same snapshot versions.
func (o MavenRepositoryConfigPtrOutput) AllowSnapshotOverwrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MavenRepositoryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSnapshotOverwrites
	}).(pulumi.BoolPtrOutput)
}

// Version policy defines the versions that the registry will accept.
func (o MavenRepositoryConfigPtrOutput) VersionPolicy() MavenRepositoryConfigVersionPolicyPtrOutput {
	return o.ApplyT(func(v *MavenRepositoryConfig) *MavenRepositoryConfigVersionPolicy {
		if v == nil {
			return nil
		}
		return v.VersionPolicy
	}).(MavenRepositoryConfigVersionPolicyPtrOutput)
}

// MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
type MavenRepositoryConfigResponse struct {
	// The repository with this flag will allow publishing the same snapshot versions.
	AllowSnapshotOverwrites bool `pulumi:"allowSnapshotOverwrites"`
	// Version policy defines the versions that the registry will accept.
	VersionPolicy string `pulumi:"versionPolicy"`
}

// MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
type MavenRepositoryConfigResponseOutput struct{ *pulumi.OutputState }

func (MavenRepositoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryConfigResponse)(nil)).Elem()
}

func (o MavenRepositoryConfigResponseOutput) ToMavenRepositoryConfigResponseOutput() MavenRepositoryConfigResponseOutput {
	return o
}

func (o MavenRepositoryConfigResponseOutput) ToMavenRepositoryConfigResponseOutputWithContext(ctx context.Context) MavenRepositoryConfigResponseOutput {
	return o
}

// The repository with this flag will allow publishing the same snapshot versions.
func (o MavenRepositoryConfigResponseOutput) AllowSnapshotOverwrites() pulumi.BoolOutput {
	return o.ApplyT(func(v MavenRepositoryConfigResponse) bool { return v.AllowSnapshotOverwrites }).(pulumi.BoolOutput)
}

// Version policy defines the versions that the registry will accept.
func (o MavenRepositoryConfigResponseOutput) VersionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v MavenRepositoryConfigResponse) string { return v.VersionPolicy }).(pulumi.StringOutput)
}

// Configuration for a Maven remote repository.
type MavenRepositoryResponse struct {
	// One of the publicly available Maven repositories supported by Artifact Registry.
	PublicRepository string `pulumi:"publicRepository"`
}

// Configuration for a Maven remote repository.
type MavenRepositoryResponseOutput struct{ *pulumi.OutputState }

func (MavenRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenRepositoryResponse)(nil)).Elem()
}

func (o MavenRepositoryResponseOutput) ToMavenRepositoryResponseOutput() MavenRepositoryResponseOutput {
	return o
}

func (o MavenRepositoryResponseOutput) ToMavenRepositoryResponseOutputWithContext(ctx context.Context) MavenRepositoryResponseOutput {
	return o
}

// One of the publicly available Maven repositories supported by Artifact Registry.
func (o MavenRepositoryResponseOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v MavenRepositoryResponse) string { return v.PublicRepository }).(pulumi.StringOutput)
}

// Configuration for a Npm remote repository.
type NpmRepository struct {
	// One of the publicly available Npm repositories supported by Artifact Registry.
	PublicRepository *NpmRepositoryPublicRepository `pulumi:"publicRepository"`
}

// NpmRepositoryInput is an input type that accepts NpmRepositoryArgs and NpmRepositoryOutput values.
// You can construct a concrete instance of `NpmRepositoryInput` via:
//
//	NpmRepositoryArgs{...}
type NpmRepositoryInput interface {
	pulumi.Input

	ToNpmRepositoryOutput() NpmRepositoryOutput
	ToNpmRepositoryOutputWithContext(context.Context) NpmRepositoryOutput
}

// Configuration for a Npm remote repository.
type NpmRepositoryArgs struct {
	// One of the publicly available Npm repositories supported by Artifact Registry.
	PublicRepository NpmRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (NpmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmRepository)(nil)).Elem()
}

func (i NpmRepositoryArgs) ToNpmRepositoryOutput() NpmRepositoryOutput {
	return i.ToNpmRepositoryOutputWithContext(context.Background())
}

func (i NpmRepositoryArgs) ToNpmRepositoryOutputWithContext(ctx context.Context) NpmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpmRepositoryOutput)
}

func (i NpmRepositoryArgs) ToNpmRepositoryPtrOutput() NpmRepositoryPtrOutput {
	return i.ToNpmRepositoryPtrOutputWithContext(context.Background())
}

func (i NpmRepositoryArgs) ToNpmRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpmRepositoryOutput).ToNpmRepositoryPtrOutputWithContext(ctx)
}

// NpmRepositoryPtrInput is an input type that accepts NpmRepositoryArgs, NpmRepositoryPtr and NpmRepositoryPtrOutput values.
// You can construct a concrete instance of `NpmRepositoryPtrInput` via:
//
//	        NpmRepositoryArgs{...}
//
//	or:
//
//	        nil
type NpmRepositoryPtrInput interface {
	pulumi.Input

	ToNpmRepositoryPtrOutput() NpmRepositoryPtrOutput
	ToNpmRepositoryPtrOutputWithContext(context.Context) NpmRepositoryPtrOutput
}

type npmRepositoryPtrType NpmRepositoryArgs

func NpmRepositoryPtr(v *NpmRepositoryArgs) NpmRepositoryPtrInput {
	return (*npmRepositoryPtrType)(v)
}

func (*npmRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NpmRepository)(nil)).Elem()
}

func (i *npmRepositoryPtrType) ToNpmRepositoryPtrOutput() NpmRepositoryPtrOutput {
	return i.ToNpmRepositoryPtrOutputWithContext(context.Background())
}

func (i *npmRepositoryPtrType) ToNpmRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpmRepositoryPtrOutput)
}

// Configuration for a Npm remote repository.
type NpmRepositoryOutput struct{ *pulumi.OutputState }

func (NpmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmRepository)(nil)).Elem()
}

func (o NpmRepositoryOutput) ToNpmRepositoryOutput() NpmRepositoryOutput {
	return o
}

func (o NpmRepositoryOutput) ToNpmRepositoryOutputWithContext(ctx context.Context) NpmRepositoryOutput {
	return o
}

func (o NpmRepositoryOutput) ToNpmRepositoryPtrOutput() NpmRepositoryPtrOutput {
	return o.ToNpmRepositoryPtrOutputWithContext(context.Background())
}

func (o NpmRepositoryOutput) ToNpmRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NpmRepository) *NpmRepository {
		return &v
	}).(NpmRepositoryPtrOutput)
}

// One of the publicly available Npm repositories supported by Artifact Registry.
func (o NpmRepositoryOutput) PublicRepository() NpmRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v NpmRepository) *NpmRepositoryPublicRepository { return v.PublicRepository }).(NpmRepositoryPublicRepositoryPtrOutput)
}

type NpmRepositoryPtrOutput struct{ *pulumi.OutputState }

func (NpmRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NpmRepository)(nil)).Elem()
}

func (o NpmRepositoryPtrOutput) ToNpmRepositoryPtrOutput() NpmRepositoryPtrOutput {
	return o
}

func (o NpmRepositoryPtrOutput) ToNpmRepositoryPtrOutputWithContext(ctx context.Context) NpmRepositoryPtrOutput {
	return o
}

func (o NpmRepositoryPtrOutput) Elem() NpmRepositoryOutput {
	return o.ApplyT(func(v *NpmRepository) NpmRepository {
		if v != nil {
			return *v
		}
		var ret NpmRepository
		return ret
	}).(NpmRepositoryOutput)
}

// One of the publicly available Npm repositories supported by Artifact Registry.
func (o NpmRepositoryPtrOutput) PublicRepository() NpmRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *NpmRepository) *NpmRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(NpmRepositoryPublicRepositoryPtrOutput)
}

// Configuration for a Npm remote repository.
type NpmRepositoryResponse struct {
	// One of the publicly available Npm repositories supported by Artifact Registry.
	PublicRepository string `pulumi:"publicRepository"`
}

// Configuration for a Npm remote repository.
type NpmRepositoryResponseOutput struct{ *pulumi.OutputState }

func (NpmRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmRepositoryResponse)(nil)).Elem()
}

func (o NpmRepositoryResponseOutput) ToNpmRepositoryResponseOutput() NpmRepositoryResponseOutput {
	return o
}

func (o NpmRepositoryResponseOutput) ToNpmRepositoryResponseOutputWithContext(ctx context.Context) NpmRepositoryResponseOutput {
	return o
}

// One of the publicly available Npm repositories supported by Artifact Registry.
func (o NpmRepositoryResponseOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v NpmRepositoryResponse) string { return v.PublicRepository }).(pulumi.StringOutput)
}

// Configuration for a Python remote repository.
type PythonRepository struct {
	// One of the publicly available Python repositories supported by Artifact Registry.
	PublicRepository *PythonRepositoryPublicRepository `pulumi:"publicRepository"`
}

// PythonRepositoryInput is an input type that accepts PythonRepositoryArgs and PythonRepositoryOutput values.
// You can construct a concrete instance of `PythonRepositoryInput` via:
//
//	PythonRepositoryArgs{...}
type PythonRepositoryInput interface {
	pulumi.Input

	ToPythonRepositoryOutput() PythonRepositoryOutput
	ToPythonRepositoryOutputWithContext(context.Context) PythonRepositoryOutput
}

// Configuration for a Python remote repository.
type PythonRepositoryArgs struct {
	// One of the publicly available Python repositories supported by Artifact Registry.
	PublicRepository PythonRepositoryPublicRepositoryPtrInput `pulumi:"publicRepository"`
}

func (PythonRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonRepository)(nil)).Elem()
}

func (i PythonRepositoryArgs) ToPythonRepositoryOutput() PythonRepositoryOutput {
	return i.ToPythonRepositoryOutputWithContext(context.Background())
}

func (i PythonRepositoryArgs) ToPythonRepositoryOutputWithContext(ctx context.Context) PythonRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PythonRepositoryOutput)
}

func (i PythonRepositoryArgs) ToPythonRepositoryPtrOutput() PythonRepositoryPtrOutput {
	return i.ToPythonRepositoryPtrOutputWithContext(context.Background())
}

func (i PythonRepositoryArgs) ToPythonRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PythonRepositoryOutput).ToPythonRepositoryPtrOutputWithContext(ctx)
}

// PythonRepositoryPtrInput is an input type that accepts PythonRepositoryArgs, PythonRepositoryPtr and PythonRepositoryPtrOutput values.
// You can construct a concrete instance of `PythonRepositoryPtrInput` via:
//
//	        PythonRepositoryArgs{...}
//
//	or:
//
//	        nil
type PythonRepositoryPtrInput interface {
	pulumi.Input

	ToPythonRepositoryPtrOutput() PythonRepositoryPtrOutput
	ToPythonRepositoryPtrOutputWithContext(context.Context) PythonRepositoryPtrOutput
}

type pythonRepositoryPtrType PythonRepositoryArgs

func PythonRepositoryPtr(v *PythonRepositoryArgs) PythonRepositoryPtrInput {
	return (*pythonRepositoryPtrType)(v)
}

func (*pythonRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PythonRepository)(nil)).Elem()
}

func (i *pythonRepositoryPtrType) ToPythonRepositoryPtrOutput() PythonRepositoryPtrOutput {
	return i.ToPythonRepositoryPtrOutputWithContext(context.Background())
}

func (i *pythonRepositoryPtrType) ToPythonRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PythonRepositoryPtrOutput)
}

// Configuration for a Python remote repository.
type PythonRepositoryOutput struct{ *pulumi.OutputState }

func (PythonRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonRepository)(nil)).Elem()
}

func (o PythonRepositoryOutput) ToPythonRepositoryOutput() PythonRepositoryOutput {
	return o
}

func (o PythonRepositoryOutput) ToPythonRepositoryOutputWithContext(ctx context.Context) PythonRepositoryOutput {
	return o
}

func (o PythonRepositoryOutput) ToPythonRepositoryPtrOutput() PythonRepositoryPtrOutput {
	return o.ToPythonRepositoryPtrOutputWithContext(context.Background())
}

func (o PythonRepositoryOutput) ToPythonRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PythonRepository) *PythonRepository {
		return &v
	}).(PythonRepositoryPtrOutput)
}

// One of the publicly available Python repositories supported by Artifact Registry.
func (o PythonRepositoryOutput) PublicRepository() PythonRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v PythonRepository) *PythonRepositoryPublicRepository { return v.PublicRepository }).(PythonRepositoryPublicRepositoryPtrOutput)
}

type PythonRepositoryPtrOutput struct{ *pulumi.OutputState }

func (PythonRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PythonRepository)(nil)).Elem()
}

func (o PythonRepositoryPtrOutput) ToPythonRepositoryPtrOutput() PythonRepositoryPtrOutput {
	return o
}

func (o PythonRepositoryPtrOutput) ToPythonRepositoryPtrOutputWithContext(ctx context.Context) PythonRepositoryPtrOutput {
	return o
}

func (o PythonRepositoryPtrOutput) Elem() PythonRepositoryOutput {
	return o.ApplyT(func(v *PythonRepository) PythonRepository {
		if v != nil {
			return *v
		}
		var ret PythonRepository
		return ret
	}).(PythonRepositoryOutput)
}

// One of the publicly available Python repositories supported by Artifact Registry.
func (o PythonRepositoryPtrOutput) PublicRepository() PythonRepositoryPublicRepositoryPtrOutput {
	return o.ApplyT(func(v *PythonRepository) *PythonRepositoryPublicRepository {
		if v == nil {
			return nil
		}
		return v.PublicRepository
	}).(PythonRepositoryPublicRepositoryPtrOutput)
}

// Configuration for a Python remote repository.
type PythonRepositoryResponse struct {
	// One of the publicly available Python repositories supported by Artifact Registry.
	PublicRepository string `pulumi:"publicRepository"`
}

// Configuration for a Python remote repository.
type PythonRepositoryResponseOutput struct{ *pulumi.OutputState }

func (PythonRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonRepositoryResponse)(nil)).Elem()
}

func (o PythonRepositoryResponseOutput) ToPythonRepositoryResponseOutput() PythonRepositoryResponseOutput {
	return o
}

func (o PythonRepositoryResponseOutput) ToPythonRepositoryResponseOutputWithContext(ctx context.Context) PythonRepositoryResponseOutput {
	return o
}

// One of the publicly available Python repositories supported by Artifact Registry.
func (o PythonRepositoryResponseOutput) PublicRepository() pulumi.StringOutput {
	return o.ApplyT(func(v PythonRepositoryResponse) string { return v.PublicRepository }).(pulumi.StringOutput)
}

// Remote repository configuration.
type RemoteRepositoryConfig struct {
	// The description of the remote source.
	Description *string `pulumi:"description"`
	// Specific settings for a Docker remote repository.
	DockerRepository *DockerRepository `pulumi:"dockerRepository"`
	// Specific settings for a Maven remote repository.
	MavenRepository *MavenRepository `pulumi:"mavenRepository"`
	// Specific settings for an Npm remote repository.
	NpmRepository *NpmRepository `pulumi:"npmRepository"`
	// Specific settings for a Python remote repository.
	PythonRepository *PythonRepository `pulumi:"pythonRepository"`
}

// RemoteRepositoryConfigInput is an input type that accepts RemoteRepositoryConfigArgs and RemoteRepositoryConfigOutput values.
// You can construct a concrete instance of `RemoteRepositoryConfigInput` via:
//
//	RemoteRepositoryConfigArgs{...}
type RemoteRepositoryConfigInput interface {
	pulumi.Input

	ToRemoteRepositoryConfigOutput() RemoteRepositoryConfigOutput
	ToRemoteRepositoryConfigOutputWithContext(context.Context) RemoteRepositoryConfigOutput
}

// Remote repository configuration.
type RemoteRepositoryConfigArgs struct {
	// The description of the remote source.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specific settings for a Docker remote repository.
	DockerRepository DockerRepositoryPtrInput `pulumi:"dockerRepository"`
	// Specific settings for a Maven remote repository.
	MavenRepository MavenRepositoryPtrInput `pulumi:"mavenRepository"`
	// Specific settings for an Npm remote repository.
	NpmRepository NpmRepositoryPtrInput `pulumi:"npmRepository"`
	// Specific settings for a Python remote repository.
	PythonRepository PythonRepositoryPtrInput `pulumi:"pythonRepository"`
}

func (RemoteRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteRepositoryConfig)(nil)).Elem()
}

func (i RemoteRepositoryConfigArgs) ToRemoteRepositoryConfigOutput() RemoteRepositoryConfigOutput {
	return i.ToRemoteRepositoryConfigOutputWithContext(context.Background())
}

func (i RemoteRepositoryConfigArgs) ToRemoteRepositoryConfigOutputWithContext(ctx context.Context) RemoteRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryConfigOutput)
}

func (i RemoteRepositoryConfigArgs) ToRemoteRepositoryConfigPtrOutput() RemoteRepositoryConfigPtrOutput {
	return i.ToRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i RemoteRepositoryConfigArgs) ToRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RemoteRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryConfigOutput).ToRemoteRepositoryConfigPtrOutputWithContext(ctx)
}

// RemoteRepositoryConfigPtrInput is an input type that accepts RemoteRepositoryConfigArgs, RemoteRepositoryConfigPtr and RemoteRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `RemoteRepositoryConfigPtrInput` via:
//
//	        RemoteRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type RemoteRepositoryConfigPtrInput interface {
	pulumi.Input

	ToRemoteRepositoryConfigPtrOutput() RemoteRepositoryConfigPtrOutput
	ToRemoteRepositoryConfigPtrOutputWithContext(context.Context) RemoteRepositoryConfigPtrOutput
}

type remoteRepositoryConfigPtrType RemoteRepositoryConfigArgs

func RemoteRepositoryConfigPtr(v *RemoteRepositoryConfigArgs) RemoteRepositoryConfigPtrInput {
	return (*remoteRepositoryConfigPtrType)(v)
}

func (*remoteRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteRepositoryConfig)(nil)).Elem()
}

func (i *remoteRepositoryConfigPtrType) ToRemoteRepositoryConfigPtrOutput() RemoteRepositoryConfigPtrOutput {
	return i.ToRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *remoteRepositoryConfigPtrType) ToRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RemoteRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteRepositoryConfigPtrOutput)
}

// Remote repository configuration.
type RemoteRepositoryConfigOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteRepositoryConfig)(nil)).Elem()
}

func (o RemoteRepositoryConfigOutput) ToRemoteRepositoryConfigOutput() RemoteRepositoryConfigOutput {
	return o
}

func (o RemoteRepositoryConfigOutput) ToRemoteRepositoryConfigOutputWithContext(ctx context.Context) RemoteRepositoryConfigOutput {
	return o
}

func (o RemoteRepositoryConfigOutput) ToRemoteRepositoryConfigPtrOutput() RemoteRepositoryConfigPtrOutput {
	return o.ToRemoteRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o RemoteRepositoryConfigOutput) ToRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RemoteRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteRepositoryConfig) *RemoteRepositoryConfig {
		return &v
	}).(RemoteRepositoryConfigPtrOutput)
}

// The description of the remote source.
func (o RemoteRepositoryConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specific settings for a Docker remote repository.
func (o RemoteRepositoryConfigOutput) DockerRepository() DockerRepositoryPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *DockerRepository { return v.DockerRepository }).(DockerRepositoryPtrOutput)
}

// Specific settings for a Maven remote repository.
func (o RemoteRepositoryConfigOutput) MavenRepository() MavenRepositoryPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *MavenRepository { return v.MavenRepository }).(MavenRepositoryPtrOutput)
}

// Specific settings for an Npm remote repository.
func (o RemoteRepositoryConfigOutput) NpmRepository() NpmRepositoryPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *NpmRepository { return v.NpmRepository }).(NpmRepositoryPtrOutput)
}

// Specific settings for a Python remote repository.
func (o RemoteRepositoryConfigOutput) PythonRepository() PythonRepositoryPtrOutput {
	return o.ApplyT(func(v RemoteRepositoryConfig) *PythonRepository { return v.PythonRepository }).(PythonRepositoryPtrOutput)
}

type RemoteRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteRepositoryConfig)(nil)).Elem()
}

func (o RemoteRepositoryConfigPtrOutput) ToRemoteRepositoryConfigPtrOutput() RemoteRepositoryConfigPtrOutput {
	return o
}

func (o RemoteRepositoryConfigPtrOutput) ToRemoteRepositoryConfigPtrOutputWithContext(ctx context.Context) RemoteRepositoryConfigPtrOutput {
	return o
}

func (o RemoteRepositoryConfigPtrOutput) Elem() RemoteRepositoryConfigOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) RemoteRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret RemoteRepositoryConfig
		return ret
	}).(RemoteRepositoryConfigOutput)
}

// The description of the remote source.
func (o RemoteRepositoryConfigPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Specific settings for a Docker remote repository.
func (o RemoteRepositoryConfigPtrOutput) DockerRepository() DockerRepositoryPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *DockerRepository {
		if v == nil {
			return nil
		}
		return v.DockerRepository
	}).(DockerRepositoryPtrOutput)
}

// Specific settings for a Maven remote repository.
func (o RemoteRepositoryConfigPtrOutput) MavenRepository() MavenRepositoryPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *MavenRepository {
		if v == nil {
			return nil
		}
		return v.MavenRepository
	}).(MavenRepositoryPtrOutput)
}

// Specific settings for an Npm remote repository.
func (o RemoteRepositoryConfigPtrOutput) NpmRepository() NpmRepositoryPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *NpmRepository {
		if v == nil {
			return nil
		}
		return v.NpmRepository
	}).(NpmRepositoryPtrOutput)
}

// Specific settings for a Python remote repository.
func (o RemoteRepositoryConfigPtrOutput) PythonRepository() PythonRepositoryPtrOutput {
	return o.ApplyT(func(v *RemoteRepositoryConfig) *PythonRepository {
		if v == nil {
			return nil
		}
		return v.PythonRepository
	}).(PythonRepositoryPtrOutput)
}

// Remote repository configuration.
type RemoteRepositoryConfigResponse struct {
	// The description of the remote source.
	Description string `pulumi:"description"`
	// Specific settings for a Docker remote repository.
	DockerRepository DockerRepositoryResponse `pulumi:"dockerRepository"`
	// Specific settings for a Maven remote repository.
	MavenRepository MavenRepositoryResponse `pulumi:"mavenRepository"`
	// Specific settings for an Npm remote repository.
	NpmRepository NpmRepositoryResponse `pulumi:"npmRepository"`
	// Specific settings for a Python remote repository.
	PythonRepository PythonRepositoryResponse `pulumi:"pythonRepository"`
}

// Remote repository configuration.
type RemoteRepositoryConfigResponseOutput struct{ *pulumi.OutputState }

func (RemoteRepositoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteRepositoryConfigResponse)(nil)).Elem()
}

func (o RemoteRepositoryConfigResponseOutput) ToRemoteRepositoryConfigResponseOutput() RemoteRepositoryConfigResponseOutput {
	return o
}

func (o RemoteRepositoryConfigResponseOutput) ToRemoteRepositoryConfigResponseOutputWithContext(ctx context.Context) RemoteRepositoryConfigResponseOutput {
	return o
}

// The description of the remote source.
func (o RemoteRepositoryConfigResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Specific settings for a Docker remote repository.
func (o RemoteRepositoryConfigResponseOutput) DockerRepository() DockerRepositoryResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) DockerRepositoryResponse { return v.DockerRepository }).(DockerRepositoryResponseOutput)
}

// Specific settings for a Maven remote repository.
func (o RemoteRepositoryConfigResponseOutput) MavenRepository() MavenRepositoryResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) MavenRepositoryResponse { return v.MavenRepository }).(MavenRepositoryResponseOutput)
}

// Specific settings for an Npm remote repository.
func (o RemoteRepositoryConfigResponseOutput) NpmRepository() NpmRepositoryResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) NpmRepositoryResponse { return v.NpmRepository }).(NpmRepositoryResponseOutput)
}

// Specific settings for a Python remote repository.
func (o RemoteRepositoryConfigResponseOutput) PythonRepository() PythonRepositoryResponseOutput {
	return o.ApplyT(func(v RemoteRepositoryConfigResponse) PythonRepositoryResponse { return v.PythonRepository }).(PythonRepositoryResponseOutput)
}

// Artifact policy configuration for the repository contents.
type UpstreamPolicy struct {
	// The user-provided ID of the upstream policy.
	Id *string `pulumi:"id"`
	// Entries with a greater priority value take precedence in the pull order.
	Priority *int `pulumi:"priority"`
	// A reference to the repository resource, for example: "projects/p1/locations/us-central1/repositories/repo1".
	Repository *string `pulumi:"repository"`
}

// UpstreamPolicyInput is an input type that accepts UpstreamPolicyArgs and UpstreamPolicyOutput values.
// You can construct a concrete instance of `UpstreamPolicyInput` via:
//
//	UpstreamPolicyArgs{...}
type UpstreamPolicyInput interface {
	pulumi.Input

	ToUpstreamPolicyOutput() UpstreamPolicyOutput
	ToUpstreamPolicyOutputWithContext(context.Context) UpstreamPolicyOutput
}

// Artifact policy configuration for the repository contents.
type UpstreamPolicyArgs struct {
	// The user-provided ID of the upstream policy.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Entries with a greater priority value take precedence in the pull order.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// A reference to the repository resource, for example: "projects/p1/locations/us-central1/repositories/repo1".
	Repository pulumi.StringPtrInput `pulumi:"repository"`
}

func (UpstreamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamPolicy)(nil)).Elem()
}

func (i UpstreamPolicyArgs) ToUpstreamPolicyOutput() UpstreamPolicyOutput {
	return i.ToUpstreamPolicyOutputWithContext(context.Background())
}

func (i UpstreamPolicyArgs) ToUpstreamPolicyOutputWithContext(ctx context.Context) UpstreamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamPolicyOutput)
}

// UpstreamPolicyArrayInput is an input type that accepts UpstreamPolicyArray and UpstreamPolicyArrayOutput values.
// You can construct a concrete instance of `UpstreamPolicyArrayInput` via:
//
//	UpstreamPolicyArray{ UpstreamPolicyArgs{...} }
type UpstreamPolicyArrayInput interface {
	pulumi.Input

	ToUpstreamPolicyArrayOutput() UpstreamPolicyArrayOutput
	ToUpstreamPolicyArrayOutputWithContext(context.Context) UpstreamPolicyArrayOutput
}

type UpstreamPolicyArray []UpstreamPolicyInput

func (UpstreamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamPolicy)(nil)).Elem()
}

func (i UpstreamPolicyArray) ToUpstreamPolicyArrayOutput() UpstreamPolicyArrayOutput {
	return i.ToUpstreamPolicyArrayOutputWithContext(context.Background())
}

func (i UpstreamPolicyArray) ToUpstreamPolicyArrayOutputWithContext(ctx context.Context) UpstreamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamPolicyArrayOutput)
}

// Artifact policy configuration for the repository contents.
type UpstreamPolicyOutput struct{ *pulumi.OutputState }

func (UpstreamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamPolicy)(nil)).Elem()
}

func (o UpstreamPolicyOutput) ToUpstreamPolicyOutput() UpstreamPolicyOutput {
	return o
}

func (o UpstreamPolicyOutput) ToUpstreamPolicyOutputWithContext(ctx context.Context) UpstreamPolicyOutput {
	return o
}

// The user-provided ID of the upstream policy.
func (o UpstreamPolicyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamPolicy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Entries with a greater priority value take precedence in the pull order.
func (o UpstreamPolicyOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UpstreamPolicy) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// A reference to the repository resource, for example: "projects/p1/locations/us-central1/repositories/repo1".
func (o UpstreamPolicyOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamPolicy) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

type UpstreamPolicyArrayOutput struct{ *pulumi.OutputState }

func (UpstreamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamPolicy)(nil)).Elem()
}

func (o UpstreamPolicyArrayOutput) ToUpstreamPolicyArrayOutput() UpstreamPolicyArrayOutput {
	return o
}

func (o UpstreamPolicyArrayOutput) ToUpstreamPolicyArrayOutputWithContext(ctx context.Context) UpstreamPolicyArrayOutput {
	return o
}

func (o UpstreamPolicyArrayOutput) Index(i pulumi.IntInput) UpstreamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpstreamPolicy {
		return vs[0].([]UpstreamPolicy)[vs[1].(int)]
	}).(UpstreamPolicyOutput)
}

// Artifact policy configuration for the repository contents.
type UpstreamPolicyResponse struct {
	// Entries with a greater priority value take precedence in the pull order.
	Priority int `pulumi:"priority"`
	// A reference to the repository resource, for example: "projects/p1/locations/us-central1/repositories/repo1".
	Repository string `pulumi:"repository"`
}

// Artifact policy configuration for the repository contents.
type UpstreamPolicyResponseOutput struct{ *pulumi.OutputState }

func (UpstreamPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamPolicyResponse)(nil)).Elem()
}

func (o UpstreamPolicyResponseOutput) ToUpstreamPolicyResponseOutput() UpstreamPolicyResponseOutput {
	return o
}

func (o UpstreamPolicyResponseOutput) ToUpstreamPolicyResponseOutputWithContext(ctx context.Context) UpstreamPolicyResponseOutput {
	return o
}

// Entries with a greater priority value take precedence in the pull order.
func (o UpstreamPolicyResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v UpstreamPolicyResponse) int { return v.Priority }).(pulumi.IntOutput)
}

// A reference to the repository resource, for example: "projects/p1/locations/us-central1/repositories/repo1".
func (o UpstreamPolicyResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v UpstreamPolicyResponse) string { return v.Repository }).(pulumi.StringOutput)
}

type UpstreamPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (UpstreamPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpstreamPolicyResponse)(nil)).Elem()
}

func (o UpstreamPolicyResponseArrayOutput) ToUpstreamPolicyResponseArrayOutput() UpstreamPolicyResponseArrayOutput {
	return o
}

func (o UpstreamPolicyResponseArrayOutput) ToUpstreamPolicyResponseArrayOutputWithContext(ctx context.Context) UpstreamPolicyResponseArrayOutput {
	return o
}

func (o UpstreamPolicyResponseArrayOutput) Index(i pulumi.IntInput) UpstreamPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpstreamPolicyResponse {
		return vs[0].([]UpstreamPolicyResponse)[vs[1].(int)]
	}).(UpstreamPolicyResponseOutput)
}

// Virtual repository configuration.
type VirtualRepositoryConfig struct {
	// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
	UpstreamPolicies []UpstreamPolicy `pulumi:"upstreamPolicies"`
}

// VirtualRepositoryConfigInput is an input type that accepts VirtualRepositoryConfigArgs and VirtualRepositoryConfigOutput values.
// You can construct a concrete instance of `VirtualRepositoryConfigInput` via:
//
//	VirtualRepositoryConfigArgs{...}
type VirtualRepositoryConfigInput interface {
	pulumi.Input

	ToVirtualRepositoryConfigOutput() VirtualRepositoryConfigOutput
	ToVirtualRepositoryConfigOutputWithContext(context.Context) VirtualRepositoryConfigOutput
}

// Virtual repository configuration.
type VirtualRepositoryConfigArgs struct {
	// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
	UpstreamPolicies UpstreamPolicyArrayInput `pulumi:"upstreamPolicies"`
}

func (VirtualRepositoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRepositoryConfig)(nil)).Elem()
}

func (i VirtualRepositoryConfigArgs) ToVirtualRepositoryConfigOutput() VirtualRepositoryConfigOutput {
	return i.ToVirtualRepositoryConfigOutputWithContext(context.Background())
}

func (i VirtualRepositoryConfigArgs) ToVirtualRepositoryConfigOutputWithContext(ctx context.Context) VirtualRepositoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryConfigOutput)
}

func (i VirtualRepositoryConfigArgs) ToVirtualRepositoryConfigPtrOutput() VirtualRepositoryConfigPtrOutput {
	return i.ToVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i VirtualRepositoryConfigArgs) ToVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) VirtualRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryConfigOutput).ToVirtualRepositoryConfigPtrOutputWithContext(ctx)
}

// VirtualRepositoryConfigPtrInput is an input type that accepts VirtualRepositoryConfigArgs, VirtualRepositoryConfigPtr and VirtualRepositoryConfigPtrOutput values.
// You can construct a concrete instance of `VirtualRepositoryConfigPtrInput` via:
//
//	        VirtualRepositoryConfigArgs{...}
//
//	or:
//
//	        nil
type VirtualRepositoryConfigPtrInput interface {
	pulumi.Input

	ToVirtualRepositoryConfigPtrOutput() VirtualRepositoryConfigPtrOutput
	ToVirtualRepositoryConfigPtrOutputWithContext(context.Context) VirtualRepositoryConfigPtrOutput
}

type virtualRepositoryConfigPtrType VirtualRepositoryConfigArgs

func VirtualRepositoryConfigPtr(v *VirtualRepositoryConfigArgs) VirtualRepositoryConfigPtrInput {
	return (*virtualRepositoryConfigPtrType)(v)
}

func (*virtualRepositoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualRepositoryConfig)(nil)).Elem()
}

func (i *virtualRepositoryConfigPtrType) ToVirtualRepositoryConfigPtrOutput() VirtualRepositoryConfigPtrOutput {
	return i.ToVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (i *virtualRepositoryConfigPtrType) ToVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) VirtualRepositoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualRepositoryConfigPtrOutput)
}

// Virtual repository configuration.
type VirtualRepositoryConfigOutput struct{ *pulumi.OutputState }

func (VirtualRepositoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRepositoryConfig)(nil)).Elem()
}

func (o VirtualRepositoryConfigOutput) ToVirtualRepositoryConfigOutput() VirtualRepositoryConfigOutput {
	return o
}

func (o VirtualRepositoryConfigOutput) ToVirtualRepositoryConfigOutputWithContext(ctx context.Context) VirtualRepositoryConfigOutput {
	return o
}

func (o VirtualRepositoryConfigOutput) ToVirtualRepositoryConfigPtrOutput() VirtualRepositoryConfigPtrOutput {
	return o.ToVirtualRepositoryConfigPtrOutputWithContext(context.Background())
}

func (o VirtualRepositoryConfigOutput) ToVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) VirtualRepositoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualRepositoryConfig) *VirtualRepositoryConfig {
		return &v
	}).(VirtualRepositoryConfigPtrOutput)
}

// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
func (o VirtualRepositoryConfigOutput) UpstreamPolicies() UpstreamPolicyArrayOutput {
	return o.ApplyT(func(v VirtualRepositoryConfig) []UpstreamPolicy { return v.UpstreamPolicies }).(UpstreamPolicyArrayOutput)
}

type VirtualRepositoryConfigPtrOutput struct{ *pulumi.OutputState }

func (VirtualRepositoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualRepositoryConfig)(nil)).Elem()
}

func (o VirtualRepositoryConfigPtrOutput) ToVirtualRepositoryConfigPtrOutput() VirtualRepositoryConfigPtrOutput {
	return o
}

func (o VirtualRepositoryConfigPtrOutput) ToVirtualRepositoryConfigPtrOutputWithContext(ctx context.Context) VirtualRepositoryConfigPtrOutput {
	return o
}

func (o VirtualRepositoryConfigPtrOutput) Elem() VirtualRepositoryConfigOutput {
	return o.ApplyT(func(v *VirtualRepositoryConfig) VirtualRepositoryConfig {
		if v != nil {
			return *v
		}
		var ret VirtualRepositoryConfig
		return ret
	}).(VirtualRepositoryConfigOutput)
}

// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
func (o VirtualRepositoryConfigPtrOutput) UpstreamPolicies() UpstreamPolicyArrayOutput {
	return o.ApplyT(func(v *VirtualRepositoryConfig) []UpstreamPolicy {
		if v == nil {
			return nil
		}
		return v.UpstreamPolicies
	}).(UpstreamPolicyArrayOutput)
}

// Virtual repository configuration.
type VirtualRepositoryConfigResponse struct {
	// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
	UpstreamPolicies []UpstreamPolicyResponse `pulumi:"upstreamPolicies"`
}

// Virtual repository configuration.
type VirtualRepositoryConfigResponseOutput struct{ *pulumi.OutputState }

func (VirtualRepositoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualRepositoryConfigResponse)(nil)).Elem()
}

func (o VirtualRepositoryConfigResponseOutput) ToVirtualRepositoryConfigResponseOutput() VirtualRepositoryConfigResponseOutput {
	return o
}

func (o VirtualRepositoryConfigResponseOutput) ToVirtualRepositoryConfigResponseOutputWithContext(ctx context.Context) VirtualRepositoryConfigResponseOutput {
	return o
}

// Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
func (o VirtualRepositoryConfigResponseOutput) UpstreamPolicies() UpstreamPolicyResponseArrayOutput {
	return o.ApplyT(func(v VirtualRepositoryConfigResponse) []UpstreamPolicyResponse { return v.UpstreamPolicies }).(UpstreamPolicyResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerRepositoryInput)(nil)).Elem(), DockerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerRepositoryPtrInput)(nil)).Elem(), DockerRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerRepositoryConfigInput)(nil)).Elem(), DockerRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DockerRepositoryConfigPtrInput)(nil)).Elem(), DockerRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryInput)(nil)).Elem(), MavenRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryPtrInput)(nil)).Elem(), MavenRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryConfigInput)(nil)).Elem(), MavenRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MavenRepositoryConfigPtrInput)(nil)).Elem(), MavenRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NpmRepositoryInput)(nil)).Elem(), NpmRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NpmRepositoryPtrInput)(nil)).Elem(), NpmRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PythonRepositoryInput)(nil)).Elem(), PythonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PythonRepositoryPtrInput)(nil)).Elem(), PythonRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRepositoryConfigInput)(nil)).Elem(), RemoteRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteRepositoryConfigPtrInput)(nil)).Elem(), RemoteRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamPolicyInput)(nil)).Elem(), UpstreamPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamPolicyArrayInput)(nil)).Elem(), UpstreamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRepositoryConfigInput)(nil)).Elem(), VirtualRepositoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualRepositoryConfigPtrInput)(nil)).Elem(), VirtualRepositoryConfigArgs{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(DockerRepositoryOutput{})
	pulumi.RegisterOutputType(DockerRepositoryPtrOutput{})
	pulumi.RegisterOutputType(DockerRepositoryConfigOutput{})
	pulumi.RegisterOutputType(DockerRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(DockerRepositoryConfigResponseOutput{})
	pulumi.RegisterOutputType(DockerRepositoryResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(MavenRepositoryOutput{})
	pulumi.RegisterOutputType(MavenRepositoryPtrOutput{})
	pulumi.RegisterOutputType(MavenRepositoryConfigOutput{})
	pulumi.RegisterOutputType(MavenRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(MavenRepositoryConfigResponseOutput{})
	pulumi.RegisterOutputType(MavenRepositoryResponseOutput{})
	pulumi.RegisterOutputType(NpmRepositoryOutput{})
	pulumi.RegisterOutputType(NpmRepositoryPtrOutput{})
	pulumi.RegisterOutputType(NpmRepositoryResponseOutput{})
	pulumi.RegisterOutputType(PythonRepositoryOutput{})
	pulumi.RegisterOutputType(PythonRepositoryPtrOutput{})
	pulumi.RegisterOutputType(PythonRepositoryResponseOutput{})
	pulumi.RegisterOutputType(RemoteRepositoryConfigOutput{})
	pulumi.RegisterOutputType(RemoteRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(RemoteRepositoryConfigResponseOutput{})
	pulumi.RegisterOutputType(UpstreamPolicyOutput{})
	pulumi.RegisterOutputType(UpstreamPolicyArrayOutput{})
	pulumi.RegisterOutputType(UpstreamPolicyResponseOutput{})
	pulumi.RegisterOutputType(UpstreamPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualRepositoryConfigOutput{})
	pulumi.RegisterOutputType(VirtualRepositoryConfigPtrOutput{})
	pulumi.RegisterOutputType(VirtualRepositoryConfigResponseOutput{})
}
