// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a tag.
type RepositoryPackageTag struct {
	pulumi.CustomResourceState

	// The name of the tag, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1".
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the version the tag refers to, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811"
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewRepositoryPackageTag registers a new resource with the given unique name, arguments, and options.
func NewRepositoryPackageTag(ctx *pulumi.Context,
	name string, args *RepositoryPackageTagArgs, opts ...pulumi.ResourceOption) (*RepositoryPackageTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.PackageId == nil {
		return nil, errors.New("invalid value for required argument 'PackageId'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	var resource RepositoryPackageTag
	err := ctx.RegisterResource("google-native:artifactregistry/v1beta2:RepositoryPackageTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryPackageTag gets an existing RepositoryPackageTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryPackageTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryPackageTagState, opts ...pulumi.ResourceOption) (*RepositoryPackageTag, error) {
	var resource RepositoryPackageTag
	err := ctx.ReadResource("google-native:artifactregistry/v1beta2:RepositoryPackageTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryPackageTag resources.
type repositoryPackageTagState struct {
	// The name of the tag, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1".
	Name *string `pulumi:"name"`
	// The name of the version the tag refers to, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811"
	Version *string `pulumi:"version"`
}

type RepositoryPackageTagState struct {
	// The name of the tag, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1".
	Name pulumi.StringPtrInput
	// The name of the version the tag refers to, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811"
	Version pulumi.StringPtrInput
}

func (RepositoryPackageTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryPackageTagState)(nil)).Elem()
}

type repositoryPackageTagArgs struct {
	Location string `pulumi:"location"`
	// The name of the tag, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1".
	Name         *string `pulumi:"name"`
	PackageId    string  `pulumi:"packageId"`
	Project      string  `pulumi:"project"`
	RepositoryId string  `pulumi:"repositoryId"`
	TagId        *string `pulumi:"tagId"`
	// The name of the version the tag refers to, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811"
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a RepositoryPackageTag resource.
type RepositoryPackageTagArgs struct {
	Location pulumi.StringInput
	// The name of the tag, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1".
	Name         pulumi.StringPtrInput
	PackageId    pulumi.StringInput
	Project      pulumi.StringInput
	RepositoryId pulumi.StringInput
	TagId        pulumi.StringPtrInput
	// The name of the version the tag refers to, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811"
	Version pulumi.StringPtrInput
}

func (RepositoryPackageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryPackageTagArgs)(nil)).Elem()
}

type RepositoryPackageTagInput interface {
	pulumi.Input

	ToRepositoryPackageTagOutput() RepositoryPackageTagOutput
	ToRepositoryPackageTagOutputWithContext(ctx context.Context) RepositoryPackageTagOutput
}

func (*RepositoryPackageTag) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryPackageTag)(nil))
}

func (i *RepositoryPackageTag) ToRepositoryPackageTagOutput() RepositoryPackageTagOutput {
	return i.ToRepositoryPackageTagOutputWithContext(context.Background())
}

func (i *RepositoryPackageTag) ToRepositoryPackageTagOutputWithContext(ctx context.Context) RepositoryPackageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryPackageTagOutput)
}

type RepositoryPackageTagOutput struct {
	*pulumi.OutputState
}

func (RepositoryPackageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryPackageTag)(nil))
}

func (o RepositoryPackageTagOutput) ToRepositoryPackageTagOutput() RepositoryPackageTagOutput {
	return o
}

func (o RepositoryPackageTagOutput) ToRepositoryPackageTagOutputWithContext(ctx context.Context) RepositoryPackageTagOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RepositoryPackageTagOutput{})
}
