// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Settings for Binary Authorization feature.
type GoogleCloudRunOpV2BinaryAuthorization struct {
	// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	BreakglassJustification *string `pulumi:"breakglassJustification"`
	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	UseDefault *bool `pulumi:"useDefault"`
}

// GoogleCloudRunOpV2BinaryAuthorizationInput is an input type that accepts GoogleCloudRunOpV2BinaryAuthorizationArgs and GoogleCloudRunOpV2BinaryAuthorizationOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2BinaryAuthorizationInput` via:
//
//          GoogleCloudRunOpV2BinaryAuthorizationArgs{...}
type GoogleCloudRunOpV2BinaryAuthorizationInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2BinaryAuthorizationOutput() GoogleCloudRunOpV2BinaryAuthorizationOutput
	ToGoogleCloudRunOpV2BinaryAuthorizationOutputWithContext(context.Context) GoogleCloudRunOpV2BinaryAuthorizationOutput
}

// Settings for Binary Authorization feature.
type GoogleCloudRunOpV2BinaryAuthorizationArgs struct {
	// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	BreakglassJustification pulumi.StringPtrInput `pulumi:"breakglassJustification"`
	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	UseDefault pulumi.BoolPtrInput `pulumi:"useDefault"`
}

func (GoogleCloudRunOpV2BinaryAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2BinaryAuthorization)(nil)).Elem()
}

func (i GoogleCloudRunOpV2BinaryAuthorizationArgs) ToGoogleCloudRunOpV2BinaryAuthorizationOutput() GoogleCloudRunOpV2BinaryAuthorizationOutput {
	return i.ToGoogleCloudRunOpV2BinaryAuthorizationOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2BinaryAuthorizationArgs) ToGoogleCloudRunOpV2BinaryAuthorizationOutputWithContext(ctx context.Context) GoogleCloudRunOpV2BinaryAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2BinaryAuthorizationOutput)
}

func (i GoogleCloudRunOpV2BinaryAuthorizationArgs) ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutput() GoogleCloudRunOpV2BinaryAuthorizationPtrOutput {
	return i.ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2BinaryAuthorizationArgs) ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2BinaryAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2BinaryAuthorizationOutput).ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutputWithContext(ctx)
}

// GoogleCloudRunOpV2BinaryAuthorizationPtrInput is an input type that accepts GoogleCloudRunOpV2BinaryAuthorizationArgs, GoogleCloudRunOpV2BinaryAuthorizationPtr and GoogleCloudRunOpV2BinaryAuthorizationPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2BinaryAuthorizationPtrInput` via:
//
//          GoogleCloudRunOpV2BinaryAuthorizationArgs{...}
//
//  or:
//
//          nil
type GoogleCloudRunOpV2BinaryAuthorizationPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutput() GoogleCloudRunOpV2BinaryAuthorizationPtrOutput
	ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutputWithContext(context.Context) GoogleCloudRunOpV2BinaryAuthorizationPtrOutput
}

type googleCloudRunOpV2BinaryAuthorizationPtrType GoogleCloudRunOpV2BinaryAuthorizationArgs

func GoogleCloudRunOpV2BinaryAuthorizationPtr(v *GoogleCloudRunOpV2BinaryAuthorizationArgs) GoogleCloudRunOpV2BinaryAuthorizationPtrInput {
	return (*googleCloudRunOpV2BinaryAuthorizationPtrType)(v)
}

func (*googleCloudRunOpV2BinaryAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2BinaryAuthorization)(nil)).Elem()
}

func (i *googleCloudRunOpV2BinaryAuthorizationPtrType) ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutput() GoogleCloudRunOpV2BinaryAuthorizationPtrOutput {
	return i.ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunOpV2BinaryAuthorizationPtrType) ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2BinaryAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2BinaryAuthorizationPtrOutput)
}

// Settings for Binary Authorization feature.
type GoogleCloudRunOpV2BinaryAuthorizationOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2BinaryAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2BinaryAuthorization)(nil)).Elem()
}

func (o GoogleCloudRunOpV2BinaryAuthorizationOutput) ToGoogleCloudRunOpV2BinaryAuthorizationOutput() GoogleCloudRunOpV2BinaryAuthorizationOutput {
	return o
}

func (o GoogleCloudRunOpV2BinaryAuthorizationOutput) ToGoogleCloudRunOpV2BinaryAuthorizationOutputWithContext(ctx context.Context) GoogleCloudRunOpV2BinaryAuthorizationOutput {
	return o
}

func (o GoogleCloudRunOpV2BinaryAuthorizationOutput) ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutput() GoogleCloudRunOpV2BinaryAuthorizationPtrOutput {
	return o.ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunOpV2BinaryAuthorizationOutput) ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2BinaryAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunOpV2BinaryAuthorization) *GoogleCloudRunOpV2BinaryAuthorization {
		return &v
	}).(GoogleCloudRunOpV2BinaryAuthorizationPtrOutput)
}

// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
func (o GoogleCloudRunOpV2BinaryAuthorizationOutput) BreakglassJustification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2BinaryAuthorization) *string { return v.BreakglassJustification }).(pulumi.StringPtrOutput)
}

// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
func (o GoogleCloudRunOpV2BinaryAuthorizationOutput) UseDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2BinaryAuthorization) *bool { return v.UseDefault }).(pulumi.BoolPtrOutput)
}

type GoogleCloudRunOpV2BinaryAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2BinaryAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2BinaryAuthorization)(nil)).Elem()
}

func (o GoogleCloudRunOpV2BinaryAuthorizationPtrOutput) ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutput() GoogleCloudRunOpV2BinaryAuthorizationPtrOutput {
	return o
}

func (o GoogleCloudRunOpV2BinaryAuthorizationPtrOutput) ToGoogleCloudRunOpV2BinaryAuthorizationPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2BinaryAuthorizationPtrOutput {
	return o
}

func (o GoogleCloudRunOpV2BinaryAuthorizationPtrOutput) Elem() GoogleCloudRunOpV2BinaryAuthorizationOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2BinaryAuthorization) GoogleCloudRunOpV2BinaryAuthorization {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunOpV2BinaryAuthorization
		return ret
	}).(GoogleCloudRunOpV2BinaryAuthorizationOutput)
}

// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
func (o GoogleCloudRunOpV2BinaryAuthorizationPtrOutput) BreakglassJustification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2BinaryAuthorization) *string {
		if v == nil {
			return nil
		}
		return v.BreakglassJustification
	}).(pulumi.StringPtrOutput)
}

// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
func (o GoogleCloudRunOpV2BinaryAuthorizationPtrOutput) UseDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2BinaryAuthorization) *bool {
		if v == nil {
			return nil
		}
		return v.UseDefault
	}).(pulumi.BoolPtrOutput)
}

// Settings for Binary Authorization feature.
type GoogleCloudRunOpV2BinaryAuthorizationResponse struct {
	// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	BreakglassJustification string `pulumi:"breakglassJustification"`
	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	UseDefault bool `pulumi:"useDefault"`
}

// Settings for Binary Authorization feature.
type GoogleCloudRunOpV2BinaryAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2BinaryAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2BinaryAuthorizationResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2BinaryAuthorizationResponseOutput) ToGoogleCloudRunOpV2BinaryAuthorizationResponseOutput() GoogleCloudRunOpV2BinaryAuthorizationResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2BinaryAuthorizationResponseOutput) ToGoogleCloudRunOpV2BinaryAuthorizationResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2BinaryAuthorizationResponseOutput {
	return o
}

// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
func (o GoogleCloudRunOpV2BinaryAuthorizationResponseOutput) BreakglassJustification() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2BinaryAuthorizationResponse) string { return v.BreakglassJustification }).(pulumi.StringOutput)
}

// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
func (o GoogleCloudRunOpV2BinaryAuthorizationResponseOutput) UseDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2BinaryAuthorizationResponse) bool { return v.UseDefault }).(pulumi.BoolOutput)
}

// Represents a specific Cloud SQL instance.
type GoogleCloudRunOpV2CloudSqlInstance struct {
	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	Connections []string `pulumi:"connections"`
}

// GoogleCloudRunOpV2CloudSqlInstanceInput is an input type that accepts GoogleCloudRunOpV2CloudSqlInstanceArgs and GoogleCloudRunOpV2CloudSqlInstanceOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2CloudSqlInstanceInput` via:
//
//          GoogleCloudRunOpV2CloudSqlInstanceArgs{...}
type GoogleCloudRunOpV2CloudSqlInstanceInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2CloudSqlInstanceOutput() GoogleCloudRunOpV2CloudSqlInstanceOutput
	ToGoogleCloudRunOpV2CloudSqlInstanceOutputWithContext(context.Context) GoogleCloudRunOpV2CloudSqlInstanceOutput
}

// Represents a specific Cloud SQL instance.
type GoogleCloudRunOpV2CloudSqlInstanceArgs struct {
	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	Connections pulumi.StringArrayInput `pulumi:"connections"`
}

func (GoogleCloudRunOpV2CloudSqlInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2CloudSqlInstance)(nil)).Elem()
}

func (i GoogleCloudRunOpV2CloudSqlInstanceArgs) ToGoogleCloudRunOpV2CloudSqlInstanceOutput() GoogleCloudRunOpV2CloudSqlInstanceOutput {
	return i.ToGoogleCloudRunOpV2CloudSqlInstanceOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2CloudSqlInstanceArgs) ToGoogleCloudRunOpV2CloudSqlInstanceOutputWithContext(ctx context.Context) GoogleCloudRunOpV2CloudSqlInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2CloudSqlInstanceOutput)
}

func (i GoogleCloudRunOpV2CloudSqlInstanceArgs) ToGoogleCloudRunOpV2CloudSqlInstancePtrOutput() GoogleCloudRunOpV2CloudSqlInstancePtrOutput {
	return i.ToGoogleCloudRunOpV2CloudSqlInstancePtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2CloudSqlInstanceArgs) ToGoogleCloudRunOpV2CloudSqlInstancePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2CloudSqlInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2CloudSqlInstanceOutput).ToGoogleCloudRunOpV2CloudSqlInstancePtrOutputWithContext(ctx)
}

// GoogleCloudRunOpV2CloudSqlInstancePtrInput is an input type that accepts GoogleCloudRunOpV2CloudSqlInstanceArgs, GoogleCloudRunOpV2CloudSqlInstancePtr and GoogleCloudRunOpV2CloudSqlInstancePtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2CloudSqlInstancePtrInput` via:
//
//          GoogleCloudRunOpV2CloudSqlInstanceArgs{...}
//
//  or:
//
//          nil
type GoogleCloudRunOpV2CloudSqlInstancePtrInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2CloudSqlInstancePtrOutput() GoogleCloudRunOpV2CloudSqlInstancePtrOutput
	ToGoogleCloudRunOpV2CloudSqlInstancePtrOutputWithContext(context.Context) GoogleCloudRunOpV2CloudSqlInstancePtrOutput
}

type googleCloudRunOpV2CloudSqlInstancePtrType GoogleCloudRunOpV2CloudSqlInstanceArgs

func GoogleCloudRunOpV2CloudSqlInstancePtr(v *GoogleCloudRunOpV2CloudSqlInstanceArgs) GoogleCloudRunOpV2CloudSqlInstancePtrInput {
	return (*googleCloudRunOpV2CloudSqlInstancePtrType)(v)
}

func (*googleCloudRunOpV2CloudSqlInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2CloudSqlInstance)(nil)).Elem()
}

func (i *googleCloudRunOpV2CloudSqlInstancePtrType) ToGoogleCloudRunOpV2CloudSqlInstancePtrOutput() GoogleCloudRunOpV2CloudSqlInstancePtrOutput {
	return i.ToGoogleCloudRunOpV2CloudSqlInstancePtrOutputWithContext(context.Background())
}

func (i *googleCloudRunOpV2CloudSqlInstancePtrType) ToGoogleCloudRunOpV2CloudSqlInstancePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2CloudSqlInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2CloudSqlInstancePtrOutput)
}

// Represents a specific Cloud SQL instance.
type GoogleCloudRunOpV2CloudSqlInstanceOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2CloudSqlInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2CloudSqlInstance)(nil)).Elem()
}

func (o GoogleCloudRunOpV2CloudSqlInstanceOutput) ToGoogleCloudRunOpV2CloudSqlInstanceOutput() GoogleCloudRunOpV2CloudSqlInstanceOutput {
	return o
}

func (o GoogleCloudRunOpV2CloudSqlInstanceOutput) ToGoogleCloudRunOpV2CloudSqlInstanceOutputWithContext(ctx context.Context) GoogleCloudRunOpV2CloudSqlInstanceOutput {
	return o
}

func (o GoogleCloudRunOpV2CloudSqlInstanceOutput) ToGoogleCloudRunOpV2CloudSqlInstancePtrOutput() GoogleCloudRunOpV2CloudSqlInstancePtrOutput {
	return o.ToGoogleCloudRunOpV2CloudSqlInstancePtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunOpV2CloudSqlInstanceOutput) ToGoogleCloudRunOpV2CloudSqlInstancePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2CloudSqlInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunOpV2CloudSqlInstance) *GoogleCloudRunOpV2CloudSqlInstance {
		return &v
	}).(GoogleCloudRunOpV2CloudSqlInstancePtrOutput)
}

// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
func (o GoogleCloudRunOpV2CloudSqlInstanceOutput) Connections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2CloudSqlInstance) []string { return v.Connections }).(pulumi.StringArrayOutput)
}

type GoogleCloudRunOpV2CloudSqlInstancePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2CloudSqlInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2CloudSqlInstance)(nil)).Elem()
}

func (o GoogleCloudRunOpV2CloudSqlInstancePtrOutput) ToGoogleCloudRunOpV2CloudSqlInstancePtrOutput() GoogleCloudRunOpV2CloudSqlInstancePtrOutput {
	return o
}

func (o GoogleCloudRunOpV2CloudSqlInstancePtrOutput) ToGoogleCloudRunOpV2CloudSqlInstancePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2CloudSqlInstancePtrOutput {
	return o
}

func (o GoogleCloudRunOpV2CloudSqlInstancePtrOutput) Elem() GoogleCloudRunOpV2CloudSqlInstanceOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2CloudSqlInstance) GoogleCloudRunOpV2CloudSqlInstance {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunOpV2CloudSqlInstance
		return ret
	}).(GoogleCloudRunOpV2CloudSqlInstanceOutput)
}

// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
func (o GoogleCloudRunOpV2CloudSqlInstancePtrOutput) Connections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2CloudSqlInstance) []string {
		if v == nil {
			return nil
		}
		return v.Connections
	}).(pulumi.StringArrayOutput)
}

// Represents a specific Cloud SQL instance.
type GoogleCloudRunOpV2CloudSqlInstanceResponse struct {
	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	Connections []string `pulumi:"connections"`
}

// Represents a specific Cloud SQL instance.
type GoogleCloudRunOpV2CloudSqlInstanceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2CloudSqlInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2CloudSqlInstanceResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2CloudSqlInstanceResponseOutput) ToGoogleCloudRunOpV2CloudSqlInstanceResponseOutput() GoogleCloudRunOpV2CloudSqlInstanceResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2CloudSqlInstanceResponseOutput) ToGoogleCloudRunOpV2CloudSqlInstanceResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2CloudSqlInstanceResponseOutput {
	return o
}

// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
func (o GoogleCloudRunOpV2CloudSqlInstanceResponseOutput) Connections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2CloudSqlInstanceResponse) []string { return v.Connections }).(pulumi.StringArrayOutput)
}

// Defines a status condition for a resource.
type GoogleCloudRunOpV2ConditionResponse struct {
	// A reason for the domain mapping condition.
	DomainMappingReason string `pulumi:"domainMappingReason"`
	// A reason for the execution condition.
	ExecutionReason string `pulumi:"executionReason"`
	// A reason for the internal condition.
	InternalReason string `pulumi:"internalReason"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about the current status.
	Message string `pulumi:"message"`
	// A common (service-level) reason for this condition.
	Reason string `pulumi:"reason"`
	// A reason for the revision condition.
	RevisionReason string `pulumi:"revisionReason"`
	// How to interpret failures of this condition, one of Error, Warning, Info
	Severity string `pulumi:"severity"`
	// State of the condition.
	State string `pulumi:"state"`
	// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
	Type string `pulumi:"type"`
}

// Defines a status condition for a resource.
type GoogleCloudRunOpV2ConditionResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2ConditionResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ConditionResponseOutput) ToGoogleCloudRunOpV2ConditionResponseOutput() GoogleCloudRunOpV2ConditionResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2ConditionResponseOutput) ToGoogleCloudRunOpV2ConditionResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ConditionResponseOutput {
	return o
}

// A reason for the domain mapping condition.
func (o GoogleCloudRunOpV2ConditionResponseOutput) DomainMappingReason() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ConditionResponse) string { return v.DomainMappingReason }).(pulumi.StringOutput)
}

// A reason for the execution condition.
func (o GoogleCloudRunOpV2ConditionResponseOutput) ExecutionReason() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ConditionResponse) string { return v.ExecutionReason }).(pulumi.StringOutput)
}

// A reason for the internal condition.
func (o GoogleCloudRunOpV2ConditionResponseOutput) InternalReason() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ConditionResponse) string { return v.InternalReason }).(pulumi.StringOutput)
}

// Last time the condition transitioned from one status to another.
func (o GoogleCloudRunOpV2ConditionResponseOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ConditionResponse) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// Human readable message indicating details about the current status.
func (o GoogleCloudRunOpV2ConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

// A common (service-level) reason for this condition.
func (o GoogleCloudRunOpV2ConditionResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ConditionResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// A reason for the revision condition.
func (o GoogleCloudRunOpV2ConditionResponseOutput) RevisionReason() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ConditionResponse) string { return v.RevisionReason }).(pulumi.StringOutput)
}

// How to interpret failures of this condition, one of Error, Warning, Info
func (o GoogleCloudRunOpV2ConditionResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ConditionResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// State of the condition.
func (o GoogleCloudRunOpV2ConditionResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ConditionResponse) string { return v.State }).(pulumi.StringOutput)
}

// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
func (o GoogleCloudRunOpV2ConditionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ConditionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudRunOpV2ConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2ConditionResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ConditionResponseArrayOutput) ToGoogleCloudRunOpV2ConditionResponseArrayOutput() GoogleCloudRunOpV2ConditionResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2ConditionResponseArrayOutput) ToGoogleCloudRunOpV2ConditionResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ConditionResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2ConditionResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2ConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2ConditionResponse {
		return vs[0].([]GoogleCloudRunOpV2ConditionResponse)[vs[1].(int)]
	}).(GoogleCloudRunOpV2ConditionResponseOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type GoogleCloudRunOpV2Container struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container.
	Env []GoogleCloudRunOpV2EnvVar `pulumi:"env"`
	// URL of the Container image in Google Container Registry or Docker More info: https://kubernetes.io/docs/concepts/containers/images
	Image string `pulumi:"image"`
	// Name of the container specified as a DNS_LABEL.
	Name *string `pulumi:"name"`
	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports []GoogleCloudRunOpV2ContainerPort `pulumi:"ports"`
	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *GoogleCloudRunOpV2ResourceRequirements `pulumi:"resources"`
	// Volume to mount into the container's filesystem.
	VolumeMounts []GoogleCloudRunOpV2VolumeMount `pulumi:"volumeMounts"`
}

// GoogleCloudRunOpV2ContainerInput is an input type that accepts GoogleCloudRunOpV2ContainerArgs and GoogleCloudRunOpV2ContainerOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2ContainerInput` via:
//
//          GoogleCloudRunOpV2ContainerArgs{...}
type GoogleCloudRunOpV2ContainerInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2ContainerOutput() GoogleCloudRunOpV2ContainerOutput
	ToGoogleCloudRunOpV2ContainerOutputWithContext(context.Context) GoogleCloudRunOpV2ContainerOutput
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type GoogleCloudRunOpV2ContainerArgs struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command pulumi.StringArrayInput `pulumi:"command"`
	// List of environment variables to set in the container.
	Env GoogleCloudRunOpV2EnvVarArrayInput `pulumi:"env"`
	// URL of the Container image in Google Container Registry or Docker More info: https://kubernetes.io/docs/concepts/containers/images
	Image pulumi.StringInput `pulumi:"image"`
	// Name of the container specified as a DNS_LABEL.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports GoogleCloudRunOpV2ContainerPortArrayInput `pulumi:"ports"`
	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources GoogleCloudRunOpV2ResourceRequirementsPtrInput `pulumi:"resources"`
	// Volume to mount into the container's filesystem.
	VolumeMounts GoogleCloudRunOpV2VolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (GoogleCloudRunOpV2ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2Container)(nil)).Elem()
}

func (i GoogleCloudRunOpV2ContainerArgs) ToGoogleCloudRunOpV2ContainerOutput() GoogleCloudRunOpV2ContainerOutput {
	return i.ToGoogleCloudRunOpV2ContainerOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2ContainerArgs) ToGoogleCloudRunOpV2ContainerOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2ContainerOutput)
}

// GoogleCloudRunOpV2ContainerArrayInput is an input type that accepts GoogleCloudRunOpV2ContainerArray and GoogleCloudRunOpV2ContainerArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2ContainerArrayInput` via:
//
//          GoogleCloudRunOpV2ContainerArray{ GoogleCloudRunOpV2ContainerArgs{...} }
type GoogleCloudRunOpV2ContainerArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2ContainerArrayOutput() GoogleCloudRunOpV2ContainerArrayOutput
	ToGoogleCloudRunOpV2ContainerArrayOutputWithContext(context.Context) GoogleCloudRunOpV2ContainerArrayOutput
}

type GoogleCloudRunOpV2ContainerArray []GoogleCloudRunOpV2ContainerInput

func (GoogleCloudRunOpV2ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2Container)(nil)).Elem()
}

func (i GoogleCloudRunOpV2ContainerArray) ToGoogleCloudRunOpV2ContainerArrayOutput() GoogleCloudRunOpV2ContainerArrayOutput {
	return i.ToGoogleCloudRunOpV2ContainerArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2ContainerArray) ToGoogleCloudRunOpV2ContainerArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2ContainerArrayOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type GoogleCloudRunOpV2ContainerOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2Container)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ContainerOutput) ToGoogleCloudRunOpV2ContainerOutput() GoogleCloudRunOpV2ContainerOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerOutput) ToGoogleCloudRunOpV2ContainerOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerOutput {
	return o
}

// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o GoogleCloudRunOpV2ContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Container) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o GoogleCloudRunOpV2ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Container) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container.
func (o GoogleCloudRunOpV2ContainerOutput) Env() GoogleCloudRunOpV2EnvVarArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Container) []GoogleCloudRunOpV2EnvVar { return v.Env }).(GoogleCloudRunOpV2EnvVarArrayOutput)
}

// URL of the Container image in Google Container Registry or Docker More info: https://kubernetes.io/docs/concepts/containers/images
func (o GoogleCloudRunOpV2ContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Container) string { return v.Image }).(pulumi.StringOutput)
}

// Name of the container specified as a DNS_LABEL.
func (o GoogleCloudRunOpV2ContainerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Container) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
func (o GoogleCloudRunOpV2ContainerOutput) Ports() GoogleCloudRunOpV2ContainerPortArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Container) []GoogleCloudRunOpV2ContainerPort { return v.Ports }).(GoogleCloudRunOpV2ContainerPortArrayOutput)
}

// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o GoogleCloudRunOpV2ContainerOutput) Resources() GoogleCloudRunOpV2ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Container) *GoogleCloudRunOpV2ResourceRequirements { return v.Resources }).(GoogleCloudRunOpV2ResourceRequirementsPtrOutput)
}

// Volume to mount into the container's filesystem.
func (o GoogleCloudRunOpV2ContainerOutput) VolumeMounts() GoogleCloudRunOpV2VolumeMountArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Container) []GoogleCloudRunOpV2VolumeMount { return v.VolumeMounts }).(GoogleCloudRunOpV2VolumeMountArrayOutput)
}

type GoogleCloudRunOpV2ContainerArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2Container)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ContainerArrayOutput) ToGoogleCloudRunOpV2ContainerArrayOutput() GoogleCloudRunOpV2ContainerArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerArrayOutput) ToGoogleCloudRunOpV2ContainerArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2Container {
		return vs[0].([]GoogleCloudRunOpV2Container)[vs[1].(int)]
	}).(GoogleCloudRunOpV2ContainerOutput)
}

// ContainerPort represents a network port in a single container.
type GoogleCloudRunOpV2ContainerPort struct {
	// Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
	ContainerPort *int `pulumi:"containerPort"`
	// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name *string `pulumi:"name"`
}

// GoogleCloudRunOpV2ContainerPortInput is an input type that accepts GoogleCloudRunOpV2ContainerPortArgs and GoogleCloudRunOpV2ContainerPortOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2ContainerPortInput` via:
//
//          GoogleCloudRunOpV2ContainerPortArgs{...}
type GoogleCloudRunOpV2ContainerPortInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2ContainerPortOutput() GoogleCloudRunOpV2ContainerPortOutput
	ToGoogleCloudRunOpV2ContainerPortOutputWithContext(context.Context) GoogleCloudRunOpV2ContainerPortOutput
}

// ContainerPort represents a network port in a single container.
type GoogleCloudRunOpV2ContainerPortArgs struct {
	// Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GoogleCloudRunOpV2ContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2ContainerPort)(nil)).Elem()
}

func (i GoogleCloudRunOpV2ContainerPortArgs) ToGoogleCloudRunOpV2ContainerPortOutput() GoogleCloudRunOpV2ContainerPortOutput {
	return i.ToGoogleCloudRunOpV2ContainerPortOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2ContainerPortArgs) ToGoogleCloudRunOpV2ContainerPortOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2ContainerPortOutput)
}

// GoogleCloudRunOpV2ContainerPortArrayInput is an input type that accepts GoogleCloudRunOpV2ContainerPortArray and GoogleCloudRunOpV2ContainerPortArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2ContainerPortArrayInput` via:
//
//          GoogleCloudRunOpV2ContainerPortArray{ GoogleCloudRunOpV2ContainerPortArgs{...} }
type GoogleCloudRunOpV2ContainerPortArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2ContainerPortArrayOutput() GoogleCloudRunOpV2ContainerPortArrayOutput
	ToGoogleCloudRunOpV2ContainerPortArrayOutputWithContext(context.Context) GoogleCloudRunOpV2ContainerPortArrayOutput
}

type GoogleCloudRunOpV2ContainerPortArray []GoogleCloudRunOpV2ContainerPortInput

func (GoogleCloudRunOpV2ContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2ContainerPort)(nil)).Elem()
}

func (i GoogleCloudRunOpV2ContainerPortArray) ToGoogleCloudRunOpV2ContainerPortArrayOutput() GoogleCloudRunOpV2ContainerPortArrayOutput {
	return i.ToGoogleCloudRunOpV2ContainerPortArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2ContainerPortArray) ToGoogleCloudRunOpV2ContainerPortArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2ContainerPortArrayOutput)
}

// ContainerPort represents a network port in a single container.
type GoogleCloudRunOpV2ContainerPortOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2ContainerPort)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ContainerPortOutput) ToGoogleCloudRunOpV2ContainerPortOutput() GoogleCloudRunOpV2ContainerPortOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerPortOutput) ToGoogleCloudRunOpV2ContainerPortOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerPortOutput {
	return o
}

// Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
func (o GoogleCloudRunOpV2ContainerPortOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerPort) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
func (o GoogleCloudRunOpV2ContainerPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GoogleCloudRunOpV2ContainerPortArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2ContainerPort)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ContainerPortArrayOutput) ToGoogleCloudRunOpV2ContainerPortArrayOutput() GoogleCloudRunOpV2ContainerPortArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerPortArrayOutput) ToGoogleCloudRunOpV2ContainerPortArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerPortArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerPortArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2ContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2ContainerPort {
		return vs[0].([]GoogleCloudRunOpV2ContainerPort)[vs[1].(int)]
	}).(GoogleCloudRunOpV2ContainerPortOutput)
}

// ContainerPort represents a network port in a single container.
type GoogleCloudRunOpV2ContainerPortResponse struct {
	// Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
	ContainerPort int `pulumi:"containerPort"`
	// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name string `pulumi:"name"`
}

// ContainerPort represents a network port in a single container.
type GoogleCloudRunOpV2ContainerPortResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ContainerPortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2ContainerPortResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ContainerPortResponseOutput) ToGoogleCloudRunOpV2ContainerPortResponseOutput() GoogleCloudRunOpV2ContainerPortResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerPortResponseOutput) ToGoogleCloudRunOpV2ContainerPortResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerPortResponseOutput {
	return o
}

// Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
func (o GoogleCloudRunOpV2ContainerPortResponseOutput) ContainerPort() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerPortResponse) int { return v.ContainerPort }).(pulumi.IntOutput)
}

// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
func (o GoogleCloudRunOpV2ContainerPortResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerPortResponse) string { return v.Name }).(pulumi.StringOutput)
}

type GoogleCloudRunOpV2ContainerPortResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ContainerPortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2ContainerPortResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ContainerPortResponseArrayOutput) ToGoogleCloudRunOpV2ContainerPortResponseArrayOutput() GoogleCloudRunOpV2ContainerPortResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerPortResponseArrayOutput) ToGoogleCloudRunOpV2ContainerPortResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerPortResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerPortResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2ContainerPortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2ContainerPortResponse {
		return vs[0].([]GoogleCloudRunOpV2ContainerPortResponse)[vs[1].(int)]
	}).(GoogleCloudRunOpV2ContainerPortResponseOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type GoogleCloudRunOpV2ContainerResponse struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container.
	Env []GoogleCloudRunOpV2EnvVarResponse `pulumi:"env"`
	// URL of the Container image in Google Container Registry or Docker More info: https://kubernetes.io/docs/concepts/containers/images
	Image string `pulumi:"image"`
	// Name of the container specified as a DNS_LABEL.
	Name string `pulumi:"name"`
	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports []GoogleCloudRunOpV2ContainerPortResponse `pulumi:"ports"`
	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources GoogleCloudRunOpV2ResourceRequirementsResponse `pulumi:"resources"`
	// Volume to mount into the container's filesystem.
	VolumeMounts []GoogleCloudRunOpV2VolumeMountResponse `pulumi:"volumeMounts"`
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type GoogleCloudRunOpV2ContainerResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2ContainerResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ContainerResponseOutput) ToGoogleCloudRunOpV2ContainerResponseOutput() GoogleCloudRunOpV2ContainerResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerResponseOutput) ToGoogleCloudRunOpV2ContainerResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerResponseOutput {
	return o
}

// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o GoogleCloudRunOpV2ContainerResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o GoogleCloudRunOpV2ContainerResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container.
func (o GoogleCloudRunOpV2ContainerResponseOutput) Env() GoogleCloudRunOpV2EnvVarResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerResponse) []GoogleCloudRunOpV2EnvVarResponse { return v.Env }).(GoogleCloudRunOpV2EnvVarResponseArrayOutput)
}

// URL of the Container image in Google Container Registry or Docker More info: https://kubernetes.io/docs/concepts/containers/images
func (o GoogleCloudRunOpV2ContainerResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerResponse) string { return v.Image }).(pulumi.StringOutput)
}

// Name of the container specified as a DNS_LABEL.
func (o GoogleCloudRunOpV2ContainerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
func (o GoogleCloudRunOpV2ContainerResponseOutput) Ports() GoogleCloudRunOpV2ContainerPortResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerResponse) []GoogleCloudRunOpV2ContainerPortResponse { return v.Ports }).(GoogleCloudRunOpV2ContainerPortResponseArrayOutput)
}

// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o GoogleCloudRunOpV2ContainerResponseOutput) Resources() GoogleCloudRunOpV2ResourceRequirementsResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerResponse) GoogleCloudRunOpV2ResourceRequirementsResponse {
		return v.Resources
	}).(GoogleCloudRunOpV2ResourceRequirementsResponseOutput)
}

// Volume to mount into the container's filesystem.
func (o GoogleCloudRunOpV2ContainerResponseOutput) VolumeMounts() GoogleCloudRunOpV2VolumeMountResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ContainerResponse) []GoogleCloudRunOpV2VolumeMountResponse {
		return v.VolumeMounts
	}).(GoogleCloudRunOpV2VolumeMountResponseArrayOutput)
}

type GoogleCloudRunOpV2ContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2ContainerResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ContainerResponseArrayOutput) ToGoogleCloudRunOpV2ContainerResponseArrayOutput() GoogleCloudRunOpV2ContainerResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerResponseArrayOutput) ToGoogleCloudRunOpV2ContainerResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ContainerResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2ContainerResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2ContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2ContainerResponse {
		return vs[0].([]GoogleCloudRunOpV2ContainerResponse)[vs[1].(int)]
	}).(GoogleCloudRunOpV2ContainerResponseOutput)
}

// EnvVar represents an environment variable present in a Container.
type GoogleCloudRunOpV2EnvVar struct {
	// Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
	Value *string `pulumi:"value"`
	// Source for the environment variable's value.
	ValueSource *GoogleCloudRunOpV2EnvVarSource `pulumi:"valueSource"`
}

// GoogleCloudRunOpV2EnvVarInput is an input type that accepts GoogleCloudRunOpV2EnvVarArgs and GoogleCloudRunOpV2EnvVarOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2EnvVarInput` via:
//
//          GoogleCloudRunOpV2EnvVarArgs{...}
type GoogleCloudRunOpV2EnvVarInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2EnvVarOutput() GoogleCloudRunOpV2EnvVarOutput
	ToGoogleCloudRunOpV2EnvVarOutputWithContext(context.Context) GoogleCloudRunOpV2EnvVarOutput
}

// EnvVar represents an environment variable present in a Container.
type GoogleCloudRunOpV2EnvVarArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value.
	ValueSource GoogleCloudRunOpV2EnvVarSourcePtrInput `pulumi:"valueSource"`
}

func (GoogleCloudRunOpV2EnvVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2EnvVar)(nil)).Elem()
}

func (i GoogleCloudRunOpV2EnvVarArgs) ToGoogleCloudRunOpV2EnvVarOutput() GoogleCloudRunOpV2EnvVarOutput {
	return i.ToGoogleCloudRunOpV2EnvVarOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2EnvVarArgs) ToGoogleCloudRunOpV2EnvVarOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2EnvVarOutput)
}

// GoogleCloudRunOpV2EnvVarArrayInput is an input type that accepts GoogleCloudRunOpV2EnvVarArray and GoogleCloudRunOpV2EnvVarArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2EnvVarArrayInput` via:
//
//          GoogleCloudRunOpV2EnvVarArray{ GoogleCloudRunOpV2EnvVarArgs{...} }
type GoogleCloudRunOpV2EnvVarArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2EnvVarArrayOutput() GoogleCloudRunOpV2EnvVarArrayOutput
	ToGoogleCloudRunOpV2EnvVarArrayOutputWithContext(context.Context) GoogleCloudRunOpV2EnvVarArrayOutput
}

type GoogleCloudRunOpV2EnvVarArray []GoogleCloudRunOpV2EnvVarInput

func (GoogleCloudRunOpV2EnvVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2EnvVar)(nil)).Elem()
}

func (i GoogleCloudRunOpV2EnvVarArray) ToGoogleCloudRunOpV2EnvVarArrayOutput() GoogleCloudRunOpV2EnvVarArrayOutput {
	return i.ToGoogleCloudRunOpV2EnvVarArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2EnvVarArray) ToGoogleCloudRunOpV2EnvVarArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2EnvVarArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type GoogleCloudRunOpV2EnvVarOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2EnvVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2EnvVar)(nil)).Elem()
}

func (o GoogleCloudRunOpV2EnvVarOutput) ToGoogleCloudRunOpV2EnvVarOutput() GoogleCloudRunOpV2EnvVarOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarOutput) ToGoogleCloudRunOpV2EnvVarOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
func (o GoogleCloudRunOpV2EnvVarOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2EnvVar) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
func (o GoogleCloudRunOpV2EnvVarOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2EnvVar) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value.
func (o GoogleCloudRunOpV2EnvVarOutput) ValueSource() GoogleCloudRunOpV2EnvVarSourcePtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2EnvVar) *GoogleCloudRunOpV2EnvVarSource { return v.ValueSource }).(GoogleCloudRunOpV2EnvVarSourcePtrOutput)
}

type GoogleCloudRunOpV2EnvVarArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2EnvVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2EnvVar)(nil)).Elem()
}

func (o GoogleCloudRunOpV2EnvVarArrayOutput) ToGoogleCloudRunOpV2EnvVarArrayOutput() GoogleCloudRunOpV2EnvVarArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarArrayOutput) ToGoogleCloudRunOpV2EnvVarArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2EnvVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2EnvVar {
		return vs[0].([]GoogleCloudRunOpV2EnvVar)[vs[1].(int)]
	}).(GoogleCloudRunOpV2EnvVarOutput)
}

// EnvVar represents an environment variable present in a Container.
type GoogleCloudRunOpV2EnvVarResponse struct {
	// Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
	Value string `pulumi:"value"`
	// Source for the environment variable's value.
	ValueSource GoogleCloudRunOpV2EnvVarSourceResponse `pulumi:"valueSource"`
}

// EnvVar represents an environment variable present in a Container.
type GoogleCloudRunOpV2EnvVarResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2EnvVarResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2EnvVarResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2EnvVarResponseOutput) ToGoogleCloudRunOpV2EnvVarResponseOutput() GoogleCloudRunOpV2EnvVarResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarResponseOutput) ToGoogleCloudRunOpV2EnvVarResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarResponseOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
func (o GoogleCloudRunOpV2EnvVarResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2EnvVarResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
func (o GoogleCloudRunOpV2EnvVarResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2EnvVarResponse) string { return v.Value }).(pulumi.StringOutput)
}

// Source for the environment variable's value.
func (o GoogleCloudRunOpV2EnvVarResponseOutput) ValueSource() GoogleCloudRunOpV2EnvVarSourceResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2EnvVarResponse) GoogleCloudRunOpV2EnvVarSourceResponse { return v.ValueSource }).(GoogleCloudRunOpV2EnvVarSourceResponseOutput)
}

type GoogleCloudRunOpV2EnvVarResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2EnvVarResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2EnvVarResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2EnvVarResponseArrayOutput) ToGoogleCloudRunOpV2EnvVarResponseArrayOutput() GoogleCloudRunOpV2EnvVarResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarResponseArrayOutput) ToGoogleCloudRunOpV2EnvVarResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2EnvVarResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2EnvVarResponse {
		return vs[0].([]GoogleCloudRunOpV2EnvVarResponse)[vs[1].(int)]
	}).(GoogleCloudRunOpV2EnvVarResponseOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunOpV2EnvVarSource struct {
	// Selects a secret and a specific version from Cloud Secret Manager.
	SecretKeyRef *GoogleCloudRunOpV2SecretKeySelector `pulumi:"secretKeyRef"`
}

// GoogleCloudRunOpV2EnvVarSourceInput is an input type that accepts GoogleCloudRunOpV2EnvVarSourceArgs and GoogleCloudRunOpV2EnvVarSourceOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2EnvVarSourceInput` via:
//
//          GoogleCloudRunOpV2EnvVarSourceArgs{...}
type GoogleCloudRunOpV2EnvVarSourceInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2EnvVarSourceOutput() GoogleCloudRunOpV2EnvVarSourceOutput
	ToGoogleCloudRunOpV2EnvVarSourceOutputWithContext(context.Context) GoogleCloudRunOpV2EnvVarSourceOutput
}

// EnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunOpV2EnvVarSourceArgs struct {
	// Selects a secret and a specific version from Cloud Secret Manager.
	SecretKeyRef GoogleCloudRunOpV2SecretKeySelectorPtrInput `pulumi:"secretKeyRef"`
}

func (GoogleCloudRunOpV2EnvVarSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2EnvVarSource)(nil)).Elem()
}

func (i GoogleCloudRunOpV2EnvVarSourceArgs) ToGoogleCloudRunOpV2EnvVarSourceOutput() GoogleCloudRunOpV2EnvVarSourceOutput {
	return i.ToGoogleCloudRunOpV2EnvVarSourceOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2EnvVarSourceArgs) ToGoogleCloudRunOpV2EnvVarSourceOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2EnvVarSourceOutput)
}

func (i GoogleCloudRunOpV2EnvVarSourceArgs) ToGoogleCloudRunOpV2EnvVarSourcePtrOutput() GoogleCloudRunOpV2EnvVarSourcePtrOutput {
	return i.ToGoogleCloudRunOpV2EnvVarSourcePtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2EnvVarSourceArgs) ToGoogleCloudRunOpV2EnvVarSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2EnvVarSourceOutput).ToGoogleCloudRunOpV2EnvVarSourcePtrOutputWithContext(ctx)
}

// GoogleCloudRunOpV2EnvVarSourcePtrInput is an input type that accepts GoogleCloudRunOpV2EnvVarSourceArgs, GoogleCloudRunOpV2EnvVarSourcePtr and GoogleCloudRunOpV2EnvVarSourcePtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2EnvVarSourcePtrInput` via:
//
//          GoogleCloudRunOpV2EnvVarSourceArgs{...}
//
//  or:
//
//          nil
type GoogleCloudRunOpV2EnvVarSourcePtrInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2EnvVarSourcePtrOutput() GoogleCloudRunOpV2EnvVarSourcePtrOutput
	ToGoogleCloudRunOpV2EnvVarSourcePtrOutputWithContext(context.Context) GoogleCloudRunOpV2EnvVarSourcePtrOutput
}

type googleCloudRunOpV2EnvVarSourcePtrType GoogleCloudRunOpV2EnvVarSourceArgs

func GoogleCloudRunOpV2EnvVarSourcePtr(v *GoogleCloudRunOpV2EnvVarSourceArgs) GoogleCloudRunOpV2EnvVarSourcePtrInput {
	return (*googleCloudRunOpV2EnvVarSourcePtrType)(v)
}

func (*googleCloudRunOpV2EnvVarSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2EnvVarSource)(nil)).Elem()
}

func (i *googleCloudRunOpV2EnvVarSourcePtrType) ToGoogleCloudRunOpV2EnvVarSourcePtrOutput() GoogleCloudRunOpV2EnvVarSourcePtrOutput {
	return i.ToGoogleCloudRunOpV2EnvVarSourcePtrOutputWithContext(context.Background())
}

func (i *googleCloudRunOpV2EnvVarSourcePtrType) ToGoogleCloudRunOpV2EnvVarSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2EnvVarSourcePtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunOpV2EnvVarSourceOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2EnvVarSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2EnvVarSource)(nil)).Elem()
}

func (o GoogleCloudRunOpV2EnvVarSourceOutput) ToGoogleCloudRunOpV2EnvVarSourceOutput() GoogleCloudRunOpV2EnvVarSourceOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarSourceOutput) ToGoogleCloudRunOpV2EnvVarSourceOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarSourceOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarSourceOutput) ToGoogleCloudRunOpV2EnvVarSourcePtrOutput() GoogleCloudRunOpV2EnvVarSourcePtrOutput {
	return o.ToGoogleCloudRunOpV2EnvVarSourcePtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunOpV2EnvVarSourceOutput) ToGoogleCloudRunOpV2EnvVarSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunOpV2EnvVarSource) *GoogleCloudRunOpV2EnvVarSource {
		return &v
	}).(GoogleCloudRunOpV2EnvVarSourcePtrOutput)
}

// Selects a secret and a specific version from Cloud Secret Manager.
func (o GoogleCloudRunOpV2EnvVarSourceOutput) SecretKeyRef() GoogleCloudRunOpV2SecretKeySelectorPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2EnvVarSource) *GoogleCloudRunOpV2SecretKeySelector { return v.SecretKeyRef }).(GoogleCloudRunOpV2SecretKeySelectorPtrOutput)
}

type GoogleCloudRunOpV2EnvVarSourcePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2EnvVarSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2EnvVarSource)(nil)).Elem()
}

func (o GoogleCloudRunOpV2EnvVarSourcePtrOutput) ToGoogleCloudRunOpV2EnvVarSourcePtrOutput() GoogleCloudRunOpV2EnvVarSourcePtrOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarSourcePtrOutput) ToGoogleCloudRunOpV2EnvVarSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarSourcePtrOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarSourcePtrOutput) Elem() GoogleCloudRunOpV2EnvVarSourceOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2EnvVarSource) GoogleCloudRunOpV2EnvVarSource {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunOpV2EnvVarSource
		return ret
	}).(GoogleCloudRunOpV2EnvVarSourceOutput)
}

// Selects a secret and a specific version from Cloud Secret Manager.
func (o GoogleCloudRunOpV2EnvVarSourcePtrOutput) SecretKeyRef() GoogleCloudRunOpV2SecretKeySelectorPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2EnvVarSource) *GoogleCloudRunOpV2SecretKeySelector {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(GoogleCloudRunOpV2SecretKeySelectorPtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunOpV2EnvVarSourceResponse struct {
	// Selects a secret and a specific version from Cloud Secret Manager.
	SecretKeyRef GoogleCloudRunOpV2SecretKeySelectorResponse `pulumi:"secretKeyRef"`
}

// EnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunOpV2EnvVarSourceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2EnvVarSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2EnvVarSourceResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2EnvVarSourceResponseOutput) ToGoogleCloudRunOpV2EnvVarSourceResponseOutput() GoogleCloudRunOpV2EnvVarSourceResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2EnvVarSourceResponseOutput) ToGoogleCloudRunOpV2EnvVarSourceResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2EnvVarSourceResponseOutput {
	return o
}

// Selects a secret and a specific version from Cloud Secret Manager.
func (o GoogleCloudRunOpV2EnvVarSourceResponseOutput) SecretKeyRef() GoogleCloudRunOpV2SecretKeySelectorResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2EnvVarSourceResponse) GoogleCloudRunOpV2SecretKeySelectorResponse {
		return v.SecretKeyRef
	}).(GoogleCloudRunOpV2SecretKeySelectorResponseOutput)
}

// ResourceRequirements describes the compute resource requirements.
type GoogleCloudRunOpV2ResourceRequirements struct {
	// Determines whether CPU should be throttled or not outside of requests.
	CpuIdle *bool `pulumi:"cpuIdle"`
	// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits map[string]string `pulumi:"limits"`
}

// GoogleCloudRunOpV2ResourceRequirementsInput is an input type that accepts GoogleCloudRunOpV2ResourceRequirementsArgs and GoogleCloudRunOpV2ResourceRequirementsOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2ResourceRequirementsInput` via:
//
//          GoogleCloudRunOpV2ResourceRequirementsArgs{...}
type GoogleCloudRunOpV2ResourceRequirementsInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2ResourceRequirementsOutput() GoogleCloudRunOpV2ResourceRequirementsOutput
	ToGoogleCloudRunOpV2ResourceRequirementsOutputWithContext(context.Context) GoogleCloudRunOpV2ResourceRequirementsOutput
}

// ResourceRequirements describes the compute resource requirements.
type GoogleCloudRunOpV2ResourceRequirementsArgs struct {
	// Determines whether CPU should be throttled or not outside of requests.
	CpuIdle pulumi.BoolPtrInput `pulumi:"cpuIdle"`
	// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits pulumi.StringMapInput `pulumi:"limits"`
}

func (GoogleCloudRunOpV2ResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2ResourceRequirements)(nil)).Elem()
}

func (i GoogleCloudRunOpV2ResourceRequirementsArgs) ToGoogleCloudRunOpV2ResourceRequirementsOutput() GoogleCloudRunOpV2ResourceRequirementsOutput {
	return i.ToGoogleCloudRunOpV2ResourceRequirementsOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2ResourceRequirementsArgs) ToGoogleCloudRunOpV2ResourceRequirementsOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2ResourceRequirementsOutput)
}

func (i GoogleCloudRunOpV2ResourceRequirementsArgs) ToGoogleCloudRunOpV2ResourceRequirementsPtrOutput() GoogleCloudRunOpV2ResourceRequirementsPtrOutput {
	return i.ToGoogleCloudRunOpV2ResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2ResourceRequirementsArgs) ToGoogleCloudRunOpV2ResourceRequirementsPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2ResourceRequirementsOutput).ToGoogleCloudRunOpV2ResourceRequirementsPtrOutputWithContext(ctx)
}

// GoogleCloudRunOpV2ResourceRequirementsPtrInput is an input type that accepts GoogleCloudRunOpV2ResourceRequirementsArgs, GoogleCloudRunOpV2ResourceRequirementsPtr and GoogleCloudRunOpV2ResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2ResourceRequirementsPtrInput` via:
//
//          GoogleCloudRunOpV2ResourceRequirementsArgs{...}
//
//  or:
//
//          nil
type GoogleCloudRunOpV2ResourceRequirementsPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2ResourceRequirementsPtrOutput() GoogleCloudRunOpV2ResourceRequirementsPtrOutput
	ToGoogleCloudRunOpV2ResourceRequirementsPtrOutputWithContext(context.Context) GoogleCloudRunOpV2ResourceRequirementsPtrOutput
}

type googleCloudRunOpV2ResourceRequirementsPtrType GoogleCloudRunOpV2ResourceRequirementsArgs

func GoogleCloudRunOpV2ResourceRequirementsPtr(v *GoogleCloudRunOpV2ResourceRequirementsArgs) GoogleCloudRunOpV2ResourceRequirementsPtrInput {
	return (*googleCloudRunOpV2ResourceRequirementsPtrType)(v)
}

func (*googleCloudRunOpV2ResourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2ResourceRequirements)(nil)).Elem()
}

func (i *googleCloudRunOpV2ResourceRequirementsPtrType) ToGoogleCloudRunOpV2ResourceRequirementsPtrOutput() GoogleCloudRunOpV2ResourceRequirementsPtrOutput {
	return i.ToGoogleCloudRunOpV2ResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunOpV2ResourceRequirementsPtrType) ToGoogleCloudRunOpV2ResourceRequirementsPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2ResourceRequirementsPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type GoogleCloudRunOpV2ResourceRequirementsOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2ResourceRequirements)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ResourceRequirementsOutput) ToGoogleCloudRunOpV2ResourceRequirementsOutput() GoogleCloudRunOpV2ResourceRequirementsOutput {
	return o
}

func (o GoogleCloudRunOpV2ResourceRequirementsOutput) ToGoogleCloudRunOpV2ResourceRequirementsOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ResourceRequirementsOutput {
	return o
}

func (o GoogleCloudRunOpV2ResourceRequirementsOutput) ToGoogleCloudRunOpV2ResourceRequirementsPtrOutput() GoogleCloudRunOpV2ResourceRequirementsPtrOutput {
	return o.ToGoogleCloudRunOpV2ResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunOpV2ResourceRequirementsOutput) ToGoogleCloudRunOpV2ResourceRequirementsPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunOpV2ResourceRequirements) *GoogleCloudRunOpV2ResourceRequirements {
		return &v
	}).(GoogleCloudRunOpV2ResourceRequirementsPtrOutput)
}

// Determines whether CPU should be throttled or not outside of requests.
func (o GoogleCloudRunOpV2ResourceRequirementsOutput) CpuIdle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ResourceRequirements) *bool { return v.CpuIdle }).(pulumi.BoolPtrOutput)
}

// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o GoogleCloudRunOpV2ResourceRequirementsOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ResourceRequirements) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

type GoogleCloudRunOpV2ResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2ResourceRequirements)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ResourceRequirementsPtrOutput) ToGoogleCloudRunOpV2ResourceRequirementsPtrOutput() GoogleCloudRunOpV2ResourceRequirementsPtrOutput {
	return o
}

func (o GoogleCloudRunOpV2ResourceRequirementsPtrOutput) ToGoogleCloudRunOpV2ResourceRequirementsPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ResourceRequirementsPtrOutput {
	return o
}

func (o GoogleCloudRunOpV2ResourceRequirementsPtrOutput) Elem() GoogleCloudRunOpV2ResourceRequirementsOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2ResourceRequirements) GoogleCloudRunOpV2ResourceRequirements {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunOpV2ResourceRequirements
		return ret
	}).(GoogleCloudRunOpV2ResourceRequirementsOutput)
}

// Determines whether CPU should be throttled or not outside of requests.
func (o GoogleCloudRunOpV2ResourceRequirementsPtrOutput) CpuIdle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2ResourceRequirements) *bool {
		if v == nil {
			return nil
		}
		return v.CpuIdle
	}).(pulumi.BoolPtrOutput)
}

// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o GoogleCloudRunOpV2ResourceRequirementsPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2ResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// ResourceRequirements describes the compute resource requirements.
type GoogleCloudRunOpV2ResourceRequirementsResponse struct {
	// Determines whether CPU should be throttled or not outside of requests.
	CpuIdle bool `pulumi:"cpuIdle"`
	// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits map[string]string `pulumi:"limits"`
}

// ResourceRequirements describes the compute resource requirements.
type GoogleCloudRunOpV2ResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2ResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2ResourceRequirementsResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2ResourceRequirementsResponseOutput) ToGoogleCloudRunOpV2ResourceRequirementsResponseOutput() GoogleCloudRunOpV2ResourceRequirementsResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2ResourceRequirementsResponseOutput) ToGoogleCloudRunOpV2ResourceRequirementsResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2ResourceRequirementsResponseOutput {
	return o
}

// Determines whether CPU should be throttled or not outside of requests.
func (o GoogleCloudRunOpV2ResourceRequirementsResponseOutput) CpuIdle() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ResourceRequirementsResponse) bool { return v.CpuIdle }).(pulumi.BoolOutput)
}

// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o GoogleCloudRunOpV2ResourceRequirementsResponseOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2ResourceRequirementsResponse) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Settings for revision-level scaling settings.
type GoogleCloudRunOpV2RevisionScaling struct {
	// Maximum number of serving instances that this resource should have.
	MaxInstanceCount *int `pulumi:"maxInstanceCount"`
	// Minimum number of serving instances that this resource should have.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
}

// GoogleCloudRunOpV2RevisionScalingInput is an input type that accepts GoogleCloudRunOpV2RevisionScalingArgs and GoogleCloudRunOpV2RevisionScalingOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2RevisionScalingInput` via:
//
//          GoogleCloudRunOpV2RevisionScalingArgs{...}
type GoogleCloudRunOpV2RevisionScalingInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2RevisionScalingOutput() GoogleCloudRunOpV2RevisionScalingOutput
	ToGoogleCloudRunOpV2RevisionScalingOutputWithContext(context.Context) GoogleCloudRunOpV2RevisionScalingOutput
}

// Settings for revision-level scaling settings.
type GoogleCloudRunOpV2RevisionScalingArgs struct {
	// Maximum number of serving instances that this resource should have.
	MaxInstanceCount pulumi.IntPtrInput `pulumi:"maxInstanceCount"`
	// Minimum number of serving instances that this resource should have.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
}

func (GoogleCloudRunOpV2RevisionScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2RevisionScaling)(nil)).Elem()
}

func (i GoogleCloudRunOpV2RevisionScalingArgs) ToGoogleCloudRunOpV2RevisionScalingOutput() GoogleCloudRunOpV2RevisionScalingOutput {
	return i.ToGoogleCloudRunOpV2RevisionScalingOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2RevisionScalingArgs) ToGoogleCloudRunOpV2RevisionScalingOutputWithContext(ctx context.Context) GoogleCloudRunOpV2RevisionScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2RevisionScalingOutput)
}

func (i GoogleCloudRunOpV2RevisionScalingArgs) ToGoogleCloudRunOpV2RevisionScalingPtrOutput() GoogleCloudRunOpV2RevisionScalingPtrOutput {
	return i.ToGoogleCloudRunOpV2RevisionScalingPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2RevisionScalingArgs) ToGoogleCloudRunOpV2RevisionScalingPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2RevisionScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2RevisionScalingOutput).ToGoogleCloudRunOpV2RevisionScalingPtrOutputWithContext(ctx)
}

// GoogleCloudRunOpV2RevisionScalingPtrInput is an input type that accepts GoogleCloudRunOpV2RevisionScalingArgs, GoogleCloudRunOpV2RevisionScalingPtr and GoogleCloudRunOpV2RevisionScalingPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2RevisionScalingPtrInput` via:
//
//          GoogleCloudRunOpV2RevisionScalingArgs{...}
//
//  or:
//
//          nil
type GoogleCloudRunOpV2RevisionScalingPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2RevisionScalingPtrOutput() GoogleCloudRunOpV2RevisionScalingPtrOutput
	ToGoogleCloudRunOpV2RevisionScalingPtrOutputWithContext(context.Context) GoogleCloudRunOpV2RevisionScalingPtrOutput
}

type googleCloudRunOpV2RevisionScalingPtrType GoogleCloudRunOpV2RevisionScalingArgs

func GoogleCloudRunOpV2RevisionScalingPtr(v *GoogleCloudRunOpV2RevisionScalingArgs) GoogleCloudRunOpV2RevisionScalingPtrInput {
	return (*googleCloudRunOpV2RevisionScalingPtrType)(v)
}

func (*googleCloudRunOpV2RevisionScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2RevisionScaling)(nil)).Elem()
}

func (i *googleCloudRunOpV2RevisionScalingPtrType) ToGoogleCloudRunOpV2RevisionScalingPtrOutput() GoogleCloudRunOpV2RevisionScalingPtrOutput {
	return i.ToGoogleCloudRunOpV2RevisionScalingPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunOpV2RevisionScalingPtrType) ToGoogleCloudRunOpV2RevisionScalingPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2RevisionScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2RevisionScalingPtrOutput)
}

// Settings for revision-level scaling settings.
type GoogleCloudRunOpV2RevisionScalingOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2RevisionScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2RevisionScaling)(nil)).Elem()
}

func (o GoogleCloudRunOpV2RevisionScalingOutput) ToGoogleCloudRunOpV2RevisionScalingOutput() GoogleCloudRunOpV2RevisionScalingOutput {
	return o
}

func (o GoogleCloudRunOpV2RevisionScalingOutput) ToGoogleCloudRunOpV2RevisionScalingOutputWithContext(ctx context.Context) GoogleCloudRunOpV2RevisionScalingOutput {
	return o
}

func (o GoogleCloudRunOpV2RevisionScalingOutput) ToGoogleCloudRunOpV2RevisionScalingPtrOutput() GoogleCloudRunOpV2RevisionScalingPtrOutput {
	return o.ToGoogleCloudRunOpV2RevisionScalingPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunOpV2RevisionScalingOutput) ToGoogleCloudRunOpV2RevisionScalingPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2RevisionScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunOpV2RevisionScaling) *GoogleCloudRunOpV2RevisionScaling {
		return &v
	}).(GoogleCloudRunOpV2RevisionScalingPtrOutput)
}

// Maximum number of serving instances that this resource should have.
func (o GoogleCloudRunOpV2RevisionScalingOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionScaling) *int { return v.MaxInstanceCount }).(pulumi.IntPtrOutput)
}

// Minimum number of serving instances that this resource should have.
func (o GoogleCloudRunOpV2RevisionScalingOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionScaling) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

type GoogleCloudRunOpV2RevisionScalingPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2RevisionScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2RevisionScaling)(nil)).Elem()
}

func (o GoogleCloudRunOpV2RevisionScalingPtrOutput) ToGoogleCloudRunOpV2RevisionScalingPtrOutput() GoogleCloudRunOpV2RevisionScalingPtrOutput {
	return o
}

func (o GoogleCloudRunOpV2RevisionScalingPtrOutput) ToGoogleCloudRunOpV2RevisionScalingPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2RevisionScalingPtrOutput {
	return o
}

func (o GoogleCloudRunOpV2RevisionScalingPtrOutput) Elem() GoogleCloudRunOpV2RevisionScalingOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2RevisionScaling) GoogleCloudRunOpV2RevisionScaling {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunOpV2RevisionScaling
		return ret
	}).(GoogleCloudRunOpV2RevisionScalingOutput)
}

// Maximum number of serving instances that this resource should have.
func (o GoogleCloudRunOpV2RevisionScalingPtrOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2RevisionScaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstanceCount
	}).(pulumi.IntPtrOutput)
}

// Minimum number of serving instances that this resource should have.
func (o GoogleCloudRunOpV2RevisionScalingPtrOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2RevisionScaling) *int {
		if v == nil {
			return nil
		}
		return v.MinInstanceCount
	}).(pulumi.IntPtrOutput)
}

// Settings for revision-level scaling settings.
type GoogleCloudRunOpV2RevisionScalingResponse struct {
	// Maximum number of serving instances that this resource should have.
	MaxInstanceCount int `pulumi:"maxInstanceCount"`
	// Minimum number of serving instances that this resource should have.
	MinInstanceCount int `pulumi:"minInstanceCount"`
}

// Settings for revision-level scaling settings.
type GoogleCloudRunOpV2RevisionScalingResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2RevisionScalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2RevisionScalingResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2RevisionScalingResponseOutput) ToGoogleCloudRunOpV2RevisionScalingResponseOutput() GoogleCloudRunOpV2RevisionScalingResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2RevisionScalingResponseOutput) ToGoogleCloudRunOpV2RevisionScalingResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2RevisionScalingResponseOutput {
	return o
}

// Maximum number of serving instances that this resource should have.
func (o GoogleCloudRunOpV2RevisionScalingResponseOutput) MaxInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionScalingResponse) int { return v.MaxInstanceCount }).(pulumi.IntOutput)
}

// Minimum number of serving instances that this resource should have.
func (o GoogleCloudRunOpV2RevisionScalingResponseOutput) MinInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionScalingResponse) int { return v.MinInstanceCount }).(pulumi.IntOutput)
}

// RevisionTemplate describes the data a revision should have when created from a template.
type GoogleCloudRunOpV2RevisionTemplate struct {
	// KRM-style annotations for the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Enables Confidential Cloud Run in Revisions created using this template.
	Confidential *bool `pulumi:"confidential"`
	// Sets the maximum number of requests that each serving instance can receive.
	ContainerConcurrency *int `pulumi:"containerConcurrency"`
	// Holds the single container that defines the unit of execution for this Revision.
	Containers []GoogleCloudRunOpV2Container `pulumi:"containers"`
	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey *string `pulumi:"encryptionKey"`
	// The sandbox environment to host this Revision.
	ExecutionEnvironment *GoogleCloudRunOpV2RevisionTemplateExecutionEnvironment `pulumi:"executionEnvironment"`
	// KRM-style labels for the resource.
	Labels map[string]string `pulumi:"labels"`
	// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
	Revision *string `pulumi:"revision"`
	// Scaling settings for this Revision.
	Scaling *GoogleCloudRunOpV2RevisionScaling `pulumi:"scaling"`
	// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Max allowed time for an instance to respond to a request.
	Timeout *string `pulumi:"timeout"`
	// A list of Volumes to make available to containers.
	Volumes []GoogleCloudRunOpV2Volume `pulumi:"volumes"`
	// VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	VpcAccess *GoogleCloudRunOpV2VpcAccess `pulumi:"vpcAccess"`
}

// GoogleCloudRunOpV2RevisionTemplateInput is an input type that accepts GoogleCloudRunOpV2RevisionTemplateArgs and GoogleCloudRunOpV2RevisionTemplateOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2RevisionTemplateInput` via:
//
//          GoogleCloudRunOpV2RevisionTemplateArgs{...}
type GoogleCloudRunOpV2RevisionTemplateInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2RevisionTemplateOutput() GoogleCloudRunOpV2RevisionTemplateOutput
	ToGoogleCloudRunOpV2RevisionTemplateOutputWithContext(context.Context) GoogleCloudRunOpV2RevisionTemplateOutput
}

// RevisionTemplate describes the data a revision should have when created from a template.
type GoogleCloudRunOpV2RevisionTemplateArgs struct {
	// KRM-style annotations for the resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Enables Confidential Cloud Run in Revisions created using this template.
	Confidential pulumi.BoolPtrInput `pulumi:"confidential"`
	// Sets the maximum number of requests that each serving instance can receive.
	ContainerConcurrency pulumi.IntPtrInput `pulumi:"containerConcurrency"`
	// Holds the single container that defines the unit of execution for this Revision.
	Containers GoogleCloudRunOpV2ContainerArrayInput `pulumi:"containers"`
	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey pulumi.StringPtrInput `pulumi:"encryptionKey"`
	// The sandbox environment to host this Revision.
	ExecutionEnvironment GoogleCloudRunOpV2RevisionTemplateExecutionEnvironmentPtrInput `pulumi:"executionEnvironment"`
	// KRM-style labels for the resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Scaling settings for this Revision.
	Scaling GoogleCloudRunOpV2RevisionScalingPtrInput `pulumi:"scaling"`
	// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Max allowed time for an instance to respond to a request.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// A list of Volumes to make available to containers.
	Volumes GoogleCloudRunOpV2VolumeArrayInput `pulumi:"volumes"`
	// VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	VpcAccess GoogleCloudRunOpV2VpcAccessPtrInput `pulumi:"vpcAccess"`
}

func (GoogleCloudRunOpV2RevisionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2RevisionTemplate)(nil)).Elem()
}

func (i GoogleCloudRunOpV2RevisionTemplateArgs) ToGoogleCloudRunOpV2RevisionTemplateOutput() GoogleCloudRunOpV2RevisionTemplateOutput {
	return i.ToGoogleCloudRunOpV2RevisionTemplateOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2RevisionTemplateArgs) ToGoogleCloudRunOpV2RevisionTemplateOutputWithContext(ctx context.Context) GoogleCloudRunOpV2RevisionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2RevisionTemplateOutput)
}

// RevisionTemplate describes the data a revision should have when created from a template.
type GoogleCloudRunOpV2RevisionTemplateOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2RevisionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2RevisionTemplate)(nil)).Elem()
}

func (o GoogleCloudRunOpV2RevisionTemplateOutput) ToGoogleCloudRunOpV2RevisionTemplateOutput() GoogleCloudRunOpV2RevisionTemplateOutput {
	return o
}

func (o GoogleCloudRunOpV2RevisionTemplateOutput) ToGoogleCloudRunOpV2RevisionTemplateOutputWithContext(ctx context.Context) GoogleCloudRunOpV2RevisionTemplateOutput {
	return o
}

// KRM-style annotations for the resource.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Enables Confidential Cloud Run in Revisions created using this template.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) Confidential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) *bool { return v.Confidential }).(pulumi.BoolPtrOutput)
}

// Sets the maximum number of requests that each serving instance can receive.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) ContainerConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) *int { return v.ContainerConcurrency }).(pulumi.IntPtrOutput)
}

// Holds the single container that defines the unit of execution for this Revision.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) Containers() GoogleCloudRunOpV2ContainerArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) []GoogleCloudRunOpV2Container { return v.Containers }).(GoogleCloudRunOpV2ContainerArrayOutput)
}

// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
func (o GoogleCloudRunOpV2RevisionTemplateOutput) EncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) *string { return v.EncryptionKey }).(pulumi.StringPtrOutput)
}

// The sandbox environment to host this Revision.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) ExecutionEnvironment() GoogleCloudRunOpV2RevisionTemplateExecutionEnvironmentPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) *GoogleCloudRunOpV2RevisionTemplateExecutionEnvironment {
		return v.ExecutionEnvironment
	}).(GoogleCloudRunOpV2RevisionTemplateExecutionEnvironmentPtrOutput)
}

// KRM-style labels for the resource.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Scaling settings for this Revision.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) Scaling() GoogleCloudRunOpV2RevisionScalingPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) *GoogleCloudRunOpV2RevisionScaling { return v.Scaling }).(GoogleCloudRunOpV2RevisionScalingPtrOutput)
}

// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Max allowed time for an instance to respond to a request.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// A list of Volumes to make available to containers.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) Volumes() GoogleCloudRunOpV2VolumeArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) []GoogleCloudRunOpV2Volume { return v.Volumes }).(GoogleCloudRunOpV2VolumeArrayOutput)
}

// VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
func (o GoogleCloudRunOpV2RevisionTemplateOutput) VpcAccess() GoogleCloudRunOpV2VpcAccessPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplate) *GoogleCloudRunOpV2VpcAccess { return v.VpcAccess }).(GoogleCloudRunOpV2VpcAccessPtrOutput)
}

// RevisionTemplate describes the data a revision should have when created from a template.
type GoogleCloudRunOpV2RevisionTemplateResponse struct {
	// KRM-style annotations for the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Enables Confidential Cloud Run in Revisions created using this template.
	Confidential bool `pulumi:"confidential"`
	// Sets the maximum number of requests that each serving instance can receive.
	ContainerConcurrency int `pulumi:"containerConcurrency"`
	// Holds the single container that defines the unit of execution for this Revision.
	Containers []GoogleCloudRunOpV2ContainerResponse `pulumi:"containers"`
	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey string `pulumi:"encryptionKey"`
	// The sandbox environment to host this Revision.
	ExecutionEnvironment string `pulumi:"executionEnvironment"`
	// KRM-style labels for the resource.
	Labels map[string]string `pulumi:"labels"`
	// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
	Revision string `pulumi:"revision"`
	// Scaling settings for this Revision.
	Scaling GoogleCloudRunOpV2RevisionScalingResponse `pulumi:"scaling"`
	// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Max allowed time for an instance to respond to a request.
	Timeout string `pulumi:"timeout"`
	// A list of Volumes to make available to containers.
	Volumes []GoogleCloudRunOpV2VolumeResponse `pulumi:"volumes"`
	// VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	VpcAccess GoogleCloudRunOpV2VpcAccessResponse `pulumi:"vpcAccess"`
}

// RevisionTemplate describes the data a revision should have when created from a template.
type GoogleCloudRunOpV2RevisionTemplateResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2RevisionTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2RevisionTemplateResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) ToGoogleCloudRunOpV2RevisionTemplateResponseOutput() GoogleCloudRunOpV2RevisionTemplateResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) ToGoogleCloudRunOpV2RevisionTemplateResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2RevisionTemplateResponseOutput {
	return o
}

// KRM-style annotations for the resource.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Enables Confidential Cloud Run in Revisions created using this template.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) Confidential() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) bool { return v.Confidential }).(pulumi.BoolOutput)
}

// Sets the maximum number of requests that each serving instance can receive.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) ContainerConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) int { return v.ContainerConcurrency }).(pulumi.IntOutput)
}

// Holds the single container that defines the unit of execution for this Revision.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) Containers() GoogleCloudRunOpV2ContainerResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) []GoogleCloudRunOpV2ContainerResponse {
		return v.Containers
	}).(GoogleCloudRunOpV2ContainerResponseArrayOutput)
}

// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) EncryptionKey() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) string { return v.EncryptionKey }).(pulumi.StringOutput)
}

// The sandbox environment to host this Revision.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) ExecutionEnvironment() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) string { return v.ExecutionEnvironment }).(pulumi.StringOutput)
}

// KRM-style labels for the resource.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// Scaling settings for this Revision.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) Scaling() GoogleCloudRunOpV2RevisionScalingResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) GoogleCloudRunOpV2RevisionScalingResponse {
		return v.Scaling
	}).(GoogleCloudRunOpV2RevisionScalingResponseOutput)
}

// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Max allowed time for an instance to respond to a request.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// A list of Volumes to make available to containers.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) Volumes() GoogleCloudRunOpV2VolumeResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) []GoogleCloudRunOpV2VolumeResponse {
		return v.Volumes
	}).(GoogleCloudRunOpV2VolumeResponseArrayOutput)
}

// VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
func (o GoogleCloudRunOpV2RevisionTemplateResponseOutput) VpcAccess() GoogleCloudRunOpV2VpcAccessResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2RevisionTemplateResponse) GoogleCloudRunOpV2VpcAccessResponse {
		return v.VpcAccess
	}).(GoogleCloudRunOpV2VpcAccessResponseOutput)
}

// SecretEnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunOpV2SecretKeySelector struct {
	// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
	Secret string `pulumi:"secret"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version *string `pulumi:"version"`
}

// GoogleCloudRunOpV2SecretKeySelectorInput is an input type that accepts GoogleCloudRunOpV2SecretKeySelectorArgs and GoogleCloudRunOpV2SecretKeySelectorOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2SecretKeySelectorInput` via:
//
//          GoogleCloudRunOpV2SecretKeySelectorArgs{...}
type GoogleCloudRunOpV2SecretKeySelectorInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2SecretKeySelectorOutput() GoogleCloudRunOpV2SecretKeySelectorOutput
	ToGoogleCloudRunOpV2SecretKeySelectorOutputWithContext(context.Context) GoogleCloudRunOpV2SecretKeySelectorOutput
}

// SecretEnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunOpV2SecretKeySelectorArgs struct {
	// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
	Secret pulumi.StringInput `pulumi:"secret"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GoogleCloudRunOpV2SecretKeySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2SecretKeySelector)(nil)).Elem()
}

func (i GoogleCloudRunOpV2SecretKeySelectorArgs) ToGoogleCloudRunOpV2SecretKeySelectorOutput() GoogleCloudRunOpV2SecretKeySelectorOutput {
	return i.ToGoogleCloudRunOpV2SecretKeySelectorOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2SecretKeySelectorArgs) ToGoogleCloudRunOpV2SecretKeySelectorOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretKeySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2SecretKeySelectorOutput)
}

func (i GoogleCloudRunOpV2SecretKeySelectorArgs) ToGoogleCloudRunOpV2SecretKeySelectorPtrOutput() GoogleCloudRunOpV2SecretKeySelectorPtrOutput {
	return i.ToGoogleCloudRunOpV2SecretKeySelectorPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2SecretKeySelectorArgs) ToGoogleCloudRunOpV2SecretKeySelectorPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2SecretKeySelectorOutput).ToGoogleCloudRunOpV2SecretKeySelectorPtrOutputWithContext(ctx)
}

// GoogleCloudRunOpV2SecretKeySelectorPtrInput is an input type that accepts GoogleCloudRunOpV2SecretKeySelectorArgs, GoogleCloudRunOpV2SecretKeySelectorPtr and GoogleCloudRunOpV2SecretKeySelectorPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2SecretKeySelectorPtrInput` via:
//
//          GoogleCloudRunOpV2SecretKeySelectorArgs{...}
//
//  or:
//
//          nil
type GoogleCloudRunOpV2SecretKeySelectorPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2SecretKeySelectorPtrOutput() GoogleCloudRunOpV2SecretKeySelectorPtrOutput
	ToGoogleCloudRunOpV2SecretKeySelectorPtrOutputWithContext(context.Context) GoogleCloudRunOpV2SecretKeySelectorPtrOutput
}

type googleCloudRunOpV2SecretKeySelectorPtrType GoogleCloudRunOpV2SecretKeySelectorArgs

func GoogleCloudRunOpV2SecretKeySelectorPtr(v *GoogleCloudRunOpV2SecretKeySelectorArgs) GoogleCloudRunOpV2SecretKeySelectorPtrInput {
	return (*googleCloudRunOpV2SecretKeySelectorPtrType)(v)
}

func (*googleCloudRunOpV2SecretKeySelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2SecretKeySelector)(nil)).Elem()
}

func (i *googleCloudRunOpV2SecretKeySelectorPtrType) ToGoogleCloudRunOpV2SecretKeySelectorPtrOutput() GoogleCloudRunOpV2SecretKeySelectorPtrOutput {
	return i.ToGoogleCloudRunOpV2SecretKeySelectorPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunOpV2SecretKeySelectorPtrType) ToGoogleCloudRunOpV2SecretKeySelectorPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2SecretKeySelectorPtrOutput)
}

// SecretEnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunOpV2SecretKeySelectorOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2SecretKeySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2SecretKeySelector)(nil)).Elem()
}

func (o GoogleCloudRunOpV2SecretKeySelectorOutput) ToGoogleCloudRunOpV2SecretKeySelectorOutput() GoogleCloudRunOpV2SecretKeySelectorOutput {
	return o
}

func (o GoogleCloudRunOpV2SecretKeySelectorOutput) ToGoogleCloudRunOpV2SecretKeySelectorOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretKeySelectorOutput {
	return o
}

func (o GoogleCloudRunOpV2SecretKeySelectorOutput) ToGoogleCloudRunOpV2SecretKeySelectorPtrOutput() GoogleCloudRunOpV2SecretKeySelectorPtrOutput {
	return o.ToGoogleCloudRunOpV2SecretKeySelectorPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunOpV2SecretKeySelectorOutput) ToGoogleCloudRunOpV2SecretKeySelectorPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretKeySelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunOpV2SecretKeySelector) *GoogleCloudRunOpV2SecretKeySelector {
		return &v
	}).(GoogleCloudRunOpV2SecretKeySelectorPtrOutput)
}

// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
func (o GoogleCloudRunOpV2SecretKeySelectorOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2SecretKeySelector) string { return v.Secret }).(pulumi.StringOutput)
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
func (o GoogleCloudRunOpV2SecretKeySelectorOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2SecretKeySelector) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GoogleCloudRunOpV2SecretKeySelectorPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2SecretKeySelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2SecretKeySelector)(nil)).Elem()
}

func (o GoogleCloudRunOpV2SecretKeySelectorPtrOutput) ToGoogleCloudRunOpV2SecretKeySelectorPtrOutput() GoogleCloudRunOpV2SecretKeySelectorPtrOutput {
	return o
}

func (o GoogleCloudRunOpV2SecretKeySelectorPtrOutput) ToGoogleCloudRunOpV2SecretKeySelectorPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretKeySelectorPtrOutput {
	return o
}

func (o GoogleCloudRunOpV2SecretKeySelectorPtrOutput) Elem() GoogleCloudRunOpV2SecretKeySelectorOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2SecretKeySelector) GoogleCloudRunOpV2SecretKeySelector {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunOpV2SecretKeySelector
		return ret
	}).(GoogleCloudRunOpV2SecretKeySelectorOutput)
}

// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
func (o GoogleCloudRunOpV2SecretKeySelectorPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2SecretKeySelector) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
func (o GoogleCloudRunOpV2SecretKeySelectorPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2SecretKeySelector) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// SecretEnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunOpV2SecretKeySelectorResponse struct {
	// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
	Secret string `pulumi:"secret"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version string `pulumi:"version"`
}

// SecretEnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunOpV2SecretKeySelectorResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2SecretKeySelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2SecretKeySelectorResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2SecretKeySelectorResponseOutput) ToGoogleCloudRunOpV2SecretKeySelectorResponseOutput() GoogleCloudRunOpV2SecretKeySelectorResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2SecretKeySelectorResponseOutput) ToGoogleCloudRunOpV2SecretKeySelectorResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretKeySelectorResponseOutput {
	return o
}

// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
func (o GoogleCloudRunOpV2SecretKeySelectorResponseOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2SecretKeySelectorResponse) string { return v.Secret }).(pulumi.StringOutput)
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
func (o GoogleCloudRunOpV2SecretKeySelectorResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2SecretKeySelectorResponse) string { return v.Version }).(pulumi.StringOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
type GoogleCloudRunOpV2SecretVolumeSource struct {
	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
	DefaultMode *int `pulumi:"defaultMode"`
	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	Items []GoogleCloudRunOpV2VersionToPath `pulumi:"items"`
	// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
	Secret string `pulumi:"secret"`
}

// GoogleCloudRunOpV2SecretVolumeSourceInput is an input type that accepts GoogleCloudRunOpV2SecretVolumeSourceArgs and GoogleCloudRunOpV2SecretVolumeSourceOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2SecretVolumeSourceInput` via:
//
//          GoogleCloudRunOpV2SecretVolumeSourceArgs{...}
type GoogleCloudRunOpV2SecretVolumeSourceInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2SecretVolumeSourceOutput() GoogleCloudRunOpV2SecretVolumeSourceOutput
	ToGoogleCloudRunOpV2SecretVolumeSourceOutputWithContext(context.Context) GoogleCloudRunOpV2SecretVolumeSourceOutput
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
type GoogleCloudRunOpV2SecretVolumeSourceArgs struct {
	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	Items GoogleCloudRunOpV2VersionToPathArrayInput `pulumi:"items"`
	// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GoogleCloudRunOpV2SecretVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2SecretVolumeSource)(nil)).Elem()
}

func (i GoogleCloudRunOpV2SecretVolumeSourceArgs) ToGoogleCloudRunOpV2SecretVolumeSourceOutput() GoogleCloudRunOpV2SecretVolumeSourceOutput {
	return i.ToGoogleCloudRunOpV2SecretVolumeSourceOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2SecretVolumeSourceArgs) ToGoogleCloudRunOpV2SecretVolumeSourceOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2SecretVolumeSourceOutput)
}

func (i GoogleCloudRunOpV2SecretVolumeSourceArgs) ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutput() GoogleCloudRunOpV2SecretVolumeSourcePtrOutput {
	return i.ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2SecretVolumeSourceArgs) ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2SecretVolumeSourceOutput).ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutputWithContext(ctx)
}

// GoogleCloudRunOpV2SecretVolumeSourcePtrInput is an input type that accepts GoogleCloudRunOpV2SecretVolumeSourceArgs, GoogleCloudRunOpV2SecretVolumeSourcePtr and GoogleCloudRunOpV2SecretVolumeSourcePtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2SecretVolumeSourcePtrInput` via:
//
//          GoogleCloudRunOpV2SecretVolumeSourceArgs{...}
//
//  or:
//
//          nil
type GoogleCloudRunOpV2SecretVolumeSourcePtrInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutput() GoogleCloudRunOpV2SecretVolumeSourcePtrOutput
	ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutputWithContext(context.Context) GoogleCloudRunOpV2SecretVolumeSourcePtrOutput
}

type googleCloudRunOpV2SecretVolumeSourcePtrType GoogleCloudRunOpV2SecretVolumeSourceArgs

func GoogleCloudRunOpV2SecretVolumeSourcePtr(v *GoogleCloudRunOpV2SecretVolumeSourceArgs) GoogleCloudRunOpV2SecretVolumeSourcePtrInput {
	return (*googleCloudRunOpV2SecretVolumeSourcePtrType)(v)
}

func (*googleCloudRunOpV2SecretVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2SecretVolumeSource)(nil)).Elem()
}

func (i *googleCloudRunOpV2SecretVolumeSourcePtrType) ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutput() GoogleCloudRunOpV2SecretVolumeSourcePtrOutput {
	return i.ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *googleCloudRunOpV2SecretVolumeSourcePtrType) ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2SecretVolumeSourcePtrOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
type GoogleCloudRunOpV2SecretVolumeSourceOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2SecretVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2SecretVolumeSource)(nil)).Elem()
}

func (o GoogleCloudRunOpV2SecretVolumeSourceOutput) ToGoogleCloudRunOpV2SecretVolumeSourceOutput() GoogleCloudRunOpV2SecretVolumeSourceOutput {
	return o
}

func (o GoogleCloudRunOpV2SecretVolumeSourceOutput) ToGoogleCloudRunOpV2SecretVolumeSourceOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretVolumeSourceOutput {
	return o
}

func (o GoogleCloudRunOpV2SecretVolumeSourceOutput) ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutput() GoogleCloudRunOpV2SecretVolumeSourcePtrOutput {
	return o.ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunOpV2SecretVolumeSourceOutput) ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunOpV2SecretVolumeSource) *GoogleCloudRunOpV2SecretVolumeSource {
		return &v
	}).(GoogleCloudRunOpV2SecretVolumeSourcePtrOutput)
}

// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
func (o GoogleCloudRunOpV2SecretVolumeSourceOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2SecretVolumeSource) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
func (o GoogleCloudRunOpV2SecretVolumeSourceOutput) Items() GoogleCloudRunOpV2VersionToPathArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2SecretVolumeSource) []GoogleCloudRunOpV2VersionToPath { return v.Items }).(GoogleCloudRunOpV2VersionToPathArrayOutput)
}

// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
func (o GoogleCloudRunOpV2SecretVolumeSourceOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2SecretVolumeSource) string { return v.Secret }).(pulumi.StringOutput)
}

type GoogleCloudRunOpV2SecretVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2SecretVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2SecretVolumeSource)(nil)).Elem()
}

func (o GoogleCloudRunOpV2SecretVolumeSourcePtrOutput) ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutput() GoogleCloudRunOpV2SecretVolumeSourcePtrOutput {
	return o
}

func (o GoogleCloudRunOpV2SecretVolumeSourcePtrOutput) ToGoogleCloudRunOpV2SecretVolumeSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretVolumeSourcePtrOutput {
	return o
}

func (o GoogleCloudRunOpV2SecretVolumeSourcePtrOutput) Elem() GoogleCloudRunOpV2SecretVolumeSourceOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2SecretVolumeSource) GoogleCloudRunOpV2SecretVolumeSource {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunOpV2SecretVolumeSource
		return ret
	}).(GoogleCloudRunOpV2SecretVolumeSourceOutput)
}

// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
func (o GoogleCloudRunOpV2SecretVolumeSourcePtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2SecretVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
func (o GoogleCloudRunOpV2SecretVolumeSourcePtrOutput) Items() GoogleCloudRunOpV2VersionToPathArrayOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2SecretVolumeSource) []GoogleCloudRunOpV2VersionToPath {
		if v == nil {
			return nil
		}
		return v.Items
	}).(GoogleCloudRunOpV2VersionToPathArrayOutput)
}

// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
func (o GoogleCloudRunOpV2SecretVolumeSourcePtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2SecretVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
type GoogleCloudRunOpV2SecretVolumeSourceResponse struct {
	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
	DefaultMode int `pulumi:"defaultMode"`
	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	Items []GoogleCloudRunOpV2VersionToPathResponse `pulumi:"items"`
	// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
	Secret string `pulumi:"secret"`
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
type GoogleCloudRunOpV2SecretVolumeSourceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2SecretVolumeSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2SecretVolumeSourceResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2SecretVolumeSourceResponseOutput) ToGoogleCloudRunOpV2SecretVolumeSourceResponseOutput() GoogleCloudRunOpV2SecretVolumeSourceResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2SecretVolumeSourceResponseOutput) ToGoogleCloudRunOpV2SecretVolumeSourceResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2SecretVolumeSourceResponseOutput {
	return o
}

// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
func (o GoogleCloudRunOpV2SecretVolumeSourceResponseOutput) DefaultMode() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2SecretVolumeSourceResponse) int { return v.DefaultMode }).(pulumi.IntOutput)
}

// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
func (o GoogleCloudRunOpV2SecretVolumeSourceResponseOutput) Items() GoogleCloudRunOpV2VersionToPathResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2SecretVolumeSourceResponse) []GoogleCloudRunOpV2VersionToPathResponse {
		return v.Items
	}).(GoogleCloudRunOpV2VersionToPathResponseArrayOutput)
}

// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
func (o GoogleCloudRunOpV2SecretVolumeSourceResponseOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2SecretVolumeSourceResponse) string { return v.Secret }).(pulumi.StringOutput)
}

// Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
type GoogleCloudRunOpV2TrafficTarget struct {
	// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
	Percent *int `pulumi:"percent"`
	// Revision to which to send this portion of traffic, if traffic allocation is by revision.
	Revision *string `pulumi:"revision"`
	// Indicates a string to be part of the URI to exclusively reference this target.
	Tag *string `pulumi:"tag"`
	// The allocation type for this traffic target.
	Type *GoogleCloudRunOpV2TrafficTargetType `pulumi:"type"`
}

// GoogleCloudRunOpV2TrafficTargetInput is an input type that accepts GoogleCloudRunOpV2TrafficTargetArgs and GoogleCloudRunOpV2TrafficTargetOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2TrafficTargetInput` via:
//
//          GoogleCloudRunOpV2TrafficTargetArgs{...}
type GoogleCloudRunOpV2TrafficTargetInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2TrafficTargetOutput() GoogleCloudRunOpV2TrafficTargetOutput
	ToGoogleCloudRunOpV2TrafficTargetOutputWithContext(context.Context) GoogleCloudRunOpV2TrafficTargetOutput
}

// Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
type GoogleCloudRunOpV2TrafficTargetArgs struct {
	// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
	Percent pulumi.IntPtrInput `pulumi:"percent"`
	// Revision to which to send this portion of traffic, if traffic allocation is by revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Indicates a string to be part of the URI to exclusively reference this target.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The allocation type for this traffic target.
	Type GoogleCloudRunOpV2TrafficTargetTypePtrInput `pulumi:"type"`
}

func (GoogleCloudRunOpV2TrafficTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2TrafficTarget)(nil)).Elem()
}

func (i GoogleCloudRunOpV2TrafficTargetArgs) ToGoogleCloudRunOpV2TrafficTargetOutput() GoogleCloudRunOpV2TrafficTargetOutput {
	return i.ToGoogleCloudRunOpV2TrafficTargetOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2TrafficTargetArgs) ToGoogleCloudRunOpV2TrafficTargetOutputWithContext(ctx context.Context) GoogleCloudRunOpV2TrafficTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2TrafficTargetOutput)
}

// GoogleCloudRunOpV2TrafficTargetArrayInput is an input type that accepts GoogleCloudRunOpV2TrafficTargetArray and GoogleCloudRunOpV2TrafficTargetArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2TrafficTargetArrayInput` via:
//
//          GoogleCloudRunOpV2TrafficTargetArray{ GoogleCloudRunOpV2TrafficTargetArgs{...} }
type GoogleCloudRunOpV2TrafficTargetArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2TrafficTargetArrayOutput() GoogleCloudRunOpV2TrafficTargetArrayOutput
	ToGoogleCloudRunOpV2TrafficTargetArrayOutputWithContext(context.Context) GoogleCloudRunOpV2TrafficTargetArrayOutput
}

type GoogleCloudRunOpV2TrafficTargetArray []GoogleCloudRunOpV2TrafficTargetInput

func (GoogleCloudRunOpV2TrafficTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2TrafficTarget)(nil)).Elem()
}

func (i GoogleCloudRunOpV2TrafficTargetArray) ToGoogleCloudRunOpV2TrafficTargetArrayOutput() GoogleCloudRunOpV2TrafficTargetArrayOutput {
	return i.ToGoogleCloudRunOpV2TrafficTargetArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2TrafficTargetArray) ToGoogleCloudRunOpV2TrafficTargetArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2TrafficTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2TrafficTargetArrayOutput)
}

// Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
type GoogleCloudRunOpV2TrafficTargetOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2TrafficTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2TrafficTarget)(nil)).Elem()
}

func (o GoogleCloudRunOpV2TrafficTargetOutput) ToGoogleCloudRunOpV2TrafficTargetOutput() GoogleCloudRunOpV2TrafficTargetOutput {
	return o
}

func (o GoogleCloudRunOpV2TrafficTargetOutput) ToGoogleCloudRunOpV2TrafficTargetOutputWithContext(ctx context.Context) GoogleCloudRunOpV2TrafficTargetOutput {
	return o
}

// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
func (o GoogleCloudRunOpV2TrafficTargetOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTarget) *int { return v.Percent }).(pulumi.IntPtrOutput)
}

// Revision to which to send this portion of traffic, if traffic allocation is by revision.
func (o GoogleCloudRunOpV2TrafficTargetOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTarget) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Indicates a string to be part of the URI to exclusively reference this target.
func (o GoogleCloudRunOpV2TrafficTargetOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTarget) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The allocation type for this traffic target.
func (o GoogleCloudRunOpV2TrafficTargetOutput) Type() GoogleCloudRunOpV2TrafficTargetTypePtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTarget) *GoogleCloudRunOpV2TrafficTargetType { return v.Type }).(GoogleCloudRunOpV2TrafficTargetTypePtrOutput)
}

type GoogleCloudRunOpV2TrafficTargetArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2TrafficTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2TrafficTarget)(nil)).Elem()
}

func (o GoogleCloudRunOpV2TrafficTargetArrayOutput) ToGoogleCloudRunOpV2TrafficTargetArrayOutput() GoogleCloudRunOpV2TrafficTargetArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2TrafficTargetArrayOutput) ToGoogleCloudRunOpV2TrafficTargetArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2TrafficTargetArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2TrafficTargetArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2TrafficTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2TrafficTarget {
		return vs[0].([]GoogleCloudRunOpV2TrafficTarget)[vs[1].(int)]
	}).(GoogleCloudRunOpV2TrafficTargetOutput)
}

// Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
type GoogleCloudRunOpV2TrafficTargetResponse struct {
	// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
	Percent int `pulumi:"percent"`
	// Revision to which to send this portion of traffic, if traffic allocation is by revision.
	Revision string `pulumi:"revision"`
	// Indicates a string to be part of the URI to exclusively reference this target.
	Tag string `pulumi:"tag"`
	// The allocation type for this traffic target.
	Type string `pulumi:"type"`
}

// Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
type GoogleCloudRunOpV2TrafficTargetResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2TrafficTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2TrafficTargetResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2TrafficTargetResponseOutput) ToGoogleCloudRunOpV2TrafficTargetResponseOutput() GoogleCloudRunOpV2TrafficTargetResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2TrafficTargetResponseOutput) ToGoogleCloudRunOpV2TrafficTargetResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2TrafficTargetResponseOutput {
	return o
}

// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
func (o GoogleCloudRunOpV2TrafficTargetResponseOutput) Percent() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTargetResponse) int { return v.Percent }).(pulumi.IntOutput)
}

// Revision to which to send this portion of traffic, if traffic allocation is by revision.
func (o GoogleCloudRunOpV2TrafficTargetResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTargetResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// Indicates a string to be part of the URI to exclusively reference this target.
func (o GoogleCloudRunOpV2TrafficTargetResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTargetResponse) string { return v.Tag }).(pulumi.StringOutput)
}

// The allocation type for this traffic target.
func (o GoogleCloudRunOpV2TrafficTargetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTargetResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudRunOpV2TrafficTargetResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2TrafficTargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2TrafficTargetResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2TrafficTargetResponseArrayOutput) ToGoogleCloudRunOpV2TrafficTargetResponseArrayOutput() GoogleCloudRunOpV2TrafficTargetResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2TrafficTargetResponseArrayOutput) ToGoogleCloudRunOpV2TrafficTargetResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2TrafficTargetResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2TrafficTargetResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2TrafficTargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2TrafficTargetResponse {
		return vs[0].([]GoogleCloudRunOpV2TrafficTargetResponse)[vs[1].(int)]
	}).(GoogleCloudRunOpV2TrafficTargetResponseOutput)
}

// Represents the observed state of a single `TrafficTarget` entry.
type GoogleCloudRunOpV2TrafficTargetStatusResponse struct {
	// Specifies percent of the traffic to this Revision.
	Percent int `pulumi:"percent"`
	// Revision to which this traffic is sent.
	Revision string `pulumi:"revision"`
	// Indicates the string used in the URI to exclusively reference this target.
	Tag string `pulumi:"tag"`
	// The allocation type for this traffic target.
	Type string `pulumi:"type"`
	// Displays the target URI.
	Uri string `pulumi:"uri"`
}

// Represents the observed state of a single `TrafficTarget` entry.
type GoogleCloudRunOpV2TrafficTargetStatusResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2TrafficTargetStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2TrafficTargetStatusResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2TrafficTargetStatusResponseOutput) ToGoogleCloudRunOpV2TrafficTargetStatusResponseOutput() GoogleCloudRunOpV2TrafficTargetStatusResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2TrafficTargetStatusResponseOutput) ToGoogleCloudRunOpV2TrafficTargetStatusResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2TrafficTargetStatusResponseOutput {
	return o
}

// Specifies percent of the traffic to this Revision.
func (o GoogleCloudRunOpV2TrafficTargetStatusResponseOutput) Percent() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTargetStatusResponse) int { return v.Percent }).(pulumi.IntOutput)
}

// Revision to which this traffic is sent.
func (o GoogleCloudRunOpV2TrafficTargetStatusResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTargetStatusResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// Indicates the string used in the URI to exclusively reference this target.
func (o GoogleCloudRunOpV2TrafficTargetStatusResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTargetStatusResponse) string { return v.Tag }).(pulumi.StringOutput)
}

// The allocation type for this traffic target.
func (o GoogleCloudRunOpV2TrafficTargetStatusResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTargetStatusResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Displays the target URI.
func (o GoogleCloudRunOpV2TrafficTargetStatusResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2TrafficTargetStatusResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type GoogleCloudRunOpV2TrafficTargetStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2TrafficTargetStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2TrafficTargetStatusResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2TrafficTargetStatusResponseArrayOutput) ToGoogleCloudRunOpV2TrafficTargetStatusResponseArrayOutput() GoogleCloudRunOpV2TrafficTargetStatusResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2TrafficTargetStatusResponseArrayOutput) ToGoogleCloudRunOpV2TrafficTargetStatusResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2TrafficTargetStatusResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2TrafficTargetStatusResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2TrafficTargetStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2TrafficTargetStatusResponse {
		return vs[0].([]GoogleCloudRunOpV2TrafficTargetStatusResponse)[vs[1].(int)]
	}).(GoogleCloudRunOpV2TrafficTargetStatusResponseOutput)
}

// VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
type GoogleCloudRunOpV2VersionToPath struct {
	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// The relative path of the secret in the container.
	Path string `pulumi:"path"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version *string `pulumi:"version"`
}

// GoogleCloudRunOpV2VersionToPathInput is an input type that accepts GoogleCloudRunOpV2VersionToPathArgs and GoogleCloudRunOpV2VersionToPathOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2VersionToPathInput` via:
//
//          GoogleCloudRunOpV2VersionToPathArgs{...}
type GoogleCloudRunOpV2VersionToPathInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2VersionToPathOutput() GoogleCloudRunOpV2VersionToPathOutput
	ToGoogleCloudRunOpV2VersionToPathOutputWithContext(context.Context) GoogleCloudRunOpV2VersionToPathOutput
}

// VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
type GoogleCloudRunOpV2VersionToPathArgs struct {
	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The relative path of the secret in the container.
	Path pulumi.StringInput `pulumi:"path"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GoogleCloudRunOpV2VersionToPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2VersionToPath)(nil)).Elem()
}

func (i GoogleCloudRunOpV2VersionToPathArgs) ToGoogleCloudRunOpV2VersionToPathOutput() GoogleCloudRunOpV2VersionToPathOutput {
	return i.ToGoogleCloudRunOpV2VersionToPathOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2VersionToPathArgs) ToGoogleCloudRunOpV2VersionToPathOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VersionToPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2VersionToPathOutput)
}

// GoogleCloudRunOpV2VersionToPathArrayInput is an input type that accepts GoogleCloudRunOpV2VersionToPathArray and GoogleCloudRunOpV2VersionToPathArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2VersionToPathArrayInput` via:
//
//          GoogleCloudRunOpV2VersionToPathArray{ GoogleCloudRunOpV2VersionToPathArgs{...} }
type GoogleCloudRunOpV2VersionToPathArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2VersionToPathArrayOutput() GoogleCloudRunOpV2VersionToPathArrayOutput
	ToGoogleCloudRunOpV2VersionToPathArrayOutputWithContext(context.Context) GoogleCloudRunOpV2VersionToPathArrayOutput
}

type GoogleCloudRunOpV2VersionToPathArray []GoogleCloudRunOpV2VersionToPathInput

func (GoogleCloudRunOpV2VersionToPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2VersionToPath)(nil)).Elem()
}

func (i GoogleCloudRunOpV2VersionToPathArray) ToGoogleCloudRunOpV2VersionToPathArrayOutput() GoogleCloudRunOpV2VersionToPathArrayOutput {
	return i.ToGoogleCloudRunOpV2VersionToPathArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2VersionToPathArray) ToGoogleCloudRunOpV2VersionToPathArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VersionToPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2VersionToPathArrayOutput)
}

// VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
type GoogleCloudRunOpV2VersionToPathOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VersionToPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2VersionToPath)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VersionToPathOutput) ToGoogleCloudRunOpV2VersionToPathOutput() GoogleCloudRunOpV2VersionToPathOutput {
	return o
}

func (o GoogleCloudRunOpV2VersionToPathOutput) ToGoogleCloudRunOpV2VersionToPathOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VersionToPathOutput {
	return o
}

// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o GoogleCloudRunOpV2VersionToPathOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VersionToPath) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The relative path of the secret in the container.
func (o GoogleCloudRunOpV2VersionToPathOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VersionToPath) string { return v.Path }).(pulumi.StringOutput)
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
func (o GoogleCloudRunOpV2VersionToPathOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VersionToPath) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GoogleCloudRunOpV2VersionToPathArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VersionToPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2VersionToPath)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VersionToPathArrayOutput) ToGoogleCloudRunOpV2VersionToPathArrayOutput() GoogleCloudRunOpV2VersionToPathArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VersionToPathArrayOutput) ToGoogleCloudRunOpV2VersionToPathArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VersionToPathArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VersionToPathArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2VersionToPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2VersionToPath {
		return vs[0].([]GoogleCloudRunOpV2VersionToPath)[vs[1].(int)]
	}).(GoogleCloudRunOpV2VersionToPathOutput)
}

// VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
type GoogleCloudRunOpV2VersionToPathResponse struct {
	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode int `pulumi:"mode"`
	// The relative path of the secret in the container.
	Path string `pulumi:"path"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version string `pulumi:"version"`
}

// VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
type GoogleCloudRunOpV2VersionToPathResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VersionToPathResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2VersionToPathResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VersionToPathResponseOutput) ToGoogleCloudRunOpV2VersionToPathResponseOutput() GoogleCloudRunOpV2VersionToPathResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2VersionToPathResponseOutput) ToGoogleCloudRunOpV2VersionToPathResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VersionToPathResponseOutput {
	return o
}

// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o GoogleCloudRunOpV2VersionToPathResponseOutput) Mode() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VersionToPathResponse) int { return v.Mode }).(pulumi.IntOutput)
}

// The relative path of the secret in the container.
func (o GoogleCloudRunOpV2VersionToPathResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VersionToPathResponse) string { return v.Path }).(pulumi.StringOutput)
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
func (o GoogleCloudRunOpV2VersionToPathResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VersionToPathResponse) string { return v.Version }).(pulumi.StringOutput)
}

type GoogleCloudRunOpV2VersionToPathResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VersionToPathResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2VersionToPathResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VersionToPathResponseArrayOutput) ToGoogleCloudRunOpV2VersionToPathResponseArrayOutput() GoogleCloudRunOpV2VersionToPathResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VersionToPathResponseArrayOutput) ToGoogleCloudRunOpV2VersionToPathResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VersionToPathResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VersionToPathResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2VersionToPathResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2VersionToPathResponse {
		return vs[0].([]GoogleCloudRunOpV2VersionToPathResponse)[vs[1].(int)]
	}).(GoogleCloudRunOpV2VersionToPathResponseOutput)
}

// Volume represents a named volume in a container.
type GoogleCloudRunOpV2Volume struct {
	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	CloudSqlInstance *GoogleCloudRunOpV2CloudSqlInstance `pulumi:"cloudSqlInstance"`
	// Volume's name.
	Name string `pulumi:"name"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret *GoogleCloudRunOpV2SecretVolumeSource `pulumi:"secret"`
}

// GoogleCloudRunOpV2VolumeInput is an input type that accepts GoogleCloudRunOpV2VolumeArgs and GoogleCloudRunOpV2VolumeOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2VolumeInput` via:
//
//          GoogleCloudRunOpV2VolumeArgs{...}
type GoogleCloudRunOpV2VolumeInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2VolumeOutput() GoogleCloudRunOpV2VolumeOutput
	ToGoogleCloudRunOpV2VolumeOutputWithContext(context.Context) GoogleCloudRunOpV2VolumeOutput
}

// Volume represents a named volume in a container.
type GoogleCloudRunOpV2VolumeArgs struct {
	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	CloudSqlInstance GoogleCloudRunOpV2CloudSqlInstancePtrInput `pulumi:"cloudSqlInstance"`
	// Volume's name.
	Name pulumi.StringInput `pulumi:"name"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret GoogleCloudRunOpV2SecretVolumeSourcePtrInput `pulumi:"secret"`
}

func (GoogleCloudRunOpV2VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2Volume)(nil)).Elem()
}

func (i GoogleCloudRunOpV2VolumeArgs) ToGoogleCloudRunOpV2VolumeOutput() GoogleCloudRunOpV2VolumeOutput {
	return i.ToGoogleCloudRunOpV2VolumeOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2VolumeArgs) ToGoogleCloudRunOpV2VolumeOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2VolumeOutput)
}

// GoogleCloudRunOpV2VolumeArrayInput is an input type that accepts GoogleCloudRunOpV2VolumeArray and GoogleCloudRunOpV2VolumeArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2VolumeArrayInput` via:
//
//          GoogleCloudRunOpV2VolumeArray{ GoogleCloudRunOpV2VolumeArgs{...} }
type GoogleCloudRunOpV2VolumeArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2VolumeArrayOutput() GoogleCloudRunOpV2VolumeArrayOutput
	ToGoogleCloudRunOpV2VolumeArrayOutputWithContext(context.Context) GoogleCloudRunOpV2VolumeArrayOutput
}

type GoogleCloudRunOpV2VolumeArray []GoogleCloudRunOpV2VolumeInput

func (GoogleCloudRunOpV2VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2Volume)(nil)).Elem()
}

func (i GoogleCloudRunOpV2VolumeArray) ToGoogleCloudRunOpV2VolumeArrayOutput() GoogleCloudRunOpV2VolumeArrayOutput {
	return i.ToGoogleCloudRunOpV2VolumeArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2VolumeArray) ToGoogleCloudRunOpV2VolumeArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2VolumeArrayOutput)
}

// Volume represents a named volume in a container.
type GoogleCloudRunOpV2VolumeOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2Volume)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VolumeOutput) ToGoogleCloudRunOpV2VolumeOutput() GoogleCloudRunOpV2VolumeOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeOutput) ToGoogleCloudRunOpV2VolumeOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeOutput {
	return o
}

// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
func (o GoogleCloudRunOpV2VolumeOutput) CloudSqlInstance() GoogleCloudRunOpV2CloudSqlInstancePtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Volume) *GoogleCloudRunOpV2CloudSqlInstance { return v.CloudSqlInstance }).(GoogleCloudRunOpV2CloudSqlInstancePtrOutput)
}

// Volume's name.
func (o GoogleCloudRunOpV2VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Volume) string { return v.Name }).(pulumi.StringOutput)
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o GoogleCloudRunOpV2VolumeOutput) Secret() GoogleCloudRunOpV2SecretVolumeSourcePtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2Volume) *GoogleCloudRunOpV2SecretVolumeSource { return v.Secret }).(GoogleCloudRunOpV2SecretVolumeSourcePtrOutput)
}

type GoogleCloudRunOpV2VolumeArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2Volume)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VolumeArrayOutput) ToGoogleCloudRunOpV2VolumeArrayOutput() GoogleCloudRunOpV2VolumeArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeArrayOutput) ToGoogleCloudRunOpV2VolumeArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2Volume {
		return vs[0].([]GoogleCloudRunOpV2Volume)[vs[1].(int)]
	}).(GoogleCloudRunOpV2VolumeOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type GoogleCloudRunOpV2VolumeMount struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	MountPath string `pulumi:"mountPath"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
}

// GoogleCloudRunOpV2VolumeMountInput is an input type that accepts GoogleCloudRunOpV2VolumeMountArgs and GoogleCloudRunOpV2VolumeMountOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2VolumeMountInput` via:
//
//          GoogleCloudRunOpV2VolumeMountArgs{...}
type GoogleCloudRunOpV2VolumeMountInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2VolumeMountOutput() GoogleCloudRunOpV2VolumeMountOutput
	ToGoogleCloudRunOpV2VolumeMountOutputWithContext(context.Context) GoogleCloudRunOpV2VolumeMountOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type GoogleCloudRunOpV2VolumeMountArgs struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// This must match the Name of a Volume.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GoogleCloudRunOpV2VolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2VolumeMount)(nil)).Elem()
}

func (i GoogleCloudRunOpV2VolumeMountArgs) ToGoogleCloudRunOpV2VolumeMountOutput() GoogleCloudRunOpV2VolumeMountOutput {
	return i.ToGoogleCloudRunOpV2VolumeMountOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2VolumeMountArgs) ToGoogleCloudRunOpV2VolumeMountOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2VolumeMountOutput)
}

// GoogleCloudRunOpV2VolumeMountArrayInput is an input type that accepts GoogleCloudRunOpV2VolumeMountArray and GoogleCloudRunOpV2VolumeMountArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2VolumeMountArrayInput` via:
//
//          GoogleCloudRunOpV2VolumeMountArray{ GoogleCloudRunOpV2VolumeMountArgs{...} }
type GoogleCloudRunOpV2VolumeMountArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2VolumeMountArrayOutput() GoogleCloudRunOpV2VolumeMountArrayOutput
	ToGoogleCloudRunOpV2VolumeMountArrayOutputWithContext(context.Context) GoogleCloudRunOpV2VolumeMountArrayOutput
}

type GoogleCloudRunOpV2VolumeMountArray []GoogleCloudRunOpV2VolumeMountInput

func (GoogleCloudRunOpV2VolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2VolumeMount)(nil)).Elem()
}

func (i GoogleCloudRunOpV2VolumeMountArray) ToGoogleCloudRunOpV2VolumeMountArrayOutput() GoogleCloudRunOpV2VolumeMountArrayOutput {
	return i.ToGoogleCloudRunOpV2VolumeMountArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2VolumeMountArray) ToGoogleCloudRunOpV2VolumeMountArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2VolumeMountArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type GoogleCloudRunOpV2VolumeMountOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2VolumeMount)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VolumeMountOutput) ToGoogleCloudRunOpV2VolumeMountOutput() GoogleCloudRunOpV2VolumeMountOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeMountOutput) ToGoogleCloudRunOpV2VolumeMountOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeMountOutput {
	return o
}

// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
func (o GoogleCloudRunOpV2VolumeMountOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VolumeMount) string { return v.MountPath }).(pulumi.StringOutput)
}

// This must match the Name of a Volume.
func (o GoogleCloudRunOpV2VolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

type GoogleCloudRunOpV2VolumeMountArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2VolumeMount)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VolumeMountArrayOutput) ToGoogleCloudRunOpV2VolumeMountArrayOutput() GoogleCloudRunOpV2VolumeMountArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeMountArrayOutput) ToGoogleCloudRunOpV2VolumeMountArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeMountArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeMountArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2VolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2VolumeMount {
		return vs[0].([]GoogleCloudRunOpV2VolumeMount)[vs[1].(int)]
	}).(GoogleCloudRunOpV2VolumeMountOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type GoogleCloudRunOpV2VolumeMountResponse struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	MountPath string `pulumi:"mountPath"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
}

// VolumeMount describes a mounting of a Volume within a container.
type GoogleCloudRunOpV2VolumeMountResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VolumeMountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2VolumeMountResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VolumeMountResponseOutput) ToGoogleCloudRunOpV2VolumeMountResponseOutput() GoogleCloudRunOpV2VolumeMountResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeMountResponseOutput) ToGoogleCloudRunOpV2VolumeMountResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeMountResponseOutput {
	return o
}

// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
func (o GoogleCloudRunOpV2VolumeMountResponseOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VolumeMountResponse) string { return v.MountPath }).(pulumi.StringOutput)
}

// This must match the Name of a Volume.
func (o GoogleCloudRunOpV2VolumeMountResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VolumeMountResponse) string { return v.Name }).(pulumi.StringOutput)
}

type GoogleCloudRunOpV2VolumeMountResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VolumeMountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2VolumeMountResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VolumeMountResponseArrayOutput) ToGoogleCloudRunOpV2VolumeMountResponseArrayOutput() GoogleCloudRunOpV2VolumeMountResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeMountResponseArrayOutput) ToGoogleCloudRunOpV2VolumeMountResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeMountResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeMountResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2VolumeMountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2VolumeMountResponse {
		return vs[0].([]GoogleCloudRunOpV2VolumeMountResponse)[vs[1].(int)]
	}).(GoogleCloudRunOpV2VolumeMountResponseOutput)
}

// Volume represents a named volume in a container.
type GoogleCloudRunOpV2VolumeResponse struct {
	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	CloudSqlInstance GoogleCloudRunOpV2CloudSqlInstanceResponse `pulumi:"cloudSqlInstance"`
	// Volume's name.
	Name string `pulumi:"name"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret GoogleCloudRunOpV2SecretVolumeSourceResponse `pulumi:"secret"`
}

// Volume represents a named volume in a container.
type GoogleCloudRunOpV2VolumeResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2VolumeResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VolumeResponseOutput) ToGoogleCloudRunOpV2VolumeResponseOutput() GoogleCloudRunOpV2VolumeResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeResponseOutput) ToGoogleCloudRunOpV2VolumeResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeResponseOutput {
	return o
}

// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
func (o GoogleCloudRunOpV2VolumeResponseOutput) CloudSqlInstance() GoogleCloudRunOpV2CloudSqlInstanceResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VolumeResponse) GoogleCloudRunOpV2CloudSqlInstanceResponse {
		return v.CloudSqlInstance
	}).(GoogleCloudRunOpV2CloudSqlInstanceResponseOutput)
}

// Volume's name.
func (o GoogleCloudRunOpV2VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o GoogleCloudRunOpV2VolumeResponseOutput) Secret() GoogleCloudRunOpV2SecretVolumeSourceResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VolumeResponse) GoogleCloudRunOpV2SecretVolumeSourceResponse { return v.Secret }).(GoogleCloudRunOpV2SecretVolumeSourceResponseOutput)
}

type GoogleCloudRunOpV2VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunOpV2VolumeResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VolumeResponseArrayOutput) ToGoogleCloudRunOpV2VolumeResponseArrayOutput() GoogleCloudRunOpV2VolumeResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeResponseArrayOutput) ToGoogleCloudRunOpV2VolumeResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VolumeResponseArrayOutput {
	return o
}

func (o GoogleCloudRunOpV2VolumeResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunOpV2VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunOpV2VolumeResponse {
		return vs[0].([]GoogleCloudRunOpV2VolumeResponse)[vs[1].(int)]
	}).(GoogleCloudRunOpV2VolumeResponseOutput)
}

// VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
type GoogleCloudRunOpV2VpcAccess struct {
	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
	Connector *string `pulumi:"connector"`
	// Traffic VPC egress settings.
	Egress *GoogleCloudRunOpV2VpcAccessEgress `pulumi:"egress"`
}

// GoogleCloudRunOpV2VpcAccessInput is an input type that accepts GoogleCloudRunOpV2VpcAccessArgs and GoogleCloudRunOpV2VpcAccessOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2VpcAccessInput` via:
//
//          GoogleCloudRunOpV2VpcAccessArgs{...}
type GoogleCloudRunOpV2VpcAccessInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2VpcAccessOutput() GoogleCloudRunOpV2VpcAccessOutput
	ToGoogleCloudRunOpV2VpcAccessOutputWithContext(context.Context) GoogleCloudRunOpV2VpcAccessOutput
}

// VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
type GoogleCloudRunOpV2VpcAccessArgs struct {
	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
	Connector pulumi.StringPtrInput `pulumi:"connector"`
	// Traffic VPC egress settings.
	Egress GoogleCloudRunOpV2VpcAccessEgressPtrInput `pulumi:"egress"`
}

func (GoogleCloudRunOpV2VpcAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2VpcAccess)(nil)).Elem()
}

func (i GoogleCloudRunOpV2VpcAccessArgs) ToGoogleCloudRunOpV2VpcAccessOutput() GoogleCloudRunOpV2VpcAccessOutput {
	return i.ToGoogleCloudRunOpV2VpcAccessOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2VpcAccessArgs) ToGoogleCloudRunOpV2VpcAccessOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VpcAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2VpcAccessOutput)
}

func (i GoogleCloudRunOpV2VpcAccessArgs) ToGoogleCloudRunOpV2VpcAccessPtrOutput() GoogleCloudRunOpV2VpcAccessPtrOutput {
	return i.ToGoogleCloudRunOpV2VpcAccessPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunOpV2VpcAccessArgs) ToGoogleCloudRunOpV2VpcAccessPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VpcAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2VpcAccessOutput).ToGoogleCloudRunOpV2VpcAccessPtrOutputWithContext(ctx)
}

// GoogleCloudRunOpV2VpcAccessPtrInput is an input type that accepts GoogleCloudRunOpV2VpcAccessArgs, GoogleCloudRunOpV2VpcAccessPtr and GoogleCloudRunOpV2VpcAccessPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunOpV2VpcAccessPtrInput` via:
//
//          GoogleCloudRunOpV2VpcAccessArgs{...}
//
//  or:
//
//          nil
type GoogleCloudRunOpV2VpcAccessPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunOpV2VpcAccessPtrOutput() GoogleCloudRunOpV2VpcAccessPtrOutput
	ToGoogleCloudRunOpV2VpcAccessPtrOutputWithContext(context.Context) GoogleCloudRunOpV2VpcAccessPtrOutput
}

type googleCloudRunOpV2VpcAccessPtrType GoogleCloudRunOpV2VpcAccessArgs

func GoogleCloudRunOpV2VpcAccessPtr(v *GoogleCloudRunOpV2VpcAccessArgs) GoogleCloudRunOpV2VpcAccessPtrInput {
	return (*googleCloudRunOpV2VpcAccessPtrType)(v)
}

func (*googleCloudRunOpV2VpcAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2VpcAccess)(nil)).Elem()
}

func (i *googleCloudRunOpV2VpcAccessPtrType) ToGoogleCloudRunOpV2VpcAccessPtrOutput() GoogleCloudRunOpV2VpcAccessPtrOutput {
	return i.ToGoogleCloudRunOpV2VpcAccessPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunOpV2VpcAccessPtrType) ToGoogleCloudRunOpV2VpcAccessPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VpcAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunOpV2VpcAccessPtrOutput)
}

// VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
type GoogleCloudRunOpV2VpcAccessOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VpcAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2VpcAccess)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VpcAccessOutput) ToGoogleCloudRunOpV2VpcAccessOutput() GoogleCloudRunOpV2VpcAccessOutput {
	return o
}

func (o GoogleCloudRunOpV2VpcAccessOutput) ToGoogleCloudRunOpV2VpcAccessOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VpcAccessOutput {
	return o
}

func (o GoogleCloudRunOpV2VpcAccessOutput) ToGoogleCloudRunOpV2VpcAccessPtrOutput() GoogleCloudRunOpV2VpcAccessPtrOutput {
	return o.ToGoogleCloudRunOpV2VpcAccessPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunOpV2VpcAccessOutput) ToGoogleCloudRunOpV2VpcAccessPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VpcAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunOpV2VpcAccess) *GoogleCloudRunOpV2VpcAccess {
		return &v
	}).(GoogleCloudRunOpV2VpcAccessPtrOutput)
}

// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
func (o GoogleCloudRunOpV2VpcAccessOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VpcAccess) *string { return v.Connector }).(pulumi.StringPtrOutput)
}

// Traffic VPC egress settings.
func (o GoogleCloudRunOpV2VpcAccessOutput) Egress() GoogleCloudRunOpV2VpcAccessEgressPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VpcAccess) *GoogleCloudRunOpV2VpcAccessEgress { return v.Egress }).(GoogleCloudRunOpV2VpcAccessEgressPtrOutput)
}

type GoogleCloudRunOpV2VpcAccessPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VpcAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunOpV2VpcAccess)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VpcAccessPtrOutput) ToGoogleCloudRunOpV2VpcAccessPtrOutput() GoogleCloudRunOpV2VpcAccessPtrOutput {
	return o
}

func (o GoogleCloudRunOpV2VpcAccessPtrOutput) ToGoogleCloudRunOpV2VpcAccessPtrOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VpcAccessPtrOutput {
	return o
}

func (o GoogleCloudRunOpV2VpcAccessPtrOutput) Elem() GoogleCloudRunOpV2VpcAccessOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2VpcAccess) GoogleCloudRunOpV2VpcAccess {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunOpV2VpcAccess
		return ret
	}).(GoogleCloudRunOpV2VpcAccessOutput)
}

// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
func (o GoogleCloudRunOpV2VpcAccessPtrOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2VpcAccess) *string {
		if v == nil {
			return nil
		}
		return v.Connector
	}).(pulumi.StringPtrOutput)
}

// Traffic VPC egress settings.
func (o GoogleCloudRunOpV2VpcAccessPtrOutput) Egress() GoogleCloudRunOpV2VpcAccessEgressPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunOpV2VpcAccess) *GoogleCloudRunOpV2VpcAccessEgress {
		if v == nil {
			return nil
		}
		return v.Egress
	}).(GoogleCloudRunOpV2VpcAccessEgressPtrOutput)
}

// VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
type GoogleCloudRunOpV2VpcAccessResponse struct {
	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
	Connector string `pulumi:"connector"`
	// Traffic VPC egress settings.
	Egress string `pulumi:"egress"`
}

// VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
type GoogleCloudRunOpV2VpcAccessResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunOpV2VpcAccessResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunOpV2VpcAccessResponse)(nil)).Elem()
}

func (o GoogleCloudRunOpV2VpcAccessResponseOutput) ToGoogleCloudRunOpV2VpcAccessResponseOutput() GoogleCloudRunOpV2VpcAccessResponseOutput {
	return o
}

func (o GoogleCloudRunOpV2VpcAccessResponseOutput) ToGoogleCloudRunOpV2VpcAccessResponseOutputWithContext(ctx context.Context) GoogleCloudRunOpV2VpcAccessResponseOutput {
	return o
}

// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
func (o GoogleCloudRunOpV2VpcAccessResponseOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VpcAccessResponse) string { return v.Connector }).(pulumi.StringOutput)
}

// Traffic VPC egress settings.
func (o GoogleCloudRunOpV2VpcAccessResponseOutput) Egress() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunOpV2VpcAccessResponse) string { return v.Egress }).(pulumi.StringOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type GoogleIamV1AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []GoogleIamV1AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// GoogleIamV1AuditConfigInput is an input type that accepts GoogleIamV1AuditConfigArgs and GoogleIamV1AuditConfigOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditConfigInput` via:
//
//          GoogleIamV1AuditConfigArgs{...}
type GoogleIamV1AuditConfigInput interface {
	pulumi.Input

	ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput
	ToGoogleIamV1AuditConfigOutputWithContext(context.Context) GoogleIamV1AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type GoogleIamV1AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs GoogleIamV1AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (GoogleIamV1AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditConfigArgs) ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput {
	return i.ToGoogleIamV1AuditConfigOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditConfigArgs) ToGoogleIamV1AuditConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditConfigOutput)
}

// GoogleIamV1AuditConfigArrayInput is an input type that accepts GoogleIamV1AuditConfigArray and GoogleIamV1AuditConfigArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditConfigArrayInput` via:
//
//          GoogleIamV1AuditConfigArray{ GoogleIamV1AuditConfigArgs{...} }
type GoogleIamV1AuditConfigArrayInput interface {
	pulumi.Input

	ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput
	ToGoogleIamV1AuditConfigArrayOutputWithContext(context.Context) GoogleIamV1AuditConfigArrayOutput
}

type GoogleIamV1AuditConfigArray []GoogleIamV1AuditConfigInput

func (GoogleIamV1AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditConfigArray) ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput {
	return i.ToGoogleIamV1AuditConfigArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditConfigArray) ToGoogleIamV1AuditConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type GoogleIamV1AuditConfigOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigOutput) ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput {
	return o
}

func (o GoogleIamV1AuditConfigOutput) ToGoogleIamV1AuditConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o GoogleIamV1AuditConfigOutput) AuditLogConfigs() GoogleIamV1AuditLogConfigArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfig) []GoogleIamV1AuditLogConfig { return v.AuditLogConfigs }).(GoogleIamV1AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o GoogleIamV1AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type GoogleIamV1AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigArrayOutput) ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigArrayOutput) ToGoogleIamV1AuditConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditConfig {
		return vs[0].([]GoogleIamV1AuditConfig)[vs[1].(int)]
	}).(GoogleIamV1AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type GoogleIamV1AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []GoogleIamV1AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type GoogleIamV1AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigResponseOutput) ToGoogleIamV1AuditConfigResponseOutput() GoogleIamV1AuditConfigResponseOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseOutput) ToGoogleIamV1AuditConfigResponseOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o GoogleIamV1AuditConfigResponseOutput) AuditLogConfigs() GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfigResponse) []GoogleIamV1AuditLogConfigResponse { return v.AuditLogConfigs }).(GoogleIamV1AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o GoogleIamV1AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type GoogleIamV1AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) ToGoogleIamV1AuditConfigResponseArrayOutput() GoogleIamV1AuditConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) ToGoogleIamV1AuditConfigResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditConfigResponse {
		return vs[0].([]GoogleIamV1AuditConfigResponse)[vs[1].(int)]
	}).(GoogleIamV1AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *GoogleIamV1AuditLogConfigLogType `pulumi:"logType"`
}

// GoogleIamV1AuditLogConfigInput is an input type that accepts GoogleIamV1AuditLogConfigArgs and GoogleIamV1AuditLogConfigOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditLogConfigInput` via:
//
//          GoogleIamV1AuditLogConfigArgs{...}
type GoogleIamV1AuditLogConfigInput interface {
	pulumi.Input

	ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput
	ToGoogleIamV1AuditLogConfigOutputWithContext(context.Context) GoogleIamV1AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType GoogleIamV1AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (GoogleIamV1AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditLogConfigArgs) ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput {
	return i.ToGoogleIamV1AuditLogConfigOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditLogConfigArgs) ToGoogleIamV1AuditLogConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditLogConfigOutput)
}

// GoogleIamV1AuditLogConfigArrayInput is an input type that accepts GoogleIamV1AuditLogConfigArray and GoogleIamV1AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditLogConfigArrayInput` via:
//
//          GoogleIamV1AuditLogConfigArray{ GoogleIamV1AuditLogConfigArgs{...} }
type GoogleIamV1AuditLogConfigArrayInput interface {
	pulumi.Input

	ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput
	ToGoogleIamV1AuditLogConfigArrayOutputWithContext(context.Context) GoogleIamV1AuditLogConfigArrayOutput
}

type GoogleIamV1AuditLogConfigArray []GoogleIamV1AuditLogConfigInput

func (GoogleIamV1AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditLogConfigArray) ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput {
	return i.ToGoogleIamV1AuditLogConfigArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditLogConfigArray) ToGoogleIamV1AuditLogConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigOutput) ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigOutput) ToGoogleIamV1AuditLogConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o GoogleIamV1AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o GoogleIamV1AuditLogConfigOutput) LogType() GoogleIamV1AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfig) *GoogleIamV1AuditLogConfigLogType { return v.LogType }).(GoogleIamV1AuditLogConfigLogTypePtrOutput)
}

type GoogleIamV1AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigArrayOutput) ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigArrayOutput) ToGoogleIamV1AuditLogConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditLogConfig {
		return vs[0].([]GoogleIamV1AuditLogConfig)[vs[1].(int)]
	}).(GoogleIamV1AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigResponseOutput) ToGoogleIamV1AuditLogConfigResponseOutput() GoogleIamV1AuditLogConfigResponseOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseOutput) ToGoogleIamV1AuditLogConfigResponseOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o GoogleIamV1AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o GoogleIamV1AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type GoogleIamV1AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) ToGoogleIamV1AuditLogConfigResponseArrayOutput() GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) ToGoogleIamV1AuditLogConfigResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditLogConfigResponse {
		return vs[0].([]GoogleIamV1AuditLogConfigResponse)[vs[1].(int)]
	}).(GoogleIamV1AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *GoogleTypeExpr `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// GoogleIamV1BindingInput is an input type that accepts GoogleIamV1BindingArgs and GoogleIamV1BindingOutput values.
// You can construct a concrete instance of `GoogleIamV1BindingInput` via:
//
//          GoogleIamV1BindingArgs{...}
type GoogleIamV1BindingInput interface {
	pulumi.Input

	ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput
	ToGoogleIamV1BindingOutputWithContext(context.Context) GoogleIamV1BindingOutput
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition GoogleTypeExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (GoogleIamV1BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1Binding)(nil)).Elem()
}

func (i GoogleIamV1BindingArgs) ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput {
	return i.ToGoogleIamV1BindingOutputWithContext(context.Background())
}

func (i GoogleIamV1BindingArgs) ToGoogleIamV1BindingOutputWithContext(ctx context.Context) GoogleIamV1BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1BindingOutput)
}

// GoogleIamV1BindingArrayInput is an input type that accepts GoogleIamV1BindingArray and GoogleIamV1BindingArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1BindingArrayInput` via:
//
//          GoogleIamV1BindingArray{ GoogleIamV1BindingArgs{...} }
type GoogleIamV1BindingArrayInput interface {
	pulumi.Input

	ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput
	ToGoogleIamV1BindingArrayOutputWithContext(context.Context) GoogleIamV1BindingArrayOutput
}

type GoogleIamV1BindingArray []GoogleIamV1BindingInput

func (GoogleIamV1BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1Binding)(nil)).Elem()
}

func (i GoogleIamV1BindingArray) ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput {
	return i.ToGoogleIamV1BindingArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1BindingArray) ToGoogleIamV1BindingArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1Binding)(nil)).Elem()
}

func (o GoogleIamV1BindingOutput) ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput {
	return o
}

func (o GoogleIamV1BindingOutput) ToGoogleIamV1BindingOutputWithContext(ctx context.Context) GoogleIamV1BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o GoogleIamV1BindingOutput) Condition() GoogleTypeExprPtrOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) *GoogleTypeExpr { return v.Condition }).(GoogleTypeExprPtrOutput)
}

// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o GoogleIamV1BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o GoogleIamV1BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type GoogleIamV1BindingArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1Binding)(nil)).Elem()
}

func (o GoogleIamV1BindingArrayOutput) ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput {
	return o
}

func (o GoogleIamV1BindingArrayOutput) ToGoogleIamV1BindingArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingArrayOutput {
	return o
}

func (o GoogleIamV1BindingArrayOutput) Index(i pulumi.IntInput) GoogleIamV1BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1Binding {
		return vs[0].([]GoogleIamV1Binding)[vs[1].(int)]
	}).(GoogleIamV1BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition GoogleTypeExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1BindingResponse)(nil)).Elem()
}

func (o GoogleIamV1BindingResponseOutput) ToGoogleIamV1BindingResponseOutput() GoogleIamV1BindingResponseOutput {
	return o
}

func (o GoogleIamV1BindingResponseOutput) ToGoogleIamV1BindingResponseOutputWithContext(ctx context.Context) GoogleIamV1BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o GoogleIamV1BindingResponseOutput) Condition() GoogleTypeExprResponseOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) GoogleTypeExprResponse { return v.Condition }).(GoogleTypeExprResponseOutput)
}

// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o GoogleIamV1BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o GoogleIamV1BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type GoogleIamV1BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1BindingResponse)(nil)).Elem()
}

func (o GoogleIamV1BindingResponseArrayOutput) ToGoogleIamV1BindingResponseArrayOutput() GoogleIamV1BindingResponseArrayOutput {
	return o
}

func (o GoogleIamV1BindingResponseArrayOutput) ToGoogleIamV1BindingResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingResponseArrayOutput {
	return o
}

func (o GoogleIamV1BindingResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1BindingResponse {
		return vs[0].([]GoogleIamV1BindingResponse)[vs[1].(int)]
	}).(GoogleIamV1BindingResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExpr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// GoogleTypeExprInput is an input type that accepts GoogleTypeExprArgs and GoogleTypeExprOutput values.
// You can construct a concrete instance of `GoogleTypeExprInput` via:
//
//          GoogleTypeExprArgs{...}
type GoogleTypeExprInput interface {
	pulumi.Input

	ToGoogleTypeExprOutput() GoogleTypeExprOutput
	ToGoogleTypeExprOutputWithContext(context.Context) GoogleTypeExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (GoogleTypeExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeExpr)(nil)).Elem()
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprOutput() GoogleTypeExprOutput {
	return i.ToGoogleTypeExprOutputWithContext(context.Background())
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprOutputWithContext(ctx context.Context) GoogleTypeExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeExprOutput)
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return i.ToGoogleTypeExprPtrOutputWithContext(context.Background())
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeExprOutput).ToGoogleTypeExprPtrOutputWithContext(ctx)
}

// GoogleTypeExprPtrInput is an input type that accepts GoogleTypeExprArgs, GoogleTypeExprPtr and GoogleTypeExprPtrOutput values.
// You can construct a concrete instance of `GoogleTypeExprPtrInput` via:
//
//          GoogleTypeExprArgs{...}
//
//  or:
//
//          nil
type GoogleTypeExprPtrInput interface {
	pulumi.Input

	ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput
	ToGoogleTypeExprPtrOutputWithContext(context.Context) GoogleTypeExprPtrOutput
}

type googleTypeExprPtrType GoogleTypeExprArgs

func GoogleTypeExprPtr(v *GoogleTypeExprArgs) GoogleTypeExprPtrInput {
	return (*googleTypeExprPtrType)(v)
}

func (*googleTypeExprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeExpr)(nil)).Elem()
}

func (i *googleTypeExprPtrType) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return i.ToGoogleTypeExprPtrOutputWithContext(context.Background())
}

func (i *googleTypeExprPtrType) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprOutput struct{ *pulumi.OutputState }

func (GoogleTypeExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeExpr)(nil)).Elem()
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprOutput() GoogleTypeExprOutput {
	return o
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprOutputWithContext(ctx context.Context) GoogleTypeExprOutput {
	return o
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return o.ToGoogleTypeExprPtrOutputWithContext(context.Background())
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleTypeExpr) *GoogleTypeExpr {
		return &v
	}).(GoogleTypeExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o GoogleTypeExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o GoogleTypeExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o GoogleTypeExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o GoogleTypeExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type GoogleTypeExprPtrOutput struct{ *pulumi.OutputState }

func (GoogleTypeExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeExpr)(nil)).Elem()
}

func (o GoogleTypeExprPtrOutput) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return o
}

func (o GoogleTypeExprPtrOutput) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return o
}

func (o GoogleTypeExprPtrOutput) Elem() GoogleTypeExprOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) GoogleTypeExpr {
		if v != nil {
			return *v
		}
		var ret GoogleTypeExpr
		return ret
	}).(GoogleTypeExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o GoogleTypeExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o GoogleTypeExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o GoogleTypeExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o GoogleTypeExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprResponseOutput struct{ *pulumi.OutputState }

func (GoogleTypeExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeExprResponse)(nil)).Elem()
}

func (o GoogleTypeExprResponseOutput) ToGoogleTypeExprResponseOutput() GoogleTypeExprResponseOutput {
	return o
}

func (o GoogleTypeExprResponseOutput) ToGoogleTypeExprResponseOutputWithContext(ctx context.Context) GoogleTypeExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o GoogleTypeExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o GoogleTypeExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o GoogleTypeExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o GoogleTypeExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2BinaryAuthorizationInput)(nil)).Elem(), GoogleCloudRunOpV2BinaryAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2BinaryAuthorizationPtrInput)(nil)).Elem(), GoogleCloudRunOpV2BinaryAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2CloudSqlInstanceInput)(nil)).Elem(), GoogleCloudRunOpV2CloudSqlInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2CloudSqlInstancePtrInput)(nil)).Elem(), GoogleCloudRunOpV2CloudSqlInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2ContainerInput)(nil)).Elem(), GoogleCloudRunOpV2ContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2ContainerArrayInput)(nil)).Elem(), GoogleCloudRunOpV2ContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2ContainerPortInput)(nil)).Elem(), GoogleCloudRunOpV2ContainerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2ContainerPortArrayInput)(nil)).Elem(), GoogleCloudRunOpV2ContainerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2EnvVarInput)(nil)).Elem(), GoogleCloudRunOpV2EnvVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2EnvVarArrayInput)(nil)).Elem(), GoogleCloudRunOpV2EnvVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2EnvVarSourceInput)(nil)).Elem(), GoogleCloudRunOpV2EnvVarSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2EnvVarSourcePtrInput)(nil)).Elem(), GoogleCloudRunOpV2EnvVarSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2ResourceRequirementsInput)(nil)).Elem(), GoogleCloudRunOpV2ResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2ResourceRequirementsPtrInput)(nil)).Elem(), GoogleCloudRunOpV2ResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2RevisionScalingInput)(nil)).Elem(), GoogleCloudRunOpV2RevisionScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2RevisionScalingPtrInput)(nil)).Elem(), GoogleCloudRunOpV2RevisionScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2RevisionTemplateInput)(nil)).Elem(), GoogleCloudRunOpV2RevisionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2SecretKeySelectorInput)(nil)).Elem(), GoogleCloudRunOpV2SecretKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2SecretKeySelectorPtrInput)(nil)).Elem(), GoogleCloudRunOpV2SecretKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2SecretVolumeSourceInput)(nil)).Elem(), GoogleCloudRunOpV2SecretVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2SecretVolumeSourcePtrInput)(nil)).Elem(), GoogleCloudRunOpV2SecretVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2TrafficTargetInput)(nil)).Elem(), GoogleCloudRunOpV2TrafficTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2TrafficTargetArrayInput)(nil)).Elem(), GoogleCloudRunOpV2TrafficTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2VersionToPathInput)(nil)).Elem(), GoogleCloudRunOpV2VersionToPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2VersionToPathArrayInput)(nil)).Elem(), GoogleCloudRunOpV2VersionToPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2VolumeInput)(nil)).Elem(), GoogleCloudRunOpV2VolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2VolumeArrayInput)(nil)).Elem(), GoogleCloudRunOpV2VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2VolumeMountInput)(nil)).Elem(), GoogleCloudRunOpV2VolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2VolumeMountArrayInput)(nil)).Elem(), GoogleCloudRunOpV2VolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2VpcAccessInput)(nil)).Elem(), GoogleCloudRunOpV2VpcAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunOpV2VpcAccessPtrInput)(nil)).Elem(), GoogleCloudRunOpV2VpcAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditConfigInput)(nil)).Elem(), GoogleIamV1AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditConfigArrayInput)(nil)).Elem(), GoogleIamV1AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditLogConfigInput)(nil)).Elem(), GoogleIamV1AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditLogConfigArrayInput)(nil)).Elem(), GoogleIamV1AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1BindingInput)(nil)).Elem(), GoogleIamV1BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1BindingArrayInput)(nil)).Elem(), GoogleIamV1BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeExprInput)(nil)).Elem(), GoogleTypeExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeExprPtrInput)(nil)).Elem(), GoogleTypeExprArgs{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2BinaryAuthorizationOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2BinaryAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2BinaryAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2CloudSqlInstanceOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2CloudSqlInstancePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2CloudSqlInstanceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ConditionResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ContainerOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ContainerArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ContainerPortOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ContainerPortArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ContainerPortResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ContainerPortResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ContainerResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2EnvVarOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2EnvVarArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2EnvVarResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2EnvVarResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2EnvVarSourceOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2EnvVarSourcePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2EnvVarSourceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ResourceRequirementsOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2ResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2RevisionScalingOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2RevisionScalingPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2RevisionScalingResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2RevisionTemplateOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2RevisionTemplateResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2SecretKeySelectorOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2SecretKeySelectorPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2SecretKeySelectorResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2SecretVolumeSourceOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2SecretVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2SecretVolumeSourceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2TrafficTargetOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2TrafficTargetArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2TrafficTargetResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2TrafficTargetResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2TrafficTargetStatusResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2TrafficTargetStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VersionToPathOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VersionToPathArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VersionToPathResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VersionToPathResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VolumeOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VolumeArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VolumeMountOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VolumeMountArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VolumeMountResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VolumeMountResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VolumeResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VolumeResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VpcAccessOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VpcAccessPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunOpV2VpcAccessResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleTypeExprOutput{})
	pulumi.RegisterOutputType(GoogleTypeExprPtrOutput{})
	pulumi.RegisterOutputType(GoogleTypeExprResponseOutput{})
}
