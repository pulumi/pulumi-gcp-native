// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Settings for Binary Authorization feature.
type GoogleCloudRunV2BinaryAuthorization struct {
	// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	BreakglassJustification *string `pulumi:"breakglassJustification"`
	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	UseDefault *bool `pulumi:"useDefault"`
}

// GoogleCloudRunV2BinaryAuthorizationInput is an input type that accepts GoogleCloudRunV2BinaryAuthorizationArgs and GoogleCloudRunV2BinaryAuthorizationOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2BinaryAuthorizationInput` via:
//
//	GoogleCloudRunV2BinaryAuthorizationArgs{...}
type GoogleCloudRunV2BinaryAuthorizationInput interface {
	pulumi.Input

	ToGoogleCloudRunV2BinaryAuthorizationOutput() GoogleCloudRunV2BinaryAuthorizationOutput
	ToGoogleCloudRunV2BinaryAuthorizationOutputWithContext(context.Context) GoogleCloudRunV2BinaryAuthorizationOutput
}

// Settings for Binary Authorization feature.
type GoogleCloudRunV2BinaryAuthorizationArgs struct {
	// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	BreakglassJustification pulumi.StringPtrInput `pulumi:"breakglassJustification"`
	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	UseDefault pulumi.BoolPtrInput `pulumi:"useDefault"`
}

func (GoogleCloudRunV2BinaryAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2BinaryAuthorization)(nil)).Elem()
}

func (i GoogleCloudRunV2BinaryAuthorizationArgs) ToGoogleCloudRunV2BinaryAuthorizationOutput() GoogleCloudRunV2BinaryAuthorizationOutput {
	return i.ToGoogleCloudRunV2BinaryAuthorizationOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2BinaryAuthorizationArgs) ToGoogleCloudRunV2BinaryAuthorizationOutputWithContext(ctx context.Context) GoogleCloudRunV2BinaryAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2BinaryAuthorizationOutput)
}

func (i GoogleCloudRunV2BinaryAuthorizationArgs) ToGoogleCloudRunV2BinaryAuthorizationPtrOutput() GoogleCloudRunV2BinaryAuthorizationPtrOutput {
	return i.ToGoogleCloudRunV2BinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2BinaryAuthorizationArgs) ToGoogleCloudRunV2BinaryAuthorizationPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2BinaryAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2BinaryAuthorizationOutput).ToGoogleCloudRunV2BinaryAuthorizationPtrOutputWithContext(ctx)
}

// GoogleCloudRunV2BinaryAuthorizationPtrInput is an input type that accepts GoogleCloudRunV2BinaryAuthorizationArgs, GoogleCloudRunV2BinaryAuthorizationPtr and GoogleCloudRunV2BinaryAuthorizationPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2BinaryAuthorizationPtrInput` via:
//
//	        GoogleCloudRunV2BinaryAuthorizationArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2BinaryAuthorizationPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2BinaryAuthorizationPtrOutput() GoogleCloudRunV2BinaryAuthorizationPtrOutput
	ToGoogleCloudRunV2BinaryAuthorizationPtrOutputWithContext(context.Context) GoogleCloudRunV2BinaryAuthorizationPtrOutput
}

type googleCloudRunV2BinaryAuthorizationPtrType GoogleCloudRunV2BinaryAuthorizationArgs

func GoogleCloudRunV2BinaryAuthorizationPtr(v *GoogleCloudRunV2BinaryAuthorizationArgs) GoogleCloudRunV2BinaryAuthorizationPtrInput {
	return (*googleCloudRunV2BinaryAuthorizationPtrType)(v)
}

func (*googleCloudRunV2BinaryAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2BinaryAuthorization)(nil)).Elem()
}

func (i *googleCloudRunV2BinaryAuthorizationPtrType) ToGoogleCloudRunV2BinaryAuthorizationPtrOutput() GoogleCloudRunV2BinaryAuthorizationPtrOutput {
	return i.ToGoogleCloudRunV2BinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2BinaryAuthorizationPtrType) ToGoogleCloudRunV2BinaryAuthorizationPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2BinaryAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2BinaryAuthorizationPtrOutput)
}

// Settings for Binary Authorization feature.
type GoogleCloudRunV2BinaryAuthorizationOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2BinaryAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2BinaryAuthorization)(nil)).Elem()
}

func (o GoogleCloudRunV2BinaryAuthorizationOutput) ToGoogleCloudRunV2BinaryAuthorizationOutput() GoogleCloudRunV2BinaryAuthorizationOutput {
	return o
}

func (o GoogleCloudRunV2BinaryAuthorizationOutput) ToGoogleCloudRunV2BinaryAuthorizationOutputWithContext(ctx context.Context) GoogleCloudRunV2BinaryAuthorizationOutput {
	return o
}

func (o GoogleCloudRunV2BinaryAuthorizationOutput) ToGoogleCloudRunV2BinaryAuthorizationPtrOutput() GoogleCloudRunV2BinaryAuthorizationPtrOutput {
	return o.ToGoogleCloudRunV2BinaryAuthorizationPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2BinaryAuthorizationOutput) ToGoogleCloudRunV2BinaryAuthorizationPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2BinaryAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2BinaryAuthorization) *GoogleCloudRunV2BinaryAuthorization {
		return &v
	}).(GoogleCloudRunV2BinaryAuthorizationPtrOutput)
}

// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
func (o GoogleCloudRunV2BinaryAuthorizationOutput) BreakglassJustification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2BinaryAuthorization) *string { return v.BreakglassJustification }).(pulumi.StringPtrOutput)
}

// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
func (o GoogleCloudRunV2BinaryAuthorizationOutput) UseDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2BinaryAuthorization) *bool { return v.UseDefault }).(pulumi.BoolPtrOutput)
}

type GoogleCloudRunV2BinaryAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2BinaryAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2BinaryAuthorization)(nil)).Elem()
}

func (o GoogleCloudRunV2BinaryAuthorizationPtrOutput) ToGoogleCloudRunV2BinaryAuthorizationPtrOutput() GoogleCloudRunV2BinaryAuthorizationPtrOutput {
	return o
}

func (o GoogleCloudRunV2BinaryAuthorizationPtrOutput) ToGoogleCloudRunV2BinaryAuthorizationPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2BinaryAuthorizationPtrOutput {
	return o
}

func (o GoogleCloudRunV2BinaryAuthorizationPtrOutput) Elem() GoogleCloudRunV2BinaryAuthorizationOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2BinaryAuthorization) GoogleCloudRunV2BinaryAuthorization {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2BinaryAuthorization
		return ret
	}).(GoogleCloudRunV2BinaryAuthorizationOutput)
}

// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
func (o GoogleCloudRunV2BinaryAuthorizationPtrOutput) BreakglassJustification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2BinaryAuthorization) *string {
		if v == nil {
			return nil
		}
		return v.BreakglassJustification
	}).(pulumi.StringPtrOutput)
}

// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
func (o GoogleCloudRunV2BinaryAuthorizationPtrOutput) UseDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2BinaryAuthorization) *bool {
		if v == nil {
			return nil
		}
		return v.UseDefault
	}).(pulumi.BoolPtrOutput)
}

// Settings for Binary Authorization feature.
type GoogleCloudRunV2BinaryAuthorizationResponse struct {
	// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
	BreakglassJustification string `pulumi:"breakglassJustification"`
	// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
	UseDefault bool `pulumi:"useDefault"`
}

// Settings for Binary Authorization feature.
type GoogleCloudRunV2BinaryAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2BinaryAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2BinaryAuthorizationResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2BinaryAuthorizationResponseOutput) ToGoogleCloudRunV2BinaryAuthorizationResponseOutput() GoogleCloudRunV2BinaryAuthorizationResponseOutput {
	return o
}

func (o GoogleCloudRunV2BinaryAuthorizationResponseOutput) ToGoogleCloudRunV2BinaryAuthorizationResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2BinaryAuthorizationResponseOutput {
	return o
}

// If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
func (o GoogleCloudRunV2BinaryAuthorizationResponseOutput) BreakglassJustification() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2BinaryAuthorizationResponse) string { return v.BreakglassJustification }).(pulumi.StringOutput)
}

// If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.
func (o GoogleCloudRunV2BinaryAuthorizationResponseOutput) UseDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudRunV2BinaryAuthorizationResponse) bool { return v.UseDefault }).(pulumi.BoolOutput)
}

// Represents a specific Cloud SQL instance.
type GoogleCloudRunV2CloudSqlInstance struct {
	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	Instances []string `pulumi:"instances"`
}

// GoogleCloudRunV2CloudSqlInstanceInput is an input type that accepts GoogleCloudRunV2CloudSqlInstanceArgs and GoogleCloudRunV2CloudSqlInstanceOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2CloudSqlInstanceInput` via:
//
//	GoogleCloudRunV2CloudSqlInstanceArgs{...}
type GoogleCloudRunV2CloudSqlInstanceInput interface {
	pulumi.Input

	ToGoogleCloudRunV2CloudSqlInstanceOutput() GoogleCloudRunV2CloudSqlInstanceOutput
	ToGoogleCloudRunV2CloudSqlInstanceOutputWithContext(context.Context) GoogleCloudRunV2CloudSqlInstanceOutput
}

// Represents a specific Cloud SQL instance.
type GoogleCloudRunV2CloudSqlInstanceArgs struct {
	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	Instances pulumi.StringArrayInput `pulumi:"instances"`
}

func (GoogleCloudRunV2CloudSqlInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2CloudSqlInstance)(nil)).Elem()
}

func (i GoogleCloudRunV2CloudSqlInstanceArgs) ToGoogleCloudRunV2CloudSqlInstanceOutput() GoogleCloudRunV2CloudSqlInstanceOutput {
	return i.ToGoogleCloudRunV2CloudSqlInstanceOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2CloudSqlInstanceArgs) ToGoogleCloudRunV2CloudSqlInstanceOutputWithContext(ctx context.Context) GoogleCloudRunV2CloudSqlInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2CloudSqlInstanceOutput)
}

func (i GoogleCloudRunV2CloudSqlInstanceArgs) ToGoogleCloudRunV2CloudSqlInstancePtrOutput() GoogleCloudRunV2CloudSqlInstancePtrOutput {
	return i.ToGoogleCloudRunV2CloudSqlInstancePtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2CloudSqlInstanceArgs) ToGoogleCloudRunV2CloudSqlInstancePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2CloudSqlInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2CloudSqlInstanceOutput).ToGoogleCloudRunV2CloudSqlInstancePtrOutputWithContext(ctx)
}

// GoogleCloudRunV2CloudSqlInstancePtrInput is an input type that accepts GoogleCloudRunV2CloudSqlInstanceArgs, GoogleCloudRunV2CloudSqlInstancePtr and GoogleCloudRunV2CloudSqlInstancePtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2CloudSqlInstancePtrInput` via:
//
//	        GoogleCloudRunV2CloudSqlInstanceArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2CloudSqlInstancePtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2CloudSqlInstancePtrOutput() GoogleCloudRunV2CloudSqlInstancePtrOutput
	ToGoogleCloudRunV2CloudSqlInstancePtrOutputWithContext(context.Context) GoogleCloudRunV2CloudSqlInstancePtrOutput
}

type googleCloudRunV2CloudSqlInstancePtrType GoogleCloudRunV2CloudSqlInstanceArgs

func GoogleCloudRunV2CloudSqlInstancePtr(v *GoogleCloudRunV2CloudSqlInstanceArgs) GoogleCloudRunV2CloudSqlInstancePtrInput {
	return (*googleCloudRunV2CloudSqlInstancePtrType)(v)
}

func (*googleCloudRunV2CloudSqlInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2CloudSqlInstance)(nil)).Elem()
}

func (i *googleCloudRunV2CloudSqlInstancePtrType) ToGoogleCloudRunV2CloudSqlInstancePtrOutput() GoogleCloudRunV2CloudSqlInstancePtrOutput {
	return i.ToGoogleCloudRunV2CloudSqlInstancePtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2CloudSqlInstancePtrType) ToGoogleCloudRunV2CloudSqlInstancePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2CloudSqlInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2CloudSqlInstancePtrOutput)
}

// Represents a specific Cloud SQL instance.
type GoogleCloudRunV2CloudSqlInstanceOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2CloudSqlInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2CloudSqlInstance)(nil)).Elem()
}

func (o GoogleCloudRunV2CloudSqlInstanceOutput) ToGoogleCloudRunV2CloudSqlInstanceOutput() GoogleCloudRunV2CloudSqlInstanceOutput {
	return o
}

func (o GoogleCloudRunV2CloudSqlInstanceOutput) ToGoogleCloudRunV2CloudSqlInstanceOutputWithContext(ctx context.Context) GoogleCloudRunV2CloudSqlInstanceOutput {
	return o
}

func (o GoogleCloudRunV2CloudSqlInstanceOutput) ToGoogleCloudRunV2CloudSqlInstancePtrOutput() GoogleCloudRunV2CloudSqlInstancePtrOutput {
	return o.ToGoogleCloudRunV2CloudSqlInstancePtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2CloudSqlInstanceOutput) ToGoogleCloudRunV2CloudSqlInstancePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2CloudSqlInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2CloudSqlInstance) *GoogleCloudRunV2CloudSqlInstance {
		return &v
	}).(GoogleCloudRunV2CloudSqlInstancePtrOutput)
}

// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
func (o GoogleCloudRunV2CloudSqlInstanceOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2CloudSqlInstance) []string { return v.Instances }).(pulumi.StringArrayOutput)
}

type GoogleCloudRunV2CloudSqlInstancePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2CloudSqlInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2CloudSqlInstance)(nil)).Elem()
}

func (o GoogleCloudRunV2CloudSqlInstancePtrOutput) ToGoogleCloudRunV2CloudSqlInstancePtrOutput() GoogleCloudRunV2CloudSqlInstancePtrOutput {
	return o
}

func (o GoogleCloudRunV2CloudSqlInstancePtrOutput) ToGoogleCloudRunV2CloudSqlInstancePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2CloudSqlInstancePtrOutput {
	return o
}

func (o GoogleCloudRunV2CloudSqlInstancePtrOutput) Elem() GoogleCloudRunV2CloudSqlInstanceOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2CloudSqlInstance) GoogleCloudRunV2CloudSqlInstance {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2CloudSqlInstance
		return ret
	}).(GoogleCloudRunV2CloudSqlInstanceOutput)
}

// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
func (o GoogleCloudRunV2CloudSqlInstancePtrOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2CloudSqlInstance) []string {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(pulumi.StringArrayOutput)
}

// Represents a specific Cloud SQL instance.
type GoogleCloudRunV2CloudSqlInstanceResponse struct {
	// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
	Instances []string `pulumi:"instances"`
}

// Represents a specific Cloud SQL instance.
type GoogleCloudRunV2CloudSqlInstanceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2CloudSqlInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2CloudSqlInstanceResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2CloudSqlInstanceResponseOutput) ToGoogleCloudRunV2CloudSqlInstanceResponseOutput() GoogleCloudRunV2CloudSqlInstanceResponseOutput {
	return o
}

func (o GoogleCloudRunV2CloudSqlInstanceResponseOutput) ToGoogleCloudRunV2CloudSqlInstanceResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2CloudSqlInstanceResponseOutput {
	return o
}

// The Cloud SQL instance connection names, as can be found in https://console.cloud.google.com/sql/instances. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. Format: {project}:{location}:{instance}
func (o GoogleCloudRunV2CloudSqlInstanceResponseOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2CloudSqlInstanceResponse) []string { return v.Instances }).(pulumi.StringArrayOutput)
}

// Defines a status condition for a resource.
type GoogleCloudRunV2ConditionResponse struct {
	// A reason for the execution condition.
	ExecutionReason string `pulumi:"executionReason"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// Human readable message indicating details about the current status.
	Message string `pulumi:"message"`
	// A common (service-level) reason for this condition.
	Reason string `pulumi:"reason"`
	// A reason for the revision condition.
	RevisionReason string `pulumi:"revisionReason"`
	// How to interpret failures of this condition, one of Error, Warning, Info
	Severity string `pulumi:"severity"`
	// State of the condition.
	State string `pulumi:"state"`
	// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
	Type string `pulumi:"type"`
}

// Defines a status condition for a resource.
type GoogleCloudRunV2ConditionResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ConditionResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2ConditionResponseOutput) ToGoogleCloudRunV2ConditionResponseOutput() GoogleCloudRunV2ConditionResponseOutput {
	return o
}

func (o GoogleCloudRunV2ConditionResponseOutput) ToGoogleCloudRunV2ConditionResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2ConditionResponseOutput {
	return o
}

// A reason for the execution condition.
func (o GoogleCloudRunV2ConditionResponseOutput) ExecutionReason() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ConditionResponse) string { return v.ExecutionReason }).(pulumi.StringOutput)
}

// Last time the condition transitioned from one status to another.
func (o GoogleCloudRunV2ConditionResponseOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ConditionResponse) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// Human readable message indicating details about the current status.
func (o GoogleCloudRunV2ConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

// A common (service-level) reason for this condition.
func (o GoogleCloudRunV2ConditionResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ConditionResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// A reason for the revision condition.
func (o GoogleCloudRunV2ConditionResponseOutput) RevisionReason() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ConditionResponse) string { return v.RevisionReason }).(pulumi.StringOutput)
}

// How to interpret failures of this condition, one of Error, Warning, Info
func (o GoogleCloudRunV2ConditionResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ConditionResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// State of the condition.
func (o GoogleCloudRunV2ConditionResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ConditionResponse) string { return v.State }).(pulumi.StringOutput)
}

// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
func (o GoogleCloudRunV2ConditionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ConditionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudRunV2ConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2ConditionResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2ConditionResponseArrayOutput) ToGoogleCloudRunV2ConditionResponseArrayOutput() GoogleCloudRunV2ConditionResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2ConditionResponseArrayOutput) ToGoogleCloudRunV2ConditionResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2ConditionResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2ConditionResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2ConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2ConditionResponse {
		return vs[0].([]GoogleCloudRunV2ConditionResponse)[vs[1].(int)]
	}).(GoogleCloudRunV2ConditionResponseOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type GoogleCloudRunV2Container struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container.
	Env []GoogleCloudRunV2EnvVar `pulumi:"env"`
	// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
	Image string `pulumi:"image"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe *GoogleCloudRunV2Probe `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL.
	Name *string `pulumi:"name"`
	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports []GoogleCloudRunV2ContainerPort `pulumi:"ports"`
	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *GoogleCloudRunV2ResourceRequirements `pulumi:"resources"`
	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe *GoogleCloudRunV2Probe `pulumi:"startupProbe"`
	// Volume to mount into the container's filesystem.
	VolumeMounts []GoogleCloudRunV2VolumeMount `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir *string `pulumi:"workingDir"`
}

// GoogleCloudRunV2ContainerInput is an input type that accepts GoogleCloudRunV2ContainerArgs and GoogleCloudRunV2ContainerOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2ContainerInput` via:
//
//	GoogleCloudRunV2ContainerArgs{...}
type GoogleCloudRunV2ContainerInput interface {
	pulumi.Input

	ToGoogleCloudRunV2ContainerOutput() GoogleCloudRunV2ContainerOutput
	ToGoogleCloudRunV2ContainerOutputWithContext(context.Context) GoogleCloudRunV2ContainerOutput
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type GoogleCloudRunV2ContainerArgs struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command pulumi.StringArrayInput `pulumi:"command"`
	// List of environment variables to set in the container.
	Env GoogleCloudRunV2EnvVarArrayInput `pulumi:"env"`
	// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
	Image pulumi.StringInput `pulumi:"image"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe GoogleCloudRunV2ProbePtrInput `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports GoogleCloudRunV2ContainerPortArrayInput `pulumi:"ports"`
	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources GoogleCloudRunV2ResourceRequirementsPtrInput `pulumi:"resources"`
	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe GoogleCloudRunV2ProbePtrInput `pulumi:"startupProbe"`
	// Volume to mount into the container's filesystem.
	VolumeMounts GoogleCloudRunV2VolumeMountArrayInput `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (GoogleCloudRunV2ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2Container)(nil)).Elem()
}

func (i GoogleCloudRunV2ContainerArgs) ToGoogleCloudRunV2ContainerOutput() GoogleCloudRunV2ContainerOutput {
	return i.ToGoogleCloudRunV2ContainerOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2ContainerArgs) ToGoogleCloudRunV2ContainerOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ContainerOutput)
}

// GoogleCloudRunV2ContainerArrayInput is an input type that accepts GoogleCloudRunV2ContainerArray and GoogleCloudRunV2ContainerArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2ContainerArrayInput` via:
//
//	GoogleCloudRunV2ContainerArray{ GoogleCloudRunV2ContainerArgs{...} }
type GoogleCloudRunV2ContainerArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunV2ContainerArrayOutput() GoogleCloudRunV2ContainerArrayOutput
	ToGoogleCloudRunV2ContainerArrayOutputWithContext(context.Context) GoogleCloudRunV2ContainerArrayOutput
}

type GoogleCloudRunV2ContainerArray []GoogleCloudRunV2ContainerInput

func (GoogleCloudRunV2ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2Container)(nil)).Elem()
}

func (i GoogleCloudRunV2ContainerArray) ToGoogleCloudRunV2ContainerArrayOutput() GoogleCloudRunV2ContainerArrayOutput {
	return i.ToGoogleCloudRunV2ContainerArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2ContainerArray) ToGoogleCloudRunV2ContainerArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ContainerArrayOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type GoogleCloudRunV2ContainerOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2Container)(nil)).Elem()
}

func (o GoogleCloudRunV2ContainerOutput) ToGoogleCloudRunV2ContainerOutput() GoogleCloudRunV2ContainerOutput {
	return o
}

func (o GoogleCloudRunV2ContainerOutput) ToGoogleCloudRunV2ContainerOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerOutput {
	return o
}

// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o GoogleCloudRunV2ContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o GoogleCloudRunV2ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container.
func (o GoogleCloudRunV2ContainerOutput) Env() GoogleCloudRunV2EnvVarArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) []GoogleCloudRunV2EnvVar { return v.Env }).(GoogleCloudRunV2EnvVarArrayOutput)
}

// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
func (o GoogleCloudRunV2ContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) string { return v.Image }).(pulumi.StringOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GoogleCloudRunV2ContainerOutput) LivenessProbe() GoogleCloudRunV2ProbePtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) *GoogleCloudRunV2Probe { return v.LivenessProbe }).(GoogleCloudRunV2ProbePtrOutput)
}

// Name of the container specified as a DNS_LABEL.
func (o GoogleCloudRunV2ContainerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
func (o GoogleCloudRunV2ContainerOutput) Ports() GoogleCloudRunV2ContainerPortArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) []GoogleCloudRunV2ContainerPort { return v.Ports }).(GoogleCloudRunV2ContainerPortArrayOutput)
}

// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o GoogleCloudRunV2ContainerOutput) Resources() GoogleCloudRunV2ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) *GoogleCloudRunV2ResourceRequirements { return v.Resources }).(GoogleCloudRunV2ResourceRequirementsPtrOutput)
}

// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GoogleCloudRunV2ContainerOutput) StartupProbe() GoogleCloudRunV2ProbePtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) *GoogleCloudRunV2Probe { return v.StartupProbe }).(GoogleCloudRunV2ProbePtrOutput)
}

// Volume to mount into the container's filesystem.
func (o GoogleCloudRunV2ContainerOutput) VolumeMounts() GoogleCloudRunV2VolumeMountArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) []GoogleCloudRunV2VolumeMount { return v.VolumeMounts }).(GoogleCloudRunV2VolumeMountArrayOutput)
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
func (o GoogleCloudRunV2ContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Container) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type GoogleCloudRunV2ContainerArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2Container)(nil)).Elem()
}

func (o GoogleCloudRunV2ContainerArrayOutput) ToGoogleCloudRunV2ContainerArrayOutput() GoogleCloudRunV2ContainerArrayOutput {
	return o
}

func (o GoogleCloudRunV2ContainerArrayOutput) ToGoogleCloudRunV2ContainerArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerArrayOutput {
	return o
}

func (o GoogleCloudRunV2ContainerArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2Container {
		return vs[0].([]GoogleCloudRunV2Container)[vs[1].(int)]
	}).(GoogleCloudRunV2ContainerOutput)
}

// ContainerPort represents a network port in a single container.
type GoogleCloudRunV2ContainerPort struct {
	// Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
	ContainerPort *int `pulumi:"containerPort"`
	// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name *string `pulumi:"name"`
}

// GoogleCloudRunV2ContainerPortInput is an input type that accepts GoogleCloudRunV2ContainerPortArgs and GoogleCloudRunV2ContainerPortOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2ContainerPortInput` via:
//
//	GoogleCloudRunV2ContainerPortArgs{...}
type GoogleCloudRunV2ContainerPortInput interface {
	pulumi.Input

	ToGoogleCloudRunV2ContainerPortOutput() GoogleCloudRunV2ContainerPortOutput
	ToGoogleCloudRunV2ContainerPortOutputWithContext(context.Context) GoogleCloudRunV2ContainerPortOutput
}

// ContainerPort represents a network port in a single container.
type GoogleCloudRunV2ContainerPortArgs struct {
	// Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GoogleCloudRunV2ContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ContainerPort)(nil)).Elem()
}

func (i GoogleCloudRunV2ContainerPortArgs) ToGoogleCloudRunV2ContainerPortOutput() GoogleCloudRunV2ContainerPortOutput {
	return i.ToGoogleCloudRunV2ContainerPortOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2ContainerPortArgs) ToGoogleCloudRunV2ContainerPortOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ContainerPortOutput)
}

// GoogleCloudRunV2ContainerPortArrayInput is an input type that accepts GoogleCloudRunV2ContainerPortArray and GoogleCloudRunV2ContainerPortArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2ContainerPortArrayInput` via:
//
//	GoogleCloudRunV2ContainerPortArray{ GoogleCloudRunV2ContainerPortArgs{...} }
type GoogleCloudRunV2ContainerPortArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunV2ContainerPortArrayOutput() GoogleCloudRunV2ContainerPortArrayOutput
	ToGoogleCloudRunV2ContainerPortArrayOutputWithContext(context.Context) GoogleCloudRunV2ContainerPortArrayOutput
}

type GoogleCloudRunV2ContainerPortArray []GoogleCloudRunV2ContainerPortInput

func (GoogleCloudRunV2ContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2ContainerPort)(nil)).Elem()
}

func (i GoogleCloudRunV2ContainerPortArray) ToGoogleCloudRunV2ContainerPortArrayOutput() GoogleCloudRunV2ContainerPortArrayOutput {
	return i.ToGoogleCloudRunV2ContainerPortArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2ContainerPortArray) ToGoogleCloudRunV2ContainerPortArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ContainerPortArrayOutput)
}

// ContainerPort represents a network port in a single container.
type GoogleCloudRunV2ContainerPortOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ContainerPort)(nil)).Elem()
}

func (o GoogleCloudRunV2ContainerPortOutput) ToGoogleCloudRunV2ContainerPortOutput() GoogleCloudRunV2ContainerPortOutput {
	return o
}

func (o GoogleCloudRunV2ContainerPortOutput) ToGoogleCloudRunV2ContainerPortOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerPortOutput {
	return o
}

// Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
func (o GoogleCloudRunV2ContainerPortOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerPort) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
func (o GoogleCloudRunV2ContainerPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GoogleCloudRunV2ContainerPortArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2ContainerPort)(nil)).Elem()
}

func (o GoogleCloudRunV2ContainerPortArrayOutput) ToGoogleCloudRunV2ContainerPortArrayOutput() GoogleCloudRunV2ContainerPortArrayOutput {
	return o
}

func (o GoogleCloudRunV2ContainerPortArrayOutput) ToGoogleCloudRunV2ContainerPortArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerPortArrayOutput {
	return o
}

func (o GoogleCloudRunV2ContainerPortArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2ContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2ContainerPort {
		return vs[0].([]GoogleCloudRunV2ContainerPort)[vs[1].(int)]
	}).(GoogleCloudRunV2ContainerPortOutput)
}

// ContainerPort represents a network port in a single container.
type GoogleCloudRunV2ContainerPortResponse struct {
	// Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
	ContainerPort int `pulumi:"containerPort"`
	// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name string `pulumi:"name"`
}

// ContainerPort represents a network port in a single container.
type GoogleCloudRunV2ContainerPortResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ContainerPortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ContainerPortResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2ContainerPortResponseOutput) ToGoogleCloudRunV2ContainerPortResponseOutput() GoogleCloudRunV2ContainerPortResponseOutput {
	return o
}

func (o GoogleCloudRunV2ContainerPortResponseOutput) ToGoogleCloudRunV2ContainerPortResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerPortResponseOutput {
	return o
}

// Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536.
func (o GoogleCloudRunV2ContainerPortResponseOutput) ContainerPort() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerPortResponse) int { return v.ContainerPort }).(pulumi.IntOutput)
}

// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
func (o GoogleCloudRunV2ContainerPortResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerPortResponse) string { return v.Name }).(pulumi.StringOutput)
}

type GoogleCloudRunV2ContainerPortResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ContainerPortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2ContainerPortResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2ContainerPortResponseArrayOutput) ToGoogleCloudRunV2ContainerPortResponseArrayOutput() GoogleCloudRunV2ContainerPortResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2ContainerPortResponseArrayOutput) ToGoogleCloudRunV2ContainerPortResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerPortResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2ContainerPortResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2ContainerPortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2ContainerPortResponse {
		return vs[0].([]GoogleCloudRunV2ContainerPortResponse)[vs[1].(int)]
	}).(GoogleCloudRunV2ContainerPortResponseOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type GoogleCloudRunV2ContainerResponse struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container.
	Env []GoogleCloudRunV2EnvVarResponse `pulumi:"env"`
	// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
	Image string `pulumi:"image"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe GoogleCloudRunV2ProbeResponse `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL.
	Name string `pulumi:"name"`
	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports []GoogleCloudRunV2ContainerPortResponse `pulumi:"ports"`
	// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources GoogleCloudRunV2ResourceRequirementsResponse `pulumi:"resources"`
	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe GoogleCloudRunV2ProbeResponse `pulumi:"startupProbe"`
	// Volume to mount into the container's filesystem.
	VolumeMounts []GoogleCloudRunV2VolumeMountResponse `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir string `pulumi:"workingDir"`
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type GoogleCloudRunV2ContainerResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ContainerResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2ContainerResponseOutput) ToGoogleCloudRunV2ContainerResponseOutput() GoogleCloudRunV2ContainerResponseOutput {
	return o
}

func (o GoogleCloudRunV2ContainerResponseOutput) ToGoogleCloudRunV2ContainerResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerResponseOutput {
	return o
}

// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o GoogleCloudRunV2ContainerResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o GoogleCloudRunV2ContainerResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container.
func (o GoogleCloudRunV2ContainerResponseOutput) Env() GoogleCloudRunV2EnvVarResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) []GoogleCloudRunV2EnvVarResponse { return v.Env }).(GoogleCloudRunV2EnvVarResponseArrayOutput)
}

// URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images
func (o GoogleCloudRunV2ContainerResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) string { return v.Image }).(pulumi.StringOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GoogleCloudRunV2ContainerResponseOutput) LivenessProbe() GoogleCloudRunV2ProbeResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) GoogleCloudRunV2ProbeResponse { return v.LivenessProbe }).(GoogleCloudRunV2ProbeResponseOutput)
}

// Name of the container specified as a DNS_LABEL.
func (o GoogleCloudRunV2ContainerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
func (o GoogleCloudRunV2ContainerResponseOutput) Ports() GoogleCloudRunV2ContainerPortResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) []GoogleCloudRunV2ContainerPortResponse { return v.Ports }).(GoogleCloudRunV2ContainerPortResponseArrayOutput)
}

// Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o GoogleCloudRunV2ContainerResponseOutput) Resources() GoogleCloudRunV2ResourceRequirementsResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) GoogleCloudRunV2ResourceRequirementsResponse {
		return v.Resources
	}).(GoogleCloudRunV2ResourceRequirementsResponseOutput)
}

// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GoogleCloudRunV2ContainerResponseOutput) StartupProbe() GoogleCloudRunV2ProbeResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) GoogleCloudRunV2ProbeResponse { return v.StartupProbe }).(GoogleCloudRunV2ProbeResponseOutput)
}

// Volume to mount into the container's filesystem.
func (o GoogleCloudRunV2ContainerResponseOutput) VolumeMounts() GoogleCloudRunV2VolumeMountResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) []GoogleCloudRunV2VolumeMountResponse { return v.VolumeMounts }).(GoogleCloudRunV2VolumeMountResponseArrayOutput)
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
func (o GoogleCloudRunV2ContainerResponseOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ContainerResponse) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type GoogleCloudRunV2ContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2ContainerResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2ContainerResponseArrayOutput) ToGoogleCloudRunV2ContainerResponseArrayOutput() GoogleCloudRunV2ContainerResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2ContainerResponseArrayOutput) ToGoogleCloudRunV2ContainerResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2ContainerResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2ContainerResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2ContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2ContainerResponse {
		return vs[0].([]GoogleCloudRunV2ContainerResponse)[vs[1].(int)]
	}).(GoogleCloudRunV2ContainerResponseOutput)
}

// EnvVar represents an environment variable present in a Container.
type GoogleCloudRunV2EnvVar struct {
	// Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
	Value *string `pulumi:"value"`
	// Source for the environment variable's value.
	ValueSource *GoogleCloudRunV2EnvVarSource `pulumi:"valueSource"`
}

// GoogleCloudRunV2EnvVarInput is an input type that accepts GoogleCloudRunV2EnvVarArgs and GoogleCloudRunV2EnvVarOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2EnvVarInput` via:
//
//	GoogleCloudRunV2EnvVarArgs{...}
type GoogleCloudRunV2EnvVarInput interface {
	pulumi.Input

	ToGoogleCloudRunV2EnvVarOutput() GoogleCloudRunV2EnvVarOutput
	ToGoogleCloudRunV2EnvVarOutputWithContext(context.Context) GoogleCloudRunV2EnvVarOutput
}

// EnvVar represents an environment variable present in a Container.
type GoogleCloudRunV2EnvVarArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value.
	ValueSource GoogleCloudRunV2EnvVarSourcePtrInput `pulumi:"valueSource"`
}

func (GoogleCloudRunV2EnvVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2EnvVar)(nil)).Elem()
}

func (i GoogleCloudRunV2EnvVarArgs) ToGoogleCloudRunV2EnvVarOutput() GoogleCloudRunV2EnvVarOutput {
	return i.ToGoogleCloudRunV2EnvVarOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2EnvVarArgs) ToGoogleCloudRunV2EnvVarOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2EnvVarOutput)
}

// GoogleCloudRunV2EnvVarArrayInput is an input type that accepts GoogleCloudRunV2EnvVarArray and GoogleCloudRunV2EnvVarArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2EnvVarArrayInput` via:
//
//	GoogleCloudRunV2EnvVarArray{ GoogleCloudRunV2EnvVarArgs{...} }
type GoogleCloudRunV2EnvVarArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunV2EnvVarArrayOutput() GoogleCloudRunV2EnvVarArrayOutput
	ToGoogleCloudRunV2EnvVarArrayOutputWithContext(context.Context) GoogleCloudRunV2EnvVarArrayOutput
}

type GoogleCloudRunV2EnvVarArray []GoogleCloudRunV2EnvVarInput

func (GoogleCloudRunV2EnvVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2EnvVar)(nil)).Elem()
}

func (i GoogleCloudRunV2EnvVarArray) ToGoogleCloudRunV2EnvVarArrayOutput() GoogleCloudRunV2EnvVarArrayOutput {
	return i.ToGoogleCloudRunV2EnvVarArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2EnvVarArray) ToGoogleCloudRunV2EnvVarArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2EnvVarArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type GoogleCloudRunV2EnvVarOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2EnvVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2EnvVar)(nil)).Elem()
}

func (o GoogleCloudRunV2EnvVarOutput) ToGoogleCloudRunV2EnvVarOutput() GoogleCloudRunV2EnvVarOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarOutput) ToGoogleCloudRunV2EnvVarOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
func (o GoogleCloudRunV2EnvVarOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2EnvVar) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
func (o GoogleCloudRunV2EnvVarOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2EnvVar) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value.
func (o GoogleCloudRunV2EnvVarOutput) ValueSource() GoogleCloudRunV2EnvVarSourcePtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2EnvVar) *GoogleCloudRunV2EnvVarSource { return v.ValueSource }).(GoogleCloudRunV2EnvVarSourcePtrOutput)
}

type GoogleCloudRunV2EnvVarArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2EnvVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2EnvVar)(nil)).Elem()
}

func (o GoogleCloudRunV2EnvVarArrayOutput) ToGoogleCloudRunV2EnvVarArrayOutput() GoogleCloudRunV2EnvVarArrayOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarArrayOutput) ToGoogleCloudRunV2EnvVarArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarArrayOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2EnvVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2EnvVar {
		return vs[0].([]GoogleCloudRunV2EnvVar)[vs[1].(int)]
	}).(GoogleCloudRunV2EnvVarOutput)
}

// EnvVar represents an environment variable present in a Container.
type GoogleCloudRunV2EnvVarResponse struct {
	// Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
	Value string `pulumi:"value"`
	// Source for the environment variable's value.
	ValueSource GoogleCloudRunV2EnvVarSourceResponse `pulumi:"valueSource"`
}

// EnvVar represents an environment variable present in a Container.
type GoogleCloudRunV2EnvVarResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2EnvVarResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2EnvVarResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2EnvVarResponseOutput) ToGoogleCloudRunV2EnvVarResponseOutput() GoogleCloudRunV2EnvVarResponseOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarResponseOutput) ToGoogleCloudRunV2EnvVarResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarResponseOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.
func (o GoogleCloudRunV2EnvVarResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2EnvVarResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.
func (o GoogleCloudRunV2EnvVarResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2EnvVarResponse) string { return v.Value }).(pulumi.StringOutput)
}

// Source for the environment variable's value.
func (o GoogleCloudRunV2EnvVarResponseOutput) ValueSource() GoogleCloudRunV2EnvVarSourceResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2EnvVarResponse) GoogleCloudRunV2EnvVarSourceResponse { return v.ValueSource }).(GoogleCloudRunV2EnvVarSourceResponseOutput)
}

type GoogleCloudRunV2EnvVarResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2EnvVarResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2EnvVarResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2EnvVarResponseArrayOutput) ToGoogleCloudRunV2EnvVarResponseArrayOutput() GoogleCloudRunV2EnvVarResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarResponseArrayOutput) ToGoogleCloudRunV2EnvVarResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2EnvVarResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2EnvVarResponse {
		return vs[0].([]GoogleCloudRunV2EnvVarResponse)[vs[1].(int)]
	}).(GoogleCloudRunV2EnvVarResponseOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunV2EnvVarSource struct {
	// Selects a secret and a specific version from Cloud Secret Manager.
	SecretKeyRef *GoogleCloudRunV2SecretKeySelector `pulumi:"secretKeyRef"`
}

// GoogleCloudRunV2EnvVarSourceInput is an input type that accepts GoogleCloudRunV2EnvVarSourceArgs and GoogleCloudRunV2EnvVarSourceOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2EnvVarSourceInput` via:
//
//	GoogleCloudRunV2EnvVarSourceArgs{...}
type GoogleCloudRunV2EnvVarSourceInput interface {
	pulumi.Input

	ToGoogleCloudRunV2EnvVarSourceOutput() GoogleCloudRunV2EnvVarSourceOutput
	ToGoogleCloudRunV2EnvVarSourceOutputWithContext(context.Context) GoogleCloudRunV2EnvVarSourceOutput
}

// EnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunV2EnvVarSourceArgs struct {
	// Selects a secret and a specific version from Cloud Secret Manager.
	SecretKeyRef GoogleCloudRunV2SecretKeySelectorPtrInput `pulumi:"secretKeyRef"`
}

func (GoogleCloudRunV2EnvVarSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2EnvVarSource)(nil)).Elem()
}

func (i GoogleCloudRunV2EnvVarSourceArgs) ToGoogleCloudRunV2EnvVarSourceOutput() GoogleCloudRunV2EnvVarSourceOutput {
	return i.ToGoogleCloudRunV2EnvVarSourceOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2EnvVarSourceArgs) ToGoogleCloudRunV2EnvVarSourceOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2EnvVarSourceOutput)
}

func (i GoogleCloudRunV2EnvVarSourceArgs) ToGoogleCloudRunV2EnvVarSourcePtrOutput() GoogleCloudRunV2EnvVarSourcePtrOutput {
	return i.ToGoogleCloudRunV2EnvVarSourcePtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2EnvVarSourceArgs) ToGoogleCloudRunV2EnvVarSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2EnvVarSourceOutput).ToGoogleCloudRunV2EnvVarSourcePtrOutputWithContext(ctx)
}

// GoogleCloudRunV2EnvVarSourcePtrInput is an input type that accepts GoogleCloudRunV2EnvVarSourceArgs, GoogleCloudRunV2EnvVarSourcePtr and GoogleCloudRunV2EnvVarSourcePtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2EnvVarSourcePtrInput` via:
//
//	        GoogleCloudRunV2EnvVarSourceArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2EnvVarSourcePtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2EnvVarSourcePtrOutput() GoogleCloudRunV2EnvVarSourcePtrOutput
	ToGoogleCloudRunV2EnvVarSourcePtrOutputWithContext(context.Context) GoogleCloudRunV2EnvVarSourcePtrOutput
}

type googleCloudRunV2EnvVarSourcePtrType GoogleCloudRunV2EnvVarSourceArgs

func GoogleCloudRunV2EnvVarSourcePtr(v *GoogleCloudRunV2EnvVarSourceArgs) GoogleCloudRunV2EnvVarSourcePtrInput {
	return (*googleCloudRunV2EnvVarSourcePtrType)(v)
}

func (*googleCloudRunV2EnvVarSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2EnvVarSource)(nil)).Elem()
}

func (i *googleCloudRunV2EnvVarSourcePtrType) ToGoogleCloudRunV2EnvVarSourcePtrOutput() GoogleCloudRunV2EnvVarSourcePtrOutput {
	return i.ToGoogleCloudRunV2EnvVarSourcePtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2EnvVarSourcePtrType) ToGoogleCloudRunV2EnvVarSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2EnvVarSourcePtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunV2EnvVarSourceOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2EnvVarSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2EnvVarSource)(nil)).Elem()
}

func (o GoogleCloudRunV2EnvVarSourceOutput) ToGoogleCloudRunV2EnvVarSourceOutput() GoogleCloudRunV2EnvVarSourceOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarSourceOutput) ToGoogleCloudRunV2EnvVarSourceOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarSourceOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarSourceOutput) ToGoogleCloudRunV2EnvVarSourcePtrOutput() GoogleCloudRunV2EnvVarSourcePtrOutput {
	return o.ToGoogleCloudRunV2EnvVarSourcePtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2EnvVarSourceOutput) ToGoogleCloudRunV2EnvVarSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2EnvVarSource) *GoogleCloudRunV2EnvVarSource {
		return &v
	}).(GoogleCloudRunV2EnvVarSourcePtrOutput)
}

// Selects a secret and a specific version from Cloud Secret Manager.
func (o GoogleCloudRunV2EnvVarSourceOutput) SecretKeyRef() GoogleCloudRunV2SecretKeySelectorPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2EnvVarSource) *GoogleCloudRunV2SecretKeySelector { return v.SecretKeyRef }).(GoogleCloudRunV2SecretKeySelectorPtrOutput)
}

type GoogleCloudRunV2EnvVarSourcePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2EnvVarSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2EnvVarSource)(nil)).Elem()
}

func (o GoogleCloudRunV2EnvVarSourcePtrOutput) ToGoogleCloudRunV2EnvVarSourcePtrOutput() GoogleCloudRunV2EnvVarSourcePtrOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarSourcePtrOutput) ToGoogleCloudRunV2EnvVarSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarSourcePtrOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarSourcePtrOutput) Elem() GoogleCloudRunV2EnvVarSourceOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2EnvVarSource) GoogleCloudRunV2EnvVarSource {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2EnvVarSource
		return ret
	}).(GoogleCloudRunV2EnvVarSourceOutput)
}

// Selects a secret and a specific version from Cloud Secret Manager.
func (o GoogleCloudRunV2EnvVarSourcePtrOutput) SecretKeyRef() GoogleCloudRunV2SecretKeySelectorPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2EnvVarSource) *GoogleCloudRunV2SecretKeySelector {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(GoogleCloudRunV2SecretKeySelectorPtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunV2EnvVarSourceResponse struct {
	// Selects a secret and a specific version from Cloud Secret Manager.
	SecretKeyRef GoogleCloudRunV2SecretKeySelectorResponse `pulumi:"secretKeyRef"`
}

// EnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunV2EnvVarSourceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2EnvVarSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2EnvVarSourceResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2EnvVarSourceResponseOutput) ToGoogleCloudRunV2EnvVarSourceResponseOutput() GoogleCloudRunV2EnvVarSourceResponseOutput {
	return o
}

func (o GoogleCloudRunV2EnvVarSourceResponseOutput) ToGoogleCloudRunV2EnvVarSourceResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2EnvVarSourceResponseOutput {
	return o
}

// Selects a secret and a specific version from Cloud Secret Manager.
func (o GoogleCloudRunV2EnvVarSourceResponseOutput) SecretKeyRef() GoogleCloudRunV2SecretKeySelectorResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2EnvVarSourceResponse) GoogleCloudRunV2SecretKeySelectorResponse {
		return v.SecretKeyRef
	}).(GoogleCloudRunV2SecretKeySelectorResponseOutput)
}

// Reference to an Execution. Use /Executions.GetExecution with the given name to get full execution including the latest status.
type GoogleCloudRunV2ExecutionReferenceResponse struct {
	// Creation timestamp of the execution.
	CompletionTime string `pulumi:"completionTime"`
	// Creation timestamp of the execution.
	CreateTime string `pulumi:"createTime"`
	// Name of the execution.
	Name string `pulumi:"name"`
}

// Reference to an Execution. Use /Executions.GetExecution with the given name to get full execution including the latest status.
type GoogleCloudRunV2ExecutionReferenceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ExecutionReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ExecutionReferenceResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2ExecutionReferenceResponseOutput) ToGoogleCloudRunV2ExecutionReferenceResponseOutput() GoogleCloudRunV2ExecutionReferenceResponseOutput {
	return o
}

func (o GoogleCloudRunV2ExecutionReferenceResponseOutput) ToGoogleCloudRunV2ExecutionReferenceResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2ExecutionReferenceResponseOutput {
	return o
}

// Creation timestamp of the execution.
func (o GoogleCloudRunV2ExecutionReferenceResponseOutput) CompletionTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionReferenceResponse) string { return v.CompletionTime }).(pulumi.StringOutput)
}

// Creation timestamp of the execution.
func (o GoogleCloudRunV2ExecutionReferenceResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionReferenceResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Name of the execution.
func (o GoogleCloudRunV2ExecutionReferenceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionReferenceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// ExecutionTemplate describes the data an execution should have when created from a template.
type GoogleCloudRunV2ExecutionTemplate struct {
	// KRM-style annotations for the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// KRM-style labels for the resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
	Parallelism *int `pulumi:"parallelism"`
	// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	TaskCount *int `pulumi:"taskCount"`
	// Describes the task(s) that will be created when executing an execution.
	Template GoogleCloudRunV2TaskTemplate `pulumi:"template"`
}

// GoogleCloudRunV2ExecutionTemplateInput is an input type that accepts GoogleCloudRunV2ExecutionTemplateArgs and GoogleCloudRunV2ExecutionTemplateOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2ExecutionTemplateInput` via:
//
//	GoogleCloudRunV2ExecutionTemplateArgs{...}
type GoogleCloudRunV2ExecutionTemplateInput interface {
	pulumi.Input

	ToGoogleCloudRunV2ExecutionTemplateOutput() GoogleCloudRunV2ExecutionTemplateOutput
	ToGoogleCloudRunV2ExecutionTemplateOutputWithContext(context.Context) GoogleCloudRunV2ExecutionTemplateOutput
}

// ExecutionTemplate describes the data an execution should have when created from a template.
type GoogleCloudRunV2ExecutionTemplateArgs struct {
	// KRM-style annotations for the resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// KRM-style labels for the resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
	// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	TaskCount pulumi.IntPtrInput `pulumi:"taskCount"`
	// Describes the task(s) that will be created when executing an execution.
	Template GoogleCloudRunV2TaskTemplateInput `pulumi:"template"`
}

func (GoogleCloudRunV2ExecutionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ExecutionTemplate)(nil)).Elem()
}

func (i GoogleCloudRunV2ExecutionTemplateArgs) ToGoogleCloudRunV2ExecutionTemplateOutput() GoogleCloudRunV2ExecutionTemplateOutput {
	return i.ToGoogleCloudRunV2ExecutionTemplateOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2ExecutionTemplateArgs) ToGoogleCloudRunV2ExecutionTemplateOutputWithContext(ctx context.Context) GoogleCloudRunV2ExecutionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ExecutionTemplateOutput)
}

// ExecutionTemplate describes the data an execution should have when created from a template.
type GoogleCloudRunV2ExecutionTemplateOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ExecutionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ExecutionTemplate)(nil)).Elem()
}

func (o GoogleCloudRunV2ExecutionTemplateOutput) ToGoogleCloudRunV2ExecutionTemplateOutput() GoogleCloudRunV2ExecutionTemplateOutput {
	return o
}

func (o GoogleCloudRunV2ExecutionTemplateOutput) ToGoogleCloudRunV2ExecutionTemplateOutputWithContext(ctx context.Context) GoogleCloudRunV2ExecutionTemplateOutput {
	return o
}

// KRM-style annotations for the resource.
func (o GoogleCloudRunV2ExecutionTemplateOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionTemplate) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// KRM-style labels for the resource.
func (o GoogleCloudRunV2ExecutionTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionTemplate) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
func (o GoogleCloudRunV2ExecutionTemplateOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionTemplate) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o GoogleCloudRunV2ExecutionTemplateOutput) TaskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionTemplate) *int { return v.TaskCount }).(pulumi.IntPtrOutput)
}

// Describes the task(s) that will be created when executing an execution.
func (o GoogleCloudRunV2ExecutionTemplateOutput) Template() GoogleCloudRunV2TaskTemplateOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionTemplate) GoogleCloudRunV2TaskTemplate { return v.Template }).(GoogleCloudRunV2TaskTemplateOutput)
}

// ExecutionTemplate describes the data an execution should have when created from a template.
type GoogleCloudRunV2ExecutionTemplateResponse struct {
	// KRM-style annotations for the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// KRM-style labels for the resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
	Parallelism int `pulumi:"parallelism"`
	// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	TaskCount int `pulumi:"taskCount"`
	// Describes the task(s) that will be created when executing an execution.
	Template GoogleCloudRunV2TaskTemplateResponse `pulumi:"template"`
}

// ExecutionTemplate describes the data an execution should have when created from a template.
type GoogleCloudRunV2ExecutionTemplateResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ExecutionTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ExecutionTemplateResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2ExecutionTemplateResponseOutput) ToGoogleCloudRunV2ExecutionTemplateResponseOutput() GoogleCloudRunV2ExecutionTemplateResponseOutput {
	return o
}

func (o GoogleCloudRunV2ExecutionTemplateResponseOutput) ToGoogleCloudRunV2ExecutionTemplateResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2ExecutionTemplateResponseOutput {
	return o
}

// KRM-style annotations for the resource.
func (o GoogleCloudRunV2ExecutionTemplateResponseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionTemplateResponse) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// KRM-style labels for the resource.
func (o GoogleCloudRunV2ExecutionTemplateResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionTemplateResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.
func (o GoogleCloudRunV2ExecutionTemplateResponseOutput) Parallelism() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionTemplateResponse) int { return v.Parallelism }).(pulumi.IntOutput)
}

// Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
func (o GoogleCloudRunV2ExecutionTemplateResponseOutput) TaskCount() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionTemplateResponse) int { return v.TaskCount }).(pulumi.IntOutput)
}

// Describes the task(s) that will be created when executing an execution.
func (o GoogleCloudRunV2ExecutionTemplateResponseOutput) Template() GoogleCloudRunV2TaskTemplateResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ExecutionTemplateResponse) GoogleCloudRunV2TaskTemplateResponse {
		return v.Template
	}).(GoogleCloudRunV2TaskTemplateResponseOutput)
}

// GRPCAction describes an action involving a GRPC port.
type GoogleCloudRunV2GRPCAction struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port *int `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
	Service *string `pulumi:"service"`
}

// GoogleCloudRunV2GRPCActionInput is an input type that accepts GoogleCloudRunV2GRPCActionArgs and GoogleCloudRunV2GRPCActionOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2GRPCActionInput` via:
//
//	GoogleCloudRunV2GRPCActionArgs{...}
type GoogleCloudRunV2GRPCActionInput interface {
	pulumi.Input

	ToGoogleCloudRunV2GRPCActionOutput() GoogleCloudRunV2GRPCActionOutput
	ToGoogleCloudRunV2GRPCActionOutputWithContext(context.Context) GoogleCloudRunV2GRPCActionOutput
}

// GRPCAction describes an action involving a GRPC port.
type GoogleCloudRunV2GRPCActionArgs struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (GoogleCloudRunV2GRPCActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2GRPCAction)(nil)).Elem()
}

func (i GoogleCloudRunV2GRPCActionArgs) ToGoogleCloudRunV2GRPCActionOutput() GoogleCloudRunV2GRPCActionOutput {
	return i.ToGoogleCloudRunV2GRPCActionOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2GRPCActionArgs) ToGoogleCloudRunV2GRPCActionOutputWithContext(ctx context.Context) GoogleCloudRunV2GRPCActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2GRPCActionOutput)
}

func (i GoogleCloudRunV2GRPCActionArgs) ToGoogleCloudRunV2GRPCActionPtrOutput() GoogleCloudRunV2GRPCActionPtrOutput {
	return i.ToGoogleCloudRunV2GRPCActionPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2GRPCActionArgs) ToGoogleCloudRunV2GRPCActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2GRPCActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2GRPCActionOutput).ToGoogleCloudRunV2GRPCActionPtrOutputWithContext(ctx)
}

// GoogleCloudRunV2GRPCActionPtrInput is an input type that accepts GoogleCloudRunV2GRPCActionArgs, GoogleCloudRunV2GRPCActionPtr and GoogleCloudRunV2GRPCActionPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2GRPCActionPtrInput` via:
//
//	        GoogleCloudRunV2GRPCActionArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2GRPCActionPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2GRPCActionPtrOutput() GoogleCloudRunV2GRPCActionPtrOutput
	ToGoogleCloudRunV2GRPCActionPtrOutputWithContext(context.Context) GoogleCloudRunV2GRPCActionPtrOutput
}

type googleCloudRunV2GRPCActionPtrType GoogleCloudRunV2GRPCActionArgs

func GoogleCloudRunV2GRPCActionPtr(v *GoogleCloudRunV2GRPCActionArgs) GoogleCloudRunV2GRPCActionPtrInput {
	return (*googleCloudRunV2GRPCActionPtrType)(v)
}

func (*googleCloudRunV2GRPCActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2GRPCAction)(nil)).Elem()
}

func (i *googleCloudRunV2GRPCActionPtrType) ToGoogleCloudRunV2GRPCActionPtrOutput() GoogleCloudRunV2GRPCActionPtrOutput {
	return i.ToGoogleCloudRunV2GRPCActionPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2GRPCActionPtrType) ToGoogleCloudRunV2GRPCActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2GRPCActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2GRPCActionPtrOutput)
}

// GRPCAction describes an action involving a GRPC port.
type GoogleCloudRunV2GRPCActionOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2GRPCActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2GRPCAction)(nil)).Elem()
}

func (o GoogleCloudRunV2GRPCActionOutput) ToGoogleCloudRunV2GRPCActionOutput() GoogleCloudRunV2GRPCActionOutput {
	return o
}

func (o GoogleCloudRunV2GRPCActionOutput) ToGoogleCloudRunV2GRPCActionOutputWithContext(ctx context.Context) GoogleCloudRunV2GRPCActionOutput {
	return o
}

func (o GoogleCloudRunV2GRPCActionOutput) ToGoogleCloudRunV2GRPCActionPtrOutput() GoogleCloudRunV2GRPCActionPtrOutput {
	return o.ToGoogleCloudRunV2GRPCActionPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2GRPCActionOutput) ToGoogleCloudRunV2GRPCActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2GRPCActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2GRPCAction) *GoogleCloudRunV2GRPCAction {
		return &v
	}).(GoogleCloudRunV2GRPCActionPtrOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o GoogleCloudRunV2GRPCActionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2GRPCAction) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
func (o GoogleCloudRunV2GRPCActionOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2GRPCAction) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type GoogleCloudRunV2GRPCActionPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2GRPCActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2GRPCAction)(nil)).Elem()
}

func (o GoogleCloudRunV2GRPCActionPtrOutput) ToGoogleCloudRunV2GRPCActionPtrOutput() GoogleCloudRunV2GRPCActionPtrOutput {
	return o
}

func (o GoogleCloudRunV2GRPCActionPtrOutput) ToGoogleCloudRunV2GRPCActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2GRPCActionPtrOutput {
	return o
}

func (o GoogleCloudRunV2GRPCActionPtrOutput) Elem() GoogleCloudRunV2GRPCActionOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2GRPCAction) GoogleCloudRunV2GRPCAction {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2GRPCAction
		return ret
	}).(GoogleCloudRunV2GRPCActionOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o GoogleCloudRunV2GRPCActionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2GRPCAction) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
func (o GoogleCloudRunV2GRPCActionPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2GRPCAction) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// GRPCAction describes an action involving a GRPC port.
type GoogleCloudRunV2GRPCActionResponse struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port int `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
	Service string `pulumi:"service"`
}

// GRPCAction describes an action involving a GRPC port.
type GoogleCloudRunV2GRPCActionResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2GRPCActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2GRPCActionResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2GRPCActionResponseOutput) ToGoogleCloudRunV2GRPCActionResponseOutput() GoogleCloudRunV2GRPCActionResponseOutput {
	return o
}

func (o GoogleCloudRunV2GRPCActionResponseOutput) ToGoogleCloudRunV2GRPCActionResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2GRPCActionResponseOutput {
	return o
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o GoogleCloudRunV2GRPCActionResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2GRPCActionResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
func (o GoogleCloudRunV2GRPCActionResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2GRPCActionResponse) string { return v.Service }).(pulumi.StringOutput)
}

// HTTPGetAction describes an action based on HTTP Get requests.
type GoogleCloudRunV2HTTPGetAction struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []GoogleCloudRunV2HTTPHeader `pulumi:"httpHeaders"`
	// Path to access on the HTTP server. Defaults to '/'.
	Path *string `pulumi:"path"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// GoogleCloudRunV2HTTPGetActionInput is an input type that accepts GoogleCloudRunV2HTTPGetActionArgs and GoogleCloudRunV2HTTPGetActionOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2HTTPGetActionInput` via:
//
//	GoogleCloudRunV2HTTPGetActionArgs{...}
type GoogleCloudRunV2HTTPGetActionInput interface {
	pulumi.Input

	ToGoogleCloudRunV2HTTPGetActionOutput() GoogleCloudRunV2HTTPGetActionOutput
	ToGoogleCloudRunV2HTTPGetActionOutputWithContext(context.Context) GoogleCloudRunV2HTTPGetActionOutput
}

// HTTPGetAction describes an action based on HTTP Get requests.
type GoogleCloudRunV2HTTPGetActionArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders GoogleCloudRunV2HTTPHeaderArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server. Defaults to '/'.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (GoogleCloudRunV2HTTPGetActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2HTTPGetAction)(nil)).Elem()
}

func (i GoogleCloudRunV2HTTPGetActionArgs) ToGoogleCloudRunV2HTTPGetActionOutput() GoogleCloudRunV2HTTPGetActionOutput {
	return i.ToGoogleCloudRunV2HTTPGetActionOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2HTTPGetActionArgs) ToGoogleCloudRunV2HTTPGetActionOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPGetActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2HTTPGetActionOutput)
}

func (i GoogleCloudRunV2HTTPGetActionArgs) ToGoogleCloudRunV2HTTPGetActionPtrOutput() GoogleCloudRunV2HTTPGetActionPtrOutput {
	return i.ToGoogleCloudRunV2HTTPGetActionPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2HTTPGetActionArgs) ToGoogleCloudRunV2HTTPGetActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPGetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2HTTPGetActionOutput).ToGoogleCloudRunV2HTTPGetActionPtrOutputWithContext(ctx)
}

// GoogleCloudRunV2HTTPGetActionPtrInput is an input type that accepts GoogleCloudRunV2HTTPGetActionArgs, GoogleCloudRunV2HTTPGetActionPtr and GoogleCloudRunV2HTTPGetActionPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2HTTPGetActionPtrInput` via:
//
//	        GoogleCloudRunV2HTTPGetActionArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2HTTPGetActionPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2HTTPGetActionPtrOutput() GoogleCloudRunV2HTTPGetActionPtrOutput
	ToGoogleCloudRunV2HTTPGetActionPtrOutputWithContext(context.Context) GoogleCloudRunV2HTTPGetActionPtrOutput
}

type googleCloudRunV2HTTPGetActionPtrType GoogleCloudRunV2HTTPGetActionArgs

func GoogleCloudRunV2HTTPGetActionPtr(v *GoogleCloudRunV2HTTPGetActionArgs) GoogleCloudRunV2HTTPGetActionPtrInput {
	return (*googleCloudRunV2HTTPGetActionPtrType)(v)
}

func (*googleCloudRunV2HTTPGetActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2HTTPGetAction)(nil)).Elem()
}

func (i *googleCloudRunV2HTTPGetActionPtrType) ToGoogleCloudRunV2HTTPGetActionPtrOutput() GoogleCloudRunV2HTTPGetActionPtrOutput {
	return i.ToGoogleCloudRunV2HTTPGetActionPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2HTTPGetActionPtrType) ToGoogleCloudRunV2HTTPGetActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPGetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2HTTPGetActionPtrOutput)
}

// HTTPGetAction describes an action based on HTTP Get requests.
type GoogleCloudRunV2HTTPGetActionOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2HTTPGetActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2HTTPGetAction)(nil)).Elem()
}

func (o GoogleCloudRunV2HTTPGetActionOutput) ToGoogleCloudRunV2HTTPGetActionOutput() GoogleCloudRunV2HTTPGetActionOutput {
	return o
}

func (o GoogleCloudRunV2HTTPGetActionOutput) ToGoogleCloudRunV2HTTPGetActionOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPGetActionOutput {
	return o
}

func (o GoogleCloudRunV2HTTPGetActionOutput) ToGoogleCloudRunV2HTTPGetActionPtrOutput() GoogleCloudRunV2HTTPGetActionPtrOutput {
	return o.ToGoogleCloudRunV2HTTPGetActionPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2HTTPGetActionOutput) ToGoogleCloudRunV2HTTPGetActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPGetActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2HTTPGetAction) *GoogleCloudRunV2HTTPGetAction {
		return &v
	}).(GoogleCloudRunV2HTTPGetActionPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o GoogleCloudRunV2HTTPGetActionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPGetAction) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o GoogleCloudRunV2HTTPGetActionOutput) HttpHeaders() GoogleCloudRunV2HTTPHeaderArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPGetAction) []GoogleCloudRunV2HTTPHeader { return v.HttpHeaders }).(GoogleCloudRunV2HTTPHeaderArrayOutput)
}

// Path to access on the HTTP server. Defaults to '/'.
func (o GoogleCloudRunV2HTTPGetActionOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPGetAction) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o GoogleCloudRunV2HTTPGetActionOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPGetAction) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type GoogleCloudRunV2HTTPGetActionPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2HTTPGetActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2HTTPGetAction)(nil)).Elem()
}

func (o GoogleCloudRunV2HTTPGetActionPtrOutput) ToGoogleCloudRunV2HTTPGetActionPtrOutput() GoogleCloudRunV2HTTPGetActionPtrOutput {
	return o
}

func (o GoogleCloudRunV2HTTPGetActionPtrOutput) ToGoogleCloudRunV2HTTPGetActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPGetActionPtrOutput {
	return o
}

func (o GoogleCloudRunV2HTTPGetActionPtrOutput) Elem() GoogleCloudRunV2HTTPGetActionOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2HTTPGetAction) GoogleCloudRunV2HTTPGetAction {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2HTTPGetAction
		return ret
	}).(GoogleCloudRunV2HTTPGetActionOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o GoogleCloudRunV2HTTPGetActionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o GoogleCloudRunV2HTTPGetActionPtrOutput) HttpHeaders() GoogleCloudRunV2HTTPHeaderArrayOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2HTTPGetAction) []GoogleCloudRunV2HTTPHeader {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(GoogleCloudRunV2HTTPHeaderArrayOutput)
}

// Path to access on the HTTP server. Defaults to '/'.
func (o GoogleCloudRunV2HTTPGetActionPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o GoogleCloudRunV2HTTPGetActionPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPGetAction describes an action based on HTTP Get requests.
type GoogleCloudRunV2HTTPGetActionResponse struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []GoogleCloudRunV2HTTPHeaderResponse `pulumi:"httpHeaders"`
	// Path to access on the HTTP server. Defaults to '/'.
	Path string `pulumi:"path"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme string `pulumi:"scheme"`
}

// HTTPGetAction describes an action based on HTTP Get requests.
type GoogleCloudRunV2HTTPGetActionResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2HTTPGetActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2HTTPGetActionResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2HTTPGetActionResponseOutput) ToGoogleCloudRunV2HTTPGetActionResponseOutput() GoogleCloudRunV2HTTPGetActionResponseOutput {
	return o
}

func (o GoogleCloudRunV2HTTPGetActionResponseOutput) ToGoogleCloudRunV2HTTPGetActionResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPGetActionResponseOutput {
	return o
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o GoogleCloudRunV2HTTPGetActionResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPGetActionResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o GoogleCloudRunV2HTTPGetActionResponseOutput) HttpHeaders() GoogleCloudRunV2HTTPHeaderResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPGetActionResponse) []GoogleCloudRunV2HTTPHeaderResponse {
		return v.HttpHeaders
	}).(GoogleCloudRunV2HTTPHeaderResponseArrayOutput)
}

// Path to access on the HTTP server. Defaults to '/'.
func (o GoogleCloudRunV2HTTPGetActionResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPGetActionResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o GoogleCloudRunV2HTTPGetActionResponseOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPGetActionResponse) string { return v.Scheme }).(pulumi.StringOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type GoogleCloudRunV2HTTPHeader struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// GoogleCloudRunV2HTTPHeaderInput is an input type that accepts GoogleCloudRunV2HTTPHeaderArgs and GoogleCloudRunV2HTTPHeaderOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2HTTPHeaderInput` via:
//
//	GoogleCloudRunV2HTTPHeaderArgs{...}
type GoogleCloudRunV2HTTPHeaderInput interface {
	pulumi.Input

	ToGoogleCloudRunV2HTTPHeaderOutput() GoogleCloudRunV2HTTPHeaderOutput
	ToGoogleCloudRunV2HTTPHeaderOutputWithContext(context.Context) GoogleCloudRunV2HTTPHeaderOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type GoogleCloudRunV2HTTPHeaderArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GoogleCloudRunV2HTTPHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2HTTPHeader)(nil)).Elem()
}

func (i GoogleCloudRunV2HTTPHeaderArgs) ToGoogleCloudRunV2HTTPHeaderOutput() GoogleCloudRunV2HTTPHeaderOutput {
	return i.ToGoogleCloudRunV2HTTPHeaderOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2HTTPHeaderArgs) ToGoogleCloudRunV2HTTPHeaderOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2HTTPHeaderOutput)
}

// GoogleCloudRunV2HTTPHeaderArrayInput is an input type that accepts GoogleCloudRunV2HTTPHeaderArray and GoogleCloudRunV2HTTPHeaderArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2HTTPHeaderArrayInput` via:
//
//	GoogleCloudRunV2HTTPHeaderArray{ GoogleCloudRunV2HTTPHeaderArgs{...} }
type GoogleCloudRunV2HTTPHeaderArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunV2HTTPHeaderArrayOutput() GoogleCloudRunV2HTTPHeaderArrayOutput
	ToGoogleCloudRunV2HTTPHeaderArrayOutputWithContext(context.Context) GoogleCloudRunV2HTTPHeaderArrayOutput
}

type GoogleCloudRunV2HTTPHeaderArray []GoogleCloudRunV2HTTPHeaderInput

func (GoogleCloudRunV2HTTPHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2HTTPHeader)(nil)).Elem()
}

func (i GoogleCloudRunV2HTTPHeaderArray) ToGoogleCloudRunV2HTTPHeaderArrayOutput() GoogleCloudRunV2HTTPHeaderArrayOutput {
	return i.ToGoogleCloudRunV2HTTPHeaderArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2HTTPHeaderArray) ToGoogleCloudRunV2HTTPHeaderArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2HTTPHeaderArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type GoogleCloudRunV2HTTPHeaderOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2HTTPHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2HTTPHeader)(nil)).Elem()
}

func (o GoogleCloudRunV2HTTPHeaderOutput) ToGoogleCloudRunV2HTTPHeaderOutput() GoogleCloudRunV2HTTPHeaderOutput {
	return o
}

func (o GoogleCloudRunV2HTTPHeaderOutput) ToGoogleCloudRunV2HTTPHeaderOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPHeaderOutput {
	return o
}

// The header field name
func (o GoogleCloudRunV2HTTPHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPHeader) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o GoogleCloudRunV2HTTPHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPHeader) string { return v.Value }).(pulumi.StringOutput)
}

type GoogleCloudRunV2HTTPHeaderArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2HTTPHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2HTTPHeader)(nil)).Elem()
}

func (o GoogleCloudRunV2HTTPHeaderArrayOutput) ToGoogleCloudRunV2HTTPHeaderArrayOutput() GoogleCloudRunV2HTTPHeaderArrayOutput {
	return o
}

func (o GoogleCloudRunV2HTTPHeaderArrayOutput) ToGoogleCloudRunV2HTTPHeaderArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPHeaderArrayOutput {
	return o
}

func (o GoogleCloudRunV2HTTPHeaderArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2HTTPHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2HTTPHeader {
		return vs[0].([]GoogleCloudRunV2HTTPHeader)[vs[1].(int)]
	}).(GoogleCloudRunV2HTTPHeaderOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type GoogleCloudRunV2HTTPHeaderResponse struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// HTTPHeader describes a custom header to be used in HTTP probes
type GoogleCloudRunV2HTTPHeaderResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2HTTPHeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2HTTPHeaderResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2HTTPHeaderResponseOutput) ToGoogleCloudRunV2HTTPHeaderResponseOutput() GoogleCloudRunV2HTTPHeaderResponseOutput {
	return o
}

func (o GoogleCloudRunV2HTTPHeaderResponseOutput) ToGoogleCloudRunV2HTTPHeaderResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPHeaderResponseOutput {
	return o
}

// The header field name
func (o GoogleCloudRunV2HTTPHeaderResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPHeaderResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o GoogleCloudRunV2HTTPHeaderResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2HTTPHeaderResponse) string { return v.Value }).(pulumi.StringOutput)
}

type GoogleCloudRunV2HTTPHeaderResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2HTTPHeaderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2HTTPHeaderResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2HTTPHeaderResponseArrayOutput) ToGoogleCloudRunV2HTTPHeaderResponseArrayOutput() GoogleCloudRunV2HTTPHeaderResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2HTTPHeaderResponseArrayOutput) ToGoogleCloudRunV2HTTPHeaderResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2HTTPHeaderResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2HTTPHeaderResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2HTTPHeaderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2HTTPHeaderResponse {
		return vs[0].([]GoogleCloudRunV2HTTPHeaderResponse)[vs[1].(int)]
	}).(GoogleCloudRunV2HTTPHeaderResponseOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type GoogleCloudRunV2Probe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// GRPC specifies an action involving a GRPC port. Exactly one of HTTPGet, TCPSocket, or GRPC must be specified.
	Grpc *GoogleCloudRunV2GRPCAction `pulumi:"grpc"`
	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified.
	HttpGet *GoogleCloudRunV2HTTPGetAction `pulumi:"httpGet"`
	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified. TCP hooks not yet supported
	TcpSocket *GoogleCloudRunV2TCPSocketAction `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// GoogleCloudRunV2ProbeInput is an input type that accepts GoogleCloudRunV2ProbeArgs and GoogleCloudRunV2ProbeOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2ProbeInput` via:
//
//	GoogleCloudRunV2ProbeArgs{...}
type GoogleCloudRunV2ProbeInput interface {
	pulumi.Input

	ToGoogleCloudRunV2ProbeOutput() GoogleCloudRunV2ProbeOutput
	ToGoogleCloudRunV2ProbeOutputWithContext(context.Context) GoogleCloudRunV2ProbeOutput
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type GoogleCloudRunV2ProbeArgs struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// GRPC specifies an action involving a GRPC port. Exactly one of HTTPGet, TCPSocket, or GRPC must be specified.
	Grpc GoogleCloudRunV2GRPCActionPtrInput `pulumi:"grpc"`
	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified.
	HttpGet GoogleCloudRunV2HTTPGetActionPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified. TCP hooks not yet supported
	TcpSocket GoogleCloudRunV2TCPSocketActionPtrInput `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (GoogleCloudRunV2ProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2Probe)(nil)).Elem()
}

func (i GoogleCloudRunV2ProbeArgs) ToGoogleCloudRunV2ProbeOutput() GoogleCloudRunV2ProbeOutput {
	return i.ToGoogleCloudRunV2ProbeOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2ProbeArgs) ToGoogleCloudRunV2ProbeOutputWithContext(ctx context.Context) GoogleCloudRunV2ProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ProbeOutput)
}

func (i GoogleCloudRunV2ProbeArgs) ToGoogleCloudRunV2ProbePtrOutput() GoogleCloudRunV2ProbePtrOutput {
	return i.ToGoogleCloudRunV2ProbePtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2ProbeArgs) ToGoogleCloudRunV2ProbePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2ProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ProbeOutput).ToGoogleCloudRunV2ProbePtrOutputWithContext(ctx)
}

// GoogleCloudRunV2ProbePtrInput is an input type that accepts GoogleCloudRunV2ProbeArgs, GoogleCloudRunV2ProbePtr and GoogleCloudRunV2ProbePtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2ProbePtrInput` via:
//
//	        GoogleCloudRunV2ProbeArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2ProbePtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2ProbePtrOutput() GoogleCloudRunV2ProbePtrOutput
	ToGoogleCloudRunV2ProbePtrOutputWithContext(context.Context) GoogleCloudRunV2ProbePtrOutput
}

type googleCloudRunV2ProbePtrType GoogleCloudRunV2ProbeArgs

func GoogleCloudRunV2ProbePtr(v *GoogleCloudRunV2ProbeArgs) GoogleCloudRunV2ProbePtrInput {
	return (*googleCloudRunV2ProbePtrType)(v)
}

func (*googleCloudRunV2ProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2Probe)(nil)).Elem()
}

func (i *googleCloudRunV2ProbePtrType) ToGoogleCloudRunV2ProbePtrOutput() GoogleCloudRunV2ProbePtrOutput {
	return i.ToGoogleCloudRunV2ProbePtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2ProbePtrType) ToGoogleCloudRunV2ProbePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2ProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ProbePtrOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type GoogleCloudRunV2ProbeOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2Probe)(nil)).Elem()
}

func (o GoogleCloudRunV2ProbeOutput) ToGoogleCloudRunV2ProbeOutput() GoogleCloudRunV2ProbeOutput {
	return o
}

func (o GoogleCloudRunV2ProbeOutput) ToGoogleCloudRunV2ProbeOutputWithContext(ctx context.Context) GoogleCloudRunV2ProbeOutput {
	return o
}

func (o GoogleCloudRunV2ProbeOutput) ToGoogleCloudRunV2ProbePtrOutput() GoogleCloudRunV2ProbePtrOutput {
	return o.ToGoogleCloudRunV2ProbePtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2ProbeOutput) ToGoogleCloudRunV2ProbePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2ProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2Probe) *GoogleCloudRunV2Probe {
		return &v
	}).(GoogleCloudRunV2ProbePtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o GoogleCloudRunV2ProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Probe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// GRPC specifies an action involving a GRPC port. Exactly one of HTTPGet, TCPSocket, or GRPC must be specified.
func (o GoogleCloudRunV2ProbeOutput) Grpc() GoogleCloudRunV2GRPCActionPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Probe) *GoogleCloudRunV2GRPCAction { return v.Grpc }).(GoogleCloudRunV2GRPCActionPtrOutput)
}

// HTTPGet specifies the http request to perform. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified.
func (o GoogleCloudRunV2ProbeOutput) HttpGet() GoogleCloudRunV2HTTPGetActionPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Probe) *GoogleCloudRunV2HTTPGetAction { return v.HttpGet }).(GoogleCloudRunV2HTTPGetActionPtrOutput)
}

// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GoogleCloudRunV2ProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Probe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
func (o GoogleCloudRunV2ProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Probe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified. TCP hooks not yet supported
func (o GoogleCloudRunV2ProbeOutput) TcpSocket() GoogleCloudRunV2TCPSocketActionPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Probe) *GoogleCloudRunV2TCPSocketAction { return v.TcpSocket }).(GoogleCloudRunV2TCPSocketActionPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GoogleCloudRunV2ProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Probe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type GoogleCloudRunV2ProbePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2Probe)(nil)).Elem()
}

func (o GoogleCloudRunV2ProbePtrOutput) ToGoogleCloudRunV2ProbePtrOutput() GoogleCloudRunV2ProbePtrOutput {
	return o
}

func (o GoogleCloudRunV2ProbePtrOutput) ToGoogleCloudRunV2ProbePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2ProbePtrOutput {
	return o
}

func (o GoogleCloudRunV2ProbePtrOutput) Elem() GoogleCloudRunV2ProbeOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2Probe) GoogleCloudRunV2Probe {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2Probe
		return ret
	}).(GoogleCloudRunV2ProbeOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o GoogleCloudRunV2ProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2Probe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// GRPC specifies an action involving a GRPC port. Exactly one of HTTPGet, TCPSocket, or GRPC must be specified.
func (o GoogleCloudRunV2ProbePtrOutput) Grpc() GoogleCloudRunV2GRPCActionPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2Probe) *GoogleCloudRunV2GRPCAction {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(GoogleCloudRunV2GRPCActionPtrOutput)
}

// HTTPGet specifies the http request to perform. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified.
func (o GoogleCloudRunV2ProbePtrOutput) HttpGet() GoogleCloudRunV2HTTPGetActionPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2Probe) *GoogleCloudRunV2HTTPGetAction {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(GoogleCloudRunV2HTTPGetActionPtrOutput)
}

// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GoogleCloudRunV2ProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2Probe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
func (o GoogleCloudRunV2ProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2Probe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified. TCP hooks not yet supported
func (o GoogleCloudRunV2ProbePtrOutput) TcpSocket() GoogleCloudRunV2TCPSocketActionPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2Probe) *GoogleCloudRunV2TCPSocketAction {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(GoogleCloudRunV2TCPSocketActionPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GoogleCloudRunV2ProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2Probe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type GoogleCloudRunV2ProbeResponse struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold int `pulumi:"failureThreshold"`
	// GRPC specifies an action involving a GRPC port. Exactly one of HTTPGet, TCPSocket, or GRPC must be specified.
	Grpc GoogleCloudRunV2GRPCActionResponse `pulumi:"grpc"`
	// HTTPGet specifies the http request to perform. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified.
	HttpGet GoogleCloudRunV2HTTPGetActionResponse `pulumi:"httpGet"`
	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
	PeriodSeconds int `pulumi:"periodSeconds"`
	// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified. TCP hooks not yet supported
	TcpSocket GoogleCloudRunV2TCPSocketActionResponse `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type GoogleCloudRunV2ProbeResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ProbeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ProbeResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2ProbeResponseOutput) ToGoogleCloudRunV2ProbeResponseOutput() GoogleCloudRunV2ProbeResponseOutput {
	return o
}

func (o GoogleCloudRunV2ProbeResponseOutput) ToGoogleCloudRunV2ProbeResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2ProbeResponseOutput {
	return o
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o GoogleCloudRunV2ProbeResponseOutput) FailureThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ProbeResponse) int { return v.FailureThreshold }).(pulumi.IntOutput)
}

// GRPC specifies an action involving a GRPC port. Exactly one of HTTPGet, TCPSocket, or GRPC must be specified.
func (o GoogleCloudRunV2ProbeResponseOutput) Grpc() GoogleCloudRunV2GRPCActionResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ProbeResponse) GoogleCloudRunV2GRPCActionResponse { return v.Grpc }).(GoogleCloudRunV2GRPCActionResponseOutput)
}

// HTTPGet specifies the http request to perform. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified.
func (o GoogleCloudRunV2ProbeResponseOutput) HttpGet() GoogleCloudRunV2HTTPGetActionResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ProbeResponse) GoogleCloudRunV2HTTPGetActionResponse { return v.HttpGet }).(GoogleCloudRunV2HTTPGetActionResponseOutput)
}

// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GoogleCloudRunV2ProbeResponseOutput) InitialDelaySeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ProbeResponse) int { return v.InitialDelaySeconds }).(pulumi.IntOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
func (o GoogleCloudRunV2ProbeResponseOutput) PeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ProbeResponse) int { return v.PeriodSeconds }).(pulumi.IntOutput)
}

// TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet, TCPSocket, or gRPC must be specified. TCP hooks not yet supported
func (o GoogleCloudRunV2ProbeResponseOutput) TcpSocket() GoogleCloudRunV2TCPSocketActionResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ProbeResponse) GoogleCloudRunV2TCPSocketActionResponse { return v.TcpSocket }).(GoogleCloudRunV2TCPSocketActionResponseOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GoogleCloudRunV2ProbeResponseOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ProbeResponse) int { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

// ResourceRequirements describes the compute resource requirements.
type GoogleCloudRunV2ResourceRequirements struct {
	// Determines whether CPU should be throttled or not outside of requests.
	CpuIdle *bool `pulumi:"cpuIdle"`
	// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits map[string]string `pulumi:"limits"`
}

// GoogleCloudRunV2ResourceRequirementsInput is an input type that accepts GoogleCloudRunV2ResourceRequirementsArgs and GoogleCloudRunV2ResourceRequirementsOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2ResourceRequirementsInput` via:
//
//	GoogleCloudRunV2ResourceRequirementsArgs{...}
type GoogleCloudRunV2ResourceRequirementsInput interface {
	pulumi.Input

	ToGoogleCloudRunV2ResourceRequirementsOutput() GoogleCloudRunV2ResourceRequirementsOutput
	ToGoogleCloudRunV2ResourceRequirementsOutputWithContext(context.Context) GoogleCloudRunV2ResourceRequirementsOutput
}

// ResourceRequirements describes the compute resource requirements.
type GoogleCloudRunV2ResourceRequirementsArgs struct {
	// Determines whether CPU should be throttled or not outside of requests.
	CpuIdle pulumi.BoolPtrInput `pulumi:"cpuIdle"`
	// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits pulumi.StringMapInput `pulumi:"limits"`
}

func (GoogleCloudRunV2ResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ResourceRequirements)(nil)).Elem()
}

func (i GoogleCloudRunV2ResourceRequirementsArgs) ToGoogleCloudRunV2ResourceRequirementsOutput() GoogleCloudRunV2ResourceRequirementsOutput {
	return i.ToGoogleCloudRunV2ResourceRequirementsOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2ResourceRequirementsArgs) ToGoogleCloudRunV2ResourceRequirementsOutputWithContext(ctx context.Context) GoogleCloudRunV2ResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ResourceRequirementsOutput)
}

func (i GoogleCloudRunV2ResourceRequirementsArgs) ToGoogleCloudRunV2ResourceRequirementsPtrOutput() GoogleCloudRunV2ResourceRequirementsPtrOutput {
	return i.ToGoogleCloudRunV2ResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2ResourceRequirementsArgs) ToGoogleCloudRunV2ResourceRequirementsPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2ResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ResourceRequirementsOutput).ToGoogleCloudRunV2ResourceRequirementsPtrOutputWithContext(ctx)
}

// GoogleCloudRunV2ResourceRequirementsPtrInput is an input type that accepts GoogleCloudRunV2ResourceRequirementsArgs, GoogleCloudRunV2ResourceRequirementsPtr and GoogleCloudRunV2ResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2ResourceRequirementsPtrInput` via:
//
//	        GoogleCloudRunV2ResourceRequirementsArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2ResourceRequirementsPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2ResourceRequirementsPtrOutput() GoogleCloudRunV2ResourceRequirementsPtrOutput
	ToGoogleCloudRunV2ResourceRequirementsPtrOutputWithContext(context.Context) GoogleCloudRunV2ResourceRequirementsPtrOutput
}

type googleCloudRunV2ResourceRequirementsPtrType GoogleCloudRunV2ResourceRequirementsArgs

func GoogleCloudRunV2ResourceRequirementsPtr(v *GoogleCloudRunV2ResourceRequirementsArgs) GoogleCloudRunV2ResourceRequirementsPtrInput {
	return (*googleCloudRunV2ResourceRequirementsPtrType)(v)
}

func (*googleCloudRunV2ResourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2ResourceRequirements)(nil)).Elem()
}

func (i *googleCloudRunV2ResourceRequirementsPtrType) ToGoogleCloudRunV2ResourceRequirementsPtrOutput() GoogleCloudRunV2ResourceRequirementsPtrOutput {
	return i.ToGoogleCloudRunV2ResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2ResourceRequirementsPtrType) ToGoogleCloudRunV2ResourceRequirementsPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2ResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2ResourceRequirementsPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type GoogleCloudRunV2ResourceRequirementsOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ResourceRequirements)(nil)).Elem()
}

func (o GoogleCloudRunV2ResourceRequirementsOutput) ToGoogleCloudRunV2ResourceRequirementsOutput() GoogleCloudRunV2ResourceRequirementsOutput {
	return o
}

func (o GoogleCloudRunV2ResourceRequirementsOutput) ToGoogleCloudRunV2ResourceRequirementsOutputWithContext(ctx context.Context) GoogleCloudRunV2ResourceRequirementsOutput {
	return o
}

func (o GoogleCloudRunV2ResourceRequirementsOutput) ToGoogleCloudRunV2ResourceRequirementsPtrOutput() GoogleCloudRunV2ResourceRequirementsPtrOutput {
	return o.ToGoogleCloudRunV2ResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2ResourceRequirementsOutput) ToGoogleCloudRunV2ResourceRequirementsPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2ResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2ResourceRequirements) *GoogleCloudRunV2ResourceRequirements {
		return &v
	}).(GoogleCloudRunV2ResourceRequirementsPtrOutput)
}

// Determines whether CPU should be throttled or not outside of requests.
func (o GoogleCloudRunV2ResourceRequirementsOutput) CpuIdle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ResourceRequirements) *bool { return v.CpuIdle }).(pulumi.BoolPtrOutput)
}

// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o GoogleCloudRunV2ResourceRequirementsOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ResourceRequirements) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

type GoogleCloudRunV2ResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2ResourceRequirements)(nil)).Elem()
}

func (o GoogleCloudRunV2ResourceRequirementsPtrOutput) ToGoogleCloudRunV2ResourceRequirementsPtrOutput() GoogleCloudRunV2ResourceRequirementsPtrOutput {
	return o
}

func (o GoogleCloudRunV2ResourceRequirementsPtrOutput) ToGoogleCloudRunV2ResourceRequirementsPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2ResourceRequirementsPtrOutput {
	return o
}

func (o GoogleCloudRunV2ResourceRequirementsPtrOutput) Elem() GoogleCloudRunV2ResourceRequirementsOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2ResourceRequirements) GoogleCloudRunV2ResourceRequirements {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2ResourceRequirements
		return ret
	}).(GoogleCloudRunV2ResourceRequirementsOutput)
}

// Determines whether CPU should be throttled or not outside of requests.
func (o GoogleCloudRunV2ResourceRequirementsPtrOutput) CpuIdle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2ResourceRequirements) *bool {
		if v == nil {
			return nil
		}
		return v.CpuIdle
	}).(pulumi.BoolPtrOutput)
}

// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o GoogleCloudRunV2ResourceRequirementsPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2ResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// ResourceRequirements describes the compute resource requirements.
type GoogleCloudRunV2ResourceRequirementsResponse struct {
	// Determines whether CPU should be throttled or not outside of requests.
	CpuIdle bool `pulumi:"cpuIdle"`
	// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits map[string]string `pulumi:"limits"`
}

// ResourceRequirements describes the compute resource requirements.
type GoogleCloudRunV2ResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2ResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2ResourceRequirementsResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2ResourceRequirementsResponseOutput) ToGoogleCloudRunV2ResourceRequirementsResponseOutput() GoogleCloudRunV2ResourceRequirementsResponseOutput {
	return o
}

func (o GoogleCloudRunV2ResourceRequirementsResponseOutput) ToGoogleCloudRunV2ResourceRequirementsResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2ResourceRequirementsResponseOutput {
	return o
}

// Determines whether CPU should be throttled or not outside of requests.
func (o GoogleCloudRunV2ResourceRequirementsResponseOutput) CpuIdle() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ResourceRequirementsResponse) bool { return v.CpuIdle }).(pulumi.BoolOutput)
}

// Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o GoogleCloudRunV2ResourceRequirementsResponseOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunV2ResourceRequirementsResponse) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Settings for revision-level scaling settings.
type GoogleCloudRunV2RevisionScaling struct {
	// Maximum number of serving instances that this resource should have.
	MaxInstanceCount *int `pulumi:"maxInstanceCount"`
	// Minimum number of serving instances that this resource should have.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
}

// GoogleCloudRunV2RevisionScalingInput is an input type that accepts GoogleCloudRunV2RevisionScalingArgs and GoogleCloudRunV2RevisionScalingOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2RevisionScalingInput` via:
//
//	GoogleCloudRunV2RevisionScalingArgs{...}
type GoogleCloudRunV2RevisionScalingInput interface {
	pulumi.Input

	ToGoogleCloudRunV2RevisionScalingOutput() GoogleCloudRunV2RevisionScalingOutput
	ToGoogleCloudRunV2RevisionScalingOutputWithContext(context.Context) GoogleCloudRunV2RevisionScalingOutput
}

// Settings for revision-level scaling settings.
type GoogleCloudRunV2RevisionScalingArgs struct {
	// Maximum number of serving instances that this resource should have.
	MaxInstanceCount pulumi.IntPtrInput `pulumi:"maxInstanceCount"`
	// Minimum number of serving instances that this resource should have.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
}

func (GoogleCloudRunV2RevisionScalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2RevisionScaling)(nil)).Elem()
}

func (i GoogleCloudRunV2RevisionScalingArgs) ToGoogleCloudRunV2RevisionScalingOutput() GoogleCloudRunV2RevisionScalingOutput {
	return i.ToGoogleCloudRunV2RevisionScalingOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2RevisionScalingArgs) ToGoogleCloudRunV2RevisionScalingOutputWithContext(ctx context.Context) GoogleCloudRunV2RevisionScalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2RevisionScalingOutput)
}

func (i GoogleCloudRunV2RevisionScalingArgs) ToGoogleCloudRunV2RevisionScalingPtrOutput() GoogleCloudRunV2RevisionScalingPtrOutput {
	return i.ToGoogleCloudRunV2RevisionScalingPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2RevisionScalingArgs) ToGoogleCloudRunV2RevisionScalingPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2RevisionScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2RevisionScalingOutput).ToGoogleCloudRunV2RevisionScalingPtrOutputWithContext(ctx)
}

// GoogleCloudRunV2RevisionScalingPtrInput is an input type that accepts GoogleCloudRunV2RevisionScalingArgs, GoogleCloudRunV2RevisionScalingPtr and GoogleCloudRunV2RevisionScalingPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2RevisionScalingPtrInput` via:
//
//	        GoogleCloudRunV2RevisionScalingArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2RevisionScalingPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2RevisionScalingPtrOutput() GoogleCloudRunV2RevisionScalingPtrOutput
	ToGoogleCloudRunV2RevisionScalingPtrOutputWithContext(context.Context) GoogleCloudRunV2RevisionScalingPtrOutput
}

type googleCloudRunV2RevisionScalingPtrType GoogleCloudRunV2RevisionScalingArgs

func GoogleCloudRunV2RevisionScalingPtr(v *GoogleCloudRunV2RevisionScalingArgs) GoogleCloudRunV2RevisionScalingPtrInput {
	return (*googleCloudRunV2RevisionScalingPtrType)(v)
}

func (*googleCloudRunV2RevisionScalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2RevisionScaling)(nil)).Elem()
}

func (i *googleCloudRunV2RevisionScalingPtrType) ToGoogleCloudRunV2RevisionScalingPtrOutput() GoogleCloudRunV2RevisionScalingPtrOutput {
	return i.ToGoogleCloudRunV2RevisionScalingPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2RevisionScalingPtrType) ToGoogleCloudRunV2RevisionScalingPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2RevisionScalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2RevisionScalingPtrOutput)
}

// Settings for revision-level scaling settings.
type GoogleCloudRunV2RevisionScalingOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2RevisionScalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2RevisionScaling)(nil)).Elem()
}

func (o GoogleCloudRunV2RevisionScalingOutput) ToGoogleCloudRunV2RevisionScalingOutput() GoogleCloudRunV2RevisionScalingOutput {
	return o
}

func (o GoogleCloudRunV2RevisionScalingOutput) ToGoogleCloudRunV2RevisionScalingOutputWithContext(ctx context.Context) GoogleCloudRunV2RevisionScalingOutput {
	return o
}

func (o GoogleCloudRunV2RevisionScalingOutput) ToGoogleCloudRunV2RevisionScalingPtrOutput() GoogleCloudRunV2RevisionScalingPtrOutput {
	return o.ToGoogleCloudRunV2RevisionScalingPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2RevisionScalingOutput) ToGoogleCloudRunV2RevisionScalingPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2RevisionScalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2RevisionScaling) *GoogleCloudRunV2RevisionScaling {
		return &v
	}).(GoogleCloudRunV2RevisionScalingPtrOutput)
}

// Maximum number of serving instances that this resource should have.
func (o GoogleCloudRunV2RevisionScalingOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionScaling) *int { return v.MaxInstanceCount }).(pulumi.IntPtrOutput)
}

// Minimum number of serving instances that this resource should have.
func (o GoogleCloudRunV2RevisionScalingOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionScaling) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

type GoogleCloudRunV2RevisionScalingPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2RevisionScalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2RevisionScaling)(nil)).Elem()
}

func (o GoogleCloudRunV2RevisionScalingPtrOutput) ToGoogleCloudRunV2RevisionScalingPtrOutput() GoogleCloudRunV2RevisionScalingPtrOutput {
	return o
}

func (o GoogleCloudRunV2RevisionScalingPtrOutput) ToGoogleCloudRunV2RevisionScalingPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2RevisionScalingPtrOutput {
	return o
}

func (o GoogleCloudRunV2RevisionScalingPtrOutput) Elem() GoogleCloudRunV2RevisionScalingOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2RevisionScaling) GoogleCloudRunV2RevisionScaling {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2RevisionScaling
		return ret
	}).(GoogleCloudRunV2RevisionScalingOutput)
}

// Maximum number of serving instances that this resource should have.
func (o GoogleCloudRunV2RevisionScalingPtrOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2RevisionScaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstanceCount
	}).(pulumi.IntPtrOutput)
}

// Minimum number of serving instances that this resource should have.
func (o GoogleCloudRunV2RevisionScalingPtrOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2RevisionScaling) *int {
		if v == nil {
			return nil
		}
		return v.MinInstanceCount
	}).(pulumi.IntPtrOutput)
}

// Settings for revision-level scaling settings.
type GoogleCloudRunV2RevisionScalingResponse struct {
	// Maximum number of serving instances that this resource should have.
	MaxInstanceCount int `pulumi:"maxInstanceCount"`
	// Minimum number of serving instances that this resource should have.
	MinInstanceCount int `pulumi:"minInstanceCount"`
}

// Settings for revision-level scaling settings.
type GoogleCloudRunV2RevisionScalingResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2RevisionScalingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2RevisionScalingResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2RevisionScalingResponseOutput) ToGoogleCloudRunV2RevisionScalingResponseOutput() GoogleCloudRunV2RevisionScalingResponseOutput {
	return o
}

func (o GoogleCloudRunV2RevisionScalingResponseOutput) ToGoogleCloudRunV2RevisionScalingResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2RevisionScalingResponseOutput {
	return o
}

// Maximum number of serving instances that this resource should have.
func (o GoogleCloudRunV2RevisionScalingResponseOutput) MaxInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionScalingResponse) int { return v.MaxInstanceCount }).(pulumi.IntOutput)
}

// Minimum number of serving instances that this resource should have.
func (o GoogleCloudRunV2RevisionScalingResponseOutput) MinInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionScalingResponse) int { return v.MinInstanceCount }).(pulumi.IntOutput)
}

// RevisionTemplate describes the data a revision should have when created from a template.
type GoogleCloudRunV2RevisionTemplate struct {
	// KRM-style annotations for the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Holds the single container that defines the unit of execution for this Revision.
	Containers []GoogleCloudRunV2Container `pulumi:"containers"`
	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey *string `pulumi:"encryptionKey"`
	// The sandbox environment to host this Revision.
	ExecutionEnvironment *GoogleCloudRunV2RevisionTemplateExecutionEnvironment `pulumi:"executionEnvironment"`
	// KRM-style labels for the resource.
	Labels map[string]string `pulumi:"labels"`
	// Sets the maximum number of requests that each serving instance can receive.
	MaxInstanceRequestConcurrency *int `pulumi:"maxInstanceRequestConcurrency"`
	// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
	Revision *string `pulumi:"revision"`
	// Scaling settings for this Revision.
	Scaling *GoogleCloudRunV2RevisionScaling `pulumi:"scaling"`
	// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Max allowed time for an instance to respond to a request.
	Timeout *string `pulumi:"timeout"`
	// A list of Volumes to make available to containers.
	Volumes []GoogleCloudRunV2Volume `pulumi:"volumes"`
	// VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	VpcAccess *GoogleCloudRunV2VpcAccess `pulumi:"vpcAccess"`
}

// GoogleCloudRunV2RevisionTemplateInput is an input type that accepts GoogleCloudRunV2RevisionTemplateArgs and GoogleCloudRunV2RevisionTemplateOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2RevisionTemplateInput` via:
//
//	GoogleCloudRunV2RevisionTemplateArgs{...}
type GoogleCloudRunV2RevisionTemplateInput interface {
	pulumi.Input

	ToGoogleCloudRunV2RevisionTemplateOutput() GoogleCloudRunV2RevisionTemplateOutput
	ToGoogleCloudRunV2RevisionTemplateOutputWithContext(context.Context) GoogleCloudRunV2RevisionTemplateOutput
}

// RevisionTemplate describes the data a revision should have when created from a template.
type GoogleCloudRunV2RevisionTemplateArgs struct {
	// KRM-style annotations for the resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Holds the single container that defines the unit of execution for this Revision.
	Containers GoogleCloudRunV2ContainerArrayInput `pulumi:"containers"`
	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey pulumi.StringPtrInput `pulumi:"encryptionKey"`
	// The sandbox environment to host this Revision.
	ExecutionEnvironment GoogleCloudRunV2RevisionTemplateExecutionEnvironmentPtrInput `pulumi:"executionEnvironment"`
	// KRM-style labels for the resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Sets the maximum number of requests that each serving instance can receive.
	MaxInstanceRequestConcurrency pulumi.IntPtrInput `pulumi:"maxInstanceRequestConcurrency"`
	// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Scaling settings for this Revision.
	Scaling GoogleCloudRunV2RevisionScalingPtrInput `pulumi:"scaling"`
	// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Max allowed time for an instance to respond to a request.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// A list of Volumes to make available to containers.
	Volumes GoogleCloudRunV2VolumeArrayInput `pulumi:"volumes"`
	// VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	VpcAccess GoogleCloudRunV2VpcAccessPtrInput `pulumi:"vpcAccess"`
}

func (GoogleCloudRunV2RevisionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2RevisionTemplate)(nil)).Elem()
}

func (i GoogleCloudRunV2RevisionTemplateArgs) ToGoogleCloudRunV2RevisionTemplateOutput() GoogleCloudRunV2RevisionTemplateOutput {
	return i.ToGoogleCloudRunV2RevisionTemplateOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2RevisionTemplateArgs) ToGoogleCloudRunV2RevisionTemplateOutputWithContext(ctx context.Context) GoogleCloudRunV2RevisionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2RevisionTemplateOutput)
}

// RevisionTemplate describes the data a revision should have when created from a template.
type GoogleCloudRunV2RevisionTemplateOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2RevisionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2RevisionTemplate)(nil)).Elem()
}

func (o GoogleCloudRunV2RevisionTemplateOutput) ToGoogleCloudRunV2RevisionTemplateOutput() GoogleCloudRunV2RevisionTemplateOutput {
	return o
}

func (o GoogleCloudRunV2RevisionTemplateOutput) ToGoogleCloudRunV2RevisionTemplateOutputWithContext(ctx context.Context) GoogleCloudRunV2RevisionTemplateOutput {
	return o
}

// KRM-style annotations for the resource.
func (o GoogleCloudRunV2RevisionTemplateOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Holds the single container that defines the unit of execution for this Revision.
func (o GoogleCloudRunV2RevisionTemplateOutput) Containers() GoogleCloudRunV2ContainerArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) []GoogleCloudRunV2Container { return v.Containers }).(GoogleCloudRunV2ContainerArrayOutput)
}

// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
func (o GoogleCloudRunV2RevisionTemplateOutput) EncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) *string { return v.EncryptionKey }).(pulumi.StringPtrOutput)
}

// The sandbox environment to host this Revision.
func (o GoogleCloudRunV2RevisionTemplateOutput) ExecutionEnvironment() GoogleCloudRunV2RevisionTemplateExecutionEnvironmentPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) *GoogleCloudRunV2RevisionTemplateExecutionEnvironment {
		return v.ExecutionEnvironment
	}).(GoogleCloudRunV2RevisionTemplateExecutionEnvironmentPtrOutput)
}

// KRM-style labels for the resource.
func (o GoogleCloudRunV2RevisionTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Sets the maximum number of requests that each serving instance can receive.
func (o GoogleCloudRunV2RevisionTemplateOutput) MaxInstanceRequestConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) *int { return v.MaxInstanceRequestConcurrency }).(pulumi.IntPtrOutput)
}

// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
func (o GoogleCloudRunV2RevisionTemplateOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Scaling settings for this Revision.
func (o GoogleCloudRunV2RevisionTemplateOutput) Scaling() GoogleCloudRunV2RevisionScalingPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) *GoogleCloudRunV2RevisionScaling { return v.Scaling }).(GoogleCloudRunV2RevisionScalingPtrOutput)
}

// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
func (o GoogleCloudRunV2RevisionTemplateOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Max allowed time for an instance to respond to a request.
func (o GoogleCloudRunV2RevisionTemplateOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// A list of Volumes to make available to containers.
func (o GoogleCloudRunV2RevisionTemplateOutput) Volumes() GoogleCloudRunV2VolumeArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) []GoogleCloudRunV2Volume { return v.Volumes }).(GoogleCloudRunV2VolumeArrayOutput)
}

// VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
func (o GoogleCloudRunV2RevisionTemplateOutput) VpcAccess() GoogleCloudRunV2VpcAccessPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplate) *GoogleCloudRunV2VpcAccess { return v.VpcAccess }).(GoogleCloudRunV2VpcAccessPtrOutput)
}

// RevisionTemplate describes the data a revision should have when created from a template.
type GoogleCloudRunV2RevisionTemplateResponse struct {
	// KRM-style annotations for the resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Holds the single container that defines the unit of execution for this Revision.
	Containers []GoogleCloudRunV2ContainerResponse `pulumi:"containers"`
	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey string `pulumi:"encryptionKey"`
	// The sandbox environment to host this Revision.
	ExecutionEnvironment string `pulumi:"executionEnvironment"`
	// KRM-style labels for the resource.
	Labels map[string]string `pulumi:"labels"`
	// Sets the maximum number of requests that each serving instance can receive.
	MaxInstanceRequestConcurrency int `pulumi:"maxInstanceRequestConcurrency"`
	// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
	Revision string `pulumi:"revision"`
	// Scaling settings for this Revision.
	Scaling GoogleCloudRunV2RevisionScalingResponse `pulumi:"scaling"`
	// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Max allowed time for an instance to respond to a request.
	Timeout string `pulumi:"timeout"`
	// A list of Volumes to make available to containers.
	Volumes []GoogleCloudRunV2VolumeResponse `pulumi:"volumes"`
	// VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	VpcAccess GoogleCloudRunV2VpcAccessResponse `pulumi:"vpcAccess"`
}

// RevisionTemplate describes the data a revision should have when created from a template.
type GoogleCloudRunV2RevisionTemplateResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2RevisionTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2RevisionTemplateResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2RevisionTemplateResponseOutput) ToGoogleCloudRunV2RevisionTemplateResponseOutput() GoogleCloudRunV2RevisionTemplateResponseOutput {
	return o
}

func (o GoogleCloudRunV2RevisionTemplateResponseOutput) ToGoogleCloudRunV2RevisionTemplateResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2RevisionTemplateResponseOutput {
	return o
}

// KRM-style annotations for the resource.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Holds the single container that defines the unit of execution for this Revision.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) Containers() GoogleCloudRunV2ContainerResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) []GoogleCloudRunV2ContainerResponse {
		return v.Containers
	}).(GoogleCloudRunV2ContainerResponseArrayOutput)
}

// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) EncryptionKey() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) string { return v.EncryptionKey }).(pulumi.StringOutput)
}

// The sandbox environment to host this Revision.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) ExecutionEnvironment() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) string { return v.ExecutionEnvironment }).(pulumi.StringOutput)
}

// KRM-style labels for the resource.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Sets the maximum number of requests that each serving instance can receive.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) MaxInstanceRequestConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) int { return v.MaxInstanceRequestConcurrency }).(pulumi.IntOutput)
}

// The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// Scaling settings for this Revision.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) Scaling() GoogleCloudRunV2RevisionScalingResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) GoogleCloudRunV2RevisionScalingResponse {
		return v.Scaling
	}).(GoogleCloudRunV2RevisionScalingResponseOutput)
}

// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Max allowed time for an instance to respond to a request.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// A list of Volumes to make available to containers.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) Volumes() GoogleCloudRunV2VolumeResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) []GoogleCloudRunV2VolumeResponse { return v.Volumes }).(GoogleCloudRunV2VolumeResponseArrayOutput)
}

// VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
func (o GoogleCloudRunV2RevisionTemplateResponseOutput) VpcAccess() GoogleCloudRunV2VpcAccessResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2RevisionTemplateResponse) GoogleCloudRunV2VpcAccessResponse { return v.VpcAccess }).(GoogleCloudRunV2VpcAccessResponseOutput)
}

// SecretEnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunV2SecretKeySelector struct {
	// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
	Secret string `pulumi:"secret"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version *string `pulumi:"version"`
}

// GoogleCloudRunV2SecretKeySelectorInput is an input type that accepts GoogleCloudRunV2SecretKeySelectorArgs and GoogleCloudRunV2SecretKeySelectorOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2SecretKeySelectorInput` via:
//
//	GoogleCloudRunV2SecretKeySelectorArgs{...}
type GoogleCloudRunV2SecretKeySelectorInput interface {
	pulumi.Input

	ToGoogleCloudRunV2SecretKeySelectorOutput() GoogleCloudRunV2SecretKeySelectorOutput
	ToGoogleCloudRunV2SecretKeySelectorOutputWithContext(context.Context) GoogleCloudRunV2SecretKeySelectorOutput
}

// SecretEnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunV2SecretKeySelectorArgs struct {
	// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
	Secret pulumi.StringInput `pulumi:"secret"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GoogleCloudRunV2SecretKeySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2SecretKeySelector)(nil)).Elem()
}

func (i GoogleCloudRunV2SecretKeySelectorArgs) ToGoogleCloudRunV2SecretKeySelectorOutput() GoogleCloudRunV2SecretKeySelectorOutput {
	return i.ToGoogleCloudRunV2SecretKeySelectorOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2SecretKeySelectorArgs) ToGoogleCloudRunV2SecretKeySelectorOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretKeySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2SecretKeySelectorOutput)
}

func (i GoogleCloudRunV2SecretKeySelectorArgs) ToGoogleCloudRunV2SecretKeySelectorPtrOutput() GoogleCloudRunV2SecretKeySelectorPtrOutput {
	return i.ToGoogleCloudRunV2SecretKeySelectorPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2SecretKeySelectorArgs) ToGoogleCloudRunV2SecretKeySelectorPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2SecretKeySelectorOutput).ToGoogleCloudRunV2SecretKeySelectorPtrOutputWithContext(ctx)
}

// GoogleCloudRunV2SecretKeySelectorPtrInput is an input type that accepts GoogleCloudRunV2SecretKeySelectorArgs, GoogleCloudRunV2SecretKeySelectorPtr and GoogleCloudRunV2SecretKeySelectorPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2SecretKeySelectorPtrInput` via:
//
//	        GoogleCloudRunV2SecretKeySelectorArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2SecretKeySelectorPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2SecretKeySelectorPtrOutput() GoogleCloudRunV2SecretKeySelectorPtrOutput
	ToGoogleCloudRunV2SecretKeySelectorPtrOutputWithContext(context.Context) GoogleCloudRunV2SecretKeySelectorPtrOutput
}

type googleCloudRunV2SecretKeySelectorPtrType GoogleCloudRunV2SecretKeySelectorArgs

func GoogleCloudRunV2SecretKeySelectorPtr(v *GoogleCloudRunV2SecretKeySelectorArgs) GoogleCloudRunV2SecretKeySelectorPtrInput {
	return (*googleCloudRunV2SecretKeySelectorPtrType)(v)
}

func (*googleCloudRunV2SecretKeySelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2SecretKeySelector)(nil)).Elem()
}

func (i *googleCloudRunV2SecretKeySelectorPtrType) ToGoogleCloudRunV2SecretKeySelectorPtrOutput() GoogleCloudRunV2SecretKeySelectorPtrOutput {
	return i.ToGoogleCloudRunV2SecretKeySelectorPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2SecretKeySelectorPtrType) ToGoogleCloudRunV2SecretKeySelectorPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2SecretKeySelectorPtrOutput)
}

// SecretEnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunV2SecretKeySelectorOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2SecretKeySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2SecretKeySelector)(nil)).Elem()
}

func (o GoogleCloudRunV2SecretKeySelectorOutput) ToGoogleCloudRunV2SecretKeySelectorOutput() GoogleCloudRunV2SecretKeySelectorOutput {
	return o
}

func (o GoogleCloudRunV2SecretKeySelectorOutput) ToGoogleCloudRunV2SecretKeySelectorOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretKeySelectorOutput {
	return o
}

func (o GoogleCloudRunV2SecretKeySelectorOutput) ToGoogleCloudRunV2SecretKeySelectorPtrOutput() GoogleCloudRunV2SecretKeySelectorPtrOutput {
	return o.ToGoogleCloudRunV2SecretKeySelectorPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2SecretKeySelectorOutput) ToGoogleCloudRunV2SecretKeySelectorPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretKeySelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2SecretKeySelector) *GoogleCloudRunV2SecretKeySelector {
		return &v
	}).(GoogleCloudRunV2SecretKeySelectorPtrOutput)
}

// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
func (o GoogleCloudRunV2SecretKeySelectorOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2SecretKeySelector) string { return v.Secret }).(pulumi.StringOutput)
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
func (o GoogleCloudRunV2SecretKeySelectorOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2SecretKeySelector) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GoogleCloudRunV2SecretKeySelectorPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2SecretKeySelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2SecretKeySelector)(nil)).Elem()
}

func (o GoogleCloudRunV2SecretKeySelectorPtrOutput) ToGoogleCloudRunV2SecretKeySelectorPtrOutput() GoogleCloudRunV2SecretKeySelectorPtrOutput {
	return o
}

func (o GoogleCloudRunV2SecretKeySelectorPtrOutput) ToGoogleCloudRunV2SecretKeySelectorPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretKeySelectorPtrOutput {
	return o
}

func (o GoogleCloudRunV2SecretKeySelectorPtrOutput) Elem() GoogleCloudRunV2SecretKeySelectorOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2SecretKeySelector) GoogleCloudRunV2SecretKeySelector {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2SecretKeySelector
		return ret
	}).(GoogleCloudRunV2SecretKeySelectorOutput)
}

// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
func (o GoogleCloudRunV2SecretKeySelectorPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2SecretKeySelector) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
func (o GoogleCloudRunV2SecretKeySelectorPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2SecretKeySelector) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// SecretEnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunV2SecretKeySelectorResponse struct {
	// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
	Secret string `pulumi:"secret"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version string `pulumi:"version"`
}

// SecretEnvVarSource represents a source for the value of an EnvVar.
type GoogleCloudRunV2SecretKeySelectorResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2SecretKeySelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2SecretKeySelectorResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2SecretKeySelectorResponseOutput) ToGoogleCloudRunV2SecretKeySelectorResponseOutput() GoogleCloudRunV2SecretKeySelectorResponseOutput {
	return o
}

func (o GoogleCloudRunV2SecretKeySelectorResponseOutput) ToGoogleCloudRunV2SecretKeySelectorResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretKeySelectorResponseOutput {
	return o
}

// The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.
func (o GoogleCloudRunV2SecretKeySelectorResponseOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2SecretKeySelectorResponse) string { return v.Secret }).(pulumi.StringOutput)
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
func (o GoogleCloudRunV2SecretKeySelectorResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2SecretKeySelectorResponse) string { return v.Version }).(pulumi.StringOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
type GoogleCloudRunV2SecretVolumeSource struct {
	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
	DefaultMode *int `pulumi:"defaultMode"`
	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	Items []GoogleCloudRunV2VersionToPath `pulumi:"items"`
	// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
	Secret string `pulumi:"secret"`
}

// GoogleCloudRunV2SecretVolumeSourceInput is an input type that accepts GoogleCloudRunV2SecretVolumeSourceArgs and GoogleCloudRunV2SecretVolumeSourceOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2SecretVolumeSourceInput` via:
//
//	GoogleCloudRunV2SecretVolumeSourceArgs{...}
type GoogleCloudRunV2SecretVolumeSourceInput interface {
	pulumi.Input

	ToGoogleCloudRunV2SecretVolumeSourceOutput() GoogleCloudRunV2SecretVolumeSourceOutput
	ToGoogleCloudRunV2SecretVolumeSourceOutputWithContext(context.Context) GoogleCloudRunV2SecretVolumeSourceOutput
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
type GoogleCloudRunV2SecretVolumeSourceArgs struct {
	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	Items GoogleCloudRunV2VersionToPathArrayInput `pulumi:"items"`
	// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (GoogleCloudRunV2SecretVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2SecretVolumeSource)(nil)).Elem()
}

func (i GoogleCloudRunV2SecretVolumeSourceArgs) ToGoogleCloudRunV2SecretVolumeSourceOutput() GoogleCloudRunV2SecretVolumeSourceOutput {
	return i.ToGoogleCloudRunV2SecretVolumeSourceOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2SecretVolumeSourceArgs) ToGoogleCloudRunV2SecretVolumeSourceOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2SecretVolumeSourceOutput)
}

func (i GoogleCloudRunV2SecretVolumeSourceArgs) ToGoogleCloudRunV2SecretVolumeSourcePtrOutput() GoogleCloudRunV2SecretVolumeSourcePtrOutput {
	return i.ToGoogleCloudRunV2SecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2SecretVolumeSourceArgs) ToGoogleCloudRunV2SecretVolumeSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2SecretVolumeSourceOutput).ToGoogleCloudRunV2SecretVolumeSourcePtrOutputWithContext(ctx)
}

// GoogleCloudRunV2SecretVolumeSourcePtrInput is an input type that accepts GoogleCloudRunV2SecretVolumeSourceArgs, GoogleCloudRunV2SecretVolumeSourcePtr and GoogleCloudRunV2SecretVolumeSourcePtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2SecretVolumeSourcePtrInput` via:
//
//	        GoogleCloudRunV2SecretVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2SecretVolumeSourcePtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2SecretVolumeSourcePtrOutput() GoogleCloudRunV2SecretVolumeSourcePtrOutput
	ToGoogleCloudRunV2SecretVolumeSourcePtrOutputWithContext(context.Context) GoogleCloudRunV2SecretVolumeSourcePtrOutput
}

type googleCloudRunV2SecretVolumeSourcePtrType GoogleCloudRunV2SecretVolumeSourceArgs

func GoogleCloudRunV2SecretVolumeSourcePtr(v *GoogleCloudRunV2SecretVolumeSourceArgs) GoogleCloudRunV2SecretVolumeSourcePtrInput {
	return (*googleCloudRunV2SecretVolumeSourcePtrType)(v)
}

func (*googleCloudRunV2SecretVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2SecretVolumeSource)(nil)).Elem()
}

func (i *googleCloudRunV2SecretVolumeSourcePtrType) ToGoogleCloudRunV2SecretVolumeSourcePtrOutput() GoogleCloudRunV2SecretVolumeSourcePtrOutput {
	return i.ToGoogleCloudRunV2SecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2SecretVolumeSourcePtrType) ToGoogleCloudRunV2SecretVolumeSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2SecretVolumeSourcePtrOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
type GoogleCloudRunV2SecretVolumeSourceOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2SecretVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2SecretVolumeSource)(nil)).Elem()
}

func (o GoogleCloudRunV2SecretVolumeSourceOutput) ToGoogleCloudRunV2SecretVolumeSourceOutput() GoogleCloudRunV2SecretVolumeSourceOutput {
	return o
}

func (o GoogleCloudRunV2SecretVolumeSourceOutput) ToGoogleCloudRunV2SecretVolumeSourceOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretVolumeSourceOutput {
	return o
}

func (o GoogleCloudRunV2SecretVolumeSourceOutput) ToGoogleCloudRunV2SecretVolumeSourcePtrOutput() GoogleCloudRunV2SecretVolumeSourcePtrOutput {
	return o.ToGoogleCloudRunV2SecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2SecretVolumeSourceOutput) ToGoogleCloudRunV2SecretVolumeSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2SecretVolumeSource) *GoogleCloudRunV2SecretVolumeSource {
		return &v
	}).(GoogleCloudRunV2SecretVolumeSourcePtrOutput)
}

// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
func (o GoogleCloudRunV2SecretVolumeSourceOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2SecretVolumeSource) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
func (o GoogleCloudRunV2SecretVolumeSourceOutput) Items() GoogleCloudRunV2VersionToPathArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2SecretVolumeSource) []GoogleCloudRunV2VersionToPath { return v.Items }).(GoogleCloudRunV2VersionToPathArrayOutput)
}

// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
func (o GoogleCloudRunV2SecretVolumeSourceOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2SecretVolumeSource) string { return v.Secret }).(pulumi.StringOutput)
}

type GoogleCloudRunV2SecretVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2SecretVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2SecretVolumeSource)(nil)).Elem()
}

func (o GoogleCloudRunV2SecretVolumeSourcePtrOutput) ToGoogleCloudRunV2SecretVolumeSourcePtrOutput() GoogleCloudRunV2SecretVolumeSourcePtrOutput {
	return o
}

func (o GoogleCloudRunV2SecretVolumeSourcePtrOutput) ToGoogleCloudRunV2SecretVolumeSourcePtrOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretVolumeSourcePtrOutput {
	return o
}

func (o GoogleCloudRunV2SecretVolumeSourcePtrOutput) Elem() GoogleCloudRunV2SecretVolumeSourceOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2SecretVolumeSource) GoogleCloudRunV2SecretVolumeSource {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2SecretVolumeSource
		return ret
	}).(GoogleCloudRunV2SecretVolumeSourceOutput)
}

// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
func (o GoogleCloudRunV2SecretVolumeSourcePtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2SecretVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
func (o GoogleCloudRunV2SecretVolumeSourcePtrOutput) Items() GoogleCloudRunV2VersionToPathArrayOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2SecretVolumeSource) []GoogleCloudRunV2VersionToPath {
		if v == nil {
			return nil
		}
		return v.Items
	}).(GoogleCloudRunV2VersionToPathArrayOutput)
}

// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
func (o GoogleCloudRunV2SecretVolumeSourcePtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2SecretVolumeSource) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
type GoogleCloudRunV2SecretVolumeSourceResponse struct {
	// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
	DefaultMode int `pulumi:"defaultMode"`
	// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
	Items []GoogleCloudRunV2VersionToPathResponse `pulumi:"items"`
	// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
	Secret string `pulumi:"secret"`
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret.
type GoogleCloudRunV2SecretVolumeSourceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2SecretVolumeSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2SecretVolumeSourceResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2SecretVolumeSourceResponseOutput) ToGoogleCloudRunV2SecretVolumeSourceResponseOutput() GoogleCloudRunV2SecretVolumeSourceResponseOutput {
	return o
}

func (o GoogleCloudRunV2SecretVolumeSourceResponseOutput) ToGoogleCloudRunV2SecretVolumeSourceResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2SecretVolumeSourceResponseOutput {
	return o
}

// Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set.
func (o GoogleCloudRunV2SecretVolumeSourceResponseOutput) DefaultMode() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2SecretVolumeSourceResponse) int { return v.DefaultMode }).(pulumi.IntOutput)
}

// If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.
func (o GoogleCloudRunV2SecretVolumeSourceResponseOutput) Items() GoogleCloudRunV2VersionToPathResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2SecretVolumeSourceResponse) []GoogleCloudRunV2VersionToPathResponse {
		return v.Items
	}).(GoogleCloudRunV2VersionToPathResponseArrayOutput)
}

// The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.
func (o GoogleCloudRunV2SecretVolumeSourceResponseOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2SecretVolumeSourceResponse) string { return v.Secret }).(pulumi.StringOutput)
}

// TCPSocketAction describes an action based on opening a socket
type GoogleCloudRunV2TCPSocketAction struct {
	// Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
	Port *int `pulumi:"port"`
}

// GoogleCloudRunV2TCPSocketActionInput is an input type that accepts GoogleCloudRunV2TCPSocketActionArgs and GoogleCloudRunV2TCPSocketActionOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2TCPSocketActionInput` via:
//
//	GoogleCloudRunV2TCPSocketActionArgs{...}
type GoogleCloudRunV2TCPSocketActionInput interface {
	pulumi.Input

	ToGoogleCloudRunV2TCPSocketActionOutput() GoogleCloudRunV2TCPSocketActionOutput
	ToGoogleCloudRunV2TCPSocketActionOutputWithContext(context.Context) GoogleCloudRunV2TCPSocketActionOutput
}

// TCPSocketAction describes an action based on opening a socket
type GoogleCloudRunV2TCPSocketActionArgs struct {
	// Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (GoogleCloudRunV2TCPSocketActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2TCPSocketAction)(nil)).Elem()
}

func (i GoogleCloudRunV2TCPSocketActionArgs) ToGoogleCloudRunV2TCPSocketActionOutput() GoogleCloudRunV2TCPSocketActionOutput {
	return i.ToGoogleCloudRunV2TCPSocketActionOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2TCPSocketActionArgs) ToGoogleCloudRunV2TCPSocketActionOutputWithContext(ctx context.Context) GoogleCloudRunV2TCPSocketActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2TCPSocketActionOutput)
}

func (i GoogleCloudRunV2TCPSocketActionArgs) ToGoogleCloudRunV2TCPSocketActionPtrOutput() GoogleCloudRunV2TCPSocketActionPtrOutput {
	return i.ToGoogleCloudRunV2TCPSocketActionPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2TCPSocketActionArgs) ToGoogleCloudRunV2TCPSocketActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2TCPSocketActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2TCPSocketActionOutput).ToGoogleCloudRunV2TCPSocketActionPtrOutputWithContext(ctx)
}

// GoogleCloudRunV2TCPSocketActionPtrInput is an input type that accepts GoogleCloudRunV2TCPSocketActionArgs, GoogleCloudRunV2TCPSocketActionPtr and GoogleCloudRunV2TCPSocketActionPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2TCPSocketActionPtrInput` via:
//
//	        GoogleCloudRunV2TCPSocketActionArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2TCPSocketActionPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2TCPSocketActionPtrOutput() GoogleCloudRunV2TCPSocketActionPtrOutput
	ToGoogleCloudRunV2TCPSocketActionPtrOutputWithContext(context.Context) GoogleCloudRunV2TCPSocketActionPtrOutput
}

type googleCloudRunV2TCPSocketActionPtrType GoogleCloudRunV2TCPSocketActionArgs

func GoogleCloudRunV2TCPSocketActionPtr(v *GoogleCloudRunV2TCPSocketActionArgs) GoogleCloudRunV2TCPSocketActionPtrInput {
	return (*googleCloudRunV2TCPSocketActionPtrType)(v)
}

func (*googleCloudRunV2TCPSocketActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2TCPSocketAction)(nil)).Elem()
}

func (i *googleCloudRunV2TCPSocketActionPtrType) ToGoogleCloudRunV2TCPSocketActionPtrOutput() GoogleCloudRunV2TCPSocketActionPtrOutput {
	return i.ToGoogleCloudRunV2TCPSocketActionPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2TCPSocketActionPtrType) ToGoogleCloudRunV2TCPSocketActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2TCPSocketActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2TCPSocketActionPtrOutput)
}

// TCPSocketAction describes an action based on opening a socket
type GoogleCloudRunV2TCPSocketActionOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TCPSocketActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2TCPSocketAction)(nil)).Elem()
}

func (o GoogleCloudRunV2TCPSocketActionOutput) ToGoogleCloudRunV2TCPSocketActionOutput() GoogleCloudRunV2TCPSocketActionOutput {
	return o
}

func (o GoogleCloudRunV2TCPSocketActionOutput) ToGoogleCloudRunV2TCPSocketActionOutputWithContext(ctx context.Context) GoogleCloudRunV2TCPSocketActionOutput {
	return o
}

func (o GoogleCloudRunV2TCPSocketActionOutput) ToGoogleCloudRunV2TCPSocketActionPtrOutput() GoogleCloudRunV2TCPSocketActionPtrOutput {
	return o.ToGoogleCloudRunV2TCPSocketActionPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2TCPSocketActionOutput) ToGoogleCloudRunV2TCPSocketActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2TCPSocketActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2TCPSocketAction) *GoogleCloudRunV2TCPSocketAction {
		return &v
	}).(GoogleCloudRunV2TCPSocketActionPtrOutput)
}

// Host name to connect to, defaults to the pod IP.
func (o GoogleCloudRunV2TCPSocketActionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TCPSocketAction) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
func (o GoogleCloudRunV2TCPSocketActionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TCPSocketAction) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GoogleCloudRunV2TCPSocketActionPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TCPSocketActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2TCPSocketAction)(nil)).Elem()
}

func (o GoogleCloudRunV2TCPSocketActionPtrOutput) ToGoogleCloudRunV2TCPSocketActionPtrOutput() GoogleCloudRunV2TCPSocketActionPtrOutput {
	return o
}

func (o GoogleCloudRunV2TCPSocketActionPtrOutput) ToGoogleCloudRunV2TCPSocketActionPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2TCPSocketActionPtrOutput {
	return o
}

func (o GoogleCloudRunV2TCPSocketActionPtrOutput) Elem() GoogleCloudRunV2TCPSocketActionOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2TCPSocketAction) GoogleCloudRunV2TCPSocketAction {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2TCPSocketAction
		return ret
	}).(GoogleCloudRunV2TCPSocketActionOutput)
}

// Host name to connect to, defaults to the pod IP.
func (o GoogleCloudRunV2TCPSocketActionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2TCPSocketAction) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
func (o GoogleCloudRunV2TCPSocketActionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2TCPSocketAction) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// TCPSocketAction describes an action based on opening a socket
type GoogleCloudRunV2TCPSocketActionResponse struct {
	// Host name to connect to, defaults to the pod IP.
	Host string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
	Port int `pulumi:"port"`
}

// TCPSocketAction describes an action based on opening a socket
type GoogleCloudRunV2TCPSocketActionResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TCPSocketActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2TCPSocketActionResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2TCPSocketActionResponseOutput) ToGoogleCloudRunV2TCPSocketActionResponseOutput() GoogleCloudRunV2TCPSocketActionResponseOutput {
	return o
}

func (o GoogleCloudRunV2TCPSocketActionResponseOutput) ToGoogleCloudRunV2TCPSocketActionResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2TCPSocketActionResponseOutput {
	return o
}

// Host name to connect to, defaults to the pod IP.
func (o GoogleCloudRunV2TCPSocketActionResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TCPSocketActionResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
func (o GoogleCloudRunV2TCPSocketActionResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TCPSocketActionResponse) int { return v.Port }).(pulumi.IntOutput)
}

// TaskTemplate describes the data a task should have when created from a template.
type GoogleCloudRunV2TaskTemplate struct {
	// Holds the single container that defines the unit of execution for this task.
	Containers []GoogleCloudRunV2Container `pulumi:"containers"`
	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey *string `pulumi:"encryptionKey"`
	// The execution environment being used to host this Task.
	ExecutionEnvironment *GoogleCloudRunV2TaskTemplateExecutionEnvironment `pulumi:"executionEnvironment"`
	// Number of retries allowed per Task, before marking this Task failed.
	MaxRetries *int `pulumi:"maxRetries"`
	// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
	Timeout *string `pulumi:"timeout"`
	// A list of Volumes to make available to containers.
	Volumes []GoogleCloudRunV2Volume `pulumi:"volumes"`
	// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	VpcAccess *GoogleCloudRunV2VpcAccess `pulumi:"vpcAccess"`
}

// GoogleCloudRunV2TaskTemplateInput is an input type that accepts GoogleCloudRunV2TaskTemplateArgs and GoogleCloudRunV2TaskTemplateOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2TaskTemplateInput` via:
//
//	GoogleCloudRunV2TaskTemplateArgs{...}
type GoogleCloudRunV2TaskTemplateInput interface {
	pulumi.Input

	ToGoogleCloudRunV2TaskTemplateOutput() GoogleCloudRunV2TaskTemplateOutput
	ToGoogleCloudRunV2TaskTemplateOutputWithContext(context.Context) GoogleCloudRunV2TaskTemplateOutput
}

// TaskTemplate describes the data a task should have when created from a template.
type GoogleCloudRunV2TaskTemplateArgs struct {
	// Holds the single container that defines the unit of execution for this task.
	Containers GoogleCloudRunV2ContainerArrayInput `pulumi:"containers"`
	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey pulumi.StringPtrInput `pulumi:"encryptionKey"`
	// The execution environment being used to host this Task.
	ExecutionEnvironment GoogleCloudRunV2TaskTemplateExecutionEnvironmentPtrInput `pulumi:"executionEnvironment"`
	// Number of retries allowed per Task, before marking this Task failed.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// A list of Volumes to make available to containers.
	Volumes GoogleCloudRunV2VolumeArrayInput `pulumi:"volumes"`
	// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	VpcAccess GoogleCloudRunV2VpcAccessPtrInput `pulumi:"vpcAccess"`
}

func (GoogleCloudRunV2TaskTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2TaskTemplate)(nil)).Elem()
}

func (i GoogleCloudRunV2TaskTemplateArgs) ToGoogleCloudRunV2TaskTemplateOutput() GoogleCloudRunV2TaskTemplateOutput {
	return i.ToGoogleCloudRunV2TaskTemplateOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2TaskTemplateArgs) ToGoogleCloudRunV2TaskTemplateOutputWithContext(ctx context.Context) GoogleCloudRunV2TaskTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2TaskTemplateOutput)
}

// TaskTemplate describes the data a task should have when created from a template.
type GoogleCloudRunV2TaskTemplateOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TaskTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2TaskTemplate)(nil)).Elem()
}

func (o GoogleCloudRunV2TaskTemplateOutput) ToGoogleCloudRunV2TaskTemplateOutput() GoogleCloudRunV2TaskTemplateOutput {
	return o
}

func (o GoogleCloudRunV2TaskTemplateOutput) ToGoogleCloudRunV2TaskTemplateOutputWithContext(ctx context.Context) GoogleCloudRunV2TaskTemplateOutput {
	return o
}

// Holds the single container that defines the unit of execution for this task.
func (o GoogleCloudRunV2TaskTemplateOutput) Containers() GoogleCloudRunV2ContainerArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplate) []GoogleCloudRunV2Container { return v.Containers }).(GoogleCloudRunV2ContainerArrayOutput)
}

// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
func (o GoogleCloudRunV2TaskTemplateOutput) EncryptionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplate) *string { return v.EncryptionKey }).(pulumi.StringPtrOutput)
}

// The execution environment being used to host this Task.
func (o GoogleCloudRunV2TaskTemplateOutput) ExecutionEnvironment() GoogleCloudRunV2TaskTemplateExecutionEnvironmentPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplate) *GoogleCloudRunV2TaskTemplateExecutionEnvironment {
		return v.ExecutionEnvironment
	}).(GoogleCloudRunV2TaskTemplateExecutionEnvironmentPtrOutput)
}

// Number of retries allowed per Task, before marking this Task failed.
func (o GoogleCloudRunV2TaskTemplateOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplate) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
func (o GoogleCloudRunV2TaskTemplateOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplate) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
func (o GoogleCloudRunV2TaskTemplateOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplate) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// A list of Volumes to make available to containers.
func (o GoogleCloudRunV2TaskTemplateOutput) Volumes() GoogleCloudRunV2VolumeArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplate) []GoogleCloudRunV2Volume { return v.Volumes }).(GoogleCloudRunV2VolumeArrayOutput)
}

// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
func (o GoogleCloudRunV2TaskTemplateOutput) VpcAccess() GoogleCloudRunV2VpcAccessPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplate) *GoogleCloudRunV2VpcAccess { return v.VpcAccess }).(GoogleCloudRunV2VpcAccessPtrOutput)
}

// TaskTemplate describes the data a task should have when created from a template.
type GoogleCloudRunV2TaskTemplateResponse struct {
	// Holds the single container that defines the unit of execution for this task.
	Containers []GoogleCloudRunV2ContainerResponse `pulumi:"containers"`
	// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
	EncryptionKey string `pulumi:"encryptionKey"`
	// The execution environment being used to host this Task.
	ExecutionEnvironment string `pulumi:"executionEnvironment"`
	// Number of retries allowed per Task, before marking this Task failed.
	MaxRetries int `pulumi:"maxRetries"`
	// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
	Timeout string `pulumi:"timeout"`
	// A list of Volumes to make available to containers.
	Volumes []GoogleCloudRunV2VolumeResponse `pulumi:"volumes"`
	// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
	VpcAccess GoogleCloudRunV2VpcAccessResponse `pulumi:"vpcAccess"`
}

// TaskTemplate describes the data a task should have when created from a template.
type GoogleCloudRunV2TaskTemplateResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TaskTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2TaskTemplateResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2TaskTemplateResponseOutput) ToGoogleCloudRunV2TaskTemplateResponseOutput() GoogleCloudRunV2TaskTemplateResponseOutput {
	return o
}

func (o GoogleCloudRunV2TaskTemplateResponseOutput) ToGoogleCloudRunV2TaskTemplateResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2TaskTemplateResponseOutput {
	return o
}

// Holds the single container that defines the unit of execution for this task.
func (o GoogleCloudRunV2TaskTemplateResponseOutput) Containers() GoogleCloudRunV2ContainerResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplateResponse) []GoogleCloudRunV2ContainerResponse { return v.Containers }).(GoogleCloudRunV2ContainerResponseArrayOutput)
}

// A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
func (o GoogleCloudRunV2TaskTemplateResponseOutput) EncryptionKey() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplateResponse) string { return v.EncryptionKey }).(pulumi.StringOutput)
}

// The execution environment being used to host this Task.
func (o GoogleCloudRunV2TaskTemplateResponseOutput) ExecutionEnvironment() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplateResponse) string { return v.ExecutionEnvironment }).(pulumi.StringOutput)
}

// Number of retries allowed per Task, before marking this Task failed.
func (o GoogleCloudRunV2TaskTemplateResponseOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplateResponse) int { return v.MaxRetries }).(pulumi.IntOutput)
}

// Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
func (o GoogleCloudRunV2TaskTemplateResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplateResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
func (o GoogleCloudRunV2TaskTemplateResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplateResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// A list of Volumes to make available to containers.
func (o GoogleCloudRunV2TaskTemplateResponseOutput) Volumes() GoogleCloudRunV2VolumeResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplateResponse) []GoogleCloudRunV2VolumeResponse { return v.Volumes }).(GoogleCloudRunV2VolumeResponseArrayOutput)
}

// VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
func (o GoogleCloudRunV2TaskTemplateResponseOutput) VpcAccess() GoogleCloudRunV2VpcAccessResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TaskTemplateResponse) GoogleCloudRunV2VpcAccessResponse { return v.VpcAccess }).(GoogleCloudRunV2VpcAccessResponseOutput)
}

// Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
type GoogleCloudRunV2TrafficTarget struct {
	// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
	Percent *int `pulumi:"percent"`
	// Revision to which to send this portion of traffic, if traffic allocation is by revision.
	Revision *string `pulumi:"revision"`
	// Indicates a string to be part of the URI to exclusively reference this target.
	Tag *string `pulumi:"tag"`
	// The allocation type for this traffic target.
	Type *GoogleCloudRunV2TrafficTargetType `pulumi:"type"`
}

// GoogleCloudRunV2TrafficTargetInput is an input type that accepts GoogleCloudRunV2TrafficTargetArgs and GoogleCloudRunV2TrafficTargetOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2TrafficTargetInput` via:
//
//	GoogleCloudRunV2TrafficTargetArgs{...}
type GoogleCloudRunV2TrafficTargetInput interface {
	pulumi.Input

	ToGoogleCloudRunV2TrafficTargetOutput() GoogleCloudRunV2TrafficTargetOutput
	ToGoogleCloudRunV2TrafficTargetOutputWithContext(context.Context) GoogleCloudRunV2TrafficTargetOutput
}

// Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
type GoogleCloudRunV2TrafficTargetArgs struct {
	// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
	Percent pulumi.IntPtrInput `pulumi:"percent"`
	// Revision to which to send this portion of traffic, if traffic allocation is by revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Indicates a string to be part of the URI to exclusively reference this target.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The allocation type for this traffic target.
	Type GoogleCloudRunV2TrafficTargetTypePtrInput `pulumi:"type"`
}

func (GoogleCloudRunV2TrafficTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2TrafficTarget)(nil)).Elem()
}

func (i GoogleCloudRunV2TrafficTargetArgs) ToGoogleCloudRunV2TrafficTargetOutput() GoogleCloudRunV2TrafficTargetOutput {
	return i.ToGoogleCloudRunV2TrafficTargetOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2TrafficTargetArgs) ToGoogleCloudRunV2TrafficTargetOutputWithContext(ctx context.Context) GoogleCloudRunV2TrafficTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2TrafficTargetOutput)
}

// GoogleCloudRunV2TrafficTargetArrayInput is an input type that accepts GoogleCloudRunV2TrafficTargetArray and GoogleCloudRunV2TrafficTargetArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2TrafficTargetArrayInput` via:
//
//	GoogleCloudRunV2TrafficTargetArray{ GoogleCloudRunV2TrafficTargetArgs{...} }
type GoogleCloudRunV2TrafficTargetArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunV2TrafficTargetArrayOutput() GoogleCloudRunV2TrafficTargetArrayOutput
	ToGoogleCloudRunV2TrafficTargetArrayOutputWithContext(context.Context) GoogleCloudRunV2TrafficTargetArrayOutput
}

type GoogleCloudRunV2TrafficTargetArray []GoogleCloudRunV2TrafficTargetInput

func (GoogleCloudRunV2TrafficTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2TrafficTarget)(nil)).Elem()
}

func (i GoogleCloudRunV2TrafficTargetArray) ToGoogleCloudRunV2TrafficTargetArrayOutput() GoogleCloudRunV2TrafficTargetArrayOutput {
	return i.ToGoogleCloudRunV2TrafficTargetArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2TrafficTargetArray) ToGoogleCloudRunV2TrafficTargetArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2TrafficTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2TrafficTargetArrayOutput)
}

// Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
type GoogleCloudRunV2TrafficTargetOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TrafficTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2TrafficTarget)(nil)).Elem()
}

func (o GoogleCloudRunV2TrafficTargetOutput) ToGoogleCloudRunV2TrafficTargetOutput() GoogleCloudRunV2TrafficTargetOutput {
	return o
}

func (o GoogleCloudRunV2TrafficTargetOutput) ToGoogleCloudRunV2TrafficTargetOutputWithContext(ctx context.Context) GoogleCloudRunV2TrafficTargetOutput {
	return o
}

// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
func (o GoogleCloudRunV2TrafficTargetOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTarget) *int { return v.Percent }).(pulumi.IntPtrOutput)
}

// Revision to which to send this portion of traffic, if traffic allocation is by revision.
func (o GoogleCloudRunV2TrafficTargetOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTarget) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Indicates a string to be part of the URI to exclusively reference this target.
func (o GoogleCloudRunV2TrafficTargetOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTarget) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The allocation type for this traffic target.
func (o GoogleCloudRunV2TrafficTargetOutput) Type() GoogleCloudRunV2TrafficTargetTypePtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTarget) *GoogleCloudRunV2TrafficTargetType { return v.Type }).(GoogleCloudRunV2TrafficTargetTypePtrOutput)
}

type GoogleCloudRunV2TrafficTargetArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TrafficTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2TrafficTarget)(nil)).Elem()
}

func (o GoogleCloudRunV2TrafficTargetArrayOutput) ToGoogleCloudRunV2TrafficTargetArrayOutput() GoogleCloudRunV2TrafficTargetArrayOutput {
	return o
}

func (o GoogleCloudRunV2TrafficTargetArrayOutput) ToGoogleCloudRunV2TrafficTargetArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2TrafficTargetArrayOutput {
	return o
}

func (o GoogleCloudRunV2TrafficTargetArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2TrafficTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2TrafficTarget {
		return vs[0].([]GoogleCloudRunV2TrafficTarget)[vs[1].(int)]
	}).(GoogleCloudRunV2TrafficTargetOutput)
}

// Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
type GoogleCloudRunV2TrafficTargetResponse struct {
	// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
	Percent int `pulumi:"percent"`
	// Revision to which to send this portion of traffic, if traffic allocation is by revision.
	Revision string `pulumi:"revision"`
	// Indicates a string to be part of the URI to exclusively reference this target.
	Tag string `pulumi:"tag"`
	// The allocation type for this traffic target.
	Type string `pulumi:"type"`
}

// Holds a single traffic routing entry for the Service. Allocations can be done to a specific Revision name, or pointing to the latest Ready Revision.
type GoogleCloudRunV2TrafficTargetResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TrafficTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2TrafficTargetResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2TrafficTargetResponseOutput) ToGoogleCloudRunV2TrafficTargetResponseOutput() GoogleCloudRunV2TrafficTargetResponseOutput {
	return o
}

func (o GoogleCloudRunV2TrafficTargetResponseOutput) ToGoogleCloudRunV2TrafficTargetResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2TrafficTargetResponseOutput {
	return o
}

// Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.
func (o GoogleCloudRunV2TrafficTargetResponseOutput) Percent() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTargetResponse) int { return v.Percent }).(pulumi.IntOutput)
}

// Revision to which to send this portion of traffic, if traffic allocation is by revision.
func (o GoogleCloudRunV2TrafficTargetResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTargetResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// Indicates a string to be part of the URI to exclusively reference this target.
func (o GoogleCloudRunV2TrafficTargetResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTargetResponse) string { return v.Tag }).(pulumi.StringOutput)
}

// The allocation type for this traffic target.
func (o GoogleCloudRunV2TrafficTargetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTargetResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudRunV2TrafficTargetResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TrafficTargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2TrafficTargetResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2TrafficTargetResponseArrayOutput) ToGoogleCloudRunV2TrafficTargetResponseArrayOutput() GoogleCloudRunV2TrafficTargetResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2TrafficTargetResponseArrayOutput) ToGoogleCloudRunV2TrafficTargetResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2TrafficTargetResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2TrafficTargetResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2TrafficTargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2TrafficTargetResponse {
		return vs[0].([]GoogleCloudRunV2TrafficTargetResponse)[vs[1].(int)]
	}).(GoogleCloudRunV2TrafficTargetResponseOutput)
}

// Represents the observed state of a single `TrafficTarget` entry.
type GoogleCloudRunV2TrafficTargetStatusResponse struct {
	// Specifies percent of the traffic to this Revision.
	Percent int `pulumi:"percent"`
	// Revision to which this traffic is sent.
	Revision string `pulumi:"revision"`
	// Indicates the string used in the URI to exclusively reference this target.
	Tag string `pulumi:"tag"`
	// The allocation type for this traffic target.
	Type string `pulumi:"type"`
	// Displays the target URI.
	Uri string `pulumi:"uri"`
}

// Represents the observed state of a single `TrafficTarget` entry.
type GoogleCloudRunV2TrafficTargetStatusResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TrafficTargetStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2TrafficTargetStatusResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2TrafficTargetStatusResponseOutput) ToGoogleCloudRunV2TrafficTargetStatusResponseOutput() GoogleCloudRunV2TrafficTargetStatusResponseOutput {
	return o
}

func (o GoogleCloudRunV2TrafficTargetStatusResponseOutput) ToGoogleCloudRunV2TrafficTargetStatusResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2TrafficTargetStatusResponseOutput {
	return o
}

// Specifies percent of the traffic to this Revision.
func (o GoogleCloudRunV2TrafficTargetStatusResponseOutput) Percent() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTargetStatusResponse) int { return v.Percent }).(pulumi.IntOutput)
}

// Revision to which this traffic is sent.
func (o GoogleCloudRunV2TrafficTargetStatusResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTargetStatusResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// Indicates the string used in the URI to exclusively reference this target.
func (o GoogleCloudRunV2TrafficTargetStatusResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTargetStatusResponse) string { return v.Tag }).(pulumi.StringOutput)
}

// The allocation type for this traffic target.
func (o GoogleCloudRunV2TrafficTargetStatusResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTargetStatusResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Displays the target URI.
func (o GoogleCloudRunV2TrafficTargetStatusResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2TrafficTargetStatusResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type GoogleCloudRunV2TrafficTargetStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2TrafficTargetStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2TrafficTargetStatusResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2TrafficTargetStatusResponseArrayOutput) ToGoogleCloudRunV2TrafficTargetStatusResponseArrayOutput() GoogleCloudRunV2TrafficTargetStatusResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2TrafficTargetStatusResponseArrayOutput) ToGoogleCloudRunV2TrafficTargetStatusResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2TrafficTargetStatusResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2TrafficTargetStatusResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2TrafficTargetStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2TrafficTargetStatusResponse {
		return vs[0].([]GoogleCloudRunV2TrafficTargetStatusResponse)[vs[1].(int)]
	}).(GoogleCloudRunV2TrafficTargetStatusResponseOutput)
}

// VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
type GoogleCloudRunV2VersionToPath struct {
	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// The relative path of the secret in the container.
	Path string `pulumi:"path"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version *string `pulumi:"version"`
}

// GoogleCloudRunV2VersionToPathInput is an input type that accepts GoogleCloudRunV2VersionToPathArgs and GoogleCloudRunV2VersionToPathOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2VersionToPathInput` via:
//
//	GoogleCloudRunV2VersionToPathArgs{...}
type GoogleCloudRunV2VersionToPathInput interface {
	pulumi.Input

	ToGoogleCloudRunV2VersionToPathOutput() GoogleCloudRunV2VersionToPathOutput
	ToGoogleCloudRunV2VersionToPathOutputWithContext(context.Context) GoogleCloudRunV2VersionToPathOutput
}

// VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
type GoogleCloudRunV2VersionToPathArgs struct {
	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The relative path of the secret in the container.
	Path pulumi.StringInput `pulumi:"path"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (GoogleCloudRunV2VersionToPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2VersionToPath)(nil)).Elem()
}

func (i GoogleCloudRunV2VersionToPathArgs) ToGoogleCloudRunV2VersionToPathOutput() GoogleCloudRunV2VersionToPathOutput {
	return i.ToGoogleCloudRunV2VersionToPathOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2VersionToPathArgs) ToGoogleCloudRunV2VersionToPathOutputWithContext(ctx context.Context) GoogleCloudRunV2VersionToPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2VersionToPathOutput)
}

// GoogleCloudRunV2VersionToPathArrayInput is an input type that accepts GoogleCloudRunV2VersionToPathArray and GoogleCloudRunV2VersionToPathArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2VersionToPathArrayInput` via:
//
//	GoogleCloudRunV2VersionToPathArray{ GoogleCloudRunV2VersionToPathArgs{...} }
type GoogleCloudRunV2VersionToPathArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunV2VersionToPathArrayOutput() GoogleCloudRunV2VersionToPathArrayOutput
	ToGoogleCloudRunV2VersionToPathArrayOutputWithContext(context.Context) GoogleCloudRunV2VersionToPathArrayOutput
}

type GoogleCloudRunV2VersionToPathArray []GoogleCloudRunV2VersionToPathInput

func (GoogleCloudRunV2VersionToPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2VersionToPath)(nil)).Elem()
}

func (i GoogleCloudRunV2VersionToPathArray) ToGoogleCloudRunV2VersionToPathArrayOutput() GoogleCloudRunV2VersionToPathArrayOutput {
	return i.ToGoogleCloudRunV2VersionToPathArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2VersionToPathArray) ToGoogleCloudRunV2VersionToPathArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2VersionToPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2VersionToPathArrayOutput)
}

// VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
type GoogleCloudRunV2VersionToPathOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VersionToPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2VersionToPath)(nil)).Elem()
}

func (o GoogleCloudRunV2VersionToPathOutput) ToGoogleCloudRunV2VersionToPathOutput() GoogleCloudRunV2VersionToPathOutput {
	return o
}

func (o GoogleCloudRunV2VersionToPathOutput) ToGoogleCloudRunV2VersionToPathOutputWithContext(ctx context.Context) GoogleCloudRunV2VersionToPathOutput {
	return o
}

// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o GoogleCloudRunV2VersionToPathOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VersionToPath) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The relative path of the secret in the container.
func (o GoogleCloudRunV2VersionToPathOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VersionToPath) string { return v.Path }).(pulumi.StringOutput)
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
func (o GoogleCloudRunV2VersionToPathOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VersionToPath) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type GoogleCloudRunV2VersionToPathArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VersionToPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2VersionToPath)(nil)).Elem()
}

func (o GoogleCloudRunV2VersionToPathArrayOutput) ToGoogleCloudRunV2VersionToPathArrayOutput() GoogleCloudRunV2VersionToPathArrayOutput {
	return o
}

func (o GoogleCloudRunV2VersionToPathArrayOutput) ToGoogleCloudRunV2VersionToPathArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2VersionToPathArrayOutput {
	return o
}

func (o GoogleCloudRunV2VersionToPathArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2VersionToPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2VersionToPath {
		return vs[0].([]GoogleCloudRunV2VersionToPath)[vs[1].(int)]
	}).(GoogleCloudRunV2VersionToPathOutput)
}

// VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
type GoogleCloudRunV2VersionToPathResponse struct {
	// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode int `pulumi:"mode"`
	// The relative path of the secret in the container.
	Path string `pulumi:"path"`
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
	Version string `pulumi:"version"`
}

// VersionToPath maps a specific version of a secret to a relative file to mount to, relative to VolumeMount's mount_path.
type GoogleCloudRunV2VersionToPathResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VersionToPathResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2VersionToPathResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2VersionToPathResponseOutput) ToGoogleCloudRunV2VersionToPathResponseOutput() GoogleCloudRunV2VersionToPathResponseOutput {
	return o
}

func (o GoogleCloudRunV2VersionToPathResponseOutput) ToGoogleCloudRunV2VersionToPathResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2VersionToPathResponseOutput {
	return o
}

// Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o GoogleCloudRunV2VersionToPathResponseOutput) Mode() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VersionToPathResponse) int { return v.Mode }).(pulumi.IntOutput)
}

// The relative path of the secret in the container.
func (o GoogleCloudRunV2VersionToPathResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VersionToPathResponse) string { return v.Path }).(pulumi.StringOutput)
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.
func (o GoogleCloudRunV2VersionToPathResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VersionToPathResponse) string { return v.Version }).(pulumi.StringOutput)
}

type GoogleCloudRunV2VersionToPathResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VersionToPathResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2VersionToPathResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2VersionToPathResponseArrayOutput) ToGoogleCloudRunV2VersionToPathResponseArrayOutput() GoogleCloudRunV2VersionToPathResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2VersionToPathResponseArrayOutput) ToGoogleCloudRunV2VersionToPathResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2VersionToPathResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2VersionToPathResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2VersionToPathResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2VersionToPathResponse {
		return vs[0].([]GoogleCloudRunV2VersionToPathResponse)[vs[1].(int)]
	}).(GoogleCloudRunV2VersionToPathResponseOutput)
}

// Volume represents a named volume in a container.
type GoogleCloudRunV2Volume struct {
	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	CloudSqlInstance *GoogleCloudRunV2CloudSqlInstance `pulumi:"cloudSqlInstance"`
	// Volume's name.
	Name string `pulumi:"name"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret *GoogleCloudRunV2SecretVolumeSource `pulumi:"secret"`
}

// GoogleCloudRunV2VolumeInput is an input type that accepts GoogleCloudRunV2VolumeArgs and GoogleCloudRunV2VolumeOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2VolumeInput` via:
//
//	GoogleCloudRunV2VolumeArgs{...}
type GoogleCloudRunV2VolumeInput interface {
	pulumi.Input

	ToGoogleCloudRunV2VolumeOutput() GoogleCloudRunV2VolumeOutput
	ToGoogleCloudRunV2VolumeOutputWithContext(context.Context) GoogleCloudRunV2VolumeOutput
}

// Volume represents a named volume in a container.
type GoogleCloudRunV2VolumeArgs struct {
	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	CloudSqlInstance GoogleCloudRunV2CloudSqlInstancePtrInput `pulumi:"cloudSqlInstance"`
	// Volume's name.
	Name pulumi.StringInput `pulumi:"name"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret GoogleCloudRunV2SecretVolumeSourcePtrInput `pulumi:"secret"`
}

func (GoogleCloudRunV2VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2Volume)(nil)).Elem()
}

func (i GoogleCloudRunV2VolumeArgs) ToGoogleCloudRunV2VolumeOutput() GoogleCloudRunV2VolumeOutput {
	return i.ToGoogleCloudRunV2VolumeOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2VolumeArgs) ToGoogleCloudRunV2VolumeOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2VolumeOutput)
}

// GoogleCloudRunV2VolumeArrayInput is an input type that accepts GoogleCloudRunV2VolumeArray and GoogleCloudRunV2VolumeArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2VolumeArrayInput` via:
//
//	GoogleCloudRunV2VolumeArray{ GoogleCloudRunV2VolumeArgs{...} }
type GoogleCloudRunV2VolumeArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunV2VolumeArrayOutput() GoogleCloudRunV2VolumeArrayOutput
	ToGoogleCloudRunV2VolumeArrayOutputWithContext(context.Context) GoogleCloudRunV2VolumeArrayOutput
}

type GoogleCloudRunV2VolumeArray []GoogleCloudRunV2VolumeInput

func (GoogleCloudRunV2VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2Volume)(nil)).Elem()
}

func (i GoogleCloudRunV2VolumeArray) ToGoogleCloudRunV2VolumeArrayOutput() GoogleCloudRunV2VolumeArrayOutput {
	return i.ToGoogleCloudRunV2VolumeArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2VolumeArray) ToGoogleCloudRunV2VolumeArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2VolumeArrayOutput)
}

// Volume represents a named volume in a container.
type GoogleCloudRunV2VolumeOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2Volume)(nil)).Elem()
}

func (o GoogleCloudRunV2VolumeOutput) ToGoogleCloudRunV2VolumeOutput() GoogleCloudRunV2VolumeOutput {
	return o
}

func (o GoogleCloudRunV2VolumeOutput) ToGoogleCloudRunV2VolumeOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeOutput {
	return o
}

// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
func (o GoogleCloudRunV2VolumeOutput) CloudSqlInstance() GoogleCloudRunV2CloudSqlInstancePtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Volume) *GoogleCloudRunV2CloudSqlInstance { return v.CloudSqlInstance }).(GoogleCloudRunV2CloudSqlInstancePtrOutput)
}

// Volume's name.
func (o GoogleCloudRunV2VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Volume) string { return v.Name }).(pulumi.StringOutput)
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o GoogleCloudRunV2VolumeOutput) Secret() GoogleCloudRunV2SecretVolumeSourcePtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2Volume) *GoogleCloudRunV2SecretVolumeSource { return v.Secret }).(GoogleCloudRunV2SecretVolumeSourcePtrOutput)
}

type GoogleCloudRunV2VolumeArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2Volume)(nil)).Elem()
}

func (o GoogleCloudRunV2VolumeArrayOutput) ToGoogleCloudRunV2VolumeArrayOutput() GoogleCloudRunV2VolumeArrayOutput {
	return o
}

func (o GoogleCloudRunV2VolumeArrayOutput) ToGoogleCloudRunV2VolumeArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeArrayOutput {
	return o
}

func (o GoogleCloudRunV2VolumeArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2Volume {
		return vs[0].([]GoogleCloudRunV2Volume)[vs[1].(int)]
	}).(GoogleCloudRunV2VolumeOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type GoogleCloudRunV2VolumeMount struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	MountPath string `pulumi:"mountPath"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
}

// GoogleCloudRunV2VolumeMountInput is an input type that accepts GoogleCloudRunV2VolumeMountArgs and GoogleCloudRunV2VolumeMountOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2VolumeMountInput` via:
//
//	GoogleCloudRunV2VolumeMountArgs{...}
type GoogleCloudRunV2VolumeMountInput interface {
	pulumi.Input

	ToGoogleCloudRunV2VolumeMountOutput() GoogleCloudRunV2VolumeMountOutput
	ToGoogleCloudRunV2VolumeMountOutputWithContext(context.Context) GoogleCloudRunV2VolumeMountOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type GoogleCloudRunV2VolumeMountArgs struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// This must match the Name of a Volume.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GoogleCloudRunV2VolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2VolumeMount)(nil)).Elem()
}

func (i GoogleCloudRunV2VolumeMountArgs) ToGoogleCloudRunV2VolumeMountOutput() GoogleCloudRunV2VolumeMountOutput {
	return i.ToGoogleCloudRunV2VolumeMountOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2VolumeMountArgs) ToGoogleCloudRunV2VolumeMountOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2VolumeMountOutput)
}

// GoogleCloudRunV2VolumeMountArrayInput is an input type that accepts GoogleCloudRunV2VolumeMountArray and GoogleCloudRunV2VolumeMountArrayOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2VolumeMountArrayInput` via:
//
//	GoogleCloudRunV2VolumeMountArray{ GoogleCloudRunV2VolumeMountArgs{...} }
type GoogleCloudRunV2VolumeMountArrayInput interface {
	pulumi.Input

	ToGoogleCloudRunV2VolumeMountArrayOutput() GoogleCloudRunV2VolumeMountArrayOutput
	ToGoogleCloudRunV2VolumeMountArrayOutputWithContext(context.Context) GoogleCloudRunV2VolumeMountArrayOutput
}

type GoogleCloudRunV2VolumeMountArray []GoogleCloudRunV2VolumeMountInput

func (GoogleCloudRunV2VolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2VolumeMount)(nil)).Elem()
}

func (i GoogleCloudRunV2VolumeMountArray) ToGoogleCloudRunV2VolumeMountArrayOutput() GoogleCloudRunV2VolumeMountArrayOutput {
	return i.ToGoogleCloudRunV2VolumeMountArrayOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2VolumeMountArray) ToGoogleCloudRunV2VolumeMountArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2VolumeMountArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type GoogleCloudRunV2VolumeMountOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2VolumeMount)(nil)).Elem()
}

func (o GoogleCloudRunV2VolumeMountOutput) ToGoogleCloudRunV2VolumeMountOutput() GoogleCloudRunV2VolumeMountOutput {
	return o
}

func (o GoogleCloudRunV2VolumeMountOutput) ToGoogleCloudRunV2VolumeMountOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeMountOutput {
	return o
}

// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
func (o GoogleCloudRunV2VolumeMountOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VolumeMount) string { return v.MountPath }).(pulumi.StringOutput)
}

// This must match the Name of a Volume.
func (o GoogleCloudRunV2VolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

type GoogleCloudRunV2VolumeMountArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2VolumeMount)(nil)).Elem()
}

func (o GoogleCloudRunV2VolumeMountArrayOutput) ToGoogleCloudRunV2VolumeMountArrayOutput() GoogleCloudRunV2VolumeMountArrayOutput {
	return o
}

func (o GoogleCloudRunV2VolumeMountArrayOutput) ToGoogleCloudRunV2VolumeMountArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeMountArrayOutput {
	return o
}

func (o GoogleCloudRunV2VolumeMountArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2VolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2VolumeMount {
		return vs[0].([]GoogleCloudRunV2VolumeMount)[vs[1].(int)]
	}).(GoogleCloudRunV2VolumeMountOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type GoogleCloudRunV2VolumeMountResponse struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
	MountPath string `pulumi:"mountPath"`
	// This must match the Name of a Volume.
	Name string `pulumi:"name"`
}

// VolumeMount describes a mounting of a Volume within a container.
type GoogleCloudRunV2VolumeMountResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VolumeMountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2VolumeMountResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2VolumeMountResponseOutput) ToGoogleCloudRunV2VolumeMountResponseOutput() GoogleCloudRunV2VolumeMountResponseOutput {
	return o
}

func (o GoogleCloudRunV2VolumeMountResponseOutput) ToGoogleCloudRunV2VolumeMountResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeMountResponseOutput {
	return o
}

// Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
func (o GoogleCloudRunV2VolumeMountResponseOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VolumeMountResponse) string { return v.MountPath }).(pulumi.StringOutput)
}

// This must match the Name of a Volume.
func (o GoogleCloudRunV2VolumeMountResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VolumeMountResponse) string { return v.Name }).(pulumi.StringOutput)
}

type GoogleCloudRunV2VolumeMountResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VolumeMountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2VolumeMountResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2VolumeMountResponseArrayOutput) ToGoogleCloudRunV2VolumeMountResponseArrayOutput() GoogleCloudRunV2VolumeMountResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2VolumeMountResponseArrayOutput) ToGoogleCloudRunV2VolumeMountResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeMountResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2VolumeMountResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2VolumeMountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2VolumeMountResponse {
		return vs[0].([]GoogleCloudRunV2VolumeMountResponse)[vs[1].(int)]
	}).(GoogleCloudRunV2VolumeMountResponseOutput)
}

// Volume represents a named volume in a container.
type GoogleCloudRunV2VolumeResponse struct {
	// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
	CloudSqlInstance GoogleCloudRunV2CloudSqlInstanceResponse `pulumi:"cloudSqlInstance"`
	// Volume's name.
	Name string `pulumi:"name"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret GoogleCloudRunV2SecretVolumeSourceResponse `pulumi:"secret"`
}

// Volume represents a named volume in a container.
type GoogleCloudRunV2VolumeResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2VolumeResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2VolumeResponseOutput) ToGoogleCloudRunV2VolumeResponseOutput() GoogleCloudRunV2VolumeResponseOutput {
	return o
}

func (o GoogleCloudRunV2VolumeResponseOutput) ToGoogleCloudRunV2VolumeResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeResponseOutput {
	return o
}

// For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run.
func (o GoogleCloudRunV2VolumeResponseOutput) CloudSqlInstance() GoogleCloudRunV2CloudSqlInstanceResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VolumeResponse) GoogleCloudRunV2CloudSqlInstanceResponse {
		return v.CloudSqlInstance
	}).(GoogleCloudRunV2CloudSqlInstanceResponseOutput)
}

// Volume's name.
func (o GoogleCloudRunV2VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o GoogleCloudRunV2VolumeResponseOutput) Secret() GoogleCloudRunV2SecretVolumeSourceResponseOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VolumeResponse) GoogleCloudRunV2SecretVolumeSourceResponse { return v.Secret }).(GoogleCloudRunV2SecretVolumeSourceResponseOutput)
}

type GoogleCloudRunV2VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV2VolumeResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2VolumeResponseArrayOutput) ToGoogleCloudRunV2VolumeResponseArrayOutput() GoogleCloudRunV2VolumeResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2VolumeResponseArrayOutput) ToGoogleCloudRunV2VolumeResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV2VolumeResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV2VolumeResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV2VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV2VolumeResponse {
		return vs[0].([]GoogleCloudRunV2VolumeResponse)[vs[1].(int)]
	}).(GoogleCloudRunV2VolumeResponseOutput)
}

// VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
type GoogleCloudRunV2VpcAccess struct {
	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
	Connector *string `pulumi:"connector"`
	// Traffic VPC egress settings.
	Egress *GoogleCloudRunV2VpcAccessEgress `pulumi:"egress"`
}

// GoogleCloudRunV2VpcAccessInput is an input type that accepts GoogleCloudRunV2VpcAccessArgs and GoogleCloudRunV2VpcAccessOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2VpcAccessInput` via:
//
//	GoogleCloudRunV2VpcAccessArgs{...}
type GoogleCloudRunV2VpcAccessInput interface {
	pulumi.Input

	ToGoogleCloudRunV2VpcAccessOutput() GoogleCloudRunV2VpcAccessOutput
	ToGoogleCloudRunV2VpcAccessOutputWithContext(context.Context) GoogleCloudRunV2VpcAccessOutput
}

// VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
type GoogleCloudRunV2VpcAccessArgs struct {
	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
	Connector pulumi.StringPtrInput `pulumi:"connector"`
	// Traffic VPC egress settings.
	Egress GoogleCloudRunV2VpcAccessEgressPtrInput `pulumi:"egress"`
}

func (GoogleCloudRunV2VpcAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2VpcAccess)(nil)).Elem()
}

func (i GoogleCloudRunV2VpcAccessArgs) ToGoogleCloudRunV2VpcAccessOutput() GoogleCloudRunV2VpcAccessOutput {
	return i.ToGoogleCloudRunV2VpcAccessOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2VpcAccessArgs) ToGoogleCloudRunV2VpcAccessOutputWithContext(ctx context.Context) GoogleCloudRunV2VpcAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2VpcAccessOutput)
}

func (i GoogleCloudRunV2VpcAccessArgs) ToGoogleCloudRunV2VpcAccessPtrOutput() GoogleCloudRunV2VpcAccessPtrOutput {
	return i.ToGoogleCloudRunV2VpcAccessPtrOutputWithContext(context.Background())
}

func (i GoogleCloudRunV2VpcAccessArgs) ToGoogleCloudRunV2VpcAccessPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2VpcAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2VpcAccessOutput).ToGoogleCloudRunV2VpcAccessPtrOutputWithContext(ctx)
}

// GoogleCloudRunV2VpcAccessPtrInput is an input type that accepts GoogleCloudRunV2VpcAccessArgs, GoogleCloudRunV2VpcAccessPtr and GoogleCloudRunV2VpcAccessPtrOutput values.
// You can construct a concrete instance of `GoogleCloudRunV2VpcAccessPtrInput` via:
//
//	        GoogleCloudRunV2VpcAccessArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudRunV2VpcAccessPtrInput interface {
	pulumi.Input

	ToGoogleCloudRunV2VpcAccessPtrOutput() GoogleCloudRunV2VpcAccessPtrOutput
	ToGoogleCloudRunV2VpcAccessPtrOutputWithContext(context.Context) GoogleCloudRunV2VpcAccessPtrOutput
}

type googleCloudRunV2VpcAccessPtrType GoogleCloudRunV2VpcAccessArgs

func GoogleCloudRunV2VpcAccessPtr(v *GoogleCloudRunV2VpcAccessArgs) GoogleCloudRunV2VpcAccessPtrInput {
	return (*googleCloudRunV2VpcAccessPtrType)(v)
}

func (*googleCloudRunV2VpcAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2VpcAccess)(nil)).Elem()
}

func (i *googleCloudRunV2VpcAccessPtrType) ToGoogleCloudRunV2VpcAccessPtrOutput() GoogleCloudRunV2VpcAccessPtrOutput {
	return i.ToGoogleCloudRunV2VpcAccessPtrOutputWithContext(context.Background())
}

func (i *googleCloudRunV2VpcAccessPtrType) ToGoogleCloudRunV2VpcAccessPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2VpcAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudRunV2VpcAccessPtrOutput)
}

// VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
type GoogleCloudRunV2VpcAccessOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VpcAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2VpcAccess)(nil)).Elem()
}

func (o GoogleCloudRunV2VpcAccessOutput) ToGoogleCloudRunV2VpcAccessOutput() GoogleCloudRunV2VpcAccessOutput {
	return o
}

func (o GoogleCloudRunV2VpcAccessOutput) ToGoogleCloudRunV2VpcAccessOutputWithContext(ctx context.Context) GoogleCloudRunV2VpcAccessOutput {
	return o
}

func (o GoogleCloudRunV2VpcAccessOutput) ToGoogleCloudRunV2VpcAccessPtrOutput() GoogleCloudRunV2VpcAccessPtrOutput {
	return o.ToGoogleCloudRunV2VpcAccessPtrOutputWithContext(context.Background())
}

func (o GoogleCloudRunV2VpcAccessOutput) ToGoogleCloudRunV2VpcAccessPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2VpcAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudRunV2VpcAccess) *GoogleCloudRunV2VpcAccess {
		return &v
	}).(GoogleCloudRunV2VpcAccessPtrOutput)
}

// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
func (o GoogleCloudRunV2VpcAccessOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VpcAccess) *string { return v.Connector }).(pulumi.StringPtrOutput)
}

// Traffic VPC egress settings.
func (o GoogleCloudRunV2VpcAccessOutput) Egress() GoogleCloudRunV2VpcAccessEgressPtrOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VpcAccess) *GoogleCloudRunV2VpcAccessEgress { return v.Egress }).(GoogleCloudRunV2VpcAccessEgressPtrOutput)
}

type GoogleCloudRunV2VpcAccessPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VpcAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudRunV2VpcAccess)(nil)).Elem()
}

func (o GoogleCloudRunV2VpcAccessPtrOutput) ToGoogleCloudRunV2VpcAccessPtrOutput() GoogleCloudRunV2VpcAccessPtrOutput {
	return o
}

func (o GoogleCloudRunV2VpcAccessPtrOutput) ToGoogleCloudRunV2VpcAccessPtrOutputWithContext(ctx context.Context) GoogleCloudRunV2VpcAccessPtrOutput {
	return o
}

func (o GoogleCloudRunV2VpcAccessPtrOutput) Elem() GoogleCloudRunV2VpcAccessOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2VpcAccess) GoogleCloudRunV2VpcAccess {
		if v != nil {
			return *v
		}
		var ret GoogleCloudRunV2VpcAccess
		return ret
	}).(GoogleCloudRunV2VpcAccessOutput)
}

// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
func (o GoogleCloudRunV2VpcAccessPtrOutput) Connector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2VpcAccess) *string {
		if v == nil {
			return nil
		}
		return v.Connector
	}).(pulumi.StringPtrOutput)
}

// Traffic VPC egress settings.
func (o GoogleCloudRunV2VpcAccessPtrOutput) Egress() GoogleCloudRunV2VpcAccessEgressPtrOutput {
	return o.ApplyT(func(v *GoogleCloudRunV2VpcAccess) *GoogleCloudRunV2VpcAccessEgress {
		if v == nil {
			return nil
		}
		return v.Egress
	}).(GoogleCloudRunV2VpcAccessEgressPtrOutput)
}

// VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
type GoogleCloudRunV2VpcAccessResponse struct {
	// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
	Connector string `pulumi:"connector"`
	// Traffic VPC egress settings.
	Egress string `pulumi:"egress"`
}

// VPC Access settings. For more information on creating a VPC Connector, visit https://cloud.google.com/vpc/docs/configure-serverless-vpc-access For information on how to configure Cloud Run with an existing VPC Connector, visit https://cloud.google.com/run/docs/configuring/connecting-vpc
type GoogleCloudRunV2VpcAccessResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV2VpcAccessResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV2VpcAccessResponse)(nil)).Elem()
}

func (o GoogleCloudRunV2VpcAccessResponseOutput) ToGoogleCloudRunV2VpcAccessResponseOutput() GoogleCloudRunV2VpcAccessResponseOutput {
	return o
}

func (o GoogleCloudRunV2VpcAccessResponseOutput) ToGoogleCloudRunV2VpcAccessResponseOutputWithContext(ctx context.Context) GoogleCloudRunV2VpcAccessResponseOutput {
	return o
}

// VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}
func (o GoogleCloudRunV2VpcAccessResponseOutput) Connector() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VpcAccessResponse) string { return v.Connector }).(pulumi.StringOutput)
}

// Traffic VPC egress settings.
func (o GoogleCloudRunV2VpcAccessResponseOutput) Egress() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV2VpcAccessResponse) string { return v.Egress }).(pulumi.StringOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []GoogleIamV1AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// GoogleIamV1AuditConfigInput is an input type that accepts GoogleIamV1AuditConfigArgs and GoogleIamV1AuditConfigOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditConfigInput` via:
//
//	GoogleIamV1AuditConfigArgs{...}
type GoogleIamV1AuditConfigInput interface {
	pulumi.Input

	ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput
	ToGoogleIamV1AuditConfigOutputWithContext(context.Context) GoogleIamV1AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs GoogleIamV1AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (GoogleIamV1AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditConfigArgs) ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput {
	return i.ToGoogleIamV1AuditConfigOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditConfigArgs) ToGoogleIamV1AuditConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditConfigOutput)
}

// GoogleIamV1AuditConfigArrayInput is an input type that accepts GoogleIamV1AuditConfigArray and GoogleIamV1AuditConfigArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditConfigArrayInput` via:
//
//	GoogleIamV1AuditConfigArray{ GoogleIamV1AuditConfigArgs{...} }
type GoogleIamV1AuditConfigArrayInput interface {
	pulumi.Input

	ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput
	ToGoogleIamV1AuditConfigArrayOutputWithContext(context.Context) GoogleIamV1AuditConfigArrayOutput
}

type GoogleIamV1AuditConfigArray []GoogleIamV1AuditConfigInput

func (GoogleIamV1AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditConfigArray) ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput {
	return i.ToGoogleIamV1AuditConfigArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditConfigArray) ToGoogleIamV1AuditConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigOutput) ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput {
	return o
}

func (o GoogleIamV1AuditConfigOutput) ToGoogleIamV1AuditConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o GoogleIamV1AuditConfigOutput) AuditLogConfigs() GoogleIamV1AuditLogConfigArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfig) []GoogleIamV1AuditLogConfig { return v.AuditLogConfigs }).(GoogleIamV1AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o GoogleIamV1AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type GoogleIamV1AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigArrayOutput) ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigArrayOutput) ToGoogleIamV1AuditConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditConfig {
		return vs[0].([]GoogleIamV1AuditConfig)[vs[1].(int)]
	}).(GoogleIamV1AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []GoogleIamV1AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigResponseOutput) ToGoogleIamV1AuditConfigResponseOutput() GoogleIamV1AuditConfigResponseOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseOutput) ToGoogleIamV1AuditConfigResponseOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o GoogleIamV1AuditConfigResponseOutput) AuditLogConfigs() GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfigResponse) []GoogleIamV1AuditLogConfigResponse { return v.AuditLogConfigs }).(GoogleIamV1AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o GoogleIamV1AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type GoogleIamV1AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) ToGoogleIamV1AuditConfigResponseArrayOutput() GoogleIamV1AuditConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) ToGoogleIamV1AuditConfigResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditConfigResponse {
		return vs[0].([]GoogleIamV1AuditConfigResponse)[vs[1].(int)]
	}).(GoogleIamV1AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *GoogleIamV1AuditLogConfigLogType `pulumi:"logType"`
}

// GoogleIamV1AuditLogConfigInput is an input type that accepts GoogleIamV1AuditLogConfigArgs and GoogleIamV1AuditLogConfigOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditLogConfigInput` via:
//
//	GoogleIamV1AuditLogConfigArgs{...}
type GoogleIamV1AuditLogConfigInput interface {
	pulumi.Input

	ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput
	ToGoogleIamV1AuditLogConfigOutputWithContext(context.Context) GoogleIamV1AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType GoogleIamV1AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (GoogleIamV1AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditLogConfigArgs) ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput {
	return i.ToGoogleIamV1AuditLogConfigOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditLogConfigArgs) ToGoogleIamV1AuditLogConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditLogConfigOutput)
}

// GoogleIamV1AuditLogConfigArrayInput is an input type that accepts GoogleIamV1AuditLogConfigArray and GoogleIamV1AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditLogConfigArrayInput` via:
//
//	GoogleIamV1AuditLogConfigArray{ GoogleIamV1AuditLogConfigArgs{...} }
type GoogleIamV1AuditLogConfigArrayInput interface {
	pulumi.Input

	ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput
	ToGoogleIamV1AuditLogConfigArrayOutputWithContext(context.Context) GoogleIamV1AuditLogConfigArrayOutput
}

type GoogleIamV1AuditLogConfigArray []GoogleIamV1AuditLogConfigInput

func (GoogleIamV1AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditLogConfigArray) ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput {
	return i.ToGoogleIamV1AuditLogConfigArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditLogConfigArray) ToGoogleIamV1AuditLogConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigOutput) ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigOutput) ToGoogleIamV1AuditLogConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o GoogleIamV1AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o GoogleIamV1AuditLogConfigOutput) LogType() GoogleIamV1AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfig) *GoogleIamV1AuditLogConfigLogType { return v.LogType }).(GoogleIamV1AuditLogConfigLogTypePtrOutput)
}

type GoogleIamV1AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigArrayOutput) ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigArrayOutput) ToGoogleIamV1AuditLogConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditLogConfig {
		return vs[0].([]GoogleIamV1AuditLogConfig)[vs[1].(int)]
	}).(GoogleIamV1AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigResponseOutput) ToGoogleIamV1AuditLogConfigResponseOutput() GoogleIamV1AuditLogConfigResponseOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseOutput) ToGoogleIamV1AuditLogConfigResponseOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o GoogleIamV1AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o GoogleIamV1AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type GoogleIamV1AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) ToGoogleIamV1AuditLogConfigResponseArrayOutput() GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) ToGoogleIamV1AuditLogConfigResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditLogConfigResponse {
		return vs[0].([]GoogleIamV1AuditLogConfigResponse)[vs[1].(int)]
	}).(GoogleIamV1AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *GoogleTypeExpr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// GoogleIamV1BindingInput is an input type that accepts GoogleIamV1BindingArgs and GoogleIamV1BindingOutput values.
// You can construct a concrete instance of `GoogleIamV1BindingInput` via:
//
//	GoogleIamV1BindingArgs{...}
type GoogleIamV1BindingInput interface {
	pulumi.Input

	ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput
	ToGoogleIamV1BindingOutputWithContext(context.Context) GoogleIamV1BindingOutput
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition GoogleTypeExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (GoogleIamV1BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1Binding)(nil)).Elem()
}

func (i GoogleIamV1BindingArgs) ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput {
	return i.ToGoogleIamV1BindingOutputWithContext(context.Background())
}

func (i GoogleIamV1BindingArgs) ToGoogleIamV1BindingOutputWithContext(ctx context.Context) GoogleIamV1BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1BindingOutput)
}

// GoogleIamV1BindingArrayInput is an input type that accepts GoogleIamV1BindingArray and GoogleIamV1BindingArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1BindingArrayInput` via:
//
//	GoogleIamV1BindingArray{ GoogleIamV1BindingArgs{...} }
type GoogleIamV1BindingArrayInput interface {
	pulumi.Input

	ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput
	ToGoogleIamV1BindingArrayOutputWithContext(context.Context) GoogleIamV1BindingArrayOutput
}

type GoogleIamV1BindingArray []GoogleIamV1BindingInput

func (GoogleIamV1BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1Binding)(nil)).Elem()
}

func (i GoogleIamV1BindingArray) ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput {
	return i.ToGoogleIamV1BindingArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1BindingArray) ToGoogleIamV1BindingArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1Binding)(nil)).Elem()
}

func (o GoogleIamV1BindingOutput) ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput {
	return o
}

func (o GoogleIamV1BindingOutput) ToGoogleIamV1BindingOutputWithContext(ctx context.Context) GoogleIamV1BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o GoogleIamV1BindingOutput) Condition() GoogleTypeExprPtrOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) *GoogleTypeExpr { return v.Condition }).(GoogleTypeExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o GoogleIamV1BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o GoogleIamV1BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type GoogleIamV1BindingArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1Binding)(nil)).Elem()
}

func (o GoogleIamV1BindingArrayOutput) ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput {
	return o
}

func (o GoogleIamV1BindingArrayOutput) ToGoogleIamV1BindingArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingArrayOutput {
	return o
}

func (o GoogleIamV1BindingArrayOutput) Index(i pulumi.IntInput) GoogleIamV1BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1Binding {
		return vs[0].([]GoogleIamV1Binding)[vs[1].(int)]
	}).(GoogleIamV1BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition GoogleTypeExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1BindingResponse)(nil)).Elem()
}

func (o GoogleIamV1BindingResponseOutput) ToGoogleIamV1BindingResponseOutput() GoogleIamV1BindingResponseOutput {
	return o
}

func (o GoogleIamV1BindingResponseOutput) ToGoogleIamV1BindingResponseOutputWithContext(ctx context.Context) GoogleIamV1BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o GoogleIamV1BindingResponseOutput) Condition() GoogleTypeExprResponseOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) GoogleTypeExprResponse { return v.Condition }).(GoogleTypeExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o GoogleIamV1BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o GoogleIamV1BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type GoogleIamV1BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1BindingResponse)(nil)).Elem()
}

func (o GoogleIamV1BindingResponseArrayOutput) ToGoogleIamV1BindingResponseArrayOutput() GoogleIamV1BindingResponseArrayOutput {
	return o
}

func (o GoogleIamV1BindingResponseArrayOutput) ToGoogleIamV1BindingResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingResponseArrayOutput {
	return o
}

func (o GoogleIamV1BindingResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1BindingResponse {
		return vs[0].([]GoogleIamV1BindingResponse)[vs[1].(int)]
	}).(GoogleIamV1BindingResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExpr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// GoogleTypeExprInput is an input type that accepts GoogleTypeExprArgs and GoogleTypeExprOutput values.
// You can construct a concrete instance of `GoogleTypeExprInput` via:
//
//	GoogleTypeExprArgs{...}
type GoogleTypeExprInput interface {
	pulumi.Input

	ToGoogleTypeExprOutput() GoogleTypeExprOutput
	ToGoogleTypeExprOutputWithContext(context.Context) GoogleTypeExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (GoogleTypeExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeExpr)(nil)).Elem()
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprOutput() GoogleTypeExprOutput {
	return i.ToGoogleTypeExprOutputWithContext(context.Background())
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprOutputWithContext(ctx context.Context) GoogleTypeExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeExprOutput)
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return i.ToGoogleTypeExprPtrOutputWithContext(context.Background())
}

func (i GoogleTypeExprArgs) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeExprOutput).ToGoogleTypeExprPtrOutputWithContext(ctx)
}

// GoogleTypeExprPtrInput is an input type that accepts GoogleTypeExprArgs, GoogleTypeExprPtr and GoogleTypeExprPtrOutput values.
// You can construct a concrete instance of `GoogleTypeExprPtrInput` via:
//
//	        GoogleTypeExprArgs{...}
//
//	or:
//
//	        nil
type GoogleTypeExprPtrInput interface {
	pulumi.Input

	ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput
	ToGoogleTypeExprPtrOutputWithContext(context.Context) GoogleTypeExprPtrOutput
}

type googleTypeExprPtrType GoogleTypeExprArgs

func GoogleTypeExprPtr(v *GoogleTypeExprArgs) GoogleTypeExprPtrInput {
	return (*googleTypeExprPtrType)(v)
}

func (*googleTypeExprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeExpr)(nil)).Elem()
}

func (i *googleTypeExprPtrType) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return i.ToGoogleTypeExprPtrOutputWithContext(context.Background())
}

func (i *googleTypeExprPtrType) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprOutput struct{ *pulumi.OutputState }

func (GoogleTypeExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeExpr)(nil)).Elem()
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprOutput() GoogleTypeExprOutput {
	return o
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprOutputWithContext(ctx context.Context) GoogleTypeExprOutput {
	return o
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return o.ToGoogleTypeExprPtrOutputWithContext(context.Background())
}

func (o GoogleTypeExprOutput) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleTypeExpr) *GoogleTypeExpr {
		return &v
	}).(GoogleTypeExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o GoogleTypeExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o GoogleTypeExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o GoogleTypeExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o GoogleTypeExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeExpr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type GoogleTypeExprPtrOutput struct{ *pulumi.OutputState }

func (GoogleTypeExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeExpr)(nil)).Elem()
}

func (o GoogleTypeExprPtrOutput) ToGoogleTypeExprPtrOutput() GoogleTypeExprPtrOutput {
	return o
}

func (o GoogleTypeExprPtrOutput) ToGoogleTypeExprPtrOutputWithContext(ctx context.Context) GoogleTypeExprPtrOutput {
	return o
}

func (o GoogleTypeExprPtrOutput) Elem() GoogleTypeExprOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) GoogleTypeExpr {
		if v != nil {
			return *v
		}
		var ret GoogleTypeExpr
		return ret
	}).(GoogleTypeExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o GoogleTypeExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o GoogleTypeExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o GoogleTypeExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o GoogleTypeExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeExpr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExprResponseOutput struct{ *pulumi.OutputState }

func (GoogleTypeExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeExprResponse)(nil)).Elem()
}

func (o GoogleTypeExprResponseOutput) ToGoogleTypeExprResponseOutput() GoogleTypeExprResponseOutput {
	return o
}

func (o GoogleTypeExprResponseOutput) ToGoogleTypeExprResponseOutputWithContext(ctx context.Context) GoogleTypeExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o GoogleTypeExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o GoogleTypeExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o GoogleTypeExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o GoogleTypeExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2BinaryAuthorizationInput)(nil)).Elem(), GoogleCloudRunV2BinaryAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2BinaryAuthorizationPtrInput)(nil)).Elem(), GoogleCloudRunV2BinaryAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2CloudSqlInstanceInput)(nil)).Elem(), GoogleCloudRunV2CloudSqlInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2CloudSqlInstancePtrInput)(nil)).Elem(), GoogleCloudRunV2CloudSqlInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2ContainerInput)(nil)).Elem(), GoogleCloudRunV2ContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2ContainerArrayInput)(nil)).Elem(), GoogleCloudRunV2ContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2ContainerPortInput)(nil)).Elem(), GoogleCloudRunV2ContainerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2ContainerPortArrayInput)(nil)).Elem(), GoogleCloudRunV2ContainerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2EnvVarInput)(nil)).Elem(), GoogleCloudRunV2EnvVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2EnvVarArrayInput)(nil)).Elem(), GoogleCloudRunV2EnvVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2EnvVarSourceInput)(nil)).Elem(), GoogleCloudRunV2EnvVarSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2EnvVarSourcePtrInput)(nil)).Elem(), GoogleCloudRunV2EnvVarSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2ExecutionTemplateInput)(nil)).Elem(), GoogleCloudRunV2ExecutionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2GRPCActionInput)(nil)).Elem(), GoogleCloudRunV2GRPCActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2GRPCActionPtrInput)(nil)).Elem(), GoogleCloudRunV2GRPCActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2HTTPGetActionInput)(nil)).Elem(), GoogleCloudRunV2HTTPGetActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2HTTPGetActionPtrInput)(nil)).Elem(), GoogleCloudRunV2HTTPGetActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2HTTPHeaderInput)(nil)).Elem(), GoogleCloudRunV2HTTPHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2HTTPHeaderArrayInput)(nil)).Elem(), GoogleCloudRunV2HTTPHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2ProbeInput)(nil)).Elem(), GoogleCloudRunV2ProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2ProbePtrInput)(nil)).Elem(), GoogleCloudRunV2ProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2ResourceRequirementsInput)(nil)).Elem(), GoogleCloudRunV2ResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2ResourceRequirementsPtrInput)(nil)).Elem(), GoogleCloudRunV2ResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2RevisionScalingInput)(nil)).Elem(), GoogleCloudRunV2RevisionScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2RevisionScalingPtrInput)(nil)).Elem(), GoogleCloudRunV2RevisionScalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2RevisionTemplateInput)(nil)).Elem(), GoogleCloudRunV2RevisionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2SecretKeySelectorInput)(nil)).Elem(), GoogleCloudRunV2SecretKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2SecretKeySelectorPtrInput)(nil)).Elem(), GoogleCloudRunV2SecretKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2SecretVolumeSourceInput)(nil)).Elem(), GoogleCloudRunV2SecretVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2SecretVolumeSourcePtrInput)(nil)).Elem(), GoogleCloudRunV2SecretVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2TCPSocketActionInput)(nil)).Elem(), GoogleCloudRunV2TCPSocketActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2TCPSocketActionPtrInput)(nil)).Elem(), GoogleCloudRunV2TCPSocketActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2TaskTemplateInput)(nil)).Elem(), GoogleCloudRunV2TaskTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2TrafficTargetInput)(nil)).Elem(), GoogleCloudRunV2TrafficTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2TrafficTargetArrayInput)(nil)).Elem(), GoogleCloudRunV2TrafficTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2VersionToPathInput)(nil)).Elem(), GoogleCloudRunV2VersionToPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2VersionToPathArrayInput)(nil)).Elem(), GoogleCloudRunV2VersionToPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2VolumeInput)(nil)).Elem(), GoogleCloudRunV2VolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2VolumeArrayInput)(nil)).Elem(), GoogleCloudRunV2VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2VolumeMountInput)(nil)).Elem(), GoogleCloudRunV2VolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2VolumeMountArrayInput)(nil)).Elem(), GoogleCloudRunV2VolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2VpcAccessInput)(nil)).Elem(), GoogleCloudRunV2VpcAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudRunV2VpcAccessPtrInput)(nil)).Elem(), GoogleCloudRunV2VpcAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditConfigInput)(nil)).Elem(), GoogleIamV1AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditConfigArrayInput)(nil)).Elem(), GoogleIamV1AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditLogConfigInput)(nil)).Elem(), GoogleIamV1AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditLogConfigArrayInput)(nil)).Elem(), GoogleIamV1AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1BindingInput)(nil)).Elem(), GoogleIamV1BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1BindingArrayInput)(nil)).Elem(), GoogleIamV1BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeExprInput)(nil)).Elem(), GoogleTypeExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeExprPtrInput)(nil)).Elem(), GoogleTypeExprArgs{})
	pulumi.RegisterOutputType(GoogleCloudRunV2BinaryAuthorizationOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2BinaryAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2BinaryAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2CloudSqlInstanceOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2CloudSqlInstancePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2CloudSqlInstanceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ConditionResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ContainerOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ContainerArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ContainerPortOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ContainerPortArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ContainerPortResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ContainerPortResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ContainerResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2EnvVarOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2EnvVarArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2EnvVarResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2EnvVarResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2EnvVarSourceOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2EnvVarSourcePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2EnvVarSourceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ExecutionReferenceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ExecutionTemplateOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ExecutionTemplateResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2GRPCActionOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2GRPCActionPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2GRPCActionResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2HTTPGetActionOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2HTTPGetActionPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2HTTPGetActionResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2HTTPHeaderOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2HTTPHeaderArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2HTTPHeaderResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2HTTPHeaderResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ProbeOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ProbePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ProbeResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ResourceRequirementsOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2ResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2RevisionScalingOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2RevisionScalingPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2RevisionScalingResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2RevisionTemplateOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2RevisionTemplateResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2SecretKeySelectorOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2SecretKeySelectorPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2SecretKeySelectorResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2SecretVolumeSourceOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2SecretVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2SecretVolumeSourceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TCPSocketActionOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TCPSocketActionPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TCPSocketActionResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TaskTemplateOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TaskTemplateResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TrafficTargetOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TrafficTargetArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TrafficTargetResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TrafficTargetResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TrafficTargetStatusResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2TrafficTargetStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VersionToPathOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VersionToPathArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VersionToPathResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VersionToPathResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VolumeOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VolumeArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VolumeMountOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VolumeMountArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VolumeMountResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VolumeMountResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VolumeResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VolumeResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VpcAccessOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VpcAccessPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV2VpcAccessResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleTypeExprOutput{})
	pulumi.RegisterOutputType(GoogleTypeExprPtrOutput{})
	pulumi.RegisterOutputType(GoogleTypeExprResponseOutput{})
}
