// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a new domain mapping.
type Domainmapping struct {
	pulumi.CustomResourceState

	// The API version for this call such as "domains.cloudrun.com/v1".
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// The kind of resource, in this case "DomainMapping".
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Metadata associated with this BuildTemplate.
	Metadata ObjectMetaResponseOutput `pulumi:"metadata"`
	// The spec for this DomainMapping.
	Spec DomainMappingSpecResponseOutput `pulumi:"spec"`
	// The current status of the DomainMapping.
	Status DomainMappingStatusResponseOutput `pulumi:"status"`
}

// NewDomainmapping registers a new resource with the given unique name, arguments, and options.
func NewDomainmapping(ctx *pulumi.Context,
	name string, args *DomainmappingArgs, opts ...pulumi.ResourceOption) (*Domainmapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainmappingsId == nil {
		return nil, errors.New("invalid value for required argument 'DomainmappingsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource Domainmapping
	err := ctx.RegisterResource("google-native:run/v1:Domainmapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainmapping gets an existing Domainmapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainmapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainmappingState, opts ...pulumi.ResourceOption) (*Domainmapping, error) {
	var resource Domainmapping
	err := ctx.ReadResource("google-native:run/v1:Domainmapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domainmapping resources.
type domainmappingState struct {
	// The API version for this call such as "domains.cloudrun.com/v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// The kind of resource, in this case "DomainMapping".
	Kind *string `pulumi:"kind"`
	// Metadata associated with this BuildTemplate.
	Metadata *ObjectMetaResponse `pulumi:"metadata"`
	// The spec for this DomainMapping.
	Spec *DomainMappingSpecResponse `pulumi:"spec"`
	// The current status of the DomainMapping.
	Status *DomainMappingStatusResponse `pulumi:"status"`
}

type DomainmappingState struct {
	// The API version for this call such as "domains.cloudrun.com/v1".
	ApiVersion pulumi.StringPtrInput
	// The kind of resource, in this case "DomainMapping".
	Kind pulumi.StringPtrInput
	// Metadata associated with this BuildTemplate.
	Metadata ObjectMetaResponsePtrInput
	// The spec for this DomainMapping.
	Spec DomainMappingSpecResponsePtrInput
	// The current status of the DomainMapping.
	Status DomainMappingStatusResponsePtrInput
}

func (DomainmappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainmappingState)(nil)).Elem()
}

type domainmappingArgs struct {
	// The API version for this call such as "domains.cloudrun.com/v1".
	ApiVersion       *string `pulumi:"apiVersion"`
	DomainmappingsId string  `pulumi:"domainmappingsId"`
	DryRun           *string `pulumi:"dryRun"`
	// The kind of resource, in this case "DomainMapping".
	Kind        *string `pulumi:"kind"`
	LocationsId string  `pulumi:"locationsId"`
	// Metadata associated with this BuildTemplate.
	Metadata   *ObjectMeta `pulumi:"metadata"`
	ProjectsId string      `pulumi:"projectsId"`
	// The spec for this DomainMapping.
	Spec *DomainMappingSpec `pulumi:"spec"`
	// The current status of the DomainMapping.
	Status *DomainMappingStatus `pulumi:"status"`
}

// The set of arguments for constructing a Domainmapping resource.
type DomainmappingArgs struct {
	// The API version for this call such as "domains.cloudrun.com/v1".
	ApiVersion       pulumi.StringPtrInput
	DomainmappingsId pulumi.StringInput
	DryRun           pulumi.StringPtrInput
	// The kind of resource, in this case "DomainMapping".
	Kind        pulumi.StringPtrInput
	LocationsId pulumi.StringInput
	// Metadata associated with this BuildTemplate.
	Metadata   ObjectMetaPtrInput
	ProjectsId pulumi.StringInput
	// The spec for this DomainMapping.
	Spec DomainMappingSpecPtrInput
	// The current status of the DomainMapping.
	Status DomainMappingStatusPtrInput
}

func (DomainmappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainmappingArgs)(nil)).Elem()
}

type DomainmappingInput interface {
	pulumi.Input

	ToDomainmappingOutput() DomainmappingOutput
	ToDomainmappingOutputWithContext(ctx context.Context) DomainmappingOutput
}

func (*Domainmapping) ElementType() reflect.Type {
	return reflect.TypeOf((*Domainmapping)(nil))
}

func (i *Domainmapping) ToDomainmappingOutput() DomainmappingOutput {
	return i.ToDomainmappingOutputWithContext(context.Background())
}

func (i *Domainmapping) ToDomainmappingOutputWithContext(ctx context.Context) DomainmappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainmappingOutput)
}

type DomainmappingOutput struct {
	*pulumi.OutputState
}

func (DomainmappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Domainmapping)(nil))
}

func (o DomainmappingOutput) ToDomainmappingOutput() DomainmappingOutput {
	return o
}

func (o DomainmappingOutput) ToDomainmappingOutputWithContext(ctx context.Context) DomainmappingOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DomainmappingOutput{})
}
