// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a service.
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	var rv LookupServiceResult
	err := ctx.Invoke("google-native:run/v1:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupServiceArgs struct {
	Location  string  `pulumi:"location"`
	Project   *string `pulumi:"project"`
	ServiceId string  `pulumi:"serviceId"`
}

type LookupServiceResult struct {
	// The API version for this call such as "serving.knative.dev/v1".
	ApiVersion string `pulumi:"apiVersion"`
	// The kind of resource, in this case "Service".
	Kind string `pulumi:"kind"`
	// Metadata associated with this Service, including name, namespace, labels, and annotations. Cloud Run (fully managed) uses the following annotation keys to configure features on a Service: * `run.googleapis.com/ingress` sets the ingress settings for the Service. See [the ingress settings documentation](/run/docs/securing/ingress) for details on configuring ingress settings. * `run.googleapis.com/ingress-status` is output-only and contains the currently active ingress settings for the Service. `run.googleapis.com/ingress-status` may differ from `run.googleapis.com/ingress` while the system is processing a change to `run.googleapis.com/ingress` or if the system failed to process a change to `run.googleapis.com/ingress`. When the system has processed all changes successfully `run.googleapis.com/ingress-status` and `run.googleapis.com/ingress` are equal.
	Metadata ObjectMetaResponse `pulumi:"metadata"`
	// Spec holds the desired state of the Service (from the client).
	Spec ServiceSpecResponse `pulumi:"spec"`
	// Status communicates the observed state of the Service (from the controller).
	Status ServiceStatusResponse `pulumi:"status"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceResult, error) {
			args := v.(LookupServiceArgs)
			r, err := LookupService(ctx, &args, opts...)
			return *r, err
		}).(LookupServiceResultOutput)
}

type LookupServiceOutputArgs struct {
	Location  pulumi.StringInput    `pulumi:"location"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
	ServiceId pulumi.StringInput    `pulumi:"serviceId"`
}

func (LookupServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceArgs)(nil)).Elem()
}

type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutput() LookupServiceResultOutput {
	return o
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutputWithContext(ctx context.Context) LookupServiceResultOutput {
	return o
}

// The API version for this call such as "serving.knative.dev/v1".
func (o LookupServiceResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// The kind of resource, in this case "Service".
func (o LookupServiceResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Metadata associated with this Service, including name, namespace, labels, and annotations. Cloud Run (fully managed) uses the following annotation keys to configure features on a Service: * `run.googleapis.com/ingress` sets the ingress settings for the Service. See [the ingress settings documentation](/run/docs/securing/ingress) for details on configuring ingress settings. * `run.googleapis.com/ingress-status` is output-only and contains the currently active ingress settings for the Service. `run.googleapis.com/ingress-status` may differ from `run.googleapis.com/ingress` while the system is processing a change to `run.googleapis.com/ingress` or if the system failed to process a change to `run.googleapis.com/ingress`. When the system has processed all changes successfully `run.googleapis.com/ingress-status` and `run.googleapis.com/ingress` are equal.
func (o LookupServiceResultOutput) Metadata() ObjectMetaResponseOutput {
	return o.ApplyT(func(v LookupServiceResult) ObjectMetaResponse { return v.Metadata }).(ObjectMetaResponseOutput)
}

// Spec holds the desired state of the Service (from the client).
func (o LookupServiceResultOutput) Spec() ServiceSpecResponseOutput {
	return o.ApplyT(func(v LookupServiceResult) ServiceSpecResponse { return v.Spec }).(ServiceSpecResponseOutput)
}

// Status communicates the observed state of the Service (from the controller).
func (o LookupServiceResultOutput) Status() ServiceStatusResponseOutput {
	return o.ApplyT(func(v LookupServiceResult) ServiceStatusResponse { return v.Status }).(ServiceStatusResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceResultOutput{})
}
