// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Information for connecting over HTTP(s).
type Addressable struct {
	Url *string `pulumi:"url"`
}

// Information for connecting over HTTP(s).
type AddressableResponse struct {
	Url string `pulumi:"url"`
}

// Information for connecting over HTTP(s).
type AddressableResponseOutput struct{ *pulumi.OutputState }

func (AddressableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressableResponse)(nil)).Elem()
}

func (o AddressableResponseOutput) ToAddressableResponseOutput() AddressableResponseOutput {
	return o
}

func (o AddressableResponseOutput) ToAddressableResponseOutputWithContext(ctx context.Context) AddressableResponseOutput {
	return o
}

func (o AddressableResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v AddressableResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Not supported by Cloud Run. ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSource struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap must be defined.
	Optional *bool `pulumi:"optional"`
}

// ConfigMapEnvSourceInput is an input type that accepts ConfigMapEnvSourceArgs and ConfigMapEnvSourceOutput values.
// You can construct a concrete instance of `ConfigMapEnvSourceInput` via:
//
//	ConfigMapEnvSourceArgs{...}
type ConfigMapEnvSourceInput interface {
	pulumi.Input

	ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput
	ToConfigMapEnvSourceOutputWithContext(context.Context) ConfigMapEnvSourceOutput
}

// Not supported by Cloud Run. ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceArgs struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferencePtrInput `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap must be defined.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapEnvSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSource)(nil)).Elem()
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput {
	return i.ToConfigMapEnvSourceOutputWithContext(context.Background())
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourceOutputWithContext(ctx context.Context) ConfigMapEnvSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourceOutput)
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return i.ToConfigMapEnvSourcePtrOutputWithContext(context.Background())
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourceOutput).ToConfigMapEnvSourcePtrOutputWithContext(ctx)
}

// ConfigMapEnvSourcePtrInput is an input type that accepts ConfigMapEnvSourceArgs, ConfigMapEnvSourcePtr and ConfigMapEnvSourcePtrOutput values.
// You can construct a concrete instance of `ConfigMapEnvSourcePtrInput` via:
//
//	        ConfigMapEnvSourceArgs{...}
//
//	or:
//
//	        nil
type ConfigMapEnvSourcePtrInput interface {
	pulumi.Input

	ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput
	ToConfigMapEnvSourcePtrOutputWithContext(context.Context) ConfigMapEnvSourcePtrOutput
}

type configMapEnvSourcePtrType ConfigMapEnvSourceArgs

func ConfigMapEnvSourcePtr(v *ConfigMapEnvSourceArgs) ConfigMapEnvSourcePtrInput {
	return (*configMapEnvSourcePtrType)(v)
}

func (*configMapEnvSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapEnvSource)(nil)).Elem()
}

func (i *configMapEnvSourcePtrType) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return i.ToConfigMapEnvSourcePtrOutputWithContext(context.Background())
}

func (i *configMapEnvSourcePtrType) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourcePtrOutput)
}

// Not supported by Cloud Run. ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceOutput struct{ *pulumi.OutputState }

func (ConfigMapEnvSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSource)(nil)).Elem()
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput {
	return o
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourceOutputWithContext(ctx context.Context) ConfigMapEnvSourceOutput {
	return o
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return o.ToConfigMapEnvSourcePtrOutputWithContext(context.Background())
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapEnvSource) *ConfigMapEnvSource {
		return &v
	}).(ConfigMapEnvSourcePtrOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o ConfigMapEnvSourceOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v ConfigMapEnvSource) *LocalObjectReference { return v.LocalObjectReference }).(LocalObjectReferencePtrOutput)
}

// The ConfigMap to select from.
func (o ConfigMapEnvSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapEnvSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap must be defined.
func (o ConfigMapEnvSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapEnvSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapEnvSourcePtrOutput struct{ *pulumi.OutputState }

func (ConfigMapEnvSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapEnvSource)(nil)).Elem()
}

func (o ConfigMapEnvSourcePtrOutput) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return o
}

func (o ConfigMapEnvSourcePtrOutput) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return o
}

func (o ConfigMapEnvSourcePtrOutput) Elem() ConfigMapEnvSourceOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) ConfigMapEnvSource {
		if v != nil {
			return *v
		}
		var ret ConfigMapEnvSource
		return ret
	}).(ConfigMapEnvSourceOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o ConfigMapEnvSourcePtrOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.LocalObjectReference
	}).(LocalObjectReferencePtrOutput)
}

// The ConfigMap to select from.
func (o ConfigMapEnvSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap must be defined.
func (o ConfigMapEnvSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Not supported by Cloud Run. ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceResponse struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponse `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name string `pulumi:"name"`
	// Specify whether the ConfigMap must be defined.
	Optional bool `pulumi:"optional"`
}

// Not supported by Cloud Run. ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceResponseOutput struct{ *pulumi.OutputState }

func (ConfigMapEnvSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSourceResponse)(nil)).Elem()
}

func (o ConfigMapEnvSourceResponseOutput) ToConfigMapEnvSourceResponseOutput() ConfigMapEnvSourceResponseOutput {
	return o
}

func (o ConfigMapEnvSourceResponseOutput) ToConfigMapEnvSourceResponseOutputWithContext(ctx context.Context) ConfigMapEnvSourceResponseOutput {
	return o
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o ConfigMapEnvSourceResponseOutput) LocalObjectReference() LocalObjectReferenceResponseOutput {
	return o.ApplyT(func(v ConfigMapEnvSourceResponse) LocalObjectReferenceResponse { return v.LocalObjectReference }).(LocalObjectReferenceResponseOutput)
}

// The ConfigMap to select from.
func (o ConfigMapEnvSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapEnvSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specify whether the ConfigMap must be defined.
func (o ConfigMapEnvSourceResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigMapEnvSourceResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// Not supported by Cloud Run.
type ConfigMapKeySelector struct {
	// Not supported by Cloud Run.
	Key string `pulumi:"key"`
	// Not supported by Cloud Run.
	LocalObjectReference *LocalObjectReference `pulumi:"localObjectReference"`
	// Not supported by Cloud Run.
	Name string `pulumi:"name"`
	// Not supported by Cloud Run.
	Optional *bool `pulumi:"optional"`
}

// ConfigMapKeySelectorInput is an input type that accepts ConfigMapKeySelectorArgs and ConfigMapKeySelectorOutput values.
// You can construct a concrete instance of `ConfigMapKeySelectorInput` via:
//
//	ConfigMapKeySelectorArgs{...}
type ConfigMapKeySelectorInput interface {
	pulumi.Input

	ToConfigMapKeySelectorOutput() ConfigMapKeySelectorOutput
	ToConfigMapKeySelectorOutputWithContext(context.Context) ConfigMapKeySelectorOutput
}

// Not supported by Cloud Run.
type ConfigMapKeySelectorArgs struct {
	// Not supported by Cloud Run.
	Key pulumi.StringInput `pulumi:"key"`
	// Not supported by Cloud Run.
	LocalObjectReference LocalObjectReferencePtrInput `pulumi:"localObjectReference"`
	// Not supported by Cloud Run.
	Name pulumi.StringInput `pulumi:"name"`
	// Not supported by Cloud Run.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapKeySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelector)(nil)).Elem()
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorOutput() ConfigMapKeySelectorOutput {
	return i.ToConfigMapKeySelectorOutputWithContext(context.Background())
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorOutputWithContext(ctx context.Context) ConfigMapKeySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorOutput)
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return i.ToConfigMapKeySelectorPtrOutputWithContext(context.Background())
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorOutput).ToConfigMapKeySelectorPtrOutputWithContext(ctx)
}

// ConfigMapKeySelectorPtrInput is an input type that accepts ConfigMapKeySelectorArgs, ConfigMapKeySelectorPtr and ConfigMapKeySelectorPtrOutput values.
// You can construct a concrete instance of `ConfigMapKeySelectorPtrInput` via:
//
//	        ConfigMapKeySelectorArgs{...}
//
//	or:
//
//	        nil
type ConfigMapKeySelectorPtrInput interface {
	pulumi.Input

	ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput
	ToConfigMapKeySelectorPtrOutputWithContext(context.Context) ConfigMapKeySelectorPtrOutput
}

type configMapKeySelectorPtrType ConfigMapKeySelectorArgs

func ConfigMapKeySelectorPtr(v *ConfigMapKeySelectorArgs) ConfigMapKeySelectorPtrInput {
	return (*configMapKeySelectorPtrType)(v)
}

func (*configMapKeySelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapKeySelector)(nil)).Elem()
}

func (i *configMapKeySelectorPtrType) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return i.ToConfigMapKeySelectorPtrOutputWithContext(context.Background())
}

func (i *configMapKeySelectorPtrType) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorPtrOutput)
}

// Not supported by Cloud Run.
type ConfigMapKeySelectorOutput struct{ *pulumi.OutputState }

func (ConfigMapKeySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelector)(nil)).Elem()
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorOutput() ConfigMapKeySelectorOutput {
	return o
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorOutputWithContext(ctx context.Context) ConfigMapKeySelectorOutput {
	return o
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return o.ToConfigMapKeySelectorPtrOutputWithContext(context.Background())
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapKeySelector) *ConfigMapKeySelector {
		return &v
	}).(ConfigMapKeySelectorPtrOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) string { return v.Key }).(pulumi.StringOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) *LocalObjectReference { return v.LocalObjectReference }).(LocalObjectReferencePtrOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) string { return v.Name }).(pulumi.StringOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapKeySelectorPtrOutput struct{ *pulumi.OutputState }

func (ConfigMapKeySelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapKeySelector)(nil)).Elem()
}

func (o ConfigMapKeySelectorPtrOutput) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return o
}

func (o ConfigMapKeySelectorPtrOutput) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return o
}

func (o ConfigMapKeySelectorPtrOutput) Elem() ConfigMapKeySelectorOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) ConfigMapKeySelector {
		if v != nil {
			return *v
		}
		var ret ConfigMapKeySelector
		return ret
	}).(ConfigMapKeySelectorOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorPtrOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.LocalObjectReference
	}).(LocalObjectReferencePtrOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Not supported by Cloud Run.
type ConfigMapKeySelectorResponse struct {
	// Not supported by Cloud Run.
	Key string `pulumi:"key"`
	// Not supported by Cloud Run.
	LocalObjectReference LocalObjectReferenceResponse `pulumi:"localObjectReference"`
	// Not supported by Cloud Run.
	Name string `pulumi:"name"`
	// Not supported by Cloud Run.
	Optional bool `pulumi:"optional"`
}

// Not supported by Cloud Run.
type ConfigMapKeySelectorResponseOutput struct{ *pulumi.OutputState }

func (ConfigMapKeySelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelectorResponse)(nil)).Elem()
}

func (o ConfigMapKeySelectorResponseOutput) ToConfigMapKeySelectorResponseOutput() ConfigMapKeySelectorResponseOutput {
	return o
}

func (o ConfigMapKeySelectorResponseOutput) ToConfigMapKeySelectorResponseOutputWithContext(ctx context.Context) ConfigMapKeySelectorResponseOutput {
	return o
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorResponseOutput) LocalObjectReference() LocalObjectReferenceResponseOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorResponse) LocalObjectReferenceResponse { return v.LocalObjectReference }).(LocalObjectReferenceResponseOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Not supported by Cloud Run.
func (o ConfigMapKeySelectorResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// Not supported by Cloud Run. Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSource struct {
	// (Optional) Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items []KeyToPath `pulumi:"items"`
	// Name of the config.
	Name *string `pulumi:"name"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional *bool `pulumi:"optional"`
}

// ConfigMapVolumeSourceInput is an input type that accepts ConfigMapVolumeSourceArgs and ConfigMapVolumeSourceOutput values.
// You can construct a concrete instance of `ConfigMapVolumeSourceInput` via:
//
//	ConfigMapVolumeSourceArgs{...}
type ConfigMapVolumeSourceInput interface {
	pulumi.Input

	ToConfigMapVolumeSourceOutput() ConfigMapVolumeSourceOutput
	ToConfigMapVolumeSourceOutputWithContext(context.Context) ConfigMapVolumeSourceOutput
}

// Not supported by Cloud Run. Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSourceArgs struct {
	// (Optional) Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items KeyToPathArrayInput `pulumi:"items"`
	// Name of the config.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSource)(nil)).Elem()
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourceOutput() ConfigMapVolumeSourceOutput {
	return i.ToConfigMapVolumeSourceOutputWithContext(context.Background())
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourceOutputWithContext(ctx context.Context) ConfigMapVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourceOutput)
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return i.ToConfigMapVolumeSourcePtrOutputWithContext(context.Background())
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourceOutput).ToConfigMapVolumeSourcePtrOutputWithContext(ctx)
}

// ConfigMapVolumeSourcePtrInput is an input type that accepts ConfigMapVolumeSourceArgs, ConfigMapVolumeSourcePtr and ConfigMapVolumeSourcePtrOutput values.
// You can construct a concrete instance of `ConfigMapVolumeSourcePtrInput` via:
//
//	        ConfigMapVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type ConfigMapVolumeSourcePtrInput interface {
	pulumi.Input

	ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput
	ToConfigMapVolumeSourcePtrOutputWithContext(context.Context) ConfigMapVolumeSourcePtrOutput
}

type configMapVolumeSourcePtrType ConfigMapVolumeSourceArgs

func ConfigMapVolumeSourcePtr(v *ConfigMapVolumeSourceArgs) ConfigMapVolumeSourcePtrInput {
	return (*configMapVolumeSourcePtrType)(v)
}

func (*configMapVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapVolumeSource)(nil)).Elem()
}

func (i *configMapVolumeSourcePtrType) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return i.ToConfigMapVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *configMapVolumeSourcePtrType) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourcePtrOutput)
}

// Not supported by Cloud Run. Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSourceOutput struct{ *pulumi.OutputState }

func (ConfigMapVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSource)(nil)).Elem()
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourceOutput() ConfigMapVolumeSourceOutput {
	return o
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourceOutputWithContext(ctx context.Context) ConfigMapVolumeSourceOutput {
	return o
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return o.ToConfigMapVolumeSourcePtrOutputWithContext(context.Background())
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapVolumeSource) *ConfigMapVolumeSource {
		return &v
	}).(ConfigMapVolumeSourcePtrOutput)
}

// (Optional) Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ConfigMapVolumeSourceOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
func (o ConfigMapVolumeSourceOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) []KeyToPath { return v.Items }).(KeyToPathArrayOutput)
}

// Name of the config.
func (o ConfigMapVolumeSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the Secret or its keys must be defined.
func (o ConfigMapVolumeSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (ConfigMapVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapVolumeSource)(nil)).Elem()
}

func (o ConfigMapVolumeSourcePtrOutput) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return o
}

func (o ConfigMapVolumeSourcePtrOutput) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return o
}

func (o ConfigMapVolumeSourcePtrOutput) Elem() ConfigMapVolumeSourceOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) ConfigMapVolumeSource {
		if v != nil {
			return *v
		}
		var ret ConfigMapVolumeSource
		return ret
	}).(ConfigMapVolumeSourceOutput)
}

// (Optional) Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ConfigMapVolumeSourcePtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
func (o ConfigMapVolumeSourcePtrOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) []KeyToPath {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathArrayOutput)
}

// Name of the config.
func (o ConfigMapVolumeSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the Secret or its keys must be defined.
func (o ConfigMapVolumeSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Not supported by Cloud Run. Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSourceResponse struct {
	// (Optional) Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode int `pulumi:"defaultMode"`
	// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items []KeyToPathResponse `pulumi:"items"`
	// Name of the config.
	Name string `pulumi:"name"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional bool `pulumi:"optional"`
}

// Not supported by Cloud Run. Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSourceResponseOutput struct{ *pulumi.OutputState }

func (ConfigMapVolumeSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSourceResponse)(nil)).Elem()
}

func (o ConfigMapVolumeSourceResponseOutput) ToConfigMapVolumeSourceResponseOutput() ConfigMapVolumeSourceResponseOutput {
	return o
}

func (o ConfigMapVolumeSourceResponseOutput) ToConfigMapVolumeSourceResponseOutputWithContext(ctx context.Context) ConfigMapVolumeSourceResponseOutput {
	return o
}

// (Optional) Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ConfigMapVolumeSourceResponseOutput) DefaultMode() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourceResponse) int { return v.DefaultMode }).(pulumi.IntOutput)
}

// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
func (o ConfigMapVolumeSourceResponseOutput) Items() KeyToPathResponseArrayOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourceResponse) []KeyToPathResponse { return v.Items }).(KeyToPathResponseArrayOutput)
}

// Name of the config.
func (o ConfigMapVolumeSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) Specify whether the Secret or its keys must be defined.
func (o ConfigMapVolumeSourceResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourceResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type Container struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references are not supported in Cloud Run.
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container. EnvVar with duplicate names are generally allowed; if referencing a secret, the name must be unique for the container. For non-secret EnvVar names, the Container will only get the last-declared one.
	Env []EnvVar `pulumi:"env"`
	// Not supported by Cloud Run.
	EnvFrom []EnvFromSource `pulumi:"envFrom"`
	// Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.
	Image string `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails.
	LivenessProbe *Probe `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL (RFC 1123).
	Name *string `pulumi:"name"`
	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports []ContainerPort `pulumi:"ports"`
	// Not supported by Cloud Run.
	ReadinessProbe *Probe `pulumi:"readinessProbe"`
	// Compute Resources required by this container.
	Resources *ResourceRequirements `pulumi:"resources"`
	// Not supported by Cloud Run.
	SecurityContext *SecurityContext `pulumi:"securityContext"`
	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not receive traffic if the probe fails. If not provided, a default startup probe with TCP socket action is used.
	StartupProbe *Probe `pulumi:"startupProbe"`
	// Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
	TerminationMessagePath *string `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `pulumi:"terminationMessagePolicy"`
	// Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir *string `pulumi:"workingDir"`
}

// ContainerInput is an input type that accepts ContainerArgs and ContainerOutput values.
// You can construct a concrete instance of `ContainerInput` via:
//
//	ContainerArgs{...}
type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(context.Context) ContainerOutput
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type ContainerArgs struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references are not supported in Cloud Run.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// List of environment variables to set in the container. EnvVar with duplicate names are generally allowed; if referencing a secret, the name must be unique for the container. For non-secret EnvVar names, the Container will only get the last-declared one.
	Env EnvVarArrayInput `pulumi:"env"`
	// Not supported by Cloud Run.
	EnvFrom EnvFromSourceArrayInput `pulumi:"envFrom"`
	// Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.
	Image pulumi.StringInput `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails.
	LivenessProbe ProbePtrInput `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL (RFC 1123).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports ContainerPortArrayInput `pulumi:"ports"`
	// Not supported by Cloud Run.
	ReadinessProbe ProbePtrInput `pulumi:"readinessProbe"`
	// Compute Resources required by this container.
	Resources ResourceRequirementsPtrInput `pulumi:"resources"`
	// Not supported by Cloud Run.
	SecurityContext SecurityContextPtrInput `pulumi:"securityContext"`
	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not receive traffic if the probe fails. If not provided, a default startup probe with TCP socket action is used.
	StartupProbe ProbePtrInput `pulumi:"startupProbe"`
	// Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
	TerminationMessagePath pulumi.StringPtrInput `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy pulumi.StringPtrInput `pulumi:"terminationMessagePolicy"`
	// Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (i ContainerArgs) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i ContainerArgs) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//	ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
func (o ContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references are not supported in Cloud Run.
func (o ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container. EnvVar with duplicate names are generally allowed; if referencing a secret, the name must be unique for the container. For non-secret EnvVar names, the Container will only get the last-declared one.
func (o ContainerOutput) Env() EnvVarArrayOutput {
	return o.ApplyT(func(v Container) []EnvVar { return v.Env }).(EnvVarArrayOutput)
}

// Not supported by Cloud Run.
func (o ContainerOutput) EnvFrom() EnvFromSourceArrayOutput {
	return o.ApplyT(func(v Container) []EnvFromSource { return v.EnvFrom }).(EnvFromSourceArrayOutput)
}

// Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.
func (o ContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v Container) string { return v.Image }).(pulumi.StringOutput)
}

// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
func (o ContainerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails.
func (o ContainerOutput) LivenessProbe() ProbePtrOutput {
	return o.ApplyT(func(v Container) *Probe { return v.LivenessProbe }).(ProbePtrOutput)
}

// Name of the container specified as a DNS_LABEL (RFC 1123).
func (o ContainerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
func (o ContainerOutput) Ports() ContainerPortArrayOutput {
	return o.ApplyT(func(v Container) []ContainerPort { return v.Ports }).(ContainerPortArrayOutput)
}

// Not supported by Cloud Run.
func (o ContainerOutput) ReadinessProbe() ProbePtrOutput {
	return o.ApplyT(func(v Container) *Probe { return v.ReadinessProbe }).(ProbePtrOutput)
}

// Compute Resources required by this container.
func (o ContainerOutput) Resources() ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v Container) *ResourceRequirements { return v.Resources }).(ResourceRequirementsPtrOutput)
}

// Not supported by Cloud Run.
func (o ContainerOutput) SecurityContext() SecurityContextPtrOutput {
	return o.ApplyT(func(v Container) *SecurityContext { return v.SecurityContext }).(SecurityContextPtrOutput)
}

// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not receive traffic if the probe fails. If not provided, a default startup probe with TCP socket action is used.
func (o ContainerOutput) StartupProbe() ProbePtrOutput {
	return o.ApplyT(func(v Container) *Probe { return v.StartupProbe }).(ProbePtrOutput)
}

// Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
func (o ContainerOutput) TerminationMessagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.TerminationMessagePath }).(pulumi.StringPtrOutput)
}

// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (o ContainerOutput) TerminationMessagePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.TerminationMessagePolicy }).(pulumi.StringPtrOutput)
}

// Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
func (o ContainerOutput) VolumeMounts() VolumeMountArrayOutput {
	return o.ApplyT(func(v Container) []VolumeMount { return v.VolumeMounts }).(VolumeMountArrayOutput)
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
func (o ContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (o ContainerArrayOutput) ToContainerArrayOutput() ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Container {
		return vs[0].([]Container)[vs[1].(int)]
	}).(ContainerOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPort struct {
	// Port number the container listens on. If present, this must be a valid port number, 0 < x < 65536. If not present, it will default to port 8080. For more information, see https://cloud.google.com/run/docs/container-contract#port
	ContainerPort *int `pulumi:"containerPort"`
	// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name *string `pulumi:"name"`
	// Protocol for port. Must be "TCP". Defaults to "TCP".
	Protocol *string `pulumi:"protocol"`
}

// ContainerPortInput is an input type that accepts ContainerPortArgs and ContainerPortOutput values.
// You can construct a concrete instance of `ContainerPortInput` via:
//
//	ContainerPortArgs{...}
type ContainerPortInput interface {
	pulumi.Input

	ToContainerPortOutput() ContainerPortOutput
	ToContainerPortOutputWithContext(context.Context) ContainerPortOutput
}

// ContainerPort represents a network port in a single container.
type ContainerPortArgs struct {
	// Port number the container listens on. If present, this must be a valid port number, 0 < x < 65536. If not present, it will default to port 8080. For more information, see https://cloud.google.com/run/docs/container-contract#port
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Protocol for port. Must be "TCP". Defaults to "TCP".
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (i ContainerPortArgs) ToContainerPortOutput() ContainerPortOutput {
	return i.ToContainerPortOutputWithContext(context.Background())
}

func (i ContainerPortArgs) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortOutput)
}

// ContainerPortArrayInput is an input type that accepts ContainerPortArray and ContainerPortArrayOutput values.
// You can construct a concrete instance of `ContainerPortArrayInput` via:
//
//	ContainerPortArray{ ContainerPortArgs{...} }
type ContainerPortArrayInput interface {
	pulumi.Input

	ToContainerPortArrayOutput() ContainerPortArrayOutput
	ToContainerPortArrayOutputWithContext(context.Context) ContainerPortArrayOutput
}

type ContainerPortArray []ContainerPortInput

func (ContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (i ContainerPortArray) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return i.ToContainerPortArrayOutputWithContext(context.Background())
}

func (i ContainerPortArray) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortArrayOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPortOutput struct{ *pulumi.OutputState }

func (ContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (o ContainerPortOutput) ToContainerPortOutput() ContainerPortOutput {
	return o
}

func (o ContainerPortOutput) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return o
}

// Port number the container listens on. If present, this must be a valid port number, 0 < x < 65536. If not present, it will default to port 8080. For more information, see https://cloud.google.com/run/docs/container-contract#port
func (o ContainerPortOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerPort) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
func (o ContainerPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol for port. Must be "TCP". Defaults to "TCP".
func (o ContainerPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerPortArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) Index(i pulumi.IntInput) ContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPort {
		return vs[0].([]ContainerPort)[vs[1].(int)]
	}).(ContainerPortOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPortResponse struct {
	// Port number the container listens on. If present, this must be a valid port number, 0 < x < 65536. If not present, it will default to port 8080. For more information, see https://cloud.google.com/run/docs/container-contract#port
	ContainerPort int `pulumi:"containerPort"`
	// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name string `pulumi:"name"`
	// Protocol for port. Must be "TCP". Defaults to "TCP".
	Protocol string `pulumi:"protocol"`
}

// ContainerPort represents a network port in a single container.
type ContainerPortResponseOutput struct{ *pulumi.OutputState }

func (ContainerPortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortResponse)(nil)).Elem()
}

func (o ContainerPortResponseOutput) ToContainerPortResponseOutput() ContainerPortResponseOutput {
	return o
}

func (o ContainerPortResponseOutput) ToContainerPortResponseOutputWithContext(ctx context.Context) ContainerPortResponseOutput {
	return o
}

// Port number the container listens on. If present, this must be a valid port number, 0 < x < 65536. If not present, it will default to port 8080. For more information, see https://cloud.google.com/run/docs/container-contract#port
func (o ContainerPortResponseOutput) ContainerPort() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPortResponse) int { return v.ContainerPort }).(pulumi.IntOutput)
}

// If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
func (o ContainerPortResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerPortResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Protocol for port. Must be "TCP". Defaults to "TCP".
func (o ContainerPortResponseOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerPortResponse) string { return v.Protocol }).(pulumi.StringOutput)
}

type ContainerPortResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortResponse)(nil)).Elem()
}

func (o ContainerPortResponseArrayOutput) ToContainerPortResponseArrayOutput() ContainerPortResponseArrayOutput {
	return o
}

func (o ContainerPortResponseArrayOutput) ToContainerPortResponseArrayOutputWithContext(ctx context.Context) ContainerPortResponseArrayOutput {
	return o
}

func (o ContainerPortResponseArrayOutput) Index(i pulumi.IntInput) ContainerPortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPortResponse {
		return vs[0].([]ContainerPortResponse)[vs[1].(int)]
	}).(ContainerPortResponseOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type ContainerResponse struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
	Args []string `pulumi:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references are not supported in Cloud Run.
	Command []string `pulumi:"command"`
	// List of environment variables to set in the container. EnvVar with duplicate names are generally allowed; if referencing a secret, the name must be unique for the container. For non-secret EnvVar names, the Container will only get the last-declared one.
	Env []EnvVarResponse `pulumi:"env"`
	// Not supported by Cloud Run.
	EnvFrom []EnvFromSourceResponse `pulumi:"envFrom"`
	// Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.
	Image string `pulumi:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
	ImagePullPolicy string `pulumi:"imagePullPolicy"`
	// Periodic probe of container liveness. Container will be restarted if the probe fails.
	LivenessProbe ProbeResponse `pulumi:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL (RFC 1123).
	Name string `pulumi:"name"`
	// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports []ContainerPortResponse `pulumi:"ports"`
	// Not supported by Cloud Run.
	ReadinessProbe ProbeResponse `pulumi:"readinessProbe"`
	// Compute Resources required by this container.
	Resources ResourceRequirementsResponse `pulumi:"resources"`
	// Not supported by Cloud Run.
	SecurityContext SecurityContextResponse `pulumi:"securityContext"`
	// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not receive traffic if the probe fails. If not provided, a default startup probe with TCP socket action is used.
	StartupProbe ProbeResponse `pulumi:"startupProbe"`
	// Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
	TerminationMessagePath string `pulumi:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy string `pulumi:"terminationMessagePolicy"`
	// Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
	VolumeMounts []VolumeMountResponse `pulumi:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir string `pulumi:"workingDir"`
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type ContainerResponseOutput struct{ *pulumi.OutputState }

func (ContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseOutput) ToContainerResponseOutput() ContainerResponseOutput {
	return o
}

func (o ContainerResponseOutput) ToContainerResponseOutputWithContext(ctx context.Context) ContainerResponseOutput {
	return o
}

// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.
func (o ContainerResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references are not supported in Cloud Run.
func (o ContainerResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// List of environment variables to set in the container. EnvVar with duplicate names are generally allowed; if referencing a secret, the name must be unique for the container. For non-secret EnvVar names, the Container will only get the last-declared one.
func (o ContainerResponseOutput) Env() EnvVarResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []EnvVarResponse { return v.Env }).(EnvVarResponseArrayOutput)
}

// Not supported by Cloud Run.
func (o ContainerResponseOutput) EnvFrom() EnvFromSourceResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []EnvFromSourceResponse { return v.EnvFrom }).(EnvFromSourceResponseArrayOutput)
}

// Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.
func (o ContainerResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Image }).(pulumi.StringOutput)
}

// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
func (o ContainerResponseOutput) ImagePullPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.ImagePullPolicy }).(pulumi.StringOutput)
}

// Periodic probe of container liveness. Container will be restarted if the probe fails.
func (o ContainerResponseOutput) LivenessProbe() ProbeResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ProbeResponse { return v.LivenessProbe }).(ProbeResponseOutput)
}

// Name of the container specified as a DNS_LABEL (RFC 1123).
func (o ContainerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
func (o ContainerResponseOutput) Ports() ContainerPortResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []ContainerPortResponse { return v.Ports }).(ContainerPortResponseArrayOutput)
}

// Not supported by Cloud Run.
func (o ContainerResponseOutput) ReadinessProbe() ProbeResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ProbeResponse { return v.ReadinessProbe }).(ProbeResponseOutput)
}

// Compute Resources required by this container.
func (o ContainerResponseOutput) Resources() ResourceRequirementsResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ResourceRequirementsResponse { return v.Resources }).(ResourceRequirementsResponseOutput)
}

// Not supported by Cloud Run.
func (o ContainerResponseOutput) SecurityContext() SecurityContextResponseOutput {
	return o.ApplyT(func(v ContainerResponse) SecurityContextResponse { return v.SecurityContext }).(SecurityContextResponseOutput)
}

// Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not receive traffic if the probe fails. If not provided, a default startup probe with TCP socket action is used.
func (o ContainerResponseOutput) StartupProbe() ProbeResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ProbeResponse { return v.StartupProbe }).(ProbeResponseOutput)
}

// Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
func (o ContainerResponseOutput) TerminationMessagePath() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.TerminationMessagePath }).(pulumi.StringOutput)
}

// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (o ContainerResponseOutput) TerminationMessagePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.TerminationMessagePolicy }).(pulumi.StringOutput)
}

// Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
func (o ContainerResponseOutput) VolumeMounts() VolumeMountResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []VolumeMountResponse { return v.VolumeMounts }).(VolumeMountResponseArrayOutput)
}

// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
func (o ContainerResponseOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type ContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutput() ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutputWithContext(ctx context.Context) ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) Index(i pulumi.IntInput) ContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerResponse {
		return vs[0].([]ContainerResponse)[vs[1].(int)]
	}).(ContainerResponseOutput)
}

// The desired state of the Domain Mapping.
type DomainMappingSpec struct {
	// The mode of the certificate.
	CertificateMode *DomainMappingSpecCertificateMode `pulumi:"certificateMode"`
	// If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
	ForceOverride *bool `pulumi:"forceOverride"`
	// The name of the Knative Route that this DomainMapping applies to. The route must exist.
	RouteName *string `pulumi:"routeName"`
}

// DomainMappingSpecInput is an input type that accepts DomainMappingSpecArgs and DomainMappingSpecOutput values.
// You can construct a concrete instance of `DomainMappingSpecInput` via:
//
//	DomainMappingSpecArgs{...}
type DomainMappingSpecInput interface {
	pulumi.Input

	ToDomainMappingSpecOutput() DomainMappingSpecOutput
	ToDomainMappingSpecOutputWithContext(context.Context) DomainMappingSpecOutput
}

// The desired state of the Domain Mapping.
type DomainMappingSpecArgs struct {
	// The mode of the certificate.
	CertificateMode DomainMappingSpecCertificateModePtrInput `pulumi:"certificateMode"`
	// If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
	ForceOverride pulumi.BoolPtrInput `pulumi:"forceOverride"`
	// The name of the Knative Route that this DomainMapping applies to. The route must exist.
	RouteName pulumi.StringPtrInput `pulumi:"routeName"`
}

func (DomainMappingSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMappingSpec)(nil)).Elem()
}

func (i DomainMappingSpecArgs) ToDomainMappingSpecOutput() DomainMappingSpecOutput {
	return i.ToDomainMappingSpecOutputWithContext(context.Background())
}

func (i DomainMappingSpecArgs) ToDomainMappingSpecOutputWithContext(ctx context.Context) DomainMappingSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMappingSpecOutput)
}

func (i DomainMappingSpecArgs) ToDomainMappingSpecPtrOutput() DomainMappingSpecPtrOutput {
	return i.ToDomainMappingSpecPtrOutputWithContext(context.Background())
}

func (i DomainMappingSpecArgs) ToDomainMappingSpecPtrOutputWithContext(ctx context.Context) DomainMappingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMappingSpecOutput).ToDomainMappingSpecPtrOutputWithContext(ctx)
}

// DomainMappingSpecPtrInput is an input type that accepts DomainMappingSpecArgs, DomainMappingSpecPtr and DomainMappingSpecPtrOutput values.
// You can construct a concrete instance of `DomainMappingSpecPtrInput` via:
//
//	        DomainMappingSpecArgs{...}
//
//	or:
//
//	        nil
type DomainMappingSpecPtrInput interface {
	pulumi.Input

	ToDomainMappingSpecPtrOutput() DomainMappingSpecPtrOutput
	ToDomainMappingSpecPtrOutputWithContext(context.Context) DomainMappingSpecPtrOutput
}

type domainMappingSpecPtrType DomainMappingSpecArgs

func DomainMappingSpecPtr(v *DomainMappingSpecArgs) DomainMappingSpecPtrInput {
	return (*domainMappingSpecPtrType)(v)
}

func (*domainMappingSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainMappingSpec)(nil)).Elem()
}

func (i *domainMappingSpecPtrType) ToDomainMappingSpecPtrOutput() DomainMappingSpecPtrOutput {
	return i.ToDomainMappingSpecPtrOutputWithContext(context.Background())
}

func (i *domainMappingSpecPtrType) ToDomainMappingSpecPtrOutputWithContext(ctx context.Context) DomainMappingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMappingSpecPtrOutput)
}

// The desired state of the Domain Mapping.
type DomainMappingSpecOutput struct{ *pulumi.OutputState }

func (DomainMappingSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMappingSpec)(nil)).Elem()
}

func (o DomainMappingSpecOutput) ToDomainMappingSpecOutput() DomainMappingSpecOutput {
	return o
}

func (o DomainMappingSpecOutput) ToDomainMappingSpecOutputWithContext(ctx context.Context) DomainMappingSpecOutput {
	return o
}

func (o DomainMappingSpecOutput) ToDomainMappingSpecPtrOutput() DomainMappingSpecPtrOutput {
	return o.ToDomainMappingSpecPtrOutputWithContext(context.Background())
}

func (o DomainMappingSpecOutput) ToDomainMappingSpecPtrOutputWithContext(ctx context.Context) DomainMappingSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainMappingSpec) *DomainMappingSpec {
		return &v
	}).(DomainMappingSpecPtrOutput)
}

// The mode of the certificate.
func (o DomainMappingSpecOutput) CertificateMode() DomainMappingSpecCertificateModePtrOutput {
	return o.ApplyT(func(v DomainMappingSpec) *DomainMappingSpecCertificateMode { return v.CertificateMode }).(DomainMappingSpecCertificateModePtrOutput)
}

// If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
func (o DomainMappingSpecOutput) ForceOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DomainMappingSpec) *bool { return v.ForceOverride }).(pulumi.BoolPtrOutput)
}

// The name of the Knative Route that this DomainMapping applies to. The route must exist.
func (o DomainMappingSpecOutput) RouteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainMappingSpec) *string { return v.RouteName }).(pulumi.StringPtrOutput)
}

type DomainMappingSpecPtrOutput struct{ *pulumi.OutputState }

func (DomainMappingSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainMappingSpec)(nil)).Elem()
}

func (o DomainMappingSpecPtrOutput) ToDomainMappingSpecPtrOutput() DomainMappingSpecPtrOutput {
	return o
}

func (o DomainMappingSpecPtrOutput) ToDomainMappingSpecPtrOutputWithContext(ctx context.Context) DomainMappingSpecPtrOutput {
	return o
}

func (o DomainMappingSpecPtrOutput) Elem() DomainMappingSpecOutput {
	return o.ApplyT(func(v *DomainMappingSpec) DomainMappingSpec {
		if v != nil {
			return *v
		}
		var ret DomainMappingSpec
		return ret
	}).(DomainMappingSpecOutput)
}

// The mode of the certificate.
func (o DomainMappingSpecPtrOutput) CertificateMode() DomainMappingSpecCertificateModePtrOutput {
	return o.ApplyT(func(v *DomainMappingSpec) *DomainMappingSpecCertificateMode {
		if v == nil {
			return nil
		}
		return v.CertificateMode
	}).(DomainMappingSpecCertificateModePtrOutput)
}

// If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
func (o DomainMappingSpecPtrOutput) ForceOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DomainMappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.ForceOverride
	}).(pulumi.BoolPtrOutput)
}

// The name of the Knative Route that this DomainMapping applies to. The route must exist.
func (o DomainMappingSpecPtrOutput) RouteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainMappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.RouteName
	}).(pulumi.StringPtrOutput)
}

// The desired state of the Domain Mapping.
type DomainMappingSpecResponse struct {
	// The mode of the certificate.
	CertificateMode string `pulumi:"certificateMode"`
	// If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
	ForceOverride bool `pulumi:"forceOverride"`
	// The name of the Knative Route that this DomainMapping applies to. The route must exist.
	RouteName string `pulumi:"routeName"`
}

// The desired state of the Domain Mapping.
type DomainMappingSpecResponseOutput struct{ *pulumi.OutputState }

func (DomainMappingSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMappingSpecResponse)(nil)).Elem()
}

func (o DomainMappingSpecResponseOutput) ToDomainMappingSpecResponseOutput() DomainMappingSpecResponseOutput {
	return o
}

func (o DomainMappingSpecResponseOutput) ToDomainMappingSpecResponseOutputWithContext(ctx context.Context) DomainMappingSpecResponseOutput {
	return o
}

// The mode of the certificate.
func (o DomainMappingSpecResponseOutput) CertificateMode() pulumi.StringOutput {
	return o.ApplyT(func(v DomainMappingSpecResponse) string { return v.CertificateMode }).(pulumi.StringOutput)
}

// If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
func (o DomainMappingSpecResponseOutput) ForceOverride() pulumi.BoolOutput {
	return o.ApplyT(func(v DomainMappingSpecResponse) bool { return v.ForceOverride }).(pulumi.BoolOutput)
}

// The name of the Knative Route that this DomainMapping applies to. The route must exist.
func (o DomainMappingSpecResponseOutput) RouteName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainMappingSpecResponse) string { return v.RouteName }).(pulumi.StringOutput)
}

// The current state of the Domain Mapping.
type DomainMappingStatus struct {
	// Array of observed DomainMappingConditions, indicating the current state of the DomainMapping.
	Conditions []GoogleCloudRunV1Condition `pulumi:"conditions"`
	// The name of the route that the mapping currently points to.
	MappedRouteName *string `pulumi:"mappedRouteName"`
	// ObservedGeneration is the 'Generation' of the DomainMapping that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The resource records required to configure this domain mapping. These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.
	ResourceRecords []ResourceRecord `pulumi:"resourceRecords"`
	// Optional. Not supported by Cloud Run.
	Url *string `pulumi:"url"`
}

// The current state of the Domain Mapping.
type DomainMappingStatusResponse struct {
	// Array of observed DomainMappingConditions, indicating the current state of the DomainMapping.
	Conditions []GoogleCloudRunV1ConditionResponse `pulumi:"conditions"`
	// The name of the route that the mapping currently points to.
	MappedRouteName string `pulumi:"mappedRouteName"`
	// ObservedGeneration is the 'Generation' of the DomainMapping that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
	ObservedGeneration int `pulumi:"observedGeneration"`
	// The resource records required to configure this domain mapping. These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.
	ResourceRecords []ResourceRecordResponse `pulumi:"resourceRecords"`
	// Optional. Not supported by Cloud Run.
	Url string `pulumi:"url"`
}

// The current state of the Domain Mapping.
type DomainMappingStatusResponseOutput struct{ *pulumi.OutputState }

func (DomainMappingStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainMappingStatusResponse)(nil)).Elem()
}

func (o DomainMappingStatusResponseOutput) ToDomainMappingStatusResponseOutput() DomainMappingStatusResponseOutput {
	return o
}

func (o DomainMappingStatusResponseOutput) ToDomainMappingStatusResponseOutputWithContext(ctx context.Context) DomainMappingStatusResponseOutput {
	return o
}

// Array of observed DomainMappingConditions, indicating the current state of the DomainMapping.
func (o DomainMappingStatusResponseOutput) Conditions() GoogleCloudRunV1ConditionResponseArrayOutput {
	return o.ApplyT(func(v DomainMappingStatusResponse) []GoogleCloudRunV1ConditionResponse { return v.Conditions }).(GoogleCloudRunV1ConditionResponseArrayOutput)
}

// The name of the route that the mapping currently points to.
func (o DomainMappingStatusResponseOutput) MappedRouteName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainMappingStatusResponse) string { return v.MappedRouteName }).(pulumi.StringOutput)
}

// ObservedGeneration is the 'Generation' of the DomainMapping that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
func (o DomainMappingStatusResponseOutput) ObservedGeneration() pulumi.IntOutput {
	return o.ApplyT(func(v DomainMappingStatusResponse) int { return v.ObservedGeneration }).(pulumi.IntOutput)
}

// The resource records required to configure this domain mapping. These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.
func (o DomainMappingStatusResponseOutput) ResourceRecords() ResourceRecordResponseArrayOutput {
	return o.ApplyT(func(v DomainMappingStatusResponse) []ResourceRecordResponse { return v.ResourceRecords }).(ResourceRecordResponseArrayOutput)
}

// Optional. Not supported by Cloud Run.
func (o DomainMappingStatusResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DomainMappingStatusResponse) string { return v.Url }).(pulumi.StringOutput)
}

// In memory (tmpfs) ephemeral storage. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
type EmptyDirVolumeSource struct {
	// The medium on which the data is stored. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `pulumi:"medium"`
	// Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers. The default is nil which means that the limit is undefined. More info: https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume. Info in Kubernetes: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
	SizeLimit *string `pulumi:"sizeLimit"`
}

// EmptyDirVolumeSourceInput is an input type that accepts EmptyDirVolumeSourceArgs and EmptyDirVolumeSourceOutput values.
// You can construct a concrete instance of `EmptyDirVolumeSourceInput` via:
//
//	EmptyDirVolumeSourceArgs{...}
type EmptyDirVolumeSourceInput interface {
	pulumi.Input

	ToEmptyDirVolumeSourceOutput() EmptyDirVolumeSourceOutput
	ToEmptyDirVolumeSourceOutputWithContext(context.Context) EmptyDirVolumeSourceOutput
}

// In memory (tmpfs) ephemeral storage. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
type EmptyDirVolumeSourceArgs struct {
	// The medium on which the data is stored. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers. The default is nil which means that the limit is undefined. More info: https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume. Info in Kubernetes: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
	SizeLimit pulumi.StringPtrInput `pulumi:"sizeLimit"`
}

func (EmptyDirVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmptyDirVolumeSource)(nil)).Elem()
}

func (i EmptyDirVolumeSourceArgs) ToEmptyDirVolumeSourceOutput() EmptyDirVolumeSourceOutput {
	return i.ToEmptyDirVolumeSourceOutputWithContext(context.Background())
}

func (i EmptyDirVolumeSourceArgs) ToEmptyDirVolumeSourceOutputWithContext(ctx context.Context) EmptyDirVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyDirVolumeSourceOutput)
}

func (i EmptyDirVolumeSourceArgs) ToEmptyDirVolumeSourcePtrOutput() EmptyDirVolumeSourcePtrOutput {
	return i.ToEmptyDirVolumeSourcePtrOutputWithContext(context.Background())
}

func (i EmptyDirVolumeSourceArgs) ToEmptyDirVolumeSourcePtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyDirVolumeSourceOutput).ToEmptyDirVolumeSourcePtrOutputWithContext(ctx)
}

// EmptyDirVolumeSourcePtrInput is an input type that accepts EmptyDirVolumeSourceArgs, EmptyDirVolumeSourcePtr and EmptyDirVolumeSourcePtrOutput values.
// You can construct a concrete instance of `EmptyDirVolumeSourcePtrInput` via:
//
//	        EmptyDirVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type EmptyDirVolumeSourcePtrInput interface {
	pulumi.Input

	ToEmptyDirVolumeSourcePtrOutput() EmptyDirVolumeSourcePtrOutput
	ToEmptyDirVolumeSourcePtrOutputWithContext(context.Context) EmptyDirVolumeSourcePtrOutput
}

type emptyDirVolumeSourcePtrType EmptyDirVolumeSourceArgs

func EmptyDirVolumeSourcePtr(v *EmptyDirVolumeSourceArgs) EmptyDirVolumeSourcePtrInput {
	return (*emptyDirVolumeSourcePtrType)(v)
}

func (*emptyDirVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EmptyDirVolumeSource)(nil)).Elem()
}

func (i *emptyDirVolumeSourcePtrType) ToEmptyDirVolumeSourcePtrOutput() EmptyDirVolumeSourcePtrOutput {
	return i.ToEmptyDirVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *emptyDirVolumeSourcePtrType) ToEmptyDirVolumeSourcePtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmptyDirVolumeSourcePtrOutput)
}

// In memory (tmpfs) ephemeral storage. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
type EmptyDirVolumeSourceOutput struct{ *pulumi.OutputState }

func (EmptyDirVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmptyDirVolumeSource)(nil)).Elem()
}

func (o EmptyDirVolumeSourceOutput) ToEmptyDirVolumeSourceOutput() EmptyDirVolumeSourceOutput {
	return o
}

func (o EmptyDirVolumeSourceOutput) ToEmptyDirVolumeSourceOutputWithContext(ctx context.Context) EmptyDirVolumeSourceOutput {
	return o
}

func (o EmptyDirVolumeSourceOutput) ToEmptyDirVolumeSourcePtrOutput() EmptyDirVolumeSourcePtrOutput {
	return o.ToEmptyDirVolumeSourcePtrOutputWithContext(context.Background())
}

func (o EmptyDirVolumeSourceOutput) ToEmptyDirVolumeSourcePtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EmptyDirVolumeSource) *EmptyDirVolumeSource {
		return &v
	}).(EmptyDirVolumeSourcePtrOutput)
}

// The medium on which the data is stored. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o EmptyDirVolumeSourceOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EmptyDirVolumeSource) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers. The default is nil which means that the limit is undefined. More info: https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume. Info in Kubernetes: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
func (o EmptyDirVolumeSourceOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EmptyDirVolumeSource) *string { return v.SizeLimit }).(pulumi.StringPtrOutput)
}

type EmptyDirVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (EmptyDirVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmptyDirVolumeSource)(nil)).Elem()
}

func (o EmptyDirVolumeSourcePtrOutput) ToEmptyDirVolumeSourcePtrOutput() EmptyDirVolumeSourcePtrOutput {
	return o
}

func (o EmptyDirVolumeSourcePtrOutput) ToEmptyDirVolumeSourcePtrOutputWithContext(ctx context.Context) EmptyDirVolumeSourcePtrOutput {
	return o
}

func (o EmptyDirVolumeSourcePtrOutput) Elem() EmptyDirVolumeSourceOutput {
	return o.ApplyT(func(v *EmptyDirVolumeSource) EmptyDirVolumeSource {
		if v != nil {
			return *v
		}
		var ret EmptyDirVolumeSource
		return ret
	}).(EmptyDirVolumeSourceOutput)
}

// The medium on which the data is stored. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o EmptyDirVolumeSourcePtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmptyDirVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers. The default is nil which means that the limit is undefined. More info: https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume. Info in Kubernetes: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
func (o EmptyDirVolumeSourcePtrOutput) SizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmptyDirVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.StringPtrOutput)
}

// In memory (tmpfs) ephemeral storage. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
type EmptyDirVolumeSourceResponse struct {
	// The medium on which the data is stored. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium string `pulumi:"medium"`
	// Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers. The default is nil which means that the limit is undefined. More info: https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume. Info in Kubernetes: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
	SizeLimit string `pulumi:"sizeLimit"`
}

// In memory (tmpfs) ephemeral storage. It is ephemeral in the sense that when the sandbox is taken down, the data is destroyed with it (it does not persist across sandbox runs).
type EmptyDirVolumeSourceResponseOutput struct{ *pulumi.OutputState }

func (EmptyDirVolumeSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmptyDirVolumeSourceResponse)(nil)).Elem()
}

func (o EmptyDirVolumeSourceResponseOutput) ToEmptyDirVolumeSourceResponseOutput() EmptyDirVolumeSourceResponseOutput {
	return o
}

func (o EmptyDirVolumeSourceResponseOutput) ToEmptyDirVolumeSourceResponseOutputWithContext(ctx context.Context) EmptyDirVolumeSourceResponseOutput {
	return o
}

// The medium on which the data is stored. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o EmptyDirVolumeSourceResponseOutput) Medium() pulumi.StringOutput {
	return o.ApplyT(func(v EmptyDirVolumeSourceResponse) string { return v.Medium }).(pulumi.StringOutput)
}

// Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers. The default is nil which means that the limit is undefined. More info: https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume. Info in Kubernetes: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
func (o EmptyDirVolumeSourceResponseOutput) SizeLimit() pulumi.StringOutput {
	return o.ApplyT(func(v EmptyDirVolumeSourceResponse) string { return v.SizeLimit }).(pulumi.StringOutput)
}

// Not supported by Cloud Run. EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSource struct {
	// The ConfigMap to select from
	ConfigMapRef *ConfigMapEnvSource `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `pulumi:"prefix"`
	// The Secret to select from
	SecretRef *SecretEnvSource `pulumi:"secretRef"`
}

// EnvFromSourceInput is an input type that accepts EnvFromSourceArgs and EnvFromSourceOutput values.
// You can construct a concrete instance of `EnvFromSourceInput` via:
//
//	EnvFromSourceArgs{...}
type EnvFromSourceInput interface {
	pulumi.Input

	ToEnvFromSourceOutput() EnvFromSourceOutput
	ToEnvFromSourceOutputWithContext(context.Context) EnvFromSourceOutput
}

// Not supported by Cloud Run. EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceArgs struct {
	// The ConfigMap to select from
	ConfigMapRef ConfigMapEnvSourcePtrInput `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// The Secret to select from
	SecretRef SecretEnvSourcePtrInput `pulumi:"secretRef"`
}

func (EnvFromSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSource)(nil)).Elem()
}

func (i EnvFromSourceArgs) ToEnvFromSourceOutput() EnvFromSourceOutput {
	return i.ToEnvFromSourceOutputWithContext(context.Background())
}

func (i EnvFromSourceArgs) ToEnvFromSourceOutputWithContext(ctx context.Context) EnvFromSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFromSourceOutput)
}

// EnvFromSourceArrayInput is an input type that accepts EnvFromSourceArray and EnvFromSourceArrayOutput values.
// You can construct a concrete instance of `EnvFromSourceArrayInput` via:
//
//	EnvFromSourceArray{ EnvFromSourceArgs{...} }
type EnvFromSourceArrayInput interface {
	pulumi.Input

	ToEnvFromSourceArrayOutput() EnvFromSourceArrayOutput
	ToEnvFromSourceArrayOutputWithContext(context.Context) EnvFromSourceArrayOutput
}

type EnvFromSourceArray []EnvFromSourceInput

func (EnvFromSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSource)(nil)).Elem()
}

func (i EnvFromSourceArray) ToEnvFromSourceArrayOutput() EnvFromSourceArrayOutput {
	return i.ToEnvFromSourceArrayOutputWithContext(context.Background())
}

func (i EnvFromSourceArray) ToEnvFromSourceArrayOutputWithContext(ctx context.Context) EnvFromSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFromSourceArrayOutput)
}

// Not supported by Cloud Run. EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceOutput struct{ *pulumi.OutputState }

func (EnvFromSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSource)(nil)).Elem()
}

func (o EnvFromSourceOutput) ToEnvFromSourceOutput() EnvFromSourceOutput {
	return o
}

func (o EnvFromSourceOutput) ToEnvFromSourceOutputWithContext(ctx context.Context) EnvFromSourceOutput {
	return o
}

// The ConfigMap to select from
func (o EnvFromSourceOutput) ConfigMapRef() ConfigMapEnvSourcePtrOutput {
	return o.ApplyT(func(v EnvFromSource) *ConfigMapEnvSource { return v.ConfigMapRef }).(ConfigMapEnvSourcePtrOutput)
}

// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
func (o EnvFromSourceOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvFromSource) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The Secret to select from
func (o EnvFromSourceOutput) SecretRef() SecretEnvSourcePtrOutput {
	return o.ApplyT(func(v EnvFromSource) *SecretEnvSource { return v.SecretRef }).(SecretEnvSourcePtrOutput)
}

type EnvFromSourceArrayOutput struct{ *pulumi.OutputState }

func (EnvFromSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSource)(nil)).Elem()
}

func (o EnvFromSourceArrayOutput) ToEnvFromSourceArrayOutput() EnvFromSourceArrayOutput {
	return o
}

func (o EnvFromSourceArrayOutput) ToEnvFromSourceArrayOutputWithContext(ctx context.Context) EnvFromSourceArrayOutput {
	return o
}

func (o EnvFromSourceArrayOutput) Index(i pulumi.IntInput) EnvFromSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvFromSource {
		return vs[0].([]EnvFromSource)[vs[1].(int)]
	}).(EnvFromSourceOutput)
}

// Not supported by Cloud Run. EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceResponse struct {
	// The ConfigMap to select from
	ConfigMapRef ConfigMapEnvSourceResponse `pulumi:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix string `pulumi:"prefix"`
	// The Secret to select from
	SecretRef SecretEnvSourceResponse `pulumi:"secretRef"`
}

// Not supported by Cloud Run. EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceResponseOutput struct{ *pulumi.OutputState }

func (EnvFromSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSourceResponse)(nil)).Elem()
}

func (o EnvFromSourceResponseOutput) ToEnvFromSourceResponseOutput() EnvFromSourceResponseOutput {
	return o
}

func (o EnvFromSourceResponseOutput) ToEnvFromSourceResponseOutputWithContext(ctx context.Context) EnvFromSourceResponseOutput {
	return o
}

// The ConfigMap to select from
func (o EnvFromSourceResponseOutput) ConfigMapRef() ConfigMapEnvSourceResponseOutput {
	return o.ApplyT(func(v EnvFromSourceResponse) ConfigMapEnvSourceResponse { return v.ConfigMapRef }).(ConfigMapEnvSourceResponseOutput)
}

// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
func (o EnvFromSourceResponseOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v EnvFromSourceResponse) string { return v.Prefix }).(pulumi.StringOutput)
}

// The Secret to select from
func (o EnvFromSourceResponseOutput) SecretRef() SecretEnvSourceResponseOutput {
	return o.ApplyT(func(v EnvFromSourceResponse) SecretEnvSourceResponse { return v.SecretRef }).(SecretEnvSourceResponseOutput)
}

type EnvFromSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvFromSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSourceResponse)(nil)).Elem()
}

func (o EnvFromSourceResponseArrayOutput) ToEnvFromSourceResponseArrayOutput() EnvFromSourceResponseArrayOutput {
	return o
}

func (o EnvFromSourceResponseArrayOutput) ToEnvFromSourceResponseArrayOutputWithContext(ctx context.Context) EnvFromSourceResponseArrayOutput {
	return o
}

func (o EnvFromSourceResponseArrayOutput) Index(i pulumi.IntInput) EnvFromSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvFromSourceResponse {
		return vs[0].([]EnvFromSourceResponse)[vs[1].(int)]
	}).(EnvFromSourceResponseOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVar struct {
	// Name of the environment variable.
	Name string `pulumi:"name"`
	// Value of the environment variable. Defaults to "". Variable references are not supported in Cloud Run.
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Only supports secret_key_ref. Cannot be used if value is not empty.
	ValueFrom *EnvVarSource `pulumi:"valueFrom"`
}

// EnvVarInput is an input type that accepts EnvVarArgs and EnvVarOutput values.
// You can construct a concrete instance of `EnvVarInput` via:
//
//	EnvVarArgs{...}
type EnvVarInput interface {
	pulumi.Input

	ToEnvVarOutput() EnvVarOutput
	ToEnvVarOutputWithContext(context.Context) EnvVarOutput
}

// EnvVar represents an environment variable present in a Container.
type EnvVarArgs struct {
	// Name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the environment variable. Defaults to "". Variable references are not supported in Cloud Run.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Only supports secret_key_ref. Cannot be used if value is not empty.
	ValueFrom EnvVarSourcePtrInput `pulumi:"valueFrom"`
}

func (EnvVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVar)(nil)).Elem()
}

func (i EnvVarArgs) ToEnvVarOutput() EnvVarOutput {
	return i.ToEnvVarOutputWithContext(context.Background())
}

func (i EnvVarArgs) ToEnvVarOutputWithContext(ctx context.Context) EnvVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarOutput)
}

// EnvVarArrayInput is an input type that accepts EnvVarArray and EnvVarArrayOutput values.
// You can construct a concrete instance of `EnvVarArrayInput` via:
//
//	EnvVarArray{ EnvVarArgs{...} }
type EnvVarArrayInput interface {
	pulumi.Input

	ToEnvVarArrayOutput() EnvVarArrayOutput
	ToEnvVarArrayOutputWithContext(context.Context) EnvVarArrayOutput
}

type EnvVarArray []EnvVarInput

func (EnvVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVar)(nil)).Elem()
}

func (i EnvVarArray) ToEnvVarArrayOutput() EnvVarArrayOutput {
	return i.ToEnvVarArrayOutputWithContext(context.Background())
}

func (i EnvVarArray) ToEnvVarArrayOutputWithContext(ctx context.Context) EnvVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVarOutput struct{ *pulumi.OutputState }

func (EnvVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVar)(nil)).Elem()
}

func (o EnvVarOutput) ToEnvVarOutput() EnvVarOutput {
	return o
}

func (o EnvVarOutput) ToEnvVarOutputWithContext(ctx context.Context) EnvVarOutput {
	return o
}

// Name of the environment variable.
func (o EnvVarOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvVar) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the environment variable. Defaults to "". Variable references are not supported in Cloud Run.
func (o EnvVarOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvVar) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Only supports secret_key_ref. Cannot be used if value is not empty.
func (o EnvVarOutput) ValueFrom() EnvVarSourcePtrOutput {
	return o.ApplyT(func(v EnvVar) *EnvVarSource { return v.ValueFrom }).(EnvVarSourcePtrOutput)
}

type EnvVarArrayOutput struct{ *pulumi.OutputState }

func (EnvVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVar)(nil)).Elem()
}

func (o EnvVarArrayOutput) ToEnvVarArrayOutput() EnvVarArrayOutput {
	return o
}

func (o EnvVarArrayOutput) ToEnvVarArrayOutputWithContext(ctx context.Context) EnvVarArrayOutput {
	return o
}

func (o EnvVarArrayOutput) Index(i pulumi.IntInput) EnvVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvVar {
		return vs[0].([]EnvVar)[vs[1].(int)]
	}).(EnvVarOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVarResponse struct {
	// Name of the environment variable.
	Name string `pulumi:"name"`
	// Value of the environment variable. Defaults to "". Variable references are not supported in Cloud Run.
	Value string `pulumi:"value"`
	// Source for the environment variable's value. Only supports secret_key_ref. Cannot be used if value is not empty.
	ValueFrom EnvVarSourceResponse `pulumi:"valueFrom"`
}

// EnvVar represents an environment variable present in a Container.
type EnvVarResponseOutput struct{ *pulumi.OutputState }

func (EnvVarResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarResponse)(nil)).Elem()
}

func (o EnvVarResponseOutput) ToEnvVarResponseOutput() EnvVarResponseOutput {
	return o
}

func (o EnvVarResponseOutput) ToEnvVarResponseOutputWithContext(ctx context.Context) EnvVarResponseOutput {
	return o
}

// Name of the environment variable.
func (o EnvVarResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvVarResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the environment variable. Defaults to "". Variable references are not supported in Cloud Run.
func (o EnvVarResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EnvVarResponse) string { return v.Value }).(pulumi.StringOutput)
}

// Source for the environment variable's value. Only supports secret_key_ref. Cannot be used if value is not empty.
func (o EnvVarResponseOutput) ValueFrom() EnvVarSourceResponseOutput {
	return o.ApplyT(func(v EnvVarResponse) EnvVarSourceResponse { return v.ValueFrom }).(EnvVarSourceResponseOutput)
}

type EnvVarResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvVarResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVarResponse)(nil)).Elem()
}

func (o EnvVarResponseArrayOutput) ToEnvVarResponseArrayOutput() EnvVarResponseArrayOutput {
	return o
}

func (o EnvVarResponseArrayOutput) ToEnvVarResponseArrayOutputWithContext(ctx context.Context) EnvVarResponseArrayOutput {
	return o
}

func (o EnvVarResponseArrayOutput) Index(i pulumi.IntInput) EnvVarResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvVarResponse {
		return vs[0].([]EnvVarResponse)[vs[1].(int)]
	}).(EnvVarResponseOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSource struct {
	// Not supported by Cloud Run. Not supported in Cloud Run.
	ConfigMapKeyRef *ConfigMapKeySelector `pulumi:"configMapKeyRef"`
	// Selects a key (version) of a secret in Secret Manager.
	SecretKeyRef *SecretKeySelector `pulumi:"secretKeyRef"`
}

// EnvVarSourceInput is an input type that accepts EnvVarSourceArgs and EnvVarSourceOutput values.
// You can construct a concrete instance of `EnvVarSourceInput` via:
//
//	EnvVarSourceArgs{...}
type EnvVarSourceInput interface {
	pulumi.Input

	ToEnvVarSourceOutput() EnvVarSourceOutput
	ToEnvVarSourceOutputWithContext(context.Context) EnvVarSourceOutput
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceArgs struct {
	// Not supported by Cloud Run. Not supported in Cloud Run.
	ConfigMapKeyRef ConfigMapKeySelectorPtrInput `pulumi:"configMapKeyRef"`
	// Selects a key (version) of a secret in Secret Manager.
	SecretKeyRef SecretKeySelectorPtrInput `pulumi:"secretKeyRef"`
}

func (EnvVarSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSource)(nil)).Elem()
}

func (i EnvVarSourceArgs) ToEnvVarSourceOutput() EnvVarSourceOutput {
	return i.ToEnvVarSourceOutputWithContext(context.Background())
}

func (i EnvVarSourceArgs) ToEnvVarSourceOutputWithContext(ctx context.Context) EnvVarSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourceOutput)
}

func (i EnvVarSourceArgs) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return i.ToEnvVarSourcePtrOutputWithContext(context.Background())
}

func (i EnvVarSourceArgs) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourceOutput).ToEnvVarSourcePtrOutputWithContext(ctx)
}

// EnvVarSourcePtrInput is an input type that accepts EnvVarSourceArgs, EnvVarSourcePtr and EnvVarSourcePtrOutput values.
// You can construct a concrete instance of `EnvVarSourcePtrInput` via:
//
//	        EnvVarSourceArgs{...}
//
//	or:
//
//	        nil
type EnvVarSourcePtrInput interface {
	pulumi.Input

	ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput
	ToEnvVarSourcePtrOutputWithContext(context.Context) EnvVarSourcePtrOutput
}

type envVarSourcePtrType EnvVarSourceArgs

func EnvVarSourcePtr(v *EnvVarSourceArgs) EnvVarSourcePtrInput {
	return (*envVarSourcePtrType)(v)
}

func (*envVarSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarSource)(nil)).Elem()
}

func (i *envVarSourcePtrType) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return i.ToEnvVarSourcePtrOutputWithContext(context.Background())
}

func (i *envVarSourcePtrType) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourcePtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceOutput struct{ *pulumi.OutputState }

func (EnvVarSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSource)(nil)).Elem()
}

func (o EnvVarSourceOutput) ToEnvVarSourceOutput() EnvVarSourceOutput {
	return o
}

func (o EnvVarSourceOutput) ToEnvVarSourceOutputWithContext(ctx context.Context) EnvVarSourceOutput {
	return o
}

func (o EnvVarSourceOutput) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return o.ToEnvVarSourcePtrOutputWithContext(context.Background())
}

func (o EnvVarSourceOutput) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnvVarSource) *EnvVarSource {
		return &v
	}).(EnvVarSourcePtrOutput)
}

// Not supported by Cloud Run. Not supported in Cloud Run.
func (o EnvVarSourceOutput) ConfigMapKeyRef() ConfigMapKeySelectorPtrOutput {
	return o.ApplyT(func(v EnvVarSource) *ConfigMapKeySelector { return v.ConfigMapKeyRef }).(ConfigMapKeySelectorPtrOutput)
}

// Selects a key (version) of a secret in Secret Manager.
func (o EnvVarSourceOutput) SecretKeyRef() SecretKeySelectorPtrOutput {
	return o.ApplyT(func(v EnvVarSource) *SecretKeySelector { return v.SecretKeyRef }).(SecretKeySelectorPtrOutput)
}

type EnvVarSourcePtrOutput struct{ *pulumi.OutputState }

func (EnvVarSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarSource)(nil)).Elem()
}

func (o EnvVarSourcePtrOutput) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return o
}

func (o EnvVarSourcePtrOutput) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return o
}

func (o EnvVarSourcePtrOutput) Elem() EnvVarSourceOutput {
	return o.ApplyT(func(v *EnvVarSource) EnvVarSource {
		if v != nil {
			return *v
		}
		var ret EnvVarSource
		return ret
	}).(EnvVarSourceOutput)
}

// Not supported by Cloud Run. Not supported in Cloud Run.
func (o EnvVarSourcePtrOutput) ConfigMapKeyRef() ConfigMapKeySelectorPtrOutput {
	return o.ApplyT(func(v *EnvVarSource) *ConfigMapKeySelector {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(ConfigMapKeySelectorPtrOutput)
}

// Selects a key (version) of a secret in Secret Manager.
func (o EnvVarSourcePtrOutput) SecretKeyRef() SecretKeySelectorPtrOutput {
	return o.ApplyT(func(v *EnvVarSource) *SecretKeySelector {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(SecretKeySelectorPtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceResponse struct {
	// Not supported by Cloud Run. Not supported in Cloud Run.
	ConfigMapKeyRef ConfigMapKeySelectorResponse `pulumi:"configMapKeyRef"`
	// Selects a key (version) of a secret in Secret Manager.
	SecretKeyRef SecretKeySelectorResponse `pulumi:"secretKeyRef"`
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceResponseOutput struct{ *pulumi.OutputState }

func (EnvVarSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSourceResponse)(nil)).Elem()
}

func (o EnvVarSourceResponseOutput) ToEnvVarSourceResponseOutput() EnvVarSourceResponseOutput {
	return o
}

func (o EnvVarSourceResponseOutput) ToEnvVarSourceResponseOutputWithContext(ctx context.Context) EnvVarSourceResponseOutput {
	return o
}

// Not supported by Cloud Run. Not supported in Cloud Run.
func (o EnvVarSourceResponseOutput) ConfigMapKeyRef() ConfigMapKeySelectorResponseOutput {
	return o.ApplyT(func(v EnvVarSourceResponse) ConfigMapKeySelectorResponse { return v.ConfigMapKeyRef }).(ConfigMapKeySelectorResponseOutput)
}

// Selects a key (version) of a secret in Secret Manager.
func (o EnvVarSourceResponseOutput) SecretKeyRef() SecretKeySelectorResponseOutput {
	return o.ApplyT(func(v EnvVarSourceResponse) SecretKeySelectorResponse { return v.SecretKeyRef }).(SecretKeySelectorResponseOutput)
}

// Not supported by Cloud Run. ExecAction describes a "run in container" action.
type ExecAction struct {
	// Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// ExecActionInput is an input type that accepts ExecActionArgs and ExecActionOutput values.
// You can construct a concrete instance of `ExecActionInput` via:
//
//	ExecActionArgs{...}
type ExecActionInput interface {
	pulumi.Input

	ToExecActionOutput() ExecActionOutput
	ToExecActionOutputWithContext(context.Context) ExecActionOutput
}

// Not supported by Cloud Run. ExecAction describes a "run in container" action.
type ExecActionArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ExecActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecAction)(nil)).Elem()
}

func (i ExecActionArgs) ToExecActionOutput() ExecActionOutput {
	return i.ToExecActionOutputWithContext(context.Background())
}

func (i ExecActionArgs) ToExecActionOutputWithContext(ctx context.Context) ExecActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionOutput)
}

func (i ExecActionArgs) ToExecActionPtrOutput() ExecActionPtrOutput {
	return i.ToExecActionPtrOutputWithContext(context.Background())
}

func (i ExecActionArgs) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionOutput).ToExecActionPtrOutputWithContext(ctx)
}

// ExecActionPtrInput is an input type that accepts ExecActionArgs, ExecActionPtr and ExecActionPtrOutput values.
// You can construct a concrete instance of `ExecActionPtrInput` via:
//
//	        ExecActionArgs{...}
//
//	or:
//
//	        nil
type ExecActionPtrInput interface {
	pulumi.Input

	ToExecActionPtrOutput() ExecActionPtrOutput
	ToExecActionPtrOutputWithContext(context.Context) ExecActionPtrOutput
}

type execActionPtrType ExecActionArgs

func ExecActionPtr(v *ExecActionArgs) ExecActionPtrInput {
	return (*execActionPtrType)(v)
}

func (*execActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecAction)(nil)).Elem()
}

func (i *execActionPtrType) ToExecActionPtrOutput() ExecActionPtrOutput {
	return i.ToExecActionPtrOutputWithContext(context.Background())
}

func (i *execActionPtrType) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionPtrOutput)
}

// Not supported by Cloud Run. ExecAction describes a "run in container" action.
type ExecActionOutput struct{ *pulumi.OutputState }

func (ExecActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecAction)(nil)).Elem()
}

func (o ExecActionOutput) ToExecActionOutput() ExecActionOutput {
	return o
}

func (o ExecActionOutput) ToExecActionOutputWithContext(ctx context.Context) ExecActionOutput {
	return o
}

func (o ExecActionOutput) ToExecActionPtrOutput() ExecActionPtrOutput {
	return o.ToExecActionPtrOutputWithContext(context.Background())
}

func (o ExecActionOutput) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecAction) *ExecAction {
		return &v
	}).(ExecActionPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ExecActionOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecAction) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ExecActionPtrOutput struct{ *pulumi.OutputState }

func (ExecActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecAction)(nil)).Elem()
}

func (o ExecActionPtrOutput) ToExecActionPtrOutput() ExecActionPtrOutput {
	return o
}

func (o ExecActionPtrOutput) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return o
}

func (o ExecActionPtrOutput) Elem() ExecActionOutput {
	return o.ApplyT(func(v *ExecAction) ExecAction {
		if v != nil {
			return *v
		}
		var ret ExecAction
		return ret
	}).(ExecActionOutput)
}

// Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ExecActionPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExecAction) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Not supported by Cloud Run. ExecAction describes a "run in container" action.
type ExecActionResponse struct {
	// Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// Not supported by Cloud Run. ExecAction describes a "run in container" action.
type ExecActionResponseOutput struct{ *pulumi.OutputState }

func (ExecActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecActionResponse)(nil)).Elem()
}

func (o ExecActionResponseOutput) ToExecActionResponseOutput() ExecActionResponseOutput {
	return o
}

func (o ExecActionResponseOutput) ToExecActionResponseOutputWithContext(ctx context.Context) ExecActionResponseOutput {
	return o
}

// Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ExecActionResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecActionResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Reference to an Execution. Use /Executions.GetExecution with the given name to get full execution including the latest status.
type ExecutionReferenceResponse struct {
	// Optional. Completion timestamp of the execution.
	CompletionTimestamp string `pulumi:"completionTimestamp"`
	// Optional. Creation timestamp of the execution.
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// Optional. Name of the execution.
	Name string `pulumi:"name"`
}

// Reference to an Execution. Use /Executions.GetExecution with the given name to get full execution including the latest status.
type ExecutionReferenceResponseOutput struct{ *pulumi.OutputState }

func (ExecutionReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionReferenceResponse)(nil)).Elem()
}

func (o ExecutionReferenceResponseOutput) ToExecutionReferenceResponseOutput() ExecutionReferenceResponseOutput {
	return o
}

func (o ExecutionReferenceResponseOutput) ToExecutionReferenceResponseOutputWithContext(ctx context.Context) ExecutionReferenceResponseOutput {
	return o
}

// Optional. Completion timestamp of the execution.
func (o ExecutionReferenceResponseOutput) CompletionTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionReferenceResponse) string { return v.CompletionTimestamp }).(pulumi.StringOutput)
}

// Optional. Creation timestamp of the execution.
func (o ExecutionReferenceResponseOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionReferenceResponse) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// Optional. Name of the execution.
func (o ExecutionReferenceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionReferenceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// ExecutionSpec describes how the execution will look.
type ExecutionSpec struct {
	// Optional. Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed, i.e. when the work left to do is less than max parallelism.
	Parallelism *int `pulumi:"parallelism"`
	// Optional. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.
	TaskCount *int `pulumi:"taskCount"`
	// Optional. The template used to create tasks for this execution.
	Template *TaskTemplateSpec `pulumi:"template"`
}

// ExecutionSpec describes how the execution will look.
type ExecutionSpecResponse struct {
	// Optional. Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed, i.e. when the work left to do is less than max parallelism.
	Parallelism int `pulumi:"parallelism"`
	// Optional. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.
	TaskCount int `pulumi:"taskCount"`
	// Optional. The template used to create tasks for this execution.
	Template TaskTemplateSpecResponse `pulumi:"template"`
}

// ExecutionSpec describes how the execution will look.
type ExecutionSpecResponseOutput struct{ *pulumi.OutputState }

func (ExecutionSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionSpecResponse)(nil)).Elem()
}

func (o ExecutionSpecResponseOutput) ToExecutionSpecResponseOutput() ExecutionSpecResponseOutput {
	return o
}

func (o ExecutionSpecResponseOutput) ToExecutionSpecResponseOutputWithContext(ctx context.Context) ExecutionSpecResponseOutput {
	return o
}

// Optional. Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed, i.e. when the work left to do is less than max parallelism.
func (o ExecutionSpecResponseOutput) Parallelism() pulumi.IntOutput {
	return o.ApplyT(func(v ExecutionSpecResponse) int { return v.Parallelism }).(pulumi.IntOutput)
}

// Optional. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.
func (o ExecutionSpecResponseOutput) TaskCount() pulumi.IntOutput {
	return o.ApplyT(func(v ExecutionSpecResponse) int { return v.TaskCount }).(pulumi.IntOutput)
}

// Optional. The template used to create tasks for this execution.
func (o ExecutionSpecResponseOutput) Template() TaskTemplateSpecResponseOutput {
	return o.ApplyT(func(v ExecutionSpecResponse) TaskTemplateSpecResponse { return v.Template }).(TaskTemplateSpecResponseOutput)
}

// ExecutionTemplateSpec describes the metadata and spec an Execution should have when created from a job.
type ExecutionTemplateSpec struct {
	// Optional. Optional metadata for this Execution, including labels and annotations. The following annotation keys set properties of the created execution: * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
	Metadata *ObjectMeta `pulumi:"metadata"`
	// ExecutionSpec holds the desired configuration for executions of this job.
	Spec ExecutionSpec `pulumi:"spec"`
}

// ExecutionTemplateSpec describes the metadata and spec an Execution should have when created from a job.
type ExecutionTemplateSpecResponse struct {
	// Optional. Optional metadata for this Execution, including labels and annotations. The following annotation keys set properties of the created execution: * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
	Metadata ObjectMetaResponse `pulumi:"metadata"`
	// ExecutionSpec holds the desired configuration for executions of this job.
	Spec ExecutionSpecResponse `pulumi:"spec"`
}

// ExecutionTemplateSpec describes the metadata and spec an Execution should have when created from a job.
type ExecutionTemplateSpecResponseOutput struct{ *pulumi.OutputState }

func (ExecutionTemplateSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionTemplateSpecResponse)(nil)).Elem()
}

func (o ExecutionTemplateSpecResponseOutput) ToExecutionTemplateSpecResponseOutput() ExecutionTemplateSpecResponseOutput {
	return o
}

func (o ExecutionTemplateSpecResponseOutput) ToExecutionTemplateSpecResponseOutputWithContext(ctx context.Context) ExecutionTemplateSpecResponseOutput {
	return o
}

// Optional. Optional metadata for this Execution, including labels and annotations. The following annotation keys set properties of the created execution: * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
func (o ExecutionTemplateSpecResponseOutput) Metadata() ObjectMetaResponseOutput {
	return o.ApplyT(func(v ExecutionTemplateSpecResponse) ObjectMetaResponse { return v.Metadata }).(ObjectMetaResponseOutput)
}

// ExecutionSpec holds the desired configuration for executions of this job.
func (o ExecutionTemplateSpecResponseOutput) Spec() ExecutionSpecResponseOutput {
	return o.ApplyT(func(v ExecutionTemplateSpecResponse) ExecutionSpecResponse { return v.Spec }).(ExecutionSpecResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// GRPCAction describes an action involving a GRPC port.
type GRPCAction struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port *int `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest. If this is not specified, the default behavior is defined by gRPC.
	Service *string `pulumi:"service"`
}

// GRPCActionInput is an input type that accepts GRPCActionArgs and GRPCActionOutput values.
// You can construct a concrete instance of `GRPCActionInput` via:
//
//	GRPCActionArgs{...}
type GRPCActionInput interface {
	pulumi.Input

	ToGRPCActionOutput() GRPCActionOutput
	ToGRPCActionOutputWithContext(context.Context) GRPCActionOutput
}

// GRPCAction describes an action involving a GRPC port.
type GRPCActionArgs struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest. If this is not specified, the default behavior is defined by gRPC.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (GRPCActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCAction)(nil)).Elem()
}

func (i GRPCActionArgs) ToGRPCActionOutput() GRPCActionOutput {
	return i.ToGRPCActionOutputWithContext(context.Background())
}

func (i GRPCActionArgs) ToGRPCActionOutputWithContext(ctx context.Context) GRPCActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCActionOutput)
}

func (i GRPCActionArgs) ToGRPCActionPtrOutput() GRPCActionPtrOutput {
	return i.ToGRPCActionPtrOutputWithContext(context.Background())
}

func (i GRPCActionArgs) ToGRPCActionPtrOutputWithContext(ctx context.Context) GRPCActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCActionOutput).ToGRPCActionPtrOutputWithContext(ctx)
}

// GRPCActionPtrInput is an input type that accepts GRPCActionArgs, GRPCActionPtr and GRPCActionPtrOutput values.
// You can construct a concrete instance of `GRPCActionPtrInput` via:
//
//	        GRPCActionArgs{...}
//
//	or:
//
//	        nil
type GRPCActionPtrInput interface {
	pulumi.Input

	ToGRPCActionPtrOutput() GRPCActionPtrOutput
	ToGRPCActionPtrOutputWithContext(context.Context) GRPCActionPtrOutput
}

type grpcactionPtrType GRPCActionArgs

func GRPCActionPtr(v *GRPCActionArgs) GRPCActionPtrInput {
	return (*grpcactionPtrType)(v)
}

func (*grpcactionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCAction)(nil)).Elem()
}

func (i *grpcactionPtrType) ToGRPCActionPtrOutput() GRPCActionPtrOutput {
	return i.ToGRPCActionPtrOutputWithContext(context.Background())
}

func (i *grpcactionPtrType) ToGRPCActionPtrOutputWithContext(ctx context.Context) GRPCActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCActionPtrOutput)
}

// GRPCAction describes an action involving a GRPC port.
type GRPCActionOutput struct{ *pulumi.OutputState }

func (GRPCActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCAction)(nil)).Elem()
}

func (o GRPCActionOutput) ToGRPCActionOutput() GRPCActionOutput {
	return o
}

func (o GRPCActionOutput) ToGRPCActionOutputWithContext(ctx context.Context) GRPCActionOutput {
	return o
}

func (o GRPCActionOutput) ToGRPCActionPtrOutput() GRPCActionPtrOutput {
	return o.ToGRPCActionPtrOutputWithContext(context.Background())
}

func (o GRPCActionOutput) ToGRPCActionPtrOutputWithContext(ctx context.Context) GRPCActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCAction) *GRPCAction {
		return &v
	}).(GRPCActionPtrOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o GRPCActionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCAction) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest. If this is not specified, the default behavior is defined by gRPC.
func (o GRPCActionOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCAction) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type GRPCActionPtrOutput struct{ *pulumi.OutputState }

func (GRPCActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCAction)(nil)).Elem()
}

func (o GRPCActionPtrOutput) ToGRPCActionPtrOutput() GRPCActionPtrOutput {
	return o
}

func (o GRPCActionPtrOutput) ToGRPCActionPtrOutputWithContext(ctx context.Context) GRPCActionPtrOutput {
	return o
}

func (o GRPCActionPtrOutput) Elem() GRPCActionOutput {
	return o.ApplyT(func(v *GRPCAction) GRPCAction {
		if v != nil {
			return *v
		}
		var ret GRPCAction
		return ret
	}).(GRPCActionOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o GRPCActionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCAction) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest. If this is not specified, the default behavior is defined by gRPC.
func (o GRPCActionPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCAction) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// GRPCAction describes an action involving a GRPC port.
type GRPCActionResponse struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port int `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest. If this is not specified, the default behavior is defined by gRPC.
	Service string `pulumi:"service"`
}

// GRPCAction describes an action involving a GRPC port.
type GRPCActionResponseOutput struct{ *pulumi.OutputState }

func (GRPCActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCActionResponse)(nil)).Elem()
}

func (o GRPCActionResponseOutput) ToGRPCActionResponseOutput() GRPCActionResponseOutput {
	return o
}

func (o GRPCActionResponseOutput) ToGRPCActionResponseOutputWithContext(ctx context.Context) GRPCActionResponseOutput {
	return o
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o GRPCActionResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GRPCActionResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest. If this is not specified, the default behavior is defined by gRPC.
func (o GRPCActionResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCActionResponse) string { return v.Service }).(pulumi.StringOutput)
}

// Conditions show the status of reconciliation progress on a given resource. Most resource use a top-level condition type "Ready" or "Completed" to show overall status with other conditions to checkpoint each stage of reconciliation. Note that if metadata.Generation does not equal status.ObservedGeneration, the conditions shown may not be relevant for the current spec.
type GoogleCloudRunV1Condition struct {
	// Optional. Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Optional. Human readable message indicating details about the current status.
	Message *string `pulumi:"message"`
	// Optional. One-word CamelCase reason for the condition's last transition. These are intended to be stable, unique values which the client may use to trigger error handling logic, whereas messages which may be changed later by the server.
	Reason *string `pulumi:"reason"`
	// Optional. How to interpret this condition. One of Error, Warning, or Info. Conditions of severity Info do not contribute to resource readiness.
	Severity *string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type is used to communicate the status of the reconciliation process. Types common to all resources include: * "Ready" or "Completed": True when the Resource is ready.
	Type *string `pulumi:"type"`
}

// Conditions show the status of reconciliation progress on a given resource. Most resource use a top-level condition type "Ready" or "Completed" to show overall status with other conditions to checkpoint each stage of reconciliation. Note that if metadata.Generation does not equal status.ObservedGeneration, the conditions shown may not be relevant for the current spec.
type GoogleCloudRunV1ConditionResponse struct {
	// Optional. Last time the condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// Optional. Human readable message indicating details about the current status.
	Message string `pulumi:"message"`
	// Optional. One-word CamelCase reason for the condition's last transition. These are intended to be stable, unique values which the client may use to trigger error handling logic, whereas messages which may be changed later by the server.
	Reason string `pulumi:"reason"`
	// Optional. How to interpret this condition. One of Error, Warning, or Info. Conditions of severity Info do not contribute to resource readiness.
	Severity string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// type is used to communicate the status of the reconciliation process. Types common to all resources include: * "Ready" or "Completed": True when the Resource is ready.
	Type string `pulumi:"type"`
}

// Conditions show the status of reconciliation progress on a given resource. Most resource use a top-level condition type "Ready" or "Completed" to show overall status with other conditions to checkpoint each stage of reconciliation. Note that if metadata.Generation does not equal status.ObservedGeneration, the conditions shown may not be relevant for the current spec.
type GoogleCloudRunV1ConditionResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV1ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudRunV1ConditionResponse)(nil)).Elem()
}

func (o GoogleCloudRunV1ConditionResponseOutput) ToGoogleCloudRunV1ConditionResponseOutput() GoogleCloudRunV1ConditionResponseOutput {
	return o
}

func (o GoogleCloudRunV1ConditionResponseOutput) ToGoogleCloudRunV1ConditionResponseOutputWithContext(ctx context.Context) GoogleCloudRunV1ConditionResponseOutput {
	return o
}

// Optional. Last time the condition transitioned from one status to another.
func (o GoogleCloudRunV1ConditionResponseOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV1ConditionResponse) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// Optional. Human readable message indicating details about the current status.
func (o GoogleCloudRunV1ConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV1ConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Optional. One-word CamelCase reason for the condition's last transition. These are intended to be stable, unique values which the client may use to trigger error handling logic, whereas messages which may be changed later by the server.
func (o GoogleCloudRunV1ConditionResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV1ConditionResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// Optional. How to interpret this condition. One of Error, Warning, or Info. Conditions of severity Info do not contribute to resource readiness.
func (o GoogleCloudRunV1ConditionResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV1ConditionResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o GoogleCloudRunV1ConditionResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV1ConditionResponse) string { return v.Status }).(pulumi.StringOutput)
}

// type is used to communicate the status of the reconciliation process. Types common to all resources include: * "Ready" or "Completed": True when the Resource is ready.
func (o GoogleCloudRunV1ConditionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudRunV1ConditionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GoogleCloudRunV1ConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudRunV1ConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudRunV1ConditionResponse)(nil)).Elem()
}

func (o GoogleCloudRunV1ConditionResponseArrayOutput) ToGoogleCloudRunV1ConditionResponseArrayOutput() GoogleCloudRunV1ConditionResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV1ConditionResponseArrayOutput) ToGoogleCloudRunV1ConditionResponseArrayOutputWithContext(ctx context.Context) GoogleCloudRunV1ConditionResponseArrayOutput {
	return o
}

func (o GoogleCloudRunV1ConditionResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudRunV1ConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudRunV1ConditionResponse {
		return vs[0].([]GoogleCloudRunV1ConditionResponse)[vs[1].(int)]
	}).(GoogleCloudRunV1ConditionResponseOutput)
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetAction struct {
	// Not supported by Cloud Run.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []HTTPHeader `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Port number to access on the container. Number must be in the range 1 to 65535.
	Port *int `pulumi:"port"`
	// Not supported by Cloud Run.
	Scheme *string `pulumi:"scheme"`
}

// HTTPGetActionInput is an input type that accepts HTTPGetActionArgs and HTTPGetActionOutput values.
// You can construct a concrete instance of `HTTPGetActionInput` via:
//
//	HTTPGetActionArgs{...}
type HTTPGetActionInput interface {
	pulumi.Input

	ToHTTPGetActionOutput() HTTPGetActionOutput
	ToHTTPGetActionOutputWithContext(context.Context) HTTPGetActionOutput
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionArgs struct {
	// Not supported by Cloud Run.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders HTTPHeaderArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Port number to access on the container. Number must be in the range 1 to 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Not supported by Cloud Run.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (HTTPGetActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetAction)(nil)).Elem()
}

func (i HTTPGetActionArgs) ToHTTPGetActionOutput() HTTPGetActionOutput {
	return i.ToHTTPGetActionOutputWithContext(context.Background())
}

func (i HTTPGetActionArgs) ToHTTPGetActionOutputWithContext(ctx context.Context) HTTPGetActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionOutput)
}

func (i HTTPGetActionArgs) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return i.ToHTTPGetActionPtrOutputWithContext(context.Background())
}

func (i HTTPGetActionArgs) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionOutput).ToHTTPGetActionPtrOutputWithContext(ctx)
}

// HTTPGetActionPtrInput is an input type that accepts HTTPGetActionArgs, HTTPGetActionPtr and HTTPGetActionPtrOutput values.
// You can construct a concrete instance of `HTTPGetActionPtrInput` via:
//
//	        HTTPGetActionArgs{...}
//
//	or:
//
//	        nil
type HTTPGetActionPtrInput interface {
	pulumi.Input

	ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput
	ToHTTPGetActionPtrOutputWithContext(context.Context) HTTPGetActionPtrOutput
}

type httpgetActionPtrType HTTPGetActionArgs

func HTTPGetActionPtr(v *HTTPGetActionArgs) HTTPGetActionPtrInput {
	return (*httpgetActionPtrType)(v)
}

func (*httpgetActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPGetAction)(nil)).Elem()
}

func (i *httpgetActionPtrType) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return i.ToHTTPGetActionPtrOutputWithContext(context.Background())
}

func (i *httpgetActionPtrType) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionPtrOutput)
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionOutput struct{ *pulumi.OutputState }

func (HTTPGetActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetAction)(nil)).Elem()
}

func (o HTTPGetActionOutput) ToHTTPGetActionOutput() HTTPGetActionOutput {
	return o
}

func (o HTTPGetActionOutput) ToHTTPGetActionOutputWithContext(ctx context.Context) HTTPGetActionOutput {
	return o
}

func (o HTTPGetActionOutput) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return o.ToHTTPGetActionPtrOutputWithContext(context.Background())
}

func (o HTTPGetActionOutput) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HTTPGetAction) *HTTPGetAction {
		return &v
	}).(HTTPGetActionPtrOutput)
}

// Not supported by Cloud Run.
func (o HTTPGetActionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetAction) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o HTTPGetActionOutput) HttpHeaders() HTTPHeaderArrayOutput {
	return o.ApplyT(func(v HTTPGetAction) []HTTPHeader { return v.HttpHeaders }).(HTTPHeaderArrayOutput)
}

// Path to access on the HTTP server.
func (o HTTPGetActionOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetAction) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Port number to access on the container. Number must be in the range 1 to 65535.
func (o HTTPGetActionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HTTPGetAction) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Not supported by Cloud Run.
func (o HTTPGetActionOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetAction) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type HTTPGetActionPtrOutput struct{ *pulumi.OutputState }

func (HTTPGetActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPGetAction)(nil)).Elem()
}

func (o HTTPGetActionPtrOutput) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return o
}

func (o HTTPGetActionPtrOutput) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return o
}

func (o HTTPGetActionPtrOutput) Elem() HTTPGetActionOutput {
	return o.ApplyT(func(v *HTTPGetAction) HTTPGetAction {
		if v != nil {
			return *v
		}
		var ret HTTPGetAction
		return ret
	}).(HTTPGetActionOutput)
}

// Not supported by Cloud Run.
func (o HTTPGetActionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o HTTPGetActionPtrOutput) HttpHeaders() HTTPHeaderArrayOutput {
	return o.ApplyT(func(v *HTTPGetAction) []HTTPHeader {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(HTTPHeaderArrayOutput)
}

// Path to access on the HTTP server.
func (o HTTPGetActionPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Port number to access on the container. Number must be in the range 1 to 65535.
func (o HTTPGetActionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HTTPGetAction) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Not supported by Cloud Run.
func (o HTTPGetActionPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionResponse struct {
	// Not supported by Cloud Run.
	Host string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []HTTPHeaderResponse `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path string `pulumi:"path"`
	// Port number to access on the container. Number must be in the range 1 to 65535.
	Port int `pulumi:"port"`
	// Not supported by Cloud Run.
	Scheme string `pulumi:"scheme"`
}

// HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionResponseOutput struct{ *pulumi.OutputState }

func (HTTPGetActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetActionResponse)(nil)).Elem()
}

func (o HTTPGetActionResponseOutput) ToHTTPGetActionResponseOutput() HTTPGetActionResponseOutput {
	return o
}

func (o HTTPGetActionResponseOutput) ToHTTPGetActionResponseOutputWithContext(ctx context.Context) HTTPGetActionResponseOutput {
	return o
}

// Not supported by Cloud Run.
func (o HTTPGetActionResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPGetActionResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o HTTPGetActionResponseOutput) HttpHeaders() HTTPHeaderResponseArrayOutput {
	return o.ApplyT(func(v HTTPGetActionResponse) []HTTPHeaderResponse { return v.HttpHeaders }).(HTTPHeaderResponseArrayOutput)
}

// Path to access on the HTTP server.
func (o HTTPGetActionResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPGetActionResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Port number to access on the container. Number must be in the range 1 to 65535.
func (o HTTPGetActionResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v HTTPGetActionResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Not supported by Cloud Run.
func (o HTTPGetActionResponseOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPGetActionResponse) string { return v.Scheme }).(pulumi.StringOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeader struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value *string `pulumi:"value"`
}

// HTTPHeaderInput is an input type that accepts HTTPHeaderArgs and HTTPHeaderOutput values.
// You can construct a concrete instance of `HTTPHeaderInput` via:
//
//	HTTPHeaderArgs{...}
type HTTPHeaderInput interface {
	pulumi.Input

	ToHTTPHeaderOutput() HTTPHeaderOutput
	ToHTTPHeaderOutputWithContext(context.Context) HTTPHeaderOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HTTPHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeader)(nil)).Elem()
}

func (i HTTPHeaderArgs) ToHTTPHeaderOutput() HTTPHeaderOutput {
	return i.ToHTTPHeaderOutputWithContext(context.Background())
}

func (i HTTPHeaderArgs) ToHTTPHeaderOutputWithContext(ctx context.Context) HTTPHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHeaderOutput)
}

// HTTPHeaderArrayInput is an input type that accepts HTTPHeaderArray and HTTPHeaderArrayOutput values.
// You can construct a concrete instance of `HTTPHeaderArrayInput` via:
//
//	HTTPHeaderArray{ HTTPHeaderArgs{...} }
type HTTPHeaderArrayInput interface {
	pulumi.Input

	ToHTTPHeaderArrayOutput() HTTPHeaderArrayOutput
	ToHTTPHeaderArrayOutputWithContext(context.Context) HTTPHeaderArrayOutput
}

type HTTPHeaderArray []HTTPHeaderInput

func (HTTPHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeader)(nil)).Elem()
}

func (i HTTPHeaderArray) ToHTTPHeaderArrayOutput() HTTPHeaderArrayOutput {
	return i.ToHTTPHeaderArrayOutputWithContext(context.Background())
}

func (i HTTPHeaderArray) ToHTTPHeaderArrayOutputWithContext(ctx context.Context) HTTPHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHeaderArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderOutput struct{ *pulumi.OutputState }

func (HTTPHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeader)(nil)).Elem()
}

func (o HTTPHeaderOutput) ToHTTPHeaderOutput() HTTPHeaderOutput {
	return o
}

func (o HTTPHeaderOutput) ToHTTPHeaderOutputWithContext(ctx context.Context) HTTPHeaderOutput {
	return o
}

// The header field name
func (o HTTPHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHeader) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o HTTPHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HTTPHeaderArrayOutput struct{ *pulumi.OutputState }

func (HTTPHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeader)(nil)).Elem()
}

func (o HTTPHeaderArrayOutput) ToHTTPHeaderArrayOutput() HTTPHeaderArrayOutput {
	return o
}

func (o HTTPHeaderArrayOutput) ToHTTPHeaderArrayOutputWithContext(ctx context.Context) HTTPHeaderArrayOutput {
	return o
}

func (o HTTPHeaderArrayOutput) Index(i pulumi.IntInput) HTTPHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HTTPHeader {
		return vs[0].([]HTTPHeader)[vs[1].(int)]
	}).(HTTPHeaderOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderResponse struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderResponseOutput struct{ *pulumi.OutputState }

func (HTTPHeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeaderResponse)(nil)).Elem()
}

func (o HTTPHeaderResponseOutput) ToHTTPHeaderResponseOutput() HTTPHeaderResponseOutput {
	return o
}

func (o HTTPHeaderResponseOutput) ToHTTPHeaderResponseOutputWithContext(ctx context.Context) HTTPHeaderResponseOutput {
	return o
}

// The header field name
func (o HTTPHeaderResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHeaderResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o HTTPHeaderResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHeaderResponse) string { return v.Value }).(pulumi.StringOutput)
}

type HTTPHeaderResponseArrayOutput struct{ *pulumi.OutputState }

func (HTTPHeaderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeaderResponse)(nil)).Elem()
}

func (o HTTPHeaderResponseArrayOutput) ToHTTPHeaderResponseArrayOutput() HTTPHeaderResponseArrayOutput {
	return o
}

func (o HTTPHeaderResponseArrayOutput) ToHTTPHeaderResponseArrayOutputWithContext(ctx context.Context) HTTPHeaderResponseArrayOutput {
	return o
}

func (o HTTPHeaderResponseArrayOutput) Index(i pulumi.IntInput) HTTPHeaderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HTTPHeaderResponse {
		return vs[0].([]HTTPHeaderResponse)[vs[1].(int)]
	}).(HTTPHeaderResponseOutput)
}

// JobSpec describes how the job will look.
type JobSpec struct {
	// Optional. Describes the execution that will be created when running a job.
	Template *ExecutionTemplateSpec `pulumi:"template"`
}

// JobSpec describes how the job will look.
type JobSpecResponse struct {
	// Optional. Describes the execution that will be created when running a job.
	Template ExecutionTemplateSpecResponse `pulumi:"template"`
}

// JobSpec describes how the job will look.
type JobSpecResponseOutput struct{ *pulumi.OutputState }

func (JobSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpecResponse)(nil)).Elem()
}

func (o JobSpecResponseOutput) ToJobSpecResponseOutput() JobSpecResponseOutput {
	return o
}

func (o JobSpecResponseOutput) ToJobSpecResponseOutputWithContext(ctx context.Context) JobSpecResponseOutput {
	return o
}

// Optional. Describes the execution that will be created when running a job.
func (o JobSpecResponseOutput) Template() ExecutionTemplateSpecResponseOutput {
	return o.ApplyT(func(v JobSpecResponse) ExecutionTemplateSpecResponse { return v.Template }).(ExecutionTemplateSpecResponseOutput)
}

// JobStatus represents the current state of a Job.
type JobStatusResponse struct {
	// Conditions communicate information about ongoing/complete reconciliation processes that bring the "spec" inline with the observed state of the world. Job-specific conditions include: * `Ready`: `True` when the job is ready to be executed.
	Conditions []GoogleCloudRunV1ConditionResponse `pulumi:"conditions"`
	// Number of executions created for this job.
	ExecutionCount int `pulumi:"executionCount"`
	// A pointer to the most recently created execution for this job. This is set regardless of the eventual state of the execution.
	LatestCreatedExecution ExecutionReferenceResponse `pulumi:"latestCreatedExecution"`
	// The 'generation' of the job that was last processed by the controller.
	ObservedGeneration int `pulumi:"observedGeneration"`
}

// JobStatus represents the current state of a Job.
type JobStatusResponseOutput struct{ *pulumi.OutputState }

func (JobStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusResponse)(nil)).Elem()
}

func (o JobStatusResponseOutput) ToJobStatusResponseOutput() JobStatusResponseOutput {
	return o
}

func (o JobStatusResponseOutput) ToJobStatusResponseOutputWithContext(ctx context.Context) JobStatusResponseOutput {
	return o
}

// Conditions communicate information about ongoing/complete reconciliation processes that bring the "spec" inline with the observed state of the world. Job-specific conditions include: * `Ready`: `True` when the job is ready to be executed.
func (o JobStatusResponseOutput) Conditions() GoogleCloudRunV1ConditionResponseArrayOutput {
	return o.ApplyT(func(v JobStatusResponse) []GoogleCloudRunV1ConditionResponse { return v.Conditions }).(GoogleCloudRunV1ConditionResponseArrayOutput)
}

// Number of executions created for this job.
func (o JobStatusResponseOutput) ExecutionCount() pulumi.IntOutput {
	return o.ApplyT(func(v JobStatusResponse) int { return v.ExecutionCount }).(pulumi.IntOutput)
}

// A pointer to the most recently created execution for this job. This is set regardless of the eventual state of the execution.
func (o JobStatusResponseOutput) LatestCreatedExecution() ExecutionReferenceResponseOutput {
	return o.ApplyT(func(v JobStatusResponse) ExecutionReferenceResponse { return v.LatestCreatedExecution }).(ExecutionReferenceResponseOutput)
}

// The 'generation' of the job that was last processed by the controller.
func (o JobStatusResponseOutput) ObservedGeneration() pulumi.IntOutput {
	return o.ApplyT(func(v JobStatusResponse) int { return v.ObservedGeneration }).(pulumi.IntOutput)
}

// Maps a string key to a path within a volume.
type KeyToPath struct {
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value, or an integer or a secret alias for a specific version. The key to project.
	Key *string `pulumi:"key"`
	// (Optional) Mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// KeyToPathInput is an input type that accepts KeyToPathArgs and KeyToPathOutput values.
// You can construct a concrete instance of `KeyToPathInput` via:
//
//	KeyToPathArgs{...}
type KeyToPathInput interface {
	pulumi.Input

	ToKeyToPathOutput() KeyToPathOutput
	ToKeyToPathOutputWithContext(context.Context) KeyToPathOutput
}

// Maps a string key to a path within a volume.
type KeyToPathArgs struct {
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value, or an integer or a secret alias for a specific version. The key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// (Optional) Mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (KeyToPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPath)(nil)).Elem()
}

func (i KeyToPathArgs) ToKeyToPathOutput() KeyToPathOutput {
	return i.ToKeyToPathOutputWithContext(context.Background())
}

func (i KeyToPathArgs) ToKeyToPathOutputWithContext(ctx context.Context) KeyToPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyToPathOutput)
}

// KeyToPathArrayInput is an input type that accepts KeyToPathArray and KeyToPathArrayOutput values.
// You can construct a concrete instance of `KeyToPathArrayInput` via:
//
//	KeyToPathArray{ KeyToPathArgs{...} }
type KeyToPathArrayInput interface {
	pulumi.Input

	ToKeyToPathArrayOutput() KeyToPathArrayOutput
	ToKeyToPathArrayOutputWithContext(context.Context) KeyToPathArrayOutput
}

type KeyToPathArray []KeyToPathInput

func (KeyToPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPath)(nil)).Elem()
}

func (i KeyToPathArray) ToKeyToPathArrayOutput() KeyToPathArrayOutput {
	return i.ToKeyToPathArrayOutputWithContext(context.Background())
}

func (i KeyToPathArray) ToKeyToPathArrayOutputWithContext(ctx context.Context) KeyToPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyToPathArrayOutput)
}

// Maps a string key to a path within a volume.
type KeyToPathOutput struct{ *pulumi.OutputState }

func (KeyToPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPath)(nil)).Elem()
}

func (o KeyToPathOutput) ToKeyToPathOutput() KeyToPathOutput {
	return o
}

func (o KeyToPathOutput) ToKeyToPathOutputWithContext(ctx context.Context) KeyToPathOutput {
	return o
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value, or an integer or a secret alias for a specific version. The key to project.
func (o KeyToPathOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyToPath) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// (Optional) Mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KeyToPathOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KeyToPath) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o KeyToPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyToPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type KeyToPathArrayOutput struct{ *pulumi.OutputState }

func (KeyToPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPath)(nil)).Elem()
}

func (o KeyToPathArrayOutput) ToKeyToPathArrayOutput() KeyToPathArrayOutput {
	return o
}

func (o KeyToPathArrayOutput) ToKeyToPathArrayOutputWithContext(ctx context.Context) KeyToPathArrayOutput {
	return o
}

func (o KeyToPathArrayOutput) Index(i pulumi.IntInput) KeyToPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyToPath {
		return vs[0].([]KeyToPath)[vs[1].(int)]
	}).(KeyToPathOutput)
}

// Maps a string key to a path within a volume.
type KeyToPathResponse struct {
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value, or an integer or a secret alias for a specific version. The key to project.
	Key string `pulumi:"key"`
	// (Optional) Mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode int `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// Maps a string key to a path within a volume.
type KeyToPathResponseOutput struct{ *pulumi.OutputState }

func (KeyToPathResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPathResponse)(nil)).Elem()
}

func (o KeyToPathResponseOutput) ToKeyToPathResponseOutput() KeyToPathResponseOutput {
	return o
}

func (o KeyToPathResponseOutput) ToKeyToPathResponseOutputWithContext(ctx context.Context) KeyToPathResponseOutput {
	return o
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value, or an integer or a secret alias for a specific version. The key to project.
func (o KeyToPathResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KeyToPathResponse) string { return v.Key }).(pulumi.StringOutput)
}

// (Optional) Mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KeyToPathResponseOutput) Mode() pulumi.IntOutput {
	return o.ApplyT(func(v KeyToPathResponse) int { return v.Mode }).(pulumi.IntOutput)
}

// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o KeyToPathResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v KeyToPathResponse) string { return v.Path }).(pulumi.StringOutput)
}

type KeyToPathResponseArrayOutput struct{ *pulumi.OutputState }

func (KeyToPathResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPathResponse)(nil)).Elem()
}

func (o KeyToPathResponseArrayOutput) ToKeyToPathResponseArrayOutput() KeyToPathResponseArrayOutput {
	return o
}

func (o KeyToPathResponseArrayOutput) ToKeyToPathResponseArrayOutputWithContext(ctx context.Context) KeyToPathResponseArrayOutput {
	return o
}

func (o KeyToPathResponseArrayOutput) Index(i pulumi.IntInput) KeyToPathResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyToPathResponse {
		return vs[0].([]KeyToPathResponse)[vs[1].(int)]
	}).(KeyToPathResponseOutput)
}

// Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReference struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// LocalObjectReferenceInput is an input type that accepts LocalObjectReferenceArgs and LocalObjectReferenceOutput values.
// You can construct a concrete instance of `LocalObjectReferenceInput` via:
//
//	LocalObjectReferenceArgs{...}
type LocalObjectReferenceInput interface {
	pulumi.Input

	ToLocalObjectReferenceOutput() LocalObjectReferenceOutput
	ToLocalObjectReferenceOutputWithContext(context.Context) LocalObjectReferenceOutput
}

// Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LocalObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReference)(nil)).Elem()
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferenceOutput() LocalObjectReferenceOutput {
	return i.ToLocalObjectReferenceOutputWithContext(context.Background())
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferenceOutputWithContext(ctx context.Context) LocalObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferenceOutput)
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return i.ToLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferenceOutput).ToLocalObjectReferencePtrOutputWithContext(ctx)
}

// LocalObjectReferencePtrInput is an input type that accepts LocalObjectReferenceArgs, LocalObjectReferencePtr and LocalObjectReferencePtrOutput values.
// You can construct a concrete instance of `LocalObjectReferencePtrInput` via:
//
//	        LocalObjectReferenceArgs{...}
//
//	or:
//
//	        nil
type LocalObjectReferencePtrInput interface {
	pulumi.Input

	ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput
	ToLocalObjectReferencePtrOutputWithContext(context.Context) LocalObjectReferencePtrOutput
}

type localObjectReferencePtrType LocalObjectReferenceArgs

func LocalObjectReferencePtr(v *LocalObjectReferenceArgs) LocalObjectReferencePtrInput {
	return (*localObjectReferencePtrType)(v)
}

func (*localObjectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalObjectReference)(nil)).Elem()
}

func (i *localObjectReferencePtrType) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return i.ToLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (i *localObjectReferencePtrType) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferencePtrOutput)
}

// LocalObjectReferenceArrayInput is an input type that accepts LocalObjectReferenceArray and LocalObjectReferenceArrayOutput values.
// You can construct a concrete instance of `LocalObjectReferenceArrayInput` via:
//
//	LocalObjectReferenceArray{ LocalObjectReferenceArgs{...} }
type LocalObjectReferenceArrayInput interface {
	pulumi.Input

	ToLocalObjectReferenceArrayOutput() LocalObjectReferenceArrayOutput
	ToLocalObjectReferenceArrayOutputWithContext(context.Context) LocalObjectReferenceArrayOutput
}

type LocalObjectReferenceArray []LocalObjectReferenceInput

func (LocalObjectReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalObjectReference)(nil)).Elem()
}

func (i LocalObjectReferenceArray) ToLocalObjectReferenceArrayOutput() LocalObjectReferenceArrayOutput {
	return i.ToLocalObjectReferenceArrayOutputWithContext(context.Background())
}

func (i LocalObjectReferenceArray) ToLocalObjectReferenceArrayOutputWithContext(ctx context.Context) LocalObjectReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferenceArrayOutput)
}

// Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceOutput struct{ *pulumi.OutputState }

func (LocalObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReference)(nil)).Elem()
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferenceOutput() LocalObjectReferenceOutput {
	return o
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferenceOutputWithContext(ctx context.Context) LocalObjectReferenceOutput {
	return o
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return o.ToLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalObjectReference) *LocalObjectReference {
		return &v
	}).(LocalObjectReferencePtrOutput)
}

// Name of the referent.
func (o LocalObjectReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalObjectReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type LocalObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (LocalObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalObjectReference)(nil)).Elem()
}

func (o LocalObjectReferencePtrOutput) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return o
}

func (o LocalObjectReferencePtrOutput) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return o
}

func (o LocalObjectReferencePtrOutput) Elem() LocalObjectReferenceOutput {
	return o.ApplyT(func(v *LocalObjectReference) LocalObjectReference {
		if v != nil {
			return *v
		}
		var ret LocalObjectReference
		return ret
	}).(LocalObjectReferenceOutput)
}

// Name of the referent.
func (o LocalObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type LocalObjectReferenceArrayOutput struct{ *pulumi.OutputState }

func (LocalObjectReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalObjectReference)(nil)).Elem()
}

func (o LocalObjectReferenceArrayOutput) ToLocalObjectReferenceArrayOutput() LocalObjectReferenceArrayOutput {
	return o
}

func (o LocalObjectReferenceArrayOutput) ToLocalObjectReferenceArrayOutputWithContext(ctx context.Context) LocalObjectReferenceArrayOutput {
	return o
}

func (o LocalObjectReferenceArrayOutput) Index(i pulumi.IntInput) LocalObjectReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocalObjectReference {
		return vs[0].([]LocalObjectReference)[vs[1].(int)]
	}).(LocalObjectReferenceOutput)
}

// Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceResponse struct {
	// Name of the referent.
	Name string `pulumi:"name"`
}

// Not supported by Cloud Run. LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceResponseOutput struct{ *pulumi.OutputState }

func (LocalObjectReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReferenceResponse)(nil)).Elem()
}

func (o LocalObjectReferenceResponseOutput) ToLocalObjectReferenceResponseOutput() LocalObjectReferenceResponseOutput {
	return o
}

func (o LocalObjectReferenceResponseOutput) ToLocalObjectReferenceResponseOutputWithContext(ctx context.Context) LocalObjectReferenceResponseOutput {
	return o
}

// Name of the referent.
func (o LocalObjectReferenceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LocalObjectReferenceResponse) string { return v.Name }).(pulumi.StringOutput)
}

type LocalObjectReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (LocalObjectReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalObjectReferenceResponse)(nil)).Elem()
}

func (o LocalObjectReferenceResponseArrayOutput) ToLocalObjectReferenceResponseArrayOutput() LocalObjectReferenceResponseArrayOutput {
	return o
}

func (o LocalObjectReferenceResponseArrayOutput) ToLocalObjectReferenceResponseArrayOutputWithContext(ctx context.Context) LocalObjectReferenceResponseArrayOutput {
	return o
}

func (o LocalObjectReferenceResponseArrayOutput) Index(i pulumi.IntInput) LocalObjectReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocalObjectReferenceResponse {
		return vs[0].([]LocalObjectReferenceResponse)[vs[1].(int)]
	}).(LocalObjectReferenceResponseOutput)
}

// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMeta struct {
	// Unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. In Cloud Run, annotations with 'run.googleapis.com/' and 'autoscaling.knative.dev' are restricted, and the accepted annotations will be different depending on the resource type. * `autoscaling.knative.dev/maxScale`: Revision. * `autoscaling.knative.dev/minScale`: Revision. * `run.googleapis.com/binary-authorization-breakglass`: Service, Job, * `run.googleapis.com/binary-authorization`: Service, Job, Execution. * `run.googleapis.com/client-name`: All resources. * `run.googleapis.com/cloudsql-instances`: Revision, Execution. * `run.googleapis.com/container-dependencies`: Revision. * `run.googleapis.com/cpu-throttling`: Revision. * `run.googleapis.com/custom-audiences`: Service. * `run.googleapis.com/description`: Service. * `run.googleapis.com/disable-default-url`: Service. * `run.googleapis.com/encryption-key-shutdown-hours`: Revision * `run.googleapis.com/encryption-key`: Revision, Execution. * `run.googleapis.com/execution-environment`: Revision, Execution. * `run.googleapis.com/gc-traffic-tags`: Service. * `run.googleapis.com/ingress`: Service. * `run.googleapis.com/launch-stage`: Service, Job. * `run.googleapis.com/minScale`: Service (ALPHA) * `run.googleapis.com/network-interfaces`: Revision, Execution. * `run.googleapis.com/post-key-revocation-action-type`: Revision. * `run.googleapis.com/secrets`: Revision, Execution. * `run.googleapis.com/secure-session-agent`: Revision. * `run.googleapis.com/sessionAffinity`: Revision. * `run.googleapis.com/startup-cpu-boost`: Revision. * `run.googleapis.com/vpc-access-connector`: Revision, Execution. * `run.googleapis.com/vpc-access-egress`: Revision, Execution.
	Annotations map[string]string `pulumi:"annotations"`
	// Not supported by Cloud Run
	ClusterName *string `pulumi:"clusterName"`
	// UTC timestamp representing the server time when this object was created.
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// Not supported by Cloud Run
	DeletionGracePeriodSeconds *int `pulumi:"deletionGracePeriodSeconds"`
	// The read-only soft deletion timestamp for this resource. In Cloud Run, users are not able to set this field. Instead, they must call the corresponding Delete API.
	DeletionTimestamp *string `pulumi:"deletionTimestamp"`
	// Not supported by Cloud Run
	Finalizers []string `pulumi:"finalizers"`
	// Not supported by Cloud Run
	GenerateName *string `pulumi:"generateName"`
	// A system-provided sequence number representing a specific generation of the desired state.
	Generation *int `pulumi:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes.
	Labels map[string]string `pulumi:"labels"`
	// The name of the resource. Name is required when creating top-level resources (Service, Job), must be unique within a Cloud Run project/region, and cannot be changed once created.
	Name string `pulumi:"name"`
	// Defines the space within each name must be unique within a Cloud Run region. In Cloud Run, it must be project ID or number.
	Namespace string `pulumi:"namespace"`
	// Not supported by Cloud Run
	OwnerReferences []OwnerReference `pulumi:"ownerReferences"`
	// Opaque, system-generated value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection.
	ResourceVersion *string `pulumi:"resourceVersion"`
	// URL representing this object.
	SelfLink *string `pulumi:"selfLink"`
	// Unique, system-generated identifier for this resource.
	Uid *string `pulumi:"uid"`
}

// ObjectMetaInput is an input type that accepts ObjectMetaArgs and ObjectMetaOutput values.
// You can construct a concrete instance of `ObjectMetaInput` via:
//
//	ObjectMetaArgs{...}
type ObjectMetaInput interface {
	pulumi.Input

	ToObjectMetaOutput() ObjectMetaOutput
	ToObjectMetaOutputWithContext(context.Context) ObjectMetaOutput
}

// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaArgs struct {
	// Unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. In Cloud Run, annotations with 'run.googleapis.com/' and 'autoscaling.knative.dev' are restricted, and the accepted annotations will be different depending on the resource type. * `autoscaling.knative.dev/maxScale`: Revision. * `autoscaling.knative.dev/minScale`: Revision. * `run.googleapis.com/binary-authorization-breakglass`: Service, Job, * `run.googleapis.com/binary-authorization`: Service, Job, Execution. * `run.googleapis.com/client-name`: All resources. * `run.googleapis.com/cloudsql-instances`: Revision, Execution. * `run.googleapis.com/container-dependencies`: Revision. * `run.googleapis.com/cpu-throttling`: Revision. * `run.googleapis.com/custom-audiences`: Service. * `run.googleapis.com/description`: Service. * `run.googleapis.com/disable-default-url`: Service. * `run.googleapis.com/encryption-key-shutdown-hours`: Revision * `run.googleapis.com/encryption-key`: Revision, Execution. * `run.googleapis.com/execution-environment`: Revision, Execution. * `run.googleapis.com/gc-traffic-tags`: Service. * `run.googleapis.com/ingress`: Service. * `run.googleapis.com/launch-stage`: Service, Job. * `run.googleapis.com/minScale`: Service (ALPHA) * `run.googleapis.com/network-interfaces`: Revision, Execution. * `run.googleapis.com/post-key-revocation-action-type`: Revision. * `run.googleapis.com/secrets`: Revision, Execution. * `run.googleapis.com/secure-session-agent`: Revision. * `run.googleapis.com/sessionAffinity`: Revision. * `run.googleapis.com/startup-cpu-boost`: Revision. * `run.googleapis.com/vpc-access-connector`: Revision, Execution. * `run.googleapis.com/vpc-access-egress`: Revision, Execution.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Not supported by Cloud Run
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// UTC timestamp representing the server time when this object was created.
	CreationTimestamp pulumi.StringPtrInput `pulumi:"creationTimestamp"`
	// Not supported by Cloud Run
	DeletionGracePeriodSeconds pulumi.IntPtrInput `pulumi:"deletionGracePeriodSeconds"`
	// The read-only soft deletion timestamp for this resource. In Cloud Run, users are not able to set this field. Instead, they must call the corresponding Delete API.
	DeletionTimestamp pulumi.StringPtrInput `pulumi:"deletionTimestamp"`
	// Not supported by Cloud Run
	Finalizers pulumi.StringArrayInput `pulumi:"finalizers"`
	// Not supported by Cloud Run
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// A system-provided sequence number representing a specific generation of the desired state.
	Generation pulumi.IntPtrInput `pulumi:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The name of the resource. Name is required when creating top-level resources (Service, Job), must be unique within a Cloud Run project/region, and cannot be changed once created.
	Name pulumi.StringInput `pulumi:"name"`
	// Defines the space within each name must be unique within a Cloud Run region. In Cloud Run, it must be project ID or number.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Not supported by Cloud Run
	OwnerReferences OwnerReferenceArrayInput `pulumi:"ownerReferences"`
	// Opaque, system-generated value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection.
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// URL representing this object.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
	// Unique, system-generated identifier for this resource.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ObjectMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMeta)(nil)).Elem()
}

func (i ObjectMetaArgs) ToObjectMetaOutput() ObjectMetaOutput {
	return i.ToObjectMetaOutputWithContext(context.Background())
}

func (i ObjectMetaArgs) ToObjectMetaOutputWithContext(ctx context.Context) ObjectMetaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaOutput)
}

func (i ObjectMetaArgs) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return i.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (i ObjectMetaArgs) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaOutput).ToObjectMetaPtrOutputWithContext(ctx)
}

// ObjectMetaPtrInput is an input type that accepts ObjectMetaArgs, ObjectMetaPtr and ObjectMetaPtrOutput values.
// You can construct a concrete instance of `ObjectMetaPtrInput` via:
//
//	        ObjectMetaArgs{...}
//
//	or:
//
//	        nil
type ObjectMetaPtrInput interface {
	pulumi.Input

	ToObjectMetaPtrOutput() ObjectMetaPtrOutput
	ToObjectMetaPtrOutputWithContext(context.Context) ObjectMetaPtrOutput
}

type objectMetaPtrType ObjectMetaArgs

func ObjectMetaPtr(v *ObjectMetaArgs) ObjectMetaPtrInput {
	return (*objectMetaPtrType)(v)
}

func (*objectMetaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMeta)(nil)).Elem()
}

func (i *objectMetaPtrType) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return i.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (i *objectMetaPtrType) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaPtrOutput)
}

// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaOutput struct{ *pulumi.OutputState }

func (ObjectMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMeta)(nil)).Elem()
}

func (o ObjectMetaOutput) ToObjectMetaOutput() ObjectMetaOutput {
	return o
}

func (o ObjectMetaOutput) ToObjectMetaOutputWithContext(ctx context.Context) ObjectMetaOutput {
	return o
}

func (o ObjectMetaOutput) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return o.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (o ObjectMetaOutput) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectMeta) *ObjectMeta {
		return &v
	}).(ObjectMetaPtrOutput)
}

// Unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. In Cloud Run, annotations with 'run.googleapis.com/' and 'autoscaling.knative.dev' are restricted, and the accepted annotations will be different depending on the resource type. * `autoscaling.knative.dev/maxScale`: Revision. * `autoscaling.knative.dev/minScale`: Revision. * `run.googleapis.com/binary-authorization-breakglass`: Service, Job, * `run.googleapis.com/binary-authorization`: Service, Job, Execution. * `run.googleapis.com/client-name`: All resources. * `run.googleapis.com/cloudsql-instances`: Revision, Execution. * `run.googleapis.com/container-dependencies`: Revision. * `run.googleapis.com/cpu-throttling`: Revision. * `run.googleapis.com/custom-audiences`: Service. * `run.googleapis.com/description`: Service. * `run.googleapis.com/disable-default-url`: Service. * `run.googleapis.com/encryption-key-shutdown-hours`: Revision * `run.googleapis.com/encryption-key`: Revision, Execution. * `run.googleapis.com/execution-environment`: Revision, Execution. * `run.googleapis.com/gc-traffic-tags`: Service. * `run.googleapis.com/ingress`: Service. * `run.googleapis.com/launch-stage`: Service, Job. * `run.googleapis.com/minScale`: Service (ALPHA) * `run.googleapis.com/network-interfaces`: Revision, Execution. * `run.googleapis.com/post-key-revocation-action-type`: Revision. * `run.googleapis.com/secrets`: Revision, Execution. * `run.googleapis.com/secure-session-agent`: Revision. * `run.googleapis.com/sessionAffinity`: Revision. * `run.googleapis.com/startup-cpu-boost`: Revision. * `run.googleapis.com/vpc-access-connector`: Revision, Execution. * `run.googleapis.com/vpc-access-egress`: Revision, Execution.
func (o ObjectMetaOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMeta) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// UTC timestamp representing the server time when this object was created.
func (o ObjectMetaOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.CreationTimestamp }).(pulumi.StringPtrOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaOutput) DeletionGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *int { return v.DeletionGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// The read-only soft deletion timestamp for this resource. In Cloud Run, users are not able to set this field. Instead, they must call the corresponding Delete API.
func (o ObjectMetaOutput) DeletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.DeletionTimestamp }).(pulumi.StringPtrOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectMeta) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// A system-provided sequence number representing a specific generation of the desired state.
func (o ObjectMetaOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *int { return v.Generation }).(pulumi.IntPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes.
func (o ObjectMetaOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMeta) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the resource. Name is required when creating top-level resources (Service, Job), must be unique within a Cloud Run project/region, and cannot be changed once created.
func (o ObjectMetaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMeta) string { return v.Name }).(pulumi.StringOutput)
}

// Defines the space within each name must be unique within a Cloud Run region. In Cloud Run, it must be project ID or number.
func (o ObjectMetaOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMeta) string { return v.Namespace }).(pulumi.StringOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaOutput) OwnerReferences() OwnerReferenceArrayOutput {
	return o.ApplyT(func(v ObjectMeta) []OwnerReference { return v.OwnerReferences }).(OwnerReferenceArrayOutput)
}

// Opaque, system-generated value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection.
func (o ObjectMetaOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// URL representing this object.
func (o ObjectMetaOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// Unique, system-generated identifier for this resource.
func (o ObjectMetaOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ObjectMetaPtrOutput struct{ *pulumi.OutputState }

func (ObjectMetaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMeta)(nil)).Elem()
}

func (o ObjectMetaPtrOutput) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return o
}

func (o ObjectMetaPtrOutput) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return o
}

func (o ObjectMetaPtrOutput) Elem() ObjectMetaOutput {
	return o.ApplyT(func(v *ObjectMeta) ObjectMeta {
		if v != nil {
			return *v
		}
		var ret ObjectMeta
		return ret
	}).(ObjectMetaOutput)
}

// Unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. In Cloud Run, annotations with 'run.googleapis.com/' and 'autoscaling.knative.dev' are restricted, and the accepted annotations will be different depending on the resource type. * `autoscaling.knative.dev/maxScale`: Revision. * `autoscaling.knative.dev/minScale`: Revision. * `run.googleapis.com/binary-authorization-breakglass`: Service, Job, * `run.googleapis.com/binary-authorization`: Service, Job, Execution. * `run.googleapis.com/client-name`: All resources. * `run.googleapis.com/cloudsql-instances`: Revision, Execution. * `run.googleapis.com/container-dependencies`: Revision. * `run.googleapis.com/cpu-throttling`: Revision. * `run.googleapis.com/custom-audiences`: Service. * `run.googleapis.com/description`: Service. * `run.googleapis.com/disable-default-url`: Service. * `run.googleapis.com/encryption-key-shutdown-hours`: Revision * `run.googleapis.com/encryption-key`: Revision, Execution. * `run.googleapis.com/execution-environment`: Revision, Execution. * `run.googleapis.com/gc-traffic-tags`: Service. * `run.googleapis.com/ingress`: Service. * `run.googleapis.com/launch-stage`: Service, Job. * `run.googleapis.com/minScale`: Service (ALPHA) * `run.googleapis.com/network-interfaces`: Revision, Execution. * `run.googleapis.com/post-key-revocation-action-type`: Revision. * `run.googleapis.com/secrets`: Revision, Execution. * `run.googleapis.com/secure-session-agent`: Revision. * `run.googleapis.com/sessionAffinity`: Revision. * `run.googleapis.com/startup-cpu-boost`: Revision. * `run.googleapis.com/vpc-access-connector`: Revision, Execution. * `run.googleapis.com/vpc-access-egress`: Revision, Execution.
func (o ObjectMetaPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObjectMeta) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// UTC timestamp representing the server time when this object was created.
func (o ObjectMetaPtrOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.CreationTimestamp
	}).(pulumi.StringPtrOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaPtrOutput) DeletionGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *int {
		if v == nil {
			return nil
		}
		return v.DeletionGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The read-only soft deletion timestamp for this resource. In Cloud Run, users are not able to set this field. Instead, they must call the corresponding Delete API.
func (o ObjectMetaPtrOutput) DeletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.DeletionTimestamp
	}).(pulumi.StringPtrOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ObjectMeta) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaPtrOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.GenerateName
	}).(pulumi.StringPtrOutput)
}

// A system-provided sequence number representing a specific generation of the desired state.
func (o ObjectMetaPtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.IntPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes.
func (o ObjectMetaPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObjectMeta) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The name of the resource. Name is required when creating top-level resources (Service, Job), must be unique within a Cloud Run project/region, and cannot be changed once created.
func (o ObjectMetaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Defines the space within each name must be unique within a Cloud Run region. In Cloud Run, it must be project ID or number.
func (o ObjectMetaPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaPtrOutput) OwnerReferences() OwnerReferenceArrayOutput {
	return o.ApplyT(func(v *ObjectMeta) []OwnerReference {
		if v == nil {
			return nil
		}
		return v.OwnerReferences
	}).(OwnerReferenceArrayOutput)
}

// Opaque, system-generated value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection.
func (o ObjectMetaPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// URL representing this object.
func (o ObjectMetaPtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// Unique, system-generated identifier for this resource.
func (o ObjectMetaPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaResponse struct {
	// Unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. In Cloud Run, annotations with 'run.googleapis.com/' and 'autoscaling.knative.dev' are restricted, and the accepted annotations will be different depending on the resource type. * `autoscaling.knative.dev/maxScale`: Revision. * `autoscaling.knative.dev/minScale`: Revision. * `run.googleapis.com/binary-authorization-breakglass`: Service, Job, * `run.googleapis.com/binary-authorization`: Service, Job, Execution. * `run.googleapis.com/client-name`: All resources. * `run.googleapis.com/cloudsql-instances`: Revision, Execution. * `run.googleapis.com/container-dependencies`: Revision. * `run.googleapis.com/cpu-throttling`: Revision. * `run.googleapis.com/custom-audiences`: Service. * `run.googleapis.com/description`: Service. * `run.googleapis.com/disable-default-url`: Service. * `run.googleapis.com/encryption-key-shutdown-hours`: Revision * `run.googleapis.com/encryption-key`: Revision, Execution. * `run.googleapis.com/execution-environment`: Revision, Execution. * `run.googleapis.com/gc-traffic-tags`: Service. * `run.googleapis.com/ingress`: Service. * `run.googleapis.com/launch-stage`: Service, Job. * `run.googleapis.com/minScale`: Service (ALPHA) * `run.googleapis.com/network-interfaces`: Revision, Execution. * `run.googleapis.com/post-key-revocation-action-type`: Revision. * `run.googleapis.com/secrets`: Revision, Execution. * `run.googleapis.com/secure-session-agent`: Revision. * `run.googleapis.com/sessionAffinity`: Revision. * `run.googleapis.com/startup-cpu-boost`: Revision. * `run.googleapis.com/vpc-access-connector`: Revision, Execution. * `run.googleapis.com/vpc-access-egress`: Revision, Execution.
	Annotations map[string]string `pulumi:"annotations"`
	// Not supported by Cloud Run
	ClusterName string `pulumi:"clusterName"`
	// UTC timestamp representing the server time when this object was created.
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// Not supported by Cloud Run
	DeletionGracePeriodSeconds int `pulumi:"deletionGracePeriodSeconds"`
	// The read-only soft deletion timestamp for this resource. In Cloud Run, users are not able to set this field. Instead, they must call the corresponding Delete API.
	DeletionTimestamp string `pulumi:"deletionTimestamp"`
	// Not supported by Cloud Run
	Finalizers []string `pulumi:"finalizers"`
	// Not supported by Cloud Run
	GenerateName string `pulumi:"generateName"`
	// A system-provided sequence number representing a specific generation of the desired state.
	Generation int `pulumi:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes.
	Labels map[string]string `pulumi:"labels"`
	// The name of the resource. Name is required when creating top-level resources (Service, Job), must be unique within a Cloud Run project/region, and cannot be changed once created.
	Name string `pulumi:"name"`
	// Defines the space within each name must be unique within a Cloud Run region. In Cloud Run, it must be project ID or number.
	Namespace string `pulumi:"namespace"`
	// Not supported by Cloud Run
	OwnerReferences []OwnerReferenceResponse `pulumi:"ownerReferences"`
	// Opaque, system-generated value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection.
	ResourceVersion string `pulumi:"resourceVersion"`
	// URL representing this object.
	SelfLink string `pulumi:"selfLink"`
	// Unique, system-generated identifier for this resource.
	Uid string `pulumi:"uid"`
}

// google.cloud.run.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaResponseOutput struct{ *pulumi.OutputState }

func (ObjectMetaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMetaResponse)(nil)).Elem()
}

func (o ObjectMetaResponseOutput) ToObjectMetaResponseOutput() ObjectMetaResponseOutput {
	return o
}

func (o ObjectMetaResponseOutput) ToObjectMetaResponseOutputWithContext(ctx context.Context) ObjectMetaResponseOutput {
	return o
}

// Unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. In Cloud Run, annotations with 'run.googleapis.com/' and 'autoscaling.knative.dev' are restricted, and the accepted annotations will be different depending on the resource type. * `autoscaling.knative.dev/maxScale`: Revision. * `autoscaling.knative.dev/minScale`: Revision. * `run.googleapis.com/binary-authorization-breakglass`: Service, Job, * `run.googleapis.com/binary-authorization`: Service, Job, Execution. * `run.googleapis.com/client-name`: All resources. * `run.googleapis.com/cloudsql-instances`: Revision, Execution. * `run.googleapis.com/container-dependencies`: Revision. * `run.googleapis.com/cpu-throttling`: Revision. * `run.googleapis.com/custom-audiences`: Service. * `run.googleapis.com/description`: Service. * `run.googleapis.com/disable-default-url`: Service. * `run.googleapis.com/encryption-key-shutdown-hours`: Revision * `run.googleapis.com/encryption-key`: Revision, Execution. * `run.googleapis.com/execution-environment`: Revision, Execution. * `run.googleapis.com/gc-traffic-tags`: Service. * `run.googleapis.com/ingress`: Service. * `run.googleapis.com/launch-stage`: Service, Job. * `run.googleapis.com/minScale`: Service (ALPHA) * `run.googleapis.com/network-interfaces`: Revision, Execution. * `run.googleapis.com/post-key-revocation-action-type`: Revision. * `run.googleapis.com/secrets`: Revision, Execution. * `run.googleapis.com/secure-session-agent`: Revision. * `run.googleapis.com/sessionAffinity`: Revision. * `run.googleapis.com/startup-cpu-boost`: Revision. * `run.googleapis.com/vpc-access-connector`: Revision, Execution. * `run.googleapis.com/vpc-access-egress`: Revision, Execution.
func (o ObjectMetaResponseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMetaResponse) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaResponseOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.ClusterName }).(pulumi.StringOutput)
}

// UTC timestamp representing the server time when this object was created.
func (o ObjectMetaResponseOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaResponseOutput) DeletionGracePeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ObjectMetaResponse) int { return v.DeletionGracePeriodSeconds }).(pulumi.IntOutput)
}

// The read-only soft deletion timestamp for this resource. In Cloud Run, users are not able to set this field. Instead, they must call the corresponding Delete API.
func (o ObjectMetaResponseOutput) DeletionTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.DeletionTimestamp }).(pulumi.StringOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaResponseOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectMetaResponse) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaResponseOutput) GenerateName() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.GenerateName }).(pulumi.StringOutput)
}

// A system-provided sequence number representing a specific generation of the desired state.
func (o ObjectMetaResponseOutput) Generation() pulumi.IntOutput {
	return o.ApplyT(func(v ObjectMetaResponse) int { return v.Generation }).(pulumi.IntOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes.
func (o ObjectMetaResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMetaResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the resource. Name is required when creating top-level resources (Service, Job), must be unique within a Cloud Run project/region, and cannot be changed once created.
func (o ObjectMetaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Defines the space within each name must be unique within a Cloud Run region. In Cloud Run, it must be project ID or number.
func (o ObjectMetaResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

// Not supported by Cloud Run
func (o ObjectMetaResponseOutput) OwnerReferences() OwnerReferenceResponseArrayOutput {
	return o.ApplyT(func(v ObjectMetaResponse) []OwnerReferenceResponse { return v.OwnerReferences }).(OwnerReferenceResponseArrayOutput)
}

// Opaque, system-generated value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection.
func (o ObjectMetaResponseOutput) ResourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.ResourceVersion }).(pulumi.StringOutput)
}

// URL representing this object.
func (o ObjectMetaResponseOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.SelfLink }).(pulumi.StringOutput)
}

// Unique, system-generated identifier for this resource.
func (o ObjectMetaResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.Uid }).(pulumi.StringOutput)
}

// This is not supported or used by Cloud Run.
type OwnerReference struct {
	// This is not supported or used by Cloud Run.
	ApiVersion *string `pulumi:"apiVersion"`
	// This is not supported or used by Cloud Run.
	BlockOwnerDeletion *bool `pulumi:"blockOwnerDeletion"`
	// This is not supported or used by Cloud Run.
	Controller *bool `pulumi:"controller"`
	// This is not supported or used by Cloud Run.
	Kind *string `pulumi:"kind"`
	// This is not supported or used by Cloud Run.
	Name *string `pulumi:"name"`
	// This is not supported or used by Cloud Run.
	Uid *string `pulumi:"uid"`
}

// OwnerReferenceInput is an input type that accepts OwnerReferenceArgs and OwnerReferenceOutput values.
// You can construct a concrete instance of `OwnerReferenceInput` via:
//
//	OwnerReferenceArgs{...}
type OwnerReferenceInput interface {
	pulumi.Input

	ToOwnerReferenceOutput() OwnerReferenceOutput
	ToOwnerReferenceOutputWithContext(context.Context) OwnerReferenceOutput
}

// This is not supported or used by Cloud Run.
type OwnerReferenceArgs struct {
	// This is not supported or used by Cloud Run.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// This is not supported or used by Cloud Run.
	BlockOwnerDeletion pulumi.BoolPtrInput `pulumi:"blockOwnerDeletion"`
	// This is not supported or used by Cloud Run.
	Controller pulumi.BoolPtrInput `pulumi:"controller"`
	// This is not supported or used by Cloud Run.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// This is not supported or used by Cloud Run.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// This is not supported or used by Cloud Run.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (OwnerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReference)(nil)).Elem()
}

func (i OwnerReferenceArgs) ToOwnerReferenceOutput() OwnerReferenceOutput {
	return i.ToOwnerReferenceOutputWithContext(context.Background())
}

func (i OwnerReferenceArgs) ToOwnerReferenceOutputWithContext(ctx context.Context) OwnerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerReferenceOutput)
}

// OwnerReferenceArrayInput is an input type that accepts OwnerReferenceArray and OwnerReferenceArrayOutput values.
// You can construct a concrete instance of `OwnerReferenceArrayInput` via:
//
//	OwnerReferenceArray{ OwnerReferenceArgs{...} }
type OwnerReferenceArrayInput interface {
	pulumi.Input

	ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput
	ToOwnerReferenceArrayOutputWithContext(context.Context) OwnerReferenceArrayOutput
}

type OwnerReferenceArray []OwnerReferenceInput

func (OwnerReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReference)(nil)).Elem()
}

func (i OwnerReferenceArray) ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput {
	return i.ToOwnerReferenceArrayOutputWithContext(context.Background())
}

func (i OwnerReferenceArray) ToOwnerReferenceArrayOutputWithContext(ctx context.Context) OwnerReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerReferenceArrayOutput)
}

// This is not supported or used by Cloud Run.
type OwnerReferenceOutput struct{ *pulumi.OutputState }

func (OwnerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReference)(nil)).Elem()
}

func (o OwnerReferenceOutput) ToOwnerReferenceOutput() OwnerReferenceOutput {
	return o
}

func (o OwnerReferenceOutput) ToOwnerReferenceOutputWithContext(ctx context.Context) OwnerReferenceOutput {
	return o
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReference) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceOutput) BlockOwnerDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OwnerReference) *bool { return v.BlockOwnerDeletion }).(pulumi.BoolPtrOutput)
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OwnerReference) *bool { return v.Controller }).(pulumi.BoolPtrOutput)
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReference) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReference) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type OwnerReferenceArrayOutput struct{ *pulumi.OutputState }

func (OwnerReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReference)(nil)).Elem()
}

func (o OwnerReferenceArrayOutput) ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput {
	return o
}

func (o OwnerReferenceArrayOutput) ToOwnerReferenceArrayOutputWithContext(ctx context.Context) OwnerReferenceArrayOutput {
	return o
}

func (o OwnerReferenceArrayOutput) Index(i pulumi.IntInput) OwnerReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OwnerReference {
		return vs[0].([]OwnerReference)[vs[1].(int)]
	}).(OwnerReferenceOutput)
}

// This is not supported or used by Cloud Run.
type OwnerReferenceResponse struct {
	// This is not supported or used by Cloud Run.
	ApiVersion string `pulumi:"apiVersion"`
	// This is not supported or used by Cloud Run.
	BlockOwnerDeletion bool `pulumi:"blockOwnerDeletion"`
	// This is not supported or used by Cloud Run.
	Controller bool `pulumi:"controller"`
	// This is not supported or used by Cloud Run.
	Kind string `pulumi:"kind"`
	// This is not supported or used by Cloud Run.
	Name string `pulumi:"name"`
	// This is not supported or used by Cloud Run.
	Uid string `pulumi:"uid"`
}

// This is not supported or used by Cloud Run.
type OwnerReferenceResponseOutput struct{ *pulumi.OutputState }

func (OwnerReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReferenceResponse)(nil)).Elem()
}

func (o OwnerReferenceResponseOutput) ToOwnerReferenceResponseOutput() OwnerReferenceResponseOutput {
	return o
}

func (o OwnerReferenceResponseOutput) ToOwnerReferenceResponseOutputWithContext(ctx context.Context) OwnerReferenceResponseOutput {
	return o
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceResponseOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceResponseOutput) BlockOwnerDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) bool { return v.BlockOwnerDeletion }).(pulumi.BoolOutput)
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceResponseOutput) Controller() pulumi.BoolOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) bool { return v.Controller }).(pulumi.BoolOutput)
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// This is not supported or used by Cloud Run.
func (o OwnerReferenceResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) string { return v.Uid }).(pulumi.StringOutput)
}

type OwnerReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (OwnerReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReferenceResponse)(nil)).Elem()
}

func (o OwnerReferenceResponseArrayOutput) ToOwnerReferenceResponseArrayOutput() OwnerReferenceResponseArrayOutput {
	return o
}

func (o OwnerReferenceResponseArrayOutput) ToOwnerReferenceResponseArrayOutputWithContext(ctx context.Context) OwnerReferenceResponseArrayOutput {
	return o
}

func (o OwnerReferenceResponseArrayOutput) Index(i pulumi.IntInput) OwnerReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OwnerReferenceResponse {
		return vs[0].([]OwnerReferenceResponse)[vs[1].(int)]
	}).(OwnerReferenceResponseOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type Probe struct {
	// Not supported by Cloud Run.
	Exec *ExecAction `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// GRPCAction specifies an action involving a GRPC port.
	Grpc *GRPCAction `pulumi:"grpc"`
	// HTTPGet specifies the http request to perform.
	HttpGet *HTTPGetAction `pulumi:"httpGet"`
	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port.
	TcpSocket *TCPSocketAction `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds; if period_seconds is not set, must be less or equal than 10.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ProbeInput is an input type that accepts ProbeArgs and ProbeOutput values.
// You can construct a concrete instance of `ProbeInput` via:
//
//	ProbeArgs{...}
type ProbeInput interface {
	pulumi.Input

	ToProbeOutput() ProbeOutput
	ToProbeOutputWithContext(context.Context) ProbeOutput
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeArgs struct {
	// Not supported by Cloud Run.
	Exec ExecActionPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// GRPCAction specifies an action involving a GRPC port.
	Grpc GRPCActionPtrInput `pulumi:"grpc"`
	// HTTPGet specifies the http request to perform.
	HttpGet HTTPGetActionPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port.
	TcpSocket TCPSocketActionPtrInput `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds; if period_seconds is not set, must be less or equal than 10.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Probe)(nil)).Elem()
}

func (i ProbeArgs) ToProbeOutput() ProbeOutput {
	return i.ToProbeOutputWithContext(context.Background())
}

func (i ProbeArgs) ToProbeOutputWithContext(ctx context.Context) ProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeOutput)
}

func (i ProbeArgs) ToProbePtrOutput() ProbePtrOutput {
	return i.ToProbePtrOutputWithContext(context.Background())
}

func (i ProbeArgs) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeOutput).ToProbePtrOutputWithContext(ctx)
}

// ProbePtrInput is an input type that accepts ProbeArgs, ProbePtr and ProbePtrOutput values.
// You can construct a concrete instance of `ProbePtrInput` via:
//
//	        ProbeArgs{...}
//
//	or:
//
//	        nil
type ProbePtrInput interface {
	pulumi.Input

	ToProbePtrOutput() ProbePtrOutput
	ToProbePtrOutputWithContext(context.Context) ProbePtrOutput
}

type probePtrType ProbeArgs

func ProbePtr(v *ProbeArgs) ProbePtrInput {
	return (*probePtrType)(v)
}

func (*probePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Probe)(nil)).Elem()
}

func (i *probePtrType) ToProbePtrOutput() ProbePtrOutput {
	return i.ToProbePtrOutputWithContext(context.Background())
}

func (i *probePtrType) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbePtrOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeOutput struct{ *pulumi.OutputState }

func (ProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Probe)(nil)).Elem()
}

func (o ProbeOutput) ToProbeOutput() ProbeOutput {
	return o
}

func (o ProbeOutput) ToProbeOutputWithContext(ctx context.Context) ProbeOutput {
	return o
}

func (o ProbeOutput) ToProbePtrOutput() ProbePtrOutput {
	return o.ToProbePtrOutputWithContext(context.Background())
}

func (o ProbeOutput) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Probe) *Probe {
		return &v
	}).(ProbePtrOutput)
}

// Not supported by Cloud Run.
func (o ProbeOutput) Exec() ExecActionPtrOutput {
	return o.ApplyT(func(v Probe) *ExecAction { return v.Exec }).(ExecActionPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o ProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// GRPCAction specifies an action involving a GRPC port.
func (o ProbeOutput) Grpc() GRPCActionPtrOutput {
	return o.ApplyT(func(v Probe) *GRPCAction { return v.Grpc }).(GRPCActionPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o ProbeOutput) HttpGet() HTTPGetActionPtrOutput {
	return o.ApplyT(func(v Probe) *HTTPGetAction { return v.HttpGet }).(HTTPGetActionPtrOutput)
}

// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.
func (o ProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
func (o ProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.
func (o ProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port.
func (o ProbeOutput) TcpSocket() TCPSocketActionPtrOutput {
	return o.ApplyT(func(v Probe) *TCPSocketAction { return v.TcpSocket }).(TCPSocketActionPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds; if period_seconds is not set, must be less or equal than 10.
func (o ProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ProbePtrOutput struct{ *pulumi.OutputState }

func (ProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Probe)(nil)).Elem()
}

func (o ProbePtrOutput) ToProbePtrOutput() ProbePtrOutput {
	return o
}

func (o ProbePtrOutput) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return o
}

func (o ProbePtrOutput) Elem() ProbeOutput {
	return o.ApplyT(func(v *Probe) Probe {
		if v != nil {
			return *v
		}
		var ret Probe
		return ret
	}).(ProbeOutput)
}

// Not supported by Cloud Run.
func (o ProbePtrOutput) Exec() ExecActionPtrOutput {
	return o.ApplyT(func(v *Probe) *ExecAction {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ExecActionPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o ProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// GRPCAction specifies an action involving a GRPC port.
func (o ProbePtrOutput) Grpc() GRPCActionPtrOutput {
	return o.ApplyT(func(v *Probe) *GRPCAction {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(GRPCActionPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o ProbePtrOutput) HttpGet() HTTPGetActionPtrOutput {
	return o.ApplyT(func(v *Probe) *HTTPGetAction {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(HTTPGetActionPtrOutput)
}

// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.
func (o ProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
func (o ProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.
func (o ProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port.
func (o ProbePtrOutput) TcpSocket() TCPSocketActionPtrOutput {
	return o.ApplyT(func(v *Probe) *TCPSocketAction {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(TCPSocketActionPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds; if period_seconds is not set, must be less or equal than 10.
func (o ProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeResponse struct {
	// Not supported by Cloud Run.
	Exec ExecActionResponse `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold int `pulumi:"failureThreshold"`
	// GRPCAction specifies an action involving a GRPC port.
	Grpc GRPCActionResponse `pulumi:"grpc"`
	// HTTPGet specifies the http request to perform.
	HttpGet HTTPGetActionResponse `pulumi:"httpGet"`
	// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.
	InitialDelaySeconds int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
	PeriodSeconds int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.
	SuccessThreshold int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port.
	TcpSocket TCPSocketActionResponse `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds; if period_seconds is not set, must be less or equal than 10.
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeResponseOutput struct{ *pulumi.OutputState }

func (ProbeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeResponse)(nil)).Elem()
}

func (o ProbeResponseOutput) ToProbeResponseOutput() ProbeResponseOutput {
	return o
}

func (o ProbeResponseOutput) ToProbeResponseOutputWithContext(ctx context.Context) ProbeResponseOutput {
	return o
}

// Not supported by Cloud Run.
func (o ProbeResponseOutput) Exec() ExecActionResponseOutput {
	return o.ApplyT(func(v ProbeResponse) ExecActionResponse { return v.Exec }).(ExecActionResponseOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o ProbeResponseOutput) FailureThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ProbeResponse) int { return v.FailureThreshold }).(pulumi.IntOutput)
}

// GRPCAction specifies an action involving a GRPC port.
func (o ProbeResponseOutput) Grpc() GRPCActionResponseOutput {
	return o.ApplyT(func(v ProbeResponse) GRPCActionResponse { return v.Grpc }).(GRPCActionResponseOutput)
}

// HTTPGet specifies the http request to perform.
func (o ProbeResponseOutput) HttpGet() HTTPGetActionResponseOutput {
	return o.ApplyT(func(v ProbeResponse) HTTPGetActionResponse { return v.HttpGet }).(HTTPGetActionResponseOutput)
}

// Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.
func (o ProbeResponseOutput) InitialDelaySeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ProbeResponse) int { return v.InitialDelaySeconds }).(pulumi.IntOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.
func (o ProbeResponseOutput) PeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ProbeResponse) int { return v.PeriodSeconds }).(pulumi.IntOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.
func (o ProbeResponseOutput) SuccessThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ProbeResponse) int { return v.SuccessThreshold }).(pulumi.IntOutput)
}

// TCPSocket specifies an action involving a TCP port.
func (o ProbeResponseOutput) TcpSocket() TCPSocketActionResponseOutput {
	return o.ApplyT(func(v ProbeResponse) TCPSocketActionResponse { return v.TcpSocket }).(TCPSocketActionResponseOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds; if period_seconds is not set, must be less or equal than 10.
func (o ProbeResponseOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ProbeResponse) int { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

// A DNS resource record.
type ResourceRecord struct {
	// Relative name of the object affected by this record. Only applicable for `CNAME` records. Example: 'www'.
	Name *string `pulumi:"name"`
	// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
	Rrdata *string `pulumi:"rrdata"`
	// Resource record type. Example: `AAAA`.
	Type *ResourceRecordType `pulumi:"type"`
}

// A DNS resource record.
type ResourceRecordResponse struct {
	// Relative name of the object affected by this record. Only applicable for `CNAME` records. Example: 'www'.
	Name string `pulumi:"name"`
	// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
	Rrdata string `pulumi:"rrdata"`
	// Resource record type. Example: `AAAA`.
	Type string `pulumi:"type"`
}

// A DNS resource record.
type ResourceRecordResponseOutput struct{ *pulumi.OutputState }

func (ResourceRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRecordResponse)(nil)).Elem()
}

func (o ResourceRecordResponseOutput) ToResourceRecordResponseOutput() ResourceRecordResponseOutput {
	return o
}

func (o ResourceRecordResponseOutput) ToResourceRecordResponseOutputWithContext(ctx context.Context) ResourceRecordResponseOutput {
	return o
}

// Relative name of the object affected by this record. Only applicable for `CNAME` records. Example: 'www'.
func (o ResourceRecordResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
func (o ResourceRecordResponseOutput) Rrdata() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordResponse) string { return v.Rrdata }).(pulumi.StringOutput)
}

// Resource record type. Example: `AAAA`.
func (o ResourceRecordResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRecordResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ResourceRecordResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceRecordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceRecordResponse)(nil)).Elem()
}

func (o ResourceRecordResponseArrayOutput) ToResourceRecordResponseArrayOutput() ResourceRecordResponseArrayOutput {
	return o
}

func (o ResourceRecordResponseArrayOutput) ToResourceRecordResponseArrayOutputWithContext(ctx context.Context) ResourceRecordResponseArrayOutput {
	return o
}

func (o ResourceRecordResponseArrayOutput) Index(i pulumi.IntInput) ResourceRecordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceRecordResponse {
		return vs[0].([]ResourceRecordResponse)[vs[1].(int)]
	}).(ResourceRecordResponseOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirements struct {
	// Limits describes the maximum amount of compute resources allowed. Only 'cpu' and 'memory' keys are supported. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
	Limits map[string]string `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. Only `cpu` and `memory` are supported. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
	Requests map[string]string `pulumi:"requests"`
}

// ResourceRequirementsInput is an input type that accepts ResourceRequirementsArgs and ResourceRequirementsOutput values.
// You can construct a concrete instance of `ResourceRequirementsInput` via:
//
//	ResourceRequirementsArgs{...}
type ResourceRequirementsInput interface {
	pulumi.Input

	ToResourceRequirementsOutput() ResourceRequirementsOutput
	ToResourceRequirementsOutputWithContext(context.Context) ResourceRequirementsOutput
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsArgs struct {
	// Limits describes the maximum amount of compute resources allowed. Only 'cpu' and 'memory' keys are supported. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. Only `cpu` and `memory` are supported. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (ResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return i.ToResourceRequirementsOutputWithContext(context.Background())
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsOutput)
}

func (i ResourceRequirementsArgs) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return i.ToResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i ResourceRequirementsArgs) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsOutput).ToResourceRequirementsPtrOutputWithContext(ctx)
}

// ResourceRequirementsPtrInput is an input type that accepts ResourceRequirementsArgs, ResourceRequirementsPtr and ResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `ResourceRequirementsPtrInput` via:
//
//	        ResourceRequirementsArgs{...}
//
//	or:
//
//	        nil
type ResourceRequirementsPtrInput interface {
	pulumi.Input

	ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput
	ToResourceRequirementsPtrOutputWithContext(context.Context) ResourceRequirementsPtrOutput
}

type resourceRequirementsPtrType ResourceRequirementsArgs

func ResourceRequirementsPtr(v *ResourceRequirementsArgs) ResourceRequirementsPtrInput {
	return (*resourceRequirementsPtrType)(v)
}

func (*resourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRequirements)(nil)).Elem()
}

func (i *resourceRequirementsPtrType) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return i.ToResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *resourceRequirementsPtrType) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return o
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return o
}

func (o ResourceRequirementsOutput) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return o.ToResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o ResourceRequirementsOutput) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRequirements) *ResourceRequirements {
		return &v
	}).(ResourceRequirementsPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. Only 'cpu' and 'memory' keys are supported. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
func (o ResourceRequirementsOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirements) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. Only `cpu` and `memory` are supported. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
func (o ResourceRequirementsOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirements) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type ResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRequirements)(nil)).Elem()
}

func (o ResourceRequirementsPtrOutput) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return o
}

func (o ResourceRequirementsPtrOutput) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return o
}

func (o ResourceRequirementsPtrOutput) Elem() ResourceRequirementsOutput {
	return o.ApplyT(func(v *ResourceRequirements) ResourceRequirements {
		if v != nil {
			return *v
		}
		var ret ResourceRequirements
		return ret
	}).(ResourceRequirementsOutput)
}

// Limits describes the maximum amount of compute resources allowed. Only 'cpu' and 'memory' keys are supported. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
func (o ResourceRequirementsPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. Only `cpu` and `memory` are supported. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
func (o ResourceRequirementsPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsResponse struct {
	// Limits describes the maximum amount of compute resources allowed. Only 'cpu' and 'memory' keys are supported. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
	Limits map[string]string `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. Only `cpu` and `memory` are supported. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
	Requests map[string]string `pulumi:"requests"`
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsResponse)(nil)).Elem()
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput {
	return o
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutputWithContext(ctx context.Context) ResourceRequirementsResponseOutput {
	return o
}

// Limits describes the maximum amount of compute resources allowed. Only 'cpu' and 'memory' keys are supported. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
func (o ResourceRequirementsResponseOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Requests describes the minimum amount of compute resources required. Only `cpu` and `memory` are supported. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. * For supported 'cpu' values, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported 'memory' values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
func (o ResourceRequirementsResponseOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

// RevisionSpec holds the desired state of the Revision (from the client).
type RevisionSpec struct {
	// ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. If not specified, defaults to 80.
	ContainerConcurrency *int `pulumi:"containerConcurrency"`
	// Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided.
	Containers []Container `pulumi:"containers"`
	// Not supported by Cloud Run.
	EnableServiceLinks *bool `pulumi:"enableServiceLinks"`
	// Not supported by Cloud Run.
	ImagePullSecrets []LocalObjectReference `pulumi:"imagePullSecrets"`
	// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour).
	TimeoutSeconds *int     `pulumi:"timeoutSeconds"`
	Volumes        []Volume `pulumi:"volumes"`
}

// RevisionSpecInput is an input type that accepts RevisionSpecArgs and RevisionSpecOutput values.
// You can construct a concrete instance of `RevisionSpecInput` via:
//
//	RevisionSpecArgs{...}
type RevisionSpecInput interface {
	pulumi.Input

	ToRevisionSpecOutput() RevisionSpecOutput
	ToRevisionSpecOutputWithContext(context.Context) RevisionSpecOutput
}

// RevisionSpec holds the desired state of the Revision (from the client).
type RevisionSpecArgs struct {
	// ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. If not specified, defaults to 80.
	ContainerConcurrency pulumi.IntPtrInput `pulumi:"containerConcurrency"`
	// Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided.
	Containers ContainerArrayInput `pulumi:"containers"`
	// Not supported by Cloud Run.
	EnableServiceLinks pulumi.BoolPtrInput `pulumi:"enableServiceLinks"`
	// Not supported by Cloud Run.
	ImagePullSecrets LocalObjectReferenceArrayInput `pulumi:"imagePullSecrets"`
	// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
	Volumes        VolumeArrayInput   `pulumi:"volumes"`
}

func (RevisionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RevisionSpec)(nil)).Elem()
}

func (i RevisionSpecArgs) ToRevisionSpecOutput() RevisionSpecOutput {
	return i.ToRevisionSpecOutputWithContext(context.Background())
}

func (i RevisionSpecArgs) ToRevisionSpecOutputWithContext(ctx context.Context) RevisionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevisionSpecOutput)
}

func (i RevisionSpecArgs) ToRevisionSpecPtrOutput() RevisionSpecPtrOutput {
	return i.ToRevisionSpecPtrOutputWithContext(context.Background())
}

func (i RevisionSpecArgs) ToRevisionSpecPtrOutputWithContext(ctx context.Context) RevisionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevisionSpecOutput).ToRevisionSpecPtrOutputWithContext(ctx)
}

// RevisionSpecPtrInput is an input type that accepts RevisionSpecArgs, RevisionSpecPtr and RevisionSpecPtrOutput values.
// You can construct a concrete instance of `RevisionSpecPtrInput` via:
//
//	        RevisionSpecArgs{...}
//
//	or:
//
//	        nil
type RevisionSpecPtrInput interface {
	pulumi.Input

	ToRevisionSpecPtrOutput() RevisionSpecPtrOutput
	ToRevisionSpecPtrOutputWithContext(context.Context) RevisionSpecPtrOutput
}

type revisionSpecPtrType RevisionSpecArgs

func RevisionSpecPtr(v *RevisionSpecArgs) RevisionSpecPtrInput {
	return (*revisionSpecPtrType)(v)
}

func (*revisionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RevisionSpec)(nil)).Elem()
}

func (i *revisionSpecPtrType) ToRevisionSpecPtrOutput() RevisionSpecPtrOutput {
	return i.ToRevisionSpecPtrOutputWithContext(context.Background())
}

func (i *revisionSpecPtrType) ToRevisionSpecPtrOutputWithContext(ctx context.Context) RevisionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevisionSpecPtrOutput)
}

// RevisionSpec holds the desired state of the Revision (from the client).
type RevisionSpecOutput struct{ *pulumi.OutputState }

func (RevisionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RevisionSpec)(nil)).Elem()
}

func (o RevisionSpecOutput) ToRevisionSpecOutput() RevisionSpecOutput {
	return o
}

func (o RevisionSpecOutput) ToRevisionSpecOutputWithContext(ctx context.Context) RevisionSpecOutput {
	return o
}

func (o RevisionSpecOutput) ToRevisionSpecPtrOutput() RevisionSpecPtrOutput {
	return o.ToRevisionSpecPtrOutputWithContext(context.Background())
}

func (o RevisionSpecOutput) ToRevisionSpecPtrOutputWithContext(ctx context.Context) RevisionSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RevisionSpec) *RevisionSpec {
		return &v
	}).(RevisionSpecPtrOutput)
}

// ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. If not specified, defaults to 80.
func (o RevisionSpecOutput) ContainerConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RevisionSpec) *int { return v.ContainerConcurrency }).(pulumi.IntPtrOutput)
}

// Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided.
func (o RevisionSpecOutput) Containers() ContainerArrayOutput {
	return o.ApplyT(func(v RevisionSpec) []Container { return v.Containers }).(ContainerArrayOutput)
}

// Not supported by Cloud Run.
func (o RevisionSpecOutput) EnableServiceLinks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RevisionSpec) *bool { return v.EnableServiceLinks }).(pulumi.BoolPtrOutput)
}

// Not supported by Cloud Run.
func (o RevisionSpecOutput) ImagePullSecrets() LocalObjectReferenceArrayOutput {
	return o.ApplyT(func(v RevisionSpec) []LocalObjectReference { return v.ImagePullSecrets }).(LocalObjectReferenceArrayOutput)
}

// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
func (o RevisionSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RevisionSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour).
func (o RevisionSpecOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RevisionSpec) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

func (o RevisionSpecOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v RevisionSpec) []Volume { return v.Volumes }).(VolumeArrayOutput)
}

type RevisionSpecPtrOutput struct{ *pulumi.OutputState }

func (RevisionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RevisionSpec)(nil)).Elem()
}

func (o RevisionSpecPtrOutput) ToRevisionSpecPtrOutput() RevisionSpecPtrOutput {
	return o
}

func (o RevisionSpecPtrOutput) ToRevisionSpecPtrOutputWithContext(ctx context.Context) RevisionSpecPtrOutput {
	return o
}

func (o RevisionSpecPtrOutput) Elem() RevisionSpecOutput {
	return o.ApplyT(func(v *RevisionSpec) RevisionSpec {
		if v != nil {
			return *v
		}
		var ret RevisionSpec
		return ret
	}).(RevisionSpecOutput)
}

// ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. If not specified, defaults to 80.
func (o RevisionSpecPtrOutput) ContainerConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RevisionSpec) *int {
		if v == nil {
			return nil
		}
		return v.ContainerConcurrency
	}).(pulumi.IntPtrOutput)
}

// Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided.
func (o RevisionSpecPtrOutput) Containers() ContainerArrayOutput {
	return o.ApplyT(func(v *RevisionSpec) []Container {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ContainerArrayOutput)
}

// Not supported by Cloud Run.
func (o RevisionSpecPtrOutput) EnableServiceLinks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RevisionSpec) *bool {
		if v == nil {
			return nil
		}
		return v.EnableServiceLinks
	}).(pulumi.BoolPtrOutput)
}

// Not supported by Cloud Run.
func (o RevisionSpecPtrOutput) ImagePullSecrets() LocalObjectReferenceArrayOutput {
	return o.ApplyT(func(v *RevisionSpec) []LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.ImagePullSecrets
	}).(LocalObjectReferenceArrayOutput)
}

// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
func (o RevisionSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RevisionSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour).
func (o RevisionSpecPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RevisionSpec) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

func (o RevisionSpecPtrOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v *RevisionSpec) []Volume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeArrayOutput)
}

// RevisionSpec holds the desired state of the Revision (from the client).
type RevisionSpecResponse struct {
	// ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. If not specified, defaults to 80.
	ContainerConcurrency int `pulumi:"containerConcurrency"`
	// Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided.
	Containers []ContainerResponse `pulumi:"containers"`
	// Not supported by Cloud Run.
	EnableServiceLinks bool `pulumi:"enableServiceLinks"`
	// Not supported by Cloud Run.
	ImagePullSecrets []LocalObjectReferenceResponse `pulumi:"imagePullSecrets"`
	// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
	ServiceAccountName string `pulumi:"serviceAccountName"`
	// TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour).
	TimeoutSeconds int              `pulumi:"timeoutSeconds"`
	Volumes        []VolumeResponse `pulumi:"volumes"`
}

// RevisionSpec holds the desired state of the Revision (from the client).
type RevisionSpecResponseOutput struct{ *pulumi.OutputState }

func (RevisionSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RevisionSpecResponse)(nil)).Elem()
}

func (o RevisionSpecResponseOutput) ToRevisionSpecResponseOutput() RevisionSpecResponseOutput {
	return o
}

func (o RevisionSpecResponseOutput) ToRevisionSpecResponseOutputWithContext(ctx context.Context) RevisionSpecResponseOutput {
	return o
}

// ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. If not specified, defaults to 80.
func (o RevisionSpecResponseOutput) ContainerConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v RevisionSpecResponse) int { return v.ContainerConcurrency }).(pulumi.IntOutput)
}

// Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided.
func (o RevisionSpecResponseOutput) Containers() ContainerResponseArrayOutput {
	return o.ApplyT(func(v RevisionSpecResponse) []ContainerResponse { return v.Containers }).(ContainerResponseArrayOutput)
}

// Not supported by Cloud Run.
func (o RevisionSpecResponseOutput) EnableServiceLinks() pulumi.BoolOutput {
	return o.ApplyT(func(v RevisionSpecResponse) bool { return v.EnableServiceLinks }).(pulumi.BoolOutput)
}

// Not supported by Cloud Run.
func (o RevisionSpecResponseOutput) ImagePullSecrets() LocalObjectReferenceResponseArrayOutput {
	return o.ApplyT(func(v RevisionSpecResponse) []LocalObjectReferenceResponse { return v.ImagePullSecrets }).(LocalObjectReferenceResponseArrayOutput)
}

// Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.
func (o RevisionSpecResponseOutput) ServiceAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v RevisionSpecResponse) string { return v.ServiceAccountName }).(pulumi.StringOutput)
}

// TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour).
func (o RevisionSpecResponseOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v RevisionSpecResponse) int { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

func (o RevisionSpecResponseOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v RevisionSpecResponse) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

// RevisionTemplateSpec describes the data a revision should have when created from a template.
type RevisionTemplate struct {
	// Optional metadata for this Revision, including labels and annotations. Name will be generated by the Configuration. The following annotation keys set properties of the created revision: * `autoscaling.knative.dev/minScale` sets the minimum number of instances. * `autoscaling.knative.dev/maxScale` sets the maximum number of instances. * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
	Metadata *ObjectMeta `pulumi:"metadata"`
	// RevisionSpec holds the desired state of the Revision (from the client).
	Spec *RevisionSpec `pulumi:"spec"`
}

// RevisionTemplateInput is an input type that accepts RevisionTemplateArgs and RevisionTemplateOutput values.
// You can construct a concrete instance of `RevisionTemplateInput` via:
//
//	RevisionTemplateArgs{...}
type RevisionTemplateInput interface {
	pulumi.Input

	ToRevisionTemplateOutput() RevisionTemplateOutput
	ToRevisionTemplateOutputWithContext(context.Context) RevisionTemplateOutput
}

// RevisionTemplateSpec describes the data a revision should have when created from a template.
type RevisionTemplateArgs struct {
	// Optional metadata for this Revision, including labels and annotations. Name will be generated by the Configuration. The following annotation keys set properties of the created revision: * `autoscaling.knative.dev/minScale` sets the minimum number of instances. * `autoscaling.knative.dev/maxScale` sets the maximum number of instances. * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
	Metadata ObjectMetaPtrInput `pulumi:"metadata"`
	// RevisionSpec holds the desired state of the Revision (from the client).
	Spec RevisionSpecPtrInput `pulumi:"spec"`
}

func (RevisionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RevisionTemplate)(nil)).Elem()
}

func (i RevisionTemplateArgs) ToRevisionTemplateOutput() RevisionTemplateOutput {
	return i.ToRevisionTemplateOutputWithContext(context.Background())
}

func (i RevisionTemplateArgs) ToRevisionTemplateOutputWithContext(ctx context.Context) RevisionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevisionTemplateOutput)
}

func (i RevisionTemplateArgs) ToRevisionTemplatePtrOutput() RevisionTemplatePtrOutput {
	return i.ToRevisionTemplatePtrOutputWithContext(context.Background())
}

func (i RevisionTemplateArgs) ToRevisionTemplatePtrOutputWithContext(ctx context.Context) RevisionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevisionTemplateOutput).ToRevisionTemplatePtrOutputWithContext(ctx)
}

// RevisionTemplatePtrInput is an input type that accepts RevisionTemplateArgs, RevisionTemplatePtr and RevisionTemplatePtrOutput values.
// You can construct a concrete instance of `RevisionTemplatePtrInput` via:
//
//	        RevisionTemplateArgs{...}
//
//	or:
//
//	        nil
type RevisionTemplatePtrInput interface {
	pulumi.Input

	ToRevisionTemplatePtrOutput() RevisionTemplatePtrOutput
	ToRevisionTemplatePtrOutputWithContext(context.Context) RevisionTemplatePtrOutput
}

type revisionTemplatePtrType RevisionTemplateArgs

func RevisionTemplatePtr(v *RevisionTemplateArgs) RevisionTemplatePtrInput {
	return (*revisionTemplatePtrType)(v)
}

func (*revisionTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RevisionTemplate)(nil)).Elem()
}

func (i *revisionTemplatePtrType) ToRevisionTemplatePtrOutput() RevisionTemplatePtrOutput {
	return i.ToRevisionTemplatePtrOutputWithContext(context.Background())
}

func (i *revisionTemplatePtrType) ToRevisionTemplatePtrOutputWithContext(ctx context.Context) RevisionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevisionTemplatePtrOutput)
}

// RevisionTemplateSpec describes the data a revision should have when created from a template.
type RevisionTemplateOutput struct{ *pulumi.OutputState }

func (RevisionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RevisionTemplate)(nil)).Elem()
}

func (o RevisionTemplateOutput) ToRevisionTemplateOutput() RevisionTemplateOutput {
	return o
}

func (o RevisionTemplateOutput) ToRevisionTemplateOutputWithContext(ctx context.Context) RevisionTemplateOutput {
	return o
}

func (o RevisionTemplateOutput) ToRevisionTemplatePtrOutput() RevisionTemplatePtrOutput {
	return o.ToRevisionTemplatePtrOutputWithContext(context.Background())
}

func (o RevisionTemplateOutput) ToRevisionTemplatePtrOutputWithContext(ctx context.Context) RevisionTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RevisionTemplate) *RevisionTemplate {
		return &v
	}).(RevisionTemplatePtrOutput)
}

// Optional metadata for this Revision, including labels and annotations. Name will be generated by the Configuration. The following annotation keys set properties of the created revision: * `autoscaling.knative.dev/minScale` sets the minimum number of instances. * `autoscaling.knative.dev/maxScale` sets the maximum number of instances. * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
func (o RevisionTemplateOutput) Metadata() ObjectMetaPtrOutput {
	return o.ApplyT(func(v RevisionTemplate) *ObjectMeta { return v.Metadata }).(ObjectMetaPtrOutput)
}

// RevisionSpec holds the desired state of the Revision (from the client).
func (o RevisionTemplateOutput) Spec() RevisionSpecPtrOutput {
	return o.ApplyT(func(v RevisionTemplate) *RevisionSpec { return v.Spec }).(RevisionSpecPtrOutput)
}

type RevisionTemplatePtrOutput struct{ *pulumi.OutputState }

func (RevisionTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RevisionTemplate)(nil)).Elem()
}

func (o RevisionTemplatePtrOutput) ToRevisionTemplatePtrOutput() RevisionTemplatePtrOutput {
	return o
}

func (o RevisionTemplatePtrOutput) ToRevisionTemplatePtrOutputWithContext(ctx context.Context) RevisionTemplatePtrOutput {
	return o
}

func (o RevisionTemplatePtrOutput) Elem() RevisionTemplateOutput {
	return o.ApplyT(func(v *RevisionTemplate) RevisionTemplate {
		if v != nil {
			return *v
		}
		var ret RevisionTemplate
		return ret
	}).(RevisionTemplateOutput)
}

// Optional metadata for this Revision, including labels and annotations. Name will be generated by the Configuration. The following annotation keys set properties of the created revision: * `autoscaling.knative.dev/minScale` sets the minimum number of instances. * `autoscaling.knative.dev/maxScale` sets the maximum number of instances. * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
func (o RevisionTemplatePtrOutput) Metadata() ObjectMetaPtrOutput {
	return o.ApplyT(func(v *RevisionTemplate) *ObjectMeta {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ObjectMetaPtrOutput)
}

// RevisionSpec holds the desired state of the Revision (from the client).
func (o RevisionTemplatePtrOutput) Spec() RevisionSpecPtrOutput {
	return o.ApplyT(func(v *RevisionTemplate) *RevisionSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(RevisionSpecPtrOutput)
}

// RevisionTemplateSpec describes the data a revision should have when created from a template.
type RevisionTemplateResponse struct {
	// Optional metadata for this Revision, including labels and annotations. Name will be generated by the Configuration. The following annotation keys set properties of the created revision: * `autoscaling.knative.dev/minScale` sets the minimum number of instances. * `autoscaling.knative.dev/maxScale` sets the maximum number of instances. * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
	Metadata ObjectMetaResponse `pulumi:"metadata"`
	// RevisionSpec holds the desired state of the Revision (from the client).
	Spec RevisionSpecResponse `pulumi:"spec"`
}

// RevisionTemplateSpec describes the data a revision should have when created from a template.
type RevisionTemplateResponseOutput struct{ *pulumi.OutputState }

func (RevisionTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RevisionTemplateResponse)(nil)).Elem()
}

func (o RevisionTemplateResponseOutput) ToRevisionTemplateResponseOutput() RevisionTemplateResponseOutput {
	return o
}

func (o RevisionTemplateResponseOutput) ToRevisionTemplateResponseOutputWithContext(ctx context.Context) RevisionTemplateResponseOutput {
	return o
}

// Optional metadata for this Revision, including labels and annotations. Name will be generated by the Configuration. The following annotation keys set properties of the created revision: * `autoscaling.knative.dev/minScale` sets the minimum number of instances. * `autoscaling.knative.dev/maxScale` sets the maximum number of instances. * `run.googleapis.com/cloudsql-instances` sets Cloud SQL connections. Multiple values should be comma separated. * `run.googleapis.com/vpc-access-connector` sets a Serverless VPC Access connector. * `run.googleapis.com/vpc-access-egress` sets VPC egress. Supported values are `all-traffic`, `all` (deprecated), and `private-ranges-only`. `all-traffic` and `all` provide the same functionality. `all` is deprecated but will continue to be supported. Prefer `all-traffic`.
func (o RevisionTemplateResponseOutput) Metadata() ObjectMetaResponseOutput {
	return o.ApplyT(func(v RevisionTemplateResponse) ObjectMetaResponse { return v.Metadata }).(ObjectMetaResponseOutput)
}

// RevisionSpec holds the desired state of the Revision (from the client).
func (o RevisionTemplateResponseOutput) Spec() RevisionSpecResponseOutput {
	return o.ApplyT(func(v RevisionTemplateResponse) RevisionSpecResponse { return v.Spec }).(RevisionSpecResponseOutput)
}

// Not supported by Cloud Run. SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSource struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `pulumi:"localObjectReference"`
	// The Secret to select from.
	Name *string `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional *bool `pulumi:"optional"`
}

// SecretEnvSourceInput is an input type that accepts SecretEnvSourceArgs and SecretEnvSourceOutput values.
// You can construct a concrete instance of `SecretEnvSourceInput` via:
//
//	SecretEnvSourceArgs{...}
type SecretEnvSourceInput interface {
	pulumi.Input

	ToSecretEnvSourceOutput() SecretEnvSourceOutput
	ToSecretEnvSourceOutputWithContext(context.Context) SecretEnvSourceOutput
}

// Not supported by Cloud Run. SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceArgs struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferencePtrInput `pulumi:"localObjectReference"`
	// The Secret to select from.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (SecretEnvSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSource)(nil)).Elem()
}

func (i SecretEnvSourceArgs) ToSecretEnvSourceOutput() SecretEnvSourceOutput {
	return i.ToSecretEnvSourceOutputWithContext(context.Background())
}

func (i SecretEnvSourceArgs) ToSecretEnvSourceOutputWithContext(ctx context.Context) SecretEnvSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourceOutput)
}

func (i SecretEnvSourceArgs) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return i.ToSecretEnvSourcePtrOutputWithContext(context.Background())
}

func (i SecretEnvSourceArgs) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourceOutput).ToSecretEnvSourcePtrOutputWithContext(ctx)
}

// SecretEnvSourcePtrInput is an input type that accepts SecretEnvSourceArgs, SecretEnvSourcePtr and SecretEnvSourcePtrOutput values.
// You can construct a concrete instance of `SecretEnvSourcePtrInput` via:
//
//	        SecretEnvSourceArgs{...}
//
//	or:
//
//	        nil
type SecretEnvSourcePtrInput interface {
	pulumi.Input

	ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput
	ToSecretEnvSourcePtrOutputWithContext(context.Context) SecretEnvSourcePtrOutput
}

type secretEnvSourcePtrType SecretEnvSourceArgs

func SecretEnvSourcePtr(v *SecretEnvSourceArgs) SecretEnvSourcePtrInput {
	return (*secretEnvSourcePtrType)(v)
}

func (*secretEnvSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretEnvSource)(nil)).Elem()
}

func (i *secretEnvSourcePtrType) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return i.ToSecretEnvSourcePtrOutputWithContext(context.Background())
}

func (i *secretEnvSourcePtrType) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourcePtrOutput)
}

// Not supported by Cloud Run. SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceOutput struct{ *pulumi.OutputState }

func (SecretEnvSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSource)(nil)).Elem()
}

func (o SecretEnvSourceOutput) ToSecretEnvSourceOutput() SecretEnvSourceOutput {
	return o
}

func (o SecretEnvSourceOutput) ToSecretEnvSourceOutputWithContext(ctx context.Context) SecretEnvSourceOutput {
	return o
}

func (o SecretEnvSourceOutput) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return o.ToSecretEnvSourcePtrOutputWithContext(context.Background())
}

func (o SecretEnvSourceOutput) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretEnvSource) *SecretEnvSource {
		return &v
	}).(SecretEnvSourcePtrOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretEnvSourceOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v SecretEnvSource) *LocalObjectReference { return v.LocalObjectReference }).(LocalObjectReferencePtrOutput)
}

// The Secret to select from.
func (o SecretEnvSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretEnvSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret must be defined
func (o SecretEnvSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretEnvSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SecretEnvSourcePtrOutput struct{ *pulumi.OutputState }

func (SecretEnvSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretEnvSource)(nil)).Elem()
}

func (o SecretEnvSourcePtrOutput) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return o
}

func (o SecretEnvSourcePtrOutput) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return o
}

func (o SecretEnvSourcePtrOutput) Elem() SecretEnvSourceOutput {
	return o.ApplyT(func(v *SecretEnvSource) SecretEnvSource {
		if v != nil {
			return *v
		}
		var ret SecretEnvSource
		return ret
	}).(SecretEnvSourceOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretEnvSourcePtrOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *SecretEnvSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.LocalObjectReference
	}).(LocalObjectReferencePtrOutput)
}

// The Secret to select from.
func (o SecretEnvSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretEnvSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret must be defined
func (o SecretEnvSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretEnvSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Not supported by Cloud Run. SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceResponse struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponse `pulumi:"localObjectReference"`
	// The Secret to select from.
	Name string `pulumi:"name"`
	// Specify whether the Secret must be defined
	Optional bool `pulumi:"optional"`
}

// Not supported by Cloud Run. SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceResponseOutput struct{ *pulumi.OutputState }

func (SecretEnvSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSourceResponse)(nil)).Elem()
}

func (o SecretEnvSourceResponseOutput) ToSecretEnvSourceResponseOutput() SecretEnvSourceResponseOutput {
	return o
}

func (o SecretEnvSourceResponseOutput) ToSecretEnvSourceResponseOutputWithContext(ctx context.Context) SecretEnvSourceResponseOutput {
	return o
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretEnvSourceResponseOutput) LocalObjectReference() LocalObjectReferenceResponseOutput {
	return o.ApplyT(func(v SecretEnvSourceResponse) LocalObjectReferenceResponse { return v.LocalObjectReference }).(LocalObjectReferenceResponseOutput)
}

// The Secret to select from.
func (o SecretEnvSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretEnvSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specify whether the Secret must be defined
func (o SecretEnvSourceResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v SecretEnvSourceResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelector struct {
	// A Cloud Secret Manager secret version. Must be 'latest' for the latest version, an integer for a specific version, or a version alias. The key of the secret to select from. Must be a valid secret key.
	Key string `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `pulumi:"localObjectReference"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined.
	Optional *bool `pulumi:"optional"`
}

// SecretKeySelectorInput is an input type that accepts SecretKeySelectorArgs and SecretKeySelectorOutput values.
// You can construct a concrete instance of `SecretKeySelectorInput` via:
//
//	SecretKeySelectorArgs{...}
type SecretKeySelectorInput interface {
	pulumi.Input

	ToSecretKeySelectorOutput() SecretKeySelectorOutput
	ToSecretKeySelectorOutputWithContext(context.Context) SecretKeySelectorOutput
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorArgs struct {
	// A Cloud Secret Manager secret version. Must be 'latest' for the latest version, an integer for a specific version, or a version alias. The key of the secret to select from. Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferencePtrInput `pulumi:"localObjectReference"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (SecretKeySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelector)(nil)).Elem()
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorOutput() SecretKeySelectorOutput {
	return i.ToSecretKeySelectorOutputWithContext(context.Background())
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorOutputWithContext(ctx context.Context) SecretKeySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorOutput)
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return i.ToSecretKeySelectorPtrOutputWithContext(context.Background())
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorOutput).ToSecretKeySelectorPtrOutputWithContext(ctx)
}

// SecretKeySelectorPtrInput is an input type that accepts SecretKeySelectorArgs, SecretKeySelectorPtr and SecretKeySelectorPtrOutput values.
// You can construct a concrete instance of `SecretKeySelectorPtrInput` via:
//
//	        SecretKeySelectorArgs{...}
//
//	or:
//
//	        nil
type SecretKeySelectorPtrInput interface {
	pulumi.Input

	ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput
	ToSecretKeySelectorPtrOutputWithContext(context.Context) SecretKeySelectorPtrOutput
}

type secretKeySelectorPtrType SecretKeySelectorArgs

func SecretKeySelectorPtr(v *SecretKeySelectorArgs) SecretKeySelectorPtrInput {
	return (*secretKeySelectorPtrType)(v)
}

func (*secretKeySelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretKeySelector)(nil)).Elem()
}

func (i *secretKeySelectorPtrType) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return i.ToSecretKeySelectorPtrOutputWithContext(context.Background())
}

func (i *secretKeySelectorPtrType) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorPtrOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorOutput struct{ *pulumi.OutputState }

func (SecretKeySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelector)(nil)).Elem()
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorOutput() SecretKeySelectorOutput {
	return o
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorOutputWithContext(ctx context.Context) SecretKeySelectorOutput {
	return o
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return o.ToSecretKeySelectorPtrOutputWithContext(context.Background())
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretKeySelector) *SecretKeySelector {
		return &v
	}).(SecretKeySelectorPtrOutput)
}

// A Cloud Secret Manager secret version. Must be 'latest' for the latest version, an integer for a specific version, or a version alias. The key of the secret to select from. Must be a valid secret key.
func (o SecretKeySelectorOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SecretKeySelector) string { return v.Key }).(pulumi.StringOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretKeySelectorOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v SecretKeySelector) *LocalObjectReference { return v.LocalObjectReference }).(LocalObjectReferencePtrOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
func (o SecretKeySelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretKeySelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined.
func (o SecretKeySelectorOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretKeySelector) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SecretKeySelectorPtrOutput struct{ *pulumi.OutputState }

func (SecretKeySelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretKeySelector)(nil)).Elem()
}

func (o SecretKeySelectorPtrOutput) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return o
}

func (o SecretKeySelectorPtrOutput) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return o
}

func (o SecretKeySelectorPtrOutput) Elem() SecretKeySelectorOutput {
	return o.ApplyT(func(v *SecretKeySelector) SecretKeySelector {
		if v != nil {
			return *v
		}
		var ret SecretKeySelector
		return ret
	}).(SecretKeySelectorOutput)
}

// A Cloud Secret Manager secret version. Must be 'latest' for the latest version, an integer for a specific version, or a version alias. The key of the secret to select from. Must be a valid secret key.
func (o SecretKeySelectorPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretKeySelectorPtrOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.LocalObjectReference
	}).(LocalObjectReferencePtrOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
func (o SecretKeySelectorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined.
func (o SecretKeySelectorPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorResponse struct {
	// A Cloud Secret Manager secret version. Must be 'latest' for the latest version, an integer for a specific version, or a version alias. The key of the secret to select from. Must be a valid secret key.
	Key string `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponse `pulumi:"localObjectReference"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
	Name string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined.
	Optional bool `pulumi:"optional"`
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorResponseOutput struct{ *pulumi.OutputState }

func (SecretKeySelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelectorResponse)(nil)).Elem()
}

func (o SecretKeySelectorResponseOutput) ToSecretKeySelectorResponseOutput() SecretKeySelectorResponseOutput {
	return o
}

func (o SecretKeySelectorResponseOutput) ToSecretKeySelectorResponseOutputWithContext(ctx context.Context) SecretKeySelectorResponseOutput {
	return o
}

// A Cloud Secret Manager secret version. Must be 'latest' for the latest version, an integer for a specific version, or a version alias. The key of the secret to select from. Must be a valid secret key.
func (o SecretKeySelectorResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SecretKeySelectorResponse) string { return v.Key }).(pulumi.StringOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretKeySelectorResponseOutput) LocalObjectReference() LocalObjectReferenceResponseOutput {
	return o.ApplyT(func(v SecretKeySelectorResponse) LocalObjectReferenceResponse { return v.LocalObjectReference }).(LocalObjectReferenceResponseOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
func (o SecretKeySelectorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretKeySelectorResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specify whether the Secret or its key must be defined.
func (o SecretKeySelectorResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v SecretKeySelectorResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// A volume representing a secret stored in Google Secret Manager. The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSource struct {
	// Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// A list of secret versions to mount in the volume. If no items are specified, the volume will expose a file with the same name as the secret name. The contents of the file will be the data in the latest version of the secret. If items are specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify both a key and a path.
	Items []KeyToPath `pulumi:"items"`
	// Not supported by Cloud Run.
	Optional *bool `pulumi:"optional"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
	SecretName *string `pulumi:"secretName"`
}

// SecretVolumeSourceInput is an input type that accepts SecretVolumeSourceArgs and SecretVolumeSourceOutput values.
// You can construct a concrete instance of `SecretVolumeSourceInput` via:
//
//	SecretVolumeSourceArgs{...}
type SecretVolumeSourceInput interface {
	pulumi.Input

	ToSecretVolumeSourceOutput() SecretVolumeSourceOutput
	ToSecretVolumeSourceOutputWithContext(context.Context) SecretVolumeSourceOutput
}

// A volume representing a secret stored in Google Secret Manager. The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSourceArgs struct {
	// Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// A list of secret versions to mount in the volume. If no items are specified, the volume will expose a file with the same name as the secret name. The contents of the file will be the data in the latest version of the secret. If items are specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify both a key and a path.
	Items KeyToPathArrayInput `pulumi:"items"`
	// Not supported by Cloud Run.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (SecretVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSource)(nil)).Elem()
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourceOutput() SecretVolumeSourceOutput {
	return i.ToSecretVolumeSourceOutputWithContext(context.Background())
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourceOutputWithContext(ctx context.Context) SecretVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourceOutput)
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return i.ToSecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourceOutput).ToSecretVolumeSourcePtrOutputWithContext(ctx)
}

// SecretVolumeSourcePtrInput is an input type that accepts SecretVolumeSourceArgs, SecretVolumeSourcePtr and SecretVolumeSourcePtrOutput values.
// You can construct a concrete instance of `SecretVolumeSourcePtrInput` via:
//
//	        SecretVolumeSourceArgs{...}
//
//	or:
//
//	        nil
type SecretVolumeSourcePtrInput interface {
	pulumi.Input

	ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput
	ToSecretVolumeSourcePtrOutputWithContext(context.Context) SecretVolumeSourcePtrOutput
}

type secretVolumeSourcePtrType SecretVolumeSourceArgs

func SecretVolumeSourcePtr(v *SecretVolumeSourceArgs) SecretVolumeSourcePtrInput {
	return (*secretVolumeSourcePtrType)(v)
}

func (*secretVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretVolumeSource)(nil)).Elem()
}

func (i *secretVolumeSourcePtrType) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return i.ToSecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *secretVolumeSourcePtrType) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourcePtrOutput)
}

// A volume representing a secret stored in Google Secret Manager. The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSourceOutput struct{ *pulumi.OutputState }

func (SecretVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSource)(nil)).Elem()
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourceOutput() SecretVolumeSourceOutput {
	return o
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourceOutputWithContext(ctx context.Context) SecretVolumeSourceOutput {
	return o
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return o.ToSecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretVolumeSource) *SecretVolumeSource {
		return &v
	}).(SecretVolumeSourcePtrOutput)
}

// Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o SecretVolumeSourceOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretVolumeSource) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// A list of secret versions to mount in the volume. If no items are specified, the volume will expose a file with the same name as the secret name. The contents of the file will be the data in the latest version of the secret. If items are specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify both a key and a path.
func (o SecretVolumeSourceOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v SecretVolumeSource) []KeyToPath { return v.Items }).(KeyToPathArrayOutput)
}

// Not supported by Cloud Run.
func (o SecretVolumeSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretVolumeSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
func (o SecretVolumeSourceOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolumeSource) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type SecretVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (SecretVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretVolumeSource)(nil)).Elem()
}

func (o SecretVolumeSourcePtrOutput) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return o
}

func (o SecretVolumeSourcePtrOutput) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return o
}

func (o SecretVolumeSourcePtrOutput) Elem() SecretVolumeSourceOutput {
	return o.ApplyT(func(v *SecretVolumeSource) SecretVolumeSource {
		if v != nil {
			return *v
		}
		var ret SecretVolumeSource
		return ret
	}).(SecretVolumeSourceOutput)
}

// Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o SecretVolumeSourcePtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// A list of secret versions to mount in the volume. If no items are specified, the volume will expose a file with the same name as the secret name. The contents of the file will be the data in the latest version of the secret. If items are specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify both a key and a path.
func (o SecretVolumeSourcePtrOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v *SecretVolumeSource) []KeyToPath {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathArrayOutput)
}

// Not supported by Cloud Run.
func (o SecretVolumeSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
func (o SecretVolumeSourcePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// A volume representing a secret stored in Google Secret Manager. The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSourceResponse struct {
	// Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode int `pulumi:"defaultMode"`
	// A list of secret versions to mount in the volume. If no items are specified, the volume will expose a file with the same name as the secret name. The contents of the file will be the data in the latest version of the secret. If items are specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify both a key and a path.
	Items []KeyToPathResponse `pulumi:"items"`
	// Not supported by Cloud Run.
	Optional bool `pulumi:"optional"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
	SecretName string `pulumi:"secretName"`
}

// A volume representing a secret stored in Google Secret Manager. The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSourceResponseOutput struct{ *pulumi.OutputState }

func (SecretVolumeSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSourceResponse)(nil)).Elem()
}

func (o SecretVolumeSourceResponseOutput) ToSecretVolumeSourceResponseOutput() SecretVolumeSourceResponseOutput {
	return o
}

func (o SecretVolumeSourceResponseOutput) ToSecretVolumeSourceResponseOutputWithContext(ctx context.Context) SecretVolumeSourceResponseOutput {
	return o
}

// Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o SecretVolumeSourceResponseOutput) DefaultMode() pulumi.IntOutput {
	return o.ApplyT(func(v SecretVolumeSourceResponse) int { return v.DefaultMode }).(pulumi.IntOutput)
}

// A list of secret versions to mount in the volume. If no items are specified, the volume will expose a file with the same name as the secret name. The contents of the file will be the data in the latest version of the secret. If items are specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify both a key and a path.
func (o SecretVolumeSourceResponseOutput) Items() KeyToPathResponseArrayOutput {
	return o.ApplyT(func(v SecretVolumeSourceResponse) []KeyToPathResponse { return v.Items }).(KeyToPathResponseArrayOutput)
}

// Not supported by Cloud Run.
func (o SecretVolumeSourceResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v SecretVolumeSourceResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
func (o SecretVolumeSourceResponseOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretVolumeSourceResponse) string { return v.SecretName }).(pulumi.StringOutput)
}

// Not supported by Cloud Run. SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContext struct {
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser *int `pulumi:"runAsUser"`
}

// SecurityContextInput is an input type that accepts SecurityContextArgs and SecurityContextOutput values.
// You can construct a concrete instance of `SecurityContextInput` via:
//
//	SecurityContextArgs{...}
type SecurityContextInput interface {
	pulumi.Input

	ToSecurityContextOutput() SecurityContextOutput
	ToSecurityContextOutputWithContext(context.Context) SecurityContextOutput
}

// Not supported by Cloud Run. SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContextArgs struct {
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
}

func (SecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContext)(nil)).Elem()
}

func (i SecurityContextArgs) ToSecurityContextOutput() SecurityContextOutput {
	return i.ToSecurityContextOutputWithContext(context.Background())
}

func (i SecurityContextArgs) ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextOutput)
}

func (i SecurityContextArgs) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return i.ToSecurityContextPtrOutputWithContext(context.Background())
}

func (i SecurityContextArgs) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextOutput).ToSecurityContextPtrOutputWithContext(ctx)
}

// SecurityContextPtrInput is an input type that accepts SecurityContextArgs, SecurityContextPtr and SecurityContextPtrOutput values.
// You can construct a concrete instance of `SecurityContextPtrInput` via:
//
//	        SecurityContextArgs{...}
//
//	or:
//
//	        nil
type SecurityContextPtrInput interface {
	pulumi.Input

	ToSecurityContextPtrOutput() SecurityContextPtrOutput
	ToSecurityContextPtrOutputWithContext(context.Context) SecurityContextPtrOutput
}

type securityContextPtrType SecurityContextArgs

func SecurityContextPtr(v *SecurityContextArgs) SecurityContextPtrInput {
	return (*securityContextPtrType)(v)
}

func (*securityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContext)(nil)).Elem()
}

func (i *securityContextPtrType) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return i.ToSecurityContextPtrOutputWithContext(context.Background())
}

func (i *securityContextPtrType) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextPtrOutput)
}

// Not supported by Cloud Run. SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContextOutput struct{ *pulumi.OutputState }

func (SecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContext)(nil)).Elem()
}

func (o SecurityContextOutput) ToSecurityContextOutput() SecurityContextOutput {
	return o
}

func (o SecurityContextOutput) ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput {
	return o
}

func (o SecurityContextOutput) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return o.ToSecurityContextPtrOutputWithContext(context.Background())
}

func (o SecurityContextOutput) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityContext) *SecurityContext {
		return &v
	}).(SecurityContextPtrOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o SecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

type SecurityContextPtrOutput struct{ *pulumi.OutputState }

func (SecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContext)(nil)).Elem()
}

func (o SecurityContextPtrOutput) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return o
}

func (o SecurityContextPtrOutput) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return o
}

func (o SecurityContextPtrOutput) Elem() SecurityContextOutput {
	return o.ApplyT(func(v *SecurityContext) SecurityContext {
		if v != nil {
			return *v
		}
		var ret SecurityContext
		return ret
	}).(SecurityContextOutput)
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o SecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// Not supported by Cloud Run. SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContextResponse struct {
	// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser int `pulumi:"runAsUser"`
}

// Not supported by Cloud Run. SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContextResponseOutput struct{ *pulumi.OutputState }

func (SecurityContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextResponse)(nil)).Elem()
}

func (o SecurityContextResponseOutput) ToSecurityContextResponseOutput() SecurityContextResponseOutput {
	return o
}

func (o SecurityContextResponseOutput) ToSecurityContextResponseOutputWithContext(ctx context.Context) SecurityContextResponseOutput {
	return o
}

// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o SecurityContextResponseOutput) RunAsUser() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityContextResponse) int { return v.RunAsUser }).(pulumi.IntOutput)
}

// ServiceSpec holds the desired state of the Route (from the client), which is used to manipulate the underlying Route and Configuration(s).
type ServiceSpec struct {
	// Holds the latest specification for the Revision to be stamped out.
	Template *RevisionTemplate `pulumi:"template"`
	// Specifies how to distribute traffic over a collection of Knative Revisions and Configurations to the Service's main URL.
	Traffic []TrafficTarget `pulumi:"traffic"`
}

// ServiceSpecInput is an input type that accepts ServiceSpecArgs and ServiceSpecOutput values.
// You can construct a concrete instance of `ServiceSpecInput` via:
//
//	ServiceSpecArgs{...}
type ServiceSpecInput interface {
	pulumi.Input

	ToServiceSpecOutput() ServiceSpecOutput
	ToServiceSpecOutputWithContext(context.Context) ServiceSpecOutput
}

// ServiceSpec holds the desired state of the Route (from the client), which is used to manipulate the underlying Route and Configuration(s).
type ServiceSpecArgs struct {
	// Holds the latest specification for the Revision to be stamped out.
	Template RevisionTemplatePtrInput `pulumi:"template"`
	// Specifies how to distribute traffic over a collection of Knative Revisions and Configurations to the Service's main URL.
	Traffic TrafficTargetArrayInput `pulumi:"traffic"`
}

func (ServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSpec)(nil)).Elem()
}

func (i ServiceSpecArgs) ToServiceSpecOutput() ServiceSpecOutput {
	return i.ToServiceSpecOutputWithContext(context.Background())
}

func (i ServiceSpecArgs) ToServiceSpecOutputWithContext(ctx context.Context) ServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecOutput)
}

func (i ServiceSpecArgs) ToServiceSpecPtrOutput() ServiceSpecPtrOutput {
	return i.ToServiceSpecPtrOutputWithContext(context.Background())
}

func (i ServiceSpecArgs) ToServiceSpecPtrOutputWithContext(ctx context.Context) ServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecOutput).ToServiceSpecPtrOutputWithContext(ctx)
}

// ServiceSpecPtrInput is an input type that accepts ServiceSpecArgs, ServiceSpecPtr and ServiceSpecPtrOutput values.
// You can construct a concrete instance of `ServiceSpecPtrInput` via:
//
//	        ServiceSpecArgs{...}
//
//	or:
//
//	        nil
type ServiceSpecPtrInput interface {
	pulumi.Input

	ToServiceSpecPtrOutput() ServiceSpecPtrOutput
	ToServiceSpecPtrOutputWithContext(context.Context) ServiceSpecPtrOutput
}

type serviceSpecPtrType ServiceSpecArgs

func ServiceSpecPtr(v *ServiceSpecArgs) ServiceSpecPtrInput {
	return (*serviceSpecPtrType)(v)
}

func (*serviceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSpec)(nil)).Elem()
}

func (i *serviceSpecPtrType) ToServiceSpecPtrOutput() ServiceSpecPtrOutput {
	return i.ToServiceSpecPtrOutputWithContext(context.Background())
}

func (i *serviceSpecPtrType) ToServiceSpecPtrOutputWithContext(ctx context.Context) ServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceSpecPtrOutput)
}

// ServiceSpec holds the desired state of the Route (from the client), which is used to manipulate the underlying Route and Configuration(s).
type ServiceSpecOutput struct{ *pulumi.OutputState }

func (ServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSpec)(nil)).Elem()
}

func (o ServiceSpecOutput) ToServiceSpecOutput() ServiceSpecOutput {
	return o
}

func (o ServiceSpecOutput) ToServiceSpecOutputWithContext(ctx context.Context) ServiceSpecOutput {
	return o
}

func (o ServiceSpecOutput) ToServiceSpecPtrOutput() ServiceSpecPtrOutput {
	return o.ToServiceSpecPtrOutputWithContext(context.Background())
}

func (o ServiceSpecOutput) ToServiceSpecPtrOutputWithContext(ctx context.Context) ServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceSpec) *ServiceSpec {
		return &v
	}).(ServiceSpecPtrOutput)
}

// Holds the latest specification for the Revision to be stamped out.
func (o ServiceSpecOutput) Template() RevisionTemplatePtrOutput {
	return o.ApplyT(func(v ServiceSpec) *RevisionTemplate { return v.Template }).(RevisionTemplatePtrOutput)
}

// Specifies how to distribute traffic over a collection of Knative Revisions and Configurations to the Service's main URL.
func (o ServiceSpecOutput) Traffic() TrafficTargetArrayOutput {
	return o.ApplyT(func(v ServiceSpec) []TrafficTarget { return v.Traffic }).(TrafficTargetArrayOutput)
}

type ServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceSpec)(nil)).Elem()
}

func (o ServiceSpecPtrOutput) ToServiceSpecPtrOutput() ServiceSpecPtrOutput {
	return o
}

func (o ServiceSpecPtrOutput) ToServiceSpecPtrOutputWithContext(ctx context.Context) ServiceSpecPtrOutput {
	return o
}

func (o ServiceSpecPtrOutput) Elem() ServiceSpecOutput {
	return o.ApplyT(func(v *ServiceSpec) ServiceSpec {
		if v != nil {
			return *v
		}
		var ret ServiceSpec
		return ret
	}).(ServiceSpecOutput)
}

// Holds the latest specification for the Revision to be stamped out.
func (o ServiceSpecPtrOutput) Template() RevisionTemplatePtrOutput {
	return o.ApplyT(func(v *ServiceSpec) *RevisionTemplate {
		if v == nil {
			return nil
		}
		return v.Template
	}).(RevisionTemplatePtrOutput)
}

// Specifies how to distribute traffic over a collection of Knative Revisions and Configurations to the Service's main URL.
func (o ServiceSpecPtrOutput) Traffic() TrafficTargetArrayOutput {
	return o.ApplyT(func(v *ServiceSpec) []TrafficTarget {
		if v == nil {
			return nil
		}
		return v.Traffic
	}).(TrafficTargetArrayOutput)
}

// ServiceSpec holds the desired state of the Route (from the client), which is used to manipulate the underlying Route and Configuration(s).
type ServiceSpecResponse struct {
	// Holds the latest specification for the Revision to be stamped out.
	Template RevisionTemplateResponse `pulumi:"template"`
	// Specifies how to distribute traffic over a collection of Knative Revisions and Configurations to the Service's main URL.
	Traffic []TrafficTargetResponse `pulumi:"traffic"`
}

// ServiceSpec holds the desired state of the Route (from the client), which is used to manipulate the underlying Route and Configuration(s).
type ServiceSpecResponseOutput struct{ *pulumi.OutputState }

func (ServiceSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceSpecResponse)(nil)).Elem()
}

func (o ServiceSpecResponseOutput) ToServiceSpecResponseOutput() ServiceSpecResponseOutput {
	return o
}

func (o ServiceSpecResponseOutput) ToServiceSpecResponseOutputWithContext(ctx context.Context) ServiceSpecResponseOutput {
	return o
}

// Holds the latest specification for the Revision to be stamped out.
func (o ServiceSpecResponseOutput) Template() RevisionTemplateResponseOutput {
	return o.ApplyT(func(v ServiceSpecResponse) RevisionTemplateResponse { return v.Template }).(RevisionTemplateResponseOutput)
}

// Specifies how to distribute traffic over a collection of Knative Revisions and Configurations to the Service's main URL.
func (o ServiceSpecResponseOutput) Traffic() TrafficTargetResponseArrayOutput {
	return o.ApplyT(func(v ServiceSpecResponse) []TrafficTargetResponse { return v.Traffic }).(TrafficTargetResponseArrayOutput)
}

// The current state of the Service. Output only.
type ServiceStatus struct {
	// Similar to url, information on where the service is available on HTTP.
	Address *Addressable `pulumi:"address"`
	// Conditions communicate information about ongoing/complete reconciliation processes that bring the `spec` inline with the observed state of the world. Service-specific conditions include: * `ConfigurationsReady`: `True` when the underlying Configuration is ready. * `RoutesReady`: `True` when the underlying Route is ready. * `Ready`: `True` when all underlying resources are ready.
	Conditions []GoogleCloudRunV1Condition `pulumi:"conditions"`
	// Name of the last revision that was created from this Service's Configuration. It might not be ready yet, for that use LatestReadyRevisionName.
	LatestCreatedRevisionName *string `pulumi:"latestCreatedRevisionName"`
	// Name of the latest Revision from this Service's Configuration that has had its `Ready` condition become `True`.
	LatestReadyRevisionName *string `pulumi:"latestReadyRevisionName"`
	// Returns the generation last seen by the system. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.
	Traffic []TrafficTarget `pulumi:"traffic"`
	// URL that will distribute traffic over the provided traffic targets. It generally has the form `https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app`
	Url *string `pulumi:"url"`
}

// The current state of the Service. Output only.
type ServiceStatusResponse struct {
	// Similar to url, information on where the service is available on HTTP.
	Address AddressableResponse `pulumi:"address"`
	// Conditions communicate information about ongoing/complete reconciliation processes that bring the `spec` inline with the observed state of the world. Service-specific conditions include: * `ConfigurationsReady`: `True` when the underlying Configuration is ready. * `RoutesReady`: `True` when the underlying Route is ready. * `Ready`: `True` when all underlying resources are ready.
	Conditions []GoogleCloudRunV1ConditionResponse `pulumi:"conditions"`
	// Name of the last revision that was created from this Service's Configuration. It might not be ready yet, for that use LatestReadyRevisionName.
	LatestCreatedRevisionName string `pulumi:"latestCreatedRevisionName"`
	// Name of the latest Revision from this Service's Configuration that has had its `Ready` condition become `True`.
	LatestReadyRevisionName string `pulumi:"latestReadyRevisionName"`
	// Returns the generation last seen by the system. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
	ObservedGeneration int `pulumi:"observedGeneration"`
	// Holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.
	Traffic []TrafficTargetResponse `pulumi:"traffic"`
	// URL that will distribute traffic over the provided traffic targets. It generally has the form `https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app`
	Url string `pulumi:"url"`
}

// The current state of the Service. Output only.
type ServiceStatusResponseOutput struct{ *pulumi.OutputState }

func (ServiceStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceStatusResponse)(nil)).Elem()
}

func (o ServiceStatusResponseOutput) ToServiceStatusResponseOutput() ServiceStatusResponseOutput {
	return o
}

func (o ServiceStatusResponseOutput) ToServiceStatusResponseOutputWithContext(ctx context.Context) ServiceStatusResponseOutput {
	return o
}

// Similar to url, information on where the service is available on HTTP.
func (o ServiceStatusResponseOutput) Address() AddressableResponseOutput {
	return o.ApplyT(func(v ServiceStatusResponse) AddressableResponse { return v.Address }).(AddressableResponseOutput)
}

// Conditions communicate information about ongoing/complete reconciliation processes that bring the `spec` inline with the observed state of the world. Service-specific conditions include: * `ConfigurationsReady`: `True` when the underlying Configuration is ready. * `RoutesReady`: `True` when the underlying Route is ready. * `Ready`: `True` when all underlying resources are ready.
func (o ServiceStatusResponseOutput) Conditions() GoogleCloudRunV1ConditionResponseArrayOutput {
	return o.ApplyT(func(v ServiceStatusResponse) []GoogleCloudRunV1ConditionResponse { return v.Conditions }).(GoogleCloudRunV1ConditionResponseArrayOutput)
}

// Name of the last revision that was created from this Service's Configuration. It might not be ready yet, for that use LatestReadyRevisionName.
func (o ServiceStatusResponseOutput) LatestCreatedRevisionName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceStatusResponse) string { return v.LatestCreatedRevisionName }).(pulumi.StringOutput)
}

// Name of the latest Revision from this Service's Configuration that has had its `Ready` condition become `True`.
func (o ServiceStatusResponseOutput) LatestReadyRevisionName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceStatusResponse) string { return v.LatestReadyRevisionName }).(pulumi.StringOutput)
}

// Returns the generation last seen by the system. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.
func (o ServiceStatusResponseOutput) ObservedGeneration() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceStatusResponse) int { return v.ObservedGeneration }).(pulumi.IntOutput)
}

// Holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.
func (o ServiceStatusResponseOutput) Traffic() TrafficTargetResponseArrayOutput {
	return o.ApplyT(func(v ServiceStatusResponse) []TrafficTargetResponse { return v.Traffic }).(TrafficTargetResponseArrayOutput)
}

// URL that will distribute traffic over the provided traffic targets. It generally has the form `https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app`
func (o ServiceStatusResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceStatusResponse) string { return v.Url }).(pulumi.StringOutput)
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketAction struct {
	// Not supported by Cloud Run.
	Host *string `pulumi:"host"`
	// Port number to access on the container. Number must be in the range 1 to 65535.
	Port *int `pulumi:"port"`
}

// TCPSocketActionInput is an input type that accepts TCPSocketActionArgs and TCPSocketActionOutput values.
// You can construct a concrete instance of `TCPSocketActionInput` via:
//
//	TCPSocketActionArgs{...}
type TCPSocketActionInput interface {
	pulumi.Input

	ToTCPSocketActionOutput() TCPSocketActionOutput
	ToTCPSocketActionOutputWithContext(context.Context) TCPSocketActionOutput
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketActionArgs struct {
	// Not supported by Cloud Run.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Port number to access on the container. Number must be in the range 1 to 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (TCPSocketActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketAction)(nil)).Elem()
}

func (i TCPSocketActionArgs) ToTCPSocketActionOutput() TCPSocketActionOutput {
	return i.ToTCPSocketActionOutputWithContext(context.Background())
}

func (i TCPSocketActionArgs) ToTCPSocketActionOutputWithContext(ctx context.Context) TCPSocketActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionOutput)
}

func (i TCPSocketActionArgs) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return i.ToTCPSocketActionPtrOutputWithContext(context.Background())
}

func (i TCPSocketActionArgs) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionOutput).ToTCPSocketActionPtrOutputWithContext(ctx)
}

// TCPSocketActionPtrInput is an input type that accepts TCPSocketActionArgs, TCPSocketActionPtr and TCPSocketActionPtrOutput values.
// You can construct a concrete instance of `TCPSocketActionPtrInput` via:
//
//	        TCPSocketActionArgs{...}
//
//	or:
//
//	        nil
type TCPSocketActionPtrInput interface {
	pulumi.Input

	ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput
	ToTCPSocketActionPtrOutputWithContext(context.Context) TCPSocketActionPtrOutput
}

type tcpsocketActionPtrType TCPSocketActionArgs

func TCPSocketActionPtr(v *TCPSocketActionArgs) TCPSocketActionPtrInput {
	return (*tcpsocketActionPtrType)(v)
}

func (*tcpsocketActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPSocketAction)(nil)).Elem()
}

func (i *tcpsocketActionPtrType) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return i.ToTCPSocketActionPtrOutputWithContext(context.Background())
}

func (i *tcpsocketActionPtrType) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionPtrOutput)
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketActionOutput struct{ *pulumi.OutputState }

func (TCPSocketActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketAction)(nil)).Elem()
}

func (o TCPSocketActionOutput) ToTCPSocketActionOutput() TCPSocketActionOutput {
	return o
}

func (o TCPSocketActionOutput) ToTCPSocketActionOutputWithContext(ctx context.Context) TCPSocketActionOutput {
	return o
}

func (o TCPSocketActionOutput) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return o.ToTCPSocketActionPtrOutputWithContext(context.Background())
}

func (o TCPSocketActionOutput) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TCPSocketAction) *TCPSocketAction {
		return &v
	}).(TCPSocketActionPtrOutput)
}

// Not supported by Cloud Run.
func (o TCPSocketActionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPSocketAction) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Port number to access on the container. Number must be in the range 1 to 65535.
func (o TCPSocketActionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TCPSocketAction) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type TCPSocketActionPtrOutput struct{ *pulumi.OutputState }

func (TCPSocketActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPSocketAction)(nil)).Elem()
}

func (o TCPSocketActionPtrOutput) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return o
}

func (o TCPSocketActionPtrOutput) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return o
}

func (o TCPSocketActionPtrOutput) Elem() TCPSocketActionOutput {
	return o.ApplyT(func(v *TCPSocketAction) TCPSocketAction {
		if v != nil {
			return *v
		}
		var ret TCPSocketAction
		return ret
	}).(TCPSocketActionOutput)
}

// Not supported by Cloud Run.
func (o TCPSocketActionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPSocketAction) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Port number to access on the container. Number must be in the range 1 to 65535.
func (o TCPSocketActionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TCPSocketAction) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketActionResponse struct {
	// Not supported by Cloud Run.
	Host string `pulumi:"host"`
	// Port number to access on the container. Number must be in the range 1 to 65535.
	Port int `pulumi:"port"`
}

// TCPSocketAction describes an action based on opening a socket
type TCPSocketActionResponseOutput struct{ *pulumi.OutputState }

func (TCPSocketActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketActionResponse)(nil)).Elem()
}

func (o TCPSocketActionResponseOutput) ToTCPSocketActionResponseOutput() TCPSocketActionResponseOutput {
	return o
}

func (o TCPSocketActionResponseOutput) ToTCPSocketActionResponseOutputWithContext(ctx context.Context) TCPSocketActionResponseOutput {
	return o
}

// Not supported by Cloud Run.
func (o TCPSocketActionResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v TCPSocketActionResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Port number to access on the container. Number must be in the range 1 to 65535.
func (o TCPSocketActionResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v TCPSocketActionResponse) int { return v.Port }).(pulumi.IntOutput)
}

// TaskSpec is a description of a task.
type TaskSpec struct {
	// Optional. List of containers belonging to the task. We disallow a number of fields on this Container. Only a single container may be provided.
	Containers []Container `pulumi:"containers"`
	// Optional. Number of retries allowed per task, before marking this job failed. Defaults to 3.
	MaxRetries *int `pulumi:"maxRetries"`
	// Optional. Email address of the IAM service account associated with the task of a job execution. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Optional. Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.
	TimeoutSeconds *string `pulumi:"timeoutSeconds"`
	// Optional. List of volumes that can be mounted by containers belonging to the task.
	Volumes []Volume `pulumi:"volumes"`
}

// TaskSpec is a description of a task.
type TaskSpecResponse struct {
	// Optional. List of containers belonging to the task. We disallow a number of fields on this Container. Only a single container may be provided.
	Containers []ContainerResponse `pulumi:"containers"`
	// Optional. Number of retries allowed per task, before marking this job failed. Defaults to 3.
	MaxRetries int `pulumi:"maxRetries"`
	// Optional. Email address of the IAM service account associated with the task of a job execution. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
	ServiceAccountName string `pulumi:"serviceAccountName"`
	// Optional. Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.
	TimeoutSeconds string `pulumi:"timeoutSeconds"`
	// Optional. List of volumes that can be mounted by containers belonging to the task.
	Volumes []VolumeResponse `pulumi:"volumes"`
}

// TaskSpec is a description of a task.
type TaskSpecResponseOutput struct{ *pulumi.OutputState }

func (TaskSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskSpecResponse)(nil)).Elem()
}

func (o TaskSpecResponseOutput) ToTaskSpecResponseOutput() TaskSpecResponseOutput {
	return o
}

func (o TaskSpecResponseOutput) ToTaskSpecResponseOutputWithContext(ctx context.Context) TaskSpecResponseOutput {
	return o
}

// Optional. List of containers belonging to the task. We disallow a number of fields on this Container. Only a single container may be provided.
func (o TaskSpecResponseOutput) Containers() ContainerResponseArrayOutput {
	return o.ApplyT(func(v TaskSpecResponse) []ContainerResponse { return v.Containers }).(ContainerResponseArrayOutput)
}

// Optional. Number of retries allowed per task, before marking this job failed. Defaults to 3.
func (o TaskSpecResponseOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v TaskSpecResponse) int { return v.MaxRetries }).(pulumi.IntOutput)
}

// Optional. Email address of the IAM service account associated with the task of a job execution. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
func (o TaskSpecResponseOutput) ServiceAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSpecResponse) string { return v.ServiceAccountName }).(pulumi.StringOutput)
}

// Optional. Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.
func (o TaskSpecResponseOutput) TimeoutSeconds() pulumi.StringOutput {
	return o.ApplyT(func(v TaskSpecResponse) string { return v.TimeoutSeconds }).(pulumi.StringOutput)
}

// Optional. List of volumes that can be mounted by containers belonging to the task.
func (o TaskSpecResponseOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v TaskSpecResponse) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

// TaskTemplateSpec describes the data a task should have when created from a template.
type TaskTemplateSpec struct {
	// Optional. Specification of the desired behavior of the task.
	Spec *TaskSpec `pulumi:"spec"`
}

// TaskTemplateSpec describes the data a task should have when created from a template.
type TaskTemplateSpecResponse struct {
	// Optional. Specification of the desired behavior of the task.
	Spec TaskSpecResponse `pulumi:"spec"`
}

// TaskTemplateSpec describes the data a task should have when created from a template.
type TaskTemplateSpecResponseOutput struct{ *pulumi.OutputState }

func (TaskTemplateSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskTemplateSpecResponse)(nil)).Elem()
}

func (o TaskTemplateSpecResponseOutput) ToTaskTemplateSpecResponseOutput() TaskTemplateSpecResponseOutput {
	return o
}

func (o TaskTemplateSpecResponseOutput) ToTaskTemplateSpecResponseOutputWithContext(ctx context.Context) TaskTemplateSpecResponseOutput {
	return o
}

// Optional. Specification of the desired behavior of the task.
func (o TaskTemplateSpecResponseOutput) Spec() TaskSpecResponseOutput {
	return o.ApplyT(func(v TaskTemplateSpecResponse) TaskSpecResponse { return v.Spec }).(TaskSpecResponseOutput)
}

// TrafficTarget holds a single entry of the routing table for a Route.
type TrafficTarget struct {
	// [Deprecated] Not supported in Cloud Run. It must be empty.
	//
	// Deprecated: [Deprecated] Not supported in Cloud Run. It must be empty.
	ConfigurationName *string `pulumi:"configurationName"`
	// Uses the "status.latestReadyRevisionName" of the Service to determine the traffic target. When it changes, traffic will automatically migrate from the prior "latest ready" revision to the new one. This field must be false if RevisionName is set. This field defaults to true otherwise. If the field is set to true on Status, this means that the Revision was resolved from the Service's latest ready revision.
	LatestRevision *bool `pulumi:"latestRevision"`
	// Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.
	Percent *int `pulumi:"percent"`
	// Points this traffic target to a specific Revision. This field is mutually exclusive with latest_revision.
	RevisionName *string `pulumi:"revisionName"`
	// Tag is used to expose a dedicated url for referencing this target exclusively.
	Tag *string `pulumi:"tag"`
}

// TrafficTargetInput is an input type that accepts TrafficTargetArgs and TrafficTargetOutput values.
// You can construct a concrete instance of `TrafficTargetInput` via:
//
//	TrafficTargetArgs{...}
type TrafficTargetInput interface {
	pulumi.Input

	ToTrafficTargetOutput() TrafficTargetOutput
	ToTrafficTargetOutputWithContext(context.Context) TrafficTargetOutput
}

// TrafficTarget holds a single entry of the routing table for a Route.
type TrafficTargetArgs struct {
	// [Deprecated] Not supported in Cloud Run. It must be empty.
	//
	// Deprecated: [Deprecated] Not supported in Cloud Run. It must be empty.
	ConfigurationName pulumi.StringPtrInput `pulumi:"configurationName"`
	// Uses the "status.latestReadyRevisionName" of the Service to determine the traffic target. When it changes, traffic will automatically migrate from the prior "latest ready" revision to the new one. This field must be false if RevisionName is set. This field defaults to true otherwise. If the field is set to true on Status, this means that the Revision was resolved from the Service's latest ready revision.
	LatestRevision pulumi.BoolPtrInput `pulumi:"latestRevision"`
	// Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.
	Percent pulumi.IntPtrInput `pulumi:"percent"`
	// Points this traffic target to a specific Revision. This field is mutually exclusive with latest_revision.
	RevisionName pulumi.StringPtrInput `pulumi:"revisionName"`
	// Tag is used to expose a dedicated url for referencing this target exclusively.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (TrafficTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficTarget)(nil)).Elem()
}

func (i TrafficTargetArgs) ToTrafficTargetOutput() TrafficTargetOutput {
	return i.ToTrafficTargetOutputWithContext(context.Background())
}

func (i TrafficTargetArgs) ToTrafficTargetOutputWithContext(ctx context.Context) TrafficTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficTargetOutput)
}

// TrafficTargetArrayInput is an input type that accepts TrafficTargetArray and TrafficTargetArrayOutput values.
// You can construct a concrete instance of `TrafficTargetArrayInput` via:
//
//	TrafficTargetArray{ TrafficTargetArgs{...} }
type TrafficTargetArrayInput interface {
	pulumi.Input

	ToTrafficTargetArrayOutput() TrafficTargetArrayOutput
	ToTrafficTargetArrayOutputWithContext(context.Context) TrafficTargetArrayOutput
}

type TrafficTargetArray []TrafficTargetInput

func (TrafficTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficTarget)(nil)).Elem()
}

func (i TrafficTargetArray) ToTrafficTargetArrayOutput() TrafficTargetArrayOutput {
	return i.ToTrafficTargetArrayOutputWithContext(context.Background())
}

func (i TrafficTargetArray) ToTrafficTargetArrayOutputWithContext(ctx context.Context) TrafficTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficTargetArrayOutput)
}

// TrafficTarget holds a single entry of the routing table for a Route.
type TrafficTargetOutput struct{ *pulumi.OutputState }

func (TrafficTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficTarget)(nil)).Elem()
}

func (o TrafficTargetOutput) ToTrafficTargetOutput() TrafficTargetOutput {
	return o
}

func (o TrafficTargetOutput) ToTrafficTargetOutputWithContext(ctx context.Context) TrafficTargetOutput {
	return o
}

// [Deprecated] Not supported in Cloud Run. It must be empty.
//
// Deprecated: [Deprecated] Not supported in Cloud Run. It must be empty.
func (o TrafficTargetOutput) ConfigurationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficTarget) *string { return v.ConfigurationName }).(pulumi.StringPtrOutput)
}

// Uses the "status.latestReadyRevisionName" of the Service to determine the traffic target. When it changes, traffic will automatically migrate from the prior "latest ready" revision to the new one. This field must be false if RevisionName is set. This field defaults to true otherwise. If the field is set to true on Status, this means that the Revision was resolved from the Service's latest ready revision.
func (o TrafficTargetOutput) LatestRevision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrafficTarget) *bool { return v.LatestRevision }).(pulumi.BoolPtrOutput)
}

// Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.
func (o TrafficTargetOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrafficTarget) *int { return v.Percent }).(pulumi.IntPtrOutput)
}

// Points this traffic target to a specific Revision. This field is mutually exclusive with latest_revision.
func (o TrafficTargetOutput) RevisionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficTarget) *string { return v.RevisionName }).(pulumi.StringPtrOutput)
}

// Tag is used to expose a dedicated url for referencing this target exclusively.
func (o TrafficTargetOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficTarget) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type TrafficTargetArrayOutput struct{ *pulumi.OutputState }

func (TrafficTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficTarget)(nil)).Elem()
}

func (o TrafficTargetArrayOutput) ToTrafficTargetArrayOutput() TrafficTargetArrayOutput {
	return o
}

func (o TrafficTargetArrayOutput) ToTrafficTargetArrayOutputWithContext(ctx context.Context) TrafficTargetArrayOutput {
	return o
}

func (o TrafficTargetArrayOutput) Index(i pulumi.IntInput) TrafficTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrafficTarget {
		return vs[0].([]TrafficTarget)[vs[1].(int)]
	}).(TrafficTargetOutput)
}

// TrafficTarget holds a single entry of the routing table for a Route.
type TrafficTargetResponse struct {
	// [Deprecated] Not supported in Cloud Run. It must be empty.
	//
	// Deprecated: [Deprecated] Not supported in Cloud Run. It must be empty.
	ConfigurationName string `pulumi:"configurationName"`
	// Uses the "status.latestReadyRevisionName" of the Service to determine the traffic target. When it changes, traffic will automatically migrate from the prior "latest ready" revision to the new one. This field must be false if RevisionName is set. This field defaults to true otherwise. If the field is set to true on Status, this means that the Revision was resolved from the Service's latest ready revision.
	LatestRevision bool `pulumi:"latestRevision"`
	// Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.
	Percent int `pulumi:"percent"`
	// Points this traffic target to a specific Revision. This field is mutually exclusive with latest_revision.
	RevisionName string `pulumi:"revisionName"`
	// Tag is used to expose a dedicated url for referencing this target exclusively.
	Tag string `pulumi:"tag"`
	// URL displays the URL for accessing tagged traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. https://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)
	Url string `pulumi:"url"`
}

// TrafficTarget holds a single entry of the routing table for a Route.
type TrafficTargetResponseOutput struct{ *pulumi.OutputState }

func (TrafficTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficTargetResponse)(nil)).Elem()
}

func (o TrafficTargetResponseOutput) ToTrafficTargetResponseOutput() TrafficTargetResponseOutput {
	return o
}

func (o TrafficTargetResponseOutput) ToTrafficTargetResponseOutputWithContext(ctx context.Context) TrafficTargetResponseOutput {
	return o
}

// [Deprecated] Not supported in Cloud Run. It must be empty.
//
// Deprecated: [Deprecated] Not supported in Cloud Run. It must be empty.
func (o TrafficTargetResponseOutput) ConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v TrafficTargetResponse) string { return v.ConfigurationName }).(pulumi.StringOutput)
}

// Uses the "status.latestReadyRevisionName" of the Service to determine the traffic target. When it changes, traffic will automatically migrate from the prior "latest ready" revision to the new one. This field must be false if RevisionName is set. This field defaults to true otherwise. If the field is set to true on Status, this means that the Revision was resolved from the Service's latest ready revision.
func (o TrafficTargetResponseOutput) LatestRevision() pulumi.BoolOutput {
	return o.ApplyT(func(v TrafficTargetResponse) bool { return v.LatestRevision }).(pulumi.BoolOutput)
}

// Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.
func (o TrafficTargetResponseOutput) Percent() pulumi.IntOutput {
	return o.ApplyT(func(v TrafficTargetResponse) int { return v.Percent }).(pulumi.IntOutput)
}

// Points this traffic target to a specific Revision. This field is mutually exclusive with latest_revision.
func (o TrafficTargetResponseOutput) RevisionName() pulumi.StringOutput {
	return o.ApplyT(func(v TrafficTargetResponse) string { return v.RevisionName }).(pulumi.StringOutput)
}

// Tag is used to expose a dedicated url for referencing this target exclusively.
func (o TrafficTargetResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v TrafficTargetResponse) string { return v.Tag }).(pulumi.StringOutput)
}

// URL displays the URL for accessing tagged traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. https://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)
func (o TrafficTargetResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v TrafficTargetResponse) string { return v.Url }).(pulumi.StringOutput)
}

type TrafficTargetResponseArrayOutput struct{ *pulumi.OutputState }

func (TrafficTargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficTargetResponse)(nil)).Elem()
}

func (o TrafficTargetResponseArrayOutput) ToTrafficTargetResponseArrayOutput() TrafficTargetResponseArrayOutput {
	return o
}

func (o TrafficTargetResponseArrayOutput) ToTrafficTargetResponseArrayOutputWithContext(ctx context.Context) TrafficTargetResponseArrayOutput {
	return o
}

func (o TrafficTargetResponseArrayOutput) Index(i pulumi.IntInput) TrafficTargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrafficTargetResponse {
		return vs[0].([]TrafficTargetResponse)[vs[1].(int)]
	}).(TrafficTargetResponseOutput)
}

// Volume represents a named volume in a container.
type Volume struct {
	// Not supported in Cloud Run.
	ConfigMap *ConfigMapVolumeSource `pulumi:"configMap"`
	// Ephemeral storage used as a shared volume.
	EmptyDir *EmptyDirVolumeSource `pulumi:"emptyDir"`
	// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
	Name *string `pulumi:"name"`
	// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secretName.
	Secret *SecretVolumeSource `pulumi:"secret"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//	VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// Volume represents a named volume in a container.
type VolumeArgs struct {
	// Not supported in Cloud Run.
	ConfigMap ConfigMapVolumeSourcePtrInput `pulumi:"configMap"`
	// Ephemeral storage used as a shared volume.
	EmptyDir EmptyDirVolumeSourcePtrInput `pulumi:"emptyDir"`
	// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secretName.
	Secret SecretVolumeSourcePtrInput `pulumi:"secret"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// Volume represents a named volume in a container.
type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// Not supported in Cloud Run.
func (o VolumeOutput) ConfigMap() ConfigMapVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *ConfigMapVolumeSource { return v.ConfigMap }).(ConfigMapVolumeSourcePtrOutput)
}

// Ephemeral storage used as a shared volume.
func (o VolumeOutput) EmptyDir() EmptyDirVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *EmptyDirVolumeSource { return v.EmptyDir }).(EmptyDirVolumeSourcePtrOutput)
}

// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
func (o VolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secretName.
func (o VolumeOutput) Secret() SecretVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *SecretVolumeSource { return v.Secret }).(SecretVolumeSourcePtrOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMount struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'.
	MountPath string `pulumi:"mountPath"`
	// The name of the volume. There must be a corresponding Volume with the same name.
	Name string `pulumi:"name"`
	// Sets the mount to be read-only or read-write. Not used by Cloud Run.
	ReadOnly *bool `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
}

// VolumeMountInput is an input type that accepts VolumeMountArgs and VolumeMountOutput values.
// You can construct a concrete instance of `VolumeMountInput` via:
//
//	VolumeMountArgs{...}
type VolumeMountInput interface {
	pulumi.Input

	ToVolumeMountOutput() VolumeMountOutput
	ToVolumeMountOutputWithContext(context.Context) VolumeMountOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountArgs struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The name of the volume. There must be a corresponding Volume with the same name.
	Name pulumi.StringInput `pulumi:"name"`
	// Sets the mount to be read-only or read-write. Not used by Cloud Run.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
}

func (VolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (i VolumeMountArgs) ToVolumeMountOutput() VolumeMountOutput {
	return i.ToVolumeMountOutputWithContext(context.Background())
}

func (i VolumeMountArgs) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOutput)
}

// VolumeMountArrayInput is an input type that accepts VolumeMountArray and VolumeMountArrayOutput values.
// You can construct a concrete instance of `VolumeMountArrayInput` via:
//
//	VolumeMountArray{ VolumeMountArgs{...} }
type VolumeMountArrayInput interface {
	pulumi.Input

	ToVolumeMountArrayOutput() VolumeMountArrayOutput
	ToVolumeMountArrayOutputWithContext(context.Context) VolumeMountArrayOutput
}

type VolumeMountArray []VolumeMountInput

func (VolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (i VolumeMountArray) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return i.ToVolumeMountArrayOutputWithContext(context.Background())
}

func (i VolumeMountArray) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountOutput struct{ *pulumi.OutputState }

func (VolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (o VolumeMountOutput) ToVolumeMountOutput() VolumeMountOutput {
	return o
}

func (o VolumeMountOutput) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return o
}

// Path within the container at which the volume should be mounted. Must not contain ':'.
func (o VolumeMountOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMount) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume. There must be a corresponding Volume with the same name.
func (o VolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

// Sets the mount to be read-only or read-write. Not used by Cloud Run.
func (o VolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o VolumeMountOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMount) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

type VolumeMountArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) Index(i pulumi.IntInput) VolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMount {
		return vs[0].([]VolumeMount)[vs[1].(int)]
	}).(VolumeMountOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountResponse struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'.
	MountPath string `pulumi:"mountPath"`
	// The name of the volume. There must be a corresponding Volume with the same name.
	Name string `pulumi:"name"`
	// Sets the mount to be read-only or read-write. Not used by Cloud Run.
	ReadOnly bool `pulumi:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath string `pulumi:"subPath"`
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountResponseOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutput() VolumeMountResponseOutput {
	return o
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutputWithContext(ctx context.Context) VolumeMountResponseOutput {
	return o
}

// Path within the container at which the volume should be mounted. Must not contain ':'.
func (o VolumeMountResponseOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume. There must be a corresponding Volume with the same name.
func (o VolumeMountResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Sets the mount to be read-only or read-write. Not used by Cloud Run.
func (o VolumeMountResponseOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeMountResponse) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o VolumeMountResponseOutput) SubPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.SubPath }).(pulumi.StringOutput)
}

type VolumeMountResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutput() VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutputWithContext(ctx context.Context) VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) Index(i pulumi.IntInput) VolumeMountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMountResponse {
		return vs[0].([]VolumeMountResponse)[vs[1].(int)]
	}).(VolumeMountResponseOutput)
}

// Volume represents a named volume in a container.
type VolumeResponse struct {
	// Not supported in Cloud Run.
	ConfigMap ConfigMapVolumeSourceResponse `pulumi:"configMap"`
	// Ephemeral storage used as a shared volume.
	EmptyDir EmptyDirVolumeSourceResponse `pulumi:"emptyDir"`
	// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
	Name string `pulumi:"name"`
	// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secretName.
	Secret SecretVolumeSourceResponse `pulumi:"secret"`
}

// Volume represents a named volume in a container.
type VolumeResponseOutput struct{ *pulumi.OutputState }

func (VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseOutput) ToVolumeResponseOutput() VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return o
}

// Not supported in Cloud Run.
func (o VolumeResponseOutput) ConfigMap() ConfigMapVolumeSourceResponseOutput {
	return o.ApplyT(func(v VolumeResponse) ConfigMapVolumeSourceResponse { return v.ConfigMap }).(ConfigMapVolumeSourceResponseOutput)
}

// Ephemeral storage used as a shared volume.
func (o VolumeResponseOutput) EmptyDir() EmptyDirVolumeSourceResponseOutput {
	return o.ApplyT(func(v VolumeResponse) EmptyDirVolumeSourceResponse { return v.EmptyDir }).(EmptyDirVolumeSourceResponseOutput)
}

// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
func (o VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secretName.
func (o VolumeResponseOutput) Secret() SecretVolumeSourceResponseOutput {
	return o.ApplyT(func(v VolumeResponse) SecretVolumeSourceResponse { return v.Secret }).(SecretVolumeSourceResponseOutput)
}

type VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) Index(i pulumi.IntInput) VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeResponse {
		return vs[0].([]VolumeResponse)[vs[1].(int)]
	}).(VolumeResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapEnvSourceInput)(nil)).Elem(), ConfigMapEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapEnvSourcePtrInput)(nil)).Elem(), ConfigMapEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapKeySelectorInput)(nil)).Elem(), ConfigMapKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapKeySelectorPtrInput)(nil)).Elem(), ConfigMapKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapVolumeSourceInput)(nil)).Elem(), ConfigMapVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapVolumeSourcePtrInput)(nil)).Elem(), ConfigMapVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInput)(nil)).Elem(), ContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerArrayInput)(nil)).Elem(), ContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortInput)(nil)).Elem(), ContainerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortArrayInput)(nil)).Elem(), ContainerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMappingSpecInput)(nil)).Elem(), DomainMappingSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMappingSpecPtrInput)(nil)).Elem(), DomainMappingSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmptyDirVolumeSourceInput)(nil)).Elem(), EmptyDirVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmptyDirVolumeSourcePtrInput)(nil)).Elem(), EmptyDirVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFromSourceInput)(nil)).Elem(), EnvFromSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFromSourceArrayInput)(nil)).Elem(), EnvFromSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarInput)(nil)).Elem(), EnvVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarArrayInput)(nil)).Elem(), EnvVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarSourceInput)(nil)).Elem(), EnvVarSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarSourcePtrInput)(nil)).Elem(), EnvVarSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecActionInput)(nil)).Elem(), ExecActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecActionPtrInput)(nil)).Elem(), ExecActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCActionInput)(nil)).Elem(), GRPCActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCActionPtrInput)(nil)).Elem(), GRPCActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPGetActionInput)(nil)).Elem(), HTTPGetActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPGetActionPtrInput)(nil)).Elem(), HTTPGetActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPHeaderInput)(nil)).Elem(), HTTPHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPHeaderArrayInput)(nil)).Elem(), HTTPHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyToPathInput)(nil)).Elem(), KeyToPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyToPathArrayInput)(nil)).Elem(), KeyToPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferenceInput)(nil)).Elem(), LocalObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferencePtrInput)(nil)).Elem(), LocalObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferenceArrayInput)(nil)).Elem(), LocalObjectReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectMetaInput)(nil)).Elem(), ObjectMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectMetaPtrInput)(nil)).Elem(), ObjectMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerReferenceInput)(nil)).Elem(), OwnerReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerReferenceArrayInput)(nil)).Elem(), OwnerReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbeInput)(nil)).Elem(), ProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbePtrInput)(nil)).Elem(), ProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequirementsInput)(nil)).Elem(), ResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequirementsPtrInput)(nil)).Elem(), ResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RevisionSpecInput)(nil)).Elem(), RevisionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RevisionSpecPtrInput)(nil)).Elem(), RevisionSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RevisionTemplateInput)(nil)).Elem(), RevisionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RevisionTemplatePtrInput)(nil)).Elem(), RevisionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvSourceInput)(nil)).Elem(), SecretEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvSourcePtrInput)(nil)).Elem(), SecretEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretKeySelectorInput)(nil)).Elem(), SecretKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretKeySelectorPtrInput)(nil)).Elem(), SecretKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeSourceInput)(nil)).Elem(), SecretVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeSourcePtrInput)(nil)).Elem(), SecretVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextInput)(nil)).Elem(), SecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextPtrInput)(nil)).Elem(), SecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecInput)(nil)).Elem(), ServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceSpecPtrInput)(nil)).Elem(), ServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPSocketActionInput)(nil)).Elem(), TCPSocketActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPSocketActionPtrInput)(nil)).Elem(), TCPSocketActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficTargetInput)(nil)).Elem(), TrafficTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficTargetArrayInput)(nil)).Elem(), TrafficTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), VolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountInput)(nil)).Elem(), VolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountArrayInput)(nil)).Elem(), VolumeMountArray{})
	pulumi.RegisterOutputType(AddressableResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigMapEnvSourceOutput{})
	pulumi.RegisterOutputType(ConfigMapEnvSourcePtrOutput{})
	pulumi.RegisterOutputType(ConfigMapEnvSourceResponseOutput{})
	pulumi.RegisterOutputType(ConfigMapKeySelectorOutput{})
	pulumi.RegisterOutputType(ConfigMapKeySelectorPtrOutput{})
	pulumi.RegisterOutputType(ConfigMapKeySelectorResponseOutput{})
	pulumi.RegisterOutputType(ConfigMapVolumeSourceOutput{})
	pulumi.RegisterOutputType(ConfigMapVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(ConfigMapVolumeSourceResponseOutput{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortOutput{})
	pulumi.RegisterOutputType(ContainerPortArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortResponseOutput{})
	pulumi.RegisterOutputType(ContainerPortResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerResponseOutput{})
	pulumi.RegisterOutputType(ContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(DomainMappingSpecOutput{})
	pulumi.RegisterOutputType(DomainMappingSpecPtrOutput{})
	pulumi.RegisterOutputType(DomainMappingSpecResponseOutput{})
	pulumi.RegisterOutputType(DomainMappingStatusResponseOutput{})
	pulumi.RegisterOutputType(EmptyDirVolumeSourceOutput{})
	pulumi.RegisterOutputType(EmptyDirVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(EmptyDirVolumeSourceResponseOutput{})
	pulumi.RegisterOutputType(EnvFromSourceOutput{})
	pulumi.RegisterOutputType(EnvFromSourceArrayOutput{})
	pulumi.RegisterOutputType(EnvFromSourceResponseOutput{})
	pulumi.RegisterOutputType(EnvFromSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvVarOutput{})
	pulumi.RegisterOutputType(EnvVarArrayOutput{})
	pulumi.RegisterOutputType(EnvVarResponseOutput{})
	pulumi.RegisterOutputType(EnvVarResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvVarSourceOutput{})
	pulumi.RegisterOutputType(EnvVarSourcePtrOutput{})
	pulumi.RegisterOutputType(EnvVarSourceResponseOutput{})
	pulumi.RegisterOutputType(ExecActionOutput{})
	pulumi.RegisterOutputType(ExecActionPtrOutput{})
	pulumi.RegisterOutputType(ExecActionResponseOutput{})
	pulumi.RegisterOutputType(ExecutionReferenceResponseOutput{})
	pulumi.RegisterOutputType(ExecutionSpecResponseOutput{})
	pulumi.RegisterOutputType(ExecutionTemplateSpecResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GRPCActionOutput{})
	pulumi.RegisterOutputType(GRPCActionPtrOutput{})
	pulumi.RegisterOutputType(GRPCActionResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV1ConditionResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudRunV1ConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(HTTPGetActionOutput{})
	pulumi.RegisterOutputType(HTTPGetActionPtrOutput{})
	pulumi.RegisterOutputType(HTTPGetActionResponseOutput{})
	pulumi.RegisterOutputType(HTTPHeaderOutput{})
	pulumi.RegisterOutputType(HTTPHeaderArrayOutput{})
	pulumi.RegisterOutputType(HTTPHeaderResponseOutput{})
	pulumi.RegisterOutputType(HTTPHeaderResponseArrayOutput{})
	pulumi.RegisterOutputType(JobSpecResponseOutput{})
	pulumi.RegisterOutputType(JobStatusResponseOutput{})
	pulumi.RegisterOutputType(KeyToPathOutput{})
	pulumi.RegisterOutputType(KeyToPathArrayOutput{})
	pulumi.RegisterOutputType(KeyToPathResponseOutput{})
	pulumi.RegisterOutputType(KeyToPathResponseArrayOutput{})
	pulumi.RegisterOutputType(LocalObjectReferenceOutput{})
	pulumi.RegisterOutputType(LocalObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(LocalObjectReferenceArrayOutput{})
	pulumi.RegisterOutputType(LocalObjectReferenceResponseOutput{})
	pulumi.RegisterOutputType(LocalObjectReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ObjectMetaOutput{})
	pulumi.RegisterOutputType(ObjectMetaPtrOutput{})
	pulumi.RegisterOutputType(ObjectMetaResponseOutput{})
	pulumi.RegisterOutputType(OwnerReferenceOutput{})
	pulumi.RegisterOutputType(OwnerReferenceArrayOutput{})
	pulumi.RegisterOutputType(OwnerReferenceResponseOutput{})
	pulumi.RegisterOutputType(OwnerReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ProbeOutput{})
	pulumi.RegisterOutputType(ProbePtrOutput{})
	pulumi.RegisterOutputType(ProbeResponseOutput{})
	pulumi.RegisterOutputType(ResourceRecordResponseOutput{})
	pulumi.RegisterOutputType(ResourceRecordResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(RevisionSpecOutput{})
	pulumi.RegisterOutputType(RevisionSpecPtrOutput{})
	pulumi.RegisterOutputType(RevisionSpecResponseOutput{})
	pulumi.RegisterOutputType(RevisionTemplateOutput{})
	pulumi.RegisterOutputType(RevisionTemplatePtrOutput{})
	pulumi.RegisterOutputType(RevisionTemplateResponseOutput{})
	pulumi.RegisterOutputType(SecretEnvSourceOutput{})
	pulumi.RegisterOutputType(SecretEnvSourcePtrOutput{})
	pulumi.RegisterOutputType(SecretEnvSourceResponseOutput{})
	pulumi.RegisterOutputType(SecretKeySelectorOutput{})
	pulumi.RegisterOutputType(SecretKeySelectorPtrOutput{})
	pulumi.RegisterOutputType(SecretKeySelectorResponseOutput{})
	pulumi.RegisterOutputType(SecretVolumeSourceOutput{})
	pulumi.RegisterOutputType(SecretVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(SecretVolumeSourceResponseOutput{})
	pulumi.RegisterOutputType(SecurityContextOutput{})
	pulumi.RegisterOutputType(SecurityContextPtrOutput{})
	pulumi.RegisterOutputType(SecurityContextResponseOutput{})
	pulumi.RegisterOutputType(ServiceSpecOutput{})
	pulumi.RegisterOutputType(ServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceSpecResponseOutput{})
	pulumi.RegisterOutputType(ServiceStatusResponseOutput{})
	pulumi.RegisterOutputType(TCPSocketActionOutput{})
	pulumi.RegisterOutputType(TCPSocketActionPtrOutput{})
	pulumi.RegisterOutputType(TCPSocketActionResponseOutput{})
	pulumi.RegisterOutputType(TaskSpecResponseOutput{})
	pulumi.RegisterOutputType(TaskTemplateSpecResponseOutput{})
	pulumi.RegisterOutputType(TrafficTargetOutput{})
	pulumi.RegisterOutputType(TrafficTargetArrayOutput{})
	pulumi.RegisterOutputType(TrafficTargetResponseOutput{})
	pulumi.RegisterOutputType(TrafficTargetResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountOutput{})
	pulumi.RegisterOutputType(VolumeMountArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeResponseOutput{})
	pulumi.RegisterOutputType(VolumeResponseArrayOutput{})
}
