// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Not supported by Cloud Run ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSource struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name *string `pulumi:"name"`
	// (Optional) Specify whether the ConfigMap must be defined
	Optional *bool `pulumi:"optional"`
}

// ConfigMapEnvSourceInput is an input type that accepts ConfigMapEnvSourceArgs and ConfigMapEnvSourceOutput values.
// You can construct a concrete instance of `ConfigMapEnvSourceInput` via:
//
//          ConfigMapEnvSourceArgs{...}
type ConfigMapEnvSourceInput interface {
	pulumi.Input

	ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput
	ToConfigMapEnvSourceOutputWithContext(context.Context) ConfigMapEnvSourceOutput
}

// Not supported by Cloud Run ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceArgs struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferencePtrInput `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) Specify whether the ConfigMap must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapEnvSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSource)(nil)).Elem()
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput {
	return i.ToConfigMapEnvSourceOutputWithContext(context.Background())
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourceOutputWithContext(ctx context.Context) ConfigMapEnvSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourceOutput)
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return i.ToConfigMapEnvSourcePtrOutputWithContext(context.Background())
}

func (i ConfigMapEnvSourceArgs) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourceOutput).ToConfigMapEnvSourcePtrOutputWithContext(ctx)
}

// ConfigMapEnvSourcePtrInput is an input type that accepts ConfigMapEnvSourceArgs, ConfigMapEnvSourcePtr and ConfigMapEnvSourcePtrOutput values.
// You can construct a concrete instance of `ConfigMapEnvSourcePtrInput` via:
//
//          ConfigMapEnvSourceArgs{...}
//
//  or:
//
//          nil
type ConfigMapEnvSourcePtrInput interface {
	pulumi.Input

	ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput
	ToConfigMapEnvSourcePtrOutputWithContext(context.Context) ConfigMapEnvSourcePtrOutput
}

type configMapEnvSourcePtrType ConfigMapEnvSourceArgs

func ConfigMapEnvSourcePtr(v *ConfigMapEnvSourceArgs) ConfigMapEnvSourcePtrInput {
	return (*configMapEnvSourcePtrType)(v)
}

func (*configMapEnvSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapEnvSource)(nil)).Elem()
}

func (i *configMapEnvSourcePtrType) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return i.ToConfigMapEnvSourcePtrOutputWithContext(context.Background())
}

func (i *configMapEnvSourcePtrType) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourcePtrOutput)
}

// Not supported by Cloud Run ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceOutput struct{ *pulumi.OutputState }

func (ConfigMapEnvSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSource)(nil)).Elem()
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourceOutput() ConfigMapEnvSourceOutput {
	return o
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourceOutputWithContext(ctx context.Context) ConfigMapEnvSourceOutput {
	return o
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return o.ToConfigMapEnvSourcePtrOutputWithContext(context.Background())
}

func (o ConfigMapEnvSourceOutput) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapEnvSource) *ConfigMapEnvSource {
		return &v
	}).(ConfigMapEnvSourcePtrOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o ConfigMapEnvSourceOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v ConfigMapEnvSource) *LocalObjectReference { return v.LocalObjectReference }).(LocalObjectReferencePtrOutput)
}

// The ConfigMap to select from.
func (o ConfigMapEnvSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapEnvSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the ConfigMap must be defined
func (o ConfigMapEnvSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapEnvSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapEnvSourcePtrOutput struct{ *pulumi.OutputState }

func (ConfigMapEnvSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapEnvSource)(nil)).Elem()
}

func (o ConfigMapEnvSourcePtrOutput) ToConfigMapEnvSourcePtrOutput() ConfigMapEnvSourcePtrOutput {
	return o
}

func (o ConfigMapEnvSourcePtrOutput) ToConfigMapEnvSourcePtrOutputWithContext(ctx context.Context) ConfigMapEnvSourcePtrOutput {
	return o
}

func (o ConfigMapEnvSourcePtrOutput) Elem() ConfigMapEnvSourceOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) ConfigMapEnvSource {
		if v != nil {
			return *v
		}
		var ret ConfigMapEnvSource
		return ret
	}).(ConfigMapEnvSourceOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o ConfigMapEnvSourcePtrOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.LocalObjectReference
	}).(LocalObjectReferencePtrOutput)
}

// The ConfigMap to select from.
func (o ConfigMapEnvSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the ConfigMap must be defined
func (o ConfigMapEnvSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapEnvSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Not supported by Cloud Run ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceResponse struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponse `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name string `pulumi:"name"`
	// (Optional) Specify whether the ConfigMap must be defined
	Optional bool `pulumi:"optional"`
}

// ConfigMapEnvSourceResponseInput is an input type that accepts ConfigMapEnvSourceResponseArgs and ConfigMapEnvSourceResponseOutput values.
// You can construct a concrete instance of `ConfigMapEnvSourceResponseInput` via:
//
//          ConfigMapEnvSourceResponseArgs{...}
type ConfigMapEnvSourceResponseInput interface {
	pulumi.Input

	ToConfigMapEnvSourceResponseOutput() ConfigMapEnvSourceResponseOutput
	ToConfigMapEnvSourceResponseOutputWithContext(context.Context) ConfigMapEnvSourceResponseOutput
}

// Not supported by Cloud Run ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceResponseArgs struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponseInput `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) Specify whether the ConfigMap must be defined
	Optional pulumi.BoolInput `pulumi:"optional"`
}

func (ConfigMapEnvSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSourceResponse)(nil)).Elem()
}

func (i ConfigMapEnvSourceResponseArgs) ToConfigMapEnvSourceResponseOutput() ConfigMapEnvSourceResponseOutput {
	return i.ToConfigMapEnvSourceResponseOutputWithContext(context.Background())
}

func (i ConfigMapEnvSourceResponseArgs) ToConfigMapEnvSourceResponseOutputWithContext(ctx context.Context) ConfigMapEnvSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapEnvSourceResponseOutput)
}

// Not supported by Cloud Run ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
type ConfigMapEnvSourceResponseOutput struct{ *pulumi.OutputState }

func (ConfigMapEnvSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapEnvSourceResponse)(nil)).Elem()
}

func (o ConfigMapEnvSourceResponseOutput) ToConfigMapEnvSourceResponseOutput() ConfigMapEnvSourceResponseOutput {
	return o
}

func (o ConfigMapEnvSourceResponseOutput) ToConfigMapEnvSourceResponseOutputWithContext(ctx context.Context) ConfigMapEnvSourceResponseOutput {
	return o
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o ConfigMapEnvSourceResponseOutput) LocalObjectReference() LocalObjectReferenceResponseOutput {
	return o.ApplyT(func(v ConfigMapEnvSourceResponse) LocalObjectReferenceResponse { return v.LocalObjectReference }).(LocalObjectReferenceResponseOutput)
}

// The ConfigMap to select from.
func (o ConfigMapEnvSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapEnvSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) Specify whether the ConfigMap must be defined
func (o ConfigMapEnvSourceResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigMapEnvSourceResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// Not supported by Cloud Run Selects a key from a ConfigMap.
type ConfigMapKeySelector struct {
	// The key to select.
	Key *string `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name *string `pulumi:"name"`
	// (Optional) Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ConfigMapKeySelectorInput is an input type that accepts ConfigMapKeySelectorArgs and ConfigMapKeySelectorOutput values.
// You can construct a concrete instance of `ConfigMapKeySelectorInput` via:
//
//          ConfigMapKeySelectorArgs{...}
type ConfigMapKeySelectorInput interface {
	pulumi.Input

	ToConfigMapKeySelectorOutput() ConfigMapKeySelectorOutput
	ToConfigMapKeySelectorOutputWithContext(context.Context) ConfigMapKeySelectorOutput
}

// Not supported by Cloud Run Selects a key from a ConfigMap.
type ConfigMapKeySelectorArgs struct {
	// The key to select.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferencePtrInput `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapKeySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelector)(nil)).Elem()
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorOutput() ConfigMapKeySelectorOutput {
	return i.ToConfigMapKeySelectorOutputWithContext(context.Background())
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorOutputWithContext(ctx context.Context) ConfigMapKeySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorOutput)
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return i.ToConfigMapKeySelectorPtrOutputWithContext(context.Background())
}

func (i ConfigMapKeySelectorArgs) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorOutput).ToConfigMapKeySelectorPtrOutputWithContext(ctx)
}

// ConfigMapKeySelectorPtrInput is an input type that accepts ConfigMapKeySelectorArgs, ConfigMapKeySelectorPtr and ConfigMapKeySelectorPtrOutput values.
// You can construct a concrete instance of `ConfigMapKeySelectorPtrInput` via:
//
//          ConfigMapKeySelectorArgs{...}
//
//  or:
//
//          nil
type ConfigMapKeySelectorPtrInput interface {
	pulumi.Input

	ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput
	ToConfigMapKeySelectorPtrOutputWithContext(context.Context) ConfigMapKeySelectorPtrOutput
}

type configMapKeySelectorPtrType ConfigMapKeySelectorArgs

func ConfigMapKeySelectorPtr(v *ConfigMapKeySelectorArgs) ConfigMapKeySelectorPtrInput {
	return (*configMapKeySelectorPtrType)(v)
}

func (*configMapKeySelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapKeySelector)(nil)).Elem()
}

func (i *configMapKeySelectorPtrType) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return i.ToConfigMapKeySelectorPtrOutputWithContext(context.Background())
}

func (i *configMapKeySelectorPtrType) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorPtrOutput)
}

// Not supported by Cloud Run Selects a key from a ConfigMap.
type ConfigMapKeySelectorOutput struct{ *pulumi.OutputState }

func (ConfigMapKeySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelector)(nil)).Elem()
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorOutput() ConfigMapKeySelectorOutput {
	return o
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorOutputWithContext(ctx context.Context) ConfigMapKeySelectorOutput {
	return o
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return o.ToConfigMapKeySelectorPtrOutputWithContext(context.Background())
}

func (o ConfigMapKeySelectorOutput) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapKeySelector) *ConfigMapKeySelector {
		return &v
	}).(ConfigMapKeySelectorPtrOutput)
}

// The key to select.
func (o ConfigMapKeySelectorOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o ConfigMapKeySelectorOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) *LocalObjectReference { return v.LocalObjectReference }).(LocalObjectReferencePtrOutput)
}

// The ConfigMap to select from.
func (o ConfigMapKeySelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the ConfigMap or its key must be defined
func (o ConfigMapKeySelectorOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapKeySelector) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapKeySelectorPtrOutput struct{ *pulumi.OutputState }

func (ConfigMapKeySelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapKeySelector)(nil)).Elem()
}

func (o ConfigMapKeySelectorPtrOutput) ToConfigMapKeySelectorPtrOutput() ConfigMapKeySelectorPtrOutput {
	return o
}

func (o ConfigMapKeySelectorPtrOutput) ToConfigMapKeySelectorPtrOutputWithContext(ctx context.Context) ConfigMapKeySelectorPtrOutput {
	return o
}

func (o ConfigMapKeySelectorPtrOutput) Elem() ConfigMapKeySelectorOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) ConfigMapKeySelector {
		if v != nil {
			return *v
		}
		var ret ConfigMapKeySelector
		return ret
	}).(ConfigMapKeySelectorOutput)
}

// The key to select.
func (o ConfigMapKeySelectorPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o ConfigMapKeySelectorPtrOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.LocalObjectReference
	}).(LocalObjectReferencePtrOutput)
}

// The ConfigMap to select from.
func (o ConfigMapKeySelectorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the ConfigMap or its key must be defined
func (o ConfigMapKeySelectorPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapKeySelector) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Not supported by Cloud Run Selects a key from a ConfigMap.
type ConfigMapKeySelectorResponse struct {
	// The key to select.
	Key string `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponse `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name string `pulumi:"name"`
	// (Optional) Specify whether the ConfigMap or its key must be defined
	Optional bool `pulumi:"optional"`
}

// ConfigMapKeySelectorResponseInput is an input type that accepts ConfigMapKeySelectorResponseArgs and ConfigMapKeySelectorResponseOutput values.
// You can construct a concrete instance of `ConfigMapKeySelectorResponseInput` via:
//
//          ConfigMapKeySelectorResponseArgs{...}
type ConfigMapKeySelectorResponseInput interface {
	pulumi.Input

	ToConfigMapKeySelectorResponseOutput() ConfigMapKeySelectorResponseOutput
	ToConfigMapKeySelectorResponseOutputWithContext(context.Context) ConfigMapKeySelectorResponseOutput
}

// Not supported by Cloud Run Selects a key from a ConfigMap.
type ConfigMapKeySelectorResponseArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponseInput `pulumi:"localObjectReference"`
	// The ConfigMap to select from.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolInput `pulumi:"optional"`
}

func (ConfigMapKeySelectorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelectorResponse)(nil)).Elem()
}

func (i ConfigMapKeySelectorResponseArgs) ToConfigMapKeySelectorResponseOutput() ConfigMapKeySelectorResponseOutput {
	return i.ToConfigMapKeySelectorResponseOutputWithContext(context.Background())
}

func (i ConfigMapKeySelectorResponseArgs) ToConfigMapKeySelectorResponseOutputWithContext(ctx context.Context) ConfigMapKeySelectorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapKeySelectorResponseOutput)
}

// Not supported by Cloud Run Selects a key from a ConfigMap.
type ConfigMapKeySelectorResponseOutput struct{ *pulumi.OutputState }

func (ConfigMapKeySelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapKeySelectorResponse)(nil)).Elem()
}

func (o ConfigMapKeySelectorResponseOutput) ToConfigMapKeySelectorResponseOutput() ConfigMapKeySelectorResponseOutput {
	return o
}

func (o ConfigMapKeySelectorResponseOutput) ToConfigMapKeySelectorResponseOutputWithContext(ctx context.Context) ConfigMapKeySelectorResponseOutput {
	return o
}

// The key to select.
func (o ConfigMapKeySelectorResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorResponse) string { return v.Key }).(pulumi.StringOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o ConfigMapKeySelectorResponseOutput) LocalObjectReference() LocalObjectReferenceResponseOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorResponse) LocalObjectReferenceResponse { return v.LocalObjectReference }).(LocalObjectReferenceResponseOutput)
}

// The ConfigMap to select from.
func (o ConfigMapKeySelectorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorResponse) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) Specify whether the ConfigMap or its key must be defined
func (o ConfigMapKeySelectorResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigMapKeySelectorResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// Not supported by Cloud Run Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSource struct {
	// (Optional) Mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items []KeyToPath `pulumi:"items"`
	// Name of the config.
	Name *string `pulumi:"name"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional *bool `pulumi:"optional"`
}

// ConfigMapVolumeSourceInput is an input type that accepts ConfigMapVolumeSourceArgs and ConfigMapVolumeSourceOutput values.
// You can construct a concrete instance of `ConfigMapVolumeSourceInput` via:
//
//          ConfigMapVolumeSourceArgs{...}
type ConfigMapVolumeSourceInput interface {
	pulumi.Input

	ToConfigMapVolumeSourceOutput() ConfigMapVolumeSourceOutput
	ToConfigMapVolumeSourceOutputWithContext(context.Context) ConfigMapVolumeSourceOutput
}

// Not supported by Cloud Run Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSourceArgs struct {
	// (Optional) Mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items KeyToPathArrayInput `pulumi:"items"`
	// Name of the config.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ConfigMapVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSource)(nil)).Elem()
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourceOutput() ConfigMapVolumeSourceOutput {
	return i.ToConfigMapVolumeSourceOutputWithContext(context.Background())
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourceOutputWithContext(ctx context.Context) ConfigMapVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourceOutput)
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return i.ToConfigMapVolumeSourcePtrOutputWithContext(context.Background())
}

func (i ConfigMapVolumeSourceArgs) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourceOutput).ToConfigMapVolumeSourcePtrOutputWithContext(ctx)
}

// ConfigMapVolumeSourcePtrInput is an input type that accepts ConfigMapVolumeSourceArgs, ConfigMapVolumeSourcePtr and ConfigMapVolumeSourcePtrOutput values.
// You can construct a concrete instance of `ConfigMapVolumeSourcePtrInput` via:
//
//          ConfigMapVolumeSourceArgs{...}
//
//  or:
//
//          nil
type ConfigMapVolumeSourcePtrInput interface {
	pulumi.Input

	ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput
	ToConfigMapVolumeSourcePtrOutputWithContext(context.Context) ConfigMapVolumeSourcePtrOutput
}

type configMapVolumeSourcePtrType ConfigMapVolumeSourceArgs

func ConfigMapVolumeSourcePtr(v *ConfigMapVolumeSourceArgs) ConfigMapVolumeSourcePtrInput {
	return (*configMapVolumeSourcePtrType)(v)
}

func (*configMapVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapVolumeSource)(nil)).Elem()
}

func (i *configMapVolumeSourcePtrType) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return i.ToConfigMapVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *configMapVolumeSourcePtrType) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourcePtrOutput)
}

// Not supported by Cloud Run Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSourceOutput struct{ *pulumi.OutputState }

func (ConfigMapVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSource)(nil)).Elem()
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourceOutput() ConfigMapVolumeSourceOutput {
	return o
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourceOutputWithContext(ctx context.Context) ConfigMapVolumeSourceOutput {
	return o
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return o.ToConfigMapVolumeSourcePtrOutputWithContext(context.Background())
}

func (o ConfigMapVolumeSourceOutput) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigMapVolumeSource) *ConfigMapVolumeSource {
		return &v
	}).(ConfigMapVolumeSourcePtrOutput)
}

// (Optional) Mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ConfigMapVolumeSourceOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
func (o ConfigMapVolumeSourceOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) []KeyToPath { return v.Items }).(KeyToPathArrayOutput)
}

// Name of the config.
func (o ConfigMapVolumeSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the Secret or its keys must be defined.
func (o ConfigMapVolumeSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigMapVolumeSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ConfigMapVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (ConfigMapVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigMapVolumeSource)(nil)).Elem()
}

func (o ConfigMapVolumeSourcePtrOutput) ToConfigMapVolumeSourcePtrOutput() ConfigMapVolumeSourcePtrOutput {
	return o
}

func (o ConfigMapVolumeSourcePtrOutput) ToConfigMapVolumeSourcePtrOutputWithContext(ctx context.Context) ConfigMapVolumeSourcePtrOutput {
	return o
}

func (o ConfigMapVolumeSourcePtrOutput) Elem() ConfigMapVolumeSourceOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) ConfigMapVolumeSource {
		if v != nil {
			return *v
		}
		var ret ConfigMapVolumeSource
		return ret
	}).(ConfigMapVolumeSourceOutput)
}

// (Optional) Mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ConfigMapVolumeSourcePtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
func (o ConfigMapVolumeSourcePtrOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) []KeyToPath {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathArrayOutput)
}

// Name of the config.
func (o ConfigMapVolumeSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the Secret or its keys must be defined.
func (o ConfigMapVolumeSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigMapVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Not supported by Cloud Run Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSourceResponse struct {
	// (Optional) Mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode int `pulumi:"defaultMode"`
	// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items []KeyToPathResponse `pulumi:"items"`
	// Name of the config.
	Name string `pulumi:"name"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional bool `pulumi:"optional"`
}

// ConfigMapVolumeSourceResponseInput is an input type that accepts ConfigMapVolumeSourceResponseArgs and ConfigMapVolumeSourceResponseOutput values.
// You can construct a concrete instance of `ConfigMapVolumeSourceResponseInput` via:
//
//          ConfigMapVolumeSourceResponseArgs{...}
type ConfigMapVolumeSourceResponseInput interface {
	pulumi.Input

	ToConfigMapVolumeSourceResponseOutput() ConfigMapVolumeSourceResponseOutput
	ToConfigMapVolumeSourceResponseOutputWithContext(context.Context) ConfigMapVolumeSourceResponseOutput
}

// Not supported by Cloud Run Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSourceResponseArgs struct {
	// (Optional) Mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntInput `pulumi:"defaultMode"`
	// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items KeyToPathResponseArrayInput `pulumi:"items"`
	// Name of the config.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional pulumi.BoolInput `pulumi:"optional"`
}

func (ConfigMapVolumeSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSourceResponse)(nil)).Elem()
}

func (i ConfigMapVolumeSourceResponseArgs) ToConfigMapVolumeSourceResponseOutput() ConfigMapVolumeSourceResponseOutput {
	return i.ToConfigMapVolumeSourceResponseOutputWithContext(context.Background())
}

func (i ConfigMapVolumeSourceResponseArgs) ToConfigMapVolumeSourceResponseOutputWithContext(ctx context.Context) ConfigMapVolumeSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapVolumeSourceResponseOutput)
}

// Not supported by Cloud Run Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths.
type ConfigMapVolumeSourceResponseOutput struct{ *pulumi.OutputState }

func (ConfigMapVolumeSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigMapVolumeSourceResponse)(nil)).Elem()
}

func (o ConfigMapVolumeSourceResponseOutput) ToConfigMapVolumeSourceResponseOutput() ConfigMapVolumeSourceResponseOutput {
	return o
}

func (o ConfigMapVolumeSourceResponseOutput) ToConfigMapVolumeSourceResponseOutputWithContext(ctx context.Context) ConfigMapVolumeSourceResponseOutput {
	return o
}

// (Optional) Mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o ConfigMapVolumeSourceResponseOutput) DefaultMode() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourceResponse) int { return v.DefaultMode }).(pulumi.IntOutput)
}

// (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
func (o ConfigMapVolumeSourceResponseOutput) Items() KeyToPathResponseArrayOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourceResponse) []KeyToPathResponse { return v.Items }).(KeyToPathResponseArrayOutput)
}

// Name of the config.
func (o ConfigMapVolumeSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) Specify whether the Secret or its keys must be defined.
func (o ConfigMapVolumeSourceResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigMapVolumeSourceResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type Container struct {
	// (Optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args    []string `pulumi:"args"`
	Command []string `pulumi:"command"`
	// (Optional) List of environment variables to set in the container.
	Env []EnvVar `pulumi:"env"`
	// (Optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []EnvFromSource `pulumi:"envFrom"`
	// Only supports containers from Google Container Registry or Artifact Registry URL of the Container image. More info: https://kubernetes.io/docs/concepts/containers/images
	Image *string `pulumi:"image"`
	// (Optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// (Optional) Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe *Probe `pulumi:"livenessProbe"`
	// (Optional) Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name *string `pulumi:"name"`
	// (Optional) List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports []ContainerPort `pulumi:"ports"`
	// (Optional) Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe *Probe `pulumi:"readinessProbe"`
	// (Optional) Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *ResourceRequirements `pulumi:"resources"`
	// (Optional) Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext *SecurityContext `pulumi:"securityContext"`
	// (Optional) Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe *Probe `pulumi:"startupProbe"`
	// (Optional) Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
	TerminationMessagePath *string `pulumi:"terminationMessagePath"`
	// (Optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy *string `pulumi:"terminationMessagePolicy"`
	// (Optional) Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`
	// (Optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir *string `pulumi:"workingDir"`
}

// ContainerInput is an input type that accepts ContainerArgs and ContainerOutput values.
// You can construct a concrete instance of `ContainerInput` via:
//
//          ContainerArgs{...}
type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(context.Context) ContainerOutput
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type ContainerArgs struct {
	// (Optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args    pulumi.StringArrayInput `pulumi:"args"`
	Command pulumi.StringArrayInput `pulumi:"command"`
	// (Optional) List of environment variables to set in the container.
	Env EnvVarArrayInput `pulumi:"env"`
	// (Optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom EnvFromSourceArrayInput `pulumi:"envFrom"`
	// Only supports containers from Google Container Registry or Artifact Registry URL of the Container image. More info: https://kubernetes.io/docs/concepts/containers/images
	Image pulumi.StringPtrInput `pulumi:"image"`
	// (Optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// (Optional) Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe ProbePtrInput `pulumi:"livenessProbe"`
	// (Optional) Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports ContainerPortArrayInput `pulumi:"ports"`
	// (Optional) Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe ProbePtrInput `pulumi:"readinessProbe"`
	// (Optional) Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources ResourceRequirementsPtrInput `pulumi:"resources"`
	// (Optional) Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext SecurityContextPtrInput `pulumi:"securityContext"`
	// (Optional) Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe ProbePtrInput `pulumi:"startupProbe"`
	// (Optional) Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
	TerminationMessagePath pulumi.StringPtrInput `pulumi:"terminationMessagePath"`
	// (Optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy pulumi.StringPtrInput `pulumi:"terminationMessagePolicy"`
	// (Optional) Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`
	// (Optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (i ContainerArgs) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i ContainerArgs) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//          ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

// (Optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o ContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// (Optional) List of environment variables to set in the container.
func (o ContainerOutput) Env() EnvVarArrayOutput {
	return o.ApplyT(func(v Container) []EnvVar { return v.Env }).(EnvVarArrayOutput)
}

// (Optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
func (o ContainerOutput) EnvFrom() EnvFromSourceArrayOutput {
	return o.ApplyT(func(v Container) []EnvFromSource { return v.EnvFrom }).(EnvFromSourceArrayOutput)
}

// Only supports containers from Google Container Registry or Artifact Registry URL of the Container image. More info: https://kubernetes.io/docs/concepts/containers/images
func (o ContainerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// (Optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
func (o ContainerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// (Optional) Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerOutput) LivenessProbe() ProbePtrOutput {
	return o.ApplyT(func(v Container) *Probe { return v.LivenessProbe }).(ProbePtrOutput)
}

// (Optional) Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
func (o ContainerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Optional) List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
func (o ContainerOutput) Ports() ContainerPortArrayOutput {
	return o.ApplyT(func(v Container) []ContainerPort { return v.Ports }).(ContainerPortArrayOutput)
}

// (Optional) Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerOutput) ReadinessProbe() ProbePtrOutput {
	return o.ApplyT(func(v Container) *Probe { return v.ReadinessProbe }).(ProbePtrOutput)
}

// (Optional) Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o ContainerOutput) Resources() ResourceRequirementsPtrOutput {
	return o.ApplyT(func(v Container) *ResourceRequirements { return v.Resources }).(ResourceRequirementsPtrOutput)
}

// (Optional) Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o ContainerOutput) SecurityContext() SecurityContextPtrOutput {
	return o.ApplyT(func(v Container) *SecurityContext { return v.SecurityContext }).(SecurityContextPtrOutput)
}

// (Optional) Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerOutput) StartupProbe() ProbePtrOutput {
	return o.ApplyT(func(v Container) *Probe { return v.StartupProbe }).(ProbePtrOutput)
}

// (Optional) Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
func (o ContainerOutput) TerminationMessagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.TerminationMessagePath }).(pulumi.StringPtrOutput)
}

// (Optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (o ContainerOutput) TerminationMessagePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.TerminationMessagePolicy }).(pulumi.StringPtrOutput)
}

// (Optional) Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
func (o ContainerOutput) VolumeMounts() VolumeMountArrayOutput {
	return o.ApplyT(func(v Container) []VolumeMount { return v.VolumeMounts }).(VolumeMountArrayOutput)
}

// (Optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
func (o ContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (o ContainerArrayOutput) ToContainerArrayOutput() ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Container {
		return vs[0].([]Container)[vs[1].(int)]
	}).(ContainerOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPort struct {
	// (Optional) Port number the container listens on. This must be a valid port number, 0 < x < 65536.
	ContainerPort *int `pulumi:"containerPort"`
	// (Optional) If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name *string `pulumi:"name"`
	// (Optional) Protocol for port. Must be "TCP". Defaults to "TCP".
	Protocol *string `pulumi:"protocol"`
}

// ContainerPortInput is an input type that accepts ContainerPortArgs and ContainerPortOutput values.
// You can construct a concrete instance of `ContainerPortInput` via:
//
//          ContainerPortArgs{...}
type ContainerPortInput interface {
	pulumi.Input

	ToContainerPortOutput() ContainerPortOutput
	ToContainerPortOutputWithContext(context.Context) ContainerPortOutput
}

// ContainerPort represents a network port in a single container.
type ContainerPortArgs struct {
	// (Optional) Port number the container listens on. This must be a valid port number, 0 < x < 65536.
	ContainerPort pulumi.IntPtrInput `pulumi:"containerPort"`
	// (Optional) If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) Protocol for port. Must be "TCP". Defaults to "TCP".
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (i ContainerPortArgs) ToContainerPortOutput() ContainerPortOutput {
	return i.ToContainerPortOutputWithContext(context.Background())
}

func (i ContainerPortArgs) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortOutput)
}

// ContainerPortArrayInput is an input type that accepts ContainerPortArray and ContainerPortArrayOutput values.
// You can construct a concrete instance of `ContainerPortArrayInput` via:
//
//          ContainerPortArray{ ContainerPortArgs{...} }
type ContainerPortArrayInput interface {
	pulumi.Input

	ToContainerPortArrayOutput() ContainerPortArrayOutput
	ToContainerPortArrayOutputWithContext(context.Context) ContainerPortArrayOutput
}

type ContainerPortArray []ContainerPortInput

func (ContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (i ContainerPortArray) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return i.ToContainerPortArrayOutputWithContext(context.Background())
}

func (i ContainerPortArray) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortArrayOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPortOutput struct{ *pulumi.OutputState }

func (ContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (o ContainerPortOutput) ToContainerPortOutput() ContainerPortOutput {
	return o
}

func (o ContainerPortOutput) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return o
}

// (Optional) Port number the container listens on. This must be a valid port number, 0 < x < 65536.
func (o ContainerPortOutput) ContainerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerPort) *int { return v.ContainerPort }).(pulumi.IntPtrOutput)
}

// (Optional) If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
func (o ContainerPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Optional) Protocol for port. Must be "TCP". Defaults to "TCP".
func (o ContainerPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerPortArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) Index(i pulumi.IntInput) ContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPort {
		return vs[0].([]ContainerPort)[vs[1].(int)]
	}).(ContainerPortOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPortResponse struct {
	// (Optional) Port number the container listens on. This must be a valid port number, 0 < x < 65536.
	ContainerPort int `pulumi:"containerPort"`
	// (Optional) If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name string `pulumi:"name"`
	// (Optional) Protocol for port. Must be "TCP". Defaults to "TCP".
	Protocol string `pulumi:"protocol"`
}

// ContainerPortResponseInput is an input type that accepts ContainerPortResponseArgs and ContainerPortResponseOutput values.
// You can construct a concrete instance of `ContainerPortResponseInput` via:
//
//          ContainerPortResponseArgs{...}
type ContainerPortResponseInput interface {
	pulumi.Input

	ToContainerPortResponseOutput() ContainerPortResponseOutput
	ToContainerPortResponseOutputWithContext(context.Context) ContainerPortResponseOutput
}

// ContainerPort represents a network port in a single container.
type ContainerPortResponseArgs struct {
	// (Optional) Port number the container listens on. This must be a valid port number, 0 < x < 65536.
	ContainerPort pulumi.IntInput `pulumi:"containerPort"`
	// (Optional) If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) Protocol for port. Must be "TCP". Defaults to "TCP".
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (ContainerPortResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortResponse)(nil)).Elem()
}

func (i ContainerPortResponseArgs) ToContainerPortResponseOutput() ContainerPortResponseOutput {
	return i.ToContainerPortResponseOutputWithContext(context.Background())
}

func (i ContainerPortResponseArgs) ToContainerPortResponseOutputWithContext(ctx context.Context) ContainerPortResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortResponseOutput)
}

// ContainerPortResponseArrayInput is an input type that accepts ContainerPortResponseArray and ContainerPortResponseArrayOutput values.
// You can construct a concrete instance of `ContainerPortResponseArrayInput` via:
//
//          ContainerPortResponseArray{ ContainerPortResponseArgs{...} }
type ContainerPortResponseArrayInput interface {
	pulumi.Input

	ToContainerPortResponseArrayOutput() ContainerPortResponseArrayOutput
	ToContainerPortResponseArrayOutputWithContext(context.Context) ContainerPortResponseArrayOutput
}

type ContainerPortResponseArray []ContainerPortResponseInput

func (ContainerPortResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortResponse)(nil)).Elem()
}

func (i ContainerPortResponseArray) ToContainerPortResponseArrayOutput() ContainerPortResponseArrayOutput {
	return i.ToContainerPortResponseArrayOutputWithContext(context.Background())
}

func (i ContainerPortResponseArray) ToContainerPortResponseArrayOutputWithContext(ctx context.Context) ContainerPortResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortResponseArrayOutput)
}

// ContainerPort represents a network port in a single container.
type ContainerPortResponseOutput struct{ *pulumi.OutputState }

func (ContainerPortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortResponse)(nil)).Elem()
}

func (o ContainerPortResponseOutput) ToContainerPortResponseOutput() ContainerPortResponseOutput {
	return o
}

func (o ContainerPortResponseOutput) ToContainerPortResponseOutputWithContext(ctx context.Context) ContainerPortResponseOutput {
	return o
}

// (Optional) Port number the container listens on. This must be a valid port number, 0 < x < 65536.
func (o ContainerPortResponseOutput) ContainerPort() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPortResponse) int { return v.ContainerPort }).(pulumi.IntOutput)
}

// (Optional) If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".
func (o ContainerPortResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerPortResponse) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) Protocol for port. Must be "TCP". Defaults to "TCP".
func (o ContainerPortResponseOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerPortResponse) string { return v.Protocol }).(pulumi.StringOutput)
}

type ContainerPortResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortResponse)(nil)).Elem()
}

func (o ContainerPortResponseArrayOutput) ToContainerPortResponseArrayOutput() ContainerPortResponseArrayOutput {
	return o
}

func (o ContainerPortResponseArrayOutput) ToContainerPortResponseArrayOutputWithContext(ctx context.Context) ContainerPortResponseArrayOutput {
	return o
}

func (o ContainerPortResponseArrayOutput) Index(i pulumi.IntInput) ContainerPortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPortResponse {
		return vs[0].([]ContainerPortResponse)[vs[1].(int)]
	}).(ContainerPortResponseOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type ContainerResponse struct {
	// (Optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args    []string `pulumi:"args"`
	Command []string `pulumi:"command"`
	// (Optional) List of environment variables to set in the container.
	Env []EnvVarResponse `pulumi:"env"`
	// (Optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom []EnvFromSourceResponse `pulumi:"envFrom"`
	// Only supports containers from Google Container Registry or Artifact Registry URL of the Container image. More info: https://kubernetes.io/docs/concepts/containers/images
	Image string `pulumi:"image"`
	// (Optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy string `pulumi:"imagePullPolicy"`
	// (Optional) Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe ProbeResponse `pulumi:"livenessProbe"`
	// (Optional) Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name string `pulumi:"name"`
	// (Optional) List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports []ContainerPortResponse `pulumi:"ports"`
	// (Optional) Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe ProbeResponse `pulumi:"readinessProbe"`
	// (Optional) Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources ResourceRequirementsResponse `pulumi:"resources"`
	// (Optional) Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext SecurityContextResponse `pulumi:"securityContext"`
	// (Optional) Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe ProbeResponse `pulumi:"startupProbe"`
	// (Optional) Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
	TerminationMessagePath string `pulumi:"terminationMessagePath"`
	// (Optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy string `pulumi:"terminationMessagePolicy"`
	// (Optional) Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
	VolumeMounts []VolumeMountResponse `pulumi:"volumeMounts"`
	// (Optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir string `pulumi:"workingDir"`
}

// ContainerResponseInput is an input type that accepts ContainerResponseArgs and ContainerResponseOutput values.
// You can construct a concrete instance of `ContainerResponseInput` via:
//
//          ContainerResponseArgs{...}
type ContainerResponseInput interface {
	pulumi.Input

	ToContainerResponseOutput() ContainerResponseOutput
	ToContainerResponseOutputWithContext(context.Context) ContainerResponseOutput
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type ContainerResponseArgs struct {
	// (Optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	Args    pulumi.StringArrayInput `pulumi:"args"`
	Command pulumi.StringArrayInput `pulumi:"command"`
	// (Optional) List of environment variables to set in the container.
	Env EnvVarResponseArrayInput `pulumi:"env"`
	// (Optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
	EnvFrom EnvFromSourceResponseArrayInput `pulumi:"envFrom"`
	// Only supports containers from Google Container Registry or Artifact Registry URL of the Container image. More info: https://kubernetes.io/docs/concepts/containers/images
	Image pulumi.StringInput `pulumi:"image"`
	// (Optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
	ImagePullPolicy pulumi.StringInput `pulumi:"imagePullPolicy"`
	// (Optional) Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	LivenessProbe ProbeResponseInput `pulumi:"livenessProbe"`
	// (Optional) Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
	Ports ContainerPortResponseArrayInput `pulumi:"ports"`
	// (Optional) Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	ReadinessProbe ProbeResponseInput `pulumi:"readinessProbe"`
	// (Optional) Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources ResourceRequirementsResponseInput `pulumi:"resources"`
	// (Optional) Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
	SecurityContext SecurityContextResponseInput `pulumi:"securityContext"`
	// (Optional) Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	StartupProbe ProbeResponseInput `pulumi:"startupProbe"`
	// (Optional) Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
	TerminationMessagePath pulumi.StringInput `pulumi:"terminationMessagePath"`
	// (Optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy pulumi.StringInput `pulumi:"terminationMessagePolicy"`
	// (Optional) Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
	VolumeMounts VolumeMountResponseArrayInput `pulumi:"volumeMounts"`
	// (Optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
	WorkingDir pulumi.StringInput `pulumi:"workingDir"`
}

func (ContainerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResponse)(nil)).Elem()
}

func (i ContainerResponseArgs) ToContainerResponseOutput() ContainerResponseOutput {
	return i.ToContainerResponseOutputWithContext(context.Background())
}

func (i ContainerResponseArgs) ToContainerResponseOutputWithContext(ctx context.Context) ContainerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResponseOutput)
}

// ContainerResponseArrayInput is an input type that accepts ContainerResponseArray and ContainerResponseArrayOutput values.
// You can construct a concrete instance of `ContainerResponseArrayInput` via:
//
//          ContainerResponseArray{ ContainerResponseArgs{...} }
type ContainerResponseArrayInput interface {
	pulumi.Input

	ToContainerResponseArrayOutput() ContainerResponseArrayOutput
	ToContainerResponseArrayOutputWithContext(context.Context) ContainerResponseArrayOutput
}

type ContainerResponseArray []ContainerResponseInput

func (ContainerResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerResponse)(nil)).Elem()
}

func (i ContainerResponseArray) ToContainerResponseArrayOutput() ContainerResponseArrayOutput {
	return i.ToContainerResponseArrayOutputWithContext(context.Background())
}

func (i ContainerResponseArray) ToContainerResponseArrayOutputWithContext(ctx context.Context) ContainerResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResponseArrayOutput)
}

// A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
type ContainerResponseOutput struct{ *pulumi.OutputState }

func (ContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseOutput) ToContainerResponseOutput() ContainerResponseOutput {
	return o
}

func (o ContainerResponseOutput) ToContainerResponseOutputWithContext(ctx context.Context) ContainerResponseOutput {
	return o
}

// (Optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
func (o ContainerResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o ContainerResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// (Optional) List of environment variables to set in the container.
func (o ContainerResponseOutput) Env() EnvVarResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []EnvVarResponse { return v.Env }).(EnvVarResponseArrayOutput)
}

// (Optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
func (o ContainerResponseOutput) EnvFrom() EnvFromSourceResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []EnvFromSourceResponse { return v.EnvFrom }).(EnvFromSourceResponseArrayOutput)
}

// Only supports containers from Google Container Registry or Artifact Registry URL of the Container image. More info: https://kubernetes.io/docs/concepts/containers/images
func (o ContainerResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Image }).(pulumi.StringOutput)
}

// (Optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
func (o ContainerResponseOutput) ImagePullPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.ImagePullPolicy }).(pulumi.StringOutput)
}

// (Optional) Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerResponseOutput) LivenessProbe() ProbeResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ProbeResponse { return v.LivenessProbe }).(ProbeResponseOutput)
}

// (Optional) Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
func (o ContainerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
func (o ContainerResponseOutput) Ports() ContainerPortResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []ContainerPortResponse { return v.Ports }).(ContainerPortResponseArrayOutput)
}

// (Optional) Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerResponseOutput) ReadinessProbe() ProbeResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ProbeResponse { return v.ReadinessProbe }).(ProbeResponseOutput)
}

// (Optional) Compute Resources required by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o ContainerResponseOutput) Resources() ResourceRequirementsResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ResourceRequirementsResponse { return v.Resources }).(ResourceRequirementsResponseOutput)
}

// (Optional) Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (o ContainerResponseOutput) SecurityContext() SecurityContextResponseOutput {
	return o.ApplyT(func(v ContainerResponse) SecurityContextResponse { return v.SecurityContext }).(SecurityContextResponseOutput)
}

// (Optional) Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ContainerResponseOutput) StartupProbe() ProbeResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ProbeResponse { return v.StartupProbe }).(ProbeResponseOutput)
}

// (Optional) Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
func (o ContainerResponseOutput) TerminationMessagePath() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.TerminationMessagePath }).(pulumi.StringOutput)
}

// (Optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
func (o ContainerResponseOutput) TerminationMessagePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.TerminationMessagePolicy }).(pulumi.StringOutput)
}

// (Optional) Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
func (o ContainerResponseOutput) VolumeMounts() VolumeMountResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []VolumeMountResponse { return v.VolumeMounts }).(VolumeMountResponseArrayOutput)
}

// (Optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
func (o ContainerResponseOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type ContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutput() ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutputWithContext(ctx context.Context) ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) Index(i pulumi.IntInput) ContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerResponse {
		return vs[0].([]ContainerResponse)[vs[1].(int)]
	}).(ContainerResponseOutput)
}

// Not supported by Cloud Run EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSource struct {
	// (Optional) The ConfigMap to select from
	ConfigMapRef *ConfigMapEnvSource `pulumi:"configMapRef"`
	// (Optional) An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix *string `pulumi:"prefix"`
	// (Optional) The Secret to select from
	SecretRef *SecretEnvSource `pulumi:"secretRef"`
}

// EnvFromSourceInput is an input type that accepts EnvFromSourceArgs and EnvFromSourceOutput values.
// You can construct a concrete instance of `EnvFromSourceInput` via:
//
//          EnvFromSourceArgs{...}
type EnvFromSourceInput interface {
	pulumi.Input

	ToEnvFromSourceOutput() EnvFromSourceOutput
	ToEnvFromSourceOutputWithContext(context.Context) EnvFromSourceOutput
}

// Not supported by Cloud Run EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceArgs struct {
	// (Optional) The ConfigMap to select from
	ConfigMapRef ConfigMapEnvSourcePtrInput `pulumi:"configMapRef"`
	// (Optional) An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// (Optional) The Secret to select from
	SecretRef SecretEnvSourcePtrInput `pulumi:"secretRef"`
}

func (EnvFromSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSource)(nil)).Elem()
}

func (i EnvFromSourceArgs) ToEnvFromSourceOutput() EnvFromSourceOutput {
	return i.ToEnvFromSourceOutputWithContext(context.Background())
}

func (i EnvFromSourceArgs) ToEnvFromSourceOutputWithContext(ctx context.Context) EnvFromSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFromSourceOutput)
}

// EnvFromSourceArrayInput is an input type that accepts EnvFromSourceArray and EnvFromSourceArrayOutput values.
// You can construct a concrete instance of `EnvFromSourceArrayInput` via:
//
//          EnvFromSourceArray{ EnvFromSourceArgs{...} }
type EnvFromSourceArrayInput interface {
	pulumi.Input

	ToEnvFromSourceArrayOutput() EnvFromSourceArrayOutput
	ToEnvFromSourceArrayOutputWithContext(context.Context) EnvFromSourceArrayOutput
}

type EnvFromSourceArray []EnvFromSourceInput

func (EnvFromSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSource)(nil)).Elem()
}

func (i EnvFromSourceArray) ToEnvFromSourceArrayOutput() EnvFromSourceArrayOutput {
	return i.ToEnvFromSourceArrayOutputWithContext(context.Background())
}

func (i EnvFromSourceArray) ToEnvFromSourceArrayOutputWithContext(ctx context.Context) EnvFromSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFromSourceArrayOutput)
}

// Not supported by Cloud Run EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceOutput struct{ *pulumi.OutputState }

func (EnvFromSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSource)(nil)).Elem()
}

func (o EnvFromSourceOutput) ToEnvFromSourceOutput() EnvFromSourceOutput {
	return o
}

func (o EnvFromSourceOutput) ToEnvFromSourceOutputWithContext(ctx context.Context) EnvFromSourceOutput {
	return o
}

// (Optional) The ConfigMap to select from
func (o EnvFromSourceOutput) ConfigMapRef() ConfigMapEnvSourcePtrOutput {
	return o.ApplyT(func(v EnvFromSource) *ConfigMapEnvSource { return v.ConfigMapRef }).(ConfigMapEnvSourcePtrOutput)
}

// (Optional) An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
func (o EnvFromSourceOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvFromSource) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// (Optional) The Secret to select from
func (o EnvFromSourceOutput) SecretRef() SecretEnvSourcePtrOutput {
	return o.ApplyT(func(v EnvFromSource) *SecretEnvSource { return v.SecretRef }).(SecretEnvSourcePtrOutput)
}

type EnvFromSourceArrayOutput struct{ *pulumi.OutputState }

func (EnvFromSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSource)(nil)).Elem()
}

func (o EnvFromSourceArrayOutput) ToEnvFromSourceArrayOutput() EnvFromSourceArrayOutput {
	return o
}

func (o EnvFromSourceArrayOutput) ToEnvFromSourceArrayOutputWithContext(ctx context.Context) EnvFromSourceArrayOutput {
	return o
}

func (o EnvFromSourceArrayOutput) Index(i pulumi.IntInput) EnvFromSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvFromSource {
		return vs[0].([]EnvFromSource)[vs[1].(int)]
	}).(EnvFromSourceOutput)
}

// Not supported by Cloud Run EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceResponse struct {
	// (Optional) The ConfigMap to select from
	ConfigMapRef ConfigMapEnvSourceResponse `pulumi:"configMapRef"`
	// (Optional) An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix string `pulumi:"prefix"`
	// (Optional) The Secret to select from
	SecretRef SecretEnvSourceResponse `pulumi:"secretRef"`
}

// EnvFromSourceResponseInput is an input type that accepts EnvFromSourceResponseArgs and EnvFromSourceResponseOutput values.
// You can construct a concrete instance of `EnvFromSourceResponseInput` via:
//
//          EnvFromSourceResponseArgs{...}
type EnvFromSourceResponseInput interface {
	pulumi.Input

	ToEnvFromSourceResponseOutput() EnvFromSourceResponseOutput
	ToEnvFromSourceResponseOutputWithContext(context.Context) EnvFromSourceResponseOutput
}

// Not supported by Cloud Run EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceResponseArgs struct {
	// (Optional) The ConfigMap to select from
	ConfigMapRef ConfigMapEnvSourceResponseInput `pulumi:"configMapRef"`
	// (Optional) An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix pulumi.StringInput `pulumi:"prefix"`
	// (Optional) The Secret to select from
	SecretRef SecretEnvSourceResponseInput `pulumi:"secretRef"`
}

func (EnvFromSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSourceResponse)(nil)).Elem()
}

func (i EnvFromSourceResponseArgs) ToEnvFromSourceResponseOutput() EnvFromSourceResponseOutput {
	return i.ToEnvFromSourceResponseOutputWithContext(context.Background())
}

func (i EnvFromSourceResponseArgs) ToEnvFromSourceResponseOutputWithContext(ctx context.Context) EnvFromSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFromSourceResponseOutput)
}

// EnvFromSourceResponseArrayInput is an input type that accepts EnvFromSourceResponseArray and EnvFromSourceResponseArrayOutput values.
// You can construct a concrete instance of `EnvFromSourceResponseArrayInput` via:
//
//          EnvFromSourceResponseArray{ EnvFromSourceResponseArgs{...} }
type EnvFromSourceResponseArrayInput interface {
	pulumi.Input

	ToEnvFromSourceResponseArrayOutput() EnvFromSourceResponseArrayOutput
	ToEnvFromSourceResponseArrayOutputWithContext(context.Context) EnvFromSourceResponseArrayOutput
}

type EnvFromSourceResponseArray []EnvFromSourceResponseInput

func (EnvFromSourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSourceResponse)(nil)).Elem()
}

func (i EnvFromSourceResponseArray) ToEnvFromSourceResponseArrayOutput() EnvFromSourceResponseArrayOutput {
	return i.ToEnvFromSourceResponseArrayOutputWithContext(context.Background())
}

func (i EnvFromSourceResponseArray) ToEnvFromSourceResponseArrayOutputWithContext(ctx context.Context) EnvFromSourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvFromSourceResponseArrayOutput)
}

// Not supported by Cloud Run EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSourceResponseOutput struct{ *pulumi.OutputState }

func (EnvFromSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvFromSourceResponse)(nil)).Elem()
}

func (o EnvFromSourceResponseOutput) ToEnvFromSourceResponseOutput() EnvFromSourceResponseOutput {
	return o
}

func (o EnvFromSourceResponseOutput) ToEnvFromSourceResponseOutputWithContext(ctx context.Context) EnvFromSourceResponseOutput {
	return o
}

// (Optional) The ConfigMap to select from
func (o EnvFromSourceResponseOutput) ConfigMapRef() ConfigMapEnvSourceResponseOutput {
	return o.ApplyT(func(v EnvFromSourceResponse) ConfigMapEnvSourceResponse { return v.ConfigMapRef }).(ConfigMapEnvSourceResponseOutput)
}

// (Optional) An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
func (o EnvFromSourceResponseOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v EnvFromSourceResponse) string { return v.Prefix }).(pulumi.StringOutput)
}

// (Optional) The Secret to select from
func (o EnvFromSourceResponseOutput) SecretRef() SecretEnvSourceResponseOutput {
	return o.ApplyT(func(v EnvFromSourceResponse) SecretEnvSourceResponse { return v.SecretRef }).(SecretEnvSourceResponseOutput)
}

type EnvFromSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvFromSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvFromSourceResponse)(nil)).Elem()
}

func (o EnvFromSourceResponseArrayOutput) ToEnvFromSourceResponseArrayOutput() EnvFromSourceResponseArrayOutput {
	return o
}

func (o EnvFromSourceResponseArrayOutput) ToEnvFromSourceResponseArrayOutputWithContext(ctx context.Context) EnvFromSourceResponseArrayOutput {
	return o
}

func (o EnvFromSourceResponseArrayOutput) Index(i pulumi.IntInput) EnvFromSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvFromSourceResponse {
		return vs[0].([]EnvFromSourceResponse)[vs[1].(int)]
	}).(EnvFromSourceResponseOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVar struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name *string `pulumi:"name"`
	// (Optional) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// (Optional) Source for the environment variable's value. Only supports secret_key_ref. Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *EnvVarSource `pulumi:"valueFrom"`
}

// EnvVarInput is an input type that accepts EnvVarArgs and EnvVarOutput values.
// You can construct a concrete instance of `EnvVarInput` via:
//
//          EnvVarArgs{...}
type EnvVarInput interface {
	pulumi.Input

	ToEnvVarOutput() EnvVarOutput
	ToEnvVarOutputWithContext(context.Context) EnvVarOutput
}

// EnvVar represents an environment variable present in a Container.
type EnvVarArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// (Optional) Source for the environment variable's value. Only supports secret_key_ref. Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom EnvVarSourcePtrInput `pulumi:"valueFrom"`
}

func (EnvVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVar)(nil)).Elem()
}

func (i EnvVarArgs) ToEnvVarOutput() EnvVarOutput {
	return i.ToEnvVarOutputWithContext(context.Background())
}

func (i EnvVarArgs) ToEnvVarOutputWithContext(ctx context.Context) EnvVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarOutput)
}

// EnvVarArrayInput is an input type that accepts EnvVarArray and EnvVarArrayOutput values.
// You can construct a concrete instance of `EnvVarArrayInput` via:
//
//          EnvVarArray{ EnvVarArgs{...} }
type EnvVarArrayInput interface {
	pulumi.Input

	ToEnvVarArrayOutput() EnvVarArrayOutput
	ToEnvVarArrayOutputWithContext(context.Context) EnvVarArrayOutput
}

type EnvVarArray []EnvVarInput

func (EnvVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVar)(nil)).Elem()
}

func (i EnvVarArray) ToEnvVarArrayOutput() EnvVarArrayOutput {
	return i.ToEnvVarArrayOutputWithContext(context.Background())
}

func (i EnvVarArray) ToEnvVarArrayOutputWithContext(ctx context.Context) EnvVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVarOutput struct{ *pulumi.OutputState }

func (EnvVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVar)(nil)).Elem()
}

func (o EnvVarOutput) ToEnvVarOutput() EnvVarOutput {
	return o
}

func (o EnvVarOutput) ToEnvVarOutputWithContext(ctx context.Context) EnvVarOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o EnvVarOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvVar) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Optional) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o EnvVarOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvVar) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// (Optional) Source for the environment variable's value. Only supports secret_key_ref. Source for the environment variable's value. Cannot be used if value is not empty.
func (o EnvVarOutput) ValueFrom() EnvVarSourcePtrOutput {
	return o.ApplyT(func(v EnvVar) *EnvVarSource { return v.ValueFrom }).(EnvVarSourcePtrOutput)
}

type EnvVarArrayOutput struct{ *pulumi.OutputState }

func (EnvVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVar)(nil)).Elem()
}

func (o EnvVarArrayOutput) ToEnvVarArrayOutput() EnvVarArrayOutput {
	return o
}

func (o EnvVarArrayOutput) ToEnvVarArrayOutputWithContext(ctx context.Context) EnvVarArrayOutput {
	return o
}

func (o EnvVarArrayOutput) Index(i pulumi.IntInput) EnvVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvVar {
		return vs[0].([]EnvVar)[vs[1].(int)]
	}).(EnvVarOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVarResponse struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// (Optional) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value string `pulumi:"value"`
	// (Optional) Source for the environment variable's value. Only supports secret_key_ref. Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom EnvVarSourceResponse `pulumi:"valueFrom"`
}

// EnvVarResponseInput is an input type that accepts EnvVarResponseArgs and EnvVarResponseOutput values.
// You can construct a concrete instance of `EnvVarResponseInput` via:
//
//          EnvVarResponseArgs{...}
type EnvVarResponseInput interface {
	pulumi.Input

	ToEnvVarResponseOutput() EnvVarResponseOutput
	ToEnvVarResponseOutputWithContext(context.Context) EnvVarResponseOutput
}

// EnvVar represents an environment variable present in a Container.
type EnvVarResponseArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringInput `pulumi:"value"`
	// (Optional) Source for the environment variable's value. Only supports secret_key_ref. Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom EnvVarSourceResponseInput `pulumi:"valueFrom"`
}

func (EnvVarResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarResponse)(nil)).Elem()
}

func (i EnvVarResponseArgs) ToEnvVarResponseOutput() EnvVarResponseOutput {
	return i.ToEnvVarResponseOutputWithContext(context.Background())
}

func (i EnvVarResponseArgs) ToEnvVarResponseOutputWithContext(ctx context.Context) EnvVarResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarResponseOutput)
}

// EnvVarResponseArrayInput is an input type that accepts EnvVarResponseArray and EnvVarResponseArrayOutput values.
// You can construct a concrete instance of `EnvVarResponseArrayInput` via:
//
//          EnvVarResponseArray{ EnvVarResponseArgs{...} }
type EnvVarResponseArrayInput interface {
	pulumi.Input

	ToEnvVarResponseArrayOutput() EnvVarResponseArrayOutput
	ToEnvVarResponseArrayOutputWithContext(context.Context) EnvVarResponseArrayOutput
}

type EnvVarResponseArray []EnvVarResponseInput

func (EnvVarResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVarResponse)(nil)).Elem()
}

func (i EnvVarResponseArray) ToEnvVarResponseArrayOutput() EnvVarResponseArrayOutput {
	return i.ToEnvVarResponseArrayOutputWithContext(context.Background())
}

func (i EnvVarResponseArray) ToEnvVarResponseArrayOutputWithContext(ctx context.Context) EnvVarResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarResponseArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type EnvVarResponseOutput struct{ *pulumi.OutputState }

func (EnvVarResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarResponse)(nil)).Elem()
}

func (o EnvVarResponseOutput) ToEnvVarResponseOutput() EnvVarResponseOutput {
	return o
}

func (o EnvVarResponseOutput) ToEnvVarResponseOutputWithContext(ctx context.Context) EnvVarResponseOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o EnvVarResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvVarResponse) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o EnvVarResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EnvVarResponse) string { return v.Value }).(pulumi.StringOutput)
}

// (Optional) Source for the environment variable's value. Only supports secret_key_ref. Source for the environment variable's value. Cannot be used if value is not empty.
func (o EnvVarResponseOutput) ValueFrom() EnvVarSourceResponseOutput {
	return o.ApplyT(func(v EnvVarResponse) EnvVarSourceResponse { return v.ValueFrom }).(EnvVarSourceResponseOutput)
}

type EnvVarResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvVarResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvVarResponse)(nil)).Elem()
}

func (o EnvVarResponseArrayOutput) ToEnvVarResponseArrayOutput() EnvVarResponseArrayOutput {
	return o
}

func (o EnvVarResponseArrayOutput) ToEnvVarResponseArrayOutputWithContext(ctx context.Context) EnvVarResponseArrayOutput {
	return o
}

func (o EnvVarResponseArrayOutput) Index(i pulumi.IntInput) EnvVarResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvVarResponse {
		return vs[0].([]EnvVarResponse)[vs[1].(int)]
	}).(EnvVarResponseOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSource struct {
	// (Optional) Not supported by Cloud Run Selects a key of a ConfigMap.
	ConfigMapKeyRef *ConfigMapKeySelector `pulumi:"configMapKeyRef"`
	// (Optional) Selects a key (version) of a secret in Secret Manager.
	SecretKeyRef *SecretKeySelector `pulumi:"secretKeyRef"`
}

// EnvVarSourceInput is an input type that accepts EnvVarSourceArgs and EnvVarSourceOutput values.
// You can construct a concrete instance of `EnvVarSourceInput` via:
//
//          EnvVarSourceArgs{...}
type EnvVarSourceInput interface {
	pulumi.Input

	ToEnvVarSourceOutput() EnvVarSourceOutput
	ToEnvVarSourceOutputWithContext(context.Context) EnvVarSourceOutput
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceArgs struct {
	// (Optional) Not supported by Cloud Run Selects a key of a ConfigMap.
	ConfigMapKeyRef ConfigMapKeySelectorPtrInput `pulumi:"configMapKeyRef"`
	// (Optional) Selects a key (version) of a secret in Secret Manager.
	SecretKeyRef SecretKeySelectorPtrInput `pulumi:"secretKeyRef"`
}

func (EnvVarSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSource)(nil)).Elem()
}

func (i EnvVarSourceArgs) ToEnvVarSourceOutput() EnvVarSourceOutput {
	return i.ToEnvVarSourceOutputWithContext(context.Background())
}

func (i EnvVarSourceArgs) ToEnvVarSourceOutputWithContext(ctx context.Context) EnvVarSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourceOutput)
}

func (i EnvVarSourceArgs) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return i.ToEnvVarSourcePtrOutputWithContext(context.Background())
}

func (i EnvVarSourceArgs) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourceOutput).ToEnvVarSourcePtrOutputWithContext(ctx)
}

// EnvVarSourcePtrInput is an input type that accepts EnvVarSourceArgs, EnvVarSourcePtr and EnvVarSourcePtrOutput values.
// You can construct a concrete instance of `EnvVarSourcePtrInput` via:
//
//          EnvVarSourceArgs{...}
//
//  or:
//
//          nil
type EnvVarSourcePtrInput interface {
	pulumi.Input

	ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput
	ToEnvVarSourcePtrOutputWithContext(context.Context) EnvVarSourcePtrOutput
}

type envVarSourcePtrType EnvVarSourceArgs

func EnvVarSourcePtr(v *EnvVarSourceArgs) EnvVarSourcePtrInput {
	return (*envVarSourcePtrType)(v)
}

func (*envVarSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarSource)(nil)).Elem()
}

func (i *envVarSourcePtrType) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return i.ToEnvVarSourcePtrOutputWithContext(context.Background())
}

func (i *envVarSourcePtrType) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourcePtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceOutput struct{ *pulumi.OutputState }

func (EnvVarSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSource)(nil)).Elem()
}

func (o EnvVarSourceOutput) ToEnvVarSourceOutput() EnvVarSourceOutput {
	return o
}

func (o EnvVarSourceOutput) ToEnvVarSourceOutputWithContext(ctx context.Context) EnvVarSourceOutput {
	return o
}

func (o EnvVarSourceOutput) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return o.ToEnvVarSourcePtrOutputWithContext(context.Background())
}

func (o EnvVarSourceOutput) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnvVarSource) *EnvVarSource {
		return &v
	}).(EnvVarSourcePtrOutput)
}

// (Optional) Not supported by Cloud Run Selects a key of a ConfigMap.
func (o EnvVarSourceOutput) ConfigMapKeyRef() ConfigMapKeySelectorPtrOutput {
	return o.ApplyT(func(v EnvVarSource) *ConfigMapKeySelector { return v.ConfigMapKeyRef }).(ConfigMapKeySelectorPtrOutput)
}

// (Optional) Selects a key (version) of a secret in Secret Manager.
func (o EnvVarSourceOutput) SecretKeyRef() SecretKeySelectorPtrOutput {
	return o.ApplyT(func(v EnvVarSource) *SecretKeySelector { return v.SecretKeyRef }).(SecretKeySelectorPtrOutput)
}

type EnvVarSourcePtrOutput struct{ *pulumi.OutputState }

func (EnvVarSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarSource)(nil)).Elem()
}

func (o EnvVarSourcePtrOutput) ToEnvVarSourcePtrOutput() EnvVarSourcePtrOutput {
	return o
}

func (o EnvVarSourcePtrOutput) ToEnvVarSourcePtrOutputWithContext(ctx context.Context) EnvVarSourcePtrOutput {
	return o
}

func (o EnvVarSourcePtrOutput) Elem() EnvVarSourceOutput {
	return o.ApplyT(func(v *EnvVarSource) EnvVarSource {
		if v != nil {
			return *v
		}
		var ret EnvVarSource
		return ret
	}).(EnvVarSourceOutput)
}

// (Optional) Not supported by Cloud Run Selects a key of a ConfigMap.
func (o EnvVarSourcePtrOutput) ConfigMapKeyRef() ConfigMapKeySelectorPtrOutput {
	return o.ApplyT(func(v *EnvVarSource) *ConfigMapKeySelector {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(ConfigMapKeySelectorPtrOutput)
}

// (Optional) Selects a key (version) of a secret in Secret Manager.
func (o EnvVarSourcePtrOutput) SecretKeyRef() SecretKeySelectorPtrOutput {
	return o.ApplyT(func(v *EnvVarSource) *SecretKeySelector {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(SecretKeySelectorPtrOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceResponse struct {
	// (Optional) Not supported by Cloud Run Selects a key of a ConfigMap.
	ConfigMapKeyRef ConfigMapKeySelectorResponse `pulumi:"configMapKeyRef"`
	// (Optional) Selects a key (version) of a secret in Secret Manager.
	SecretKeyRef SecretKeySelectorResponse `pulumi:"secretKeyRef"`
}

// EnvVarSourceResponseInput is an input type that accepts EnvVarSourceResponseArgs and EnvVarSourceResponseOutput values.
// You can construct a concrete instance of `EnvVarSourceResponseInput` via:
//
//          EnvVarSourceResponseArgs{...}
type EnvVarSourceResponseInput interface {
	pulumi.Input

	ToEnvVarSourceResponseOutput() EnvVarSourceResponseOutput
	ToEnvVarSourceResponseOutputWithContext(context.Context) EnvVarSourceResponseOutput
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceResponseArgs struct {
	// (Optional) Not supported by Cloud Run Selects a key of a ConfigMap.
	ConfigMapKeyRef ConfigMapKeySelectorResponseInput `pulumi:"configMapKeyRef"`
	// (Optional) Selects a key (version) of a secret in Secret Manager.
	SecretKeyRef SecretKeySelectorResponseInput `pulumi:"secretKeyRef"`
}

func (EnvVarSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSourceResponse)(nil)).Elem()
}

func (i EnvVarSourceResponseArgs) ToEnvVarSourceResponseOutput() EnvVarSourceResponseOutput {
	return i.ToEnvVarSourceResponseOutputWithContext(context.Background())
}

func (i EnvVarSourceResponseArgs) ToEnvVarSourceResponseOutputWithContext(ctx context.Context) EnvVarSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarSourceResponseOutput)
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSourceResponseOutput struct{ *pulumi.OutputState }

func (EnvVarSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarSourceResponse)(nil)).Elem()
}

func (o EnvVarSourceResponseOutput) ToEnvVarSourceResponseOutput() EnvVarSourceResponseOutput {
	return o
}

func (o EnvVarSourceResponseOutput) ToEnvVarSourceResponseOutputWithContext(ctx context.Context) EnvVarSourceResponseOutput {
	return o
}

// (Optional) Not supported by Cloud Run Selects a key of a ConfigMap.
func (o EnvVarSourceResponseOutput) ConfigMapKeyRef() ConfigMapKeySelectorResponseOutput {
	return o.ApplyT(func(v EnvVarSourceResponse) ConfigMapKeySelectorResponse { return v.ConfigMapKeyRef }).(ConfigMapKeySelectorResponseOutput)
}

// (Optional) Selects a key (version) of a secret in Secret Manager.
func (o EnvVarSourceResponseOutput) SecretKeyRef() SecretKeySelectorResponseOutput {
	return o.ApplyT(func(v EnvVarSourceResponse) SecretKeySelectorResponse { return v.SecretKeyRef }).(SecretKeySelectorResponseOutput)
}

// Not supported by Cloud Run ExecAction describes a "run in container" action.
type ExecAction struct {
	// (Optional) Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// ExecActionInput is an input type that accepts ExecActionArgs and ExecActionOutput values.
// You can construct a concrete instance of `ExecActionInput` via:
//
//          ExecActionArgs{...}
type ExecActionInput interface {
	pulumi.Input

	ToExecActionOutput() ExecActionOutput
	ToExecActionOutputWithContext(context.Context) ExecActionOutput
}

// Not supported by Cloud Run ExecAction describes a "run in container" action.
type ExecActionArgs struct {
	// (Optional) Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ExecActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecAction)(nil)).Elem()
}

func (i ExecActionArgs) ToExecActionOutput() ExecActionOutput {
	return i.ToExecActionOutputWithContext(context.Background())
}

func (i ExecActionArgs) ToExecActionOutputWithContext(ctx context.Context) ExecActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionOutput)
}

func (i ExecActionArgs) ToExecActionPtrOutput() ExecActionPtrOutput {
	return i.ToExecActionPtrOutputWithContext(context.Background())
}

func (i ExecActionArgs) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionOutput).ToExecActionPtrOutputWithContext(ctx)
}

// ExecActionPtrInput is an input type that accepts ExecActionArgs, ExecActionPtr and ExecActionPtrOutput values.
// You can construct a concrete instance of `ExecActionPtrInput` via:
//
//          ExecActionArgs{...}
//
//  or:
//
//          nil
type ExecActionPtrInput interface {
	pulumi.Input

	ToExecActionPtrOutput() ExecActionPtrOutput
	ToExecActionPtrOutputWithContext(context.Context) ExecActionPtrOutput
}

type execActionPtrType ExecActionArgs

func ExecActionPtr(v *ExecActionArgs) ExecActionPtrInput {
	return (*execActionPtrType)(v)
}

func (*execActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecAction)(nil)).Elem()
}

func (i *execActionPtrType) ToExecActionPtrOutput() ExecActionPtrOutput {
	return i.ToExecActionPtrOutputWithContext(context.Background())
}

func (i *execActionPtrType) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionPtrOutput)
}

// Not supported by Cloud Run ExecAction describes a "run in container" action.
type ExecActionOutput struct{ *pulumi.OutputState }

func (ExecActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecAction)(nil)).Elem()
}

func (o ExecActionOutput) ToExecActionOutput() ExecActionOutput {
	return o
}

func (o ExecActionOutput) ToExecActionOutputWithContext(ctx context.Context) ExecActionOutput {
	return o
}

func (o ExecActionOutput) ToExecActionPtrOutput() ExecActionPtrOutput {
	return o.ToExecActionPtrOutputWithContext(context.Background())
}

func (o ExecActionOutput) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecAction) *ExecAction {
		return &v
	}).(ExecActionPtrOutput)
}

// (Optional) Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ExecActionOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecAction) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ExecActionPtrOutput struct{ *pulumi.OutputState }

func (ExecActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecAction)(nil)).Elem()
}

func (o ExecActionPtrOutput) ToExecActionPtrOutput() ExecActionPtrOutput {
	return o
}

func (o ExecActionPtrOutput) ToExecActionPtrOutputWithContext(ctx context.Context) ExecActionPtrOutput {
	return o
}

func (o ExecActionPtrOutput) Elem() ExecActionOutput {
	return o.ApplyT(func(v *ExecAction) ExecAction {
		if v != nil {
			return *v
		}
		var ret ExecAction
		return ret
	}).(ExecActionOutput)
}

// (Optional) Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ExecActionPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExecAction) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Not supported by Cloud Run ExecAction describes a "run in container" action.
type ExecActionResponse struct {
	// (Optional) Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// ExecActionResponseInput is an input type that accepts ExecActionResponseArgs and ExecActionResponseOutput values.
// You can construct a concrete instance of `ExecActionResponseInput` via:
//
//          ExecActionResponseArgs{...}
type ExecActionResponseInput interface {
	pulumi.Input

	ToExecActionResponseOutput() ExecActionResponseOutput
	ToExecActionResponseOutputWithContext(context.Context) ExecActionResponseOutput
}

// Not supported by Cloud Run ExecAction describes a "run in container" action.
type ExecActionResponseArgs struct {
	// (Optional) Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ExecActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecActionResponse)(nil)).Elem()
}

func (i ExecActionResponseArgs) ToExecActionResponseOutput() ExecActionResponseOutput {
	return i.ToExecActionResponseOutputWithContext(context.Background())
}

func (i ExecActionResponseArgs) ToExecActionResponseOutputWithContext(ctx context.Context) ExecActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecActionResponseOutput)
}

// Not supported by Cloud Run ExecAction describes a "run in container" action.
type ExecActionResponseOutput struct{ *pulumi.OutputState }

func (ExecActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecActionResponse)(nil)).Elem()
}

func (o ExecActionResponseOutput) ToExecActionResponseOutput() ExecActionResponseOutput {
	return o
}

func (o ExecActionResponseOutput) ToExecActionResponseOutputWithContext(ctx context.Context) ExecActionResponseOutput {
	return o
}

// (Optional) Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ExecActionResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecActionResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatus struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// GoogleRpcStatusInput is an input type that accepts GoogleRpcStatusArgs and GoogleRpcStatusOutput values.
// You can construct a concrete instance of `GoogleRpcStatusInput` via:
//
//          GoogleRpcStatusArgs{...}
type GoogleRpcStatusInput interface {
	pulumi.Input

	ToGoogleRpcStatusOutput() GoogleRpcStatusOutput
	ToGoogleRpcStatusOutputWithContext(context.Context) GoogleRpcStatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (GoogleRpcStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleRpcStatus)(nil)).Elem()
}

func (i GoogleRpcStatusArgs) ToGoogleRpcStatusOutput() GoogleRpcStatusOutput {
	return i.ToGoogleRpcStatusOutputWithContext(context.Background())
}

func (i GoogleRpcStatusArgs) ToGoogleRpcStatusOutputWithContext(ctx context.Context) GoogleRpcStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleRpcStatusOutput)
}

func (i GoogleRpcStatusArgs) ToGoogleRpcStatusPtrOutput() GoogleRpcStatusPtrOutput {
	return i.ToGoogleRpcStatusPtrOutputWithContext(context.Background())
}

func (i GoogleRpcStatusArgs) ToGoogleRpcStatusPtrOutputWithContext(ctx context.Context) GoogleRpcStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleRpcStatusOutput).ToGoogleRpcStatusPtrOutputWithContext(ctx)
}

// GoogleRpcStatusPtrInput is an input type that accepts GoogleRpcStatusArgs, GoogleRpcStatusPtr and GoogleRpcStatusPtrOutput values.
// You can construct a concrete instance of `GoogleRpcStatusPtrInput` via:
//
//          GoogleRpcStatusArgs{...}
//
//  or:
//
//          nil
type GoogleRpcStatusPtrInput interface {
	pulumi.Input

	ToGoogleRpcStatusPtrOutput() GoogleRpcStatusPtrOutput
	ToGoogleRpcStatusPtrOutputWithContext(context.Context) GoogleRpcStatusPtrOutput
}

type googleRpcStatusPtrType GoogleRpcStatusArgs

func GoogleRpcStatusPtr(v *GoogleRpcStatusArgs) GoogleRpcStatusPtrInput {
	return (*googleRpcStatusPtrType)(v)
}

func (*googleRpcStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleRpcStatus)(nil)).Elem()
}

func (i *googleRpcStatusPtrType) ToGoogleRpcStatusPtrOutput() GoogleRpcStatusPtrOutput {
	return i.ToGoogleRpcStatusPtrOutputWithContext(context.Background())
}

func (i *googleRpcStatusPtrType) ToGoogleRpcStatusPtrOutputWithContext(ctx context.Context) GoogleRpcStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleRpcStatusPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatusOutput struct{ *pulumi.OutputState }

func (GoogleRpcStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleRpcStatus)(nil)).Elem()
}

func (o GoogleRpcStatusOutput) ToGoogleRpcStatusOutput() GoogleRpcStatusOutput {
	return o
}

func (o GoogleRpcStatusOutput) ToGoogleRpcStatusOutputWithContext(ctx context.Context) GoogleRpcStatusOutput {
	return o
}

func (o GoogleRpcStatusOutput) ToGoogleRpcStatusPtrOutput() GoogleRpcStatusPtrOutput {
	return o.ToGoogleRpcStatusPtrOutputWithContext(context.Background())
}

func (o GoogleRpcStatusOutput) ToGoogleRpcStatusPtrOutputWithContext(ctx context.Context) GoogleRpcStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleRpcStatus) *GoogleRpcStatus {
		return &v
	}).(GoogleRpcStatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o GoogleRpcStatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleRpcStatus) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o GoogleRpcStatusOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GoogleRpcStatus) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o GoogleRpcStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleRpcStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type GoogleRpcStatusPtrOutput struct{ *pulumi.OutputState }

func (GoogleRpcStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleRpcStatus)(nil)).Elem()
}

func (o GoogleRpcStatusPtrOutput) ToGoogleRpcStatusPtrOutput() GoogleRpcStatusPtrOutput {
	return o
}

func (o GoogleRpcStatusPtrOutput) ToGoogleRpcStatusPtrOutputWithContext(ctx context.Context) GoogleRpcStatusPtrOutput {
	return o
}

func (o GoogleRpcStatusPtrOutput) Elem() GoogleRpcStatusOutput {
	return o.ApplyT(func(v *GoogleRpcStatus) GoogleRpcStatus {
		if v != nil {
			return *v
		}
		var ret GoogleRpcStatus
		return ret
	}).(GoogleRpcStatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o GoogleRpcStatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleRpcStatus) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o GoogleRpcStatusPtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *GoogleRpcStatus) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o GoogleRpcStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleRpcStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// GoogleRpcStatusResponseInput is an input type that accepts GoogleRpcStatusResponseArgs and GoogleRpcStatusResponseOutput values.
// You can construct a concrete instance of `GoogleRpcStatusResponseInput` via:
//
//          GoogleRpcStatusResponseArgs{...}
type GoogleRpcStatusResponseInput interface {
	pulumi.Input

	ToGoogleRpcStatusResponseOutput() GoogleRpcStatusResponseOutput
	ToGoogleRpcStatusResponseOutputWithContext(context.Context) GoogleRpcStatusResponseOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatusResponseArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringInput `pulumi:"message"`
}

func (GoogleRpcStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleRpcStatusResponse)(nil)).Elem()
}

func (i GoogleRpcStatusResponseArgs) ToGoogleRpcStatusResponseOutput() GoogleRpcStatusResponseOutput {
	return i.ToGoogleRpcStatusResponseOutputWithContext(context.Background())
}

func (i GoogleRpcStatusResponseArgs) ToGoogleRpcStatusResponseOutputWithContext(ctx context.Context) GoogleRpcStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleRpcStatusResponseOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatusResponseOutput struct{ *pulumi.OutputState }

func (GoogleRpcStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleRpcStatusResponse)(nil)).Elem()
}

func (o GoogleRpcStatusResponseOutput) ToGoogleRpcStatusResponseOutput() GoogleRpcStatusResponseOutput {
	return o
}

func (o GoogleRpcStatusResponseOutput) ToGoogleRpcStatusResponseOutputWithContext(ctx context.Context) GoogleRpcStatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o GoogleRpcStatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleRpcStatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o GoogleRpcStatusResponseOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GoogleRpcStatusResponse) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o GoogleRpcStatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleRpcStatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Not supported by Cloud Run HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetAction struct {
	// (Optional) Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// (Optional) Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []HTTPHeader `pulumi:"httpHeaders"`
	// (Optional) Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// (Optional) Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// HTTPGetActionInput is an input type that accepts HTTPGetActionArgs and HTTPGetActionOutput values.
// You can construct a concrete instance of `HTTPGetActionInput` via:
//
//          HTTPGetActionArgs{...}
type HTTPGetActionInput interface {
	pulumi.Input

	ToHTTPGetActionOutput() HTTPGetActionOutput
	ToHTTPGetActionOutputWithContext(context.Context) HTTPGetActionOutput
}

// Not supported by Cloud Run HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionArgs struct {
	// (Optional) Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// (Optional) Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders HTTPHeaderArrayInput `pulumi:"httpHeaders"`
	// (Optional) Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// (Optional) Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (HTTPGetActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetAction)(nil)).Elem()
}

func (i HTTPGetActionArgs) ToHTTPGetActionOutput() HTTPGetActionOutput {
	return i.ToHTTPGetActionOutputWithContext(context.Background())
}

func (i HTTPGetActionArgs) ToHTTPGetActionOutputWithContext(ctx context.Context) HTTPGetActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionOutput)
}

func (i HTTPGetActionArgs) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return i.ToHTTPGetActionPtrOutputWithContext(context.Background())
}

func (i HTTPGetActionArgs) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionOutput).ToHTTPGetActionPtrOutputWithContext(ctx)
}

// HTTPGetActionPtrInput is an input type that accepts HTTPGetActionArgs, HTTPGetActionPtr and HTTPGetActionPtrOutput values.
// You can construct a concrete instance of `HTTPGetActionPtrInput` via:
//
//          HTTPGetActionArgs{...}
//
//  or:
//
//          nil
type HTTPGetActionPtrInput interface {
	pulumi.Input

	ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput
	ToHTTPGetActionPtrOutputWithContext(context.Context) HTTPGetActionPtrOutput
}

type httpgetActionPtrType HTTPGetActionArgs

func HTTPGetActionPtr(v *HTTPGetActionArgs) HTTPGetActionPtrInput {
	return (*httpgetActionPtrType)(v)
}

func (*httpgetActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPGetAction)(nil)).Elem()
}

func (i *httpgetActionPtrType) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return i.ToHTTPGetActionPtrOutputWithContext(context.Background())
}

func (i *httpgetActionPtrType) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionPtrOutput)
}

// Not supported by Cloud Run HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionOutput struct{ *pulumi.OutputState }

func (HTTPGetActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetAction)(nil)).Elem()
}

func (o HTTPGetActionOutput) ToHTTPGetActionOutput() HTTPGetActionOutput {
	return o
}

func (o HTTPGetActionOutput) ToHTTPGetActionOutputWithContext(ctx context.Context) HTTPGetActionOutput {
	return o
}

func (o HTTPGetActionOutput) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return o.ToHTTPGetActionPtrOutputWithContext(context.Background())
}

func (o HTTPGetActionOutput) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HTTPGetAction) *HTTPGetAction {
		return &v
	}).(HTTPGetActionPtrOutput)
}

// (Optional) Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o HTTPGetActionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetAction) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// (Optional) Custom headers to set in the request. HTTP allows repeated headers.
func (o HTTPGetActionOutput) HttpHeaders() HTTPHeaderArrayOutput {
	return o.ApplyT(func(v HTTPGetAction) []HTTPHeader { return v.HttpHeaders }).(HTTPHeaderArrayOutput)
}

// (Optional) Path to access on the HTTP server.
func (o HTTPGetActionOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetAction) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// (Optional) Scheme to use for connecting to the host. Defaults to HTTP.
func (o HTTPGetActionOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPGetAction) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type HTTPGetActionPtrOutput struct{ *pulumi.OutputState }

func (HTTPGetActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPGetAction)(nil)).Elem()
}

func (o HTTPGetActionPtrOutput) ToHTTPGetActionPtrOutput() HTTPGetActionPtrOutput {
	return o
}

func (o HTTPGetActionPtrOutput) ToHTTPGetActionPtrOutputWithContext(ctx context.Context) HTTPGetActionPtrOutput {
	return o
}

func (o HTTPGetActionPtrOutput) Elem() HTTPGetActionOutput {
	return o.ApplyT(func(v *HTTPGetAction) HTTPGetAction {
		if v != nil {
			return *v
		}
		var ret HTTPGetAction
		return ret
	}).(HTTPGetActionOutput)
}

// (Optional) Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o HTTPGetActionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// (Optional) Custom headers to set in the request. HTTP allows repeated headers.
func (o HTTPGetActionPtrOutput) HttpHeaders() HTTPHeaderArrayOutput {
	return o.ApplyT(func(v *HTTPGetAction) []HTTPHeader {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(HTTPHeaderArrayOutput)
}

// (Optional) Path to access on the HTTP server.
func (o HTTPGetActionPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// (Optional) Scheme to use for connecting to the host. Defaults to HTTP.
func (o HTTPGetActionPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPGetAction) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// Not supported by Cloud Run HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionResponse struct {
	// (Optional) Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host string `pulumi:"host"`
	// (Optional) Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []HTTPHeaderResponse `pulumi:"httpHeaders"`
	// (Optional) Path to access on the HTTP server.
	Path string `pulumi:"path"`
	// (Optional) Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme string `pulumi:"scheme"`
}

// HTTPGetActionResponseInput is an input type that accepts HTTPGetActionResponseArgs and HTTPGetActionResponseOutput values.
// You can construct a concrete instance of `HTTPGetActionResponseInput` via:
//
//          HTTPGetActionResponseArgs{...}
type HTTPGetActionResponseInput interface {
	pulumi.Input

	ToHTTPGetActionResponseOutput() HTTPGetActionResponseOutput
	ToHTTPGetActionResponseOutputWithContext(context.Context) HTTPGetActionResponseOutput
}

// Not supported by Cloud Run HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionResponseArgs struct {
	// (Optional) Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringInput `pulumi:"host"`
	// (Optional) Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders HTTPHeaderResponseArrayInput `pulumi:"httpHeaders"`
	// (Optional) Path to access on the HTTP server.
	Path pulumi.StringInput `pulumi:"path"`
	// (Optional) Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringInput `pulumi:"scheme"`
}

func (HTTPGetActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetActionResponse)(nil)).Elem()
}

func (i HTTPGetActionResponseArgs) ToHTTPGetActionResponseOutput() HTTPGetActionResponseOutput {
	return i.ToHTTPGetActionResponseOutputWithContext(context.Background())
}

func (i HTTPGetActionResponseArgs) ToHTTPGetActionResponseOutputWithContext(ctx context.Context) HTTPGetActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPGetActionResponseOutput)
}

// Not supported by Cloud Run HTTPGetAction describes an action based on HTTP Get requests.
type HTTPGetActionResponseOutput struct{ *pulumi.OutputState }

func (HTTPGetActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPGetActionResponse)(nil)).Elem()
}

func (o HTTPGetActionResponseOutput) ToHTTPGetActionResponseOutput() HTTPGetActionResponseOutput {
	return o
}

func (o HTTPGetActionResponseOutput) ToHTTPGetActionResponseOutputWithContext(ctx context.Context) HTTPGetActionResponseOutput {
	return o
}

// (Optional) Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o HTTPGetActionResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPGetActionResponse) string { return v.Host }).(pulumi.StringOutput)
}

// (Optional) Custom headers to set in the request. HTTP allows repeated headers.
func (o HTTPGetActionResponseOutput) HttpHeaders() HTTPHeaderResponseArrayOutput {
	return o.ApplyT(func(v HTTPGetActionResponse) []HTTPHeaderResponse { return v.HttpHeaders }).(HTTPHeaderResponseArrayOutput)
}

// (Optional) Path to access on the HTTP server.
func (o HTTPGetActionResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPGetActionResponse) string { return v.Path }).(pulumi.StringOutput)
}

// (Optional) Scheme to use for connecting to the host. Defaults to HTTP.
func (o HTTPGetActionResponseOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPGetActionResponse) string { return v.Scheme }).(pulumi.StringOutput)
}

// Not supported by Cloud Run HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeader struct {
	// The header field name
	Name *string `pulumi:"name"`
	// The header field value
	Value *string `pulumi:"value"`
}

// HTTPHeaderInput is an input type that accepts HTTPHeaderArgs and HTTPHeaderOutput values.
// You can construct a concrete instance of `HTTPHeaderInput` via:
//
//          HTTPHeaderArgs{...}
type HTTPHeaderInput interface {
	pulumi.Input

	ToHTTPHeaderOutput() HTTPHeaderOutput
	ToHTTPHeaderOutputWithContext(context.Context) HTTPHeaderOutput
}

// Not supported by Cloud Run HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderArgs struct {
	// The header field name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HTTPHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeader)(nil)).Elem()
}

func (i HTTPHeaderArgs) ToHTTPHeaderOutput() HTTPHeaderOutput {
	return i.ToHTTPHeaderOutputWithContext(context.Background())
}

func (i HTTPHeaderArgs) ToHTTPHeaderOutputWithContext(ctx context.Context) HTTPHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHeaderOutput)
}

// HTTPHeaderArrayInput is an input type that accepts HTTPHeaderArray and HTTPHeaderArrayOutput values.
// You can construct a concrete instance of `HTTPHeaderArrayInput` via:
//
//          HTTPHeaderArray{ HTTPHeaderArgs{...} }
type HTTPHeaderArrayInput interface {
	pulumi.Input

	ToHTTPHeaderArrayOutput() HTTPHeaderArrayOutput
	ToHTTPHeaderArrayOutputWithContext(context.Context) HTTPHeaderArrayOutput
}

type HTTPHeaderArray []HTTPHeaderInput

func (HTTPHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeader)(nil)).Elem()
}

func (i HTTPHeaderArray) ToHTTPHeaderArrayOutput() HTTPHeaderArrayOutput {
	return i.ToHTTPHeaderArrayOutputWithContext(context.Background())
}

func (i HTTPHeaderArray) ToHTTPHeaderArrayOutputWithContext(ctx context.Context) HTTPHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHeaderArrayOutput)
}

// Not supported by Cloud Run HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderOutput struct{ *pulumi.OutputState }

func (HTTPHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeader)(nil)).Elem()
}

func (o HTTPHeaderOutput) ToHTTPHeaderOutput() HTTPHeaderOutput {
	return o
}

func (o HTTPHeaderOutput) ToHTTPHeaderOutputWithContext(ctx context.Context) HTTPHeaderOutput {
	return o
}

// The header field name
func (o HTTPHeaderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHeader) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The header field value
func (o HTTPHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HTTPHeaderArrayOutput struct{ *pulumi.OutputState }

func (HTTPHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeader)(nil)).Elem()
}

func (o HTTPHeaderArrayOutput) ToHTTPHeaderArrayOutput() HTTPHeaderArrayOutput {
	return o
}

func (o HTTPHeaderArrayOutput) ToHTTPHeaderArrayOutputWithContext(ctx context.Context) HTTPHeaderArrayOutput {
	return o
}

func (o HTTPHeaderArrayOutput) Index(i pulumi.IntInput) HTTPHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HTTPHeader {
		return vs[0].([]HTTPHeader)[vs[1].(int)]
	}).(HTTPHeaderOutput)
}

// Not supported by Cloud Run HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderResponse struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// HTTPHeaderResponseInput is an input type that accepts HTTPHeaderResponseArgs and HTTPHeaderResponseOutput values.
// You can construct a concrete instance of `HTTPHeaderResponseInput` via:
//
//          HTTPHeaderResponseArgs{...}
type HTTPHeaderResponseInput interface {
	pulumi.Input

	ToHTTPHeaderResponseOutput() HTTPHeaderResponseOutput
	ToHTTPHeaderResponseOutputWithContext(context.Context) HTTPHeaderResponseOutput
}

// Not supported by Cloud Run HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderResponseArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (HTTPHeaderResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeaderResponse)(nil)).Elem()
}

func (i HTTPHeaderResponseArgs) ToHTTPHeaderResponseOutput() HTTPHeaderResponseOutput {
	return i.ToHTTPHeaderResponseOutputWithContext(context.Background())
}

func (i HTTPHeaderResponseArgs) ToHTTPHeaderResponseOutputWithContext(ctx context.Context) HTTPHeaderResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHeaderResponseOutput)
}

// HTTPHeaderResponseArrayInput is an input type that accepts HTTPHeaderResponseArray and HTTPHeaderResponseArrayOutput values.
// You can construct a concrete instance of `HTTPHeaderResponseArrayInput` via:
//
//          HTTPHeaderResponseArray{ HTTPHeaderResponseArgs{...} }
type HTTPHeaderResponseArrayInput interface {
	pulumi.Input

	ToHTTPHeaderResponseArrayOutput() HTTPHeaderResponseArrayOutput
	ToHTTPHeaderResponseArrayOutputWithContext(context.Context) HTTPHeaderResponseArrayOutput
}

type HTTPHeaderResponseArray []HTTPHeaderResponseInput

func (HTTPHeaderResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeaderResponse)(nil)).Elem()
}

func (i HTTPHeaderResponseArray) ToHTTPHeaderResponseArrayOutput() HTTPHeaderResponseArrayOutput {
	return i.ToHTTPHeaderResponseArrayOutputWithContext(context.Background())
}

func (i HTTPHeaderResponseArray) ToHTTPHeaderResponseArrayOutputWithContext(ctx context.Context) HTTPHeaderResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHeaderResponseArrayOutput)
}

// Not supported by Cloud Run HTTPHeader describes a custom header to be used in HTTP probes
type HTTPHeaderResponseOutput struct{ *pulumi.OutputState }

func (HTTPHeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHeaderResponse)(nil)).Elem()
}

func (o HTTPHeaderResponseOutput) ToHTTPHeaderResponseOutput() HTTPHeaderResponseOutput {
	return o
}

func (o HTTPHeaderResponseOutput) ToHTTPHeaderResponseOutputWithContext(ctx context.Context) HTTPHeaderResponseOutput {
	return o
}

// The header field name
func (o HTTPHeaderResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHeaderResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o HTTPHeaderResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHeaderResponse) string { return v.Value }).(pulumi.StringOutput)
}

type HTTPHeaderResponseArrayOutput struct{ *pulumi.OutputState }

func (HTTPHeaderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HTTPHeaderResponse)(nil)).Elem()
}

func (o HTTPHeaderResponseArrayOutput) ToHTTPHeaderResponseArrayOutput() HTTPHeaderResponseArrayOutput {
	return o
}

func (o HTTPHeaderResponseArrayOutput) ToHTTPHeaderResponseArrayOutputWithContext(ctx context.Context) HTTPHeaderResponseArrayOutput {
	return o
}

func (o HTTPHeaderResponseArrayOutput) Index(i pulumi.IntInput) HTTPHeaderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HTTPHeaderResponse {
		return vs[0].([]HTTPHeaderResponse)[vs[1].(int)]
	}).(HTTPHeaderResponseOutput)
}

// Result of an instance attempt.
type InstanceAttemptResult struct {
	// Optional. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details.
	ExitCode *int `pulumi:"exitCode"`
	// Optional. The status of this attempt. If the status code is OK, then the attempt succeeded.
	Status *GoogleRpcStatus `pulumi:"status"`
}

// InstanceAttemptResultInput is an input type that accepts InstanceAttemptResultArgs and InstanceAttemptResultOutput values.
// You can construct a concrete instance of `InstanceAttemptResultInput` via:
//
//          InstanceAttemptResultArgs{...}
type InstanceAttemptResultInput interface {
	pulumi.Input

	ToInstanceAttemptResultOutput() InstanceAttemptResultOutput
	ToInstanceAttemptResultOutputWithContext(context.Context) InstanceAttemptResultOutput
}

// Result of an instance attempt.
type InstanceAttemptResultArgs struct {
	// Optional. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details.
	ExitCode pulumi.IntPtrInput `pulumi:"exitCode"`
	// Optional. The status of this attempt. If the status code is OK, then the attempt succeeded.
	Status GoogleRpcStatusPtrInput `pulumi:"status"`
}

func (InstanceAttemptResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAttemptResult)(nil)).Elem()
}

func (i InstanceAttemptResultArgs) ToInstanceAttemptResultOutput() InstanceAttemptResultOutput {
	return i.ToInstanceAttemptResultOutputWithContext(context.Background())
}

func (i InstanceAttemptResultArgs) ToInstanceAttemptResultOutputWithContext(ctx context.Context) InstanceAttemptResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAttemptResultOutput)
}

func (i InstanceAttemptResultArgs) ToInstanceAttemptResultPtrOutput() InstanceAttemptResultPtrOutput {
	return i.ToInstanceAttemptResultPtrOutputWithContext(context.Background())
}

func (i InstanceAttemptResultArgs) ToInstanceAttemptResultPtrOutputWithContext(ctx context.Context) InstanceAttemptResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAttemptResultOutput).ToInstanceAttemptResultPtrOutputWithContext(ctx)
}

// InstanceAttemptResultPtrInput is an input type that accepts InstanceAttemptResultArgs, InstanceAttemptResultPtr and InstanceAttemptResultPtrOutput values.
// You can construct a concrete instance of `InstanceAttemptResultPtrInput` via:
//
//          InstanceAttemptResultArgs{...}
//
//  or:
//
//          nil
type InstanceAttemptResultPtrInput interface {
	pulumi.Input

	ToInstanceAttemptResultPtrOutput() InstanceAttemptResultPtrOutput
	ToInstanceAttemptResultPtrOutputWithContext(context.Context) InstanceAttemptResultPtrOutput
}

type instanceAttemptResultPtrType InstanceAttemptResultArgs

func InstanceAttemptResultPtr(v *InstanceAttemptResultArgs) InstanceAttemptResultPtrInput {
	return (*instanceAttemptResultPtrType)(v)
}

func (*instanceAttemptResultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAttemptResult)(nil)).Elem()
}

func (i *instanceAttemptResultPtrType) ToInstanceAttemptResultPtrOutput() InstanceAttemptResultPtrOutput {
	return i.ToInstanceAttemptResultPtrOutputWithContext(context.Background())
}

func (i *instanceAttemptResultPtrType) ToInstanceAttemptResultPtrOutputWithContext(ctx context.Context) InstanceAttemptResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAttemptResultPtrOutput)
}

// Result of an instance attempt.
type InstanceAttemptResultOutput struct{ *pulumi.OutputState }

func (InstanceAttemptResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAttemptResult)(nil)).Elem()
}

func (o InstanceAttemptResultOutput) ToInstanceAttemptResultOutput() InstanceAttemptResultOutput {
	return o
}

func (o InstanceAttemptResultOutput) ToInstanceAttemptResultOutputWithContext(ctx context.Context) InstanceAttemptResultOutput {
	return o
}

func (o InstanceAttemptResultOutput) ToInstanceAttemptResultPtrOutput() InstanceAttemptResultPtrOutput {
	return o.ToInstanceAttemptResultPtrOutputWithContext(context.Background())
}

func (o InstanceAttemptResultOutput) ToInstanceAttemptResultPtrOutputWithContext(ctx context.Context) InstanceAttemptResultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceAttemptResult) *InstanceAttemptResult {
		return &v
	}).(InstanceAttemptResultPtrOutput)
}

// Optional. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details.
func (o InstanceAttemptResultOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAttemptResult) *int { return v.ExitCode }).(pulumi.IntPtrOutput)
}

// Optional. The status of this attempt. If the status code is OK, then the attempt succeeded.
func (o InstanceAttemptResultOutput) Status() GoogleRpcStatusPtrOutput {
	return o.ApplyT(func(v InstanceAttemptResult) *GoogleRpcStatus { return v.Status }).(GoogleRpcStatusPtrOutput)
}

type InstanceAttemptResultPtrOutput struct{ *pulumi.OutputState }

func (InstanceAttemptResultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAttemptResult)(nil)).Elem()
}

func (o InstanceAttemptResultPtrOutput) ToInstanceAttemptResultPtrOutput() InstanceAttemptResultPtrOutput {
	return o
}

func (o InstanceAttemptResultPtrOutput) ToInstanceAttemptResultPtrOutputWithContext(ctx context.Context) InstanceAttemptResultPtrOutput {
	return o
}

func (o InstanceAttemptResultPtrOutput) Elem() InstanceAttemptResultOutput {
	return o.ApplyT(func(v *InstanceAttemptResult) InstanceAttemptResult {
		if v != nil {
			return *v
		}
		var ret InstanceAttemptResult
		return ret
	}).(InstanceAttemptResultOutput)
}

// Optional. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details.
func (o InstanceAttemptResultPtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceAttemptResult) *int {
		if v == nil {
			return nil
		}
		return v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// Optional. The status of this attempt. If the status code is OK, then the attempt succeeded.
func (o InstanceAttemptResultPtrOutput) Status() GoogleRpcStatusPtrOutput {
	return o.ApplyT(func(v *InstanceAttemptResult) *GoogleRpcStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(GoogleRpcStatusPtrOutput)
}

// Result of an instance attempt.
type InstanceAttemptResultResponse struct {
	// Optional. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details.
	ExitCode int `pulumi:"exitCode"`
	// Optional. The status of this attempt. If the status code is OK, then the attempt succeeded.
	Status GoogleRpcStatusResponse `pulumi:"status"`
}

// InstanceAttemptResultResponseInput is an input type that accepts InstanceAttemptResultResponseArgs and InstanceAttemptResultResponseOutput values.
// You can construct a concrete instance of `InstanceAttemptResultResponseInput` via:
//
//          InstanceAttemptResultResponseArgs{...}
type InstanceAttemptResultResponseInput interface {
	pulumi.Input

	ToInstanceAttemptResultResponseOutput() InstanceAttemptResultResponseOutput
	ToInstanceAttemptResultResponseOutputWithContext(context.Context) InstanceAttemptResultResponseOutput
}

// Result of an instance attempt.
type InstanceAttemptResultResponseArgs struct {
	// Optional. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details.
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// Optional. The status of this attempt. If the status code is OK, then the attempt succeeded.
	Status GoogleRpcStatusResponseInput `pulumi:"status"`
}

func (InstanceAttemptResultResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAttemptResultResponse)(nil)).Elem()
}

func (i InstanceAttemptResultResponseArgs) ToInstanceAttemptResultResponseOutput() InstanceAttemptResultResponseOutput {
	return i.ToInstanceAttemptResultResponseOutputWithContext(context.Background())
}

func (i InstanceAttemptResultResponseArgs) ToInstanceAttemptResultResponseOutputWithContext(ctx context.Context) InstanceAttemptResultResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAttemptResultResponseOutput)
}

// Result of an instance attempt.
type InstanceAttemptResultResponseOutput struct{ *pulumi.OutputState }

func (InstanceAttemptResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAttemptResultResponse)(nil)).Elem()
}

func (o InstanceAttemptResultResponseOutput) ToInstanceAttemptResultResponseOutput() InstanceAttemptResultResponseOutput {
	return o
}

func (o InstanceAttemptResultResponseOutput) ToInstanceAttemptResultResponseOutputWithContext(ctx context.Context) InstanceAttemptResultResponseOutput {
	return o
}

// Optional. The exit code of this attempt. This may be unset if the container was unable to exit cleanly with a code due to some other failure. See status field for possible failure details.
func (o InstanceAttemptResultResponseOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceAttemptResultResponse) int { return v.ExitCode }).(pulumi.IntOutput)
}

// Optional. The status of this attempt. If the status code is OK, then the attempt succeeded.
func (o InstanceAttemptResultResponseOutput) Status() GoogleRpcStatusResponseOutput {
	return o.ApplyT(func(v InstanceAttemptResultResponse) GoogleRpcStatusResponse { return v.Status }).(GoogleRpcStatusResponseOutput)
}

// InstanceSpec is a description of an instance.
type InstanceSpec struct {
	// Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
	ActiveDeadlineSeconds *string `pulumi:"activeDeadlineSeconds"`
	// Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
	Containers []Container `pulumi:"containers"`
	// Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
	RestartPolicy *string `pulumi:"restartPolicy"`
	// Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
	TerminationGracePeriodSeconds *string `pulumi:"terminationGracePeriodSeconds"`
	// Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
	Volumes []Volume `pulumi:"volumes"`
}

// InstanceSpecInput is an input type that accepts InstanceSpecArgs and InstanceSpecOutput values.
// You can construct a concrete instance of `InstanceSpecInput` via:
//
//          InstanceSpecArgs{...}
type InstanceSpecInput interface {
	pulumi.Input

	ToInstanceSpecOutput() InstanceSpecOutput
	ToInstanceSpecOutputWithContext(context.Context) InstanceSpecOutput
}

// InstanceSpec is a description of an instance.
type InstanceSpecArgs struct {
	// Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
	ActiveDeadlineSeconds pulumi.StringPtrInput `pulumi:"activeDeadlineSeconds"`
	// Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
	Containers ContainerArrayInput `pulumi:"containers"`
	// Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
	RestartPolicy pulumi.StringPtrInput `pulumi:"restartPolicy"`
	// Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
	TerminationGracePeriodSeconds pulumi.StringPtrInput `pulumi:"terminationGracePeriodSeconds"`
	// Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
	Volumes VolumeArrayInput `pulumi:"volumes"`
}

func (InstanceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSpec)(nil)).Elem()
}

func (i InstanceSpecArgs) ToInstanceSpecOutput() InstanceSpecOutput {
	return i.ToInstanceSpecOutputWithContext(context.Background())
}

func (i InstanceSpecArgs) ToInstanceSpecOutputWithContext(ctx context.Context) InstanceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecOutput)
}

func (i InstanceSpecArgs) ToInstanceSpecPtrOutput() InstanceSpecPtrOutput {
	return i.ToInstanceSpecPtrOutputWithContext(context.Background())
}

func (i InstanceSpecArgs) ToInstanceSpecPtrOutputWithContext(ctx context.Context) InstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecOutput).ToInstanceSpecPtrOutputWithContext(ctx)
}

// InstanceSpecPtrInput is an input type that accepts InstanceSpecArgs, InstanceSpecPtr and InstanceSpecPtrOutput values.
// You can construct a concrete instance of `InstanceSpecPtrInput` via:
//
//          InstanceSpecArgs{...}
//
//  or:
//
//          nil
type InstanceSpecPtrInput interface {
	pulumi.Input

	ToInstanceSpecPtrOutput() InstanceSpecPtrOutput
	ToInstanceSpecPtrOutputWithContext(context.Context) InstanceSpecPtrOutput
}

type instanceSpecPtrType InstanceSpecArgs

func InstanceSpecPtr(v *InstanceSpecArgs) InstanceSpecPtrInput {
	return (*instanceSpecPtrType)(v)
}

func (*instanceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSpec)(nil)).Elem()
}

func (i *instanceSpecPtrType) ToInstanceSpecPtrOutput() InstanceSpecPtrOutput {
	return i.ToInstanceSpecPtrOutputWithContext(context.Background())
}

func (i *instanceSpecPtrType) ToInstanceSpecPtrOutputWithContext(ctx context.Context) InstanceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecPtrOutput)
}

// InstanceSpec is a description of an instance.
type InstanceSpecOutput struct{ *pulumi.OutputState }

func (InstanceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSpec)(nil)).Elem()
}

func (o InstanceSpecOutput) ToInstanceSpecOutput() InstanceSpecOutput {
	return o
}

func (o InstanceSpecOutput) ToInstanceSpecOutputWithContext(ctx context.Context) InstanceSpecOutput {
	return o
}

func (o InstanceSpecOutput) ToInstanceSpecPtrOutput() InstanceSpecPtrOutput {
	return o.ToInstanceSpecPtrOutputWithContext(context.Background())
}

func (o InstanceSpecOutput) ToInstanceSpecPtrOutputWithContext(ctx context.Context) InstanceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceSpec) *InstanceSpec {
		return &v
	}).(InstanceSpecPtrOutput)
}

// Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
func (o InstanceSpecOutput) ActiveDeadlineSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSpec) *string { return v.ActiveDeadlineSeconds }).(pulumi.StringPtrOutput)
}

// Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
func (o InstanceSpecOutput) Containers() ContainerArrayOutput {
	return o.ApplyT(func(v InstanceSpec) []Container { return v.Containers }).(ContainerArrayOutput)
}

// Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
func (o InstanceSpecOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSpec) *string { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

// Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional
func (o InstanceSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
func (o InstanceSpecOutput) TerminationGracePeriodSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSpec) *string { return v.TerminationGracePeriodSeconds }).(pulumi.StringPtrOutput)
}

// Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
func (o InstanceSpecOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v InstanceSpec) []Volume { return v.Volumes }).(VolumeArrayOutput)
}

type InstanceSpecPtrOutput struct{ *pulumi.OutputState }

func (InstanceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSpec)(nil)).Elem()
}

func (o InstanceSpecPtrOutput) ToInstanceSpecPtrOutput() InstanceSpecPtrOutput {
	return o
}

func (o InstanceSpecPtrOutput) ToInstanceSpecPtrOutputWithContext(ctx context.Context) InstanceSpecPtrOutput {
	return o
}

func (o InstanceSpecPtrOutput) Elem() InstanceSpecOutput {
	return o.ApplyT(func(v *InstanceSpec) InstanceSpec {
		if v != nil {
			return *v
		}
		var ret InstanceSpec
		return ret
	}).(InstanceSpecOutput)
}

// Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
func (o InstanceSpecPtrOutput) ActiveDeadlineSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDeadlineSeconds
	}).(pulumi.StringPtrOutput)
}

// Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
func (o InstanceSpecPtrOutput) Containers() ContainerArrayOutput {
	return o.ApplyT(func(v *InstanceSpec) []Container {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ContainerArrayOutput)
}

// Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
func (o InstanceSpecPtrOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSpec) *string {
		if v == nil {
			return nil
		}
		return v.RestartPolicy
	}).(pulumi.StringPtrOutput)
}

// Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional
func (o InstanceSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
func (o InstanceSpecPtrOutput) TerminationGracePeriodSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSpec) *string {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.StringPtrOutput)
}

// Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
func (o InstanceSpecPtrOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v *InstanceSpec) []Volume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeArrayOutput)
}

// InstanceSpec is a description of an instance.
type InstanceSpecResponse struct {
	// Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
	ActiveDeadlineSeconds string `pulumi:"activeDeadlineSeconds"`
	// Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
	Containers []ContainerResponse `pulumi:"containers"`
	// Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
	RestartPolicy string `pulumi:"restartPolicy"`
	// Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional
	ServiceAccountName string `pulumi:"serviceAccountName"`
	// Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
	TerminationGracePeriodSeconds string `pulumi:"terminationGracePeriodSeconds"`
	// Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
	Volumes []VolumeResponse `pulumi:"volumes"`
}

// InstanceSpecResponseInput is an input type that accepts InstanceSpecResponseArgs and InstanceSpecResponseOutput values.
// You can construct a concrete instance of `InstanceSpecResponseInput` via:
//
//          InstanceSpecResponseArgs{...}
type InstanceSpecResponseInput interface {
	pulumi.Input

	ToInstanceSpecResponseOutput() InstanceSpecResponseOutput
	ToInstanceSpecResponseOutputWithContext(context.Context) InstanceSpecResponseOutput
}

// InstanceSpec is a description of an instance.
type InstanceSpecResponseArgs struct {
	// Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
	ActiveDeadlineSeconds pulumi.StringInput `pulumi:"activeDeadlineSeconds"`
	// Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
	Containers ContainerResponseArrayInput `pulumi:"containers"`
	// Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
	RestartPolicy pulumi.StringInput `pulumi:"restartPolicy"`
	// Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional
	ServiceAccountName pulumi.StringInput `pulumi:"serviceAccountName"`
	// Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
	TerminationGracePeriodSeconds pulumi.StringInput `pulumi:"terminationGracePeriodSeconds"`
	// Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
	Volumes VolumeResponseArrayInput `pulumi:"volumes"`
}

func (InstanceSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSpecResponse)(nil)).Elem()
}

func (i InstanceSpecResponseArgs) ToInstanceSpecResponseOutput() InstanceSpecResponseOutput {
	return i.ToInstanceSpecResponseOutputWithContext(context.Background())
}

func (i InstanceSpecResponseArgs) ToInstanceSpecResponseOutputWithContext(ctx context.Context) InstanceSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecResponseOutput)
}

func (i InstanceSpecResponseArgs) ToInstanceSpecResponsePtrOutput() InstanceSpecResponsePtrOutput {
	return i.ToInstanceSpecResponsePtrOutputWithContext(context.Background())
}

func (i InstanceSpecResponseArgs) ToInstanceSpecResponsePtrOutputWithContext(ctx context.Context) InstanceSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecResponseOutput).ToInstanceSpecResponsePtrOutputWithContext(ctx)
}

// InstanceSpecResponsePtrInput is an input type that accepts InstanceSpecResponseArgs, InstanceSpecResponsePtr and InstanceSpecResponsePtrOutput values.
// You can construct a concrete instance of `InstanceSpecResponsePtrInput` via:
//
//          InstanceSpecResponseArgs{...}
//
//  or:
//
//          nil
type InstanceSpecResponsePtrInput interface {
	pulumi.Input

	ToInstanceSpecResponsePtrOutput() InstanceSpecResponsePtrOutput
	ToInstanceSpecResponsePtrOutputWithContext(context.Context) InstanceSpecResponsePtrOutput
}

type instanceSpecResponsePtrType InstanceSpecResponseArgs

func InstanceSpecResponsePtr(v *InstanceSpecResponseArgs) InstanceSpecResponsePtrInput {
	return (*instanceSpecResponsePtrType)(v)
}

func (*instanceSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSpecResponse)(nil)).Elem()
}

func (i *instanceSpecResponsePtrType) ToInstanceSpecResponsePtrOutput() InstanceSpecResponsePtrOutput {
	return i.ToInstanceSpecResponsePtrOutputWithContext(context.Background())
}

func (i *instanceSpecResponsePtrType) ToInstanceSpecResponsePtrOutputWithContext(ctx context.Context) InstanceSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecResponsePtrOutput)
}

// InstanceSpec is a description of an instance.
type InstanceSpecResponseOutput struct{ *pulumi.OutputState }

func (InstanceSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSpecResponse)(nil)).Elem()
}

func (o InstanceSpecResponseOutput) ToInstanceSpecResponseOutput() InstanceSpecResponseOutput {
	return o
}

func (o InstanceSpecResponseOutput) ToInstanceSpecResponseOutputWithContext(ctx context.Context) InstanceSpecResponseOutput {
	return o
}

func (o InstanceSpecResponseOutput) ToInstanceSpecResponsePtrOutput() InstanceSpecResponsePtrOutput {
	return o.ToInstanceSpecResponsePtrOutputWithContext(context.Background())
}

func (o InstanceSpecResponseOutput) ToInstanceSpecResponsePtrOutputWithContext(ctx context.Context) InstanceSpecResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceSpecResponse) *InstanceSpecResponse {
		return &v
	}).(InstanceSpecResponsePtrOutput)
}

// Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
func (o InstanceSpecResponseOutput) ActiveDeadlineSeconds() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecResponse) string { return v.ActiveDeadlineSeconds }).(pulumi.StringOutput)
}

// Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
func (o InstanceSpecResponseOutput) Containers() ContainerResponseArrayOutput {
	return o.ApplyT(func(v InstanceSpecResponse) []ContainerResponse { return v.Containers }).(ContainerResponseArrayOutput)
}

// Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
func (o InstanceSpecResponseOutput) RestartPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecResponse) string { return v.RestartPolicy }).(pulumi.StringOutput)
}

// Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional
func (o InstanceSpecResponseOutput) ServiceAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecResponse) string { return v.ServiceAccountName }).(pulumi.StringOutput)
}

// Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
func (o InstanceSpecResponseOutput) TerminationGracePeriodSeconds() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecResponse) string { return v.TerminationGracePeriodSeconds }).(pulumi.StringOutput)
}

// Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
func (o InstanceSpecResponseOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v InstanceSpecResponse) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

type InstanceSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (InstanceSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSpecResponse)(nil)).Elem()
}

func (o InstanceSpecResponsePtrOutput) ToInstanceSpecResponsePtrOutput() InstanceSpecResponsePtrOutput {
	return o
}

func (o InstanceSpecResponsePtrOutput) ToInstanceSpecResponsePtrOutputWithContext(ctx context.Context) InstanceSpecResponsePtrOutput {
	return o
}

func (o InstanceSpecResponsePtrOutput) Elem() InstanceSpecResponseOutput {
	return o.ApplyT(func(v *InstanceSpecResponse) InstanceSpecResponse {
		if v != nil {
			return *v
		}
		var ret InstanceSpecResponse
		return ret
	}).(InstanceSpecResponseOutput)
}

// Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
func (o InstanceSpecResponsePtrOutput) ActiveDeadlineSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ActiveDeadlineSeconds
	}).(pulumi.StringPtrOutput)
}

// Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
func (o InstanceSpecResponsePtrOutput) Containers() ContainerResponseArrayOutput {
	return o.ApplyT(func(v *InstanceSpecResponse) []ContainerResponse {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ContainerResponseArrayOutput)
}

// Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
func (o InstanceSpecResponsePtrOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RestartPolicy
	}).(pulumi.StringPtrOutput)
}

// Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional
func (o InstanceSpecResponsePtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
func (o InstanceSpecResponsePtrOutput) TerminationGracePeriodSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TerminationGracePeriodSeconds
	}).(pulumi.StringPtrOutput)
}

// Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
func (o InstanceSpecResponsePtrOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v *InstanceSpecResponse) []VolumeResponse {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeResponseArrayOutput)
}

// Instance represents the status of an instance of a Job.
type InstanceStatus struct {
	// Optional. Represents time when the instance was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	CompletionTime *string `pulumi:"completionTime"`
	// Optional. The number of times this instance exited with code > 0; +optional
	Failed *int `pulumi:"failed"`
	// Index of the instance, unique per Job, and beginning at 0.
	Index int `pulumi:"index"`
	// Optional. Result of the last attempt of this instance. +optional
	LastAttemptResult *InstanceAttemptResult `pulumi:"lastAttemptResult"`
	// Optional. Last exit code seen for this instance. +optional
	LastExitCode *int `pulumi:"lastExitCode"`
	// Optional. The number of times this instance was restarted. Instances are restarted according the restartPolicy configured in the Job template. +optional
	Restarted *int `pulumi:"restarted"`
	// Optional. Represents time when the instance was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	StartTime *string `pulumi:"startTime"`
	// Optional. The number of times this instance exited with code == 0. +optional
	Succeeded *int `pulumi:"succeeded"`
}

// InstanceStatusInput is an input type that accepts InstanceStatusArgs and InstanceStatusOutput values.
// You can construct a concrete instance of `InstanceStatusInput` via:
//
//          InstanceStatusArgs{...}
type InstanceStatusInput interface {
	pulumi.Input

	ToInstanceStatusOutput() InstanceStatusOutput
	ToInstanceStatusOutputWithContext(context.Context) InstanceStatusOutput
}

// Instance represents the status of an instance of a Job.
type InstanceStatusArgs struct {
	// Optional. Represents time when the instance was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// Optional. The number of times this instance exited with code > 0; +optional
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// Index of the instance, unique per Job, and beginning at 0.
	Index pulumi.IntInput `pulumi:"index"`
	// Optional. Result of the last attempt of this instance. +optional
	LastAttemptResult InstanceAttemptResultPtrInput `pulumi:"lastAttemptResult"`
	// Optional. Last exit code seen for this instance. +optional
	LastExitCode pulumi.IntPtrInput `pulumi:"lastExitCode"`
	// Optional. The number of times this instance was restarted. Instances are restarted according the restartPolicy configured in the Job template. +optional
	Restarted pulumi.IntPtrInput `pulumi:"restarted"`
	// Optional. Represents time when the instance was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Optional. The number of times this instance exited with code == 0. +optional
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
}

func (InstanceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStatus)(nil)).Elem()
}

func (i InstanceStatusArgs) ToInstanceStatusOutput() InstanceStatusOutput {
	return i.ToInstanceStatusOutputWithContext(context.Background())
}

func (i InstanceStatusArgs) ToInstanceStatusOutputWithContext(ctx context.Context) InstanceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStatusOutput)
}

// InstanceStatusArrayInput is an input type that accepts InstanceStatusArray and InstanceStatusArrayOutput values.
// You can construct a concrete instance of `InstanceStatusArrayInput` via:
//
//          InstanceStatusArray{ InstanceStatusArgs{...} }
type InstanceStatusArrayInput interface {
	pulumi.Input

	ToInstanceStatusArrayOutput() InstanceStatusArrayOutput
	ToInstanceStatusArrayOutputWithContext(context.Context) InstanceStatusArrayOutput
}

type InstanceStatusArray []InstanceStatusInput

func (InstanceStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceStatus)(nil)).Elem()
}

func (i InstanceStatusArray) ToInstanceStatusArrayOutput() InstanceStatusArrayOutput {
	return i.ToInstanceStatusArrayOutputWithContext(context.Background())
}

func (i InstanceStatusArray) ToInstanceStatusArrayOutputWithContext(ctx context.Context) InstanceStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStatusArrayOutput)
}

// Instance represents the status of an instance of a Job.
type InstanceStatusOutput struct{ *pulumi.OutputState }

func (InstanceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStatus)(nil)).Elem()
}

func (o InstanceStatusOutput) ToInstanceStatusOutput() InstanceStatusOutput {
	return o
}

func (o InstanceStatusOutput) ToInstanceStatusOutputWithContext(ctx context.Context) InstanceStatusOutput {
	return o
}

// Optional. Represents time when the instance was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o InstanceStatusOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceStatus) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// Optional. The number of times this instance exited with code > 0; +optional
func (o InstanceStatusOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceStatus) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// Index of the instance, unique per Job, and beginning at 0.
func (o InstanceStatusOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceStatus) int { return v.Index }).(pulumi.IntOutput)
}

// Optional. Result of the last attempt of this instance. +optional
func (o InstanceStatusOutput) LastAttemptResult() InstanceAttemptResultPtrOutput {
	return o.ApplyT(func(v InstanceStatus) *InstanceAttemptResult { return v.LastAttemptResult }).(InstanceAttemptResultPtrOutput)
}

// Optional. Last exit code seen for this instance. +optional
func (o InstanceStatusOutput) LastExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceStatus) *int { return v.LastExitCode }).(pulumi.IntPtrOutput)
}

// Optional. The number of times this instance was restarted. Instances are restarted according the restartPolicy configured in the Job template. +optional
func (o InstanceStatusOutput) Restarted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceStatus) *int { return v.Restarted }).(pulumi.IntPtrOutput)
}

// Optional. Represents time when the instance was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o InstanceStatusOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceStatus) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Optional. The number of times this instance exited with code == 0. +optional
func (o InstanceStatusOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceStatus) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

type InstanceStatusArrayOutput struct{ *pulumi.OutputState }

func (InstanceStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceStatus)(nil)).Elem()
}

func (o InstanceStatusArrayOutput) ToInstanceStatusArrayOutput() InstanceStatusArrayOutput {
	return o
}

func (o InstanceStatusArrayOutput) ToInstanceStatusArrayOutputWithContext(ctx context.Context) InstanceStatusArrayOutput {
	return o
}

func (o InstanceStatusArrayOutput) Index(i pulumi.IntInput) InstanceStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceStatus {
		return vs[0].([]InstanceStatus)[vs[1].(int)]
	}).(InstanceStatusOutput)
}

// Instance represents the status of an instance of a Job.
type InstanceStatusResponse struct {
	// Optional. Represents time when the instance was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	CompletionTime string `pulumi:"completionTime"`
	// Optional. The number of times this instance exited with code > 0; +optional
	Failed int `pulumi:"failed"`
	// Index of the instance, unique per Job, and beginning at 0.
	Index int `pulumi:"index"`
	// Optional. Result of the last attempt of this instance. +optional
	LastAttemptResult InstanceAttemptResultResponse `pulumi:"lastAttemptResult"`
	// Optional. Last exit code seen for this instance. +optional
	LastExitCode int `pulumi:"lastExitCode"`
	// Optional. The number of times this instance was restarted. Instances are restarted according the restartPolicy configured in the Job template. +optional
	Restarted int `pulumi:"restarted"`
	// Optional. Represents time when the instance was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	StartTime string `pulumi:"startTime"`
	// Optional. The number of times this instance exited with code == 0. +optional
	Succeeded int `pulumi:"succeeded"`
}

// InstanceStatusResponseInput is an input type that accepts InstanceStatusResponseArgs and InstanceStatusResponseOutput values.
// You can construct a concrete instance of `InstanceStatusResponseInput` via:
//
//          InstanceStatusResponseArgs{...}
type InstanceStatusResponseInput interface {
	pulumi.Input

	ToInstanceStatusResponseOutput() InstanceStatusResponseOutput
	ToInstanceStatusResponseOutputWithContext(context.Context) InstanceStatusResponseOutput
}

// Instance represents the status of an instance of a Job.
type InstanceStatusResponseArgs struct {
	// Optional. Represents time when the instance was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	CompletionTime pulumi.StringInput `pulumi:"completionTime"`
	// Optional. The number of times this instance exited with code > 0; +optional
	Failed pulumi.IntInput `pulumi:"failed"`
	// Index of the instance, unique per Job, and beginning at 0.
	Index pulumi.IntInput `pulumi:"index"`
	// Optional. Result of the last attempt of this instance. +optional
	LastAttemptResult InstanceAttemptResultResponseInput `pulumi:"lastAttemptResult"`
	// Optional. Last exit code seen for this instance. +optional
	LastExitCode pulumi.IntInput `pulumi:"lastExitCode"`
	// Optional. The number of times this instance was restarted. Instances are restarted according the restartPolicy configured in the Job template. +optional
	Restarted pulumi.IntInput `pulumi:"restarted"`
	// Optional. Represents time when the instance was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Optional. The number of times this instance exited with code == 0. +optional
	Succeeded pulumi.IntInput `pulumi:"succeeded"`
}

func (InstanceStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStatusResponse)(nil)).Elem()
}

func (i InstanceStatusResponseArgs) ToInstanceStatusResponseOutput() InstanceStatusResponseOutput {
	return i.ToInstanceStatusResponseOutputWithContext(context.Background())
}

func (i InstanceStatusResponseArgs) ToInstanceStatusResponseOutputWithContext(ctx context.Context) InstanceStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStatusResponseOutput)
}

// InstanceStatusResponseArrayInput is an input type that accepts InstanceStatusResponseArray and InstanceStatusResponseArrayOutput values.
// You can construct a concrete instance of `InstanceStatusResponseArrayInput` via:
//
//          InstanceStatusResponseArray{ InstanceStatusResponseArgs{...} }
type InstanceStatusResponseArrayInput interface {
	pulumi.Input

	ToInstanceStatusResponseArrayOutput() InstanceStatusResponseArrayOutput
	ToInstanceStatusResponseArrayOutputWithContext(context.Context) InstanceStatusResponseArrayOutput
}

type InstanceStatusResponseArray []InstanceStatusResponseInput

func (InstanceStatusResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceStatusResponse)(nil)).Elem()
}

func (i InstanceStatusResponseArray) ToInstanceStatusResponseArrayOutput() InstanceStatusResponseArrayOutput {
	return i.ToInstanceStatusResponseArrayOutputWithContext(context.Background())
}

func (i InstanceStatusResponseArray) ToInstanceStatusResponseArrayOutputWithContext(ctx context.Context) InstanceStatusResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStatusResponseArrayOutput)
}

// Instance represents the status of an instance of a Job.
type InstanceStatusResponseOutput struct{ *pulumi.OutputState }

func (InstanceStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceStatusResponse)(nil)).Elem()
}

func (o InstanceStatusResponseOutput) ToInstanceStatusResponseOutput() InstanceStatusResponseOutput {
	return o
}

func (o InstanceStatusResponseOutput) ToInstanceStatusResponseOutputWithContext(ctx context.Context) InstanceStatusResponseOutput {
	return o
}

// Optional. Represents time when the instance was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o InstanceStatusResponseOutput) CompletionTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceStatusResponse) string { return v.CompletionTime }).(pulumi.StringOutput)
}

// Optional. The number of times this instance exited with code > 0; +optional
func (o InstanceStatusResponseOutput) Failed() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceStatusResponse) int { return v.Failed }).(pulumi.IntOutput)
}

// Index of the instance, unique per Job, and beginning at 0.
func (o InstanceStatusResponseOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceStatusResponse) int { return v.Index }).(pulumi.IntOutput)
}

// Optional. Result of the last attempt of this instance. +optional
func (o InstanceStatusResponseOutput) LastAttemptResult() InstanceAttemptResultResponseOutput {
	return o.ApplyT(func(v InstanceStatusResponse) InstanceAttemptResultResponse { return v.LastAttemptResult }).(InstanceAttemptResultResponseOutput)
}

// Optional. Last exit code seen for this instance. +optional
func (o InstanceStatusResponseOutput) LastExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceStatusResponse) int { return v.LastExitCode }).(pulumi.IntOutput)
}

// Optional. The number of times this instance was restarted. Instances are restarted according the restartPolicy configured in the Job template. +optional
func (o InstanceStatusResponseOutput) Restarted() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceStatusResponse) int { return v.Restarted }).(pulumi.IntOutput)
}

// Optional. Represents time when the instance was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o InstanceStatusResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceStatusResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Optional. The number of times this instance exited with code == 0. +optional
func (o InstanceStatusResponseOutput) Succeeded() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceStatusResponse) int { return v.Succeeded }).(pulumi.IntOutput)
}

type InstanceStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (InstanceStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceStatusResponse)(nil)).Elem()
}

func (o InstanceStatusResponseArrayOutput) ToInstanceStatusResponseArrayOutput() InstanceStatusResponseArrayOutput {
	return o
}

func (o InstanceStatusResponseArrayOutput) ToInstanceStatusResponseArrayOutputWithContext(ctx context.Context) InstanceStatusResponseArrayOutput {
	return o
}

func (o InstanceStatusResponseArrayOutput) Index(i pulumi.IntInput) InstanceStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceStatusResponse {
		return vs[0].([]InstanceStatusResponse)[vs[1].(int)]
	}).(InstanceStatusResponseOutput)
}

// InstanceTemplateSpec describes the data an instance should have when created from a template.
type InstanceTemplateSpec struct {
	// Optional. Specification of the desired behavior of the instance. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status +optional
	Spec *InstanceSpec `pulumi:"spec"`
}

// InstanceTemplateSpecInput is an input type that accepts InstanceTemplateSpecArgs and InstanceTemplateSpecOutput values.
// You can construct a concrete instance of `InstanceTemplateSpecInput` via:
//
//          InstanceTemplateSpecArgs{...}
type InstanceTemplateSpecInput interface {
	pulumi.Input

	ToInstanceTemplateSpecOutput() InstanceTemplateSpecOutput
	ToInstanceTemplateSpecOutputWithContext(context.Context) InstanceTemplateSpecOutput
}

// InstanceTemplateSpec describes the data an instance should have when created from a template.
type InstanceTemplateSpecArgs struct {
	// Optional. Specification of the desired behavior of the instance. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status +optional
	Spec InstanceSpecPtrInput `pulumi:"spec"`
}

func (InstanceTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateSpec)(nil)).Elem()
}

func (i InstanceTemplateSpecArgs) ToInstanceTemplateSpecOutput() InstanceTemplateSpecOutput {
	return i.ToInstanceTemplateSpecOutputWithContext(context.Background())
}

func (i InstanceTemplateSpecArgs) ToInstanceTemplateSpecOutputWithContext(ctx context.Context) InstanceTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSpecOutput)
}

func (i InstanceTemplateSpecArgs) ToInstanceTemplateSpecPtrOutput() InstanceTemplateSpecPtrOutput {
	return i.ToInstanceTemplateSpecPtrOutputWithContext(context.Background())
}

func (i InstanceTemplateSpecArgs) ToInstanceTemplateSpecPtrOutputWithContext(ctx context.Context) InstanceTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSpecOutput).ToInstanceTemplateSpecPtrOutputWithContext(ctx)
}

// InstanceTemplateSpecPtrInput is an input type that accepts InstanceTemplateSpecArgs, InstanceTemplateSpecPtr and InstanceTemplateSpecPtrOutput values.
// You can construct a concrete instance of `InstanceTemplateSpecPtrInput` via:
//
//          InstanceTemplateSpecArgs{...}
//
//  or:
//
//          nil
type InstanceTemplateSpecPtrInput interface {
	pulumi.Input

	ToInstanceTemplateSpecPtrOutput() InstanceTemplateSpecPtrOutput
	ToInstanceTemplateSpecPtrOutputWithContext(context.Context) InstanceTemplateSpecPtrOutput
}

type instanceTemplateSpecPtrType InstanceTemplateSpecArgs

func InstanceTemplateSpecPtr(v *InstanceTemplateSpecArgs) InstanceTemplateSpecPtrInput {
	return (*instanceTemplateSpecPtrType)(v)
}

func (*instanceTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateSpec)(nil)).Elem()
}

func (i *instanceTemplateSpecPtrType) ToInstanceTemplateSpecPtrOutput() InstanceTemplateSpecPtrOutput {
	return i.ToInstanceTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *instanceTemplateSpecPtrType) ToInstanceTemplateSpecPtrOutputWithContext(ctx context.Context) InstanceTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSpecPtrOutput)
}

// InstanceTemplateSpec describes the data an instance should have when created from a template.
type InstanceTemplateSpecOutput struct{ *pulumi.OutputState }

func (InstanceTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateSpec)(nil)).Elem()
}

func (o InstanceTemplateSpecOutput) ToInstanceTemplateSpecOutput() InstanceTemplateSpecOutput {
	return o
}

func (o InstanceTemplateSpecOutput) ToInstanceTemplateSpecOutputWithContext(ctx context.Context) InstanceTemplateSpecOutput {
	return o
}

func (o InstanceTemplateSpecOutput) ToInstanceTemplateSpecPtrOutput() InstanceTemplateSpecPtrOutput {
	return o.ToInstanceTemplateSpecPtrOutputWithContext(context.Background())
}

func (o InstanceTemplateSpecOutput) ToInstanceTemplateSpecPtrOutputWithContext(ctx context.Context) InstanceTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceTemplateSpec) *InstanceTemplateSpec {
		return &v
	}).(InstanceTemplateSpecPtrOutput)
}

// Optional. Specification of the desired behavior of the instance. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status +optional
func (o InstanceTemplateSpecOutput) Spec() InstanceSpecPtrOutput {
	return o.ApplyT(func(v InstanceTemplateSpec) *InstanceSpec { return v.Spec }).(InstanceSpecPtrOutput)
}

type InstanceTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (InstanceTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateSpec)(nil)).Elem()
}

func (o InstanceTemplateSpecPtrOutput) ToInstanceTemplateSpecPtrOutput() InstanceTemplateSpecPtrOutput {
	return o
}

func (o InstanceTemplateSpecPtrOutput) ToInstanceTemplateSpecPtrOutputWithContext(ctx context.Context) InstanceTemplateSpecPtrOutput {
	return o
}

func (o InstanceTemplateSpecPtrOutput) Elem() InstanceTemplateSpecOutput {
	return o.ApplyT(func(v *InstanceTemplateSpec) InstanceTemplateSpec {
		if v != nil {
			return *v
		}
		var ret InstanceTemplateSpec
		return ret
	}).(InstanceTemplateSpecOutput)
}

// Optional. Specification of the desired behavior of the instance. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status +optional
func (o InstanceTemplateSpecPtrOutput) Spec() InstanceSpecPtrOutput {
	return o.ApplyT(func(v *InstanceTemplateSpec) *InstanceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(InstanceSpecPtrOutput)
}

// InstanceTemplateSpec describes the data an instance should have when created from a template.
type InstanceTemplateSpecResponse struct {
	// Optional. Specification of the desired behavior of the instance. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status +optional
	Spec InstanceSpecResponse `pulumi:"spec"`
}

// InstanceTemplateSpecResponseInput is an input type that accepts InstanceTemplateSpecResponseArgs and InstanceTemplateSpecResponseOutput values.
// You can construct a concrete instance of `InstanceTemplateSpecResponseInput` via:
//
//          InstanceTemplateSpecResponseArgs{...}
type InstanceTemplateSpecResponseInput interface {
	pulumi.Input

	ToInstanceTemplateSpecResponseOutput() InstanceTemplateSpecResponseOutput
	ToInstanceTemplateSpecResponseOutputWithContext(context.Context) InstanceTemplateSpecResponseOutput
}

// InstanceTemplateSpec describes the data an instance should have when created from a template.
type InstanceTemplateSpecResponseArgs struct {
	// Optional. Specification of the desired behavior of the instance. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status +optional
	Spec InstanceSpecResponseInput `pulumi:"spec"`
}

func (InstanceTemplateSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateSpecResponse)(nil)).Elem()
}

func (i InstanceTemplateSpecResponseArgs) ToInstanceTemplateSpecResponseOutput() InstanceTemplateSpecResponseOutput {
	return i.ToInstanceTemplateSpecResponseOutputWithContext(context.Background())
}

func (i InstanceTemplateSpecResponseArgs) ToInstanceTemplateSpecResponseOutputWithContext(ctx context.Context) InstanceTemplateSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSpecResponseOutput)
}

func (i InstanceTemplateSpecResponseArgs) ToInstanceTemplateSpecResponsePtrOutput() InstanceTemplateSpecResponsePtrOutput {
	return i.ToInstanceTemplateSpecResponsePtrOutputWithContext(context.Background())
}

func (i InstanceTemplateSpecResponseArgs) ToInstanceTemplateSpecResponsePtrOutputWithContext(ctx context.Context) InstanceTemplateSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSpecResponseOutput).ToInstanceTemplateSpecResponsePtrOutputWithContext(ctx)
}

// InstanceTemplateSpecResponsePtrInput is an input type that accepts InstanceTemplateSpecResponseArgs, InstanceTemplateSpecResponsePtr and InstanceTemplateSpecResponsePtrOutput values.
// You can construct a concrete instance of `InstanceTemplateSpecResponsePtrInput` via:
//
//          InstanceTemplateSpecResponseArgs{...}
//
//  or:
//
//          nil
type InstanceTemplateSpecResponsePtrInput interface {
	pulumi.Input

	ToInstanceTemplateSpecResponsePtrOutput() InstanceTemplateSpecResponsePtrOutput
	ToInstanceTemplateSpecResponsePtrOutputWithContext(context.Context) InstanceTemplateSpecResponsePtrOutput
}

type instanceTemplateSpecResponsePtrType InstanceTemplateSpecResponseArgs

func InstanceTemplateSpecResponsePtr(v *InstanceTemplateSpecResponseArgs) InstanceTemplateSpecResponsePtrInput {
	return (*instanceTemplateSpecResponsePtrType)(v)
}

func (*instanceTemplateSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateSpecResponse)(nil)).Elem()
}

func (i *instanceTemplateSpecResponsePtrType) ToInstanceTemplateSpecResponsePtrOutput() InstanceTemplateSpecResponsePtrOutput {
	return i.ToInstanceTemplateSpecResponsePtrOutputWithContext(context.Background())
}

func (i *instanceTemplateSpecResponsePtrType) ToInstanceTemplateSpecResponsePtrOutputWithContext(ctx context.Context) InstanceTemplateSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTemplateSpecResponsePtrOutput)
}

// InstanceTemplateSpec describes the data an instance should have when created from a template.
type InstanceTemplateSpecResponseOutput struct{ *pulumi.OutputState }

func (InstanceTemplateSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTemplateSpecResponse)(nil)).Elem()
}

func (o InstanceTemplateSpecResponseOutput) ToInstanceTemplateSpecResponseOutput() InstanceTemplateSpecResponseOutput {
	return o
}

func (o InstanceTemplateSpecResponseOutput) ToInstanceTemplateSpecResponseOutputWithContext(ctx context.Context) InstanceTemplateSpecResponseOutput {
	return o
}

func (o InstanceTemplateSpecResponseOutput) ToInstanceTemplateSpecResponsePtrOutput() InstanceTemplateSpecResponsePtrOutput {
	return o.ToInstanceTemplateSpecResponsePtrOutputWithContext(context.Background())
}

func (o InstanceTemplateSpecResponseOutput) ToInstanceTemplateSpecResponsePtrOutputWithContext(ctx context.Context) InstanceTemplateSpecResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceTemplateSpecResponse) *InstanceTemplateSpecResponse {
		return &v
	}).(InstanceTemplateSpecResponsePtrOutput)
}

// Optional. Specification of the desired behavior of the instance. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status +optional
func (o InstanceTemplateSpecResponseOutput) Spec() InstanceSpecResponseOutput {
	return o.ApplyT(func(v InstanceTemplateSpecResponse) InstanceSpecResponse { return v.Spec }).(InstanceSpecResponseOutput)
}

type InstanceTemplateSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (InstanceTemplateSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTemplateSpecResponse)(nil)).Elem()
}

func (o InstanceTemplateSpecResponsePtrOutput) ToInstanceTemplateSpecResponsePtrOutput() InstanceTemplateSpecResponsePtrOutput {
	return o
}

func (o InstanceTemplateSpecResponsePtrOutput) ToInstanceTemplateSpecResponsePtrOutputWithContext(ctx context.Context) InstanceTemplateSpecResponsePtrOutput {
	return o
}

func (o InstanceTemplateSpecResponsePtrOutput) Elem() InstanceTemplateSpecResponseOutput {
	return o.ApplyT(func(v *InstanceTemplateSpecResponse) InstanceTemplateSpecResponse {
		if v != nil {
			return *v
		}
		var ret InstanceTemplateSpecResponse
		return ret
	}).(InstanceTemplateSpecResponseOutput)
}

// Optional. Specification of the desired behavior of the instance. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status +optional
func (o InstanceTemplateSpecResponsePtrOutput) Spec() InstanceSpecResponsePtrOutput {
	return o.ApplyT(func(v *InstanceTemplateSpecResponse) *InstanceSpecResponse {
		if v == nil {
			return nil
		}
		return &v.Spec
	}).(InstanceSpecResponsePtrOutput)
}

// JobCondition defines a readiness condition for a Revision.
type JobCondition struct {
	// Optional. Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Optional. Human readable message indicating details about the current status.
	Message *string `pulumi:"message"`
	// Optional. One-word CamelCase reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Optional. How to interpret failures of this condition, one of Error, Warning, Info
	Severity *string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types include: * "Completed": True when the Job has successfully completed. * "Started": True when the Job has successfully started running. * "ResourcesAvailable": True when underlying resources have been provisioned.
	Type string `pulumi:"type"`
}

// JobConditionInput is an input type that accepts JobConditionArgs and JobConditionOutput values.
// You can construct a concrete instance of `JobConditionInput` via:
//
//          JobConditionArgs{...}
type JobConditionInput interface {
	pulumi.Input

	ToJobConditionOutput() JobConditionOutput
	ToJobConditionOutputWithContext(context.Context) JobConditionOutput
}

// JobCondition defines a readiness condition for a Revision.
type JobConditionArgs struct {
	// Optional. Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Optional. Human readable message indicating details about the current status.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Optional. One-word CamelCase reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Optional. How to interpret failures of this condition, one of Error, Warning, Info
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types include: * "Completed": True when the Job has successfully completed. * "Started": True when the Job has successfully started running. * "ResourcesAvailable": True when underlying resources have been provisioned.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JobConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCondition)(nil)).Elem()
}

func (i JobConditionArgs) ToJobConditionOutput() JobConditionOutput {
	return i.ToJobConditionOutputWithContext(context.Background())
}

func (i JobConditionArgs) ToJobConditionOutputWithContext(ctx context.Context) JobConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConditionOutput)
}

// JobConditionArrayInput is an input type that accepts JobConditionArray and JobConditionArrayOutput values.
// You can construct a concrete instance of `JobConditionArrayInput` via:
//
//          JobConditionArray{ JobConditionArgs{...} }
type JobConditionArrayInput interface {
	pulumi.Input

	ToJobConditionArrayOutput() JobConditionArrayOutput
	ToJobConditionArrayOutputWithContext(context.Context) JobConditionArrayOutput
}

type JobConditionArray []JobConditionInput

func (JobConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobCondition)(nil)).Elem()
}

func (i JobConditionArray) ToJobConditionArrayOutput() JobConditionArrayOutput {
	return i.ToJobConditionArrayOutputWithContext(context.Background())
}

func (i JobConditionArray) ToJobConditionArrayOutputWithContext(ctx context.Context) JobConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConditionArrayOutput)
}

// JobCondition defines a readiness condition for a Revision.
type JobConditionOutput struct{ *pulumi.OutputState }

func (JobConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCondition)(nil)).Elem()
}

func (o JobConditionOutput) ToJobConditionOutput() JobConditionOutput {
	return o
}

func (o JobConditionOutput) ToJobConditionOutputWithContext(ctx context.Context) JobConditionOutput {
	return o
}

// Optional. Last time the condition transitioned from one status to another.
func (o JobConditionOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Optional. Human readable message indicating details about the current status.
func (o JobConditionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Optional. One-word CamelCase reason for the condition's last transition.
func (o JobConditionOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Optional. How to interpret failures of this condition, one of Error, Warning, Info
func (o JobConditionOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobCondition) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o JobConditionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v JobCondition) string { return v.Status }).(pulumi.StringOutput)
}

// Type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types include: * "Completed": True when the Job has successfully completed. * "Started": True when the Job has successfully started running. * "ResourcesAvailable": True when underlying resources have been provisioned.
func (o JobConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JobCondition) string { return v.Type }).(pulumi.StringOutput)
}

type JobConditionArrayOutput struct{ *pulumi.OutputState }

func (JobConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobCondition)(nil)).Elem()
}

func (o JobConditionArrayOutput) ToJobConditionArrayOutput() JobConditionArrayOutput {
	return o
}

func (o JobConditionArrayOutput) ToJobConditionArrayOutputWithContext(ctx context.Context) JobConditionArrayOutput {
	return o
}

func (o JobConditionArrayOutput) Index(i pulumi.IntInput) JobConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobCondition {
		return vs[0].([]JobCondition)[vs[1].(int)]
	}).(JobConditionOutput)
}

// JobCondition defines a readiness condition for a Revision.
type JobConditionResponse struct {
	// Optional. Last time the condition transitioned from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// Optional. Human readable message indicating details about the current status.
	Message string `pulumi:"message"`
	// Optional. One-word CamelCase reason for the condition's last transition.
	Reason string `pulumi:"reason"`
	// Optional. How to interpret failures of this condition, one of Error, Warning, Info
	Severity string `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types include: * "Completed": True when the Job has successfully completed. * "Started": True when the Job has successfully started running. * "ResourcesAvailable": True when underlying resources have been provisioned.
	Type string `pulumi:"type"`
}

// JobConditionResponseInput is an input type that accepts JobConditionResponseArgs and JobConditionResponseOutput values.
// You can construct a concrete instance of `JobConditionResponseInput` via:
//
//          JobConditionResponseArgs{...}
type JobConditionResponseInput interface {
	pulumi.Input

	ToJobConditionResponseOutput() JobConditionResponseOutput
	ToJobConditionResponseOutputWithContext(context.Context) JobConditionResponseOutput
}

// JobCondition defines a readiness condition for a Revision.
type JobConditionResponseArgs struct {
	// Optional. Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// Optional. Human readable message indicating details about the current status.
	Message pulumi.StringInput `pulumi:"message"`
	// Optional. One-word CamelCase reason for the condition's last transition.
	Reason pulumi.StringInput `pulumi:"reason"`
	// Optional. How to interpret failures of this condition, one of Error, Warning, Info
	Severity pulumi.StringInput `pulumi:"severity"`
	// Status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// Type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types include: * "Completed": True when the Job has successfully completed. * "Started": True when the Job has successfully started running. * "ResourcesAvailable": True when underlying resources have been provisioned.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JobConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConditionResponse)(nil)).Elem()
}

func (i JobConditionResponseArgs) ToJobConditionResponseOutput() JobConditionResponseOutput {
	return i.ToJobConditionResponseOutputWithContext(context.Background())
}

func (i JobConditionResponseArgs) ToJobConditionResponseOutputWithContext(ctx context.Context) JobConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConditionResponseOutput)
}

// JobConditionResponseArrayInput is an input type that accepts JobConditionResponseArray and JobConditionResponseArrayOutput values.
// You can construct a concrete instance of `JobConditionResponseArrayInput` via:
//
//          JobConditionResponseArray{ JobConditionResponseArgs{...} }
type JobConditionResponseArrayInput interface {
	pulumi.Input

	ToJobConditionResponseArrayOutput() JobConditionResponseArrayOutput
	ToJobConditionResponseArrayOutputWithContext(context.Context) JobConditionResponseArrayOutput
}

type JobConditionResponseArray []JobConditionResponseInput

func (JobConditionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobConditionResponse)(nil)).Elem()
}

func (i JobConditionResponseArray) ToJobConditionResponseArrayOutput() JobConditionResponseArrayOutput {
	return i.ToJobConditionResponseArrayOutputWithContext(context.Background())
}

func (i JobConditionResponseArray) ToJobConditionResponseArrayOutputWithContext(ctx context.Context) JobConditionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConditionResponseArrayOutput)
}

// JobCondition defines a readiness condition for a Revision.
type JobConditionResponseOutput struct{ *pulumi.OutputState }

func (JobConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConditionResponse)(nil)).Elem()
}

func (o JobConditionResponseOutput) ToJobConditionResponseOutput() JobConditionResponseOutput {
	return o
}

func (o JobConditionResponseOutput) ToJobConditionResponseOutputWithContext(ctx context.Context) JobConditionResponseOutput {
	return o
}

// Optional. Last time the condition transitioned from one status to another.
func (o JobConditionResponseOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobConditionResponse) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// Optional. Human readable message indicating details about the current status.
func (o JobConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v JobConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Optional. One-word CamelCase reason for the condition's last transition.
func (o JobConditionResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v JobConditionResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// Optional. How to interpret failures of this condition, one of Error, Warning, Info
func (o JobConditionResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v JobConditionResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o JobConditionResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v JobConditionResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types include: * "Completed": True when the Job has successfully completed. * "Started": True when the Job has successfully started running. * "ResourcesAvailable": True when underlying resources have been provisioned.
func (o JobConditionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JobConditionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type JobConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (JobConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobConditionResponse)(nil)).Elem()
}

func (o JobConditionResponseArrayOutput) ToJobConditionResponseArrayOutput() JobConditionResponseArrayOutput {
	return o
}

func (o JobConditionResponseArrayOutput) ToJobConditionResponseArrayOutputWithContext(ctx context.Context) JobConditionResponseArrayOutput {
	return o
}

func (o JobConditionResponseArrayOutput) Index(i pulumi.IntInput) JobConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobConditionResponse {
		return vs[0].([]JobConditionResponse)[vs[1].(int)]
	}).(JobConditionResponseOutput)
}

// JobSpec describes how the job execution will look like.
type JobSpec struct {
	// Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional
	ActiveDeadlineSeconds *string `pulumi:"activeDeadlineSeconds"`
	// Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional
	BackoffLimit *int `pulumi:"backoffLimit"`
	// Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Completions *int `pulumi:"completions"`
	// Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be <= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Parallelism *int `pulumi:"parallelism"`
	// Optional. Describes the instance that will be created when executing a job.
	Template *InstanceTemplateSpec `pulumi:"template"`
	// Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional
	TtlSecondsAfterFinished *int `pulumi:"ttlSecondsAfterFinished"`
}

// JobSpecInput is an input type that accepts JobSpecArgs and JobSpecOutput values.
// You can construct a concrete instance of `JobSpecInput` via:
//
//          JobSpecArgs{...}
type JobSpecInput interface {
	pulumi.Input

	ToJobSpecOutput() JobSpecOutput
	ToJobSpecOutputWithContext(context.Context) JobSpecOutput
}

// JobSpec describes how the job execution will look like.
type JobSpecArgs struct {
	// Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional
	ActiveDeadlineSeconds pulumi.StringPtrInput `pulumi:"activeDeadlineSeconds"`
	// Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional
	BackoffLimit pulumi.IntPtrInput `pulumi:"backoffLimit"`
	// Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Completions pulumi.IntPtrInput `pulumi:"completions"`
	// Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be <= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
	// Optional. Describes the instance that will be created when executing a job.
	Template InstanceTemplateSpecPtrInput `pulumi:"template"`
	// Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional
	TtlSecondsAfterFinished pulumi.IntPtrInput `pulumi:"ttlSecondsAfterFinished"`
}

func (JobSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpec)(nil)).Elem()
}

func (i JobSpecArgs) ToJobSpecOutput() JobSpecOutput {
	return i.ToJobSpecOutputWithContext(context.Background())
}

func (i JobSpecArgs) ToJobSpecOutputWithContext(ctx context.Context) JobSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecOutput)
}

func (i JobSpecArgs) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return i.ToJobSpecPtrOutputWithContext(context.Background())
}

func (i JobSpecArgs) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecOutput).ToJobSpecPtrOutputWithContext(ctx)
}

// JobSpecPtrInput is an input type that accepts JobSpecArgs, JobSpecPtr and JobSpecPtrOutput values.
// You can construct a concrete instance of `JobSpecPtrInput` via:
//
//          JobSpecArgs{...}
//
//  or:
//
//          nil
type JobSpecPtrInput interface {
	pulumi.Input

	ToJobSpecPtrOutput() JobSpecPtrOutput
	ToJobSpecPtrOutputWithContext(context.Context) JobSpecPtrOutput
}

type jobSpecPtrType JobSpecArgs

func JobSpecPtr(v *JobSpecArgs) JobSpecPtrInput {
	return (*jobSpecPtrType)(v)
}

func (*jobSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobSpec)(nil)).Elem()
}

func (i *jobSpecPtrType) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return i.ToJobSpecPtrOutputWithContext(context.Background())
}

func (i *jobSpecPtrType) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecPtrOutput)
}

// JobSpec describes how the job execution will look like.
type JobSpecOutput struct{ *pulumi.OutputState }

func (JobSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpec)(nil)).Elem()
}

func (o JobSpecOutput) ToJobSpecOutput() JobSpecOutput {
	return o
}

func (o JobSpecOutput) ToJobSpecOutputWithContext(ctx context.Context) JobSpecOutput {
	return o
}

func (o JobSpecOutput) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return o.ToJobSpecPtrOutputWithContext(context.Background())
}

func (o JobSpecOutput) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobSpec) *JobSpec {
		return &v
	}).(JobSpecPtrOutput)
}

// Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional
func (o JobSpecOutput) ActiveDeadlineSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobSpec) *string { return v.ActiveDeadlineSeconds }).(pulumi.StringPtrOutput)
}

// Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional
func (o JobSpecOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.BackoffLimit }).(pulumi.IntPtrOutput)
}

// Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobSpecOutput) Completions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.Completions }).(pulumi.IntPtrOutput)
}

// Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be <= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobSpecOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Optional. Describes the instance that will be created when executing a job.
func (o JobSpecOutput) Template() InstanceTemplateSpecPtrOutput {
	return o.ApplyT(func(v JobSpec) *InstanceTemplateSpec { return v.Template }).(InstanceTemplateSpecPtrOutput)
}

// Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional
func (o JobSpecOutput) TtlSecondsAfterFinished() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobSpec) *int { return v.TtlSecondsAfterFinished }).(pulumi.IntPtrOutput)
}

type JobSpecPtrOutput struct{ *pulumi.OutputState }

func (JobSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobSpec)(nil)).Elem()
}

func (o JobSpecPtrOutput) ToJobSpecPtrOutput() JobSpecPtrOutput {
	return o
}

func (o JobSpecPtrOutput) ToJobSpecPtrOutputWithContext(ctx context.Context) JobSpecPtrOutput {
	return o
}

func (o JobSpecPtrOutput) Elem() JobSpecOutput {
	return o.ApplyT(func(v *JobSpec) JobSpec {
		if v != nil {
			return *v
		}
		var ret JobSpec
		return ret
	}).(JobSpecOutput)
}

// Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional
func (o JobSpecPtrOutput) ActiveDeadlineSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobSpec) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDeadlineSeconds
	}).(pulumi.StringPtrOutput)
}

// Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional
func (o JobSpecPtrOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.BackoffLimit
	}).(pulumi.IntPtrOutput)
}

// Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobSpecPtrOutput) Completions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.Completions
	}).(pulumi.IntPtrOutput)
}

// Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be <= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobSpecPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Optional. Describes the instance that will be created when executing a job.
func (o JobSpecPtrOutput) Template() InstanceTemplateSpecPtrOutput {
	return o.ApplyT(func(v *JobSpec) *InstanceTemplateSpec {
		if v == nil {
			return nil
		}
		return v.Template
	}).(InstanceTemplateSpecPtrOutput)
}

// Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional
func (o JobSpecPtrOutput) TtlSecondsAfterFinished() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpec) *int {
		if v == nil {
			return nil
		}
		return v.TtlSecondsAfterFinished
	}).(pulumi.IntPtrOutput)
}

// JobSpec describes how the job execution will look like.
type JobSpecResponse struct {
	// Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional
	ActiveDeadlineSeconds string `pulumi:"activeDeadlineSeconds"`
	// Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional
	BackoffLimit int `pulumi:"backoffLimit"`
	// Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Completions int `pulumi:"completions"`
	// Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be <= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Parallelism int `pulumi:"parallelism"`
	// Optional. Describes the instance that will be created when executing a job.
	Template InstanceTemplateSpecResponse `pulumi:"template"`
	// Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional
	TtlSecondsAfterFinished int `pulumi:"ttlSecondsAfterFinished"`
}

// JobSpecResponseInput is an input type that accepts JobSpecResponseArgs and JobSpecResponseOutput values.
// You can construct a concrete instance of `JobSpecResponseInput` via:
//
//          JobSpecResponseArgs{...}
type JobSpecResponseInput interface {
	pulumi.Input

	ToJobSpecResponseOutput() JobSpecResponseOutput
	ToJobSpecResponseOutputWithContext(context.Context) JobSpecResponseOutput
}

// JobSpec describes how the job execution will look like.
type JobSpecResponseArgs struct {
	// Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional
	ActiveDeadlineSeconds pulumi.StringInput `pulumi:"activeDeadlineSeconds"`
	// Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional
	BackoffLimit pulumi.IntInput `pulumi:"backoffLimit"`
	// Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Completions pulumi.IntInput `pulumi:"completions"`
	// Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be <= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Parallelism pulumi.IntInput `pulumi:"parallelism"`
	// Optional. Describes the instance that will be created when executing a job.
	Template InstanceTemplateSpecResponseInput `pulumi:"template"`
	// Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional
	TtlSecondsAfterFinished pulumi.IntInput `pulumi:"ttlSecondsAfterFinished"`
}

func (JobSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpecResponse)(nil)).Elem()
}

func (i JobSpecResponseArgs) ToJobSpecResponseOutput() JobSpecResponseOutput {
	return i.ToJobSpecResponseOutputWithContext(context.Background())
}

func (i JobSpecResponseArgs) ToJobSpecResponseOutputWithContext(ctx context.Context) JobSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecResponseOutput)
}

func (i JobSpecResponseArgs) ToJobSpecResponsePtrOutput() JobSpecResponsePtrOutput {
	return i.ToJobSpecResponsePtrOutputWithContext(context.Background())
}

func (i JobSpecResponseArgs) ToJobSpecResponsePtrOutputWithContext(ctx context.Context) JobSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecResponseOutput).ToJobSpecResponsePtrOutputWithContext(ctx)
}

// JobSpecResponsePtrInput is an input type that accepts JobSpecResponseArgs, JobSpecResponsePtr and JobSpecResponsePtrOutput values.
// You can construct a concrete instance of `JobSpecResponsePtrInput` via:
//
//          JobSpecResponseArgs{...}
//
//  or:
//
//          nil
type JobSpecResponsePtrInput interface {
	pulumi.Input

	ToJobSpecResponsePtrOutput() JobSpecResponsePtrOutput
	ToJobSpecResponsePtrOutputWithContext(context.Context) JobSpecResponsePtrOutput
}

type jobSpecResponsePtrType JobSpecResponseArgs

func JobSpecResponsePtr(v *JobSpecResponseArgs) JobSpecResponsePtrInput {
	return (*jobSpecResponsePtrType)(v)
}

func (*jobSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobSpecResponse)(nil)).Elem()
}

func (i *jobSpecResponsePtrType) ToJobSpecResponsePtrOutput() JobSpecResponsePtrOutput {
	return i.ToJobSpecResponsePtrOutputWithContext(context.Background())
}

func (i *jobSpecResponsePtrType) ToJobSpecResponsePtrOutputWithContext(ctx context.Context) JobSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobSpecResponsePtrOutput)
}

// JobSpec describes how the job execution will look like.
type JobSpecResponseOutput struct{ *pulumi.OutputState }

func (JobSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobSpecResponse)(nil)).Elem()
}

func (o JobSpecResponseOutput) ToJobSpecResponseOutput() JobSpecResponseOutput {
	return o
}

func (o JobSpecResponseOutput) ToJobSpecResponseOutputWithContext(ctx context.Context) JobSpecResponseOutput {
	return o
}

func (o JobSpecResponseOutput) ToJobSpecResponsePtrOutput() JobSpecResponsePtrOutput {
	return o.ToJobSpecResponsePtrOutputWithContext(context.Background())
}

func (o JobSpecResponseOutput) ToJobSpecResponsePtrOutputWithContext(ctx context.Context) JobSpecResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobSpecResponse) *JobSpecResponse {
		return &v
	}).(JobSpecResponsePtrOutput)
}

// Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional
func (o JobSpecResponseOutput) ActiveDeadlineSeconds() pulumi.StringOutput {
	return o.ApplyT(func(v JobSpecResponse) string { return v.ActiveDeadlineSeconds }).(pulumi.StringOutput)
}

// Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional
func (o JobSpecResponseOutput) BackoffLimit() pulumi.IntOutput {
	return o.ApplyT(func(v JobSpecResponse) int { return v.BackoffLimit }).(pulumi.IntOutput)
}

// Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobSpecResponseOutput) Completions() pulumi.IntOutput {
	return o.ApplyT(func(v JobSpecResponse) int { return v.Completions }).(pulumi.IntOutput)
}

// Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be <= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobSpecResponseOutput) Parallelism() pulumi.IntOutput {
	return o.ApplyT(func(v JobSpecResponse) int { return v.Parallelism }).(pulumi.IntOutput)
}

// Optional. Describes the instance that will be created when executing a job.
func (o JobSpecResponseOutput) Template() InstanceTemplateSpecResponseOutput {
	return o.ApplyT(func(v JobSpecResponse) InstanceTemplateSpecResponse { return v.Template }).(InstanceTemplateSpecResponseOutput)
}

// Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional
func (o JobSpecResponseOutput) TtlSecondsAfterFinished() pulumi.IntOutput {
	return o.ApplyT(func(v JobSpecResponse) int { return v.TtlSecondsAfterFinished }).(pulumi.IntOutput)
}

type JobSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (JobSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobSpecResponse)(nil)).Elem()
}

func (o JobSpecResponsePtrOutput) ToJobSpecResponsePtrOutput() JobSpecResponsePtrOutput {
	return o
}

func (o JobSpecResponsePtrOutput) ToJobSpecResponsePtrOutputWithContext(ctx context.Context) JobSpecResponsePtrOutput {
	return o
}

func (o JobSpecResponsePtrOutput) Elem() JobSpecResponseOutput {
	return o.ApplyT(func(v *JobSpecResponse) JobSpecResponse {
		if v != nil {
			return *v
		}
		var ret JobSpecResponse
		return ret
	}).(JobSpecResponseOutput)
}

// Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional
func (o JobSpecResponsePtrOutput) ActiveDeadlineSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ActiveDeadlineSeconds
	}).(pulumi.StringPtrOutput)
}

// Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional
func (o JobSpecResponsePtrOutput) BackoffLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecResponse) *int {
		if v == nil {
			return nil
		}
		return &v.BackoffLimit
	}).(pulumi.IntPtrOutput)
}

// Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobSpecResponsePtrOutput) Completions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Completions
	}).(pulumi.IntPtrOutput)
}

// Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be <= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobSpecResponsePtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Optional. Describes the instance that will be created when executing a job.
func (o JobSpecResponsePtrOutput) Template() InstanceTemplateSpecResponsePtrOutput {
	return o.ApplyT(func(v *JobSpecResponse) *InstanceTemplateSpecResponse {
		if v == nil {
			return nil
		}
		return &v.Template
	}).(InstanceTemplateSpecResponsePtrOutput)
}

// Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional
func (o JobSpecResponsePtrOutput) TtlSecondsAfterFinished() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobSpecResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TtlSecondsAfterFinished
	}).(pulumi.IntPtrOutput)
}

// JobStatus represents the current state of a Job.
type JobStatus struct {
	// Optional. The number of actively running instances. +optional
	Active *int `pulumi:"active"`
	// Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	CompletionTime *string `pulumi:"completionTime"`
	// Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Conditions []JobCondition `pulumi:"conditions"`
	// Optional. The number of instances which reached phase Failed. +optional
	Failed *int `pulumi:"failed"`
	// Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
	ImageDigest *string `pulumi:"imageDigest"`
	// Optional. Status of completed, failed, and running instances. +optional
	Instances []InstanceStatus `pulumi:"instances"`
	// Optional. The 'generation' of the job that was last processed by the controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	StartTime *string `pulumi:"startTime"`
	// Optional. The number of instances which reached phase Succeeded. +optional
	Succeeded *int `pulumi:"succeeded"`
}

// JobStatusInput is an input type that accepts JobStatusArgs and JobStatusOutput values.
// You can construct a concrete instance of `JobStatusInput` via:
//
//          JobStatusArgs{...}
type JobStatusInput interface {
	pulumi.Input

	ToJobStatusOutput() JobStatusOutput
	ToJobStatusOutputWithContext(context.Context) JobStatusOutput
}

// JobStatus represents the current state of a Job.
type JobStatusArgs struct {
	// Optional. The number of actively running instances. +optional
	Active pulumi.IntPtrInput `pulumi:"active"`
	// Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	CompletionTime pulumi.StringPtrInput `pulumi:"completionTime"`
	// Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Conditions JobConditionArrayInput `pulumi:"conditions"`
	// Optional. The number of instances which reached phase Failed. +optional
	Failed pulumi.IntPtrInput `pulumi:"failed"`
	// Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
	ImageDigest pulumi.StringPtrInput `pulumi:"imageDigest"`
	// Optional. Status of completed, failed, and running instances. +optional
	Instances InstanceStatusArrayInput `pulumi:"instances"`
	// Optional. The 'generation' of the job that was last processed by the controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Optional. The number of instances which reached phase Succeeded. +optional
	Succeeded pulumi.IntPtrInput `pulumi:"succeeded"`
}

func (JobStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatus)(nil)).Elem()
}

func (i JobStatusArgs) ToJobStatusOutput() JobStatusOutput {
	return i.ToJobStatusOutputWithContext(context.Background())
}

func (i JobStatusArgs) ToJobStatusOutputWithContext(ctx context.Context) JobStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusOutput)
}

func (i JobStatusArgs) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return i.ToJobStatusPtrOutputWithContext(context.Background())
}

func (i JobStatusArgs) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusOutput).ToJobStatusPtrOutputWithContext(ctx)
}

// JobStatusPtrInput is an input type that accepts JobStatusArgs, JobStatusPtr and JobStatusPtrOutput values.
// You can construct a concrete instance of `JobStatusPtrInput` via:
//
//          JobStatusArgs{...}
//
//  or:
//
//          nil
type JobStatusPtrInput interface {
	pulumi.Input

	ToJobStatusPtrOutput() JobStatusPtrOutput
	ToJobStatusPtrOutputWithContext(context.Context) JobStatusPtrOutput
}

type jobStatusPtrType JobStatusArgs

func JobStatusPtr(v *JobStatusArgs) JobStatusPtrInput {
	return (*jobStatusPtrType)(v)
}

func (*jobStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatus)(nil)).Elem()
}

func (i *jobStatusPtrType) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return i.ToJobStatusPtrOutputWithContext(context.Background())
}

func (i *jobStatusPtrType) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusPtrOutput)
}

// JobStatus represents the current state of a Job.
type JobStatusOutput struct{ *pulumi.OutputState }

func (JobStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatus)(nil)).Elem()
}

func (o JobStatusOutput) ToJobStatusOutput() JobStatusOutput {
	return o
}

func (o JobStatusOutput) ToJobStatusOutputWithContext(ctx context.Context) JobStatusOutput {
	return o
}

func (o JobStatusOutput) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return o.ToJobStatusPtrOutputWithContext(context.Background())
}

func (o JobStatusOutput) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobStatus) *JobStatus {
		return &v
	}).(JobStatusPtrOutput)
}

// Optional. The number of actively running instances. +optional
func (o JobStatusOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Active }).(pulumi.IntPtrOutput)
}

// Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o JobStatusOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.CompletionTime }).(pulumi.StringPtrOutput)
}

// Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobStatusOutput) Conditions() JobConditionArrayOutput {
	return o.ApplyT(func(v JobStatus) []JobCondition { return v.Conditions }).(JobConditionArrayOutput)
}

// Optional. The number of instances which reached phase Failed. +optional
func (o JobStatusOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Failed }).(pulumi.IntPtrOutput)
}

// Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
func (o JobStatusOutput) ImageDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.ImageDigest }).(pulumi.StringPtrOutput)
}

// Optional. Status of completed, failed, and running instances. +optional
func (o JobStatusOutput) Instances() InstanceStatusArrayOutput {
	return o.ApplyT(func(v JobStatus) []InstanceStatus { return v.Instances }).(InstanceStatusArrayOutput)
}

// Optional. The 'generation' of the job that was last processed by the controller.
func (o JobStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o JobStatusOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Optional. The number of instances which reached phase Succeeded. +optional
func (o JobStatusOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatus) *int { return v.Succeeded }).(pulumi.IntPtrOutput)
}

type JobStatusPtrOutput struct{ *pulumi.OutputState }

func (JobStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatus)(nil)).Elem()
}

func (o JobStatusPtrOutput) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return o
}

func (o JobStatusPtrOutput) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return o
}

func (o JobStatusPtrOutput) Elem() JobStatusOutput {
	return o.ApplyT(func(v *JobStatus) JobStatus {
		if v != nil {
			return *v
		}
		var ret JobStatus
		return ret
	}).(JobStatusOutput)
}

// Optional. The number of actively running instances. +optional
func (o JobStatusPtrOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.IntPtrOutput)
}

// Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o JobStatusPtrOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatus) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTime
	}).(pulumi.StringPtrOutput)
}

// Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobStatusPtrOutput) Conditions() JobConditionArrayOutput {
	return o.ApplyT(func(v *JobStatus) []JobCondition {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(JobConditionArrayOutput)
}

// Optional. The number of instances which reached phase Failed. +optional
func (o JobStatusPtrOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Failed
	}).(pulumi.IntPtrOutput)
}

// Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
func (o JobStatusPtrOutput) ImageDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatus) *string {
		if v == nil {
			return nil
		}
		return v.ImageDigest
	}).(pulumi.StringPtrOutput)
}

// Optional. Status of completed, failed, and running instances. +optional
func (o JobStatusPtrOutput) Instances() InstanceStatusArrayOutput {
	return o.ApplyT(func(v *JobStatus) []InstanceStatus {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(InstanceStatusArrayOutput)
}

// Optional. The 'generation' of the job that was last processed by the controller.
func (o JobStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o JobStatusPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Optional. The number of instances which reached phase Succeeded. +optional
func (o JobStatusPtrOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatus) *int {
		if v == nil {
			return nil
		}
		return v.Succeeded
	}).(pulumi.IntPtrOutput)
}

// JobStatus represents the current state of a Job.
type JobStatusResponse struct {
	// Optional. The number of actively running instances. +optional
	Active int `pulumi:"active"`
	// Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	CompletionTime string `pulumi:"completionTime"`
	// Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Conditions []JobConditionResponse `pulumi:"conditions"`
	// Optional. The number of instances which reached phase Failed. +optional
	Failed int `pulumi:"failed"`
	// Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
	ImageDigest string `pulumi:"imageDigest"`
	// Optional. Status of completed, failed, and running instances. +optional
	Instances []InstanceStatusResponse `pulumi:"instances"`
	// Optional. The 'generation' of the job that was last processed by the controller.
	ObservedGeneration int `pulumi:"observedGeneration"`
	// Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	StartTime string `pulumi:"startTime"`
	// Optional. The number of instances which reached phase Succeeded. +optional
	Succeeded int `pulumi:"succeeded"`
}

// JobStatusResponseInput is an input type that accepts JobStatusResponseArgs and JobStatusResponseOutput values.
// You can construct a concrete instance of `JobStatusResponseInput` via:
//
//          JobStatusResponseArgs{...}
type JobStatusResponseInput interface {
	pulumi.Input

	ToJobStatusResponseOutput() JobStatusResponseOutput
	ToJobStatusResponseOutputWithContext(context.Context) JobStatusResponseOutput
}

// JobStatus represents the current state of a Job.
type JobStatusResponseArgs struct {
	// Optional. The number of actively running instances. +optional
	Active pulumi.IntInput `pulumi:"active"`
	// Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	CompletionTime pulumi.StringInput `pulumi:"completionTime"`
	// Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
	Conditions JobConditionResponseArrayInput `pulumi:"conditions"`
	// Optional. The number of instances which reached phase Failed. +optional
	Failed pulumi.IntInput `pulumi:"failed"`
	// Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
	ImageDigest pulumi.StringInput `pulumi:"imageDigest"`
	// Optional. Status of completed, failed, and running instances. +optional
	Instances InstanceStatusResponseArrayInput `pulumi:"instances"`
	// Optional. The 'generation' of the job that was last processed by the controller.
	ObservedGeneration pulumi.IntInput `pulumi:"observedGeneration"`
	// Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Optional. The number of instances which reached phase Succeeded. +optional
	Succeeded pulumi.IntInput `pulumi:"succeeded"`
}

func (JobStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusResponse)(nil)).Elem()
}

func (i JobStatusResponseArgs) ToJobStatusResponseOutput() JobStatusResponseOutput {
	return i.ToJobStatusResponseOutputWithContext(context.Background())
}

func (i JobStatusResponseArgs) ToJobStatusResponseOutputWithContext(ctx context.Context) JobStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusResponseOutput)
}

func (i JobStatusResponseArgs) ToJobStatusResponsePtrOutput() JobStatusResponsePtrOutput {
	return i.ToJobStatusResponsePtrOutputWithContext(context.Background())
}

func (i JobStatusResponseArgs) ToJobStatusResponsePtrOutputWithContext(ctx context.Context) JobStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusResponseOutput).ToJobStatusResponsePtrOutputWithContext(ctx)
}

// JobStatusResponsePtrInput is an input type that accepts JobStatusResponseArgs, JobStatusResponsePtr and JobStatusResponsePtrOutput values.
// You can construct a concrete instance of `JobStatusResponsePtrInput` via:
//
//          JobStatusResponseArgs{...}
//
//  or:
//
//          nil
type JobStatusResponsePtrInput interface {
	pulumi.Input

	ToJobStatusResponsePtrOutput() JobStatusResponsePtrOutput
	ToJobStatusResponsePtrOutputWithContext(context.Context) JobStatusResponsePtrOutput
}

type jobStatusResponsePtrType JobStatusResponseArgs

func JobStatusResponsePtr(v *JobStatusResponseArgs) JobStatusResponsePtrInput {
	return (*jobStatusResponsePtrType)(v)
}

func (*jobStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatusResponse)(nil)).Elem()
}

func (i *jobStatusResponsePtrType) ToJobStatusResponsePtrOutput() JobStatusResponsePtrOutput {
	return i.ToJobStatusResponsePtrOutputWithContext(context.Background())
}

func (i *jobStatusResponsePtrType) ToJobStatusResponsePtrOutputWithContext(ctx context.Context) JobStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusResponsePtrOutput)
}

// JobStatus represents the current state of a Job.
type JobStatusResponseOutput struct{ *pulumi.OutputState }

func (JobStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusResponse)(nil)).Elem()
}

func (o JobStatusResponseOutput) ToJobStatusResponseOutput() JobStatusResponseOutput {
	return o
}

func (o JobStatusResponseOutput) ToJobStatusResponseOutputWithContext(ctx context.Context) JobStatusResponseOutput {
	return o
}

func (o JobStatusResponseOutput) ToJobStatusResponsePtrOutput() JobStatusResponsePtrOutput {
	return o.ToJobStatusResponsePtrOutputWithContext(context.Background())
}

func (o JobStatusResponseOutput) ToJobStatusResponsePtrOutputWithContext(ctx context.Context) JobStatusResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobStatusResponse) *JobStatusResponse {
		return &v
	}).(JobStatusResponsePtrOutput)
}

// Optional. The number of actively running instances. +optional
func (o JobStatusResponseOutput) Active() pulumi.IntOutput {
	return o.ApplyT(func(v JobStatusResponse) int { return v.Active }).(pulumi.IntOutput)
}

// Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o JobStatusResponseOutput) CompletionTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatusResponse) string { return v.CompletionTime }).(pulumi.StringOutput)
}

// Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobStatusResponseOutput) Conditions() JobConditionResponseArrayOutput {
	return o.ApplyT(func(v JobStatusResponse) []JobConditionResponse { return v.Conditions }).(JobConditionResponseArrayOutput)
}

// Optional. The number of instances which reached phase Failed. +optional
func (o JobStatusResponseOutput) Failed() pulumi.IntOutput {
	return o.ApplyT(func(v JobStatusResponse) int { return v.Failed }).(pulumi.IntOutput)
}

// Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
func (o JobStatusResponseOutput) ImageDigest() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatusResponse) string { return v.ImageDigest }).(pulumi.StringOutput)
}

// Optional. Status of completed, failed, and running instances. +optional
func (o JobStatusResponseOutput) Instances() InstanceStatusResponseArrayOutput {
	return o.ApplyT(func(v JobStatusResponse) []InstanceStatusResponse { return v.Instances }).(InstanceStatusResponseArrayOutput)
}

// Optional. The 'generation' of the job that was last processed by the controller.
func (o JobStatusResponseOutput) ObservedGeneration() pulumi.IntOutput {
	return o.ApplyT(func(v JobStatusResponse) int { return v.ObservedGeneration }).(pulumi.IntOutput)
}

// Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o JobStatusResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatusResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Optional. The number of instances which reached phase Succeeded. +optional
func (o JobStatusResponseOutput) Succeeded() pulumi.IntOutput {
	return o.ApplyT(func(v JobStatusResponse) int { return v.Succeeded }).(pulumi.IntOutput)
}

type JobStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (JobStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatusResponse)(nil)).Elem()
}

func (o JobStatusResponsePtrOutput) ToJobStatusResponsePtrOutput() JobStatusResponsePtrOutput {
	return o
}

func (o JobStatusResponsePtrOutput) ToJobStatusResponsePtrOutputWithContext(ctx context.Context) JobStatusResponsePtrOutput {
	return o
}

func (o JobStatusResponsePtrOutput) Elem() JobStatusResponseOutput {
	return o.ApplyT(func(v *JobStatusResponse) JobStatusResponse {
		if v != nil {
			return *v
		}
		var ret JobStatusResponse
		return ret
	}).(JobStatusResponseOutput)
}

// Optional. The number of actively running instances. +optional
func (o JobStatusResponsePtrOutput) Active() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatusResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Active
	}).(pulumi.IntPtrOutput)
}

// Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o JobStatusResponsePtrOutput) CompletionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CompletionTime
	}).(pulumi.StringPtrOutput)
}

// Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
func (o JobStatusResponsePtrOutput) Conditions() JobConditionResponseArrayOutput {
	return o.ApplyT(func(v *JobStatusResponse) []JobConditionResponse {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(JobConditionResponseArrayOutput)
}

// Optional. The number of instances which reached phase Failed. +optional
func (o JobStatusResponsePtrOutput) Failed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatusResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Failed
	}).(pulumi.IntPtrOutput)
}

// Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
func (o JobStatusResponsePtrOutput) ImageDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ImageDigest
	}).(pulumi.StringPtrOutput)
}

// Optional. Status of completed, failed, and running instances. +optional
func (o JobStatusResponsePtrOutput) Instances() InstanceStatusResponseArrayOutput {
	return o.ApplyT(func(v *JobStatusResponse) []InstanceStatusResponse {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(InstanceStatusResponseArrayOutput)
}

// Optional. The 'generation' of the job that was last processed by the controller.
func (o JobStatusResponsePtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatusResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
func (o JobStatusResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Optional. The number of instances which reached phase Succeeded. +optional
func (o JobStatusResponsePtrOutput) Succeeded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatusResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Succeeded
	}).(pulumi.IntPtrOutput)
}

// Maps a string key to a path within a volume.
type KeyToPath struct {
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version. The key to project.
	Key *string `pulumi:"key"`
	// (Optional) Mode bits to use on this file, must be a value between 0000 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// KeyToPathInput is an input type that accepts KeyToPathArgs and KeyToPathOutput values.
// You can construct a concrete instance of `KeyToPathInput` via:
//
//          KeyToPathArgs{...}
type KeyToPathInput interface {
	pulumi.Input

	ToKeyToPathOutput() KeyToPathOutput
	ToKeyToPathOutputWithContext(context.Context) KeyToPathOutput
}

// Maps a string key to a path within a volume.
type KeyToPathArgs struct {
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version. The key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// (Optional) Mode bits to use on this file, must be a value between 0000 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (KeyToPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPath)(nil)).Elem()
}

func (i KeyToPathArgs) ToKeyToPathOutput() KeyToPathOutput {
	return i.ToKeyToPathOutputWithContext(context.Background())
}

func (i KeyToPathArgs) ToKeyToPathOutputWithContext(ctx context.Context) KeyToPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyToPathOutput)
}

// KeyToPathArrayInput is an input type that accepts KeyToPathArray and KeyToPathArrayOutput values.
// You can construct a concrete instance of `KeyToPathArrayInput` via:
//
//          KeyToPathArray{ KeyToPathArgs{...} }
type KeyToPathArrayInput interface {
	pulumi.Input

	ToKeyToPathArrayOutput() KeyToPathArrayOutput
	ToKeyToPathArrayOutputWithContext(context.Context) KeyToPathArrayOutput
}

type KeyToPathArray []KeyToPathInput

func (KeyToPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPath)(nil)).Elem()
}

func (i KeyToPathArray) ToKeyToPathArrayOutput() KeyToPathArrayOutput {
	return i.ToKeyToPathArrayOutputWithContext(context.Background())
}

func (i KeyToPathArray) ToKeyToPathArrayOutputWithContext(ctx context.Context) KeyToPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyToPathArrayOutput)
}

// Maps a string key to a path within a volume.
type KeyToPathOutput struct{ *pulumi.OutputState }

func (KeyToPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPath)(nil)).Elem()
}

func (o KeyToPathOutput) ToKeyToPathOutput() KeyToPathOutput {
	return o
}

func (o KeyToPathOutput) ToKeyToPathOutputWithContext(ctx context.Context) KeyToPathOutput {
	return o
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version. The key to project.
func (o KeyToPathOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyToPath) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// (Optional) Mode bits to use on this file, must be a value between 0000 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KeyToPathOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KeyToPath) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o KeyToPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyToPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type KeyToPathArrayOutput struct{ *pulumi.OutputState }

func (KeyToPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPath)(nil)).Elem()
}

func (o KeyToPathArrayOutput) ToKeyToPathArrayOutput() KeyToPathArrayOutput {
	return o
}

func (o KeyToPathArrayOutput) ToKeyToPathArrayOutputWithContext(ctx context.Context) KeyToPathArrayOutput {
	return o
}

func (o KeyToPathArrayOutput) Index(i pulumi.IntInput) KeyToPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyToPath {
		return vs[0].([]KeyToPath)[vs[1].(int)]
	}).(KeyToPathOutput)
}

// Maps a string key to a path within a volume.
type KeyToPathResponse struct {
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version. The key to project.
	Key string `pulumi:"key"`
	// (Optional) Mode bits to use on this file, must be a value between 0000 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode int `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path string `pulumi:"path"`
}

// KeyToPathResponseInput is an input type that accepts KeyToPathResponseArgs and KeyToPathResponseOutput values.
// You can construct a concrete instance of `KeyToPathResponseInput` via:
//
//          KeyToPathResponseArgs{...}
type KeyToPathResponseInput interface {
	pulumi.Input

	ToKeyToPathResponseOutput() KeyToPathResponseOutput
	ToKeyToPathResponseOutputWithContext(context.Context) KeyToPathResponseOutput
}

// Maps a string key to a path within a volume.
type KeyToPathResponseArgs struct {
	// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version. The key to project.
	Key pulumi.StringInput `pulumi:"key"`
	// (Optional) Mode bits to use on this file, must be a value between 0000 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntInput `pulumi:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
	Path pulumi.StringInput `pulumi:"path"`
}

func (KeyToPathResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPathResponse)(nil)).Elem()
}

func (i KeyToPathResponseArgs) ToKeyToPathResponseOutput() KeyToPathResponseOutput {
	return i.ToKeyToPathResponseOutputWithContext(context.Background())
}

func (i KeyToPathResponseArgs) ToKeyToPathResponseOutputWithContext(ctx context.Context) KeyToPathResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyToPathResponseOutput)
}

// KeyToPathResponseArrayInput is an input type that accepts KeyToPathResponseArray and KeyToPathResponseArrayOutput values.
// You can construct a concrete instance of `KeyToPathResponseArrayInput` via:
//
//          KeyToPathResponseArray{ KeyToPathResponseArgs{...} }
type KeyToPathResponseArrayInput interface {
	pulumi.Input

	ToKeyToPathResponseArrayOutput() KeyToPathResponseArrayOutput
	ToKeyToPathResponseArrayOutputWithContext(context.Context) KeyToPathResponseArrayOutput
}

type KeyToPathResponseArray []KeyToPathResponseInput

func (KeyToPathResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPathResponse)(nil)).Elem()
}

func (i KeyToPathResponseArray) ToKeyToPathResponseArrayOutput() KeyToPathResponseArrayOutput {
	return i.ToKeyToPathResponseArrayOutputWithContext(context.Background())
}

func (i KeyToPathResponseArray) ToKeyToPathResponseArrayOutputWithContext(ctx context.Context) KeyToPathResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyToPathResponseArrayOutput)
}

// Maps a string key to a path within a volume.
type KeyToPathResponseOutput struct{ *pulumi.OutputState }

func (KeyToPathResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyToPathResponse)(nil)).Elem()
}

func (o KeyToPathResponseOutput) ToKeyToPathResponseOutput() KeyToPathResponseOutput {
	return o
}

func (o KeyToPathResponseOutput) ToKeyToPathResponseOutputWithContext(ctx context.Context) KeyToPathResponseOutput {
	return o
}

// The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version. The key to project.
func (o KeyToPathResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KeyToPathResponse) string { return v.Key }).(pulumi.StringOutput)
}

// (Optional) Mode bits to use on this file, must be a value between 0000 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
func (o KeyToPathResponseOutput) Mode() pulumi.IntOutput {
	return o.ApplyT(func(v KeyToPathResponse) int { return v.Mode }).(pulumi.IntOutput)
}

// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
func (o KeyToPathResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v KeyToPathResponse) string { return v.Path }).(pulumi.StringOutput)
}

type KeyToPathResponseArrayOutput struct{ *pulumi.OutputState }

func (KeyToPathResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyToPathResponse)(nil)).Elem()
}

func (o KeyToPathResponseArrayOutput) ToKeyToPathResponseArrayOutput() KeyToPathResponseArrayOutput {
	return o
}

func (o KeyToPathResponseArrayOutput) ToKeyToPathResponseArrayOutputWithContext(ctx context.Context) KeyToPathResponseArrayOutput {
	return o
}

func (o KeyToPathResponseArrayOutput) Index(i pulumi.IntInput) KeyToPathResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyToPathResponse {
		return vs[0].([]KeyToPathResponse)[vs[1].(int)]
	}).(KeyToPathResponseOutput)
}

// Not supported by Cloud Run LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReference struct {
	// (Optional) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// LocalObjectReferenceInput is an input type that accepts LocalObjectReferenceArgs and LocalObjectReferenceOutput values.
// You can construct a concrete instance of `LocalObjectReferenceInput` via:
//
//          LocalObjectReferenceArgs{...}
type LocalObjectReferenceInput interface {
	pulumi.Input

	ToLocalObjectReferenceOutput() LocalObjectReferenceOutput
	ToLocalObjectReferenceOutputWithContext(context.Context) LocalObjectReferenceOutput
}

// Not supported by Cloud Run LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceArgs struct {
	// (Optional) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LocalObjectReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReference)(nil)).Elem()
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferenceOutput() LocalObjectReferenceOutput {
	return i.ToLocalObjectReferenceOutputWithContext(context.Background())
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferenceOutputWithContext(ctx context.Context) LocalObjectReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferenceOutput)
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return i.ToLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (i LocalObjectReferenceArgs) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferenceOutput).ToLocalObjectReferencePtrOutputWithContext(ctx)
}

// LocalObjectReferencePtrInput is an input type that accepts LocalObjectReferenceArgs, LocalObjectReferencePtr and LocalObjectReferencePtrOutput values.
// You can construct a concrete instance of `LocalObjectReferencePtrInput` via:
//
//          LocalObjectReferenceArgs{...}
//
//  or:
//
//          nil
type LocalObjectReferencePtrInput interface {
	pulumi.Input

	ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput
	ToLocalObjectReferencePtrOutputWithContext(context.Context) LocalObjectReferencePtrOutput
}

type localObjectReferencePtrType LocalObjectReferenceArgs

func LocalObjectReferencePtr(v *LocalObjectReferenceArgs) LocalObjectReferencePtrInput {
	return (*localObjectReferencePtrType)(v)
}

func (*localObjectReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalObjectReference)(nil)).Elem()
}

func (i *localObjectReferencePtrType) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return i.ToLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (i *localObjectReferencePtrType) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferencePtrOutput)
}

// Not supported by Cloud Run LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceOutput struct{ *pulumi.OutputState }

func (LocalObjectReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReference)(nil)).Elem()
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferenceOutput() LocalObjectReferenceOutput {
	return o
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferenceOutputWithContext(ctx context.Context) LocalObjectReferenceOutput {
	return o
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return o.ToLocalObjectReferencePtrOutputWithContext(context.Background())
}

func (o LocalObjectReferenceOutput) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalObjectReference) *LocalObjectReference {
		return &v
	}).(LocalObjectReferencePtrOutput)
}

// (Optional) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o LocalObjectReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalObjectReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type LocalObjectReferencePtrOutput struct{ *pulumi.OutputState }

func (LocalObjectReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalObjectReference)(nil)).Elem()
}

func (o LocalObjectReferencePtrOutput) ToLocalObjectReferencePtrOutput() LocalObjectReferencePtrOutput {
	return o
}

func (o LocalObjectReferencePtrOutput) ToLocalObjectReferencePtrOutputWithContext(ctx context.Context) LocalObjectReferencePtrOutput {
	return o
}

func (o LocalObjectReferencePtrOutput) Elem() LocalObjectReferenceOutput {
	return o.ApplyT(func(v *LocalObjectReference) LocalObjectReference {
		if v != nil {
			return *v
		}
		var ret LocalObjectReference
		return ret
	}).(LocalObjectReferenceOutput)
}

// (Optional) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o LocalObjectReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalObjectReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Not supported by Cloud Run LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceResponse struct {
	// (Optional) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `pulumi:"name"`
}

// LocalObjectReferenceResponseInput is an input type that accepts LocalObjectReferenceResponseArgs and LocalObjectReferenceResponseOutput values.
// You can construct a concrete instance of `LocalObjectReferenceResponseInput` via:
//
//          LocalObjectReferenceResponseArgs{...}
type LocalObjectReferenceResponseInput interface {
	pulumi.Input

	ToLocalObjectReferenceResponseOutput() LocalObjectReferenceResponseOutput
	ToLocalObjectReferenceResponseOutputWithContext(context.Context) LocalObjectReferenceResponseOutput
}

// Not supported by Cloud Run LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceResponseArgs struct {
	// (Optional) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringInput `pulumi:"name"`
}

func (LocalObjectReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReferenceResponse)(nil)).Elem()
}

func (i LocalObjectReferenceResponseArgs) ToLocalObjectReferenceResponseOutput() LocalObjectReferenceResponseOutput {
	return i.ToLocalObjectReferenceResponseOutputWithContext(context.Background())
}

func (i LocalObjectReferenceResponseArgs) ToLocalObjectReferenceResponseOutputWithContext(ctx context.Context) LocalObjectReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalObjectReferenceResponseOutput)
}

// Not supported by Cloud Run LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type LocalObjectReferenceResponseOutput struct{ *pulumi.OutputState }

func (LocalObjectReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalObjectReferenceResponse)(nil)).Elem()
}

func (o LocalObjectReferenceResponseOutput) ToLocalObjectReferenceResponseOutput() LocalObjectReferenceResponseOutput {
	return o
}

func (o LocalObjectReferenceResponseOutput) ToLocalObjectReferenceResponseOutputWithContext(ctx context.Context) LocalObjectReferenceResponseOutput {
	return o
}

// (Optional) Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o LocalObjectReferenceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LocalObjectReferenceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMeta struct {
	// (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
	ClusterName *string `pulumi:"clusterName"`
	// (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds *int `pulumi:"deletionGracePeriodSeconds"`
	// (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	DeletionTimestamp *string `pulumi:"deletionTimestamp"`
	// (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge
	Finalizers []string `pulumi:"finalizers"`
	// (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;
	GenerateName *string `pulumi:"generateName"`
	// (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation *int `pulumi:"generation"`
	// (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
	// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
	Name *string `pulumi:"name"`
	// Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.
	Namespace *string `pulumi:"namespace"`
	// (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.
	OwnerReferences []OwnerReference `pulumi:"ownerReferences"`
	// Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;
	SelfLink *string `pulumi:"selfLink"`
	// (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid *string `pulumi:"uid"`
}

// ObjectMetaInput is an input type that accepts ObjectMetaArgs and ObjectMetaOutput values.
// You can construct a concrete instance of `ObjectMetaInput` via:
//
//          ObjectMetaArgs{...}
type ObjectMetaInput interface {
	pulumi.Input

	ToObjectMetaOutput() ObjectMetaOutput
	ToObjectMetaOutputWithContext(context.Context) ObjectMetaOutput
}

// k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaArgs struct {
	// (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	CreationTimestamp pulumi.StringPtrInput `pulumi:"creationTimestamp"`
	// (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds pulumi.IntPtrInput `pulumi:"deletionGracePeriodSeconds"`
	// (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	DeletionTimestamp pulumi.StringPtrInput `pulumi:"deletionTimestamp"`
	// (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge
	Finalizers pulumi.StringArrayInput `pulumi:"finalizers"`
	// (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation pulumi.IntPtrInput `pulumi:"generation"`
	// (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.
	OwnerReferences OwnerReferenceArrayInput `pulumi:"ownerReferences"`
	// Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
	// (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ObjectMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMeta)(nil)).Elem()
}

func (i ObjectMetaArgs) ToObjectMetaOutput() ObjectMetaOutput {
	return i.ToObjectMetaOutputWithContext(context.Background())
}

func (i ObjectMetaArgs) ToObjectMetaOutputWithContext(ctx context.Context) ObjectMetaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaOutput)
}

func (i ObjectMetaArgs) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return i.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (i ObjectMetaArgs) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaOutput).ToObjectMetaPtrOutputWithContext(ctx)
}

// ObjectMetaPtrInput is an input type that accepts ObjectMetaArgs, ObjectMetaPtr and ObjectMetaPtrOutput values.
// You can construct a concrete instance of `ObjectMetaPtrInput` via:
//
//          ObjectMetaArgs{...}
//
//  or:
//
//          nil
type ObjectMetaPtrInput interface {
	pulumi.Input

	ToObjectMetaPtrOutput() ObjectMetaPtrOutput
	ToObjectMetaPtrOutputWithContext(context.Context) ObjectMetaPtrOutput
}

type objectMetaPtrType ObjectMetaArgs

func ObjectMetaPtr(v *ObjectMetaArgs) ObjectMetaPtrInput {
	return (*objectMetaPtrType)(v)
}

func (*objectMetaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMeta)(nil)).Elem()
}

func (i *objectMetaPtrType) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return i.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (i *objectMetaPtrType) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaPtrOutput)
}

// k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaOutput struct{ *pulumi.OutputState }

func (ObjectMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMeta)(nil)).Elem()
}

func (o ObjectMetaOutput) ToObjectMetaOutput() ObjectMetaOutput {
	return o
}

func (o ObjectMetaOutput) ToObjectMetaOutputWithContext(ctx context.Context) ObjectMetaOutput {
	return o
}

func (o ObjectMetaOutput) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return o.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (o ObjectMetaOutput) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectMeta) *ObjectMeta {
		return &v
	}).(ObjectMetaPtrOutput)
}

// (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o ObjectMetaOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMeta) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
func (o ObjectMetaOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
func (o ObjectMetaOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.CreationTimestamp }).(pulumi.StringPtrOutput)
}

// (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (o ObjectMetaOutput) DeletionGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *int { return v.DeletionGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
func (o ObjectMetaOutput) DeletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.DeletionTimestamp }).(pulumi.StringPtrOutput)
}

// (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge
func (o ObjectMetaOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectMeta) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

// (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;
func (o ObjectMetaOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (o ObjectMetaOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *int { return v.Generation }).(pulumi.IntPtrOutput)
}

// (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: http://kubernetes.io/docs/user-guide/labels
func (o ObjectMetaOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMeta) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
func (o ObjectMetaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.
func (o ObjectMetaOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.
func (o ObjectMetaOutput) OwnerReferences() OwnerReferenceArrayOutput {
	return o.ApplyT(func(v ObjectMeta) []OwnerReference { return v.OwnerReferences }).(OwnerReferenceArrayOutput)
}

// Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectMetaOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;
func (o ObjectMetaOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
func (o ObjectMetaOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ObjectMetaPtrOutput struct{ *pulumi.OutputState }

func (ObjectMetaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMeta)(nil)).Elem()
}

func (o ObjectMetaPtrOutput) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return o
}

func (o ObjectMetaPtrOutput) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return o
}

func (o ObjectMetaPtrOutput) Elem() ObjectMetaOutput {
	return o.ApplyT(func(v *ObjectMeta) ObjectMeta {
		if v != nil {
			return *v
		}
		var ret ObjectMeta
		return ret
	}).(ObjectMetaOutput)
}

// (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o ObjectMetaPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObjectMeta) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
func (o ObjectMetaPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
func (o ObjectMetaPtrOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.CreationTimestamp
	}).(pulumi.StringPtrOutput)
}

// (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (o ObjectMetaPtrOutput) DeletionGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *int {
		if v == nil {
			return nil
		}
		return v.DeletionGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
func (o ObjectMetaPtrOutput) DeletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.DeletionTimestamp
	}).(pulumi.StringPtrOutput)
}

// (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge
func (o ObjectMetaPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ObjectMeta) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

// (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;
func (o ObjectMetaPtrOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.GenerateName
	}).(pulumi.StringPtrOutput)
}

// (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (o ObjectMetaPtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.IntPtrOutput)
}

// (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: http://kubernetes.io/docs/user-guide/labels
func (o ObjectMetaPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObjectMeta) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
func (o ObjectMetaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.
func (o ObjectMetaPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.
func (o ObjectMetaPtrOutput) OwnerReferences() OwnerReferenceArrayOutput {
	return o.ApplyT(func(v *ObjectMeta) []OwnerReference {
		if v == nil {
			return nil
		}
		return v.OwnerReferences
	}).(OwnerReferenceArrayOutput)
}

// Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectMetaPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;
func (o ObjectMetaPtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
func (o ObjectMetaPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaResponse struct {
	// (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
	ClusterName string `pulumi:"clusterName"`
	// (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds int `pulumi:"deletionGracePeriodSeconds"`
	// (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	DeletionTimestamp string `pulumi:"deletionTimestamp"`
	// (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge
	Finalizers []string `pulumi:"finalizers"`
	// (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;
	GenerateName string `pulumi:"generateName"`
	// (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation int `pulumi:"generation"`
	// (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
	// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
	Name string `pulumi:"name"`
	// Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.
	Namespace string `pulumi:"namespace"`
	// (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.
	OwnerReferences []OwnerReferenceResponse `pulumi:"ownerReferences"`
	// Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion string `pulumi:"resourceVersion"`
	// (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;
	SelfLink string `pulumi:"selfLink"`
	// (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid string `pulumi:"uid"`
}

// ObjectMetaResponseInput is an input type that accepts ObjectMetaResponseArgs and ObjectMetaResponseOutput values.
// You can construct a concrete instance of `ObjectMetaResponseInput` via:
//
//          ObjectMetaResponseArgs{...}
type ObjectMetaResponseInput interface {
	pulumi.Input

	ToObjectMetaResponseOutput() ObjectMetaResponseOutput
	ToObjectMetaResponseOutputWithContext(context.Context) ObjectMetaResponseOutput
}

// k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaResponseArgs struct {
	// (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	CreationTimestamp pulumi.StringInput `pulumi:"creationTimestamp"`
	// (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds pulumi.IntInput `pulumi:"deletionGracePeriodSeconds"`
	// (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	DeletionTimestamp pulumi.StringInput `pulumi:"deletionTimestamp"`
	// (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge
	Finalizers pulumi.StringArrayInput `pulumi:"finalizers"`
	// (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;
	GenerateName pulumi.StringInput `pulumi:"generateName"`
	// (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation pulumi.IntInput `pulumi:"generation"`
	// (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.
	OwnerReferences OwnerReferenceResponseArrayInput `pulumi:"ownerReferences"`
	// Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringInput `pulumi:"resourceVersion"`
	// (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;
	SelfLink pulumi.StringInput `pulumi:"selfLink"`
	// (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (ObjectMetaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMetaResponse)(nil)).Elem()
}

func (i ObjectMetaResponseArgs) ToObjectMetaResponseOutput() ObjectMetaResponseOutput {
	return i.ToObjectMetaResponseOutputWithContext(context.Background())
}

func (i ObjectMetaResponseArgs) ToObjectMetaResponseOutputWithContext(ctx context.Context) ObjectMetaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaResponseOutput)
}

func (i ObjectMetaResponseArgs) ToObjectMetaResponsePtrOutput() ObjectMetaResponsePtrOutput {
	return i.ToObjectMetaResponsePtrOutputWithContext(context.Background())
}

func (i ObjectMetaResponseArgs) ToObjectMetaResponsePtrOutputWithContext(ctx context.Context) ObjectMetaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaResponseOutput).ToObjectMetaResponsePtrOutputWithContext(ctx)
}

// ObjectMetaResponsePtrInput is an input type that accepts ObjectMetaResponseArgs, ObjectMetaResponsePtr and ObjectMetaResponsePtrOutput values.
// You can construct a concrete instance of `ObjectMetaResponsePtrInput` via:
//
//          ObjectMetaResponseArgs{...}
//
//  or:
//
//          nil
type ObjectMetaResponsePtrInput interface {
	pulumi.Input

	ToObjectMetaResponsePtrOutput() ObjectMetaResponsePtrOutput
	ToObjectMetaResponsePtrOutputWithContext(context.Context) ObjectMetaResponsePtrOutput
}

type objectMetaResponsePtrType ObjectMetaResponseArgs

func ObjectMetaResponsePtr(v *ObjectMetaResponseArgs) ObjectMetaResponsePtrInput {
	return (*objectMetaResponsePtrType)(v)
}

func (*objectMetaResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMetaResponse)(nil)).Elem()
}

func (i *objectMetaResponsePtrType) ToObjectMetaResponsePtrOutput() ObjectMetaResponsePtrOutput {
	return i.ToObjectMetaResponsePtrOutputWithContext(context.Background())
}

func (i *objectMetaResponsePtrType) ToObjectMetaResponsePtrOutputWithContext(ctx context.Context) ObjectMetaResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaResponsePtrOutput)
}

// k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaResponseOutput struct{ *pulumi.OutputState }

func (ObjectMetaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMetaResponse)(nil)).Elem()
}

func (o ObjectMetaResponseOutput) ToObjectMetaResponseOutput() ObjectMetaResponseOutput {
	return o
}

func (o ObjectMetaResponseOutput) ToObjectMetaResponseOutputWithContext(ctx context.Context) ObjectMetaResponseOutput {
	return o
}

func (o ObjectMetaResponseOutput) ToObjectMetaResponsePtrOutput() ObjectMetaResponsePtrOutput {
	return o.ToObjectMetaResponsePtrOutputWithContext(context.Background())
}

func (o ObjectMetaResponseOutput) ToObjectMetaResponsePtrOutputWithContext(ctx context.Context) ObjectMetaResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectMetaResponse) *ObjectMetaResponse {
		return &v
	}).(ObjectMetaResponsePtrOutput)
}

// (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o ObjectMetaResponseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMetaResponse) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
func (o ObjectMetaResponseOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.ClusterName }).(pulumi.StringOutput)
}

// (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
func (o ObjectMetaResponseOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (o ObjectMetaResponseOutput) DeletionGracePeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ObjectMetaResponse) int { return v.DeletionGracePeriodSeconds }).(pulumi.IntOutput)
}

// (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
func (o ObjectMetaResponseOutput) DeletionTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.DeletionTimestamp }).(pulumi.StringOutput)
}

// (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge
func (o ObjectMetaResponseOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectMetaResponse) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

// (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;
func (o ObjectMetaResponseOutput) GenerateName() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.GenerateName }).(pulumi.StringOutput)
}

// (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (o ObjectMetaResponseOutput) Generation() pulumi.IntOutput {
	return o.ApplyT(func(v ObjectMetaResponse) int { return v.Generation }).(pulumi.IntOutput)
}

// (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: http://kubernetes.io/docs/user-guide/labels
func (o ObjectMetaResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMetaResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
func (o ObjectMetaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.
func (o ObjectMetaResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

// (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.
func (o ObjectMetaResponseOutput) OwnerReferences() OwnerReferenceResponseArrayOutput {
	return o.ApplyT(func(v ObjectMetaResponse) []OwnerReferenceResponse { return v.OwnerReferences }).(OwnerReferenceResponseArrayOutput)
}

// Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectMetaResponseOutput) ResourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.ResourceVersion }).(pulumi.StringOutput)
}

// (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;
func (o ObjectMetaResponseOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.SelfLink }).(pulumi.StringOutput)
}

// (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
func (o ObjectMetaResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectMetaResponse) string { return v.Uid }).(pulumi.StringOutput)
}

type ObjectMetaResponsePtrOutput struct{ *pulumi.OutputState }

func (ObjectMetaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMetaResponse)(nil)).Elem()
}

func (o ObjectMetaResponsePtrOutput) ToObjectMetaResponsePtrOutput() ObjectMetaResponsePtrOutput {
	return o
}

func (o ObjectMetaResponsePtrOutput) ToObjectMetaResponsePtrOutputWithContext(ctx context.Context) ObjectMetaResponsePtrOutput {
	return o
}

func (o ObjectMetaResponsePtrOutput) Elem() ObjectMetaResponseOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) ObjectMetaResponse {
		if v != nil {
			return *v
		}
		var ret ObjectMetaResponse
		return ret
	}).(ObjectMetaResponseOutput)
}

// (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
func (o ObjectMetaResponsePtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
func (o ObjectMetaResponsePtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
func (o ObjectMetaResponsePtrOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreationTimestamp
	}).(pulumi.StringPtrOutput)
}

// (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (o ObjectMetaResponsePtrOutput) DeletionGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DeletionGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
func (o ObjectMetaResponsePtrOutput) DeletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DeletionTimestamp
	}).(pulumi.StringPtrOutput)
}

// (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge
func (o ObjectMetaResponsePtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

// (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;
func (o ObjectMetaResponsePtrOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GenerateName
	}).(pulumi.StringPtrOutput)
}

// (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (o ObjectMetaResponsePtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Generation
	}).(pulumi.IntPtrOutput)
}

// (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: http://kubernetes.io/docs/user-guide/labels
func (o ObjectMetaResponsePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
func (o ObjectMetaResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.
func (o ObjectMetaResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.
func (o ObjectMetaResponsePtrOutput) OwnerReferences() OwnerReferenceResponseArrayOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) []OwnerReferenceResponse {
		if v == nil {
			return nil
		}
		return v.OwnerReferences
	}).(OwnerReferenceResponseArrayOutput)
}

// Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectMetaResponsePtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;
func (o ObjectMetaResponsePtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
func (o ObjectMetaResponsePtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uid
	}).(pulumi.StringPtrOutput)
}

// OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.
type OwnerReference struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional
	BlockOwnerDeletion *bool `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller. +optional
	Controller *bool `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name *string `pulumi:"name"`
	// UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid *string `pulumi:"uid"`
}

// OwnerReferenceInput is an input type that accepts OwnerReferenceArgs and OwnerReferenceOutput values.
// You can construct a concrete instance of `OwnerReferenceInput` via:
//
//          OwnerReferenceArgs{...}
type OwnerReferenceInput interface {
	pulumi.Input

	ToOwnerReferenceOutput() OwnerReferenceOutput
	ToOwnerReferenceOutputWithContext(context.Context) OwnerReferenceOutput
}

// OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.
type OwnerReferenceArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional
	BlockOwnerDeletion pulumi.BoolPtrInput `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller. +optional
	Controller pulumi.BoolPtrInput `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (OwnerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReference)(nil)).Elem()
}

func (i OwnerReferenceArgs) ToOwnerReferenceOutput() OwnerReferenceOutput {
	return i.ToOwnerReferenceOutputWithContext(context.Background())
}

func (i OwnerReferenceArgs) ToOwnerReferenceOutputWithContext(ctx context.Context) OwnerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerReferenceOutput)
}

// OwnerReferenceArrayInput is an input type that accepts OwnerReferenceArray and OwnerReferenceArrayOutput values.
// You can construct a concrete instance of `OwnerReferenceArrayInput` via:
//
//          OwnerReferenceArray{ OwnerReferenceArgs{...} }
type OwnerReferenceArrayInput interface {
	pulumi.Input

	ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput
	ToOwnerReferenceArrayOutputWithContext(context.Context) OwnerReferenceArrayOutput
}

type OwnerReferenceArray []OwnerReferenceInput

func (OwnerReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReference)(nil)).Elem()
}

func (i OwnerReferenceArray) ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput {
	return i.ToOwnerReferenceArrayOutputWithContext(context.Background())
}

func (i OwnerReferenceArray) ToOwnerReferenceArrayOutputWithContext(ctx context.Context) OwnerReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerReferenceArrayOutput)
}

// OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.
type OwnerReferenceOutput struct{ *pulumi.OutputState }

func (OwnerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReference)(nil)).Elem()
}

func (o OwnerReferenceOutput) ToOwnerReferenceOutput() OwnerReferenceOutput {
	return o
}

func (o OwnerReferenceOutput) ToOwnerReferenceOutputWithContext(ctx context.Context) OwnerReferenceOutput {
	return o
}

// API version of the referent.
func (o OwnerReferenceOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReference) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional
func (o OwnerReferenceOutput) BlockOwnerDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OwnerReference) *bool { return v.BlockOwnerDeletion }).(pulumi.BoolPtrOutput)
}

// If true, this reference points to the managing controller. +optional
func (o OwnerReferenceOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OwnerReference) *bool { return v.Controller }).(pulumi.BoolPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OwnerReferenceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReference) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o OwnerReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
func (o OwnerReferenceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReference) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type OwnerReferenceArrayOutput struct{ *pulumi.OutputState }

func (OwnerReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReference)(nil)).Elem()
}

func (o OwnerReferenceArrayOutput) ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput {
	return o
}

func (o OwnerReferenceArrayOutput) ToOwnerReferenceArrayOutputWithContext(ctx context.Context) OwnerReferenceArrayOutput {
	return o
}

func (o OwnerReferenceArrayOutput) Index(i pulumi.IntInput) OwnerReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OwnerReference {
		return vs[0].([]OwnerReference)[vs[1].(int)]
	}).(OwnerReferenceOutput)
}

// OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.
type OwnerReferenceResponse struct {
	// API version of the referent.
	ApiVersion string `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional
	BlockOwnerDeletion bool `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller. +optional
	Controller bool `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`
	// Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name string `pulumi:"name"`
	// UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid string `pulumi:"uid"`
}

// OwnerReferenceResponseInput is an input type that accepts OwnerReferenceResponseArgs and OwnerReferenceResponseOutput values.
// You can construct a concrete instance of `OwnerReferenceResponseInput` via:
//
//          OwnerReferenceResponseArgs{...}
type OwnerReferenceResponseInput interface {
	pulumi.Input

	ToOwnerReferenceResponseOutput() OwnerReferenceResponseOutput
	ToOwnerReferenceResponseOutputWithContext(context.Context) OwnerReferenceResponseOutput
}

// OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.
type OwnerReferenceResponseArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional
	BlockOwnerDeletion pulumi.BoolInput `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller. +optional
	Controller pulumi.BoolInput `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringInput `pulumi:"name"`
	// UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (OwnerReferenceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReferenceResponse)(nil)).Elem()
}

func (i OwnerReferenceResponseArgs) ToOwnerReferenceResponseOutput() OwnerReferenceResponseOutput {
	return i.ToOwnerReferenceResponseOutputWithContext(context.Background())
}

func (i OwnerReferenceResponseArgs) ToOwnerReferenceResponseOutputWithContext(ctx context.Context) OwnerReferenceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerReferenceResponseOutput)
}

// OwnerReferenceResponseArrayInput is an input type that accepts OwnerReferenceResponseArray and OwnerReferenceResponseArrayOutput values.
// You can construct a concrete instance of `OwnerReferenceResponseArrayInput` via:
//
//          OwnerReferenceResponseArray{ OwnerReferenceResponseArgs{...} }
type OwnerReferenceResponseArrayInput interface {
	pulumi.Input

	ToOwnerReferenceResponseArrayOutput() OwnerReferenceResponseArrayOutput
	ToOwnerReferenceResponseArrayOutputWithContext(context.Context) OwnerReferenceResponseArrayOutput
}

type OwnerReferenceResponseArray []OwnerReferenceResponseInput

func (OwnerReferenceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReferenceResponse)(nil)).Elem()
}

func (i OwnerReferenceResponseArray) ToOwnerReferenceResponseArrayOutput() OwnerReferenceResponseArrayOutput {
	return i.ToOwnerReferenceResponseArrayOutputWithContext(context.Background())
}

func (i OwnerReferenceResponseArray) ToOwnerReferenceResponseArrayOutputWithContext(ctx context.Context) OwnerReferenceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerReferenceResponseArrayOutput)
}

// OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.
type OwnerReferenceResponseOutput struct{ *pulumi.OutputState }

func (OwnerReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReferenceResponse)(nil)).Elem()
}

func (o OwnerReferenceResponseOutput) ToOwnerReferenceResponseOutput() OwnerReferenceResponseOutput {
	return o
}

func (o OwnerReferenceResponseOutput) ToOwnerReferenceResponseOutputWithContext(ctx context.Context) OwnerReferenceResponseOutput {
	return o
}

// API version of the referent.
func (o OwnerReferenceResponseOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional
func (o OwnerReferenceResponseOutput) BlockOwnerDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) bool { return v.BlockOwnerDeletion }).(pulumi.BoolOutput)
}

// If true, this reference points to the managing controller. +optional
func (o OwnerReferenceResponseOutput) Controller() pulumi.BoolOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) bool { return v.Controller }).(pulumi.BoolOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OwnerReferenceResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o OwnerReferenceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
func (o OwnerReferenceResponseOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReferenceResponse) string { return v.Uid }).(pulumi.StringOutput)
}

type OwnerReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (OwnerReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReferenceResponse)(nil)).Elem()
}

func (o OwnerReferenceResponseArrayOutput) ToOwnerReferenceResponseArrayOutput() OwnerReferenceResponseArrayOutput {
	return o
}

func (o OwnerReferenceResponseArrayOutput) ToOwnerReferenceResponseArrayOutputWithContext(ctx context.Context) OwnerReferenceResponseArrayOutput {
	return o
}

func (o OwnerReferenceResponseArrayOutput) Index(i pulumi.IntInput) OwnerReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OwnerReferenceResponse {
		return vs[0].([]OwnerReferenceResponse)[vs[1].(int)]
	}).(OwnerReferenceResponseOutput)
}

// Not supported by Cloud Run Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type Probe struct {
	// (Optional) One and only one of the following should be specified. Exec specifies the action to take. A field inlined from the Handler message.
	Exec *ExecAction `pulumi:"exec"`
	// (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// (Optional) HTTPGet specifies the http request to perform. A field inlined from the Handler message.
	HttpGet *HTTPGetAction `pulumi:"httpGet"`
	// (Optional) Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// (Optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// (Optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported A field inlined from the Handler message.
	TcpSocket *TCPSocketAction `pulumi:"tcpSocket"`
	// (Optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ProbeInput is an input type that accepts ProbeArgs and ProbeOutput values.
// You can construct a concrete instance of `ProbeInput` via:
//
//          ProbeArgs{...}
type ProbeInput interface {
	pulumi.Input

	ToProbeOutput() ProbeOutput
	ToProbeOutputWithContext(context.Context) ProbeOutput
}

// Not supported by Cloud Run Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeArgs struct {
	// (Optional) One and only one of the following should be specified. Exec specifies the action to take. A field inlined from the Handler message.
	Exec ExecActionPtrInput `pulumi:"exec"`
	// (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// (Optional) HTTPGet specifies the http request to perform. A field inlined from the Handler message.
	HttpGet HTTPGetActionPtrInput `pulumi:"httpGet"`
	// (Optional) Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// (Optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// (Optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported A field inlined from the Handler message.
	TcpSocket TCPSocketActionPtrInput `pulumi:"tcpSocket"`
	// (Optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Probe)(nil)).Elem()
}

func (i ProbeArgs) ToProbeOutput() ProbeOutput {
	return i.ToProbeOutputWithContext(context.Background())
}

func (i ProbeArgs) ToProbeOutputWithContext(ctx context.Context) ProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeOutput)
}

func (i ProbeArgs) ToProbePtrOutput() ProbePtrOutput {
	return i.ToProbePtrOutputWithContext(context.Background())
}

func (i ProbeArgs) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeOutput).ToProbePtrOutputWithContext(ctx)
}

// ProbePtrInput is an input type that accepts ProbeArgs, ProbePtr and ProbePtrOutput values.
// You can construct a concrete instance of `ProbePtrInput` via:
//
//          ProbeArgs{...}
//
//  or:
//
//          nil
type ProbePtrInput interface {
	pulumi.Input

	ToProbePtrOutput() ProbePtrOutput
	ToProbePtrOutputWithContext(context.Context) ProbePtrOutput
}

type probePtrType ProbeArgs

func ProbePtr(v *ProbeArgs) ProbePtrInput {
	return (*probePtrType)(v)
}

func (*probePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Probe)(nil)).Elem()
}

func (i *probePtrType) ToProbePtrOutput() ProbePtrOutput {
	return i.ToProbePtrOutputWithContext(context.Background())
}

func (i *probePtrType) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbePtrOutput)
}

// Not supported by Cloud Run Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeOutput struct{ *pulumi.OutputState }

func (ProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Probe)(nil)).Elem()
}

func (o ProbeOutput) ToProbeOutput() ProbeOutput {
	return o
}

func (o ProbeOutput) ToProbeOutputWithContext(ctx context.Context) ProbeOutput {
	return o
}

func (o ProbeOutput) ToProbePtrOutput() ProbePtrOutput {
	return o.ToProbePtrOutputWithContext(context.Background())
}

func (o ProbeOutput) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Probe) *Probe {
		return &v
	}).(ProbePtrOutput)
}

// (Optional) One and only one of the following should be specified. Exec specifies the action to take. A field inlined from the Handler message.
func (o ProbeOutput) Exec() ExecActionPtrOutput {
	return o.ApplyT(func(v Probe) *ExecAction { return v.Exec }).(ExecActionPtrOutput)
}

// (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o ProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// (Optional) HTTPGet specifies the http request to perform. A field inlined from the Handler message.
func (o ProbeOutput) HttpGet() HTTPGetActionPtrOutput {
	return o.ApplyT(func(v Probe) *HTTPGetAction { return v.HttpGet }).(HTTPGetActionPtrOutput)
}

// (Optional) Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// (Optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o ProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
func (o ProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// (Optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported A field inlined from the Handler message.
func (o ProbeOutput) TcpSocket() TCPSocketActionPtrOutput {
	return o.ApplyT(func(v Probe) *TCPSocketAction { return v.TcpSocket }).(TCPSocketActionPtrOutput)
}

// (Optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Probe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ProbePtrOutput struct{ *pulumi.OutputState }

func (ProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Probe)(nil)).Elem()
}

func (o ProbePtrOutput) ToProbePtrOutput() ProbePtrOutput {
	return o
}

func (o ProbePtrOutput) ToProbePtrOutputWithContext(ctx context.Context) ProbePtrOutput {
	return o
}

func (o ProbePtrOutput) Elem() ProbeOutput {
	return o.ApplyT(func(v *Probe) Probe {
		if v != nil {
			return *v
		}
		var ret Probe
		return ret
	}).(ProbeOutput)
}

// (Optional) One and only one of the following should be specified. Exec specifies the action to take. A field inlined from the Handler message.
func (o ProbePtrOutput) Exec() ExecActionPtrOutput {
	return o.ApplyT(func(v *Probe) *ExecAction {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ExecActionPtrOutput)
}

// (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o ProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// (Optional) HTTPGet specifies the http request to perform. A field inlined from the Handler message.
func (o ProbePtrOutput) HttpGet() HTTPGetActionPtrOutput {
	return o.ApplyT(func(v *Probe) *HTTPGetAction {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(HTTPGetActionPtrOutput)
}

// (Optional) Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// (Optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o ProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
func (o ProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// (Optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported A field inlined from the Handler message.
func (o ProbePtrOutput) TcpSocket() TCPSocketActionPtrOutput {
	return o.ApplyT(func(v *Probe) *TCPSocketAction {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(TCPSocketActionPtrOutput)
}

// (Optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Probe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Not supported by Cloud Run Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeResponse struct {
	// (Optional) One and only one of the following should be specified. Exec specifies the action to take. A field inlined from the Handler message.
	Exec ExecActionResponse `pulumi:"exec"`
	// (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold int `pulumi:"failureThreshold"`
	// (Optional) HTTPGet specifies the http request to perform. A field inlined from the Handler message.
	HttpGet HTTPGetActionResponse `pulumi:"httpGet"`
	// (Optional) Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds int `pulumi:"initialDelaySeconds"`
	// (Optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds int `pulumi:"periodSeconds"`
	// (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold int `pulumi:"successThreshold"`
	// (Optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported A field inlined from the Handler message.
	TcpSocket TCPSocketActionResponse `pulumi:"tcpSocket"`
	// (Optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds int `pulumi:"timeoutSeconds"`
}

// ProbeResponseInput is an input type that accepts ProbeResponseArgs and ProbeResponseOutput values.
// You can construct a concrete instance of `ProbeResponseInput` via:
//
//          ProbeResponseArgs{...}
type ProbeResponseInput interface {
	pulumi.Input

	ToProbeResponseOutput() ProbeResponseOutput
	ToProbeResponseOutputWithContext(context.Context) ProbeResponseOutput
}

// Not supported by Cloud Run Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeResponseArgs struct {
	// (Optional) One and only one of the following should be specified. Exec specifies the action to take. A field inlined from the Handler message.
	Exec ExecActionResponseInput `pulumi:"exec"`
	// (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntInput `pulumi:"failureThreshold"`
	// (Optional) HTTPGet specifies the http request to perform. A field inlined from the Handler message.
	HttpGet HTTPGetActionResponseInput `pulumi:"httpGet"`
	// (Optional) Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntInput `pulumi:"initialDelaySeconds"`
	// (Optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntInput `pulumi:"periodSeconds"`
	// (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	SuccessThreshold pulumi.IntInput `pulumi:"successThreshold"`
	// (Optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported A field inlined from the Handler message.
	TcpSocket TCPSocketActionResponseInput `pulumi:"tcpSocket"`
	// (Optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntInput `pulumi:"timeoutSeconds"`
}

func (ProbeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeResponse)(nil)).Elem()
}

func (i ProbeResponseArgs) ToProbeResponseOutput() ProbeResponseOutput {
	return i.ToProbeResponseOutputWithContext(context.Background())
}

func (i ProbeResponseArgs) ToProbeResponseOutputWithContext(ctx context.Context) ProbeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeResponseOutput)
}

// Not supported by Cloud Run Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ProbeResponseOutput struct{ *pulumi.OutputState }

func (ProbeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeResponse)(nil)).Elem()
}

func (o ProbeResponseOutput) ToProbeResponseOutput() ProbeResponseOutput {
	return o
}

func (o ProbeResponseOutput) ToProbeResponseOutputWithContext(ctx context.Context) ProbeResponseOutput {
	return o
}

// (Optional) One and only one of the following should be specified. Exec specifies the action to take. A field inlined from the Handler message.
func (o ProbeResponseOutput) Exec() ExecActionResponseOutput {
	return o.ApplyT(func(v ProbeResponse) ExecActionResponse { return v.Exec }).(ExecActionResponseOutput)
}

// (Optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o ProbeResponseOutput) FailureThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ProbeResponse) int { return v.FailureThreshold }).(pulumi.IntOutput)
}

// (Optional) HTTPGet specifies the http request to perform. A field inlined from the Handler message.
func (o ProbeResponseOutput) HttpGet() HTTPGetActionResponseOutput {
	return o.ApplyT(func(v ProbeResponse) HTTPGetActionResponse { return v.HttpGet }).(HTTPGetActionResponseOutput)
}

// (Optional) Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbeResponseOutput) InitialDelaySeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ProbeResponse) int { return v.InitialDelaySeconds }).(pulumi.IntOutput)
}

// (Optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o ProbeResponseOutput) PeriodSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ProbeResponse) int { return v.PeriodSeconds }).(pulumi.IntOutput)
}

// (Optional) Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
func (o ProbeResponseOutput) SuccessThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ProbeResponse) int { return v.SuccessThreshold }).(pulumi.IntOutput)
}

// (Optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported A field inlined from the Handler message.
func (o ProbeResponseOutput) TcpSocket() TCPSocketActionResponseOutput {
	return o.ApplyT(func(v ProbeResponse) TCPSocketActionResponse { return v.TcpSocket }).(TCPSocketActionResponseOutput)
}

// (Optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ProbeResponseOutput) TimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ProbeResponse) int { return v.TimeoutSeconds }).(pulumi.IntOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirements struct {
	// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. Limits describes the maximum amount of compute resources allowed. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits map[string]string `pulumi:"limits"`
	// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1' and '2'. Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Requests map[string]string `pulumi:"requests"`
}

// ResourceRequirementsInput is an input type that accepts ResourceRequirementsArgs and ResourceRequirementsOutput values.
// You can construct a concrete instance of `ResourceRequirementsInput` via:
//
//          ResourceRequirementsArgs{...}
type ResourceRequirementsInput interface {
	pulumi.Input

	ToResourceRequirementsOutput() ResourceRequirementsOutput
	ToResourceRequirementsOutputWithContext(context.Context) ResourceRequirementsOutput
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsArgs struct {
	// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. Limits describes the maximum amount of compute resources allowed. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1' and '2'. Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (ResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return i.ToResourceRequirementsOutputWithContext(context.Background())
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsOutput)
}

func (i ResourceRequirementsArgs) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return i.ToResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i ResourceRequirementsArgs) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsOutput).ToResourceRequirementsPtrOutputWithContext(ctx)
}

// ResourceRequirementsPtrInput is an input type that accepts ResourceRequirementsArgs, ResourceRequirementsPtr and ResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `ResourceRequirementsPtrInput` via:
//
//          ResourceRequirementsArgs{...}
//
//  or:
//
//          nil
type ResourceRequirementsPtrInput interface {
	pulumi.Input

	ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput
	ToResourceRequirementsPtrOutputWithContext(context.Context) ResourceRequirementsPtrOutput
}

type resourceRequirementsPtrType ResourceRequirementsArgs

func ResourceRequirementsPtr(v *ResourceRequirementsArgs) ResourceRequirementsPtrInput {
	return (*resourceRequirementsPtrType)(v)
}

func (*resourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRequirements)(nil)).Elem()
}

func (i *resourceRequirementsPtrType) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return i.ToResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *resourceRequirementsPtrType) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return o
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return o
}

func (o ResourceRequirementsOutput) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return o.ToResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o ResourceRequirementsOutput) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRequirements) *ResourceRequirements {
		return &v
	}).(ResourceRequirementsPtrOutput)
}

// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. Limits describes the maximum amount of compute resources allowed. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o ResourceRequirementsOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirements) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1' and '2'. Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o ResourceRequirementsOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirements) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type ResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRequirements)(nil)).Elem()
}

func (o ResourceRequirementsPtrOutput) ToResourceRequirementsPtrOutput() ResourceRequirementsPtrOutput {
	return o
}

func (o ResourceRequirementsPtrOutput) ToResourceRequirementsPtrOutputWithContext(ctx context.Context) ResourceRequirementsPtrOutput {
	return o
}

func (o ResourceRequirementsPtrOutput) Elem() ResourceRequirementsOutput {
	return o.ApplyT(func(v *ResourceRequirements) ResourceRequirements {
		if v != nil {
			return *v
		}
		var ret ResourceRequirements
		return ret
	}).(ResourceRequirementsOutput)
}

// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. Limits describes the maximum amount of compute resources allowed. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o ResourceRequirementsPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1' and '2'. Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o ResourceRequirementsPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRequirements) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsResponse struct {
	// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. Limits describes the maximum amount of compute resources allowed. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits map[string]string `pulumi:"limits"`
	// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1' and '2'. Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Requests map[string]string `pulumi:"requests"`
}

// ResourceRequirementsResponseInput is an input type that accepts ResourceRequirementsResponseArgs and ResourceRequirementsResponseOutput values.
// You can construct a concrete instance of `ResourceRequirementsResponseInput` via:
//
//          ResourceRequirementsResponseArgs{...}
type ResourceRequirementsResponseInput interface {
	pulumi.Input

	ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput
	ToResourceRequirementsResponseOutputWithContext(context.Context) ResourceRequirementsResponseOutput
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsResponseArgs struct {
	// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. Limits describes the maximum amount of compute resources allowed. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1' and '2'. Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (ResourceRequirementsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsResponse)(nil)).Elem()
}

func (i ResourceRequirementsResponseArgs) ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput {
	return i.ToResourceRequirementsResponseOutputWithContext(context.Background())
}

func (i ResourceRequirementsResponseArgs) ToResourceRequirementsResponseOutputWithContext(ctx context.Context) ResourceRequirementsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsResponseOutput)
}

// ResourceRequirements describes the compute resource requirements.
type ResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsResponse)(nil)).Elem()
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput {
	return o
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutputWithContext(ctx context.Context) ResourceRequirementsResponseOutput {
	return o
}

// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. Limits describes the maximum amount of compute resources allowed. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o ResourceRequirementsResponseOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// (Optional) Only memory and CPU are supported. Note: The only supported values for CPU are '1' and '2'. Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
func (o ResourceRequirementsResponseOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

// Not supported by Cloud Run SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSource struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `pulumi:"localObjectReference"`
	// The Secret to select from.
	Name *string `pulumi:"name"`
	// (Optional) Specify whether the Secret must be defined
	Optional *bool `pulumi:"optional"`
}

// SecretEnvSourceInput is an input type that accepts SecretEnvSourceArgs and SecretEnvSourceOutput values.
// You can construct a concrete instance of `SecretEnvSourceInput` via:
//
//          SecretEnvSourceArgs{...}
type SecretEnvSourceInput interface {
	pulumi.Input

	ToSecretEnvSourceOutput() SecretEnvSourceOutput
	ToSecretEnvSourceOutputWithContext(context.Context) SecretEnvSourceOutput
}

// Not supported by Cloud Run SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceArgs struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferencePtrInput `pulumi:"localObjectReference"`
	// The Secret to select from.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) Specify whether the Secret must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (SecretEnvSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSource)(nil)).Elem()
}

func (i SecretEnvSourceArgs) ToSecretEnvSourceOutput() SecretEnvSourceOutput {
	return i.ToSecretEnvSourceOutputWithContext(context.Background())
}

func (i SecretEnvSourceArgs) ToSecretEnvSourceOutputWithContext(ctx context.Context) SecretEnvSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourceOutput)
}

func (i SecretEnvSourceArgs) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return i.ToSecretEnvSourcePtrOutputWithContext(context.Background())
}

func (i SecretEnvSourceArgs) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourceOutput).ToSecretEnvSourcePtrOutputWithContext(ctx)
}

// SecretEnvSourcePtrInput is an input type that accepts SecretEnvSourceArgs, SecretEnvSourcePtr and SecretEnvSourcePtrOutput values.
// You can construct a concrete instance of `SecretEnvSourcePtrInput` via:
//
//          SecretEnvSourceArgs{...}
//
//  or:
//
//          nil
type SecretEnvSourcePtrInput interface {
	pulumi.Input

	ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput
	ToSecretEnvSourcePtrOutputWithContext(context.Context) SecretEnvSourcePtrOutput
}

type secretEnvSourcePtrType SecretEnvSourceArgs

func SecretEnvSourcePtr(v *SecretEnvSourceArgs) SecretEnvSourcePtrInput {
	return (*secretEnvSourcePtrType)(v)
}

func (*secretEnvSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretEnvSource)(nil)).Elem()
}

func (i *secretEnvSourcePtrType) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return i.ToSecretEnvSourcePtrOutputWithContext(context.Background())
}

func (i *secretEnvSourcePtrType) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourcePtrOutput)
}

// Not supported by Cloud Run SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceOutput struct{ *pulumi.OutputState }

func (SecretEnvSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSource)(nil)).Elem()
}

func (o SecretEnvSourceOutput) ToSecretEnvSourceOutput() SecretEnvSourceOutput {
	return o
}

func (o SecretEnvSourceOutput) ToSecretEnvSourceOutputWithContext(ctx context.Context) SecretEnvSourceOutput {
	return o
}

func (o SecretEnvSourceOutput) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return o.ToSecretEnvSourcePtrOutputWithContext(context.Background())
}

func (o SecretEnvSourceOutput) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretEnvSource) *SecretEnvSource {
		return &v
	}).(SecretEnvSourcePtrOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretEnvSourceOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v SecretEnvSource) *LocalObjectReference { return v.LocalObjectReference }).(LocalObjectReferencePtrOutput)
}

// The Secret to select from.
func (o SecretEnvSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretEnvSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the Secret must be defined
func (o SecretEnvSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretEnvSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SecretEnvSourcePtrOutput struct{ *pulumi.OutputState }

func (SecretEnvSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretEnvSource)(nil)).Elem()
}

func (o SecretEnvSourcePtrOutput) ToSecretEnvSourcePtrOutput() SecretEnvSourcePtrOutput {
	return o
}

func (o SecretEnvSourcePtrOutput) ToSecretEnvSourcePtrOutputWithContext(ctx context.Context) SecretEnvSourcePtrOutput {
	return o
}

func (o SecretEnvSourcePtrOutput) Elem() SecretEnvSourceOutput {
	return o.ApplyT(func(v *SecretEnvSource) SecretEnvSource {
		if v != nil {
			return *v
		}
		var ret SecretEnvSource
		return ret
	}).(SecretEnvSourceOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretEnvSourcePtrOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *SecretEnvSource) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.LocalObjectReference
	}).(LocalObjectReferencePtrOutput)
}

// The Secret to select from.
func (o SecretEnvSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretEnvSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the Secret must be defined
func (o SecretEnvSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretEnvSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Not supported by Cloud Run SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceResponse struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponse `pulumi:"localObjectReference"`
	// The Secret to select from.
	Name string `pulumi:"name"`
	// (Optional) Specify whether the Secret must be defined
	Optional bool `pulumi:"optional"`
}

// SecretEnvSourceResponseInput is an input type that accepts SecretEnvSourceResponseArgs and SecretEnvSourceResponseOutput values.
// You can construct a concrete instance of `SecretEnvSourceResponseInput` via:
//
//          SecretEnvSourceResponseArgs{...}
type SecretEnvSourceResponseInput interface {
	pulumi.Input

	ToSecretEnvSourceResponseOutput() SecretEnvSourceResponseOutput
	ToSecretEnvSourceResponseOutputWithContext(context.Context) SecretEnvSourceResponseOutput
}

// Not supported by Cloud Run SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceResponseArgs struct {
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponseInput `pulumi:"localObjectReference"`
	// The Secret to select from.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) Specify whether the Secret must be defined
	Optional pulumi.BoolInput `pulumi:"optional"`
}

func (SecretEnvSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSourceResponse)(nil)).Elem()
}

func (i SecretEnvSourceResponseArgs) ToSecretEnvSourceResponseOutput() SecretEnvSourceResponseOutput {
	return i.ToSecretEnvSourceResponseOutputWithContext(context.Background())
}

func (i SecretEnvSourceResponseArgs) ToSecretEnvSourceResponseOutputWithContext(ctx context.Context) SecretEnvSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretEnvSourceResponseOutput)
}

// Not supported by Cloud Run SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
type SecretEnvSourceResponseOutput struct{ *pulumi.OutputState }

func (SecretEnvSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretEnvSourceResponse)(nil)).Elem()
}

func (o SecretEnvSourceResponseOutput) ToSecretEnvSourceResponseOutput() SecretEnvSourceResponseOutput {
	return o
}

func (o SecretEnvSourceResponseOutput) ToSecretEnvSourceResponseOutputWithContext(ctx context.Context) SecretEnvSourceResponseOutput {
	return o
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretEnvSourceResponseOutput) LocalObjectReference() LocalObjectReferenceResponseOutput {
	return o.ApplyT(func(v SecretEnvSourceResponse) LocalObjectReferenceResponse { return v.LocalObjectReference }).(LocalObjectReferenceResponseOutput)
}

// The Secret to select from.
func (o SecretEnvSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretEnvSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) Specify whether the Secret must be defined
func (o SecretEnvSourceResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v SecretEnvSourceResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelector struct {
	// A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
	Key *string `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference *LocalObjectReference `pulumi:"localObjectReference"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
	Name *string `pulumi:"name"`
	// (Optional) Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// SecretKeySelectorInput is an input type that accepts SecretKeySelectorArgs and SecretKeySelectorOutput values.
// You can construct a concrete instance of `SecretKeySelectorInput` via:
//
//          SecretKeySelectorArgs{...}
type SecretKeySelectorInput interface {
	pulumi.Input

	ToSecretKeySelectorOutput() SecretKeySelectorOutput
	ToSecretKeySelectorOutputWithContext(context.Context) SecretKeySelectorOutput
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorArgs struct {
	// A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferencePtrInput `pulumi:"localObjectReference"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (SecretKeySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelector)(nil)).Elem()
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorOutput() SecretKeySelectorOutput {
	return i.ToSecretKeySelectorOutputWithContext(context.Background())
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorOutputWithContext(ctx context.Context) SecretKeySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorOutput)
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return i.ToSecretKeySelectorPtrOutputWithContext(context.Background())
}

func (i SecretKeySelectorArgs) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorOutput).ToSecretKeySelectorPtrOutputWithContext(ctx)
}

// SecretKeySelectorPtrInput is an input type that accepts SecretKeySelectorArgs, SecretKeySelectorPtr and SecretKeySelectorPtrOutput values.
// You can construct a concrete instance of `SecretKeySelectorPtrInput` via:
//
//          SecretKeySelectorArgs{...}
//
//  or:
//
//          nil
type SecretKeySelectorPtrInput interface {
	pulumi.Input

	ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput
	ToSecretKeySelectorPtrOutputWithContext(context.Context) SecretKeySelectorPtrOutput
}

type secretKeySelectorPtrType SecretKeySelectorArgs

func SecretKeySelectorPtr(v *SecretKeySelectorArgs) SecretKeySelectorPtrInput {
	return (*secretKeySelectorPtrType)(v)
}

func (*secretKeySelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretKeySelector)(nil)).Elem()
}

func (i *secretKeySelectorPtrType) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return i.ToSecretKeySelectorPtrOutputWithContext(context.Background())
}

func (i *secretKeySelectorPtrType) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorPtrOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorOutput struct{ *pulumi.OutputState }

func (SecretKeySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelector)(nil)).Elem()
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorOutput() SecretKeySelectorOutput {
	return o
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorOutputWithContext(ctx context.Context) SecretKeySelectorOutput {
	return o
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return o.ToSecretKeySelectorPtrOutputWithContext(context.Background())
}

func (o SecretKeySelectorOutput) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretKeySelector) *SecretKeySelector {
		return &v
	}).(SecretKeySelectorPtrOutput)
}

// A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
func (o SecretKeySelectorOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretKeySelector) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretKeySelectorOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v SecretKeySelector) *LocalObjectReference { return v.LocalObjectReference }).(LocalObjectReferencePtrOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
func (o SecretKeySelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretKeySelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the Secret or its key must be defined
func (o SecretKeySelectorOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretKeySelector) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SecretKeySelectorPtrOutput struct{ *pulumi.OutputState }

func (SecretKeySelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretKeySelector)(nil)).Elem()
}

func (o SecretKeySelectorPtrOutput) ToSecretKeySelectorPtrOutput() SecretKeySelectorPtrOutput {
	return o
}

func (o SecretKeySelectorPtrOutput) ToSecretKeySelectorPtrOutputWithContext(ctx context.Context) SecretKeySelectorPtrOutput {
	return o
}

func (o SecretKeySelectorPtrOutput) Elem() SecretKeySelectorOutput {
	return o.ApplyT(func(v *SecretKeySelector) SecretKeySelector {
		if v != nil {
			return *v
		}
		var ret SecretKeySelector
		return ret
	}).(SecretKeySelectorOutput)
}

// A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
func (o SecretKeySelectorPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretKeySelectorPtrOutput) LocalObjectReference() LocalObjectReferencePtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *LocalObjectReference {
		if v == nil {
			return nil
		}
		return v.LocalObjectReference
	}).(LocalObjectReferencePtrOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
func (o SecretKeySelectorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// (Optional) Specify whether the Secret or its key must be defined
func (o SecretKeySelectorPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretKeySelector) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorResponse struct {
	// A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
	Key string `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponse `pulumi:"localObjectReference"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
	Name string `pulumi:"name"`
	// (Optional) Specify whether the Secret or its key must be defined
	Optional bool `pulumi:"optional"`
}

// SecretKeySelectorResponseInput is an input type that accepts SecretKeySelectorResponseArgs and SecretKeySelectorResponseOutput values.
// You can construct a concrete instance of `SecretKeySelectorResponseInput` via:
//
//          SecretKeySelectorResponseArgs{...}
type SecretKeySelectorResponseInput interface {
	pulumi.Input

	ToSecretKeySelectorResponseOutput() SecretKeySelectorResponseOutput
	ToSecretKeySelectorResponseOutputWithContext(context.Context) SecretKeySelectorResponseOutput
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorResponseArgs struct {
	// A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
	LocalObjectReference LocalObjectReferenceResponseInput `pulumi:"localObjectReference"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) Specify whether the Secret or its key must be defined
	Optional pulumi.BoolInput `pulumi:"optional"`
}

func (SecretKeySelectorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelectorResponse)(nil)).Elem()
}

func (i SecretKeySelectorResponseArgs) ToSecretKeySelectorResponseOutput() SecretKeySelectorResponseOutput {
	return i.ToSecretKeySelectorResponseOutputWithContext(context.Background())
}

func (i SecretKeySelectorResponseArgs) ToSecretKeySelectorResponseOutputWithContext(ctx context.Context) SecretKeySelectorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretKeySelectorResponseOutput)
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelectorResponseOutput struct{ *pulumi.OutputState }

func (SecretKeySelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretKeySelectorResponse)(nil)).Elem()
}

func (o SecretKeySelectorResponseOutput) ToSecretKeySelectorResponseOutput() SecretKeySelectorResponseOutput {
	return o
}

func (o SecretKeySelectorResponseOutput) ToSecretKeySelectorResponseOutputWithContext(ctx context.Context) SecretKeySelectorResponseOutput {
	return o
}

// A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.
func (o SecretKeySelectorResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SecretKeySelectorResponse) string { return v.Key }).(pulumi.StringOutput)
}

// This field should not be used directly as it is meant to be inlined directly into the message. Use the "name" field instead.
func (o SecretKeySelectorResponseOutput) LocalObjectReference() LocalObjectReferenceResponseOutput {
	return o.ApplyT(func(v SecretKeySelectorResponse) LocalObjectReferenceResponse { return v.LocalObjectReference }).(LocalObjectReferenceResponseOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.
func (o SecretKeySelectorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretKeySelectorResponse) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) Specify whether the Secret or its key must be defined
func (o SecretKeySelectorResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v SecretKeySelectorResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSource struct {
	// (Optional) Mode bits to use on created files by default. Must be a value between 0000 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. NOTE: This is an integer representation of the mode bits. So, the integer value should look exactly as the chmod numeric notation, i.e. Unix chmod "777" (a=rwx) should have the integer value 777.
	DefaultMode *int `pulumi:"defaultMode"`
	// (Optional) If unspecified, the volume will expose a file whose name is the secret_name. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a key and a path. If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items []KeyToPath `pulumi:"items"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional *bool `pulumi:"optional"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
	SecretName *string `pulumi:"secretName"`
}

// SecretVolumeSourceInput is an input type that accepts SecretVolumeSourceArgs and SecretVolumeSourceOutput values.
// You can construct a concrete instance of `SecretVolumeSourceInput` via:
//
//          SecretVolumeSourceArgs{...}
type SecretVolumeSourceInput interface {
	pulumi.Input

	ToSecretVolumeSourceOutput() SecretVolumeSourceOutput
	ToSecretVolumeSourceOutputWithContext(context.Context) SecretVolumeSourceOutput
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSourceArgs struct {
	// (Optional) Mode bits to use on created files by default. Must be a value between 0000 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. NOTE: This is an integer representation of the mode bits. So, the integer value should look exactly as the chmod numeric notation, i.e. Unix chmod "777" (a=rwx) should have the integer value 777.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// (Optional) If unspecified, the volume will expose a file whose name is the secret_name. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a key and a path. If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items KeyToPathArrayInput `pulumi:"items"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (SecretVolumeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSource)(nil)).Elem()
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourceOutput() SecretVolumeSourceOutput {
	return i.ToSecretVolumeSourceOutputWithContext(context.Background())
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourceOutputWithContext(ctx context.Context) SecretVolumeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourceOutput)
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return i.ToSecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (i SecretVolumeSourceArgs) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourceOutput).ToSecretVolumeSourcePtrOutputWithContext(ctx)
}

// SecretVolumeSourcePtrInput is an input type that accepts SecretVolumeSourceArgs, SecretVolumeSourcePtr and SecretVolumeSourcePtrOutput values.
// You can construct a concrete instance of `SecretVolumeSourcePtrInput` via:
//
//          SecretVolumeSourceArgs{...}
//
//  or:
//
//          nil
type SecretVolumeSourcePtrInput interface {
	pulumi.Input

	ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput
	ToSecretVolumeSourcePtrOutputWithContext(context.Context) SecretVolumeSourcePtrOutput
}

type secretVolumeSourcePtrType SecretVolumeSourceArgs

func SecretVolumeSourcePtr(v *SecretVolumeSourceArgs) SecretVolumeSourcePtrInput {
	return (*secretVolumeSourcePtrType)(v)
}

func (*secretVolumeSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretVolumeSource)(nil)).Elem()
}

func (i *secretVolumeSourcePtrType) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return i.ToSecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (i *secretVolumeSourcePtrType) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourcePtrOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSourceOutput struct{ *pulumi.OutputState }

func (SecretVolumeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSource)(nil)).Elem()
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourceOutput() SecretVolumeSourceOutput {
	return o
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourceOutputWithContext(ctx context.Context) SecretVolumeSourceOutput {
	return o
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return o.ToSecretVolumeSourcePtrOutputWithContext(context.Background())
}

func (o SecretVolumeSourceOutput) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretVolumeSource) *SecretVolumeSource {
		return &v
	}).(SecretVolumeSourcePtrOutput)
}

// (Optional) Mode bits to use on created files by default. Must be a value between 0000 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. NOTE: This is an integer representation of the mode bits. So, the integer value should look exactly as the chmod numeric notation, i.e. Unix chmod "777" (a=rwx) should have the integer value 777.
func (o SecretVolumeSourceOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecretVolumeSource) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// (Optional) If unspecified, the volume will expose a file whose name is the secret_name. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a key and a path. If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
func (o SecretVolumeSourceOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v SecretVolumeSource) []KeyToPath { return v.Items }).(KeyToPathArrayOutput)
}

// (Optional) Specify whether the Secret or its keys must be defined.
func (o SecretVolumeSourceOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecretVolumeSource) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
func (o SecretVolumeSourceOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolumeSource) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type SecretVolumeSourcePtrOutput struct{ *pulumi.OutputState }

func (SecretVolumeSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretVolumeSource)(nil)).Elem()
}

func (o SecretVolumeSourcePtrOutput) ToSecretVolumeSourcePtrOutput() SecretVolumeSourcePtrOutput {
	return o
}

func (o SecretVolumeSourcePtrOutput) ToSecretVolumeSourcePtrOutputWithContext(ctx context.Context) SecretVolumeSourcePtrOutput {
	return o
}

func (o SecretVolumeSourcePtrOutput) Elem() SecretVolumeSourceOutput {
	return o.ApplyT(func(v *SecretVolumeSource) SecretVolumeSource {
		if v != nil {
			return *v
		}
		var ret SecretVolumeSource
		return ret
	}).(SecretVolumeSourceOutput)
}

// (Optional) Mode bits to use on created files by default. Must be a value between 0000 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. NOTE: This is an integer representation of the mode bits. So, the integer value should look exactly as the chmod numeric notation, i.e. Unix chmod "777" (a=rwx) should have the integer value 777.
func (o SecretVolumeSourcePtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSource) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// (Optional) If unspecified, the volume will expose a file whose name is the secret_name. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a key and a path. If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
func (o SecretVolumeSourcePtrOutput) Items() KeyToPathArrayOutput {
	return o.ApplyT(func(v *SecretVolumeSource) []KeyToPath {
		if v == nil {
			return nil
		}
		return v.Items
	}).(KeyToPathArrayOutput)
}

// (Optional) Specify whether the Secret or its keys must be defined.
func (o SecretVolumeSourcePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSource) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
func (o SecretVolumeSourcePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretVolumeSource) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSourceResponse struct {
	// (Optional) Mode bits to use on created files by default. Must be a value between 0000 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. NOTE: This is an integer representation of the mode bits. So, the integer value should look exactly as the chmod numeric notation, i.e. Unix chmod "777" (a=rwx) should have the integer value 777.
	DefaultMode int `pulumi:"defaultMode"`
	// (Optional) If unspecified, the volume will expose a file whose name is the secret_name. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a key and a path. If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items []KeyToPathResponse `pulumi:"items"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional bool `pulumi:"optional"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
	SecretName string `pulumi:"secretName"`
}

// SecretVolumeSourceResponseInput is an input type that accepts SecretVolumeSourceResponseArgs and SecretVolumeSourceResponseOutput values.
// You can construct a concrete instance of `SecretVolumeSourceResponseInput` via:
//
//          SecretVolumeSourceResponseArgs{...}
type SecretVolumeSourceResponseInput interface {
	pulumi.Input

	ToSecretVolumeSourceResponseOutput() SecretVolumeSourceResponseOutput
	ToSecretVolumeSourceResponseOutputWithContext(context.Context) SecretVolumeSourceResponseOutput
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSourceResponseArgs struct {
	// (Optional) Mode bits to use on created files by default. Must be a value between 0000 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. NOTE: This is an integer representation of the mode bits. So, the integer value should look exactly as the chmod numeric notation, i.e. Unix chmod "777" (a=rwx) should have the integer value 777.
	DefaultMode pulumi.IntInput `pulumi:"defaultMode"`
	// (Optional) If unspecified, the volume will expose a file whose name is the secret_name. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a key and a path. If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
	Items KeyToPathResponseArrayInput `pulumi:"items"`
	// (Optional) Specify whether the Secret or its keys must be defined.
	Optional pulumi.BoolInput `pulumi:"optional"`
	// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (SecretVolumeSourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSourceResponse)(nil)).Elem()
}

func (i SecretVolumeSourceResponseArgs) ToSecretVolumeSourceResponseOutput() SecretVolumeSourceResponseOutput {
	return i.ToSecretVolumeSourceResponseOutputWithContext(context.Background())
}

func (i SecretVolumeSourceResponseArgs) ToSecretVolumeSourceResponseOutputWithContext(ctx context.Context) SecretVolumeSourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeSourceResponseOutput)
}

// The secret's value will be presented as the content of a file whose name is defined in the item path. If no items are defined, the name of the file is the secret_name. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names.
type SecretVolumeSourceResponseOutput struct{ *pulumi.OutputState }

func (SecretVolumeSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeSourceResponse)(nil)).Elem()
}

func (o SecretVolumeSourceResponseOutput) ToSecretVolumeSourceResponseOutput() SecretVolumeSourceResponseOutput {
	return o
}

func (o SecretVolumeSourceResponseOutput) ToSecretVolumeSourceResponseOutputWithContext(ctx context.Context) SecretVolumeSourceResponseOutput {
	return o
}

// (Optional) Mode bits to use on created files by default. Must be a value between 0000 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. NOTE: This is an integer representation of the mode bits. So, the integer value should look exactly as the chmod numeric notation, i.e. Unix chmod "777" (a=rwx) should have the integer value 777.
func (o SecretVolumeSourceResponseOutput) DefaultMode() pulumi.IntOutput {
	return o.ApplyT(func(v SecretVolumeSourceResponse) int { return v.DefaultMode }).(pulumi.IntOutput)
}

// (Optional) If unspecified, the volume will expose a file whose name is the secret_name. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a key and a path. If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.
func (o SecretVolumeSourceResponseOutput) Items() KeyToPathResponseArrayOutput {
	return o.ApplyT(func(v SecretVolumeSourceResponse) []KeyToPathResponse { return v.Items }).(KeyToPathResponseArrayOutput)
}

// (Optional) Specify whether the Secret or its keys must be defined.
func (o SecretVolumeSourceResponseOutput) Optional() pulumi.BoolOutput {
	return o.ApplyT(func(v SecretVolumeSourceResponse) bool { return v.Optional }).(pulumi.BoolOutput)
}

// The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.
func (o SecretVolumeSourceResponseOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretVolumeSourceResponse) string { return v.SecretName }).(pulumi.StringOutput)
}

// Not supported by Cloud Run SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContext struct {
	// (Optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser *int `pulumi:"runAsUser"`
}

// SecurityContextInput is an input type that accepts SecurityContextArgs and SecurityContextOutput values.
// You can construct a concrete instance of `SecurityContextInput` via:
//
//          SecurityContextArgs{...}
type SecurityContextInput interface {
	pulumi.Input

	ToSecurityContextOutput() SecurityContextOutput
	ToSecurityContextOutputWithContext(context.Context) SecurityContextOutput
}

// Not supported by Cloud Run SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContextArgs struct {
	// (Optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
}

func (SecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContext)(nil)).Elem()
}

func (i SecurityContextArgs) ToSecurityContextOutput() SecurityContextOutput {
	return i.ToSecurityContextOutputWithContext(context.Background())
}

func (i SecurityContextArgs) ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextOutput)
}

func (i SecurityContextArgs) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return i.ToSecurityContextPtrOutputWithContext(context.Background())
}

func (i SecurityContextArgs) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextOutput).ToSecurityContextPtrOutputWithContext(ctx)
}

// SecurityContextPtrInput is an input type that accepts SecurityContextArgs, SecurityContextPtr and SecurityContextPtrOutput values.
// You can construct a concrete instance of `SecurityContextPtrInput` via:
//
//          SecurityContextArgs{...}
//
//  or:
//
//          nil
type SecurityContextPtrInput interface {
	pulumi.Input

	ToSecurityContextPtrOutput() SecurityContextPtrOutput
	ToSecurityContextPtrOutputWithContext(context.Context) SecurityContextPtrOutput
}

type securityContextPtrType SecurityContextArgs

func SecurityContextPtr(v *SecurityContextArgs) SecurityContextPtrInput {
	return (*securityContextPtrType)(v)
}

func (*securityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContext)(nil)).Elem()
}

func (i *securityContextPtrType) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return i.ToSecurityContextPtrOutputWithContext(context.Background())
}

func (i *securityContextPtrType) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextPtrOutput)
}

// Not supported by Cloud Run SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContextOutput struct{ *pulumi.OutputState }

func (SecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContext)(nil)).Elem()
}

func (o SecurityContextOutput) ToSecurityContextOutput() SecurityContextOutput {
	return o
}

func (o SecurityContextOutput) ToSecurityContextOutputWithContext(ctx context.Context) SecurityContextOutput {
	return o
}

func (o SecurityContextOutput) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return o.ToSecurityContextPtrOutputWithContext(context.Background())
}

func (o SecurityContextOutput) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityContext) *SecurityContext {
		return &v
	}).(SecurityContextPtrOutput)
}

// (Optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o SecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

type SecurityContextPtrOutput struct{ *pulumi.OutputState }

func (SecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContext)(nil)).Elem()
}

func (o SecurityContextPtrOutput) ToSecurityContextPtrOutput() SecurityContextPtrOutput {
	return o
}

func (o SecurityContextPtrOutput) ToSecurityContextPtrOutputWithContext(ctx context.Context) SecurityContextPtrOutput {
	return o
}

func (o SecurityContextPtrOutput) Elem() SecurityContextOutput {
	return o.ApplyT(func(v *SecurityContext) SecurityContext {
		if v != nil {
			return *v
		}
		var ret SecurityContext
		return ret
	}).(SecurityContextOutput)
}

// (Optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o SecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// Not supported by Cloud Run SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContextResponse struct {
	// (Optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser int `pulumi:"runAsUser"`
}

// SecurityContextResponseInput is an input type that accepts SecurityContextResponseArgs and SecurityContextResponseOutput values.
// You can construct a concrete instance of `SecurityContextResponseInput` via:
//
//          SecurityContextResponseArgs{...}
type SecurityContextResponseInput interface {
	pulumi.Input

	ToSecurityContextResponseOutput() SecurityContextResponseOutput
	ToSecurityContextResponseOutputWithContext(context.Context) SecurityContextResponseOutput
}

// Not supported by Cloud Run SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContextResponseArgs struct {
	// (Optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser pulumi.IntInput `pulumi:"runAsUser"`
}

func (SecurityContextResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextResponse)(nil)).Elem()
}

func (i SecurityContextResponseArgs) ToSecurityContextResponseOutput() SecurityContextResponseOutput {
	return i.ToSecurityContextResponseOutputWithContext(context.Background())
}

func (i SecurityContextResponseArgs) ToSecurityContextResponseOutputWithContext(ctx context.Context) SecurityContextResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextResponseOutput)
}

// Not supported by Cloud Run SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence.
type SecurityContextResponseOutput struct{ *pulumi.OutputState }

func (SecurityContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextResponse)(nil)).Elem()
}

func (o SecurityContextResponseOutput) ToSecurityContextResponseOutput() SecurityContextResponseOutput {
	return o
}

func (o SecurityContextResponseOutput) ToSecurityContextResponseOutputWithContext(ctx context.Context) SecurityContextResponseOutput {
	return o
}

// (Optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o SecurityContextResponseOutput) RunAsUser() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityContextResponse) int { return v.RunAsUser }).(pulumi.IntOutput)
}

// Not supported by Cloud Run TCPSocketAction describes an action based on opening a socket
type TCPSocketAction struct {
	// (Optional) Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
	Port *int `pulumi:"port"`
}

// TCPSocketActionInput is an input type that accepts TCPSocketActionArgs and TCPSocketActionOutput values.
// You can construct a concrete instance of `TCPSocketActionInput` via:
//
//          TCPSocketActionArgs{...}
type TCPSocketActionInput interface {
	pulumi.Input

	ToTCPSocketActionOutput() TCPSocketActionOutput
	ToTCPSocketActionOutputWithContext(context.Context) TCPSocketActionOutput
}

// Not supported by Cloud Run TCPSocketAction describes an action based on opening a socket
type TCPSocketActionArgs struct {
	// (Optional) Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (TCPSocketActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketAction)(nil)).Elem()
}

func (i TCPSocketActionArgs) ToTCPSocketActionOutput() TCPSocketActionOutput {
	return i.ToTCPSocketActionOutputWithContext(context.Background())
}

func (i TCPSocketActionArgs) ToTCPSocketActionOutputWithContext(ctx context.Context) TCPSocketActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionOutput)
}

func (i TCPSocketActionArgs) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return i.ToTCPSocketActionPtrOutputWithContext(context.Background())
}

func (i TCPSocketActionArgs) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionOutput).ToTCPSocketActionPtrOutputWithContext(ctx)
}

// TCPSocketActionPtrInput is an input type that accepts TCPSocketActionArgs, TCPSocketActionPtr and TCPSocketActionPtrOutput values.
// You can construct a concrete instance of `TCPSocketActionPtrInput` via:
//
//          TCPSocketActionArgs{...}
//
//  or:
//
//          nil
type TCPSocketActionPtrInput interface {
	pulumi.Input

	ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput
	ToTCPSocketActionPtrOutputWithContext(context.Context) TCPSocketActionPtrOutput
}

type tcpsocketActionPtrType TCPSocketActionArgs

func TCPSocketActionPtr(v *TCPSocketActionArgs) TCPSocketActionPtrInput {
	return (*tcpsocketActionPtrType)(v)
}

func (*tcpsocketActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPSocketAction)(nil)).Elem()
}

func (i *tcpsocketActionPtrType) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return i.ToTCPSocketActionPtrOutputWithContext(context.Background())
}

func (i *tcpsocketActionPtrType) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionPtrOutput)
}

// Not supported by Cloud Run TCPSocketAction describes an action based on opening a socket
type TCPSocketActionOutput struct{ *pulumi.OutputState }

func (TCPSocketActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketAction)(nil)).Elem()
}

func (o TCPSocketActionOutput) ToTCPSocketActionOutput() TCPSocketActionOutput {
	return o
}

func (o TCPSocketActionOutput) ToTCPSocketActionOutputWithContext(ctx context.Context) TCPSocketActionOutput {
	return o
}

func (o TCPSocketActionOutput) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return o.ToTCPSocketActionPtrOutputWithContext(context.Background())
}

func (o TCPSocketActionOutput) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TCPSocketAction) *TCPSocketAction {
		return &v
	}).(TCPSocketActionPtrOutput)
}

// (Optional) Optional: Host name to connect to, defaults to the pod IP.
func (o TCPSocketActionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPSocketAction) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
func (o TCPSocketActionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TCPSocketAction) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type TCPSocketActionPtrOutput struct{ *pulumi.OutputState }

func (TCPSocketActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPSocketAction)(nil)).Elem()
}

func (o TCPSocketActionPtrOutput) ToTCPSocketActionPtrOutput() TCPSocketActionPtrOutput {
	return o
}

func (o TCPSocketActionPtrOutput) ToTCPSocketActionPtrOutputWithContext(ctx context.Context) TCPSocketActionPtrOutput {
	return o
}

func (o TCPSocketActionPtrOutput) Elem() TCPSocketActionOutput {
	return o.ApplyT(func(v *TCPSocketAction) TCPSocketAction {
		if v != nil {
			return *v
		}
		var ret TCPSocketAction
		return ret
	}).(TCPSocketActionOutput)
}

// (Optional) Optional: Host name to connect to, defaults to the pod IP.
func (o TCPSocketActionPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPSocketAction) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
func (o TCPSocketActionPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TCPSocketAction) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Not supported by Cloud Run TCPSocketAction describes an action based on opening a socket
type TCPSocketActionResponse struct {
	// (Optional) Optional: Host name to connect to, defaults to the pod IP.
	Host string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
	Port int `pulumi:"port"`
}

// TCPSocketActionResponseInput is an input type that accepts TCPSocketActionResponseArgs and TCPSocketActionResponseOutput values.
// You can construct a concrete instance of `TCPSocketActionResponseInput` via:
//
//          TCPSocketActionResponseArgs{...}
type TCPSocketActionResponseInput interface {
	pulumi.Input

	ToTCPSocketActionResponseOutput() TCPSocketActionResponseOutput
	ToTCPSocketActionResponseOutputWithContext(context.Context) TCPSocketActionResponseOutput
}

// Not supported by Cloud Run TCPSocketAction describes an action based on opening a socket
type TCPSocketActionResponseArgs struct {
	// (Optional) Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
	Port pulumi.IntInput `pulumi:"port"`
}

func (TCPSocketActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketActionResponse)(nil)).Elem()
}

func (i TCPSocketActionResponseArgs) ToTCPSocketActionResponseOutput() TCPSocketActionResponseOutput {
	return i.ToTCPSocketActionResponseOutputWithContext(context.Background())
}

func (i TCPSocketActionResponseArgs) ToTCPSocketActionResponseOutputWithContext(ctx context.Context) TCPSocketActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPSocketActionResponseOutput)
}

// Not supported by Cloud Run TCPSocketAction describes an action based on opening a socket
type TCPSocketActionResponseOutput struct{ *pulumi.OutputState }

func (TCPSocketActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPSocketActionResponse)(nil)).Elem()
}

func (o TCPSocketActionResponseOutput) ToTCPSocketActionResponseOutput() TCPSocketActionResponseOutput {
	return o
}

func (o TCPSocketActionResponseOutput) ToTCPSocketActionResponseOutputWithContext(ctx context.Context) TCPSocketActionResponseOutput {
	return o
}

// (Optional) Optional: Host name to connect to, defaults to the pod IP.
func (o TCPSocketActionResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v TCPSocketActionResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. This field is currently limited to integer types only because of proto's inability to properly support the IntOrString golang type.
func (o TCPSocketActionResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v TCPSocketActionResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Volume represents a named volume in a container.
type Volume struct {
	ConfigMap *ConfigMapVolumeSource `pulumi:"configMap"`
	// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
	Name   *string             `pulumi:"name"`
	Secret *SecretVolumeSource `pulumi:"secret"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//          VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// Volume represents a named volume in a container.
type VolumeArgs struct {
	ConfigMap ConfigMapVolumeSourcePtrInput `pulumi:"configMap"`
	// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
	Name   pulumi.StringPtrInput      `pulumi:"name"`
	Secret SecretVolumeSourcePtrInput `pulumi:"secret"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//          VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// Volume represents a named volume in a container.
type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func (o VolumeOutput) ConfigMap() ConfigMapVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *ConfigMapVolumeSource { return v.ConfigMap }).(ConfigMapVolumeSourcePtrOutput)
}

// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
func (o VolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) Secret() SecretVolumeSourcePtrOutput {
	return o.ApplyT(func(v Volume) *SecretVolumeSource { return v.Secret }).(SecretVolumeSourcePtrOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMount struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'.
	MountPath *string `pulumi:"mountPath"`
	// The name of the volume. There must be a corresponding Volume with the same name.
	Name *string `pulumi:"name"`
	// (Optional) Only true is accepted. Defaults to true.
	ReadOnly *bool `pulumi:"readOnly"`
	// (Optional) Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
}

// VolumeMountInput is an input type that accepts VolumeMountArgs and VolumeMountOutput values.
// You can construct a concrete instance of `VolumeMountInput` via:
//
//          VolumeMountArgs{...}
type VolumeMountInput interface {
	pulumi.Input

	ToVolumeMountOutput() VolumeMountOutput
	ToVolumeMountOutputWithContext(context.Context) VolumeMountOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountArgs struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// The name of the volume. There must be a corresponding Volume with the same name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) Only true is accepted. Defaults to true.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// (Optional) Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
}

func (VolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (i VolumeMountArgs) ToVolumeMountOutput() VolumeMountOutput {
	return i.ToVolumeMountOutputWithContext(context.Background())
}

func (i VolumeMountArgs) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOutput)
}

// VolumeMountArrayInput is an input type that accepts VolumeMountArray and VolumeMountArrayOutput values.
// You can construct a concrete instance of `VolumeMountArrayInput` via:
//
//          VolumeMountArray{ VolumeMountArgs{...} }
type VolumeMountArrayInput interface {
	pulumi.Input

	ToVolumeMountArrayOutput() VolumeMountArrayOutput
	ToVolumeMountArrayOutputWithContext(context.Context) VolumeMountArrayOutput
}

type VolumeMountArray []VolumeMountInput

func (VolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (i VolumeMountArray) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return i.ToVolumeMountArrayOutputWithContext(context.Background())
}

func (i VolumeMountArray) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountOutput struct{ *pulumi.OutputState }

func (VolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (o VolumeMountOutput) ToVolumeMountOutput() VolumeMountOutput {
	return o
}

func (o VolumeMountOutput) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return o
}

// Path within the container at which the volume should be mounted. Must not contain ':'.
func (o VolumeMountOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMount) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// The name of the volume. There must be a corresponding Volume with the same name.
func (o VolumeMountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Optional) Only true is accepted. Defaults to true.
func (o VolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// (Optional) Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o VolumeMountOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMount) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

type VolumeMountArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) Index(i pulumi.IntInput) VolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMount {
		return vs[0].([]VolumeMount)[vs[1].(int)]
	}).(VolumeMountOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountResponse struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'.
	MountPath string `pulumi:"mountPath"`
	// The name of the volume. There must be a corresponding Volume with the same name.
	Name string `pulumi:"name"`
	// (Optional) Only true is accepted. Defaults to true.
	ReadOnly bool `pulumi:"readOnly"`
	// (Optional) Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath string `pulumi:"subPath"`
}

// VolumeMountResponseInput is an input type that accepts VolumeMountResponseArgs and VolumeMountResponseOutput values.
// You can construct a concrete instance of `VolumeMountResponseInput` via:
//
//          VolumeMountResponseArgs{...}
type VolumeMountResponseInput interface {
	pulumi.Input

	ToVolumeMountResponseOutput() VolumeMountResponseOutput
	ToVolumeMountResponseOutputWithContext(context.Context) VolumeMountResponseOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountResponseArgs struct {
	// Path within the container at which the volume should be mounted. Must not contain ':'.
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The name of the volume. There must be a corresponding Volume with the same name.
	Name pulumi.StringInput `pulumi:"name"`
	// (Optional) Only true is accepted. Defaults to true.
	ReadOnly pulumi.BoolInput `pulumi:"readOnly"`
	// (Optional) Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringInput `pulumi:"subPath"`
}

func (VolumeMountResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountResponse)(nil)).Elem()
}

func (i VolumeMountResponseArgs) ToVolumeMountResponseOutput() VolumeMountResponseOutput {
	return i.ToVolumeMountResponseOutputWithContext(context.Background())
}

func (i VolumeMountResponseArgs) ToVolumeMountResponseOutputWithContext(ctx context.Context) VolumeMountResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountResponseOutput)
}

// VolumeMountResponseArrayInput is an input type that accepts VolumeMountResponseArray and VolumeMountResponseArrayOutput values.
// You can construct a concrete instance of `VolumeMountResponseArrayInput` via:
//
//          VolumeMountResponseArray{ VolumeMountResponseArgs{...} }
type VolumeMountResponseArrayInput interface {
	pulumi.Input

	ToVolumeMountResponseArrayOutput() VolumeMountResponseArrayOutput
	ToVolumeMountResponseArrayOutputWithContext(context.Context) VolumeMountResponseArrayOutput
}

type VolumeMountResponseArray []VolumeMountResponseInput

func (VolumeMountResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountResponse)(nil)).Elem()
}

func (i VolumeMountResponseArray) ToVolumeMountResponseArrayOutput() VolumeMountResponseArrayOutput {
	return i.ToVolumeMountResponseArrayOutputWithContext(context.Background())
}

func (i VolumeMountResponseArray) ToVolumeMountResponseArrayOutputWithContext(ctx context.Context) VolumeMountResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountResponseArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMountResponseOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutput() VolumeMountResponseOutput {
	return o
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutputWithContext(ctx context.Context) VolumeMountResponseOutput {
	return o
}

// Path within the container at which the volume should be mounted. Must not contain ':'.
func (o VolumeMountResponseOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume. There must be a corresponding Volume with the same name.
func (o VolumeMountResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) Only true is accepted. Defaults to true.
func (o VolumeMountResponseOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeMountResponse) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

// (Optional) Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o VolumeMountResponseOutput) SubPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.SubPath }).(pulumi.StringOutput)
}

type VolumeMountResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutput() VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutputWithContext(ctx context.Context) VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) Index(i pulumi.IntInput) VolumeMountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMountResponse {
		return vs[0].([]VolumeMountResponse)[vs[1].(int)]
	}).(VolumeMountResponseOutput)
}

// Volume represents a named volume in a container.
type VolumeResponse struct {
	ConfigMap ConfigMapVolumeSourceResponse `pulumi:"configMap"`
	// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
	Name   string                     `pulumi:"name"`
	Secret SecretVolumeSourceResponse `pulumi:"secret"`
}

// VolumeResponseInput is an input type that accepts VolumeResponseArgs and VolumeResponseOutput values.
// You can construct a concrete instance of `VolumeResponseInput` via:
//
//          VolumeResponseArgs{...}
type VolumeResponseInput interface {
	pulumi.Input

	ToVolumeResponseOutput() VolumeResponseOutput
	ToVolumeResponseOutputWithContext(context.Context) VolumeResponseOutput
}

// Volume represents a named volume in a container.
type VolumeResponseArgs struct {
	ConfigMap ConfigMapVolumeSourceResponseInput `pulumi:"configMap"`
	// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
	Name   pulumi.StringInput              `pulumi:"name"`
	Secret SecretVolumeSourceResponseInput `pulumi:"secret"`
}

func (VolumeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (i VolumeResponseArgs) ToVolumeResponseOutput() VolumeResponseOutput {
	return i.ToVolumeResponseOutputWithContext(context.Background())
}

func (i VolumeResponseArgs) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeResponseOutput)
}

// VolumeResponseArrayInput is an input type that accepts VolumeResponseArray and VolumeResponseArrayOutput values.
// You can construct a concrete instance of `VolumeResponseArrayInput` via:
//
//          VolumeResponseArray{ VolumeResponseArgs{...} }
type VolumeResponseArrayInput interface {
	pulumi.Input

	ToVolumeResponseArrayOutput() VolumeResponseArrayOutput
	ToVolumeResponseArrayOutputWithContext(context.Context) VolumeResponseArrayOutput
}

type VolumeResponseArray []VolumeResponseInput

func (VolumeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (i VolumeResponseArray) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return i.ToVolumeResponseArrayOutputWithContext(context.Background())
}

func (i VolumeResponseArray) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeResponseArrayOutput)
}

// Volume represents a named volume in a container.
type VolumeResponseOutput struct{ *pulumi.OutputState }

func (VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseOutput) ToVolumeResponseOutput() VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ConfigMap() ConfigMapVolumeSourceResponseOutput {
	return o.ApplyT(func(v VolumeResponse) ConfigMapVolumeSourceResponse { return v.ConfigMap }).(ConfigMapVolumeSourceResponseOutput)
}

// Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
func (o VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o VolumeResponseOutput) Secret() SecretVolumeSourceResponseOutput {
	return o.ApplyT(func(v VolumeResponse) SecretVolumeSourceResponse { return v.Secret }).(SecretVolumeSourceResponseOutput)
}

type VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) Index(i pulumi.IntInput) VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeResponse {
		return vs[0].([]VolumeResponse)[vs[1].(int)]
	}).(VolumeResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapEnvSourceInput)(nil)).Elem(), ConfigMapEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapEnvSourcePtrInput)(nil)).Elem(), ConfigMapEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapEnvSourceResponseInput)(nil)).Elem(), ConfigMapEnvSourceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapKeySelectorInput)(nil)).Elem(), ConfigMapKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapKeySelectorPtrInput)(nil)).Elem(), ConfigMapKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapKeySelectorResponseInput)(nil)).Elem(), ConfigMapKeySelectorResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapVolumeSourceInput)(nil)).Elem(), ConfigMapVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapVolumeSourcePtrInput)(nil)).Elem(), ConfigMapVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapVolumeSourceResponseInput)(nil)).Elem(), ConfigMapVolumeSourceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInput)(nil)).Elem(), ContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerArrayInput)(nil)).Elem(), ContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortInput)(nil)).Elem(), ContainerPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortArrayInput)(nil)).Elem(), ContainerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortResponseInput)(nil)).Elem(), ContainerPortResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPortResponseArrayInput)(nil)).Elem(), ContainerPortResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerResponseInput)(nil)).Elem(), ContainerResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerResponseArrayInput)(nil)).Elem(), ContainerResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFromSourceInput)(nil)).Elem(), EnvFromSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFromSourceArrayInput)(nil)).Elem(), EnvFromSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFromSourceResponseInput)(nil)).Elem(), EnvFromSourceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvFromSourceResponseArrayInput)(nil)).Elem(), EnvFromSourceResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarInput)(nil)).Elem(), EnvVarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarArrayInput)(nil)).Elem(), EnvVarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarResponseInput)(nil)).Elem(), EnvVarResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarResponseArrayInput)(nil)).Elem(), EnvVarResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarSourceInput)(nil)).Elem(), EnvVarSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarSourcePtrInput)(nil)).Elem(), EnvVarSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarSourceResponseInput)(nil)).Elem(), EnvVarSourceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecActionInput)(nil)).Elem(), ExecActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecActionPtrInput)(nil)).Elem(), ExecActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecActionResponseInput)(nil)).Elem(), ExecActionResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleRpcStatusInput)(nil)).Elem(), GoogleRpcStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleRpcStatusPtrInput)(nil)).Elem(), GoogleRpcStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleRpcStatusResponseInput)(nil)).Elem(), GoogleRpcStatusResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPGetActionInput)(nil)).Elem(), HTTPGetActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPGetActionPtrInput)(nil)).Elem(), HTTPGetActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPGetActionResponseInput)(nil)).Elem(), HTTPGetActionResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPHeaderInput)(nil)).Elem(), HTTPHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPHeaderArrayInput)(nil)).Elem(), HTTPHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPHeaderResponseInput)(nil)).Elem(), HTTPHeaderResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPHeaderResponseArrayInput)(nil)).Elem(), HTTPHeaderResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAttemptResultInput)(nil)).Elem(), InstanceAttemptResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAttemptResultPtrInput)(nil)).Elem(), InstanceAttemptResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAttemptResultResponseInput)(nil)).Elem(), InstanceAttemptResultResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSpecInput)(nil)).Elem(), InstanceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSpecPtrInput)(nil)).Elem(), InstanceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSpecResponseInput)(nil)).Elem(), InstanceSpecResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSpecResponsePtrInput)(nil)).Elem(), InstanceSpecResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStatusInput)(nil)).Elem(), InstanceStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStatusArrayInput)(nil)).Elem(), InstanceStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStatusResponseInput)(nil)).Elem(), InstanceStatusResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStatusResponseArrayInput)(nil)).Elem(), InstanceStatusResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTemplateSpecInput)(nil)).Elem(), InstanceTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTemplateSpecPtrInput)(nil)).Elem(), InstanceTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTemplateSpecResponseInput)(nil)).Elem(), InstanceTemplateSpecResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTemplateSpecResponsePtrInput)(nil)).Elem(), InstanceTemplateSpecResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConditionInput)(nil)).Elem(), JobConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConditionArrayInput)(nil)).Elem(), JobConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConditionResponseInput)(nil)).Elem(), JobConditionResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConditionResponseArrayInput)(nil)).Elem(), JobConditionResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobSpecInput)(nil)).Elem(), JobSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobSpecPtrInput)(nil)).Elem(), JobSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobSpecResponseInput)(nil)).Elem(), JobSpecResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobSpecResponsePtrInput)(nil)).Elem(), JobSpecResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusInput)(nil)).Elem(), JobStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusPtrInput)(nil)).Elem(), JobStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusResponseInput)(nil)).Elem(), JobStatusResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobStatusResponsePtrInput)(nil)).Elem(), JobStatusResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyToPathInput)(nil)).Elem(), KeyToPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyToPathArrayInput)(nil)).Elem(), KeyToPathArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyToPathResponseInput)(nil)).Elem(), KeyToPathResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyToPathResponseArrayInput)(nil)).Elem(), KeyToPathResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferenceInput)(nil)).Elem(), LocalObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferencePtrInput)(nil)).Elem(), LocalObjectReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalObjectReferenceResponseInput)(nil)).Elem(), LocalObjectReferenceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectMetaInput)(nil)).Elem(), ObjectMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectMetaPtrInput)(nil)).Elem(), ObjectMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectMetaResponseInput)(nil)).Elem(), ObjectMetaResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectMetaResponsePtrInput)(nil)).Elem(), ObjectMetaResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerReferenceInput)(nil)).Elem(), OwnerReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerReferenceArrayInput)(nil)).Elem(), OwnerReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerReferenceResponseInput)(nil)).Elem(), OwnerReferenceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerReferenceResponseArrayInput)(nil)).Elem(), OwnerReferenceResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbeInput)(nil)).Elem(), ProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbePtrInput)(nil)).Elem(), ProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbeResponseInput)(nil)).Elem(), ProbeResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequirementsInput)(nil)).Elem(), ResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequirementsPtrInput)(nil)).Elem(), ResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRequirementsResponseInput)(nil)).Elem(), ResourceRequirementsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvSourceInput)(nil)).Elem(), SecretEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvSourcePtrInput)(nil)).Elem(), SecretEnvSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretEnvSourceResponseInput)(nil)).Elem(), SecretEnvSourceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretKeySelectorInput)(nil)).Elem(), SecretKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretKeySelectorPtrInput)(nil)).Elem(), SecretKeySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretKeySelectorResponseInput)(nil)).Elem(), SecretKeySelectorResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeSourceInput)(nil)).Elem(), SecretVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeSourcePtrInput)(nil)).Elem(), SecretVolumeSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretVolumeSourceResponseInput)(nil)).Elem(), SecretVolumeSourceResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextInput)(nil)).Elem(), SecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextPtrInput)(nil)).Elem(), SecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityContextResponseInput)(nil)).Elem(), SecurityContextResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPSocketActionInput)(nil)).Elem(), TCPSocketActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPSocketActionPtrInput)(nil)).Elem(), TCPSocketActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPSocketActionResponseInput)(nil)).Elem(), TCPSocketActionResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), VolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountInput)(nil)).Elem(), VolumeMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountArrayInput)(nil)).Elem(), VolumeMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountResponseInput)(nil)).Elem(), VolumeMountResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMountResponseArrayInput)(nil)).Elem(), VolumeMountResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeResponseInput)(nil)).Elem(), VolumeResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeResponseArrayInput)(nil)).Elem(), VolumeResponseArray{})
	pulumi.RegisterOutputType(ConfigMapEnvSourceOutput{})
	pulumi.RegisterOutputType(ConfigMapEnvSourcePtrOutput{})
	pulumi.RegisterOutputType(ConfigMapEnvSourceResponseOutput{})
	pulumi.RegisterOutputType(ConfigMapKeySelectorOutput{})
	pulumi.RegisterOutputType(ConfigMapKeySelectorPtrOutput{})
	pulumi.RegisterOutputType(ConfigMapKeySelectorResponseOutput{})
	pulumi.RegisterOutputType(ConfigMapVolumeSourceOutput{})
	pulumi.RegisterOutputType(ConfigMapVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(ConfigMapVolumeSourceResponseOutput{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortOutput{})
	pulumi.RegisterOutputType(ContainerPortArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortResponseOutput{})
	pulumi.RegisterOutputType(ContainerPortResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerResponseOutput{})
	pulumi.RegisterOutputType(ContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvFromSourceOutput{})
	pulumi.RegisterOutputType(EnvFromSourceArrayOutput{})
	pulumi.RegisterOutputType(EnvFromSourceResponseOutput{})
	pulumi.RegisterOutputType(EnvFromSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvVarOutput{})
	pulumi.RegisterOutputType(EnvVarArrayOutput{})
	pulumi.RegisterOutputType(EnvVarResponseOutput{})
	pulumi.RegisterOutputType(EnvVarResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvVarSourceOutput{})
	pulumi.RegisterOutputType(EnvVarSourcePtrOutput{})
	pulumi.RegisterOutputType(EnvVarSourceResponseOutput{})
	pulumi.RegisterOutputType(ExecActionOutput{})
	pulumi.RegisterOutputType(ExecActionPtrOutput{})
	pulumi.RegisterOutputType(ExecActionResponseOutput{})
	pulumi.RegisterOutputType(GoogleRpcStatusOutput{})
	pulumi.RegisterOutputType(GoogleRpcStatusPtrOutput{})
	pulumi.RegisterOutputType(GoogleRpcStatusResponseOutput{})
	pulumi.RegisterOutputType(HTTPGetActionOutput{})
	pulumi.RegisterOutputType(HTTPGetActionPtrOutput{})
	pulumi.RegisterOutputType(HTTPGetActionResponseOutput{})
	pulumi.RegisterOutputType(HTTPHeaderOutput{})
	pulumi.RegisterOutputType(HTTPHeaderArrayOutput{})
	pulumi.RegisterOutputType(HTTPHeaderResponseOutput{})
	pulumi.RegisterOutputType(HTTPHeaderResponseArrayOutput{})
	pulumi.RegisterOutputType(InstanceAttemptResultOutput{})
	pulumi.RegisterOutputType(InstanceAttemptResultPtrOutput{})
	pulumi.RegisterOutputType(InstanceAttemptResultResponseOutput{})
	pulumi.RegisterOutputType(InstanceSpecOutput{})
	pulumi.RegisterOutputType(InstanceSpecPtrOutput{})
	pulumi.RegisterOutputType(InstanceSpecResponseOutput{})
	pulumi.RegisterOutputType(InstanceSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceStatusOutput{})
	pulumi.RegisterOutputType(InstanceStatusArrayOutput{})
	pulumi.RegisterOutputType(InstanceStatusResponseOutput{})
	pulumi.RegisterOutputType(InstanceStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(InstanceTemplateSpecOutput{})
	pulumi.RegisterOutputType(InstanceTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(InstanceTemplateSpecResponseOutput{})
	pulumi.RegisterOutputType(InstanceTemplateSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(JobConditionOutput{})
	pulumi.RegisterOutputType(JobConditionArrayOutput{})
	pulumi.RegisterOutputType(JobConditionResponseOutput{})
	pulumi.RegisterOutputType(JobConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(JobSpecOutput{})
	pulumi.RegisterOutputType(JobSpecPtrOutput{})
	pulumi.RegisterOutputType(JobSpecResponseOutput{})
	pulumi.RegisterOutputType(JobSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(JobStatusOutput{})
	pulumi.RegisterOutputType(JobStatusPtrOutput{})
	pulumi.RegisterOutputType(JobStatusResponseOutput{})
	pulumi.RegisterOutputType(JobStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyToPathOutput{})
	pulumi.RegisterOutputType(KeyToPathArrayOutput{})
	pulumi.RegisterOutputType(KeyToPathResponseOutput{})
	pulumi.RegisterOutputType(KeyToPathResponseArrayOutput{})
	pulumi.RegisterOutputType(LocalObjectReferenceOutput{})
	pulumi.RegisterOutputType(LocalObjectReferencePtrOutput{})
	pulumi.RegisterOutputType(LocalObjectReferenceResponseOutput{})
	pulumi.RegisterOutputType(ObjectMetaOutput{})
	pulumi.RegisterOutputType(ObjectMetaPtrOutput{})
	pulumi.RegisterOutputType(ObjectMetaResponseOutput{})
	pulumi.RegisterOutputType(ObjectMetaResponsePtrOutput{})
	pulumi.RegisterOutputType(OwnerReferenceOutput{})
	pulumi.RegisterOutputType(OwnerReferenceArrayOutput{})
	pulumi.RegisterOutputType(OwnerReferenceResponseOutput{})
	pulumi.RegisterOutputType(OwnerReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ProbeOutput{})
	pulumi.RegisterOutputType(ProbePtrOutput{})
	pulumi.RegisterOutputType(ProbeResponseOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(SecretEnvSourceOutput{})
	pulumi.RegisterOutputType(SecretEnvSourcePtrOutput{})
	pulumi.RegisterOutputType(SecretEnvSourceResponseOutput{})
	pulumi.RegisterOutputType(SecretKeySelectorOutput{})
	pulumi.RegisterOutputType(SecretKeySelectorPtrOutput{})
	pulumi.RegisterOutputType(SecretKeySelectorResponseOutput{})
	pulumi.RegisterOutputType(SecretVolumeSourceOutput{})
	pulumi.RegisterOutputType(SecretVolumeSourcePtrOutput{})
	pulumi.RegisterOutputType(SecretVolumeSourceResponseOutput{})
	pulumi.RegisterOutputType(SecurityContextOutput{})
	pulumi.RegisterOutputType(SecurityContextPtrOutput{})
	pulumi.RegisterOutputType(SecurityContextResponseOutput{})
	pulumi.RegisterOutputType(TCPSocketActionOutput{})
	pulumi.RegisterOutputType(TCPSocketActionPtrOutput{})
	pulumi.RegisterOutputType(TCPSocketActionResponseOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountOutput{})
	pulumi.RegisterOutputType(VolumeMountArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeResponseOutput{})
	pulumi.RegisterOutputType(VolumeResponseArrayOutput{})
}
