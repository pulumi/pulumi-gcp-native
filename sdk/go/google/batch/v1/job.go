// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a Job.
// Auto-naming is currently not supported for this resource.
type Job struct {
	pulumi.CustomResourceState

	// Compute resource allocation for all TaskGroups in the Job.
	AllocationPolicy AllocationPolicyResponseOutput `pulumi:"allocationPolicy"`
	// When the Job was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// ID used to uniquely identify the Job within its parent scope. This field should contain at most 63 characters and must start with lowercase characters. Only lowercase characters, numbers and '-' are accepted. The '-' character cannot be the first or the last one. A system generated ID will be used if the field is not set. The job.name field in the request will be ignored and the created resource name of the Job will be "{parent}/jobs/{job_id}".
	JobId pulumi.StringPtrOutput `pulumi:"jobId"`
	// Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Log preservation policy for the Job.
	LogsPolicy LogsPolicyResponseOutput `pulumi:"logsPolicy"`
	// Job name. For example: "projects/123456/locations/us-central1/jobs/job01".
	Name pulumi.StringOutput `pulumi:"name"`
	// Notification configurations.
	Notifications JobNotificationResponseArrayOutput `pulumi:"notifications"`
	// Priority of the Job. The valid value range is [0, 100). A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
	Priority pulumi.StringOutput `pulumi:"priority"`
	Project  pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Job status. It is read only for users.
	Status JobStatusResponseOutput `pulumi:"status"`
	// TaskGroups in the Job. Only one TaskGroup is supported now.
	TaskGroups TaskGroupResponseArrayOutput `pulumi:"taskGroups"`
	// A system generated unique ID (in UUID4 format) for the Job.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The last time the Job was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskGroups == nil {
		return nil, errors.New("invalid value for required argument 'TaskGroups'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource Job
	err := ctx.RegisterResource("google-native:batch/v1:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("google-native:batch/v1:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
}

type JobState struct {
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// Compute resource allocation for all TaskGroups in the Job.
	AllocationPolicy *AllocationPolicy `pulumi:"allocationPolicy"`
	// ID used to uniquely identify the Job within its parent scope. This field should contain at most 63 characters and must start with lowercase characters. Only lowercase characters, numbers and '-' are accepted. The '-' character cannot be the first or the last one. A system generated ID will be used if the field is not set. The job.name field in the request will be ignored and the created resource name of the Job will be "{parent}/jobs/{job_id}".
	JobId *string `pulumi:"jobId"`
	// Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Log preservation policy for the Job.
	LogsPolicy *LogsPolicy `pulumi:"logsPolicy"`
	// Notification configurations.
	Notifications []JobNotification `pulumi:"notifications"`
	// Priority of the Job. The valid value range is [0, 100). A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
	Priority *string `pulumi:"priority"`
	Project  *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// TaskGroups in the Job. Only one TaskGroup is supported now.
	TaskGroups []TaskGroup `pulumi:"taskGroups"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Compute resource allocation for all TaskGroups in the Job.
	AllocationPolicy AllocationPolicyPtrInput
	// ID used to uniquely identify the Job within its parent scope. This field should contain at most 63 characters and must start with lowercase characters. Only lowercase characters, numbers and '-' are accepted. The '-' character cannot be the first or the last one. A system generated ID will be used if the field is not set. The job.name field in the request will be ignored and the created resource name of the Job will be "{parent}/jobs/{job_id}".
	JobId pulumi.StringPtrInput
	// Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Log preservation policy for the Job.
	LogsPolicy LogsPolicyPtrInput
	// Notification configurations.
	Notifications JobNotificationArrayInput
	// Priority of the Job. The valid value range is [0, 100). A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
	Priority pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// TaskGroups in the Job. Only one TaskGroup is supported now.
	TaskGroups TaskGroupArrayInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Compute resource allocation for all TaskGroups in the Job.
func (o JobOutput) AllocationPolicy() AllocationPolicyResponseOutput {
	return o.ApplyT(func(v *Job) AllocationPolicyResponseOutput { return v.AllocationPolicy }).(AllocationPolicyResponseOutput)
}

// When the Job was created.
func (o JobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// ID used to uniquely identify the Job within its parent scope. This field should contain at most 63 characters and must start with lowercase characters. Only lowercase characters, numbers and '-' are accepted. The '-' character cannot be the first or the last one. A system generated ID will be used if the field is not set. The job.name field in the request will be ignored and the created resource name of the Job will be "{parent}/jobs/{job_id}".
func (o JobOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.JobId }).(pulumi.StringPtrOutput)
}

// Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
func (o JobOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o JobOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Log preservation policy for the Job.
func (o JobOutput) LogsPolicy() LogsPolicyResponseOutput {
	return o.ApplyT(func(v *Job) LogsPolicyResponseOutput { return v.LogsPolicy }).(LogsPolicyResponseOutput)
}

// Job name. For example: "projects/123456/locations/us-central1/jobs/job01".
func (o JobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Notification configurations.
func (o JobOutput) Notifications() JobNotificationResponseArrayOutput {
	return o.ApplyT(func(v *Job) JobNotificationResponseArrayOutput { return v.Notifications }).(JobNotificationResponseArrayOutput)
}

// Priority of the Job. The valid value range is [0, 100). A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
func (o JobOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Priority }).(pulumi.StringOutput)
}

func (o JobOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o JobOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Job status. It is read only for users.
func (o JobOutput) Status() JobStatusResponseOutput {
	return o.ApplyT(func(v *Job) JobStatusResponseOutput { return v.Status }).(JobStatusResponseOutput)
}

// TaskGroups in the Job. Only one TaskGroup is supported now.
func (o JobOutput) TaskGroups() TaskGroupResponseArrayOutput {
	return o.ApplyT(func(v *Job) TaskGroupResponseArrayOutput { return v.TaskGroups }).(TaskGroupResponseArrayOutput)
}

// A system generated unique ID (in UUID4 format) for the Job.
func (o JobOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The last time the Job was updated.
func (o JobOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterOutputType(JobOutput{})
}
