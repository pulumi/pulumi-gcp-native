// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a Job specified by its resource name.
func LookupJob(ctx *pulumi.Context, args *LookupJobArgs, opts ...pulumi.InvokeOption) (*LookupJobResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupJobResult
	err := ctx.Invoke("google-native:batch/v1:getJob", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupJobArgs struct {
	JobId    string  `pulumi:"jobId"`
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
}

type LookupJobResult struct {
	// Compute resource allocation for all TaskGroups in the Job.
	AllocationPolicy AllocationPolicyResponse `pulumi:"allocationPolicy"`
	// When the Job was created.
	CreateTime string `pulumi:"createTime"`
	// Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
	Labels map[string]string `pulumi:"labels"`
	// Log preservation policy for the Job.
	LogsPolicy LogsPolicyResponse `pulumi:"logsPolicy"`
	// Job name. For example: "projects/123456/locations/us-central1/jobs/job01".
	Name string `pulumi:"name"`
	// Notification configurations.
	Notifications []JobNotificationResponse `pulumi:"notifications"`
	// Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
	Priority string `pulumi:"priority"`
	// Job status. It is read only for users.
	Status JobStatusResponse `pulumi:"status"`
	// TaskGroups in the Job. Only one TaskGroup is supported now.
	TaskGroups []TaskGroupResponse `pulumi:"taskGroups"`
	// A system generated unique ID (in UUID4 format) for the Job.
	Uid string `pulumi:"uid"`
	// The last time the Job was updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupJobOutput(ctx *pulumi.Context, args LookupJobOutputArgs, opts ...pulumi.InvokeOption) LookupJobResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupJobResult, error) {
			args := v.(LookupJobArgs)
			r, err := LookupJob(ctx, &args, opts...)
			var s LookupJobResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupJobResultOutput)
}

type LookupJobOutputArgs struct {
	JobId    pulumi.StringInput    `pulumi:"jobId"`
	Location pulumi.StringInput    `pulumi:"location"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobArgs)(nil)).Elem()
}

type LookupJobResultOutput struct{ *pulumi.OutputState }

func (LookupJobResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupJobResult)(nil)).Elem()
}

func (o LookupJobResultOutput) ToLookupJobResultOutput() LookupJobResultOutput {
	return o
}

func (o LookupJobResultOutput) ToLookupJobResultOutputWithContext(ctx context.Context) LookupJobResultOutput {
	return o
}

// Compute resource allocation for all TaskGroups in the Job.
func (o LookupJobResultOutput) AllocationPolicy() AllocationPolicyResponseOutput {
	return o.ApplyT(func(v LookupJobResult) AllocationPolicyResponse { return v.AllocationPolicy }).(AllocationPolicyResponseOutput)
}

// When the Job was created.
func (o LookupJobResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
func (o LookupJobResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupJobResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Log preservation policy for the Job.
func (o LookupJobResultOutput) LogsPolicy() LogsPolicyResponseOutput {
	return o.ApplyT(func(v LookupJobResult) LogsPolicyResponse { return v.LogsPolicy }).(LogsPolicyResponseOutput)
}

// Job name. For example: "projects/123456/locations/us-central1/jobs/job01".
func (o LookupJobResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.Name }).(pulumi.StringOutput)
}

// Notification configurations.
func (o LookupJobResultOutput) Notifications() JobNotificationResponseArrayOutput {
	return o.ApplyT(func(v LookupJobResult) []JobNotificationResponse { return v.Notifications }).(JobNotificationResponseArrayOutput)
}

// Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
func (o LookupJobResultOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.Priority }).(pulumi.StringOutput)
}

// Job status. It is read only for users.
func (o LookupJobResultOutput) Status() JobStatusResponseOutput {
	return o.ApplyT(func(v LookupJobResult) JobStatusResponse { return v.Status }).(JobStatusResponseOutput)
}

// TaskGroups in the Job. Only one TaskGroup is supported now.
func (o LookupJobResultOutput) TaskGroups() TaskGroupResponseArrayOutput {
	return o.ApplyT(func(v LookupJobResult) []TaskGroupResponse { return v.TaskGroups }).(TaskGroupResponseArrayOutput)
}

// A system generated unique ID (in UUID4 format) for the Job.
func (o LookupJobResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The last time the Job was updated.
func (o LookupJobResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupJobResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupJobResultOutput{})
}
