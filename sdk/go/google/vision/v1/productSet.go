// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and returns a new ProductSet resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing, or is longer than 4096 characters.
type ProductSet struct {
	pulumi.CustomResourceState

	// The user-provided name for this ProductSet. Must not be empty. Must be at most 4096 characters long.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// If there was an error with indexing the product set, the field is populated. This field is ignored when creating a ProductSet.
	IndexError StatusResponseOutput `pulumi:"indexError"`
	// The time at which this ProductSet was last indexed. Query results will reflect all updates before this time. If this ProductSet has never been indexed, this timestamp is the default value "1970-01-01T00:00:00Z". This field is ignored when creating a ProductSet.
	IndexTime pulumi.StringOutput `pulumi:"indexTime"`
	// The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewProductSet registers a new resource with the given unique name, arguments, and options.
func NewProductSet(ctx *pulumi.Context,
	name string, args *ProductSetArgs, opts ...pulumi.ResourceOption) (*ProductSet, error) {
	if args == nil {
		args = &ProductSetArgs{}
	}

	var resource ProductSet
	err := ctx.RegisterResource("google-native:vision/v1:ProductSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductSet gets an existing ProductSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductSetState, opts ...pulumi.ResourceOption) (*ProductSet, error) {
	var resource ProductSet
	err := ctx.ReadResource("google-native:vision/v1:ProductSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProductSet resources.
type productSetState struct {
}

type ProductSetState struct {
}

func (ProductSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*productSetState)(nil)).Elem()
}

type productSetArgs struct {
	// The user-provided name for this ProductSet. Must not be empty. Must be at most 4096 characters long.
	DisplayName *string `pulumi:"displayName"`
	Location    *string `pulumi:"location"`
	// The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet.
	Name         *string `pulumi:"name"`
	ProductSetId *string `pulumi:"productSetId"`
	Project      *string `pulumi:"project"`
}

// The set of arguments for constructing a ProductSet resource.
type ProductSetArgs struct {
	// The user-provided name for this ProductSet. Must not be empty. Must be at most 4096 characters long.
	DisplayName pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet.
	Name         pulumi.StringPtrInput
	ProductSetId pulumi.StringPtrInput
	Project      pulumi.StringPtrInput
}

func (ProductSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productSetArgs)(nil)).Elem()
}

type ProductSetInput interface {
	pulumi.Input

	ToProductSetOutput() ProductSetOutput
	ToProductSetOutputWithContext(ctx context.Context) ProductSetOutput
}

func (*ProductSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductSet)(nil)).Elem()
}

func (i *ProductSet) ToProductSetOutput() ProductSetOutput {
	return i.ToProductSetOutputWithContext(context.Background())
}

func (i *ProductSet) ToProductSetOutputWithContext(ctx context.Context) ProductSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductSetOutput)
}

type ProductSetOutput struct{ *pulumi.OutputState }

func (ProductSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductSet)(nil)).Elem()
}

func (o ProductSetOutput) ToProductSetOutput() ProductSetOutput {
	return o
}

func (o ProductSetOutput) ToProductSetOutputWithContext(ctx context.Context) ProductSetOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductSetInput)(nil)).Elem(), &ProductSet{})
	pulumi.RegisterOutputType(ProductSetOutput{})
}
