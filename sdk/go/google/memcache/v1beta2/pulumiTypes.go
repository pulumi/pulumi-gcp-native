// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Maintenance policy per instance.
type GoogleCloudMemcacheV1beta2MaintenancePolicy struct {
	// Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
	Description *string `pulumi:"description"`
	// Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one.
	WeeklyMaintenanceWindow []WeeklyMaintenanceWindow `pulumi:"weeklyMaintenanceWindow"`
}

// GoogleCloudMemcacheV1beta2MaintenancePolicyInput is an input type that accepts GoogleCloudMemcacheV1beta2MaintenancePolicyArgs and GoogleCloudMemcacheV1beta2MaintenancePolicyOutput values.
// You can construct a concrete instance of `GoogleCloudMemcacheV1beta2MaintenancePolicyInput` via:
//
//          GoogleCloudMemcacheV1beta2MaintenancePolicyArgs{...}
type GoogleCloudMemcacheV1beta2MaintenancePolicyInput interface {
	pulumi.Input

	ToGoogleCloudMemcacheV1beta2MaintenancePolicyOutput() GoogleCloudMemcacheV1beta2MaintenancePolicyOutput
	ToGoogleCloudMemcacheV1beta2MaintenancePolicyOutputWithContext(context.Context) GoogleCloudMemcacheV1beta2MaintenancePolicyOutput
}

// Maintenance policy per instance.
type GoogleCloudMemcacheV1beta2MaintenancePolicyArgs struct {
	// Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one.
	WeeklyMaintenanceWindow WeeklyMaintenanceWindowArrayInput `pulumi:"weeklyMaintenanceWindow"`
}

func (GoogleCloudMemcacheV1beta2MaintenancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudMemcacheV1beta2MaintenancePolicy)(nil)).Elem()
}

func (i GoogleCloudMemcacheV1beta2MaintenancePolicyArgs) ToGoogleCloudMemcacheV1beta2MaintenancePolicyOutput() GoogleCloudMemcacheV1beta2MaintenancePolicyOutput {
	return i.ToGoogleCloudMemcacheV1beta2MaintenancePolicyOutputWithContext(context.Background())
}

func (i GoogleCloudMemcacheV1beta2MaintenancePolicyArgs) ToGoogleCloudMemcacheV1beta2MaintenancePolicyOutputWithContext(ctx context.Context) GoogleCloudMemcacheV1beta2MaintenancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudMemcacheV1beta2MaintenancePolicyOutput)
}

func (i GoogleCloudMemcacheV1beta2MaintenancePolicyArgs) ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput() GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput {
	return i.ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i GoogleCloudMemcacheV1beta2MaintenancePolicyArgs) ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutputWithContext(ctx context.Context) GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudMemcacheV1beta2MaintenancePolicyOutput).ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutputWithContext(ctx)
}

// GoogleCloudMemcacheV1beta2MaintenancePolicyPtrInput is an input type that accepts GoogleCloudMemcacheV1beta2MaintenancePolicyArgs, GoogleCloudMemcacheV1beta2MaintenancePolicyPtr and GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput values.
// You can construct a concrete instance of `GoogleCloudMemcacheV1beta2MaintenancePolicyPtrInput` via:
//
//          GoogleCloudMemcacheV1beta2MaintenancePolicyArgs{...}
//
//  or:
//
//          nil
type GoogleCloudMemcacheV1beta2MaintenancePolicyPtrInput interface {
	pulumi.Input

	ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput() GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput
	ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutputWithContext(context.Context) GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput
}

type googleCloudMemcacheV1beta2MaintenancePolicyPtrType GoogleCloudMemcacheV1beta2MaintenancePolicyArgs

func GoogleCloudMemcacheV1beta2MaintenancePolicyPtr(v *GoogleCloudMemcacheV1beta2MaintenancePolicyArgs) GoogleCloudMemcacheV1beta2MaintenancePolicyPtrInput {
	return (*googleCloudMemcacheV1beta2MaintenancePolicyPtrType)(v)
}

func (*googleCloudMemcacheV1beta2MaintenancePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudMemcacheV1beta2MaintenancePolicy)(nil)).Elem()
}

func (i *googleCloudMemcacheV1beta2MaintenancePolicyPtrType) ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput() GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput {
	return i.ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i *googleCloudMemcacheV1beta2MaintenancePolicyPtrType) ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutputWithContext(ctx context.Context) GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput)
}

// Maintenance policy per instance.
type GoogleCloudMemcacheV1beta2MaintenancePolicyOutput struct{ *pulumi.OutputState }

func (GoogleCloudMemcacheV1beta2MaintenancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudMemcacheV1beta2MaintenancePolicy)(nil)).Elem()
}

func (o GoogleCloudMemcacheV1beta2MaintenancePolicyOutput) ToGoogleCloudMemcacheV1beta2MaintenancePolicyOutput() GoogleCloudMemcacheV1beta2MaintenancePolicyOutput {
	return o
}

func (o GoogleCloudMemcacheV1beta2MaintenancePolicyOutput) ToGoogleCloudMemcacheV1beta2MaintenancePolicyOutputWithContext(ctx context.Context) GoogleCloudMemcacheV1beta2MaintenancePolicyOutput {
	return o
}

func (o GoogleCloudMemcacheV1beta2MaintenancePolicyOutput) ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput() GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput {
	return o.ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutputWithContext(context.Background())
}

func (o GoogleCloudMemcacheV1beta2MaintenancePolicyOutput) ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutputWithContext(ctx context.Context) GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudMemcacheV1beta2MaintenancePolicy) *GoogleCloudMemcacheV1beta2MaintenancePolicy {
		return &v
	}).(GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput)
}

// Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
func (o GoogleCloudMemcacheV1beta2MaintenancePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudMemcacheV1beta2MaintenancePolicy) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one.
func (o GoogleCloudMemcacheV1beta2MaintenancePolicyOutput) WeeklyMaintenanceWindow() WeeklyMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v GoogleCloudMemcacheV1beta2MaintenancePolicy) []WeeklyMaintenanceWindow {
		return v.WeeklyMaintenanceWindow
	}).(WeeklyMaintenanceWindowArrayOutput)
}

type GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudMemcacheV1beta2MaintenancePolicy)(nil)).Elem()
}

func (o GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput) ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput() GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput {
	return o
}

func (o GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput) ToGoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutputWithContext(ctx context.Context) GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput {
	return o
}

func (o GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput) Elem() GoogleCloudMemcacheV1beta2MaintenancePolicyOutput {
	return o.ApplyT(func(v *GoogleCloudMemcacheV1beta2MaintenancePolicy) GoogleCloudMemcacheV1beta2MaintenancePolicy {
		if v != nil {
			return *v
		}
		var ret GoogleCloudMemcacheV1beta2MaintenancePolicy
		return ret
	}).(GoogleCloudMemcacheV1beta2MaintenancePolicyOutput)
}

// Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
func (o GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudMemcacheV1beta2MaintenancePolicy) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one.
func (o GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput) WeeklyMaintenanceWindow() WeeklyMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v *GoogleCloudMemcacheV1beta2MaintenancePolicy) []WeeklyMaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.WeeklyMaintenanceWindow
	}).(WeeklyMaintenanceWindowArrayOutput)
}

// Maintenance policy per instance.
type GoogleCloudMemcacheV1beta2MaintenancePolicyResponse struct {
	// The time when the policy was created.
	CreateTime string `pulumi:"createTime"`
	// Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
	Description string `pulumi:"description"`
	// The time when the policy was updated.
	UpdateTime string `pulumi:"updateTime"`
	// Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one.
	WeeklyMaintenanceWindow []WeeklyMaintenanceWindowResponse `pulumi:"weeklyMaintenanceWindow"`
}

// Maintenance policy per instance.
type GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudMemcacheV1beta2MaintenancePolicyResponse)(nil)).Elem()
}

func (o GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput) ToGoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput() GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput {
	return o
}

func (o GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput) ToGoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutputWithContext(ctx context.Context) GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput {
	return o
}

// The time when the policy was created.
func (o GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudMemcacheV1beta2MaintenancePolicyResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
func (o GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudMemcacheV1beta2MaintenancePolicyResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The time when the policy was updated.
func (o GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudMemcacheV1beta2MaintenancePolicyResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one.
func (o GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput) WeeklyMaintenanceWindow() WeeklyMaintenanceWindowResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudMemcacheV1beta2MaintenancePolicyResponse) []WeeklyMaintenanceWindowResponse {
		return v.WeeklyMaintenanceWindow
	}).(WeeklyMaintenanceWindowResponseArrayOutput)
}

type InstanceMessage struct {
	// A code that correspond to one type of user-facing message.
	Code *InstanceMessageCode `pulumi:"code"`
	// Message on memcached instance which will be exposed to users.
	Message *string `pulumi:"message"`
}

// InstanceMessageInput is an input type that accepts InstanceMessageArgs and InstanceMessageOutput values.
// You can construct a concrete instance of `InstanceMessageInput` via:
//
//          InstanceMessageArgs{...}
type InstanceMessageInput interface {
	pulumi.Input

	ToInstanceMessageOutput() InstanceMessageOutput
	ToInstanceMessageOutputWithContext(context.Context) InstanceMessageOutput
}

type InstanceMessageArgs struct {
	// A code that correspond to one type of user-facing message.
	Code InstanceMessageCodePtrInput `pulumi:"code"`
	// Message on memcached instance which will be exposed to users.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (InstanceMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMessage)(nil)).Elem()
}

func (i InstanceMessageArgs) ToInstanceMessageOutput() InstanceMessageOutput {
	return i.ToInstanceMessageOutputWithContext(context.Background())
}

func (i InstanceMessageArgs) ToInstanceMessageOutputWithContext(ctx context.Context) InstanceMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMessageOutput)
}

// InstanceMessageArrayInput is an input type that accepts InstanceMessageArray and InstanceMessageArrayOutput values.
// You can construct a concrete instance of `InstanceMessageArrayInput` via:
//
//          InstanceMessageArray{ InstanceMessageArgs{...} }
type InstanceMessageArrayInput interface {
	pulumi.Input

	ToInstanceMessageArrayOutput() InstanceMessageArrayOutput
	ToInstanceMessageArrayOutputWithContext(context.Context) InstanceMessageArrayOutput
}

type InstanceMessageArray []InstanceMessageInput

func (InstanceMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMessage)(nil)).Elem()
}

func (i InstanceMessageArray) ToInstanceMessageArrayOutput() InstanceMessageArrayOutput {
	return i.ToInstanceMessageArrayOutputWithContext(context.Background())
}

func (i InstanceMessageArray) ToInstanceMessageArrayOutputWithContext(ctx context.Context) InstanceMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMessageArrayOutput)
}

type InstanceMessageOutput struct{ *pulumi.OutputState }

func (InstanceMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMessage)(nil)).Elem()
}

func (o InstanceMessageOutput) ToInstanceMessageOutput() InstanceMessageOutput {
	return o
}

func (o InstanceMessageOutput) ToInstanceMessageOutputWithContext(ctx context.Context) InstanceMessageOutput {
	return o
}

// A code that correspond to one type of user-facing message.
func (o InstanceMessageOutput) Code() InstanceMessageCodePtrOutput {
	return o.ApplyT(func(v InstanceMessage) *InstanceMessageCode { return v.Code }).(InstanceMessageCodePtrOutput)
}

// Message on memcached instance which will be exposed to users.
func (o InstanceMessageOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMessage) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type InstanceMessageArrayOutput struct{ *pulumi.OutputState }

func (InstanceMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMessage)(nil)).Elem()
}

func (o InstanceMessageArrayOutput) ToInstanceMessageArrayOutput() InstanceMessageArrayOutput {
	return o
}

func (o InstanceMessageArrayOutput) ToInstanceMessageArrayOutputWithContext(ctx context.Context) InstanceMessageArrayOutput {
	return o
}

func (o InstanceMessageArrayOutput) Index(i pulumi.IntInput) InstanceMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceMessage {
		return vs[0].([]InstanceMessage)[vs[1].(int)]
	}).(InstanceMessageOutput)
}

type InstanceMessageResponse struct {
	// A code that correspond to one type of user-facing message.
	Code string `pulumi:"code"`
	// Message on memcached instance which will be exposed to users.
	Message string `pulumi:"message"`
}

type InstanceMessageResponseOutput struct{ *pulumi.OutputState }

func (InstanceMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMessageResponse)(nil)).Elem()
}

func (o InstanceMessageResponseOutput) ToInstanceMessageResponseOutput() InstanceMessageResponseOutput {
	return o
}

func (o InstanceMessageResponseOutput) ToInstanceMessageResponseOutputWithContext(ctx context.Context) InstanceMessageResponseOutput {
	return o
}

// A code that correspond to one type of user-facing message.
func (o InstanceMessageResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceMessageResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Message on memcached instance which will be exposed to users.
func (o InstanceMessageResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceMessageResponse) string { return v.Message }).(pulumi.StringOutput)
}

type InstanceMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (InstanceMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMessageResponse)(nil)).Elem()
}

func (o InstanceMessageResponseArrayOutput) ToInstanceMessageResponseArrayOutput() InstanceMessageResponseArrayOutput {
	return o
}

func (o InstanceMessageResponseArrayOutput) ToInstanceMessageResponseArrayOutputWithContext(ctx context.Context) InstanceMessageResponseArrayOutput {
	return o
}

func (o InstanceMessageResponseArrayOutput) Index(i pulumi.IntInput) InstanceMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceMessageResponse {
		return vs[0].([]InstanceMessageResponse)[vs[1].(int)]
	}).(InstanceMessageResponseOutput)
}

// Upcoming maintenance schedule.
type MaintenanceScheduleResponse struct {
	// The end time of any upcoming scheduled maintenance for this instance.
	EndTime string `pulumi:"endTime"`
	// The deadline that the maintenance schedule start time can not go beyond, including reschedule.
	ScheduleDeadlineTime string `pulumi:"scheduleDeadlineTime"`
	// The start time of any upcoming scheduled maintenance for this instance.
	StartTime string `pulumi:"startTime"`
}

// Upcoming maintenance schedule.
type MaintenanceScheduleResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceScheduleResponse)(nil)).Elem()
}

func (o MaintenanceScheduleResponseOutput) ToMaintenanceScheduleResponseOutput() MaintenanceScheduleResponseOutput {
	return o
}

func (o MaintenanceScheduleResponseOutput) ToMaintenanceScheduleResponseOutputWithContext(ctx context.Context) MaintenanceScheduleResponseOutput {
	return o
}

// The end time of any upcoming scheduled maintenance for this instance.
func (o MaintenanceScheduleResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// The deadline that the maintenance schedule start time can not go beyond, including reschedule.
func (o MaintenanceScheduleResponseOutput) ScheduleDeadlineTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.ScheduleDeadlineTime }).(pulumi.StringOutput)
}

// The start time of any upcoming scheduled maintenance for this instance.
func (o MaintenanceScheduleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type MemcacheParameters struct {
	// User defined set of parameters to use in the memcached process.
	Params map[string]string `pulumi:"params"`
}

// MemcacheParametersInput is an input type that accepts MemcacheParametersArgs and MemcacheParametersOutput values.
// You can construct a concrete instance of `MemcacheParametersInput` via:
//
//          MemcacheParametersArgs{...}
type MemcacheParametersInput interface {
	pulumi.Input

	ToMemcacheParametersOutput() MemcacheParametersOutput
	ToMemcacheParametersOutputWithContext(context.Context) MemcacheParametersOutput
}

type MemcacheParametersArgs struct {
	// User defined set of parameters to use in the memcached process.
	Params pulumi.StringMapInput `pulumi:"params"`
}

func (MemcacheParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheParameters)(nil)).Elem()
}

func (i MemcacheParametersArgs) ToMemcacheParametersOutput() MemcacheParametersOutput {
	return i.ToMemcacheParametersOutputWithContext(context.Background())
}

func (i MemcacheParametersArgs) ToMemcacheParametersOutputWithContext(ctx context.Context) MemcacheParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersOutput)
}

func (i MemcacheParametersArgs) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return i.ToMemcacheParametersPtrOutputWithContext(context.Background())
}

func (i MemcacheParametersArgs) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersOutput).ToMemcacheParametersPtrOutputWithContext(ctx)
}

// MemcacheParametersPtrInput is an input type that accepts MemcacheParametersArgs, MemcacheParametersPtr and MemcacheParametersPtrOutput values.
// You can construct a concrete instance of `MemcacheParametersPtrInput` via:
//
//          MemcacheParametersArgs{...}
//
//  or:
//
//          nil
type MemcacheParametersPtrInput interface {
	pulumi.Input

	ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput
	ToMemcacheParametersPtrOutputWithContext(context.Context) MemcacheParametersPtrOutput
}

type memcacheParametersPtrType MemcacheParametersArgs

func MemcacheParametersPtr(v *MemcacheParametersArgs) MemcacheParametersPtrInput {
	return (*memcacheParametersPtrType)(v)
}

func (*memcacheParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcacheParameters)(nil)).Elem()
}

func (i *memcacheParametersPtrType) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return i.ToMemcacheParametersPtrOutputWithContext(context.Background())
}

func (i *memcacheParametersPtrType) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersPtrOutput)
}

type MemcacheParametersOutput struct{ *pulumi.OutputState }

func (MemcacheParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheParameters)(nil)).Elem()
}

func (o MemcacheParametersOutput) ToMemcacheParametersOutput() MemcacheParametersOutput {
	return o
}

func (o MemcacheParametersOutput) ToMemcacheParametersOutputWithContext(ctx context.Context) MemcacheParametersOutput {
	return o
}

func (o MemcacheParametersOutput) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return o.ToMemcacheParametersPtrOutputWithContext(context.Background())
}

func (o MemcacheParametersOutput) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MemcacheParameters) *MemcacheParameters {
		return &v
	}).(MemcacheParametersPtrOutput)
}

// User defined set of parameters to use in the memcached process.
func (o MemcacheParametersOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v MemcacheParameters) map[string]string { return v.Params }).(pulumi.StringMapOutput)
}

type MemcacheParametersPtrOutput struct{ *pulumi.OutputState }

func (MemcacheParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcacheParameters)(nil)).Elem()
}

func (o MemcacheParametersPtrOutput) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return o
}

func (o MemcacheParametersPtrOutput) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return o
}

func (o MemcacheParametersPtrOutput) Elem() MemcacheParametersOutput {
	return o.ApplyT(func(v *MemcacheParameters) MemcacheParameters {
		if v != nil {
			return *v
		}
		var ret MemcacheParameters
		return ret
	}).(MemcacheParametersOutput)
}

// User defined set of parameters to use in the memcached process.
func (o MemcacheParametersPtrOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MemcacheParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.Params
	}).(pulumi.StringMapOutput)
}

type MemcacheParametersResponse struct {
	// User defined set of parameters to use in the memcached process.
	Params map[string]string `pulumi:"params"`
}

type MemcacheParametersResponseOutput struct{ *pulumi.OutputState }

func (MemcacheParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheParametersResponse)(nil)).Elem()
}

func (o MemcacheParametersResponseOutput) ToMemcacheParametersResponseOutput() MemcacheParametersResponseOutput {
	return o
}

func (o MemcacheParametersResponseOutput) ToMemcacheParametersResponseOutputWithContext(ctx context.Context) MemcacheParametersResponseOutput {
	return o
}

// User defined set of parameters to use in the memcached process.
func (o MemcacheParametersResponseOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v MemcacheParametersResponse) map[string]string { return v.Params }).(pulumi.StringMapOutput)
}

// Configuration for a Memcached Node.
type NodeConfig struct {
	// Number of cpus per Memcached node.
	CpuCount int `pulumi:"cpuCount"`
	// Memory size in MiB for each Memcached node.
	MemorySizeMb int `pulumi:"memorySizeMb"`
}

// NodeConfigInput is an input type that accepts NodeConfigArgs and NodeConfigOutput values.
// You can construct a concrete instance of `NodeConfigInput` via:
//
//          NodeConfigArgs{...}
type NodeConfigInput interface {
	pulumi.Input

	ToNodeConfigOutput() NodeConfigOutput
	ToNodeConfigOutputWithContext(context.Context) NodeConfigOutput
}

// Configuration for a Memcached Node.
type NodeConfigArgs struct {
	// Number of cpus per Memcached node.
	CpuCount pulumi.IntInput `pulumi:"cpuCount"`
	// Memory size in MiB for each Memcached node.
	MemorySizeMb pulumi.IntInput `pulumi:"memorySizeMb"`
}

func (NodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (i NodeConfigArgs) ToNodeConfigOutput() NodeConfigOutput {
	return i.ToNodeConfigOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput)
}

// Configuration for a Memcached Node.
type NodeConfigOutput struct{ *pulumi.OutputState }

func (NodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (o NodeConfigOutput) ToNodeConfigOutput() NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return o
}

// Number of cpus per Memcached node.
func (o NodeConfigOutput) CpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfig) int { return v.CpuCount }).(pulumi.IntOutput)
}

// Memory size in MiB for each Memcached node.
func (o NodeConfigOutput) MemorySizeMb() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfig) int { return v.MemorySizeMb }).(pulumi.IntOutput)
}

// Configuration for a Memcached Node.
type NodeConfigResponse struct {
	// Number of cpus per Memcached node.
	CpuCount int `pulumi:"cpuCount"`
	// Memory size in MiB for each Memcached node.
	MemorySizeMb int `pulumi:"memorySizeMb"`
}

// Configuration for a Memcached Node.
type NodeConfigResponseOutput struct{ *pulumi.OutputState }

func (NodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigResponse)(nil)).Elem()
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutput() NodeConfigResponseOutput {
	return o
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutputWithContext(ctx context.Context) NodeConfigResponseOutput {
	return o
}

// Number of cpus per Memcached node.
func (o NodeConfigResponseOutput) CpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.CpuCount }).(pulumi.IntOutput)
}

// Memory size in MiB for each Memcached node.
func (o NodeConfigResponseOutput) MemorySizeMb() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.MemorySizeMb }).(pulumi.IntOutput)
}

type NodeResponse struct {
	// Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
	Host string `pulumi:"host"`
	// Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
	NodeId string `pulumi:"nodeId"`
	// User defined parameters currently applied to the node.
	Parameters MemcacheParametersResponse `pulumi:"parameters"`
	// The port number of the Memcached server on this node.
	Port int `pulumi:"port"`
	// Current state of the Memcached node.
	State string `pulumi:"state"`
	// Returns true if there is an update waiting to be applied
	UpdateAvailable bool `pulumi:"updateAvailable"`
	// Location (GCP Zone) for the Memcached node.
	Zone string `pulumi:"zone"`
}

type NodeResponseOutput struct{ *pulumi.OutputState }

func (NodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeResponse)(nil)).Elem()
}

func (o NodeResponseOutput) ToNodeResponseOutput() NodeResponseOutput {
	return o
}

func (o NodeResponseOutput) ToNodeResponseOutputWithContext(ctx context.Context) NodeResponseOutput {
	return o
}

// Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
func (o NodeResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
func (o NodeResponseOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.NodeId }).(pulumi.StringOutput)
}

// User defined parameters currently applied to the node.
func (o NodeResponseOutput) Parameters() MemcacheParametersResponseOutput {
	return o.ApplyT(func(v NodeResponse) MemcacheParametersResponse { return v.Parameters }).(MemcacheParametersResponseOutput)
}

// The port number of the Memcached server on this node.
func (o NodeResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v NodeResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Current state of the Memcached node.
func (o NodeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Returns true if there is an update waiting to be applied
func (o NodeResponseOutput) UpdateAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeResponse) bool { return v.UpdateAvailable }).(pulumi.BoolOutput)
}

// Location (GCP Zone) for the Memcached node.
func (o NodeResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.Zone }).(pulumi.StringOutput)
}

type NodeResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeResponse)(nil)).Elem()
}

func (o NodeResponseArrayOutput) ToNodeResponseArrayOutput() NodeResponseArrayOutput {
	return o
}

func (o NodeResponseArrayOutput) ToNodeResponseArrayOutputWithContext(ctx context.Context) NodeResponseArrayOutput {
	return o
}

func (o NodeResponseArrayOutput) Index(i pulumi.IntInput) NodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeResponse {
		return vs[0].([]NodeResponse)[vs[1].(int)]
	}).(NodeResponseOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds *int `pulumi:"seconds"`
}

// TimeOfDayInput is an input type that accepts TimeOfDayArgs and TimeOfDayOutput values.
// You can construct a concrete instance of `TimeOfDayInput` via:
//
//          TimeOfDayArgs{...}
type TimeOfDayInput interface {
	pulumi.Input

	ToTimeOfDayOutput() TimeOfDayOutput
	ToTimeOfDayOutputWithContext(context.Context) TimeOfDayOutput
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayArgs struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours pulumi.IntPtrInput `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes pulumi.IntPtrInput `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds pulumi.IntPtrInput `pulumi:"seconds"`
}

func (TimeOfDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (i TimeOfDayArgs) ToTimeOfDayOutput() TimeOfDayOutput {
	return i.ToTimeOfDayOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayOutput struct{ *pulumi.OutputState }

func (TimeOfDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayOutput) ToTimeOfDayOutput() TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return o
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Hours }).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Minutes }).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Seconds }).(pulumi.IntPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayResponse struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds int `pulumi:"seconds"`
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayResponseOutput struct{ *pulumi.OutputState }

func (TimeOfDayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDayResponse)(nil)).Elem()
}

func (o TimeOfDayResponseOutput) ToTimeOfDayResponseOutput() TimeOfDayResponseOutput {
	return o
}

func (o TimeOfDayResponseOutput) ToTimeOfDayResponseOutputWithContext(ctx context.Context) TimeOfDayResponseOutput {
	return o
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayResponseOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Hours }).(pulumi.IntOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayResponseOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Minutes }).(pulumi.IntOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayResponseOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Nanos }).(pulumi.IntOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayResponseOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Seconds }).(pulumi.IntOutput)
}

// Time window specified for weekly operations.
type WeeklyMaintenanceWindow struct {
	// Allows to define schedule that runs specified day of the week.
	Day WeeklyMaintenanceWindowDay `pulumi:"day"`
	// Duration of the time window.
	Duration string `pulumi:"duration"`
	// Start time of the window in UTC.
	StartTime TimeOfDay `pulumi:"startTime"`
}

// WeeklyMaintenanceWindowInput is an input type that accepts WeeklyMaintenanceWindowArgs and WeeklyMaintenanceWindowOutput values.
// You can construct a concrete instance of `WeeklyMaintenanceWindowInput` via:
//
//          WeeklyMaintenanceWindowArgs{...}
type WeeklyMaintenanceWindowInput interface {
	pulumi.Input

	ToWeeklyMaintenanceWindowOutput() WeeklyMaintenanceWindowOutput
	ToWeeklyMaintenanceWindowOutputWithContext(context.Context) WeeklyMaintenanceWindowOutput
}

// Time window specified for weekly operations.
type WeeklyMaintenanceWindowArgs struct {
	// Allows to define schedule that runs specified day of the week.
	Day WeeklyMaintenanceWindowDayInput `pulumi:"day"`
	// Duration of the time window.
	Duration pulumi.StringInput `pulumi:"duration"`
	// Start time of the window in UTC.
	StartTime TimeOfDayInput `pulumi:"startTime"`
}

func (WeeklyMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyMaintenanceWindow)(nil)).Elem()
}

func (i WeeklyMaintenanceWindowArgs) ToWeeklyMaintenanceWindowOutput() WeeklyMaintenanceWindowOutput {
	return i.ToWeeklyMaintenanceWindowOutputWithContext(context.Background())
}

func (i WeeklyMaintenanceWindowArgs) ToWeeklyMaintenanceWindowOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyMaintenanceWindowOutput)
}

// WeeklyMaintenanceWindowArrayInput is an input type that accepts WeeklyMaintenanceWindowArray and WeeklyMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `WeeklyMaintenanceWindowArrayInput` via:
//
//          WeeklyMaintenanceWindowArray{ WeeklyMaintenanceWindowArgs{...} }
type WeeklyMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToWeeklyMaintenanceWindowArrayOutput() WeeklyMaintenanceWindowArrayOutput
	ToWeeklyMaintenanceWindowArrayOutputWithContext(context.Context) WeeklyMaintenanceWindowArrayOutput
}

type WeeklyMaintenanceWindowArray []WeeklyMaintenanceWindowInput

func (WeeklyMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeeklyMaintenanceWindow)(nil)).Elem()
}

func (i WeeklyMaintenanceWindowArray) ToWeeklyMaintenanceWindowArrayOutput() WeeklyMaintenanceWindowArrayOutput {
	return i.ToWeeklyMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i WeeklyMaintenanceWindowArray) ToWeeklyMaintenanceWindowArrayOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyMaintenanceWindowArrayOutput)
}

// Time window specified for weekly operations.
type WeeklyMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyMaintenanceWindow)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowOutput) ToWeeklyMaintenanceWindowOutput() WeeklyMaintenanceWindowOutput {
	return o
}

func (o WeeklyMaintenanceWindowOutput) ToWeeklyMaintenanceWindowOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowOutput {
	return o
}

// Allows to define schedule that runs specified day of the week.
func (o WeeklyMaintenanceWindowOutput) Day() WeeklyMaintenanceWindowDayOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindow) WeeklyMaintenanceWindowDay { return v.Day }).(WeeklyMaintenanceWindowDayOutput)
}

// Duration of the time window.
func (o WeeklyMaintenanceWindowOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindow) string { return v.Duration }).(pulumi.StringOutput)
}

// Start time of the window in UTC.
func (o WeeklyMaintenanceWindowOutput) StartTime() TimeOfDayOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindow) TimeOfDay { return v.StartTime }).(TimeOfDayOutput)
}

type WeeklyMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeeklyMaintenanceWindow)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowArrayOutput) ToWeeklyMaintenanceWindowArrayOutput() WeeklyMaintenanceWindowArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowArrayOutput) ToWeeklyMaintenanceWindowArrayOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) WeeklyMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeeklyMaintenanceWindow {
		return vs[0].([]WeeklyMaintenanceWindow)[vs[1].(int)]
	}).(WeeklyMaintenanceWindowOutput)
}

// Time window specified for weekly operations.
type WeeklyMaintenanceWindowResponse struct {
	// Allows to define schedule that runs specified day of the week.
	Day string `pulumi:"day"`
	// Duration of the time window.
	Duration string `pulumi:"duration"`
	// Start time of the window in UTC.
	StartTime TimeOfDayResponse `pulumi:"startTime"`
}

// Time window specified for weekly operations.
type WeeklyMaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyMaintenanceWindowResponse)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowResponseOutput) ToWeeklyMaintenanceWindowResponseOutput() WeeklyMaintenanceWindowResponseOutput {
	return o
}

func (o WeeklyMaintenanceWindowResponseOutput) ToWeeklyMaintenanceWindowResponseOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowResponseOutput {
	return o
}

// Allows to define schedule that runs specified day of the week.
func (o WeeklyMaintenanceWindowResponseOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindowResponse) string { return v.Day }).(pulumi.StringOutput)
}

// Duration of the time window.
func (o WeeklyMaintenanceWindowResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindowResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// Start time of the window in UTC.
func (o WeeklyMaintenanceWindowResponseOutput) StartTime() TimeOfDayResponseOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindowResponse) TimeOfDayResponse { return v.StartTime }).(TimeOfDayResponseOutput)
}

type WeeklyMaintenanceWindowResponseArrayOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeeklyMaintenanceWindowResponse)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowResponseArrayOutput) ToWeeklyMaintenanceWindowResponseArrayOutput() WeeklyMaintenanceWindowResponseArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowResponseArrayOutput) ToWeeklyMaintenanceWindowResponseArrayOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowResponseArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowResponseArrayOutput) Index(i pulumi.IntInput) WeeklyMaintenanceWindowResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeeklyMaintenanceWindowResponse {
		return vs[0].([]WeeklyMaintenanceWindowResponse)[vs[1].(int)]
	}).(WeeklyMaintenanceWindowResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudMemcacheV1beta2MaintenancePolicyInput)(nil)).Elem(), GoogleCloudMemcacheV1beta2MaintenancePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudMemcacheV1beta2MaintenancePolicyPtrInput)(nil)).Elem(), GoogleCloudMemcacheV1beta2MaintenancePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMessageInput)(nil)).Elem(), InstanceMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMessageArrayInput)(nil)).Elem(), InstanceMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MemcacheParametersInput)(nil)).Elem(), MemcacheParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MemcacheParametersPtrInput)(nil)).Elem(), MemcacheParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigInput)(nil)).Elem(), NodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeOfDayInput)(nil)).Elem(), TimeOfDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyMaintenanceWindowInput)(nil)).Elem(), WeeklyMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyMaintenanceWindowArrayInput)(nil)).Elem(), WeeklyMaintenanceWindowArray{})
	pulumi.RegisterOutputType(GoogleCloudMemcacheV1beta2MaintenancePolicyOutput{})
	pulumi.RegisterOutputType(GoogleCloudMemcacheV1beta2MaintenancePolicyPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudMemcacheV1beta2MaintenancePolicyResponseOutput{})
	pulumi.RegisterOutputType(InstanceMessageOutput{})
	pulumi.RegisterOutputType(InstanceMessageArrayOutput{})
	pulumi.RegisterOutputType(InstanceMessageResponseOutput{})
	pulumi.RegisterOutputType(InstanceMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceScheduleResponseOutput{})
	pulumi.RegisterOutputType(MemcacheParametersOutput{})
	pulumi.RegisterOutputType(MemcacheParametersPtrOutput{})
	pulumi.RegisterOutputType(MemcacheParametersResponseOutput{})
	pulumi.RegisterOutputType(NodeConfigOutput{})
	pulumi.RegisterOutputType(NodeConfigResponseOutput{})
	pulumi.RegisterOutputType(NodeResponseOutput{})
	pulumi.RegisterOutputType(NodeResponseArrayOutput{})
	pulumi.RegisterOutputType(TimeOfDayOutput{})
	pulumi.RegisterOutputType(TimeOfDayResponseOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowResponseArrayOutput{})
}
