// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type InstanceMessage struct {
	// A code that correspond to one type of user-facing message.
	Code *string `pulumi:"code"`
	// Message on memcached instance which will be exposed to users.
	Message *string `pulumi:"message"`
}

// InstanceMessageInput is an input type that accepts InstanceMessageArgs and InstanceMessageOutput values.
// You can construct a concrete instance of `InstanceMessageInput` via:
//
//          InstanceMessageArgs{...}
type InstanceMessageInput interface {
	pulumi.Input

	ToInstanceMessageOutput() InstanceMessageOutput
	ToInstanceMessageOutputWithContext(context.Context) InstanceMessageOutput
}

type InstanceMessageArgs struct {
	// A code that correspond to one type of user-facing message.
	Code pulumi.StringPtrInput `pulumi:"code"`
	// Message on memcached instance which will be exposed to users.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (InstanceMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMessage)(nil)).Elem()
}

func (i InstanceMessageArgs) ToInstanceMessageOutput() InstanceMessageOutput {
	return i.ToInstanceMessageOutputWithContext(context.Background())
}

func (i InstanceMessageArgs) ToInstanceMessageOutputWithContext(ctx context.Context) InstanceMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMessageOutput)
}

// InstanceMessageArrayInput is an input type that accepts InstanceMessageArray and InstanceMessageArrayOutput values.
// You can construct a concrete instance of `InstanceMessageArrayInput` via:
//
//          InstanceMessageArray{ InstanceMessageArgs{...} }
type InstanceMessageArrayInput interface {
	pulumi.Input

	ToInstanceMessageArrayOutput() InstanceMessageArrayOutput
	ToInstanceMessageArrayOutputWithContext(context.Context) InstanceMessageArrayOutput
}

type InstanceMessageArray []InstanceMessageInput

func (InstanceMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMessage)(nil)).Elem()
}

func (i InstanceMessageArray) ToInstanceMessageArrayOutput() InstanceMessageArrayOutput {
	return i.ToInstanceMessageArrayOutputWithContext(context.Background())
}

func (i InstanceMessageArray) ToInstanceMessageArrayOutputWithContext(ctx context.Context) InstanceMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMessageArrayOutput)
}

type InstanceMessageOutput struct{ *pulumi.OutputState }

func (InstanceMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMessage)(nil)).Elem()
}

func (o InstanceMessageOutput) ToInstanceMessageOutput() InstanceMessageOutput {
	return o
}

func (o InstanceMessageOutput) ToInstanceMessageOutputWithContext(ctx context.Context) InstanceMessageOutput {
	return o
}

// A code that correspond to one type of user-facing message.
func (o InstanceMessageOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMessage) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Message on memcached instance which will be exposed to users.
func (o InstanceMessageOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMessage) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type InstanceMessageArrayOutput struct{ *pulumi.OutputState }

func (InstanceMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMessage)(nil)).Elem()
}

func (o InstanceMessageArrayOutput) ToInstanceMessageArrayOutput() InstanceMessageArrayOutput {
	return o
}

func (o InstanceMessageArrayOutput) ToInstanceMessageArrayOutputWithContext(ctx context.Context) InstanceMessageArrayOutput {
	return o
}

func (o InstanceMessageArrayOutput) Index(i pulumi.IntInput) InstanceMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceMessage {
		return vs[0].([]InstanceMessage)[vs[1].(int)]
	}).(InstanceMessageOutput)
}

// The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.
type MemcacheParameters struct {
	// Output only.
	Id *string `pulumi:"id"`
	// User defined set of parameters to use in the memcached process.
	Params map[string]string `pulumi:"params"`
}

// MemcacheParametersInput is an input type that accepts MemcacheParametersArgs and MemcacheParametersOutput values.
// You can construct a concrete instance of `MemcacheParametersInput` via:
//
//          MemcacheParametersArgs{...}
type MemcacheParametersInput interface {
	pulumi.Input

	ToMemcacheParametersOutput() MemcacheParametersOutput
	ToMemcacheParametersOutputWithContext(context.Context) MemcacheParametersOutput
}

// The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.
type MemcacheParametersArgs struct {
	// Output only.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// User defined set of parameters to use in the memcached process.
	Params pulumi.StringMapInput `pulumi:"params"`
}

func (MemcacheParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheParameters)(nil)).Elem()
}

func (i MemcacheParametersArgs) ToMemcacheParametersOutput() MemcacheParametersOutput {
	return i.ToMemcacheParametersOutputWithContext(context.Background())
}

func (i MemcacheParametersArgs) ToMemcacheParametersOutputWithContext(ctx context.Context) MemcacheParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersOutput)
}

func (i MemcacheParametersArgs) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return i.ToMemcacheParametersPtrOutputWithContext(context.Background())
}

func (i MemcacheParametersArgs) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersOutput).ToMemcacheParametersPtrOutputWithContext(ctx)
}

// MemcacheParametersPtrInput is an input type that accepts MemcacheParametersArgs, MemcacheParametersPtr and MemcacheParametersPtrOutput values.
// You can construct a concrete instance of `MemcacheParametersPtrInput` via:
//
//          MemcacheParametersArgs{...}
//
//  or:
//
//          nil
type MemcacheParametersPtrInput interface {
	pulumi.Input

	ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput
	ToMemcacheParametersPtrOutputWithContext(context.Context) MemcacheParametersPtrOutput
}

type memcacheParametersPtrType MemcacheParametersArgs

func MemcacheParametersPtr(v *MemcacheParametersArgs) MemcacheParametersPtrInput {
	return (*memcacheParametersPtrType)(v)
}

func (*memcacheParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcacheParameters)(nil)).Elem()
}

func (i *memcacheParametersPtrType) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return i.ToMemcacheParametersPtrOutputWithContext(context.Background())
}

func (i *memcacheParametersPtrType) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersPtrOutput)
}

// The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.
type MemcacheParametersOutput struct{ *pulumi.OutputState }

func (MemcacheParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheParameters)(nil)).Elem()
}

func (o MemcacheParametersOutput) ToMemcacheParametersOutput() MemcacheParametersOutput {
	return o
}

func (o MemcacheParametersOutput) ToMemcacheParametersOutputWithContext(ctx context.Context) MemcacheParametersOutput {
	return o
}

func (o MemcacheParametersOutput) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return o.ToMemcacheParametersPtrOutputWithContext(context.Background())
}

func (o MemcacheParametersOutput) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return o.ApplyT(func(v MemcacheParameters) *MemcacheParameters {
		return &v
	}).(MemcacheParametersPtrOutput)
}

// Output only.
func (o MemcacheParametersOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MemcacheParameters) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// User defined set of parameters to use in the memcached process.
func (o MemcacheParametersOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v MemcacheParameters) map[string]string { return v.Params }).(pulumi.StringMapOutput)
}

type MemcacheParametersPtrOutput struct{ *pulumi.OutputState }

func (MemcacheParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcacheParameters)(nil)).Elem()
}

func (o MemcacheParametersPtrOutput) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return o
}

func (o MemcacheParametersPtrOutput) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return o
}

func (o MemcacheParametersPtrOutput) Elem() MemcacheParametersOutput {
	return o.ApplyT(func(v *MemcacheParameters) MemcacheParameters { return *v }).(MemcacheParametersOutput)
}

// Output only.
func (o MemcacheParametersPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MemcacheParameters) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// User defined set of parameters to use in the memcached process.
func (o MemcacheParametersPtrOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MemcacheParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.Params
	}).(pulumi.StringMapOutput)
}

type Node struct {
	// Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
	Host *string `pulumi:"host"`
	// Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
	NodeId *string `pulumi:"nodeId"`
	// User defined parameters currently applied to the node.
	Parameters *MemcacheParameters `pulumi:"parameters"`
	// Output only. The port number of the Memcached server on this node.
	Port *int `pulumi:"port"`
	// Output only. Current state of the Memcached node.
	State *string `pulumi:"state"`
	// Output only. Location (GCP Zone) for the Memcached node.
	Zone *string `pulumi:"zone"`
}

// NodeInput is an input type that accepts NodeArgs and NodeOutput values.
// You can construct a concrete instance of `NodeInput` via:
//
//          NodeArgs{...}
type NodeInput interface {
	pulumi.Input

	ToNodeOutput() NodeOutput
	ToNodeOutputWithContext(context.Context) NodeOutput
}

type NodeArgs struct {
	// Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// User defined parameters currently applied to the node.
	Parameters MemcacheParametersPtrInput `pulumi:"parameters"`
	// Output only. The port number of the Memcached server on this node.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Output only. Current state of the Memcached node.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Output only. Location (GCP Zone) for the Memcached node.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (NodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Node)(nil)).Elem()
}

func (i NodeArgs) ToNodeOutput() NodeOutput {
	return i.ToNodeOutputWithContext(context.Background())
}

func (i NodeArgs) ToNodeOutputWithContext(ctx context.Context) NodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeOutput)
}

// NodeArrayInput is an input type that accepts NodeArray and NodeArrayOutput values.
// You can construct a concrete instance of `NodeArrayInput` via:
//
//          NodeArray{ NodeArgs{...} }
type NodeArrayInput interface {
	pulumi.Input

	ToNodeArrayOutput() NodeArrayOutput
	ToNodeArrayOutputWithContext(context.Context) NodeArrayOutput
}

type NodeArray []NodeInput

func (NodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Node)(nil)).Elem()
}

func (i NodeArray) ToNodeArrayOutput() NodeArrayOutput {
	return i.ToNodeArrayOutputWithContext(context.Background())
}

func (i NodeArray) ToNodeArrayOutputWithContext(ctx context.Context) NodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeArrayOutput)
}

type NodeOutput struct{ *pulumi.OutputState }

func (NodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Node)(nil)).Elem()
}

func (o NodeOutput) ToNodeOutput() NodeOutput {
	return o
}

func (o NodeOutput) ToNodeOutputWithContext(ctx context.Context) NodeOutput {
	return o
}

// Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
func (o NodeOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Node) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
func (o NodeOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Node) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// User defined parameters currently applied to the node.
func (o NodeOutput) Parameters() MemcacheParametersPtrOutput {
	return o.ApplyT(func(v Node) *MemcacheParameters { return v.Parameters }).(MemcacheParametersPtrOutput)
}

// Output only. The port number of the Memcached server on this node.
func (o NodeOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Node) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Output only. Current state of the Memcached node.
func (o NodeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Node) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Output only. Location (GCP Zone) for the Memcached node.
func (o NodeOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Node) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type NodeArrayOutput struct{ *pulumi.OutputState }

func (NodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Node)(nil)).Elem()
}

func (o NodeArrayOutput) ToNodeArrayOutput() NodeArrayOutput {
	return o
}

func (o NodeArrayOutput) ToNodeArrayOutputWithContext(ctx context.Context) NodeArrayOutput {
	return o
}

func (o NodeArrayOutput) Index(i pulumi.IntInput) NodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Node {
		return vs[0].([]Node)[vs[1].(int)]
	}).(NodeOutput)
}

// Configuration for a Memcached Node.
type NodeConfig struct {
	// Required. Number of cpus per Memcached node.
	CpuCount *int `pulumi:"cpuCount"`
	// Required. Memory size in MiB for each Memcached node.
	MemorySizeMb *int `pulumi:"memorySizeMb"`
}

// NodeConfigInput is an input type that accepts NodeConfigArgs and NodeConfigOutput values.
// You can construct a concrete instance of `NodeConfigInput` via:
//
//          NodeConfigArgs{...}
type NodeConfigInput interface {
	pulumi.Input

	ToNodeConfigOutput() NodeConfigOutput
	ToNodeConfigOutputWithContext(context.Context) NodeConfigOutput
}

// Configuration for a Memcached Node.
type NodeConfigArgs struct {
	// Required. Number of cpus per Memcached node.
	CpuCount pulumi.IntPtrInput `pulumi:"cpuCount"`
	// Required. Memory size in MiB for each Memcached node.
	MemorySizeMb pulumi.IntPtrInput `pulumi:"memorySizeMb"`
}

func (NodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (i NodeConfigArgs) ToNodeConfigOutput() NodeConfigOutput {
	return i.ToNodeConfigOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput)
}

func (i NodeConfigArgs) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput).ToNodeConfigPtrOutputWithContext(ctx)
}

// NodeConfigPtrInput is an input type that accepts NodeConfigArgs, NodeConfigPtr and NodeConfigPtrOutput values.
// You can construct a concrete instance of `NodeConfigPtrInput` via:
//
//          NodeConfigArgs{...}
//
//  or:
//
//          nil
type NodeConfigPtrInput interface {
	pulumi.Input

	ToNodeConfigPtrOutput() NodeConfigPtrOutput
	ToNodeConfigPtrOutputWithContext(context.Context) NodeConfigPtrOutput
}

type nodeConfigPtrType NodeConfigArgs

func NodeConfigPtr(v *NodeConfigArgs) NodeConfigPtrInput {
	return (*nodeConfigPtrType)(v)
}

func (*nodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigPtrOutput)
}

// Configuration for a Memcached Node.
type NodeConfigOutput struct{ *pulumi.OutputState }

func (NodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (o NodeConfigOutput) ToNodeConfigOutput() NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (o NodeConfigOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *NodeConfig {
		return &v
	}).(NodeConfigPtrOutput)
}

// Required. Number of cpus per Memcached node.
func (o NodeConfigOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.CpuCount }).(pulumi.IntPtrOutput)
}

// Required. Memory size in MiB for each Memcached node.
func (o NodeConfigOutput) MemorySizeMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.MemorySizeMb }).(pulumi.IntPtrOutput)
}

type NodeConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) Elem() NodeConfigOutput {
	return o.ApplyT(func(v *NodeConfig) NodeConfig { return *v }).(NodeConfigOutput)
}

// Required. Number of cpus per Memcached node.
func (o NodeConfigPtrOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.CpuCount
	}).(pulumi.IntPtrOutput)
}

// Required. Memory size in MiB for each Memcached node.
func (o NodeConfigPtrOutput) MemorySizeMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.MemorySizeMb
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(InstanceMessageOutput{})
	pulumi.RegisterOutputType(InstanceMessageArrayOutput{})
	pulumi.RegisterOutputType(MemcacheParametersOutput{})
	pulumi.RegisterOutputType(MemcacheParametersPtrOutput{})
	pulumi.RegisterOutputType(NodeOutput{})
	pulumi.RegisterOutputType(NodeArrayOutput{})
	pulumi.RegisterOutputType(NodeConfigOutput{})
	pulumi.RegisterOutputType(NodeConfigPtrOutput{})
}
