// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type InstanceMessage struct {
	// A code that correspond to one type of user-facing message.
	Code *string `pulumi:"code"`
	// Message on memcached instance which will be exposed to users.
	Message *string `pulumi:"message"`
}

// InstanceMessageInput is an input type that accepts InstanceMessageArgs and InstanceMessageOutput values.
// You can construct a concrete instance of `InstanceMessageInput` via:
//
//          InstanceMessageArgs{...}
type InstanceMessageInput interface {
	pulumi.Input

	ToInstanceMessageOutput() InstanceMessageOutput
	ToInstanceMessageOutputWithContext(context.Context) InstanceMessageOutput
}

type InstanceMessageArgs struct {
	// A code that correspond to one type of user-facing message.
	Code *InstanceMessageCode `pulumi:"code"`
	// Message on memcached instance which will be exposed to users.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (InstanceMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMessage)(nil)).Elem()
}

func (i InstanceMessageArgs) ToInstanceMessageOutput() InstanceMessageOutput {
	return i.ToInstanceMessageOutputWithContext(context.Background())
}

func (i InstanceMessageArgs) ToInstanceMessageOutputWithContext(ctx context.Context) InstanceMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMessageOutput)
}

// InstanceMessageArrayInput is an input type that accepts InstanceMessageArray and InstanceMessageArrayOutput values.
// You can construct a concrete instance of `InstanceMessageArrayInput` via:
//
//          InstanceMessageArray{ InstanceMessageArgs{...} }
type InstanceMessageArrayInput interface {
	pulumi.Input

	ToInstanceMessageArrayOutput() InstanceMessageArrayOutput
	ToInstanceMessageArrayOutputWithContext(context.Context) InstanceMessageArrayOutput
}

type InstanceMessageArray []InstanceMessageInput

func (InstanceMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMessage)(nil)).Elem()
}

func (i InstanceMessageArray) ToInstanceMessageArrayOutput() InstanceMessageArrayOutput {
	return i.ToInstanceMessageArrayOutputWithContext(context.Background())
}

func (i InstanceMessageArray) ToInstanceMessageArrayOutputWithContext(ctx context.Context) InstanceMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMessageArrayOutput)
}

type InstanceMessageOutput struct{ *pulumi.OutputState }

func (InstanceMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMessage)(nil)).Elem()
}

func (o InstanceMessageOutput) ToInstanceMessageOutput() InstanceMessageOutput {
	return o
}

func (o InstanceMessageOutput) ToInstanceMessageOutputWithContext(ctx context.Context) InstanceMessageOutput {
	return o
}

// A code that correspond to one type of user-facing message.
func (o InstanceMessageOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMessage) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Message on memcached instance which will be exposed to users.
func (o InstanceMessageOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMessage) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type InstanceMessageArrayOutput struct{ *pulumi.OutputState }

func (InstanceMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMessage)(nil)).Elem()
}

func (o InstanceMessageArrayOutput) ToInstanceMessageArrayOutput() InstanceMessageArrayOutput {
	return o
}

func (o InstanceMessageArrayOutput) ToInstanceMessageArrayOutputWithContext(ctx context.Context) InstanceMessageArrayOutput {
	return o
}

func (o InstanceMessageArrayOutput) Index(i pulumi.IntInput) InstanceMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceMessage {
		return vs[0].([]InstanceMessage)[vs[1].(int)]
	}).(InstanceMessageOutput)
}

type InstanceMessageResponse struct {
	// A code that correspond to one type of user-facing message.
	Code string `pulumi:"code"`
	// Message on memcached instance which will be exposed to users.
	Message string `pulumi:"message"`
}

// InstanceMessageResponseInput is an input type that accepts InstanceMessageResponseArgs and InstanceMessageResponseOutput values.
// You can construct a concrete instance of `InstanceMessageResponseInput` via:
//
//          InstanceMessageResponseArgs{...}
type InstanceMessageResponseInput interface {
	pulumi.Input

	ToInstanceMessageResponseOutput() InstanceMessageResponseOutput
	ToInstanceMessageResponseOutputWithContext(context.Context) InstanceMessageResponseOutput
}

type InstanceMessageResponseArgs struct {
	// A code that correspond to one type of user-facing message.
	Code pulumi.StringInput `pulumi:"code"`
	// Message on memcached instance which will be exposed to users.
	Message pulumi.StringInput `pulumi:"message"`
}

func (InstanceMessageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMessageResponse)(nil)).Elem()
}

func (i InstanceMessageResponseArgs) ToInstanceMessageResponseOutput() InstanceMessageResponseOutput {
	return i.ToInstanceMessageResponseOutputWithContext(context.Background())
}

func (i InstanceMessageResponseArgs) ToInstanceMessageResponseOutputWithContext(ctx context.Context) InstanceMessageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMessageResponseOutput)
}

// InstanceMessageResponseArrayInput is an input type that accepts InstanceMessageResponseArray and InstanceMessageResponseArrayOutput values.
// You can construct a concrete instance of `InstanceMessageResponseArrayInput` via:
//
//          InstanceMessageResponseArray{ InstanceMessageResponseArgs{...} }
type InstanceMessageResponseArrayInput interface {
	pulumi.Input

	ToInstanceMessageResponseArrayOutput() InstanceMessageResponseArrayOutput
	ToInstanceMessageResponseArrayOutputWithContext(context.Context) InstanceMessageResponseArrayOutput
}

type InstanceMessageResponseArray []InstanceMessageResponseInput

func (InstanceMessageResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMessageResponse)(nil)).Elem()
}

func (i InstanceMessageResponseArray) ToInstanceMessageResponseArrayOutput() InstanceMessageResponseArrayOutput {
	return i.ToInstanceMessageResponseArrayOutputWithContext(context.Background())
}

func (i InstanceMessageResponseArray) ToInstanceMessageResponseArrayOutputWithContext(ctx context.Context) InstanceMessageResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMessageResponseArrayOutput)
}

type InstanceMessageResponseOutput struct{ *pulumi.OutputState }

func (InstanceMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMessageResponse)(nil)).Elem()
}

func (o InstanceMessageResponseOutput) ToInstanceMessageResponseOutput() InstanceMessageResponseOutput {
	return o
}

func (o InstanceMessageResponseOutput) ToInstanceMessageResponseOutputWithContext(ctx context.Context) InstanceMessageResponseOutput {
	return o
}

// A code that correspond to one type of user-facing message.
func (o InstanceMessageResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceMessageResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Message on memcached instance which will be exposed to users.
func (o InstanceMessageResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceMessageResponse) string { return v.Message }).(pulumi.StringOutput)
}

type InstanceMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (InstanceMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMessageResponse)(nil)).Elem()
}

func (o InstanceMessageResponseArrayOutput) ToInstanceMessageResponseArrayOutput() InstanceMessageResponseArrayOutput {
	return o
}

func (o InstanceMessageResponseArrayOutput) ToInstanceMessageResponseArrayOutputWithContext(ctx context.Context) InstanceMessageResponseArrayOutput {
	return o
}

func (o InstanceMessageResponseArrayOutput) Index(i pulumi.IntInput) InstanceMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceMessageResponse {
		return vs[0].([]InstanceMessageResponse)[vs[1].(int)]
	}).(InstanceMessageResponseOutput)
}

// The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.
type MemcacheParameters struct {
	// User defined set of parameters to use in the memcached process.
	Params map[string]string `pulumi:"params"`
}

// MemcacheParametersInput is an input type that accepts MemcacheParametersArgs and MemcacheParametersOutput values.
// You can construct a concrete instance of `MemcacheParametersInput` via:
//
//          MemcacheParametersArgs{...}
type MemcacheParametersInput interface {
	pulumi.Input

	ToMemcacheParametersOutput() MemcacheParametersOutput
	ToMemcacheParametersOutputWithContext(context.Context) MemcacheParametersOutput
}

// The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.
type MemcacheParametersArgs struct {
	// User defined set of parameters to use in the memcached process.
	Params pulumi.StringMapInput `pulumi:"params"`
}

func (MemcacheParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheParameters)(nil)).Elem()
}

func (i MemcacheParametersArgs) ToMemcacheParametersOutput() MemcacheParametersOutput {
	return i.ToMemcacheParametersOutputWithContext(context.Background())
}

func (i MemcacheParametersArgs) ToMemcacheParametersOutputWithContext(ctx context.Context) MemcacheParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersOutput)
}

func (i MemcacheParametersArgs) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return i.ToMemcacheParametersPtrOutputWithContext(context.Background())
}

func (i MemcacheParametersArgs) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersOutput).ToMemcacheParametersPtrOutputWithContext(ctx)
}

// MemcacheParametersPtrInput is an input type that accepts MemcacheParametersArgs, MemcacheParametersPtr and MemcacheParametersPtrOutput values.
// You can construct a concrete instance of `MemcacheParametersPtrInput` via:
//
//          MemcacheParametersArgs{...}
//
//  or:
//
//          nil
type MemcacheParametersPtrInput interface {
	pulumi.Input

	ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput
	ToMemcacheParametersPtrOutputWithContext(context.Context) MemcacheParametersPtrOutput
}

type memcacheParametersPtrType MemcacheParametersArgs

func MemcacheParametersPtr(v *MemcacheParametersArgs) MemcacheParametersPtrInput {
	return (*memcacheParametersPtrType)(v)
}

func (*memcacheParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcacheParameters)(nil)).Elem()
}

func (i *memcacheParametersPtrType) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return i.ToMemcacheParametersPtrOutputWithContext(context.Background())
}

func (i *memcacheParametersPtrType) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersPtrOutput)
}

// The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.
type MemcacheParametersOutput struct{ *pulumi.OutputState }

func (MemcacheParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheParameters)(nil)).Elem()
}

func (o MemcacheParametersOutput) ToMemcacheParametersOutput() MemcacheParametersOutput {
	return o
}

func (o MemcacheParametersOutput) ToMemcacheParametersOutputWithContext(ctx context.Context) MemcacheParametersOutput {
	return o
}

func (o MemcacheParametersOutput) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return o.ToMemcacheParametersPtrOutputWithContext(context.Background())
}

func (o MemcacheParametersOutput) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return o.ApplyT(func(v MemcacheParameters) *MemcacheParameters {
		return &v
	}).(MemcacheParametersPtrOutput)
}

// User defined set of parameters to use in the memcached process.
func (o MemcacheParametersOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v MemcacheParameters) map[string]string { return v.Params }).(pulumi.StringMapOutput)
}

type MemcacheParametersPtrOutput struct{ *pulumi.OutputState }

func (MemcacheParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcacheParameters)(nil)).Elem()
}

func (o MemcacheParametersPtrOutput) ToMemcacheParametersPtrOutput() MemcacheParametersPtrOutput {
	return o
}

func (o MemcacheParametersPtrOutput) ToMemcacheParametersPtrOutputWithContext(ctx context.Context) MemcacheParametersPtrOutput {
	return o
}

func (o MemcacheParametersPtrOutput) Elem() MemcacheParametersOutput {
	return o.ApplyT(func(v *MemcacheParameters) MemcacheParameters { return *v }).(MemcacheParametersOutput)
}

// User defined set of parameters to use in the memcached process.
func (o MemcacheParametersPtrOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MemcacheParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.Params
	}).(pulumi.StringMapOutput)
}

// The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.
type MemcacheParametersResponse struct {
	// User defined set of parameters to use in the memcached process.
	Params map[string]string `pulumi:"params"`
}

// MemcacheParametersResponseInput is an input type that accepts MemcacheParametersResponseArgs and MemcacheParametersResponseOutput values.
// You can construct a concrete instance of `MemcacheParametersResponseInput` via:
//
//          MemcacheParametersResponseArgs{...}
type MemcacheParametersResponseInput interface {
	pulumi.Input

	ToMemcacheParametersResponseOutput() MemcacheParametersResponseOutput
	ToMemcacheParametersResponseOutputWithContext(context.Context) MemcacheParametersResponseOutput
}

// The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.
type MemcacheParametersResponseArgs struct {
	// User defined set of parameters to use in the memcached process.
	Params pulumi.StringMapInput `pulumi:"params"`
}

func (MemcacheParametersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheParametersResponse)(nil)).Elem()
}

func (i MemcacheParametersResponseArgs) ToMemcacheParametersResponseOutput() MemcacheParametersResponseOutput {
	return i.ToMemcacheParametersResponseOutputWithContext(context.Background())
}

func (i MemcacheParametersResponseArgs) ToMemcacheParametersResponseOutputWithContext(ctx context.Context) MemcacheParametersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersResponseOutput)
}

func (i MemcacheParametersResponseArgs) ToMemcacheParametersResponsePtrOutput() MemcacheParametersResponsePtrOutput {
	return i.ToMemcacheParametersResponsePtrOutputWithContext(context.Background())
}

func (i MemcacheParametersResponseArgs) ToMemcacheParametersResponsePtrOutputWithContext(ctx context.Context) MemcacheParametersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersResponseOutput).ToMemcacheParametersResponsePtrOutputWithContext(ctx)
}

// MemcacheParametersResponsePtrInput is an input type that accepts MemcacheParametersResponseArgs, MemcacheParametersResponsePtr and MemcacheParametersResponsePtrOutput values.
// You can construct a concrete instance of `MemcacheParametersResponsePtrInput` via:
//
//          MemcacheParametersResponseArgs{...}
//
//  or:
//
//          nil
type MemcacheParametersResponsePtrInput interface {
	pulumi.Input

	ToMemcacheParametersResponsePtrOutput() MemcacheParametersResponsePtrOutput
	ToMemcacheParametersResponsePtrOutputWithContext(context.Context) MemcacheParametersResponsePtrOutput
}

type memcacheParametersResponsePtrType MemcacheParametersResponseArgs

func MemcacheParametersResponsePtr(v *MemcacheParametersResponseArgs) MemcacheParametersResponsePtrInput {
	return (*memcacheParametersResponsePtrType)(v)
}

func (*memcacheParametersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcacheParametersResponse)(nil)).Elem()
}

func (i *memcacheParametersResponsePtrType) ToMemcacheParametersResponsePtrOutput() MemcacheParametersResponsePtrOutput {
	return i.ToMemcacheParametersResponsePtrOutputWithContext(context.Background())
}

func (i *memcacheParametersResponsePtrType) ToMemcacheParametersResponsePtrOutputWithContext(ctx context.Context) MemcacheParametersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemcacheParametersResponsePtrOutput)
}

// The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.
type MemcacheParametersResponseOutput struct{ *pulumi.OutputState }

func (MemcacheParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemcacheParametersResponse)(nil)).Elem()
}

func (o MemcacheParametersResponseOutput) ToMemcacheParametersResponseOutput() MemcacheParametersResponseOutput {
	return o
}

func (o MemcacheParametersResponseOutput) ToMemcacheParametersResponseOutputWithContext(ctx context.Context) MemcacheParametersResponseOutput {
	return o
}

func (o MemcacheParametersResponseOutput) ToMemcacheParametersResponsePtrOutput() MemcacheParametersResponsePtrOutput {
	return o.ToMemcacheParametersResponsePtrOutputWithContext(context.Background())
}

func (o MemcacheParametersResponseOutput) ToMemcacheParametersResponsePtrOutputWithContext(ctx context.Context) MemcacheParametersResponsePtrOutput {
	return o.ApplyT(func(v MemcacheParametersResponse) *MemcacheParametersResponse {
		return &v
	}).(MemcacheParametersResponsePtrOutput)
}

// User defined set of parameters to use in the memcached process.
func (o MemcacheParametersResponseOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v MemcacheParametersResponse) map[string]string { return v.Params }).(pulumi.StringMapOutput)
}

type MemcacheParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (MemcacheParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MemcacheParametersResponse)(nil)).Elem()
}

func (o MemcacheParametersResponsePtrOutput) ToMemcacheParametersResponsePtrOutput() MemcacheParametersResponsePtrOutput {
	return o
}

func (o MemcacheParametersResponsePtrOutput) ToMemcacheParametersResponsePtrOutputWithContext(ctx context.Context) MemcacheParametersResponsePtrOutput {
	return o
}

func (o MemcacheParametersResponsePtrOutput) Elem() MemcacheParametersResponseOutput {
	return o.ApplyT(func(v *MemcacheParametersResponse) MemcacheParametersResponse { return *v }).(MemcacheParametersResponseOutput)
}

// User defined set of parameters to use in the memcached process.
func (o MemcacheParametersResponsePtrOutput) Params() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MemcacheParametersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Params
	}).(pulumi.StringMapOutput)
}

// Configuration for a Memcached Node.
type NodeConfig struct {
	// Required. Number of cpus per Memcached node.
	CpuCount *int `pulumi:"cpuCount"`
	// Required. Memory size in MiB for each Memcached node.
	MemorySizeMb *int `pulumi:"memorySizeMb"`
}

// NodeConfigInput is an input type that accepts NodeConfigArgs and NodeConfigOutput values.
// You can construct a concrete instance of `NodeConfigInput` via:
//
//          NodeConfigArgs{...}
type NodeConfigInput interface {
	pulumi.Input

	ToNodeConfigOutput() NodeConfigOutput
	ToNodeConfigOutputWithContext(context.Context) NodeConfigOutput
}

// Configuration for a Memcached Node.
type NodeConfigArgs struct {
	// Required. Number of cpus per Memcached node.
	CpuCount pulumi.IntPtrInput `pulumi:"cpuCount"`
	// Required. Memory size in MiB for each Memcached node.
	MemorySizeMb pulumi.IntPtrInput `pulumi:"memorySizeMb"`
}

func (NodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (i NodeConfigArgs) ToNodeConfigOutput() NodeConfigOutput {
	return i.ToNodeConfigOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput)
}

func (i NodeConfigArgs) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput).ToNodeConfigPtrOutputWithContext(ctx)
}

// NodeConfigPtrInput is an input type that accepts NodeConfigArgs, NodeConfigPtr and NodeConfigPtrOutput values.
// You can construct a concrete instance of `NodeConfigPtrInput` via:
//
//          NodeConfigArgs{...}
//
//  or:
//
//          nil
type NodeConfigPtrInput interface {
	pulumi.Input

	ToNodeConfigPtrOutput() NodeConfigPtrOutput
	ToNodeConfigPtrOutputWithContext(context.Context) NodeConfigPtrOutput
}

type nodeConfigPtrType NodeConfigArgs

func NodeConfigPtr(v *NodeConfigArgs) NodeConfigPtrInput {
	return (*nodeConfigPtrType)(v)
}

func (*nodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigPtrOutput)
}

// Configuration for a Memcached Node.
type NodeConfigOutput struct{ *pulumi.OutputState }

func (NodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (o NodeConfigOutput) ToNodeConfigOutput() NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (o NodeConfigOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o.ApplyT(func(v NodeConfig) *NodeConfig {
		return &v
	}).(NodeConfigPtrOutput)
}

// Required. Number of cpus per Memcached node.
func (o NodeConfigOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.CpuCount }).(pulumi.IntPtrOutput)
}

// Required. Memory size in MiB for each Memcached node.
func (o NodeConfigOutput) MemorySizeMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.MemorySizeMb }).(pulumi.IntPtrOutput)
}

type NodeConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) Elem() NodeConfigOutput {
	return o.ApplyT(func(v *NodeConfig) NodeConfig { return *v }).(NodeConfigOutput)
}

// Required. Number of cpus per Memcached node.
func (o NodeConfigPtrOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.CpuCount
	}).(pulumi.IntPtrOutput)
}

// Required. Memory size in MiB for each Memcached node.
func (o NodeConfigPtrOutput) MemorySizeMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.MemorySizeMb
	}).(pulumi.IntPtrOutput)
}

// Configuration for a Memcached Node.
type NodeConfigResponse struct {
	// Required. Number of cpus per Memcached node.
	CpuCount int `pulumi:"cpuCount"`
	// Required. Memory size in MiB for each Memcached node.
	MemorySizeMb int `pulumi:"memorySizeMb"`
}

// NodeConfigResponseInput is an input type that accepts NodeConfigResponseArgs and NodeConfigResponseOutput values.
// You can construct a concrete instance of `NodeConfigResponseInput` via:
//
//          NodeConfigResponseArgs{...}
type NodeConfigResponseInput interface {
	pulumi.Input

	ToNodeConfigResponseOutput() NodeConfigResponseOutput
	ToNodeConfigResponseOutputWithContext(context.Context) NodeConfigResponseOutput
}

// Configuration for a Memcached Node.
type NodeConfigResponseArgs struct {
	// Required. Number of cpus per Memcached node.
	CpuCount pulumi.IntInput `pulumi:"cpuCount"`
	// Required. Memory size in MiB for each Memcached node.
	MemorySizeMb pulumi.IntInput `pulumi:"memorySizeMb"`
}

func (NodeConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigResponse)(nil)).Elem()
}

func (i NodeConfigResponseArgs) ToNodeConfigResponseOutput() NodeConfigResponseOutput {
	return i.ToNodeConfigResponseOutputWithContext(context.Background())
}

func (i NodeConfigResponseArgs) ToNodeConfigResponseOutputWithContext(ctx context.Context) NodeConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigResponseOutput)
}

func (i NodeConfigResponseArgs) ToNodeConfigResponsePtrOutput() NodeConfigResponsePtrOutput {
	return i.ToNodeConfigResponsePtrOutputWithContext(context.Background())
}

func (i NodeConfigResponseArgs) ToNodeConfigResponsePtrOutputWithContext(ctx context.Context) NodeConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigResponseOutput).ToNodeConfigResponsePtrOutputWithContext(ctx)
}

// NodeConfigResponsePtrInput is an input type that accepts NodeConfigResponseArgs, NodeConfigResponsePtr and NodeConfigResponsePtrOutput values.
// You can construct a concrete instance of `NodeConfigResponsePtrInput` via:
//
//          NodeConfigResponseArgs{...}
//
//  or:
//
//          nil
type NodeConfigResponsePtrInput interface {
	pulumi.Input

	ToNodeConfigResponsePtrOutput() NodeConfigResponsePtrOutput
	ToNodeConfigResponsePtrOutputWithContext(context.Context) NodeConfigResponsePtrOutput
}

type nodeConfigResponsePtrType NodeConfigResponseArgs

func NodeConfigResponsePtr(v *NodeConfigResponseArgs) NodeConfigResponsePtrInput {
	return (*nodeConfigResponsePtrType)(v)
}

func (*nodeConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigResponse)(nil)).Elem()
}

func (i *nodeConfigResponsePtrType) ToNodeConfigResponsePtrOutput() NodeConfigResponsePtrOutput {
	return i.ToNodeConfigResponsePtrOutputWithContext(context.Background())
}

func (i *nodeConfigResponsePtrType) ToNodeConfigResponsePtrOutputWithContext(ctx context.Context) NodeConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigResponsePtrOutput)
}

// Configuration for a Memcached Node.
type NodeConfigResponseOutput struct{ *pulumi.OutputState }

func (NodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigResponse)(nil)).Elem()
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutput() NodeConfigResponseOutput {
	return o
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutputWithContext(ctx context.Context) NodeConfigResponseOutput {
	return o
}

func (o NodeConfigResponseOutput) ToNodeConfigResponsePtrOutput() NodeConfigResponsePtrOutput {
	return o.ToNodeConfigResponsePtrOutputWithContext(context.Background())
}

func (o NodeConfigResponseOutput) ToNodeConfigResponsePtrOutputWithContext(ctx context.Context) NodeConfigResponsePtrOutput {
	return o.ApplyT(func(v NodeConfigResponse) *NodeConfigResponse {
		return &v
	}).(NodeConfigResponsePtrOutput)
}

// Required. Number of cpus per Memcached node.
func (o NodeConfigResponseOutput) CpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.CpuCount }).(pulumi.IntOutput)
}

// Required. Memory size in MiB for each Memcached node.
func (o NodeConfigResponseOutput) MemorySizeMb() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.MemorySizeMb }).(pulumi.IntOutput)
}

type NodeConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfigResponse)(nil)).Elem()
}

func (o NodeConfigResponsePtrOutput) ToNodeConfigResponsePtrOutput() NodeConfigResponsePtrOutput {
	return o
}

func (o NodeConfigResponsePtrOutput) ToNodeConfigResponsePtrOutputWithContext(ctx context.Context) NodeConfigResponsePtrOutput {
	return o
}

func (o NodeConfigResponsePtrOutput) Elem() NodeConfigResponseOutput {
	return o.ApplyT(func(v *NodeConfigResponse) NodeConfigResponse { return *v }).(NodeConfigResponseOutput)
}

// Required. Number of cpus per Memcached node.
func (o NodeConfigResponsePtrOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.CpuCount
	}).(pulumi.IntPtrOutput)
}

// Required. Memory size in MiB for each Memcached node.
func (o NodeConfigResponsePtrOutput) MemorySizeMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MemorySizeMb
	}).(pulumi.IntPtrOutput)
}

type NodeResponse struct {
	// Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
	Host string `pulumi:"host"`
	// Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
	NodeId string `pulumi:"nodeId"`
	// User defined parameters currently applied to the node.
	Parameters MemcacheParametersResponse `pulumi:"parameters"`
	// The port number of the Memcached server on this node.
	Port int `pulumi:"port"`
	// Current state of the Memcached node.
	State string `pulumi:"state"`
	// Location (GCP Zone) for the Memcached node.
	Zone string `pulumi:"zone"`
}

// NodeResponseInput is an input type that accepts NodeResponseArgs and NodeResponseOutput values.
// You can construct a concrete instance of `NodeResponseInput` via:
//
//          NodeResponseArgs{...}
type NodeResponseInput interface {
	pulumi.Input

	ToNodeResponseOutput() NodeResponseOutput
	ToNodeResponseOutputWithContext(context.Context) NodeResponseOutput
}

type NodeResponseArgs struct {
	// Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
	Host pulumi.StringInput `pulumi:"host"`
	// Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// User defined parameters currently applied to the node.
	Parameters MemcacheParametersResponseInput `pulumi:"parameters"`
	// The port number of the Memcached server on this node.
	Port pulumi.IntInput `pulumi:"port"`
	// Current state of the Memcached node.
	State pulumi.StringInput `pulumi:"state"`
	// Location (GCP Zone) for the Memcached node.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (NodeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeResponse)(nil)).Elem()
}

func (i NodeResponseArgs) ToNodeResponseOutput() NodeResponseOutput {
	return i.ToNodeResponseOutputWithContext(context.Background())
}

func (i NodeResponseArgs) ToNodeResponseOutputWithContext(ctx context.Context) NodeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeResponseOutput)
}

// NodeResponseArrayInput is an input type that accepts NodeResponseArray and NodeResponseArrayOutput values.
// You can construct a concrete instance of `NodeResponseArrayInput` via:
//
//          NodeResponseArray{ NodeResponseArgs{...} }
type NodeResponseArrayInput interface {
	pulumi.Input

	ToNodeResponseArrayOutput() NodeResponseArrayOutput
	ToNodeResponseArrayOutputWithContext(context.Context) NodeResponseArrayOutput
}

type NodeResponseArray []NodeResponseInput

func (NodeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeResponse)(nil)).Elem()
}

func (i NodeResponseArray) ToNodeResponseArrayOutput() NodeResponseArrayOutput {
	return i.ToNodeResponseArrayOutputWithContext(context.Background())
}

func (i NodeResponseArray) ToNodeResponseArrayOutputWithContext(ctx context.Context) NodeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeResponseArrayOutput)
}

type NodeResponseOutput struct{ *pulumi.OutputState }

func (NodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeResponse)(nil)).Elem()
}

func (o NodeResponseOutput) ToNodeResponseOutput() NodeResponseOutput {
	return o
}

func (o NodeResponseOutput) ToNodeResponseOutputWithContext(ctx context.Context) NodeResponseOutput {
	return o
}

// Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
func (o NodeResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
func (o NodeResponseOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.NodeId }).(pulumi.StringOutput)
}

// User defined parameters currently applied to the node.
func (o NodeResponseOutput) Parameters() MemcacheParametersResponseOutput {
	return o.ApplyT(func(v NodeResponse) MemcacheParametersResponse { return v.Parameters }).(MemcacheParametersResponseOutput)
}

// The port number of the Memcached server on this node.
func (o NodeResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v NodeResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Current state of the Memcached node.
func (o NodeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Location (GCP Zone) for the Memcached node.
func (o NodeResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.Zone }).(pulumi.StringOutput)
}

type NodeResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeResponse)(nil)).Elem()
}

func (o NodeResponseArrayOutput) ToNodeResponseArrayOutput() NodeResponseArrayOutput {
	return o
}

func (o NodeResponseArrayOutput) ToNodeResponseArrayOutputWithContext(ctx context.Context) NodeResponseArrayOutput {
	return o
}

func (o NodeResponseArrayOutput) Index(i pulumi.IntInput) NodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeResponse {
		return vs[0].([]NodeResponse)[vs[1].(int)]
	}).(NodeResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(InstanceMessageOutput{})
	pulumi.RegisterOutputType(InstanceMessageArrayOutput{})
	pulumi.RegisterOutputType(InstanceMessageResponseOutput{})
	pulumi.RegisterOutputType(InstanceMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(MemcacheParametersOutput{})
	pulumi.RegisterOutputType(MemcacheParametersPtrOutput{})
	pulumi.RegisterOutputType(MemcacheParametersResponseOutput{})
	pulumi.RegisterOutputType(MemcacheParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeConfigOutput{})
	pulumi.RegisterOutputType(NodeConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeConfigResponseOutput{})
	pulumi.RegisterOutputType(NodeConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeResponseOutput{})
	pulumi.RegisterOutputType(NodeResponseArrayOutput{})
}
