// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Instance in a given location.
type Instance struct {
	pulumi.CustomResourceState

	// The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
	AuthorizedNetwork pulumi.StringOutput `pulumi:"authorizedNetwork"`
	// The time the instance was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Endpoint for the Discovery API.
	DiscoveryEndpoint pulumi.StringOutput `pulumi:"discoveryEndpoint"`
	// User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// List of messages that describe the current state of the Memcached instance.
	InstanceMessages InstanceMessageResponseArrayOutput `pulumi:"instanceMessages"`
	// Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be "memcached-1.5.16".
	MemcacheFullVersion pulumi.StringOutput `pulumi:"memcacheFullVersion"`
	// List of Memcached nodes. Refer to Node message for more details.
	MemcacheNodes NodeResponseArrayOutput `pulumi:"memcacheNodes"`
	// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
	MemcacheVersion pulumi.StringOutput `pulumi:"memcacheVersion"`
	// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration for Memcached nodes.
	NodeConfig NodeConfigResponseOutput `pulumi:"nodeConfig"`
	// Number of nodes in the Memcached instance.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// Optional: User defined parameters to apply to the memcached process on each node.
	Parameters MemcacheParametersResponseOutput `pulumi:"parameters"`
	// The state of this Memcached instance.
	State pulumi.StringOutput `pulumi:"state"`
	// The time the instance was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.NodeConfig == nil {
		return nil, errors.New("invalid value for required argument 'NodeConfig'")
	}
	if args.NodeCount == nil {
		return nil, errors.New("invalid value for required argument 'NodeCount'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource Instance
	err := ctx.RegisterResource("google-native:memcache/v1:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("google-native:memcache/v1:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
	AuthorizedNetwork *string `pulumi:"authorizedNetwork"`
	// The time the instance was created.
	CreateTime *string `pulumi:"createTime"`
	// Endpoint for the Discovery API.
	DiscoveryEndpoint *string `pulumi:"discoveryEndpoint"`
	// User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
	DisplayName *string `pulumi:"displayName"`
	// List of messages that describe the current state of the Memcached instance.
	InstanceMessages []InstanceMessageResponse `pulumi:"instanceMessages"`
	// Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels map[string]string `pulumi:"labels"`
	// The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be "memcached-1.5.16".
	MemcacheFullVersion *string `pulumi:"memcacheFullVersion"`
	// List of Memcached nodes. Refer to Node message for more details.
	MemcacheNodes []NodeResponse `pulumi:"memcacheNodes"`
	// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
	MemcacheVersion *string `pulumi:"memcacheVersion"`
	// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
	Name *string `pulumi:"name"`
	// Configuration for Memcached nodes.
	NodeConfig *NodeConfigResponse `pulumi:"nodeConfig"`
	// Number of nodes in the Memcached instance.
	NodeCount *int `pulumi:"nodeCount"`
	// Optional: User defined parameters to apply to the memcached process on each node.
	Parameters *MemcacheParametersResponse `pulumi:"parameters"`
	// The state of this Memcached instance.
	State *string `pulumi:"state"`
	// The time the instance was updated.
	UpdateTime *string `pulumi:"updateTime"`
	// Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
	Zones []string `pulumi:"zones"`
}

type InstanceState struct {
	// The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
	AuthorizedNetwork pulumi.StringPtrInput
	// The time the instance was created.
	CreateTime pulumi.StringPtrInput
	// Endpoint for the Discovery API.
	DiscoveryEndpoint pulumi.StringPtrInput
	// User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
	DisplayName pulumi.StringPtrInput
	// List of messages that describe the current state of the Memcached instance.
	InstanceMessages InstanceMessageResponseArrayInput
	// Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels pulumi.StringMapInput
	// The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be "memcached-1.5.16".
	MemcacheFullVersion pulumi.StringPtrInput
	// List of Memcached nodes. Refer to Node message for more details.
	MemcacheNodes NodeResponseArrayInput
	// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
	MemcacheVersion pulumi.StringPtrInput
	// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
	Name pulumi.StringPtrInput
	// Configuration for Memcached nodes.
	NodeConfig NodeConfigResponsePtrInput
	// Number of nodes in the Memcached instance.
	NodeCount pulumi.IntPtrInput
	// Optional: User defined parameters to apply to the memcached process on each node.
	Parameters MemcacheParametersResponsePtrInput
	// The state of this Memcached instance.
	State pulumi.StringPtrInput
	// The time the instance was updated.
	UpdateTime pulumi.StringPtrInput
	// Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
	Zones pulumi.StringArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
	AuthorizedNetwork *string `pulumi:"authorizedNetwork"`
	// User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
	DisplayName *string `pulumi:"displayName"`
	InstanceId  string  `pulumi:"instanceId"`
	// List of messages that describe the current state of the Memcached instance.
	InstanceMessages []InstanceMessage `pulumi:"instanceMessages"`
	// Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels   map[string]string `pulumi:"labels"`
	Location string            `pulumi:"location"`
	// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
	MemcacheVersion *string `pulumi:"memcacheVersion"`
	// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
	Name string `pulumi:"name"`
	// Configuration for Memcached nodes.
	NodeConfig NodeConfig `pulumi:"nodeConfig"`
	// Number of nodes in the Memcached instance.
	NodeCount int `pulumi:"nodeCount"`
	// Optional: User defined parameters to apply to the memcached process on each node.
	Parameters *MemcacheParameters `pulumi:"parameters"`
	Project    string              `pulumi:"project"`
	// Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
	AuthorizedNetwork pulumi.StringPtrInput
	// User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
	DisplayName pulumi.StringPtrInput
	InstanceId  pulumi.StringInput
	// List of messages that describe the current state of the Memcached instance.
	InstanceMessages InstanceMessageArrayInput
	// Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
	Labels   pulumi.StringMapInput
	Location pulumi.StringInput
	// The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
	MemcacheVersion *InstanceMemcacheVersion
	// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
	Name pulumi.StringInput
	// Configuration for Memcached nodes.
	NodeConfig NodeConfigInput
	// Number of nodes in the Memcached instance.
	NodeCount pulumi.IntInput
	// Optional: User defined parameters to apply to the memcached process on each node.
	Parameters MemcacheParametersPtrInput
	Project    pulumi.StringInput
	// Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
	Zones pulumi.StringArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((*Instance)(nil))
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

type InstanceOutput struct {
	*pulumi.OutputState
}

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Instance)(nil))
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceOutput{})
}
