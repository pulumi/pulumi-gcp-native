// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves a `NetworkPolicy` resource by its resource name.
func LookupNetworkPolicy(ctx *pulumi.Context, args *LookupNetworkPolicyArgs, opts ...pulumi.InvokeOption) (*LookupNetworkPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkPolicyResult
	err := ctx.Invoke("google-native:vmwareengine/v1:getNetworkPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNetworkPolicyArgs struct {
	Location        string  `pulumi:"location"`
	NetworkPolicyId string  `pulumi:"networkPolicyId"`
	Project         *string `pulumi:"project"`
}

type LookupNetworkPolicyResult struct {
	// Creation time of this resource.
	CreateTime string `pulumi:"createTime"`
	// Optional. User-provided description for this network policy.
	Description string `pulumi:"description"`
	// IP address range in CIDR notation used to create internet access and external IP access. An RFC 1918 CIDR block, with a "/26" prefix, is required. The range cannot overlap with any prefixes either in the consumer VPC network or in use by the private clouds attached to that VPC network.
	EdgeServicesCidr string `pulumi:"edgeServicesCidr"`
	// Network service that allows External IP addresses to be assigned to VMware workloads. This service can only be enabled when `internet_access` is also enabled.
	ExternalIp NetworkServiceResponse `pulumi:"externalIp"`
	// Network service that allows VMware workloads to access the internet.
	InternetAccess NetworkServiceResponse `pulumi:"internetAccess"`
	// The resource name of this network policy. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/networkPolicies/my-network-policy`
	Name string `pulumi:"name"`
	// System-generated unique identifier for the resource.
	Uid string `pulumi:"uid"`
	// Last update time of this resource.
	UpdateTime string `pulumi:"updateTime"`
	// Optional. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork string `pulumi:"vmwareEngineNetwork"`
	// The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
	VmwareEngineNetworkCanonical string `pulumi:"vmwareEngineNetworkCanonical"`
}

func LookupNetworkPolicyOutput(ctx *pulumi.Context, args LookupNetworkPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkPolicyResult, error) {
			args := v.(LookupNetworkPolicyArgs)
			r, err := LookupNetworkPolicy(ctx, &args, opts...)
			var s LookupNetworkPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkPolicyResultOutput)
}

type LookupNetworkPolicyOutputArgs struct {
	Location        pulumi.StringInput    `pulumi:"location"`
	NetworkPolicyId pulumi.StringInput    `pulumi:"networkPolicyId"`
	Project         pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupNetworkPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkPolicyArgs)(nil)).Elem()
}

type LookupNetworkPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkPolicyResult)(nil)).Elem()
}

func (o LookupNetworkPolicyResultOutput) ToLookupNetworkPolicyResultOutput() LookupNetworkPolicyResultOutput {
	return o
}

func (o LookupNetworkPolicyResultOutput) ToLookupNetworkPolicyResultOutputWithContext(ctx context.Context) LookupNetworkPolicyResultOutput {
	return o
}

func (o LookupNetworkPolicyResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNetworkPolicyResult] {
	return pulumix.Output[LookupNetworkPolicyResult]{
		OutputState: o.OutputState,
	}
}

// Creation time of this resource.
func (o LookupNetworkPolicyResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPolicyResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. User-provided description for this network policy.
func (o LookupNetworkPolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

// IP address range in CIDR notation used to create internet access and external IP access. An RFC 1918 CIDR block, with a "/26" prefix, is required. The range cannot overlap with any prefixes either in the consumer VPC network or in use by the private clouds attached to that VPC network.
func (o LookupNetworkPolicyResultOutput) EdgeServicesCidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPolicyResult) string { return v.EdgeServicesCidr }).(pulumi.StringOutput)
}

// Network service that allows External IP addresses to be assigned to VMware workloads. This service can only be enabled when `internet_access` is also enabled.
func (o LookupNetworkPolicyResultOutput) ExternalIp() NetworkServiceResponseOutput {
	return o.ApplyT(func(v LookupNetworkPolicyResult) NetworkServiceResponse { return v.ExternalIp }).(NetworkServiceResponseOutput)
}

// Network service that allows VMware workloads to access the internet.
func (o LookupNetworkPolicyResultOutput) InternetAccess() NetworkServiceResponseOutput {
	return o.ApplyT(func(v LookupNetworkPolicyResult) NetworkServiceResponse { return v.InternetAccess }).(NetworkServiceResponseOutput)
}

// The resource name of this network policy. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/networkPolicies/my-network-policy`
func (o LookupNetworkPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o LookupNetworkPolicyResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPolicyResult) string { return v.Uid }).(pulumi.StringOutput)
}

// Last update time of this resource.
func (o LookupNetworkPolicyResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPolicyResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Optional. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
func (o LookupNetworkPolicyResultOutput) VmwareEngineNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPolicyResult) string { return v.VmwareEngineNetwork }).(pulumi.StringOutput)
}

// The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
func (o LookupNetworkPolicyResultOutput) VmwareEngineNetworkCanonical() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPolicyResult) string { return v.VmwareEngineNetworkCanonical }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkPolicyResultOutput{})
}
