// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new network policy in a given VMware Engine network of a project and location (region). A new network policy cannot be created if another network policy already exists in the same scope.
// Auto-naming is currently not supported for this resource.
type NetworkPolicy struct {
	pulumi.CustomResourceState

	// Creation time of this resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. User-provided description for this network policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// IP address range in CIDR notation used to create internet access and external IP access. An RFC 1918 CIDR block, with a "/26" prefix, is required. The range cannot overlap with any prefixes either in the consumer VPC network or in use by the private clouds attached to that VPC network.
	EdgeServicesCidr pulumi.StringOutput `pulumi:"edgeServicesCidr"`
	// Network service that allows External IP addresses to be assigned to VMware workloads. This service can only be enabled when `internet_access` is also enabled.
	ExternalIp NetworkServiceResponseOutput `pulumi:"externalIp"`
	// Network service that allows VMware workloads to access the internet.
	InternetAccess NetworkServiceResponseOutput `pulumi:"internetAccess"`
	Location       pulumi.StringOutput          `pulumi:"location"`
	// The resource name of this network policy. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/networkPolicies/my-network-policy`
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. The user-provided identifier of the network policy to be created. This identifier must be unique within parent `projects/{my-project}/locations/{us-central1}/networkPolicies` and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	NetworkPolicyId pulumi.StringOutput `pulumi:"networkPolicyId"`
	Project         pulumi.StringOutput `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// System-generated unique identifier for the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Last update time of this resource.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Optional. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork pulumi.StringOutput `pulumi:"vmwareEngineNetwork"`
	// The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
	VmwareEngineNetworkCanonical pulumi.StringOutput `pulumi:"vmwareEngineNetworkCanonical"`
}

// NewNetworkPolicy registers a new resource with the given unique name, arguments, and options.
func NewNetworkPolicy(ctx *pulumi.Context,
	name string, args *NetworkPolicyArgs, opts ...pulumi.ResourceOption) (*NetworkPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EdgeServicesCidr == nil {
		return nil, errors.New("invalid value for required argument 'EdgeServicesCidr'")
	}
	if args.NetworkPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkPolicyId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"networkPolicyId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkPolicy
	err := ctx.RegisterResource("google-native:vmwareengine/v1:NetworkPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkPolicy gets an existing NetworkPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkPolicyState, opts ...pulumi.ResourceOption) (*NetworkPolicy, error) {
	var resource NetworkPolicy
	err := ctx.ReadResource("google-native:vmwareengine/v1:NetworkPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkPolicy resources.
type networkPolicyState struct {
}

type NetworkPolicyState struct {
}

func (NetworkPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPolicyState)(nil)).Elem()
}

type networkPolicyArgs struct {
	// Optional. User-provided description for this network policy.
	Description *string `pulumi:"description"`
	// IP address range in CIDR notation used to create internet access and external IP access. An RFC 1918 CIDR block, with a "/26" prefix, is required. The range cannot overlap with any prefixes either in the consumer VPC network or in use by the private clouds attached to that VPC network.
	EdgeServicesCidr string `pulumi:"edgeServicesCidr"`
	// Network service that allows External IP addresses to be assigned to VMware workloads. This service can only be enabled when `internet_access` is also enabled.
	ExternalIp *NetworkService `pulumi:"externalIp"`
	// Network service that allows VMware workloads to access the internet.
	InternetAccess *NetworkService `pulumi:"internetAccess"`
	Location       *string         `pulumi:"location"`
	// Required. The user-provided identifier of the network policy to be created. This identifier must be unique within parent `projects/{my-project}/locations/{us-central1}/networkPolicies` and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	NetworkPolicyId string  `pulumi:"networkPolicyId"`
	Project         *string `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Optional. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork *string `pulumi:"vmwareEngineNetwork"`
}

// The set of arguments for constructing a NetworkPolicy resource.
type NetworkPolicyArgs struct {
	// Optional. User-provided description for this network policy.
	Description pulumi.StringPtrInput
	// IP address range in CIDR notation used to create internet access and external IP access. An RFC 1918 CIDR block, with a "/26" prefix, is required. The range cannot overlap with any prefixes either in the consumer VPC network or in use by the private clouds attached to that VPC network.
	EdgeServicesCidr pulumi.StringInput
	// Network service that allows External IP addresses to be assigned to VMware workloads. This service can only be enabled when `internet_access` is also enabled.
	ExternalIp NetworkServicePtrInput
	// Network service that allows VMware workloads to access the internet.
	InternetAccess NetworkServicePtrInput
	Location       pulumi.StringPtrInput
	// Required. The user-provided identifier of the network policy to be created. This identifier must be unique within parent `projects/{my-project}/locations/{us-central1}/networkPolicies` and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	NetworkPolicyId pulumi.StringInput
	Project         pulumi.StringPtrInput
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Optional. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork pulumi.StringPtrInput
}

func (NetworkPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPolicyArgs)(nil)).Elem()
}

type NetworkPolicyInput interface {
	pulumi.Input

	ToNetworkPolicyOutput() NetworkPolicyOutput
	ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput
}

func (*NetworkPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (i *NetworkPolicy) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return i.ToNetworkPolicyOutputWithContext(context.Background())
}

func (i *NetworkPolicy) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyOutput)
}

type NetworkPolicyOutput struct{ *pulumi.OutputState }

func (NetworkPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return o
}

// Creation time of this resource.
func (o NetworkPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. User-provided description for this network policy.
func (o NetworkPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// IP address range in CIDR notation used to create internet access and external IP access. An RFC 1918 CIDR block, with a "/26" prefix, is required. The range cannot overlap with any prefixes either in the consumer VPC network or in use by the private clouds attached to that VPC network.
func (o NetworkPolicyOutput) EdgeServicesCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.EdgeServicesCidr }).(pulumi.StringOutput)
}

// Network service that allows External IP addresses to be assigned to VMware workloads. This service can only be enabled when `internet_access` is also enabled.
func (o NetworkPolicyOutput) ExternalIp() NetworkServiceResponseOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkServiceResponseOutput { return v.ExternalIp }).(NetworkServiceResponseOutput)
}

// Network service that allows VMware workloads to access the internet.
func (o NetworkPolicyOutput) InternetAccess() NetworkServiceResponseOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkServiceResponseOutput { return v.InternetAccess }).(NetworkServiceResponseOutput)
}

func (o NetworkPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of this network policy. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/networkPolicies/my-network-policy`
func (o NetworkPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required. The user-provided identifier of the network policy to be created. This identifier must be unique within parent `projects/{my-project}/locations/{us-central1}/networkPolicies` and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
func (o NetworkPolicyOutput) NetworkPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.NetworkPolicyId }).(pulumi.StringOutput)
}

func (o NetworkPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o NetworkPolicyOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// System-generated unique identifier for the resource.
func (o NetworkPolicyOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Last update time of this resource.
func (o NetworkPolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Optional. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
func (o NetworkPolicyOutput) VmwareEngineNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.VmwareEngineNetwork }).(pulumi.StringOutput)
}

// The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
func (o NetworkPolicyOutput) VmwareEngineNetworkCanonical() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.VmwareEngineNetworkCanonical }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyInput)(nil)).Elem(), &NetworkPolicy{})
	pulumi.RegisterOutputType(NetworkPolicyOutput{})
}
