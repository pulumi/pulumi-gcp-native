// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new HCX activation key in a given private cloud.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type HcxActivationKey struct {
	pulumi.CustomResourceState

	// HCX activation key.
	ActivationKey pulumi.StringOutput `pulumi:"activationKey"`
	// Creation time of HCX activation key.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. The user-provided identifier of the `HcxActivationKey` to be created. This identifier must be unique among `HcxActivationKey` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	HcxActivationKeyId pulumi.StringOutput `pulumi:"hcxActivationKeyId"`
	Location           pulumi.StringOutput `pulumi:"location"`
	// The resource name of this HcxActivationKey. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateClouds/my-cloud/hcxActivationKeys/my-key`
	Name           pulumi.StringOutput `pulumi:"name"`
	PrivateCloudId pulumi.StringOutput `pulumi:"privateCloudId"`
	Project        pulumi.StringOutput `pulumi:"project"`
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// State of HCX activation key.
	State pulumi.StringOutput `pulumi:"state"`
	// System-generated unique identifier for the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewHcxActivationKey registers a new resource with the given unique name, arguments, and options.
func NewHcxActivationKey(ctx *pulumi.Context,
	name string, args *HcxActivationKeyArgs, opts ...pulumi.ResourceOption) (*HcxActivationKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HcxActivationKeyId == nil {
		return nil, errors.New("invalid value for required argument 'HcxActivationKeyId'")
	}
	if args.PrivateCloudId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateCloudId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"hcxActivationKeyId",
		"location",
		"privateCloudId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HcxActivationKey
	err := ctx.RegisterResource("google-native:vmwareengine/v1:HcxActivationKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHcxActivationKey gets an existing HcxActivationKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHcxActivationKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HcxActivationKeyState, opts ...pulumi.ResourceOption) (*HcxActivationKey, error) {
	var resource HcxActivationKey
	err := ctx.ReadResource("google-native:vmwareengine/v1:HcxActivationKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HcxActivationKey resources.
type hcxActivationKeyState struct {
}

type HcxActivationKeyState struct {
}

func (HcxActivationKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*hcxActivationKeyState)(nil)).Elem()
}

type hcxActivationKeyArgs struct {
	// Required. The user-provided identifier of the `HcxActivationKey` to be created. This identifier must be unique among `HcxActivationKey` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	HcxActivationKeyId string  `pulumi:"hcxActivationKeyId"`
	Location           *string `pulumi:"location"`
	PrivateCloudId     string  `pulumi:"privateCloudId"`
	Project            *string `pulumi:"project"`
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
}

// The set of arguments for constructing a HcxActivationKey resource.
type HcxActivationKeyArgs struct {
	// Required. The user-provided identifier of the `HcxActivationKey` to be created. This identifier must be unique among `HcxActivationKey` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	HcxActivationKeyId pulumi.StringInput
	Location           pulumi.StringPtrInput
	PrivateCloudId     pulumi.StringInput
	Project            pulumi.StringPtrInput
	// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
}

func (HcxActivationKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hcxActivationKeyArgs)(nil)).Elem()
}

type HcxActivationKeyInput interface {
	pulumi.Input

	ToHcxActivationKeyOutput() HcxActivationKeyOutput
	ToHcxActivationKeyOutputWithContext(ctx context.Context) HcxActivationKeyOutput
}

func (*HcxActivationKey) ElementType() reflect.Type {
	return reflect.TypeOf((**HcxActivationKey)(nil)).Elem()
}

func (i *HcxActivationKey) ToHcxActivationKeyOutput() HcxActivationKeyOutput {
	return i.ToHcxActivationKeyOutputWithContext(context.Background())
}

func (i *HcxActivationKey) ToHcxActivationKeyOutputWithContext(ctx context.Context) HcxActivationKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HcxActivationKeyOutput)
}

type HcxActivationKeyOutput struct{ *pulumi.OutputState }

func (HcxActivationKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HcxActivationKey)(nil)).Elem()
}

func (o HcxActivationKeyOutput) ToHcxActivationKeyOutput() HcxActivationKeyOutput {
	return o
}

func (o HcxActivationKeyOutput) ToHcxActivationKeyOutputWithContext(ctx context.Context) HcxActivationKeyOutput {
	return o
}

// HCX activation key.
func (o HcxActivationKeyOutput) ActivationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *HcxActivationKey) pulumi.StringOutput { return v.ActivationKey }).(pulumi.StringOutput)
}

// Creation time of HCX activation key.
func (o HcxActivationKeyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HcxActivationKey) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. The user-provided identifier of the `HcxActivationKey` to be created. This identifier must be unique among `HcxActivationKey` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
func (o HcxActivationKeyOutput) HcxActivationKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *HcxActivationKey) pulumi.StringOutput { return v.HcxActivationKeyId }).(pulumi.StringOutput)
}

func (o HcxActivationKeyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *HcxActivationKey) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of this HcxActivationKey. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateClouds/my-cloud/hcxActivationKeys/my-key`
func (o HcxActivationKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HcxActivationKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o HcxActivationKeyOutput) PrivateCloudId() pulumi.StringOutput {
	return o.ApplyT(func(v *HcxActivationKey) pulumi.StringOutput { return v.PrivateCloudId }).(pulumi.StringOutput)
}

func (o HcxActivationKeyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *HcxActivationKey) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o HcxActivationKeyOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HcxActivationKey) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// State of HCX activation key.
func (o HcxActivationKeyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *HcxActivationKey) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o HcxActivationKeyOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *HcxActivationKey) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HcxActivationKeyInput)(nil)).Elem(), &HcxActivationKey{})
	pulumi.RegisterOutputType(HcxActivationKeyOutput{})
}
