// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Create a new logging server for a given private cloud.
// Auto-naming is currently not supported for this resource.
type LoggingServer struct {
	pulumi.CustomResourceState

	// Creation time of this resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Fully-qualified domain name (FQDN) or IP Address of the logging server.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. The user-provided identifier of the `LoggingServer` to be created. This identifier must be unique among `LoggingServer` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	LoggingServerId pulumi.StringOutput `pulumi:"loggingServerId"`
	// The resource name of this logging server. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`
	Name pulumi.StringOutput `pulumi:"name"`
	// Port number at which the logging server receives logs.
	Port           pulumi.IntOutput    `pulumi:"port"`
	PrivateCloudId pulumi.StringOutput `pulumi:"privateCloudId"`
	Project        pulumi.StringOutput `pulumi:"project"`
	// Protocol used by vCenter to send logs to a logging server.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The type of component that produces logs that will be forwarded to this logging server.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// System-generated unique identifier for the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Last update time of this resource.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewLoggingServer registers a new resource with the given unique name, arguments, and options.
func NewLoggingServer(ctx *pulumi.Context,
	name string, args *LoggingServerArgs, opts ...pulumi.ResourceOption) (*LoggingServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.LoggingServerId == nil {
		return nil, errors.New("invalid value for required argument 'LoggingServerId'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.PrivateCloudId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateCloudId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SourceType == nil {
		return nil, errors.New("invalid value for required argument 'SourceType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"loggingServerId",
		"privateCloudId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoggingServer
	err := ctx.RegisterResource("google-native:vmwareengine/v1:LoggingServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingServer gets an existing LoggingServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingServerState, opts ...pulumi.ResourceOption) (*LoggingServer, error) {
	var resource LoggingServer
	err := ctx.ReadResource("google-native:vmwareengine/v1:LoggingServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingServer resources.
type loggingServerState struct {
}

type LoggingServerState struct {
}

func (LoggingServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingServerState)(nil)).Elem()
}

type loggingServerArgs struct {
	// Fully-qualified domain name (FQDN) or IP Address of the logging server.
	Hostname string  `pulumi:"hostname"`
	Location *string `pulumi:"location"`
	// Required. The user-provided identifier of the `LoggingServer` to be created. This identifier must be unique among `LoggingServer` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	LoggingServerId string `pulumi:"loggingServerId"`
	// Port number at which the logging server receives logs.
	Port           int     `pulumi:"port"`
	PrivateCloudId string  `pulumi:"privateCloudId"`
	Project        *string `pulumi:"project"`
	// Protocol used by vCenter to send logs to a logging server.
	Protocol LoggingServerProtocol `pulumi:"protocol"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// The type of component that produces logs that will be forwarded to this logging server.
	SourceType LoggingServerSourceType `pulumi:"sourceType"`
}

// The set of arguments for constructing a LoggingServer resource.
type LoggingServerArgs struct {
	// Fully-qualified domain name (FQDN) or IP Address of the logging server.
	Hostname pulumi.StringInput
	Location pulumi.StringPtrInput
	// Required. The user-provided identifier of the `LoggingServer` to be created. This identifier must be unique among `LoggingServer` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	LoggingServerId pulumi.StringInput
	// Port number at which the logging server receives logs.
	Port           pulumi.IntInput
	PrivateCloudId pulumi.StringInput
	Project        pulumi.StringPtrInput
	// Protocol used by vCenter to send logs to a logging server.
	Protocol LoggingServerProtocolInput
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// The type of component that produces logs that will be forwarded to this logging server.
	SourceType LoggingServerSourceTypeInput
}

func (LoggingServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingServerArgs)(nil)).Elem()
}

type LoggingServerInput interface {
	pulumi.Input

	ToLoggingServerOutput() LoggingServerOutput
	ToLoggingServerOutputWithContext(ctx context.Context) LoggingServerOutput
}

func (*LoggingServer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingServer)(nil)).Elem()
}

func (i *LoggingServer) ToLoggingServerOutput() LoggingServerOutput {
	return i.ToLoggingServerOutputWithContext(context.Background())
}

func (i *LoggingServer) ToLoggingServerOutputWithContext(ctx context.Context) LoggingServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingServerOutput)
}

func (i *LoggingServer) ToOutput(ctx context.Context) pulumix.Output[*LoggingServer] {
	return pulumix.Output[*LoggingServer]{
		OutputState: i.ToLoggingServerOutputWithContext(ctx).OutputState,
	}
}

type LoggingServerOutput struct{ *pulumi.OutputState }

func (LoggingServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingServer)(nil)).Elem()
}

func (o LoggingServerOutput) ToLoggingServerOutput() LoggingServerOutput {
	return o
}

func (o LoggingServerOutput) ToLoggingServerOutputWithContext(ctx context.Context) LoggingServerOutput {
	return o
}

func (o LoggingServerOutput) ToOutput(ctx context.Context) pulumix.Output[*LoggingServer] {
	return pulumix.Output[*LoggingServer]{
		OutputState: o.OutputState,
	}
}

// Creation time of this resource.
func (o LoggingServerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Fully-qualified domain name (FQDN) or IP Address of the logging server.
func (o LoggingServerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

func (o LoggingServerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. The user-provided identifier of the `LoggingServer` to be created. This identifier must be unique among `LoggingServer` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
func (o LoggingServerOutput) LoggingServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.LoggingServerId }).(pulumi.StringOutput)
}

// The resource name of this logging server. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`
func (o LoggingServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Port number at which the logging server receives logs.
func (o LoggingServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o LoggingServerOutput) PrivateCloudId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.PrivateCloudId }).(pulumi.StringOutput)
}

func (o LoggingServerOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Protocol used by vCenter to send logs to a logging server.
func (o LoggingServerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o LoggingServerOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The type of component that produces logs that will be forwarded to this logging server.
func (o LoggingServerOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o LoggingServerOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Last update time of this resource.
func (o LoggingServerOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingServer) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingServerInput)(nil)).Elem(), &LoggingServer{})
	pulumi.RegisterOutputType(LoggingServerOutput{})
}
