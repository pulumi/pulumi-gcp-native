// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves a `NetworkPeering` resource by its resource name. The resource contains details of the network peering, such as peered networks, import and export custom route configurations, and peering state.
func LookupNetworkPeering(ctx *pulumi.Context, args *LookupNetworkPeeringArgs, opts ...pulumi.InvokeOption) (*LookupNetworkPeeringResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkPeeringResult
	err := ctx.Invoke("google-native:vmwareengine/v1:getNetworkPeering", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNetworkPeeringArgs struct {
	NetworkPeeringId string  `pulumi:"networkPeeringId"`
	Project          *string `pulumi:"project"`
}

type LookupNetworkPeeringResult struct {
	// Creation time of this resource.
	CreateTime string `pulumi:"createTime"`
	// Optional. User-provided description for this network peering.
	Description string `pulumi:"description"`
	// Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.
	ExchangeSubnetRoutes bool `pulumi:"exchangeSubnetRoutes"`
	// Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
	ExportCustomRoutes bool `pulumi:"exportCustomRoutes"`
	// Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
	ExportCustomRoutesWithPublicIp bool `pulumi:"exportCustomRoutesWithPublicIp"`
	// Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
	ImportCustomRoutes bool `pulumi:"importCustomRoutes"`
	// Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
	ImportCustomRoutesWithPublicIp bool `pulumi:"importCustomRoutesWithPublicIp"`
	// The resource name of the network peering. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/networkPeerings/my-peering`
	Name string `pulumi:"name"`
	// Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.
	PeerMtu int `pulumi:"peerMtu"`
	// The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.
	PeerNetwork string `pulumi:"peerNetwork"`
	// The type of the network to peer with the VMware Engine network.
	PeerNetworkType string `pulumi:"peerNetworkType"`
	// State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer network. New values may be added to this enum when appropriate.
	State string `pulumi:"state"`
	// Output Only. Details about the current state of the network peering.
	StateDetails string `pulumi:"stateDetails"`
	// System-generated unique identifier for the resource.
	Uid string `pulumi:"uid"`
	// Last update time of this resource.
	UpdateTime string `pulumi:"updateTime"`
	// The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork string `pulumi:"vmwareEngineNetwork"`
}

func LookupNetworkPeeringOutput(ctx *pulumi.Context, args LookupNetworkPeeringOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkPeeringResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkPeeringResult, error) {
			args := v.(LookupNetworkPeeringArgs)
			r, err := LookupNetworkPeering(ctx, &args, opts...)
			var s LookupNetworkPeeringResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkPeeringResultOutput)
}

type LookupNetworkPeeringOutputArgs struct {
	NetworkPeeringId pulumi.StringInput    `pulumi:"networkPeeringId"`
	Project          pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupNetworkPeeringOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkPeeringArgs)(nil)).Elem()
}

type LookupNetworkPeeringResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkPeeringResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkPeeringResult)(nil)).Elem()
}

func (o LookupNetworkPeeringResultOutput) ToLookupNetworkPeeringResultOutput() LookupNetworkPeeringResultOutput {
	return o
}

func (o LookupNetworkPeeringResultOutput) ToLookupNetworkPeeringResultOutputWithContext(ctx context.Context) LookupNetworkPeeringResultOutput {
	return o
}

func (o LookupNetworkPeeringResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNetworkPeeringResult] {
	return pulumix.Output[LookupNetworkPeeringResult]{
		OutputState: o.OutputState,
	}
}

// Creation time of this resource.
func (o LookupNetworkPeeringResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. User-provided description for this network peering.
func (o LookupNetworkPeeringResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.
func (o LookupNetworkPeeringResultOutput) ExchangeSubnetRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) bool { return v.ExchangeSubnetRoutes }).(pulumi.BoolOutput)
}

// Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
func (o LookupNetworkPeeringResultOutput) ExportCustomRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) bool { return v.ExportCustomRoutes }).(pulumi.BoolOutput)
}

// Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
func (o LookupNetworkPeeringResultOutput) ExportCustomRoutesWithPublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) bool { return v.ExportCustomRoutesWithPublicIp }).(pulumi.BoolOutput)
}

// Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
func (o LookupNetworkPeeringResultOutput) ImportCustomRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) bool { return v.ImportCustomRoutes }).(pulumi.BoolOutput)
}

// Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
func (o LookupNetworkPeeringResultOutput) ImportCustomRoutesWithPublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) bool { return v.ImportCustomRoutesWithPublicIp }).(pulumi.BoolOutput)
}

// The resource name of the network peering. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/networkPeerings/my-peering`
func (o LookupNetworkPeeringResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.
func (o LookupNetworkPeeringResultOutput) PeerMtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) int { return v.PeerMtu }).(pulumi.IntOutput)
}

// The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.
func (o LookupNetworkPeeringResultOutput) PeerNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) string { return v.PeerNetwork }).(pulumi.StringOutput)
}

// The type of the network to peer with the VMware Engine network.
func (o LookupNetworkPeeringResultOutput) PeerNetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) string { return v.PeerNetworkType }).(pulumi.StringOutput)
}

// State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer network. New values may be added to this enum when appropriate.
func (o LookupNetworkPeeringResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) string { return v.State }).(pulumi.StringOutput)
}

// Output Only. Details about the current state of the network peering.
func (o LookupNetworkPeeringResultOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) string { return v.StateDetails }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o LookupNetworkPeeringResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) string { return v.Uid }).(pulumi.StringOutput)
}

// Last update time of this resource.
func (o LookupNetworkPeeringResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
func (o LookupNetworkPeeringResultOutput) VmwareEngineNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringResult) string { return v.VmwareEngineNetwork }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkPeeringResultOutput{})
}
