// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new VMware Engine network that can be used by a private cloud.
// Auto-naming is currently not supported for this resource.
type VmwareEngineNetwork struct {
	pulumi.CustomResourceState

	// Creation time of this resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-provided description for this VMware Engine network.
	Description pulumi.StringOutput `pulumi:"description"`
	// Checksum that may be sent on update and delete requests to ensure that the user-provided value is up to date before the server processes a request. The server computes checksums based on the value of other fields in the request.
	Etag     pulumi.StringOutput `pulumi:"etag"`
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the VMware Engine network. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/vmwareEngineNetworks/my-network`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// State of the VMware Engine network.
	State pulumi.StringOutput `pulumi:"state"`
	// VMware Engine network type.
	Type pulumi.StringOutput `pulumi:"type"`
	// System-generated unique identifier for the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Last update time of this resource.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Required. The user-provided identifier of the new VMware Engine network. This identifier must be unique among VMware Engine network resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * For networks of type LEGACY, adheres to the format: `{region-id}-default`. Replace `{region-id}` with the region where you want to create the VMware Engine network. For example, "us-central1-default". * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	VmwareEngineNetworkId pulumi.StringOutput `pulumi:"vmwareEngineNetworkId"`
	// VMware Engine service VPC networks that provide connectivity from a private cloud to customer projects, the internet, and other Google Cloud services.
	VpcNetworks VpcNetworkResponseArrayOutput `pulumi:"vpcNetworks"`
}

// NewVmwareEngineNetwork registers a new resource with the given unique name, arguments, and options.
func NewVmwareEngineNetwork(ctx *pulumi.Context,
	name string, args *VmwareEngineNetworkArgs, opts ...pulumi.ResourceOption) (*VmwareEngineNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VmwareEngineNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'VmwareEngineNetworkId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"vmwareEngineNetworkId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmwareEngineNetwork
	err := ctx.RegisterResource("google-native:vmwareengine/v1:VmwareEngineNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmwareEngineNetwork gets an existing VmwareEngineNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmwareEngineNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmwareEngineNetworkState, opts ...pulumi.ResourceOption) (*VmwareEngineNetwork, error) {
	var resource VmwareEngineNetwork
	err := ctx.ReadResource("google-native:vmwareengine/v1:VmwareEngineNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmwareEngineNetwork resources.
type vmwareEngineNetworkState struct {
}

type VmwareEngineNetworkState struct {
}

func (VmwareEngineNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareEngineNetworkState)(nil)).Elem()
}

type vmwareEngineNetworkArgs struct {
	// User-provided description for this VMware Engine network.
	Description *string `pulumi:"description"`
	// Checksum that may be sent on update and delete requests to ensure that the user-provided value is up to date before the server processes a request. The server computes checksums based on the value of other fields in the request.
	Etag     *string `pulumi:"etag"`
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// VMware Engine network type.
	Type VmwareEngineNetworkType `pulumi:"type"`
	// Required. The user-provided identifier of the new VMware Engine network. This identifier must be unique among VMware Engine network resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * For networks of type LEGACY, adheres to the format: `{region-id}-default`. Replace `{region-id}` with the region where you want to create the VMware Engine network. For example, "us-central1-default". * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	VmwareEngineNetworkId string `pulumi:"vmwareEngineNetworkId"`
}

// The set of arguments for constructing a VmwareEngineNetwork resource.
type VmwareEngineNetworkArgs struct {
	// User-provided description for this VMware Engine network.
	Description pulumi.StringPtrInput
	// Checksum that may be sent on update and delete requests to ensure that the user-provided value is up to date before the server processes a request. The server computes checksums based on the value of other fields in the request.
	Etag     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// VMware Engine network type.
	Type VmwareEngineNetworkTypeInput
	// Required. The user-provided identifier of the new VMware Engine network. This identifier must be unique among VMware Engine network resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * For networks of type LEGACY, adheres to the format: `{region-id}-default`. Replace `{region-id}` with the region where you want to create the VMware Engine network. For example, "us-central1-default". * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	VmwareEngineNetworkId pulumi.StringInput
}

func (VmwareEngineNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareEngineNetworkArgs)(nil)).Elem()
}

type VmwareEngineNetworkInput interface {
	pulumi.Input

	ToVmwareEngineNetworkOutput() VmwareEngineNetworkOutput
	ToVmwareEngineNetworkOutputWithContext(ctx context.Context) VmwareEngineNetworkOutput
}

func (*VmwareEngineNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareEngineNetwork)(nil)).Elem()
}

func (i *VmwareEngineNetwork) ToVmwareEngineNetworkOutput() VmwareEngineNetworkOutput {
	return i.ToVmwareEngineNetworkOutputWithContext(context.Background())
}

func (i *VmwareEngineNetwork) ToVmwareEngineNetworkOutputWithContext(ctx context.Context) VmwareEngineNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareEngineNetworkOutput)
}

type VmwareEngineNetworkOutput struct{ *pulumi.OutputState }

func (VmwareEngineNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareEngineNetwork)(nil)).Elem()
}

func (o VmwareEngineNetworkOutput) ToVmwareEngineNetworkOutput() VmwareEngineNetworkOutput {
	return o
}

func (o VmwareEngineNetworkOutput) ToVmwareEngineNetworkOutputWithContext(ctx context.Context) VmwareEngineNetworkOutput {
	return o
}

// Creation time of this resource.
func (o VmwareEngineNetworkOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User-provided description for this VMware Engine network.
func (o VmwareEngineNetworkOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Checksum that may be sent on update and delete requests to ensure that the user-provided value is up to date before the server processes a request. The server computes checksums based on the value of other fields in the request.
func (o VmwareEngineNetworkOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o VmwareEngineNetworkOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the VMware Engine network. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/vmwareEngineNetworks/my-network`
func (o VmwareEngineNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VmwareEngineNetworkOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o VmwareEngineNetworkOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// State of the VMware Engine network.
func (o VmwareEngineNetworkOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// VMware Engine network type.
func (o VmwareEngineNetworkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o VmwareEngineNetworkOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Last update time of this resource.
func (o VmwareEngineNetworkOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Required. The user-provided identifier of the new VMware Engine network. This identifier must be unique among VMware Engine network resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * For networks of type LEGACY, adheres to the format: `{region-id}-default`. Replace `{region-id}` with the region where you want to create the VMware Engine network. For example, "us-central1-default". * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
func (o VmwareEngineNetworkOutput) VmwareEngineNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) pulumi.StringOutput { return v.VmwareEngineNetworkId }).(pulumi.StringOutput)
}

// VMware Engine service VPC networks that provide connectivity from a private cloud to customer projects, the internet, and other Google Cloud services.
func (o VmwareEngineNetworkOutput) VpcNetworks() VpcNetworkResponseArrayOutput {
	return o.ApplyT(func(v *VmwareEngineNetwork) VpcNetworkResponseArrayOutput { return v.VpcNetworks }).(VpcNetworkResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareEngineNetworkInput)(nil)).Elem(), &VmwareEngineNetwork{})
	pulumi.RegisterOutputType(VmwareEngineNetworkOutput{})
}
