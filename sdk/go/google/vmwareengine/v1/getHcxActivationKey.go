// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves a `HcxActivationKey` resource by its resource name.
func LookupHcxActivationKey(ctx *pulumi.Context, args *LookupHcxActivationKeyArgs, opts ...pulumi.InvokeOption) (*LookupHcxActivationKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupHcxActivationKeyResult
	err := ctx.Invoke("google-native:vmwareengine/v1:getHcxActivationKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupHcxActivationKeyArgs struct {
	HcxActivationKeyId string  `pulumi:"hcxActivationKeyId"`
	Location           string  `pulumi:"location"`
	PrivateCloudId     string  `pulumi:"privateCloudId"`
	Project            *string `pulumi:"project"`
}

type LookupHcxActivationKeyResult struct {
	// HCX activation key.
	ActivationKey string `pulumi:"activationKey"`
	// Creation time of HCX activation key.
	CreateTime string `pulumi:"createTime"`
	// The resource name of this HcxActivationKey. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateClouds/my-cloud/hcxActivationKeys/my-key`
	Name string `pulumi:"name"`
	// State of HCX activation key.
	State string `pulumi:"state"`
	// System-generated unique identifier for the resource.
	Uid string `pulumi:"uid"`
}

func LookupHcxActivationKeyOutput(ctx *pulumi.Context, args LookupHcxActivationKeyOutputArgs, opts ...pulumi.InvokeOption) LookupHcxActivationKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupHcxActivationKeyResult, error) {
			args := v.(LookupHcxActivationKeyArgs)
			r, err := LookupHcxActivationKey(ctx, &args, opts...)
			var s LookupHcxActivationKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupHcxActivationKeyResultOutput)
}

type LookupHcxActivationKeyOutputArgs struct {
	HcxActivationKeyId pulumi.StringInput    `pulumi:"hcxActivationKeyId"`
	Location           pulumi.StringInput    `pulumi:"location"`
	PrivateCloudId     pulumi.StringInput    `pulumi:"privateCloudId"`
	Project            pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupHcxActivationKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHcxActivationKeyArgs)(nil)).Elem()
}

type LookupHcxActivationKeyResultOutput struct{ *pulumi.OutputState }

func (LookupHcxActivationKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHcxActivationKeyResult)(nil)).Elem()
}

func (o LookupHcxActivationKeyResultOutput) ToLookupHcxActivationKeyResultOutput() LookupHcxActivationKeyResultOutput {
	return o
}

func (o LookupHcxActivationKeyResultOutput) ToLookupHcxActivationKeyResultOutputWithContext(ctx context.Context) LookupHcxActivationKeyResultOutput {
	return o
}

func (o LookupHcxActivationKeyResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupHcxActivationKeyResult] {
	return pulumix.Output[LookupHcxActivationKeyResult]{
		OutputState: o.OutputState,
	}
}

// HCX activation key.
func (o LookupHcxActivationKeyResultOutput) ActivationKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHcxActivationKeyResult) string { return v.ActivationKey }).(pulumi.StringOutput)
}

// Creation time of HCX activation key.
func (o LookupHcxActivationKeyResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHcxActivationKeyResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The resource name of this HcxActivationKey. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateClouds/my-cloud/hcxActivationKeys/my-key`
func (o LookupHcxActivationKeyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHcxActivationKeyResult) string { return v.Name }).(pulumi.StringOutput)
}

// State of HCX activation key.
func (o LookupHcxActivationKeyResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHcxActivationKeyResult) string { return v.State }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o LookupHcxActivationKeyResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHcxActivationKeyResult) string { return v.Uid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHcxActivationKeyResultOutput{})
}
