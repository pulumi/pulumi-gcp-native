// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Details about a HCX Cloud Manager appliance.
type HcxResponse struct {
	// Fully qualified domain name of the appliance.
	Fqdn string `pulumi:"fqdn"`
	// Internal IP address of the appliance.
	InternalIp string `pulumi:"internalIp"`
	// The state of the appliance.
	State string `pulumi:"state"`
	// Version of the appliance.
	Version string `pulumi:"version"`
}

// Details about a HCX Cloud Manager appliance.
type HcxResponseOutput struct{ *pulumi.OutputState }

func (HcxResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HcxResponse)(nil)).Elem()
}

func (o HcxResponseOutput) ToHcxResponseOutput() HcxResponseOutput {
	return o
}

func (o HcxResponseOutput) ToHcxResponseOutputWithContext(ctx context.Context) HcxResponseOutput {
	return o
}

// Fully qualified domain name of the appliance.
func (o HcxResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v HcxResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Internal IP address of the appliance.
func (o HcxResponseOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v HcxResponse) string { return v.InternalIp }).(pulumi.StringOutput)
}

// The state of the appliance.
func (o HcxResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v HcxResponse) string { return v.State }).(pulumi.StringOutput)
}

// Version of the appliance.
func (o HcxResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v HcxResponse) string { return v.Version }).(pulumi.StringOutput)
}

// An IP range provided in any one of the supported formats.
type IpRange struct {
	// The name of an `ExternalAddress` resource. The external address must have been reserved in the scope of this external access rule's parent network policy. Provide the external address name in the form of `projects/{project}/locations/{location}/privateClouds/{private_cloud}/externalAddresses/{external_address}`. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/externalAddresses/my-address`.
	ExternalAddress *string `pulumi:"externalAddress"`
	// A single IP address. For example: `10.0.0.5`.
	IpAddress *string `pulumi:"ipAddress"`
	// An IP address range in the CIDR format. For example: `10.0.0.0/24`.
	IpAddressRange *string `pulumi:"ipAddressRange"`
}

// IpRangeInput is an input type that accepts IpRangeArgs and IpRangeOutput values.
// You can construct a concrete instance of `IpRangeInput` via:
//
//	IpRangeArgs{...}
type IpRangeInput interface {
	pulumi.Input

	ToIpRangeOutput() IpRangeOutput
	ToIpRangeOutputWithContext(context.Context) IpRangeOutput
}

// An IP range provided in any one of the supported formats.
type IpRangeArgs struct {
	// The name of an `ExternalAddress` resource. The external address must have been reserved in the scope of this external access rule's parent network policy. Provide the external address name in the form of `projects/{project}/locations/{location}/privateClouds/{private_cloud}/externalAddresses/{external_address}`. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/externalAddresses/my-address`.
	ExternalAddress pulumi.StringPtrInput `pulumi:"externalAddress"`
	// A single IP address. For example: `10.0.0.5`.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// An IP address range in the CIDR format. For example: `10.0.0.0/24`.
	IpAddressRange pulumi.StringPtrInput `pulumi:"ipAddressRange"`
}

func (IpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpRange)(nil)).Elem()
}

func (i IpRangeArgs) ToIpRangeOutput() IpRangeOutput {
	return i.ToIpRangeOutputWithContext(context.Background())
}

func (i IpRangeArgs) ToIpRangeOutputWithContext(ctx context.Context) IpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpRangeOutput)
}

// IpRangeArrayInput is an input type that accepts IpRangeArray and IpRangeArrayOutput values.
// You can construct a concrete instance of `IpRangeArrayInput` via:
//
//	IpRangeArray{ IpRangeArgs{...} }
type IpRangeArrayInput interface {
	pulumi.Input

	ToIpRangeArrayOutput() IpRangeArrayOutput
	ToIpRangeArrayOutputWithContext(context.Context) IpRangeArrayOutput
}

type IpRangeArray []IpRangeInput

func (IpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpRange)(nil)).Elem()
}

func (i IpRangeArray) ToIpRangeArrayOutput() IpRangeArrayOutput {
	return i.ToIpRangeArrayOutputWithContext(context.Background())
}

func (i IpRangeArray) ToIpRangeArrayOutputWithContext(ctx context.Context) IpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpRangeArrayOutput)
}

// An IP range provided in any one of the supported formats.
type IpRangeOutput struct{ *pulumi.OutputState }

func (IpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpRange)(nil)).Elem()
}

func (o IpRangeOutput) ToIpRangeOutput() IpRangeOutput {
	return o
}

func (o IpRangeOutput) ToIpRangeOutputWithContext(ctx context.Context) IpRangeOutput {
	return o
}

// The name of an `ExternalAddress` resource. The external address must have been reserved in the scope of this external access rule's parent network policy. Provide the external address name in the form of `projects/{project}/locations/{location}/privateClouds/{private_cloud}/externalAddresses/{external_address}`. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/externalAddresses/my-address`.
func (o IpRangeOutput) ExternalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpRange) *string { return v.ExternalAddress }).(pulumi.StringPtrOutput)
}

// A single IP address. For example: `10.0.0.5`.
func (o IpRangeOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpRange) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// An IP address range in the CIDR format. For example: `10.0.0.0/24`.
func (o IpRangeOutput) IpAddressRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpRange) *string { return v.IpAddressRange }).(pulumi.StringPtrOutput)
}

type IpRangeArrayOutput struct{ *pulumi.OutputState }

func (IpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpRange)(nil)).Elem()
}

func (o IpRangeArrayOutput) ToIpRangeArrayOutput() IpRangeArrayOutput {
	return o
}

func (o IpRangeArrayOutput) ToIpRangeArrayOutputWithContext(ctx context.Context) IpRangeArrayOutput {
	return o
}

func (o IpRangeArrayOutput) Index(i pulumi.IntInput) IpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpRange {
		return vs[0].([]IpRange)[vs[1].(int)]
	}).(IpRangeOutput)
}

// An IP range provided in any one of the supported formats.
type IpRangeResponse struct {
	// The name of an `ExternalAddress` resource. The external address must have been reserved in the scope of this external access rule's parent network policy. Provide the external address name in the form of `projects/{project}/locations/{location}/privateClouds/{private_cloud}/externalAddresses/{external_address}`. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/externalAddresses/my-address`.
	ExternalAddress string `pulumi:"externalAddress"`
	// A single IP address. For example: `10.0.0.5`.
	IpAddress string `pulumi:"ipAddress"`
	// An IP address range in the CIDR format. For example: `10.0.0.0/24`.
	IpAddressRange string `pulumi:"ipAddressRange"`
}

// An IP range provided in any one of the supported formats.
type IpRangeResponseOutput struct{ *pulumi.OutputState }

func (IpRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpRangeResponse)(nil)).Elem()
}

func (o IpRangeResponseOutput) ToIpRangeResponseOutput() IpRangeResponseOutput {
	return o
}

func (o IpRangeResponseOutput) ToIpRangeResponseOutputWithContext(ctx context.Context) IpRangeResponseOutput {
	return o
}

// The name of an `ExternalAddress` resource. The external address must have been reserved in the scope of this external access rule's parent network policy. Provide the external address name in the form of `projects/{project}/locations/{location}/privateClouds/{private_cloud}/externalAddresses/{external_address}`. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/externalAddresses/my-address`.
func (o IpRangeResponseOutput) ExternalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v IpRangeResponse) string { return v.ExternalAddress }).(pulumi.StringOutput)
}

// A single IP address. For example: `10.0.0.5`.
func (o IpRangeResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v IpRangeResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// An IP address range in the CIDR format. For example: `10.0.0.0/24`.
func (o IpRangeResponseOutput) IpAddressRange() pulumi.StringOutput {
	return o.ApplyT(func(v IpRangeResponse) string { return v.IpAddressRange }).(pulumi.StringOutput)
}

type IpRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (IpRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpRangeResponse)(nil)).Elem()
}

func (o IpRangeResponseArrayOutput) ToIpRangeResponseArrayOutput() IpRangeResponseArrayOutput {
	return o
}

func (o IpRangeResponseArrayOutput) ToIpRangeResponseArrayOutputWithContext(ctx context.Context) IpRangeResponseArrayOutput {
	return o
}

func (o IpRangeResponseArrayOutput) Index(i pulumi.IntInput) IpRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpRangeResponse {
		return vs[0].([]IpRangeResponse)[vs[1].(int)]
	}).(IpRangeResponseOutput)
}

// Management cluster configuration.
type ManagementCluster struct {
	// The user-provided identifier of the new `Cluster`. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	ClusterId string `pulumi:"clusterId"`
	// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).
	NodeTypeConfigs NodeTypeConfig `pulumi:"nodeTypeConfigs"`
	// Optional. Configuration of a stretched cluster. Required for STRETCHED private clouds.
	StretchedClusterConfig *StretchedClusterConfig `pulumi:"stretchedClusterConfig"`
}

// ManagementClusterInput is an input type that accepts ManagementClusterArgs and ManagementClusterOutput values.
// You can construct a concrete instance of `ManagementClusterInput` via:
//
//	ManagementClusterArgs{...}
type ManagementClusterInput interface {
	pulumi.Input

	ToManagementClusterOutput() ManagementClusterOutput
	ToManagementClusterOutputWithContext(context.Context) ManagementClusterOutput
}

// Management cluster configuration.
type ManagementClusterArgs struct {
	// The user-provided identifier of the new `Cluster`. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).
	NodeTypeConfigs NodeTypeConfigInput `pulumi:"nodeTypeConfigs"`
	// Optional. Configuration of a stretched cluster. Required for STRETCHED private clouds.
	StretchedClusterConfig StretchedClusterConfigPtrInput `pulumi:"stretchedClusterConfig"`
}

func (ManagementClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementCluster)(nil)).Elem()
}

func (i ManagementClusterArgs) ToManagementClusterOutput() ManagementClusterOutput {
	return i.ToManagementClusterOutputWithContext(context.Background())
}

func (i ManagementClusterArgs) ToManagementClusterOutputWithContext(ctx context.Context) ManagementClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementClusterOutput)
}

// Management cluster configuration.
type ManagementClusterOutput struct{ *pulumi.OutputState }

func (ManagementClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementCluster)(nil)).Elem()
}

func (o ManagementClusterOutput) ToManagementClusterOutput() ManagementClusterOutput {
	return o
}

func (o ManagementClusterOutput) ToManagementClusterOutputWithContext(ctx context.Context) ManagementClusterOutput {
	return o
}

// The user-provided identifier of the new `Cluster`. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
func (o ManagementClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementCluster) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).
func (o ManagementClusterOutput) NodeTypeConfigs() NodeTypeConfigOutput {
	return o.ApplyT(func(v ManagementCluster) NodeTypeConfig { return v.NodeTypeConfigs }).(NodeTypeConfigOutput)
}

// Optional. Configuration of a stretched cluster. Required for STRETCHED private clouds.
func (o ManagementClusterOutput) StretchedClusterConfig() StretchedClusterConfigPtrOutput {
	return o.ApplyT(func(v ManagementCluster) *StretchedClusterConfig { return v.StretchedClusterConfig }).(StretchedClusterConfigPtrOutput)
}

// Management cluster configuration.
type ManagementClusterResponse struct {
	// The user-provided identifier of the new `Cluster`. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	ClusterId string `pulumi:"clusterId"`
	// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).
	NodeTypeConfigs NodeTypeConfigResponse `pulumi:"nodeTypeConfigs"`
	// Optional. Configuration of a stretched cluster. Required for STRETCHED private clouds.
	StretchedClusterConfig StretchedClusterConfigResponse `pulumi:"stretchedClusterConfig"`
}

// Management cluster configuration.
type ManagementClusterResponseOutput struct{ *pulumi.OutputState }

func (ManagementClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementClusterResponse)(nil)).Elem()
}

func (o ManagementClusterResponseOutput) ToManagementClusterResponseOutput() ManagementClusterResponseOutput {
	return o
}

func (o ManagementClusterResponseOutput) ToManagementClusterResponseOutputWithContext(ctx context.Context) ManagementClusterResponseOutput {
	return o
}

// The user-provided identifier of the new `Cluster`. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
func (o ManagementClusterResponseOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagementClusterResponse) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).
func (o ManagementClusterResponseOutput) NodeTypeConfigs() NodeTypeConfigResponseOutput {
	return o.ApplyT(func(v ManagementClusterResponse) NodeTypeConfigResponse { return v.NodeTypeConfigs }).(NodeTypeConfigResponseOutput)
}

// Optional. Configuration of a stretched cluster. Required for STRETCHED private clouds.
func (o ManagementClusterResponseOutput) StretchedClusterConfig() StretchedClusterConfigResponseOutput {
	return o.ApplyT(func(v ManagementClusterResponse) StretchedClusterConfigResponse { return v.StretchedClusterConfig }).(StretchedClusterConfigResponseOutput)
}

// Network configuration in the consumer project with which the peering has to be done.
type NetworkConfig struct {
	// Management CIDR used by VMware management appliances.
	ManagementCidr string `pulumi:"managementCidr"`
	// Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork *string `pulumi:"vmwareEngineNetwork"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//	NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// Network configuration in the consumer project with which the peering has to be done.
type NetworkConfigArgs struct {
	// Management CIDR used by VMware management appliances.
	ManagementCidr pulumi.StringInput `pulumi:"managementCidr"`
	// Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork pulumi.StringPtrInput `pulumi:"vmwareEngineNetwork"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

// Network configuration in the consumer project with which the peering has to be done.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

// Management CIDR used by VMware management appliances.
func (o NetworkConfigOutput) ManagementCidr() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfig) string { return v.ManagementCidr }).(pulumi.StringOutput)
}

// Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
func (o NetworkConfigOutput) VmwareEngineNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.VmwareEngineNetwork }).(pulumi.StringPtrOutput)
}

// Network configuration in the consumer project with which the peering has to be done.
type NetworkConfigResponse struct {
	// DNS Server IP of the Private Cloud. All DNS queries can be forwarded to this address for name resolution of Private Cloud's management entities like vCenter, NSX-T Manager and ESXi hosts.
	DnsServerIp string `pulumi:"dnsServerIp"`
	// Management CIDR used by VMware management appliances.
	ManagementCidr string `pulumi:"managementCidr"`
	// The IP address layout version of the management IP address range. Possible versions include: * `managementIpAddressLayoutVersion=1`: Indicates the legacy IP address layout used by some existing private clouds. This is no longer supported for new private clouds as it does not support all features. * `managementIpAddressLayoutVersion=2`: Indicates the latest IP address layout used by all newly created private clouds. This version supports all current features.
	ManagementIpAddressLayoutVersion int `pulumi:"managementIpAddressLayoutVersion"`
	// Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork string `pulumi:"vmwareEngineNetwork"`
	// The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
	VmwareEngineNetworkCanonical string `pulumi:"vmwareEngineNetworkCanonical"`
}

// Network configuration in the consumer project with which the peering has to be done.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

// DNS Server IP of the Private Cloud. All DNS queries can be forwarded to this address for name resolution of Private Cloud's management entities like vCenter, NSX-T Manager and ESXi hosts.
func (o NetworkConfigResponseOutput) DnsServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.DnsServerIp }).(pulumi.StringOutput)
}

// Management CIDR used by VMware management appliances.
func (o NetworkConfigResponseOutput) ManagementCidr() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.ManagementCidr }).(pulumi.StringOutput)
}

// The IP address layout version of the management IP address range. Possible versions include: * `managementIpAddressLayoutVersion=1`: Indicates the legacy IP address layout used by some existing private clouds. This is no longer supported for new private clouds as it does not support all features. * `managementIpAddressLayoutVersion=2`: Indicates the latest IP address layout used by all newly created private clouds. This version supports all current features.
func (o NetworkConfigResponseOutput) ManagementIpAddressLayoutVersion() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkConfigResponse) int { return v.ManagementIpAddressLayoutVersion }).(pulumi.IntOutput)
}

// Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
func (o NetworkConfigResponseOutput) VmwareEngineNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.VmwareEngineNetwork }).(pulumi.StringOutput)
}

// The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
func (o NetworkConfigResponseOutput) VmwareEngineNetworkCanonical() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.VmwareEngineNetworkCanonical }).(pulumi.StringOutput)
}

// Represents a network service that is managed by a `NetworkPolicy` resource. A network service provides a way to control an aspect of external access to VMware workloads. For example, whether the VMware workloads in the private clouds governed by a network policy can access or be accessed from the internet.
type NetworkService struct {
	// True if the service is enabled; false otherwise.
	Enabled *bool `pulumi:"enabled"`
}

// NetworkServiceInput is an input type that accepts NetworkServiceArgs and NetworkServiceOutput values.
// You can construct a concrete instance of `NetworkServiceInput` via:
//
//	NetworkServiceArgs{...}
type NetworkServiceInput interface {
	pulumi.Input

	ToNetworkServiceOutput() NetworkServiceOutput
	ToNetworkServiceOutputWithContext(context.Context) NetworkServiceOutput
}

// Represents a network service that is managed by a `NetworkPolicy` resource. A network service provides a way to control an aspect of external access to VMware workloads. For example, whether the VMware workloads in the private clouds governed by a network policy can access or be accessed from the internet.
type NetworkServiceArgs struct {
	// True if the service is enabled; false otherwise.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (NetworkServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkService)(nil)).Elem()
}

func (i NetworkServiceArgs) ToNetworkServiceOutput() NetworkServiceOutput {
	return i.ToNetworkServiceOutputWithContext(context.Background())
}

func (i NetworkServiceArgs) ToNetworkServiceOutputWithContext(ctx context.Context) NetworkServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkServiceOutput)
}

func (i NetworkServiceArgs) ToNetworkServicePtrOutput() NetworkServicePtrOutput {
	return i.ToNetworkServicePtrOutputWithContext(context.Background())
}

func (i NetworkServiceArgs) ToNetworkServicePtrOutputWithContext(ctx context.Context) NetworkServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkServiceOutput).ToNetworkServicePtrOutputWithContext(ctx)
}

// NetworkServicePtrInput is an input type that accepts NetworkServiceArgs, NetworkServicePtr and NetworkServicePtrOutput values.
// You can construct a concrete instance of `NetworkServicePtrInput` via:
//
//	        NetworkServiceArgs{...}
//
//	or:
//
//	        nil
type NetworkServicePtrInput interface {
	pulumi.Input

	ToNetworkServicePtrOutput() NetworkServicePtrOutput
	ToNetworkServicePtrOutputWithContext(context.Context) NetworkServicePtrOutput
}

type networkServicePtrType NetworkServiceArgs

func NetworkServicePtr(v *NetworkServiceArgs) NetworkServicePtrInput {
	return (*networkServicePtrType)(v)
}

func (*networkServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkService)(nil)).Elem()
}

func (i *networkServicePtrType) ToNetworkServicePtrOutput() NetworkServicePtrOutput {
	return i.ToNetworkServicePtrOutputWithContext(context.Background())
}

func (i *networkServicePtrType) ToNetworkServicePtrOutputWithContext(ctx context.Context) NetworkServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkServicePtrOutput)
}

// Represents a network service that is managed by a `NetworkPolicy` resource. A network service provides a way to control an aspect of external access to VMware workloads. For example, whether the VMware workloads in the private clouds governed by a network policy can access or be accessed from the internet.
type NetworkServiceOutput struct{ *pulumi.OutputState }

func (NetworkServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkService)(nil)).Elem()
}

func (o NetworkServiceOutput) ToNetworkServiceOutput() NetworkServiceOutput {
	return o
}

func (o NetworkServiceOutput) ToNetworkServiceOutputWithContext(ctx context.Context) NetworkServiceOutput {
	return o
}

func (o NetworkServiceOutput) ToNetworkServicePtrOutput() NetworkServicePtrOutput {
	return o.ToNetworkServicePtrOutputWithContext(context.Background())
}

func (o NetworkServiceOutput) ToNetworkServicePtrOutputWithContext(ctx context.Context) NetworkServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkService) *NetworkService {
		return &v
	}).(NetworkServicePtrOutput)
}

// True if the service is enabled; false otherwise.
func (o NetworkServiceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkService) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type NetworkServicePtrOutput struct{ *pulumi.OutputState }

func (NetworkServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkService)(nil)).Elem()
}

func (o NetworkServicePtrOutput) ToNetworkServicePtrOutput() NetworkServicePtrOutput {
	return o
}

func (o NetworkServicePtrOutput) ToNetworkServicePtrOutputWithContext(ctx context.Context) NetworkServicePtrOutput {
	return o
}

func (o NetworkServicePtrOutput) Elem() NetworkServiceOutput {
	return o.ApplyT(func(v *NetworkService) NetworkService {
		if v != nil {
			return *v
		}
		var ret NetworkService
		return ret
	}).(NetworkServiceOutput)
}

// True if the service is enabled; false otherwise.
func (o NetworkServicePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkService) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Represents a network service that is managed by a `NetworkPolicy` resource. A network service provides a way to control an aspect of external access to VMware workloads. For example, whether the VMware workloads in the private clouds governed by a network policy can access or be accessed from the internet.
type NetworkServiceResponse struct {
	// True if the service is enabled; false otherwise.
	Enabled bool `pulumi:"enabled"`
	// State of the service. New values may be added to this enum when appropriate.
	State string `pulumi:"state"`
}

// Represents a network service that is managed by a `NetworkPolicy` resource. A network service provides a way to control an aspect of external access to VMware workloads. For example, whether the VMware workloads in the private clouds governed by a network policy can access or be accessed from the internet.
type NetworkServiceResponseOutput struct{ *pulumi.OutputState }

func (NetworkServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkServiceResponse)(nil)).Elem()
}

func (o NetworkServiceResponseOutput) ToNetworkServiceResponseOutput() NetworkServiceResponseOutput {
	return o
}

func (o NetworkServiceResponseOutput) ToNetworkServiceResponseOutputWithContext(ctx context.Context) NetworkServiceResponseOutput {
	return o
}

// True if the service is enabled; false otherwise.
func (o NetworkServiceResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkServiceResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// State of the service. New values may be added to this enum when appropriate.
func (o NetworkServiceResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkServiceResponse) string { return v.State }).(pulumi.StringOutput)
}

// Information about the type and number of nodes associated with the cluster.
type NodeTypeConfig struct {
	// Optional. Customized number of cores available to each node of the type. This number must always be one of `nodeType.availableCustomCoreCounts`. If zero is provided max value from `nodeType.availableCustomCoreCounts` will be used.
	CustomCoreCount *int `pulumi:"customCoreCount"`
	// The number of nodes of this type in the cluster
	NodeCount int `pulumi:"nodeCount"`
}

// NodeTypeConfigInput is an input type that accepts NodeTypeConfigArgs and NodeTypeConfigOutput values.
// You can construct a concrete instance of `NodeTypeConfigInput` via:
//
//	NodeTypeConfigArgs{...}
type NodeTypeConfigInput interface {
	pulumi.Input

	ToNodeTypeConfigOutput() NodeTypeConfigOutput
	ToNodeTypeConfigOutputWithContext(context.Context) NodeTypeConfigOutput
}

// Information about the type and number of nodes associated with the cluster.
type NodeTypeConfigArgs struct {
	// Optional. Customized number of cores available to each node of the type. This number must always be one of `nodeType.availableCustomCoreCounts`. If zero is provided max value from `nodeType.availableCustomCoreCounts` will be used.
	CustomCoreCount pulumi.IntPtrInput `pulumi:"customCoreCount"`
	// The number of nodes of this type in the cluster
	NodeCount pulumi.IntInput `pulumi:"nodeCount"`
}

func (NodeTypeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTypeConfig)(nil)).Elem()
}

func (i NodeTypeConfigArgs) ToNodeTypeConfigOutput() NodeTypeConfigOutput {
	return i.ToNodeTypeConfigOutputWithContext(context.Background())
}

func (i NodeTypeConfigArgs) ToNodeTypeConfigOutputWithContext(ctx context.Context) NodeTypeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeConfigOutput)
}

// Information about the type and number of nodes associated with the cluster.
type NodeTypeConfigOutput struct{ *pulumi.OutputState }

func (NodeTypeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTypeConfig)(nil)).Elem()
}

func (o NodeTypeConfigOutput) ToNodeTypeConfigOutput() NodeTypeConfigOutput {
	return o
}

func (o NodeTypeConfigOutput) ToNodeTypeConfigOutputWithContext(ctx context.Context) NodeTypeConfigOutput {
	return o
}

// Optional. Customized number of cores available to each node of the type. This number must always be one of `nodeType.availableCustomCoreCounts`. If zero is provided max value from `nodeType.availableCustomCoreCounts` will be used.
func (o NodeTypeConfigOutput) CustomCoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeTypeConfig) *int { return v.CustomCoreCount }).(pulumi.IntPtrOutput)
}

// The number of nodes of this type in the cluster
func (o NodeTypeConfigOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeConfig) int { return v.NodeCount }).(pulumi.IntOutput)
}

// Information about the type and number of nodes associated with the cluster.
type NodeTypeConfigResponse struct {
	// Optional. Customized number of cores available to each node of the type. This number must always be one of `nodeType.availableCustomCoreCounts`. If zero is provided max value from `nodeType.availableCustomCoreCounts` will be used.
	CustomCoreCount int `pulumi:"customCoreCount"`
	// The number of nodes of this type in the cluster
	NodeCount int `pulumi:"nodeCount"`
}

// Information about the type and number of nodes associated with the cluster.
type NodeTypeConfigResponseOutput struct{ *pulumi.OutputState }

func (NodeTypeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTypeConfigResponse)(nil)).Elem()
}

func (o NodeTypeConfigResponseOutput) ToNodeTypeConfigResponseOutput() NodeTypeConfigResponseOutput {
	return o
}

func (o NodeTypeConfigResponseOutput) ToNodeTypeConfigResponseOutputWithContext(ctx context.Context) NodeTypeConfigResponseOutput {
	return o
}

// Optional. Customized number of cores available to each node of the type. This number must always be one of `nodeType.availableCustomCoreCounts`. If zero is provided max value from `nodeType.availableCustomCoreCounts` will be used.
func (o NodeTypeConfigResponseOutput) CustomCoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeConfigResponse) int { return v.CustomCoreCount }).(pulumi.IntOutput)
}

// The number of nodes of this type in the cluster
func (o NodeTypeConfigResponseOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeTypeConfigResponse) int { return v.NodeCount }).(pulumi.IntOutput)
}

// Details about a NSX Manager appliance.
type NsxResponse struct {
	// Fully qualified domain name of the appliance.
	Fqdn string `pulumi:"fqdn"`
	// Internal IP address of the appliance.
	InternalIp string `pulumi:"internalIp"`
	// The state of the appliance.
	State string `pulumi:"state"`
	// Version of the appliance.
	Version string `pulumi:"version"`
}

// Details about a NSX Manager appliance.
type NsxResponseOutput struct{ *pulumi.OutputState }

func (NsxResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsxResponse)(nil)).Elem()
}

func (o NsxResponseOutput) ToNsxResponseOutput() NsxResponseOutput {
	return o
}

func (o NsxResponseOutput) ToNsxResponseOutputWithContext(ctx context.Context) NsxResponseOutput {
	return o
}

// Fully qualified domain name of the appliance.
func (o NsxResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v NsxResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Internal IP address of the appliance.
func (o NsxResponseOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v NsxResponse) string { return v.InternalIp }).(pulumi.StringOutput)
}

// The state of the appliance.
func (o NsxResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v NsxResponse) string { return v.State }).(pulumi.StringOutput)
}

// Version of the appliance.
func (o NsxResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v NsxResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Configuration of a stretched cluster.
type StretchedClusterConfig struct {
	// Zone that will remain operational when connection between the two zones is lost. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-a` where `{project}` can either be a project number or a project ID.
	PreferredLocation string `pulumi:"preferredLocation"`
	// Additional zone for a higher level of availability and load balancing. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-b` where `{project}` can either be a project number or a project ID.
	SecondaryLocation string `pulumi:"secondaryLocation"`
}

// StretchedClusterConfigInput is an input type that accepts StretchedClusterConfigArgs and StretchedClusterConfigOutput values.
// You can construct a concrete instance of `StretchedClusterConfigInput` via:
//
//	StretchedClusterConfigArgs{...}
type StretchedClusterConfigInput interface {
	pulumi.Input

	ToStretchedClusterConfigOutput() StretchedClusterConfigOutput
	ToStretchedClusterConfigOutputWithContext(context.Context) StretchedClusterConfigOutput
}

// Configuration of a stretched cluster.
type StretchedClusterConfigArgs struct {
	// Zone that will remain operational when connection between the two zones is lost. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-a` where `{project}` can either be a project number or a project ID.
	PreferredLocation pulumi.StringInput `pulumi:"preferredLocation"`
	// Additional zone for a higher level of availability and load balancing. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-b` where `{project}` can either be a project number or a project ID.
	SecondaryLocation pulumi.StringInput `pulumi:"secondaryLocation"`
}

func (StretchedClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StretchedClusterConfig)(nil)).Elem()
}

func (i StretchedClusterConfigArgs) ToStretchedClusterConfigOutput() StretchedClusterConfigOutput {
	return i.ToStretchedClusterConfigOutputWithContext(context.Background())
}

func (i StretchedClusterConfigArgs) ToStretchedClusterConfigOutputWithContext(ctx context.Context) StretchedClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StretchedClusterConfigOutput)
}

func (i StretchedClusterConfigArgs) ToStretchedClusterConfigPtrOutput() StretchedClusterConfigPtrOutput {
	return i.ToStretchedClusterConfigPtrOutputWithContext(context.Background())
}

func (i StretchedClusterConfigArgs) ToStretchedClusterConfigPtrOutputWithContext(ctx context.Context) StretchedClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StretchedClusterConfigOutput).ToStretchedClusterConfigPtrOutputWithContext(ctx)
}

// StretchedClusterConfigPtrInput is an input type that accepts StretchedClusterConfigArgs, StretchedClusterConfigPtr and StretchedClusterConfigPtrOutput values.
// You can construct a concrete instance of `StretchedClusterConfigPtrInput` via:
//
//	        StretchedClusterConfigArgs{...}
//
//	or:
//
//	        nil
type StretchedClusterConfigPtrInput interface {
	pulumi.Input

	ToStretchedClusterConfigPtrOutput() StretchedClusterConfigPtrOutput
	ToStretchedClusterConfigPtrOutputWithContext(context.Context) StretchedClusterConfigPtrOutput
}

type stretchedClusterConfigPtrType StretchedClusterConfigArgs

func StretchedClusterConfigPtr(v *StretchedClusterConfigArgs) StretchedClusterConfigPtrInput {
	return (*stretchedClusterConfigPtrType)(v)
}

func (*stretchedClusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StretchedClusterConfig)(nil)).Elem()
}

func (i *stretchedClusterConfigPtrType) ToStretchedClusterConfigPtrOutput() StretchedClusterConfigPtrOutput {
	return i.ToStretchedClusterConfigPtrOutputWithContext(context.Background())
}

func (i *stretchedClusterConfigPtrType) ToStretchedClusterConfigPtrOutputWithContext(ctx context.Context) StretchedClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StretchedClusterConfigPtrOutput)
}

// Configuration of a stretched cluster.
type StretchedClusterConfigOutput struct{ *pulumi.OutputState }

func (StretchedClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StretchedClusterConfig)(nil)).Elem()
}

func (o StretchedClusterConfigOutput) ToStretchedClusterConfigOutput() StretchedClusterConfigOutput {
	return o
}

func (o StretchedClusterConfigOutput) ToStretchedClusterConfigOutputWithContext(ctx context.Context) StretchedClusterConfigOutput {
	return o
}

func (o StretchedClusterConfigOutput) ToStretchedClusterConfigPtrOutput() StretchedClusterConfigPtrOutput {
	return o.ToStretchedClusterConfigPtrOutputWithContext(context.Background())
}

func (o StretchedClusterConfigOutput) ToStretchedClusterConfigPtrOutputWithContext(ctx context.Context) StretchedClusterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StretchedClusterConfig) *StretchedClusterConfig {
		return &v
	}).(StretchedClusterConfigPtrOutput)
}

// Zone that will remain operational when connection between the two zones is lost. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-a` where `{project}` can either be a project number or a project ID.
func (o StretchedClusterConfigOutput) PreferredLocation() pulumi.StringOutput {
	return o.ApplyT(func(v StretchedClusterConfig) string { return v.PreferredLocation }).(pulumi.StringOutput)
}

// Additional zone for a higher level of availability and load balancing. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-b` where `{project}` can either be a project number or a project ID.
func (o StretchedClusterConfigOutput) SecondaryLocation() pulumi.StringOutput {
	return o.ApplyT(func(v StretchedClusterConfig) string { return v.SecondaryLocation }).(pulumi.StringOutput)
}

type StretchedClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (StretchedClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StretchedClusterConfig)(nil)).Elem()
}

func (o StretchedClusterConfigPtrOutput) ToStretchedClusterConfigPtrOutput() StretchedClusterConfigPtrOutput {
	return o
}

func (o StretchedClusterConfigPtrOutput) ToStretchedClusterConfigPtrOutputWithContext(ctx context.Context) StretchedClusterConfigPtrOutput {
	return o
}

func (o StretchedClusterConfigPtrOutput) Elem() StretchedClusterConfigOutput {
	return o.ApplyT(func(v *StretchedClusterConfig) StretchedClusterConfig {
		if v != nil {
			return *v
		}
		var ret StretchedClusterConfig
		return ret
	}).(StretchedClusterConfigOutput)
}

// Zone that will remain operational when connection between the two zones is lost. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-a` where `{project}` can either be a project number or a project ID.
func (o StretchedClusterConfigPtrOutput) PreferredLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StretchedClusterConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PreferredLocation
	}).(pulumi.StringPtrOutput)
}

// Additional zone for a higher level of availability and load balancing. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-b` where `{project}` can either be a project number or a project ID.
func (o StretchedClusterConfigPtrOutput) SecondaryLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StretchedClusterConfig) *string {
		if v == nil {
			return nil
		}
		return &v.SecondaryLocation
	}).(pulumi.StringPtrOutput)
}

// Configuration of a stretched cluster.
type StretchedClusterConfigResponse struct {
	// Zone that will remain operational when connection between the two zones is lost. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-a` where `{project}` can either be a project number or a project ID.
	PreferredLocation string `pulumi:"preferredLocation"`
	// Additional zone for a higher level of availability and load balancing. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-b` where `{project}` can either be a project number or a project ID.
	SecondaryLocation string `pulumi:"secondaryLocation"`
}

// Configuration of a stretched cluster.
type StretchedClusterConfigResponseOutput struct{ *pulumi.OutputState }

func (StretchedClusterConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StretchedClusterConfigResponse)(nil)).Elem()
}

func (o StretchedClusterConfigResponseOutput) ToStretchedClusterConfigResponseOutput() StretchedClusterConfigResponseOutput {
	return o
}

func (o StretchedClusterConfigResponseOutput) ToStretchedClusterConfigResponseOutputWithContext(ctx context.Context) StretchedClusterConfigResponseOutput {
	return o
}

// Zone that will remain operational when connection between the two zones is lost. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-a` where `{project}` can either be a project number or a project ID.
func (o StretchedClusterConfigResponseOutput) PreferredLocation() pulumi.StringOutput {
	return o.ApplyT(func(v StretchedClusterConfigResponse) string { return v.PreferredLocation }).(pulumi.StringOutput)
}

// Additional zone for a higher level of availability and load balancing. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-b` where `{project}` can either be a project number or a project ID.
func (o StretchedClusterConfigResponseOutput) SecondaryLocation() pulumi.StringOutput {
	return o.ApplyT(func(v StretchedClusterConfigResponse) string { return v.SecondaryLocation }).(pulumi.StringOutput)
}

// Details about a vCenter Server management appliance.
type VcenterResponse struct {
	// Fully qualified domain name of the appliance.
	Fqdn string `pulumi:"fqdn"`
	// Internal IP address of the appliance.
	InternalIp string `pulumi:"internalIp"`
	// The state of the appliance.
	State string `pulumi:"state"`
	// Version of the appliance.
	Version string `pulumi:"version"`
}

// Details about a vCenter Server management appliance.
type VcenterResponseOutput struct{ *pulumi.OutputState }

func (VcenterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VcenterResponse)(nil)).Elem()
}

func (o VcenterResponseOutput) ToVcenterResponseOutput() VcenterResponseOutput {
	return o
}

func (o VcenterResponseOutput) ToVcenterResponseOutputWithContext(ctx context.Context) VcenterResponseOutput {
	return o
}

// Fully qualified domain name of the appliance.
func (o VcenterResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v VcenterResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Internal IP address of the appliance.
func (o VcenterResponseOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v VcenterResponse) string { return v.InternalIp }).(pulumi.StringOutput)
}

// The state of the appliance.
func (o VcenterResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v VcenterResponse) string { return v.State }).(pulumi.StringOutput)
}

// Version of the appliance.
func (o VcenterResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v VcenterResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Represents a VMware Engine VPC network that is managed by a VMware Engine network resource.
type VpcNetworkResponse struct {
	// The relative resource name of the service VPC network this VMware Engine network is attached to. For example: `projects/123123/global/networks/my-network`
	Network string `pulumi:"network"`
	// Type of VPC network (INTRANET, INTERNET, or GOOGLE_CLOUD)
	Type string `pulumi:"type"`
}

// Represents a VMware Engine VPC network that is managed by a VMware Engine network resource.
type VpcNetworkResponseOutput struct{ *pulumi.OutputState }

func (VpcNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcNetworkResponse)(nil)).Elem()
}

func (o VpcNetworkResponseOutput) ToVpcNetworkResponseOutput() VpcNetworkResponseOutput {
	return o
}

func (o VpcNetworkResponseOutput) ToVpcNetworkResponseOutputWithContext(ctx context.Context) VpcNetworkResponseOutput {
	return o
}

// The relative resource name of the service VPC network this VMware Engine network is attached to. For example: `projects/123123/global/networks/my-network`
func (o VpcNetworkResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v VpcNetworkResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Type of VPC network (INTRANET, INTERNET, or GOOGLE_CLOUD)
func (o VpcNetworkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VpcNetworkResponse) string { return v.Type }).(pulumi.StringOutput)
}

type VpcNetworkResponseArrayOutput struct{ *pulumi.OutputState }

func (VpcNetworkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcNetworkResponse)(nil)).Elem()
}

func (o VpcNetworkResponseArrayOutput) ToVpcNetworkResponseArrayOutput() VpcNetworkResponseArrayOutput {
	return o
}

func (o VpcNetworkResponseArrayOutput) ToVpcNetworkResponseArrayOutputWithContext(ctx context.Context) VpcNetworkResponseArrayOutput {
	return o
}

func (o VpcNetworkResponseArrayOutput) Index(i pulumi.IntInput) VpcNetworkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcNetworkResponse {
		return vs[0].([]VpcNetworkResponse)[vs[1].(int)]
	}).(VpcNetworkResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpRangeInput)(nil)).Elem(), IpRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpRangeArrayInput)(nil)).Elem(), IpRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementClusterInput)(nil)).Elem(), ManagementClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkServiceInput)(nil)).Elem(), NetworkServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkServicePtrInput)(nil)).Elem(), NetworkServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTypeConfigInput)(nil)).Elem(), NodeTypeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StretchedClusterConfigInput)(nil)).Elem(), StretchedClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StretchedClusterConfigPtrInput)(nil)).Elem(), StretchedClusterConfigArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(HcxResponseOutput{})
	pulumi.RegisterOutputType(IpRangeOutput{})
	pulumi.RegisterOutputType(IpRangeArrayOutput{})
	pulumi.RegisterOutputType(IpRangeResponseOutput{})
	pulumi.RegisterOutputType(IpRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagementClusterOutput{})
	pulumi.RegisterOutputType(ManagementClusterResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkServiceOutput{})
	pulumi.RegisterOutputType(NetworkServicePtrOutput{})
	pulumi.RegisterOutputType(NetworkServiceResponseOutput{})
	pulumi.RegisterOutputType(NodeTypeConfigOutput{})
	pulumi.RegisterOutputType(NodeTypeConfigResponseOutput{})
	pulumi.RegisterOutputType(NsxResponseOutput{})
	pulumi.RegisterOutputType(StretchedClusterConfigOutput{})
	pulumi.RegisterOutputType(StretchedClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(StretchedClusterConfigResponseOutput{})
	pulumi.RegisterOutputType(VcenterResponseOutput{})
	pulumi.RegisterOutputType(VpcNetworkResponseOutput{})
	pulumi.RegisterOutputType(VpcNetworkResponseArrayOutput{})
}
