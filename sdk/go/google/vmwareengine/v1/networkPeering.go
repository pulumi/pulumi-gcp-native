// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new network peering between the peer network and VMware Engine network provided in a `NetworkPeering` resource.
// Auto-naming is currently not supported for this resource.
type NetworkPeering struct {
	pulumi.CustomResourceState

	// Creation time of this resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. User-provided description for this network peering.
	Description pulumi.StringOutput `pulumi:"description"`
	// Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.
	ExchangeSubnetRoutes pulumi.BoolOutput `pulumi:"exchangeSubnetRoutes"`
	// Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
	ExportCustomRoutes pulumi.BoolOutput `pulumi:"exportCustomRoutes"`
	// Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
	ExportCustomRoutesWithPublicIp pulumi.BoolOutput `pulumi:"exportCustomRoutesWithPublicIp"`
	// Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
	ImportCustomRoutes pulumi.BoolOutput `pulumi:"importCustomRoutes"`
	// Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
	ImportCustomRoutesWithPublicIp pulumi.BoolOutput `pulumi:"importCustomRoutesWithPublicIp"`
	// The resource name of the network peering. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/networkPeerings/my-peering`
	Name pulumi.StringOutput `pulumi:"name"`
	// Required. The user-provided identifier of the new `NetworkPeering`. This identifier must be unique among `NetworkPeering` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	NetworkPeeringId pulumi.StringOutput `pulumi:"networkPeeringId"`
	// Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.
	PeerMtu pulumi.IntOutput `pulumi:"peerMtu"`
	// The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.
	PeerNetwork pulumi.StringOutput `pulumi:"peerNetwork"`
	// The type of the network to peer with the VMware Engine network.
	PeerNetworkType pulumi.StringOutput `pulumi:"peerNetworkType"`
	Project         pulumi.StringOutput `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer network. New values may be added to this enum when appropriate.
	State pulumi.StringOutput `pulumi:"state"`
	// Output Only. Details about the current state of the network peering.
	StateDetails pulumi.StringOutput `pulumi:"stateDetails"`
	// System-generated unique identifier for the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Last update time of this resource.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork pulumi.StringOutput `pulumi:"vmwareEngineNetwork"`
}

// NewNetworkPeering registers a new resource with the given unique name, arguments, and options.
func NewNetworkPeering(ctx *pulumi.Context,
	name string, args *NetworkPeeringArgs, opts ...pulumi.ResourceOption) (*NetworkPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkPeeringId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkPeeringId'")
	}
	if args.PeerNetwork == nil {
		return nil, errors.New("invalid value for required argument 'PeerNetwork'")
	}
	if args.PeerNetworkType == nil {
		return nil, errors.New("invalid value for required argument 'PeerNetworkType'")
	}
	if args.VmwareEngineNetwork == nil {
		return nil, errors.New("invalid value for required argument 'VmwareEngineNetwork'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"networkPeeringId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkPeering
	err := ctx.RegisterResource("google-native:vmwareengine/v1:NetworkPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkPeering gets an existing NetworkPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkPeeringState, opts ...pulumi.ResourceOption) (*NetworkPeering, error) {
	var resource NetworkPeering
	err := ctx.ReadResource("google-native:vmwareengine/v1:NetworkPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkPeering resources.
type networkPeeringState struct {
}

type NetworkPeeringState struct {
}

func (NetworkPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPeeringState)(nil)).Elem()
}

type networkPeeringArgs struct {
	// Optional. User-provided description for this network peering.
	Description *string `pulumi:"description"`
	// Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.
	ExchangeSubnetRoutes *bool `pulumi:"exchangeSubnetRoutes"`
	// Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
	ExportCustomRoutes *bool `pulumi:"exportCustomRoutes"`
	// Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
	ExportCustomRoutesWithPublicIp *bool `pulumi:"exportCustomRoutesWithPublicIp"`
	// Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
	ImportCustomRoutes *bool `pulumi:"importCustomRoutes"`
	// Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
	ImportCustomRoutesWithPublicIp *bool `pulumi:"importCustomRoutesWithPublicIp"`
	// Required. The user-provided identifier of the new `NetworkPeering`. This identifier must be unique among `NetworkPeering` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	NetworkPeeringId string `pulumi:"networkPeeringId"`
	// Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.
	PeerMtu *int `pulumi:"peerMtu"`
	// The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.
	PeerNetwork string `pulumi:"peerNetwork"`
	// The type of the network to peer with the VMware Engine network.
	PeerNetworkType NetworkPeeringPeerNetworkType `pulumi:"peerNetworkType"`
	Project         *string                       `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork string `pulumi:"vmwareEngineNetwork"`
}

// The set of arguments for constructing a NetworkPeering resource.
type NetworkPeeringArgs struct {
	// Optional. User-provided description for this network peering.
	Description pulumi.StringPtrInput
	// Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.
	ExchangeSubnetRoutes pulumi.BoolPtrInput
	// Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
	ExportCustomRoutes pulumi.BoolPtrInput
	// Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
	ExportCustomRoutesWithPublicIp pulumi.BoolPtrInput
	// Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
	ImportCustomRoutes pulumi.BoolPtrInput
	// Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
	ImportCustomRoutesWithPublicIp pulumi.BoolPtrInput
	// Required. The user-provided identifier of the new `NetworkPeering`. This identifier must be unique among `NetworkPeering` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	NetworkPeeringId pulumi.StringInput
	// Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.
	PeerMtu pulumi.IntPtrInput
	// The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.
	PeerNetwork pulumi.StringInput
	// The type of the network to peer with the VMware Engine network.
	PeerNetworkType NetworkPeeringPeerNetworkTypeInput
	Project         pulumi.StringPtrInput
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
	VmwareEngineNetwork pulumi.StringInput
}

func (NetworkPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPeeringArgs)(nil)).Elem()
}

type NetworkPeeringInput interface {
	pulumi.Input

	ToNetworkPeeringOutput() NetworkPeeringOutput
	ToNetworkPeeringOutputWithContext(ctx context.Context) NetworkPeeringOutput
}

func (*NetworkPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPeering)(nil)).Elem()
}

func (i *NetworkPeering) ToNetworkPeeringOutput() NetworkPeeringOutput {
	return i.ToNetworkPeeringOutputWithContext(context.Background())
}

func (i *NetworkPeering) ToNetworkPeeringOutputWithContext(ctx context.Context) NetworkPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPeeringOutput)
}

type NetworkPeeringOutput struct{ *pulumi.OutputState }

func (NetworkPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPeering)(nil)).Elem()
}

func (o NetworkPeeringOutput) ToNetworkPeeringOutput() NetworkPeeringOutput {
	return o
}

func (o NetworkPeeringOutput) ToNetworkPeeringOutputWithContext(ctx context.Context) NetworkPeeringOutput {
	return o
}

// Creation time of this resource.
func (o NetworkPeeringOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. User-provided description for this network peering.
func (o NetworkPeeringOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.
func (o NetworkPeeringOutput) ExchangeSubnetRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.BoolOutput { return v.ExchangeSubnetRoutes }).(pulumi.BoolOutput)
}

// Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
func (o NetworkPeeringOutput) ExportCustomRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.BoolOutput { return v.ExportCustomRoutes }).(pulumi.BoolOutput)
}

// Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
func (o NetworkPeeringOutput) ExportCustomRoutesWithPublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.BoolOutput { return v.ExportCustomRoutesWithPublicIp }).(pulumi.BoolOutput)
}

// Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
func (o NetworkPeeringOutput) ImportCustomRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.BoolOutput { return v.ImportCustomRoutes }).(pulumi.BoolOutput)
}

// Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
func (o NetworkPeeringOutput) ImportCustomRoutesWithPublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.BoolOutput { return v.ImportCustomRoutesWithPublicIp }).(pulumi.BoolOutput)
}

// The resource name of the network peering. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/networkPeerings/my-peering`
func (o NetworkPeeringOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required. The user-provided identifier of the new `NetworkPeering`. This identifier must be unique among `NetworkPeering` resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
func (o NetworkPeeringOutput) NetworkPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.NetworkPeeringId }).(pulumi.StringOutput)
}

// Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.
func (o NetworkPeeringOutput) PeerMtu() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.IntOutput { return v.PeerMtu }).(pulumi.IntOutput)
}

// The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.
func (o NetworkPeeringOutput) PeerNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.PeerNetwork }).(pulumi.StringOutput)
}

// The type of the network to peer with the VMware Engine network.
func (o NetworkPeeringOutput) PeerNetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.PeerNetworkType }).(pulumi.StringOutput)
}

func (o NetworkPeeringOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o NetworkPeeringOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer network. New values may be added to this enum when appropriate.
func (o NetworkPeeringOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Output Only. Details about the current state of the network peering.
func (o NetworkPeeringOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.StateDetails }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o NetworkPeeringOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Last update time of this resource.
func (o NetworkPeeringOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
func (o NetworkPeeringOutput) VmwareEngineNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPeering) pulumi.StringOutput { return v.VmwareEngineNetwork }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPeeringInput)(nil)).Elem(), &NetworkPeering{})
	pulumi.RegisterOutputType(NetworkPeeringOutput{})
}
