// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The log type that this config enables.
type AuditLogConfigLogType string

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return pulumi.ToOutput(e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return e.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return AuditLogConfigLogType(e).ToAuditLogConfigLogTypeOutputWithContext(ctx).ToAuditLogConfigLogTypePtrOutputWithContext(ctx)
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuditLogConfigLogTypeOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuditLogConfigLogType) *AuditLogConfigLogType {
		return &v
	}).(AuditLogConfigLogTypePtrOutput)
}

func (o AuditLogConfigLogTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfigLogType] {
	return pulumix.Output[AuditLogConfigLogType]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigLogTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuditLogConfigLogTypePtrOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AuditLogConfigLogType] {
	return pulumix.Output[*AuditLogConfigLogType]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigLogTypePtrOutput) Elem() AuditLogConfigLogTypeOutput {
	return o.ApplyT(func(v *AuditLogConfigLogType) AuditLogConfigLogType {
		if v != nil {
			return *v
		}
		var ret AuditLogConfigLogType
		return ret
	}).(AuditLogConfigLogTypeOutput)
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuditLogConfigLogType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuditLogConfigLogTypeInput is an input type that accepts AuditLogConfigLogTypeArgs and AuditLogConfigLogTypeOutput values.
// You can construct a concrete instance of `AuditLogConfigLogTypeInput` via:
//
//	AuditLogConfigLogTypeArgs{...}
type AuditLogConfigLogTypeInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput
	ToAuditLogConfigLogTypeOutputWithContext(context.Context) AuditLogConfigLogTypeOutput
}

var auditLogConfigLogTypePtrType = reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()

type AuditLogConfigLogTypePtrInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput
	ToAuditLogConfigLogTypePtrOutputWithContext(context.Context) AuditLogConfigLogTypePtrOutput
}

type auditLogConfigLogTypePtr string

func AuditLogConfigLogTypePtr(v string) AuditLogConfigLogTypePtrInput {
	return (*auditLogConfigLogTypePtr)(&v)
}

func (*auditLogConfigLogTypePtr) ElementType() reflect.Type {
	return auditLogConfigLogTypePtrType
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutput(in).(AuditLogConfigLogTypePtrOutput)
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuditLogConfigLogTypePtrOutput)
}

func (in *auditLogConfigLogTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AuditLogConfigLogType] {
	return pulumix.Output[*AuditLogConfigLogType]{
		OutputState: in.ToAuditLogConfigLogTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The action that the external access rule performs.
type ExternalAccessRuleAction string

const (
	// Defaults to allow.
	ExternalAccessRuleActionActionUnspecified = ExternalAccessRuleAction("ACTION_UNSPECIFIED")
	// Allows connections that match the other specified components.
	ExternalAccessRuleActionAllow = ExternalAccessRuleAction("ALLOW")
	// Blocks connections that match the other specified components.
	ExternalAccessRuleActionDeny = ExternalAccessRuleAction("DENY")
)

func (ExternalAccessRuleAction) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalAccessRuleAction)(nil)).Elem()
}

func (e ExternalAccessRuleAction) ToExternalAccessRuleActionOutput() ExternalAccessRuleActionOutput {
	return pulumi.ToOutput(e).(ExternalAccessRuleActionOutput)
}

func (e ExternalAccessRuleAction) ToExternalAccessRuleActionOutputWithContext(ctx context.Context) ExternalAccessRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExternalAccessRuleActionOutput)
}

func (e ExternalAccessRuleAction) ToExternalAccessRuleActionPtrOutput() ExternalAccessRuleActionPtrOutput {
	return e.ToExternalAccessRuleActionPtrOutputWithContext(context.Background())
}

func (e ExternalAccessRuleAction) ToExternalAccessRuleActionPtrOutputWithContext(ctx context.Context) ExternalAccessRuleActionPtrOutput {
	return ExternalAccessRuleAction(e).ToExternalAccessRuleActionOutputWithContext(ctx).ToExternalAccessRuleActionPtrOutputWithContext(ctx)
}

func (e ExternalAccessRuleAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExternalAccessRuleAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExternalAccessRuleAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExternalAccessRuleAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExternalAccessRuleActionOutput struct{ *pulumi.OutputState }

func (ExternalAccessRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalAccessRuleAction)(nil)).Elem()
}

func (o ExternalAccessRuleActionOutput) ToExternalAccessRuleActionOutput() ExternalAccessRuleActionOutput {
	return o
}

func (o ExternalAccessRuleActionOutput) ToExternalAccessRuleActionOutputWithContext(ctx context.Context) ExternalAccessRuleActionOutput {
	return o
}

func (o ExternalAccessRuleActionOutput) ToExternalAccessRuleActionPtrOutput() ExternalAccessRuleActionPtrOutput {
	return o.ToExternalAccessRuleActionPtrOutputWithContext(context.Background())
}

func (o ExternalAccessRuleActionOutput) ToExternalAccessRuleActionPtrOutputWithContext(ctx context.Context) ExternalAccessRuleActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalAccessRuleAction) *ExternalAccessRuleAction {
		return &v
	}).(ExternalAccessRuleActionPtrOutput)
}

func (o ExternalAccessRuleActionOutput) ToOutput(ctx context.Context) pulumix.Output[ExternalAccessRuleAction] {
	return pulumix.Output[ExternalAccessRuleAction]{
		OutputState: o.OutputState,
	}
}

func (o ExternalAccessRuleActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExternalAccessRuleActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExternalAccessRuleAction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExternalAccessRuleActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExternalAccessRuleActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExternalAccessRuleAction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExternalAccessRuleActionPtrOutput struct{ *pulumi.OutputState }

func (ExternalAccessRuleActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalAccessRuleAction)(nil)).Elem()
}

func (o ExternalAccessRuleActionPtrOutput) ToExternalAccessRuleActionPtrOutput() ExternalAccessRuleActionPtrOutput {
	return o
}

func (o ExternalAccessRuleActionPtrOutput) ToExternalAccessRuleActionPtrOutputWithContext(ctx context.Context) ExternalAccessRuleActionPtrOutput {
	return o
}

func (o ExternalAccessRuleActionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExternalAccessRuleAction] {
	return pulumix.Output[*ExternalAccessRuleAction]{
		OutputState: o.OutputState,
	}
}

func (o ExternalAccessRuleActionPtrOutput) Elem() ExternalAccessRuleActionOutput {
	return o.ApplyT(func(v *ExternalAccessRuleAction) ExternalAccessRuleAction {
		if v != nil {
			return *v
		}
		var ret ExternalAccessRuleAction
		return ret
	}).(ExternalAccessRuleActionOutput)
}

func (o ExternalAccessRuleActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExternalAccessRuleActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExternalAccessRuleAction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExternalAccessRuleActionInput is an input type that accepts ExternalAccessRuleActionArgs and ExternalAccessRuleActionOutput values.
// You can construct a concrete instance of `ExternalAccessRuleActionInput` via:
//
//	ExternalAccessRuleActionArgs{...}
type ExternalAccessRuleActionInput interface {
	pulumi.Input

	ToExternalAccessRuleActionOutput() ExternalAccessRuleActionOutput
	ToExternalAccessRuleActionOutputWithContext(context.Context) ExternalAccessRuleActionOutput
}

var externalAccessRuleActionPtrType = reflect.TypeOf((**ExternalAccessRuleAction)(nil)).Elem()

type ExternalAccessRuleActionPtrInput interface {
	pulumi.Input

	ToExternalAccessRuleActionPtrOutput() ExternalAccessRuleActionPtrOutput
	ToExternalAccessRuleActionPtrOutputWithContext(context.Context) ExternalAccessRuleActionPtrOutput
}

type externalAccessRuleActionPtr string

func ExternalAccessRuleActionPtr(v string) ExternalAccessRuleActionPtrInput {
	return (*externalAccessRuleActionPtr)(&v)
}

func (*externalAccessRuleActionPtr) ElementType() reflect.Type {
	return externalAccessRuleActionPtrType
}

func (in *externalAccessRuleActionPtr) ToExternalAccessRuleActionPtrOutput() ExternalAccessRuleActionPtrOutput {
	return pulumi.ToOutput(in).(ExternalAccessRuleActionPtrOutput)
}

func (in *externalAccessRuleActionPtr) ToExternalAccessRuleActionPtrOutputWithContext(ctx context.Context) ExternalAccessRuleActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExternalAccessRuleActionPtrOutput)
}

func (in *externalAccessRuleActionPtr) ToOutput(ctx context.Context) pulumix.Output[*ExternalAccessRuleAction] {
	return pulumix.Output[*ExternalAccessRuleAction]{
		OutputState: in.ToExternalAccessRuleActionPtrOutputWithContext(ctx).OutputState,
	}
}

// Required. Protocol used by vCenter to send logs to a logging server.
type LoggingServerProtocol string

const (
	// Unspecified communications protocol. This is the default value.
	LoggingServerProtocolProtocolUnspecified = LoggingServerProtocol("PROTOCOL_UNSPECIFIED")
	// UDP
	LoggingServerProtocolUdp = LoggingServerProtocol("UDP")
	// TCP
	LoggingServerProtocolTcp = LoggingServerProtocol("TCP")
)

func (LoggingServerProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingServerProtocol)(nil)).Elem()
}

func (e LoggingServerProtocol) ToLoggingServerProtocolOutput() LoggingServerProtocolOutput {
	return pulumi.ToOutput(e).(LoggingServerProtocolOutput)
}

func (e LoggingServerProtocol) ToLoggingServerProtocolOutputWithContext(ctx context.Context) LoggingServerProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LoggingServerProtocolOutput)
}

func (e LoggingServerProtocol) ToLoggingServerProtocolPtrOutput() LoggingServerProtocolPtrOutput {
	return e.ToLoggingServerProtocolPtrOutputWithContext(context.Background())
}

func (e LoggingServerProtocol) ToLoggingServerProtocolPtrOutputWithContext(ctx context.Context) LoggingServerProtocolPtrOutput {
	return LoggingServerProtocol(e).ToLoggingServerProtocolOutputWithContext(ctx).ToLoggingServerProtocolPtrOutputWithContext(ctx)
}

func (e LoggingServerProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LoggingServerProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LoggingServerProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LoggingServerProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LoggingServerProtocolOutput struct{ *pulumi.OutputState }

func (LoggingServerProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingServerProtocol)(nil)).Elem()
}

func (o LoggingServerProtocolOutput) ToLoggingServerProtocolOutput() LoggingServerProtocolOutput {
	return o
}

func (o LoggingServerProtocolOutput) ToLoggingServerProtocolOutputWithContext(ctx context.Context) LoggingServerProtocolOutput {
	return o
}

func (o LoggingServerProtocolOutput) ToLoggingServerProtocolPtrOutput() LoggingServerProtocolPtrOutput {
	return o.ToLoggingServerProtocolPtrOutputWithContext(context.Background())
}

func (o LoggingServerProtocolOutput) ToLoggingServerProtocolPtrOutputWithContext(ctx context.Context) LoggingServerProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoggingServerProtocol) *LoggingServerProtocol {
		return &v
	}).(LoggingServerProtocolPtrOutput)
}

func (o LoggingServerProtocolOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingServerProtocol] {
	return pulumix.Output[LoggingServerProtocol]{
		OutputState: o.OutputState,
	}
}

func (o LoggingServerProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LoggingServerProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LoggingServerProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LoggingServerProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LoggingServerProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LoggingServerProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LoggingServerProtocolPtrOutput struct{ *pulumi.OutputState }

func (LoggingServerProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingServerProtocol)(nil)).Elem()
}

func (o LoggingServerProtocolPtrOutput) ToLoggingServerProtocolPtrOutput() LoggingServerProtocolPtrOutput {
	return o
}

func (o LoggingServerProtocolPtrOutput) ToLoggingServerProtocolPtrOutputWithContext(ctx context.Context) LoggingServerProtocolPtrOutput {
	return o
}

func (o LoggingServerProtocolPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LoggingServerProtocol] {
	return pulumix.Output[*LoggingServerProtocol]{
		OutputState: o.OutputState,
	}
}

func (o LoggingServerProtocolPtrOutput) Elem() LoggingServerProtocolOutput {
	return o.ApplyT(func(v *LoggingServerProtocol) LoggingServerProtocol {
		if v != nil {
			return *v
		}
		var ret LoggingServerProtocol
		return ret
	}).(LoggingServerProtocolOutput)
}

func (o LoggingServerProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LoggingServerProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LoggingServerProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LoggingServerProtocolInput is an input type that accepts LoggingServerProtocolArgs and LoggingServerProtocolOutput values.
// You can construct a concrete instance of `LoggingServerProtocolInput` via:
//
//	LoggingServerProtocolArgs{...}
type LoggingServerProtocolInput interface {
	pulumi.Input

	ToLoggingServerProtocolOutput() LoggingServerProtocolOutput
	ToLoggingServerProtocolOutputWithContext(context.Context) LoggingServerProtocolOutput
}

var loggingServerProtocolPtrType = reflect.TypeOf((**LoggingServerProtocol)(nil)).Elem()

type LoggingServerProtocolPtrInput interface {
	pulumi.Input

	ToLoggingServerProtocolPtrOutput() LoggingServerProtocolPtrOutput
	ToLoggingServerProtocolPtrOutputWithContext(context.Context) LoggingServerProtocolPtrOutput
}

type loggingServerProtocolPtr string

func LoggingServerProtocolPtr(v string) LoggingServerProtocolPtrInput {
	return (*loggingServerProtocolPtr)(&v)
}

func (*loggingServerProtocolPtr) ElementType() reflect.Type {
	return loggingServerProtocolPtrType
}

func (in *loggingServerProtocolPtr) ToLoggingServerProtocolPtrOutput() LoggingServerProtocolPtrOutput {
	return pulumi.ToOutput(in).(LoggingServerProtocolPtrOutput)
}

func (in *loggingServerProtocolPtr) ToLoggingServerProtocolPtrOutputWithContext(ctx context.Context) LoggingServerProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LoggingServerProtocolPtrOutput)
}

func (in *loggingServerProtocolPtr) ToOutput(ctx context.Context) pulumix.Output[*LoggingServerProtocol] {
	return pulumix.Output[*LoggingServerProtocol]{
		OutputState: in.ToLoggingServerProtocolPtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The type of component that produces logs that will be forwarded to this logging server.
type LoggingServerSourceType string

const (
	// The default value. This value should never be used.
	LoggingServerSourceTypeSourceTypeUnspecified = LoggingServerSourceType("SOURCE_TYPE_UNSPECIFIED")
	// Logs produced by ESXI hosts
	LoggingServerSourceTypeEsxi = LoggingServerSourceType("ESXI")
	// Logs produced by vCenter server
	LoggingServerSourceTypeVcsa = LoggingServerSourceType("VCSA")
)

func (LoggingServerSourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingServerSourceType)(nil)).Elem()
}

func (e LoggingServerSourceType) ToLoggingServerSourceTypeOutput() LoggingServerSourceTypeOutput {
	return pulumi.ToOutput(e).(LoggingServerSourceTypeOutput)
}

func (e LoggingServerSourceType) ToLoggingServerSourceTypeOutputWithContext(ctx context.Context) LoggingServerSourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LoggingServerSourceTypeOutput)
}

func (e LoggingServerSourceType) ToLoggingServerSourceTypePtrOutput() LoggingServerSourceTypePtrOutput {
	return e.ToLoggingServerSourceTypePtrOutputWithContext(context.Background())
}

func (e LoggingServerSourceType) ToLoggingServerSourceTypePtrOutputWithContext(ctx context.Context) LoggingServerSourceTypePtrOutput {
	return LoggingServerSourceType(e).ToLoggingServerSourceTypeOutputWithContext(ctx).ToLoggingServerSourceTypePtrOutputWithContext(ctx)
}

func (e LoggingServerSourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LoggingServerSourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LoggingServerSourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LoggingServerSourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LoggingServerSourceTypeOutput struct{ *pulumi.OutputState }

func (LoggingServerSourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingServerSourceType)(nil)).Elem()
}

func (o LoggingServerSourceTypeOutput) ToLoggingServerSourceTypeOutput() LoggingServerSourceTypeOutput {
	return o
}

func (o LoggingServerSourceTypeOutput) ToLoggingServerSourceTypeOutputWithContext(ctx context.Context) LoggingServerSourceTypeOutput {
	return o
}

func (o LoggingServerSourceTypeOutput) ToLoggingServerSourceTypePtrOutput() LoggingServerSourceTypePtrOutput {
	return o.ToLoggingServerSourceTypePtrOutputWithContext(context.Background())
}

func (o LoggingServerSourceTypeOutput) ToLoggingServerSourceTypePtrOutputWithContext(ctx context.Context) LoggingServerSourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoggingServerSourceType) *LoggingServerSourceType {
		return &v
	}).(LoggingServerSourceTypePtrOutput)
}

func (o LoggingServerSourceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingServerSourceType] {
	return pulumix.Output[LoggingServerSourceType]{
		OutputState: o.OutputState,
	}
}

func (o LoggingServerSourceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LoggingServerSourceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LoggingServerSourceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LoggingServerSourceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LoggingServerSourceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LoggingServerSourceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LoggingServerSourceTypePtrOutput struct{ *pulumi.OutputState }

func (LoggingServerSourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingServerSourceType)(nil)).Elem()
}

func (o LoggingServerSourceTypePtrOutput) ToLoggingServerSourceTypePtrOutput() LoggingServerSourceTypePtrOutput {
	return o
}

func (o LoggingServerSourceTypePtrOutput) ToLoggingServerSourceTypePtrOutputWithContext(ctx context.Context) LoggingServerSourceTypePtrOutput {
	return o
}

func (o LoggingServerSourceTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LoggingServerSourceType] {
	return pulumix.Output[*LoggingServerSourceType]{
		OutputState: o.OutputState,
	}
}

func (o LoggingServerSourceTypePtrOutput) Elem() LoggingServerSourceTypeOutput {
	return o.ApplyT(func(v *LoggingServerSourceType) LoggingServerSourceType {
		if v != nil {
			return *v
		}
		var ret LoggingServerSourceType
		return ret
	}).(LoggingServerSourceTypeOutput)
}

func (o LoggingServerSourceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LoggingServerSourceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LoggingServerSourceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LoggingServerSourceTypeInput is an input type that accepts LoggingServerSourceTypeArgs and LoggingServerSourceTypeOutput values.
// You can construct a concrete instance of `LoggingServerSourceTypeInput` via:
//
//	LoggingServerSourceTypeArgs{...}
type LoggingServerSourceTypeInput interface {
	pulumi.Input

	ToLoggingServerSourceTypeOutput() LoggingServerSourceTypeOutput
	ToLoggingServerSourceTypeOutputWithContext(context.Context) LoggingServerSourceTypeOutput
}

var loggingServerSourceTypePtrType = reflect.TypeOf((**LoggingServerSourceType)(nil)).Elem()

type LoggingServerSourceTypePtrInput interface {
	pulumi.Input

	ToLoggingServerSourceTypePtrOutput() LoggingServerSourceTypePtrOutput
	ToLoggingServerSourceTypePtrOutputWithContext(context.Context) LoggingServerSourceTypePtrOutput
}

type loggingServerSourceTypePtr string

func LoggingServerSourceTypePtr(v string) LoggingServerSourceTypePtrInput {
	return (*loggingServerSourceTypePtr)(&v)
}

func (*loggingServerSourceTypePtr) ElementType() reflect.Type {
	return loggingServerSourceTypePtrType
}

func (in *loggingServerSourceTypePtr) ToLoggingServerSourceTypePtrOutput() LoggingServerSourceTypePtrOutput {
	return pulumi.ToOutput(in).(LoggingServerSourceTypePtrOutput)
}

func (in *loggingServerSourceTypePtr) ToLoggingServerSourceTypePtrOutputWithContext(ctx context.Context) LoggingServerSourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LoggingServerSourceTypePtrOutput)
}

func (in *loggingServerSourceTypePtr) ToOutput(ctx context.Context) pulumix.Output[*LoggingServerSourceType] {
	return pulumix.Output[*LoggingServerSourceType]{
		OutputState: in.ToLoggingServerSourceTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The type of the network to peer with the VMware Engine network.
type NetworkPeeringPeerNetworkType string

const (
	// Unspecified
	NetworkPeeringPeerNetworkTypePeerNetworkTypeUnspecified = NetworkPeeringPeerNetworkType("PEER_NETWORK_TYPE_UNSPECIFIED")
	// Peering connection used for connecting to another VPC network established by the same user. For example, a peering connection to another VPC network in the same project or to an on-premises network.
	NetworkPeeringPeerNetworkTypeStandard = NetworkPeeringPeerNetworkType("STANDARD")
	// Peering connection used for connecting to another VMware Engine network.
	NetworkPeeringPeerNetworkTypeVmwareEngineNetwork = NetworkPeeringPeerNetworkType("VMWARE_ENGINE_NETWORK")
	// Peering connection used for establishing [private services access](https://cloud.google.com/vpc/docs/private-services-access).
	NetworkPeeringPeerNetworkTypePrivateServicesAccess = NetworkPeeringPeerNetworkType("PRIVATE_SERVICES_ACCESS")
	// Peering connection used for connecting to NetApp Cloud Volumes.
	NetworkPeeringPeerNetworkTypeNetappCloudVolumes = NetworkPeeringPeerNetworkType("NETAPP_CLOUD_VOLUMES")
	// Peering connection used for connecting to third-party services. Most third-party services require manual setup of reverse peering on the VPC network associated with the third-party service.
	NetworkPeeringPeerNetworkTypeThirdPartyService = NetworkPeeringPeerNetworkType("THIRD_PARTY_SERVICE")
	// Peering connection used for connecting to Dell PowerScale Filers
	NetworkPeeringPeerNetworkTypeDellPowerscale = NetworkPeeringPeerNetworkType("DELL_POWERSCALE")
)

func (NetworkPeeringPeerNetworkType) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPeeringPeerNetworkType)(nil)).Elem()
}

func (e NetworkPeeringPeerNetworkType) ToNetworkPeeringPeerNetworkTypeOutput() NetworkPeeringPeerNetworkTypeOutput {
	return pulumi.ToOutput(e).(NetworkPeeringPeerNetworkTypeOutput)
}

func (e NetworkPeeringPeerNetworkType) ToNetworkPeeringPeerNetworkTypeOutputWithContext(ctx context.Context) NetworkPeeringPeerNetworkTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NetworkPeeringPeerNetworkTypeOutput)
}

func (e NetworkPeeringPeerNetworkType) ToNetworkPeeringPeerNetworkTypePtrOutput() NetworkPeeringPeerNetworkTypePtrOutput {
	return e.ToNetworkPeeringPeerNetworkTypePtrOutputWithContext(context.Background())
}

func (e NetworkPeeringPeerNetworkType) ToNetworkPeeringPeerNetworkTypePtrOutputWithContext(ctx context.Context) NetworkPeeringPeerNetworkTypePtrOutput {
	return NetworkPeeringPeerNetworkType(e).ToNetworkPeeringPeerNetworkTypeOutputWithContext(ctx).ToNetworkPeeringPeerNetworkTypePtrOutputWithContext(ctx)
}

func (e NetworkPeeringPeerNetworkType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPeeringPeerNetworkType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPeeringPeerNetworkType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkPeeringPeerNetworkType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NetworkPeeringPeerNetworkTypeOutput struct{ *pulumi.OutputState }

func (NetworkPeeringPeerNetworkTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPeeringPeerNetworkType)(nil)).Elem()
}

func (o NetworkPeeringPeerNetworkTypeOutput) ToNetworkPeeringPeerNetworkTypeOutput() NetworkPeeringPeerNetworkTypeOutput {
	return o
}

func (o NetworkPeeringPeerNetworkTypeOutput) ToNetworkPeeringPeerNetworkTypeOutputWithContext(ctx context.Context) NetworkPeeringPeerNetworkTypeOutput {
	return o
}

func (o NetworkPeeringPeerNetworkTypeOutput) ToNetworkPeeringPeerNetworkTypePtrOutput() NetworkPeeringPeerNetworkTypePtrOutput {
	return o.ToNetworkPeeringPeerNetworkTypePtrOutputWithContext(context.Background())
}

func (o NetworkPeeringPeerNetworkTypeOutput) ToNetworkPeeringPeerNetworkTypePtrOutputWithContext(ctx context.Context) NetworkPeeringPeerNetworkTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkPeeringPeerNetworkType) *NetworkPeeringPeerNetworkType {
		return &v
	}).(NetworkPeeringPeerNetworkTypePtrOutput)
}

func (o NetworkPeeringPeerNetworkTypeOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkPeeringPeerNetworkType] {
	return pulumix.Output[NetworkPeeringPeerNetworkType]{
		OutputState: o.OutputState,
	}
}

func (o NetworkPeeringPeerNetworkTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NetworkPeeringPeerNetworkTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkPeeringPeerNetworkType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NetworkPeeringPeerNetworkTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkPeeringPeerNetworkTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkPeeringPeerNetworkType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NetworkPeeringPeerNetworkTypePtrOutput struct{ *pulumi.OutputState }

func (NetworkPeeringPeerNetworkTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPeeringPeerNetworkType)(nil)).Elem()
}

func (o NetworkPeeringPeerNetworkTypePtrOutput) ToNetworkPeeringPeerNetworkTypePtrOutput() NetworkPeeringPeerNetworkTypePtrOutput {
	return o
}

func (o NetworkPeeringPeerNetworkTypePtrOutput) ToNetworkPeeringPeerNetworkTypePtrOutputWithContext(ctx context.Context) NetworkPeeringPeerNetworkTypePtrOutput {
	return o
}

func (o NetworkPeeringPeerNetworkTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkPeeringPeerNetworkType] {
	return pulumix.Output[*NetworkPeeringPeerNetworkType]{
		OutputState: o.OutputState,
	}
}

func (o NetworkPeeringPeerNetworkTypePtrOutput) Elem() NetworkPeeringPeerNetworkTypeOutput {
	return o.ApplyT(func(v *NetworkPeeringPeerNetworkType) NetworkPeeringPeerNetworkType {
		if v != nil {
			return *v
		}
		var ret NetworkPeeringPeerNetworkType
		return ret
	}).(NetworkPeeringPeerNetworkTypeOutput)
}

func (o NetworkPeeringPeerNetworkTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkPeeringPeerNetworkTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NetworkPeeringPeerNetworkType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NetworkPeeringPeerNetworkTypeInput is an input type that accepts NetworkPeeringPeerNetworkTypeArgs and NetworkPeeringPeerNetworkTypeOutput values.
// You can construct a concrete instance of `NetworkPeeringPeerNetworkTypeInput` via:
//
//	NetworkPeeringPeerNetworkTypeArgs{...}
type NetworkPeeringPeerNetworkTypeInput interface {
	pulumi.Input

	ToNetworkPeeringPeerNetworkTypeOutput() NetworkPeeringPeerNetworkTypeOutput
	ToNetworkPeeringPeerNetworkTypeOutputWithContext(context.Context) NetworkPeeringPeerNetworkTypeOutput
}

var networkPeeringPeerNetworkTypePtrType = reflect.TypeOf((**NetworkPeeringPeerNetworkType)(nil)).Elem()

type NetworkPeeringPeerNetworkTypePtrInput interface {
	pulumi.Input

	ToNetworkPeeringPeerNetworkTypePtrOutput() NetworkPeeringPeerNetworkTypePtrOutput
	ToNetworkPeeringPeerNetworkTypePtrOutputWithContext(context.Context) NetworkPeeringPeerNetworkTypePtrOutput
}

type networkPeeringPeerNetworkTypePtr string

func NetworkPeeringPeerNetworkTypePtr(v string) NetworkPeeringPeerNetworkTypePtrInput {
	return (*networkPeeringPeerNetworkTypePtr)(&v)
}

func (*networkPeeringPeerNetworkTypePtr) ElementType() reflect.Type {
	return networkPeeringPeerNetworkTypePtrType
}

func (in *networkPeeringPeerNetworkTypePtr) ToNetworkPeeringPeerNetworkTypePtrOutput() NetworkPeeringPeerNetworkTypePtrOutput {
	return pulumi.ToOutput(in).(NetworkPeeringPeerNetworkTypePtrOutput)
}

func (in *networkPeeringPeerNetworkTypePtr) ToNetworkPeeringPeerNetworkTypePtrOutputWithContext(ctx context.Context) NetworkPeeringPeerNetworkTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NetworkPeeringPeerNetworkTypePtrOutput)
}

func (in *networkPeeringPeerNetworkTypePtr) ToOutput(ctx context.Context) pulumix.Output[*NetworkPeeringPeerNetworkType] {
	return pulumix.Output[*NetworkPeeringPeerNetworkType]{
		OutputState: in.ToNetworkPeeringPeerNetworkTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. Type of the private cloud. Defaults to STANDARD.
type PrivateCloudType string

const (
	// Standard private is a zonal resource, with 3+ nodes. Default type.
	PrivateCloudTypeStandard = PrivateCloudType("STANDARD")
	// Time limited private cloud is a zonal resource, can have only 1 node and has limited life span. Will be deleted after defined period of time, can be converted into standard private cloud by expanding it up to 3 or more nodes.
	PrivateCloudTypeTimeLimited = PrivateCloudType("TIME_LIMITED")
	// Stretched private cloud is a regional resource with redundancy, with a minimum of 6 nodes, nodes count has to be even.
	PrivateCloudTypeStretched = PrivateCloudType("STRETCHED")
)

func (PrivateCloudType) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateCloudType)(nil)).Elem()
}

func (e PrivateCloudType) ToPrivateCloudTypeOutput() PrivateCloudTypeOutput {
	return pulumi.ToOutput(e).(PrivateCloudTypeOutput)
}

func (e PrivateCloudType) ToPrivateCloudTypeOutputWithContext(ctx context.Context) PrivateCloudTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PrivateCloudTypeOutput)
}

func (e PrivateCloudType) ToPrivateCloudTypePtrOutput() PrivateCloudTypePtrOutput {
	return e.ToPrivateCloudTypePtrOutputWithContext(context.Background())
}

func (e PrivateCloudType) ToPrivateCloudTypePtrOutputWithContext(ctx context.Context) PrivateCloudTypePtrOutput {
	return PrivateCloudType(e).ToPrivateCloudTypeOutputWithContext(ctx).ToPrivateCloudTypePtrOutputWithContext(ctx)
}

func (e PrivateCloudType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrivateCloudType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrivateCloudType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PrivateCloudType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PrivateCloudTypeOutput struct{ *pulumi.OutputState }

func (PrivateCloudTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateCloudType)(nil)).Elem()
}

func (o PrivateCloudTypeOutput) ToPrivateCloudTypeOutput() PrivateCloudTypeOutput {
	return o
}

func (o PrivateCloudTypeOutput) ToPrivateCloudTypeOutputWithContext(ctx context.Context) PrivateCloudTypeOutput {
	return o
}

func (o PrivateCloudTypeOutput) ToPrivateCloudTypePtrOutput() PrivateCloudTypePtrOutput {
	return o.ToPrivateCloudTypePtrOutputWithContext(context.Background())
}

func (o PrivateCloudTypeOutput) ToPrivateCloudTypePtrOutputWithContext(ctx context.Context) PrivateCloudTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateCloudType) *PrivateCloudType {
		return &v
	}).(PrivateCloudTypePtrOutput)
}

func (o PrivateCloudTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateCloudType] {
	return pulumix.Output[PrivateCloudType]{
		OutputState: o.OutputState,
	}
}

func (o PrivateCloudTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PrivateCloudTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrivateCloudType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PrivateCloudTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrivateCloudTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrivateCloudType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PrivateCloudTypePtrOutput struct{ *pulumi.OutputState }

func (PrivateCloudTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateCloudType)(nil)).Elem()
}

func (o PrivateCloudTypePtrOutput) ToPrivateCloudTypePtrOutput() PrivateCloudTypePtrOutput {
	return o
}

func (o PrivateCloudTypePtrOutput) ToPrivateCloudTypePtrOutputWithContext(ctx context.Context) PrivateCloudTypePtrOutput {
	return o
}

func (o PrivateCloudTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateCloudType] {
	return pulumix.Output[*PrivateCloudType]{
		OutputState: o.OutputState,
	}
}

func (o PrivateCloudTypePtrOutput) Elem() PrivateCloudTypeOutput {
	return o.ApplyT(func(v *PrivateCloudType) PrivateCloudType {
		if v != nil {
			return *v
		}
		var ret PrivateCloudType
		return ret
	}).(PrivateCloudTypeOutput)
}

func (o PrivateCloudTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrivateCloudTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PrivateCloudType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PrivateCloudTypeInput is an input type that accepts PrivateCloudTypeArgs and PrivateCloudTypeOutput values.
// You can construct a concrete instance of `PrivateCloudTypeInput` via:
//
//	PrivateCloudTypeArgs{...}
type PrivateCloudTypeInput interface {
	pulumi.Input

	ToPrivateCloudTypeOutput() PrivateCloudTypeOutput
	ToPrivateCloudTypeOutputWithContext(context.Context) PrivateCloudTypeOutput
}

var privateCloudTypePtrType = reflect.TypeOf((**PrivateCloudType)(nil)).Elem()

type PrivateCloudTypePtrInput interface {
	pulumi.Input

	ToPrivateCloudTypePtrOutput() PrivateCloudTypePtrOutput
	ToPrivateCloudTypePtrOutputWithContext(context.Context) PrivateCloudTypePtrOutput
}

type privateCloudTypePtr string

func PrivateCloudTypePtr(v string) PrivateCloudTypePtrInput {
	return (*privateCloudTypePtr)(&v)
}

func (*privateCloudTypePtr) ElementType() reflect.Type {
	return privateCloudTypePtrType
}

func (in *privateCloudTypePtr) ToPrivateCloudTypePtrOutput() PrivateCloudTypePtrOutput {
	return pulumi.ToOutput(in).(PrivateCloudTypePtrOutput)
}

func (in *privateCloudTypePtr) ToPrivateCloudTypePtrOutputWithContext(ctx context.Context) PrivateCloudTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PrivateCloudTypePtrOutput)
}

func (in *privateCloudTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PrivateCloudType] {
	return pulumix.Output[*PrivateCloudType]{
		OutputState: in.ToPrivateCloudTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. Routing Mode. Default value is set to GLOBAL. For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.
type PrivateConnectionRoutingMode string

const (
	// The default value. This value should never be used.
	PrivateConnectionRoutingModeRoutingModeUnspecified = PrivateConnectionRoutingMode("ROUTING_MODE_UNSPECIFIED")
	// Global Routing Mode
	PrivateConnectionRoutingModeGlobal = PrivateConnectionRoutingMode("GLOBAL")
	// Regional Routing Mode
	PrivateConnectionRoutingModeRegional = PrivateConnectionRoutingMode("REGIONAL")
)

func (PrivateConnectionRoutingMode) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectionRoutingMode)(nil)).Elem()
}

func (e PrivateConnectionRoutingMode) ToPrivateConnectionRoutingModeOutput() PrivateConnectionRoutingModeOutput {
	return pulumi.ToOutput(e).(PrivateConnectionRoutingModeOutput)
}

func (e PrivateConnectionRoutingMode) ToPrivateConnectionRoutingModeOutputWithContext(ctx context.Context) PrivateConnectionRoutingModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PrivateConnectionRoutingModeOutput)
}

func (e PrivateConnectionRoutingMode) ToPrivateConnectionRoutingModePtrOutput() PrivateConnectionRoutingModePtrOutput {
	return e.ToPrivateConnectionRoutingModePtrOutputWithContext(context.Background())
}

func (e PrivateConnectionRoutingMode) ToPrivateConnectionRoutingModePtrOutputWithContext(ctx context.Context) PrivateConnectionRoutingModePtrOutput {
	return PrivateConnectionRoutingMode(e).ToPrivateConnectionRoutingModeOutputWithContext(ctx).ToPrivateConnectionRoutingModePtrOutputWithContext(ctx)
}

func (e PrivateConnectionRoutingMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrivateConnectionRoutingMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrivateConnectionRoutingMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PrivateConnectionRoutingMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PrivateConnectionRoutingModeOutput struct{ *pulumi.OutputState }

func (PrivateConnectionRoutingModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectionRoutingMode)(nil)).Elem()
}

func (o PrivateConnectionRoutingModeOutput) ToPrivateConnectionRoutingModeOutput() PrivateConnectionRoutingModeOutput {
	return o
}

func (o PrivateConnectionRoutingModeOutput) ToPrivateConnectionRoutingModeOutputWithContext(ctx context.Context) PrivateConnectionRoutingModeOutput {
	return o
}

func (o PrivateConnectionRoutingModeOutput) ToPrivateConnectionRoutingModePtrOutput() PrivateConnectionRoutingModePtrOutput {
	return o.ToPrivateConnectionRoutingModePtrOutputWithContext(context.Background())
}

func (o PrivateConnectionRoutingModeOutput) ToPrivateConnectionRoutingModePtrOutputWithContext(ctx context.Context) PrivateConnectionRoutingModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateConnectionRoutingMode) *PrivateConnectionRoutingMode {
		return &v
	}).(PrivateConnectionRoutingModePtrOutput)
}

func (o PrivateConnectionRoutingModeOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateConnectionRoutingMode] {
	return pulumix.Output[PrivateConnectionRoutingMode]{
		OutputState: o.OutputState,
	}
}

func (o PrivateConnectionRoutingModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PrivateConnectionRoutingModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrivateConnectionRoutingMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PrivateConnectionRoutingModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrivateConnectionRoutingModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrivateConnectionRoutingMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PrivateConnectionRoutingModePtrOutput struct{ *pulumi.OutputState }

func (PrivateConnectionRoutingModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectionRoutingMode)(nil)).Elem()
}

func (o PrivateConnectionRoutingModePtrOutput) ToPrivateConnectionRoutingModePtrOutput() PrivateConnectionRoutingModePtrOutput {
	return o
}

func (o PrivateConnectionRoutingModePtrOutput) ToPrivateConnectionRoutingModePtrOutputWithContext(ctx context.Context) PrivateConnectionRoutingModePtrOutput {
	return o
}

func (o PrivateConnectionRoutingModePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateConnectionRoutingMode] {
	return pulumix.Output[*PrivateConnectionRoutingMode]{
		OutputState: o.OutputState,
	}
}

func (o PrivateConnectionRoutingModePtrOutput) Elem() PrivateConnectionRoutingModeOutput {
	return o.ApplyT(func(v *PrivateConnectionRoutingMode) PrivateConnectionRoutingMode {
		if v != nil {
			return *v
		}
		var ret PrivateConnectionRoutingMode
		return ret
	}).(PrivateConnectionRoutingModeOutput)
}

func (o PrivateConnectionRoutingModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrivateConnectionRoutingModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PrivateConnectionRoutingMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PrivateConnectionRoutingModeInput is an input type that accepts PrivateConnectionRoutingModeArgs and PrivateConnectionRoutingModeOutput values.
// You can construct a concrete instance of `PrivateConnectionRoutingModeInput` via:
//
//	PrivateConnectionRoutingModeArgs{...}
type PrivateConnectionRoutingModeInput interface {
	pulumi.Input

	ToPrivateConnectionRoutingModeOutput() PrivateConnectionRoutingModeOutput
	ToPrivateConnectionRoutingModeOutputWithContext(context.Context) PrivateConnectionRoutingModeOutput
}

var privateConnectionRoutingModePtrType = reflect.TypeOf((**PrivateConnectionRoutingMode)(nil)).Elem()

type PrivateConnectionRoutingModePtrInput interface {
	pulumi.Input

	ToPrivateConnectionRoutingModePtrOutput() PrivateConnectionRoutingModePtrOutput
	ToPrivateConnectionRoutingModePtrOutputWithContext(context.Context) PrivateConnectionRoutingModePtrOutput
}

type privateConnectionRoutingModePtr string

func PrivateConnectionRoutingModePtr(v string) PrivateConnectionRoutingModePtrInput {
	return (*privateConnectionRoutingModePtr)(&v)
}

func (*privateConnectionRoutingModePtr) ElementType() reflect.Type {
	return privateConnectionRoutingModePtrType
}

func (in *privateConnectionRoutingModePtr) ToPrivateConnectionRoutingModePtrOutput() PrivateConnectionRoutingModePtrOutput {
	return pulumi.ToOutput(in).(PrivateConnectionRoutingModePtrOutput)
}

func (in *privateConnectionRoutingModePtr) ToPrivateConnectionRoutingModePtrOutputWithContext(ctx context.Context) PrivateConnectionRoutingModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PrivateConnectionRoutingModePtrOutput)
}

func (in *privateConnectionRoutingModePtr) ToOutput(ctx context.Context) pulumix.Output[*PrivateConnectionRoutingMode] {
	return pulumix.Output[*PrivateConnectionRoutingMode]{
		OutputState: in.ToPrivateConnectionRoutingModePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. Private connection type.
type PrivateConnectionType string

const (
	// The default value. This value should never be used.
	PrivateConnectionTypeTypeUnspecified = PrivateConnectionType("TYPE_UNSPECIFIED")
	// Connection used for establishing [private services access](https://cloud.google.com/vpc/docs/private-services-access).
	PrivateConnectionTypePrivateServiceAccess = PrivateConnectionType("PRIVATE_SERVICE_ACCESS")
	// Connection used for connecting to NetApp Cloud Volumes.
	PrivateConnectionTypeNetappCloudVolumes = PrivateConnectionType("NETAPP_CLOUD_VOLUMES")
	// Connection used for connecting to Dell PowerScale.
	PrivateConnectionTypeDellPowerscale = PrivateConnectionType("DELL_POWERSCALE")
	// Connection used for connecting to third-party services.
	PrivateConnectionTypeThirdPartyService = PrivateConnectionType("THIRD_PARTY_SERVICE")
)

func (PrivateConnectionType) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectionType)(nil)).Elem()
}

func (e PrivateConnectionType) ToPrivateConnectionTypeOutput() PrivateConnectionTypeOutput {
	return pulumi.ToOutput(e).(PrivateConnectionTypeOutput)
}

func (e PrivateConnectionType) ToPrivateConnectionTypeOutputWithContext(ctx context.Context) PrivateConnectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PrivateConnectionTypeOutput)
}

func (e PrivateConnectionType) ToPrivateConnectionTypePtrOutput() PrivateConnectionTypePtrOutput {
	return e.ToPrivateConnectionTypePtrOutputWithContext(context.Background())
}

func (e PrivateConnectionType) ToPrivateConnectionTypePtrOutputWithContext(ctx context.Context) PrivateConnectionTypePtrOutput {
	return PrivateConnectionType(e).ToPrivateConnectionTypeOutputWithContext(ctx).ToPrivateConnectionTypePtrOutputWithContext(ctx)
}

func (e PrivateConnectionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrivateConnectionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrivateConnectionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PrivateConnectionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PrivateConnectionTypeOutput struct{ *pulumi.OutputState }

func (PrivateConnectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectionType)(nil)).Elem()
}

func (o PrivateConnectionTypeOutput) ToPrivateConnectionTypeOutput() PrivateConnectionTypeOutput {
	return o
}

func (o PrivateConnectionTypeOutput) ToPrivateConnectionTypeOutputWithContext(ctx context.Context) PrivateConnectionTypeOutput {
	return o
}

func (o PrivateConnectionTypeOutput) ToPrivateConnectionTypePtrOutput() PrivateConnectionTypePtrOutput {
	return o.ToPrivateConnectionTypePtrOutputWithContext(context.Background())
}

func (o PrivateConnectionTypeOutput) ToPrivateConnectionTypePtrOutputWithContext(ctx context.Context) PrivateConnectionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateConnectionType) *PrivateConnectionType {
		return &v
	}).(PrivateConnectionTypePtrOutput)
}

func (o PrivateConnectionTypeOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateConnectionType] {
	return pulumix.Output[PrivateConnectionType]{
		OutputState: o.OutputState,
	}
}

func (o PrivateConnectionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PrivateConnectionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrivateConnectionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PrivateConnectionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrivateConnectionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrivateConnectionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PrivateConnectionTypePtrOutput struct{ *pulumi.OutputState }

func (PrivateConnectionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectionType)(nil)).Elem()
}

func (o PrivateConnectionTypePtrOutput) ToPrivateConnectionTypePtrOutput() PrivateConnectionTypePtrOutput {
	return o
}

func (o PrivateConnectionTypePtrOutput) ToPrivateConnectionTypePtrOutputWithContext(ctx context.Context) PrivateConnectionTypePtrOutput {
	return o
}

func (o PrivateConnectionTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateConnectionType] {
	return pulumix.Output[*PrivateConnectionType]{
		OutputState: o.OutputState,
	}
}

func (o PrivateConnectionTypePtrOutput) Elem() PrivateConnectionTypeOutput {
	return o.ApplyT(func(v *PrivateConnectionType) PrivateConnectionType {
		if v != nil {
			return *v
		}
		var ret PrivateConnectionType
		return ret
	}).(PrivateConnectionTypeOutput)
}

func (o PrivateConnectionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrivateConnectionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PrivateConnectionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PrivateConnectionTypeInput is an input type that accepts PrivateConnectionTypeArgs and PrivateConnectionTypeOutput values.
// You can construct a concrete instance of `PrivateConnectionTypeInput` via:
//
//	PrivateConnectionTypeArgs{...}
type PrivateConnectionTypeInput interface {
	pulumi.Input

	ToPrivateConnectionTypeOutput() PrivateConnectionTypeOutput
	ToPrivateConnectionTypeOutputWithContext(context.Context) PrivateConnectionTypeOutput
}

var privateConnectionTypePtrType = reflect.TypeOf((**PrivateConnectionType)(nil)).Elem()

type PrivateConnectionTypePtrInput interface {
	pulumi.Input

	ToPrivateConnectionTypePtrOutput() PrivateConnectionTypePtrOutput
	ToPrivateConnectionTypePtrOutputWithContext(context.Context) PrivateConnectionTypePtrOutput
}

type privateConnectionTypePtr string

func PrivateConnectionTypePtr(v string) PrivateConnectionTypePtrInput {
	return (*privateConnectionTypePtr)(&v)
}

func (*privateConnectionTypePtr) ElementType() reflect.Type {
	return privateConnectionTypePtrType
}

func (in *privateConnectionTypePtr) ToPrivateConnectionTypePtrOutput() PrivateConnectionTypePtrOutput {
	return pulumi.ToOutput(in).(PrivateConnectionTypePtrOutput)
}

func (in *privateConnectionTypePtr) ToPrivateConnectionTypePtrOutputWithContext(ctx context.Context) PrivateConnectionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PrivateConnectionTypePtrOutput)
}

func (in *privateConnectionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PrivateConnectionType] {
	return pulumix.Output[*PrivateConnectionType]{
		OutputState: in.ToPrivateConnectionTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. VMware Engine network type.
type VmwareEngineNetworkType string

const (
	// The default value. This value should never be used.
	VmwareEngineNetworkTypeTypeUnspecified = VmwareEngineNetworkType("TYPE_UNSPECIFIED")
	// Network type used by private clouds created in projects without a network of type `STANDARD`. This network type is no longer used for new VMware Engine private cloud deployments.
	VmwareEngineNetworkTypeLegacy = VmwareEngineNetworkType("LEGACY")
	// Standard network type used for private cloud connectivity.
	VmwareEngineNetworkTypeStandard = VmwareEngineNetworkType("STANDARD")
)

func (VmwareEngineNetworkType) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareEngineNetworkType)(nil)).Elem()
}

func (e VmwareEngineNetworkType) ToVmwareEngineNetworkTypeOutput() VmwareEngineNetworkTypeOutput {
	return pulumi.ToOutput(e).(VmwareEngineNetworkTypeOutput)
}

func (e VmwareEngineNetworkType) ToVmwareEngineNetworkTypeOutputWithContext(ctx context.Context) VmwareEngineNetworkTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VmwareEngineNetworkTypeOutput)
}

func (e VmwareEngineNetworkType) ToVmwareEngineNetworkTypePtrOutput() VmwareEngineNetworkTypePtrOutput {
	return e.ToVmwareEngineNetworkTypePtrOutputWithContext(context.Background())
}

func (e VmwareEngineNetworkType) ToVmwareEngineNetworkTypePtrOutputWithContext(ctx context.Context) VmwareEngineNetworkTypePtrOutput {
	return VmwareEngineNetworkType(e).ToVmwareEngineNetworkTypeOutputWithContext(ctx).ToVmwareEngineNetworkTypePtrOutputWithContext(ctx)
}

func (e VmwareEngineNetworkType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VmwareEngineNetworkType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VmwareEngineNetworkType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VmwareEngineNetworkType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VmwareEngineNetworkTypeOutput struct{ *pulumi.OutputState }

func (VmwareEngineNetworkTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareEngineNetworkType)(nil)).Elem()
}

func (o VmwareEngineNetworkTypeOutput) ToVmwareEngineNetworkTypeOutput() VmwareEngineNetworkTypeOutput {
	return o
}

func (o VmwareEngineNetworkTypeOutput) ToVmwareEngineNetworkTypeOutputWithContext(ctx context.Context) VmwareEngineNetworkTypeOutput {
	return o
}

func (o VmwareEngineNetworkTypeOutput) ToVmwareEngineNetworkTypePtrOutput() VmwareEngineNetworkTypePtrOutput {
	return o.ToVmwareEngineNetworkTypePtrOutputWithContext(context.Background())
}

func (o VmwareEngineNetworkTypeOutput) ToVmwareEngineNetworkTypePtrOutputWithContext(ctx context.Context) VmwareEngineNetworkTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareEngineNetworkType) *VmwareEngineNetworkType {
		return &v
	}).(VmwareEngineNetworkTypePtrOutput)
}

func (o VmwareEngineNetworkTypeOutput) ToOutput(ctx context.Context) pulumix.Output[VmwareEngineNetworkType] {
	return pulumix.Output[VmwareEngineNetworkType]{
		OutputState: o.OutputState,
	}
}

func (o VmwareEngineNetworkTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VmwareEngineNetworkTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VmwareEngineNetworkType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VmwareEngineNetworkTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VmwareEngineNetworkTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VmwareEngineNetworkType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VmwareEngineNetworkTypePtrOutput struct{ *pulumi.OutputState }

func (VmwareEngineNetworkTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareEngineNetworkType)(nil)).Elem()
}

func (o VmwareEngineNetworkTypePtrOutput) ToVmwareEngineNetworkTypePtrOutput() VmwareEngineNetworkTypePtrOutput {
	return o
}

func (o VmwareEngineNetworkTypePtrOutput) ToVmwareEngineNetworkTypePtrOutputWithContext(ctx context.Context) VmwareEngineNetworkTypePtrOutput {
	return o
}

func (o VmwareEngineNetworkTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VmwareEngineNetworkType] {
	return pulumix.Output[*VmwareEngineNetworkType]{
		OutputState: o.OutputState,
	}
}

func (o VmwareEngineNetworkTypePtrOutput) Elem() VmwareEngineNetworkTypeOutput {
	return o.ApplyT(func(v *VmwareEngineNetworkType) VmwareEngineNetworkType {
		if v != nil {
			return *v
		}
		var ret VmwareEngineNetworkType
		return ret
	}).(VmwareEngineNetworkTypeOutput)
}

func (o VmwareEngineNetworkTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VmwareEngineNetworkTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VmwareEngineNetworkType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VmwareEngineNetworkTypeInput is an input type that accepts VmwareEngineNetworkTypeArgs and VmwareEngineNetworkTypeOutput values.
// You can construct a concrete instance of `VmwareEngineNetworkTypeInput` via:
//
//	VmwareEngineNetworkTypeArgs{...}
type VmwareEngineNetworkTypeInput interface {
	pulumi.Input

	ToVmwareEngineNetworkTypeOutput() VmwareEngineNetworkTypeOutput
	ToVmwareEngineNetworkTypeOutputWithContext(context.Context) VmwareEngineNetworkTypeOutput
}

var vmwareEngineNetworkTypePtrType = reflect.TypeOf((**VmwareEngineNetworkType)(nil)).Elem()

type VmwareEngineNetworkTypePtrInput interface {
	pulumi.Input

	ToVmwareEngineNetworkTypePtrOutput() VmwareEngineNetworkTypePtrOutput
	ToVmwareEngineNetworkTypePtrOutputWithContext(context.Context) VmwareEngineNetworkTypePtrOutput
}

type vmwareEngineNetworkTypePtr string

func VmwareEngineNetworkTypePtr(v string) VmwareEngineNetworkTypePtrInput {
	return (*vmwareEngineNetworkTypePtr)(&v)
}

func (*vmwareEngineNetworkTypePtr) ElementType() reflect.Type {
	return vmwareEngineNetworkTypePtrType
}

func (in *vmwareEngineNetworkTypePtr) ToVmwareEngineNetworkTypePtrOutput() VmwareEngineNetworkTypePtrOutput {
	return pulumi.ToOutput(in).(VmwareEngineNetworkTypePtrOutput)
}

func (in *vmwareEngineNetworkTypePtr) ToVmwareEngineNetworkTypePtrOutputWithContext(ctx context.Context) VmwareEngineNetworkTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VmwareEngineNetworkTypePtrOutput)
}

func (in *vmwareEngineNetworkTypePtr) ToOutput(ctx context.Context) pulumix.Output[*VmwareEngineNetworkType] {
	return pulumix.Output[*VmwareEngineNetworkType]{
		OutputState: in.ToVmwareEngineNetworkTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypeInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypePtrInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalAccessRuleActionInput)(nil)).Elem(), ExternalAccessRuleAction("ACTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalAccessRuleActionPtrInput)(nil)).Elem(), ExternalAccessRuleAction("ACTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingServerProtocolInput)(nil)).Elem(), LoggingServerProtocol("PROTOCOL_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingServerProtocolPtrInput)(nil)).Elem(), LoggingServerProtocol("PROTOCOL_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingServerSourceTypeInput)(nil)).Elem(), LoggingServerSourceType("SOURCE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingServerSourceTypePtrInput)(nil)).Elem(), LoggingServerSourceType("SOURCE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPeeringPeerNetworkTypeInput)(nil)).Elem(), NetworkPeeringPeerNetworkType("PEER_NETWORK_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPeeringPeerNetworkTypePtrInput)(nil)).Elem(), NetworkPeeringPeerNetworkType("PEER_NETWORK_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateCloudTypeInput)(nil)).Elem(), PrivateCloudType("STANDARD"))
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateCloudTypePtrInput)(nil)).Elem(), PrivateCloudType("STANDARD"))
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionRoutingModeInput)(nil)).Elem(), PrivateConnectionRoutingMode("ROUTING_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionRoutingModePtrInput)(nil)).Elem(), PrivateConnectionRoutingMode("ROUTING_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionTypeInput)(nil)).Elem(), PrivateConnectionType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionTypePtrInput)(nil)).Elem(), PrivateConnectionType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareEngineNetworkTypeInput)(nil)).Elem(), VmwareEngineNetworkType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareEngineNetworkTypePtrInput)(nil)).Elem(), VmwareEngineNetworkType("TYPE_UNSPECIFIED"))
	pulumi.RegisterOutputType(AuditLogConfigLogTypeOutput{})
	pulumi.RegisterOutputType(AuditLogConfigLogTypePtrOutput{})
	pulumi.RegisterOutputType(ExternalAccessRuleActionOutput{})
	pulumi.RegisterOutputType(ExternalAccessRuleActionPtrOutput{})
	pulumi.RegisterOutputType(LoggingServerProtocolOutput{})
	pulumi.RegisterOutputType(LoggingServerProtocolPtrOutput{})
	pulumi.RegisterOutputType(LoggingServerSourceTypeOutput{})
	pulumi.RegisterOutputType(LoggingServerSourceTypePtrOutput{})
	pulumi.RegisterOutputType(NetworkPeeringPeerNetworkTypeOutput{})
	pulumi.RegisterOutputType(NetworkPeeringPeerNetworkTypePtrOutput{})
	pulumi.RegisterOutputType(PrivateCloudTypeOutput{})
	pulumi.RegisterOutputType(PrivateCloudTypePtrOutput{})
	pulumi.RegisterOutputType(PrivateConnectionRoutingModeOutput{})
	pulumi.RegisterOutputType(PrivateConnectionRoutingModePtrOutput{})
	pulumi.RegisterOutputType(PrivateConnectionTypeOutput{})
	pulumi.RegisterOutputType(PrivateConnectionTypePtrOutput{})
	pulumi.RegisterOutputType(VmwareEngineNetworkTypeOutput{})
	pulumi.RegisterOutputType(VmwareEngineNetworkTypePtrOutput{})
}
