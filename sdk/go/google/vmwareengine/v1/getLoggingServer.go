// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a logging server.
func LookupLoggingServer(ctx *pulumi.Context, args *LookupLoggingServerArgs, opts ...pulumi.InvokeOption) (*LookupLoggingServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoggingServerResult
	err := ctx.Invoke("google-native:vmwareengine/v1:getLoggingServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLoggingServerArgs struct {
	Location        string  `pulumi:"location"`
	LoggingServerId string  `pulumi:"loggingServerId"`
	PrivateCloudId  string  `pulumi:"privateCloudId"`
	Project         *string `pulumi:"project"`
}

type LookupLoggingServerResult struct {
	// Creation time of this resource.
	CreateTime string `pulumi:"createTime"`
	// Fully-qualified domain name (FQDN) or IP Address of the logging server.
	Hostname string `pulumi:"hostname"`
	// The resource name of this logging server. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`
	Name string `pulumi:"name"`
	// Port number at which the logging server receives logs.
	Port int `pulumi:"port"`
	// Protocol used by vCenter to send logs to a logging server.
	Protocol string `pulumi:"protocol"`
	// The type of component that produces logs that will be forwarded to this logging server.
	SourceType string `pulumi:"sourceType"`
	// System-generated unique identifier for the resource.
	Uid string `pulumi:"uid"`
	// Last update time of this resource.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupLoggingServerOutput(ctx *pulumi.Context, args LookupLoggingServerOutputArgs, opts ...pulumi.InvokeOption) LookupLoggingServerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLoggingServerResult, error) {
			args := v.(LookupLoggingServerArgs)
			r, err := LookupLoggingServer(ctx, &args, opts...)
			var s LookupLoggingServerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLoggingServerResultOutput)
}

type LookupLoggingServerOutputArgs struct {
	Location        pulumi.StringInput    `pulumi:"location"`
	LoggingServerId pulumi.StringInput    `pulumi:"loggingServerId"`
	PrivateCloudId  pulumi.StringInput    `pulumi:"privateCloudId"`
	Project         pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupLoggingServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoggingServerArgs)(nil)).Elem()
}

type LookupLoggingServerResultOutput struct{ *pulumi.OutputState }

func (LookupLoggingServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoggingServerResult)(nil)).Elem()
}

func (o LookupLoggingServerResultOutput) ToLookupLoggingServerResultOutput() LookupLoggingServerResultOutput {
	return o
}

func (o LookupLoggingServerResultOutput) ToLookupLoggingServerResultOutputWithContext(ctx context.Context) LookupLoggingServerResultOutput {
	return o
}

// Creation time of this resource.
func (o LookupLoggingServerResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoggingServerResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Fully-qualified domain name (FQDN) or IP Address of the logging server.
func (o LookupLoggingServerResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoggingServerResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// The resource name of this logging server. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`
func (o LookupLoggingServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoggingServerResult) string { return v.Name }).(pulumi.StringOutput)
}

// Port number at which the logging server receives logs.
func (o LookupLoggingServerResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoggingServerResult) int { return v.Port }).(pulumi.IntOutput)
}

// Protocol used by vCenter to send logs to a logging server.
func (o LookupLoggingServerResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoggingServerResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// The type of component that produces logs that will be forwarded to this logging server.
func (o LookupLoggingServerResultOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoggingServerResult) string { return v.SourceType }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o LookupLoggingServerResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoggingServerResult) string { return v.Uid }).(pulumi.StringOutput)
}

// Last update time of this resource.
func (o LookupLoggingServerResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoggingServerResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoggingServerResultOutput{})
}
