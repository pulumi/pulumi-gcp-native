// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new private connection that can be used for accessing private Clouds.
// Auto-naming is currently not supported for this resource.
type PrivateConnection struct {
	pulumi.CustomResourceState

	// Creation time of this resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. User-provided description for this private connection.
	Description pulumi.StringOutput `pulumi:"description"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// The resource name of the private connection. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateConnections/my-connection`
	Name pulumi.StringOutput `pulumi:"name"`
	// VPC network peering id between given network VPC and VMwareEngineNetwork.
	PeeringId pulumi.StringOutput `pulumi:"peeringId"`
	// Peering state between service network and VMware Engine network.
	PeeringState pulumi.StringOutput `pulumi:"peeringState"`
	// Required. The user-provided identifier of the new private connection. This identifier must be unique among private connection resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	PrivateConnectionId pulumi.StringOutput `pulumi:"privateConnectionId"`
	Project             pulumi.StringOutput `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Optional. Routing Mode. Default value is set to GLOBAL. For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.
	RoutingMode pulumi.StringOutput `pulumi:"routingMode"`
	// Service network to create private connection. Specify the name in the following form: `projects/{project}/global/networks/{network_id}` For type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC, e.g. projects/project-tp/global/networks/servicenetworking. For type = NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g. projects/project-tp/global/networks/netapp-tenant-vpc. For type = DELL_POWERSCALE, this field represent Dell service VPC, e.g. projects/project-tp/global/networks/dell-tenant-vpc. For type= THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other producer VPC to which the VMware Engine Network needs to be connected, e.g. projects/project/global/networks/vpc.
	ServiceNetwork pulumi.StringOutput `pulumi:"serviceNetwork"`
	// State of the private connection.
	State pulumi.StringOutput `pulumi:"state"`
	// Private connection type.
	Type pulumi.StringOutput `pulumi:"type"`
	// System-generated unique identifier for the resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Last update time of this resource.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The relative resource name of Legacy VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}`, `{location}` will be same as specified in private connection resource name and `{vmware_engine_network_id}` will be in the form of `{location}`-default e.g. projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.
	VmwareEngineNetwork pulumi.StringOutput `pulumi:"vmwareEngineNetwork"`
	// The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
	VmwareEngineNetworkCanonical pulumi.StringOutput `pulumi:"vmwareEngineNetworkCanonical"`
}

// NewPrivateConnection registers a new resource with the given unique name, arguments, and options.
func NewPrivateConnection(ctx *pulumi.Context,
	name string, args *PrivateConnectionArgs, opts ...pulumi.ResourceOption) (*PrivateConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateConnectionId'")
	}
	if args.ServiceNetwork == nil {
		return nil, errors.New("invalid value for required argument 'ServiceNetwork'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VmwareEngineNetwork == nil {
		return nil, errors.New("invalid value for required argument 'VmwareEngineNetwork'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"privateConnectionId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivateConnection
	err := ctx.RegisterResource("google-native:vmwareengine/v1:PrivateConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateConnection gets an existing PrivateConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateConnectionState, opts ...pulumi.ResourceOption) (*PrivateConnection, error) {
	var resource PrivateConnection
	err := ctx.ReadResource("google-native:vmwareengine/v1:PrivateConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateConnection resources.
type privateConnectionState struct {
}

type PrivateConnectionState struct {
}

func (PrivateConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateConnectionState)(nil)).Elem()
}

type privateConnectionArgs struct {
	// Optional. User-provided description for this private connection.
	Description *string `pulumi:"description"`
	Location    *string `pulumi:"location"`
	// Required. The user-provided identifier of the new private connection. This identifier must be unique among private connection resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	PrivateConnectionId string  `pulumi:"privateConnectionId"`
	Project             *string `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Optional. Routing Mode. Default value is set to GLOBAL. For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.
	RoutingMode *PrivateConnectionRoutingMode `pulumi:"routingMode"`
	// Service network to create private connection. Specify the name in the following form: `projects/{project}/global/networks/{network_id}` For type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC, e.g. projects/project-tp/global/networks/servicenetworking. For type = NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g. projects/project-tp/global/networks/netapp-tenant-vpc. For type = DELL_POWERSCALE, this field represent Dell service VPC, e.g. projects/project-tp/global/networks/dell-tenant-vpc. For type= THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other producer VPC to which the VMware Engine Network needs to be connected, e.g. projects/project/global/networks/vpc.
	ServiceNetwork string `pulumi:"serviceNetwork"`
	// Private connection type.
	Type PrivateConnectionType `pulumi:"type"`
	// The relative resource name of Legacy VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}`, `{location}` will be same as specified in private connection resource name and `{vmware_engine_network_id}` will be in the form of `{location}`-default e.g. projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.
	VmwareEngineNetwork string `pulumi:"vmwareEngineNetwork"`
}

// The set of arguments for constructing a PrivateConnection resource.
type PrivateConnectionArgs struct {
	// Optional. User-provided description for this private connection.
	Description pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// Required. The user-provided identifier of the new private connection. This identifier must be unique among private connection resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
	PrivateConnectionId pulumi.StringInput
	Project             pulumi.StringPtrInput
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Optional. Routing Mode. Default value is set to GLOBAL. For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.
	RoutingMode PrivateConnectionRoutingModePtrInput
	// Service network to create private connection. Specify the name in the following form: `projects/{project}/global/networks/{network_id}` For type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC, e.g. projects/project-tp/global/networks/servicenetworking. For type = NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g. projects/project-tp/global/networks/netapp-tenant-vpc. For type = DELL_POWERSCALE, this field represent Dell service VPC, e.g. projects/project-tp/global/networks/dell-tenant-vpc. For type= THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other producer VPC to which the VMware Engine Network needs to be connected, e.g. projects/project/global/networks/vpc.
	ServiceNetwork pulumi.StringInput
	// Private connection type.
	Type PrivateConnectionTypeInput
	// The relative resource name of Legacy VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}`, `{location}` will be same as specified in private connection resource name and `{vmware_engine_network_id}` will be in the form of `{location}`-default e.g. projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.
	VmwareEngineNetwork pulumi.StringInput
}

func (PrivateConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateConnectionArgs)(nil)).Elem()
}

type PrivateConnectionInput interface {
	pulumi.Input

	ToPrivateConnectionOutput() PrivateConnectionOutput
	ToPrivateConnectionOutputWithContext(ctx context.Context) PrivateConnectionOutput
}

func (*PrivateConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnection)(nil)).Elem()
}

func (i *PrivateConnection) ToPrivateConnectionOutput() PrivateConnectionOutput {
	return i.ToPrivateConnectionOutputWithContext(context.Background())
}

func (i *PrivateConnection) ToPrivateConnectionOutputWithContext(ctx context.Context) PrivateConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionOutput)
}

func (i *PrivateConnection) ToOutput(ctx context.Context) pulumix.Output[*PrivateConnection] {
	return pulumix.Output[*PrivateConnection]{
		OutputState: i.ToPrivateConnectionOutputWithContext(ctx).OutputState,
	}
}

type PrivateConnectionOutput struct{ *pulumi.OutputState }

func (PrivateConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnection)(nil)).Elem()
}

func (o PrivateConnectionOutput) ToPrivateConnectionOutput() PrivateConnectionOutput {
	return o
}

func (o PrivateConnectionOutput) ToPrivateConnectionOutputWithContext(ctx context.Context) PrivateConnectionOutput {
	return o
}

func (o PrivateConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateConnection] {
	return pulumix.Output[*PrivateConnection]{
		OutputState: o.OutputState,
	}
}

// Creation time of this resource.
func (o PrivateConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. User-provided description for this private connection.
func (o PrivateConnectionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o PrivateConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the private connection. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateConnections/my-connection`
func (o PrivateConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// VPC network peering id between given network VPC and VMwareEngineNetwork.
func (o PrivateConnectionOutput) PeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.PeeringId }).(pulumi.StringOutput)
}

// Peering state between service network and VMware Engine network.
func (o PrivateConnectionOutput) PeeringState() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.PeeringState }).(pulumi.StringOutput)
}

// Required. The user-provided identifier of the new private connection. This identifier must be unique among private connection resources within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
func (o PrivateConnectionOutput) PrivateConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.PrivateConnectionId }).(pulumi.StringOutput)
}

func (o PrivateConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o PrivateConnectionOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Optional. Routing Mode. Default value is set to GLOBAL. For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.
func (o PrivateConnectionOutput) RoutingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.RoutingMode }).(pulumi.StringOutput)
}

// Service network to create private connection. Specify the name in the following form: `projects/{project}/global/networks/{network_id}` For type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC, e.g. projects/project-tp/global/networks/servicenetworking. For type = NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g. projects/project-tp/global/networks/netapp-tenant-vpc. For type = DELL_POWERSCALE, this field represent Dell service VPC, e.g. projects/project-tp/global/networks/dell-tenant-vpc. For type= THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other producer VPC to which the VMware Engine Network needs to be connected, e.g. projects/project/global/networks/vpc.
func (o PrivateConnectionOutput) ServiceNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.ServiceNetwork }).(pulumi.StringOutput)
}

// State of the private connection.
func (o PrivateConnectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Private connection type.
func (o PrivateConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// System-generated unique identifier for the resource.
func (o PrivateConnectionOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Last update time of this resource.
func (o PrivateConnectionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The relative resource name of Legacy VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}`, `{location}` will be same as specified in private connection resource name and `{vmware_engine_network_id}` will be in the form of `{location}`-default e.g. projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.
func (o PrivateConnectionOutput) VmwareEngineNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.VmwareEngineNetwork }).(pulumi.StringOutput)
}

// The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
func (o PrivateConnectionOutput) VmwareEngineNetworkCanonical() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateConnection) pulumi.StringOutput { return v.VmwareEngineNetworkCanonical }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionInput)(nil)).Elem(), &PrivateConnection{})
	pulumi.RegisterOutputType(PrivateConnectionOutput{})
}
