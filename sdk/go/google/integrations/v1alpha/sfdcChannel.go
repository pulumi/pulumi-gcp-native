// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an sfdc channel record. Store the sfdc channel in Spanner. Returns the sfdc channel.
// Auto-naming is currently not supported for this resource.
type SfdcChannel struct {
	pulumi.CustomResourceState

	// The Channel topic defined by salesforce once an channel is opened
	ChannelTopic pulumi.StringOutput `pulumi:"channelTopic"`
	// Time when the channel is created
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Time when the channel was deleted. Empty if not deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// The description for this channel
	Description pulumi.StringOutput `pulumi:"description"`
	// Client level unique name/alias to easily reference a channel.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Indicated if a channel has any active integrations referencing it. Set to false when the channel is created, and set to true if there is any integration published with the channel configured in it.
	IsActive pulumi.BoolOutput `pulumi:"isActive"`
	// Last sfdc messsage replay id for channel
	LastReplayId pulumi.StringOutput `pulumi:"lastReplayId"`
	Location     pulumi.StringOutput `pulumi:"location"`
	// Resource name of the SFDC channel projects/{project}/locations/{location}/sfdcInstances/{sfdc_instance}/sfdcChannels/{sfdc_channel}.
	Name           pulumi.StringOutput `pulumi:"name"`
	ProductId      pulumi.StringOutput `pulumi:"productId"`
	Project        pulumi.StringOutput `pulumi:"project"`
	SfdcInstanceId pulumi.StringOutput `pulumi:"sfdcInstanceId"`
	// Time when the channel was last updated
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSfdcChannel registers a new resource with the given unique name, arguments, and options.
func NewSfdcChannel(ctx *pulumi.Context,
	name string, args *SfdcChannelArgs, opts ...pulumi.ResourceOption) (*SfdcChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	if args.SfdcInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'SfdcInstanceId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"productId",
		"project",
		"sfdcInstanceId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SfdcChannel
	err := ctx.RegisterResource("google-native:integrations/v1alpha:SfdcChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSfdcChannel gets an existing SfdcChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSfdcChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SfdcChannelState, opts ...pulumi.ResourceOption) (*SfdcChannel, error) {
	var resource SfdcChannel
	err := ctx.ReadResource("google-native:integrations/v1alpha:SfdcChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SfdcChannel resources.
type sfdcChannelState struct {
}

type SfdcChannelState struct {
}

func (SfdcChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*sfdcChannelState)(nil)).Elem()
}

type sfdcChannelArgs struct {
	// The Channel topic defined by salesforce once an channel is opened
	ChannelTopic *string `pulumi:"channelTopic"`
	// The description for this channel
	Description *string `pulumi:"description"`
	// Client level unique name/alias to easily reference a channel.
	DisplayName *string `pulumi:"displayName"`
	// Indicated if a channel has any active integrations referencing it. Set to false when the channel is created, and set to true if there is any integration published with the channel configured in it.
	IsActive *bool `pulumi:"isActive"`
	// Last sfdc messsage replay id for channel
	LastReplayId *string `pulumi:"lastReplayId"`
	Location     *string `pulumi:"location"`
	// Resource name of the SFDC channel projects/{project}/locations/{location}/sfdcInstances/{sfdc_instance}/sfdcChannels/{sfdc_channel}.
	Name           *string `pulumi:"name"`
	ProductId      string  `pulumi:"productId"`
	Project        *string `pulumi:"project"`
	SfdcInstanceId string  `pulumi:"sfdcInstanceId"`
}

// The set of arguments for constructing a SfdcChannel resource.
type SfdcChannelArgs struct {
	// The Channel topic defined by salesforce once an channel is opened
	ChannelTopic pulumi.StringPtrInput
	// The description for this channel
	Description pulumi.StringPtrInput
	// Client level unique name/alias to easily reference a channel.
	DisplayName pulumi.StringPtrInput
	// Indicated if a channel has any active integrations referencing it. Set to false when the channel is created, and set to true if there is any integration published with the channel configured in it.
	IsActive pulumi.BoolPtrInput
	// Last sfdc messsage replay id for channel
	LastReplayId pulumi.StringPtrInput
	Location     pulumi.StringPtrInput
	// Resource name of the SFDC channel projects/{project}/locations/{location}/sfdcInstances/{sfdc_instance}/sfdcChannels/{sfdc_channel}.
	Name           pulumi.StringPtrInput
	ProductId      pulumi.StringInput
	Project        pulumi.StringPtrInput
	SfdcInstanceId pulumi.StringInput
}

func (SfdcChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sfdcChannelArgs)(nil)).Elem()
}

type SfdcChannelInput interface {
	pulumi.Input

	ToSfdcChannelOutput() SfdcChannelOutput
	ToSfdcChannelOutputWithContext(ctx context.Context) SfdcChannelOutput
}

func (*SfdcChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**SfdcChannel)(nil)).Elem()
}

func (i *SfdcChannel) ToSfdcChannelOutput() SfdcChannelOutput {
	return i.ToSfdcChannelOutputWithContext(context.Background())
}

func (i *SfdcChannel) ToSfdcChannelOutputWithContext(ctx context.Context) SfdcChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfdcChannelOutput)
}

type SfdcChannelOutput struct{ *pulumi.OutputState }

func (SfdcChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SfdcChannel)(nil)).Elem()
}

func (o SfdcChannelOutput) ToSfdcChannelOutput() SfdcChannelOutput {
	return o
}

func (o SfdcChannelOutput) ToSfdcChannelOutputWithContext(ctx context.Context) SfdcChannelOutput {
	return o
}

// The Channel topic defined by salesforce once an channel is opened
func (o SfdcChannelOutput) ChannelTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.ChannelTopic }).(pulumi.StringOutput)
}

// Time when the channel is created
func (o SfdcChannelOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Time when the channel was deleted. Empty if not deleted.
func (o SfdcChannelOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// The description for this channel
func (o SfdcChannelOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Client level unique name/alias to easily reference a channel.
func (o SfdcChannelOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Indicated if a channel has any active integrations referencing it. Set to false when the channel is created, and set to true if there is any integration published with the channel configured in it.
func (o SfdcChannelOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.BoolOutput { return v.IsActive }).(pulumi.BoolOutput)
}

// Last sfdc messsage replay id for channel
func (o SfdcChannelOutput) LastReplayId() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.LastReplayId }).(pulumi.StringOutput)
}

func (o SfdcChannelOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name of the SFDC channel projects/{project}/locations/{location}/sfdcInstances/{sfdc_instance}/sfdcChannels/{sfdc_channel}.
func (o SfdcChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SfdcChannelOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

func (o SfdcChannelOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o SfdcChannelOutput) SfdcInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.SfdcInstanceId }).(pulumi.StringOutput)
}

// Time when the channel was last updated
func (o SfdcChannelOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SfdcChannel) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SfdcChannelInput)(nil)).Elem(), &SfdcChannel{})
	pulumi.RegisterOutputType(SfdcChannelOutput{})
}
