// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get a certificates in the specified project.
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateResult
	err := ctx.Invoke("google-native:integrations/v1alpha:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCertificateArgs struct {
	CertificateId string  `pulumi:"certificateId"`
	Location      string  `pulumi:"location"`
	ProductId     string  `pulumi:"productId"`
	Project       *string `pulumi:"project"`
}

type LookupCertificateResult struct {
	// Status of the certificate
	CertificateStatus string `pulumi:"certificateStatus"`
	// Immutable. Credential id that will be used to register with trawler INTERNAL_ONLY
	CredentialId string `pulumi:"credentialId"`
	// Description of the certificate
	Description string `pulumi:"description"`
	// Name of the certificate
	DisplayName string `pulumi:"displayName"`
	// Auto generated primary key
	Name string `pulumi:"name"`
	// Input only. Raw client certificate which would be registered with trawler
	RawCertificate GoogleCloudIntegrationsV1alphaClientCertificateResponse `pulumi:"rawCertificate"`
	// Immutable. Requestor ID to be used to register certificate with trawler
	RequestorId string `pulumi:"requestorId"`
	// The timestamp after which certificate will expire
	ValidEndTime string `pulumi:"validEndTime"`
	// The timestamp after which certificate will be valid
	ValidStartTime string `pulumi:"validStartTime"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateResult, error) {
			args := v.(LookupCertificateArgs)
			r, err := LookupCertificate(ctx, &args, opts...)
			var s LookupCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCertificateResultOutput)
}

type LookupCertificateOutputArgs struct {
	CertificateId pulumi.StringInput    `pulumi:"certificateId"`
	Location      pulumi.StringInput    `pulumi:"location"`
	ProductId     pulumi.StringInput    `pulumi:"productId"`
	Project       pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCertificateResult] {
	return pulumix.Output[LookupCertificateResult]{
		OutputState: o.OutputState,
	}
}

// Status of the certificate
func (o LookupCertificateResultOutput) CertificateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateStatus }).(pulumi.StringOutput)
}

// Immutable. Credential id that will be used to register with trawler INTERNAL_ONLY
func (o LookupCertificateResultOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CredentialId }).(pulumi.StringOutput)
}

// Description of the certificate
func (o LookupCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

// Name of the certificate
func (o LookupCertificateResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Auto generated primary key
func (o LookupCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Input only. Raw client certificate which would be registered with trawler
func (o LookupCertificateResultOutput) RawCertificate() GoogleCloudIntegrationsV1alphaClientCertificateResponseOutput {
	return o.ApplyT(func(v LookupCertificateResult) GoogleCloudIntegrationsV1alphaClientCertificateResponse {
		return v.RawCertificate
	}).(GoogleCloudIntegrationsV1alphaClientCertificateResponseOutput)
}

// Immutable. Requestor ID to be used to register certificate with trawler
func (o LookupCertificateResultOutput) RequestorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.RequestorId }).(pulumi.StringOutput)
}

// The timestamp after which certificate will expire
func (o LookupCertificateResultOutput) ValidEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ValidEndTime }).(pulumi.StringOutput)
}

// The timestamp after which certificate will be valid
func (o LookupCertificateResultOutput) ValidStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ValidStartTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
