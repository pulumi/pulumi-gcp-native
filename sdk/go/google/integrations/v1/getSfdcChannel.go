// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets an sfdc channel. If the channel doesn't exist, Code.NOT_FOUND exception will be thrown.
func LookupSfdcChannel(ctx *pulumi.Context, args *LookupSfdcChannelArgs, opts ...pulumi.InvokeOption) (*LookupSfdcChannelResult, error) {
	var rv LookupSfdcChannelResult
	err := ctx.Invoke("google-native:integrations/v1:getSfdcChannel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSfdcChannelArgs struct {
	Location       string  `pulumi:"location"`
	ProductId      string  `pulumi:"productId"`
	Project        *string `pulumi:"project"`
	SfdcChannelId  string  `pulumi:"sfdcChannelId"`
	SfdcInstanceId string  `pulumi:"sfdcInstanceId"`
}

type LookupSfdcChannelResult struct {
	// The Channel topic defined by salesforce once an channel is opened
	ChannelTopic string `pulumi:"channelTopic"`
	// Time when the channel is created
	CreateTime string `pulumi:"createTime"`
	// Time when the channel was deleted. Empty if not deleted.
	DeleteTime string `pulumi:"deleteTime"`
	// The description for this channel
	Description string `pulumi:"description"`
	// Client level unique name/alias to easily reference a channel.
	DisplayName string `pulumi:"displayName"`
	// Indicated if a channel has any active integrations referencing it. Set to false when the channel is created, and set to true if there is any integration published with the channel configured in it.
	IsActive bool `pulumi:"isActive"`
	// Last sfdc messsage replay id for channel
	LastReplayId string `pulumi:"lastReplayId"`
	// Resource name of the SFDC channel projects/{project}/locations/{location}/sfdcInstances/{sfdc_instance}/sfdcChannels/{sfdc_channel}.
	Name string `pulumi:"name"`
	// Time when the channel was last updated
	UpdateTime string `pulumi:"updateTime"`
}

func LookupSfdcChannelOutput(ctx *pulumi.Context, args LookupSfdcChannelOutputArgs, opts ...pulumi.InvokeOption) LookupSfdcChannelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSfdcChannelResult, error) {
			args := v.(LookupSfdcChannelArgs)
			r, err := LookupSfdcChannel(ctx, &args, opts...)
			var s LookupSfdcChannelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSfdcChannelResultOutput)
}

type LookupSfdcChannelOutputArgs struct {
	Location       pulumi.StringInput    `pulumi:"location"`
	ProductId      pulumi.StringInput    `pulumi:"productId"`
	Project        pulumi.StringPtrInput `pulumi:"project"`
	SfdcChannelId  pulumi.StringInput    `pulumi:"sfdcChannelId"`
	SfdcInstanceId pulumi.StringInput    `pulumi:"sfdcInstanceId"`
}

func (LookupSfdcChannelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSfdcChannelArgs)(nil)).Elem()
}

type LookupSfdcChannelResultOutput struct{ *pulumi.OutputState }

func (LookupSfdcChannelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSfdcChannelResult)(nil)).Elem()
}

func (o LookupSfdcChannelResultOutput) ToLookupSfdcChannelResultOutput() LookupSfdcChannelResultOutput {
	return o
}

func (o LookupSfdcChannelResultOutput) ToLookupSfdcChannelResultOutputWithContext(ctx context.Context) LookupSfdcChannelResultOutput {
	return o
}

// The Channel topic defined by salesforce once an channel is opened
func (o LookupSfdcChannelResultOutput) ChannelTopic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSfdcChannelResult) string { return v.ChannelTopic }).(pulumi.StringOutput)
}

// Time when the channel is created
func (o LookupSfdcChannelResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSfdcChannelResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Time when the channel was deleted. Empty if not deleted.
func (o LookupSfdcChannelResultOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSfdcChannelResult) string { return v.DeleteTime }).(pulumi.StringOutput)
}

// The description for this channel
func (o LookupSfdcChannelResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSfdcChannelResult) string { return v.Description }).(pulumi.StringOutput)
}

// Client level unique name/alias to easily reference a channel.
func (o LookupSfdcChannelResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSfdcChannelResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Indicated if a channel has any active integrations referencing it. Set to false when the channel is created, and set to true if there is any integration published with the channel configured in it.
func (o LookupSfdcChannelResultOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSfdcChannelResult) bool { return v.IsActive }).(pulumi.BoolOutput)
}

// Last sfdc messsage replay id for channel
func (o LookupSfdcChannelResultOutput) LastReplayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSfdcChannelResult) string { return v.LastReplayId }).(pulumi.StringOutput)
}

// Resource name of the SFDC channel projects/{project}/locations/{location}/sfdcInstances/{sfdc_instance}/sfdcChannels/{sfdc_channel}.
func (o LookupSfdcChannelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSfdcChannelResult) string { return v.Name }).(pulumi.StringOutput)
}

// Time when the channel was last updated
func (o LookupSfdcChannelResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSfdcChannelResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSfdcChannelResultOutput{})
}
