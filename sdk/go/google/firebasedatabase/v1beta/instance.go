// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Requests that a new DatabaseInstance be created. The state of a successfully created DatabaseInstance is ACTIVE. Only available for projects on the Blaze plan. Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo. Note that it might take a few minutes for billing enablement state to propagate to Firebase systems.
type Instance struct {
	pulumi.CustomResourceState

	// Output Only. The globally unique hostname of the database.
	DatabaseUrl pulumi.StringOutput `pulumi:"databaseUrl"`
	// The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource name of the project this instance belongs to. For example: `projects/{project-number}`.
	Project pulumi.StringOutput `pulumi:"project"`
	// The database's lifecycle state. Read-only.
	State pulumi.StringOutput `pulumi:"state"`
	// Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		args = &InstanceArgs{}
	}

	var resource Instance
	err := ctx.RegisterResource("google-native:firebasedatabase/v1beta:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("google-native:firebasedatabase/v1beta:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
}

type InstanceState struct {
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The globally unique identifier of the database instance.
	DatabaseId *string `pulumi:"databaseId"`
	Location   *string `pulumi:"location"`
	// The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
	Type *InstanceType `pulumi:"type"`
	// When set to true, the request will be validated but not submitted.
	ValidateOnly *string `pulumi:"validateOnly"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The globally unique identifier of the database instance.
	DatabaseId pulumi.StringPtrInput
	Location   pulumi.StringPtrInput
	// The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
	Type InstanceTypePtrInput
	// When set to true, the request will be validated but not submitted.
	ValidateOnly pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Output Only. The globally unique hostname of the database.
func (o InstanceOutput) DatabaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DatabaseUrl }).(pulumi.StringOutput)
}

// The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource name of the project this instance belongs to. For example: `projects/{project-number}`.
func (o InstanceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The database's lifecycle state. Read-only.
func (o InstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
func (o InstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterOutputType(InstanceOutput{})
}
