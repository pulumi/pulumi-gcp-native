// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets a notification config.
func LookupOrganizationNotificationConfig(ctx *pulumi.Context, args *LookupOrganizationNotificationConfigArgs, opts ...pulumi.InvokeOption) (*LookupOrganizationNotificationConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOrganizationNotificationConfigResult
	err := ctx.Invoke("google-native:securitycenter/v1:getOrganizationNotificationConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupOrganizationNotificationConfigArgs struct {
	NotificationConfigId string `pulumi:"notificationConfigId"`
	OrganizationId       string `pulumi:"organizationId"`
}

type LookupOrganizationNotificationConfigResult struct {
	// The description of the notification config (max of 1024 characters).
	Description string `pulumi:"description"`
	// The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/notificationConfigs/notify_public_bucket", "folders/{folder_id}/notificationConfigs/notify_public_bucket", or "projects/{project_id}/notificationConfigs/notify_public_bucket".
	Name string `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic string `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	StreamingConfig StreamingConfigResponse `pulumi:"streamingConfig"`
}

func LookupOrganizationNotificationConfigOutput(ctx *pulumi.Context, args LookupOrganizationNotificationConfigOutputArgs, opts ...pulumi.InvokeOption) LookupOrganizationNotificationConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOrganizationNotificationConfigResult, error) {
			args := v.(LookupOrganizationNotificationConfigArgs)
			r, err := LookupOrganizationNotificationConfig(ctx, &args, opts...)
			var s LookupOrganizationNotificationConfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOrganizationNotificationConfigResultOutput)
}

type LookupOrganizationNotificationConfigOutputArgs struct {
	NotificationConfigId pulumi.StringInput `pulumi:"notificationConfigId"`
	OrganizationId       pulumi.StringInput `pulumi:"organizationId"`
}

func (LookupOrganizationNotificationConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrganizationNotificationConfigArgs)(nil)).Elem()
}

type LookupOrganizationNotificationConfigResultOutput struct{ *pulumi.OutputState }

func (LookupOrganizationNotificationConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOrganizationNotificationConfigResult)(nil)).Elem()
}

func (o LookupOrganizationNotificationConfigResultOutput) ToLookupOrganizationNotificationConfigResultOutput() LookupOrganizationNotificationConfigResultOutput {
	return o
}

func (o LookupOrganizationNotificationConfigResultOutput) ToLookupOrganizationNotificationConfigResultOutputWithContext(ctx context.Context) LookupOrganizationNotificationConfigResultOutput {
	return o
}

func (o LookupOrganizationNotificationConfigResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupOrganizationNotificationConfigResult] {
	return pulumix.Output[LookupOrganizationNotificationConfigResult]{
		OutputState: o.OutputState,
	}
}

// The description of the notification config (max of 1024 characters).
func (o LookupOrganizationNotificationConfigResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrganizationNotificationConfigResult) string { return v.Description }).(pulumi.StringOutput)
}

// The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/notificationConfigs/notify_public_bucket", "folders/{folder_id}/notificationConfigs/notify_public_bucket", or "projects/{project_id}/notificationConfigs/notify_public_bucket".
func (o LookupOrganizationNotificationConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrganizationNotificationConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
func (o LookupOrganizationNotificationConfigResultOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrganizationNotificationConfigResult) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
func (o LookupOrganizationNotificationConfigResultOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOrganizationNotificationConfigResult) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The config for triggering streaming-based notifications.
func (o LookupOrganizationNotificationConfigResultOutput) StreamingConfig() StreamingConfigResponseOutput {
	return o.ApplyT(func(v LookupOrganizationNotificationConfigResult) StreamingConfigResponse { return v.StreamingConfig }).(StreamingConfigResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOrganizationNotificationConfigResultOutput{})
}
