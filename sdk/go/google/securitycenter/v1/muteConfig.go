// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a mute config.
// Auto-naming is currently not supported for this resource.
type MuteConfig struct {
	pulumi.CustomResourceState

	// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config creation.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the mute config.
	Description pulumi.StringOutput `pulumi:"description"`
	// The human readable name to be displayed for the mute config.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string, be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is created under the project = Y scope, it might not match any findings. The following field and operator combinations are supported: * severity: `=`, `:` * category: `=`, `:` * resource.name: `=`, `:` * resource.project_name: `=`, `:` * resource.project_display_name: `=`, `:` * resource.folders.resource_folder: `=`, `:` * resource.parent_name: `=`, `:` * resource.parent_display_name: `=`, `:` * resource.type: `=`, `:` * finding_class: `=`, `:` * indicator.ip_addresses: `=`, `:` * indicator.domains: `=`, `:`
	Filter pulumi.StringOutput `pulumi:"filter"`
	// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if provided on config creation or update.
	MostRecentEditor pulumi.StringOutput `pulumi:"mostRecentEditor"`
	// Required. Unique identifier provided by the client within the parent scope. It must consist of lower case letters, numbers, and hyphen, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	MuteConfigId pulumi.StringOutput `pulumi:"muteConfigId"`
	// This field will be ignored if provided on config creation. Format "organizations/{organization}/muteConfigs/{mute_config}" "folders/{folder}/muteConfigs/{mute_config}" "projects/{project}/muteConfigs/{mute_config}"
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The most recent time at which the mute config was updated. This field is set by the server and will be ignored if provided on config creation or update.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewMuteConfig registers a new resource with the given unique name, arguments, and options.
func NewMuteConfig(ctx *pulumi.Context,
	name string, args *MuteConfigArgs, opts ...pulumi.ResourceOption) (*MuteConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.MuteConfigId == nil {
		return nil, errors.New("invalid value for required argument 'MuteConfigId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"muteConfigId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource MuteConfig
	err := ctx.RegisterResource("google-native:securitycenter/v1:MuteConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMuteConfig gets an existing MuteConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMuteConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MuteConfigState, opts ...pulumi.ResourceOption) (*MuteConfig, error) {
	var resource MuteConfig
	err := ctx.ReadResource("google-native:securitycenter/v1:MuteConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MuteConfig resources.
type muteConfigState struct {
}

type MuteConfigState struct {
}

func (MuteConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*muteConfigState)(nil)).Elem()
}

type muteConfigArgs struct {
	// A description of the mute config.
	Description *string `pulumi:"description"`
	// The human readable name to be displayed for the mute config.
	DisplayName *string `pulumi:"displayName"`
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string, be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is created under the project = Y scope, it might not match any findings. The following field and operator combinations are supported: * severity: `=`, `:` * category: `=`, `:` * resource.name: `=`, `:` * resource.project_name: `=`, `:` * resource.project_display_name: `=`, `:` * resource.folders.resource_folder: `=`, `:` * resource.parent_name: `=`, `:` * resource.parent_display_name: `=`, `:` * resource.type: `=`, `:` * finding_class: `=`, `:` * indicator.ip_addresses: `=`, `:` * indicator.domains: `=`, `:`
	Filter string `pulumi:"filter"`
	// Required. Unique identifier provided by the client within the parent scope. It must consist of lower case letters, numbers, and hyphen, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	MuteConfigId string `pulumi:"muteConfigId"`
	// This field will be ignored if provided on config creation. Format "organizations/{organization}/muteConfigs/{mute_config}" "folders/{folder}/muteConfigs/{mute_config}" "projects/{project}/muteConfigs/{mute_config}"
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a MuteConfig resource.
type MuteConfigArgs struct {
	// A description of the mute config.
	Description pulumi.StringPtrInput
	// The human readable name to be displayed for the mute config.
	DisplayName pulumi.StringPtrInput
	// An expression that defines the filter to apply across create/update events of findings. While creating a filter string, be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is created under the project = Y scope, it might not match any findings. The following field and operator combinations are supported: * severity: `=`, `:` * category: `=`, `:` * resource.name: `=`, `:` * resource.project_name: `=`, `:` * resource.project_display_name: `=`, `:` * resource.folders.resource_folder: `=`, `:` * resource.parent_name: `=`, `:` * resource.parent_display_name: `=`, `:` * resource.type: `=`, `:` * finding_class: `=`, `:` * indicator.ip_addresses: `=`, `:` * indicator.domains: `=`, `:`
	Filter pulumi.StringInput
	// Required. Unique identifier provided by the client within the parent scope. It must consist of lower case letters, numbers, and hyphen, with the first character a letter, the last a letter or a number, and a 63 character maximum.
	MuteConfigId pulumi.StringInput
	// This field will be ignored if provided on config creation. Format "organizations/{organization}/muteConfigs/{mute_config}" "folders/{folder}/muteConfigs/{mute_config}" "projects/{project}/muteConfigs/{mute_config}"
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (MuteConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*muteConfigArgs)(nil)).Elem()
}

type MuteConfigInput interface {
	pulumi.Input

	ToMuteConfigOutput() MuteConfigOutput
	ToMuteConfigOutputWithContext(ctx context.Context) MuteConfigOutput
}

func (*MuteConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**MuteConfig)(nil)).Elem()
}

func (i *MuteConfig) ToMuteConfigOutput() MuteConfigOutput {
	return i.ToMuteConfigOutputWithContext(context.Background())
}

func (i *MuteConfig) ToMuteConfigOutputWithContext(ctx context.Context) MuteConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteConfigOutput)
}

type MuteConfigOutput struct{ *pulumi.OutputState }

func (MuteConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MuteConfig)(nil)).Elem()
}

func (o MuteConfigOutput) ToMuteConfigOutput() MuteConfigOutput {
	return o
}

func (o MuteConfigOutput) ToMuteConfigOutputWithContext(ctx context.Context) MuteConfigOutput {
	return o
}

// The time at which the mute config was created. This field is set by the server and will be ignored if provided on config creation.
func (o MuteConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the mute config.
func (o MuteConfigOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The human readable name to be displayed for the mute config.
func (o MuteConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// An expression that defines the filter to apply across create/update events of findings. While creating a filter string, be mindful of the scope in which the mute configuration is being created. E.g., If a filter contains project = X but is created under the project = Y scope, it might not match any findings. The following field and operator combinations are supported: * severity: `=`, `:` * category: `=`, `:` * resource.name: `=`, `:` * resource.project_name: `=`, `:` * resource.project_display_name: `=`, `:` * resource.folders.resource_folder: `=`, `:` * resource.parent_name: `=`, `:` * resource.parent_display_name: `=`, `:` * resource.type: `=`, `:` * finding_class: `=`, `:` * indicator.ip_addresses: `=`, `:` * indicator.domains: `=`, `:`
func (o MuteConfigOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// Email address of the user who last edited the mute config. This field is set by the server and will be ignored if provided on config creation or update.
func (o MuteConfigOutput) MostRecentEditor() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.MostRecentEditor }).(pulumi.StringOutput)
}

// Required. Unique identifier provided by the client within the parent scope. It must consist of lower case letters, numbers, and hyphen, with the first character a letter, the last a letter or a number, and a 63 character maximum.
func (o MuteConfigOutput) MuteConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.MuteConfigId }).(pulumi.StringOutput)
}

// This field will be ignored if provided on config creation. Format "organizations/{organization}/muteConfigs/{mute_config}" "folders/{folder}/muteConfigs/{mute_config}" "projects/{project}/muteConfigs/{mute_config}"
func (o MuteConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MuteConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The most recent time at which the mute config was updated. This field is set by the server and will be ignored if provided on config creation or update.
func (o MuteConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MuteConfigInput)(nil)).Elem(), &MuteConfig{})
	pulumi.RegisterOutputType(MuteConfigOutput{})
}
