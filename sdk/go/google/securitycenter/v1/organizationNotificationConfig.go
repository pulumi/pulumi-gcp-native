// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a notification config.
type OrganizationNotificationConfig struct {
	pulumi.CustomResourceState

	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringOutput `pulumi:"description"`
	// The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
	Name pulumi.StringOutput `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic pulumi.StringOutput `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	StreamingConfig StreamingConfigResponseOutput `pulumi:"streamingConfig"`
}

// NewOrganizationNotificationConfig registers a new resource with the given unique name, arguments, and options.
func NewOrganizationNotificationConfig(ctx *pulumi.Context,
	name string, args *OrganizationNotificationConfigArgs, opts ...pulumi.ResourceOption) (*OrganizationNotificationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NotificationConfigsId == nil {
		return nil, errors.New("invalid value for required argument 'NotificationConfigsId'")
	}
	if args.OrganizationsId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationsId'")
	}
	var resource OrganizationNotificationConfig
	err := ctx.RegisterResource("google-cloud:securitycenter/v1:OrganizationNotificationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationNotificationConfig gets an existing OrganizationNotificationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationNotificationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationNotificationConfigState, opts ...pulumi.ResourceOption) (*OrganizationNotificationConfig, error) {
	var resource OrganizationNotificationConfig
	err := ctx.ReadResource("google-cloud:securitycenter/v1:OrganizationNotificationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationNotificationConfig resources.
type organizationNotificationConfigState struct {
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
	Name *string `pulumi:"name"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The config for triggering streaming-based notifications.
	StreamingConfig *StreamingConfigResponse `pulumi:"streamingConfig"`
}

type OrganizationNotificationConfigState struct {
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
	Name pulumi.StringPtrInput
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic pulumi.StringPtrInput
	// The service account that needs "pubsub.topics.publish" permission to publish to the Pub/Sub topic.
	ServiceAccount pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	StreamingConfig StreamingConfigResponsePtrInput
}

func (OrganizationNotificationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationNotificationConfigState)(nil)).Elem()
}

type organizationNotificationConfigArgs struct {
	// The description of the notification config (max of 1024 characters).
	Description *string `pulumi:"description"`
	// The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
	Name                  *string `pulumi:"name"`
	NotificationConfigsId string  `pulumi:"notificationConfigsId"`
	OrganizationsId       string  `pulumi:"organizationsId"`
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// The config for triggering streaming-based notifications.
	StreamingConfig *StreamingConfig `pulumi:"streamingConfig"`
}

// The set of arguments for constructing a OrganizationNotificationConfig resource.
type OrganizationNotificationConfigArgs struct {
	// The description of the notification config (max of 1024 characters).
	Description pulumi.StringPtrInput
	// The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: "organizations/{organization_id}/notificationConfigs/notify_public_bucket".
	Name                  pulumi.StringPtrInput
	NotificationConfigsId pulumi.StringInput
	OrganizationsId       pulumi.StringInput
	// The Pub/Sub topic to send notifications to. Its format is "projects/[project_id]/topics/[topic]".
	PubsubTopic pulumi.StringPtrInput
	// The config for triggering streaming-based notifications.
	StreamingConfig StreamingConfigPtrInput
}

func (OrganizationNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationNotificationConfigArgs)(nil)).Elem()
}

type OrganizationNotificationConfigInput interface {
	pulumi.Input

	ToOrganizationNotificationConfigOutput() OrganizationNotificationConfigOutput
	ToOrganizationNotificationConfigOutputWithContext(ctx context.Context) OrganizationNotificationConfigOutput
}

func (*OrganizationNotificationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationNotificationConfig)(nil))
}

func (i *OrganizationNotificationConfig) ToOrganizationNotificationConfigOutput() OrganizationNotificationConfigOutput {
	return i.ToOrganizationNotificationConfigOutputWithContext(context.Background())
}

func (i *OrganizationNotificationConfig) ToOrganizationNotificationConfigOutputWithContext(ctx context.Context) OrganizationNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationNotificationConfigOutput)
}

type OrganizationNotificationConfigOutput struct {
	*pulumi.OutputState
}

func (OrganizationNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrganizationNotificationConfig)(nil))
}

func (o OrganizationNotificationConfigOutput) ToOrganizationNotificationConfigOutput() OrganizationNotificationConfigOutput {
	return o
}

func (o OrganizationNotificationConfigOutput) ToOrganizationNotificationConfigOutputWithContext(ctx context.Context) OrganizationNotificationConfigOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(OrganizationNotificationConfigOutput{})
}
