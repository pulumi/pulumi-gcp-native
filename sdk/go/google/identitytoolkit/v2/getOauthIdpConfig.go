// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve an Oidc Idp configuration for an Identity Toolkit project.
func LookupOauthIdpConfig(ctx *pulumi.Context, args *LookupOauthIdpConfigArgs, opts ...pulumi.InvokeOption) (*LookupOauthIdpConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOauthIdpConfigResult
	err := ctx.Invoke("google-native:identitytoolkit/v2:getOauthIdpConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupOauthIdpConfigArgs struct {
	OauthIdpConfigId string  `pulumi:"oauthIdpConfigId"`
	Project          *string `pulumi:"project"`
	TenantId         string  `pulumi:"tenantId"`
}

type LookupOauthIdpConfigResult struct {
	// The client id of an OAuth client.
	ClientId string `pulumi:"clientId"`
	// The client secret of the OAuth client, to enable OIDC code flow.
	ClientSecret string `pulumi:"clientSecret"`
	// The config's display name set by developers.
	DisplayName string `pulumi:"displayName"`
	// True if allows the user to sign in with the provider.
	Enabled bool `pulumi:"enabled"`
	// For OIDC Idps, the issuer identifier.
	Issuer string `pulumi:"issuer"`
	// The name of the OAuthIdpConfig resource, for example: 'projects/my-awesome-project/oauthIdpConfigs/oauth-config-id'. Ignored during create requests.
	Name string `pulumi:"name"`
	// The response type to request for in the OAuth authorization flow. You can set either `id_token` or `code` to true, but not both. Setting both types to be simultaneously true (`{code: true, id_token: true}`) is not yet supported.
	ResponseType GoogleCloudIdentitytoolkitAdminV2OAuthResponseTypeResponse `pulumi:"responseType"`
}

func LookupOauthIdpConfigOutput(ctx *pulumi.Context, args LookupOauthIdpConfigOutputArgs, opts ...pulumi.InvokeOption) LookupOauthIdpConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOauthIdpConfigResult, error) {
			args := v.(LookupOauthIdpConfigArgs)
			r, err := LookupOauthIdpConfig(ctx, &args, opts...)
			var s LookupOauthIdpConfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOauthIdpConfigResultOutput)
}

type LookupOauthIdpConfigOutputArgs struct {
	OauthIdpConfigId pulumi.StringInput    `pulumi:"oauthIdpConfigId"`
	Project          pulumi.StringPtrInput `pulumi:"project"`
	TenantId         pulumi.StringInput    `pulumi:"tenantId"`
}

func (LookupOauthIdpConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOauthIdpConfigArgs)(nil)).Elem()
}

type LookupOauthIdpConfigResultOutput struct{ *pulumi.OutputState }

func (LookupOauthIdpConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOauthIdpConfigResult)(nil)).Elem()
}

func (o LookupOauthIdpConfigResultOutput) ToLookupOauthIdpConfigResultOutput() LookupOauthIdpConfigResultOutput {
	return o
}

func (o LookupOauthIdpConfigResultOutput) ToLookupOauthIdpConfigResultOutputWithContext(ctx context.Context) LookupOauthIdpConfigResultOutput {
	return o
}

// The client id of an OAuth client.
func (o LookupOauthIdpConfigResultOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOauthIdpConfigResult) string { return v.ClientId }).(pulumi.StringOutput)
}

// The client secret of the OAuth client, to enable OIDC code flow.
func (o LookupOauthIdpConfigResultOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOauthIdpConfigResult) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// The config's display name set by developers.
func (o LookupOauthIdpConfigResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOauthIdpConfigResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// True if allows the user to sign in with the provider.
func (o LookupOauthIdpConfigResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupOauthIdpConfigResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// For OIDC Idps, the issuer identifier.
func (o LookupOauthIdpConfigResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOauthIdpConfigResult) string { return v.Issuer }).(pulumi.StringOutput)
}

// The name of the OAuthIdpConfig resource, for example: 'projects/my-awesome-project/oauthIdpConfigs/oauth-config-id'. Ignored during create requests.
func (o LookupOauthIdpConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOauthIdpConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// The response type to request for in the OAuth authorization flow. You can set either `id_token` or `code` to true, but not both. Setting both types to be simultaneously true (`{code: true, id_token: true}`) is not yet supported.
func (o LookupOauthIdpConfigResultOutput) ResponseType() GoogleCloudIdentitytoolkitAdminV2OAuthResponseTypeResponseOutput {
	return o.ApplyT(func(v LookupOauthIdpConfigResult) GoogleCloudIdentitytoolkitAdminV2OAuthResponseTypeResponse {
		return v.ResponseType
	}).(GoogleCloudIdentitytoolkitAdminV2OAuthResponseTypeResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOauthIdpConfigResultOutput{})
}
