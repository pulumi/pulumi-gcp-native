// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a tenant. Requires write permission on the Agent project.
// Auto-naming is currently not supported for this resource.
type Tenant struct {
	pulumi.CustomResourceState

	// Whether to allow email/password user authentication.
	AllowPasswordSignup pulumi.BoolOutput `pulumi:"allowPasswordSignup"`
	// Whether anonymous users will be auto-deleted after a period of 30 days.
	AutodeleteAnonymousUsers pulumi.BoolOutput `pulumi:"autodeleteAnonymousUsers"`
	// Options related to how clients making requests on behalf of a project should be configured.
	Client GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfigResponseOutput `pulumi:"client"`
	// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.
	DisableAuth pulumi.BoolOutput `pulumi:"disableAuth"`
	// Display name of the tenant.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Whether to enable anonymous user authentication.
	EnableAnonymousUser pulumi.BoolOutput `pulumi:"enableAnonymousUser"`
	// Whether to enable email link user authentication.
	EnableEmailLinkSignin pulumi.BoolOutput `pulumi:"enableEmailLinkSignin"`
	// Hash config information of a tenant for display on Pantheon. This can only be displayed on Pantheon to avoid the sensitive information to get accidentally leaked. Only returned in GetTenant response to restrict reading of this information. Requires firebaseauth.configs.getHashConfig permission on the agent project for returning this field.
	HashConfig GoogleCloudIdentitytoolkitAdminV2HashConfigResponseOutput `pulumi:"hashConfig"`
	// Specify the settings that the tenant could inherit.
	Inheritance GoogleCloudIdentitytoolkitAdminV2InheritanceResponseOutput `pulumi:"inheritance"`
	// The tenant-level configuration of MFA options.
	MfaConfig GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigResponseOutput `pulumi:"mfaConfig"`
	// Configuration related to monitoring project activity.
	Monitoring GoogleCloudIdentitytoolkitAdminV2MonitoringConfigResponseOutput `pulumi:"monitoring"`
	// Resource name of a tenant. For example: "projects/{project-id}/tenants/{tenant-id}"
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Configures which regions are enabled for SMS verification code sending.
	SmsRegionConfig GoogleCloudIdentitytoolkitAdminV2SmsRegionConfigResponseOutput `pulumi:"smsRegionConfig"`
	// A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).
	TestPhoneNumbers pulumi.StringMapOutput `pulumi:"testPhoneNumbers"`
}

// NewTenant registers a new resource with the given unique name, arguments, and options.
func NewTenant(ctx *pulumi.Context,
	name string, args *TenantArgs, opts ...pulumi.ResourceOption) (*Tenant, error) {
	if args == nil {
		args = &TenantArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource Tenant
	err := ctx.RegisterResource("google-native:identitytoolkit/v2:Tenant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTenant gets an existing Tenant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TenantState, opts ...pulumi.ResourceOption) (*Tenant, error) {
	var resource Tenant
	err := ctx.ReadResource("google-native:identitytoolkit/v2:Tenant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tenant resources.
type tenantState struct {
}

type TenantState struct {
}

func (TenantState) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantState)(nil)).Elem()
}

type tenantArgs struct {
	// Whether to allow email/password user authentication.
	AllowPasswordSignup *bool `pulumi:"allowPasswordSignup"`
	// Whether anonymous users will be auto-deleted after a period of 30 days.
	AutodeleteAnonymousUsers *bool `pulumi:"autodeleteAnonymousUsers"`
	// Options related to how clients making requests on behalf of a project should be configured.
	Client *GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig `pulumi:"client"`
	// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.
	DisableAuth *bool `pulumi:"disableAuth"`
	// Display name of the tenant.
	DisplayName *string `pulumi:"displayName"`
	// Whether to enable anonymous user authentication.
	EnableAnonymousUser *bool `pulumi:"enableAnonymousUser"`
	// Whether to enable email link user authentication.
	EnableEmailLinkSignin *bool `pulumi:"enableEmailLinkSignin"`
	// Specify the settings that the tenant could inherit.
	Inheritance *GoogleCloudIdentitytoolkitAdminV2Inheritance `pulumi:"inheritance"`
	// The tenant-level configuration of MFA options.
	MfaConfig *GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig `pulumi:"mfaConfig"`
	// Configuration related to monitoring project activity.
	Monitoring *GoogleCloudIdentitytoolkitAdminV2MonitoringConfig `pulumi:"monitoring"`
	Project    *string                                            `pulumi:"project"`
	// Configures which regions are enabled for SMS verification code sending.
	SmsRegionConfig *GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig `pulumi:"smsRegionConfig"`
	// A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).
	TestPhoneNumbers map[string]string `pulumi:"testPhoneNumbers"`
}

// The set of arguments for constructing a Tenant resource.
type TenantArgs struct {
	// Whether to allow email/password user authentication.
	AllowPasswordSignup pulumi.BoolPtrInput
	// Whether anonymous users will be auto-deleted after a period of 30 days.
	AutodeleteAnonymousUsers pulumi.BoolPtrInput
	// Options related to how clients making requests on behalf of a project should be configured.
	Client GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfigPtrInput
	// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.
	DisableAuth pulumi.BoolPtrInput
	// Display name of the tenant.
	DisplayName pulumi.StringPtrInput
	// Whether to enable anonymous user authentication.
	EnableAnonymousUser pulumi.BoolPtrInput
	// Whether to enable email link user authentication.
	EnableEmailLinkSignin pulumi.BoolPtrInput
	// Specify the settings that the tenant could inherit.
	Inheritance GoogleCloudIdentitytoolkitAdminV2InheritancePtrInput
	// The tenant-level configuration of MFA options.
	MfaConfig GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigPtrInput
	// Configuration related to monitoring project activity.
	Monitoring GoogleCloudIdentitytoolkitAdminV2MonitoringConfigPtrInput
	Project    pulumi.StringPtrInput
	// Configures which regions are enabled for SMS verification code sending.
	SmsRegionConfig GoogleCloudIdentitytoolkitAdminV2SmsRegionConfigPtrInput
	// A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).
	TestPhoneNumbers pulumi.StringMapInput
}

func (TenantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tenantArgs)(nil)).Elem()
}

type TenantInput interface {
	pulumi.Input

	ToTenantOutput() TenantOutput
	ToTenantOutputWithContext(ctx context.Context) TenantOutput
}

func (*Tenant) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (i *Tenant) ToTenantOutput() TenantOutput {
	return i.ToTenantOutputWithContext(context.Background())
}

func (i *Tenant) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantOutput)
}

type TenantOutput struct{ *pulumi.OutputState }

func (TenantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tenant)(nil)).Elem()
}

func (o TenantOutput) ToTenantOutput() TenantOutput {
	return o
}

func (o TenantOutput) ToTenantOutputWithContext(ctx context.Context) TenantOutput {
	return o
}

// Whether to allow email/password user authentication.
func (o TenantOutput) AllowPasswordSignup() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolOutput { return v.AllowPasswordSignup }).(pulumi.BoolOutput)
}

// Whether anonymous users will be auto-deleted after a period of 30 days.
func (o TenantOutput) AutodeleteAnonymousUsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolOutput { return v.AutodeleteAnonymousUsers }).(pulumi.BoolOutput)
}

// Options related to how clients making requests on behalf of a project should be configured.
func (o TenantOutput) Client() GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfigResponseOutput {
	return o.ApplyT(func(v *Tenant) GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfigResponseOutput { return v.Client }).(GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfigResponseOutput)
}

// Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.
func (o TenantOutput) DisableAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolOutput { return v.DisableAuth }).(pulumi.BoolOutput)
}

// Display name of the tenant.
func (o TenantOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether to enable anonymous user authentication.
func (o TenantOutput) EnableAnonymousUser() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolOutput { return v.EnableAnonymousUser }).(pulumi.BoolOutput)
}

// Whether to enable email link user authentication.
func (o TenantOutput) EnableEmailLinkSignin() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tenant) pulumi.BoolOutput { return v.EnableEmailLinkSignin }).(pulumi.BoolOutput)
}

// Hash config information of a tenant for display on Pantheon. This can only be displayed on Pantheon to avoid the sensitive information to get accidentally leaked. Only returned in GetTenant response to restrict reading of this information. Requires firebaseauth.configs.getHashConfig permission on the agent project for returning this field.
func (o TenantOutput) HashConfig() GoogleCloudIdentitytoolkitAdminV2HashConfigResponseOutput {
	return o.ApplyT(func(v *Tenant) GoogleCloudIdentitytoolkitAdminV2HashConfigResponseOutput { return v.HashConfig }).(GoogleCloudIdentitytoolkitAdminV2HashConfigResponseOutput)
}

// Specify the settings that the tenant could inherit.
func (o TenantOutput) Inheritance() GoogleCloudIdentitytoolkitAdminV2InheritanceResponseOutput {
	return o.ApplyT(func(v *Tenant) GoogleCloudIdentitytoolkitAdminV2InheritanceResponseOutput { return v.Inheritance }).(GoogleCloudIdentitytoolkitAdminV2InheritanceResponseOutput)
}

// The tenant-level configuration of MFA options.
func (o TenantOutput) MfaConfig() GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigResponseOutput {
	return o.ApplyT(func(v *Tenant) GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigResponseOutput {
		return v.MfaConfig
	}).(GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfigResponseOutput)
}

// Configuration related to monitoring project activity.
func (o TenantOutput) Monitoring() GoogleCloudIdentitytoolkitAdminV2MonitoringConfigResponseOutput {
	return o.ApplyT(func(v *Tenant) GoogleCloudIdentitytoolkitAdminV2MonitoringConfigResponseOutput { return v.Monitoring }).(GoogleCloudIdentitytoolkitAdminV2MonitoringConfigResponseOutput)
}

// Resource name of a tenant. For example: "projects/{project-id}/tenants/{tenant-id}"
func (o TenantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TenantOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Configures which regions are enabled for SMS verification code sending.
func (o TenantOutput) SmsRegionConfig() GoogleCloudIdentitytoolkitAdminV2SmsRegionConfigResponseOutput {
	return o.ApplyT(func(v *Tenant) GoogleCloudIdentitytoolkitAdminV2SmsRegionConfigResponseOutput {
		return v.SmsRegionConfig
	}).(GoogleCloudIdentitytoolkitAdminV2SmsRegionConfigResponseOutput)
}

// A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).
func (o TenantOutput) TestPhoneNumbers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tenant) pulumi.StringMapOutput { return v.TestPhoneNumbers }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TenantInput)(nil)).Elem(), &Tenant{})
	pulumi.RegisterOutputType(TenantOutput{})
}
