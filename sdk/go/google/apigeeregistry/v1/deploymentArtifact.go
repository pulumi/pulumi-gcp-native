// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a specified artifact.
type DeploymentArtifact struct {
	pulumi.CustomResourceState

	// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	ApiId       pulumi.StringOutput    `pulumi:"apiId"`
	// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ArtifactId pulumi.StringOutput `pulumi:"artifactId"`
	// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
	Contents pulumi.StringOutput `pulumi:"contents"`
	// Creation timestamp.
	CreateTime   pulumi.StringOutput `pulumi:"createTime"`
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
	Hash pulumi.StringOutput `pulumi:"hash"`
	// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "registry.googleapis.com/" and cannot be changed.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
	MimeType pulumi.StringOutput `pulumi:"mimeType"`
	// Resource name.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
	SizeBytes pulumi.IntOutput `pulumi:"sizeBytes"`
	// Last update timestamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDeploymentArtifact registers a new resource with the given unique name, arguments, and options.
func NewDeploymentArtifact(ctx *pulumi.Context,
	name string, args *DeploymentArtifactArgs, opts ...pulumi.ResourceOption) (*DeploymentArtifact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.ArtifactId == nil {
		return nil, errors.New("invalid value for required argument 'ArtifactId'")
	}
	if args.DeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiId",
		"artifactId",
		"deploymentId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeploymentArtifact
	err := ctx.RegisterResource("google-native:apigeeregistry/v1:DeploymentArtifact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentArtifact gets an existing DeploymentArtifact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentArtifact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentArtifactState, opts ...pulumi.ResourceOption) (*DeploymentArtifact, error) {
	var resource DeploymentArtifact
	err := ctx.ReadResource("google-native:apigeeregistry/v1:DeploymentArtifact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeploymentArtifact resources.
type deploymentArtifactState struct {
}

type DeploymentArtifactState struct {
}

func (DeploymentArtifactState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArtifactState)(nil)).Elem()
}

type deploymentArtifactArgs struct {
	// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
	Annotations map[string]string `pulumi:"annotations"`
	ApiId       string            `pulumi:"apiId"`
	// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ArtifactId string `pulumi:"artifactId"`
	// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
	Contents     *string `pulumi:"contents"`
	DeploymentId string  `pulumi:"deploymentId"`
	// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "registry.googleapis.com/" and cannot be changed.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
	MimeType *string `pulumi:"mimeType"`
	// Resource name.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a DeploymentArtifact resource.
type DeploymentArtifactArgs struct {
	// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
	Annotations pulumi.StringMapInput
	ApiId       pulumi.StringInput
	// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ArtifactId pulumi.StringInput
	// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
	Contents     pulumi.StringPtrInput
	DeploymentId pulumi.StringInput
	// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "registry.googleapis.com/" and cannot be changed.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
	MimeType pulumi.StringPtrInput
	// Resource name.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (DeploymentArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArtifactArgs)(nil)).Elem()
}

type DeploymentArtifactInput interface {
	pulumi.Input

	ToDeploymentArtifactOutput() DeploymentArtifactOutput
	ToDeploymentArtifactOutputWithContext(ctx context.Context) DeploymentArtifactOutput
}

func (*DeploymentArtifact) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentArtifact)(nil)).Elem()
}

func (i *DeploymentArtifact) ToDeploymentArtifactOutput() DeploymentArtifactOutput {
	return i.ToDeploymentArtifactOutputWithContext(context.Background())
}

func (i *DeploymentArtifact) ToDeploymentArtifactOutputWithContext(ctx context.Context) DeploymentArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentArtifactOutput)
}

type DeploymentArtifactOutput struct{ *pulumi.OutputState }

func (DeploymentArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentArtifact)(nil)).Elem()
}

func (o DeploymentArtifactOutput) ToDeploymentArtifactOutput() DeploymentArtifactOutput {
	return o
}

func (o DeploymentArtifactOutput) ToDeploymentArtifactOutputWithContext(ctx context.Context) DeploymentArtifactOutput {
	return o
}

// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
func (o DeploymentArtifactOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o DeploymentArtifactOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
func (o DeploymentArtifactOutput) ArtifactId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.ArtifactId }).(pulumi.StringOutput)
}

// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
func (o DeploymentArtifactOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.Contents }).(pulumi.StringOutput)
}

// Creation timestamp.
func (o DeploymentArtifactOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o DeploymentArtifactOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.DeploymentId }).(pulumi.StringOutput)
}

// A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
func (o DeploymentArtifactOutput) Hash() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.Hash }).(pulumi.StringOutput)
}

// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "registry.googleapis.com/" and cannot be changed.
func (o DeploymentArtifactOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o DeploymentArtifactOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
func (o DeploymentArtifactOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.MimeType }).(pulumi.StringOutput)
}

// Resource name.
func (o DeploymentArtifactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DeploymentArtifactOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
func (o DeploymentArtifactOutput) SizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.IntOutput { return v.SizeBytes }).(pulumi.IntOutput)
}

// Last update timestamp.
func (o DeploymentArtifactOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentArtifact) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentArtifactInput)(nil)).Elem(), &DeploymentArtifact{})
	pulumi.RegisterOutputType(DeploymentArtifactOutput{})
}
