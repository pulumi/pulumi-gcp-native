// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a specified deployment.
type Deployment struct {
	pulumi.CustomResourceState

	// Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.
	AccessGuidance pulumi.StringOutput `pulumi:"accessGuidance"`
	// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Required. The ID to use for the deployment, which will become the final component of the deployment's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ApiDeploymentId pulumi.StringOutput `pulumi:"apiDeploymentId"`
	ApiId           pulumi.StringOutput `pulumi:"apiId"`
	// The full resource name (including revision ID) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: `apis/{api}/deployments/{deployment}`
	ApiSpecRevision pulumi.StringOutput `pulumi:"apiSpecRevision"`
	// Creation timestamp; when the deployment resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A detailed description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Human-meaningful name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The address where the deployment is serving. Changes to this value will update the revision.
	EndpointUri pulumi.StringOutput `pulumi:"endpointUri"`
	// The address of the external channel of the API (e.g., the Developer Portal). Changes to this value will not affect the revision.
	ExternalChannelUri pulumi.StringOutput `pulumi:"externalChannelUri"`
	// Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.
	IntendedAudience pulumi.StringOutput `pulumi:"intendedAudience"`
	// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Resource name.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Revision creation timestamp; when the represented revision was created.
	RevisionCreateTime pulumi.StringOutput `pulumi:"revisionCreateTime"`
	// Immutable. The revision ID of the deployment. A new revision is committed whenever the deployment contents are changed. The format is an 8-character hexadecimal string.
	RevisionId pulumi.StringOutput `pulumi:"revisionId"`
	// Last update timestamp: when the represented revision was last modified.
	RevisionUpdateTime pulumi.StringOutput `pulumi:"revisionUpdateTime"`
}

// NewDeployment registers a new resource with the given unique name, arguments, and options.
func NewDeployment(ctx *pulumi.Context,
	name string, args *DeploymentArgs, opts ...pulumi.ResourceOption) (*Deployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiDeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'ApiDeploymentId'")
	}
	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiDeploymentId",
		"apiId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource Deployment
	err := ctx.RegisterResource("google-native:apigeeregistry/v1:Deployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployment gets an existing Deployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentState, opts ...pulumi.ResourceOption) (*Deployment, error) {
	var resource Deployment
	err := ctx.ReadResource("google-native:apigeeregistry/v1:Deployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deployment resources.
type deploymentState struct {
}

type DeploymentState struct {
}

func (DeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentState)(nil)).Elem()
}

type deploymentArgs struct {
	// Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.
	AccessGuidance *string `pulumi:"accessGuidance"`
	// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
	Annotations map[string]string `pulumi:"annotations"`
	// Required. The ID to use for the deployment, which will become the final component of the deployment's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ApiDeploymentId string `pulumi:"apiDeploymentId"`
	ApiId           string `pulumi:"apiId"`
	// The full resource name (including revision ID) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: `apis/{api}/deployments/{deployment}`
	ApiSpecRevision *string `pulumi:"apiSpecRevision"`
	// A detailed description.
	Description *string `pulumi:"description"`
	// Human-meaningful name.
	DisplayName *string `pulumi:"displayName"`
	// The address where the deployment is serving. Changes to this value will update the revision.
	EndpointUri *string `pulumi:"endpointUri"`
	// The address of the external channel of the API (e.g., the Developer Portal). Changes to this value will not affect the revision.
	ExternalChannelUri *string `pulumi:"externalChannelUri"`
	// Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.
	IntendedAudience *string `pulumi:"intendedAudience"`
	// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Resource name.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Deployment resource.
type DeploymentArgs struct {
	// Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.
	AccessGuidance pulumi.StringPtrInput
	// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
	Annotations pulumi.StringMapInput
	// Required. The ID to use for the deployment, which will become the final component of the deployment's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ApiDeploymentId pulumi.StringInput
	ApiId           pulumi.StringInput
	// The full resource name (including revision ID) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: `apis/{api}/deployments/{deployment}`
	ApiSpecRevision pulumi.StringPtrInput
	// A detailed description.
	Description pulumi.StringPtrInput
	// Human-meaningful name.
	DisplayName pulumi.StringPtrInput
	// The address where the deployment is serving. Changes to this value will update the revision.
	EndpointUri pulumi.StringPtrInput
	// The address of the external channel of the API (e.g., the Developer Portal). Changes to this value will not affect the revision.
	ExternalChannelUri pulumi.StringPtrInput
	// Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.
	IntendedAudience pulumi.StringPtrInput
	// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Resource name.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (DeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentArgs)(nil)).Elem()
}

type DeploymentInput interface {
	pulumi.Input

	ToDeploymentOutput() DeploymentOutput
	ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput
}

func (*Deployment) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (i *Deployment) ToDeploymentOutput() DeploymentOutput {
	return i.ToDeploymentOutputWithContext(context.Background())
}

func (i *Deployment) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentOutput)
}

type DeploymentOutput struct{ *pulumi.OutputState }

func (DeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deployment)(nil)).Elem()
}

func (o DeploymentOutput) ToDeploymentOutput() DeploymentOutput {
	return o
}

func (o DeploymentOutput) ToDeploymentOutputWithContext(ctx context.Context) DeploymentOutput {
	return o
}

// Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.
func (o DeploymentOutput) AccessGuidance() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.AccessGuidance }).(pulumi.StringOutput)
}

// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
func (o DeploymentOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Required. The ID to use for the deployment, which will become the final component of the deployment's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
func (o DeploymentOutput) ApiDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ApiDeploymentId }).(pulumi.StringOutput)
}

func (o DeploymentOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// The full resource name (including revision ID) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: `apis/{api}/deployments/{deployment}`
func (o DeploymentOutput) ApiSpecRevision() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ApiSpecRevision }).(pulumi.StringOutput)
}

// Creation timestamp; when the deployment resource was created.
func (o DeploymentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A detailed description.
func (o DeploymentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Human-meaningful name.
func (o DeploymentOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The address where the deployment is serving. Changes to this value will update the revision.
func (o DeploymentOutput) EndpointUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.EndpointUri }).(pulumi.StringOutput)
}

// The address of the external channel of the API (e.g., the Developer Portal). Changes to this value will not affect the revision.
func (o DeploymentOutput) ExternalChannelUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.ExternalChannelUri }).(pulumi.StringOutput)
}

// Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.
func (o DeploymentOutput) IntendedAudience() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.IntendedAudience }).(pulumi.StringOutput)
}

// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.
func (o DeploymentOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o DeploymentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name.
func (o DeploymentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DeploymentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Revision creation timestamp; when the represented revision was created.
func (o DeploymentOutput) RevisionCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.RevisionCreateTime }).(pulumi.StringOutput)
}

// Immutable. The revision ID of the deployment. A new revision is committed whenever the deployment contents are changed. The format is an 8-character hexadecimal string.
func (o DeploymentOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.RevisionId }).(pulumi.StringOutput)
}

// Last update timestamp: when the represented revision was last modified.
func (o DeploymentOutput) RevisionUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Deployment) pulumi.StringOutput { return v.RevisionUpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentInput)(nil)).Elem(), &Deployment{})
	pulumi.RegisterOutputType(DeploymentOutput{})
}
