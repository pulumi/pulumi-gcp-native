// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a specified artifact.
func LookupVersionArtifact(ctx *pulumi.Context, args *LookupVersionArtifactArgs, opts ...pulumi.InvokeOption) (*LookupVersionArtifactResult, error) {
	var rv LookupVersionArtifactResult
	err := ctx.Invoke("google-native:apigeeregistry/v1:getVersionArtifact", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVersionArtifactArgs struct {
	ApiId      string  `pulumi:"apiId"`
	ArtifactId string  `pulumi:"artifactId"`
	Location   string  `pulumi:"location"`
	Project    *string `pulumi:"project"`
	VersionId  string  `pulumi:"versionId"`
}

type LookupVersionArtifactResult struct {
	// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
	Contents string `pulumi:"contents"`
	// Creation timestamp.
	CreateTime string `pulumi:"createTime"`
	// A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
	Hash string `pulumi:"hash"`
	// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
	MimeType string `pulumi:"mimeType"`
	// Resource name.
	Name string `pulumi:"name"`
	// The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
	SizeBytes int `pulumi:"sizeBytes"`
	// Last update timestamp.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupVersionArtifactOutput(ctx *pulumi.Context, args LookupVersionArtifactOutputArgs, opts ...pulumi.InvokeOption) LookupVersionArtifactResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVersionArtifactResult, error) {
			args := v.(LookupVersionArtifactArgs)
			r, err := LookupVersionArtifact(ctx, &args, opts...)
			var s LookupVersionArtifactResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVersionArtifactResultOutput)
}

type LookupVersionArtifactOutputArgs struct {
	ApiId      pulumi.StringInput    `pulumi:"apiId"`
	ArtifactId pulumi.StringInput    `pulumi:"artifactId"`
	Location   pulumi.StringInput    `pulumi:"location"`
	Project    pulumi.StringPtrInput `pulumi:"project"`
	VersionId  pulumi.StringInput    `pulumi:"versionId"`
}

func (LookupVersionArtifactOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVersionArtifactArgs)(nil)).Elem()
}

type LookupVersionArtifactResultOutput struct{ *pulumi.OutputState }

func (LookupVersionArtifactResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVersionArtifactResult)(nil)).Elem()
}

func (o LookupVersionArtifactResultOutput) ToLookupVersionArtifactResultOutput() LookupVersionArtifactResultOutput {
	return o
}

func (o LookupVersionArtifactResultOutput) ToLookupVersionArtifactResultOutputWithContext(ctx context.Context) LookupVersionArtifactResultOutput {
	return o
}

// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
func (o LookupVersionArtifactResultOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionArtifactResult) string { return v.Contents }).(pulumi.StringOutput)
}

// Creation timestamp.
func (o LookupVersionArtifactResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionArtifactResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
func (o LookupVersionArtifactResultOutput) Hash() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionArtifactResult) string { return v.Hash }).(pulumi.StringOutput)
}

// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
func (o LookupVersionArtifactResultOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionArtifactResult) string { return v.MimeType }).(pulumi.StringOutput)
}

// Resource name.
func (o LookupVersionArtifactResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionArtifactResult) string { return v.Name }).(pulumi.StringOutput)
}

// The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
func (o LookupVersionArtifactResultOutput) SizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVersionArtifactResult) int { return v.SizeBytes }).(pulumi.IntOutput)
}

// Last update timestamp.
func (o LookupVersionArtifactResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionArtifactResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVersionArtifactResultOutput{})
}
