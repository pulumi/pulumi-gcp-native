// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a specified version.
func LookupVersion(ctx *pulumi.Context, args *LookupVersionArgs, opts ...pulumi.InvokeOption) (*LookupVersionResult, error) {
	var rv LookupVersionResult
	err := ctx.Invoke("google-native:apigeeregistry/v1:getVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVersionArgs struct {
	ApiId     string  `pulumi:"apiId"`
	Location  string  `pulumi:"location"`
	Project   *string `pulumi:"project"`
	VersionId string  `pulumi:"versionId"`
}

type LookupVersionResult struct {
	// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
	Annotations map[string]string `pulumi:"annotations"`
	// Creation timestamp.
	CreateTime string `pulumi:"createTime"`
	// A detailed description.
	Description string `pulumi:"description"`
	// Human-meaningful name.
	DisplayName string `pulumi:"displayName"`
	// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.
	Labels map[string]string `pulumi:"labels"`
	// Resource name.
	Name string `pulumi:"name"`
	// The primary spec for this version. Format: projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}
	PrimarySpec string `pulumi:"primarySpec"`
	// A user-definable description of the lifecycle phase of this API version. Format: free-form, but we expect single words that describe API maturity, e.g., "CONCEPT", "DESIGN", "DEVELOPMENT", "STAGING", "PRODUCTION", "DEPRECATED", "RETIRED".
	State string `pulumi:"state"`
	// Last update timestamp.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupVersionOutput(ctx *pulumi.Context, args LookupVersionOutputArgs, opts ...pulumi.InvokeOption) LookupVersionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVersionResult, error) {
			args := v.(LookupVersionArgs)
			r, err := LookupVersion(ctx, &args, opts...)
			var s LookupVersionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVersionResultOutput)
}

type LookupVersionOutputArgs struct {
	ApiId     pulumi.StringInput    `pulumi:"apiId"`
	Location  pulumi.StringInput    `pulumi:"location"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
	VersionId pulumi.StringInput    `pulumi:"versionId"`
}

func (LookupVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVersionArgs)(nil)).Elem()
}

type LookupVersionResultOutput struct{ *pulumi.OutputState }

func (LookupVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVersionResult)(nil)).Elem()
}

func (o LookupVersionResultOutput) ToLookupVersionResultOutput() LookupVersionResultOutput {
	return o
}

func (o LookupVersionResultOutput) ToLookupVersionResultOutputWithContext(ctx context.Context) LookupVersionResultOutput {
	return o
}

// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
func (o LookupVersionResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVersionResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Creation timestamp.
func (o LookupVersionResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// A detailed description.
func (o LookupVersionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionResult) string { return v.Description }).(pulumi.StringOutput)
}

// Human-meaningful name.
func (o LookupVersionResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.
func (o LookupVersionResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVersionResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Resource name.
func (o LookupVersionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The primary spec for this version. Format: projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}
func (o LookupVersionResultOutput) PrimarySpec() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionResult) string { return v.PrimarySpec }).(pulumi.StringOutput)
}

// A user-definable description of the lifecycle phase of this API version. Format: free-form, but we expect single words that describe API maturity, e.g., "CONCEPT", "DESIGN", "DEVELOPMENT", "STAGING", "PRODUCTION", "DEPRECATED", "RETIRED".
func (o LookupVersionResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionResult) string { return v.State }).(pulumi.StringOutput)
}

// Last update timestamp.
func (o LookupVersionResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVersionResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVersionResultOutput{})
}
