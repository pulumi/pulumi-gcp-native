// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a specified artifact.
type Artifact struct {
	pulumi.CustomResourceState

	// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	ApiId       pulumi.StringOutput    `pulumi:"apiId"`
	// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ArtifactId pulumi.StringOutput `pulumi:"artifactId"`
	// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
	Contents pulumi.StringOutput `pulumi:"contents"`
	// Creation timestamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
	Hash pulumi.StringOutput `pulumi:"hash"`
	// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "registry.googleapis.com/" and cannot be changed.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
	MimeType pulumi.StringOutput `pulumi:"mimeType"`
	// Resource name.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
	SizeBytes pulumi.IntOutput    `pulumi:"sizeBytes"`
	SpecId    pulumi.StringOutput `pulumi:"specId"`
	// Last update timestamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	VersionId  pulumi.StringOutput `pulumi:"versionId"`
}

// NewArtifact registers a new resource with the given unique name, arguments, and options.
func NewArtifact(ctx *pulumi.Context,
	name string, args *ArtifactArgs, opts ...pulumi.ResourceOption) (*Artifact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.ArtifactId == nil {
		return nil, errors.New("invalid value for required argument 'ArtifactId'")
	}
	if args.SpecId == nil {
		return nil, errors.New("invalid value for required argument 'SpecId'")
	}
	if args.VersionId == nil {
		return nil, errors.New("invalid value for required argument 'VersionId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"apiId",
		"artifactId",
		"location",
		"project",
		"specId",
		"versionId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Artifact
	err := ctx.RegisterResource("google-native:apigeeregistry/v1:Artifact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifact gets an existing Artifact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactState, opts ...pulumi.ResourceOption) (*Artifact, error) {
	var resource Artifact
	err := ctx.ReadResource("google-native:apigeeregistry/v1:Artifact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Artifact resources.
type artifactState struct {
}

type ArtifactState struct {
}

func (ArtifactState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactState)(nil)).Elem()
}

type artifactArgs struct {
	// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
	Annotations map[string]string `pulumi:"annotations"`
	ApiId       string            `pulumi:"apiId"`
	// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ArtifactId string `pulumi:"artifactId"`
	// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
	Contents *string `pulumi:"contents"`
	// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "registry.googleapis.com/" and cannot be changed.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
	MimeType *string `pulumi:"mimeType"`
	// Resource name.
	Name      *string `pulumi:"name"`
	Project   *string `pulumi:"project"`
	SpecId    string  `pulumi:"specId"`
	VersionId string  `pulumi:"versionId"`
}

// The set of arguments for constructing a Artifact resource.
type ArtifactArgs struct {
	// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
	Annotations pulumi.StringMapInput
	ApiId       pulumi.StringInput
	// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ArtifactId pulumi.StringInput
	// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
	Contents pulumi.StringPtrInput
	// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "registry.googleapis.com/" and cannot be changed.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
	MimeType pulumi.StringPtrInput
	// Resource name.
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	SpecId    pulumi.StringInput
	VersionId pulumi.StringInput
}

func (ArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactArgs)(nil)).Elem()
}

type ArtifactInput interface {
	pulumi.Input

	ToArtifactOutput() ArtifactOutput
	ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput
}

func (*Artifact) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifact)(nil)).Elem()
}

func (i *Artifact) ToArtifactOutput() ArtifactOutput {
	return i.ToArtifactOutputWithContext(context.Background())
}

func (i *Artifact) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactOutput)
}

func (i *Artifact) ToOutput(ctx context.Context) pulumix.Output[*Artifact] {
	return pulumix.Output[*Artifact]{
		OutputState: i.ToArtifactOutputWithContext(ctx).OutputState,
	}
}

type ArtifactOutput struct{ *pulumi.OutputState }

func (ArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifact)(nil)).Elem()
}

func (o ArtifactOutput) ToArtifactOutput() ArtifactOutput {
	return o
}

func (o ArtifactOutput) ToArtifactOutputWithContext(ctx context.Context) ArtifactOutput {
	return o
}

func (o ArtifactOutput) ToOutput(ctx context.Context) pulumix.Output[*Artifact] {
	return pulumix.Output[*Artifact]{
		OutputState: o.OutputState,
	}
}

// Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.
func (o ArtifactOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ArtifactOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
func (o ArtifactOutput) ArtifactId() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.ArtifactId }).(pulumi.StringOutput)
}

// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
func (o ArtifactOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Contents }).(pulumi.StringOutput)
}

// Creation timestamp.
func (o ArtifactOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
func (o ArtifactOutput) Hash() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Hash }).(pulumi.StringOutput)
}

// Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "registry.googleapis.com/" and cannot be changed.
func (o ArtifactOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ArtifactOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
func (o ArtifactOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.MimeType }).(pulumi.StringOutput)
}

// Resource name.
func (o ArtifactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ArtifactOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
func (o ArtifactOutput) SizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *Artifact) pulumi.IntOutput { return v.SizeBytes }).(pulumi.IntOutput)
}

func (o ArtifactOutput) SpecId() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.SpecId }).(pulumi.StringOutput)
}

// Last update timestamp.
func (o ArtifactOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o ArtifactOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Artifact) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactInput)(nil)).Elem(), &Artifact{})
	pulumi.RegisterOutputType(ArtifactOutput{})
}
