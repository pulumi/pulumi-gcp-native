// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CreateArtifact creates a specified artifact.
type VersionArtifact struct {
	pulumi.CustomResourceState

	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ArtifactId pulumi.StringOutput `pulumi:"artifactId"`
	// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
	Contents pulumi.StringOutput `pulumi:"contents"`
	// Creation timestamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
	Hash     pulumi.StringOutput `pulumi:"hash"`
	Location pulumi.StringOutput `pulumi:"location"`
	// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
	MimeType pulumi.StringOutput `pulumi:"mimeType"`
	// Resource name.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
	SizeBytes pulumi.IntOutput `pulumi:"sizeBytes"`
	// Last update timestamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	VersionId  pulumi.StringOutput `pulumi:"versionId"`
}

// NewVersionArtifact registers a new resource with the given unique name, arguments, and options.
func NewVersionArtifact(ctx *pulumi.Context,
	name string, args *VersionArtifactArgs, opts ...pulumi.ResourceOption) (*VersionArtifact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.ArtifactId == nil {
		return nil, errors.New("invalid value for required argument 'ArtifactId'")
	}
	if args.VersionId == nil {
		return nil, errors.New("invalid value for required argument 'VersionId'")
	}
	var resource VersionArtifact
	err := ctx.RegisterResource("google-native:apigeeregistry/v1:VersionArtifact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVersionArtifact gets an existing VersionArtifact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVersionArtifact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VersionArtifactState, opts ...pulumi.ResourceOption) (*VersionArtifact, error) {
	var resource VersionArtifact
	err := ctx.ReadResource("google-native:apigeeregistry/v1:VersionArtifact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VersionArtifact resources.
type versionArtifactState struct {
}

type VersionArtifactState struct {
}

func (VersionArtifactState) ElementType() reflect.Type {
	return reflect.TypeOf((*versionArtifactState)(nil)).Elem()
}

type versionArtifactArgs struct {
	ApiId string `pulumi:"apiId"`
	// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ArtifactId string `pulumi:"artifactId"`
	// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
	Contents *string `pulumi:"contents"`
	Location *string `pulumi:"location"`
	// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
	MimeType *string `pulumi:"mimeType"`
	// Resource name.
	Name      *string `pulumi:"name"`
	Project   *string `pulumi:"project"`
	VersionId string  `pulumi:"versionId"`
}

// The set of arguments for constructing a VersionArtifact resource.
type VersionArtifactArgs struct {
	ApiId pulumi.StringInput
	// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
	ArtifactId pulumi.StringInput
	// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
	Contents pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
	MimeType pulumi.StringPtrInput
	// Resource name.
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	VersionId pulumi.StringInput
}

func (VersionArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*versionArtifactArgs)(nil)).Elem()
}

type VersionArtifactInput interface {
	pulumi.Input

	ToVersionArtifactOutput() VersionArtifactOutput
	ToVersionArtifactOutputWithContext(ctx context.Context) VersionArtifactOutput
}

func (*VersionArtifact) ElementType() reflect.Type {
	return reflect.TypeOf((**VersionArtifact)(nil)).Elem()
}

func (i *VersionArtifact) ToVersionArtifactOutput() VersionArtifactOutput {
	return i.ToVersionArtifactOutputWithContext(context.Background())
}

func (i *VersionArtifact) ToVersionArtifactOutputWithContext(ctx context.Context) VersionArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionArtifactOutput)
}

type VersionArtifactOutput struct{ *pulumi.OutputState }

func (VersionArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VersionArtifact)(nil)).Elem()
}

func (o VersionArtifactOutput) ToVersionArtifactOutput() VersionArtifactOutput {
	return o
}

func (o VersionArtifactOutput) ToVersionArtifactOutputWithContext(ctx context.Context) VersionArtifactOutput {
	return o
}

func (o VersionArtifactOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// Required. The ID to use for the artifact, which will become the final component of the artifact's resource name. This value should be 4-63 characters, and valid characters are /a-z-/. Following AIP-162, IDs must not have the form of a UUID.
func (o VersionArtifactOutput) ArtifactId() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.ArtifactId }).(pulumi.StringOutput)
}

// Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.
func (o VersionArtifactOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.Contents }).(pulumi.StringOutput)
}

// Creation timestamp.
func (o VersionArtifactOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A SHA-256 hash of the artifact's contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.
func (o VersionArtifactOutput) Hash() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.Hash }).(pulumi.StringOutput)
}

func (o VersionArtifactOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").
func (o VersionArtifactOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.MimeType }).(pulumi.StringOutput)
}

// Resource name.
func (o VersionArtifactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VersionArtifactOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.
func (o VersionArtifactOutput) SizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.IntOutput { return v.SizeBytes }).(pulumi.IntOutput)
}

// Last update timestamp.
func (o VersionArtifactOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o VersionArtifactOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VersionArtifact) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VersionArtifactInput)(nil)).Elem(), &VersionArtifact{})
	pulumi.RegisterOutputType(VersionArtifactOutput{})
}
