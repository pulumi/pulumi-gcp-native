// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// AuthConfig defines details of a authentication type.
type AuthConfig struct {
	// List containing additional auth configs.
	AdditionalVariables []ConfigVariable `pulumi:"additionalVariables"`
	// The type of authentication configured.
	AuthType *AuthConfigAuthType `pulumi:"authType"`
	// Oauth2ClientCredentials.
	Oauth2ClientCredentials *Oauth2ClientCredentials `pulumi:"oauth2ClientCredentials"`
	// Oauth2JwtBearer.
	Oauth2JwtBearer *Oauth2JwtBearer `pulumi:"oauth2JwtBearer"`
	// SSH Public Key.
	SshPublicKey *SshPublicKey `pulumi:"sshPublicKey"`
	// UserPassword.
	UserPassword *UserPassword `pulumi:"userPassword"`
}

// AuthConfigInput is an input type that accepts AuthConfigArgs and AuthConfigOutput values.
// You can construct a concrete instance of `AuthConfigInput` via:
//
//          AuthConfigArgs{...}
type AuthConfigInput interface {
	pulumi.Input

	ToAuthConfigOutput() AuthConfigOutput
	ToAuthConfigOutputWithContext(context.Context) AuthConfigOutput
}

// AuthConfig defines details of a authentication type.
type AuthConfigArgs struct {
	// List containing additional auth configs.
	AdditionalVariables ConfigVariableArrayInput `pulumi:"additionalVariables"`
	// The type of authentication configured.
	AuthType AuthConfigAuthTypePtrInput `pulumi:"authType"`
	// Oauth2ClientCredentials.
	Oauth2ClientCredentials Oauth2ClientCredentialsPtrInput `pulumi:"oauth2ClientCredentials"`
	// Oauth2JwtBearer.
	Oauth2JwtBearer Oauth2JwtBearerPtrInput `pulumi:"oauth2JwtBearer"`
	// SSH Public Key.
	SshPublicKey SshPublicKeyPtrInput `pulumi:"sshPublicKey"`
	// UserPassword.
	UserPassword UserPasswordPtrInput `pulumi:"userPassword"`
}

func (AuthConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfig)(nil)).Elem()
}

func (i AuthConfigArgs) ToAuthConfigOutput() AuthConfigOutput {
	return i.ToAuthConfigOutputWithContext(context.Background())
}

func (i AuthConfigArgs) ToAuthConfigOutputWithContext(ctx context.Context) AuthConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthConfigOutput)
}

func (i AuthConfigArgs) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return i.ToAuthConfigPtrOutputWithContext(context.Background())
}

func (i AuthConfigArgs) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthConfigOutput).ToAuthConfigPtrOutputWithContext(ctx)
}

// AuthConfigPtrInput is an input type that accepts AuthConfigArgs, AuthConfigPtr and AuthConfigPtrOutput values.
// You can construct a concrete instance of `AuthConfigPtrInput` via:
//
//          AuthConfigArgs{...}
//
//  or:
//
//          nil
type AuthConfigPtrInput interface {
	pulumi.Input

	ToAuthConfigPtrOutput() AuthConfigPtrOutput
	ToAuthConfigPtrOutputWithContext(context.Context) AuthConfigPtrOutput
}

type authConfigPtrType AuthConfigArgs

func AuthConfigPtr(v *AuthConfigArgs) AuthConfigPtrInput {
	return (*authConfigPtrType)(v)
}

func (*authConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthConfig)(nil)).Elem()
}

func (i *authConfigPtrType) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return i.ToAuthConfigPtrOutputWithContext(context.Background())
}

func (i *authConfigPtrType) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthConfigPtrOutput)
}

// AuthConfig defines details of a authentication type.
type AuthConfigOutput struct{ *pulumi.OutputState }

func (AuthConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfig)(nil)).Elem()
}

func (o AuthConfigOutput) ToAuthConfigOutput() AuthConfigOutput {
	return o
}

func (o AuthConfigOutput) ToAuthConfigOutputWithContext(ctx context.Context) AuthConfigOutput {
	return o
}

func (o AuthConfigOutput) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return o.ToAuthConfigPtrOutputWithContext(context.Background())
}

func (o AuthConfigOutput) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthConfig) *AuthConfig {
		return &v
	}).(AuthConfigPtrOutput)
}

// List containing additional auth configs.
func (o AuthConfigOutput) AdditionalVariables() ConfigVariableArrayOutput {
	return o.ApplyT(func(v AuthConfig) []ConfigVariable { return v.AdditionalVariables }).(ConfigVariableArrayOutput)
}

// The type of authentication configured.
func (o AuthConfigOutput) AuthType() AuthConfigAuthTypePtrOutput {
	return o.ApplyT(func(v AuthConfig) *AuthConfigAuthType { return v.AuthType }).(AuthConfigAuthTypePtrOutput)
}

// Oauth2ClientCredentials.
func (o AuthConfigOutput) Oauth2ClientCredentials() Oauth2ClientCredentialsPtrOutput {
	return o.ApplyT(func(v AuthConfig) *Oauth2ClientCredentials { return v.Oauth2ClientCredentials }).(Oauth2ClientCredentialsPtrOutput)
}

// Oauth2JwtBearer.
func (o AuthConfigOutput) Oauth2JwtBearer() Oauth2JwtBearerPtrOutput {
	return o.ApplyT(func(v AuthConfig) *Oauth2JwtBearer { return v.Oauth2JwtBearer }).(Oauth2JwtBearerPtrOutput)
}

// SSH Public Key.
func (o AuthConfigOutput) SshPublicKey() SshPublicKeyPtrOutput {
	return o.ApplyT(func(v AuthConfig) *SshPublicKey { return v.SshPublicKey }).(SshPublicKeyPtrOutput)
}

// UserPassword.
func (o AuthConfigOutput) UserPassword() UserPasswordPtrOutput {
	return o.ApplyT(func(v AuthConfig) *UserPassword { return v.UserPassword }).(UserPasswordPtrOutput)
}

type AuthConfigPtrOutput struct{ *pulumi.OutputState }

func (AuthConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthConfig)(nil)).Elem()
}

func (o AuthConfigPtrOutput) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return o
}

func (o AuthConfigPtrOutput) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return o
}

func (o AuthConfigPtrOutput) Elem() AuthConfigOutput {
	return o.ApplyT(func(v *AuthConfig) AuthConfig {
		if v != nil {
			return *v
		}
		var ret AuthConfig
		return ret
	}).(AuthConfigOutput)
}

// List containing additional auth configs.
func (o AuthConfigPtrOutput) AdditionalVariables() ConfigVariableArrayOutput {
	return o.ApplyT(func(v *AuthConfig) []ConfigVariable {
		if v == nil {
			return nil
		}
		return v.AdditionalVariables
	}).(ConfigVariableArrayOutput)
}

// The type of authentication configured.
func (o AuthConfigPtrOutput) AuthType() AuthConfigAuthTypePtrOutput {
	return o.ApplyT(func(v *AuthConfig) *AuthConfigAuthType {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(AuthConfigAuthTypePtrOutput)
}

// Oauth2ClientCredentials.
func (o AuthConfigPtrOutput) Oauth2ClientCredentials() Oauth2ClientCredentialsPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *Oauth2ClientCredentials {
		if v == nil {
			return nil
		}
		return v.Oauth2ClientCredentials
	}).(Oauth2ClientCredentialsPtrOutput)
}

// Oauth2JwtBearer.
func (o AuthConfigPtrOutput) Oauth2JwtBearer() Oauth2JwtBearerPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *Oauth2JwtBearer {
		if v == nil {
			return nil
		}
		return v.Oauth2JwtBearer
	}).(Oauth2JwtBearerPtrOutput)
}

// SSH Public Key.
func (o AuthConfigPtrOutput) SshPublicKey() SshPublicKeyPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *SshPublicKey {
		if v == nil {
			return nil
		}
		return v.SshPublicKey
	}).(SshPublicKeyPtrOutput)
}

// UserPassword.
func (o AuthConfigPtrOutput) UserPassword() UserPasswordPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *UserPassword {
		if v == nil {
			return nil
		}
		return v.UserPassword
	}).(UserPasswordPtrOutput)
}

// AuthConfig defines details of a authentication type.
type AuthConfigResponse struct {
	// List containing additional auth configs.
	AdditionalVariables []ConfigVariableResponse `pulumi:"additionalVariables"`
	// The type of authentication configured.
	AuthType string `pulumi:"authType"`
	// Oauth2ClientCredentials.
	Oauth2ClientCredentials Oauth2ClientCredentialsResponse `pulumi:"oauth2ClientCredentials"`
	// Oauth2JwtBearer.
	Oauth2JwtBearer Oauth2JwtBearerResponse `pulumi:"oauth2JwtBearer"`
	// SSH Public Key.
	SshPublicKey SshPublicKeyResponse `pulumi:"sshPublicKey"`
	// UserPassword.
	UserPassword UserPasswordResponse `pulumi:"userPassword"`
}

// AuthConfig defines details of a authentication type.
type AuthConfigResponseOutput struct{ *pulumi.OutputState }

func (AuthConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfigResponse)(nil)).Elem()
}

func (o AuthConfigResponseOutput) ToAuthConfigResponseOutput() AuthConfigResponseOutput {
	return o
}

func (o AuthConfigResponseOutput) ToAuthConfigResponseOutputWithContext(ctx context.Context) AuthConfigResponseOutput {
	return o
}

// List containing additional auth configs.
func (o AuthConfigResponseOutput) AdditionalVariables() ConfigVariableResponseArrayOutput {
	return o.ApplyT(func(v AuthConfigResponse) []ConfigVariableResponse { return v.AdditionalVariables }).(ConfigVariableResponseArrayOutput)
}

// The type of authentication configured.
func (o AuthConfigResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AuthConfigResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Oauth2ClientCredentials.
func (o AuthConfigResponseOutput) Oauth2ClientCredentials() Oauth2ClientCredentialsResponseOutput {
	return o.ApplyT(func(v AuthConfigResponse) Oauth2ClientCredentialsResponse { return v.Oauth2ClientCredentials }).(Oauth2ClientCredentialsResponseOutput)
}

// Oauth2JwtBearer.
func (o AuthConfigResponseOutput) Oauth2JwtBearer() Oauth2JwtBearerResponseOutput {
	return o.ApplyT(func(v AuthConfigResponse) Oauth2JwtBearerResponse { return v.Oauth2JwtBearer }).(Oauth2JwtBearerResponseOutput)
}

// SSH Public Key.
func (o AuthConfigResponseOutput) SshPublicKey() SshPublicKeyResponseOutput {
	return o.ApplyT(func(v AuthConfigResponse) SshPublicKeyResponse { return v.SshPublicKey }).(SshPublicKeyResponseOutput)
}

// UserPassword.
func (o AuthConfigResponseOutput) UserPassword() UserPasswordResponseOutput {
	return o.ApplyT(func(v AuthConfigResponse) UserPasswordResponse { return v.UserPassword }).(UserPasswordResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
type ConfigVariable struct {
	// Value is a bool.
	BoolValue *bool `pulumi:"boolValue"`
	// Value is an integer
	IntValue *string `pulumi:"intValue"`
	// Key of the config variable.
	Key *string `pulumi:"key"`
	// Value is a secret.
	SecretValue *Secret `pulumi:"secretValue"`
	// Value is a string.
	StringValue *string `pulumi:"stringValue"`
}

// ConfigVariableInput is an input type that accepts ConfigVariableArgs and ConfigVariableOutput values.
// You can construct a concrete instance of `ConfigVariableInput` via:
//
//          ConfigVariableArgs{...}
type ConfigVariableInput interface {
	pulumi.Input

	ToConfigVariableOutput() ConfigVariableOutput
	ToConfigVariableOutputWithContext(context.Context) ConfigVariableOutput
}

// ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
type ConfigVariableArgs struct {
	// Value is a bool.
	BoolValue pulumi.BoolPtrInput `pulumi:"boolValue"`
	// Value is an integer
	IntValue pulumi.StringPtrInput `pulumi:"intValue"`
	// Key of the config variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value is a secret.
	SecretValue SecretPtrInput `pulumi:"secretValue"`
	// Value is a string.
	StringValue pulumi.StringPtrInput `pulumi:"stringValue"`
}

func (ConfigVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigVariable)(nil)).Elem()
}

func (i ConfigVariableArgs) ToConfigVariableOutput() ConfigVariableOutput {
	return i.ToConfigVariableOutputWithContext(context.Background())
}

func (i ConfigVariableArgs) ToConfigVariableOutputWithContext(ctx context.Context) ConfigVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigVariableOutput)
}

// ConfigVariableArrayInput is an input type that accepts ConfigVariableArray and ConfigVariableArrayOutput values.
// You can construct a concrete instance of `ConfigVariableArrayInput` via:
//
//          ConfigVariableArray{ ConfigVariableArgs{...} }
type ConfigVariableArrayInput interface {
	pulumi.Input

	ToConfigVariableArrayOutput() ConfigVariableArrayOutput
	ToConfigVariableArrayOutputWithContext(context.Context) ConfigVariableArrayOutput
}

type ConfigVariableArray []ConfigVariableInput

func (ConfigVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigVariable)(nil)).Elem()
}

func (i ConfigVariableArray) ToConfigVariableArrayOutput() ConfigVariableArrayOutput {
	return i.ToConfigVariableArrayOutputWithContext(context.Background())
}

func (i ConfigVariableArray) ToConfigVariableArrayOutputWithContext(ctx context.Context) ConfigVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigVariableArrayOutput)
}

// ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
type ConfigVariableOutput struct{ *pulumi.OutputState }

func (ConfigVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigVariable)(nil)).Elem()
}

func (o ConfigVariableOutput) ToConfigVariableOutput() ConfigVariableOutput {
	return o
}

func (o ConfigVariableOutput) ToConfigVariableOutputWithContext(ctx context.Context) ConfigVariableOutput {
	return o
}

// Value is a bool.
func (o ConfigVariableOutput) BoolValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *bool { return v.BoolValue }).(pulumi.BoolPtrOutput)
}

// Value is an integer
func (o ConfigVariableOutput) IntValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *string { return v.IntValue }).(pulumi.StringPtrOutput)
}

// Key of the config variable.
func (o ConfigVariableOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value is a secret.
func (o ConfigVariableOutput) SecretValue() SecretPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *Secret { return v.SecretValue }).(SecretPtrOutput)
}

// Value is a string.
func (o ConfigVariableOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *string { return v.StringValue }).(pulumi.StringPtrOutput)
}

type ConfigVariableArrayOutput struct{ *pulumi.OutputState }

func (ConfigVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigVariable)(nil)).Elem()
}

func (o ConfigVariableArrayOutput) ToConfigVariableArrayOutput() ConfigVariableArrayOutput {
	return o
}

func (o ConfigVariableArrayOutput) ToConfigVariableArrayOutputWithContext(ctx context.Context) ConfigVariableArrayOutput {
	return o
}

func (o ConfigVariableArrayOutput) Index(i pulumi.IntInput) ConfigVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigVariable {
		return vs[0].([]ConfigVariable)[vs[1].(int)]
	}).(ConfigVariableOutput)
}

// ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
type ConfigVariableResponse struct {
	// Value is a bool.
	BoolValue bool `pulumi:"boolValue"`
	// Value is an integer
	IntValue string `pulumi:"intValue"`
	// Key of the config variable.
	Key string `pulumi:"key"`
	// Value is a secret.
	SecretValue SecretResponse `pulumi:"secretValue"`
	// Value is a string.
	StringValue string `pulumi:"stringValue"`
}

// ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
type ConfigVariableResponseOutput struct{ *pulumi.OutputState }

func (ConfigVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigVariableResponse)(nil)).Elem()
}

func (o ConfigVariableResponseOutput) ToConfigVariableResponseOutput() ConfigVariableResponseOutput {
	return o
}

func (o ConfigVariableResponseOutput) ToConfigVariableResponseOutputWithContext(ctx context.Context) ConfigVariableResponseOutput {
	return o
}

// Value is a bool.
func (o ConfigVariableResponseOutput) BoolValue() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigVariableResponse) bool { return v.BoolValue }).(pulumi.BoolOutput)
}

// Value is an integer
func (o ConfigVariableResponseOutput) IntValue() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigVariableResponse) string { return v.IntValue }).(pulumi.StringOutput)
}

// Key of the config variable.
func (o ConfigVariableResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigVariableResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Value is a secret.
func (o ConfigVariableResponseOutput) SecretValue() SecretResponseOutput {
	return o.ApplyT(func(v ConfigVariableResponse) SecretResponse { return v.SecretValue }).(SecretResponseOutput)
}

// Value is a string.
func (o ConfigVariableResponseOutput) StringValue() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigVariableResponse) string { return v.StringValue }).(pulumi.StringOutput)
}

type ConfigVariableResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfigVariableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigVariableResponse)(nil)).Elem()
}

func (o ConfigVariableResponseArrayOutput) ToConfigVariableResponseArrayOutput() ConfigVariableResponseArrayOutput {
	return o
}

func (o ConfigVariableResponseArrayOutput) ToConfigVariableResponseArrayOutputWithContext(ctx context.Context) ConfigVariableResponseArrayOutput {
	return o
}

func (o ConfigVariableResponseArrayOutput) Index(i pulumi.IntInput) ConfigVariableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigVariableResponse {
		return vs[0].([]ConfigVariableResponse)[vs[1].(int)]
	}).(ConfigVariableResponseOutput)
}

// ConnectionStatus indicates the state of the connection.
type ConnectionStatusResponse struct {
	// Description.
	Description string `pulumi:"description"`
	// State.
	State string `pulumi:"state"`
	// Status provides detailed information for the state.
	Status string `pulumi:"status"`
}

// ConnectionStatus indicates the state of the connection.
type ConnectionStatusResponseOutput struct{ *pulumi.OutputState }

func (ConnectionStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatusResponse)(nil)).Elem()
}

func (o ConnectionStatusResponseOutput) ToConnectionStatusResponseOutput() ConnectionStatusResponseOutput {
	return o
}

func (o ConnectionStatusResponseOutput) ToConnectionStatusResponseOutputWithContext(ctx context.Context) ConnectionStatusResponseOutput {
	return o
}

// Description.
func (o ConnectionStatusResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatusResponse) string { return v.Description }).(pulumi.StringOutput)
}

// State.
func (o ConnectionStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status provides detailed information for the state.
func (o ConnectionStatusResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatusResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// JWT claims used for the jwt-bearer authorization grant.
type JwtClaims struct {
	// Value for the "aud" claim.
	Audience *string `pulumi:"audience"`
	// Value for the "iss" claim.
	Issuer *string `pulumi:"issuer"`
	// Value for the "sub" claim.
	Subject *string `pulumi:"subject"`
}

// JwtClaimsInput is an input type that accepts JwtClaimsArgs and JwtClaimsOutput values.
// You can construct a concrete instance of `JwtClaimsInput` via:
//
//          JwtClaimsArgs{...}
type JwtClaimsInput interface {
	pulumi.Input

	ToJwtClaimsOutput() JwtClaimsOutput
	ToJwtClaimsOutputWithContext(context.Context) JwtClaimsOutput
}

// JWT claims used for the jwt-bearer authorization grant.
type JwtClaimsArgs struct {
	// Value for the "aud" claim.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// Value for the "iss" claim.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// Value for the "sub" claim.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (JwtClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaims)(nil)).Elem()
}

func (i JwtClaimsArgs) ToJwtClaimsOutput() JwtClaimsOutput {
	return i.ToJwtClaimsOutputWithContext(context.Background())
}

func (i JwtClaimsArgs) ToJwtClaimsOutputWithContext(ctx context.Context) JwtClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimsOutput)
}

func (i JwtClaimsArgs) ToJwtClaimsPtrOutput() JwtClaimsPtrOutput {
	return i.ToJwtClaimsPtrOutputWithContext(context.Background())
}

func (i JwtClaimsArgs) ToJwtClaimsPtrOutputWithContext(ctx context.Context) JwtClaimsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimsOutput).ToJwtClaimsPtrOutputWithContext(ctx)
}

// JwtClaimsPtrInput is an input type that accepts JwtClaimsArgs, JwtClaimsPtr and JwtClaimsPtrOutput values.
// You can construct a concrete instance of `JwtClaimsPtrInput` via:
//
//          JwtClaimsArgs{...}
//
//  or:
//
//          nil
type JwtClaimsPtrInput interface {
	pulumi.Input

	ToJwtClaimsPtrOutput() JwtClaimsPtrOutput
	ToJwtClaimsPtrOutputWithContext(context.Context) JwtClaimsPtrOutput
}

type jwtClaimsPtrType JwtClaimsArgs

func JwtClaimsPtr(v *JwtClaimsArgs) JwtClaimsPtrInput {
	return (*jwtClaimsPtrType)(v)
}

func (*jwtClaimsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JwtClaims)(nil)).Elem()
}

func (i *jwtClaimsPtrType) ToJwtClaimsPtrOutput() JwtClaimsPtrOutput {
	return i.ToJwtClaimsPtrOutputWithContext(context.Background())
}

func (i *jwtClaimsPtrType) ToJwtClaimsPtrOutputWithContext(ctx context.Context) JwtClaimsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimsPtrOutput)
}

// JWT claims used for the jwt-bearer authorization grant.
type JwtClaimsOutput struct{ *pulumi.OutputState }

func (JwtClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaims)(nil)).Elem()
}

func (o JwtClaimsOutput) ToJwtClaimsOutput() JwtClaimsOutput {
	return o
}

func (o JwtClaimsOutput) ToJwtClaimsOutputWithContext(ctx context.Context) JwtClaimsOutput {
	return o
}

func (o JwtClaimsOutput) ToJwtClaimsPtrOutput() JwtClaimsPtrOutput {
	return o.ToJwtClaimsPtrOutputWithContext(context.Background())
}

func (o JwtClaimsOutput) ToJwtClaimsPtrOutputWithContext(ctx context.Context) JwtClaimsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JwtClaims) *JwtClaims {
		return &v
	}).(JwtClaimsPtrOutput)
}

// Value for the "aud" claim.
func (o JwtClaimsOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JwtClaims) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// Value for the "iss" claim.
func (o JwtClaimsOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JwtClaims) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// Value for the "sub" claim.
func (o JwtClaimsOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JwtClaims) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type JwtClaimsPtrOutput struct{ *pulumi.OutputState }

func (JwtClaimsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JwtClaims)(nil)).Elem()
}

func (o JwtClaimsPtrOutput) ToJwtClaimsPtrOutput() JwtClaimsPtrOutput {
	return o
}

func (o JwtClaimsPtrOutput) ToJwtClaimsPtrOutputWithContext(ctx context.Context) JwtClaimsPtrOutput {
	return o
}

func (o JwtClaimsPtrOutput) Elem() JwtClaimsOutput {
	return o.ApplyT(func(v *JwtClaims) JwtClaims {
		if v != nil {
			return *v
		}
		var ret JwtClaims
		return ret
	}).(JwtClaimsOutput)
}

// Value for the "aud" claim.
func (o JwtClaimsPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JwtClaims) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// Value for the "iss" claim.
func (o JwtClaimsPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JwtClaims) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// Value for the "sub" claim.
func (o JwtClaimsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JwtClaims) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

// JWT claims used for the jwt-bearer authorization grant.
type JwtClaimsResponse struct {
	// Value for the "aud" claim.
	Audience string `pulumi:"audience"`
	// Value for the "iss" claim.
	Issuer string `pulumi:"issuer"`
	// Value for the "sub" claim.
	Subject string `pulumi:"subject"`
}

// JWT claims used for the jwt-bearer authorization grant.
type JwtClaimsResponseOutput struct{ *pulumi.OutputState }

func (JwtClaimsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaimsResponse)(nil)).Elem()
}

func (o JwtClaimsResponseOutput) ToJwtClaimsResponseOutput() JwtClaimsResponseOutput {
	return o
}

func (o JwtClaimsResponseOutput) ToJwtClaimsResponseOutputWithContext(ctx context.Context) JwtClaimsResponseOutput {
	return o
}

// Value for the "aud" claim.
func (o JwtClaimsResponseOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v JwtClaimsResponse) string { return v.Audience }).(pulumi.StringOutput)
}

// Value for the "iss" claim.
func (o JwtClaimsResponseOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v JwtClaimsResponse) string { return v.Issuer }).(pulumi.StringOutput)
}

// Value for the "sub" claim.
func (o JwtClaimsResponseOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v JwtClaimsResponse) string { return v.Subject }).(pulumi.StringOutput)
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
type LockConfig struct {
	// Indicates whether or not the connection is locked.
	Locked *bool `pulumi:"locked"`
	// Describes why a connection is locked.
	Reason *string `pulumi:"reason"`
}

// LockConfigInput is an input type that accepts LockConfigArgs and LockConfigOutput values.
// You can construct a concrete instance of `LockConfigInput` via:
//
//          LockConfigArgs{...}
type LockConfigInput interface {
	pulumi.Input

	ToLockConfigOutput() LockConfigOutput
	ToLockConfigOutputWithContext(context.Context) LockConfigOutput
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
type LockConfigArgs struct {
	// Indicates whether or not the connection is locked.
	Locked pulumi.BoolPtrInput `pulumi:"locked"`
	// Describes why a connection is locked.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (LockConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LockConfig)(nil)).Elem()
}

func (i LockConfigArgs) ToLockConfigOutput() LockConfigOutput {
	return i.ToLockConfigOutputWithContext(context.Background())
}

func (i LockConfigArgs) ToLockConfigOutputWithContext(ctx context.Context) LockConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockConfigOutput)
}

func (i LockConfigArgs) ToLockConfigPtrOutput() LockConfigPtrOutput {
	return i.ToLockConfigPtrOutputWithContext(context.Background())
}

func (i LockConfigArgs) ToLockConfigPtrOutputWithContext(ctx context.Context) LockConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockConfigOutput).ToLockConfigPtrOutputWithContext(ctx)
}

// LockConfigPtrInput is an input type that accepts LockConfigArgs, LockConfigPtr and LockConfigPtrOutput values.
// You can construct a concrete instance of `LockConfigPtrInput` via:
//
//          LockConfigArgs{...}
//
//  or:
//
//          nil
type LockConfigPtrInput interface {
	pulumi.Input

	ToLockConfigPtrOutput() LockConfigPtrOutput
	ToLockConfigPtrOutputWithContext(context.Context) LockConfigPtrOutput
}

type lockConfigPtrType LockConfigArgs

func LockConfigPtr(v *LockConfigArgs) LockConfigPtrInput {
	return (*lockConfigPtrType)(v)
}

func (*lockConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LockConfig)(nil)).Elem()
}

func (i *lockConfigPtrType) ToLockConfigPtrOutput() LockConfigPtrOutput {
	return i.ToLockConfigPtrOutputWithContext(context.Background())
}

func (i *lockConfigPtrType) ToLockConfigPtrOutputWithContext(ctx context.Context) LockConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockConfigPtrOutput)
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
type LockConfigOutput struct{ *pulumi.OutputState }

func (LockConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LockConfig)(nil)).Elem()
}

func (o LockConfigOutput) ToLockConfigOutput() LockConfigOutput {
	return o
}

func (o LockConfigOutput) ToLockConfigOutputWithContext(ctx context.Context) LockConfigOutput {
	return o
}

func (o LockConfigOutput) ToLockConfigPtrOutput() LockConfigPtrOutput {
	return o.ToLockConfigPtrOutputWithContext(context.Background())
}

func (o LockConfigOutput) ToLockConfigPtrOutputWithContext(ctx context.Context) LockConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LockConfig) *LockConfig {
		return &v
	}).(LockConfigPtrOutput)
}

// Indicates whether or not the connection is locked.
func (o LockConfigOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LockConfig) *bool { return v.Locked }).(pulumi.BoolPtrOutput)
}

// Describes why a connection is locked.
func (o LockConfigOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LockConfig) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type LockConfigPtrOutput struct{ *pulumi.OutputState }

func (LockConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LockConfig)(nil)).Elem()
}

func (o LockConfigPtrOutput) ToLockConfigPtrOutput() LockConfigPtrOutput {
	return o
}

func (o LockConfigPtrOutput) ToLockConfigPtrOutputWithContext(ctx context.Context) LockConfigPtrOutput {
	return o
}

func (o LockConfigPtrOutput) Elem() LockConfigOutput {
	return o.ApplyT(func(v *LockConfig) LockConfig {
		if v != nil {
			return *v
		}
		var ret LockConfig
		return ret
	}).(LockConfigOutput)
}

// Indicates whether or not the connection is locked.
func (o LockConfigPtrOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LockConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Locked
	}).(pulumi.BoolPtrOutput)
}

// Describes why a connection is locked.
func (o LockConfigPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LockConfig) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
type LockConfigResponse struct {
	// Indicates whether or not the connection is locked.
	Locked bool `pulumi:"locked"`
	// Describes why a connection is locked.
	Reason string `pulumi:"reason"`
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
type LockConfigResponseOutput struct{ *pulumi.OutputState }

func (LockConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LockConfigResponse)(nil)).Elem()
}

func (o LockConfigResponseOutput) ToLockConfigResponseOutput() LockConfigResponseOutput {
	return o
}

func (o LockConfigResponseOutput) ToLockConfigResponseOutputWithContext(ctx context.Context) LockConfigResponseOutput {
	return o
}

// Indicates whether or not the connection is locked.
func (o LockConfigResponseOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v LockConfigResponse) bool { return v.Locked }).(pulumi.BoolOutput)
}

// Describes why a connection is locked.
func (o LockConfigResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v LockConfigResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
type Oauth2ClientCredentials struct {
	// The client identifier.
	ClientId *string `pulumi:"clientId"`
	// Secret version reference containing the client secret.
	ClientSecret *Secret `pulumi:"clientSecret"`
}

// Oauth2ClientCredentialsInput is an input type that accepts Oauth2ClientCredentialsArgs and Oauth2ClientCredentialsOutput values.
// You can construct a concrete instance of `Oauth2ClientCredentialsInput` via:
//
//          Oauth2ClientCredentialsArgs{...}
type Oauth2ClientCredentialsInput interface {
	pulumi.Input

	ToOauth2ClientCredentialsOutput() Oauth2ClientCredentialsOutput
	ToOauth2ClientCredentialsOutputWithContext(context.Context) Oauth2ClientCredentialsOutput
}

// Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
type Oauth2ClientCredentialsArgs struct {
	// The client identifier.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Secret version reference containing the client secret.
	ClientSecret SecretPtrInput `pulumi:"clientSecret"`
}

func (Oauth2ClientCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2ClientCredentials)(nil)).Elem()
}

func (i Oauth2ClientCredentialsArgs) ToOauth2ClientCredentialsOutput() Oauth2ClientCredentialsOutput {
	return i.ToOauth2ClientCredentialsOutputWithContext(context.Background())
}

func (i Oauth2ClientCredentialsArgs) ToOauth2ClientCredentialsOutputWithContext(ctx context.Context) Oauth2ClientCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2ClientCredentialsOutput)
}

func (i Oauth2ClientCredentialsArgs) ToOauth2ClientCredentialsPtrOutput() Oauth2ClientCredentialsPtrOutput {
	return i.ToOauth2ClientCredentialsPtrOutputWithContext(context.Background())
}

func (i Oauth2ClientCredentialsArgs) ToOauth2ClientCredentialsPtrOutputWithContext(ctx context.Context) Oauth2ClientCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2ClientCredentialsOutput).ToOauth2ClientCredentialsPtrOutputWithContext(ctx)
}

// Oauth2ClientCredentialsPtrInput is an input type that accepts Oauth2ClientCredentialsArgs, Oauth2ClientCredentialsPtr and Oauth2ClientCredentialsPtrOutput values.
// You can construct a concrete instance of `Oauth2ClientCredentialsPtrInput` via:
//
//          Oauth2ClientCredentialsArgs{...}
//
//  or:
//
//          nil
type Oauth2ClientCredentialsPtrInput interface {
	pulumi.Input

	ToOauth2ClientCredentialsPtrOutput() Oauth2ClientCredentialsPtrOutput
	ToOauth2ClientCredentialsPtrOutputWithContext(context.Context) Oauth2ClientCredentialsPtrOutput
}

type oauth2ClientCredentialsPtrType Oauth2ClientCredentialsArgs

func Oauth2ClientCredentialsPtr(v *Oauth2ClientCredentialsArgs) Oauth2ClientCredentialsPtrInput {
	return (*oauth2ClientCredentialsPtrType)(v)
}

func (*oauth2ClientCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Oauth2ClientCredentials)(nil)).Elem()
}

func (i *oauth2ClientCredentialsPtrType) ToOauth2ClientCredentialsPtrOutput() Oauth2ClientCredentialsPtrOutput {
	return i.ToOauth2ClientCredentialsPtrOutputWithContext(context.Background())
}

func (i *oauth2ClientCredentialsPtrType) ToOauth2ClientCredentialsPtrOutputWithContext(ctx context.Context) Oauth2ClientCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2ClientCredentialsPtrOutput)
}

// Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
type Oauth2ClientCredentialsOutput struct{ *pulumi.OutputState }

func (Oauth2ClientCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2ClientCredentials)(nil)).Elem()
}

func (o Oauth2ClientCredentialsOutput) ToOauth2ClientCredentialsOutput() Oauth2ClientCredentialsOutput {
	return o
}

func (o Oauth2ClientCredentialsOutput) ToOauth2ClientCredentialsOutputWithContext(ctx context.Context) Oauth2ClientCredentialsOutput {
	return o
}

func (o Oauth2ClientCredentialsOutput) ToOauth2ClientCredentialsPtrOutput() Oauth2ClientCredentialsPtrOutput {
	return o.ToOauth2ClientCredentialsPtrOutputWithContext(context.Background())
}

func (o Oauth2ClientCredentialsOutput) ToOauth2ClientCredentialsPtrOutputWithContext(ctx context.Context) Oauth2ClientCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Oauth2ClientCredentials) *Oauth2ClientCredentials {
		return &v
	}).(Oauth2ClientCredentialsPtrOutput)
}

// The client identifier.
func (o Oauth2ClientCredentialsOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Oauth2ClientCredentials) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Secret version reference containing the client secret.
func (o Oauth2ClientCredentialsOutput) ClientSecret() SecretPtrOutput {
	return o.ApplyT(func(v Oauth2ClientCredentials) *Secret { return v.ClientSecret }).(SecretPtrOutput)
}

type Oauth2ClientCredentialsPtrOutput struct{ *pulumi.OutputState }

func (Oauth2ClientCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Oauth2ClientCredentials)(nil)).Elem()
}

func (o Oauth2ClientCredentialsPtrOutput) ToOauth2ClientCredentialsPtrOutput() Oauth2ClientCredentialsPtrOutput {
	return o
}

func (o Oauth2ClientCredentialsPtrOutput) ToOauth2ClientCredentialsPtrOutputWithContext(ctx context.Context) Oauth2ClientCredentialsPtrOutput {
	return o
}

func (o Oauth2ClientCredentialsPtrOutput) Elem() Oauth2ClientCredentialsOutput {
	return o.ApplyT(func(v *Oauth2ClientCredentials) Oauth2ClientCredentials {
		if v != nil {
			return *v
		}
		var ret Oauth2ClientCredentials
		return ret
	}).(Oauth2ClientCredentialsOutput)
}

// The client identifier.
func (o Oauth2ClientCredentialsPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oauth2ClientCredentials) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Secret version reference containing the client secret.
func (o Oauth2ClientCredentialsPtrOutput) ClientSecret() SecretPtrOutput {
	return o.ApplyT(func(v *Oauth2ClientCredentials) *Secret {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(SecretPtrOutput)
}

// Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
type Oauth2ClientCredentialsResponse struct {
	// The client identifier.
	ClientId string `pulumi:"clientId"`
	// Secret version reference containing the client secret.
	ClientSecret SecretResponse `pulumi:"clientSecret"`
}

// Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
type Oauth2ClientCredentialsResponseOutput struct{ *pulumi.OutputState }

func (Oauth2ClientCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2ClientCredentialsResponse)(nil)).Elem()
}

func (o Oauth2ClientCredentialsResponseOutput) ToOauth2ClientCredentialsResponseOutput() Oauth2ClientCredentialsResponseOutput {
	return o
}

func (o Oauth2ClientCredentialsResponseOutput) ToOauth2ClientCredentialsResponseOutputWithContext(ctx context.Context) Oauth2ClientCredentialsResponseOutput {
	return o
}

// The client identifier.
func (o Oauth2ClientCredentialsResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v Oauth2ClientCredentialsResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Secret version reference containing the client secret.
func (o Oauth2ClientCredentialsResponseOutput) ClientSecret() SecretResponseOutput {
	return o.ApplyT(func(v Oauth2ClientCredentialsResponse) SecretResponse { return v.ClientSecret }).(SecretResponseOutput)
}

// Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
type Oauth2JwtBearer struct {
	// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
	ClientKey *Secret `pulumi:"clientKey"`
	// JwtClaims providers fields to generate the token.
	JwtClaims *JwtClaims `pulumi:"jwtClaims"`
}

// Oauth2JwtBearerInput is an input type that accepts Oauth2JwtBearerArgs and Oauth2JwtBearerOutput values.
// You can construct a concrete instance of `Oauth2JwtBearerInput` via:
//
//          Oauth2JwtBearerArgs{...}
type Oauth2JwtBearerInput interface {
	pulumi.Input

	ToOauth2JwtBearerOutput() Oauth2JwtBearerOutput
	ToOauth2JwtBearerOutputWithContext(context.Context) Oauth2JwtBearerOutput
}

// Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
type Oauth2JwtBearerArgs struct {
	// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
	ClientKey SecretPtrInput `pulumi:"clientKey"`
	// JwtClaims providers fields to generate the token.
	JwtClaims JwtClaimsPtrInput `pulumi:"jwtClaims"`
}

func (Oauth2JwtBearerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2JwtBearer)(nil)).Elem()
}

func (i Oauth2JwtBearerArgs) ToOauth2JwtBearerOutput() Oauth2JwtBearerOutput {
	return i.ToOauth2JwtBearerOutputWithContext(context.Background())
}

func (i Oauth2JwtBearerArgs) ToOauth2JwtBearerOutputWithContext(ctx context.Context) Oauth2JwtBearerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2JwtBearerOutput)
}

func (i Oauth2JwtBearerArgs) ToOauth2JwtBearerPtrOutput() Oauth2JwtBearerPtrOutput {
	return i.ToOauth2JwtBearerPtrOutputWithContext(context.Background())
}

func (i Oauth2JwtBearerArgs) ToOauth2JwtBearerPtrOutputWithContext(ctx context.Context) Oauth2JwtBearerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2JwtBearerOutput).ToOauth2JwtBearerPtrOutputWithContext(ctx)
}

// Oauth2JwtBearerPtrInput is an input type that accepts Oauth2JwtBearerArgs, Oauth2JwtBearerPtr and Oauth2JwtBearerPtrOutput values.
// You can construct a concrete instance of `Oauth2JwtBearerPtrInput` via:
//
//          Oauth2JwtBearerArgs{...}
//
//  or:
//
//          nil
type Oauth2JwtBearerPtrInput interface {
	pulumi.Input

	ToOauth2JwtBearerPtrOutput() Oauth2JwtBearerPtrOutput
	ToOauth2JwtBearerPtrOutputWithContext(context.Context) Oauth2JwtBearerPtrOutput
}

type oauth2JwtBearerPtrType Oauth2JwtBearerArgs

func Oauth2JwtBearerPtr(v *Oauth2JwtBearerArgs) Oauth2JwtBearerPtrInput {
	return (*oauth2JwtBearerPtrType)(v)
}

func (*oauth2JwtBearerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Oauth2JwtBearer)(nil)).Elem()
}

func (i *oauth2JwtBearerPtrType) ToOauth2JwtBearerPtrOutput() Oauth2JwtBearerPtrOutput {
	return i.ToOauth2JwtBearerPtrOutputWithContext(context.Background())
}

func (i *oauth2JwtBearerPtrType) ToOauth2JwtBearerPtrOutputWithContext(ctx context.Context) Oauth2JwtBearerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2JwtBearerPtrOutput)
}

// Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
type Oauth2JwtBearerOutput struct{ *pulumi.OutputState }

func (Oauth2JwtBearerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2JwtBearer)(nil)).Elem()
}

func (o Oauth2JwtBearerOutput) ToOauth2JwtBearerOutput() Oauth2JwtBearerOutput {
	return o
}

func (o Oauth2JwtBearerOutput) ToOauth2JwtBearerOutputWithContext(ctx context.Context) Oauth2JwtBearerOutput {
	return o
}

func (o Oauth2JwtBearerOutput) ToOauth2JwtBearerPtrOutput() Oauth2JwtBearerPtrOutput {
	return o.ToOauth2JwtBearerPtrOutputWithContext(context.Background())
}

func (o Oauth2JwtBearerOutput) ToOauth2JwtBearerPtrOutputWithContext(ctx context.Context) Oauth2JwtBearerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Oauth2JwtBearer) *Oauth2JwtBearer {
		return &v
	}).(Oauth2JwtBearerPtrOutput)
}

// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
func (o Oauth2JwtBearerOutput) ClientKey() SecretPtrOutput {
	return o.ApplyT(func(v Oauth2JwtBearer) *Secret { return v.ClientKey }).(SecretPtrOutput)
}

// JwtClaims providers fields to generate the token.
func (o Oauth2JwtBearerOutput) JwtClaims() JwtClaimsPtrOutput {
	return o.ApplyT(func(v Oauth2JwtBearer) *JwtClaims { return v.JwtClaims }).(JwtClaimsPtrOutput)
}

type Oauth2JwtBearerPtrOutput struct{ *pulumi.OutputState }

func (Oauth2JwtBearerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Oauth2JwtBearer)(nil)).Elem()
}

func (o Oauth2JwtBearerPtrOutput) ToOauth2JwtBearerPtrOutput() Oauth2JwtBearerPtrOutput {
	return o
}

func (o Oauth2JwtBearerPtrOutput) ToOauth2JwtBearerPtrOutputWithContext(ctx context.Context) Oauth2JwtBearerPtrOutput {
	return o
}

func (o Oauth2JwtBearerPtrOutput) Elem() Oauth2JwtBearerOutput {
	return o.ApplyT(func(v *Oauth2JwtBearer) Oauth2JwtBearer {
		if v != nil {
			return *v
		}
		var ret Oauth2JwtBearer
		return ret
	}).(Oauth2JwtBearerOutput)
}

// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
func (o Oauth2JwtBearerPtrOutput) ClientKey() SecretPtrOutput {
	return o.ApplyT(func(v *Oauth2JwtBearer) *Secret {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(SecretPtrOutput)
}

// JwtClaims providers fields to generate the token.
func (o Oauth2JwtBearerPtrOutput) JwtClaims() JwtClaimsPtrOutput {
	return o.ApplyT(func(v *Oauth2JwtBearer) *JwtClaims {
		if v == nil {
			return nil
		}
		return v.JwtClaims
	}).(JwtClaimsPtrOutput)
}

// Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
type Oauth2JwtBearerResponse struct {
	// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
	ClientKey SecretResponse `pulumi:"clientKey"`
	// JwtClaims providers fields to generate the token.
	JwtClaims JwtClaimsResponse `pulumi:"jwtClaims"`
}

// Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
type Oauth2JwtBearerResponseOutput struct{ *pulumi.OutputState }

func (Oauth2JwtBearerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2JwtBearerResponse)(nil)).Elem()
}

func (o Oauth2JwtBearerResponseOutput) ToOauth2JwtBearerResponseOutput() Oauth2JwtBearerResponseOutput {
	return o
}

func (o Oauth2JwtBearerResponseOutput) ToOauth2JwtBearerResponseOutputWithContext(ctx context.Context) Oauth2JwtBearerResponseOutput {
	return o
}

// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
func (o Oauth2JwtBearerResponseOutput) ClientKey() SecretResponseOutput {
	return o.ApplyT(func(v Oauth2JwtBearerResponse) SecretResponse { return v.ClientKey }).(SecretResponseOutput)
}

// JwtClaims providers fields to generate the token.
func (o Oauth2JwtBearerResponseOutput) JwtClaims() JwtClaimsResponseOutput {
	return o.ApplyT(func(v Oauth2JwtBearerResponse) JwtClaimsResponse { return v.JwtClaims }).(JwtClaimsResponseOutput)
}

// Secret provides a reference to entries in Secret Manager.
type Secret struct {
	// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
	SecretVersion *string `pulumi:"secretVersion"`
}

// SecretInput is an input type that accepts SecretArgs and SecretOutput values.
// You can construct a concrete instance of `SecretInput` via:
//
//          SecretArgs{...}
type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(context.Context) SecretOutput
}

// Secret provides a reference to entries in Secret Manager.
type SecretArgs struct {
	// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
	SecretVersion pulumi.StringPtrInput `pulumi:"secretVersion"`
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (i SecretArgs) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

func (i SecretArgs) ToSecretPtrOutput() SecretPtrOutput {
	return i.ToSecretPtrOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput).ToSecretPtrOutputWithContext(ctx)
}

// SecretPtrInput is an input type that accepts SecretArgs, SecretPtr and SecretPtrOutput values.
// You can construct a concrete instance of `SecretPtrInput` via:
//
//          SecretArgs{...}
//
//  or:
//
//          nil
type SecretPtrInput interface {
	pulumi.Input

	ToSecretPtrOutput() SecretPtrOutput
	ToSecretPtrOutputWithContext(context.Context) SecretPtrOutput
}

type secretPtrType SecretArgs

func SecretPtr(v *SecretArgs) SecretPtrInput {
	return (*secretPtrType)(v)
}

func (*secretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *secretPtrType) ToSecretPtrOutput() SecretPtrOutput {
	return i.ToSecretPtrOutputWithContext(context.Background())
}

func (i *secretPtrType) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretPtrOutput)
}

// Secret provides a reference to entries in Secret Manager.
type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

func (o SecretOutput) ToSecretPtrOutput() SecretPtrOutput {
	return o.ToSecretPtrOutputWithContext(context.Background())
}

func (o SecretOutput) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Secret) *Secret {
		return &v
	}).(SecretPtrOutput)
}

// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
func (o SecretOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secret) *string { return v.SecretVersion }).(pulumi.StringPtrOutput)
}

type SecretPtrOutput struct{ *pulumi.OutputState }

func (SecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretPtrOutput) ToSecretPtrOutput() SecretPtrOutput {
	return o
}

func (o SecretPtrOutput) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return o
}

func (o SecretPtrOutput) Elem() SecretOutput {
	return o.ApplyT(func(v *Secret) Secret {
		if v != nil {
			return *v
		}
		var ret Secret
		return ret
	}).(SecretOutput)
}

// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
func (o SecretPtrOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) *string {
		if v == nil {
			return nil
		}
		return v.SecretVersion
	}).(pulumi.StringPtrOutput)
}

// Secret provides a reference to entries in Secret Manager.
type SecretResponse struct {
	// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
	SecretVersion string `pulumi:"secretVersion"`
}

// Secret provides a reference to entries in Secret Manager.
type SecretResponseOutput struct{ *pulumi.OutputState }

func (SecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretResponse)(nil)).Elem()
}

func (o SecretResponseOutput) ToSecretResponseOutput() SecretResponseOutput {
	return o
}

func (o SecretResponseOutput) ToSecretResponseOutputWithContext(ctx context.Context) SecretResponseOutput {
	return o
}

// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
func (o SecretResponseOutput) SecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SecretResponse) string { return v.SecretVersion }).(pulumi.StringOutput)
}

// Parameters to support Ssh public key Authentication.
type SshPublicKey struct {
	// Format of SSH Client cert.
	CertType *string `pulumi:"certType"`
	// This is an optional field used in case client has enabled multi-factor authentication
	Password *Secret `pulumi:"password"`
	// SSH Client Cert. It should contain both public and private key.
	SshClientCert *Secret `pulumi:"sshClientCert"`
	// The user account used to authenticate.
	Username *string `pulumi:"username"`
}

// SshPublicKeyInput is an input type that accepts SshPublicKeyArgs and SshPublicKeyOutput values.
// You can construct a concrete instance of `SshPublicKeyInput` via:
//
//          SshPublicKeyArgs{...}
type SshPublicKeyInput interface {
	pulumi.Input

	ToSshPublicKeyOutput() SshPublicKeyOutput
	ToSshPublicKeyOutputWithContext(context.Context) SshPublicKeyOutput
}

// Parameters to support Ssh public key Authentication.
type SshPublicKeyArgs struct {
	// Format of SSH Client cert.
	CertType pulumi.StringPtrInput `pulumi:"certType"`
	// This is an optional field used in case client has enabled multi-factor authentication
	Password SecretPtrInput `pulumi:"password"`
	// SSH Client Cert. It should contain both public and private key.
	SshClientCert SecretPtrInput `pulumi:"sshClientCert"`
	// The user account used to authenticate.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SshPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKey)(nil)).Elem()
}

func (i SshPublicKeyArgs) ToSshPublicKeyOutput() SshPublicKeyOutput {
	return i.ToSshPublicKeyOutputWithContext(context.Background())
}

func (i SshPublicKeyArgs) ToSshPublicKeyOutputWithContext(ctx context.Context) SshPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyOutput)
}

func (i SshPublicKeyArgs) ToSshPublicKeyPtrOutput() SshPublicKeyPtrOutput {
	return i.ToSshPublicKeyPtrOutputWithContext(context.Background())
}

func (i SshPublicKeyArgs) ToSshPublicKeyPtrOutputWithContext(ctx context.Context) SshPublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyOutput).ToSshPublicKeyPtrOutputWithContext(ctx)
}

// SshPublicKeyPtrInput is an input type that accepts SshPublicKeyArgs, SshPublicKeyPtr and SshPublicKeyPtrOutput values.
// You can construct a concrete instance of `SshPublicKeyPtrInput` via:
//
//          SshPublicKeyArgs{...}
//
//  or:
//
//          nil
type SshPublicKeyPtrInput interface {
	pulumi.Input

	ToSshPublicKeyPtrOutput() SshPublicKeyPtrOutput
	ToSshPublicKeyPtrOutputWithContext(context.Context) SshPublicKeyPtrOutput
}

type sshPublicKeyPtrType SshPublicKeyArgs

func SshPublicKeyPtr(v *SshPublicKeyArgs) SshPublicKeyPtrInput {
	return (*sshPublicKeyPtrType)(v)
}

func (*sshPublicKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshPublicKey)(nil)).Elem()
}

func (i *sshPublicKeyPtrType) ToSshPublicKeyPtrOutput() SshPublicKeyPtrOutput {
	return i.ToSshPublicKeyPtrOutputWithContext(context.Background())
}

func (i *sshPublicKeyPtrType) ToSshPublicKeyPtrOutputWithContext(ctx context.Context) SshPublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyPtrOutput)
}

// Parameters to support Ssh public key Authentication.
type SshPublicKeyOutput struct{ *pulumi.OutputState }

func (SshPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKey)(nil)).Elem()
}

func (o SshPublicKeyOutput) ToSshPublicKeyOutput() SshPublicKeyOutput {
	return o
}

func (o SshPublicKeyOutput) ToSshPublicKeyOutputWithContext(ctx context.Context) SshPublicKeyOutput {
	return o
}

func (o SshPublicKeyOutput) ToSshPublicKeyPtrOutput() SshPublicKeyPtrOutput {
	return o.ToSshPublicKeyPtrOutputWithContext(context.Background())
}

func (o SshPublicKeyOutput) ToSshPublicKeyPtrOutputWithContext(ctx context.Context) SshPublicKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshPublicKey) *SshPublicKey {
		return &v
	}).(SshPublicKeyPtrOutput)
}

// Format of SSH Client cert.
func (o SshPublicKeyOutput) CertType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKey) *string { return v.CertType }).(pulumi.StringPtrOutput)
}

// This is an optional field used in case client has enabled multi-factor authentication
func (o SshPublicKeyOutput) Password() SecretPtrOutput {
	return o.ApplyT(func(v SshPublicKey) *Secret { return v.Password }).(SecretPtrOutput)
}

// SSH Client Cert. It should contain both public and private key.
func (o SshPublicKeyOutput) SshClientCert() SecretPtrOutput {
	return o.ApplyT(func(v SshPublicKey) *Secret { return v.SshClientCert }).(SecretPtrOutput)
}

// The user account used to authenticate.
func (o SshPublicKeyOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKey) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SshPublicKeyPtrOutput struct{ *pulumi.OutputState }

func (SshPublicKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshPublicKey)(nil)).Elem()
}

func (o SshPublicKeyPtrOutput) ToSshPublicKeyPtrOutput() SshPublicKeyPtrOutput {
	return o
}

func (o SshPublicKeyPtrOutput) ToSshPublicKeyPtrOutputWithContext(ctx context.Context) SshPublicKeyPtrOutput {
	return o
}

func (o SshPublicKeyPtrOutput) Elem() SshPublicKeyOutput {
	return o.ApplyT(func(v *SshPublicKey) SshPublicKey {
		if v != nil {
			return *v
		}
		var ret SshPublicKey
		return ret
	}).(SshPublicKeyOutput)
}

// Format of SSH Client cert.
func (o SshPublicKeyPtrOutput) CertType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshPublicKey) *string {
		if v == nil {
			return nil
		}
		return v.CertType
	}).(pulumi.StringPtrOutput)
}

// This is an optional field used in case client has enabled multi-factor authentication
func (o SshPublicKeyPtrOutput) Password() SecretPtrOutput {
	return o.ApplyT(func(v *SshPublicKey) *Secret {
		if v == nil {
			return nil
		}
		return v.Password
	}).(SecretPtrOutput)
}

// SSH Client Cert. It should contain both public and private key.
func (o SshPublicKeyPtrOutput) SshClientCert() SecretPtrOutput {
	return o.ApplyT(func(v *SshPublicKey) *Secret {
		if v == nil {
			return nil
		}
		return v.SshClientCert
	}).(SecretPtrOutput)
}

// The user account used to authenticate.
func (o SshPublicKeyPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshPublicKey) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Parameters to support Ssh public key Authentication.
type SshPublicKeyResponse struct {
	// Format of SSH Client cert.
	CertType string `pulumi:"certType"`
	// This is an optional field used in case client has enabled multi-factor authentication
	Password SecretResponse `pulumi:"password"`
	// SSH Client Cert. It should contain both public and private key.
	SshClientCert SecretResponse `pulumi:"sshClientCert"`
	// The user account used to authenticate.
	Username string `pulumi:"username"`
}

// Parameters to support Ssh public key Authentication.
type SshPublicKeyResponseOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutput() SshPublicKeyResponseOutput {
	return o
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutputWithContext(ctx context.Context) SshPublicKeyResponseOutput {
	return o
}

// Format of SSH Client cert.
func (o SshPublicKeyResponseOutput) CertType() pulumi.StringOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) string { return v.CertType }).(pulumi.StringOutput)
}

// This is an optional field used in case client has enabled multi-factor authentication
func (o SshPublicKeyResponseOutput) Password() SecretResponseOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) SecretResponse { return v.Password }).(SecretResponseOutput)
}

// SSH Client Cert. It should contain both public and private key.
func (o SshPublicKeyResponseOutput) SshClientCert() SecretResponseOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) SecretResponse { return v.SshClientCert }).(SecretResponseOutput)
}

// The user account used to authenticate.
func (o SshPublicKeyResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Parameters to support Username and Password Authentication.
type UserPassword struct {
	// Secret version reference containing the password.
	Password *Secret `pulumi:"password"`
	// Username.
	Username *string `pulumi:"username"`
}

// UserPasswordInput is an input type that accepts UserPasswordArgs and UserPasswordOutput values.
// You can construct a concrete instance of `UserPasswordInput` via:
//
//          UserPasswordArgs{...}
type UserPasswordInput interface {
	pulumi.Input

	ToUserPasswordOutput() UserPasswordOutput
	ToUserPasswordOutputWithContext(context.Context) UserPasswordOutput
}

// Parameters to support Username and Password Authentication.
type UserPasswordArgs struct {
	// Secret version reference containing the password.
	Password SecretPtrInput `pulumi:"password"`
	// Username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (UserPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPassword)(nil)).Elem()
}

func (i UserPasswordArgs) ToUserPasswordOutput() UserPasswordOutput {
	return i.ToUserPasswordOutputWithContext(context.Background())
}

func (i UserPasswordArgs) ToUserPasswordOutputWithContext(ctx context.Context) UserPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordOutput)
}

func (i UserPasswordArgs) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return i.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (i UserPasswordArgs) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordOutput).ToUserPasswordPtrOutputWithContext(ctx)
}

// UserPasswordPtrInput is an input type that accepts UserPasswordArgs, UserPasswordPtr and UserPasswordPtrOutput values.
// You can construct a concrete instance of `UserPasswordPtrInput` via:
//
//          UserPasswordArgs{...}
//
//  or:
//
//          nil
type UserPasswordPtrInput interface {
	pulumi.Input

	ToUserPasswordPtrOutput() UserPasswordPtrOutput
	ToUserPasswordPtrOutputWithContext(context.Context) UserPasswordPtrOutput
}

type userPasswordPtrType UserPasswordArgs

func UserPasswordPtr(v *UserPasswordArgs) UserPasswordPtrInput {
	return (*userPasswordPtrType)(v)
}

func (*userPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPassword)(nil)).Elem()
}

func (i *userPasswordPtrType) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return i.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (i *userPasswordPtrType) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordPtrOutput)
}

// Parameters to support Username and Password Authentication.
type UserPasswordOutput struct{ *pulumi.OutputState }

func (UserPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPassword)(nil)).Elem()
}

func (o UserPasswordOutput) ToUserPasswordOutput() UserPasswordOutput {
	return o
}

func (o UserPasswordOutput) ToUserPasswordOutputWithContext(ctx context.Context) UserPasswordOutput {
	return o
}

func (o UserPasswordOutput) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return o.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (o UserPasswordOutput) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserPassword) *UserPassword {
		return &v
	}).(UserPasswordPtrOutput)
}

// Secret version reference containing the password.
func (o UserPasswordOutput) Password() SecretPtrOutput {
	return o.ApplyT(func(v UserPassword) *Secret { return v.Password }).(SecretPtrOutput)
}

// Username.
func (o UserPasswordOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPassword) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type UserPasswordPtrOutput struct{ *pulumi.OutputState }

func (UserPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPassword)(nil)).Elem()
}

func (o UserPasswordPtrOutput) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return o
}

func (o UserPasswordPtrOutput) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return o
}

func (o UserPasswordPtrOutput) Elem() UserPasswordOutput {
	return o.ApplyT(func(v *UserPassword) UserPassword {
		if v != nil {
			return *v
		}
		var ret UserPassword
		return ret
	}).(UserPasswordOutput)
}

// Secret version reference containing the password.
func (o UserPasswordPtrOutput) Password() SecretPtrOutput {
	return o.ApplyT(func(v *UserPassword) *Secret {
		if v == nil {
			return nil
		}
		return v.Password
	}).(SecretPtrOutput)
}

// Username.
func (o UserPasswordPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPassword) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Parameters to support Username and Password Authentication.
type UserPasswordResponse struct {
	// Secret version reference containing the password.
	Password SecretResponse `pulumi:"password"`
	// Username.
	Username string `pulumi:"username"`
}

// Parameters to support Username and Password Authentication.
type UserPasswordResponseOutput struct{ *pulumi.OutputState }

func (UserPasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPasswordResponse)(nil)).Elem()
}

func (o UserPasswordResponseOutput) ToUserPasswordResponseOutput() UserPasswordResponseOutput {
	return o
}

func (o UserPasswordResponseOutput) ToUserPasswordResponseOutputWithContext(ctx context.Context) UserPasswordResponseOutput {
	return o
}

// Secret version reference containing the password.
func (o UserPasswordResponseOutput) Password() SecretResponseOutput {
	return o.ApplyT(func(v UserPasswordResponse) SecretResponse { return v.Password }).(SecretResponseOutput)
}

// Username.
func (o UserPasswordResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v UserPasswordResponse) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthConfigInput)(nil)).Elem(), AuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthConfigPtrInput)(nil)).Elem(), AuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigVariableInput)(nil)).Elem(), ConfigVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigVariableArrayInput)(nil)).Elem(), ConfigVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JwtClaimsInput)(nil)).Elem(), JwtClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JwtClaimsPtrInput)(nil)).Elem(), JwtClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LockConfigInput)(nil)).Elem(), LockConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LockConfigPtrInput)(nil)).Elem(), LockConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Oauth2ClientCredentialsInput)(nil)).Elem(), Oauth2ClientCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Oauth2ClientCredentialsPtrInput)(nil)).Elem(), Oauth2ClientCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Oauth2JwtBearerInput)(nil)).Elem(), Oauth2JwtBearerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Oauth2JwtBearerPtrInput)(nil)).Elem(), Oauth2JwtBearerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), SecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretPtrInput)(nil)).Elem(), SecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshPublicKeyInput)(nil)).Elem(), SshPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshPublicKeyPtrInput)(nil)).Elem(), SshPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordInput)(nil)).Elem(), UserPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordPtrInput)(nil)).Elem(), UserPasswordArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuthConfigOutput{})
	pulumi.RegisterOutputType(AuthConfigPtrOutput{})
	pulumi.RegisterOutputType(AuthConfigResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigVariableOutput{})
	pulumi.RegisterOutputType(ConfigVariableArrayOutput{})
	pulumi.RegisterOutputType(ConfigVariableResponseOutput{})
	pulumi.RegisterOutputType(ConfigVariableResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectionStatusResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(JwtClaimsOutput{})
	pulumi.RegisterOutputType(JwtClaimsPtrOutput{})
	pulumi.RegisterOutputType(JwtClaimsResponseOutput{})
	pulumi.RegisterOutputType(LockConfigOutput{})
	pulumi.RegisterOutputType(LockConfigPtrOutput{})
	pulumi.RegisterOutputType(LockConfigResponseOutput{})
	pulumi.RegisterOutputType(Oauth2ClientCredentialsOutput{})
	pulumi.RegisterOutputType(Oauth2ClientCredentialsPtrOutput{})
	pulumi.RegisterOutputType(Oauth2ClientCredentialsResponseOutput{})
	pulumi.RegisterOutputType(Oauth2JwtBearerOutput{})
	pulumi.RegisterOutputType(Oauth2JwtBearerPtrOutput{})
	pulumi.RegisterOutputType(Oauth2JwtBearerResponseOutput{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretPtrOutput{})
	pulumi.RegisterOutputType(SecretResponseOutput{})
	pulumi.RegisterOutputType(SshPublicKeyOutput{})
	pulumi.RegisterOutputType(SshPublicKeyPtrOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseOutput{})
	pulumi.RegisterOutputType(UserPasswordOutput{})
	pulumi.RegisterOutputType(UserPasswordPtrOutput{})
	pulumi.RegisterOutputType(UserPasswordResponseOutput{})
}
