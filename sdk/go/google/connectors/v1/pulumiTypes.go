// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

func (i AuditConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuditConfig] {
	return pulumix.Output[AuditConfig]{
		OutputState: i.ToAuditConfigOutputWithContext(ctx).OutputState,
	}
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

func (i AuditConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfig] {
	return pulumix.Output[[]AuditConfig]{
		OutputState: i.ToAuditConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuditConfig] {
	return pulumix.Output[AuditConfig]{
		OutputState: o.OutputState,
	}
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfig] {
	return pulumix.Output[[]AuditConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuditConfigResponse] {
	return pulumix.Output[AuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditConfigResponse] {
	return pulumix.Output[[]AuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

func (i AuditLogConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfig] {
	return pulumix.Output[AuditLogConfig]{
		OutputState: i.ToAuditLogConfigOutputWithContext(ctx).OutputState,
	}
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

func (i AuditLogConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfig] {
	return pulumix.Output[[]AuditLogConfig]{
		OutputState: i.ToAuditLogConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfig] {
	return pulumix.Output[AuditLogConfig]{
		OutputState: o.OutputState,
	}
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfig] {
	return pulumix.Output[[]AuditLogConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfigResponse] {
	return pulumix.Output[AuditLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AuditLogConfigResponse] {
	return pulumix.Output[[]AuditLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// AuthConfig defines details of a authentication type.
type AuthConfig struct {
	// List containing additional auth configs.
	AdditionalVariables []ConfigVariable `pulumi:"additionalVariables"`
	// Identifier key for auth config
	AuthKey *string `pulumi:"authKey"`
	// The type of authentication configured.
	AuthType *AuthConfigAuthType `pulumi:"authType"`
	// Oauth2AuthCodeFlow.
	Oauth2AuthCodeFlow *Oauth2AuthCodeFlow `pulumi:"oauth2AuthCodeFlow"`
	// Oauth2ClientCredentials.
	Oauth2ClientCredentials *Oauth2ClientCredentials `pulumi:"oauth2ClientCredentials"`
	// Oauth2JwtBearer.
	Oauth2JwtBearer *Oauth2JwtBearer `pulumi:"oauth2JwtBearer"`
	// SSH Public Key.
	SshPublicKey *SshPublicKey `pulumi:"sshPublicKey"`
	// UserPassword.
	UserPassword *UserPassword `pulumi:"userPassword"`
}

// AuthConfigInput is an input type that accepts AuthConfigArgs and AuthConfigOutput values.
// You can construct a concrete instance of `AuthConfigInput` via:
//
//	AuthConfigArgs{...}
type AuthConfigInput interface {
	pulumi.Input

	ToAuthConfigOutput() AuthConfigOutput
	ToAuthConfigOutputWithContext(context.Context) AuthConfigOutput
}

// AuthConfig defines details of a authentication type.
type AuthConfigArgs struct {
	// List containing additional auth configs.
	AdditionalVariables ConfigVariableArrayInput `pulumi:"additionalVariables"`
	// Identifier key for auth config
	AuthKey pulumi.StringPtrInput `pulumi:"authKey"`
	// The type of authentication configured.
	AuthType AuthConfigAuthTypePtrInput `pulumi:"authType"`
	// Oauth2AuthCodeFlow.
	Oauth2AuthCodeFlow Oauth2AuthCodeFlowPtrInput `pulumi:"oauth2AuthCodeFlow"`
	// Oauth2ClientCredentials.
	Oauth2ClientCredentials Oauth2ClientCredentialsPtrInput `pulumi:"oauth2ClientCredentials"`
	// Oauth2JwtBearer.
	Oauth2JwtBearer Oauth2JwtBearerPtrInput `pulumi:"oauth2JwtBearer"`
	// SSH Public Key.
	SshPublicKey SshPublicKeyPtrInput `pulumi:"sshPublicKey"`
	// UserPassword.
	UserPassword UserPasswordPtrInput `pulumi:"userPassword"`
}

func (AuthConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfig)(nil)).Elem()
}

func (i AuthConfigArgs) ToAuthConfigOutput() AuthConfigOutput {
	return i.ToAuthConfigOutputWithContext(context.Background())
}

func (i AuthConfigArgs) ToAuthConfigOutputWithContext(ctx context.Context) AuthConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthConfigOutput)
}

func (i AuthConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuthConfig] {
	return pulumix.Output[AuthConfig]{
		OutputState: i.ToAuthConfigOutputWithContext(ctx).OutputState,
	}
}

func (i AuthConfigArgs) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return i.ToAuthConfigPtrOutputWithContext(context.Background())
}

func (i AuthConfigArgs) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthConfigOutput).ToAuthConfigPtrOutputWithContext(ctx)
}

// AuthConfigPtrInput is an input type that accepts AuthConfigArgs, AuthConfigPtr and AuthConfigPtrOutput values.
// You can construct a concrete instance of `AuthConfigPtrInput` via:
//
//	        AuthConfigArgs{...}
//
//	or:
//
//	        nil
type AuthConfigPtrInput interface {
	pulumi.Input

	ToAuthConfigPtrOutput() AuthConfigPtrOutput
	ToAuthConfigPtrOutputWithContext(context.Context) AuthConfigPtrOutput
}

type authConfigPtrType AuthConfigArgs

func AuthConfigPtr(v *AuthConfigArgs) AuthConfigPtrInput {
	return (*authConfigPtrType)(v)
}

func (*authConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthConfig)(nil)).Elem()
}

func (i *authConfigPtrType) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return i.ToAuthConfigPtrOutputWithContext(context.Background())
}

func (i *authConfigPtrType) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthConfigPtrOutput)
}

func (i *authConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*AuthConfig] {
	return pulumix.Output[*AuthConfig]{
		OutputState: i.ToAuthConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// AuthConfig defines details of a authentication type.
type AuthConfigOutput struct{ *pulumi.OutputState }

func (AuthConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfig)(nil)).Elem()
}

func (o AuthConfigOutput) ToAuthConfigOutput() AuthConfigOutput {
	return o
}

func (o AuthConfigOutput) ToAuthConfigOutputWithContext(ctx context.Context) AuthConfigOutput {
	return o
}

func (o AuthConfigOutput) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return o.ToAuthConfigPtrOutputWithContext(context.Background())
}

func (o AuthConfigOutput) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthConfig) *AuthConfig {
		return &v
	}).(AuthConfigPtrOutput)
}

func (o AuthConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuthConfig] {
	return pulumix.Output[AuthConfig]{
		OutputState: o.OutputState,
	}
}

// List containing additional auth configs.
func (o AuthConfigOutput) AdditionalVariables() ConfigVariableArrayOutput {
	return o.ApplyT(func(v AuthConfig) []ConfigVariable { return v.AdditionalVariables }).(ConfigVariableArrayOutput)
}

// Identifier key for auth config
func (o AuthConfigOutput) AuthKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthConfig) *string { return v.AuthKey }).(pulumi.StringPtrOutput)
}

// The type of authentication configured.
func (o AuthConfigOutput) AuthType() AuthConfigAuthTypePtrOutput {
	return o.ApplyT(func(v AuthConfig) *AuthConfigAuthType { return v.AuthType }).(AuthConfigAuthTypePtrOutput)
}

// Oauth2AuthCodeFlow.
func (o AuthConfigOutput) Oauth2AuthCodeFlow() Oauth2AuthCodeFlowPtrOutput {
	return o.ApplyT(func(v AuthConfig) *Oauth2AuthCodeFlow { return v.Oauth2AuthCodeFlow }).(Oauth2AuthCodeFlowPtrOutput)
}

// Oauth2ClientCredentials.
func (o AuthConfigOutput) Oauth2ClientCredentials() Oauth2ClientCredentialsPtrOutput {
	return o.ApplyT(func(v AuthConfig) *Oauth2ClientCredentials { return v.Oauth2ClientCredentials }).(Oauth2ClientCredentialsPtrOutput)
}

// Oauth2JwtBearer.
func (o AuthConfigOutput) Oauth2JwtBearer() Oauth2JwtBearerPtrOutput {
	return o.ApplyT(func(v AuthConfig) *Oauth2JwtBearer { return v.Oauth2JwtBearer }).(Oauth2JwtBearerPtrOutput)
}

// SSH Public Key.
func (o AuthConfigOutput) SshPublicKey() SshPublicKeyPtrOutput {
	return o.ApplyT(func(v AuthConfig) *SshPublicKey { return v.SshPublicKey }).(SshPublicKeyPtrOutput)
}

// UserPassword.
func (o AuthConfigOutput) UserPassword() UserPasswordPtrOutput {
	return o.ApplyT(func(v AuthConfig) *UserPassword { return v.UserPassword }).(UserPasswordPtrOutput)
}

type AuthConfigPtrOutput struct{ *pulumi.OutputState }

func (AuthConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthConfig)(nil)).Elem()
}

func (o AuthConfigPtrOutput) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return o
}

func (o AuthConfigPtrOutput) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return o
}

func (o AuthConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AuthConfig] {
	return pulumix.Output[*AuthConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuthConfigPtrOutput) Elem() AuthConfigOutput {
	return o.ApplyT(func(v *AuthConfig) AuthConfig {
		if v != nil {
			return *v
		}
		var ret AuthConfig
		return ret
	}).(AuthConfigOutput)
}

// List containing additional auth configs.
func (o AuthConfigPtrOutput) AdditionalVariables() ConfigVariableArrayOutput {
	return o.ApplyT(func(v *AuthConfig) []ConfigVariable {
		if v == nil {
			return nil
		}
		return v.AdditionalVariables
	}).(ConfigVariableArrayOutput)
}

// Identifier key for auth config
func (o AuthConfigPtrOutput) AuthKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthKey
	}).(pulumi.StringPtrOutput)
}

// The type of authentication configured.
func (o AuthConfigPtrOutput) AuthType() AuthConfigAuthTypePtrOutput {
	return o.ApplyT(func(v *AuthConfig) *AuthConfigAuthType {
		if v == nil {
			return nil
		}
		return v.AuthType
	}).(AuthConfigAuthTypePtrOutput)
}

// Oauth2AuthCodeFlow.
func (o AuthConfigPtrOutput) Oauth2AuthCodeFlow() Oauth2AuthCodeFlowPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *Oauth2AuthCodeFlow {
		if v == nil {
			return nil
		}
		return v.Oauth2AuthCodeFlow
	}).(Oauth2AuthCodeFlowPtrOutput)
}

// Oauth2ClientCredentials.
func (o AuthConfigPtrOutput) Oauth2ClientCredentials() Oauth2ClientCredentialsPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *Oauth2ClientCredentials {
		if v == nil {
			return nil
		}
		return v.Oauth2ClientCredentials
	}).(Oauth2ClientCredentialsPtrOutput)
}

// Oauth2JwtBearer.
func (o AuthConfigPtrOutput) Oauth2JwtBearer() Oauth2JwtBearerPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *Oauth2JwtBearer {
		if v == nil {
			return nil
		}
		return v.Oauth2JwtBearer
	}).(Oauth2JwtBearerPtrOutput)
}

// SSH Public Key.
func (o AuthConfigPtrOutput) SshPublicKey() SshPublicKeyPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *SshPublicKey {
		if v == nil {
			return nil
		}
		return v.SshPublicKey
	}).(SshPublicKeyPtrOutput)
}

// UserPassword.
func (o AuthConfigPtrOutput) UserPassword() UserPasswordPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *UserPassword {
		if v == nil {
			return nil
		}
		return v.UserPassword
	}).(UserPasswordPtrOutput)
}

// AuthConfig defines details of a authentication type.
type AuthConfigResponse struct {
	// List containing additional auth configs.
	AdditionalVariables []ConfigVariableResponse `pulumi:"additionalVariables"`
	// Identifier key for auth config
	AuthKey string `pulumi:"authKey"`
	// The type of authentication configured.
	AuthType string `pulumi:"authType"`
	// Oauth2AuthCodeFlow.
	Oauth2AuthCodeFlow Oauth2AuthCodeFlowResponse `pulumi:"oauth2AuthCodeFlow"`
	// Oauth2ClientCredentials.
	Oauth2ClientCredentials Oauth2ClientCredentialsResponse `pulumi:"oauth2ClientCredentials"`
	// Oauth2JwtBearer.
	Oauth2JwtBearer Oauth2JwtBearerResponse `pulumi:"oauth2JwtBearer"`
	// SSH Public Key.
	SshPublicKey SshPublicKeyResponse `pulumi:"sshPublicKey"`
	// UserPassword.
	UserPassword UserPasswordResponse `pulumi:"userPassword"`
}

// AuthConfig defines details of a authentication type.
type AuthConfigResponseOutput struct{ *pulumi.OutputState }

func (AuthConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfigResponse)(nil)).Elem()
}

func (o AuthConfigResponseOutput) ToAuthConfigResponseOutput() AuthConfigResponseOutput {
	return o
}

func (o AuthConfigResponseOutput) ToAuthConfigResponseOutputWithContext(ctx context.Context) AuthConfigResponseOutput {
	return o
}

func (o AuthConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuthConfigResponse] {
	return pulumix.Output[AuthConfigResponse]{
		OutputState: o.OutputState,
	}
}

// List containing additional auth configs.
func (o AuthConfigResponseOutput) AdditionalVariables() ConfigVariableResponseArrayOutput {
	return o.ApplyT(func(v AuthConfigResponse) []ConfigVariableResponse { return v.AdditionalVariables }).(ConfigVariableResponseArrayOutput)
}

// Identifier key for auth config
func (o AuthConfigResponseOutput) AuthKey() pulumi.StringOutput {
	return o.ApplyT(func(v AuthConfigResponse) string { return v.AuthKey }).(pulumi.StringOutput)
}

// The type of authentication configured.
func (o AuthConfigResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AuthConfigResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Oauth2AuthCodeFlow.
func (o AuthConfigResponseOutput) Oauth2AuthCodeFlow() Oauth2AuthCodeFlowResponseOutput {
	return o.ApplyT(func(v AuthConfigResponse) Oauth2AuthCodeFlowResponse { return v.Oauth2AuthCodeFlow }).(Oauth2AuthCodeFlowResponseOutput)
}

// Oauth2ClientCredentials.
func (o AuthConfigResponseOutput) Oauth2ClientCredentials() Oauth2ClientCredentialsResponseOutput {
	return o.ApplyT(func(v AuthConfigResponse) Oauth2ClientCredentialsResponse { return v.Oauth2ClientCredentials }).(Oauth2ClientCredentialsResponseOutput)
}

// Oauth2JwtBearer.
func (o AuthConfigResponseOutput) Oauth2JwtBearer() Oauth2JwtBearerResponseOutput {
	return o.ApplyT(func(v AuthConfigResponse) Oauth2JwtBearerResponse { return v.Oauth2JwtBearer }).(Oauth2JwtBearerResponseOutput)
}

// SSH Public Key.
func (o AuthConfigResponseOutput) SshPublicKey() SshPublicKeyResponseOutput {
	return o.ApplyT(func(v AuthConfigResponse) SshPublicKeyResponse { return v.SshPublicKey }).(SshPublicKeyResponseOutput)
}

// UserPassword.
func (o AuthConfigResponseOutput) UserPassword() UserPasswordResponseOutput {
	return o.ApplyT(func(v AuthConfigResponse) UserPasswordResponse { return v.UserPassword }).(UserPasswordResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

func (i BindingArgs) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: i.ToBindingOutputWithContext(ctx).OutputState,
	}
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

func (i BindingArray) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: i.ToBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

func (o BindingOutput) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: o.OutputState,
	}
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BindingResponse] {
	return pulumix.Output[BindingResponse]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BindingResponse] {
	return pulumix.Output[[]BindingResponse]{
		OutputState: o.OutputState,
	}
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
type ConfigVariable struct {
	// Value is a bool.
	BoolValue *bool `pulumi:"boolValue"`
	// Value is a Encryption Key.
	EncryptionKeyValue *EncryptionKey `pulumi:"encryptionKeyValue"`
	// Value is an integer
	IntValue *string `pulumi:"intValue"`
	// Key of the config variable.
	Key *string `pulumi:"key"`
	// Value is a secret.
	SecretValue *Secret `pulumi:"secretValue"`
	// Value is a string.
	StringValue *string `pulumi:"stringValue"`
}

// ConfigVariableInput is an input type that accepts ConfigVariableArgs and ConfigVariableOutput values.
// You can construct a concrete instance of `ConfigVariableInput` via:
//
//	ConfigVariableArgs{...}
type ConfigVariableInput interface {
	pulumi.Input

	ToConfigVariableOutput() ConfigVariableOutput
	ToConfigVariableOutputWithContext(context.Context) ConfigVariableOutput
}

// ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
type ConfigVariableArgs struct {
	// Value is a bool.
	BoolValue pulumi.BoolPtrInput `pulumi:"boolValue"`
	// Value is a Encryption Key.
	EncryptionKeyValue EncryptionKeyPtrInput `pulumi:"encryptionKeyValue"`
	// Value is an integer
	IntValue pulumi.StringPtrInput `pulumi:"intValue"`
	// Key of the config variable.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value is a secret.
	SecretValue SecretPtrInput `pulumi:"secretValue"`
	// Value is a string.
	StringValue pulumi.StringPtrInput `pulumi:"stringValue"`
}

func (ConfigVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigVariable)(nil)).Elem()
}

func (i ConfigVariableArgs) ToConfigVariableOutput() ConfigVariableOutput {
	return i.ToConfigVariableOutputWithContext(context.Background())
}

func (i ConfigVariableArgs) ToConfigVariableOutputWithContext(ctx context.Context) ConfigVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigVariableOutput)
}

func (i ConfigVariableArgs) ToOutput(ctx context.Context) pulumix.Output[ConfigVariable] {
	return pulumix.Output[ConfigVariable]{
		OutputState: i.ToConfigVariableOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigVariableArgs) ToConfigVariablePtrOutput() ConfigVariablePtrOutput {
	return i.ToConfigVariablePtrOutputWithContext(context.Background())
}

func (i ConfigVariableArgs) ToConfigVariablePtrOutputWithContext(ctx context.Context) ConfigVariablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigVariableOutput).ToConfigVariablePtrOutputWithContext(ctx)
}

// ConfigVariablePtrInput is an input type that accepts ConfigVariableArgs, ConfigVariablePtr and ConfigVariablePtrOutput values.
// You can construct a concrete instance of `ConfigVariablePtrInput` via:
//
//	        ConfigVariableArgs{...}
//
//	or:
//
//	        nil
type ConfigVariablePtrInput interface {
	pulumi.Input

	ToConfigVariablePtrOutput() ConfigVariablePtrOutput
	ToConfigVariablePtrOutputWithContext(context.Context) ConfigVariablePtrOutput
}

type configVariablePtrType ConfigVariableArgs

func ConfigVariablePtr(v *ConfigVariableArgs) ConfigVariablePtrInput {
	return (*configVariablePtrType)(v)
}

func (*configVariablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigVariable)(nil)).Elem()
}

func (i *configVariablePtrType) ToConfigVariablePtrOutput() ConfigVariablePtrOutput {
	return i.ToConfigVariablePtrOutputWithContext(context.Background())
}

func (i *configVariablePtrType) ToConfigVariablePtrOutputWithContext(ctx context.Context) ConfigVariablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigVariablePtrOutput)
}

func (i *configVariablePtrType) ToOutput(ctx context.Context) pulumix.Output[*ConfigVariable] {
	return pulumix.Output[*ConfigVariable]{
		OutputState: i.ToConfigVariablePtrOutputWithContext(ctx).OutputState,
	}
}

// ConfigVariableArrayInput is an input type that accepts ConfigVariableArray and ConfigVariableArrayOutput values.
// You can construct a concrete instance of `ConfigVariableArrayInput` via:
//
//	ConfigVariableArray{ ConfigVariableArgs{...} }
type ConfigVariableArrayInput interface {
	pulumi.Input

	ToConfigVariableArrayOutput() ConfigVariableArrayOutput
	ToConfigVariableArrayOutputWithContext(context.Context) ConfigVariableArrayOutput
}

type ConfigVariableArray []ConfigVariableInput

func (ConfigVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigVariable)(nil)).Elem()
}

func (i ConfigVariableArray) ToConfigVariableArrayOutput() ConfigVariableArrayOutput {
	return i.ToConfigVariableArrayOutputWithContext(context.Background())
}

func (i ConfigVariableArray) ToConfigVariableArrayOutputWithContext(ctx context.Context) ConfigVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigVariableArrayOutput)
}

func (i ConfigVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]ConfigVariable] {
	return pulumix.Output[[]ConfigVariable]{
		OutputState: i.ToConfigVariableArrayOutputWithContext(ctx).OutputState,
	}
}

// ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
type ConfigVariableOutput struct{ *pulumi.OutputState }

func (ConfigVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigVariable)(nil)).Elem()
}

func (o ConfigVariableOutput) ToConfigVariableOutput() ConfigVariableOutput {
	return o
}

func (o ConfigVariableOutput) ToConfigVariableOutputWithContext(ctx context.Context) ConfigVariableOutput {
	return o
}

func (o ConfigVariableOutput) ToConfigVariablePtrOutput() ConfigVariablePtrOutput {
	return o.ToConfigVariablePtrOutputWithContext(context.Background())
}

func (o ConfigVariableOutput) ToConfigVariablePtrOutputWithContext(ctx context.Context) ConfigVariablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigVariable) *ConfigVariable {
		return &v
	}).(ConfigVariablePtrOutput)
}

func (o ConfigVariableOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigVariable] {
	return pulumix.Output[ConfigVariable]{
		OutputState: o.OutputState,
	}
}

// Value is a bool.
func (o ConfigVariableOutput) BoolValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *bool { return v.BoolValue }).(pulumi.BoolPtrOutput)
}

// Value is a Encryption Key.
func (o ConfigVariableOutput) EncryptionKeyValue() EncryptionKeyPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *EncryptionKey { return v.EncryptionKeyValue }).(EncryptionKeyPtrOutput)
}

// Value is an integer
func (o ConfigVariableOutput) IntValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *string { return v.IntValue }).(pulumi.StringPtrOutput)
}

// Key of the config variable.
func (o ConfigVariableOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value is a secret.
func (o ConfigVariableOutput) SecretValue() SecretPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *Secret { return v.SecretValue }).(SecretPtrOutput)
}

// Value is a string.
func (o ConfigVariableOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigVariable) *string { return v.StringValue }).(pulumi.StringPtrOutput)
}

type ConfigVariablePtrOutput struct{ *pulumi.OutputState }

func (ConfigVariablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigVariable)(nil)).Elem()
}

func (o ConfigVariablePtrOutput) ToConfigVariablePtrOutput() ConfigVariablePtrOutput {
	return o
}

func (o ConfigVariablePtrOutput) ToConfigVariablePtrOutputWithContext(ctx context.Context) ConfigVariablePtrOutput {
	return o
}

func (o ConfigVariablePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigVariable] {
	return pulumix.Output[*ConfigVariable]{
		OutputState: o.OutputState,
	}
}

func (o ConfigVariablePtrOutput) Elem() ConfigVariableOutput {
	return o.ApplyT(func(v *ConfigVariable) ConfigVariable {
		if v != nil {
			return *v
		}
		var ret ConfigVariable
		return ret
	}).(ConfigVariableOutput)
}

// Value is a bool.
func (o ConfigVariablePtrOutput) BoolValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigVariable) *bool {
		if v == nil {
			return nil
		}
		return v.BoolValue
	}).(pulumi.BoolPtrOutput)
}

// Value is a Encryption Key.
func (o ConfigVariablePtrOutput) EncryptionKeyValue() EncryptionKeyPtrOutput {
	return o.ApplyT(func(v *ConfigVariable) *EncryptionKey {
		if v == nil {
			return nil
		}
		return v.EncryptionKeyValue
	}).(EncryptionKeyPtrOutput)
}

// Value is an integer
func (o ConfigVariablePtrOutput) IntValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigVariable) *string {
		if v == nil {
			return nil
		}
		return v.IntValue
	}).(pulumi.StringPtrOutput)
}

// Key of the config variable.
func (o ConfigVariablePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigVariable) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Value is a secret.
func (o ConfigVariablePtrOutput) SecretValue() SecretPtrOutput {
	return o.ApplyT(func(v *ConfigVariable) *Secret {
		if v == nil {
			return nil
		}
		return v.SecretValue
	}).(SecretPtrOutput)
}

// Value is a string.
func (o ConfigVariablePtrOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigVariable) *string {
		if v == nil {
			return nil
		}
		return v.StringValue
	}).(pulumi.StringPtrOutput)
}

type ConfigVariableArrayOutput struct{ *pulumi.OutputState }

func (ConfigVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigVariable)(nil)).Elem()
}

func (o ConfigVariableArrayOutput) ToConfigVariableArrayOutput() ConfigVariableArrayOutput {
	return o
}

func (o ConfigVariableArrayOutput) ToConfigVariableArrayOutputWithContext(ctx context.Context) ConfigVariableArrayOutput {
	return o
}

func (o ConfigVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConfigVariable] {
	return pulumix.Output[[]ConfigVariable]{
		OutputState: o.OutputState,
	}
}

func (o ConfigVariableArrayOutput) Index(i pulumi.IntInput) ConfigVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigVariable {
		return vs[0].([]ConfigVariable)[vs[1].(int)]
	}).(ConfigVariableOutput)
}

// ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
type ConfigVariableResponse struct {
	// Value is a bool.
	BoolValue bool `pulumi:"boolValue"`
	// Value is a Encryption Key.
	EncryptionKeyValue EncryptionKeyResponse `pulumi:"encryptionKeyValue"`
	// Value is an integer
	IntValue string `pulumi:"intValue"`
	// Key of the config variable.
	Key string `pulumi:"key"`
	// Value is a secret.
	SecretValue SecretResponse `pulumi:"secretValue"`
	// Value is a string.
	StringValue string `pulumi:"stringValue"`
}

// ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.
type ConfigVariableResponseOutput struct{ *pulumi.OutputState }

func (ConfigVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigVariableResponse)(nil)).Elem()
}

func (o ConfigVariableResponseOutput) ToConfigVariableResponseOutput() ConfigVariableResponseOutput {
	return o
}

func (o ConfigVariableResponseOutput) ToConfigVariableResponseOutputWithContext(ctx context.Context) ConfigVariableResponseOutput {
	return o
}

func (o ConfigVariableResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigVariableResponse] {
	return pulumix.Output[ConfigVariableResponse]{
		OutputState: o.OutputState,
	}
}

// Value is a bool.
func (o ConfigVariableResponseOutput) BoolValue() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigVariableResponse) bool { return v.BoolValue }).(pulumi.BoolOutput)
}

// Value is a Encryption Key.
func (o ConfigVariableResponseOutput) EncryptionKeyValue() EncryptionKeyResponseOutput {
	return o.ApplyT(func(v ConfigVariableResponse) EncryptionKeyResponse { return v.EncryptionKeyValue }).(EncryptionKeyResponseOutput)
}

// Value is an integer
func (o ConfigVariableResponseOutput) IntValue() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigVariableResponse) string { return v.IntValue }).(pulumi.StringOutput)
}

// Key of the config variable.
func (o ConfigVariableResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigVariableResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Value is a secret.
func (o ConfigVariableResponseOutput) SecretValue() SecretResponseOutput {
	return o.ApplyT(func(v ConfigVariableResponse) SecretResponse { return v.SecretValue }).(SecretResponseOutput)
}

// Value is a string.
func (o ConfigVariableResponseOutput) StringValue() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigVariableResponse) string { return v.StringValue }).(pulumi.StringOutput)
}

type ConfigVariableResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfigVariableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigVariableResponse)(nil)).Elem()
}

func (o ConfigVariableResponseArrayOutput) ToConfigVariableResponseArrayOutput() ConfigVariableResponseArrayOutput {
	return o
}

func (o ConfigVariableResponseArrayOutput) ToConfigVariableResponseArrayOutputWithContext(ctx context.Context) ConfigVariableResponseArrayOutput {
	return o
}

func (o ConfigVariableResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConfigVariableResponse] {
	return pulumix.Output[[]ConfigVariableResponse]{
		OutputState: o.OutputState,
	}
}

func (o ConfigVariableResponseArrayOutput) Index(i pulumi.IntInput) ConfigVariableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigVariableResponse {
		return vs[0].([]ConfigVariableResponse)[vs[1].(int)]
	}).(ConfigVariableResponseOutput)
}

// ConnectionStatus indicates the state of the connection.
type ConnectionStatusResponse struct {
	// Description.
	Description string `pulumi:"description"`
	// State.
	State string `pulumi:"state"`
	// Status provides detailed information for the state.
	Status string `pulumi:"status"`
}

// ConnectionStatus indicates the state of the connection.
type ConnectionStatusResponseOutput struct{ *pulumi.OutputState }

func (ConnectionStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatusResponse)(nil)).Elem()
}

func (o ConnectionStatusResponseOutput) ToConnectionStatusResponseOutput() ConnectionStatusResponseOutput {
	return o
}

func (o ConnectionStatusResponseOutput) ToConnectionStatusResponseOutputWithContext(ctx context.Context) ConnectionStatusResponseOutput {
	return o
}

func (o ConnectionStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectionStatusResponse] {
	return pulumix.Output[ConnectionStatusResponse]{
		OutputState: o.OutputState,
	}
}

// Description.
func (o ConnectionStatusResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatusResponse) string { return v.Description }).(pulumi.StringOutput)
}

// State.
func (o ConnectionStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status provides detailed information for the state.
func (o ConnectionStatusResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatusResponse) string { return v.Status }).(pulumi.StringOutput)
}

// This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version
type ConnectorVersionInfraConfigResponse struct {
	// The window used for ratelimiting runtime requests to connections.
	ConnectionRatelimitWindowSeconds string `pulumi:"connectionRatelimitWindowSeconds"`
	// HPA autoscaling config.
	HpaConfig HPAConfigResponse `pulumi:"hpaConfig"`
	// Max QPS supported for internal requests originating from Connd.
	InternalclientRatelimitThreshold string `pulumi:"internalclientRatelimitThreshold"`
	// Max QPS supported by the connector version before throttling of requests.
	RatelimitThreshold string `pulumi:"ratelimitThreshold"`
	// System resource limits.
	ResourceLimits ResourceLimitsResponse `pulumi:"resourceLimits"`
	// System resource requests.
	ResourceRequests ResourceRequestsResponse `pulumi:"resourceRequests"`
	// The name of shared connector deployment.
	SharedDeployment string `pulumi:"sharedDeployment"`
}

// This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version
type ConnectorVersionInfraConfigResponseOutput struct{ *pulumi.OutputState }

func (ConnectorVersionInfraConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorVersionInfraConfigResponse)(nil)).Elem()
}

func (o ConnectorVersionInfraConfigResponseOutput) ToConnectorVersionInfraConfigResponseOutput() ConnectorVersionInfraConfigResponseOutput {
	return o
}

func (o ConnectorVersionInfraConfigResponseOutput) ToConnectorVersionInfraConfigResponseOutputWithContext(ctx context.Context) ConnectorVersionInfraConfigResponseOutput {
	return o
}

func (o ConnectorVersionInfraConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorVersionInfraConfigResponse] {
	return pulumix.Output[ConnectorVersionInfraConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The window used for ratelimiting runtime requests to connections.
func (o ConnectorVersionInfraConfigResponseOutput) ConnectionRatelimitWindowSeconds() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorVersionInfraConfigResponse) string { return v.ConnectionRatelimitWindowSeconds }).(pulumi.StringOutput)
}

// HPA autoscaling config.
func (o ConnectorVersionInfraConfigResponseOutput) HpaConfig() HPAConfigResponseOutput {
	return o.ApplyT(func(v ConnectorVersionInfraConfigResponse) HPAConfigResponse { return v.HpaConfig }).(HPAConfigResponseOutput)
}

// Max QPS supported for internal requests originating from Connd.
func (o ConnectorVersionInfraConfigResponseOutput) InternalclientRatelimitThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorVersionInfraConfigResponse) string { return v.InternalclientRatelimitThreshold }).(pulumi.StringOutput)
}

// Max QPS supported by the connector version before throttling of requests.
func (o ConnectorVersionInfraConfigResponseOutput) RatelimitThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorVersionInfraConfigResponse) string { return v.RatelimitThreshold }).(pulumi.StringOutput)
}

// System resource limits.
func (o ConnectorVersionInfraConfigResponseOutput) ResourceLimits() ResourceLimitsResponseOutput {
	return o.ApplyT(func(v ConnectorVersionInfraConfigResponse) ResourceLimitsResponse { return v.ResourceLimits }).(ResourceLimitsResponseOutput)
}

// System resource requests.
func (o ConnectorVersionInfraConfigResponseOutput) ResourceRequests() ResourceRequestsResponseOutput {
	return o.ApplyT(func(v ConnectorVersionInfraConfigResponse) ResourceRequestsResponse { return v.ResourceRequests }).(ResourceRequestsResponseOutput)
}

// The name of shared connector deployment.
func (o ConnectorVersionInfraConfigResponseOutput) SharedDeployment() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorVersionInfraConfigResponse) string { return v.SharedDeployment }).(pulumi.StringOutput)
}

// Log configuration for the connection.
type ConnectorsLogConfig struct {
	// Enabled represents whether logging is enabled or not for a connection.
	Enabled *bool `pulumi:"enabled"`
}

// ConnectorsLogConfigInput is an input type that accepts ConnectorsLogConfigArgs and ConnectorsLogConfigOutput values.
// You can construct a concrete instance of `ConnectorsLogConfigInput` via:
//
//	ConnectorsLogConfigArgs{...}
type ConnectorsLogConfigInput interface {
	pulumi.Input

	ToConnectorsLogConfigOutput() ConnectorsLogConfigOutput
	ToConnectorsLogConfigOutputWithContext(context.Context) ConnectorsLogConfigOutput
}

// Log configuration for the connection.
type ConnectorsLogConfigArgs struct {
	// Enabled represents whether logging is enabled or not for a connection.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ConnectorsLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorsLogConfig)(nil)).Elem()
}

func (i ConnectorsLogConfigArgs) ToConnectorsLogConfigOutput() ConnectorsLogConfigOutput {
	return i.ToConnectorsLogConfigOutputWithContext(context.Background())
}

func (i ConnectorsLogConfigArgs) ToConnectorsLogConfigOutputWithContext(ctx context.Context) ConnectorsLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorsLogConfigOutput)
}

func (i ConnectorsLogConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectorsLogConfig] {
	return pulumix.Output[ConnectorsLogConfig]{
		OutputState: i.ToConnectorsLogConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ConnectorsLogConfigArgs) ToConnectorsLogConfigPtrOutput() ConnectorsLogConfigPtrOutput {
	return i.ToConnectorsLogConfigPtrOutputWithContext(context.Background())
}

func (i ConnectorsLogConfigArgs) ToConnectorsLogConfigPtrOutputWithContext(ctx context.Context) ConnectorsLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorsLogConfigOutput).ToConnectorsLogConfigPtrOutputWithContext(ctx)
}

// ConnectorsLogConfigPtrInput is an input type that accepts ConnectorsLogConfigArgs, ConnectorsLogConfigPtr and ConnectorsLogConfigPtrOutput values.
// You can construct a concrete instance of `ConnectorsLogConfigPtrInput` via:
//
//	        ConnectorsLogConfigArgs{...}
//
//	or:
//
//	        nil
type ConnectorsLogConfigPtrInput interface {
	pulumi.Input

	ToConnectorsLogConfigPtrOutput() ConnectorsLogConfigPtrOutput
	ToConnectorsLogConfigPtrOutputWithContext(context.Context) ConnectorsLogConfigPtrOutput
}

type connectorsLogConfigPtrType ConnectorsLogConfigArgs

func ConnectorsLogConfigPtr(v *ConnectorsLogConfigArgs) ConnectorsLogConfigPtrInput {
	return (*connectorsLogConfigPtrType)(v)
}

func (*connectorsLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorsLogConfig)(nil)).Elem()
}

func (i *connectorsLogConfigPtrType) ToConnectorsLogConfigPtrOutput() ConnectorsLogConfigPtrOutput {
	return i.ToConnectorsLogConfigPtrOutputWithContext(context.Background())
}

func (i *connectorsLogConfigPtrType) ToConnectorsLogConfigPtrOutputWithContext(ctx context.Context) ConnectorsLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorsLogConfigPtrOutput)
}

func (i *connectorsLogConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConnectorsLogConfig] {
	return pulumix.Output[*ConnectorsLogConfig]{
		OutputState: i.ToConnectorsLogConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Log configuration for the connection.
type ConnectorsLogConfigOutput struct{ *pulumi.OutputState }

func (ConnectorsLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorsLogConfig)(nil)).Elem()
}

func (o ConnectorsLogConfigOutput) ToConnectorsLogConfigOutput() ConnectorsLogConfigOutput {
	return o
}

func (o ConnectorsLogConfigOutput) ToConnectorsLogConfigOutputWithContext(ctx context.Context) ConnectorsLogConfigOutput {
	return o
}

func (o ConnectorsLogConfigOutput) ToConnectorsLogConfigPtrOutput() ConnectorsLogConfigPtrOutput {
	return o.ToConnectorsLogConfigPtrOutputWithContext(context.Background())
}

func (o ConnectorsLogConfigOutput) ToConnectorsLogConfigPtrOutputWithContext(ctx context.Context) ConnectorsLogConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorsLogConfig) *ConnectorsLogConfig {
		return &v
	}).(ConnectorsLogConfigPtrOutput)
}

func (o ConnectorsLogConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorsLogConfig] {
	return pulumix.Output[ConnectorsLogConfig]{
		OutputState: o.OutputState,
	}
}

// Enabled represents whether logging is enabled or not for a connection.
func (o ConnectorsLogConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorsLogConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ConnectorsLogConfigPtrOutput struct{ *pulumi.OutputState }

func (ConnectorsLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorsLogConfig)(nil)).Elem()
}

func (o ConnectorsLogConfigPtrOutput) ToConnectorsLogConfigPtrOutput() ConnectorsLogConfigPtrOutput {
	return o
}

func (o ConnectorsLogConfigPtrOutput) ToConnectorsLogConfigPtrOutputWithContext(ctx context.Context) ConnectorsLogConfigPtrOutput {
	return o
}

func (o ConnectorsLogConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectorsLogConfig] {
	return pulumix.Output[*ConnectorsLogConfig]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorsLogConfigPtrOutput) Elem() ConnectorsLogConfigOutput {
	return o.ApplyT(func(v *ConnectorsLogConfig) ConnectorsLogConfig {
		if v != nil {
			return *v
		}
		var ret ConnectorsLogConfig
		return ret
	}).(ConnectorsLogConfigOutput)
}

// Enabled represents whether logging is enabled or not for a connection.
func (o ConnectorsLogConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorsLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Log configuration for the connection.
type ConnectorsLogConfigResponse struct {
	// Enabled represents whether logging is enabled or not for a connection.
	Enabled bool `pulumi:"enabled"`
}

// Log configuration for the connection.
type ConnectorsLogConfigResponseOutput struct{ *pulumi.OutputState }

func (ConnectorsLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorsLogConfigResponse)(nil)).Elem()
}

func (o ConnectorsLogConfigResponseOutput) ToConnectorsLogConfigResponseOutput() ConnectorsLogConfigResponseOutput {
	return o
}

func (o ConnectorsLogConfigResponseOutput) ToConnectorsLogConfigResponseOutputWithContext(ctx context.Context) ConnectorsLogConfigResponseOutput {
	return o
}

func (o ConnectorsLogConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorsLogConfigResponse] {
	return pulumix.Output[ConnectorsLogConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Enabled represents whether logging is enabled or not for a connection.
func (o ConnectorsLogConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectorsLogConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type Destination struct {
	// For publicly routable host.
	Host *string `pulumi:"host"`
	// The port is the target port number that is accepted by the destination.
	Port *int `pulumi:"port"`
	// PSC service attachments. Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment *string `pulumi:"serviceAttachment"`
}

// DestinationInput is an input type that accepts DestinationArgs and DestinationOutput values.
// You can construct a concrete instance of `DestinationInput` via:
//
//	DestinationArgs{...}
type DestinationInput interface {
	pulumi.Input

	ToDestinationOutput() DestinationOutput
	ToDestinationOutputWithContext(context.Context) DestinationOutput
}

type DestinationArgs struct {
	// For publicly routable host.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The port is the target port number that is accepted by the destination.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// PSC service attachments. Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment pulumi.StringPtrInput `pulumi:"serviceAttachment"`
}

func (DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Destination)(nil)).Elem()
}

func (i DestinationArgs) ToDestinationOutput() DestinationOutput {
	return i.ToDestinationOutputWithContext(context.Background())
}

func (i DestinationArgs) ToDestinationOutputWithContext(ctx context.Context) DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationOutput)
}

func (i DestinationArgs) ToOutput(ctx context.Context) pulumix.Output[Destination] {
	return pulumix.Output[Destination]{
		OutputState: i.ToDestinationOutputWithContext(ctx).OutputState,
	}
}

// DestinationArrayInput is an input type that accepts DestinationArray and DestinationArrayOutput values.
// You can construct a concrete instance of `DestinationArrayInput` via:
//
//	DestinationArray{ DestinationArgs{...} }
type DestinationArrayInput interface {
	pulumi.Input

	ToDestinationArrayOutput() DestinationArrayOutput
	ToDestinationArrayOutputWithContext(context.Context) DestinationArrayOutput
}

type DestinationArray []DestinationInput

func (DestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Destination)(nil)).Elem()
}

func (i DestinationArray) ToDestinationArrayOutput() DestinationArrayOutput {
	return i.ToDestinationArrayOutputWithContext(context.Background())
}

func (i DestinationArray) ToDestinationArrayOutputWithContext(ctx context.Context) DestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationArrayOutput)
}

func (i DestinationArray) ToOutput(ctx context.Context) pulumix.Output[[]Destination] {
	return pulumix.Output[[]Destination]{
		OutputState: i.ToDestinationArrayOutputWithContext(ctx).OutputState,
	}
}

type DestinationOutput struct{ *pulumi.OutputState }

func (DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Destination)(nil)).Elem()
}

func (o DestinationOutput) ToDestinationOutput() DestinationOutput {
	return o
}

func (o DestinationOutput) ToDestinationOutputWithContext(ctx context.Context) DestinationOutput {
	return o
}

func (o DestinationOutput) ToOutput(ctx context.Context) pulumix.Output[Destination] {
	return pulumix.Output[Destination]{
		OutputState: o.OutputState,
	}
}

// For publicly routable host.
func (o DestinationOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Destination) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The port is the target port number that is accepted by the destination.
func (o DestinationOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Destination) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// PSC service attachments. Format: projects/*/regions/*/serviceAttachments/*
func (o DestinationOutput) ServiceAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Destination) *string { return v.ServiceAttachment }).(pulumi.StringPtrOutput)
}

type DestinationArrayOutput struct{ *pulumi.OutputState }

func (DestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Destination)(nil)).Elem()
}

func (o DestinationArrayOutput) ToDestinationArrayOutput() DestinationArrayOutput {
	return o
}

func (o DestinationArrayOutput) ToDestinationArrayOutputWithContext(ctx context.Context) DestinationArrayOutput {
	return o
}

func (o DestinationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Destination] {
	return pulumix.Output[[]Destination]{
		OutputState: o.OutputState,
	}
}

func (o DestinationArrayOutput) Index(i pulumi.IntInput) DestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Destination {
		return vs[0].([]Destination)[vs[1].(int)]
	}).(DestinationOutput)
}

// Define the Connectors target endpoint.
type DestinationConfig struct {
	// The destinations for the key.
	Destinations []Destination `pulumi:"destinations"`
	// The key is the destination identifier that is supported by the Connector.
	Key *string `pulumi:"key"`
}

// DestinationConfigInput is an input type that accepts DestinationConfigArgs and DestinationConfigOutput values.
// You can construct a concrete instance of `DestinationConfigInput` via:
//
//	DestinationConfigArgs{...}
type DestinationConfigInput interface {
	pulumi.Input

	ToDestinationConfigOutput() DestinationConfigOutput
	ToDestinationConfigOutputWithContext(context.Context) DestinationConfigOutput
}

// Define the Connectors target endpoint.
type DestinationConfigArgs struct {
	// The destinations for the key.
	Destinations DestinationArrayInput `pulumi:"destinations"`
	// The key is the destination identifier that is supported by the Connector.
	Key pulumi.StringPtrInput `pulumi:"key"`
}

func (DestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationConfig)(nil)).Elem()
}

func (i DestinationConfigArgs) ToDestinationConfigOutput() DestinationConfigOutput {
	return i.ToDestinationConfigOutputWithContext(context.Background())
}

func (i DestinationConfigArgs) ToDestinationConfigOutputWithContext(ctx context.Context) DestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigOutput)
}

func (i DestinationConfigArgs) ToOutput(ctx context.Context) pulumix.Output[DestinationConfig] {
	return pulumix.Output[DestinationConfig]{
		OutputState: i.ToDestinationConfigOutputWithContext(ctx).OutputState,
	}
}

func (i DestinationConfigArgs) ToDestinationConfigPtrOutput() DestinationConfigPtrOutput {
	return i.ToDestinationConfigPtrOutputWithContext(context.Background())
}

func (i DestinationConfigArgs) ToDestinationConfigPtrOutputWithContext(ctx context.Context) DestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigOutput).ToDestinationConfigPtrOutputWithContext(ctx)
}

// DestinationConfigPtrInput is an input type that accepts DestinationConfigArgs, DestinationConfigPtr and DestinationConfigPtrOutput values.
// You can construct a concrete instance of `DestinationConfigPtrInput` via:
//
//	        DestinationConfigArgs{...}
//
//	or:
//
//	        nil
type DestinationConfigPtrInput interface {
	pulumi.Input

	ToDestinationConfigPtrOutput() DestinationConfigPtrOutput
	ToDestinationConfigPtrOutputWithContext(context.Context) DestinationConfigPtrOutput
}

type destinationConfigPtrType DestinationConfigArgs

func DestinationConfigPtr(v *DestinationConfigArgs) DestinationConfigPtrInput {
	return (*destinationConfigPtrType)(v)
}

func (*destinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationConfig)(nil)).Elem()
}

func (i *destinationConfigPtrType) ToDestinationConfigPtrOutput() DestinationConfigPtrOutput {
	return i.ToDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *destinationConfigPtrType) ToDestinationConfigPtrOutputWithContext(ctx context.Context) DestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigPtrOutput)
}

func (i *destinationConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*DestinationConfig] {
	return pulumix.Output[*DestinationConfig]{
		OutputState: i.ToDestinationConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// DestinationConfigArrayInput is an input type that accepts DestinationConfigArray and DestinationConfigArrayOutput values.
// You can construct a concrete instance of `DestinationConfigArrayInput` via:
//
//	DestinationConfigArray{ DestinationConfigArgs{...} }
type DestinationConfigArrayInput interface {
	pulumi.Input

	ToDestinationConfigArrayOutput() DestinationConfigArrayOutput
	ToDestinationConfigArrayOutputWithContext(context.Context) DestinationConfigArrayOutput
}

type DestinationConfigArray []DestinationConfigInput

func (DestinationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationConfig)(nil)).Elem()
}

func (i DestinationConfigArray) ToDestinationConfigArrayOutput() DestinationConfigArrayOutput {
	return i.ToDestinationConfigArrayOutputWithContext(context.Background())
}

func (i DestinationConfigArray) ToDestinationConfigArrayOutputWithContext(ctx context.Context) DestinationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigArrayOutput)
}

func (i DestinationConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]DestinationConfig] {
	return pulumix.Output[[]DestinationConfig]{
		OutputState: i.ToDestinationConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// Define the Connectors target endpoint.
type DestinationConfigOutput struct{ *pulumi.OutputState }

func (DestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationConfig)(nil)).Elem()
}

func (o DestinationConfigOutput) ToDestinationConfigOutput() DestinationConfigOutput {
	return o
}

func (o DestinationConfigOutput) ToDestinationConfigOutputWithContext(ctx context.Context) DestinationConfigOutput {
	return o
}

func (o DestinationConfigOutput) ToDestinationConfigPtrOutput() DestinationConfigPtrOutput {
	return o.ToDestinationConfigPtrOutputWithContext(context.Background())
}

func (o DestinationConfigOutput) ToDestinationConfigPtrOutputWithContext(ctx context.Context) DestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationConfig) *DestinationConfig {
		return &v
	}).(DestinationConfigPtrOutput)
}

func (o DestinationConfigOutput) ToOutput(ctx context.Context) pulumix.Output[DestinationConfig] {
	return pulumix.Output[DestinationConfig]{
		OutputState: o.OutputState,
	}
}

// The destinations for the key.
func (o DestinationConfigOutput) Destinations() DestinationArrayOutput {
	return o.ApplyT(func(v DestinationConfig) []Destination { return v.Destinations }).(DestinationArrayOutput)
}

// The key is the destination identifier that is supported by the Connector.
func (o DestinationConfigOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationConfig) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type DestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (DestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationConfig)(nil)).Elem()
}

func (o DestinationConfigPtrOutput) ToDestinationConfigPtrOutput() DestinationConfigPtrOutput {
	return o
}

func (o DestinationConfigPtrOutput) ToDestinationConfigPtrOutputWithContext(ctx context.Context) DestinationConfigPtrOutput {
	return o
}

func (o DestinationConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DestinationConfig] {
	return pulumix.Output[*DestinationConfig]{
		OutputState: o.OutputState,
	}
}

func (o DestinationConfigPtrOutput) Elem() DestinationConfigOutput {
	return o.ApplyT(func(v *DestinationConfig) DestinationConfig {
		if v != nil {
			return *v
		}
		var ret DestinationConfig
		return ret
	}).(DestinationConfigOutput)
}

// The destinations for the key.
func (o DestinationConfigPtrOutput) Destinations() DestinationArrayOutput {
	return o.ApplyT(func(v *DestinationConfig) []Destination {
		if v == nil {
			return nil
		}
		return v.Destinations
	}).(DestinationArrayOutput)
}

// The key is the destination identifier that is supported by the Connector.
func (o DestinationConfigPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationConfig) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

type DestinationConfigArrayOutput struct{ *pulumi.OutputState }

func (DestinationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationConfig)(nil)).Elem()
}

func (o DestinationConfigArrayOutput) ToDestinationConfigArrayOutput() DestinationConfigArrayOutput {
	return o
}

func (o DestinationConfigArrayOutput) ToDestinationConfigArrayOutputWithContext(ctx context.Context) DestinationConfigArrayOutput {
	return o
}

func (o DestinationConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DestinationConfig] {
	return pulumix.Output[[]DestinationConfig]{
		OutputState: o.OutputState,
	}
}

func (o DestinationConfigArrayOutput) Index(i pulumi.IntInput) DestinationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DestinationConfig {
		return vs[0].([]DestinationConfig)[vs[1].(int)]
	}).(DestinationConfigOutput)
}

// Define the Connectors target endpoint.
type DestinationConfigResponse struct {
	// The destinations for the key.
	Destinations []DestinationResponse `pulumi:"destinations"`
	// The key is the destination identifier that is supported by the Connector.
	Key string `pulumi:"key"`
}

// Define the Connectors target endpoint.
type DestinationConfigResponseOutput struct{ *pulumi.OutputState }

func (DestinationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationConfigResponse)(nil)).Elem()
}

func (o DestinationConfigResponseOutput) ToDestinationConfigResponseOutput() DestinationConfigResponseOutput {
	return o
}

func (o DestinationConfigResponseOutput) ToDestinationConfigResponseOutputWithContext(ctx context.Context) DestinationConfigResponseOutput {
	return o
}

func (o DestinationConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DestinationConfigResponse] {
	return pulumix.Output[DestinationConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The destinations for the key.
func (o DestinationConfigResponseOutput) Destinations() DestinationResponseArrayOutput {
	return o.ApplyT(func(v DestinationConfigResponse) []DestinationResponse { return v.Destinations }).(DestinationResponseArrayOutput)
}

// The key is the destination identifier that is supported by the Connector.
func (o DestinationConfigResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationConfigResponse) string { return v.Key }).(pulumi.StringOutput)
}

type DestinationConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (DestinationConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationConfigResponse)(nil)).Elem()
}

func (o DestinationConfigResponseArrayOutput) ToDestinationConfigResponseArrayOutput() DestinationConfigResponseArrayOutput {
	return o
}

func (o DestinationConfigResponseArrayOutput) ToDestinationConfigResponseArrayOutputWithContext(ctx context.Context) DestinationConfigResponseArrayOutput {
	return o
}

func (o DestinationConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DestinationConfigResponse] {
	return pulumix.Output[[]DestinationConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o DestinationConfigResponseArrayOutput) Index(i pulumi.IntInput) DestinationConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DestinationConfigResponse {
		return vs[0].([]DestinationConfigResponse)[vs[1].(int)]
	}).(DestinationConfigResponseOutput)
}

type DestinationResponse struct {
	// For publicly routable host.
	Host string `pulumi:"host"`
	// The port is the target port number that is accepted by the destination.
	Port int `pulumi:"port"`
	// PSC service attachments. Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment string `pulumi:"serviceAttachment"`
}

type DestinationResponseOutput struct{ *pulumi.OutputState }

func (DestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationResponse)(nil)).Elem()
}

func (o DestinationResponseOutput) ToDestinationResponseOutput() DestinationResponseOutput {
	return o
}

func (o DestinationResponseOutput) ToDestinationResponseOutputWithContext(ctx context.Context) DestinationResponseOutput {
	return o
}

func (o DestinationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DestinationResponse] {
	return pulumix.Output[DestinationResponse]{
		OutputState: o.OutputState,
	}
}

// For publicly routable host.
func (o DestinationResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationResponse) string { return v.Host }).(pulumi.StringOutput)
}

// The port is the target port number that is accepted by the destination.
func (o DestinationResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DestinationResponse) int { return v.Port }).(pulumi.IntOutput)
}

// PSC service attachments. Format: projects/*/regions/*/serviceAttachments/*
func (o DestinationResponseOutput) ServiceAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationResponse) string { return v.ServiceAttachment }).(pulumi.StringOutput)
}

type DestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (DestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationResponse)(nil)).Elem()
}

func (o DestinationResponseArrayOutput) ToDestinationResponseArrayOutput() DestinationResponseArrayOutput {
	return o
}

func (o DestinationResponseArrayOutput) ToDestinationResponseArrayOutputWithContext(ctx context.Context) DestinationResponseArrayOutput {
	return o
}

func (o DestinationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DestinationResponse] {
	return pulumix.Output[[]DestinationResponse]{
		OutputState: o.OutputState,
	}
}

func (o DestinationResponseArrayOutput) Index(i pulumi.IntInput) DestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DestinationResponse {
		return vs[0].([]DestinationResponse)[vs[1].(int)]
	}).(DestinationResponseOutput)
}

// Encryption Key value.
type EncryptionKey struct {
	// The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Will be empty string if google managed.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Type.
	Type *EncryptionKeyType `pulumi:"type"`
}

// EncryptionKeyInput is an input type that accepts EncryptionKeyArgs and EncryptionKeyOutput values.
// You can construct a concrete instance of `EncryptionKeyInput` via:
//
//	EncryptionKeyArgs{...}
type EncryptionKeyInput interface {
	pulumi.Input

	ToEncryptionKeyOutput() EncryptionKeyOutput
	ToEncryptionKeyOutputWithContext(context.Context) EncryptionKeyOutput
}

// Encryption Key value.
type EncryptionKeyArgs struct {
	// The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Will be empty string if google managed.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
	// Type.
	Type EncryptionKeyTypePtrInput `pulumi:"type"`
}

func (EncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKey)(nil)).Elem()
}

func (i EncryptionKeyArgs) ToEncryptionKeyOutput() EncryptionKeyOutput {
	return i.ToEncryptionKeyOutputWithContext(context.Background())
}

func (i EncryptionKeyArgs) ToEncryptionKeyOutputWithContext(ctx context.Context) EncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyOutput)
}

func (i EncryptionKeyArgs) ToOutput(ctx context.Context) pulumix.Output[EncryptionKey] {
	return pulumix.Output[EncryptionKey]{
		OutputState: i.ToEncryptionKeyOutputWithContext(ctx).OutputState,
	}
}

func (i EncryptionKeyArgs) ToEncryptionKeyPtrOutput() EncryptionKeyPtrOutput {
	return i.ToEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i EncryptionKeyArgs) ToEncryptionKeyPtrOutputWithContext(ctx context.Context) EncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyOutput).ToEncryptionKeyPtrOutputWithContext(ctx)
}

// EncryptionKeyPtrInput is an input type that accepts EncryptionKeyArgs, EncryptionKeyPtr and EncryptionKeyPtrOutput values.
// You can construct a concrete instance of `EncryptionKeyPtrInput` via:
//
//	        EncryptionKeyArgs{...}
//
//	or:
//
//	        nil
type EncryptionKeyPtrInput interface {
	pulumi.Input

	ToEncryptionKeyPtrOutput() EncryptionKeyPtrOutput
	ToEncryptionKeyPtrOutputWithContext(context.Context) EncryptionKeyPtrOutput
}

type encryptionKeyPtrType EncryptionKeyArgs

func EncryptionKeyPtr(v *EncryptionKeyArgs) EncryptionKeyPtrInput {
	return (*encryptionKeyPtrType)(v)
}

func (*encryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKey)(nil)).Elem()
}

func (i *encryptionKeyPtrType) ToEncryptionKeyPtrOutput() EncryptionKeyPtrOutput {
	return i.ToEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *encryptionKeyPtrType) ToEncryptionKeyPtrOutputWithContext(ctx context.Context) EncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyPtrOutput)
}

func (i *encryptionKeyPtrType) ToOutput(ctx context.Context) pulumix.Output[*EncryptionKey] {
	return pulumix.Output[*EncryptionKey]{
		OutputState: i.ToEncryptionKeyPtrOutputWithContext(ctx).OutputState,
	}
}

// Encryption Key value.
type EncryptionKeyOutput struct{ *pulumi.OutputState }

func (EncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKey)(nil)).Elem()
}

func (o EncryptionKeyOutput) ToEncryptionKeyOutput() EncryptionKeyOutput {
	return o
}

func (o EncryptionKeyOutput) ToEncryptionKeyOutputWithContext(ctx context.Context) EncryptionKeyOutput {
	return o
}

func (o EncryptionKeyOutput) ToEncryptionKeyPtrOutput() EncryptionKeyPtrOutput {
	return o.ToEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o EncryptionKeyOutput) ToEncryptionKeyPtrOutputWithContext(ctx context.Context) EncryptionKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionKey) *EncryptionKey {
		return &v
	}).(EncryptionKeyPtrOutput)
}

func (o EncryptionKeyOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionKey] {
	return pulumix.Output[EncryptionKey]{
		OutputState: o.OutputState,
	}
}

// The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Will be empty string if google managed.
func (o EncryptionKeyOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionKey) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// Type.
func (o EncryptionKeyOutput) Type() EncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v EncryptionKey) *EncryptionKeyType { return v.Type }).(EncryptionKeyTypePtrOutput)
}

type EncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (EncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKey)(nil)).Elem()
}

func (o EncryptionKeyPtrOutput) ToEncryptionKeyPtrOutput() EncryptionKeyPtrOutput {
	return o
}

func (o EncryptionKeyPtrOutput) ToEncryptionKeyPtrOutputWithContext(ctx context.Context) EncryptionKeyPtrOutput {
	return o
}

func (o EncryptionKeyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionKey] {
	return pulumix.Output[*EncryptionKey]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionKeyPtrOutput) Elem() EncryptionKeyOutput {
	return o.ApplyT(func(v *EncryptionKey) EncryptionKey {
		if v != nil {
			return *v
		}
		var ret EncryptionKey
		return ret
	}).(EncryptionKeyOutput)
}

// The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Will be empty string if google managed.
func (o EncryptionKeyPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Type.
func (o EncryptionKeyPtrOutput) Type() EncryptionKeyTypePtrOutput {
	return o.ApplyT(func(v *EncryptionKey) *EncryptionKeyType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(EncryptionKeyTypePtrOutput)
}

// Encryption Key value.
type EncryptionKeyResponse struct {
	// The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Will be empty string if google managed.
	KmsKeyName string `pulumi:"kmsKeyName"`
	// Type.
	Type string `pulumi:"type"`
}

// Encryption Key value.
type EncryptionKeyResponseOutput struct{ *pulumi.OutputState }

func (EncryptionKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKeyResponse)(nil)).Elem()
}

func (o EncryptionKeyResponseOutput) ToEncryptionKeyResponseOutput() EncryptionKeyResponseOutput {
	return o
}

func (o EncryptionKeyResponseOutput) ToEncryptionKeyResponseOutputWithContext(ctx context.Context) EncryptionKeyResponseOutput {
	return o
}

func (o EncryptionKeyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionKeyResponse] {
	return pulumix.Output[EncryptionKeyResponse]{
		OutputState: o.OutputState,
	}
}

// The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Will be empty string if google managed.
func (o EncryptionKeyResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Type.
func (o EncryptionKeyResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Endpoint message includes details of the Destination endpoint.
type EndPoint struct {
	// The URI of the Endpoint.
	EndpointUri *string `pulumi:"endpointUri"`
	// List of Header to be added to the Endpoint.
	Headers []Header `pulumi:"headers"`
}

// EndPointInput is an input type that accepts EndPointArgs and EndPointOutput values.
// You can construct a concrete instance of `EndPointInput` via:
//
//	EndPointArgs{...}
type EndPointInput interface {
	pulumi.Input

	ToEndPointOutput() EndPointOutput
	ToEndPointOutputWithContext(context.Context) EndPointOutput
}

// Endpoint message includes details of the Destination endpoint.
type EndPointArgs struct {
	// The URI of the Endpoint.
	EndpointUri pulumi.StringPtrInput `pulumi:"endpointUri"`
	// List of Header to be added to the Endpoint.
	Headers HeaderArrayInput `pulumi:"headers"`
}

func (EndPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndPoint)(nil)).Elem()
}

func (i EndPointArgs) ToEndPointOutput() EndPointOutput {
	return i.ToEndPointOutputWithContext(context.Background())
}

func (i EndPointArgs) ToEndPointOutputWithContext(ctx context.Context) EndPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndPointOutput)
}

func (i EndPointArgs) ToOutput(ctx context.Context) pulumix.Output[EndPoint] {
	return pulumix.Output[EndPoint]{
		OutputState: i.ToEndPointOutputWithContext(ctx).OutputState,
	}
}

func (i EndPointArgs) ToEndPointPtrOutput() EndPointPtrOutput {
	return i.ToEndPointPtrOutputWithContext(context.Background())
}

func (i EndPointArgs) ToEndPointPtrOutputWithContext(ctx context.Context) EndPointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndPointOutput).ToEndPointPtrOutputWithContext(ctx)
}

// EndPointPtrInput is an input type that accepts EndPointArgs, EndPointPtr and EndPointPtrOutput values.
// You can construct a concrete instance of `EndPointPtrInput` via:
//
//	        EndPointArgs{...}
//
//	or:
//
//	        nil
type EndPointPtrInput interface {
	pulumi.Input

	ToEndPointPtrOutput() EndPointPtrOutput
	ToEndPointPtrOutputWithContext(context.Context) EndPointPtrOutput
}

type endPointPtrType EndPointArgs

func EndPointPtr(v *EndPointArgs) EndPointPtrInput {
	return (*endPointPtrType)(v)
}

func (*endPointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndPoint)(nil)).Elem()
}

func (i *endPointPtrType) ToEndPointPtrOutput() EndPointPtrOutput {
	return i.ToEndPointPtrOutputWithContext(context.Background())
}

func (i *endPointPtrType) ToEndPointPtrOutputWithContext(ctx context.Context) EndPointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndPointPtrOutput)
}

func (i *endPointPtrType) ToOutput(ctx context.Context) pulumix.Output[*EndPoint] {
	return pulumix.Output[*EndPoint]{
		OutputState: i.ToEndPointPtrOutputWithContext(ctx).OutputState,
	}
}

// Endpoint message includes details of the Destination endpoint.
type EndPointOutput struct{ *pulumi.OutputState }

func (EndPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndPoint)(nil)).Elem()
}

func (o EndPointOutput) ToEndPointOutput() EndPointOutput {
	return o
}

func (o EndPointOutput) ToEndPointOutputWithContext(ctx context.Context) EndPointOutput {
	return o
}

func (o EndPointOutput) ToEndPointPtrOutput() EndPointPtrOutput {
	return o.ToEndPointPtrOutputWithContext(context.Background())
}

func (o EndPointOutput) ToEndPointPtrOutputWithContext(ctx context.Context) EndPointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndPoint) *EndPoint {
		return &v
	}).(EndPointPtrOutput)
}

func (o EndPointOutput) ToOutput(ctx context.Context) pulumix.Output[EndPoint] {
	return pulumix.Output[EndPoint]{
		OutputState: o.OutputState,
	}
}

// The URI of the Endpoint.
func (o EndPointOutput) EndpointUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndPoint) *string { return v.EndpointUri }).(pulumi.StringPtrOutput)
}

// List of Header to be added to the Endpoint.
func (o EndPointOutput) Headers() HeaderArrayOutput {
	return o.ApplyT(func(v EndPoint) []Header { return v.Headers }).(HeaderArrayOutput)
}

type EndPointPtrOutput struct{ *pulumi.OutputState }

func (EndPointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndPoint)(nil)).Elem()
}

func (o EndPointPtrOutput) ToEndPointPtrOutput() EndPointPtrOutput {
	return o
}

func (o EndPointPtrOutput) ToEndPointPtrOutputWithContext(ctx context.Context) EndPointPtrOutput {
	return o
}

func (o EndPointPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EndPoint] {
	return pulumix.Output[*EndPoint]{
		OutputState: o.OutputState,
	}
}

func (o EndPointPtrOutput) Elem() EndPointOutput {
	return o.ApplyT(func(v *EndPoint) EndPoint {
		if v != nil {
			return *v
		}
		var ret EndPoint
		return ret
	}).(EndPointOutput)
}

// The URI of the Endpoint.
func (o EndPointPtrOutput) EndpointUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndPoint) *string {
		if v == nil {
			return nil
		}
		return v.EndpointUri
	}).(pulumi.StringPtrOutput)
}

// List of Header to be added to the Endpoint.
func (o EndPointPtrOutput) Headers() HeaderArrayOutput {
	return o.ApplyT(func(v *EndPoint) []Header {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(HeaderArrayOutput)
}

// Endpoint message includes details of the Destination endpoint.
type EndPointResponse struct {
	// The URI of the Endpoint.
	EndpointUri string `pulumi:"endpointUri"`
	// List of Header to be added to the Endpoint.
	Headers []HeaderResponse `pulumi:"headers"`
}

// Endpoint message includes details of the Destination endpoint.
type EndPointResponseOutput struct{ *pulumi.OutputState }

func (EndPointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndPointResponse)(nil)).Elem()
}

func (o EndPointResponseOutput) ToEndPointResponseOutput() EndPointResponseOutput {
	return o
}

func (o EndPointResponseOutput) ToEndPointResponseOutputWithContext(ctx context.Context) EndPointResponseOutput {
	return o
}

func (o EndPointResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EndPointResponse] {
	return pulumix.Output[EndPointResponse]{
		OutputState: o.OutputState,
	}
}

// The URI of the Endpoint.
func (o EndPointResponseOutput) EndpointUri() pulumi.StringOutput {
	return o.ApplyT(func(v EndPointResponse) string { return v.EndpointUri }).(pulumi.StringOutput)
}

// List of Header to be added to the Endpoint.
func (o EndPointResponseOutput) Headers() HeaderResponseArrayOutput {
	return o.ApplyT(func(v EndPointResponse) []HeaderResponse { return v.Headers }).(HeaderResponseArrayOutput)
}

// Message for EventSubscription Destination to act on receiving an event
type EventSubscriptionDestination struct {
	// OPTION 1: Hit an endpoint when we receive an event.
	Endpoint *EndPoint `pulumi:"endpoint"`
	// Service account needed for runtime plane to trigger IP workflow.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// type of the destination
	Type *EventSubscriptionDestinationType `pulumi:"type"`
}

// EventSubscriptionDestinationInput is an input type that accepts EventSubscriptionDestinationArgs and EventSubscriptionDestinationOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationInput` via:
//
//	EventSubscriptionDestinationArgs{...}
type EventSubscriptionDestinationInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput
	ToEventSubscriptionDestinationOutputWithContext(context.Context) EventSubscriptionDestinationOutput
}

// Message for EventSubscription Destination to act on receiving an event
type EventSubscriptionDestinationArgs struct {
	// OPTION 1: Hit an endpoint when we receive an event.
	Endpoint EndPointPtrInput `pulumi:"endpoint"`
	// Service account needed for runtime plane to trigger IP workflow.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// type of the destination
	Type EventSubscriptionDestinationTypePtrInput `pulumi:"type"`
}

func (EventSubscriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestination)(nil)).Elem()
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput {
	return i.ToEventSubscriptionDestinationOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventSubscriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationOutput)
}

func (i EventSubscriptionDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionDestination] {
	return pulumix.Output[EventSubscriptionDestination]{
		OutputState: i.ToEventSubscriptionDestinationOutputWithContext(ctx).OutputState,
	}
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return i.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionDestinationArgs) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationOutput).ToEventSubscriptionDestinationPtrOutputWithContext(ctx)
}

// EventSubscriptionDestinationPtrInput is an input type that accepts EventSubscriptionDestinationArgs, EventSubscriptionDestinationPtr and EventSubscriptionDestinationPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionDestinationPtrInput` via:
//
//	        EventSubscriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionDestinationPtrInput interface {
	pulumi.Input

	ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput
	ToEventSubscriptionDestinationPtrOutputWithContext(context.Context) EventSubscriptionDestinationPtrOutput
}

type eventSubscriptionDestinationPtrType EventSubscriptionDestinationArgs

func EventSubscriptionDestinationPtr(v *EventSubscriptionDestinationArgs) EventSubscriptionDestinationPtrInput {
	return (*eventSubscriptionDestinationPtrType)(v)
}

func (*eventSubscriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestination)(nil)).Elem()
}

func (i *eventSubscriptionDestinationPtrType) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return i.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionDestinationPtrType) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDestinationPtrOutput)
}

func (i *eventSubscriptionDestinationPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionDestination] {
	return pulumix.Output[*EventSubscriptionDestination]{
		OutputState: i.ToEventSubscriptionDestinationPtrOutputWithContext(ctx).OutputState,
	}
}

// Message for EventSubscription Destination to act on receiving an event
type EventSubscriptionDestinationOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestination)(nil)).Elem()
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationOutput() EventSubscriptionDestinationOutput {
	return o
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationOutputWithContext(ctx context.Context) EventSubscriptionDestinationOutput {
	return o
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return o.ToEventSubscriptionDestinationPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionDestinationOutput) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionDestination) *EventSubscriptionDestination {
		return &v
	}).(EventSubscriptionDestinationPtrOutput)
}

func (o EventSubscriptionDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionDestination] {
	return pulumix.Output[EventSubscriptionDestination]{
		OutputState: o.OutputState,
	}
}

// OPTION 1: Hit an endpoint when we receive an event.
func (o EventSubscriptionDestinationOutput) Endpoint() EndPointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionDestination) *EndPoint { return v.Endpoint }).(EndPointPtrOutput)
}

// Service account needed for runtime plane to trigger IP workflow.
func (o EventSubscriptionDestinationOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionDestination) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// type of the destination
func (o EventSubscriptionDestinationOutput) Type() EventSubscriptionDestinationTypePtrOutput {
	return o.ApplyT(func(v EventSubscriptionDestination) *EventSubscriptionDestinationType { return v.Type }).(EventSubscriptionDestinationTypePtrOutput)
}

type EventSubscriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDestination)(nil)).Elem()
}

func (o EventSubscriptionDestinationPtrOutput) ToEventSubscriptionDestinationPtrOutput() EventSubscriptionDestinationPtrOutput {
	return o
}

func (o EventSubscriptionDestinationPtrOutput) ToEventSubscriptionDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionDestinationPtrOutput {
	return o
}

func (o EventSubscriptionDestinationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionDestination] {
	return pulumix.Output[*EventSubscriptionDestination]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionDestinationPtrOutput) Elem() EventSubscriptionDestinationOutput {
	return o.ApplyT(func(v *EventSubscriptionDestination) EventSubscriptionDestination {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionDestination
		return ret
	}).(EventSubscriptionDestinationOutput)
}

// OPTION 1: Hit an endpoint when we receive an event.
func (o EventSubscriptionDestinationPtrOutput) Endpoint() EndPointPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDestination) *EndPoint {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(EndPointPtrOutput)
}

// Service account needed for runtime plane to trigger IP workflow.
func (o EventSubscriptionDestinationPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDestination) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// type of the destination
func (o EventSubscriptionDestinationPtrOutput) Type() EventSubscriptionDestinationTypePtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDestination) *EventSubscriptionDestinationType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(EventSubscriptionDestinationTypePtrOutput)
}

// Message for EventSubscription Destination to act on receiving an event
type EventSubscriptionDestinationResponse struct {
	// OPTION 1: Hit an endpoint when we receive an event.
	Endpoint EndPointResponse `pulumi:"endpoint"`
	// Service account needed for runtime plane to trigger IP workflow.
	ServiceAccount string `pulumi:"serviceAccount"`
	// type of the destination
	Type string `pulumi:"type"`
}

// Message for EventSubscription Destination to act on receiving an event
type EventSubscriptionDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDestinationResponse)(nil)).Elem()
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponseOutput() EventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventSubscriptionDestinationResponseOutput) ToEventSubscriptionDestinationResponseOutputWithContext(ctx context.Context) EventSubscriptionDestinationResponseOutput {
	return o
}

func (o EventSubscriptionDestinationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionDestinationResponse] {
	return pulumix.Output[EventSubscriptionDestinationResponse]{
		OutputState: o.OutputState,
	}
}

// OPTION 1: Hit an endpoint when we receive an event.
func (o EventSubscriptionDestinationResponseOutput) Endpoint() EndPointResponseOutput {
	return o.ApplyT(func(v EventSubscriptionDestinationResponse) EndPointResponse { return v.Endpoint }).(EndPointResponseOutput)
}

// Service account needed for runtime plane to trigger IP workflow.
func (o EventSubscriptionDestinationResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDestinationResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// type of the destination
func (o EventSubscriptionDestinationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDestinationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// EventSubscription Status denotes the status of the EventSubscription resource.
type EventSubscriptionStatus struct {
}

// EventSubscription Status denotes the status of the EventSubscription resource.
type EventSubscriptionStatusResponse struct {
	// Description of the state.
	Description string `pulumi:"description"`
	// State of Event Subscription resource.
	State string `pulumi:"state"`
}

// EventSubscription Status denotes the status of the EventSubscription resource.
type EventSubscriptionStatusResponseOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStatusResponse)(nil)).Elem()
}

func (o EventSubscriptionStatusResponseOutput) ToEventSubscriptionStatusResponseOutput() EventSubscriptionStatusResponseOutput {
	return o
}

func (o EventSubscriptionStatusResponseOutput) ToEventSubscriptionStatusResponseOutputWithContext(ctx context.Context) EventSubscriptionStatusResponseOutput {
	return o
}

func (o EventSubscriptionStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionStatusResponse] {
	return pulumix.Output[EventSubscriptionStatusResponse]{
		OutputState: o.OutputState,
	}
}

// Description of the state.
func (o EventSubscriptionStatusResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStatusResponse) string { return v.Description }).(pulumi.StringOutput)
}

// State of Event Subscription resource.
func (o EventSubscriptionStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// Eventing Configuration of a connection
type EventingConfig struct {
	// Additional eventing related field values
	AdditionalVariables []ConfigVariable `pulumi:"additionalVariables"`
	// Auth details for the webhook adapter.
	AuthConfig *AuthConfig `pulumi:"authConfig"`
	// Encryption key (can be either Google managed or CMEK).
	EncryptionKey *ConfigVariable `pulumi:"encryptionKey"`
	// Enrichment Enabled.
	EnrichmentEnabled *bool `pulumi:"enrichmentEnabled"`
	// Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.
	EventsListenerIngressEndpoint *string `pulumi:"eventsListenerIngressEndpoint"`
	// Optional. Private Connectivity Enabled.
	PrivateConnectivityEnabled *bool `pulumi:"privateConnectivityEnabled"`
	// Registration endpoint for auto registration.
	RegistrationDestinationConfig *DestinationConfig `pulumi:"registrationDestinationConfig"`
}

// EventingConfigInput is an input type that accepts EventingConfigArgs and EventingConfigOutput values.
// You can construct a concrete instance of `EventingConfigInput` via:
//
//	EventingConfigArgs{...}
type EventingConfigInput interface {
	pulumi.Input

	ToEventingConfigOutput() EventingConfigOutput
	ToEventingConfigOutputWithContext(context.Context) EventingConfigOutput
}

// Eventing Configuration of a connection
type EventingConfigArgs struct {
	// Additional eventing related field values
	AdditionalVariables ConfigVariableArrayInput `pulumi:"additionalVariables"`
	// Auth details for the webhook adapter.
	AuthConfig AuthConfigPtrInput `pulumi:"authConfig"`
	// Encryption key (can be either Google managed or CMEK).
	EncryptionKey ConfigVariablePtrInput `pulumi:"encryptionKey"`
	// Enrichment Enabled.
	EnrichmentEnabled pulumi.BoolPtrInput `pulumi:"enrichmentEnabled"`
	// Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.
	EventsListenerIngressEndpoint pulumi.StringPtrInput `pulumi:"eventsListenerIngressEndpoint"`
	// Optional. Private Connectivity Enabled.
	PrivateConnectivityEnabled pulumi.BoolPtrInput `pulumi:"privateConnectivityEnabled"`
	// Registration endpoint for auto registration.
	RegistrationDestinationConfig DestinationConfigPtrInput `pulumi:"registrationDestinationConfig"`
}

func (EventingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventingConfig)(nil)).Elem()
}

func (i EventingConfigArgs) ToEventingConfigOutput() EventingConfigOutput {
	return i.ToEventingConfigOutputWithContext(context.Background())
}

func (i EventingConfigArgs) ToEventingConfigOutputWithContext(ctx context.Context) EventingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventingConfigOutput)
}

func (i EventingConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EventingConfig] {
	return pulumix.Output[EventingConfig]{
		OutputState: i.ToEventingConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EventingConfigArgs) ToEventingConfigPtrOutput() EventingConfigPtrOutput {
	return i.ToEventingConfigPtrOutputWithContext(context.Background())
}

func (i EventingConfigArgs) ToEventingConfigPtrOutputWithContext(ctx context.Context) EventingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventingConfigOutput).ToEventingConfigPtrOutputWithContext(ctx)
}

// EventingConfigPtrInput is an input type that accepts EventingConfigArgs, EventingConfigPtr and EventingConfigPtrOutput values.
// You can construct a concrete instance of `EventingConfigPtrInput` via:
//
//	        EventingConfigArgs{...}
//
//	or:
//
//	        nil
type EventingConfigPtrInput interface {
	pulumi.Input

	ToEventingConfigPtrOutput() EventingConfigPtrOutput
	ToEventingConfigPtrOutputWithContext(context.Context) EventingConfigPtrOutput
}

type eventingConfigPtrType EventingConfigArgs

func EventingConfigPtr(v *EventingConfigArgs) EventingConfigPtrInput {
	return (*eventingConfigPtrType)(v)
}

func (*eventingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventingConfig)(nil)).Elem()
}

func (i *eventingConfigPtrType) ToEventingConfigPtrOutput() EventingConfigPtrOutput {
	return i.ToEventingConfigPtrOutputWithContext(context.Background())
}

func (i *eventingConfigPtrType) ToEventingConfigPtrOutputWithContext(ctx context.Context) EventingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventingConfigPtrOutput)
}

func (i *eventingConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventingConfig] {
	return pulumix.Output[*EventingConfig]{
		OutputState: i.ToEventingConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Eventing Configuration of a connection
type EventingConfigOutput struct{ *pulumi.OutputState }

func (EventingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventingConfig)(nil)).Elem()
}

func (o EventingConfigOutput) ToEventingConfigOutput() EventingConfigOutput {
	return o
}

func (o EventingConfigOutput) ToEventingConfigOutputWithContext(ctx context.Context) EventingConfigOutput {
	return o
}

func (o EventingConfigOutput) ToEventingConfigPtrOutput() EventingConfigPtrOutput {
	return o.ToEventingConfigPtrOutputWithContext(context.Background())
}

func (o EventingConfigOutput) ToEventingConfigPtrOutputWithContext(ctx context.Context) EventingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventingConfig) *EventingConfig {
		return &v
	}).(EventingConfigPtrOutput)
}

func (o EventingConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EventingConfig] {
	return pulumix.Output[EventingConfig]{
		OutputState: o.OutputState,
	}
}

// Additional eventing related field values
func (o EventingConfigOutput) AdditionalVariables() ConfigVariableArrayOutput {
	return o.ApplyT(func(v EventingConfig) []ConfigVariable { return v.AdditionalVariables }).(ConfigVariableArrayOutput)
}

// Auth details for the webhook adapter.
func (o EventingConfigOutput) AuthConfig() AuthConfigPtrOutput {
	return o.ApplyT(func(v EventingConfig) *AuthConfig { return v.AuthConfig }).(AuthConfigPtrOutput)
}

// Encryption key (can be either Google managed or CMEK).
func (o EventingConfigOutput) EncryptionKey() ConfigVariablePtrOutput {
	return o.ApplyT(func(v EventingConfig) *ConfigVariable { return v.EncryptionKey }).(ConfigVariablePtrOutput)
}

// Enrichment Enabled.
func (o EventingConfigOutput) EnrichmentEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventingConfig) *bool { return v.EnrichmentEnabled }).(pulumi.BoolPtrOutput)
}

// Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.
func (o EventingConfigOutput) EventsListenerIngressEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventingConfig) *string { return v.EventsListenerIngressEndpoint }).(pulumi.StringPtrOutput)
}

// Optional. Private Connectivity Enabled.
func (o EventingConfigOutput) PrivateConnectivityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventingConfig) *bool { return v.PrivateConnectivityEnabled }).(pulumi.BoolPtrOutput)
}

// Registration endpoint for auto registration.
func (o EventingConfigOutput) RegistrationDestinationConfig() DestinationConfigPtrOutput {
	return o.ApplyT(func(v EventingConfig) *DestinationConfig { return v.RegistrationDestinationConfig }).(DestinationConfigPtrOutput)
}

type EventingConfigPtrOutput struct{ *pulumi.OutputState }

func (EventingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventingConfig)(nil)).Elem()
}

func (o EventingConfigPtrOutput) ToEventingConfigPtrOutput() EventingConfigPtrOutput {
	return o
}

func (o EventingConfigPtrOutput) ToEventingConfigPtrOutputWithContext(ctx context.Context) EventingConfigPtrOutput {
	return o
}

func (o EventingConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventingConfig] {
	return pulumix.Output[*EventingConfig]{
		OutputState: o.OutputState,
	}
}

func (o EventingConfigPtrOutput) Elem() EventingConfigOutput {
	return o.ApplyT(func(v *EventingConfig) EventingConfig {
		if v != nil {
			return *v
		}
		var ret EventingConfig
		return ret
	}).(EventingConfigOutput)
}

// Additional eventing related field values
func (o EventingConfigPtrOutput) AdditionalVariables() ConfigVariableArrayOutput {
	return o.ApplyT(func(v *EventingConfig) []ConfigVariable {
		if v == nil {
			return nil
		}
		return v.AdditionalVariables
	}).(ConfigVariableArrayOutput)
}

// Auth details for the webhook adapter.
func (o EventingConfigPtrOutput) AuthConfig() AuthConfigPtrOutput {
	return o.ApplyT(func(v *EventingConfig) *AuthConfig {
		if v == nil {
			return nil
		}
		return v.AuthConfig
	}).(AuthConfigPtrOutput)
}

// Encryption key (can be either Google managed or CMEK).
func (o EventingConfigPtrOutput) EncryptionKey() ConfigVariablePtrOutput {
	return o.ApplyT(func(v *EventingConfig) *ConfigVariable {
		if v == nil {
			return nil
		}
		return v.EncryptionKey
	}).(ConfigVariablePtrOutput)
}

// Enrichment Enabled.
func (o EventingConfigPtrOutput) EnrichmentEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnrichmentEnabled
	}).(pulumi.BoolPtrOutput)
}

// Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.
func (o EventingConfigPtrOutput) EventsListenerIngressEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventingConfig) *string {
		if v == nil {
			return nil
		}
		return v.EventsListenerIngressEndpoint
	}).(pulumi.StringPtrOutput)
}

// Optional. Private Connectivity Enabled.
func (o EventingConfigPtrOutput) PrivateConnectivityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.PrivateConnectivityEnabled
	}).(pulumi.BoolPtrOutput)
}

// Registration endpoint for auto registration.
func (o EventingConfigPtrOutput) RegistrationDestinationConfig() DestinationConfigPtrOutput {
	return o.ApplyT(func(v *EventingConfig) *DestinationConfig {
		if v == nil {
			return nil
		}
		return v.RegistrationDestinationConfig
	}).(DestinationConfigPtrOutput)
}

// Eventing Configuration of a connection
type EventingConfigResponse struct {
	// Additional eventing related field values
	AdditionalVariables []ConfigVariableResponse `pulumi:"additionalVariables"`
	// Auth details for the webhook adapter.
	AuthConfig AuthConfigResponse `pulumi:"authConfig"`
	// Encryption key (can be either Google managed or CMEK).
	EncryptionKey ConfigVariableResponse `pulumi:"encryptionKey"`
	// Enrichment Enabled.
	EnrichmentEnabled bool `pulumi:"enrichmentEnabled"`
	// Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.
	EventsListenerIngressEndpoint string `pulumi:"eventsListenerIngressEndpoint"`
	// Optional. Private Connectivity Enabled.
	PrivateConnectivityEnabled bool `pulumi:"privateConnectivityEnabled"`
	// Registration endpoint for auto registration.
	RegistrationDestinationConfig DestinationConfigResponse `pulumi:"registrationDestinationConfig"`
}

// Eventing Configuration of a connection
type EventingConfigResponseOutput struct{ *pulumi.OutputState }

func (EventingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventingConfigResponse)(nil)).Elem()
}

func (o EventingConfigResponseOutput) ToEventingConfigResponseOutput() EventingConfigResponseOutput {
	return o
}

func (o EventingConfigResponseOutput) ToEventingConfigResponseOutputWithContext(ctx context.Context) EventingConfigResponseOutput {
	return o
}

func (o EventingConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventingConfigResponse] {
	return pulumix.Output[EventingConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Additional eventing related field values
func (o EventingConfigResponseOutput) AdditionalVariables() ConfigVariableResponseArrayOutput {
	return o.ApplyT(func(v EventingConfigResponse) []ConfigVariableResponse { return v.AdditionalVariables }).(ConfigVariableResponseArrayOutput)
}

// Auth details for the webhook adapter.
func (o EventingConfigResponseOutput) AuthConfig() AuthConfigResponseOutput {
	return o.ApplyT(func(v EventingConfigResponse) AuthConfigResponse { return v.AuthConfig }).(AuthConfigResponseOutput)
}

// Encryption key (can be either Google managed or CMEK).
func (o EventingConfigResponseOutput) EncryptionKey() ConfigVariableResponseOutput {
	return o.ApplyT(func(v EventingConfigResponse) ConfigVariableResponse { return v.EncryptionKey }).(ConfigVariableResponseOutput)
}

// Enrichment Enabled.
func (o EventingConfigResponseOutput) EnrichmentEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EventingConfigResponse) bool { return v.EnrichmentEnabled }).(pulumi.BoolOutput)
}

// Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.
func (o EventingConfigResponseOutput) EventsListenerIngressEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v EventingConfigResponse) string { return v.EventsListenerIngressEndpoint }).(pulumi.StringOutput)
}

// Optional. Private Connectivity Enabled.
func (o EventingConfigResponseOutput) PrivateConnectivityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EventingConfigResponse) bool { return v.PrivateConnectivityEnabled }).(pulumi.BoolOutput)
}

// Registration endpoint for auto registration.
func (o EventingConfigResponseOutput) RegistrationDestinationConfig() DestinationConfigResponseOutput {
	return o.ApplyT(func(v EventingConfigResponse) DestinationConfigResponse { return v.RegistrationDestinationConfig }).(DestinationConfigResponseOutput)
}

// Eventing runtime data has the details related to eventing managed by the system.
type EventingRuntimeDataResponse struct {
	// Events listener endpoint. The value will populated after provisioning the events listener.
	EventsListenerEndpoint string `pulumi:"eventsListenerEndpoint"`
	// Events listener PSC Service attachment. The value will be populated after provisioning the events listener with private connectivity enabled.
	EventsListenerPscSa string `pulumi:"eventsListenerPscSa"`
	// Current status of eventing.
	Status EventingStatusResponse `pulumi:"status"`
}

// Eventing runtime data has the details related to eventing managed by the system.
type EventingRuntimeDataResponseOutput struct{ *pulumi.OutputState }

func (EventingRuntimeDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventingRuntimeDataResponse)(nil)).Elem()
}

func (o EventingRuntimeDataResponseOutput) ToEventingRuntimeDataResponseOutput() EventingRuntimeDataResponseOutput {
	return o
}

func (o EventingRuntimeDataResponseOutput) ToEventingRuntimeDataResponseOutputWithContext(ctx context.Context) EventingRuntimeDataResponseOutput {
	return o
}

func (o EventingRuntimeDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventingRuntimeDataResponse] {
	return pulumix.Output[EventingRuntimeDataResponse]{
		OutputState: o.OutputState,
	}
}

// Events listener endpoint. The value will populated after provisioning the events listener.
func (o EventingRuntimeDataResponseOutput) EventsListenerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v EventingRuntimeDataResponse) string { return v.EventsListenerEndpoint }).(pulumi.StringOutput)
}

// Events listener PSC Service attachment. The value will be populated after provisioning the events listener with private connectivity enabled.
func (o EventingRuntimeDataResponseOutput) EventsListenerPscSa() pulumi.StringOutput {
	return o.ApplyT(func(v EventingRuntimeDataResponse) string { return v.EventsListenerPscSa }).(pulumi.StringOutput)
}

// Current status of eventing.
func (o EventingRuntimeDataResponseOutput) Status() EventingStatusResponseOutput {
	return o.ApplyT(func(v EventingRuntimeDataResponse) EventingStatusResponse { return v.Status }).(EventingStatusResponseOutput)
}

// EventingStatus indicates the state of eventing.
type EventingStatusResponse struct {
	// Description of error if State is set to "ERROR".
	Description string `pulumi:"description"`
	// State.
	State string `pulumi:"state"`
}

// EventingStatus indicates the state of eventing.
type EventingStatusResponseOutput struct{ *pulumi.OutputState }

func (EventingStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventingStatusResponse)(nil)).Elem()
}

func (o EventingStatusResponseOutput) ToEventingStatusResponseOutput() EventingStatusResponseOutput {
	return o
}

func (o EventingStatusResponseOutput) ToEventingStatusResponseOutputWithContext(ctx context.Context) EventingStatusResponseOutput {
	return o
}

func (o EventingStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventingStatusResponse] {
	return pulumix.Output[EventingStatusResponse]{
		OutputState: o.OutputState,
	}
}

// Description of error if State is set to "ERROR".
func (o EventingStatusResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v EventingStatusResponse) string { return v.Description }).(pulumi.StringOutput)
}

// State.
func (o EventingStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v EventingStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: i.ToExprOutputWithContext(ctx).OutputState,
	}
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

func (i *exprPtrType) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: i.ToExprPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

func (o ExprOutput) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: o.OutputState,
	}
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExprResponse] {
	return pulumix.Output[ExprResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Autoscaling config for connector deployment system metrics.
type HPAConfigResponse struct {
	// Percent CPU utilization where HPA triggers autoscaling.
	CpuUtilizationThreshold string `pulumi:"cpuUtilizationThreshold"`
	// Percent Memory utilization where HPA triggers autoscaling.
	MemoryUtilizationThreshold string `pulumi:"memoryUtilizationThreshold"`
}

// Autoscaling config for connector deployment system metrics.
type HPAConfigResponseOutput struct{ *pulumi.OutputState }

func (HPAConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HPAConfigResponse)(nil)).Elem()
}

func (o HPAConfigResponseOutput) ToHPAConfigResponseOutput() HPAConfigResponseOutput {
	return o
}

func (o HPAConfigResponseOutput) ToHPAConfigResponseOutputWithContext(ctx context.Context) HPAConfigResponseOutput {
	return o
}

func (o HPAConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HPAConfigResponse] {
	return pulumix.Output[HPAConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Percent CPU utilization where HPA triggers autoscaling.
func (o HPAConfigResponseOutput) CpuUtilizationThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v HPAConfigResponse) string { return v.CpuUtilizationThreshold }).(pulumi.StringOutput)
}

// Percent Memory utilization where HPA triggers autoscaling.
func (o HPAConfigResponseOutput) MemoryUtilizationThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v HPAConfigResponse) string { return v.MemoryUtilizationThreshold }).(pulumi.StringOutput)
}

// Header details for a given header to be added to Endpoint.
type Header struct {
	// Key of Header.
	Key *string `pulumi:"key"`
	// Value of Header.
	Value *string `pulumi:"value"`
}

// HeaderInput is an input type that accepts HeaderArgs and HeaderOutput values.
// You can construct a concrete instance of `HeaderInput` via:
//
//	HeaderArgs{...}
type HeaderInput interface {
	pulumi.Input

	ToHeaderOutput() HeaderOutput
	ToHeaderOutputWithContext(context.Context) HeaderOutput
}

// Header details for a given header to be added to Endpoint.
type HeaderArgs struct {
	// Key of Header.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value of Header.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Header)(nil)).Elem()
}

func (i HeaderArgs) ToHeaderOutput() HeaderOutput {
	return i.ToHeaderOutputWithContext(context.Background())
}

func (i HeaderArgs) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderOutput)
}

func (i HeaderArgs) ToOutput(ctx context.Context) pulumix.Output[Header] {
	return pulumix.Output[Header]{
		OutputState: i.ToHeaderOutputWithContext(ctx).OutputState,
	}
}

// HeaderArrayInput is an input type that accepts HeaderArray and HeaderArrayOutput values.
// You can construct a concrete instance of `HeaderArrayInput` via:
//
//	HeaderArray{ HeaderArgs{...} }
type HeaderArrayInput interface {
	pulumi.Input

	ToHeaderArrayOutput() HeaderArrayOutput
	ToHeaderArrayOutputWithContext(context.Context) HeaderArrayOutput
}

type HeaderArray []HeaderInput

func (HeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Header)(nil)).Elem()
}

func (i HeaderArray) ToHeaderArrayOutput() HeaderArrayOutput {
	return i.ToHeaderArrayOutputWithContext(context.Background())
}

func (i HeaderArray) ToHeaderArrayOutputWithContext(ctx context.Context) HeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderArrayOutput)
}

func (i HeaderArray) ToOutput(ctx context.Context) pulumix.Output[[]Header] {
	return pulumix.Output[[]Header]{
		OutputState: i.ToHeaderArrayOutputWithContext(ctx).OutputState,
	}
}

// Header details for a given header to be added to Endpoint.
type HeaderOutput struct{ *pulumi.OutputState }

func (HeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Header)(nil)).Elem()
}

func (o HeaderOutput) ToHeaderOutput() HeaderOutput {
	return o
}

func (o HeaderOutput) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return o
}

func (o HeaderOutput) ToOutput(ctx context.Context) pulumix.Output[Header] {
	return pulumix.Output[Header]{
		OutputState: o.OutputState,
	}
}

// Key of Header.
func (o HeaderOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Header) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value of Header.
func (o HeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Header) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HeaderArrayOutput struct{ *pulumi.OutputState }

func (HeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Header)(nil)).Elem()
}

func (o HeaderArrayOutput) ToHeaderArrayOutput() HeaderArrayOutput {
	return o
}

func (o HeaderArrayOutput) ToHeaderArrayOutputWithContext(ctx context.Context) HeaderArrayOutput {
	return o
}

func (o HeaderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Header] {
	return pulumix.Output[[]Header]{
		OutputState: o.OutputState,
	}
}

func (o HeaderArrayOutput) Index(i pulumi.IntInput) HeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Header {
		return vs[0].([]Header)[vs[1].(int)]
	}).(HeaderOutput)
}

// Header details for a given header to be added to Endpoint.
type HeaderResponse struct {
	// Key of Header.
	Key string `pulumi:"key"`
	// Value of Header.
	Value string `pulumi:"value"`
}

// Header details for a given header to be added to Endpoint.
type HeaderResponseOutput struct{ *pulumi.OutputState }

func (HeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderResponse)(nil)).Elem()
}

func (o HeaderResponseOutput) ToHeaderResponseOutput() HeaderResponseOutput {
	return o
}

func (o HeaderResponseOutput) ToHeaderResponseOutputWithContext(ctx context.Context) HeaderResponseOutput {
	return o
}

func (o HeaderResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HeaderResponse] {
	return pulumix.Output[HeaderResponse]{
		OutputState: o.OutputState,
	}
}

// Key of Header.
func (o HeaderResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v HeaderResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Value of Header.
func (o HeaderResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v HeaderResponse) string { return v.Value }).(pulumi.StringOutput)
}

type HeaderResponseArrayOutput struct{ *pulumi.OutputState }

func (HeaderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderResponse)(nil)).Elem()
}

func (o HeaderResponseArrayOutput) ToHeaderResponseArrayOutput() HeaderResponseArrayOutput {
	return o
}

func (o HeaderResponseArrayOutput) ToHeaderResponseArrayOutputWithContext(ctx context.Context) HeaderResponseArrayOutput {
	return o
}

func (o HeaderResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]HeaderResponse] {
	return pulumix.Output[[]HeaderResponse]{
		OutputState: o.OutputState,
	}
}

func (o HeaderResponseArrayOutput) Index(i pulumi.IntInput) HeaderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeaderResponse {
		return vs[0].([]HeaderResponse)[vs[1].(int)]
	}).(HeaderResponseOutput)
}

// JMS message denotes the source of the event
type JMS struct {
	// Optional. Name of the JMS source. i.e. queueName or topicName
	Name *string `pulumi:"name"`
	// Optional. Type of the JMS Source. i.e. Queue or Topic
	Type *JMSType `pulumi:"type"`
}

// JMSInput is an input type that accepts JMSArgs and JMSOutput values.
// You can construct a concrete instance of `JMSInput` via:
//
//	JMSArgs{...}
type JMSInput interface {
	pulumi.Input

	ToJMSOutput() JMSOutput
	ToJMSOutputWithContext(context.Context) JMSOutput
}

// JMS message denotes the source of the event
type JMSArgs struct {
	// Optional. Name of the JMS source. i.e. queueName or topicName
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional. Type of the JMS Source. i.e. Queue or Topic
	Type JMSTypePtrInput `pulumi:"type"`
}

func (JMSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JMS)(nil)).Elem()
}

func (i JMSArgs) ToJMSOutput() JMSOutput {
	return i.ToJMSOutputWithContext(context.Background())
}

func (i JMSArgs) ToJMSOutputWithContext(ctx context.Context) JMSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JMSOutput)
}

func (i JMSArgs) ToOutput(ctx context.Context) pulumix.Output[JMS] {
	return pulumix.Output[JMS]{
		OutputState: i.ToJMSOutputWithContext(ctx).OutputState,
	}
}

func (i JMSArgs) ToJMSPtrOutput() JMSPtrOutput {
	return i.ToJMSPtrOutputWithContext(context.Background())
}

func (i JMSArgs) ToJMSPtrOutputWithContext(ctx context.Context) JMSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JMSOutput).ToJMSPtrOutputWithContext(ctx)
}

// JMSPtrInput is an input type that accepts JMSArgs, JMSPtr and JMSPtrOutput values.
// You can construct a concrete instance of `JMSPtrInput` via:
//
//	        JMSArgs{...}
//
//	or:
//
//	        nil
type JMSPtrInput interface {
	pulumi.Input

	ToJMSPtrOutput() JMSPtrOutput
	ToJMSPtrOutputWithContext(context.Context) JMSPtrOutput
}

type jmsPtrType JMSArgs

func JMSPtr(v *JMSArgs) JMSPtrInput {
	return (*jmsPtrType)(v)
}

func (*jmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JMS)(nil)).Elem()
}

func (i *jmsPtrType) ToJMSPtrOutput() JMSPtrOutput {
	return i.ToJMSPtrOutputWithContext(context.Background())
}

func (i *jmsPtrType) ToJMSPtrOutputWithContext(ctx context.Context) JMSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JMSPtrOutput)
}

func (i *jmsPtrType) ToOutput(ctx context.Context) pulumix.Output[*JMS] {
	return pulumix.Output[*JMS]{
		OutputState: i.ToJMSPtrOutputWithContext(ctx).OutputState,
	}
}

// JMS message denotes the source of the event
type JMSOutput struct{ *pulumi.OutputState }

func (JMSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JMS)(nil)).Elem()
}

func (o JMSOutput) ToJMSOutput() JMSOutput {
	return o
}

func (o JMSOutput) ToJMSOutputWithContext(ctx context.Context) JMSOutput {
	return o
}

func (o JMSOutput) ToJMSPtrOutput() JMSPtrOutput {
	return o.ToJMSPtrOutputWithContext(context.Background())
}

func (o JMSOutput) ToJMSPtrOutputWithContext(ctx context.Context) JMSPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JMS) *JMS {
		return &v
	}).(JMSPtrOutput)
}

func (o JMSOutput) ToOutput(ctx context.Context) pulumix.Output[JMS] {
	return pulumix.Output[JMS]{
		OutputState: o.OutputState,
	}
}

// Optional. Name of the JMS source. i.e. queueName or topicName
func (o JMSOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JMS) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional. Type of the JMS Source. i.e. Queue or Topic
func (o JMSOutput) Type() JMSTypePtrOutput {
	return o.ApplyT(func(v JMS) *JMSType { return v.Type }).(JMSTypePtrOutput)
}

type JMSPtrOutput struct{ *pulumi.OutputState }

func (JMSPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JMS)(nil)).Elem()
}

func (o JMSPtrOutput) ToJMSPtrOutput() JMSPtrOutput {
	return o
}

func (o JMSPtrOutput) ToJMSPtrOutputWithContext(ctx context.Context) JMSPtrOutput {
	return o
}

func (o JMSPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JMS] {
	return pulumix.Output[*JMS]{
		OutputState: o.OutputState,
	}
}

func (o JMSPtrOutput) Elem() JMSOutput {
	return o.ApplyT(func(v *JMS) JMS {
		if v != nil {
			return *v
		}
		var ret JMS
		return ret
	}).(JMSOutput)
}

// Optional. Name of the JMS source. i.e. queueName or topicName
func (o JMSPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JMS) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Optional. Type of the JMS Source. i.e. Queue or Topic
func (o JMSPtrOutput) Type() JMSTypePtrOutput {
	return o.ApplyT(func(v *JMS) *JMSType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(JMSTypePtrOutput)
}

// JMS message denotes the source of the event
type JMSResponse struct {
	// Optional. Name of the JMS source. i.e. queueName or topicName
	Name string `pulumi:"name"`
	// Optional. Type of the JMS Source. i.e. Queue or Topic
	Type string `pulumi:"type"`
}

// JMS message denotes the source of the event
type JMSResponseOutput struct{ *pulumi.OutputState }

func (JMSResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JMSResponse)(nil)).Elem()
}

func (o JMSResponseOutput) ToJMSResponseOutput() JMSResponseOutput {
	return o
}

func (o JMSResponseOutput) ToJMSResponseOutputWithContext(ctx context.Context) JMSResponseOutput {
	return o
}

func (o JMSResponseOutput) ToOutput(ctx context.Context) pulumix.Output[JMSResponse] {
	return pulumix.Output[JMSResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Name of the JMS source. i.e. queueName or topicName
func (o JMSResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JMSResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. Type of the JMS Source. i.e. Queue or Topic
func (o JMSResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JMSResponse) string { return v.Type }).(pulumi.StringOutput)
}

// JWT claims used for the jwt-bearer authorization grant.
type JwtClaims struct {
	// Value for the "aud" claim.
	Audience *string `pulumi:"audience"`
	// Value for the "iss" claim.
	Issuer *string `pulumi:"issuer"`
	// Value for the "sub" claim.
	Subject *string `pulumi:"subject"`
}

// JwtClaimsInput is an input type that accepts JwtClaimsArgs and JwtClaimsOutput values.
// You can construct a concrete instance of `JwtClaimsInput` via:
//
//	JwtClaimsArgs{...}
type JwtClaimsInput interface {
	pulumi.Input

	ToJwtClaimsOutput() JwtClaimsOutput
	ToJwtClaimsOutputWithContext(context.Context) JwtClaimsOutput
}

// JWT claims used for the jwt-bearer authorization grant.
type JwtClaimsArgs struct {
	// Value for the "aud" claim.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// Value for the "iss" claim.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// Value for the "sub" claim.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (JwtClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaims)(nil)).Elem()
}

func (i JwtClaimsArgs) ToJwtClaimsOutput() JwtClaimsOutput {
	return i.ToJwtClaimsOutputWithContext(context.Background())
}

func (i JwtClaimsArgs) ToJwtClaimsOutputWithContext(ctx context.Context) JwtClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimsOutput)
}

func (i JwtClaimsArgs) ToOutput(ctx context.Context) pulumix.Output[JwtClaims] {
	return pulumix.Output[JwtClaims]{
		OutputState: i.ToJwtClaimsOutputWithContext(ctx).OutputState,
	}
}

func (i JwtClaimsArgs) ToJwtClaimsPtrOutput() JwtClaimsPtrOutput {
	return i.ToJwtClaimsPtrOutputWithContext(context.Background())
}

func (i JwtClaimsArgs) ToJwtClaimsPtrOutputWithContext(ctx context.Context) JwtClaimsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimsOutput).ToJwtClaimsPtrOutputWithContext(ctx)
}

// JwtClaimsPtrInput is an input type that accepts JwtClaimsArgs, JwtClaimsPtr and JwtClaimsPtrOutput values.
// You can construct a concrete instance of `JwtClaimsPtrInput` via:
//
//	        JwtClaimsArgs{...}
//
//	or:
//
//	        nil
type JwtClaimsPtrInput interface {
	pulumi.Input

	ToJwtClaimsPtrOutput() JwtClaimsPtrOutput
	ToJwtClaimsPtrOutputWithContext(context.Context) JwtClaimsPtrOutput
}

type jwtClaimsPtrType JwtClaimsArgs

func JwtClaimsPtr(v *JwtClaimsArgs) JwtClaimsPtrInput {
	return (*jwtClaimsPtrType)(v)
}

func (*jwtClaimsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JwtClaims)(nil)).Elem()
}

func (i *jwtClaimsPtrType) ToJwtClaimsPtrOutput() JwtClaimsPtrOutput {
	return i.ToJwtClaimsPtrOutputWithContext(context.Background())
}

func (i *jwtClaimsPtrType) ToJwtClaimsPtrOutputWithContext(ctx context.Context) JwtClaimsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimsPtrOutput)
}

func (i *jwtClaimsPtrType) ToOutput(ctx context.Context) pulumix.Output[*JwtClaims] {
	return pulumix.Output[*JwtClaims]{
		OutputState: i.ToJwtClaimsPtrOutputWithContext(ctx).OutputState,
	}
}

// JWT claims used for the jwt-bearer authorization grant.
type JwtClaimsOutput struct{ *pulumi.OutputState }

func (JwtClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaims)(nil)).Elem()
}

func (o JwtClaimsOutput) ToJwtClaimsOutput() JwtClaimsOutput {
	return o
}

func (o JwtClaimsOutput) ToJwtClaimsOutputWithContext(ctx context.Context) JwtClaimsOutput {
	return o
}

func (o JwtClaimsOutput) ToJwtClaimsPtrOutput() JwtClaimsPtrOutput {
	return o.ToJwtClaimsPtrOutputWithContext(context.Background())
}

func (o JwtClaimsOutput) ToJwtClaimsPtrOutputWithContext(ctx context.Context) JwtClaimsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JwtClaims) *JwtClaims {
		return &v
	}).(JwtClaimsPtrOutput)
}

func (o JwtClaimsOutput) ToOutput(ctx context.Context) pulumix.Output[JwtClaims] {
	return pulumix.Output[JwtClaims]{
		OutputState: o.OutputState,
	}
}

// Value for the "aud" claim.
func (o JwtClaimsOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JwtClaims) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// Value for the "iss" claim.
func (o JwtClaimsOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JwtClaims) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// Value for the "sub" claim.
func (o JwtClaimsOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JwtClaims) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type JwtClaimsPtrOutput struct{ *pulumi.OutputState }

func (JwtClaimsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JwtClaims)(nil)).Elem()
}

func (o JwtClaimsPtrOutput) ToJwtClaimsPtrOutput() JwtClaimsPtrOutput {
	return o
}

func (o JwtClaimsPtrOutput) ToJwtClaimsPtrOutputWithContext(ctx context.Context) JwtClaimsPtrOutput {
	return o
}

func (o JwtClaimsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JwtClaims] {
	return pulumix.Output[*JwtClaims]{
		OutputState: o.OutputState,
	}
}

func (o JwtClaimsPtrOutput) Elem() JwtClaimsOutput {
	return o.ApplyT(func(v *JwtClaims) JwtClaims {
		if v != nil {
			return *v
		}
		var ret JwtClaims
		return ret
	}).(JwtClaimsOutput)
}

// Value for the "aud" claim.
func (o JwtClaimsPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JwtClaims) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// Value for the "iss" claim.
func (o JwtClaimsPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JwtClaims) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// Value for the "sub" claim.
func (o JwtClaimsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JwtClaims) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

// JWT claims used for the jwt-bearer authorization grant.
type JwtClaimsResponse struct {
	// Value for the "aud" claim.
	Audience string `pulumi:"audience"`
	// Value for the "iss" claim.
	Issuer string `pulumi:"issuer"`
	// Value for the "sub" claim.
	Subject string `pulumi:"subject"`
}

// JWT claims used for the jwt-bearer authorization grant.
type JwtClaimsResponseOutput struct{ *pulumi.OutputState }

func (JwtClaimsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaimsResponse)(nil)).Elem()
}

func (o JwtClaimsResponseOutput) ToJwtClaimsResponseOutput() JwtClaimsResponseOutput {
	return o
}

func (o JwtClaimsResponseOutput) ToJwtClaimsResponseOutputWithContext(ctx context.Context) JwtClaimsResponseOutput {
	return o
}

func (o JwtClaimsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[JwtClaimsResponse] {
	return pulumix.Output[JwtClaimsResponse]{
		OutputState: o.OutputState,
	}
}

// Value for the "aud" claim.
func (o JwtClaimsResponseOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v JwtClaimsResponse) string { return v.Audience }).(pulumi.StringOutput)
}

// Value for the "iss" claim.
func (o JwtClaimsResponseOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v JwtClaimsResponse) string { return v.Issuer }).(pulumi.StringOutput)
}

// Value for the "sub" claim.
func (o JwtClaimsResponseOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v JwtClaimsResponse) string { return v.Subject }).(pulumi.StringOutput)
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
type LockConfig struct {
	// Indicates whether or not the connection is locked.
	Locked *bool `pulumi:"locked"`
	// Describes why a connection is locked.
	Reason *string `pulumi:"reason"`
}

// LockConfigInput is an input type that accepts LockConfigArgs and LockConfigOutput values.
// You can construct a concrete instance of `LockConfigInput` via:
//
//	LockConfigArgs{...}
type LockConfigInput interface {
	pulumi.Input

	ToLockConfigOutput() LockConfigOutput
	ToLockConfigOutputWithContext(context.Context) LockConfigOutput
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
type LockConfigArgs struct {
	// Indicates whether or not the connection is locked.
	Locked pulumi.BoolPtrInput `pulumi:"locked"`
	// Describes why a connection is locked.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (LockConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LockConfig)(nil)).Elem()
}

func (i LockConfigArgs) ToLockConfigOutput() LockConfigOutput {
	return i.ToLockConfigOutputWithContext(context.Background())
}

func (i LockConfigArgs) ToLockConfigOutputWithContext(ctx context.Context) LockConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockConfigOutput)
}

func (i LockConfigArgs) ToOutput(ctx context.Context) pulumix.Output[LockConfig] {
	return pulumix.Output[LockConfig]{
		OutputState: i.ToLockConfigOutputWithContext(ctx).OutputState,
	}
}

func (i LockConfigArgs) ToLockConfigPtrOutput() LockConfigPtrOutput {
	return i.ToLockConfigPtrOutputWithContext(context.Background())
}

func (i LockConfigArgs) ToLockConfigPtrOutputWithContext(ctx context.Context) LockConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockConfigOutput).ToLockConfigPtrOutputWithContext(ctx)
}

// LockConfigPtrInput is an input type that accepts LockConfigArgs, LockConfigPtr and LockConfigPtrOutput values.
// You can construct a concrete instance of `LockConfigPtrInput` via:
//
//	        LockConfigArgs{...}
//
//	or:
//
//	        nil
type LockConfigPtrInput interface {
	pulumi.Input

	ToLockConfigPtrOutput() LockConfigPtrOutput
	ToLockConfigPtrOutputWithContext(context.Context) LockConfigPtrOutput
}

type lockConfigPtrType LockConfigArgs

func LockConfigPtr(v *LockConfigArgs) LockConfigPtrInput {
	return (*lockConfigPtrType)(v)
}

func (*lockConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LockConfig)(nil)).Elem()
}

func (i *lockConfigPtrType) ToLockConfigPtrOutput() LockConfigPtrOutput {
	return i.ToLockConfigPtrOutputWithContext(context.Background())
}

func (i *lockConfigPtrType) ToLockConfigPtrOutputWithContext(ctx context.Context) LockConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockConfigPtrOutput)
}

func (i *lockConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*LockConfig] {
	return pulumix.Output[*LockConfig]{
		OutputState: i.ToLockConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
type LockConfigOutput struct{ *pulumi.OutputState }

func (LockConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LockConfig)(nil)).Elem()
}

func (o LockConfigOutput) ToLockConfigOutput() LockConfigOutput {
	return o
}

func (o LockConfigOutput) ToLockConfigOutputWithContext(ctx context.Context) LockConfigOutput {
	return o
}

func (o LockConfigOutput) ToLockConfigPtrOutput() LockConfigPtrOutput {
	return o.ToLockConfigPtrOutputWithContext(context.Background())
}

func (o LockConfigOutput) ToLockConfigPtrOutputWithContext(ctx context.Context) LockConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LockConfig) *LockConfig {
		return &v
	}).(LockConfigPtrOutput)
}

func (o LockConfigOutput) ToOutput(ctx context.Context) pulumix.Output[LockConfig] {
	return pulumix.Output[LockConfig]{
		OutputState: o.OutputState,
	}
}

// Indicates whether or not the connection is locked.
func (o LockConfigOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LockConfig) *bool { return v.Locked }).(pulumi.BoolPtrOutput)
}

// Describes why a connection is locked.
func (o LockConfigOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LockConfig) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type LockConfigPtrOutput struct{ *pulumi.OutputState }

func (LockConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LockConfig)(nil)).Elem()
}

func (o LockConfigPtrOutput) ToLockConfigPtrOutput() LockConfigPtrOutput {
	return o
}

func (o LockConfigPtrOutput) ToLockConfigPtrOutputWithContext(ctx context.Context) LockConfigPtrOutput {
	return o
}

func (o LockConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LockConfig] {
	return pulumix.Output[*LockConfig]{
		OutputState: o.OutputState,
	}
}

func (o LockConfigPtrOutput) Elem() LockConfigOutput {
	return o.ApplyT(func(v *LockConfig) LockConfig {
		if v != nil {
			return *v
		}
		var ret LockConfig
		return ret
	}).(LockConfigOutput)
}

// Indicates whether or not the connection is locked.
func (o LockConfigPtrOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LockConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Locked
	}).(pulumi.BoolPtrOutput)
}

// Describes why a connection is locked.
func (o LockConfigPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LockConfig) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
type LockConfigResponse struct {
	// Indicates whether or not the connection is locked.
	Locked bool `pulumi:"locked"`
	// Describes why a connection is locked.
	Reason string `pulumi:"reason"`
}

// Determines whether or no a connection is locked. If locked, a reason must be specified.
type LockConfigResponseOutput struct{ *pulumi.OutputState }

func (LockConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LockConfigResponse)(nil)).Elem()
}

func (o LockConfigResponseOutput) ToLockConfigResponseOutput() LockConfigResponseOutput {
	return o
}

func (o LockConfigResponseOutput) ToLockConfigResponseOutputWithContext(ctx context.Context) LockConfigResponseOutput {
	return o
}

func (o LockConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LockConfigResponse] {
	return pulumix.Output[LockConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Indicates whether or not the connection is locked.
func (o LockConfigResponseOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v LockConfigResponse) bool { return v.Locked }).(pulumi.BoolOutput)
}

// Describes why a connection is locked.
func (o LockConfigResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v LockConfigResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// Node configuration for the connection.
type NodeConfig struct {
	// Maximum number of nodes in the runtime nodes.
	MaxNodeCount *int `pulumi:"maxNodeCount"`
	// Minimum number of nodes in the runtime nodes.
	MinNodeCount *int `pulumi:"minNodeCount"`
}

// NodeConfigInput is an input type that accepts NodeConfigArgs and NodeConfigOutput values.
// You can construct a concrete instance of `NodeConfigInput` via:
//
//	NodeConfigArgs{...}
type NodeConfigInput interface {
	pulumi.Input

	ToNodeConfigOutput() NodeConfigOutput
	ToNodeConfigOutputWithContext(context.Context) NodeConfigOutput
}

// Node configuration for the connection.
type NodeConfigArgs struct {
	// Maximum number of nodes in the runtime nodes.
	MaxNodeCount pulumi.IntPtrInput `pulumi:"maxNodeCount"`
	// Minimum number of nodes in the runtime nodes.
	MinNodeCount pulumi.IntPtrInput `pulumi:"minNodeCount"`
}

func (NodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (i NodeConfigArgs) ToNodeConfigOutput() NodeConfigOutput {
	return i.ToNodeConfigOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput)
}

func (i NodeConfigArgs) ToOutput(ctx context.Context) pulumix.Output[NodeConfig] {
	return pulumix.Output[NodeConfig]{
		OutputState: i.ToNodeConfigOutputWithContext(ctx).OutputState,
	}
}

func (i NodeConfigArgs) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i NodeConfigArgs) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigOutput).ToNodeConfigPtrOutputWithContext(ctx)
}

// NodeConfigPtrInput is an input type that accepts NodeConfigArgs, NodeConfigPtr and NodeConfigPtrOutput values.
// You can construct a concrete instance of `NodeConfigPtrInput` via:
//
//	        NodeConfigArgs{...}
//
//	or:
//
//	        nil
type NodeConfigPtrInput interface {
	pulumi.Input

	ToNodeConfigPtrOutput() NodeConfigPtrOutput
	ToNodeConfigPtrOutputWithContext(context.Context) NodeConfigPtrOutput
}

type nodeConfigPtrType NodeConfigArgs

func NodeConfigPtr(v *NodeConfigArgs) NodeConfigPtrInput {
	return (*nodeConfigPtrType)(v)
}

func (*nodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return i.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (i *nodeConfigPtrType) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeConfigPtrOutput)
}

func (i *nodeConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*NodeConfig] {
	return pulumix.Output[*NodeConfig]{
		OutputState: i.ToNodeConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Node configuration for the connection.
type NodeConfigOutput struct{ *pulumi.OutputState }

func (NodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfig)(nil)).Elem()
}

func (o NodeConfigOutput) ToNodeConfigOutput() NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigOutputWithContext(ctx context.Context) NodeConfigOutput {
	return o
}

func (o NodeConfigOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o.ToNodeConfigPtrOutputWithContext(context.Background())
}

func (o NodeConfigOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeConfig) *NodeConfig {
		return &v
	}).(NodeConfigPtrOutput)
}

func (o NodeConfigOutput) ToOutput(ctx context.Context) pulumix.Output[NodeConfig] {
	return pulumix.Output[NodeConfig]{
		OutputState: o.OutputState,
	}
}

// Maximum number of nodes in the runtime nodes.
func (o NodeConfigOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

// Minimum number of nodes in the runtime nodes.
func (o NodeConfigOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeConfig) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

type NodeConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeConfig)(nil)).Elem()
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutput() NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) ToNodeConfigPtrOutputWithContext(ctx context.Context) NodeConfigPtrOutput {
	return o
}

func (o NodeConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NodeConfig] {
	return pulumix.Output[*NodeConfig]{
		OutputState: o.OutputState,
	}
}

func (o NodeConfigPtrOutput) Elem() NodeConfigOutput {
	return o.ApplyT(func(v *NodeConfig) NodeConfig {
		if v != nil {
			return *v
		}
		var ret NodeConfig
		return ret
	}).(NodeConfigOutput)
}

// Maximum number of nodes in the runtime nodes.
func (o NodeConfigPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Minimum number of nodes in the runtime nodes.
func (o NodeConfigPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeConfig) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// Node configuration for the connection.
type NodeConfigResponse struct {
	// Maximum number of nodes in the runtime nodes.
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Minimum number of nodes in the runtime nodes.
	MinNodeCount int `pulumi:"minNodeCount"`
}

// Node configuration for the connection.
type NodeConfigResponseOutput struct{ *pulumi.OutputState }

func (NodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigResponse)(nil)).Elem()
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutput() NodeConfigResponseOutput {
	return o
}

func (o NodeConfigResponseOutput) ToNodeConfigResponseOutputWithContext(ctx context.Context) NodeConfigResponseOutput {
	return o
}

func (o NodeConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NodeConfigResponse] {
	return pulumix.Output[NodeConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Maximum number of nodes in the runtime nodes.
func (o NodeConfigResponseOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// Minimum number of nodes in the runtime nodes.
func (o NodeConfigResponseOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeConfigResponse) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

// Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.
type Oauth2AuthCodeFlow struct {
	// Authorization code to be exchanged for access and refresh tokens.
	AuthCode *string `pulumi:"authCode"`
	// Auth URL for Authorization Code Flow
	AuthUri *string `pulumi:"authUri"`
	// Client ID for user-provided OAuth app.
	ClientId *string `pulumi:"clientId"`
	// Client secret for user-provided OAuth app.
	ClientSecret *Secret `pulumi:"clientSecret"`
	// Whether to enable PKCE when the user performs the auth code flow.
	EnablePkce *bool `pulumi:"enablePkce"`
	// PKCE verifier to be used during the auth code exchange.
	PkceVerifier *string `pulumi:"pkceVerifier"`
	// Redirect URI to be provided during the auth code exchange.
	RedirectUri *string `pulumi:"redirectUri"`
	// Scopes the connection will request when the user performs the auth code flow.
	Scopes []string `pulumi:"scopes"`
}

// Oauth2AuthCodeFlowInput is an input type that accepts Oauth2AuthCodeFlowArgs and Oauth2AuthCodeFlowOutput values.
// You can construct a concrete instance of `Oauth2AuthCodeFlowInput` via:
//
//	Oauth2AuthCodeFlowArgs{...}
type Oauth2AuthCodeFlowInput interface {
	pulumi.Input

	ToOauth2AuthCodeFlowOutput() Oauth2AuthCodeFlowOutput
	ToOauth2AuthCodeFlowOutputWithContext(context.Context) Oauth2AuthCodeFlowOutput
}

// Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.
type Oauth2AuthCodeFlowArgs struct {
	// Authorization code to be exchanged for access and refresh tokens.
	AuthCode pulumi.StringPtrInput `pulumi:"authCode"`
	// Auth URL for Authorization Code Flow
	AuthUri pulumi.StringPtrInput `pulumi:"authUri"`
	// Client ID for user-provided OAuth app.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Client secret for user-provided OAuth app.
	ClientSecret SecretPtrInput `pulumi:"clientSecret"`
	// Whether to enable PKCE when the user performs the auth code flow.
	EnablePkce pulumi.BoolPtrInput `pulumi:"enablePkce"`
	// PKCE verifier to be used during the auth code exchange.
	PkceVerifier pulumi.StringPtrInput `pulumi:"pkceVerifier"`
	// Redirect URI to be provided during the auth code exchange.
	RedirectUri pulumi.StringPtrInput `pulumi:"redirectUri"`
	// Scopes the connection will request when the user performs the auth code flow.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (Oauth2AuthCodeFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2AuthCodeFlow)(nil)).Elem()
}

func (i Oauth2AuthCodeFlowArgs) ToOauth2AuthCodeFlowOutput() Oauth2AuthCodeFlowOutput {
	return i.ToOauth2AuthCodeFlowOutputWithContext(context.Background())
}

func (i Oauth2AuthCodeFlowArgs) ToOauth2AuthCodeFlowOutputWithContext(ctx context.Context) Oauth2AuthCodeFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2AuthCodeFlowOutput)
}

func (i Oauth2AuthCodeFlowArgs) ToOutput(ctx context.Context) pulumix.Output[Oauth2AuthCodeFlow] {
	return pulumix.Output[Oauth2AuthCodeFlow]{
		OutputState: i.ToOauth2AuthCodeFlowOutputWithContext(ctx).OutputState,
	}
}

func (i Oauth2AuthCodeFlowArgs) ToOauth2AuthCodeFlowPtrOutput() Oauth2AuthCodeFlowPtrOutput {
	return i.ToOauth2AuthCodeFlowPtrOutputWithContext(context.Background())
}

func (i Oauth2AuthCodeFlowArgs) ToOauth2AuthCodeFlowPtrOutputWithContext(ctx context.Context) Oauth2AuthCodeFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2AuthCodeFlowOutput).ToOauth2AuthCodeFlowPtrOutputWithContext(ctx)
}

// Oauth2AuthCodeFlowPtrInput is an input type that accepts Oauth2AuthCodeFlowArgs, Oauth2AuthCodeFlowPtr and Oauth2AuthCodeFlowPtrOutput values.
// You can construct a concrete instance of `Oauth2AuthCodeFlowPtrInput` via:
//
//	        Oauth2AuthCodeFlowArgs{...}
//
//	or:
//
//	        nil
type Oauth2AuthCodeFlowPtrInput interface {
	pulumi.Input

	ToOauth2AuthCodeFlowPtrOutput() Oauth2AuthCodeFlowPtrOutput
	ToOauth2AuthCodeFlowPtrOutputWithContext(context.Context) Oauth2AuthCodeFlowPtrOutput
}

type oauth2AuthCodeFlowPtrType Oauth2AuthCodeFlowArgs

func Oauth2AuthCodeFlowPtr(v *Oauth2AuthCodeFlowArgs) Oauth2AuthCodeFlowPtrInput {
	return (*oauth2AuthCodeFlowPtrType)(v)
}

func (*oauth2AuthCodeFlowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Oauth2AuthCodeFlow)(nil)).Elem()
}

func (i *oauth2AuthCodeFlowPtrType) ToOauth2AuthCodeFlowPtrOutput() Oauth2AuthCodeFlowPtrOutput {
	return i.ToOauth2AuthCodeFlowPtrOutputWithContext(context.Background())
}

func (i *oauth2AuthCodeFlowPtrType) ToOauth2AuthCodeFlowPtrOutputWithContext(ctx context.Context) Oauth2AuthCodeFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2AuthCodeFlowPtrOutput)
}

func (i *oauth2AuthCodeFlowPtrType) ToOutput(ctx context.Context) pulumix.Output[*Oauth2AuthCodeFlow] {
	return pulumix.Output[*Oauth2AuthCodeFlow]{
		OutputState: i.ToOauth2AuthCodeFlowPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.
type Oauth2AuthCodeFlowOutput struct{ *pulumi.OutputState }

func (Oauth2AuthCodeFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2AuthCodeFlow)(nil)).Elem()
}

func (o Oauth2AuthCodeFlowOutput) ToOauth2AuthCodeFlowOutput() Oauth2AuthCodeFlowOutput {
	return o
}

func (o Oauth2AuthCodeFlowOutput) ToOauth2AuthCodeFlowOutputWithContext(ctx context.Context) Oauth2AuthCodeFlowOutput {
	return o
}

func (o Oauth2AuthCodeFlowOutput) ToOauth2AuthCodeFlowPtrOutput() Oauth2AuthCodeFlowPtrOutput {
	return o.ToOauth2AuthCodeFlowPtrOutputWithContext(context.Background())
}

func (o Oauth2AuthCodeFlowOutput) ToOauth2AuthCodeFlowPtrOutputWithContext(ctx context.Context) Oauth2AuthCodeFlowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Oauth2AuthCodeFlow) *Oauth2AuthCodeFlow {
		return &v
	}).(Oauth2AuthCodeFlowPtrOutput)
}

func (o Oauth2AuthCodeFlowOutput) ToOutput(ctx context.Context) pulumix.Output[Oauth2AuthCodeFlow] {
	return pulumix.Output[Oauth2AuthCodeFlow]{
		OutputState: o.OutputState,
	}
}

// Authorization code to be exchanged for access and refresh tokens.
func (o Oauth2AuthCodeFlowOutput) AuthCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlow) *string { return v.AuthCode }).(pulumi.StringPtrOutput)
}

// Auth URL for Authorization Code Flow
func (o Oauth2AuthCodeFlowOutput) AuthUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlow) *string { return v.AuthUri }).(pulumi.StringPtrOutput)
}

// Client ID for user-provided OAuth app.
func (o Oauth2AuthCodeFlowOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlow) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Client secret for user-provided OAuth app.
func (o Oauth2AuthCodeFlowOutput) ClientSecret() SecretPtrOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlow) *Secret { return v.ClientSecret }).(SecretPtrOutput)
}

// Whether to enable PKCE when the user performs the auth code flow.
func (o Oauth2AuthCodeFlowOutput) EnablePkce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlow) *bool { return v.EnablePkce }).(pulumi.BoolPtrOutput)
}

// PKCE verifier to be used during the auth code exchange.
func (o Oauth2AuthCodeFlowOutput) PkceVerifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlow) *string { return v.PkceVerifier }).(pulumi.StringPtrOutput)
}

// Redirect URI to be provided during the auth code exchange.
func (o Oauth2AuthCodeFlowOutput) RedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlow) *string { return v.RedirectUri }).(pulumi.StringPtrOutput)
}

// Scopes the connection will request when the user performs the auth code flow.
func (o Oauth2AuthCodeFlowOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlow) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type Oauth2AuthCodeFlowPtrOutput struct{ *pulumi.OutputState }

func (Oauth2AuthCodeFlowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Oauth2AuthCodeFlow)(nil)).Elem()
}

func (o Oauth2AuthCodeFlowPtrOutput) ToOauth2AuthCodeFlowPtrOutput() Oauth2AuthCodeFlowPtrOutput {
	return o
}

func (o Oauth2AuthCodeFlowPtrOutput) ToOauth2AuthCodeFlowPtrOutputWithContext(ctx context.Context) Oauth2AuthCodeFlowPtrOutput {
	return o
}

func (o Oauth2AuthCodeFlowPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Oauth2AuthCodeFlow] {
	return pulumix.Output[*Oauth2AuthCodeFlow]{
		OutputState: o.OutputState,
	}
}

func (o Oauth2AuthCodeFlowPtrOutput) Elem() Oauth2AuthCodeFlowOutput {
	return o.ApplyT(func(v *Oauth2AuthCodeFlow) Oauth2AuthCodeFlow {
		if v != nil {
			return *v
		}
		var ret Oauth2AuthCodeFlow
		return ret
	}).(Oauth2AuthCodeFlowOutput)
}

// Authorization code to be exchanged for access and refresh tokens.
func (o Oauth2AuthCodeFlowPtrOutput) AuthCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oauth2AuthCodeFlow) *string {
		if v == nil {
			return nil
		}
		return v.AuthCode
	}).(pulumi.StringPtrOutput)
}

// Auth URL for Authorization Code Flow
func (o Oauth2AuthCodeFlowPtrOutput) AuthUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oauth2AuthCodeFlow) *string {
		if v == nil {
			return nil
		}
		return v.AuthUri
	}).(pulumi.StringPtrOutput)
}

// Client ID for user-provided OAuth app.
func (o Oauth2AuthCodeFlowPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oauth2AuthCodeFlow) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Client secret for user-provided OAuth app.
func (o Oauth2AuthCodeFlowPtrOutput) ClientSecret() SecretPtrOutput {
	return o.ApplyT(func(v *Oauth2AuthCodeFlow) *Secret {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(SecretPtrOutput)
}

// Whether to enable PKCE when the user performs the auth code flow.
func (o Oauth2AuthCodeFlowPtrOutput) EnablePkce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Oauth2AuthCodeFlow) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePkce
	}).(pulumi.BoolPtrOutput)
}

// PKCE verifier to be used during the auth code exchange.
func (o Oauth2AuthCodeFlowPtrOutput) PkceVerifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oauth2AuthCodeFlow) *string {
		if v == nil {
			return nil
		}
		return v.PkceVerifier
	}).(pulumi.StringPtrOutput)
}

// Redirect URI to be provided during the auth code exchange.
func (o Oauth2AuthCodeFlowPtrOutput) RedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oauth2AuthCodeFlow) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUri
	}).(pulumi.StringPtrOutput)
}

// Scopes the connection will request when the user performs the auth code flow.
func (o Oauth2AuthCodeFlowPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Oauth2AuthCodeFlow) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.
type Oauth2AuthCodeFlowResponse struct {
	// Authorization code to be exchanged for access and refresh tokens.
	AuthCode string `pulumi:"authCode"`
	// Auth URL for Authorization Code Flow
	AuthUri string `pulumi:"authUri"`
	// Client ID for user-provided OAuth app.
	ClientId string `pulumi:"clientId"`
	// Client secret for user-provided OAuth app.
	ClientSecret SecretResponse `pulumi:"clientSecret"`
	// Whether to enable PKCE when the user performs the auth code flow.
	EnablePkce bool `pulumi:"enablePkce"`
	// PKCE verifier to be used during the auth code exchange.
	PkceVerifier string `pulumi:"pkceVerifier"`
	// Redirect URI to be provided during the auth code exchange.
	RedirectUri string `pulumi:"redirectUri"`
	// Scopes the connection will request when the user performs the auth code flow.
	Scopes []string `pulumi:"scopes"`
}

// Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.
type Oauth2AuthCodeFlowResponseOutput struct{ *pulumi.OutputState }

func (Oauth2AuthCodeFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2AuthCodeFlowResponse)(nil)).Elem()
}

func (o Oauth2AuthCodeFlowResponseOutput) ToOauth2AuthCodeFlowResponseOutput() Oauth2AuthCodeFlowResponseOutput {
	return o
}

func (o Oauth2AuthCodeFlowResponseOutput) ToOauth2AuthCodeFlowResponseOutputWithContext(ctx context.Context) Oauth2AuthCodeFlowResponseOutput {
	return o
}

func (o Oauth2AuthCodeFlowResponseOutput) ToOutput(ctx context.Context) pulumix.Output[Oauth2AuthCodeFlowResponse] {
	return pulumix.Output[Oauth2AuthCodeFlowResponse]{
		OutputState: o.OutputState,
	}
}

// Authorization code to be exchanged for access and refresh tokens.
func (o Oauth2AuthCodeFlowResponseOutput) AuthCode() pulumi.StringOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlowResponse) string { return v.AuthCode }).(pulumi.StringOutput)
}

// Auth URL for Authorization Code Flow
func (o Oauth2AuthCodeFlowResponseOutput) AuthUri() pulumi.StringOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlowResponse) string { return v.AuthUri }).(pulumi.StringOutput)
}

// Client ID for user-provided OAuth app.
func (o Oauth2AuthCodeFlowResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlowResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client secret for user-provided OAuth app.
func (o Oauth2AuthCodeFlowResponseOutput) ClientSecret() SecretResponseOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlowResponse) SecretResponse { return v.ClientSecret }).(SecretResponseOutput)
}

// Whether to enable PKCE when the user performs the auth code flow.
func (o Oauth2AuthCodeFlowResponseOutput) EnablePkce() pulumi.BoolOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlowResponse) bool { return v.EnablePkce }).(pulumi.BoolOutput)
}

// PKCE verifier to be used during the auth code exchange.
func (o Oauth2AuthCodeFlowResponseOutput) PkceVerifier() pulumi.StringOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlowResponse) string { return v.PkceVerifier }).(pulumi.StringOutput)
}

// Redirect URI to be provided during the auth code exchange.
func (o Oauth2AuthCodeFlowResponseOutput) RedirectUri() pulumi.StringOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlowResponse) string { return v.RedirectUri }).(pulumi.StringOutput)
}

// Scopes the connection will request when the user performs the auth code flow.
func (o Oauth2AuthCodeFlowResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Oauth2AuthCodeFlowResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
type Oauth2ClientCredentials struct {
	// The client identifier.
	ClientId *string `pulumi:"clientId"`
	// Secret version reference containing the client secret.
	ClientSecret *Secret `pulumi:"clientSecret"`
}

// Oauth2ClientCredentialsInput is an input type that accepts Oauth2ClientCredentialsArgs and Oauth2ClientCredentialsOutput values.
// You can construct a concrete instance of `Oauth2ClientCredentialsInput` via:
//
//	Oauth2ClientCredentialsArgs{...}
type Oauth2ClientCredentialsInput interface {
	pulumi.Input

	ToOauth2ClientCredentialsOutput() Oauth2ClientCredentialsOutput
	ToOauth2ClientCredentialsOutputWithContext(context.Context) Oauth2ClientCredentialsOutput
}

// Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
type Oauth2ClientCredentialsArgs struct {
	// The client identifier.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Secret version reference containing the client secret.
	ClientSecret SecretPtrInput `pulumi:"clientSecret"`
}

func (Oauth2ClientCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2ClientCredentials)(nil)).Elem()
}

func (i Oauth2ClientCredentialsArgs) ToOauth2ClientCredentialsOutput() Oauth2ClientCredentialsOutput {
	return i.ToOauth2ClientCredentialsOutputWithContext(context.Background())
}

func (i Oauth2ClientCredentialsArgs) ToOauth2ClientCredentialsOutputWithContext(ctx context.Context) Oauth2ClientCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2ClientCredentialsOutput)
}

func (i Oauth2ClientCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[Oauth2ClientCredentials] {
	return pulumix.Output[Oauth2ClientCredentials]{
		OutputState: i.ToOauth2ClientCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i Oauth2ClientCredentialsArgs) ToOauth2ClientCredentialsPtrOutput() Oauth2ClientCredentialsPtrOutput {
	return i.ToOauth2ClientCredentialsPtrOutputWithContext(context.Background())
}

func (i Oauth2ClientCredentialsArgs) ToOauth2ClientCredentialsPtrOutputWithContext(ctx context.Context) Oauth2ClientCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2ClientCredentialsOutput).ToOauth2ClientCredentialsPtrOutputWithContext(ctx)
}

// Oauth2ClientCredentialsPtrInput is an input type that accepts Oauth2ClientCredentialsArgs, Oauth2ClientCredentialsPtr and Oauth2ClientCredentialsPtrOutput values.
// You can construct a concrete instance of `Oauth2ClientCredentialsPtrInput` via:
//
//	        Oauth2ClientCredentialsArgs{...}
//
//	or:
//
//	        nil
type Oauth2ClientCredentialsPtrInput interface {
	pulumi.Input

	ToOauth2ClientCredentialsPtrOutput() Oauth2ClientCredentialsPtrOutput
	ToOauth2ClientCredentialsPtrOutputWithContext(context.Context) Oauth2ClientCredentialsPtrOutput
}

type oauth2ClientCredentialsPtrType Oauth2ClientCredentialsArgs

func Oauth2ClientCredentialsPtr(v *Oauth2ClientCredentialsArgs) Oauth2ClientCredentialsPtrInput {
	return (*oauth2ClientCredentialsPtrType)(v)
}

func (*oauth2ClientCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Oauth2ClientCredentials)(nil)).Elem()
}

func (i *oauth2ClientCredentialsPtrType) ToOauth2ClientCredentialsPtrOutput() Oauth2ClientCredentialsPtrOutput {
	return i.ToOauth2ClientCredentialsPtrOutputWithContext(context.Background())
}

func (i *oauth2ClientCredentialsPtrType) ToOauth2ClientCredentialsPtrOutputWithContext(ctx context.Context) Oauth2ClientCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2ClientCredentialsPtrOutput)
}

func (i *oauth2ClientCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*Oauth2ClientCredentials] {
	return pulumix.Output[*Oauth2ClientCredentials]{
		OutputState: i.ToOauth2ClientCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
type Oauth2ClientCredentialsOutput struct{ *pulumi.OutputState }

func (Oauth2ClientCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2ClientCredentials)(nil)).Elem()
}

func (o Oauth2ClientCredentialsOutput) ToOauth2ClientCredentialsOutput() Oauth2ClientCredentialsOutput {
	return o
}

func (o Oauth2ClientCredentialsOutput) ToOauth2ClientCredentialsOutputWithContext(ctx context.Context) Oauth2ClientCredentialsOutput {
	return o
}

func (o Oauth2ClientCredentialsOutput) ToOauth2ClientCredentialsPtrOutput() Oauth2ClientCredentialsPtrOutput {
	return o.ToOauth2ClientCredentialsPtrOutputWithContext(context.Background())
}

func (o Oauth2ClientCredentialsOutput) ToOauth2ClientCredentialsPtrOutputWithContext(ctx context.Context) Oauth2ClientCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Oauth2ClientCredentials) *Oauth2ClientCredentials {
		return &v
	}).(Oauth2ClientCredentialsPtrOutput)
}

func (o Oauth2ClientCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[Oauth2ClientCredentials] {
	return pulumix.Output[Oauth2ClientCredentials]{
		OutputState: o.OutputState,
	}
}

// The client identifier.
func (o Oauth2ClientCredentialsOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Oauth2ClientCredentials) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Secret version reference containing the client secret.
func (o Oauth2ClientCredentialsOutput) ClientSecret() SecretPtrOutput {
	return o.ApplyT(func(v Oauth2ClientCredentials) *Secret { return v.ClientSecret }).(SecretPtrOutput)
}

type Oauth2ClientCredentialsPtrOutput struct{ *pulumi.OutputState }

func (Oauth2ClientCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Oauth2ClientCredentials)(nil)).Elem()
}

func (o Oauth2ClientCredentialsPtrOutput) ToOauth2ClientCredentialsPtrOutput() Oauth2ClientCredentialsPtrOutput {
	return o
}

func (o Oauth2ClientCredentialsPtrOutput) ToOauth2ClientCredentialsPtrOutputWithContext(ctx context.Context) Oauth2ClientCredentialsPtrOutput {
	return o
}

func (o Oauth2ClientCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Oauth2ClientCredentials] {
	return pulumix.Output[*Oauth2ClientCredentials]{
		OutputState: o.OutputState,
	}
}

func (o Oauth2ClientCredentialsPtrOutput) Elem() Oauth2ClientCredentialsOutput {
	return o.ApplyT(func(v *Oauth2ClientCredentials) Oauth2ClientCredentials {
		if v != nil {
			return *v
		}
		var ret Oauth2ClientCredentials
		return ret
	}).(Oauth2ClientCredentialsOutput)
}

// The client identifier.
func (o Oauth2ClientCredentialsPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Oauth2ClientCredentials) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Secret version reference containing the client secret.
func (o Oauth2ClientCredentialsPtrOutput) ClientSecret() SecretPtrOutput {
	return o.ApplyT(func(v *Oauth2ClientCredentials) *Secret {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(SecretPtrOutput)
}

// Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
type Oauth2ClientCredentialsResponse struct {
	// The client identifier.
	ClientId string `pulumi:"clientId"`
	// Secret version reference containing the client secret.
	ClientSecret SecretResponse `pulumi:"clientSecret"`
}

// Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.
type Oauth2ClientCredentialsResponseOutput struct{ *pulumi.OutputState }

func (Oauth2ClientCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2ClientCredentialsResponse)(nil)).Elem()
}

func (o Oauth2ClientCredentialsResponseOutput) ToOauth2ClientCredentialsResponseOutput() Oauth2ClientCredentialsResponseOutput {
	return o
}

func (o Oauth2ClientCredentialsResponseOutput) ToOauth2ClientCredentialsResponseOutputWithContext(ctx context.Context) Oauth2ClientCredentialsResponseOutput {
	return o
}

func (o Oauth2ClientCredentialsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[Oauth2ClientCredentialsResponse] {
	return pulumix.Output[Oauth2ClientCredentialsResponse]{
		OutputState: o.OutputState,
	}
}

// The client identifier.
func (o Oauth2ClientCredentialsResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v Oauth2ClientCredentialsResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Secret version reference containing the client secret.
func (o Oauth2ClientCredentialsResponseOutput) ClientSecret() SecretResponseOutput {
	return o.ApplyT(func(v Oauth2ClientCredentialsResponse) SecretResponse { return v.ClientSecret }).(SecretResponseOutput)
}

// Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
type Oauth2JwtBearer struct {
	// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
	ClientKey *Secret `pulumi:"clientKey"`
	// JwtClaims providers fields to generate the token.
	JwtClaims *JwtClaims `pulumi:"jwtClaims"`
}

// Oauth2JwtBearerInput is an input type that accepts Oauth2JwtBearerArgs and Oauth2JwtBearerOutput values.
// You can construct a concrete instance of `Oauth2JwtBearerInput` via:
//
//	Oauth2JwtBearerArgs{...}
type Oauth2JwtBearerInput interface {
	pulumi.Input

	ToOauth2JwtBearerOutput() Oauth2JwtBearerOutput
	ToOauth2JwtBearerOutputWithContext(context.Context) Oauth2JwtBearerOutput
}

// Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
type Oauth2JwtBearerArgs struct {
	// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
	ClientKey SecretPtrInput `pulumi:"clientKey"`
	// JwtClaims providers fields to generate the token.
	JwtClaims JwtClaimsPtrInput `pulumi:"jwtClaims"`
}

func (Oauth2JwtBearerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2JwtBearer)(nil)).Elem()
}

func (i Oauth2JwtBearerArgs) ToOauth2JwtBearerOutput() Oauth2JwtBearerOutput {
	return i.ToOauth2JwtBearerOutputWithContext(context.Background())
}

func (i Oauth2JwtBearerArgs) ToOauth2JwtBearerOutputWithContext(ctx context.Context) Oauth2JwtBearerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2JwtBearerOutput)
}

func (i Oauth2JwtBearerArgs) ToOutput(ctx context.Context) pulumix.Output[Oauth2JwtBearer] {
	return pulumix.Output[Oauth2JwtBearer]{
		OutputState: i.ToOauth2JwtBearerOutputWithContext(ctx).OutputState,
	}
}

func (i Oauth2JwtBearerArgs) ToOauth2JwtBearerPtrOutput() Oauth2JwtBearerPtrOutput {
	return i.ToOauth2JwtBearerPtrOutputWithContext(context.Background())
}

func (i Oauth2JwtBearerArgs) ToOauth2JwtBearerPtrOutputWithContext(ctx context.Context) Oauth2JwtBearerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2JwtBearerOutput).ToOauth2JwtBearerPtrOutputWithContext(ctx)
}

// Oauth2JwtBearerPtrInput is an input type that accepts Oauth2JwtBearerArgs, Oauth2JwtBearerPtr and Oauth2JwtBearerPtrOutput values.
// You can construct a concrete instance of `Oauth2JwtBearerPtrInput` via:
//
//	        Oauth2JwtBearerArgs{...}
//
//	or:
//
//	        nil
type Oauth2JwtBearerPtrInput interface {
	pulumi.Input

	ToOauth2JwtBearerPtrOutput() Oauth2JwtBearerPtrOutput
	ToOauth2JwtBearerPtrOutputWithContext(context.Context) Oauth2JwtBearerPtrOutput
}

type oauth2JwtBearerPtrType Oauth2JwtBearerArgs

func Oauth2JwtBearerPtr(v *Oauth2JwtBearerArgs) Oauth2JwtBearerPtrInput {
	return (*oauth2JwtBearerPtrType)(v)
}

func (*oauth2JwtBearerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Oauth2JwtBearer)(nil)).Elem()
}

func (i *oauth2JwtBearerPtrType) ToOauth2JwtBearerPtrOutput() Oauth2JwtBearerPtrOutput {
	return i.ToOauth2JwtBearerPtrOutputWithContext(context.Background())
}

func (i *oauth2JwtBearerPtrType) ToOauth2JwtBearerPtrOutputWithContext(ctx context.Context) Oauth2JwtBearerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Oauth2JwtBearerPtrOutput)
}

func (i *oauth2JwtBearerPtrType) ToOutput(ctx context.Context) pulumix.Output[*Oauth2JwtBearer] {
	return pulumix.Output[*Oauth2JwtBearer]{
		OutputState: i.ToOauth2JwtBearerPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
type Oauth2JwtBearerOutput struct{ *pulumi.OutputState }

func (Oauth2JwtBearerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2JwtBearer)(nil)).Elem()
}

func (o Oauth2JwtBearerOutput) ToOauth2JwtBearerOutput() Oauth2JwtBearerOutput {
	return o
}

func (o Oauth2JwtBearerOutput) ToOauth2JwtBearerOutputWithContext(ctx context.Context) Oauth2JwtBearerOutput {
	return o
}

func (o Oauth2JwtBearerOutput) ToOauth2JwtBearerPtrOutput() Oauth2JwtBearerPtrOutput {
	return o.ToOauth2JwtBearerPtrOutputWithContext(context.Background())
}

func (o Oauth2JwtBearerOutput) ToOauth2JwtBearerPtrOutputWithContext(ctx context.Context) Oauth2JwtBearerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Oauth2JwtBearer) *Oauth2JwtBearer {
		return &v
	}).(Oauth2JwtBearerPtrOutput)
}

func (o Oauth2JwtBearerOutput) ToOutput(ctx context.Context) pulumix.Output[Oauth2JwtBearer] {
	return pulumix.Output[Oauth2JwtBearer]{
		OutputState: o.OutputState,
	}
}

// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
func (o Oauth2JwtBearerOutput) ClientKey() SecretPtrOutput {
	return o.ApplyT(func(v Oauth2JwtBearer) *Secret { return v.ClientKey }).(SecretPtrOutput)
}

// JwtClaims providers fields to generate the token.
func (o Oauth2JwtBearerOutput) JwtClaims() JwtClaimsPtrOutput {
	return o.ApplyT(func(v Oauth2JwtBearer) *JwtClaims { return v.JwtClaims }).(JwtClaimsPtrOutput)
}

type Oauth2JwtBearerPtrOutput struct{ *pulumi.OutputState }

func (Oauth2JwtBearerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Oauth2JwtBearer)(nil)).Elem()
}

func (o Oauth2JwtBearerPtrOutput) ToOauth2JwtBearerPtrOutput() Oauth2JwtBearerPtrOutput {
	return o
}

func (o Oauth2JwtBearerPtrOutput) ToOauth2JwtBearerPtrOutputWithContext(ctx context.Context) Oauth2JwtBearerPtrOutput {
	return o
}

func (o Oauth2JwtBearerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Oauth2JwtBearer] {
	return pulumix.Output[*Oauth2JwtBearer]{
		OutputState: o.OutputState,
	}
}

func (o Oauth2JwtBearerPtrOutput) Elem() Oauth2JwtBearerOutput {
	return o.ApplyT(func(v *Oauth2JwtBearer) Oauth2JwtBearer {
		if v != nil {
			return *v
		}
		var ret Oauth2JwtBearer
		return ret
	}).(Oauth2JwtBearerOutput)
}

// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
func (o Oauth2JwtBearerPtrOutput) ClientKey() SecretPtrOutput {
	return o.ApplyT(func(v *Oauth2JwtBearer) *Secret {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(SecretPtrOutput)
}

// JwtClaims providers fields to generate the token.
func (o Oauth2JwtBearerPtrOutput) JwtClaims() JwtClaimsPtrOutput {
	return o.ApplyT(func(v *Oauth2JwtBearer) *JwtClaims {
		if v == nil {
			return nil
		}
		return v.JwtClaims
	}).(JwtClaimsPtrOutput)
}

// Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
type Oauth2JwtBearerResponse struct {
	// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
	ClientKey SecretResponse `pulumi:"clientKey"`
	// JwtClaims providers fields to generate the token.
	JwtClaims JwtClaimsResponse `pulumi:"jwtClaims"`
}

// Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.
type Oauth2JwtBearerResponseOutput struct{ *pulumi.OutputState }

func (Oauth2JwtBearerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Oauth2JwtBearerResponse)(nil)).Elem()
}

func (o Oauth2JwtBearerResponseOutput) ToOauth2JwtBearerResponseOutput() Oauth2JwtBearerResponseOutput {
	return o
}

func (o Oauth2JwtBearerResponseOutput) ToOauth2JwtBearerResponseOutputWithContext(ctx context.Context) Oauth2JwtBearerResponseOutput {
	return o
}

func (o Oauth2JwtBearerResponseOutput) ToOutput(ctx context.Context) pulumix.Output[Oauth2JwtBearerResponse] {
	return pulumix.Output[Oauth2JwtBearerResponse]{
		OutputState: o.OutputState,
	}
}

// Secret version reference containing a PKCS#8 PEM-encoded private key associated with the Client Certificate. This private key will be used to sign JWTs used for the jwt-bearer authorization grant. Specified in the form as: `projects/*/secrets/*/versions/*`.
func (o Oauth2JwtBearerResponseOutput) ClientKey() SecretResponseOutput {
	return o.ApplyT(func(v Oauth2JwtBearerResponse) SecretResponse { return v.ClientKey }).(SecretResponseOutput)
}

// JwtClaims providers fields to generate the token.
func (o Oauth2JwtBearerResponseOutput) JwtClaims() JwtClaimsResponseOutput {
	return o.ApplyT(func(v Oauth2JwtBearerResponse) JwtClaimsResponse { return v.JwtClaims }).(JwtClaimsResponseOutput)
}

// Resource limits defined for connection pods of a given connector type.
type ResourceLimitsResponse struct {
	// CPU limit.
	Cpu string `pulumi:"cpu"`
	// Memory limit.
	Memory string `pulumi:"memory"`
}

// Resource limits defined for connection pods of a given connector type.
type ResourceLimitsResponseOutput struct{ *pulumi.OutputState }

func (ResourceLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitsResponse)(nil)).Elem()
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponseOutput() ResourceLimitsResponseOutput {
	return o
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponseOutputWithContext(ctx context.Context) ResourceLimitsResponseOutput {
	return o
}

func (o ResourceLimitsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceLimitsResponse] {
	return pulumix.Output[ResourceLimitsResponse]{
		OutputState: o.OutputState,
	}
}

// CPU limit.
func (o ResourceLimitsResponseOutput) Cpu() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) string { return v.Cpu }).(pulumi.StringOutput)
}

// Memory limit.
func (o ResourceLimitsResponseOutput) Memory() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) string { return v.Memory }).(pulumi.StringOutput)
}

// Resource requests defined for connection pods of a given connector type.
type ResourceRequestsResponse struct {
	// CPU request.
	Cpu string `pulumi:"cpu"`
	// Memory request.
	Memory string `pulumi:"memory"`
}

// Resource requests defined for connection pods of a given connector type.
type ResourceRequestsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequestsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestsResponse)(nil)).Elem()
}

func (o ResourceRequestsResponseOutput) ToResourceRequestsResponseOutput() ResourceRequestsResponseOutput {
	return o
}

func (o ResourceRequestsResponseOutput) ToResourceRequestsResponseOutputWithContext(ctx context.Context) ResourceRequestsResponseOutput {
	return o
}

func (o ResourceRequestsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceRequestsResponse] {
	return pulumix.Output[ResourceRequestsResponse]{
		OutputState: o.OutputState,
	}
}

// CPU request.
func (o ResourceRequestsResponseOutput) Cpu() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRequestsResponse) string { return v.Cpu }).(pulumi.StringOutput)
}

// Memory request.
func (o ResourceRequestsResponseOutput) Memory() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRequestsResponse) string { return v.Memory }).(pulumi.StringOutput)
}

// Secret provides a reference to entries in Secret Manager.
type Secret struct {
	// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
	SecretVersion *string `pulumi:"secretVersion"`
}

// SecretInput is an input type that accepts SecretArgs and SecretOutput values.
// You can construct a concrete instance of `SecretInput` via:
//
//	SecretArgs{...}
type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(context.Context) SecretOutput
}

// Secret provides a reference to entries in Secret Manager.
type SecretArgs struct {
	// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
	SecretVersion pulumi.StringPtrInput `pulumi:"secretVersion"`
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (i SecretArgs) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

func (i SecretArgs) ToOutput(ctx context.Context) pulumix.Output[Secret] {
	return pulumix.Output[Secret]{
		OutputState: i.ToSecretOutputWithContext(ctx).OutputState,
	}
}

func (i SecretArgs) ToSecretPtrOutput() SecretPtrOutput {
	return i.ToSecretPtrOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput).ToSecretPtrOutputWithContext(ctx)
}

// SecretPtrInput is an input type that accepts SecretArgs, SecretPtr and SecretPtrOutput values.
// You can construct a concrete instance of `SecretPtrInput` via:
//
//	        SecretArgs{...}
//
//	or:
//
//	        nil
type SecretPtrInput interface {
	pulumi.Input

	ToSecretPtrOutput() SecretPtrOutput
	ToSecretPtrOutputWithContext(context.Context) SecretPtrOutput
}

type secretPtrType SecretArgs

func SecretPtr(v *SecretArgs) SecretPtrInput {
	return (*secretPtrType)(v)
}

func (*secretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *secretPtrType) ToSecretPtrOutput() SecretPtrOutput {
	return i.ToSecretPtrOutputWithContext(context.Background())
}

func (i *secretPtrType) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretPtrOutput)
}

func (i *secretPtrType) ToOutput(ctx context.Context) pulumix.Output[*Secret] {
	return pulumix.Output[*Secret]{
		OutputState: i.ToSecretPtrOutputWithContext(ctx).OutputState,
	}
}

// Secret provides a reference to entries in Secret Manager.
type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

func (o SecretOutput) ToSecretPtrOutput() SecretPtrOutput {
	return o.ToSecretPtrOutputWithContext(context.Background())
}

func (o SecretOutput) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Secret) *Secret {
		return &v
	}).(SecretPtrOutput)
}

func (o SecretOutput) ToOutput(ctx context.Context) pulumix.Output[Secret] {
	return pulumix.Output[Secret]{
		OutputState: o.OutputState,
	}
}

// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
func (o SecretOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secret) *string { return v.SecretVersion }).(pulumi.StringPtrOutput)
}

type SecretPtrOutput struct{ *pulumi.OutputState }

func (SecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretPtrOutput) ToSecretPtrOutput() SecretPtrOutput {
	return o
}

func (o SecretPtrOutput) ToSecretPtrOutputWithContext(ctx context.Context) SecretPtrOutput {
	return o
}

func (o SecretPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Secret] {
	return pulumix.Output[*Secret]{
		OutputState: o.OutputState,
	}
}

func (o SecretPtrOutput) Elem() SecretOutput {
	return o.ApplyT(func(v *Secret) Secret {
		if v != nil {
			return *v
		}
		var ret Secret
		return ret
	}).(SecretOutput)
}

// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
func (o SecretPtrOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) *string {
		if v == nil {
			return nil
		}
		return v.SecretVersion
	}).(pulumi.StringPtrOutput)
}

// Secret provides a reference to entries in Secret Manager.
type SecretResponse struct {
	// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
	SecretVersion string `pulumi:"secretVersion"`
}

// Secret provides a reference to entries in Secret Manager.
type SecretResponseOutput struct{ *pulumi.OutputState }

func (SecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretResponse)(nil)).Elem()
}

func (o SecretResponseOutput) ToSecretResponseOutput() SecretResponseOutput {
	return o
}

func (o SecretResponseOutput) ToSecretResponseOutputWithContext(ctx context.Context) SecretResponseOutput {
	return o
}

func (o SecretResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecretResponse] {
	return pulumix.Output[SecretResponse]{
		OutputState: o.OutputState,
	}
}

// The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.
func (o SecretResponseOutput) SecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SecretResponse) string { return v.SecretVersion }).(pulumi.StringOutput)
}

// Parameters to support Ssh public key Authentication.
type SshPublicKey struct {
	// Format of SSH Client cert.
	CertType *string `pulumi:"certType"`
	// SSH Client Cert. It should contain both public and private key.
	SshClientCert *Secret `pulumi:"sshClientCert"`
	// Password (passphrase) for ssh client certificate if it has one.
	SshClientCertPass *Secret `pulumi:"sshClientCertPass"`
	// The user account used to authenticate.
	Username *string `pulumi:"username"`
}

// SshPublicKeyInput is an input type that accepts SshPublicKeyArgs and SshPublicKeyOutput values.
// You can construct a concrete instance of `SshPublicKeyInput` via:
//
//	SshPublicKeyArgs{...}
type SshPublicKeyInput interface {
	pulumi.Input

	ToSshPublicKeyOutput() SshPublicKeyOutput
	ToSshPublicKeyOutputWithContext(context.Context) SshPublicKeyOutput
}

// Parameters to support Ssh public key Authentication.
type SshPublicKeyArgs struct {
	// Format of SSH Client cert.
	CertType pulumi.StringPtrInput `pulumi:"certType"`
	// SSH Client Cert. It should contain both public and private key.
	SshClientCert SecretPtrInput `pulumi:"sshClientCert"`
	// Password (passphrase) for ssh client certificate if it has one.
	SshClientCertPass SecretPtrInput `pulumi:"sshClientCertPass"`
	// The user account used to authenticate.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SshPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKey)(nil)).Elem()
}

func (i SshPublicKeyArgs) ToSshPublicKeyOutput() SshPublicKeyOutput {
	return i.ToSshPublicKeyOutputWithContext(context.Background())
}

func (i SshPublicKeyArgs) ToSshPublicKeyOutputWithContext(ctx context.Context) SshPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyOutput)
}

func (i SshPublicKeyArgs) ToOutput(ctx context.Context) pulumix.Output[SshPublicKey] {
	return pulumix.Output[SshPublicKey]{
		OutputState: i.ToSshPublicKeyOutputWithContext(ctx).OutputState,
	}
}

func (i SshPublicKeyArgs) ToSshPublicKeyPtrOutput() SshPublicKeyPtrOutput {
	return i.ToSshPublicKeyPtrOutputWithContext(context.Background())
}

func (i SshPublicKeyArgs) ToSshPublicKeyPtrOutputWithContext(ctx context.Context) SshPublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyOutput).ToSshPublicKeyPtrOutputWithContext(ctx)
}

// SshPublicKeyPtrInput is an input type that accepts SshPublicKeyArgs, SshPublicKeyPtr and SshPublicKeyPtrOutput values.
// You can construct a concrete instance of `SshPublicKeyPtrInput` via:
//
//	        SshPublicKeyArgs{...}
//
//	or:
//
//	        nil
type SshPublicKeyPtrInput interface {
	pulumi.Input

	ToSshPublicKeyPtrOutput() SshPublicKeyPtrOutput
	ToSshPublicKeyPtrOutputWithContext(context.Context) SshPublicKeyPtrOutput
}

type sshPublicKeyPtrType SshPublicKeyArgs

func SshPublicKeyPtr(v *SshPublicKeyArgs) SshPublicKeyPtrInput {
	return (*sshPublicKeyPtrType)(v)
}

func (*sshPublicKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshPublicKey)(nil)).Elem()
}

func (i *sshPublicKeyPtrType) ToSshPublicKeyPtrOutput() SshPublicKeyPtrOutput {
	return i.ToSshPublicKeyPtrOutputWithContext(context.Background())
}

func (i *sshPublicKeyPtrType) ToSshPublicKeyPtrOutputWithContext(ctx context.Context) SshPublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyPtrOutput)
}

func (i *sshPublicKeyPtrType) ToOutput(ctx context.Context) pulumix.Output[*SshPublicKey] {
	return pulumix.Output[*SshPublicKey]{
		OutputState: i.ToSshPublicKeyPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to support Ssh public key Authentication.
type SshPublicKeyOutput struct{ *pulumi.OutputState }

func (SshPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKey)(nil)).Elem()
}

func (o SshPublicKeyOutput) ToSshPublicKeyOutput() SshPublicKeyOutput {
	return o
}

func (o SshPublicKeyOutput) ToSshPublicKeyOutputWithContext(ctx context.Context) SshPublicKeyOutput {
	return o
}

func (o SshPublicKeyOutput) ToSshPublicKeyPtrOutput() SshPublicKeyPtrOutput {
	return o.ToSshPublicKeyPtrOutputWithContext(context.Background())
}

func (o SshPublicKeyOutput) ToSshPublicKeyPtrOutputWithContext(ctx context.Context) SshPublicKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshPublicKey) *SshPublicKey {
		return &v
	}).(SshPublicKeyPtrOutput)
}

func (o SshPublicKeyOutput) ToOutput(ctx context.Context) pulumix.Output[SshPublicKey] {
	return pulumix.Output[SshPublicKey]{
		OutputState: o.OutputState,
	}
}

// Format of SSH Client cert.
func (o SshPublicKeyOutput) CertType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKey) *string { return v.CertType }).(pulumi.StringPtrOutput)
}

// SSH Client Cert. It should contain both public and private key.
func (o SshPublicKeyOutput) SshClientCert() SecretPtrOutput {
	return o.ApplyT(func(v SshPublicKey) *Secret { return v.SshClientCert }).(SecretPtrOutput)
}

// Password (passphrase) for ssh client certificate if it has one.
func (o SshPublicKeyOutput) SshClientCertPass() SecretPtrOutput {
	return o.ApplyT(func(v SshPublicKey) *Secret { return v.SshClientCertPass }).(SecretPtrOutput)
}

// The user account used to authenticate.
func (o SshPublicKeyOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKey) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SshPublicKeyPtrOutput struct{ *pulumi.OutputState }

func (SshPublicKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshPublicKey)(nil)).Elem()
}

func (o SshPublicKeyPtrOutput) ToSshPublicKeyPtrOutput() SshPublicKeyPtrOutput {
	return o
}

func (o SshPublicKeyPtrOutput) ToSshPublicKeyPtrOutputWithContext(ctx context.Context) SshPublicKeyPtrOutput {
	return o
}

func (o SshPublicKeyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SshPublicKey] {
	return pulumix.Output[*SshPublicKey]{
		OutputState: o.OutputState,
	}
}

func (o SshPublicKeyPtrOutput) Elem() SshPublicKeyOutput {
	return o.ApplyT(func(v *SshPublicKey) SshPublicKey {
		if v != nil {
			return *v
		}
		var ret SshPublicKey
		return ret
	}).(SshPublicKeyOutput)
}

// Format of SSH Client cert.
func (o SshPublicKeyPtrOutput) CertType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshPublicKey) *string {
		if v == nil {
			return nil
		}
		return v.CertType
	}).(pulumi.StringPtrOutput)
}

// SSH Client Cert. It should contain both public and private key.
func (o SshPublicKeyPtrOutput) SshClientCert() SecretPtrOutput {
	return o.ApplyT(func(v *SshPublicKey) *Secret {
		if v == nil {
			return nil
		}
		return v.SshClientCert
	}).(SecretPtrOutput)
}

// Password (passphrase) for ssh client certificate if it has one.
func (o SshPublicKeyPtrOutput) SshClientCertPass() SecretPtrOutput {
	return o.ApplyT(func(v *SshPublicKey) *Secret {
		if v == nil {
			return nil
		}
		return v.SshClientCertPass
	}).(SecretPtrOutput)
}

// The user account used to authenticate.
func (o SshPublicKeyPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshPublicKey) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Parameters to support Ssh public key Authentication.
type SshPublicKeyResponse struct {
	// Format of SSH Client cert.
	CertType string `pulumi:"certType"`
	// SSH Client Cert. It should contain both public and private key.
	SshClientCert SecretResponse `pulumi:"sshClientCert"`
	// Password (passphrase) for ssh client certificate if it has one.
	SshClientCertPass SecretResponse `pulumi:"sshClientCertPass"`
	// The user account used to authenticate.
	Username string `pulumi:"username"`
}

// Parameters to support Ssh public key Authentication.
type SshPublicKeyResponseOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutput() SshPublicKeyResponseOutput {
	return o
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutputWithContext(ctx context.Context) SshPublicKeyResponseOutput {
	return o
}

func (o SshPublicKeyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SshPublicKeyResponse] {
	return pulumix.Output[SshPublicKeyResponse]{
		OutputState: o.OutputState,
	}
}

// Format of SSH Client cert.
func (o SshPublicKeyResponseOutput) CertType() pulumi.StringOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) string { return v.CertType }).(pulumi.StringOutput)
}

// SSH Client Cert. It should contain both public and private key.
func (o SshPublicKeyResponseOutput) SshClientCert() SecretResponseOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) SecretResponse { return v.SshClientCert }).(SecretResponseOutput)
}

// Password (passphrase) for ssh client certificate if it has one.
func (o SshPublicKeyResponseOutput) SshClientCertPass() SecretResponseOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) SecretResponse { return v.SshClientCertPass }).(SecretResponseOutput)
}

// The user account used to authenticate.
func (o SshPublicKeyResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) string { return v.Username }).(pulumi.StringOutput)
}

// SSL Configuration of a connection
type SslConfig struct {
	// Additional SSL related field values
	AdditionalVariables []ConfigVariable `pulumi:"additionalVariables"`
	// Type of Client Cert (PEM/JKS/.. etc.)
	ClientCertType *SslConfigClientCertType `pulumi:"clientCertType"`
	// Client Certificate
	ClientCertificate *Secret `pulumi:"clientCertificate"`
	// Client Private Key
	ClientPrivateKey *Secret `pulumi:"clientPrivateKey"`
	// Secret containing the passphrase protecting the Client Private Key
	ClientPrivateKeyPass *Secret `pulumi:"clientPrivateKeyPass"`
	// Private Server Certificate. Needs to be specified if trust model is `PRIVATE`.
	PrivateServerCertificate *Secret `pulumi:"privateServerCertificate"`
	// Type of Server Cert (PEM/JKS/.. etc.)
	ServerCertType *SslConfigServerCertType `pulumi:"serverCertType"`
	// Trust Model of the SSL connection
	TrustModel *SslConfigTrustModel `pulumi:"trustModel"`
	// Controls the ssl type for the given connector version.
	Type *SslConfigType `pulumi:"type"`
	// Bool for enabling SSL
	UseSsl *bool `pulumi:"useSsl"`
}

// SslConfigInput is an input type that accepts SslConfigArgs and SslConfigOutput values.
// You can construct a concrete instance of `SslConfigInput` via:
//
//	SslConfigArgs{...}
type SslConfigInput interface {
	pulumi.Input

	ToSslConfigOutput() SslConfigOutput
	ToSslConfigOutputWithContext(context.Context) SslConfigOutput
}

// SSL Configuration of a connection
type SslConfigArgs struct {
	// Additional SSL related field values
	AdditionalVariables ConfigVariableArrayInput `pulumi:"additionalVariables"`
	// Type of Client Cert (PEM/JKS/.. etc.)
	ClientCertType SslConfigClientCertTypePtrInput `pulumi:"clientCertType"`
	// Client Certificate
	ClientCertificate SecretPtrInput `pulumi:"clientCertificate"`
	// Client Private Key
	ClientPrivateKey SecretPtrInput `pulumi:"clientPrivateKey"`
	// Secret containing the passphrase protecting the Client Private Key
	ClientPrivateKeyPass SecretPtrInput `pulumi:"clientPrivateKeyPass"`
	// Private Server Certificate. Needs to be specified if trust model is `PRIVATE`.
	PrivateServerCertificate SecretPtrInput `pulumi:"privateServerCertificate"`
	// Type of Server Cert (PEM/JKS/.. etc.)
	ServerCertType SslConfigServerCertTypePtrInput `pulumi:"serverCertType"`
	// Trust Model of the SSL connection
	TrustModel SslConfigTrustModelPtrInput `pulumi:"trustModel"`
	// Controls the ssl type for the given connector version.
	Type SslConfigTypePtrInput `pulumi:"type"`
	// Bool for enabling SSL
	UseSsl pulumi.BoolPtrInput `pulumi:"useSsl"`
}

func (SslConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfig)(nil)).Elem()
}

func (i SslConfigArgs) ToSslConfigOutput() SslConfigOutput {
	return i.ToSslConfigOutputWithContext(context.Background())
}

func (i SslConfigArgs) ToSslConfigOutputWithContext(ctx context.Context) SslConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigOutput)
}

func (i SslConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SslConfig] {
	return pulumix.Output[SslConfig]{
		OutputState: i.ToSslConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SslConfigArgs) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return i.ToSslConfigPtrOutputWithContext(context.Background())
}

func (i SslConfigArgs) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigOutput).ToSslConfigPtrOutputWithContext(ctx)
}

// SslConfigPtrInput is an input type that accepts SslConfigArgs, SslConfigPtr and SslConfigPtrOutput values.
// You can construct a concrete instance of `SslConfigPtrInput` via:
//
//	        SslConfigArgs{...}
//
//	or:
//
//	        nil
type SslConfigPtrInput interface {
	pulumi.Input

	ToSslConfigPtrOutput() SslConfigPtrOutput
	ToSslConfigPtrOutputWithContext(context.Context) SslConfigPtrOutput
}

type sslConfigPtrType SslConfigArgs

func SslConfigPtr(v *SslConfigArgs) SslConfigPtrInput {
	return (*sslConfigPtrType)(v)
}

func (*sslConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfig)(nil)).Elem()
}

func (i *sslConfigPtrType) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return i.ToSslConfigPtrOutputWithContext(context.Background())
}

func (i *sslConfigPtrType) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigPtrOutput)
}

func (i *sslConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SslConfig] {
	return pulumix.Output[*SslConfig]{
		OutputState: i.ToSslConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// SSL Configuration of a connection
type SslConfigOutput struct{ *pulumi.OutputState }

func (SslConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfig)(nil)).Elem()
}

func (o SslConfigOutput) ToSslConfigOutput() SslConfigOutput {
	return o
}

func (o SslConfigOutput) ToSslConfigOutputWithContext(ctx context.Context) SslConfigOutput {
	return o
}

func (o SslConfigOutput) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return o.ToSslConfigPtrOutputWithContext(context.Background())
}

func (o SslConfigOutput) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslConfig) *SslConfig {
		return &v
	}).(SslConfigPtrOutput)
}

func (o SslConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SslConfig] {
	return pulumix.Output[SslConfig]{
		OutputState: o.OutputState,
	}
}

// Additional SSL related field values
func (o SslConfigOutput) AdditionalVariables() ConfigVariableArrayOutput {
	return o.ApplyT(func(v SslConfig) []ConfigVariable { return v.AdditionalVariables }).(ConfigVariableArrayOutput)
}

// Type of Client Cert (PEM/JKS/.. etc.)
func (o SslConfigOutput) ClientCertType() SslConfigClientCertTypePtrOutput {
	return o.ApplyT(func(v SslConfig) *SslConfigClientCertType { return v.ClientCertType }).(SslConfigClientCertTypePtrOutput)
}

// Client Certificate
func (o SslConfigOutput) ClientCertificate() SecretPtrOutput {
	return o.ApplyT(func(v SslConfig) *Secret { return v.ClientCertificate }).(SecretPtrOutput)
}

// Client Private Key
func (o SslConfigOutput) ClientPrivateKey() SecretPtrOutput {
	return o.ApplyT(func(v SslConfig) *Secret { return v.ClientPrivateKey }).(SecretPtrOutput)
}

// Secret containing the passphrase protecting the Client Private Key
func (o SslConfigOutput) ClientPrivateKeyPass() SecretPtrOutput {
	return o.ApplyT(func(v SslConfig) *Secret { return v.ClientPrivateKeyPass }).(SecretPtrOutput)
}

// Private Server Certificate. Needs to be specified if trust model is `PRIVATE`.
func (o SslConfigOutput) PrivateServerCertificate() SecretPtrOutput {
	return o.ApplyT(func(v SslConfig) *Secret { return v.PrivateServerCertificate }).(SecretPtrOutput)
}

// Type of Server Cert (PEM/JKS/.. etc.)
func (o SslConfigOutput) ServerCertType() SslConfigServerCertTypePtrOutput {
	return o.ApplyT(func(v SslConfig) *SslConfigServerCertType { return v.ServerCertType }).(SslConfigServerCertTypePtrOutput)
}

// Trust Model of the SSL connection
func (o SslConfigOutput) TrustModel() SslConfigTrustModelPtrOutput {
	return o.ApplyT(func(v SslConfig) *SslConfigTrustModel { return v.TrustModel }).(SslConfigTrustModelPtrOutput)
}

// Controls the ssl type for the given connector version.
func (o SslConfigOutput) Type() SslConfigTypePtrOutput {
	return o.ApplyT(func(v SslConfig) *SslConfigType { return v.Type }).(SslConfigTypePtrOutput)
}

// Bool for enabling SSL
func (o SslConfigOutput) UseSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SslConfig) *bool { return v.UseSsl }).(pulumi.BoolPtrOutput)
}

type SslConfigPtrOutput struct{ *pulumi.OutputState }

func (SslConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfig)(nil)).Elem()
}

func (o SslConfigPtrOutput) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return o
}

func (o SslConfigPtrOutput) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return o
}

func (o SslConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SslConfig] {
	return pulumix.Output[*SslConfig]{
		OutputState: o.OutputState,
	}
}

func (o SslConfigPtrOutput) Elem() SslConfigOutput {
	return o.ApplyT(func(v *SslConfig) SslConfig {
		if v != nil {
			return *v
		}
		var ret SslConfig
		return ret
	}).(SslConfigOutput)
}

// Additional SSL related field values
func (o SslConfigPtrOutput) AdditionalVariables() ConfigVariableArrayOutput {
	return o.ApplyT(func(v *SslConfig) []ConfigVariable {
		if v == nil {
			return nil
		}
		return v.AdditionalVariables
	}).(ConfigVariableArrayOutput)
}

// Type of Client Cert (PEM/JKS/.. etc.)
func (o SslConfigPtrOutput) ClientCertType() SslConfigClientCertTypePtrOutput {
	return o.ApplyT(func(v *SslConfig) *SslConfigClientCertType {
		if v == nil {
			return nil
		}
		return v.ClientCertType
	}).(SslConfigClientCertTypePtrOutput)
}

// Client Certificate
func (o SslConfigPtrOutput) ClientCertificate() SecretPtrOutput {
	return o.ApplyT(func(v *SslConfig) *Secret {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(SecretPtrOutput)
}

// Client Private Key
func (o SslConfigPtrOutput) ClientPrivateKey() SecretPtrOutput {
	return o.ApplyT(func(v *SslConfig) *Secret {
		if v == nil {
			return nil
		}
		return v.ClientPrivateKey
	}).(SecretPtrOutput)
}

// Secret containing the passphrase protecting the Client Private Key
func (o SslConfigPtrOutput) ClientPrivateKeyPass() SecretPtrOutput {
	return o.ApplyT(func(v *SslConfig) *Secret {
		if v == nil {
			return nil
		}
		return v.ClientPrivateKeyPass
	}).(SecretPtrOutput)
}

// Private Server Certificate. Needs to be specified if trust model is `PRIVATE`.
func (o SslConfigPtrOutput) PrivateServerCertificate() SecretPtrOutput {
	return o.ApplyT(func(v *SslConfig) *Secret {
		if v == nil {
			return nil
		}
		return v.PrivateServerCertificate
	}).(SecretPtrOutput)
}

// Type of Server Cert (PEM/JKS/.. etc.)
func (o SslConfigPtrOutput) ServerCertType() SslConfigServerCertTypePtrOutput {
	return o.ApplyT(func(v *SslConfig) *SslConfigServerCertType {
		if v == nil {
			return nil
		}
		return v.ServerCertType
	}).(SslConfigServerCertTypePtrOutput)
}

// Trust Model of the SSL connection
func (o SslConfigPtrOutput) TrustModel() SslConfigTrustModelPtrOutput {
	return o.ApplyT(func(v *SslConfig) *SslConfigTrustModel {
		if v == nil {
			return nil
		}
		return v.TrustModel
	}).(SslConfigTrustModelPtrOutput)
}

// Controls the ssl type for the given connector version.
func (o SslConfigPtrOutput) Type() SslConfigTypePtrOutput {
	return o.ApplyT(func(v *SslConfig) *SslConfigType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(SslConfigTypePtrOutput)
}

// Bool for enabling SSL
func (o SslConfigPtrOutput) UseSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SslConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseSsl
	}).(pulumi.BoolPtrOutput)
}

// SSL Configuration of a connection
type SslConfigResponse struct {
	// Additional SSL related field values
	AdditionalVariables []ConfigVariableResponse `pulumi:"additionalVariables"`
	// Type of Client Cert (PEM/JKS/.. etc.)
	ClientCertType string `pulumi:"clientCertType"`
	// Client Certificate
	ClientCertificate SecretResponse `pulumi:"clientCertificate"`
	// Client Private Key
	ClientPrivateKey SecretResponse `pulumi:"clientPrivateKey"`
	// Secret containing the passphrase protecting the Client Private Key
	ClientPrivateKeyPass SecretResponse `pulumi:"clientPrivateKeyPass"`
	// Private Server Certificate. Needs to be specified if trust model is `PRIVATE`.
	PrivateServerCertificate SecretResponse `pulumi:"privateServerCertificate"`
	// Type of Server Cert (PEM/JKS/.. etc.)
	ServerCertType string `pulumi:"serverCertType"`
	// Trust Model of the SSL connection
	TrustModel string `pulumi:"trustModel"`
	// Controls the ssl type for the given connector version.
	Type string `pulumi:"type"`
	// Bool for enabling SSL
	UseSsl bool `pulumi:"useSsl"`
}

// SSL Configuration of a connection
type SslConfigResponseOutput struct{ *pulumi.OutputState }

func (SslConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfigResponse)(nil)).Elem()
}

func (o SslConfigResponseOutput) ToSslConfigResponseOutput() SslConfigResponseOutput {
	return o
}

func (o SslConfigResponseOutput) ToSslConfigResponseOutputWithContext(ctx context.Context) SslConfigResponseOutput {
	return o
}

func (o SslConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SslConfigResponse] {
	return pulumix.Output[SslConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Additional SSL related field values
func (o SslConfigResponseOutput) AdditionalVariables() ConfigVariableResponseArrayOutput {
	return o.ApplyT(func(v SslConfigResponse) []ConfigVariableResponse { return v.AdditionalVariables }).(ConfigVariableResponseArrayOutput)
}

// Type of Client Cert (PEM/JKS/.. etc.)
func (o SslConfigResponseOutput) ClientCertType() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfigResponse) string { return v.ClientCertType }).(pulumi.StringOutput)
}

// Client Certificate
func (o SslConfigResponseOutput) ClientCertificate() SecretResponseOutput {
	return o.ApplyT(func(v SslConfigResponse) SecretResponse { return v.ClientCertificate }).(SecretResponseOutput)
}

// Client Private Key
func (o SslConfigResponseOutput) ClientPrivateKey() SecretResponseOutput {
	return o.ApplyT(func(v SslConfigResponse) SecretResponse { return v.ClientPrivateKey }).(SecretResponseOutput)
}

// Secret containing the passphrase protecting the Client Private Key
func (o SslConfigResponseOutput) ClientPrivateKeyPass() SecretResponseOutput {
	return o.ApplyT(func(v SslConfigResponse) SecretResponse { return v.ClientPrivateKeyPass }).(SecretResponseOutput)
}

// Private Server Certificate. Needs to be specified if trust model is `PRIVATE`.
func (o SslConfigResponseOutput) PrivateServerCertificate() SecretResponseOutput {
	return o.ApplyT(func(v SslConfigResponse) SecretResponse { return v.PrivateServerCertificate }).(SecretResponseOutput)
}

// Type of Server Cert (PEM/JKS/.. etc.)
func (o SslConfigResponseOutput) ServerCertType() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfigResponse) string { return v.ServerCertType }).(pulumi.StringOutput)
}

// Trust Model of the SSL connection
func (o SslConfigResponseOutput) TrustModel() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfigResponse) string { return v.TrustModel }).(pulumi.StringOutput)
}

// Controls the ssl type for the given connector version.
func (o SslConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Bool for enabling SSL
func (o SslConfigResponseOutput) UseSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v SslConfigResponse) bool { return v.UseSsl }).(pulumi.BoolOutput)
}

// Parameters to support Username and Password Authentication.
type UserPassword struct {
	// Secret version reference containing the password.
	Password *Secret `pulumi:"password"`
	// Username.
	Username *string `pulumi:"username"`
}

// UserPasswordInput is an input type that accepts UserPasswordArgs and UserPasswordOutput values.
// You can construct a concrete instance of `UserPasswordInput` via:
//
//	UserPasswordArgs{...}
type UserPasswordInput interface {
	pulumi.Input

	ToUserPasswordOutput() UserPasswordOutput
	ToUserPasswordOutputWithContext(context.Context) UserPasswordOutput
}

// Parameters to support Username and Password Authentication.
type UserPasswordArgs struct {
	// Secret version reference containing the password.
	Password SecretPtrInput `pulumi:"password"`
	// Username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (UserPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPassword)(nil)).Elem()
}

func (i UserPasswordArgs) ToUserPasswordOutput() UserPasswordOutput {
	return i.ToUserPasswordOutputWithContext(context.Background())
}

func (i UserPasswordArgs) ToUserPasswordOutputWithContext(ctx context.Context) UserPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordOutput)
}

func (i UserPasswordArgs) ToOutput(ctx context.Context) pulumix.Output[UserPassword] {
	return pulumix.Output[UserPassword]{
		OutputState: i.ToUserPasswordOutputWithContext(ctx).OutputState,
	}
}

func (i UserPasswordArgs) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return i.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (i UserPasswordArgs) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordOutput).ToUserPasswordPtrOutputWithContext(ctx)
}

// UserPasswordPtrInput is an input type that accepts UserPasswordArgs, UserPasswordPtr and UserPasswordPtrOutput values.
// You can construct a concrete instance of `UserPasswordPtrInput` via:
//
//	        UserPasswordArgs{...}
//
//	or:
//
//	        nil
type UserPasswordPtrInput interface {
	pulumi.Input

	ToUserPasswordPtrOutput() UserPasswordPtrOutput
	ToUserPasswordPtrOutputWithContext(context.Context) UserPasswordPtrOutput
}

type userPasswordPtrType UserPasswordArgs

func UserPasswordPtr(v *UserPasswordArgs) UserPasswordPtrInput {
	return (*userPasswordPtrType)(v)
}

func (*userPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPassword)(nil)).Elem()
}

func (i *userPasswordPtrType) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return i.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (i *userPasswordPtrType) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordPtrOutput)
}

func (i *userPasswordPtrType) ToOutput(ctx context.Context) pulumix.Output[*UserPassword] {
	return pulumix.Output[*UserPassword]{
		OutputState: i.ToUserPasswordPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to support Username and Password Authentication.
type UserPasswordOutput struct{ *pulumi.OutputState }

func (UserPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPassword)(nil)).Elem()
}

func (o UserPasswordOutput) ToUserPasswordOutput() UserPasswordOutput {
	return o
}

func (o UserPasswordOutput) ToUserPasswordOutputWithContext(ctx context.Context) UserPasswordOutput {
	return o
}

func (o UserPasswordOutput) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return o.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (o UserPasswordOutput) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserPassword) *UserPassword {
		return &v
	}).(UserPasswordPtrOutput)
}

func (o UserPasswordOutput) ToOutput(ctx context.Context) pulumix.Output[UserPassword] {
	return pulumix.Output[UserPassword]{
		OutputState: o.OutputState,
	}
}

// Secret version reference containing the password.
func (o UserPasswordOutput) Password() SecretPtrOutput {
	return o.ApplyT(func(v UserPassword) *Secret { return v.Password }).(SecretPtrOutput)
}

// Username.
func (o UserPasswordOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPassword) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type UserPasswordPtrOutput struct{ *pulumi.OutputState }

func (UserPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPassword)(nil)).Elem()
}

func (o UserPasswordPtrOutput) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return o
}

func (o UserPasswordPtrOutput) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return o
}

func (o UserPasswordPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UserPassword] {
	return pulumix.Output[*UserPassword]{
		OutputState: o.OutputState,
	}
}

func (o UserPasswordPtrOutput) Elem() UserPasswordOutput {
	return o.ApplyT(func(v *UserPassword) UserPassword {
		if v != nil {
			return *v
		}
		var ret UserPassword
		return ret
	}).(UserPasswordOutput)
}

// Secret version reference containing the password.
func (o UserPasswordPtrOutput) Password() SecretPtrOutput {
	return o.ApplyT(func(v *UserPassword) *Secret {
		if v == nil {
			return nil
		}
		return v.Password
	}).(SecretPtrOutput)
}

// Username.
func (o UserPasswordPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPassword) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Parameters to support Username and Password Authentication.
type UserPasswordResponse struct {
	// Secret version reference containing the password.
	Password SecretResponse `pulumi:"password"`
	// Username.
	Username string `pulumi:"username"`
}

// Parameters to support Username and Password Authentication.
type UserPasswordResponseOutput struct{ *pulumi.OutputState }

func (UserPasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPasswordResponse)(nil)).Elem()
}

func (o UserPasswordResponseOutput) ToUserPasswordResponseOutput() UserPasswordResponseOutput {
	return o
}

func (o UserPasswordResponseOutput) ToUserPasswordResponseOutputWithContext(ctx context.Context) UserPasswordResponseOutput {
	return o
}

func (o UserPasswordResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserPasswordResponse] {
	return pulumix.Output[UserPasswordResponse]{
		OutputState: o.OutputState,
	}
}

// Secret version reference containing the password.
func (o UserPasswordResponseOutput) Password() SecretResponseOutput {
	return o.ApplyT(func(v UserPasswordResponse) SecretResponse { return v.Password }).(SecretResponseOutput)
}

// Username.
func (o UserPasswordResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v UserPasswordResponse) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthConfigInput)(nil)).Elem(), AuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthConfigPtrInput)(nil)).Elem(), AuthConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigVariableInput)(nil)).Elem(), ConfigVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigVariablePtrInput)(nil)).Elem(), ConfigVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigVariableArrayInput)(nil)).Elem(), ConfigVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorsLogConfigInput)(nil)).Elem(), ConnectorsLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorsLogConfigPtrInput)(nil)).Elem(), ConnectorsLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationInput)(nil)).Elem(), DestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationArrayInput)(nil)).Elem(), DestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConfigInput)(nil)).Elem(), DestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConfigPtrInput)(nil)).Elem(), DestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConfigArrayInput)(nil)).Elem(), DestinationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionKeyInput)(nil)).Elem(), EncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionKeyPtrInput)(nil)).Elem(), EncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndPointInput)(nil)).Elem(), EndPointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndPointPtrInput)(nil)).Elem(), EndPointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionDestinationInput)(nil)).Elem(), EventSubscriptionDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionDestinationPtrInput)(nil)).Elem(), EventSubscriptionDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventingConfigInput)(nil)).Elem(), EventingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventingConfigPtrInput)(nil)).Elem(), EventingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeaderInput)(nil)).Elem(), HeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeaderArrayInput)(nil)).Elem(), HeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JMSInput)(nil)).Elem(), JMSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JMSPtrInput)(nil)).Elem(), JMSArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JwtClaimsInput)(nil)).Elem(), JwtClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JwtClaimsPtrInput)(nil)).Elem(), JwtClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LockConfigInput)(nil)).Elem(), LockConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LockConfigPtrInput)(nil)).Elem(), LockConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigInput)(nil)).Elem(), NodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeConfigPtrInput)(nil)).Elem(), NodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Oauth2AuthCodeFlowInput)(nil)).Elem(), Oauth2AuthCodeFlowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Oauth2AuthCodeFlowPtrInput)(nil)).Elem(), Oauth2AuthCodeFlowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Oauth2ClientCredentialsInput)(nil)).Elem(), Oauth2ClientCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Oauth2ClientCredentialsPtrInput)(nil)).Elem(), Oauth2ClientCredentialsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Oauth2JwtBearerInput)(nil)).Elem(), Oauth2JwtBearerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Oauth2JwtBearerPtrInput)(nil)).Elem(), Oauth2JwtBearerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), SecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretPtrInput)(nil)).Elem(), SecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshPublicKeyInput)(nil)).Elem(), SshPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshPublicKeyPtrInput)(nil)).Elem(), SshPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslConfigInput)(nil)).Elem(), SslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslConfigPtrInput)(nil)).Elem(), SslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordInput)(nil)).Elem(), UserPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordPtrInput)(nil)).Elem(), UserPasswordArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuthConfigOutput{})
	pulumi.RegisterOutputType(AuthConfigPtrOutput{})
	pulumi.RegisterOutputType(AuthConfigResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigVariableOutput{})
	pulumi.RegisterOutputType(ConfigVariablePtrOutput{})
	pulumi.RegisterOutputType(ConfigVariableArrayOutput{})
	pulumi.RegisterOutputType(ConfigVariableResponseOutput{})
	pulumi.RegisterOutputType(ConfigVariableResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectionStatusResponseOutput{})
	pulumi.RegisterOutputType(ConnectorVersionInfraConfigResponseOutput{})
	pulumi.RegisterOutputType(ConnectorsLogConfigOutput{})
	pulumi.RegisterOutputType(ConnectorsLogConfigPtrOutput{})
	pulumi.RegisterOutputType(ConnectorsLogConfigResponseOutput{})
	pulumi.RegisterOutputType(DestinationOutput{})
	pulumi.RegisterOutputType(DestinationArrayOutput{})
	pulumi.RegisterOutputType(DestinationConfigOutput{})
	pulumi.RegisterOutputType(DestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(DestinationConfigArrayOutput{})
	pulumi.RegisterOutputType(DestinationConfigResponseOutput{})
	pulumi.RegisterOutputType(DestinationConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(DestinationResponseOutput{})
	pulumi.RegisterOutputType(DestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(EncryptionKeyOutput{})
	pulumi.RegisterOutputType(EncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(EncryptionKeyResponseOutput{})
	pulumi.RegisterOutputType(EndPointOutput{})
	pulumi.RegisterOutputType(EndPointPtrOutput{})
	pulumi.RegisterOutputType(EndPointResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStatusResponseOutput{})
	pulumi.RegisterOutputType(EventingConfigOutput{})
	pulumi.RegisterOutputType(EventingConfigPtrOutput{})
	pulumi.RegisterOutputType(EventingConfigResponseOutput{})
	pulumi.RegisterOutputType(EventingRuntimeDataResponseOutput{})
	pulumi.RegisterOutputType(EventingStatusResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(HPAConfigResponseOutput{})
	pulumi.RegisterOutputType(HeaderOutput{})
	pulumi.RegisterOutputType(HeaderArrayOutput{})
	pulumi.RegisterOutputType(HeaderResponseOutput{})
	pulumi.RegisterOutputType(HeaderResponseArrayOutput{})
	pulumi.RegisterOutputType(JMSOutput{})
	pulumi.RegisterOutputType(JMSPtrOutput{})
	pulumi.RegisterOutputType(JMSResponseOutput{})
	pulumi.RegisterOutputType(JwtClaimsOutput{})
	pulumi.RegisterOutputType(JwtClaimsPtrOutput{})
	pulumi.RegisterOutputType(JwtClaimsResponseOutput{})
	pulumi.RegisterOutputType(LockConfigOutput{})
	pulumi.RegisterOutputType(LockConfigPtrOutput{})
	pulumi.RegisterOutputType(LockConfigResponseOutput{})
	pulumi.RegisterOutputType(NodeConfigOutput{})
	pulumi.RegisterOutputType(NodeConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeConfigResponseOutput{})
	pulumi.RegisterOutputType(Oauth2AuthCodeFlowOutput{})
	pulumi.RegisterOutputType(Oauth2AuthCodeFlowPtrOutput{})
	pulumi.RegisterOutputType(Oauth2AuthCodeFlowResponseOutput{})
	pulumi.RegisterOutputType(Oauth2ClientCredentialsOutput{})
	pulumi.RegisterOutputType(Oauth2ClientCredentialsPtrOutput{})
	pulumi.RegisterOutputType(Oauth2ClientCredentialsResponseOutput{})
	pulumi.RegisterOutputType(Oauth2JwtBearerOutput{})
	pulumi.RegisterOutputType(Oauth2JwtBearerPtrOutput{})
	pulumi.RegisterOutputType(Oauth2JwtBearerResponseOutput{})
	pulumi.RegisterOutputType(ResourceLimitsResponseOutput{})
	pulumi.RegisterOutputType(ResourceRequestsResponseOutput{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretPtrOutput{})
	pulumi.RegisterOutputType(SecretResponseOutput{})
	pulumi.RegisterOutputType(SshPublicKeyOutput{})
	pulumi.RegisterOutputType(SshPublicKeyPtrOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseOutput{})
	pulumi.RegisterOutputType(SslConfigOutput{})
	pulumi.RegisterOutputType(SslConfigPtrOutput{})
	pulumi.RegisterOutputType(SslConfigResponseOutput{})
	pulumi.RegisterOutputType(UserPasswordOutput{})
	pulumi.RegisterOutputType(UserPasswordPtrOutput{})
	pulumi.RegisterOutputType(UserPasswordResponseOutput{})
}
