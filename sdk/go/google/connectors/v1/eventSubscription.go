// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new EventSubscription in a given project,location and connection.
type EventSubscription struct {
	pulumi.CustomResourceState

	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// Created time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. The destination to hit when we receive an event
	Destinations EventSubscriptionDestinationResponseOutput `pulumi:"destinations"`
	// Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource.
	EventSubscriptionId pulumi.StringOutput `pulumi:"eventSubscriptionId"`
	// Optional. Event type id of the event of current EventSubscription.
	EventTypeId pulumi.StringOutput `pulumi:"eventTypeId"`
	// Optional. JMS is the source for the event listener.
	Jms      JMSResponseOutput   `pulumi:"jms"`
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. Status indicates the status of the event subscription resource
	Status EventSubscriptionStatusResponseOutput `pulumi:"status"`
	// Optional. name of the Subscriber for the current EventSubscription.
	Subscriber pulumi.StringOutput `pulumi:"subscriber"`
	// Optional. Link for Subscriber of the current EventSubscription.
	SubscriberLink pulumi.StringOutput `pulumi:"subscriberLink"`
	// Updated time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEventSubscription registers a new resource with the given unique name, arguments, and options.
func NewEventSubscription(ctx *pulumi.Context,
	name string, args *EventSubscriptionArgs, opts ...pulumi.ResourceOption) (*EventSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	if args.EventSubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'EventSubscriptionId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"connectionId",
		"eventSubscriptionId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventSubscription
	err := ctx.RegisterResource("google-native:connectors/v1:EventSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSubscription gets an existing EventSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventSubscriptionState, opts ...pulumi.ResourceOption) (*EventSubscription, error) {
	var resource EventSubscription
	err := ctx.ReadResource("google-native:connectors/v1:EventSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventSubscription resources.
type eventSubscriptionState struct {
}

type EventSubscriptionState struct {
}

func (EventSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSubscriptionState)(nil)).Elem()
}

type eventSubscriptionArgs struct {
	ConnectionId string `pulumi:"connectionId"`
	// Optional. The destination to hit when we receive an event
	Destinations *EventSubscriptionDestination `pulumi:"destinations"`
	// Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource.
	EventSubscriptionId string `pulumi:"eventSubscriptionId"`
	// Optional. Event type id of the event of current EventSubscription.
	EventTypeId *string `pulumi:"eventTypeId"`
	// Optional. JMS is the source for the event listener.
	Jms      *JMS    `pulumi:"jms"`
	Location *string `pulumi:"location"`
	// Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. name of the Subscriber for the current EventSubscription.
	Subscriber *string `pulumi:"subscriber"`
	// Optional. Link for Subscriber of the current EventSubscription.
	SubscriberLink *string `pulumi:"subscriberLink"`
}

// The set of arguments for constructing a EventSubscription resource.
type EventSubscriptionArgs struct {
	ConnectionId pulumi.StringInput
	// Optional. The destination to hit when we receive an event
	Destinations EventSubscriptionDestinationPtrInput
	// Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource.
	EventSubscriptionId pulumi.StringInput
	// Optional. Event type id of the event of current EventSubscription.
	EventTypeId pulumi.StringPtrInput
	// Optional. JMS is the source for the event listener.
	Jms      JMSPtrInput
	Location pulumi.StringPtrInput
	// Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. name of the Subscriber for the current EventSubscription.
	Subscriber pulumi.StringPtrInput
	// Optional. Link for Subscriber of the current EventSubscription.
	SubscriberLink pulumi.StringPtrInput
}

func (EventSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSubscriptionArgs)(nil)).Elem()
}

type EventSubscriptionInput interface {
	pulumi.Input

	ToEventSubscriptionOutput() EventSubscriptionOutput
	ToEventSubscriptionOutputWithContext(ctx context.Context) EventSubscriptionOutput
}

func (*EventSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscription)(nil)).Elem()
}

func (i *EventSubscription) ToEventSubscriptionOutput() EventSubscriptionOutput {
	return i.ToEventSubscriptionOutputWithContext(context.Background())
}

func (i *EventSubscription) ToEventSubscriptionOutputWithContext(ctx context.Context) EventSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionOutput)
}

type EventSubscriptionOutput struct{ *pulumi.OutputState }

func (EventSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscription)(nil)).Elem()
}

func (o EventSubscriptionOutput) ToEventSubscriptionOutput() EventSubscriptionOutput {
	return o
}

func (o EventSubscriptionOutput) ToEventSubscriptionOutputWithContext(ctx context.Context) EventSubscriptionOutput {
	return o
}

func (o EventSubscriptionOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// Created time.
func (o EventSubscriptionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. The destination to hit when we receive an event
func (o EventSubscriptionOutput) Destinations() EventSubscriptionDestinationResponseOutput {
	return o.ApplyT(func(v *EventSubscription) EventSubscriptionDestinationResponseOutput { return v.Destinations }).(EventSubscriptionDestinationResponseOutput)
}

// Required. Identifier to assign to the Event Subscription. Must be unique within scope of the parent resource.
func (o EventSubscriptionOutput) EventSubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.EventSubscriptionId }).(pulumi.StringOutput)
}

// Optional. Event type id of the event of current EventSubscription.
func (o EventSubscriptionOutput) EventTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.EventTypeId }).(pulumi.StringOutput)
}

// Optional. JMS is the source for the event listener.
func (o EventSubscriptionOutput) Jms() JMSResponseOutput {
	return o.ApplyT(func(v *EventSubscription) JMSResponseOutput { return v.Jms }).(JMSResponseOutput)
}

func (o EventSubscriptionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}
func (o EventSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EventSubscriptionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. Status indicates the status of the event subscription resource
func (o EventSubscriptionOutput) Status() EventSubscriptionStatusResponseOutput {
	return o.ApplyT(func(v *EventSubscription) EventSubscriptionStatusResponseOutput { return v.Status }).(EventSubscriptionStatusResponseOutput)
}

// Optional. name of the Subscriber for the current EventSubscription.
func (o EventSubscriptionOutput) Subscriber() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.Subscriber }).(pulumi.StringOutput)
}

// Optional. Link for Subscriber of the current EventSubscription.
func (o EventSubscriptionOutput) SubscriberLink() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.SubscriberLink }).(pulumi.StringOutput)
}

// Updated time.
func (o EventSubscriptionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSubscription) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionInput)(nil)).Elem(), &EventSubscription{})
	pulumi.RegisterOutputType(EventSubscriptionOutput{})
}
