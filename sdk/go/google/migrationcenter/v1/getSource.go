// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the details of a source.
func LookupSource(ctx *pulumi.Context, args *LookupSourceArgs, opts ...pulumi.InvokeOption) (*LookupSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSourceResult
	err := ctx.Invoke("google-native:migrationcenter/v1:getSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSourceArgs struct {
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	SourceId string  `pulumi:"sourceId"`
}

type LookupSourceResult struct {
	// The timestamp when the source was created.
	CreateTime string `pulumi:"createTime"`
	// Free-text description.
	Description string `pulumi:"description"`
	// User-friendly display name.
	DisplayName string `pulumi:"displayName"`
	// The number of frames that were reported by the source and contained errors.
	ErrorFrameCount int `pulumi:"errorFrameCount"`
	// If `true`, the source is managed by other service(s).
	Managed bool `pulumi:"managed"`
	// The full name of the source.
	Name string `pulumi:"name"`
	// Number of frames that are still being processed.
	PendingFrameCount int `pulumi:"pendingFrameCount"`
	// The information confidence of the source. The higher the value, the higher the confidence.
	Priority int `pulumi:"priority"`
	// The state of the source.
	State string `pulumi:"state"`
	// Data source type.
	Type string `pulumi:"type"`
	// The timestamp when the source was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupSourceOutput(ctx *pulumi.Context, args LookupSourceOutputArgs, opts ...pulumi.InvokeOption) LookupSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSourceResult, error) {
			args := v.(LookupSourceArgs)
			r, err := LookupSource(ctx, &args, opts...)
			var s LookupSourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSourceResultOutput)
}

type LookupSourceOutputArgs struct {
	Location pulumi.StringInput    `pulumi:"location"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
	SourceId pulumi.StringInput    `pulumi:"sourceId"`
}

func (LookupSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceArgs)(nil)).Elem()
}

type LookupSourceResultOutput struct{ *pulumi.OutputState }

func (LookupSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSourceResult)(nil)).Elem()
}

func (o LookupSourceResultOutput) ToLookupSourceResultOutput() LookupSourceResultOutput {
	return o
}

func (o LookupSourceResultOutput) ToLookupSourceResultOutputWithContext(ctx context.Context) LookupSourceResultOutput {
	return o
}

// The timestamp when the source was created.
func (o LookupSourceResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Free-text description.
func (o LookupSourceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.Description }).(pulumi.StringOutput)
}

// User-friendly display name.
func (o LookupSourceResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The number of frames that were reported by the source and contained errors.
func (o LookupSourceResultOutput) ErrorFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSourceResult) int { return v.ErrorFrameCount }).(pulumi.IntOutput)
}

// If `true`, the source is managed by other service(s).
func (o LookupSourceResultOutput) Managed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSourceResult) bool { return v.Managed }).(pulumi.BoolOutput)
}

// The full name of the source.
func (o LookupSourceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Number of frames that are still being processed.
func (o LookupSourceResultOutput) PendingFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSourceResult) int { return v.PendingFrameCount }).(pulumi.IntOutput)
}

// The information confidence of the source. The higher the value, the higher the confidence.
func (o LookupSourceResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSourceResult) int { return v.Priority }).(pulumi.IntOutput)
}

// The state of the source.
func (o LookupSourceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.State }).(pulumi.StringOutput)
}

// Data source type.
func (o LookupSourceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.Type }).(pulumi.StringOutput)
}

// The timestamp when the source was last updated.
func (o LookupSourceResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSourceResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSourceResultOutput{})
}
