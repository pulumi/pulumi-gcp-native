// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new source in a given project and location.
// Auto-naming is currently not supported for this resource.
type Source struct {
	pulumi.CustomResourceState

	// The timestamp when the source was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Free-text description.
	Description pulumi.StringOutput `pulumi:"description"`
	// User-friendly display name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The number of frames that were reported by the source and contained errors.
	ErrorFrameCount pulumi.IntOutput `pulumi:"errorFrameCount"`
	// If `true`, the source is managed by other service(s).
	IsManaged pulumi.BoolOutput   `pulumi:"isManaged"`
	Location  pulumi.StringOutput `pulumi:"location"`
	// The full name of the source.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of frames that are still being processed.
	PendingFrameCount pulumi.IntOutput `pulumi:"pendingFrameCount"`
	// The information confidence of the source. The higher the value, the higher the confidence.
	Priority pulumi.IntOutput    `pulumi:"priority"`
	Project  pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Required. User specified ID for the source. It will become the last component of the source name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
	SourceId pulumi.StringOutput `pulumi:"sourceId"`
	// The state of the source.
	State pulumi.StringOutput `pulumi:"state"`
	// Data source type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The timestamp when the source was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSource registers a new resource with the given unique name, arguments, and options.
func NewSource(ctx *pulumi.Context,
	name string, args *SourceArgs, opts ...pulumi.ResourceOption) (*Source, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"sourceId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Source
	err := ctx.RegisterResource("google-native:migrationcenter/v1alpha1:Source", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSource gets an existing Source resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceState, opts ...pulumi.ResourceOption) (*Source, error) {
	var resource Source
	err := ctx.ReadResource("google-native:migrationcenter/v1alpha1:Source", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Source resources.
type sourceState struct {
}

type SourceState struct {
}

func (SourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceState)(nil)).Elem()
}

type sourceArgs struct {
	// Free-text description.
	Description *string `pulumi:"description"`
	// User-friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// If `true`, the source is managed by other service(s).
	IsManaged *bool   `pulumi:"isManaged"`
	Location  *string `pulumi:"location"`
	// The information confidence of the source. The higher the value, the higher the confidence.
	Priority *int    `pulumi:"priority"`
	Project  *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Required. User specified ID for the source. It will become the last component of the source name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
	SourceId string `pulumi:"sourceId"`
	// Data source type.
	Type *SourceType `pulumi:"type"`
}

// The set of arguments for constructing a Source resource.
type SourceArgs struct {
	// Free-text description.
	Description pulumi.StringPtrInput
	// User-friendly display name.
	DisplayName pulumi.StringPtrInput
	// If `true`, the source is managed by other service(s).
	IsManaged pulumi.BoolPtrInput
	Location  pulumi.StringPtrInput
	// The information confidence of the source. The higher the value, the higher the confidence.
	Priority pulumi.IntPtrInput
	Project  pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Required. User specified ID for the source. It will become the last component of the source name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
	SourceId pulumi.StringInput
	// Data source type.
	Type SourceTypePtrInput
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceArgs)(nil)).Elem()
}

type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(ctx context.Context) SourceOutput
}

func (*Source) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *Source) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i *Source) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i *Source) ToOutput(ctx context.Context) pulumix.Output[*Source] {
	return pulumix.Output[*Source]{
		OutputState: i.ToSourceOutputWithContext(ctx).OutputState,
	}
}

type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToOutput(ctx context.Context) pulumix.Output[*Source] {
	return pulumix.Output[*Source]{
		OutputState: o.OutputState,
	}
}

// The timestamp when the source was created.
func (o SourceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Free-text description.
func (o SourceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// User-friendly display name.
func (o SourceOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The number of frames that were reported by the source and contained errors.
func (o SourceOutput) ErrorFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Source) pulumi.IntOutput { return v.ErrorFrameCount }).(pulumi.IntOutput)
}

// If `true`, the source is managed by other service(s).
func (o SourceOutput) IsManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Source) pulumi.BoolOutput { return v.IsManaged }).(pulumi.BoolOutput)
}

func (o SourceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The full name of the source.
func (o SourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of frames that are still being processed.
func (o SourceOutput) PendingFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Source) pulumi.IntOutput { return v.PendingFrameCount }).(pulumi.IntOutput)
}

// The information confidence of the source. The higher the value, the higher the confidence.
func (o SourceOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Source) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o SourceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o SourceOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Source) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Required. User specified ID for the source. It will become the last component of the source name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
func (o SourceOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

// The state of the source.
func (o SourceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Data source type.
func (o SourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The timestamp when the source was last updated.
func (o SourceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Source) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInput)(nil)).Elem(), &Source{})
	pulumi.RegisterOutputType(SourceOutput{})
}
