// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets the details of an import job.
func LookupImportJob(ctx *pulumi.Context, args *LookupImportJobArgs, opts ...pulumi.InvokeOption) (*LookupImportJobResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImportJobResult
	err := ctx.Invoke("google-native:migrationcenter/v1alpha1:getImportJob", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupImportJobArgs struct {
	ImportJobId string  `pulumi:"importJobId"`
	Location    string  `pulumi:"location"`
	Project     *string `pulumi:"project"`
	View        *string `pulumi:"view"`
}

type LookupImportJobResult struct {
	// Reference to a source.
	AssetSource string `pulumi:"assetSource"`
	// The timestamp when the import job was completed.
	CompleteTime string `pulumi:"completeTime"`
	// The timestamp when the import job was created.
	CreateTime string `pulumi:"createTime"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName string `pulumi:"displayName"`
	// The report with the results of running the import job.
	ExecutionReport ExecutionReportResponse `pulumi:"executionReport"`
	// The payload is in Google Cloud Storage.
	GcsPayload GCSPayloadInfoResponse `pulumi:"gcsPayload"`
	// The payload is included in the request, mainly used for small import jobs.
	InlinePayload InlinePayloadInfoResponse `pulumi:"inlinePayload"`
	// Labels as key value pairs.
	Labels map[string]string `pulumi:"labels"`
	// The full name of the import job.
	Name string `pulumi:"name"`
	// The state of the import job.
	State string `pulumi:"state"`
	// The timestamp when the import job was last updated.
	UpdateTime string `pulumi:"updateTime"`
	// The report with the validation results of the import job.
	ValidationReport ValidationReportResponse `pulumi:"validationReport"`
}

func LookupImportJobOutput(ctx *pulumi.Context, args LookupImportJobOutputArgs, opts ...pulumi.InvokeOption) LookupImportJobResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupImportJobResult, error) {
			args := v.(LookupImportJobArgs)
			r, err := LookupImportJob(ctx, &args, opts...)
			var s LookupImportJobResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupImportJobResultOutput)
}

type LookupImportJobOutputArgs struct {
	ImportJobId pulumi.StringInput    `pulumi:"importJobId"`
	Location    pulumi.StringInput    `pulumi:"location"`
	Project     pulumi.StringPtrInput `pulumi:"project"`
	View        pulumi.StringPtrInput `pulumi:"view"`
}

func (LookupImportJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImportJobArgs)(nil)).Elem()
}

type LookupImportJobResultOutput struct{ *pulumi.OutputState }

func (LookupImportJobResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImportJobResult)(nil)).Elem()
}

func (o LookupImportJobResultOutput) ToLookupImportJobResultOutput() LookupImportJobResultOutput {
	return o
}

func (o LookupImportJobResultOutput) ToLookupImportJobResultOutputWithContext(ctx context.Context) LookupImportJobResultOutput {
	return o
}

func (o LookupImportJobResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupImportJobResult] {
	return pulumix.Output[LookupImportJobResult]{
		OutputState: o.OutputState,
	}
}

// Reference to a source.
func (o LookupImportJobResultOutput) AssetSource() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.AssetSource }).(pulumi.StringOutput)
}

// The timestamp when the import job was completed.
func (o LookupImportJobResultOutput) CompleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.CompleteTime }).(pulumi.StringOutput)
}

// The timestamp when the import job was created.
func (o LookupImportJobResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// User-friendly display name. Maximum length is 63 characters.
func (o LookupImportJobResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The report with the results of running the import job.
func (o LookupImportJobResultOutput) ExecutionReport() ExecutionReportResponseOutput {
	return o.ApplyT(func(v LookupImportJobResult) ExecutionReportResponse { return v.ExecutionReport }).(ExecutionReportResponseOutput)
}

// The payload is in Google Cloud Storage.
func (o LookupImportJobResultOutput) GcsPayload() GCSPayloadInfoResponseOutput {
	return o.ApplyT(func(v LookupImportJobResult) GCSPayloadInfoResponse { return v.GcsPayload }).(GCSPayloadInfoResponseOutput)
}

// The payload is included in the request, mainly used for small import jobs.
func (o LookupImportJobResultOutput) InlinePayload() InlinePayloadInfoResponseOutput {
	return o.ApplyT(func(v LookupImportJobResult) InlinePayloadInfoResponse { return v.InlinePayload }).(InlinePayloadInfoResponseOutput)
}

// Labels as key value pairs.
func (o LookupImportJobResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupImportJobResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The full name of the import job.
func (o LookupImportJobResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.Name }).(pulumi.StringOutput)
}

// The state of the import job.
func (o LookupImportJobResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.State }).(pulumi.StringOutput)
}

// The timestamp when the import job was last updated.
func (o LookupImportJobResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImportJobResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The report with the validation results of the import job.
func (o LookupImportJobResultOutput) ValidationReport() ValidationReportResponseOutput {
	return o.ApplyT(func(v LookupImportJobResult) ValidationReportResponse { return v.ValidationReport }).(ValidationReportResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImportJobResultOutput{})
}
