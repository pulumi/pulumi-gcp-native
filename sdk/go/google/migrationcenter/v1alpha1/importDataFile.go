// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates an import data file.
// Auto-naming is currently not supported for this resource.
type ImportDataFile struct {
	pulumi.CustomResourceState

	// The timestamp when the file was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The payload format.
	Format pulumi.StringOutput `pulumi:"format"`
	// Required. The ID of the new data file.
	ImportDataFileId pulumi.StringOutput `pulumi:"importDataFileId"`
	ImportJobId      pulumi.StringOutput `pulumi:"importJobId"`
	Location         pulumi.StringOutput `pulumi:"location"`
	// The name of the file.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The state of the import data file.
	State pulumi.StringOutput `pulumi:"state"`
	// Information about a file that is uploaded to a storage service.
	UploadFileInfo UploadFileInfoResponseOutput `pulumi:"uploadFileInfo"`
}

// NewImportDataFile registers a new resource with the given unique name, arguments, and options.
func NewImportDataFile(ctx *pulumi.Context,
	name string, args *ImportDataFileArgs, opts ...pulumi.ResourceOption) (*ImportDataFile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Format == nil {
		return nil, errors.New("invalid value for required argument 'Format'")
	}
	if args.ImportDataFileId == nil {
		return nil, errors.New("invalid value for required argument 'ImportDataFileId'")
	}
	if args.ImportJobId == nil {
		return nil, errors.New("invalid value for required argument 'ImportJobId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"importDataFileId",
		"importJobId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImportDataFile
	err := ctx.RegisterResource("google-native:migrationcenter/v1alpha1:ImportDataFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImportDataFile gets an existing ImportDataFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImportDataFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImportDataFileState, opts ...pulumi.ResourceOption) (*ImportDataFile, error) {
	var resource ImportDataFile
	err := ctx.ReadResource("google-native:migrationcenter/v1alpha1:ImportDataFile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImportDataFile resources.
type importDataFileState struct {
}

type ImportDataFileState struct {
}

func (ImportDataFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*importDataFileState)(nil)).Elem()
}

type importDataFileArgs struct {
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName *string `pulumi:"displayName"`
	// The payload format.
	Format ImportDataFileFormat `pulumi:"format"`
	// Required. The ID of the new data file.
	ImportDataFileId string  `pulumi:"importDataFileId"`
	ImportJobId      string  `pulumi:"importJobId"`
	Location         *string `pulumi:"location"`
	Project          *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Information about a file that is uploaded to a storage service.
	UploadFileInfo *UploadFileInfo `pulumi:"uploadFileInfo"`
}

// The set of arguments for constructing a ImportDataFile resource.
type ImportDataFileArgs struct {
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName pulumi.StringPtrInput
	// The payload format.
	Format ImportDataFileFormatInput
	// Required. The ID of the new data file.
	ImportDataFileId pulumi.StringInput
	ImportJobId      pulumi.StringInput
	Location         pulumi.StringPtrInput
	Project          pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Information about a file that is uploaded to a storage service.
	UploadFileInfo UploadFileInfoPtrInput
}

func (ImportDataFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*importDataFileArgs)(nil)).Elem()
}

type ImportDataFileInput interface {
	pulumi.Input

	ToImportDataFileOutput() ImportDataFileOutput
	ToImportDataFileOutputWithContext(ctx context.Context) ImportDataFileOutput
}

func (*ImportDataFile) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportDataFile)(nil)).Elem()
}

func (i *ImportDataFile) ToImportDataFileOutput() ImportDataFileOutput {
	return i.ToImportDataFileOutputWithContext(context.Background())
}

func (i *ImportDataFile) ToImportDataFileOutputWithContext(ctx context.Context) ImportDataFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportDataFileOutput)
}

func (i *ImportDataFile) ToOutput(ctx context.Context) pulumix.Output[*ImportDataFile] {
	return pulumix.Output[*ImportDataFile]{
		OutputState: i.ToImportDataFileOutputWithContext(ctx).OutputState,
	}
}

type ImportDataFileOutput struct{ *pulumi.OutputState }

func (ImportDataFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportDataFile)(nil)).Elem()
}

func (o ImportDataFileOutput) ToImportDataFileOutput() ImportDataFileOutput {
	return o
}

func (o ImportDataFileOutput) ToImportDataFileOutputWithContext(ctx context.Context) ImportDataFileOutput {
	return o
}

func (o ImportDataFileOutput) ToOutput(ctx context.Context) pulumix.Output[*ImportDataFile] {
	return pulumix.Output[*ImportDataFile]{
		OutputState: o.OutputState,
	}
}

// The timestamp when the file was created.
func (o ImportDataFileOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportDataFile) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User-friendly display name. Maximum length is 63 characters.
func (o ImportDataFileOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportDataFile) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The payload format.
func (o ImportDataFileOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportDataFile) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// Required. The ID of the new data file.
func (o ImportDataFileOutput) ImportDataFileId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportDataFile) pulumi.StringOutput { return v.ImportDataFileId }).(pulumi.StringOutput)
}

func (o ImportDataFileOutput) ImportJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportDataFile) pulumi.StringOutput { return v.ImportJobId }).(pulumi.StringOutput)
}

func (o ImportDataFileOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportDataFile) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the file.
func (o ImportDataFileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportDataFile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ImportDataFileOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportDataFile) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o ImportDataFileOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportDataFile) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The state of the import data file.
func (o ImportDataFileOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportDataFile) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Information about a file that is uploaded to a storage service.
func (o ImportDataFileOutput) UploadFileInfo() UploadFileInfoResponseOutput {
	return o.ApplyT(func(v *ImportDataFile) UploadFileInfoResponseOutput { return v.UploadFileInfo }).(UploadFileInfoResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImportDataFileInput)(nil)).Elem(), &ImportDataFile{})
	pulumi.RegisterOutputType(ImportDataFileOutput{})
}
