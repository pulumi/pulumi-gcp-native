// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The user preferences relating to Compute Engine target platform.
type ComputeEnginePreferences struct {
	// License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
	LicenseType *ComputeEnginePreferencesLicenseType `pulumi:"licenseType"`
	// Preferences concerning the machine types to consider on Compute Engine.
	MachinePreferences *MachinePreferences `pulumi:"machinePreferences"`
	// Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
	PersistentDiskType *ComputeEnginePreferencesPersistentDiskType `pulumi:"persistentDiskType"`
}

// ComputeEnginePreferencesInput is an input type that accepts ComputeEnginePreferencesArgs and ComputeEnginePreferencesOutput values.
// You can construct a concrete instance of `ComputeEnginePreferencesInput` via:
//
//	ComputeEnginePreferencesArgs{...}
type ComputeEnginePreferencesInput interface {
	pulumi.Input

	ToComputeEnginePreferencesOutput() ComputeEnginePreferencesOutput
	ToComputeEnginePreferencesOutputWithContext(context.Context) ComputeEnginePreferencesOutput
}

// The user preferences relating to Compute Engine target platform.
type ComputeEnginePreferencesArgs struct {
	// License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
	LicenseType ComputeEnginePreferencesLicenseTypePtrInput `pulumi:"licenseType"`
	// Preferences concerning the machine types to consider on Compute Engine.
	MachinePreferences MachinePreferencesPtrInput `pulumi:"machinePreferences"`
	// Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
	PersistentDiskType ComputeEnginePreferencesPersistentDiskTypePtrInput `pulumi:"persistentDiskType"`
}

func (ComputeEnginePreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnginePreferences)(nil)).Elem()
}

func (i ComputeEnginePreferencesArgs) ToComputeEnginePreferencesOutput() ComputeEnginePreferencesOutput {
	return i.ToComputeEnginePreferencesOutputWithContext(context.Background())
}

func (i ComputeEnginePreferencesArgs) ToComputeEnginePreferencesOutputWithContext(ctx context.Context) ComputeEnginePreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnginePreferencesOutput)
}

func (i ComputeEnginePreferencesArgs) ToComputeEnginePreferencesPtrOutput() ComputeEnginePreferencesPtrOutput {
	return i.ToComputeEnginePreferencesPtrOutputWithContext(context.Background())
}

func (i ComputeEnginePreferencesArgs) ToComputeEnginePreferencesPtrOutputWithContext(ctx context.Context) ComputeEnginePreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnginePreferencesOutput).ToComputeEnginePreferencesPtrOutputWithContext(ctx)
}

// ComputeEnginePreferencesPtrInput is an input type that accepts ComputeEnginePreferencesArgs, ComputeEnginePreferencesPtr and ComputeEnginePreferencesPtrOutput values.
// You can construct a concrete instance of `ComputeEnginePreferencesPtrInput` via:
//
//	        ComputeEnginePreferencesArgs{...}
//
//	or:
//
//	        nil
type ComputeEnginePreferencesPtrInput interface {
	pulumi.Input

	ToComputeEnginePreferencesPtrOutput() ComputeEnginePreferencesPtrOutput
	ToComputeEnginePreferencesPtrOutputWithContext(context.Context) ComputeEnginePreferencesPtrOutput
}

type computeEnginePreferencesPtrType ComputeEnginePreferencesArgs

func ComputeEnginePreferencesPtr(v *ComputeEnginePreferencesArgs) ComputeEnginePreferencesPtrInput {
	return (*computeEnginePreferencesPtrType)(v)
}

func (*computeEnginePreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnginePreferences)(nil)).Elem()
}

func (i *computeEnginePreferencesPtrType) ToComputeEnginePreferencesPtrOutput() ComputeEnginePreferencesPtrOutput {
	return i.ToComputeEnginePreferencesPtrOutputWithContext(context.Background())
}

func (i *computeEnginePreferencesPtrType) ToComputeEnginePreferencesPtrOutputWithContext(ctx context.Context) ComputeEnginePreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeEnginePreferencesPtrOutput)
}

// The user preferences relating to Compute Engine target platform.
type ComputeEnginePreferencesOutput struct{ *pulumi.OutputState }

func (ComputeEnginePreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnginePreferences)(nil)).Elem()
}

func (o ComputeEnginePreferencesOutput) ToComputeEnginePreferencesOutput() ComputeEnginePreferencesOutput {
	return o
}

func (o ComputeEnginePreferencesOutput) ToComputeEnginePreferencesOutputWithContext(ctx context.Context) ComputeEnginePreferencesOutput {
	return o
}

func (o ComputeEnginePreferencesOutput) ToComputeEnginePreferencesPtrOutput() ComputeEnginePreferencesPtrOutput {
	return o.ToComputeEnginePreferencesPtrOutputWithContext(context.Background())
}

func (o ComputeEnginePreferencesOutput) ToComputeEnginePreferencesPtrOutputWithContext(ctx context.Context) ComputeEnginePreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeEnginePreferences) *ComputeEnginePreferences {
		return &v
	}).(ComputeEnginePreferencesPtrOutput)
}

// License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
func (o ComputeEnginePreferencesOutput) LicenseType() ComputeEnginePreferencesLicenseTypePtrOutput {
	return o.ApplyT(func(v ComputeEnginePreferences) *ComputeEnginePreferencesLicenseType { return v.LicenseType }).(ComputeEnginePreferencesLicenseTypePtrOutput)
}

// Preferences concerning the machine types to consider on Compute Engine.
func (o ComputeEnginePreferencesOutput) MachinePreferences() MachinePreferencesPtrOutput {
	return o.ApplyT(func(v ComputeEnginePreferences) *MachinePreferences { return v.MachinePreferences }).(MachinePreferencesPtrOutput)
}

// Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
func (o ComputeEnginePreferencesOutput) PersistentDiskType() ComputeEnginePreferencesPersistentDiskTypePtrOutput {
	return o.ApplyT(func(v ComputeEnginePreferences) *ComputeEnginePreferencesPersistentDiskType {
		return v.PersistentDiskType
	}).(ComputeEnginePreferencesPersistentDiskTypePtrOutput)
}

type ComputeEnginePreferencesPtrOutput struct{ *pulumi.OutputState }

func (ComputeEnginePreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeEnginePreferences)(nil)).Elem()
}

func (o ComputeEnginePreferencesPtrOutput) ToComputeEnginePreferencesPtrOutput() ComputeEnginePreferencesPtrOutput {
	return o
}

func (o ComputeEnginePreferencesPtrOutput) ToComputeEnginePreferencesPtrOutputWithContext(ctx context.Context) ComputeEnginePreferencesPtrOutput {
	return o
}

func (o ComputeEnginePreferencesPtrOutput) Elem() ComputeEnginePreferencesOutput {
	return o.ApplyT(func(v *ComputeEnginePreferences) ComputeEnginePreferences {
		if v != nil {
			return *v
		}
		var ret ComputeEnginePreferences
		return ret
	}).(ComputeEnginePreferencesOutput)
}

// License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
func (o ComputeEnginePreferencesPtrOutput) LicenseType() ComputeEnginePreferencesLicenseTypePtrOutput {
	return o.ApplyT(func(v *ComputeEnginePreferences) *ComputeEnginePreferencesLicenseType {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(ComputeEnginePreferencesLicenseTypePtrOutput)
}

// Preferences concerning the machine types to consider on Compute Engine.
func (o ComputeEnginePreferencesPtrOutput) MachinePreferences() MachinePreferencesPtrOutput {
	return o.ApplyT(func(v *ComputeEnginePreferences) *MachinePreferences {
		if v == nil {
			return nil
		}
		return v.MachinePreferences
	}).(MachinePreferencesPtrOutput)
}

// Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
func (o ComputeEnginePreferencesPtrOutput) PersistentDiskType() ComputeEnginePreferencesPersistentDiskTypePtrOutput {
	return o.ApplyT(func(v *ComputeEnginePreferences) *ComputeEnginePreferencesPersistentDiskType {
		if v == nil {
			return nil
		}
		return v.PersistentDiskType
	}).(ComputeEnginePreferencesPersistentDiskTypePtrOutput)
}

// The user preferences relating to Compute Engine target platform.
type ComputeEnginePreferencesResponse struct {
	// License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
	LicenseType string `pulumi:"licenseType"`
	// Preferences concerning the machine types to consider on Compute Engine.
	MachinePreferences MachinePreferencesResponse `pulumi:"machinePreferences"`
	// Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
	PersistentDiskType string `pulumi:"persistentDiskType"`
}

// The user preferences relating to Compute Engine target platform.
type ComputeEnginePreferencesResponseOutput struct{ *pulumi.OutputState }

func (ComputeEnginePreferencesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeEnginePreferencesResponse)(nil)).Elem()
}

func (o ComputeEnginePreferencesResponseOutput) ToComputeEnginePreferencesResponseOutput() ComputeEnginePreferencesResponseOutput {
	return o
}

func (o ComputeEnginePreferencesResponseOutput) ToComputeEnginePreferencesResponseOutputWithContext(ctx context.Context) ComputeEnginePreferencesResponseOutput {
	return o
}

// License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
func (o ComputeEnginePreferencesResponseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEnginePreferencesResponse) string { return v.LicenseType }).(pulumi.StringOutput)
}

// Preferences concerning the machine types to consider on Compute Engine.
func (o ComputeEnginePreferencesResponseOutput) MachinePreferences() MachinePreferencesResponseOutput {
	return o.ApplyT(func(v ComputeEnginePreferencesResponse) MachinePreferencesResponse { return v.MachinePreferences }).(MachinePreferencesResponseOutput)
}

// Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
func (o ComputeEnginePreferencesResponseOutput) PersistentDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeEnginePreferencesResponse) string { return v.PersistentDiskType }).(pulumi.StringOutput)
}

// A resource that reports result of the import job execution.
type ExecutionReportResponse struct {
	// Validation errors encountered during the execution of the import job.
	ExecutionErrors ValidationReportResponse `pulumi:"executionErrors"`
	// Total number of asset frames reported for the import job.
	FramesReported int `pulumi:"framesReported"`
	// List of job-level errors. Deprecated, use the job errors under execution_errors instead.
	//
	// Deprecated: List of job-level errors. Deprecated, use the job errors under execution_errors instead.
	JobErrors []ImportErrorResponse `pulumi:"jobErrors"`
	// Total number of rows in the import job.
	TotalRowsCount int `pulumi:"totalRowsCount"`
}

// A resource that reports result of the import job execution.
type ExecutionReportResponseOutput struct{ *pulumi.OutputState }

func (ExecutionReportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionReportResponse)(nil)).Elem()
}

func (o ExecutionReportResponseOutput) ToExecutionReportResponseOutput() ExecutionReportResponseOutput {
	return o
}

func (o ExecutionReportResponseOutput) ToExecutionReportResponseOutputWithContext(ctx context.Context) ExecutionReportResponseOutput {
	return o
}

// Validation errors encountered during the execution of the import job.
func (o ExecutionReportResponseOutput) ExecutionErrors() ValidationReportResponseOutput {
	return o.ApplyT(func(v ExecutionReportResponse) ValidationReportResponse { return v.ExecutionErrors }).(ValidationReportResponseOutput)
}

// Total number of asset frames reported for the import job.
func (o ExecutionReportResponseOutput) FramesReported() pulumi.IntOutput {
	return o.ApplyT(func(v ExecutionReportResponse) int { return v.FramesReported }).(pulumi.IntOutput)
}

// List of job-level errors. Deprecated, use the job errors under execution_errors instead.
//
// Deprecated: List of job-level errors. Deprecated, use the job errors under execution_errors instead.
func (o ExecutionReportResponseOutput) JobErrors() ImportErrorResponseArrayOutput {
	return o.ApplyT(func(v ExecutionReportResponse) []ImportErrorResponse { return v.JobErrors }).(ImportErrorResponseArrayOutput)
}

// Total number of rows in the import job.
func (o ExecutionReportResponseOutput) TotalRowsCount() pulumi.IntOutput {
	return o.ApplyT(func(v ExecutionReportResponse) int { return v.TotalRowsCount }).(pulumi.IntOutput)
}

// A resource that aggregates the validation errors found in an import job file.
type FileValidationReportResponse struct {
	// List of file level errors.
	FileErrors []ImportErrorResponse `pulumi:"fileErrors"`
	// The name of the file.
	FileName string `pulumi:"fileName"`
	// Flag indicating that processing was aborted due to maximum number of errors.
	PartialReport bool `pulumi:"partialReport"`
	// Partial list of rows that encountered validation error.
	RowErrors []ImportRowErrorResponse `pulumi:"rowErrors"`
}

// A resource that aggregates the validation errors found in an import job file.
type FileValidationReportResponseOutput struct{ *pulumi.OutputState }

func (FileValidationReportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileValidationReportResponse)(nil)).Elem()
}

func (o FileValidationReportResponseOutput) ToFileValidationReportResponseOutput() FileValidationReportResponseOutput {
	return o
}

func (o FileValidationReportResponseOutput) ToFileValidationReportResponseOutputWithContext(ctx context.Context) FileValidationReportResponseOutput {
	return o
}

// List of file level errors.
func (o FileValidationReportResponseOutput) FileErrors() ImportErrorResponseArrayOutput {
	return o.ApplyT(func(v FileValidationReportResponse) []ImportErrorResponse { return v.FileErrors }).(ImportErrorResponseArrayOutput)
}

// The name of the file.
func (o FileValidationReportResponseOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v FileValidationReportResponse) string { return v.FileName }).(pulumi.StringOutput)
}

// Flag indicating that processing was aborted due to maximum number of errors.
func (o FileValidationReportResponseOutput) PartialReport() pulumi.BoolOutput {
	return o.ApplyT(func(v FileValidationReportResponse) bool { return v.PartialReport }).(pulumi.BoolOutput)
}

// Partial list of rows that encountered validation error.
func (o FileValidationReportResponseOutput) RowErrors() ImportRowErrorResponseArrayOutput {
	return o.ApplyT(func(v FileValidationReportResponse) []ImportRowErrorResponse { return v.RowErrors }).(ImportRowErrorResponseArrayOutput)
}

type FileValidationReportResponseArrayOutput struct{ *pulumi.OutputState }

func (FileValidationReportResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileValidationReportResponse)(nil)).Elem()
}

func (o FileValidationReportResponseArrayOutput) ToFileValidationReportResponseArrayOutput() FileValidationReportResponseArrayOutput {
	return o
}

func (o FileValidationReportResponseArrayOutput) ToFileValidationReportResponseArrayOutputWithContext(ctx context.Context) FileValidationReportResponseArrayOutput {
	return o
}

func (o FileValidationReportResponseArrayOutput) Index(i pulumi.IntInput) FileValidationReportResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileValidationReportResponse {
		return vs[0].([]FileValidationReportResponse)[vs[1].(int)]
	}).(FileValidationReportResponseOutput)
}

// A resource that represents a payload hosted on Google Cloud Storage.
type GCSPayloadInfo struct {
	// The import job format.
	Format *GCSPayloadInfoFormat `pulumi:"format"`
	// The payload path in Google Cloud Storage.
	Path *string `pulumi:"path"`
}

// GCSPayloadInfoInput is an input type that accepts GCSPayloadInfoArgs and GCSPayloadInfoOutput values.
// You can construct a concrete instance of `GCSPayloadInfoInput` via:
//
//	GCSPayloadInfoArgs{...}
type GCSPayloadInfoInput interface {
	pulumi.Input

	ToGCSPayloadInfoOutput() GCSPayloadInfoOutput
	ToGCSPayloadInfoOutputWithContext(context.Context) GCSPayloadInfoOutput
}

// A resource that represents a payload hosted on Google Cloud Storage.
type GCSPayloadInfoArgs struct {
	// The import job format.
	Format GCSPayloadInfoFormatPtrInput `pulumi:"format"`
	// The payload path in Google Cloud Storage.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (GCSPayloadInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCSPayloadInfo)(nil)).Elem()
}

func (i GCSPayloadInfoArgs) ToGCSPayloadInfoOutput() GCSPayloadInfoOutput {
	return i.ToGCSPayloadInfoOutputWithContext(context.Background())
}

func (i GCSPayloadInfoArgs) ToGCSPayloadInfoOutputWithContext(ctx context.Context) GCSPayloadInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCSPayloadInfoOutput)
}

func (i GCSPayloadInfoArgs) ToGCSPayloadInfoPtrOutput() GCSPayloadInfoPtrOutput {
	return i.ToGCSPayloadInfoPtrOutputWithContext(context.Background())
}

func (i GCSPayloadInfoArgs) ToGCSPayloadInfoPtrOutputWithContext(ctx context.Context) GCSPayloadInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCSPayloadInfoOutput).ToGCSPayloadInfoPtrOutputWithContext(ctx)
}

// GCSPayloadInfoPtrInput is an input type that accepts GCSPayloadInfoArgs, GCSPayloadInfoPtr and GCSPayloadInfoPtrOutput values.
// You can construct a concrete instance of `GCSPayloadInfoPtrInput` via:
//
//	        GCSPayloadInfoArgs{...}
//
//	or:
//
//	        nil
type GCSPayloadInfoPtrInput interface {
	pulumi.Input

	ToGCSPayloadInfoPtrOutput() GCSPayloadInfoPtrOutput
	ToGCSPayloadInfoPtrOutputWithContext(context.Context) GCSPayloadInfoPtrOutput
}

type gcspayloadInfoPtrType GCSPayloadInfoArgs

func GCSPayloadInfoPtr(v *GCSPayloadInfoArgs) GCSPayloadInfoPtrInput {
	return (*gcspayloadInfoPtrType)(v)
}

func (*gcspayloadInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCSPayloadInfo)(nil)).Elem()
}

func (i *gcspayloadInfoPtrType) ToGCSPayloadInfoPtrOutput() GCSPayloadInfoPtrOutput {
	return i.ToGCSPayloadInfoPtrOutputWithContext(context.Background())
}

func (i *gcspayloadInfoPtrType) ToGCSPayloadInfoPtrOutputWithContext(ctx context.Context) GCSPayloadInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCSPayloadInfoPtrOutput)
}

// A resource that represents a payload hosted on Google Cloud Storage.
type GCSPayloadInfoOutput struct{ *pulumi.OutputState }

func (GCSPayloadInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCSPayloadInfo)(nil)).Elem()
}

func (o GCSPayloadInfoOutput) ToGCSPayloadInfoOutput() GCSPayloadInfoOutput {
	return o
}

func (o GCSPayloadInfoOutput) ToGCSPayloadInfoOutputWithContext(ctx context.Context) GCSPayloadInfoOutput {
	return o
}

func (o GCSPayloadInfoOutput) ToGCSPayloadInfoPtrOutput() GCSPayloadInfoPtrOutput {
	return o.ToGCSPayloadInfoPtrOutputWithContext(context.Background())
}

func (o GCSPayloadInfoOutput) ToGCSPayloadInfoPtrOutputWithContext(ctx context.Context) GCSPayloadInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCSPayloadInfo) *GCSPayloadInfo {
		return &v
	}).(GCSPayloadInfoPtrOutput)
}

// The import job format.
func (o GCSPayloadInfoOutput) Format() GCSPayloadInfoFormatPtrOutput {
	return o.ApplyT(func(v GCSPayloadInfo) *GCSPayloadInfoFormat { return v.Format }).(GCSPayloadInfoFormatPtrOutput)
}

// The payload path in Google Cloud Storage.
func (o GCSPayloadInfoOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCSPayloadInfo) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type GCSPayloadInfoPtrOutput struct{ *pulumi.OutputState }

func (GCSPayloadInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCSPayloadInfo)(nil)).Elem()
}

func (o GCSPayloadInfoPtrOutput) ToGCSPayloadInfoPtrOutput() GCSPayloadInfoPtrOutput {
	return o
}

func (o GCSPayloadInfoPtrOutput) ToGCSPayloadInfoPtrOutputWithContext(ctx context.Context) GCSPayloadInfoPtrOutput {
	return o
}

func (o GCSPayloadInfoPtrOutput) Elem() GCSPayloadInfoOutput {
	return o.ApplyT(func(v *GCSPayloadInfo) GCSPayloadInfo {
		if v != nil {
			return *v
		}
		var ret GCSPayloadInfo
		return ret
	}).(GCSPayloadInfoOutput)
}

// The import job format.
func (o GCSPayloadInfoPtrOutput) Format() GCSPayloadInfoFormatPtrOutput {
	return o.ApplyT(func(v *GCSPayloadInfo) *GCSPayloadInfoFormat {
		if v == nil {
			return nil
		}
		return v.Format
	}).(GCSPayloadInfoFormatPtrOutput)
}

// The payload path in Google Cloud Storage.
func (o GCSPayloadInfoPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCSPayloadInfo) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// A resource that represents a payload hosted on Google Cloud Storage.
type GCSPayloadInfoResponse struct {
	// The import job format.
	Format string `pulumi:"format"`
	// The payload path in Google Cloud Storage.
	Path string `pulumi:"path"`
}

// A resource that represents a payload hosted on Google Cloud Storage.
type GCSPayloadInfoResponseOutput struct{ *pulumi.OutputState }

func (GCSPayloadInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCSPayloadInfoResponse)(nil)).Elem()
}

func (o GCSPayloadInfoResponseOutput) ToGCSPayloadInfoResponseOutput() GCSPayloadInfoResponseOutput {
	return o
}

func (o GCSPayloadInfoResponseOutput) ToGCSPayloadInfoResponseOutputWithContext(ctx context.Context) GCSPayloadInfoResponseOutput {
	return o
}

// The import job format.
func (o GCSPayloadInfoResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v GCSPayloadInfoResponse) string { return v.Format }).(pulumi.StringOutput)
}

// The payload path in Google Cloud Storage.
func (o GCSPayloadInfoResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GCSPayloadInfoResponse) string { return v.Path }).(pulumi.StringOutput)
}

// A resource that reports the errors encountered while processing an import job.
type ImportErrorResponse struct {
	// The error information.
	ErrorDetails string `pulumi:"errorDetails"`
	// The severity of the error.
	Severity string `pulumi:"severity"`
}

// A resource that reports the errors encountered while processing an import job.
type ImportErrorResponseOutput struct{ *pulumi.OutputState }

func (ImportErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportErrorResponse)(nil)).Elem()
}

func (o ImportErrorResponseOutput) ToImportErrorResponseOutput() ImportErrorResponseOutput {
	return o
}

func (o ImportErrorResponseOutput) ToImportErrorResponseOutputWithContext(ctx context.Context) ImportErrorResponseOutput {
	return o
}

// The error information.
func (o ImportErrorResponseOutput) ErrorDetails() pulumi.StringOutput {
	return o.ApplyT(func(v ImportErrorResponse) string { return v.ErrorDetails }).(pulumi.StringOutput)
}

// The severity of the error.
func (o ImportErrorResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v ImportErrorResponse) string { return v.Severity }).(pulumi.StringOutput)
}

type ImportErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ImportErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImportErrorResponse)(nil)).Elem()
}

func (o ImportErrorResponseArrayOutput) ToImportErrorResponseArrayOutput() ImportErrorResponseArrayOutput {
	return o
}

func (o ImportErrorResponseArrayOutput) ToImportErrorResponseArrayOutputWithContext(ctx context.Context) ImportErrorResponseArrayOutput {
	return o
}

func (o ImportErrorResponseArrayOutput) Index(i pulumi.IntInput) ImportErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImportErrorResponse {
		return vs[0].([]ImportErrorResponse)[vs[1].(int)]
	}).(ImportErrorResponseOutput)
}

// A resource that reports the import job errors at row level.
type ImportRowErrorResponse struct {
	// The list of errors detected in the row.
	Errors []ImportErrorResponse `pulumi:"errors"`
	// The row number where the error was detected.
	RowNumber int `pulumi:"rowNumber"`
	// The name of the VM in the row.
	VmName string `pulumi:"vmName"`
	// The VM UUID.
	VmUuid string `pulumi:"vmUuid"`
}

// A resource that reports the import job errors at row level.
type ImportRowErrorResponseOutput struct{ *pulumi.OutputState }

func (ImportRowErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportRowErrorResponse)(nil)).Elem()
}

func (o ImportRowErrorResponseOutput) ToImportRowErrorResponseOutput() ImportRowErrorResponseOutput {
	return o
}

func (o ImportRowErrorResponseOutput) ToImportRowErrorResponseOutputWithContext(ctx context.Context) ImportRowErrorResponseOutput {
	return o
}

// The list of errors detected in the row.
func (o ImportRowErrorResponseOutput) Errors() ImportErrorResponseArrayOutput {
	return o.ApplyT(func(v ImportRowErrorResponse) []ImportErrorResponse { return v.Errors }).(ImportErrorResponseArrayOutput)
}

// The row number where the error was detected.
func (o ImportRowErrorResponseOutput) RowNumber() pulumi.IntOutput {
	return o.ApplyT(func(v ImportRowErrorResponse) int { return v.RowNumber }).(pulumi.IntOutput)
}

// The name of the VM in the row.
func (o ImportRowErrorResponseOutput) VmName() pulumi.StringOutput {
	return o.ApplyT(func(v ImportRowErrorResponse) string { return v.VmName }).(pulumi.StringOutput)
}

// The VM UUID.
func (o ImportRowErrorResponseOutput) VmUuid() pulumi.StringOutput {
	return o.ApplyT(func(v ImportRowErrorResponse) string { return v.VmUuid }).(pulumi.StringOutput)
}

type ImportRowErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ImportRowErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImportRowErrorResponse)(nil)).Elem()
}

func (o ImportRowErrorResponseArrayOutput) ToImportRowErrorResponseArrayOutput() ImportRowErrorResponseArrayOutput {
	return o
}

func (o ImportRowErrorResponseArrayOutput) ToImportRowErrorResponseArrayOutputWithContext(ctx context.Context) ImportRowErrorResponseArrayOutput {
	return o
}

func (o ImportRowErrorResponseArrayOutput) Index(i pulumi.IntInput) ImportRowErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImportRowErrorResponse {
		return vs[0].([]ImportRowErrorResponse)[vs[1].(int)]
	}).(ImportRowErrorResponseOutput)
}

// A resource that represents the inline import job payload.
type InlinePayloadInfo struct {
	// The import job format.
	Format *InlinePayloadInfoFormat `pulumi:"format"`
	// List of payload files.
	Payload []PayloadFile `pulumi:"payload"`
}

// InlinePayloadInfoInput is an input type that accepts InlinePayloadInfoArgs and InlinePayloadInfoOutput values.
// You can construct a concrete instance of `InlinePayloadInfoInput` via:
//
//	InlinePayloadInfoArgs{...}
type InlinePayloadInfoInput interface {
	pulumi.Input

	ToInlinePayloadInfoOutput() InlinePayloadInfoOutput
	ToInlinePayloadInfoOutputWithContext(context.Context) InlinePayloadInfoOutput
}

// A resource that represents the inline import job payload.
type InlinePayloadInfoArgs struct {
	// The import job format.
	Format InlinePayloadInfoFormatPtrInput `pulumi:"format"`
	// List of payload files.
	Payload PayloadFileArrayInput `pulumi:"payload"`
}

func (InlinePayloadInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InlinePayloadInfo)(nil)).Elem()
}

func (i InlinePayloadInfoArgs) ToInlinePayloadInfoOutput() InlinePayloadInfoOutput {
	return i.ToInlinePayloadInfoOutputWithContext(context.Background())
}

func (i InlinePayloadInfoArgs) ToInlinePayloadInfoOutputWithContext(ctx context.Context) InlinePayloadInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlinePayloadInfoOutput)
}

func (i InlinePayloadInfoArgs) ToInlinePayloadInfoPtrOutput() InlinePayloadInfoPtrOutput {
	return i.ToInlinePayloadInfoPtrOutputWithContext(context.Background())
}

func (i InlinePayloadInfoArgs) ToInlinePayloadInfoPtrOutputWithContext(ctx context.Context) InlinePayloadInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlinePayloadInfoOutput).ToInlinePayloadInfoPtrOutputWithContext(ctx)
}

// InlinePayloadInfoPtrInput is an input type that accepts InlinePayloadInfoArgs, InlinePayloadInfoPtr and InlinePayloadInfoPtrOutput values.
// You can construct a concrete instance of `InlinePayloadInfoPtrInput` via:
//
//	        InlinePayloadInfoArgs{...}
//
//	or:
//
//	        nil
type InlinePayloadInfoPtrInput interface {
	pulumi.Input

	ToInlinePayloadInfoPtrOutput() InlinePayloadInfoPtrOutput
	ToInlinePayloadInfoPtrOutputWithContext(context.Context) InlinePayloadInfoPtrOutput
}

type inlinePayloadInfoPtrType InlinePayloadInfoArgs

func InlinePayloadInfoPtr(v *InlinePayloadInfoArgs) InlinePayloadInfoPtrInput {
	return (*inlinePayloadInfoPtrType)(v)
}

func (*inlinePayloadInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InlinePayloadInfo)(nil)).Elem()
}

func (i *inlinePayloadInfoPtrType) ToInlinePayloadInfoPtrOutput() InlinePayloadInfoPtrOutput {
	return i.ToInlinePayloadInfoPtrOutputWithContext(context.Background())
}

func (i *inlinePayloadInfoPtrType) ToInlinePayloadInfoPtrOutputWithContext(ctx context.Context) InlinePayloadInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlinePayloadInfoPtrOutput)
}

// A resource that represents the inline import job payload.
type InlinePayloadInfoOutput struct{ *pulumi.OutputState }

func (InlinePayloadInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InlinePayloadInfo)(nil)).Elem()
}

func (o InlinePayloadInfoOutput) ToInlinePayloadInfoOutput() InlinePayloadInfoOutput {
	return o
}

func (o InlinePayloadInfoOutput) ToInlinePayloadInfoOutputWithContext(ctx context.Context) InlinePayloadInfoOutput {
	return o
}

func (o InlinePayloadInfoOutput) ToInlinePayloadInfoPtrOutput() InlinePayloadInfoPtrOutput {
	return o.ToInlinePayloadInfoPtrOutputWithContext(context.Background())
}

func (o InlinePayloadInfoOutput) ToInlinePayloadInfoPtrOutputWithContext(ctx context.Context) InlinePayloadInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InlinePayloadInfo) *InlinePayloadInfo {
		return &v
	}).(InlinePayloadInfoPtrOutput)
}

// The import job format.
func (o InlinePayloadInfoOutput) Format() InlinePayloadInfoFormatPtrOutput {
	return o.ApplyT(func(v InlinePayloadInfo) *InlinePayloadInfoFormat { return v.Format }).(InlinePayloadInfoFormatPtrOutput)
}

// List of payload files.
func (o InlinePayloadInfoOutput) Payload() PayloadFileArrayOutput {
	return o.ApplyT(func(v InlinePayloadInfo) []PayloadFile { return v.Payload }).(PayloadFileArrayOutput)
}

type InlinePayloadInfoPtrOutput struct{ *pulumi.OutputState }

func (InlinePayloadInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InlinePayloadInfo)(nil)).Elem()
}

func (o InlinePayloadInfoPtrOutput) ToInlinePayloadInfoPtrOutput() InlinePayloadInfoPtrOutput {
	return o
}

func (o InlinePayloadInfoPtrOutput) ToInlinePayloadInfoPtrOutputWithContext(ctx context.Context) InlinePayloadInfoPtrOutput {
	return o
}

func (o InlinePayloadInfoPtrOutput) Elem() InlinePayloadInfoOutput {
	return o.ApplyT(func(v *InlinePayloadInfo) InlinePayloadInfo {
		if v != nil {
			return *v
		}
		var ret InlinePayloadInfo
		return ret
	}).(InlinePayloadInfoOutput)
}

// The import job format.
func (o InlinePayloadInfoPtrOutput) Format() InlinePayloadInfoFormatPtrOutput {
	return o.ApplyT(func(v *InlinePayloadInfo) *InlinePayloadInfoFormat {
		if v == nil {
			return nil
		}
		return v.Format
	}).(InlinePayloadInfoFormatPtrOutput)
}

// List of payload files.
func (o InlinePayloadInfoPtrOutput) Payload() PayloadFileArrayOutput {
	return o.ApplyT(func(v *InlinePayloadInfo) []PayloadFile {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(PayloadFileArrayOutput)
}

// A resource that represents the inline import job payload.
type InlinePayloadInfoResponse struct {
	// The import job format.
	Format string `pulumi:"format"`
	// List of payload files.
	Payload []PayloadFileResponse `pulumi:"payload"`
}

// A resource that represents the inline import job payload.
type InlinePayloadInfoResponseOutput struct{ *pulumi.OutputState }

func (InlinePayloadInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InlinePayloadInfoResponse)(nil)).Elem()
}

func (o InlinePayloadInfoResponseOutput) ToInlinePayloadInfoResponseOutput() InlinePayloadInfoResponseOutput {
	return o
}

func (o InlinePayloadInfoResponseOutput) ToInlinePayloadInfoResponseOutputWithContext(ctx context.Context) InlinePayloadInfoResponseOutput {
	return o
}

// The import job format.
func (o InlinePayloadInfoResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v InlinePayloadInfoResponse) string { return v.Format }).(pulumi.StringOutput)
}

// List of payload files.
func (o InlinePayloadInfoResponseOutput) Payload() PayloadFileResponseArrayOutput {
	return o.ApplyT(func(v InlinePayloadInfoResponse) []PayloadFileResponse { return v.Payload }).(PayloadFileResponseArrayOutput)
}

// The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.
type MachinePreferences struct {
	// Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.
	AllowedMachineSeries []MachineSeries `pulumi:"allowedMachineSeries"`
}

// MachinePreferencesInput is an input type that accepts MachinePreferencesArgs and MachinePreferencesOutput values.
// You can construct a concrete instance of `MachinePreferencesInput` via:
//
//	MachinePreferencesArgs{...}
type MachinePreferencesInput interface {
	pulumi.Input

	ToMachinePreferencesOutput() MachinePreferencesOutput
	ToMachinePreferencesOutputWithContext(context.Context) MachinePreferencesOutput
}

// The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.
type MachinePreferencesArgs struct {
	// Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.
	AllowedMachineSeries MachineSeriesArrayInput `pulumi:"allowedMachineSeries"`
}

func (MachinePreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePreferences)(nil)).Elem()
}

func (i MachinePreferencesArgs) ToMachinePreferencesOutput() MachinePreferencesOutput {
	return i.ToMachinePreferencesOutputWithContext(context.Background())
}

func (i MachinePreferencesArgs) ToMachinePreferencesOutputWithContext(ctx context.Context) MachinePreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePreferencesOutput)
}

func (i MachinePreferencesArgs) ToMachinePreferencesPtrOutput() MachinePreferencesPtrOutput {
	return i.ToMachinePreferencesPtrOutputWithContext(context.Background())
}

func (i MachinePreferencesArgs) ToMachinePreferencesPtrOutputWithContext(ctx context.Context) MachinePreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePreferencesOutput).ToMachinePreferencesPtrOutputWithContext(ctx)
}

// MachinePreferencesPtrInput is an input type that accepts MachinePreferencesArgs, MachinePreferencesPtr and MachinePreferencesPtrOutput values.
// You can construct a concrete instance of `MachinePreferencesPtrInput` via:
//
//	        MachinePreferencesArgs{...}
//
//	or:
//
//	        nil
type MachinePreferencesPtrInput interface {
	pulumi.Input

	ToMachinePreferencesPtrOutput() MachinePreferencesPtrOutput
	ToMachinePreferencesPtrOutputWithContext(context.Context) MachinePreferencesPtrOutput
}

type machinePreferencesPtrType MachinePreferencesArgs

func MachinePreferencesPtr(v *MachinePreferencesArgs) MachinePreferencesPtrInput {
	return (*machinePreferencesPtrType)(v)
}

func (*machinePreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePreferences)(nil)).Elem()
}

func (i *machinePreferencesPtrType) ToMachinePreferencesPtrOutput() MachinePreferencesPtrOutput {
	return i.ToMachinePreferencesPtrOutputWithContext(context.Background())
}

func (i *machinePreferencesPtrType) ToMachinePreferencesPtrOutputWithContext(ctx context.Context) MachinePreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachinePreferencesPtrOutput)
}

// The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.
type MachinePreferencesOutput struct{ *pulumi.OutputState }

func (MachinePreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePreferences)(nil)).Elem()
}

func (o MachinePreferencesOutput) ToMachinePreferencesOutput() MachinePreferencesOutput {
	return o
}

func (o MachinePreferencesOutput) ToMachinePreferencesOutputWithContext(ctx context.Context) MachinePreferencesOutput {
	return o
}

func (o MachinePreferencesOutput) ToMachinePreferencesPtrOutput() MachinePreferencesPtrOutput {
	return o.ToMachinePreferencesPtrOutputWithContext(context.Background())
}

func (o MachinePreferencesOutput) ToMachinePreferencesPtrOutputWithContext(ctx context.Context) MachinePreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachinePreferences) *MachinePreferences {
		return &v
	}).(MachinePreferencesPtrOutput)
}

// Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.
func (o MachinePreferencesOutput) AllowedMachineSeries() MachineSeriesArrayOutput {
	return o.ApplyT(func(v MachinePreferences) []MachineSeries { return v.AllowedMachineSeries }).(MachineSeriesArrayOutput)
}

type MachinePreferencesPtrOutput struct{ *pulumi.OutputState }

func (MachinePreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachinePreferences)(nil)).Elem()
}

func (o MachinePreferencesPtrOutput) ToMachinePreferencesPtrOutput() MachinePreferencesPtrOutput {
	return o
}

func (o MachinePreferencesPtrOutput) ToMachinePreferencesPtrOutputWithContext(ctx context.Context) MachinePreferencesPtrOutput {
	return o
}

func (o MachinePreferencesPtrOutput) Elem() MachinePreferencesOutput {
	return o.ApplyT(func(v *MachinePreferences) MachinePreferences {
		if v != nil {
			return *v
		}
		var ret MachinePreferences
		return ret
	}).(MachinePreferencesOutput)
}

// Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.
func (o MachinePreferencesPtrOutput) AllowedMachineSeries() MachineSeriesArrayOutput {
	return o.ApplyT(func(v *MachinePreferences) []MachineSeries {
		if v == nil {
			return nil
		}
		return v.AllowedMachineSeries
	}).(MachineSeriesArrayOutput)
}

// The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.
type MachinePreferencesResponse struct {
	// Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.
	AllowedMachineSeries []MachineSeriesResponse `pulumi:"allowedMachineSeries"`
}

// The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.
type MachinePreferencesResponseOutput struct{ *pulumi.OutputState }

func (MachinePreferencesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachinePreferencesResponse)(nil)).Elem()
}

func (o MachinePreferencesResponseOutput) ToMachinePreferencesResponseOutput() MachinePreferencesResponseOutput {
	return o
}

func (o MachinePreferencesResponseOutput) ToMachinePreferencesResponseOutputWithContext(ctx context.Context) MachinePreferencesResponseOutput {
	return o
}

// Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.
func (o MachinePreferencesResponseOutput) AllowedMachineSeries() MachineSeriesResponseArrayOutput {
	return o.ApplyT(func(v MachinePreferencesResponse) []MachineSeriesResponse { return v.AllowedMachineSeries }).(MachineSeriesResponseArrayOutput)
}

// A Compute Engine machine series.
type MachineSeries struct {
	// Code to identify a Compute Engine machine series. Consult https://cloud.google.com/compute/docs/machine-resource#machine_type_comparison for more details on the available series.
	Code *string `pulumi:"code"`
}

// MachineSeriesInput is an input type that accepts MachineSeriesArgs and MachineSeriesOutput values.
// You can construct a concrete instance of `MachineSeriesInput` via:
//
//	MachineSeriesArgs{...}
type MachineSeriesInput interface {
	pulumi.Input

	ToMachineSeriesOutput() MachineSeriesOutput
	ToMachineSeriesOutputWithContext(context.Context) MachineSeriesOutput
}

// A Compute Engine machine series.
type MachineSeriesArgs struct {
	// Code to identify a Compute Engine machine series. Consult https://cloud.google.com/compute/docs/machine-resource#machine_type_comparison for more details on the available series.
	Code pulumi.StringPtrInput `pulumi:"code"`
}

func (MachineSeriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSeries)(nil)).Elem()
}

func (i MachineSeriesArgs) ToMachineSeriesOutput() MachineSeriesOutput {
	return i.ToMachineSeriesOutputWithContext(context.Background())
}

func (i MachineSeriesArgs) ToMachineSeriesOutputWithContext(ctx context.Context) MachineSeriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSeriesOutput)
}

// MachineSeriesArrayInput is an input type that accepts MachineSeriesArray and MachineSeriesArrayOutput values.
// You can construct a concrete instance of `MachineSeriesArrayInput` via:
//
//	MachineSeriesArray{ MachineSeriesArgs{...} }
type MachineSeriesArrayInput interface {
	pulumi.Input

	ToMachineSeriesArrayOutput() MachineSeriesArrayOutput
	ToMachineSeriesArrayOutputWithContext(context.Context) MachineSeriesArrayOutput
}

type MachineSeriesArray []MachineSeriesInput

func (MachineSeriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineSeries)(nil)).Elem()
}

func (i MachineSeriesArray) ToMachineSeriesArrayOutput() MachineSeriesArrayOutput {
	return i.ToMachineSeriesArrayOutputWithContext(context.Background())
}

func (i MachineSeriesArray) ToMachineSeriesArrayOutputWithContext(ctx context.Context) MachineSeriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineSeriesArrayOutput)
}

// A Compute Engine machine series.
type MachineSeriesOutput struct{ *pulumi.OutputState }

func (MachineSeriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSeries)(nil)).Elem()
}

func (o MachineSeriesOutput) ToMachineSeriesOutput() MachineSeriesOutput {
	return o
}

func (o MachineSeriesOutput) ToMachineSeriesOutputWithContext(ctx context.Context) MachineSeriesOutput {
	return o
}

// Code to identify a Compute Engine machine series. Consult https://cloud.google.com/compute/docs/machine-resource#machine_type_comparison for more details on the available series.
func (o MachineSeriesOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineSeries) *string { return v.Code }).(pulumi.StringPtrOutput)
}

type MachineSeriesArrayOutput struct{ *pulumi.OutputState }

func (MachineSeriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineSeries)(nil)).Elem()
}

func (o MachineSeriesArrayOutput) ToMachineSeriesArrayOutput() MachineSeriesArrayOutput {
	return o
}

func (o MachineSeriesArrayOutput) ToMachineSeriesArrayOutputWithContext(ctx context.Context) MachineSeriesArrayOutput {
	return o
}

func (o MachineSeriesArrayOutput) Index(i pulumi.IntInput) MachineSeriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineSeries {
		return vs[0].([]MachineSeries)[vs[1].(int)]
	}).(MachineSeriesOutput)
}

// A Compute Engine machine series.
type MachineSeriesResponse struct {
	// Code to identify a Compute Engine machine series. Consult https://cloud.google.com/compute/docs/machine-resource#machine_type_comparison for more details on the available series.
	Code string `pulumi:"code"`
}

// A Compute Engine machine series.
type MachineSeriesResponseOutput struct{ *pulumi.OutputState }

func (MachineSeriesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineSeriesResponse)(nil)).Elem()
}

func (o MachineSeriesResponseOutput) ToMachineSeriesResponseOutput() MachineSeriesResponseOutput {
	return o
}

func (o MachineSeriesResponseOutput) ToMachineSeriesResponseOutputWithContext(ctx context.Context) MachineSeriesResponseOutput {
	return o
}

// Code to identify a Compute Engine machine series. Consult https://cloud.google.com/compute/docs/machine-resource#machine_type_comparison for more details on the available series.
func (o MachineSeriesResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v MachineSeriesResponse) string { return v.Code }).(pulumi.StringOutput)
}

type MachineSeriesResponseArrayOutput struct{ *pulumi.OutputState }

func (MachineSeriesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineSeriesResponse)(nil)).Elem()
}

func (o MachineSeriesResponseArrayOutput) ToMachineSeriesResponseArrayOutput() MachineSeriesResponseArrayOutput {
	return o
}

func (o MachineSeriesResponseArrayOutput) ToMachineSeriesResponseArrayOutputWithContext(ctx context.Context) MachineSeriesResponseArrayOutput {
	return o
}

func (o MachineSeriesResponseArrayOutput) Index(i pulumi.IntInput) MachineSeriesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineSeriesResponse {
		return vs[0].([]MachineSeriesResponse)[vs[1].(int)]
	}).(MachineSeriesResponseOutput)
}

// Represents an amount of money with its currency type.
type MoneyResponse struct {
	// The three-letter currency code defined in ISO 4217.
	CurrencyCode string `pulumi:"currencyCode"`
	// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
	Nanos int `pulumi:"nanos"`
	// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
	Units string `pulumi:"units"`
}

// Represents an amount of money with its currency type.
type MoneyResponseOutput struct{ *pulumi.OutputState }

func (MoneyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MoneyResponse)(nil)).Elem()
}

func (o MoneyResponseOutput) ToMoneyResponseOutput() MoneyResponseOutput {
	return o
}

func (o MoneyResponseOutput) ToMoneyResponseOutputWithContext(ctx context.Context) MoneyResponseOutput {
	return o
}

// The three-letter currency code defined in ISO 4217.
func (o MoneyResponseOutput) CurrencyCode() pulumi.StringOutput {
	return o.ApplyT(func(v MoneyResponse) string { return v.CurrencyCode }).(pulumi.StringOutput)
}

// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
func (o MoneyResponseOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v MoneyResponse) int { return v.Nanos }).(pulumi.IntOutput)
}

// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
func (o MoneyResponseOutput) Units() pulumi.StringOutput {
	return o.ApplyT(func(v MoneyResponse) string { return v.Units }).(pulumi.StringOutput)
}

// Payload file for inline import job payload.
type PayloadFile struct {
	// The file data.
	Data *string `pulumi:"data"`
	// The file name.
	Name *string `pulumi:"name"`
}

// PayloadFileInput is an input type that accepts PayloadFileArgs and PayloadFileOutput values.
// You can construct a concrete instance of `PayloadFileInput` via:
//
//	PayloadFileArgs{...}
type PayloadFileInput interface {
	pulumi.Input

	ToPayloadFileOutput() PayloadFileOutput
	ToPayloadFileOutputWithContext(context.Context) PayloadFileOutput
}

// Payload file for inline import job payload.
type PayloadFileArgs struct {
	// The file data.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// The file name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PayloadFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PayloadFile)(nil)).Elem()
}

func (i PayloadFileArgs) ToPayloadFileOutput() PayloadFileOutput {
	return i.ToPayloadFileOutputWithContext(context.Background())
}

func (i PayloadFileArgs) ToPayloadFileOutputWithContext(ctx context.Context) PayloadFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PayloadFileOutput)
}

// PayloadFileArrayInput is an input type that accepts PayloadFileArray and PayloadFileArrayOutput values.
// You can construct a concrete instance of `PayloadFileArrayInput` via:
//
//	PayloadFileArray{ PayloadFileArgs{...} }
type PayloadFileArrayInput interface {
	pulumi.Input

	ToPayloadFileArrayOutput() PayloadFileArrayOutput
	ToPayloadFileArrayOutputWithContext(context.Context) PayloadFileArrayOutput
}

type PayloadFileArray []PayloadFileInput

func (PayloadFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PayloadFile)(nil)).Elem()
}

func (i PayloadFileArray) ToPayloadFileArrayOutput() PayloadFileArrayOutput {
	return i.ToPayloadFileArrayOutputWithContext(context.Background())
}

func (i PayloadFileArray) ToPayloadFileArrayOutputWithContext(ctx context.Context) PayloadFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PayloadFileArrayOutput)
}

// Payload file for inline import job payload.
type PayloadFileOutput struct{ *pulumi.OutputState }

func (PayloadFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PayloadFile)(nil)).Elem()
}

func (o PayloadFileOutput) ToPayloadFileOutput() PayloadFileOutput {
	return o
}

func (o PayloadFileOutput) ToPayloadFileOutputWithContext(ctx context.Context) PayloadFileOutput {
	return o
}

// The file data.
func (o PayloadFileOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PayloadFile) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// The file name.
func (o PayloadFileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PayloadFile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PayloadFileArrayOutput struct{ *pulumi.OutputState }

func (PayloadFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PayloadFile)(nil)).Elem()
}

func (o PayloadFileArrayOutput) ToPayloadFileArrayOutput() PayloadFileArrayOutput {
	return o
}

func (o PayloadFileArrayOutput) ToPayloadFileArrayOutputWithContext(ctx context.Context) PayloadFileArrayOutput {
	return o
}

func (o PayloadFileArrayOutput) Index(i pulumi.IntInput) PayloadFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PayloadFile {
		return vs[0].([]PayloadFile)[vs[1].(int)]
	}).(PayloadFileOutput)
}

// Payload file for inline import job payload.
type PayloadFileResponse struct {
	// The file data.
	Data string `pulumi:"data"`
	// The file name.
	Name string `pulumi:"name"`
}

// Payload file for inline import job payload.
type PayloadFileResponseOutput struct{ *pulumi.OutputState }

func (PayloadFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PayloadFileResponse)(nil)).Elem()
}

func (o PayloadFileResponseOutput) ToPayloadFileResponseOutput() PayloadFileResponseOutput {
	return o
}

func (o PayloadFileResponseOutput) ToPayloadFileResponseOutputWithContext(ctx context.Context) PayloadFileResponseOutput {
	return o
}

// The file data.
func (o PayloadFileResponseOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v PayloadFileResponse) string { return v.Data }).(pulumi.StringOutput)
}

// The file name.
func (o PayloadFileResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PayloadFileResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PayloadFileResponseArrayOutput struct{ *pulumi.OutputState }

func (PayloadFileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PayloadFileResponse)(nil)).Elem()
}

func (o PayloadFileResponseArrayOutput) ToPayloadFileResponseArrayOutput() PayloadFileResponseArrayOutput {
	return o
}

func (o PayloadFileResponseArrayOutput) ToPayloadFileResponseArrayOutputWithContext(ctx context.Context) PayloadFileResponseArrayOutput {
	return o
}

func (o PayloadFileResponseArrayOutput) Index(i pulumi.IntInput) PayloadFileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PayloadFileResponse {
		return vs[0].([]PayloadFileResponse)[vs[1].(int)]
	}).(PayloadFileResponseOutput)
}

// The user preferences relating to target regions.
type RegionPreferences struct {
	// A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.
	PreferredRegions []string `pulumi:"preferredRegions"`
}

// RegionPreferencesInput is an input type that accepts RegionPreferencesArgs and RegionPreferencesOutput values.
// You can construct a concrete instance of `RegionPreferencesInput` via:
//
//	RegionPreferencesArgs{...}
type RegionPreferencesInput interface {
	pulumi.Input

	ToRegionPreferencesOutput() RegionPreferencesOutput
	ToRegionPreferencesOutputWithContext(context.Context) RegionPreferencesOutput
}

// The user preferences relating to target regions.
type RegionPreferencesArgs struct {
	// A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.
	PreferredRegions pulumi.StringArrayInput `pulumi:"preferredRegions"`
}

func (RegionPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionPreferences)(nil)).Elem()
}

func (i RegionPreferencesArgs) ToRegionPreferencesOutput() RegionPreferencesOutput {
	return i.ToRegionPreferencesOutputWithContext(context.Background())
}

func (i RegionPreferencesArgs) ToRegionPreferencesOutputWithContext(ctx context.Context) RegionPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionPreferencesOutput)
}

func (i RegionPreferencesArgs) ToRegionPreferencesPtrOutput() RegionPreferencesPtrOutput {
	return i.ToRegionPreferencesPtrOutputWithContext(context.Background())
}

func (i RegionPreferencesArgs) ToRegionPreferencesPtrOutputWithContext(ctx context.Context) RegionPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionPreferencesOutput).ToRegionPreferencesPtrOutputWithContext(ctx)
}

// RegionPreferencesPtrInput is an input type that accepts RegionPreferencesArgs, RegionPreferencesPtr and RegionPreferencesPtrOutput values.
// You can construct a concrete instance of `RegionPreferencesPtrInput` via:
//
//	        RegionPreferencesArgs{...}
//
//	or:
//
//	        nil
type RegionPreferencesPtrInput interface {
	pulumi.Input

	ToRegionPreferencesPtrOutput() RegionPreferencesPtrOutput
	ToRegionPreferencesPtrOutputWithContext(context.Context) RegionPreferencesPtrOutput
}

type regionPreferencesPtrType RegionPreferencesArgs

func RegionPreferencesPtr(v *RegionPreferencesArgs) RegionPreferencesPtrInput {
	return (*regionPreferencesPtrType)(v)
}

func (*regionPreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionPreferences)(nil)).Elem()
}

func (i *regionPreferencesPtrType) ToRegionPreferencesPtrOutput() RegionPreferencesPtrOutput {
	return i.ToRegionPreferencesPtrOutputWithContext(context.Background())
}

func (i *regionPreferencesPtrType) ToRegionPreferencesPtrOutputWithContext(ctx context.Context) RegionPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionPreferencesPtrOutput)
}

// The user preferences relating to target regions.
type RegionPreferencesOutput struct{ *pulumi.OutputState }

func (RegionPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionPreferences)(nil)).Elem()
}

func (o RegionPreferencesOutput) ToRegionPreferencesOutput() RegionPreferencesOutput {
	return o
}

func (o RegionPreferencesOutput) ToRegionPreferencesOutputWithContext(ctx context.Context) RegionPreferencesOutput {
	return o
}

func (o RegionPreferencesOutput) ToRegionPreferencesPtrOutput() RegionPreferencesPtrOutput {
	return o.ToRegionPreferencesPtrOutputWithContext(context.Background())
}

func (o RegionPreferencesOutput) ToRegionPreferencesPtrOutputWithContext(ctx context.Context) RegionPreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegionPreferences) *RegionPreferences {
		return &v
	}).(RegionPreferencesPtrOutput)
}

// A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.
func (o RegionPreferencesOutput) PreferredRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionPreferences) []string { return v.PreferredRegions }).(pulumi.StringArrayOutput)
}

type RegionPreferencesPtrOutput struct{ *pulumi.OutputState }

func (RegionPreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionPreferences)(nil)).Elem()
}

func (o RegionPreferencesPtrOutput) ToRegionPreferencesPtrOutput() RegionPreferencesPtrOutput {
	return o
}

func (o RegionPreferencesPtrOutput) ToRegionPreferencesPtrOutputWithContext(ctx context.Context) RegionPreferencesPtrOutput {
	return o
}

func (o RegionPreferencesPtrOutput) Elem() RegionPreferencesOutput {
	return o.ApplyT(func(v *RegionPreferences) RegionPreferences {
		if v != nil {
			return *v
		}
		var ret RegionPreferences
		return ret
	}).(RegionPreferencesOutput)
}

// A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.
func (o RegionPreferencesPtrOutput) PreferredRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionPreferences) []string {
		if v == nil {
			return nil
		}
		return v.PreferredRegions
	}).(pulumi.StringArrayOutput)
}

// The user preferences relating to target regions.
type RegionPreferencesResponse struct {
	// A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.
	PreferredRegions []string `pulumi:"preferredRegions"`
}

// The user preferences relating to target regions.
type RegionPreferencesResponseOutput struct{ *pulumi.OutputState }

func (RegionPreferencesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionPreferencesResponse)(nil)).Elem()
}

func (o RegionPreferencesResponseOutput) ToRegionPreferencesResponseOutput() RegionPreferencesResponseOutput {
	return o
}

func (o RegionPreferencesResponseOutput) ToRegionPreferencesResponseOutputWithContext(ctx context.Context) RegionPreferencesResponseOutput {
	return o
}

// A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.
func (o RegionPreferencesResponseOutput) PreferredRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegionPreferencesResponse) []string { return v.PreferredRegions }).(pulumi.StringArrayOutput)
}

// Represents a combination of a group with a preference set.
type ReportConfigGroupPreferenceSetAssignment struct {
	// Name of the group.
	Group *string `pulumi:"group"`
	// Name of the Preference Set.
	PreferenceSet *string `pulumi:"preferenceSet"`
}

// ReportConfigGroupPreferenceSetAssignmentInput is an input type that accepts ReportConfigGroupPreferenceSetAssignmentArgs and ReportConfigGroupPreferenceSetAssignmentOutput values.
// You can construct a concrete instance of `ReportConfigGroupPreferenceSetAssignmentInput` via:
//
//	ReportConfigGroupPreferenceSetAssignmentArgs{...}
type ReportConfigGroupPreferenceSetAssignmentInput interface {
	pulumi.Input

	ToReportConfigGroupPreferenceSetAssignmentOutput() ReportConfigGroupPreferenceSetAssignmentOutput
	ToReportConfigGroupPreferenceSetAssignmentOutputWithContext(context.Context) ReportConfigGroupPreferenceSetAssignmentOutput
}

// Represents a combination of a group with a preference set.
type ReportConfigGroupPreferenceSetAssignmentArgs struct {
	// Name of the group.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Name of the Preference Set.
	PreferenceSet pulumi.StringPtrInput `pulumi:"preferenceSet"`
}

func (ReportConfigGroupPreferenceSetAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGroupPreferenceSetAssignment)(nil)).Elem()
}

func (i ReportConfigGroupPreferenceSetAssignmentArgs) ToReportConfigGroupPreferenceSetAssignmentOutput() ReportConfigGroupPreferenceSetAssignmentOutput {
	return i.ToReportConfigGroupPreferenceSetAssignmentOutputWithContext(context.Background())
}

func (i ReportConfigGroupPreferenceSetAssignmentArgs) ToReportConfigGroupPreferenceSetAssignmentOutputWithContext(ctx context.Context) ReportConfigGroupPreferenceSetAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigGroupPreferenceSetAssignmentOutput)
}

// ReportConfigGroupPreferenceSetAssignmentArrayInput is an input type that accepts ReportConfigGroupPreferenceSetAssignmentArray and ReportConfigGroupPreferenceSetAssignmentArrayOutput values.
// You can construct a concrete instance of `ReportConfigGroupPreferenceSetAssignmentArrayInput` via:
//
//	ReportConfigGroupPreferenceSetAssignmentArray{ ReportConfigGroupPreferenceSetAssignmentArgs{...} }
type ReportConfigGroupPreferenceSetAssignmentArrayInput interface {
	pulumi.Input

	ToReportConfigGroupPreferenceSetAssignmentArrayOutput() ReportConfigGroupPreferenceSetAssignmentArrayOutput
	ToReportConfigGroupPreferenceSetAssignmentArrayOutputWithContext(context.Context) ReportConfigGroupPreferenceSetAssignmentArrayOutput
}

type ReportConfigGroupPreferenceSetAssignmentArray []ReportConfigGroupPreferenceSetAssignmentInput

func (ReportConfigGroupPreferenceSetAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGroupPreferenceSetAssignment)(nil)).Elem()
}

func (i ReportConfigGroupPreferenceSetAssignmentArray) ToReportConfigGroupPreferenceSetAssignmentArrayOutput() ReportConfigGroupPreferenceSetAssignmentArrayOutput {
	return i.ToReportConfigGroupPreferenceSetAssignmentArrayOutputWithContext(context.Background())
}

func (i ReportConfigGroupPreferenceSetAssignmentArray) ToReportConfigGroupPreferenceSetAssignmentArrayOutputWithContext(ctx context.Context) ReportConfigGroupPreferenceSetAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigGroupPreferenceSetAssignmentArrayOutput)
}

// Represents a combination of a group with a preference set.
type ReportConfigGroupPreferenceSetAssignmentOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupPreferenceSetAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGroupPreferenceSetAssignment)(nil)).Elem()
}

func (o ReportConfigGroupPreferenceSetAssignmentOutput) ToReportConfigGroupPreferenceSetAssignmentOutput() ReportConfigGroupPreferenceSetAssignmentOutput {
	return o
}

func (o ReportConfigGroupPreferenceSetAssignmentOutput) ToReportConfigGroupPreferenceSetAssignmentOutputWithContext(ctx context.Context) ReportConfigGroupPreferenceSetAssignmentOutput {
	return o
}

// Name of the group.
func (o ReportConfigGroupPreferenceSetAssignmentOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigGroupPreferenceSetAssignment) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Name of the Preference Set.
func (o ReportConfigGroupPreferenceSetAssignmentOutput) PreferenceSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportConfigGroupPreferenceSetAssignment) *string { return v.PreferenceSet }).(pulumi.StringPtrOutput)
}

type ReportConfigGroupPreferenceSetAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupPreferenceSetAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGroupPreferenceSetAssignment)(nil)).Elem()
}

func (o ReportConfigGroupPreferenceSetAssignmentArrayOutput) ToReportConfigGroupPreferenceSetAssignmentArrayOutput() ReportConfigGroupPreferenceSetAssignmentArrayOutput {
	return o
}

func (o ReportConfigGroupPreferenceSetAssignmentArrayOutput) ToReportConfigGroupPreferenceSetAssignmentArrayOutputWithContext(ctx context.Context) ReportConfigGroupPreferenceSetAssignmentArrayOutput {
	return o
}

func (o ReportConfigGroupPreferenceSetAssignmentArrayOutput) Index(i pulumi.IntInput) ReportConfigGroupPreferenceSetAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigGroupPreferenceSetAssignment {
		return vs[0].([]ReportConfigGroupPreferenceSetAssignment)[vs[1].(int)]
	}).(ReportConfigGroupPreferenceSetAssignmentOutput)
}

// Represents a combination of a group with a preference set.
type ReportConfigGroupPreferenceSetAssignmentResponse struct {
	// Name of the group.
	Group string `pulumi:"group"`
	// Name of the Preference Set.
	PreferenceSet string `pulumi:"preferenceSet"`
}

// Represents a combination of a group with a preference set.
type ReportConfigGroupPreferenceSetAssignmentResponseOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupPreferenceSetAssignmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportConfigGroupPreferenceSetAssignmentResponse)(nil)).Elem()
}

func (o ReportConfigGroupPreferenceSetAssignmentResponseOutput) ToReportConfigGroupPreferenceSetAssignmentResponseOutput() ReportConfigGroupPreferenceSetAssignmentResponseOutput {
	return o
}

func (o ReportConfigGroupPreferenceSetAssignmentResponseOutput) ToReportConfigGroupPreferenceSetAssignmentResponseOutputWithContext(ctx context.Context) ReportConfigGroupPreferenceSetAssignmentResponseOutput {
	return o
}

// Name of the group.
func (o ReportConfigGroupPreferenceSetAssignmentResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGroupPreferenceSetAssignmentResponse) string { return v.Group }).(pulumi.StringOutput)
}

// Name of the Preference Set.
func (o ReportConfigGroupPreferenceSetAssignmentResponseOutput) PreferenceSet() pulumi.StringOutput {
	return o.ApplyT(func(v ReportConfigGroupPreferenceSetAssignmentResponse) string { return v.PreferenceSet }).(pulumi.StringOutput)
}

type ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportConfigGroupPreferenceSetAssignmentResponse)(nil)).Elem()
}

func (o ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput) ToReportConfigGroupPreferenceSetAssignmentResponseArrayOutput() ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput {
	return o
}

func (o ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput) ToReportConfigGroupPreferenceSetAssignmentResponseArrayOutputWithContext(ctx context.Context) ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput {
	return o
}

func (o ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput) Index(i pulumi.IntInput) ReportConfigGroupPreferenceSetAssignmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportConfigGroupPreferenceSetAssignmentResponse {
		return vs[0].([]ReportConfigGroupPreferenceSetAssignmentResponse)[vs[1].(int)]
	}).(ReportConfigGroupPreferenceSetAssignmentResponseOutput)
}

// Aggregate statistics for a collection of assets.
type ReportSummaryAssetAggregateStatsResponse struct {
	// Count of assets grouped by age.
	AssetAge ReportSummaryChartDataResponse `pulumi:"assetAge"`
	// Histogram showing a distribution of CPU core counts.
	CoreCountHistogram ReportSummaryHistogramChartDataResponse `pulumi:"coreCountHistogram"`
	// Histogram showing a distribution of memory sizes.
	MemoryBytesHistogram ReportSummaryHistogramChartDataResponse `pulumi:"memoryBytesHistogram"`
	// Total memory split into Used/Free buckets.
	MemoryUtilization ReportSummaryChartDataResponse `pulumi:"memoryUtilization"`
	// Total memory split into Used/Free buckets.
	MemoryUtilizationChart ReportSummaryUtilizationChartDataResponse `pulumi:"memoryUtilizationChart"`
	// Count of assets grouped by Operating System families.
	OperatingSystem ReportSummaryChartDataResponse `pulumi:"operatingSystem"`
	// Histogram showing a distribution of memory sizes.
	StorageBytesHistogram ReportSummaryHistogramChartDataResponse `pulumi:"storageBytesHistogram"`
	// Total storage split into Used/Free buckets.
	StorageUtilization ReportSummaryChartDataResponse `pulumi:"storageUtilization"`
	// Total memory split into Used/Free buckets.
	StorageUtilizationChart ReportSummaryUtilizationChartDataResponse `pulumi:"storageUtilizationChart"`
	// Count of the number of unique assets in this collection.
	TotalAssets string `pulumi:"totalAssets"`
	// Sum of the CPU core count of all the assets in this collection.
	TotalCores string `pulumi:"totalCores"`
	// Sum of the memory in bytes of all the assets in this collection.
	TotalMemoryBytes string `pulumi:"totalMemoryBytes"`
	// Sum of persistent storage in bytes of all the assets in this collection.
	TotalStorageBytes string `pulumi:"totalStorageBytes"`
}

// Aggregate statistics for a collection of assets.
type ReportSummaryAssetAggregateStatsResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryAssetAggregateStatsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryAssetAggregateStatsResponse)(nil)).Elem()
}

func (o ReportSummaryAssetAggregateStatsResponseOutput) ToReportSummaryAssetAggregateStatsResponseOutput() ReportSummaryAssetAggregateStatsResponseOutput {
	return o
}

func (o ReportSummaryAssetAggregateStatsResponseOutput) ToReportSummaryAssetAggregateStatsResponseOutputWithContext(ctx context.Context) ReportSummaryAssetAggregateStatsResponseOutput {
	return o
}

// Count of assets grouped by age.
func (o ReportSummaryAssetAggregateStatsResponseOutput) AssetAge() ReportSummaryChartDataResponseOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) ReportSummaryChartDataResponse { return v.AssetAge }).(ReportSummaryChartDataResponseOutput)
}

// Histogram showing a distribution of CPU core counts.
func (o ReportSummaryAssetAggregateStatsResponseOutput) CoreCountHistogram() ReportSummaryHistogramChartDataResponseOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) ReportSummaryHistogramChartDataResponse {
		return v.CoreCountHistogram
	}).(ReportSummaryHistogramChartDataResponseOutput)
}

// Histogram showing a distribution of memory sizes.
func (o ReportSummaryAssetAggregateStatsResponseOutput) MemoryBytesHistogram() ReportSummaryHistogramChartDataResponseOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) ReportSummaryHistogramChartDataResponse {
		return v.MemoryBytesHistogram
	}).(ReportSummaryHistogramChartDataResponseOutput)
}

// Total memory split into Used/Free buckets.
func (o ReportSummaryAssetAggregateStatsResponseOutput) MemoryUtilization() ReportSummaryChartDataResponseOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) ReportSummaryChartDataResponse {
		return v.MemoryUtilization
	}).(ReportSummaryChartDataResponseOutput)
}

// Total memory split into Used/Free buckets.
func (o ReportSummaryAssetAggregateStatsResponseOutput) MemoryUtilizationChart() ReportSummaryUtilizationChartDataResponseOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) ReportSummaryUtilizationChartDataResponse {
		return v.MemoryUtilizationChart
	}).(ReportSummaryUtilizationChartDataResponseOutput)
}

// Count of assets grouped by Operating System families.
func (o ReportSummaryAssetAggregateStatsResponseOutput) OperatingSystem() ReportSummaryChartDataResponseOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) ReportSummaryChartDataResponse {
		return v.OperatingSystem
	}).(ReportSummaryChartDataResponseOutput)
}

// Histogram showing a distribution of memory sizes.
func (o ReportSummaryAssetAggregateStatsResponseOutput) StorageBytesHistogram() ReportSummaryHistogramChartDataResponseOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) ReportSummaryHistogramChartDataResponse {
		return v.StorageBytesHistogram
	}).(ReportSummaryHistogramChartDataResponseOutput)
}

// Total storage split into Used/Free buckets.
func (o ReportSummaryAssetAggregateStatsResponseOutput) StorageUtilization() ReportSummaryChartDataResponseOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) ReportSummaryChartDataResponse {
		return v.StorageUtilization
	}).(ReportSummaryChartDataResponseOutput)
}

// Total memory split into Used/Free buckets.
func (o ReportSummaryAssetAggregateStatsResponseOutput) StorageUtilizationChart() ReportSummaryUtilizationChartDataResponseOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) ReportSummaryUtilizationChartDataResponse {
		return v.StorageUtilizationChart
	}).(ReportSummaryUtilizationChartDataResponseOutput)
}

// Count of the number of unique assets in this collection.
func (o ReportSummaryAssetAggregateStatsResponseOutput) TotalAssets() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) string { return v.TotalAssets }).(pulumi.StringOutput)
}

// Sum of the CPU core count of all the assets in this collection.
func (o ReportSummaryAssetAggregateStatsResponseOutput) TotalCores() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) string { return v.TotalCores }).(pulumi.StringOutput)
}

// Sum of the memory in bytes of all the assets in this collection.
func (o ReportSummaryAssetAggregateStatsResponseOutput) TotalMemoryBytes() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) string { return v.TotalMemoryBytes }).(pulumi.StringOutput)
}

// Sum of persistent storage in bytes of all the assets in this collection.
func (o ReportSummaryAssetAggregateStatsResponseOutput) TotalStorageBytes() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryAssetAggregateStatsResponse) string { return v.TotalStorageBytes }).(pulumi.StringOutput)
}

// Describes a single data point in the Chart.
type ReportSummaryChartDataDataPointResponse struct {
	// The X-axis label for this data point.
	Label string `pulumi:"label"`
	// The Y-axis value for this data point.
	Value float64 `pulumi:"value"`
}

// Describes a single data point in the Chart.
type ReportSummaryChartDataDataPointResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryChartDataDataPointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryChartDataDataPointResponse)(nil)).Elem()
}

func (o ReportSummaryChartDataDataPointResponseOutput) ToReportSummaryChartDataDataPointResponseOutput() ReportSummaryChartDataDataPointResponseOutput {
	return o
}

func (o ReportSummaryChartDataDataPointResponseOutput) ToReportSummaryChartDataDataPointResponseOutputWithContext(ctx context.Context) ReportSummaryChartDataDataPointResponseOutput {
	return o
}

// The X-axis label for this data point.
func (o ReportSummaryChartDataDataPointResponseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryChartDataDataPointResponse) string { return v.Label }).(pulumi.StringOutput)
}

// The Y-axis value for this data point.
func (o ReportSummaryChartDataDataPointResponseOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v ReportSummaryChartDataDataPointResponse) float64 { return v.Value }).(pulumi.Float64Output)
}

type ReportSummaryChartDataDataPointResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportSummaryChartDataDataPointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportSummaryChartDataDataPointResponse)(nil)).Elem()
}

func (o ReportSummaryChartDataDataPointResponseArrayOutput) ToReportSummaryChartDataDataPointResponseArrayOutput() ReportSummaryChartDataDataPointResponseArrayOutput {
	return o
}

func (o ReportSummaryChartDataDataPointResponseArrayOutput) ToReportSummaryChartDataDataPointResponseArrayOutputWithContext(ctx context.Context) ReportSummaryChartDataDataPointResponseArrayOutput {
	return o
}

func (o ReportSummaryChartDataDataPointResponseArrayOutput) Index(i pulumi.IntInput) ReportSummaryChartDataDataPointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportSummaryChartDataDataPointResponse {
		return vs[0].([]ReportSummaryChartDataDataPointResponse)[vs[1].(int)]
	}).(ReportSummaryChartDataDataPointResponseOutput)
}

// Describes a collection of data points rendered as a Chart.
type ReportSummaryChartDataResponse struct {
	// Each data point in the chart is represented as a name-value pair with the name being the x-axis label, and the value being the y-axis value.
	DataPoints []ReportSummaryChartDataDataPointResponse `pulumi:"dataPoints"`
}

// Describes a collection of data points rendered as a Chart.
type ReportSummaryChartDataResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryChartDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryChartDataResponse)(nil)).Elem()
}

func (o ReportSummaryChartDataResponseOutput) ToReportSummaryChartDataResponseOutput() ReportSummaryChartDataResponseOutput {
	return o
}

func (o ReportSummaryChartDataResponseOutput) ToReportSummaryChartDataResponseOutputWithContext(ctx context.Context) ReportSummaryChartDataResponseOutput {
	return o
}

// Each data point in the chart is represented as a name-value pair with the name being the x-axis label, and the value being the y-axis value.
func (o ReportSummaryChartDataResponseOutput) DataPoints() ReportSummaryChartDataDataPointResponseArrayOutput {
	return o.ApplyT(func(v ReportSummaryChartDataResponse) []ReportSummaryChartDataDataPointResponse { return v.DataPoints }).(ReportSummaryChartDataDataPointResponseArrayOutput)
}

// Summary Findings for a specific Group.
type ReportSummaryGroupFindingResponse struct {
	// Summary statistics for all the assets in this group.
	AssetAggregateStats ReportSummaryAssetAggregateStatsResponse `pulumi:"assetAggregateStats"`
	// Description for the Group.
	Description string `pulumi:"description"`
	// Display Name for the Group.
	DisplayName string `pulumi:"displayName"`
	// Count of the number of assets in this group which are also included in another group within the same report.
	OverlappingAssetCount string `pulumi:"overlappingAssetCount"`
	// Findings for each of the PreferenceSets for this group.
	PreferenceSetFindings []ReportSummaryGroupPreferenceSetFindingResponse `pulumi:"preferenceSetFindings"`
}

// Summary Findings for a specific Group.
type ReportSummaryGroupFindingResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryGroupFindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryGroupFindingResponse)(nil)).Elem()
}

func (o ReportSummaryGroupFindingResponseOutput) ToReportSummaryGroupFindingResponseOutput() ReportSummaryGroupFindingResponseOutput {
	return o
}

func (o ReportSummaryGroupFindingResponseOutput) ToReportSummaryGroupFindingResponseOutputWithContext(ctx context.Context) ReportSummaryGroupFindingResponseOutput {
	return o
}

// Summary statistics for all the assets in this group.
func (o ReportSummaryGroupFindingResponseOutput) AssetAggregateStats() ReportSummaryAssetAggregateStatsResponseOutput {
	return o.ApplyT(func(v ReportSummaryGroupFindingResponse) ReportSummaryAssetAggregateStatsResponse {
		return v.AssetAggregateStats
	}).(ReportSummaryAssetAggregateStatsResponseOutput)
}

// Description for the Group.
func (o ReportSummaryGroupFindingResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryGroupFindingResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Display Name for the Group.
func (o ReportSummaryGroupFindingResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryGroupFindingResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Count of the number of assets in this group which are also included in another group within the same report.
func (o ReportSummaryGroupFindingResponseOutput) OverlappingAssetCount() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryGroupFindingResponse) string { return v.OverlappingAssetCount }).(pulumi.StringOutput)
}

// Findings for each of the PreferenceSets for this group.
func (o ReportSummaryGroupFindingResponseOutput) PreferenceSetFindings() ReportSummaryGroupPreferenceSetFindingResponseArrayOutput {
	return o.ApplyT(func(v ReportSummaryGroupFindingResponse) []ReportSummaryGroupPreferenceSetFindingResponse {
		return v.PreferenceSetFindings
	}).(ReportSummaryGroupPreferenceSetFindingResponseArrayOutput)
}

type ReportSummaryGroupFindingResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportSummaryGroupFindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportSummaryGroupFindingResponse)(nil)).Elem()
}

func (o ReportSummaryGroupFindingResponseArrayOutput) ToReportSummaryGroupFindingResponseArrayOutput() ReportSummaryGroupFindingResponseArrayOutput {
	return o
}

func (o ReportSummaryGroupFindingResponseArrayOutput) ToReportSummaryGroupFindingResponseArrayOutputWithContext(ctx context.Context) ReportSummaryGroupFindingResponseArrayOutput {
	return o
}

func (o ReportSummaryGroupFindingResponseArrayOutput) Index(i pulumi.IntInput) ReportSummaryGroupFindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportSummaryGroupFindingResponse {
		return vs[0].([]ReportSummaryGroupFindingResponse)[vs[1].(int)]
	}).(ReportSummaryGroupFindingResponseOutput)
}

// Summary Findings for a specific Group/PreferenceSet combination.
type ReportSummaryGroupPreferenceSetFindingResponse struct {
	// Description for the Preference Set.
	Description string `pulumi:"description"`
	// Display Name of the Preference Set
	DisplayName string `pulumi:"displayName"`
	// A set of findings that applies to all machines in the input.
	MachineFinding ReportSummaryMachineFindingResponse `pulumi:"machineFinding"`
	// A set of preferences that applies to all machines in the context.
	MachinePreferences VirtualMachinePreferencesResponse `pulumi:"machinePreferences"`
	// Compute monthly cost for this preference set.
	MonthlyCostCompute MoneyResponse `pulumi:"monthlyCostCompute"`
	// Network Egress monthly cost for this preference set.
	MonthlyCostNetworkEgress MoneyResponse `pulumi:"monthlyCostNetworkEgress"`
	// Licensing monthly cost for this preference set.
	MonthlyCostOsLicense MoneyResponse `pulumi:"monthlyCostOsLicense"`
	// Miscellaneous monthly cost for this preference set.
	MonthlyCostOther MoneyResponse `pulumi:"monthlyCostOther"`
	// Storage monthly cost for this preference set.
	MonthlyCostStorage MoneyResponse `pulumi:"monthlyCostStorage"`
	// Total monthly cost for this preference set.
	MonthlyCostTotal MoneyResponse `pulumi:"monthlyCostTotal"`
	// Target region for this Preference Set
	PreferredRegion string `pulumi:"preferredRegion"`
	// Text describing the pricing track specified for this Preference Set
	PricingTrack string `pulumi:"pricingTrack"`
	// Text describing the business priority specified for this Preference Set
	TopPriority string `pulumi:"topPriority"`
}

// Summary Findings for a specific Group/PreferenceSet combination.
type ReportSummaryGroupPreferenceSetFindingResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryGroupPreferenceSetFindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryGroupPreferenceSetFindingResponse)(nil)).Elem()
}

func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) ToReportSummaryGroupPreferenceSetFindingResponseOutput() ReportSummaryGroupPreferenceSetFindingResponseOutput {
	return o
}

func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) ToReportSummaryGroupPreferenceSetFindingResponseOutputWithContext(ctx context.Context) ReportSummaryGroupPreferenceSetFindingResponseOutput {
	return o
}

// Description for the Preference Set.
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Display Name of the Preference Set
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// A set of findings that applies to all machines in the input.
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) MachineFinding() ReportSummaryMachineFindingResponseOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) ReportSummaryMachineFindingResponse {
		return v.MachineFinding
	}).(ReportSummaryMachineFindingResponseOutput)
}

// A set of preferences that applies to all machines in the context.
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) MachinePreferences() VirtualMachinePreferencesResponseOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) VirtualMachinePreferencesResponse {
		return v.MachinePreferences
	}).(VirtualMachinePreferencesResponseOutput)
}

// Compute monthly cost for this preference set.
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) MonthlyCostCompute() MoneyResponseOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) MoneyResponse { return v.MonthlyCostCompute }).(MoneyResponseOutput)
}

// Network Egress monthly cost for this preference set.
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) MonthlyCostNetworkEgress() MoneyResponseOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) MoneyResponse {
		return v.MonthlyCostNetworkEgress
	}).(MoneyResponseOutput)
}

// Licensing monthly cost for this preference set.
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) MonthlyCostOsLicense() MoneyResponseOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) MoneyResponse { return v.MonthlyCostOsLicense }).(MoneyResponseOutput)
}

// Miscellaneous monthly cost for this preference set.
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) MonthlyCostOther() MoneyResponseOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) MoneyResponse { return v.MonthlyCostOther }).(MoneyResponseOutput)
}

// Storage monthly cost for this preference set.
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) MonthlyCostStorage() MoneyResponseOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) MoneyResponse { return v.MonthlyCostStorage }).(MoneyResponseOutput)
}

// Total monthly cost for this preference set.
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) MonthlyCostTotal() MoneyResponseOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) MoneyResponse { return v.MonthlyCostTotal }).(MoneyResponseOutput)
}

// Target region for this Preference Set
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) PreferredRegion() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) string { return v.PreferredRegion }).(pulumi.StringOutput)
}

// Text describing the pricing track specified for this Preference Set
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) PricingTrack() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) string { return v.PricingTrack }).(pulumi.StringOutput)
}

// Text describing the business priority specified for this Preference Set
func (o ReportSummaryGroupPreferenceSetFindingResponseOutput) TopPriority() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryGroupPreferenceSetFindingResponse) string { return v.TopPriority }).(pulumi.StringOutput)
}

type ReportSummaryGroupPreferenceSetFindingResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportSummaryGroupPreferenceSetFindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportSummaryGroupPreferenceSetFindingResponse)(nil)).Elem()
}

func (o ReportSummaryGroupPreferenceSetFindingResponseArrayOutput) ToReportSummaryGroupPreferenceSetFindingResponseArrayOutput() ReportSummaryGroupPreferenceSetFindingResponseArrayOutput {
	return o
}

func (o ReportSummaryGroupPreferenceSetFindingResponseArrayOutput) ToReportSummaryGroupPreferenceSetFindingResponseArrayOutputWithContext(ctx context.Context) ReportSummaryGroupPreferenceSetFindingResponseArrayOutput {
	return o
}

func (o ReportSummaryGroupPreferenceSetFindingResponseArrayOutput) Index(i pulumi.IntInput) ReportSummaryGroupPreferenceSetFindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportSummaryGroupPreferenceSetFindingResponse {
		return vs[0].([]ReportSummaryGroupPreferenceSetFindingResponse)[vs[1].(int)]
	}).(ReportSummaryGroupPreferenceSetFindingResponseOutput)
}

// A histogram bucket with a lower and upper bound, and a count of items with a field value between those bounds. The lower bound is inclusive and the upper bound is exclusive. Lower bound may be -infinity and upper bound may be infinity.
type ReportSummaryHistogramChartDataBucketResponse struct {
	// Count of items in the bucket.
	Count string `pulumi:"count"`
	// Lower bound - inclusive.
	LowerBound string `pulumi:"lowerBound"`
	// Upper bound - exclusive.
	UpperBound string `pulumi:"upperBound"`
}

// A histogram bucket with a lower and upper bound, and a count of items with a field value between those bounds. The lower bound is inclusive and the upper bound is exclusive. Lower bound may be -infinity and upper bound may be infinity.
type ReportSummaryHistogramChartDataBucketResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryHistogramChartDataBucketResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryHistogramChartDataBucketResponse)(nil)).Elem()
}

func (o ReportSummaryHistogramChartDataBucketResponseOutput) ToReportSummaryHistogramChartDataBucketResponseOutput() ReportSummaryHistogramChartDataBucketResponseOutput {
	return o
}

func (o ReportSummaryHistogramChartDataBucketResponseOutput) ToReportSummaryHistogramChartDataBucketResponseOutputWithContext(ctx context.Context) ReportSummaryHistogramChartDataBucketResponseOutput {
	return o
}

// Count of items in the bucket.
func (o ReportSummaryHistogramChartDataBucketResponseOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryHistogramChartDataBucketResponse) string { return v.Count }).(pulumi.StringOutput)
}

// Lower bound - inclusive.
func (o ReportSummaryHistogramChartDataBucketResponseOutput) LowerBound() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryHistogramChartDataBucketResponse) string { return v.LowerBound }).(pulumi.StringOutput)
}

// Upper bound - exclusive.
func (o ReportSummaryHistogramChartDataBucketResponseOutput) UpperBound() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryHistogramChartDataBucketResponse) string { return v.UpperBound }).(pulumi.StringOutput)
}

type ReportSummaryHistogramChartDataBucketResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportSummaryHistogramChartDataBucketResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportSummaryHistogramChartDataBucketResponse)(nil)).Elem()
}

func (o ReportSummaryHistogramChartDataBucketResponseArrayOutput) ToReportSummaryHistogramChartDataBucketResponseArrayOutput() ReportSummaryHistogramChartDataBucketResponseArrayOutput {
	return o
}

func (o ReportSummaryHistogramChartDataBucketResponseArrayOutput) ToReportSummaryHistogramChartDataBucketResponseArrayOutputWithContext(ctx context.Context) ReportSummaryHistogramChartDataBucketResponseArrayOutput {
	return o
}

func (o ReportSummaryHistogramChartDataBucketResponseArrayOutput) Index(i pulumi.IntInput) ReportSummaryHistogramChartDataBucketResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportSummaryHistogramChartDataBucketResponse {
		return vs[0].([]ReportSummaryHistogramChartDataBucketResponse)[vs[1].(int)]
	}).(ReportSummaryHistogramChartDataBucketResponseOutput)
}

// A Histogram Chart shows a distribution of values into buckets, showing a count of values which fall into a bucket.
type ReportSummaryHistogramChartDataResponse struct {
	// Buckets in the histogram. There will be `n+1` buckets matching `n` lower bounds in the request. The first bucket will be from -infinity to the first bound. Subsequent buckets will be between one bound and the next. The final bucket will be from the final bound to infinity.
	Buckets []ReportSummaryHistogramChartDataBucketResponse `pulumi:"buckets"`
}

// A Histogram Chart shows a distribution of values into buckets, showing a count of values which fall into a bucket.
type ReportSummaryHistogramChartDataResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryHistogramChartDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryHistogramChartDataResponse)(nil)).Elem()
}

func (o ReportSummaryHistogramChartDataResponseOutput) ToReportSummaryHistogramChartDataResponseOutput() ReportSummaryHistogramChartDataResponseOutput {
	return o
}

func (o ReportSummaryHistogramChartDataResponseOutput) ToReportSummaryHistogramChartDataResponseOutputWithContext(ctx context.Context) ReportSummaryHistogramChartDataResponseOutput {
	return o
}

// Buckets in the histogram. There will be `n+1` buckets matching `n` lower bounds in the request. The first bucket will be from -infinity to the first bound. Subsequent buckets will be between one bound and the next. The final bucket will be from the final bound to infinity.
func (o ReportSummaryHistogramChartDataResponseOutput) Buckets() ReportSummaryHistogramChartDataBucketResponseArrayOutput {
	return o.ApplyT(func(v ReportSummaryHistogramChartDataResponse) []ReportSummaryHistogramChartDataBucketResponse {
		return v.Buckets
	}).(ReportSummaryHistogramChartDataBucketResponseArrayOutput)
}

// A set of findings that applies to assets of type Virtual/Physical Machine.
type ReportSummaryMachineFindingResponse struct {
	// Count of assets which were allocated.
	AllocatedAssetCount string `pulumi:"allocatedAssetCount"`
	// Set of disk types allocated to assets.
	AllocatedDiskTypes []string `pulumi:"allocatedDiskTypes"`
	// Set of regions in which the assets were allocated.
	AllocatedRegions []string `pulumi:"allocatedRegions"`
	// Distribution of assets based on the Machine Series.
	MachineSeriesAllocations []ReportSummaryMachineSeriesAllocationResponse `pulumi:"machineSeriesAllocations"`
}

// A set of findings that applies to assets of type Virtual/Physical Machine.
type ReportSummaryMachineFindingResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryMachineFindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryMachineFindingResponse)(nil)).Elem()
}

func (o ReportSummaryMachineFindingResponseOutput) ToReportSummaryMachineFindingResponseOutput() ReportSummaryMachineFindingResponseOutput {
	return o
}

func (o ReportSummaryMachineFindingResponseOutput) ToReportSummaryMachineFindingResponseOutputWithContext(ctx context.Context) ReportSummaryMachineFindingResponseOutput {
	return o
}

// Count of assets which were allocated.
func (o ReportSummaryMachineFindingResponseOutput) AllocatedAssetCount() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryMachineFindingResponse) string { return v.AllocatedAssetCount }).(pulumi.StringOutput)
}

// Set of disk types allocated to assets.
func (o ReportSummaryMachineFindingResponseOutput) AllocatedDiskTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportSummaryMachineFindingResponse) []string { return v.AllocatedDiskTypes }).(pulumi.StringArrayOutput)
}

// Set of regions in which the assets were allocated.
func (o ReportSummaryMachineFindingResponseOutput) AllocatedRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReportSummaryMachineFindingResponse) []string { return v.AllocatedRegions }).(pulumi.StringArrayOutput)
}

// Distribution of assets based on the Machine Series.
func (o ReportSummaryMachineFindingResponseOutput) MachineSeriesAllocations() ReportSummaryMachineSeriesAllocationResponseArrayOutput {
	return o.ApplyT(func(v ReportSummaryMachineFindingResponse) []ReportSummaryMachineSeriesAllocationResponse {
		return v.MachineSeriesAllocations
	}).(ReportSummaryMachineSeriesAllocationResponseArrayOutput)
}

// Represents a data point tracking the count of assets allocated for a specific Machine Series.
type ReportSummaryMachineSeriesAllocationResponse struct {
	// Count of assets allocated to this machine series.
	AllocatedAssetCount string `pulumi:"allocatedAssetCount"`
	// The Machine Series (e.g. "E2", "N2")
	MachineSeries MachineSeriesResponse `pulumi:"machineSeries"`
}

// Represents a data point tracking the count of assets allocated for a specific Machine Series.
type ReportSummaryMachineSeriesAllocationResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryMachineSeriesAllocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryMachineSeriesAllocationResponse)(nil)).Elem()
}

func (o ReportSummaryMachineSeriesAllocationResponseOutput) ToReportSummaryMachineSeriesAllocationResponseOutput() ReportSummaryMachineSeriesAllocationResponseOutput {
	return o
}

func (o ReportSummaryMachineSeriesAllocationResponseOutput) ToReportSummaryMachineSeriesAllocationResponseOutputWithContext(ctx context.Context) ReportSummaryMachineSeriesAllocationResponseOutput {
	return o
}

// Count of assets allocated to this machine series.
func (o ReportSummaryMachineSeriesAllocationResponseOutput) AllocatedAssetCount() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryMachineSeriesAllocationResponse) string { return v.AllocatedAssetCount }).(pulumi.StringOutput)
}

// The Machine Series (e.g. "E2", "N2")
func (o ReportSummaryMachineSeriesAllocationResponseOutput) MachineSeries() MachineSeriesResponseOutput {
	return o.ApplyT(func(v ReportSummaryMachineSeriesAllocationResponse) MachineSeriesResponse { return v.MachineSeries }).(MachineSeriesResponseOutput)
}

type ReportSummaryMachineSeriesAllocationResponseArrayOutput struct{ *pulumi.OutputState }

func (ReportSummaryMachineSeriesAllocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportSummaryMachineSeriesAllocationResponse)(nil)).Elem()
}

func (o ReportSummaryMachineSeriesAllocationResponseArrayOutput) ToReportSummaryMachineSeriesAllocationResponseArrayOutput() ReportSummaryMachineSeriesAllocationResponseArrayOutput {
	return o
}

func (o ReportSummaryMachineSeriesAllocationResponseArrayOutput) ToReportSummaryMachineSeriesAllocationResponseArrayOutputWithContext(ctx context.Context) ReportSummaryMachineSeriesAllocationResponseArrayOutput {
	return o
}

func (o ReportSummaryMachineSeriesAllocationResponseArrayOutput) Index(i pulumi.IntInput) ReportSummaryMachineSeriesAllocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportSummaryMachineSeriesAllocationResponse {
		return vs[0].([]ReportSummaryMachineSeriesAllocationResponse)[vs[1].(int)]
	}).(ReportSummaryMachineSeriesAllocationResponseOutput)
}

// Describes the Summary view of a Report, which contains aggregated values for all the groups and preference sets included in this Report.
type ReportSummaryResponse struct {
	// Aggregate statistics for all the assets across all the groups.
	AllAssetsStats ReportSummaryAssetAggregateStatsResponse `pulumi:"allAssetsStats"`
	// Findings for each Group included in this report.
	GroupFindings []ReportSummaryGroupFindingResponse `pulumi:"groupFindings"`
}

// Describes the Summary view of a Report, which contains aggregated values for all the groups and preference sets included in this Report.
type ReportSummaryResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryResponse)(nil)).Elem()
}

func (o ReportSummaryResponseOutput) ToReportSummaryResponseOutput() ReportSummaryResponseOutput {
	return o
}

func (o ReportSummaryResponseOutput) ToReportSummaryResponseOutputWithContext(ctx context.Context) ReportSummaryResponseOutput {
	return o
}

// Aggregate statistics for all the assets across all the groups.
func (o ReportSummaryResponseOutput) AllAssetsStats() ReportSummaryAssetAggregateStatsResponseOutput {
	return o.ApplyT(func(v ReportSummaryResponse) ReportSummaryAssetAggregateStatsResponse { return v.AllAssetsStats }).(ReportSummaryAssetAggregateStatsResponseOutput)
}

// Findings for each Group included in this report.
func (o ReportSummaryResponseOutput) GroupFindings() ReportSummaryGroupFindingResponseArrayOutput {
	return o.ApplyT(func(v ReportSummaryResponse) []ReportSummaryGroupFindingResponse { return v.GroupFindings }).(ReportSummaryGroupFindingResponseArrayOutput)
}

// Utilization Chart is a specific type of visualization which displays a metric classified into "Used" and "Free" buckets.
type ReportSummaryUtilizationChartDataResponse struct {
	// Aggregate value which falls into the "Free" bucket.
	Free string `pulumi:"free"`
	// Aggregate value which falls into the "Used" bucket.
	Used string `pulumi:"used"`
}

// Utilization Chart is a specific type of visualization which displays a metric classified into "Used" and "Free" buckets.
type ReportSummaryUtilizationChartDataResponseOutput struct{ *pulumi.OutputState }

func (ReportSummaryUtilizationChartDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSummaryUtilizationChartDataResponse)(nil)).Elem()
}

func (o ReportSummaryUtilizationChartDataResponseOutput) ToReportSummaryUtilizationChartDataResponseOutput() ReportSummaryUtilizationChartDataResponseOutput {
	return o
}

func (o ReportSummaryUtilizationChartDataResponseOutput) ToReportSummaryUtilizationChartDataResponseOutputWithContext(ctx context.Context) ReportSummaryUtilizationChartDataResponseOutput {
	return o
}

// Aggregate value which falls into the "Free" bucket.
func (o ReportSummaryUtilizationChartDataResponseOutput) Free() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryUtilizationChartDataResponse) string { return v.Free }).(pulumi.StringOutput)
}

// Aggregate value which falls into the "Used" bucket.
func (o ReportSummaryUtilizationChartDataResponseOutput) Used() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSummaryUtilizationChartDataResponse) string { return v.Used }).(pulumi.StringOutput)
}

// A resource that contains a URI to which a data file can be uploaded.
type UploadFileInfo struct {
}

// UploadFileInfoInput is an input type that accepts UploadFileInfoArgs and UploadFileInfoOutput values.
// You can construct a concrete instance of `UploadFileInfoInput` via:
//
//	UploadFileInfoArgs{...}
type UploadFileInfoInput interface {
	pulumi.Input

	ToUploadFileInfoOutput() UploadFileInfoOutput
	ToUploadFileInfoOutputWithContext(context.Context) UploadFileInfoOutput
}

// A resource that contains a URI to which a data file can be uploaded.
type UploadFileInfoArgs struct {
}

func (UploadFileInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadFileInfo)(nil)).Elem()
}

func (i UploadFileInfoArgs) ToUploadFileInfoOutput() UploadFileInfoOutput {
	return i.ToUploadFileInfoOutputWithContext(context.Background())
}

func (i UploadFileInfoArgs) ToUploadFileInfoOutputWithContext(ctx context.Context) UploadFileInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadFileInfoOutput)
}

func (i UploadFileInfoArgs) ToUploadFileInfoPtrOutput() UploadFileInfoPtrOutput {
	return i.ToUploadFileInfoPtrOutputWithContext(context.Background())
}

func (i UploadFileInfoArgs) ToUploadFileInfoPtrOutputWithContext(ctx context.Context) UploadFileInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadFileInfoOutput).ToUploadFileInfoPtrOutputWithContext(ctx)
}

// UploadFileInfoPtrInput is an input type that accepts UploadFileInfoArgs, UploadFileInfoPtr and UploadFileInfoPtrOutput values.
// You can construct a concrete instance of `UploadFileInfoPtrInput` via:
//
//	        UploadFileInfoArgs{...}
//
//	or:
//
//	        nil
type UploadFileInfoPtrInput interface {
	pulumi.Input

	ToUploadFileInfoPtrOutput() UploadFileInfoPtrOutput
	ToUploadFileInfoPtrOutputWithContext(context.Context) UploadFileInfoPtrOutput
}

type uploadFileInfoPtrType UploadFileInfoArgs

func UploadFileInfoPtr(v *UploadFileInfoArgs) UploadFileInfoPtrInput {
	return (*uploadFileInfoPtrType)(v)
}

func (*uploadFileInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UploadFileInfo)(nil)).Elem()
}

func (i *uploadFileInfoPtrType) ToUploadFileInfoPtrOutput() UploadFileInfoPtrOutput {
	return i.ToUploadFileInfoPtrOutputWithContext(context.Background())
}

func (i *uploadFileInfoPtrType) ToUploadFileInfoPtrOutputWithContext(ctx context.Context) UploadFileInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadFileInfoPtrOutput)
}

// A resource that contains a URI to which a data file can be uploaded.
type UploadFileInfoOutput struct{ *pulumi.OutputState }

func (UploadFileInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadFileInfo)(nil)).Elem()
}

func (o UploadFileInfoOutput) ToUploadFileInfoOutput() UploadFileInfoOutput {
	return o
}

func (o UploadFileInfoOutput) ToUploadFileInfoOutputWithContext(ctx context.Context) UploadFileInfoOutput {
	return o
}

func (o UploadFileInfoOutput) ToUploadFileInfoPtrOutput() UploadFileInfoPtrOutput {
	return o.ToUploadFileInfoPtrOutputWithContext(context.Background())
}

func (o UploadFileInfoOutput) ToUploadFileInfoPtrOutputWithContext(ctx context.Context) UploadFileInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UploadFileInfo) *UploadFileInfo {
		return &v
	}).(UploadFileInfoPtrOutput)
}

type UploadFileInfoPtrOutput struct{ *pulumi.OutputState }

func (UploadFileInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UploadFileInfo)(nil)).Elem()
}

func (o UploadFileInfoPtrOutput) ToUploadFileInfoPtrOutput() UploadFileInfoPtrOutput {
	return o
}

func (o UploadFileInfoPtrOutput) ToUploadFileInfoPtrOutputWithContext(ctx context.Context) UploadFileInfoPtrOutput {
	return o
}

func (o UploadFileInfoPtrOutput) Elem() UploadFileInfoOutput {
	return o.ApplyT(func(v *UploadFileInfo) UploadFileInfo {
		if v != nil {
			return *v
		}
		var ret UploadFileInfo
		return ret
	}).(UploadFileInfoOutput)
}

// A resource that contains a URI to which a data file can be uploaded.
type UploadFileInfoResponse struct {
	// The headers that were used to sign the URL.
	Headers map[string]string `pulumi:"headers"`
	// Upload URI for the file.
	SignedUri string `pulumi:"signedUri"`
	// Upload URI for the file.
	Uri string `pulumi:"uri"`
	// Expiration time of the upload URI.
	UriExpirationTime string `pulumi:"uriExpirationTime"`
}

// A resource that contains a URI to which a data file can be uploaded.
type UploadFileInfoResponseOutput struct{ *pulumi.OutputState }

func (UploadFileInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadFileInfoResponse)(nil)).Elem()
}

func (o UploadFileInfoResponseOutput) ToUploadFileInfoResponseOutput() UploadFileInfoResponseOutput {
	return o
}

func (o UploadFileInfoResponseOutput) ToUploadFileInfoResponseOutputWithContext(ctx context.Context) UploadFileInfoResponseOutput {
	return o
}

// The headers that were used to sign the URL.
func (o UploadFileInfoResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v UploadFileInfoResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Upload URI for the file.
func (o UploadFileInfoResponseOutput) SignedUri() pulumi.StringOutput {
	return o.ApplyT(func(v UploadFileInfoResponse) string { return v.SignedUri }).(pulumi.StringOutput)
}

// Upload URI for the file.
func (o UploadFileInfoResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UploadFileInfoResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Expiration time of the upload URI.
func (o UploadFileInfoResponseOutput) UriExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v UploadFileInfoResponse) string { return v.UriExpirationTime }).(pulumi.StringOutput)
}

// A resource that aggregates errors across import job files.
type ValidationReportResponse struct {
	// List of errors found in files.
	FileValidations []FileValidationReportResponse `pulumi:"fileValidations"`
	// List of job level errors.
	JobErrors []ImportErrorResponse `pulumi:"jobErrors"`
}

// A resource that aggregates errors across import job files.
type ValidationReportResponseOutput struct{ *pulumi.OutputState }

func (ValidationReportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationReportResponse)(nil)).Elem()
}

func (o ValidationReportResponseOutput) ToValidationReportResponseOutput() ValidationReportResponseOutput {
	return o
}

func (o ValidationReportResponseOutput) ToValidationReportResponseOutputWithContext(ctx context.Context) ValidationReportResponseOutput {
	return o
}

// List of errors found in files.
func (o ValidationReportResponseOutput) FileValidations() FileValidationReportResponseArrayOutput {
	return o.ApplyT(func(v ValidationReportResponse) []FileValidationReportResponse { return v.FileValidations }).(FileValidationReportResponseArrayOutput)
}

// List of job level errors.
func (o ValidationReportResponseOutput) JobErrors() ImportErrorResponseArrayOutput {
	return o.ApplyT(func(v ValidationReportResponse) []ImportErrorResponse { return v.JobErrors }).(ImportErrorResponseArrayOutput)
}

// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
type VirtualMachinePreferences struct {
	// Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
	CommitmentPlan *VirtualMachinePreferencesCommitmentPlan `pulumi:"commitmentPlan"`
	// Compute Engine preferences concern insights and recommendations for Compute Engine target.
	ComputeEnginePreferences *ComputeEnginePreferences `pulumi:"computeEnginePreferences"`
	// Region preferences for assets using this preference set. If you are unsure which value to set, the migration service API region is often a good value to start with.
	RegionPreferences *RegionPreferences `pulumi:"regionPreferences"`
	// Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
	SizingOptimizationStrategy *VirtualMachinePreferencesSizingOptimizationStrategy `pulumi:"sizingOptimizationStrategy"`
}

// VirtualMachinePreferencesInput is an input type that accepts VirtualMachinePreferencesArgs and VirtualMachinePreferencesOutput values.
// You can construct a concrete instance of `VirtualMachinePreferencesInput` via:
//
//	VirtualMachinePreferencesArgs{...}
type VirtualMachinePreferencesInput interface {
	pulumi.Input

	ToVirtualMachinePreferencesOutput() VirtualMachinePreferencesOutput
	ToVirtualMachinePreferencesOutputWithContext(context.Context) VirtualMachinePreferencesOutput
}

// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
type VirtualMachinePreferencesArgs struct {
	// Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
	CommitmentPlan VirtualMachinePreferencesCommitmentPlanPtrInput `pulumi:"commitmentPlan"`
	// Compute Engine preferences concern insights and recommendations for Compute Engine target.
	ComputeEnginePreferences ComputeEnginePreferencesPtrInput `pulumi:"computeEnginePreferences"`
	// Region preferences for assets using this preference set. If you are unsure which value to set, the migration service API region is often a good value to start with.
	RegionPreferences RegionPreferencesPtrInput `pulumi:"regionPreferences"`
	// Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
	SizingOptimizationStrategy VirtualMachinePreferencesSizingOptimizationStrategyPtrInput `pulumi:"sizingOptimizationStrategy"`
}

func (VirtualMachinePreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePreferences)(nil)).Elem()
}

func (i VirtualMachinePreferencesArgs) ToVirtualMachinePreferencesOutput() VirtualMachinePreferencesOutput {
	return i.ToVirtualMachinePreferencesOutputWithContext(context.Background())
}

func (i VirtualMachinePreferencesArgs) ToVirtualMachinePreferencesOutputWithContext(ctx context.Context) VirtualMachinePreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePreferencesOutput)
}

func (i VirtualMachinePreferencesArgs) ToVirtualMachinePreferencesPtrOutput() VirtualMachinePreferencesPtrOutput {
	return i.ToVirtualMachinePreferencesPtrOutputWithContext(context.Background())
}

func (i VirtualMachinePreferencesArgs) ToVirtualMachinePreferencesPtrOutputWithContext(ctx context.Context) VirtualMachinePreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePreferencesOutput).ToVirtualMachinePreferencesPtrOutputWithContext(ctx)
}

// VirtualMachinePreferencesPtrInput is an input type that accepts VirtualMachinePreferencesArgs, VirtualMachinePreferencesPtr and VirtualMachinePreferencesPtrOutput values.
// You can construct a concrete instance of `VirtualMachinePreferencesPtrInput` via:
//
//	        VirtualMachinePreferencesArgs{...}
//
//	or:
//
//	        nil
type VirtualMachinePreferencesPtrInput interface {
	pulumi.Input

	ToVirtualMachinePreferencesPtrOutput() VirtualMachinePreferencesPtrOutput
	ToVirtualMachinePreferencesPtrOutputWithContext(context.Context) VirtualMachinePreferencesPtrOutput
}

type virtualMachinePreferencesPtrType VirtualMachinePreferencesArgs

func VirtualMachinePreferencesPtr(v *VirtualMachinePreferencesArgs) VirtualMachinePreferencesPtrInput {
	return (*virtualMachinePreferencesPtrType)(v)
}

func (*virtualMachinePreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachinePreferences)(nil)).Elem()
}

func (i *virtualMachinePreferencesPtrType) ToVirtualMachinePreferencesPtrOutput() VirtualMachinePreferencesPtrOutput {
	return i.ToVirtualMachinePreferencesPtrOutputWithContext(context.Background())
}

func (i *virtualMachinePreferencesPtrType) ToVirtualMachinePreferencesPtrOutputWithContext(ctx context.Context) VirtualMachinePreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePreferencesPtrOutput)
}

// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
type VirtualMachinePreferencesOutput struct{ *pulumi.OutputState }

func (VirtualMachinePreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePreferences)(nil)).Elem()
}

func (o VirtualMachinePreferencesOutput) ToVirtualMachinePreferencesOutput() VirtualMachinePreferencesOutput {
	return o
}

func (o VirtualMachinePreferencesOutput) ToVirtualMachinePreferencesOutputWithContext(ctx context.Context) VirtualMachinePreferencesOutput {
	return o
}

func (o VirtualMachinePreferencesOutput) ToVirtualMachinePreferencesPtrOutput() VirtualMachinePreferencesPtrOutput {
	return o.ToVirtualMachinePreferencesPtrOutputWithContext(context.Background())
}

func (o VirtualMachinePreferencesOutput) ToVirtualMachinePreferencesPtrOutputWithContext(ctx context.Context) VirtualMachinePreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachinePreferences) *VirtualMachinePreferences {
		return &v
	}).(VirtualMachinePreferencesPtrOutput)
}

// Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
func (o VirtualMachinePreferencesOutput) CommitmentPlan() VirtualMachinePreferencesCommitmentPlanPtrOutput {
	return o.ApplyT(func(v VirtualMachinePreferences) *VirtualMachinePreferencesCommitmentPlan { return v.CommitmentPlan }).(VirtualMachinePreferencesCommitmentPlanPtrOutput)
}

// Compute Engine preferences concern insights and recommendations for Compute Engine target.
func (o VirtualMachinePreferencesOutput) ComputeEnginePreferences() ComputeEnginePreferencesPtrOutput {
	return o.ApplyT(func(v VirtualMachinePreferences) *ComputeEnginePreferences { return v.ComputeEnginePreferences }).(ComputeEnginePreferencesPtrOutput)
}

// Region preferences for assets using this preference set. If you are unsure which value to set, the migration service API region is often a good value to start with.
func (o VirtualMachinePreferencesOutput) RegionPreferences() RegionPreferencesPtrOutput {
	return o.ApplyT(func(v VirtualMachinePreferences) *RegionPreferences { return v.RegionPreferences }).(RegionPreferencesPtrOutput)
}

// Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
func (o VirtualMachinePreferencesOutput) SizingOptimizationStrategy() VirtualMachinePreferencesSizingOptimizationStrategyPtrOutput {
	return o.ApplyT(func(v VirtualMachinePreferences) *VirtualMachinePreferencesSizingOptimizationStrategy {
		return v.SizingOptimizationStrategy
	}).(VirtualMachinePreferencesSizingOptimizationStrategyPtrOutput)
}

type VirtualMachinePreferencesPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachinePreferences)(nil)).Elem()
}

func (o VirtualMachinePreferencesPtrOutput) ToVirtualMachinePreferencesPtrOutput() VirtualMachinePreferencesPtrOutput {
	return o
}

func (o VirtualMachinePreferencesPtrOutput) ToVirtualMachinePreferencesPtrOutputWithContext(ctx context.Context) VirtualMachinePreferencesPtrOutput {
	return o
}

func (o VirtualMachinePreferencesPtrOutput) Elem() VirtualMachinePreferencesOutput {
	return o.ApplyT(func(v *VirtualMachinePreferences) VirtualMachinePreferences {
		if v != nil {
			return *v
		}
		var ret VirtualMachinePreferences
		return ret
	}).(VirtualMachinePreferencesOutput)
}

// Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
func (o VirtualMachinePreferencesPtrOutput) CommitmentPlan() VirtualMachinePreferencesCommitmentPlanPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePreferences) *VirtualMachinePreferencesCommitmentPlan {
		if v == nil {
			return nil
		}
		return v.CommitmentPlan
	}).(VirtualMachinePreferencesCommitmentPlanPtrOutput)
}

// Compute Engine preferences concern insights and recommendations for Compute Engine target.
func (o VirtualMachinePreferencesPtrOutput) ComputeEnginePreferences() ComputeEnginePreferencesPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePreferences) *ComputeEnginePreferences {
		if v == nil {
			return nil
		}
		return v.ComputeEnginePreferences
	}).(ComputeEnginePreferencesPtrOutput)
}

// Region preferences for assets using this preference set. If you are unsure which value to set, the migration service API region is often a good value to start with.
func (o VirtualMachinePreferencesPtrOutput) RegionPreferences() RegionPreferencesPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePreferences) *RegionPreferences {
		if v == nil {
			return nil
		}
		return v.RegionPreferences
	}).(RegionPreferencesPtrOutput)
}

// Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
func (o VirtualMachinePreferencesPtrOutput) SizingOptimizationStrategy() VirtualMachinePreferencesSizingOptimizationStrategyPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePreferences) *VirtualMachinePreferencesSizingOptimizationStrategy {
		if v == nil {
			return nil
		}
		return v.SizingOptimizationStrategy
	}).(VirtualMachinePreferencesSizingOptimizationStrategyPtrOutput)
}

// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
type VirtualMachinePreferencesResponse struct {
	// Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
	CommitmentPlan string `pulumi:"commitmentPlan"`
	// Compute Engine preferences concern insights and recommendations for Compute Engine target.
	ComputeEnginePreferences ComputeEnginePreferencesResponse `pulumi:"computeEnginePreferences"`
	// Region preferences for assets using this preference set. If you are unsure which value to set, the migration service API region is often a good value to start with.
	RegionPreferences RegionPreferencesResponse `pulumi:"regionPreferences"`
	// Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
	SizingOptimizationStrategy string `pulumi:"sizingOptimizationStrategy"`
}

// VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
type VirtualMachinePreferencesResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachinePreferencesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePreferencesResponse)(nil)).Elem()
}

func (o VirtualMachinePreferencesResponseOutput) ToVirtualMachinePreferencesResponseOutput() VirtualMachinePreferencesResponseOutput {
	return o
}

func (o VirtualMachinePreferencesResponseOutput) ToVirtualMachinePreferencesResponseOutputWithContext(ctx context.Context) VirtualMachinePreferencesResponseOutput {
	return o
}

// Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
func (o VirtualMachinePreferencesResponseOutput) CommitmentPlan() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePreferencesResponse) string { return v.CommitmentPlan }).(pulumi.StringOutput)
}

// Compute Engine preferences concern insights and recommendations for Compute Engine target.
func (o VirtualMachinePreferencesResponseOutput) ComputeEnginePreferences() ComputeEnginePreferencesResponseOutput {
	return o.ApplyT(func(v VirtualMachinePreferencesResponse) ComputeEnginePreferencesResponse {
		return v.ComputeEnginePreferences
	}).(ComputeEnginePreferencesResponseOutput)
}

// Region preferences for assets using this preference set. If you are unsure which value to set, the migration service API region is often a good value to start with.
func (o VirtualMachinePreferencesResponseOutput) RegionPreferences() RegionPreferencesResponseOutput {
	return o.ApplyT(func(v VirtualMachinePreferencesResponse) RegionPreferencesResponse { return v.RegionPreferences }).(RegionPreferencesResponseOutput)
}

// Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
func (o VirtualMachinePreferencesResponseOutput) SizingOptimizationStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePreferencesResponse) string { return v.SizingOptimizationStrategy }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnginePreferencesInput)(nil)).Elem(), ComputeEnginePreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeEnginePreferencesPtrInput)(nil)).Elem(), ComputeEnginePreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCSPayloadInfoInput)(nil)).Elem(), GCSPayloadInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCSPayloadInfoPtrInput)(nil)).Elem(), GCSPayloadInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InlinePayloadInfoInput)(nil)).Elem(), InlinePayloadInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InlinePayloadInfoPtrInput)(nil)).Elem(), InlinePayloadInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePreferencesInput)(nil)).Elem(), MachinePreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachinePreferencesPtrInput)(nil)).Elem(), MachinePreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSeriesInput)(nil)).Elem(), MachineSeriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineSeriesArrayInput)(nil)).Elem(), MachineSeriesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PayloadFileInput)(nil)).Elem(), PayloadFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PayloadFileArrayInput)(nil)).Elem(), PayloadFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionPreferencesInput)(nil)).Elem(), RegionPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionPreferencesPtrInput)(nil)).Elem(), RegionPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportConfigGroupPreferenceSetAssignmentInput)(nil)).Elem(), ReportConfigGroupPreferenceSetAssignmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportConfigGroupPreferenceSetAssignmentArrayInput)(nil)).Elem(), ReportConfigGroupPreferenceSetAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UploadFileInfoInput)(nil)).Elem(), UploadFileInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UploadFileInfoPtrInput)(nil)).Elem(), UploadFileInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachinePreferencesInput)(nil)).Elem(), VirtualMachinePreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachinePreferencesPtrInput)(nil)).Elem(), VirtualMachinePreferencesArgs{})
	pulumi.RegisterOutputType(ComputeEnginePreferencesOutput{})
	pulumi.RegisterOutputType(ComputeEnginePreferencesPtrOutput{})
	pulumi.RegisterOutputType(ComputeEnginePreferencesResponseOutput{})
	pulumi.RegisterOutputType(ExecutionReportResponseOutput{})
	pulumi.RegisterOutputType(FileValidationReportResponseOutput{})
	pulumi.RegisterOutputType(FileValidationReportResponseArrayOutput{})
	pulumi.RegisterOutputType(GCSPayloadInfoOutput{})
	pulumi.RegisterOutputType(GCSPayloadInfoPtrOutput{})
	pulumi.RegisterOutputType(GCSPayloadInfoResponseOutput{})
	pulumi.RegisterOutputType(ImportErrorResponseOutput{})
	pulumi.RegisterOutputType(ImportErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ImportRowErrorResponseOutput{})
	pulumi.RegisterOutputType(ImportRowErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(InlinePayloadInfoOutput{})
	pulumi.RegisterOutputType(InlinePayloadInfoPtrOutput{})
	pulumi.RegisterOutputType(InlinePayloadInfoResponseOutput{})
	pulumi.RegisterOutputType(MachinePreferencesOutput{})
	pulumi.RegisterOutputType(MachinePreferencesPtrOutput{})
	pulumi.RegisterOutputType(MachinePreferencesResponseOutput{})
	pulumi.RegisterOutputType(MachineSeriesOutput{})
	pulumi.RegisterOutputType(MachineSeriesArrayOutput{})
	pulumi.RegisterOutputType(MachineSeriesResponseOutput{})
	pulumi.RegisterOutputType(MachineSeriesResponseArrayOutput{})
	pulumi.RegisterOutputType(MoneyResponseOutput{})
	pulumi.RegisterOutputType(PayloadFileOutput{})
	pulumi.RegisterOutputType(PayloadFileArrayOutput{})
	pulumi.RegisterOutputType(PayloadFileResponseOutput{})
	pulumi.RegisterOutputType(PayloadFileResponseArrayOutput{})
	pulumi.RegisterOutputType(RegionPreferencesOutput{})
	pulumi.RegisterOutputType(RegionPreferencesPtrOutput{})
	pulumi.RegisterOutputType(RegionPreferencesResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupPreferenceSetAssignmentOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupPreferenceSetAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupPreferenceSetAssignmentResponseOutput{})
	pulumi.RegisterOutputType(ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportSummaryAssetAggregateStatsResponseOutput{})
	pulumi.RegisterOutputType(ReportSummaryChartDataDataPointResponseOutput{})
	pulumi.RegisterOutputType(ReportSummaryChartDataDataPointResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportSummaryChartDataResponseOutput{})
	pulumi.RegisterOutputType(ReportSummaryGroupFindingResponseOutput{})
	pulumi.RegisterOutputType(ReportSummaryGroupFindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportSummaryGroupPreferenceSetFindingResponseOutput{})
	pulumi.RegisterOutputType(ReportSummaryGroupPreferenceSetFindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportSummaryHistogramChartDataBucketResponseOutput{})
	pulumi.RegisterOutputType(ReportSummaryHistogramChartDataBucketResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportSummaryHistogramChartDataResponseOutput{})
	pulumi.RegisterOutputType(ReportSummaryMachineFindingResponseOutput{})
	pulumi.RegisterOutputType(ReportSummaryMachineSeriesAllocationResponseOutput{})
	pulumi.RegisterOutputType(ReportSummaryMachineSeriesAllocationResponseArrayOutput{})
	pulumi.RegisterOutputType(ReportSummaryResponseOutput{})
	pulumi.RegisterOutputType(ReportSummaryUtilizationChartDataResponseOutput{})
	pulumi.RegisterOutputType(UploadFileInfoOutput{})
	pulumi.RegisterOutputType(UploadFileInfoPtrOutput{})
	pulumi.RegisterOutputType(UploadFileInfoResponseOutput{})
	pulumi.RegisterOutputType(ValidationReportResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachinePreferencesOutput{})
	pulumi.RegisterOutputType(VirtualMachinePreferencesPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachinePreferencesResponseOutput{})
}
