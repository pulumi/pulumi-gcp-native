// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a report configuration.
// Auto-naming is currently not supported for this resource.
type ReportConfig struct {
	pulumi.CustomResourceState

	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Free-text description.
	Description pulumi.StringOutput `pulumi:"description"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Collection of combinations of groups and preference sets.
	GroupPreferencesetAssignments ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput `pulumi:"groupPreferencesetAssignments"`
	Location                      pulumi.StringOutput                                         `pulumi:"location"`
	// Name of resource.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Required. User specified ID for the report config. It will become the last component of the report config name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression: [a-z]([a-z0-9-]{0,61}[a-z0-9])?.
	ReportConfigId pulumi.StringOutput `pulumi:"reportConfigId"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The timestamp when the resource was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewReportConfig registers a new resource with the given unique name, arguments, and options.
func NewReportConfig(ctx *pulumi.Context,
	name string, args *ReportConfigArgs, opts ...pulumi.ResourceOption) (*ReportConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupPreferencesetAssignments == nil {
		return nil, errors.New("invalid value for required argument 'GroupPreferencesetAssignments'")
	}
	if args.ReportConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ReportConfigId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"reportConfigId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReportConfig
	err := ctx.RegisterResource("google-native:migrationcenter/v1alpha1:ReportConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportConfig gets an existing ReportConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportConfigState, opts ...pulumi.ResourceOption) (*ReportConfig, error) {
	var resource ReportConfig
	err := ctx.ReadResource("google-native:migrationcenter/v1alpha1:ReportConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReportConfig resources.
type reportConfigState struct {
}

type ReportConfigState struct {
}

func (ReportConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportConfigState)(nil)).Elem()
}

type reportConfigArgs struct {
	// Free-text description.
	Description *string `pulumi:"description"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName *string `pulumi:"displayName"`
	// Collection of combinations of groups and preference sets.
	GroupPreferencesetAssignments []ReportConfigGroupPreferenceSetAssignment `pulumi:"groupPreferencesetAssignments"`
	Location                      *string                                    `pulumi:"location"`
	Project                       *string                                    `pulumi:"project"`
	// Required. User specified ID for the report config. It will become the last component of the report config name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression: [a-z]([a-z0-9-]{0,61}[a-z0-9])?.
	ReportConfigId string `pulumi:"reportConfigId"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
}

// The set of arguments for constructing a ReportConfig resource.
type ReportConfigArgs struct {
	// Free-text description.
	Description pulumi.StringPtrInput
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName pulumi.StringPtrInput
	// Collection of combinations of groups and preference sets.
	GroupPreferencesetAssignments ReportConfigGroupPreferenceSetAssignmentArrayInput
	Location                      pulumi.StringPtrInput
	Project                       pulumi.StringPtrInput
	// Required. User specified ID for the report config. It will become the last component of the report config name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression: [a-z]([a-z0-9-]{0,61}[a-z0-9])?.
	ReportConfigId pulumi.StringInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
}

func (ReportConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportConfigArgs)(nil)).Elem()
}

type ReportConfigInput interface {
	pulumi.Input

	ToReportConfigOutput() ReportConfigOutput
	ToReportConfigOutputWithContext(ctx context.Context) ReportConfigOutput
}

func (*ReportConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfig)(nil)).Elem()
}

func (i *ReportConfig) ToReportConfigOutput() ReportConfigOutput {
	return i.ToReportConfigOutputWithContext(context.Background())
}

func (i *ReportConfig) ToReportConfigOutputWithContext(ctx context.Context) ReportConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportConfigOutput)
}

type ReportConfigOutput struct{ *pulumi.OutputState }

func (ReportConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportConfig)(nil)).Elem()
}

func (o ReportConfigOutput) ToReportConfigOutput() ReportConfigOutput {
	return o
}

func (o ReportConfigOutput) ToReportConfigOutputWithContext(ctx context.Context) ReportConfigOutput {
	return o
}

// The timestamp when the resource was created.
func (o ReportConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Free-text description.
func (o ReportConfigOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// User-friendly display name. Maximum length is 63 characters.
func (o ReportConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Collection of combinations of groups and preference sets.
func (o ReportConfigOutput) GroupPreferencesetAssignments() ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput {
	return o.ApplyT(func(v *ReportConfig) ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput {
		return v.GroupPreferencesetAssignments
	}).(ReportConfigGroupPreferenceSetAssignmentResponseArrayOutput)
}

func (o ReportConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of resource.
func (o ReportConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReportConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. User specified ID for the report config. It will become the last component of the report config name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression: [a-z]([a-z0-9-]{0,61}[a-z0-9])?.
func (o ReportConfigOutput) ReportConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringOutput { return v.ReportConfigId }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o ReportConfigOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The timestamp when the resource was last updated.
func (o ReportConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReportConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReportConfigInput)(nil)).Elem(), &ReportConfig{})
	pulumi.RegisterOutputType(ReportConfigOutput{})
}
