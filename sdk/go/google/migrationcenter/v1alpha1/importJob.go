// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an import job.
// Auto-naming is currently not supported for this resource.
type ImportJob struct {
	pulumi.CustomResourceState

	// Reference to a source.
	AssetSource pulumi.StringOutput `pulumi:"assetSource"`
	// The timestamp when the import job was completed.
	CompleteTime pulumi.StringOutput `pulumi:"completeTime"`
	// The timestamp when the import job was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The report with the results of running the import job.
	ExecutionReport ExecutionReportResponseOutput `pulumi:"executionReport"`
	// The payload is in Google Cloud Storage.
	GcsPayload GCSPayloadInfoResponseOutput `pulumi:"gcsPayload"`
	// Required. ID of the import job.
	ImportJobId pulumi.StringOutput `pulumi:"importJobId"`
	// The payload is included in the request, mainly used for small import jobs.
	InlinePayload InlinePayloadInfoResponseOutput `pulumi:"inlinePayload"`
	// Labels as key value pairs.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// The full name of the import job.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The state of the import job.
	State pulumi.StringOutput `pulumi:"state"`
	// The timestamp when the import job was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The report with the validation results of the import job.
	ValidationReport ValidationReportResponseOutput `pulumi:"validationReport"`
}

// NewImportJob registers a new resource with the given unique name, arguments, and options.
func NewImportJob(ctx *pulumi.Context,
	name string, args *ImportJobArgs, opts ...pulumi.ResourceOption) (*ImportJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssetSource == nil {
		return nil, errors.New("invalid value for required argument 'AssetSource'")
	}
	if args.ImportJobId == nil {
		return nil, errors.New("invalid value for required argument 'ImportJobId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"importJobId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImportJob
	err := ctx.RegisterResource("google-native:migrationcenter/v1alpha1:ImportJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImportJob gets an existing ImportJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImportJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImportJobState, opts ...pulumi.ResourceOption) (*ImportJob, error) {
	var resource ImportJob
	err := ctx.ReadResource("google-native:migrationcenter/v1alpha1:ImportJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImportJob resources.
type importJobState struct {
}

type ImportJobState struct {
}

func (ImportJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*importJobState)(nil)).Elem()
}

type importJobArgs struct {
	// Reference to a source.
	AssetSource string `pulumi:"assetSource"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName *string `pulumi:"displayName"`
	// The payload is in Google Cloud Storage.
	GcsPayload *GCSPayloadInfo `pulumi:"gcsPayload"`
	// Required. ID of the import job.
	ImportJobId string `pulumi:"importJobId"`
	// The payload is included in the request, mainly used for small import jobs.
	InlinePayload *InlinePayloadInfo `pulumi:"inlinePayload"`
	// Labels as key value pairs.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	Project  *string           `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
}

// The set of arguments for constructing a ImportJob resource.
type ImportJobArgs struct {
	// Reference to a source.
	AssetSource pulumi.StringInput
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName pulumi.StringPtrInput
	// The payload is in Google Cloud Storage.
	GcsPayload GCSPayloadInfoPtrInput
	// Required. ID of the import job.
	ImportJobId pulumi.StringInput
	// The payload is included in the request, mainly used for small import jobs.
	InlinePayload InlinePayloadInfoPtrInput
	// Labels as key value pairs.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
}

func (ImportJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*importJobArgs)(nil)).Elem()
}

type ImportJobInput interface {
	pulumi.Input

	ToImportJobOutput() ImportJobOutput
	ToImportJobOutputWithContext(ctx context.Context) ImportJobOutput
}

func (*ImportJob) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportJob)(nil)).Elem()
}

func (i *ImportJob) ToImportJobOutput() ImportJobOutput {
	return i.ToImportJobOutputWithContext(context.Background())
}

func (i *ImportJob) ToImportJobOutputWithContext(ctx context.Context) ImportJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportJobOutput)
}

type ImportJobOutput struct{ *pulumi.OutputState }

func (ImportJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportJob)(nil)).Elem()
}

func (o ImportJobOutput) ToImportJobOutput() ImportJobOutput {
	return o
}

func (o ImportJobOutput) ToImportJobOutputWithContext(ctx context.Context) ImportJobOutput {
	return o
}

// Reference to a source.
func (o ImportJobOutput) AssetSource() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.AssetSource }).(pulumi.StringOutput)
}

// The timestamp when the import job was completed.
func (o ImportJobOutput) CompleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.CompleteTime }).(pulumi.StringOutput)
}

// The timestamp when the import job was created.
func (o ImportJobOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User-friendly display name. Maximum length is 63 characters.
func (o ImportJobOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The report with the results of running the import job.
func (o ImportJobOutput) ExecutionReport() ExecutionReportResponseOutput {
	return o.ApplyT(func(v *ImportJob) ExecutionReportResponseOutput { return v.ExecutionReport }).(ExecutionReportResponseOutput)
}

// The payload is in Google Cloud Storage.
func (o ImportJobOutput) GcsPayload() GCSPayloadInfoResponseOutput {
	return o.ApplyT(func(v *ImportJob) GCSPayloadInfoResponseOutput { return v.GcsPayload }).(GCSPayloadInfoResponseOutput)
}

// Required. ID of the import job.
func (o ImportJobOutput) ImportJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.ImportJobId }).(pulumi.StringOutput)
}

// The payload is included in the request, mainly used for small import jobs.
func (o ImportJobOutput) InlinePayload() InlinePayloadInfoResponseOutput {
	return o.ApplyT(func(v *ImportJob) InlinePayloadInfoResponseOutput { return v.InlinePayload }).(InlinePayloadInfoResponseOutput)
}

// Labels as key value pairs.
func (o ImportJobOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ImportJobOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The full name of the import job.
func (o ImportJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ImportJobOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o ImportJobOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The state of the import job.
func (o ImportJobOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The timestamp when the import job was last updated.
func (o ImportJobOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportJob) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The report with the validation results of the import job.
func (o ImportJobOutput) ValidationReport() ValidationReportResponseOutput {
	return o.ApplyT(func(v *ImportJob) ValidationReportResponseOutput { return v.ValidationReport }).(ValidationReportResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImportJobInput)(nil)).Elem(), &ImportJob{})
	pulumi.RegisterOutputType(ImportJobOutput{})
}
