// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a report.
// Auto-naming is currently not supported for this resource.
type Report struct {
	pulumi.CustomResourceState

	// Creation timestamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Free-text description.
	Description pulumi.StringOutput `pulumi:"description"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// Name of resource.
	Name           pulumi.StringOutput `pulumi:"name"`
	Project        pulumi.StringOutput `pulumi:"project"`
	ReportConfigId pulumi.StringOutput `pulumi:"reportConfigId"`
	// Required. User specified id for the report. It will become the last component of the report name. The id must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The id must match the regular expression: [a-z]([a-z0-9-]{0,61}[a-z0-9])?.
	ReportId pulumi.StringOutput `pulumi:"reportId"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Report creation state.
	State pulumi.StringOutput `pulumi:"state"`
	// Summary view of the Report.
	Summary ReportSummaryResponseOutput `pulumi:"summary"`
	// Report type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Last update timestamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewReport registers a new resource with the given unique name, arguments, and options.
func NewReport(ctx *pulumi.Context,
	name string, args *ReportArgs, opts ...pulumi.ResourceOption) (*Report, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReportConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ReportConfigId'")
	}
	if args.ReportId == nil {
		return nil, errors.New("invalid value for required argument 'ReportId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"reportConfigId",
		"reportId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Report
	err := ctx.RegisterResource("google-native:migrationcenter/v1alpha1:Report", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReport gets an existing Report resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReportState, opts ...pulumi.ResourceOption) (*Report, error) {
	var resource Report
	err := ctx.ReadResource("google-native:migrationcenter/v1alpha1:Report", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Report resources.
type reportState struct {
}

type ReportState struct {
}

func (ReportState) ElementType() reflect.Type {
	return reflect.TypeOf((*reportState)(nil)).Elem()
}

type reportArgs struct {
	// Free-text description.
	Description *string `pulumi:"description"`
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName    *string `pulumi:"displayName"`
	Location       *string `pulumi:"location"`
	Project        *string `pulumi:"project"`
	ReportConfigId string  `pulumi:"reportConfigId"`
	// Required. User specified id for the report. It will become the last component of the report name. The id must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The id must match the regular expression: [a-z]([a-z0-9-]{0,61}[a-z0-9])?.
	ReportId string `pulumi:"reportId"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Report creation state.
	State *ReportStateEnum `pulumi:"state"`
	// Report type.
	Type *ReportType `pulumi:"type"`
}

// The set of arguments for constructing a Report resource.
type ReportArgs struct {
	// Free-text description.
	Description pulumi.StringPtrInput
	// User-friendly display name. Maximum length is 63 characters.
	DisplayName    pulumi.StringPtrInput
	Location       pulumi.StringPtrInput
	Project        pulumi.StringPtrInput
	ReportConfigId pulumi.StringInput
	// Required. User specified id for the report. It will become the last component of the report name. The id must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The id must match the regular expression: [a-z]([a-z0-9-]{0,61}[a-z0-9])?.
	ReportId pulumi.StringInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Report creation state.
	State ReportStateEnumPtrInput
	// Report type.
	Type ReportTypePtrInput
}

func (ReportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reportArgs)(nil)).Elem()
}

type ReportInput interface {
	pulumi.Input

	ToReportOutput() ReportOutput
	ToReportOutputWithContext(ctx context.Context) ReportOutput
}

func (*Report) ElementType() reflect.Type {
	return reflect.TypeOf((**Report)(nil)).Elem()
}

func (i *Report) ToReportOutput() ReportOutput {
	return i.ToReportOutputWithContext(context.Background())
}

func (i *Report) ToReportOutputWithContext(ctx context.Context) ReportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportOutput)
}

func (i *Report) ToOutput(ctx context.Context) pulumix.Output[*Report] {
	return pulumix.Output[*Report]{
		OutputState: i.ToReportOutputWithContext(ctx).OutputState,
	}
}

type ReportOutput struct{ *pulumi.OutputState }

func (ReportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Report)(nil)).Elem()
}

func (o ReportOutput) ToReportOutput() ReportOutput {
	return o
}

func (o ReportOutput) ToReportOutputWithContext(ctx context.Context) ReportOutput {
	return o
}

func (o ReportOutput) ToOutput(ctx context.Context) pulumix.Output[*Report] {
	return pulumix.Output[*Report]{
		OutputState: o.OutputState,
	}
}

// Creation timestamp.
func (o ReportOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Free-text description.
func (o ReportOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// User-friendly display name. Maximum length is 63 characters.
func (o ReportOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o ReportOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Name of resource.
func (o ReportOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ReportOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ReportOutput) ReportConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.ReportConfigId }).(pulumi.StringOutput)
}

// Required. User specified id for the report. It will become the last component of the report name. The id must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The id must match the regular expression: [a-z]([a-z0-9-]{0,61}[a-z0-9])?.
func (o ReportOutput) ReportId() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.ReportId }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o ReportOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Report) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Report creation state.
func (o ReportOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Summary view of the Report.
func (o ReportOutput) Summary() ReportSummaryResponseOutput {
	return o.ApplyT(func(v *Report) ReportSummaryResponseOutput { return v.Summary }).(ReportSummaryResponseOutput)
}

// Report type.
func (o ReportOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Last update timestamp.
func (o ReportOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Report) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReportInput)(nil)).Elem(), &Report{})
	pulumi.RegisterOutputType(ReportOutput{})
}
