// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy for a Queue. Replaces any existing policy. Note: The Cloud Console does not check queue-level IAM permissions yet. Project-level permissions are required to use the Cloud Console. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission on the specified resource parent: * `cloudtasks.queues.setIamPolicy`
type QueueIamPolicy struct {
	pulumi.CustomResourceState
}

// NewQueueIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewQueueIamPolicy(ctx *pulumi.Context,
	name string, args *QueueIamPolicyArgs, opts ...pulumi.ResourceOption) (*QueueIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.QueuesId == nil {
		return nil, errors.New("invalid value for required argument 'QueuesId'")
	}
	var resource QueueIamPolicy
	err := ctx.RegisterResource("google-cloud:cloudtasks/v2beta3:QueueIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueueIamPolicy gets an existing QueueIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueueIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueIamPolicyState, opts ...pulumi.ResourceOption) (*QueueIamPolicy, error) {
	var resource QueueIamPolicy
	err := ctx.ReadResource("google-cloud:cloudtasks/v2beta3:QueueIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueueIamPolicy resources.
type queueIamPolicyState struct {
}

type QueueIamPolicyState struct {
}

func (QueueIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueIamPolicyState)(nil)).Elem()
}

type queueIamPolicyArgs struct {
	LocationsId string `pulumi:"locationsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	QueuesId   string  `pulumi:"queuesId"`
}

// The set of arguments for constructing a QueueIamPolicy resource.
type QueueIamPolicyArgs struct {
	LocationsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	QueuesId   pulumi.StringInput
}

func (QueueIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueIamPolicyArgs)(nil)).Elem()
}

type QueueIamPolicyInput interface {
	pulumi.Input

	ToQueueIamPolicyOutput() QueueIamPolicyOutput
	ToQueueIamPolicyOutputWithContext(ctx context.Context) QueueIamPolicyOutput
}

func (*QueueIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueIamPolicy)(nil))
}

func (i *QueueIamPolicy) ToQueueIamPolicyOutput() QueueIamPolicyOutput {
	return i.ToQueueIamPolicyOutputWithContext(context.Background())
}

func (i *QueueIamPolicy) ToQueueIamPolicyOutputWithContext(ctx context.Context) QueueIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueIamPolicyOutput)
}

type QueueIamPolicyOutput struct {
	*pulumi.OutputState
}

func (QueueIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueIamPolicy)(nil))
}

func (o QueueIamPolicyOutput) ToQueueIamPolicyOutput() QueueIamPolicyOutput {
	return o
}

func (o QueueIamPolicyOutput) ToQueueIamPolicyOutputWithContext(ctx context.Context) QueueIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(QueueIamPolicyOutput{})
}
