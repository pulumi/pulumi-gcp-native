// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a task and adds it to a queue. Tasks cannot be updated after creation; there is no UpdateTask command. * The maximum task size is 100KB.
type QueueTask struct {
	pulumi.CustomResourceState

	// HTTP request that is sent to the App Engine app handler. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest AppEngineHttpRequestResponseOutput `pulumi:"appEngineHttpRequest"`
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
	DispatchCount pulumi.IntOutput `pulumi:"dispatchCount"`
	// The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline.
	DispatchDeadline pulumi.StringOutput `pulumi:"dispatchDeadline"`
	// The status of the task's first attempt. Only dispatch_time will be set. The other Attempt information is not retained by Cloud Tasks.
	FirstAttempt AttemptResponseOutput `pulumi:"firstAttempt"`
	// HTTP request that is sent to the worker. An HTTP task is a task that has HttpRequest set.
	HttpRequest HttpRequestResponseOutput `pulumi:"httpRequest"`
	// The status of the task's last attempt.
	LastAttempt AttemptResponseOutput `pulumi:"lastAttempt"`
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of attempts which have received a response.
	ResponseCount pulumi.IntOutput `pulumi:"responseCount"`
	// The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime pulumi.StringOutput `pulumi:"scheduleTime"`
	// The view specifies which subset of the Task has been returned.
	View pulumi.StringOutput `pulumi:"view"`
}

// NewQueueTask registers a new resource with the given unique name, arguments, and options.
func NewQueueTask(ctx *pulumi.Context,
	name string, args *QueueTaskArgs, opts ...pulumi.ResourceOption) (*QueueTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.QueuesId == nil {
		return nil, errors.New("invalid value for required argument 'QueuesId'")
	}
	if args.TasksId == nil {
		return nil, errors.New("invalid value for required argument 'TasksId'")
	}
	var resource QueueTask
	err := ctx.RegisterResource("google-cloud:cloudtasks/v2:QueueTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueueTask gets an existing QueueTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueueTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueTaskState, opts ...pulumi.ResourceOption) (*QueueTask, error) {
	var resource QueueTask
	err := ctx.ReadResource("google-cloud:cloudtasks/v2:QueueTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueueTask resources.
type queueTaskState struct {
	// HTTP request that is sent to the App Engine app handler. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest *AppEngineHttpRequestResponse `pulumi:"appEngineHttpRequest"`
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime *string `pulumi:"createTime"`
	// The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
	DispatchCount *int `pulumi:"dispatchCount"`
	// The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline.
	DispatchDeadline *string `pulumi:"dispatchDeadline"`
	// The status of the task's first attempt. Only dispatch_time will be set. The other Attempt information is not retained by Cloud Tasks.
	FirstAttempt *AttemptResponse `pulumi:"firstAttempt"`
	// HTTP request that is sent to the worker. An HTTP task is a task that has HttpRequest set.
	HttpRequest *HttpRequestResponse `pulumi:"httpRequest"`
	// The status of the task's last attempt.
	LastAttempt *AttemptResponse `pulumi:"lastAttempt"`
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name *string `pulumi:"name"`
	// The number of attempts which have received a response.
	ResponseCount *int `pulumi:"responseCount"`
	// The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime *string `pulumi:"scheduleTime"`
	// The view specifies which subset of the Task has been returned.
	View *string `pulumi:"view"`
}

type QueueTaskState struct {
	// HTTP request that is sent to the App Engine app handler. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest AppEngineHttpRequestResponsePtrInput
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime pulumi.StringPtrInput
	// The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
	DispatchCount pulumi.IntPtrInput
	// The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline.
	DispatchDeadline pulumi.StringPtrInput
	// The status of the task's first attempt. Only dispatch_time will be set. The other Attempt information is not retained by Cloud Tasks.
	FirstAttempt AttemptResponsePtrInput
	// HTTP request that is sent to the worker. An HTTP task is a task that has HttpRequest set.
	HttpRequest HttpRequestResponsePtrInput
	// The status of the task's last attempt.
	LastAttempt AttemptResponsePtrInput
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name pulumi.StringPtrInput
	// The number of attempts which have received a response.
	ResponseCount pulumi.IntPtrInput
	// The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime pulumi.StringPtrInput
	// The view specifies which subset of the Task has been returned.
	View pulumi.StringPtrInput
}

func (QueueTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueTaskState)(nil)).Elem()
}

type queueTaskArgs struct {
	// HTTP request that is sent to the App Engine app handler. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest *AppEngineHttpRequest `pulumi:"appEngineHttpRequest"`
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime *string `pulumi:"createTime"`
	// The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
	DispatchCount *int `pulumi:"dispatchCount"`
	// The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline.
	DispatchDeadline *string `pulumi:"dispatchDeadline"`
	// The status of the task's first attempt. Only dispatch_time will be set. The other Attempt information is not retained by Cloud Tasks.
	FirstAttempt *Attempt `pulumi:"firstAttempt"`
	// HTTP request that is sent to the worker. An HTTP task is a task that has HttpRequest set.
	HttpRequest *HttpRequest `pulumi:"httpRequest"`
	// The status of the task's last attempt.
	LastAttempt *Attempt `pulumi:"lastAttempt"`
	LocationsId string   `pulumi:"locationsId"`
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	QueuesId   string  `pulumi:"queuesId"`
	// The number of attempts which have received a response.
	ResponseCount *int `pulumi:"responseCount"`
	// The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
	ResponseView *string `pulumi:"responseView"`
	// The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime *string `pulumi:"scheduleTime"`
	TasksId      string  `pulumi:"tasksId"`
	// The view specifies which subset of the Task has been returned.
	View *string `pulumi:"view"`
}

// The set of arguments for constructing a QueueTask resource.
type QueueTaskArgs struct {
	// HTTP request that is sent to the App Engine app handler. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest AppEngineHttpRequestPtrInput
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime pulumi.StringPtrInput
	// The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
	DispatchCount pulumi.IntPtrInput
	// The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline.
	DispatchDeadline pulumi.StringPtrInput
	// The status of the task's first attempt. Only dispatch_time will be set. The other Attempt information is not retained by Cloud Tasks.
	FirstAttempt AttemptPtrInput
	// HTTP request that is sent to the worker. An HTTP task is a task that has HttpRequest set.
	HttpRequest HttpRequestPtrInput
	// The status of the task's last attempt.
	LastAttempt AttemptPtrInput
	LocationsId pulumi.StringInput
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	QueuesId   pulumi.StringInput
	// The number of attempts which have received a response.
	ResponseCount pulumi.IntPtrInput
	// The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
	ResponseView pulumi.StringPtrInput
	// The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime pulumi.StringPtrInput
	TasksId      pulumi.StringInput
	// The view specifies which subset of the Task has been returned.
	View pulumi.StringPtrInput
}

func (QueueTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueTaskArgs)(nil)).Elem()
}

type QueueTaskInput interface {
	pulumi.Input

	ToQueueTaskOutput() QueueTaskOutput
	ToQueueTaskOutputWithContext(ctx context.Context) QueueTaskOutput
}

func (*QueueTask) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueTask)(nil))
}

func (i *QueueTask) ToQueueTaskOutput() QueueTaskOutput {
	return i.ToQueueTaskOutputWithContext(context.Background())
}

func (i *QueueTask) ToQueueTaskOutputWithContext(ctx context.Context) QueueTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueTaskOutput)
}

type QueueTaskOutput struct {
	*pulumi.OutputState
}

func (QueueTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueTask)(nil))
}

func (o QueueTaskOutput) ToQueueTaskOutput() QueueTaskOutput {
	return o
}

func (o QueueTaskOutput) ToQueueTaskOutputWithContext(ctx context.Context) QueueTaskOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(QueueTaskOutput{})
}
