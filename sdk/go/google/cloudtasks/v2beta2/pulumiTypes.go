// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. This proto can only be used for tasks in a queue which has app_engine_http_target set. Using AppEngineHttpRequest requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform` The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The `url` that the task will be sent to is: * `url =` host `+` relative_url Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [`login: admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [`login: required`](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app's request handler returns an HTTP response code in the range [`200` - `299`]. The task attempt has failed if the app's handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. `503` (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks' traffic congestion control to temporarily throttle the queue's dispatches. Unlike other types of task targets, a `429` (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
type AppEngineHttpRequest struct {
	// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRouting *AppEngineRouting `pulumi:"appEngineRouting"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a payload, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
	Headers map[string]string `pulumi:"headers"`
	// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
	HttpMethod *string `pulumi:"httpMethod"`
	// Payload. The payload will be sent as the HTTP message body. A message body, and thus a payload, is allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task with an incompatible HttpMethod.
	Payload *string `pulumi:"payload"`
	// The relative URL. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path and query string arguments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUrl *string `pulumi:"relativeUrl"`
}

// AppEngineHttpRequestInput is an input type that accepts AppEngineHttpRequestArgs and AppEngineHttpRequestOutput values.
// You can construct a concrete instance of `AppEngineHttpRequestInput` via:
//
//          AppEngineHttpRequestArgs{...}
type AppEngineHttpRequestInput interface {
	pulumi.Input

	ToAppEngineHttpRequestOutput() AppEngineHttpRequestOutput
	ToAppEngineHttpRequestOutputWithContext(context.Context) AppEngineHttpRequestOutput
}

// App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. This proto can only be used for tasks in a queue which has app_engine_http_target set. Using AppEngineHttpRequest requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform` The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The `url` that the task will be sent to is: * `url =` host `+` relative_url Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [`login: admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [`login: required`](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app's request handler returns an HTTP response code in the range [`200` - `299`]. The task attempt has failed if the app's handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. `503` (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks' traffic congestion control to temporarily throttle the queue's dispatches. Unlike other types of task targets, a `429` (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
type AppEngineHttpRequestArgs struct {
	// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRouting AppEngineRoutingPtrInput `pulumi:"appEngineRouting"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a payload, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// Payload. The payload will be sent as the HTTP message body. A message body, and thus a payload, is allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task with an incompatible HttpMethod.
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// The relative URL. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path and query string arguments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUrl pulumi.StringPtrInput `pulumi:"relativeUrl"`
}

func (AppEngineHttpRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpRequest)(nil)).Elem()
}

func (i AppEngineHttpRequestArgs) ToAppEngineHttpRequestOutput() AppEngineHttpRequestOutput {
	return i.ToAppEngineHttpRequestOutputWithContext(context.Background())
}

func (i AppEngineHttpRequestArgs) ToAppEngineHttpRequestOutputWithContext(ctx context.Context) AppEngineHttpRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpRequestOutput)
}

func (i AppEngineHttpRequestArgs) ToAppEngineHttpRequestPtrOutput() AppEngineHttpRequestPtrOutput {
	return i.ToAppEngineHttpRequestPtrOutputWithContext(context.Background())
}

func (i AppEngineHttpRequestArgs) ToAppEngineHttpRequestPtrOutputWithContext(ctx context.Context) AppEngineHttpRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpRequestOutput).ToAppEngineHttpRequestPtrOutputWithContext(ctx)
}

// AppEngineHttpRequestPtrInput is an input type that accepts AppEngineHttpRequestArgs, AppEngineHttpRequestPtr and AppEngineHttpRequestPtrOutput values.
// You can construct a concrete instance of `AppEngineHttpRequestPtrInput` via:
//
//          AppEngineHttpRequestArgs{...}
//
//  or:
//
//          nil
type AppEngineHttpRequestPtrInput interface {
	pulumi.Input

	ToAppEngineHttpRequestPtrOutput() AppEngineHttpRequestPtrOutput
	ToAppEngineHttpRequestPtrOutputWithContext(context.Context) AppEngineHttpRequestPtrOutput
}

type appEngineHttpRequestPtrType AppEngineHttpRequestArgs

func AppEngineHttpRequestPtr(v *AppEngineHttpRequestArgs) AppEngineHttpRequestPtrInput {
	return (*appEngineHttpRequestPtrType)(v)
}

func (*appEngineHttpRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpRequest)(nil)).Elem()
}

func (i *appEngineHttpRequestPtrType) ToAppEngineHttpRequestPtrOutput() AppEngineHttpRequestPtrOutput {
	return i.ToAppEngineHttpRequestPtrOutputWithContext(context.Background())
}

func (i *appEngineHttpRequestPtrType) ToAppEngineHttpRequestPtrOutputWithContext(ctx context.Context) AppEngineHttpRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpRequestPtrOutput)
}

// App Engine HTTP request. The message defines the HTTP request that is sent to an App Engine app when the task is dispatched. This proto can only be used for tasks in a queue which has app_engine_http_target set. Using AppEngineHttpRequest requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform` The task will be delivered to the App Engine app which belongs to the same project as the queue. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and how routing is affected by [dispatch files](https://cloud.google.com/appengine/docs/python/config/dispatchref). Traffic is encrypted during transport and never leaves Google datacenters. Because this traffic is carried over a communication mechanism internal to Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS). The request to the handler, however, will appear to have used the HTTP protocol. The AppEngineRouting used to construct the URL that the task is delivered to can be set at the queue-level or task-level: * If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing. The `url` that the task will be sent to is: * `url =` host `+` relative_url Tasks can be dispatched to secure app handlers, unsecure app handlers, and URIs restricted with [`login: admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref). Because tasks are not run as any user, they cannot be dispatched to URIs restricted with [`login: required`](https://cloud.google.com/appengine/docs/standard/python/config/appref) Task dispatches also do not follow redirects. The task attempt has succeeded if the app's request handler returns an HTTP response code in the range [`200` - `299`]. The task attempt has failed if the app's handler returns a non-2xx response code or Cloud Tasks does not receive response before the deadline. Failed tasks will be retried according to the retry configuration. `503` (Service Unavailable) is considered an App Engine system error instead of an application error and will cause Cloud Tasks' traffic congestion control to temporarily throttle the queue's dispatches. Unlike other types of task targets, a `429` (Too Many Requests) response from an app handler does not cause traffic congestion control to throttle the queue.
type AppEngineHttpRequestOutput struct{ *pulumi.OutputState }

func (AppEngineHttpRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpRequest)(nil)).Elem()
}

func (o AppEngineHttpRequestOutput) ToAppEngineHttpRequestOutput() AppEngineHttpRequestOutput {
	return o
}

func (o AppEngineHttpRequestOutput) ToAppEngineHttpRequestOutputWithContext(ctx context.Context) AppEngineHttpRequestOutput {
	return o
}

func (o AppEngineHttpRequestOutput) ToAppEngineHttpRequestPtrOutput() AppEngineHttpRequestPtrOutput {
	return o.ToAppEngineHttpRequestPtrOutputWithContext(context.Background())
}

func (o AppEngineHttpRequestOutput) ToAppEngineHttpRequestPtrOutputWithContext(ctx context.Context) AppEngineHttpRequestPtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) *AppEngineHttpRequest {
		return &v
	}).(AppEngineHttpRequestPtrOutput)
}

// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpRequestOutput) AppEngineRouting() AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) *AppEngineRouting { return v.AppEngineRouting }).(AppEngineRoutingPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a payload, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
func (o AppEngineHttpRequestOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
func (o AppEngineHttpRequestOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// Payload. The payload will be sent as the HTTP message body. A message body, and thus a payload, is allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task with an incompatible HttpMethod.
func (o AppEngineHttpRequestOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

// The relative URL. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path and query string arguments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
func (o AppEngineHttpRequestOutput) RelativeUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineHttpRequest) *string { return v.RelativeUrl }).(pulumi.StringPtrOutput)
}

type AppEngineHttpRequestPtrOutput struct{ *pulumi.OutputState }

func (AppEngineHttpRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpRequest)(nil)).Elem()
}

func (o AppEngineHttpRequestPtrOutput) ToAppEngineHttpRequestPtrOutput() AppEngineHttpRequestPtrOutput {
	return o
}

func (o AppEngineHttpRequestPtrOutput) ToAppEngineHttpRequestPtrOutputWithContext(ctx context.Context) AppEngineHttpRequestPtrOutput {
	return o
}

func (o AppEngineHttpRequestPtrOutput) Elem() AppEngineHttpRequestOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) AppEngineHttpRequest { return *v }).(AppEngineHttpRequestOutput)
}

// Task-level setting for App Engine routing. If set, app_engine_routing_override is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpRequestPtrOutput) AppEngineRouting() AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) *AppEngineRouting {
		if v == nil {
			return nil
		}
		return v.AppEngineRouting
	}).(AppEngineRoutingPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the task is created. Repeated headers are not supported but a header value can contain commas. Cloud Tasks sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Tasks will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the task has a payload, Cloud Tasks sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explicitly setting `Content-Type` to a particular media type when the task is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Tasks. This value is output only. It cannot be changed. The headers below cannot be set or overridden: * `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some headers when the task is dispatched, such as headers containing information about the task; see [request headers](https://cloud.google.com/appengine/docs/python/taskqueue/push/creating-handlers#reading_request_headers). These headers are set only when the task is dispatched, so they are not visible when the task is returned in a Cloud Tasks response. Although there is no specific limit for the maximum number of headers or the size, there is a limit on the maximum size of the Task. For more information, see the CreateTask documentation.
func (o AppEngineHttpRequestPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. The default is POST. The app's request handler for the task's target URL must be able to handle HTTP requests with this http_method, otherwise the task attempt fails with error code 405 (Method Not Allowed). See [Writing a push task request handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler) and the App Engine documentation for your runtime on [How Requests are Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
func (o AppEngineHttpRequestPtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) *string {
		if v == nil {
			return nil
		}
		return v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// Payload. The payload will be sent as the HTTP message body. A message body, and thus a payload, is allowed only if the HTTP method is POST or PUT. It is an error to set a data payload on a task with an incompatible HttpMethod.
func (o AppEngineHttpRequestPtrOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) *string {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(pulumi.StringPtrOutput)
}

// The relative URL. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path and query string arguments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
func (o AppEngineHttpRequestPtrOutput) RelativeUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpRequest) *string {
		if v == nil {
			return nil
		}
		return v.RelativeUrl
	}).(pulumi.StringPtrOutput)
}

// App Engine HTTP target. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpTarget and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpTarget requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
type AppEngineHttpTarget struct {
	// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRoutingOverride *AppEngineRouting `pulumi:"appEngineRoutingOverride"`
}

// AppEngineHttpTargetInput is an input type that accepts AppEngineHttpTargetArgs and AppEngineHttpTargetOutput values.
// You can construct a concrete instance of `AppEngineHttpTargetInput` via:
//
//          AppEngineHttpTargetArgs{...}
type AppEngineHttpTargetInput interface {
	pulumi.Input

	ToAppEngineHttpTargetOutput() AppEngineHttpTargetOutput
	ToAppEngineHttpTargetOutputWithContext(context.Context) AppEngineHttpTargetOutput
}

// App Engine HTTP target. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpTarget and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpTarget requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
type AppEngineHttpTargetArgs struct {
	// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
	AppEngineRoutingOverride AppEngineRoutingPtrInput `pulumi:"appEngineRoutingOverride"`
}

func (AppEngineHttpTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpTarget)(nil)).Elem()
}

func (i AppEngineHttpTargetArgs) ToAppEngineHttpTargetOutput() AppEngineHttpTargetOutput {
	return i.ToAppEngineHttpTargetOutputWithContext(context.Background())
}

func (i AppEngineHttpTargetArgs) ToAppEngineHttpTargetOutputWithContext(ctx context.Context) AppEngineHttpTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpTargetOutput)
}

func (i AppEngineHttpTargetArgs) ToAppEngineHttpTargetPtrOutput() AppEngineHttpTargetPtrOutput {
	return i.ToAppEngineHttpTargetPtrOutputWithContext(context.Background())
}

func (i AppEngineHttpTargetArgs) ToAppEngineHttpTargetPtrOutputWithContext(ctx context.Context) AppEngineHttpTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpTargetOutput).ToAppEngineHttpTargetPtrOutputWithContext(ctx)
}

// AppEngineHttpTargetPtrInput is an input type that accepts AppEngineHttpTargetArgs, AppEngineHttpTargetPtr and AppEngineHttpTargetPtrOutput values.
// You can construct a concrete instance of `AppEngineHttpTargetPtrInput` via:
//
//          AppEngineHttpTargetArgs{...}
//
//  or:
//
//          nil
type AppEngineHttpTargetPtrInput interface {
	pulumi.Input

	ToAppEngineHttpTargetPtrOutput() AppEngineHttpTargetPtrOutput
	ToAppEngineHttpTargetPtrOutputWithContext(context.Context) AppEngineHttpTargetPtrOutput
}

type appEngineHttpTargetPtrType AppEngineHttpTargetArgs

func AppEngineHttpTargetPtr(v *AppEngineHttpTargetArgs) AppEngineHttpTargetPtrInput {
	return (*appEngineHttpTargetPtrType)(v)
}

func (*appEngineHttpTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpTarget)(nil)).Elem()
}

func (i *appEngineHttpTargetPtrType) ToAppEngineHttpTargetPtrOutput() AppEngineHttpTargetPtrOutput {
	return i.ToAppEngineHttpTargetPtrOutputWithContext(context.Background())
}

func (i *appEngineHttpTargetPtrType) ToAppEngineHttpTargetPtrOutputWithContext(ctx context.Context) AppEngineHttpTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpTargetPtrOutput)
}

// App Engine HTTP target. The task will be delivered to the App Engine application hostname specified by its AppEngineHttpTarget and AppEngineHttpRequest. The documentation for AppEngineHttpRequest explains how the task's host URL is constructed. Using AppEngineHttpTarget requires [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control) Google IAM permission for the project and the following scope: `https://www.googleapis.com/auth/cloud-platform`
type AppEngineHttpTargetOutput struct{ *pulumi.OutputState }

func (AppEngineHttpTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpTarget)(nil)).Elem()
}

func (o AppEngineHttpTargetOutput) ToAppEngineHttpTargetOutput() AppEngineHttpTargetOutput {
	return o
}

func (o AppEngineHttpTargetOutput) ToAppEngineHttpTargetOutputWithContext(ctx context.Context) AppEngineHttpTargetOutput {
	return o
}

func (o AppEngineHttpTargetOutput) ToAppEngineHttpTargetPtrOutput() AppEngineHttpTargetPtrOutput {
	return o.ToAppEngineHttpTargetPtrOutputWithContext(context.Background())
}

func (o AppEngineHttpTargetOutput) ToAppEngineHttpTargetPtrOutputWithContext(ctx context.Context) AppEngineHttpTargetPtrOutput {
	return o.ApplyT(func(v AppEngineHttpTarget) *AppEngineHttpTarget {
		return &v
	}).(AppEngineHttpTargetPtrOutput)
}

// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpTargetOutput) AppEngineRoutingOverride() AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v AppEngineHttpTarget) *AppEngineRouting { return v.AppEngineRoutingOverride }).(AppEngineRoutingPtrOutput)
}

type AppEngineHttpTargetPtrOutput struct{ *pulumi.OutputState }

func (AppEngineHttpTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpTarget)(nil)).Elem()
}

func (o AppEngineHttpTargetPtrOutput) ToAppEngineHttpTargetPtrOutput() AppEngineHttpTargetPtrOutput {
	return o
}

func (o AppEngineHttpTargetPtrOutput) ToAppEngineHttpTargetPtrOutputWithContext(ctx context.Context) AppEngineHttpTargetPtrOutput {
	return o
}

func (o AppEngineHttpTargetPtrOutput) Elem() AppEngineHttpTargetOutput {
	return o.ApplyT(func(v *AppEngineHttpTarget) AppEngineHttpTarget { return *v }).(AppEngineHttpTargetOutput)
}

// Overrides for the task-level app_engine_routing. If set, `app_engine_routing_override` is used for all tasks in the queue, no matter what the setting is for the task-level app_engine_routing.
func (o AppEngineHttpTargetPtrOutput) AppEngineRoutingOverride() AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpTarget) *AppEngineRouting {
		if v == nil {
			return nil
		}
		return v.AppEngineRoutingOverride
	}).(AppEngineRoutingPtrOutput)
}

// App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRouting struct {
	// Output only. The host that the task is sent to. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed). The host is constructed as: * `host = [application_domain_name]` `| [service] + '.' + [application_domain_name]` `| [version] + '.' + [application_domain_name]` `| [version_dot_service]+ '.' + [application_domain_name]` `| [instance] + '.' + [application_domain_name]` `| [instance_dot_service] + '.' + [application_domain_name]` `| [instance_dot_version] + '.' + [application_domain_name]` `| [instance_dot_version_dot_service] + '.' + [application_domain_name]` * `application_domain_name` = The domain name of the app, for example .appspot.com, which is associated with the queue's project ID. Some tasks which were created using the App Engine SDK use a custom domain name. * `service =` service * `version =` version * `version_dot_service =` version `+ '.' +` service * `instance =` instance * `instance_dot_service =` instance `+ '.' +` service * `instance_dot_version =` instance `+ '.' +` version * `instance_dot_version_dot_service =` instance `+ '.' +` version `+ '.' +` service If service is empty, then the task will be sent to the service which is the default service when the task is attempted. If version is empty, then the task will be sent to the version which is the default version when the task is attempted. If instance is empty, then the task will be sent to an instance which is available when the task is attempted. If service, version, or instance is invalid, then the task will be sent to the default version of the default service when the task is attempted.
	Host *string `pulumi:"host"`
	// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance *string `pulumi:"instance"`
	// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Service *string `pulumi:"service"`
	// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Version *string `pulumi:"version"`
}

// AppEngineRoutingInput is an input type that accepts AppEngineRoutingArgs and AppEngineRoutingOutput values.
// You can construct a concrete instance of `AppEngineRoutingInput` via:
//
//          AppEngineRoutingArgs{...}
type AppEngineRoutingInput interface {
	pulumi.Input

	ToAppEngineRoutingOutput() AppEngineRoutingOutput
	ToAppEngineRoutingOutputWithContext(context.Context) AppEngineRoutingOutput
}

// App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingArgs struct {
	// Output only. The host that the task is sent to. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed). The host is constructed as: * `host = [application_domain_name]` `| [service] + '.' + [application_domain_name]` `| [version] + '.' + [application_domain_name]` `| [version_dot_service]+ '.' + [application_domain_name]` `| [instance] + '.' + [application_domain_name]` `| [instance_dot_service] + '.' + [application_domain_name]` `| [instance_dot_version] + '.' + [application_domain_name]` `| [instance_dot_version_dot_service] + '.' + [application_domain_name]` * `application_domain_name` = The domain name of the app, for example .appspot.com, which is associated with the queue's project ID. Some tasks which were created using the App Engine SDK use a custom domain name. * `service =` service * `version =` version * `version_dot_service =` version `+ '.' +` service * `instance =` instance * `instance_dot_service =` instance `+ '.' +` service * `instance_dot_version =` instance `+ '.' +` version * `instance_dot_version_dot_service =` instance `+ '.' +` version `+ '.' +` service If service is empty, then the task will be sent to the service which is the default service when the task is attempted. If version is empty, then the task will be sent to the version which is the default version when the task is attempted. If instance is empty, then the task will be sent to an instance which is available when the task is attempted. If service, version, or instance is invalid, then the task will be sent to the default version of the default service when the task is attempted.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (AppEngineRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineRouting)(nil)).Elem()
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingOutput() AppEngineRoutingOutput {
	return i.ToAppEngineRoutingOutputWithContext(context.Background())
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingOutputWithContext(ctx context.Context) AppEngineRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingOutput)
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return i.ToAppEngineRoutingPtrOutputWithContext(context.Background())
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingOutput).ToAppEngineRoutingPtrOutputWithContext(ctx)
}

// AppEngineRoutingPtrInput is an input type that accepts AppEngineRoutingArgs, AppEngineRoutingPtr and AppEngineRoutingPtrOutput values.
// You can construct a concrete instance of `AppEngineRoutingPtrInput` via:
//
//          AppEngineRoutingArgs{...}
//
//  or:
//
//          nil
type AppEngineRoutingPtrInput interface {
	pulumi.Input

	ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput
	ToAppEngineRoutingPtrOutputWithContext(context.Context) AppEngineRoutingPtrOutput
}

type appEngineRoutingPtrType AppEngineRoutingArgs

func AppEngineRoutingPtr(v *AppEngineRoutingArgs) AppEngineRoutingPtrInput {
	return (*appEngineRoutingPtrType)(v)
}

func (*appEngineRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineRouting)(nil)).Elem()
}

func (i *appEngineRoutingPtrType) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return i.ToAppEngineRoutingPtrOutputWithContext(context.Background())
}

func (i *appEngineRoutingPtrType) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingPtrOutput)
}

// App Engine Routing. Defines routing characteristics specific to App Engine - service, version, and instance. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingOutput struct{ *pulumi.OutputState }

func (AppEngineRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineRouting)(nil)).Elem()
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingOutput() AppEngineRoutingOutput {
	return o
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingOutputWithContext(ctx context.Context) AppEngineRoutingOutput {
	return o
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return o.ToAppEngineRoutingPtrOutputWithContext(context.Background())
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *AppEngineRouting {
		return &v
	}).(AppEngineRoutingPtrOutput)
}

// Output only. The host that the task is sent to. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed). The host is constructed as: * `host = [application_domain_name]` `| [service] + '.' + [application_domain_name]` `| [version] + '.' + [application_domain_name]` `| [version_dot_service]+ '.' + [application_domain_name]` `| [instance] + '.' + [application_domain_name]` `| [instance_dot_service] + '.' + [application_domain_name]` `| [instance_dot_version] + '.' + [application_domain_name]` `| [instance_dot_version_dot_service] + '.' + [application_domain_name]` * `application_domain_name` = The domain name of the app, for example .appspot.com, which is associated with the queue's project ID. Some tasks which were created using the App Engine SDK use a custom domain name. * `service =` service * `version =` version * `version_dot_service =` version `+ '.' +` service * `instance =` instance * `instance_dot_service =` instance `+ '.' +` service * `instance_dot_version =` instance `+ '.' +` version * `instance_dot_version_dot_service =` instance `+ '.' +` version `+ '.' +` service If service is empty, then the task will be sent to the service which is the default service when the task is attempted. If version is empty, then the task will be sent to the version which is the default version when the task is attempted. If instance is empty, then the task will be sent to an instance which is available when the task is attempted. If service, version, or instance is invalid, then the task will be sent to the default version of the default service when the task is attempted.
func (o AppEngineRoutingOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
func (o AppEngineRoutingOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type AppEngineRoutingPtrOutput struct{ *pulumi.OutputState }

func (AppEngineRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineRouting)(nil)).Elem()
}

func (o AppEngineRoutingPtrOutput) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return o
}

func (o AppEngineRoutingPtrOutput) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return o
}

func (o AppEngineRoutingPtrOutput) Elem() AppEngineRoutingOutput {
	return o.ApplyT(func(v *AppEngineRouting) AppEngineRouting { return *v }).(AppEngineRoutingOutput)
}

// Output only. The host that the task is sent to. For more information, see [How Requests are Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed). The host is constructed as: * `host = [application_domain_name]` `| [service] + '.' + [application_domain_name]` `| [version] + '.' + [application_domain_name]` `| [version_dot_service]+ '.' + [application_domain_name]` `| [instance] + '.' + [application_domain_name]` `| [instance_dot_service] + '.' + [application_domain_name]` `| [instance_dot_version] + '.' + [application_domain_name]` `| [instance_dot_version_dot_service] + '.' + [application_domain_name]` * `application_domain_name` = The domain name of the app, for example .appspot.com, which is associated with the queue's project ID. Some tasks which were created using the App Engine SDK use a custom domain name. * `service =` service * `version =` version * `version_dot_service =` version `+ '.' +` service * `instance =` instance * `instance_dot_service =` instance `+ '.' +` service * `instance_dot_version =` instance `+ '.' +` version * `instance_dot_version_dot_service =` instance `+ '.' +` version `+ '.' +` service If service is empty, then the task will be sent to the service which is the default service when the task is attempted. If version is empty, then the task will be sent to the version which is the default version when the task is attempted. If instance is empty, then the task will be sent to an instance which is available when the task is attempted. If service, version, or instance is invalid, then the task will be sent to the default version of the default service when the task is attempted.
func (o AppEngineRoutingPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// App instance. By default, the task is sent to an instance which is available when the task is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
func (o AppEngineRoutingPtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// App service. By default, the task is sent to the service which is the default service when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// App version. By default, the task is sent to the version which is the default version when the task is attempted. For some queues or tasks which were created using the App Engine Task Queue API, host is not parsable into service, version, and instance. For example, some tasks which were created using the App Engine SDK use a custom domain name; custom domains are not parsed by Cloud Tasks. If host is not parsable, then service, version, and instance are the empty string.
func (o AppEngineRoutingPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The status of a task attempt.
type AttemptStatus struct {
	// Output only. The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
	DispatchTime *string `pulumi:"dispatchTime"`
	// Output only. The response from the target for this attempt. If the task has not been attempted or the task is currently running then the response status is unset.
	ResponseStatus *Status `pulumi:"responseStatus"`
	// Output only. The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
	ResponseTime *string `pulumi:"responseTime"`
	// Output only. The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime *string `pulumi:"scheduleTime"`
}

// AttemptStatusInput is an input type that accepts AttemptStatusArgs and AttemptStatusOutput values.
// You can construct a concrete instance of `AttemptStatusInput` via:
//
//          AttemptStatusArgs{...}
type AttemptStatusInput interface {
	pulumi.Input

	ToAttemptStatusOutput() AttemptStatusOutput
	ToAttemptStatusOutputWithContext(context.Context) AttemptStatusOutput
}

// The status of a task attempt.
type AttemptStatusArgs struct {
	// Output only. The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
	DispatchTime pulumi.StringPtrInput `pulumi:"dispatchTime"`
	// Output only. The response from the target for this attempt. If the task has not been attempted or the task is currently running then the response status is unset.
	ResponseStatus StatusPtrInput `pulumi:"responseStatus"`
	// Output only. The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
	ResponseTime pulumi.StringPtrInput `pulumi:"responseTime"`
	// Output only. The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime pulumi.StringPtrInput `pulumi:"scheduleTime"`
}

func (AttemptStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttemptStatus)(nil)).Elem()
}

func (i AttemptStatusArgs) ToAttemptStatusOutput() AttemptStatusOutput {
	return i.ToAttemptStatusOutputWithContext(context.Background())
}

func (i AttemptStatusArgs) ToAttemptStatusOutputWithContext(ctx context.Context) AttemptStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttemptStatusOutput)
}

func (i AttemptStatusArgs) ToAttemptStatusPtrOutput() AttemptStatusPtrOutput {
	return i.ToAttemptStatusPtrOutputWithContext(context.Background())
}

func (i AttemptStatusArgs) ToAttemptStatusPtrOutputWithContext(ctx context.Context) AttemptStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttemptStatusOutput).ToAttemptStatusPtrOutputWithContext(ctx)
}

// AttemptStatusPtrInput is an input type that accepts AttemptStatusArgs, AttemptStatusPtr and AttemptStatusPtrOutput values.
// You can construct a concrete instance of `AttemptStatusPtrInput` via:
//
//          AttemptStatusArgs{...}
//
//  or:
//
//          nil
type AttemptStatusPtrInput interface {
	pulumi.Input

	ToAttemptStatusPtrOutput() AttemptStatusPtrOutput
	ToAttemptStatusPtrOutputWithContext(context.Context) AttemptStatusPtrOutput
}

type attemptStatusPtrType AttemptStatusArgs

func AttemptStatusPtr(v *AttemptStatusArgs) AttemptStatusPtrInput {
	return (*attemptStatusPtrType)(v)
}

func (*attemptStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AttemptStatus)(nil)).Elem()
}

func (i *attemptStatusPtrType) ToAttemptStatusPtrOutput() AttemptStatusPtrOutput {
	return i.ToAttemptStatusPtrOutputWithContext(context.Background())
}

func (i *attemptStatusPtrType) ToAttemptStatusPtrOutputWithContext(ctx context.Context) AttemptStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttemptStatusPtrOutput)
}

// The status of a task attempt.
type AttemptStatusOutput struct{ *pulumi.OutputState }

func (AttemptStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttemptStatus)(nil)).Elem()
}

func (o AttemptStatusOutput) ToAttemptStatusOutput() AttemptStatusOutput {
	return o
}

func (o AttemptStatusOutput) ToAttemptStatusOutputWithContext(ctx context.Context) AttemptStatusOutput {
	return o
}

func (o AttemptStatusOutput) ToAttemptStatusPtrOutput() AttemptStatusPtrOutput {
	return o.ToAttemptStatusPtrOutputWithContext(context.Background())
}

func (o AttemptStatusOutput) ToAttemptStatusPtrOutputWithContext(ctx context.Context) AttemptStatusPtrOutput {
	return o.ApplyT(func(v AttemptStatus) *AttemptStatus {
		return &v
	}).(AttemptStatusPtrOutput)
}

// Output only. The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
func (o AttemptStatusOutput) DispatchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttemptStatus) *string { return v.DispatchTime }).(pulumi.StringPtrOutput)
}

// Output only. The response from the target for this attempt. If the task has not been attempted or the task is currently running then the response status is unset.
func (o AttemptStatusOutput) ResponseStatus() StatusPtrOutput {
	return o.ApplyT(func(v AttemptStatus) *Status { return v.ResponseStatus }).(StatusPtrOutput)
}

// Output only. The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
func (o AttemptStatusOutput) ResponseTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttemptStatus) *string { return v.ResponseTime }).(pulumi.StringPtrOutput)
}

// Output only. The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
func (o AttemptStatusOutput) ScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttemptStatus) *string { return v.ScheduleTime }).(pulumi.StringPtrOutput)
}

type AttemptStatusPtrOutput struct{ *pulumi.OutputState }

func (AttemptStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttemptStatus)(nil)).Elem()
}

func (o AttemptStatusPtrOutput) ToAttemptStatusPtrOutput() AttemptStatusPtrOutput {
	return o
}

func (o AttemptStatusPtrOutput) ToAttemptStatusPtrOutputWithContext(ctx context.Context) AttemptStatusPtrOutput {
	return o
}

func (o AttemptStatusPtrOutput) Elem() AttemptStatusOutput {
	return o.ApplyT(func(v *AttemptStatus) AttemptStatus { return *v }).(AttemptStatusOutput)
}

// Output only. The time that this attempt was dispatched. `dispatch_time` will be truncated to the nearest microsecond.
func (o AttemptStatusPtrOutput) DispatchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttemptStatus) *string {
		if v == nil {
			return nil
		}
		return v.DispatchTime
	}).(pulumi.StringPtrOutput)
}

// Output only. The response from the target for this attempt. If the task has not been attempted or the task is currently running then the response status is unset.
func (o AttemptStatusPtrOutput) ResponseStatus() StatusPtrOutput {
	return o.ApplyT(func(v *AttemptStatus) *Status {
		if v == nil {
			return nil
		}
		return v.ResponseStatus
	}).(StatusPtrOutput)
}

// Output only. The time that this attempt response was received. `response_time` will be truncated to the nearest microsecond.
func (o AttemptStatusPtrOutput) ResponseTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttemptStatus) *string {
		if v == nil {
			return nil
		}
		return v.ResponseTime
	}).(pulumi.StringPtrOutput)
}

// Output only. The time that this attempt was scheduled. `schedule_time` will be truncated to the nearest microsecond.
func (o AttemptStatusPtrOutput) ScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttemptStatus) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleTime
	}).(pulumi.StringPtrOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// The pull message contains data that can be used by the caller of LeaseTasks to process the task. This proto can only be used for tasks in a queue which has pull_target set.
type PullMessage struct {
	// A data payload consumed by the worker to execute the task.
	Payload *string `pulumi:"payload"`
	// The task's tag. Tags allow similar tasks to be processed in a batch. If you label tasks with a tag, your worker can lease tasks with the same tag using filter. For example, if you want to aggregate the events associated with a specific user once a day, you could tag tasks with the user ID. The task's tag can only be set when the task is created. The tag must be less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
	Tag *string `pulumi:"tag"`
}

// PullMessageInput is an input type that accepts PullMessageArgs and PullMessageOutput values.
// You can construct a concrete instance of `PullMessageInput` via:
//
//          PullMessageArgs{...}
type PullMessageInput interface {
	pulumi.Input

	ToPullMessageOutput() PullMessageOutput
	ToPullMessageOutputWithContext(context.Context) PullMessageOutput
}

// The pull message contains data that can be used by the caller of LeaseTasks to process the task. This proto can only be used for tasks in a queue which has pull_target set.
type PullMessageArgs struct {
	// A data payload consumed by the worker to execute the task.
	Payload pulumi.StringPtrInput `pulumi:"payload"`
	// The task's tag. Tags allow similar tasks to be processed in a batch. If you label tasks with a tag, your worker can lease tasks with the same tag using filter. For example, if you want to aggregate the events associated with a specific user once a day, you could tag tasks with the user ID. The task's tag can only be set when the task is created. The tag must be less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (PullMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PullMessage)(nil)).Elem()
}

func (i PullMessageArgs) ToPullMessageOutput() PullMessageOutput {
	return i.ToPullMessageOutputWithContext(context.Background())
}

func (i PullMessageArgs) ToPullMessageOutputWithContext(ctx context.Context) PullMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullMessageOutput)
}

func (i PullMessageArgs) ToPullMessagePtrOutput() PullMessagePtrOutput {
	return i.ToPullMessagePtrOutputWithContext(context.Background())
}

func (i PullMessageArgs) ToPullMessagePtrOutputWithContext(ctx context.Context) PullMessagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullMessageOutput).ToPullMessagePtrOutputWithContext(ctx)
}

// PullMessagePtrInput is an input type that accepts PullMessageArgs, PullMessagePtr and PullMessagePtrOutput values.
// You can construct a concrete instance of `PullMessagePtrInput` via:
//
//          PullMessageArgs{...}
//
//  or:
//
//          nil
type PullMessagePtrInput interface {
	pulumi.Input

	ToPullMessagePtrOutput() PullMessagePtrOutput
	ToPullMessagePtrOutputWithContext(context.Context) PullMessagePtrOutput
}

type pullMessagePtrType PullMessageArgs

func PullMessagePtr(v *PullMessageArgs) PullMessagePtrInput {
	return (*pullMessagePtrType)(v)
}

func (*pullMessagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PullMessage)(nil)).Elem()
}

func (i *pullMessagePtrType) ToPullMessagePtrOutput() PullMessagePtrOutput {
	return i.ToPullMessagePtrOutputWithContext(context.Background())
}

func (i *pullMessagePtrType) ToPullMessagePtrOutputWithContext(ctx context.Context) PullMessagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullMessagePtrOutput)
}

// The pull message contains data that can be used by the caller of LeaseTasks to process the task. This proto can only be used for tasks in a queue which has pull_target set.
type PullMessageOutput struct{ *pulumi.OutputState }

func (PullMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullMessage)(nil)).Elem()
}

func (o PullMessageOutput) ToPullMessageOutput() PullMessageOutput {
	return o
}

func (o PullMessageOutput) ToPullMessageOutputWithContext(ctx context.Context) PullMessageOutput {
	return o
}

func (o PullMessageOutput) ToPullMessagePtrOutput() PullMessagePtrOutput {
	return o.ToPullMessagePtrOutputWithContext(context.Background())
}

func (o PullMessageOutput) ToPullMessagePtrOutputWithContext(ctx context.Context) PullMessagePtrOutput {
	return o.ApplyT(func(v PullMessage) *PullMessage {
		return &v
	}).(PullMessagePtrOutput)
}

// A data payload consumed by the worker to execute the task.
func (o PullMessageOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PullMessage) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

// The task's tag. Tags allow similar tasks to be processed in a batch. If you label tasks with a tag, your worker can lease tasks with the same tag using filter. For example, if you want to aggregate the events associated with a specific user once a day, you could tag tasks with the user ID. The task's tag can only be set when the task is created. The tag must be less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
func (o PullMessageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PullMessage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type PullMessagePtrOutput struct{ *pulumi.OutputState }

func (PullMessagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullMessage)(nil)).Elem()
}

func (o PullMessagePtrOutput) ToPullMessagePtrOutput() PullMessagePtrOutput {
	return o
}

func (o PullMessagePtrOutput) ToPullMessagePtrOutputWithContext(ctx context.Context) PullMessagePtrOutput {
	return o
}

func (o PullMessagePtrOutput) Elem() PullMessageOutput {
	return o.ApplyT(func(v *PullMessage) PullMessage { return *v }).(PullMessageOutput)
}

// A data payload consumed by the worker to execute the task.
func (o PullMessagePtrOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullMessage) *string {
		if v == nil {
			return nil
		}
		return v.Payload
	}).(pulumi.StringPtrOutput)
}

// The task's tag. Tags allow similar tasks to be processed in a batch. If you label tasks with a tag, your worker can lease tasks with the same tag using filter. For example, if you want to aggregate the events associated with a specific user once a day, you could tag tasks with the user ID. The task's tag can only be set when the task is created. The tag must be less than 500 characters. SDK compatibility: Although the SDK allows tags to be either string or [bytes](https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/taskqueue/TaskOptions.html#tag-byte:A-), only UTF-8 encoded tags can be used in Cloud Tasks. If a tag isn't UTF-8 encoded, the tag will be empty when the task is returned by Cloud Tasks.
func (o PullMessagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullMessage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Pull target.
type PullTarget struct {
}

// PullTargetInput is an input type that accepts PullTargetArgs and PullTargetOutput values.
// You can construct a concrete instance of `PullTargetInput` via:
//
//          PullTargetArgs{...}
type PullTargetInput interface {
	pulumi.Input

	ToPullTargetOutput() PullTargetOutput
	ToPullTargetOutputWithContext(context.Context) PullTargetOutput
}

// Pull target.
type PullTargetArgs struct {
}

func (PullTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PullTarget)(nil)).Elem()
}

func (i PullTargetArgs) ToPullTargetOutput() PullTargetOutput {
	return i.ToPullTargetOutputWithContext(context.Background())
}

func (i PullTargetArgs) ToPullTargetOutputWithContext(ctx context.Context) PullTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullTargetOutput)
}

func (i PullTargetArgs) ToPullTargetPtrOutput() PullTargetPtrOutput {
	return i.ToPullTargetPtrOutputWithContext(context.Background())
}

func (i PullTargetArgs) ToPullTargetPtrOutputWithContext(ctx context.Context) PullTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullTargetOutput).ToPullTargetPtrOutputWithContext(ctx)
}

// PullTargetPtrInput is an input type that accepts PullTargetArgs, PullTargetPtr and PullTargetPtrOutput values.
// You can construct a concrete instance of `PullTargetPtrInput` via:
//
//          PullTargetArgs{...}
//
//  or:
//
//          nil
type PullTargetPtrInput interface {
	pulumi.Input

	ToPullTargetPtrOutput() PullTargetPtrOutput
	ToPullTargetPtrOutputWithContext(context.Context) PullTargetPtrOutput
}

type pullTargetPtrType PullTargetArgs

func PullTargetPtr(v *PullTargetArgs) PullTargetPtrInput {
	return (*pullTargetPtrType)(v)
}

func (*pullTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PullTarget)(nil)).Elem()
}

func (i *pullTargetPtrType) ToPullTargetPtrOutput() PullTargetPtrOutput {
	return i.ToPullTargetPtrOutputWithContext(context.Background())
}

func (i *pullTargetPtrType) ToPullTargetPtrOutputWithContext(ctx context.Context) PullTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullTargetPtrOutput)
}

// Pull target.
type PullTargetOutput struct{ *pulumi.OutputState }

func (PullTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullTarget)(nil)).Elem()
}

func (o PullTargetOutput) ToPullTargetOutput() PullTargetOutput {
	return o
}

func (o PullTargetOutput) ToPullTargetOutputWithContext(ctx context.Context) PullTargetOutput {
	return o
}

func (o PullTargetOutput) ToPullTargetPtrOutput() PullTargetPtrOutput {
	return o.ToPullTargetPtrOutputWithContext(context.Background())
}

func (o PullTargetOutput) ToPullTargetPtrOutputWithContext(ctx context.Context) PullTargetPtrOutput {
	return o.ApplyT(func(v PullTarget) *PullTarget {
		return &v
	}).(PullTargetPtrOutput)
}

type PullTargetPtrOutput struct{ *pulumi.OutputState }

func (PullTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullTarget)(nil)).Elem()
}

func (o PullTargetPtrOutput) ToPullTargetPtrOutput() PullTargetPtrOutput {
	return o
}

func (o PullTargetPtrOutput) ToPullTargetPtrOutputWithContext(ctx context.Context) PullTargetPtrOutput {
	return o
}

func (o PullTargetPtrOutput) Elem() PullTargetOutput {
	return o.ApplyT(func(v *PullTarget) PullTarget { return *v }).(PullTargetOutput)
}

// Statistics for a queue.
type QueueStats struct {
	// Output only. The number of requests that the queue has dispatched but has not received a reply for yet.
	ConcurrentDispatchesCount *string `pulumi:"concurrentDispatchesCount"`
	// Output only. The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.
	EffectiveExecutionRate *float64 `pulumi:"effectiveExecutionRate"`
	// Output only. The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.
	ExecutedLastMinuteCount *string `pulumi:"executedLastMinuteCount"`
	// Output only. An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.
	OldestEstimatedArrivalTime *string `pulumi:"oldestEstimatedArrivalTime"`
	// Output only. An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.
	TasksCount *string `pulumi:"tasksCount"`
}

// QueueStatsInput is an input type that accepts QueueStatsArgs and QueueStatsOutput values.
// You can construct a concrete instance of `QueueStatsInput` via:
//
//          QueueStatsArgs{...}
type QueueStatsInput interface {
	pulumi.Input

	ToQueueStatsOutput() QueueStatsOutput
	ToQueueStatsOutputWithContext(context.Context) QueueStatsOutput
}

// Statistics for a queue.
type QueueStatsArgs struct {
	// Output only. The number of requests that the queue has dispatched but has not received a reply for yet.
	ConcurrentDispatchesCount pulumi.StringPtrInput `pulumi:"concurrentDispatchesCount"`
	// Output only. The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.
	EffectiveExecutionRate pulumi.Float64PtrInput `pulumi:"effectiveExecutionRate"`
	// Output only. The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.
	ExecutedLastMinuteCount pulumi.StringPtrInput `pulumi:"executedLastMinuteCount"`
	// Output only. An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.
	OldestEstimatedArrivalTime pulumi.StringPtrInput `pulumi:"oldestEstimatedArrivalTime"`
	// Output only. An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.
	TasksCount pulumi.StringPtrInput `pulumi:"tasksCount"`
}

func (QueueStatsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueStats)(nil)).Elem()
}

func (i QueueStatsArgs) ToQueueStatsOutput() QueueStatsOutput {
	return i.ToQueueStatsOutputWithContext(context.Background())
}

func (i QueueStatsArgs) ToQueueStatsOutputWithContext(ctx context.Context) QueueStatsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueStatsOutput)
}

func (i QueueStatsArgs) ToQueueStatsPtrOutput() QueueStatsPtrOutput {
	return i.ToQueueStatsPtrOutputWithContext(context.Background())
}

func (i QueueStatsArgs) ToQueueStatsPtrOutputWithContext(ctx context.Context) QueueStatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueStatsOutput).ToQueueStatsPtrOutputWithContext(ctx)
}

// QueueStatsPtrInput is an input type that accepts QueueStatsArgs, QueueStatsPtr and QueueStatsPtrOutput values.
// You can construct a concrete instance of `QueueStatsPtrInput` via:
//
//          QueueStatsArgs{...}
//
//  or:
//
//          nil
type QueueStatsPtrInput interface {
	pulumi.Input

	ToQueueStatsPtrOutput() QueueStatsPtrOutput
	ToQueueStatsPtrOutputWithContext(context.Context) QueueStatsPtrOutput
}

type queueStatsPtrType QueueStatsArgs

func QueueStatsPtr(v *QueueStatsArgs) QueueStatsPtrInput {
	return (*queueStatsPtrType)(v)
}

func (*queueStatsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueStats)(nil)).Elem()
}

func (i *queueStatsPtrType) ToQueueStatsPtrOutput() QueueStatsPtrOutput {
	return i.ToQueueStatsPtrOutputWithContext(context.Background())
}

func (i *queueStatsPtrType) ToQueueStatsPtrOutputWithContext(ctx context.Context) QueueStatsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueStatsPtrOutput)
}

// Statistics for a queue.
type QueueStatsOutput struct{ *pulumi.OutputState }

func (QueueStatsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueStats)(nil)).Elem()
}

func (o QueueStatsOutput) ToQueueStatsOutput() QueueStatsOutput {
	return o
}

func (o QueueStatsOutput) ToQueueStatsOutputWithContext(ctx context.Context) QueueStatsOutput {
	return o
}

func (o QueueStatsOutput) ToQueueStatsPtrOutput() QueueStatsPtrOutput {
	return o.ToQueueStatsPtrOutputWithContext(context.Background())
}

func (o QueueStatsOutput) ToQueueStatsPtrOutputWithContext(ctx context.Context) QueueStatsPtrOutput {
	return o.ApplyT(func(v QueueStats) *QueueStats {
		return &v
	}).(QueueStatsPtrOutput)
}

// Output only. The number of requests that the queue has dispatched but has not received a reply for yet.
func (o QueueStatsOutput) ConcurrentDispatchesCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueStats) *string { return v.ConcurrentDispatchesCount }).(pulumi.StringPtrOutput)
}

// Output only. The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.
func (o QueueStatsOutput) EffectiveExecutionRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v QueueStats) *float64 { return v.EffectiveExecutionRate }).(pulumi.Float64PtrOutput)
}

// Output only. The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.
func (o QueueStatsOutput) ExecutedLastMinuteCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueStats) *string { return v.ExecutedLastMinuteCount }).(pulumi.StringPtrOutput)
}

// Output only. An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.
func (o QueueStatsOutput) OldestEstimatedArrivalTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueStats) *string { return v.OldestEstimatedArrivalTime }).(pulumi.StringPtrOutput)
}

// Output only. An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.
func (o QueueStatsOutput) TasksCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueStats) *string { return v.TasksCount }).(pulumi.StringPtrOutput)
}

type QueueStatsPtrOutput struct{ *pulumi.OutputState }

func (QueueStatsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueStats)(nil)).Elem()
}

func (o QueueStatsPtrOutput) ToQueueStatsPtrOutput() QueueStatsPtrOutput {
	return o
}

func (o QueueStatsPtrOutput) ToQueueStatsPtrOutputWithContext(ctx context.Context) QueueStatsPtrOutput {
	return o
}

func (o QueueStatsPtrOutput) Elem() QueueStatsOutput {
	return o.ApplyT(func(v *QueueStats) QueueStats { return *v }).(QueueStatsOutput)
}

// Output only. The number of requests that the queue has dispatched but has not received a reply for yet.
func (o QueueStatsPtrOutput) ConcurrentDispatchesCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueStats) *string {
		if v == nil {
			return nil
		}
		return v.ConcurrentDispatchesCount
	}).(pulumi.StringPtrOutput)
}

// Output only. The current maximum number of tasks per second executed by the queue. The maximum value of this variable is controlled by the RateLimits of the Queue. However, this value could be less to avoid overloading the endpoints tasks in the queue are targeting.
func (o QueueStatsPtrOutput) EffectiveExecutionRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *QueueStats) *float64 {
		if v == nil {
			return nil
		}
		return v.EffectiveExecutionRate
	}).(pulumi.Float64PtrOutput)
}

// Output only. The number of tasks that the queue has dispatched and received a reply for during the last minute. This variable counts both successful and non-successful executions.
func (o QueueStatsPtrOutput) ExecutedLastMinuteCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueStats) *string {
		if v == nil {
			return nil
		}
		return v.ExecutedLastMinuteCount
	}).(pulumi.StringPtrOutput)
}

// Output only. An estimation of the nearest time in the future where a task in the queue is scheduled to be executed.
func (o QueueStatsPtrOutput) OldestEstimatedArrivalTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueStats) *string {
		if v == nil {
			return nil
		}
		return v.OldestEstimatedArrivalTime
	}).(pulumi.StringPtrOutput)
}

// Output only. An estimation of the number of tasks in the queue, that is, the tasks in the queue that haven't been executed, the tasks in the queue which the queue has dispatched but has not yet received a reply for, and the failed tasks that the queue is retrying.
func (o QueueStatsPtrOutput) TasksCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueStats) *string {
		if v == nil {
			return nil
		}
		return v.TasksCount
	}).(pulumi.StringPtrOutput)
}

// Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
type RateLimits struct {
	// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
	MaxBurstSize *int `pulumi:"maxBurstSize"`
	// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field is output only for pull queues and always -1, which indicates no limit. No other queue types can have `max_concurrent_tasks` set to -1. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
	MaxConcurrentTasks *int `pulumi:"maxConcurrentTasks"`
	// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. * This field is output only for pull queues. In addition to the `max_tasks_dispatched_per_second` limit, a maximum of 10 QPS of LeaseTasks requests are allowed per pull queue. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
	MaxTasksDispatchedPerSecond *float64 `pulumi:"maxTasksDispatchedPerSecond"`
}

// RateLimitsInput is an input type that accepts RateLimitsArgs and RateLimitsOutput values.
// You can construct a concrete instance of `RateLimitsInput` via:
//
//          RateLimitsArgs{...}
type RateLimitsInput interface {
	pulumi.Input

	ToRateLimitsOutput() RateLimitsOutput
	ToRateLimitsOutputWithContext(context.Context) RateLimitsOutput
}

// Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
type RateLimitsArgs struct {
	// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
	MaxBurstSize pulumi.IntPtrInput `pulumi:"maxBurstSize"`
	// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field is output only for pull queues and always -1, which indicates no limit. No other queue types can have `max_concurrent_tasks` set to -1. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
	MaxConcurrentTasks pulumi.IntPtrInput `pulumi:"maxConcurrentTasks"`
	// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. * This field is output only for pull queues. In addition to the `max_tasks_dispatched_per_second` limit, a maximum of 10 QPS of LeaseTasks requests are allowed per pull queue. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
	MaxTasksDispatchedPerSecond pulumi.Float64PtrInput `pulumi:"maxTasksDispatchedPerSecond"`
}

func (RateLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimits)(nil)).Elem()
}

func (i RateLimitsArgs) ToRateLimitsOutput() RateLimitsOutput {
	return i.ToRateLimitsOutputWithContext(context.Background())
}

func (i RateLimitsArgs) ToRateLimitsOutputWithContext(ctx context.Context) RateLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitsOutput)
}

func (i RateLimitsArgs) ToRateLimitsPtrOutput() RateLimitsPtrOutput {
	return i.ToRateLimitsPtrOutputWithContext(context.Background())
}

func (i RateLimitsArgs) ToRateLimitsPtrOutputWithContext(ctx context.Context) RateLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitsOutput).ToRateLimitsPtrOutputWithContext(ctx)
}

// RateLimitsPtrInput is an input type that accepts RateLimitsArgs, RateLimitsPtr and RateLimitsPtrOutput values.
// You can construct a concrete instance of `RateLimitsPtrInput` via:
//
//          RateLimitsArgs{...}
//
//  or:
//
//          nil
type RateLimitsPtrInput interface {
	pulumi.Input

	ToRateLimitsPtrOutput() RateLimitsPtrOutput
	ToRateLimitsPtrOutputWithContext(context.Context) RateLimitsPtrOutput
}

type rateLimitsPtrType RateLimitsArgs

func RateLimitsPtr(v *RateLimitsArgs) RateLimitsPtrInput {
	return (*rateLimitsPtrType)(v)
}

func (*rateLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimits)(nil)).Elem()
}

func (i *rateLimitsPtrType) ToRateLimitsPtrOutput() RateLimitsPtrOutput {
	return i.ToRateLimitsPtrOutputWithContext(context.Background())
}

func (i *rateLimitsPtrType) ToRateLimitsPtrOutputWithContext(ctx context.Context) RateLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitsPtrOutput)
}

// Rate limits. This message determines the maximum rate that tasks can be dispatched by a queue, regardless of whether the dispatch is a first task attempt or a retry. Note: The debugging command, RunTask, will run a task even if the queue has reached its RateLimits.
type RateLimitsOutput struct{ *pulumi.OutputState }

func (RateLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimits)(nil)).Elem()
}

func (o RateLimitsOutput) ToRateLimitsOutput() RateLimitsOutput {
	return o
}

func (o RateLimitsOutput) ToRateLimitsOutputWithContext(ctx context.Context) RateLimitsOutput {
	return o
}

func (o RateLimitsOutput) ToRateLimitsPtrOutput() RateLimitsPtrOutput {
	return o.ToRateLimitsPtrOutputWithContext(context.Background())
}

func (o RateLimitsOutput) ToRateLimitsPtrOutputWithContext(ctx context.Context) RateLimitsPtrOutput {
	return o.ApplyT(func(v RateLimits) *RateLimits {
		return &v
	}).(RateLimitsPtrOutput)
}

// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
func (o RateLimitsOutput) MaxBurstSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RateLimits) *int { return v.MaxBurstSize }).(pulumi.IntPtrOutput)
}

// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field is output only for pull queues and always -1, which indicates no limit. No other queue types can have `max_concurrent_tasks` set to -1. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
func (o RateLimitsOutput) MaxConcurrentTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RateLimits) *int { return v.MaxConcurrentTasks }).(pulumi.IntPtrOutput)
}

// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. * This field is output only for pull queues. In addition to the `max_tasks_dispatched_per_second` limit, a maximum of 10 QPS of LeaseTasks requests are allowed per pull queue. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
func (o RateLimitsOutput) MaxTasksDispatchedPerSecond() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RateLimits) *float64 { return v.MaxTasksDispatchedPerSecond }).(pulumi.Float64PtrOutput)
}

type RateLimitsPtrOutput struct{ *pulumi.OutputState }

func (RateLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimits)(nil)).Elem()
}

func (o RateLimitsPtrOutput) ToRateLimitsPtrOutput() RateLimitsPtrOutput {
	return o
}

func (o RateLimitsPtrOutput) ToRateLimitsPtrOutputWithContext(ctx context.Context) RateLimitsPtrOutput {
	return o
}

func (o RateLimitsPtrOutput) Elem() RateLimitsOutput {
	return o.ApplyT(func(v *RateLimits) RateLimits { return *v }).(RateLimitsOutput)
}

// The max burst size. Max burst size limits how fast tasks in queue are processed when many tasks are in the queue and the rate is high. This field allows the queue to have a high rate so processing starts shortly after a task is enqueued, but still limits resource usage when many tasks are enqueued in a short period of time. The [token bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to control the rate of task dispatches. Each queue has a token bucket that holds tokens, up to the maximum specified by `max_burst_size`. Each time a task is dispatched, a token is removed from the bucket. Tasks will be dispatched until the queue's bucket runs out of tokens. The bucket will be continuously refilled with new tokens based on max_dispatches_per_second. The default value of `max_burst_size` is picked by Cloud Tasks based on the value of max_dispatches_per_second. The maximum value of `max_burst_size` is 500. For App Engine queues that were created or updated using `queue.yaml/xml`, `max_burst_size` is equal to [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size). If UpdateQueue is called on a queue without explicitly setting a value for `max_burst_size`, `max_burst_size` value will get updated if UpdateQueue is updating max_dispatches_per_second.
func (o RateLimitsPtrOutput) MaxBurstSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RateLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxBurstSize
	}).(pulumi.IntPtrOutput)
}

// The maximum number of concurrent tasks that Cloud Tasks allows to be dispatched for this queue. After this threshold has been reached, Cloud Tasks stops dispatching tasks until the number of concurrent requests decreases. If unspecified when the queue is created, Cloud Tasks will pick the default. The maximum allowed value is 5,000. This field is output only for pull queues and always -1, which indicates no limit. No other queue types can have `max_concurrent_tasks` set to -1. This field has the same meaning as [max_concurrent_requests in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
func (o RateLimitsPtrOutput) MaxConcurrentTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RateLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTasks
	}).(pulumi.IntPtrOutput)
}

// The maximum rate at which tasks are dispatched from this queue. If unspecified when the queue is created, Cloud Tasks will pick the default. * For App Engine queues, the maximum allowed value is 500. * This field is output only for pull queues. In addition to the `max_tasks_dispatched_per_second` limit, a maximum of 10 QPS of LeaseTasks requests are allowed per pull queue. This field has the same meaning as [rate in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
func (o RateLimitsPtrOutput) MaxTasksDispatchedPerSecond() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RateLimits) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxTasksDispatchedPerSecond
	}).(pulumi.Float64PtrOutput)
}

// Retry config. These settings determine how a failed task attempt is retried.
type RetryConfig struct {
	// The maximum number of attempts for a task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be > 0.
	MaxAttempts *int `pulumi:"maxAttempts"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxBackoff *string `pulumi:"maxBackoff"`
	// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxDoublings *int `pulumi:"maxDoublings"`
	// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxRetryDuration *string `pulumi:"maxRetryDuration"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MinBackoff *string `pulumi:"minBackoff"`
	// If true, then the number of attempts is unlimited.
	UnlimitedAttempts *bool `pulumi:"unlimitedAttempts"`
}

// RetryConfigInput is an input type that accepts RetryConfigArgs and RetryConfigOutput values.
// You can construct a concrete instance of `RetryConfigInput` via:
//
//          RetryConfigArgs{...}
type RetryConfigInput interface {
	pulumi.Input

	ToRetryConfigOutput() RetryConfigOutput
	ToRetryConfigOutputWithContext(context.Context) RetryConfigOutput
}

// Retry config. These settings determine how a failed task attempt is retried.
type RetryConfigArgs struct {
	// The maximum number of attempts for a task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be > 0.
	MaxAttempts pulumi.IntPtrInput `pulumi:"maxAttempts"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxBackoff pulumi.StringPtrInput `pulumi:"maxBackoff"`
	// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxDoublings pulumi.IntPtrInput `pulumi:"maxDoublings"`
	// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MaxRetryDuration pulumi.StringPtrInput `pulumi:"maxRetryDuration"`
	// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
	MinBackoff pulumi.StringPtrInput `pulumi:"minBackoff"`
	// If true, then the number of attempts is unlimited.
	UnlimitedAttempts pulumi.BoolPtrInput `pulumi:"unlimitedAttempts"`
}

func (RetryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryConfig)(nil)).Elem()
}

func (i RetryConfigArgs) ToRetryConfigOutput() RetryConfigOutput {
	return i.ToRetryConfigOutputWithContext(context.Background())
}

func (i RetryConfigArgs) ToRetryConfigOutputWithContext(ctx context.Context) RetryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigOutput)
}

func (i RetryConfigArgs) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return i.ToRetryConfigPtrOutputWithContext(context.Background())
}

func (i RetryConfigArgs) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigOutput).ToRetryConfigPtrOutputWithContext(ctx)
}

// RetryConfigPtrInput is an input type that accepts RetryConfigArgs, RetryConfigPtr and RetryConfigPtrOutput values.
// You can construct a concrete instance of `RetryConfigPtrInput` via:
//
//          RetryConfigArgs{...}
//
//  or:
//
//          nil
type RetryConfigPtrInput interface {
	pulumi.Input

	ToRetryConfigPtrOutput() RetryConfigPtrOutput
	ToRetryConfigPtrOutputWithContext(context.Context) RetryConfigPtrOutput
}

type retryConfigPtrType RetryConfigArgs

func RetryConfigPtr(v *RetryConfigArgs) RetryConfigPtrInput {
	return (*retryConfigPtrType)(v)
}

func (*retryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryConfig)(nil)).Elem()
}

func (i *retryConfigPtrType) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return i.ToRetryConfigPtrOutputWithContext(context.Background())
}

func (i *retryConfigPtrType) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigPtrOutput)
}

// Retry config. These settings determine how a failed task attempt is retried.
type RetryConfigOutput struct{ *pulumi.OutputState }

func (RetryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryConfig)(nil)).Elem()
}

func (o RetryConfigOutput) ToRetryConfigOutput() RetryConfigOutput {
	return o
}

func (o RetryConfigOutput) ToRetryConfigOutputWithContext(ctx context.Context) RetryConfigOutput {
	return o
}

func (o RetryConfigOutput) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return o.ToRetryConfigPtrOutputWithContext(context.Background())
}

func (o RetryConfigOutput) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return o.ApplyT(func(v RetryConfig) *RetryConfig {
		return &v
	}).(RetryConfigPtrOutput)
}

// The maximum number of attempts for a task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be > 0.
func (o RetryConfigOutput) MaxAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryConfig) *int { return v.MaxAttempts }).(pulumi.IntPtrOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigOutput) MaxBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryConfig) *string { return v.MaxBackoff }).(pulumi.StringPtrOutput)
}

// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigOutput) MaxDoublings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryConfig) *int { return v.MaxDoublings }).(pulumi.IntPtrOutput)
}

// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigOutput) MaxRetryDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryConfig) *string { return v.MaxRetryDuration }).(pulumi.StringPtrOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigOutput) MinBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryConfig) *string { return v.MinBackoff }).(pulumi.StringPtrOutput)
}

// If true, then the number of attempts is unlimited.
func (o RetryConfigOutput) UnlimitedAttempts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RetryConfig) *bool { return v.UnlimitedAttempts }).(pulumi.BoolPtrOutput)
}

type RetryConfigPtrOutput struct{ *pulumi.OutputState }

func (RetryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryConfig)(nil)).Elem()
}

func (o RetryConfigPtrOutput) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return o
}

func (o RetryConfigPtrOutput) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return o
}

func (o RetryConfigPtrOutput) Elem() RetryConfigOutput {
	return o.ApplyT(func(v *RetryConfig) RetryConfig { return *v }).(RetryConfigOutput)
}

// The maximum number of attempts for a task. Cloud Tasks will attempt the task `max_attempts` times (that is, if the first attempt fails, then there will be `max_attempts - 1` retries). Must be > 0.
func (o RetryConfigPtrOutput) MaxAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxAttempts
	}).(pulumi.IntPtrOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_backoff` will be truncated to the nearest second. This field has the same meaning as [max_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigPtrOutput) MaxBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxBackoff
	}).(pulumi.StringPtrOutput)
}

// The time between retries will double `max_doublings` times. A task's retry interval starts at min_backoff, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff up to max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s, and `max_doublings` is 3, then the a task will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the task will retry at intervals of max_backoff until the task has been attempted max_attempts times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. This field has the same meaning as [max_doublings in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigPtrOutput) MaxDoublings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxDoublings
	}).(pulumi.IntPtrOutput)
}

// If positive, `max_retry_duration` specifies the time limit for retrying a failed task, measured from when the task was first attempted. Once `max_retry_duration` time has passed *and* the task has been attempted max_attempts times, no further attempts will be made and the task will be deleted. If zero, then the task age is unlimited. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `max_retry_duration` will be truncated to the nearest second. This field has the same meaning as [task_age_limit in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigPtrOutput) MaxRetryDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxRetryDuration
	}).(pulumi.StringPtrOutput)
}

// A task will be scheduled for retry between min_backoff and max_backoff duration after it fails, if the queue's RetryConfig specifies that the task should be retried. If unspecified when the queue is created, Cloud Tasks will pick the default. This field is output only for pull queues. `min_backoff` will be truncated to the nearest second. This field has the same meaning as [min_backoff_seconds in queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
func (o RetryConfigPtrOutput) MinBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.MinBackoff
	}).(pulumi.StringPtrOutput)
}

// If true, then the number of attempts is unlimited.
func (o RetryConfigPtrOutput) UnlimitedAttempts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UnlimitedAttempts
	}).(pulumi.BoolPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//          StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

func (i StatusArgs) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput).ToStatusPtrOutputWithContext(ctx)
}

// StatusPtrInput is an input type that accepts StatusArgs, StatusPtr and StatusPtrOutput values.
// You can construct a concrete instance of `StatusPtrInput` via:
//
//          StatusArgs{...}
//
//  or:
//
//          nil
type StatusPtrInput interface {
	pulumi.Input

	ToStatusPtrOutput() StatusPtrOutput
	ToStatusPtrOutputWithContext(context.Context) StatusPtrOutput
}

type statusPtrType StatusArgs

func StatusPtr(v *StatusArgs) StatusPtrInput {
	return (*statusPtrType)(v)
}

func (*statusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (i *statusPtrType) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i *statusPtrType) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyT(func(v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v Status) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status { return *v }).(StatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Status) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusPtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *Status) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Status) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// A unit of scheduled work.
type Task struct {
	// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest *AppEngineHttpRequest `pulumi:"appEngineHttpRequest"`
	// Output only. The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime *string `pulumi:"createTime"`
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name *string `pulumi:"name"`
	// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
	PullMessage *PullMessage `pulumi:"pullMessage"`
	// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime *string `pulumi:"scheduleTime"`
	// Output only. The task status.
	Status *TaskStatus `pulumi:"status"`
	// Output only. The view specifies which subset of the Task has been returned.
	View *string `pulumi:"view"`
}

// TaskInput is an input type that accepts TaskArgs and TaskOutput values.
// You can construct a concrete instance of `TaskInput` via:
//
//          TaskArgs{...}
type TaskInput interface {
	pulumi.Input

	ToTaskOutput() TaskOutput
	ToTaskOutputWithContext(context.Context) TaskOutput
}

// A unit of scheduled work.
type TaskArgs struct {
	// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest AppEngineHttpRequestPtrInput `pulumi:"appEngineHttpRequest"`
	// Output only. The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
	PullMessage PullMessagePtrInput `pulumi:"pullMessage"`
	// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime pulumi.StringPtrInput `pulumi:"scheduleTime"`
	// Output only. The task status.
	Status TaskStatusPtrInput `pulumi:"status"`
	// Output only. The view specifies which subset of the Task has been returned.
	View pulumi.StringPtrInput `pulumi:"view"`
}

func (TaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Task)(nil)).Elem()
}

func (i TaskArgs) ToTaskOutput() TaskOutput {
	return i.ToTaskOutputWithContext(context.Background())
}

func (i TaskArgs) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOutput)
}

func (i TaskArgs) ToTaskPtrOutput() TaskPtrOutput {
	return i.ToTaskPtrOutputWithContext(context.Background())
}

func (i TaskArgs) ToTaskPtrOutputWithContext(ctx context.Context) TaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskOutput).ToTaskPtrOutputWithContext(ctx)
}

// TaskPtrInput is an input type that accepts TaskArgs, TaskPtr and TaskPtrOutput values.
// You can construct a concrete instance of `TaskPtrInput` via:
//
//          TaskArgs{...}
//
//  or:
//
//          nil
type TaskPtrInput interface {
	pulumi.Input

	ToTaskPtrOutput() TaskPtrOutput
	ToTaskPtrOutputWithContext(context.Context) TaskPtrOutput
}

type taskPtrType TaskArgs

func TaskPtr(v *TaskArgs) TaskPtrInput {
	return (*taskPtrType)(v)
}

func (*taskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (i *taskPtrType) ToTaskPtrOutput() TaskPtrOutput {
	return i.ToTaskPtrOutputWithContext(context.Background())
}

func (i *taskPtrType) ToTaskPtrOutputWithContext(ctx context.Context) TaskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskPtrOutput)
}

// A unit of scheduled work.
type TaskOutput struct{ *pulumi.OutputState }

func (TaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Task)(nil)).Elem()
}

func (o TaskOutput) ToTaskOutput() TaskOutput {
	return o
}

func (o TaskOutput) ToTaskOutputWithContext(ctx context.Context) TaskOutput {
	return o
}

func (o TaskOutput) ToTaskPtrOutput() TaskPtrOutput {
	return o.ToTaskPtrOutputWithContext(context.Background())
}

func (o TaskOutput) ToTaskPtrOutputWithContext(ctx context.Context) TaskPtrOutput {
	return o.ApplyT(func(v Task) *Task {
		return &v
	}).(TaskPtrOutput)
}

// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
func (o TaskOutput) AppEngineHttpRequest() AppEngineHttpRequestPtrOutput {
	return o.ApplyT(func(v Task) *AppEngineHttpRequest { return v.AppEngineHttpRequest }).(AppEngineHttpRequestPtrOutput)
}

// Output only. The time that the task was created. `create_time` will be truncated to the nearest second.
func (o TaskOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Task) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
func (o TaskOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Task) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
func (o TaskOutput) PullMessage() PullMessagePtrOutput {
	return o.ApplyT(func(v Task) *PullMessage { return v.PullMessage }).(PullMessagePtrOutput)
}

// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
func (o TaskOutput) ScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Task) *string { return v.ScheduleTime }).(pulumi.StringPtrOutput)
}

// Output only. The task status.
func (o TaskOutput) Status() TaskStatusPtrOutput {
	return o.ApplyT(func(v Task) *TaskStatus { return v.Status }).(TaskStatusPtrOutput)
}

// Output only. The view specifies which subset of the Task has been returned.
func (o TaskOutput) View() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Task) *string { return v.View }).(pulumi.StringPtrOutput)
}

type TaskPtrOutput struct{ *pulumi.OutputState }

func (TaskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Task)(nil)).Elem()
}

func (o TaskPtrOutput) ToTaskPtrOutput() TaskPtrOutput {
	return o
}

func (o TaskPtrOutput) ToTaskPtrOutputWithContext(ctx context.Context) TaskPtrOutput {
	return o
}

func (o TaskPtrOutput) Elem() TaskOutput {
	return o.ApplyT(func(v *Task) Task { return *v }).(TaskOutput)
}

// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
func (o TaskPtrOutput) AppEngineHttpRequest() AppEngineHttpRequestPtrOutput {
	return o.ApplyT(func(v *Task) *AppEngineHttpRequest {
		if v == nil {
			return nil
		}
		return v.AppEngineHttpRequest
	}).(AppEngineHttpRequestPtrOutput)
}

// Output only. The time that the task was created. `create_time` will be truncated to the nearest second.
func (o TaskPtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
func (o TaskPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
func (o TaskPtrOutput) PullMessage() PullMessagePtrOutput {
	return o.ApplyT(func(v *Task) *PullMessage {
		if v == nil {
			return nil
		}
		return v.PullMessage
	}).(PullMessagePtrOutput)
}

// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
func (o TaskPtrOutput) ScheduleTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleTime
	}).(pulumi.StringPtrOutput)
}

// Output only. The task status.
func (o TaskPtrOutput) Status() TaskStatusPtrOutput {
	return o.ApplyT(func(v *Task) *TaskStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(TaskStatusPtrOutput)
}

// Output only. The view specifies which subset of the Task has been returned.
func (o TaskPtrOutput) View() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Task) *string {
		if v == nil {
			return nil
		}
		return v.View
	}).(pulumi.StringPtrOutput)
}

// Status of the task.
type TaskStatus struct {
	// Output only. The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
	AttemptDispatchCount *int `pulumi:"attemptDispatchCount"`
	// Output only. The number of attempts which have received a response. This field is not calculated for pull tasks.
	AttemptResponseCount *int `pulumi:"attemptResponseCount"`
	// Output only. The status of the task's first attempt. Only dispatch_time will be set. The other AttemptStatus information is not retained by Cloud Tasks. This field is not calculated for pull tasks.
	FirstAttemptStatus *AttemptStatus `pulumi:"firstAttemptStatus"`
	// Output only. The status of the task's last attempt. This field is not calculated for pull tasks.
	LastAttemptStatus *AttemptStatus `pulumi:"lastAttemptStatus"`
}

// TaskStatusInput is an input type that accepts TaskStatusArgs and TaskStatusOutput values.
// You can construct a concrete instance of `TaskStatusInput` via:
//
//          TaskStatusArgs{...}
type TaskStatusInput interface {
	pulumi.Input

	ToTaskStatusOutput() TaskStatusOutput
	ToTaskStatusOutputWithContext(context.Context) TaskStatusOutput
}

// Status of the task.
type TaskStatusArgs struct {
	// Output only. The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
	AttemptDispatchCount pulumi.IntPtrInput `pulumi:"attemptDispatchCount"`
	// Output only. The number of attempts which have received a response. This field is not calculated for pull tasks.
	AttemptResponseCount pulumi.IntPtrInput `pulumi:"attemptResponseCount"`
	// Output only. The status of the task's first attempt. Only dispatch_time will be set. The other AttemptStatus information is not retained by Cloud Tasks. This field is not calculated for pull tasks.
	FirstAttemptStatus AttemptStatusPtrInput `pulumi:"firstAttemptStatus"`
	// Output only. The status of the task's last attempt. This field is not calculated for pull tasks.
	LastAttemptStatus AttemptStatusPtrInput `pulumi:"lastAttemptStatus"`
}

func (TaskStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskStatus)(nil)).Elem()
}

func (i TaskStatusArgs) ToTaskStatusOutput() TaskStatusOutput {
	return i.ToTaskStatusOutputWithContext(context.Background())
}

func (i TaskStatusArgs) ToTaskStatusOutputWithContext(ctx context.Context) TaskStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskStatusOutput)
}

func (i TaskStatusArgs) ToTaskStatusPtrOutput() TaskStatusPtrOutput {
	return i.ToTaskStatusPtrOutputWithContext(context.Background())
}

func (i TaskStatusArgs) ToTaskStatusPtrOutputWithContext(ctx context.Context) TaskStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskStatusOutput).ToTaskStatusPtrOutputWithContext(ctx)
}

// TaskStatusPtrInput is an input type that accepts TaskStatusArgs, TaskStatusPtr and TaskStatusPtrOutput values.
// You can construct a concrete instance of `TaskStatusPtrInput` via:
//
//          TaskStatusArgs{...}
//
//  or:
//
//          nil
type TaskStatusPtrInput interface {
	pulumi.Input

	ToTaskStatusPtrOutput() TaskStatusPtrOutput
	ToTaskStatusPtrOutputWithContext(context.Context) TaskStatusPtrOutput
}

type taskStatusPtrType TaskStatusArgs

func TaskStatusPtr(v *TaskStatusArgs) TaskStatusPtrInput {
	return (*taskStatusPtrType)(v)
}

func (*taskStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskStatus)(nil)).Elem()
}

func (i *taskStatusPtrType) ToTaskStatusPtrOutput() TaskStatusPtrOutput {
	return i.ToTaskStatusPtrOutputWithContext(context.Background())
}

func (i *taskStatusPtrType) ToTaskStatusPtrOutputWithContext(ctx context.Context) TaskStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskStatusPtrOutput)
}

// Status of the task.
type TaskStatusOutput struct{ *pulumi.OutputState }

func (TaskStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskStatus)(nil)).Elem()
}

func (o TaskStatusOutput) ToTaskStatusOutput() TaskStatusOutput {
	return o
}

func (o TaskStatusOutput) ToTaskStatusOutputWithContext(ctx context.Context) TaskStatusOutput {
	return o
}

func (o TaskStatusOutput) ToTaskStatusPtrOutput() TaskStatusPtrOutput {
	return o.ToTaskStatusPtrOutputWithContext(context.Background())
}

func (o TaskStatusOutput) ToTaskStatusPtrOutputWithContext(ctx context.Context) TaskStatusPtrOutput {
	return o.ApplyT(func(v TaskStatus) *TaskStatus {
		return &v
	}).(TaskStatusPtrOutput)
}

// Output only. The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
func (o TaskStatusOutput) AttemptDispatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskStatus) *int { return v.AttemptDispatchCount }).(pulumi.IntPtrOutput)
}

// Output only. The number of attempts which have received a response. This field is not calculated for pull tasks.
func (o TaskStatusOutput) AttemptResponseCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TaskStatus) *int { return v.AttemptResponseCount }).(pulumi.IntPtrOutput)
}

// Output only. The status of the task's first attempt. Only dispatch_time will be set. The other AttemptStatus information is not retained by Cloud Tasks. This field is not calculated for pull tasks.
func (o TaskStatusOutput) FirstAttemptStatus() AttemptStatusPtrOutput {
	return o.ApplyT(func(v TaskStatus) *AttemptStatus { return v.FirstAttemptStatus }).(AttemptStatusPtrOutput)
}

// Output only. The status of the task's last attempt. This field is not calculated for pull tasks.
func (o TaskStatusOutput) LastAttemptStatus() AttemptStatusPtrOutput {
	return o.ApplyT(func(v TaskStatus) *AttemptStatus { return v.LastAttemptStatus }).(AttemptStatusPtrOutput)
}

type TaskStatusPtrOutput struct{ *pulumi.OutputState }

func (TaskStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskStatus)(nil)).Elem()
}

func (o TaskStatusPtrOutput) ToTaskStatusPtrOutput() TaskStatusPtrOutput {
	return o
}

func (o TaskStatusPtrOutput) ToTaskStatusPtrOutputWithContext(ctx context.Context) TaskStatusPtrOutput {
	return o
}

func (o TaskStatusPtrOutput) Elem() TaskStatusOutput {
	return o.ApplyT(func(v *TaskStatus) TaskStatus { return *v }).(TaskStatusOutput)
}

// Output only. The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
func (o TaskStatusPtrOutput) AttemptDispatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskStatus) *int {
		if v == nil {
			return nil
		}
		return v.AttemptDispatchCount
	}).(pulumi.IntPtrOutput)
}

// Output only. The number of attempts which have received a response. This field is not calculated for pull tasks.
func (o TaskStatusPtrOutput) AttemptResponseCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TaskStatus) *int {
		if v == nil {
			return nil
		}
		return v.AttemptResponseCount
	}).(pulumi.IntPtrOutput)
}

// Output only. The status of the task's first attempt. Only dispatch_time will be set. The other AttemptStatus information is not retained by Cloud Tasks. This field is not calculated for pull tasks.
func (o TaskStatusPtrOutput) FirstAttemptStatus() AttemptStatusPtrOutput {
	return o.ApplyT(func(v *TaskStatus) *AttemptStatus {
		if v == nil {
			return nil
		}
		return v.FirstAttemptStatus
	}).(AttemptStatusPtrOutput)
}

// Output only. The status of the task's last attempt. This field is not calculated for pull tasks.
func (o TaskStatusPtrOutput) LastAttemptStatus() AttemptStatusPtrOutput {
	return o.ApplyT(func(v *TaskStatus) *AttemptStatus {
		if v == nil {
			return nil
		}
		return v.LastAttemptStatus
	}).(AttemptStatusPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AppEngineHttpRequestOutput{})
	pulumi.RegisterOutputType(AppEngineHttpRequestPtrOutput{})
	pulumi.RegisterOutputType(AppEngineHttpTargetOutput{})
	pulumi.RegisterOutputType(AppEngineHttpTargetPtrOutput{})
	pulumi.RegisterOutputType(AppEngineRoutingOutput{})
	pulumi.RegisterOutputType(AppEngineRoutingPtrOutput{})
	pulumi.RegisterOutputType(AttemptStatusOutput{})
	pulumi.RegisterOutputType(AttemptStatusPtrOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(PullMessageOutput{})
	pulumi.RegisterOutputType(PullMessagePtrOutput{})
	pulumi.RegisterOutputType(PullTargetOutput{})
	pulumi.RegisterOutputType(PullTargetPtrOutput{})
	pulumi.RegisterOutputType(QueueStatsOutput{})
	pulumi.RegisterOutputType(QueueStatsPtrOutput{})
	pulumi.RegisterOutputType(RateLimitsOutput{})
	pulumi.RegisterOutputType(RateLimitsPtrOutput{})
	pulumi.RegisterOutputType(RetryConfigOutput{})
	pulumi.RegisterOutputType(RetryConfigPtrOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
	pulumi.RegisterOutputType(TaskOutput{})
	pulumi.RegisterOutputType(TaskPtrOutput{})
	pulumi.RegisterOutputType(TaskStatusOutput{})
	pulumi.RegisterOutputType(TaskStatusPtrOutput{})
}
