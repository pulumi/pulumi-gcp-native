// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets a task.
func LookupTask(ctx *pulumi.Context, args *LookupTaskArgs, opts ...pulumi.InvokeOption) (*LookupTaskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTaskResult
	err := ctx.Invoke("google-native:cloudtasks/v2beta2:getTask", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTaskArgs struct {
	Location     string  `pulumi:"location"`
	Project      *string `pulumi:"project"`
	QueueId      string  `pulumi:"queueId"`
	ResponseView *string `pulumi:"responseView"`
	TaskId       string  `pulumi:"taskId"`
}

type LookupTaskResult struct {
	// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest AppEngineHttpRequestResponse `pulumi:"appEngineHttpRequest"`
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime string `pulumi:"createTime"`
	// HTTP request that is sent to the task's target. An HTTP task is a task that has HttpRequest set.
	HttpRequest HttpRequestResponse `pulumi:"httpRequest"`
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name string `pulumi:"name"`
	// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
	PullMessage PullMessageResponse `pulumi:"pullMessage"`
	// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime string `pulumi:"scheduleTime"`
	// The task status.
	Status TaskStatusResponse `pulumi:"status"`
	// The view specifies which subset of the Task has been returned.
	View string `pulumi:"view"`
}

func LookupTaskOutput(ctx *pulumi.Context, args LookupTaskOutputArgs, opts ...pulumi.InvokeOption) LookupTaskResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTaskResult, error) {
			args := v.(LookupTaskArgs)
			r, err := LookupTask(ctx, &args, opts...)
			var s LookupTaskResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTaskResultOutput)
}

type LookupTaskOutputArgs struct {
	Location     pulumi.StringInput    `pulumi:"location"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
	QueueId      pulumi.StringInput    `pulumi:"queueId"`
	ResponseView pulumi.StringPtrInput `pulumi:"responseView"`
	TaskId       pulumi.StringInput    `pulumi:"taskId"`
}

func (LookupTaskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskArgs)(nil)).Elem()
}

type LookupTaskResultOutput struct{ *pulumi.OutputState }

func (LookupTaskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskResult)(nil)).Elem()
}

func (o LookupTaskResultOutput) ToLookupTaskResultOutput() LookupTaskResultOutput {
	return o
}

func (o LookupTaskResultOutput) ToLookupTaskResultOutputWithContext(ctx context.Context) LookupTaskResultOutput {
	return o
}

func (o LookupTaskResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupTaskResult] {
	return pulumix.Output[LookupTaskResult]{
		OutputState: o.OutputState,
	}
}

// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
func (o LookupTaskResultOutput) AppEngineHttpRequest() AppEngineHttpRequestResponseOutput {
	return o.ApplyT(func(v LookupTaskResult) AppEngineHttpRequestResponse { return v.AppEngineHttpRequest }).(AppEngineHttpRequestResponseOutput)
}

// The time that the task was created. `create_time` will be truncated to the nearest second.
func (o LookupTaskResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// HTTP request that is sent to the task's target. An HTTP task is a task that has HttpRequest set.
func (o LookupTaskResultOutput) HttpRequest() HttpRequestResponseOutput {
	return o.ApplyT(func(v LookupTaskResult) HttpRequestResponse { return v.HttpRequest }).(HttpRequestResponseOutput)
}

// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
func (o LookupTaskResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.Name }).(pulumi.StringOutput)
}

// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
func (o LookupTaskResultOutput) PullMessage() PullMessageResponseOutput {
	return o.ApplyT(func(v LookupTaskResult) PullMessageResponse { return v.PullMessage }).(PullMessageResponseOutput)
}

// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
func (o LookupTaskResultOutput) ScheduleTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.ScheduleTime }).(pulumi.StringOutput)
}

// The task status.
func (o LookupTaskResultOutput) Status() TaskStatusResponseOutput {
	return o.ApplyT(func(v LookupTaskResult) TaskStatusResponse { return v.Status }).(TaskStatusResponseOutput)
}

// The view specifies which subset of the Task has been returned.
func (o LookupTaskResultOutput) View() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.View }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTaskResultOutput{})
}
