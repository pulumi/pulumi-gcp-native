// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a task and adds it to a queue. Tasks cannot be updated after creation; there is no UpdateTask command. * For App Engine queues, the maximum task size is 100KB. * For pull queues, the maximum task size is 1MB.
type QueueTask struct {
	pulumi.CustomResourceState

	// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest AppEngineHttpRequestResponseOutput `pulumi:"appEngineHttpRequest"`
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
	PullMessage PullMessageResponseOutput `pulumi:"pullMessage"`
	// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime pulumi.StringOutput `pulumi:"scheduleTime"`
	// The task status.
	Status TaskStatusResponseOutput `pulumi:"status"`
	// The view specifies which subset of the Task has been returned.
	View pulumi.StringOutput `pulumi:"view"`
}

// NewQueueTask registers a new resource with the given unique name, arguments, and options.
func NewQueueTask(ctx *pulumi.Context,
	name string, args *QueueTaskArgs, opts ...pulumi.ResourceOption) (*QueueTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.QueuesId == nil {
		return nil, errors.New("invalid value for required argument 'QueuesId'")
	}
	if args.TasksId == nil {
		return nil, errors.New("invalid value for required argument 'TasksId'")
	}
	var resource QueueTask
	err := ctx.RegisterResource("google-cloud:cloudtasks/v2beta2:QueueTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueueTask gets an existing QueueTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueueTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueTaskState, opts ...pulumi.ResourceOption) (*QueueTask, error) {
	var resource QueueTask
	err := ctx.ReadResource("google-cloud:cloudtasks/v2beta2:QueueTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueueTask resources.
type queueTaskState struct {
	// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest *AppEngineHttpRequestResponse `pulumi:"appEngineHttpRequest"`
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime *string `pulumi:"createTime"`
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name *string `pulumi:"name"`
	// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
	PullMessage *PullMessageResponse `pulumi:"pullMessage"`
	// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime *string `pulumi:"scheduleTime"`
	// The task status.
	Status *TaskStatusResponse `pulumi:"status"`
	// The view specifies which subset of the Task has been returned.
	View *string `pulumi:"view"`
}

type QueueTaskState struct {
	// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest AppEngineHttpRequestResponsePtrInput
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime pulumi.StringPtrInput
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name pulumi.StringPtrInput
	// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
	PullMessage PullMessageResponsePtrInput
	// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime pulumi.StringPtrInput
	// The task status.
	Status TaskStatusResponsePtrInput
	// The view specifies which subset of the Task has been returned.
	View pulumi.StringPtrInput
}

func (QueueTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueTaskState)(nil)).Elem()
}

type queueTaskArgs struct {
	// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest *AppEngineHttpRequest `pulumi:"appEngineHttpRequest"`
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime  *string `pulumi:"createTime"`
	LocationsId string  `pulumi:"locationsId"`
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
	PullMessage *PullMessage `pulumi:"pullMessage"`
	QueuesId    string       `pulumi:"queuesId"`
	// The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
	ResponseView *string `pulumi:"responseView"`
	// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime *string `pulumi:"scheduleTime"`
	// The task status.
	Status  *TaskStatus `pulumi:"status"`
	TasksId string      `pulumi:"tasksId"`
	// The view specifies which subset of the Task has been returned.
	View *string `pulumi:"view"`
}

// The set of arguments for constructing a QueueTask resource.
type QueueTaskArgs struct {
	// App Engine HTTP request that is sent to the task's target. Can be set only if app_engine_http_target is set on the queue. An App Engine task is a task that has AppEngineHttpRequest set.
	AppEngineHttpRequest AppEngineHttpRequestPtrInput
	// The time that the task was created. `create_time` will be truncated to the nearest second.
	CreateTime  pulumi.StringPtrInput
	LocationsId pulumi.StringInput
	// Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// LeaseTasks to process the task. Can be set only if pull_target is set on the queue. A pull task is a task that has PullMessage set.
	PullMessage PullMessagePtrInput
	QueuesId    pulumi.StringInput
	// The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
	ResponseView pulumi.StringPtrInput
	// The time when the task is scheduled to be attempted. For App Engine queues, this is when the task will be attempted or retried. For pull queues, this is the time when the task is available to be leased; if a task is currently leased, this is the time when the current lease expires, that is, the time that the task was leased plus the lease_duration. `schedule_time` will be truncated to the nearest microsecond.
	ScheduleTime pulumi.StringPtrInput
	// The task status.
	Status  TaskStatusPtrInput
	TasksId pulumi.StringInput
	// The view specifies which subset of the Task has been returned.
	View pulumi.StringPtrInput
}

func (QueueTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueTaskArgs)(nil)).Elem()
}

type QueueTaskInput interface {
	pulumi.Input

	ToQueueTaskOutput() QueueTaskOutput
	ToQueueTaskOutputWithContext(ctx context.Context) QueueTaskOutput
}

func (*QueueTask) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueTask)(nil))
}

func (i *QueueTask) ToQueueTaskOutput() QueueTaskOutput {
	return i.ToQueueTaskOutputWithContext(context.Background())
}

func (i *QueueTask) ToQueueTaskOutputWithContext(ctx context.Context) QueueTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueTaskOutput)
}

type QueueTaskOutput struct {
	*pulumi.OutputState
}

func (QueueTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueTask)(nil))
}

func (o QueueTaskOutput) ToQueueTaskOutput() QueueTaskOutput {
	return o
}

func (o QueueTaskOutput) ToQueueTaskOutputWithContext(ctx context.Context) QueueTaskOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(QueueTaskOutput{})
}
