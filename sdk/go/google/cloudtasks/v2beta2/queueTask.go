// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a task and adds it to a queue. Tasks cannot be updated after creation; there is no UpdateTask command. * For App Engine queues, the maximum task size is 100KB. * For pull queues, the maximum task size is 1MB.
type QueueTask struct {
	pulumi.CustomResourceState
}

// NewQueueTask registers a new resource with the given unique name, arguments, and options.
func NewQueueTask(ctx *pulumi.Context,
	name string, args *QueueTaskArgs, opts ...pulumi.ResourceOption) (*QueueTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.QueuesId == nil {
		return nil, errors.New("invalid value for required argument 'QueuesId'")
	}
	if args.TasksId == nil {
		return nil, errors.New("invalid value for required argument 'TasksId'")
	}
	var resource QueueTask
	err := ctx.RegisterResource("google-cloud:cloudtasks/v2beta2:QueueTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueueTask gets an existing QueueTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueueTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueTaskState, opts ...pulumi.ResourceOption) (*QueueTask, error) {
	var resource QueueTask
	err := ctx.ReadResource("google-cloud:cloudtasks/v2beta2:QueueTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueueTask resources.
type queueTaskState struct {
}

type QueueTaskState struct {
}

func (QueueTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueTaskState)(nil)).Elem()
}

type queueTaskArgs struct {
	LocationsId string `pulumi:"locationsId"`
	ProjectsId  string `pulumi:"projectsId"`
	QueuesId    string `pulumi:"queuesId"`
	// The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
	ResponseView *string `pulumi:"responseView"`
	// Required. The task to add. Task names have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`. The user can optionally specify a task name. If a name is not specified then the system will generate a random unique task id, which will be set in the task returned in the response. If schedule_time is not set or is in the past then Cloud Tasks will set it to the current time. Task De-duplication: Explicitly specifying a task ID enables task de-duplication. If a task's ID is identical to that of an existing task or a task that was deleted or completed recently then the call will fail with ALREADY_EXISTS. If the task's queue was created using Cloud Tasks, then another task with the same name can't be created for ~1hour after the original task was deleted or completed. If the task's queue was created using queue.yaml or queue.xml, then another task with the same name can't be created for ~9days after the original task was deleted or completed. Because there is an extra lookup cost to identify duplicate task names, these CreateTask calls have significantly increased latency. Using hashed strings for the task id or for the prefix of the task id is recommended. Choosing task ids that are sequential or have sequential prefixes, for example using a timestamp, causes an increase in latency and error rates in all task commands. The infrastructure relies on an approximately uniform distribution of task ids to store and serve tasks efficiently.
	Task    *Task  `pulumi:"task"`
	TasksId string `pulumi:"tasksId"`
}

// The set of arguments for constructing a QueueTask resource.
type QueueTaskArgs struct {
	LocationsId pulumi.StringInput
	ProjectsId  pulumi.StringInput
	QueuesId    pulumi.StringInput
	// The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
	ResponseView pulumi.StringPtrInput
	// Required. The task to add. Task names have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`. The user can optionally specify a task name. If a name is not specified then the system will generate a random unique task id, which will be set in the task returned in the response. If schedule_time is not set or is in the past then Cloud Tasks will set it to the current time. Task De-duplication: Explicitly specifying a task ID enables task de-duplication. If a task's ID is identical to that of an existing task or a task that was deleted or completed recently then the call will fail with ALREADY_EXISTS. If the task's queue was created using Cloud Tasks, then another task with the same name can't be created for ~1hour after the original task was deleted or completed. If the task's queue was created using queue.yaml or queue.xml, then another task with the same name can't be created for ~9days after the original task was deleted or completed. Because there is an extra lookup cost to identify duplicate task names, these CreateTask calls have significantly increased latency. Using hashed strings for the task id or for the prefix of the task id is recommended. Choosing task ids that are sequential or have sequential prefixes, for example using a timestamp, causes an increase in latency and error rates in all task commands. The infrastructure relies on an approximately uniform distribution of task ids to store and serve tasks efficiently.
	Task    TaskPtrInput
	TasksId pulumi.StringInput
}

func (QueueTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueTaskArgs)(nil)).Elem()
}

type QueueTaskInput interface {
	pulumi.Input

	ToQueueTaskOutput() QueueTaskOutput
	ToQueueTaskOutputWithContext(ctx context.Context) QueueTaskOutput
}

func (*QueueTask) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueTask)(nil))
}

func (i *QueueTask) ToQueueTaskOutput() QueueTaskOutput {
	return i.ToQueueTaskOutputWithContext(context.Background())
}

func (i *QueueTask) ToQueueTaskOutputWithContext(ctx context.Context) QueueTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueTaskOutput)
}

type QueueTaskOutput struct {
	*pulumi.OutputState
}

func (QueueTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueTask)(nil))
}

func (o QueueTaskOutput) ToQueueTaskOutput() QueueTaskOutput {
	return o
}

func (o QueueTaskOutput) ToQueueTaskOutputWithContext(ctx context.Context) QueueTaskOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(QueueTaskOutput{})
}
