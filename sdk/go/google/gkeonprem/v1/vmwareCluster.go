// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new VMware user cluster in a given project and location.
type VmwareCluster struct {
	pulumi.CustomResourceState

	// The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
	AdminClusterMembership pulumi.StringOutput `pulumi:"adminClusterMembership"`
	// The resource name of the VMware admin cluster hosting this user cluster.
	AdminClusterName pulumi.StringOutput `pulumi:"adminClusterName"`
	// Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups VmwareAAGConfigResponseOutput `pulumi:"antiAffinityGroups"`
	// RBAC policy that will be applied and managed by the Anthos On-Prem API.
	Authorization AuthorizationResponseOutput `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig VmwareAutoRepairConfigResponseOutput `pulumi:"autoRepairConfig"`
	// VMware user cluster control plane nodes must have either 1 or 3 replicas.
	ControlPlaneNode VmwareControlPlaneNodeConfigResponseOutput `pulumi:"controlPlaneNode"`
	// The time at which VMware user cluster was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
	DataplaneV2 VmwareDataplaneV2ConfigResponseOutput `pulumi:"dataplaneV2"`
	// The time at which VMware user cluster was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// A human readable description of this VMware user cluster.
	Description pulumi.StringOutput `pulumi:"description"`
	// Disable bundled ingress.
	DisableBundledIngress pulumi.BoolOutput `pulumi:"disableBundledIngress"`
	// Enable control plane V2. Default to false.
	EnableControlPlaneV2 pulumi.BoolOutput `pulumi:"enableControlPlaneV2"`
	// The DNS name of VMware user cluster's API server.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Fleet configuration for the cluster.
	Fleet FleetResponseOutput `pulumi:"fleet"`
	// Load balancer configuration.
	LoadBalancer VmwareLoadBalancerConfigResponseOutput `pulumi:"loadBalancer"`
	// The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
	LocalName pulumi.StringOutput `pulumi:"localName"`
	Location  pulumi.StringOutput `pulumi:"location"`
	// Immutable. The VMware user cluster resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The VMware user cluster network configuration.
	NetworkConfig VmwareNetworkConfigResponseOutput `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for your user cluster.
	OnPremVersion pulumi.StringOutput `pulumi:"onPremVersion"`
	Project       pulumi.StringOutput `pulumi:"project"`
	// If set, there are currently changes in flight to the VMware user cluster.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The current state of VMware user cluster.
	State pulumi.StringOutput `pulumi:"state"`
	// ResourceStatus representing detailed cluster state.
	Status ResourceStatusResponseOutput `pulumi:"status"`
	// Storage configuration.
	Storage VmwareStorageConfigResponseOutput `pulumi:"storage"`
	// The unique identifier of the VMware user cluster.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time at which VMware user cluster was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Specifies upgrade policy for the cluster.
	UpgradePolicy VmwareClusterUpgradePolicyResponseOutput `pulumi:"upgradePolicy"`
	// ValidationCheck represents the result of the preflight check job.
	ValidationCheck ValidationCheckResponseOutput `pulumi:"validationCheck"`
	// VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
	Vcenter VmwareVCenterConfigResponseOutput `pulumi:"vcenter"`
	// Enable VM tracking.
	VmTrackingEnabled pulumi.BoolOutput `pulumi:"vmTrackingEnabled"`
	// User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
	VmwareClusterId pulumi.StringPtrOutput `pulumi:"vmwareClusterId"`
}

// NewVmwareCluster registers a new resource with the given unique name, arguments, and options.
func NewVmwareCluster(ctx *pulumi.Context,
	name string, args *VmwareClusterArgs, opts ...pulumi.ResourceOption) (*VmwareCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminClusterMembership == nil {
		return nil, errors.New("invalid value for required argument 'AdminClusterMembership'")
	}
	if args.OnPremVersion == nil {
		return nil, errors.New("invalid value for required argument 'OnPremVersion'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmwareCluster
	err := ctx.RegisterResource("google-native:gkeonprem/v1:VmwareCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmwareCluster gets an existing VmwareCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmwareCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmwareClusterState, opts ...pulumi.ResourceOption) (*VmwareCluster, error) {
	var resource VmwareCluster
	err := ctx.ReadResource("google-native:gkeonprem/v1:VmwareCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmwareCluster resources.
type vmwareClusterState struct {
}

type VmwareClusterState struct {
}

func (VmwareClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareClusterState)(nil)).Elem()
}

type vmwareClusterArgs struct {
	// The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
	AdminClusterMembership string `pulumi:"adminClusterMembership"`
	// Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations map[string]string `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups *VmwareAAGConfig `pulumi:"antiAffinityGroups"`
	// RBAC policy that will be applied and managed by the Anthos On-Prem API.
	Authorization *Authorization `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig *VmwareAutoRepairConfig `pulumi:"autoRepairConfig"`
	// VMware user cluster control plane nodes must have either 1 or 3 replicas.
	ControlPlaneNode *VmwareControlPlaneNodeConfig `pulumi:"controlPlaneNode"`
	// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
	DataplaneV2 *VmwareDataplaneV2Config `pulumi:"dataplaneV2"`
	// A human readable description of this VMware user cluster.
	Description *string `pulumi:"description"`
	// Disable bundled ingress.
	DisableBundledIngress *bool `pulumi:"disableBundledIngress"`
	// Enable control plane V2. Default to false.
	EnableControlPlaneV2 *bool `pulumi:"enableControlPlaneV2"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
	Etag *string `pulumi:"etag"`
	// Load balancer configuration.
	LoadBalancer *VmwareLoadBalancerConfig `pulumi:"loadBalancer"`
	Location     *string                   `pulumi:"location"`
	// Immutable. The VMware user cluster resource name.
	Name *string `pulumi:"name"`
	// The VMware user cluster network configuration.
	NetworkConfig *VmwareNetworkConfig `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for your user cluster.
	OnPremVersion string  `pulumi:"onPremVersion"`
	Project       *string `pulumi:"project"`
	// Storage configuration.
	Storage *VmwareStorageConfig `pulumi:"storage"`
	// Specifies upgrade policy for the cluster.
	UpgradePolicy *VmwareClusterUpgradePolicy `pulumi:"upgradePolicy"`
	// VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
	Vcenter *VmwareVCenterConfig `pulumi:"vcenter"`
	// Enable VM tracking.
	VmTrackingEnabled *bool `pulumi:"vmTrackingEnabled"`
	// User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
	VmwareClusterId *string `pulumi:"vmwareClusterId"`
}

// The set of arguments for constructing a VmwareCluster resource.
type VmwareClusterArgs struct {
	// The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
	AdminClusterMembership pulumi.StringInput
	// Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations pulumi.StringMapInput
	// AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups VmwareAAGConfigPtrInput
	// RBAC policy that will be applied and managed by the Anthos On-Prem API.
	Authorization AuthorizationPtrInput
	// Configuration for auto repairing.
	AutoRepairConfig VmwareAutoRepairConfigPtrInput
	// VMware user cluster control plane nodes must have either 1 or 3 replicas.
	ControlPlaneNode VmwareControlPlaneNodeConfigPtrInput
	// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
	DataplaneV2 VmwareDataplaneV2ConfigPtrInput
	// A human readable description of this VMware user cluster.
	Description pulumi.StringPtrInput
	// Disable bundled ingress.
	DisableBundledIngress pulumi.BoolPtrInput
	// Enable control plane V2. Default to false.
	EnableControlPlaneV2 pulumi.BoolPtrInput
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
	Etag pulumi.StringPtrInput
	// Load balancer configuration.
	LoadBalancer VmwareLoadBalancerConfigPtrInput
	Location     pulumi.StringPtrInput
	// Immutable. The VMware user cluster resource name.
	Name pulumi.StringPtrInput
	// The VMware user cluster network configuration.
	NetworkConfig VmwareNetworkConfigPtrInput
	// The Anthos clusters on the VMware version for your user cluster.
	OnPremVersion pulumi.StringInput
	Project       pulumi.StringPtrInput
	// Storage configuration.
	Storage VmwareStorageConfigPtrInput
	// Specifies upgrade policy for the cluster.
	UpgradePolicy VmwareClusterUpgradePolicyPtrInput
	// VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
	Vcenter VmwareVCenterConfigPtrInput
	// Enable VM tracking.
	VmTrackingEnabled pulumi.BoolPtrInput
	// User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
	VmwareClusterId pulumi.StringPtrInput
}

func (VmwareClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareClusterArgs)(nil)).Elem()
}

type VmwareClusterInput interface {
	pulumi.Input

	ToVmwareClusterOutput() VmwareClusterOutput
	ToVmwareClusterOutputWithContext(ctx context.Context) VmwareClusterOutput
}

func (*VmwareCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareCluster)(nil)).Elem()
}

func (i *VmwareCluster) ToVmwareClusterOutput() VmwareClusterOutput {
	return i.ToVmwareClusterOutputWithContext(context.Background())
}

func (i *VmwareCluster) ToVmwareClusterOutputWithContext(ctx context.Context) VmwareClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareClusterOutput)
}

func (i *VmwareCluster) ToOutput(ctx context.Context) pulumix.Output[*VmwareCluster] {
	return pulumix.Output[*VmwareCluster]{
		OutputState: i.ToVmwareClusterOutputWithContext(ctx).OutputState,
	}
}

type VmwareClusterOutput struct{ *pulumi.OutputState }

func (VmwareClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareCluster)(nil)).Elem()
}

func (o VmwareClusterOutput) ToVmwareClusterOutput() VmwareClusterOutput {
	return o
}

func (o VmwareClusterOutput) ToVmwareClusterOutputWithContext(ctx context.Context) VmwareClusterOutput {
	return o
}

func (o VmwareClusterOutput) ToOutput(ctx context.Context) pulumix.Output[*VmwareCluster] {
	return pulumix.Output[*VmwareCluster]{
		OutputState: o.OutputState,
	}
}

// The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
func (o VmwareClusterOutput) AdminClusterMembership() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.AdminClusterMembership }).(pulumi.StringOutput)
}

// The resource name of the VMware admin cluster hosting this user cluster.
func (o VmwareClusterOutput) AdminClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.AdminClusterName }).(pulumi.StringOutput)
}

// Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
func (o VmwareClusterOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
func (o VmwareClusterOutput) AntiAffinityGroups() VmwareAAGConfigResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) VmwareAAGConfigResponseOutput { return v.AntiAffinityGroups }).(VmwareAAGConfigResponseOutput)
}

// RBAC policy that will be applied and managed by the Anthos On-Prem API.
func (o VmwareClusterOutput) Authorization() AuthorizationResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) AuthorizationResponseOutput { return v.Authorization }).(AuthorizationResponseOutput)
}

// Configuration for auto repairing.
func (o VmwareClusterOutput) AutoRepairConfig() VmwareAutoRepairConfigResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) VmwareAutoRepairConfigResponseOutput { return v.AutoRepairConfig }).(VmwareAutoRepairConfigResponseOutput)
}

// VMware user cluster control plane nodes must have either 1 or 3 replicas.
func (o VmwareClusterOutput) ControlPlaneNode() VmwareControlPlaneNodeConfigResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) VmwareControlPlaneNodeConfigResponseOutput { return v.ControlPlaneNode }).(VmwareControlPlaneNodeConfigResponseOutput)
}

// The time at which VMware user cluster was created.
func (o VmwareClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
func (o VmwareClusterOutput) DataplaneV2() VmwareDataplaneV2ConfigResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) VmwareDataplaneV2ConfigResponseOutput { return v.DataplaneV2 }).(VmwareDataplaneV2ConfigResponseOutput)
}

// The time at which VMware user cluster was deleted.
func (o VmwareClusterOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// A human readable description of this VMware user cluster.
func (o VmwareClusterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Disable bundled ingress.
func (o VmwareClusterOutput) DisableBundledIngress() pulumi.BoolOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.BoolOutput { return v.DisableBundledIngress }).(pulumi.BoolOutput)
}

// Enable control plane V2. Default to false.
func (o VmwareClusterOutput) EnableControlPlaneV2() pulumi.BoolOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.BoolOutput { return v.EnableControlPlaneV2 }).(pulumi.BoolOutput)
}

// The DNS name of VMware user cluster's API server.
func (o VmwareClusterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
func (o VmwareClusterOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Fleet configuration for the cluster.
func (o VmwareClusterOutput) Fleet() FleetResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) FleetResponseOutput { return v.Fleet }).(FleetResponseOutput)
}

// Load balancer configuration.
func (o VmwareClusterOutput) LoadBalancer() VmwareLoadBalancerConfigResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) VmwareLoadBalancerConfigResponseOutput { return v.LoadBalancer }).(VmwareLoadBalancerConfigResponseOutput)
}

// The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
func (o VmwareClusterOutput) LocalName() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.LocalName }).(pulumi.StringOutput)
}

func (o VmwareClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. The VMware user cluster resource name.
func (o VmwareClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The VMware user cluster network configuration.
func (o VmwareClusterOutput) NetworkConfig() VmwareNetworkConfigResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) VmwareNetworkConfigResponseOutput { return v.NetworkConfig }).(VmwareNetworkConfigResponseOutput)
}

// The Anthos clusters on the VMware version for your user cluster.
func (o VmwareClusterOutput) OnPremVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.OnPremVersion }).(pulumi.StringOutput)
}

func (o VmwareClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If set, there are currently changes in flight to the VMware user cluster.
func (o VmwareClusterOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The current state of VMware user cluster.
func (o VmwareClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// ResourceStatus representing detailed cluster state.
func (o VmwareClusterOutput) Status() ResourceStatusResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) ResourceStatusResponseOutput { return v.Status }).(ResourceStatusResponseOutput)
}

// Storage configuration.
func (o VmwareClusterOutput) Storage() VmwareStorageConfigResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) VmwareStorageConfigResponseOutput { return v.Storage }).(VmwareStorageConfigResponseOutput)
}

// The unique identifier of the VMware user cluster.
func (o VmwareClusterOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time at which VMware user cluster was last updated.
func (o VmwareClusterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Specifies upgrade policy for the cluster.
func (o VmwareClusterOutput) UpgradePolicy() VmwareClusterUpgradePolicyResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) VmwareClusterUpgradePolicyResponseOutput { return v.UpgradePolicy }).(VmwareClusterUpgradePolicyResponseOutput)
}

// ValidationCheck represents the result of the preflight check job.
func (o VmwareClusterOutput) ValidationCheck() ValidationCheckResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) ValidationCheckResponseOutput { return v.ValidationCheck }).(ValidationCheckResponseOutput)
}

// VmwareVCenterConfig specifies vCenter config for the user cluster. If unspecified, it is inherited from the admin cluster.
func (o VmwareClusterOutput) Vcenter() VmwareVCenterConfigResponseOutput {
	return o.ApplyT(func(v *VmwareCluster) VmwareVCenterConfigResponseOutput { return v.Vcenter }).(VmwareVCenterConfigResponseOutput)
}

// Enable VM tracking.
func (o VmwareClusterOutput) VmTrackingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.BoolOutput { return v.VmTrackingEnabled }).(pulumi.BoolOutput)
}

// User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format.
func (o VmwareClusterOutput) VmwareClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareCluster) pulumi.StringPtrOutput { return v.VmwareClusterId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareClusterInput)(nil)).Elem(), &VmwareCluster{})
	pulumi.RegisterOutputType(VmwareClusterOutput{})
}
