// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
type Authorization struct {
	// For VMware user, bare metal user and standalone clusters, users that will be granted the cluster-admin role on the cluster, providing full access to the cluster. For bare metal Admin cluster, users will be granted the view role, which is a view only access.
	AdminUsers []ClusterUser `pulumi:"adminUsers"`
}

// AuthorizationInput is an input type that accepts AuthorizationArgs and AuthorizationOutput values.
// You can construct a concrete instance of `AuthorizationInput` via:
//
//	AuthorizationArgs{...}
type AuthorizationInput interface {
	pulumi.Input

	ToAuthorizationOutput() AuthorizationOutput
	ToAuthorizationOutputWithContext(context.Context) AuthorizationOutput
}

// Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
type AuthorizationArgs struct {
	// For VMware user, bare metal user and standalone clusters, users that will be granted the cluster-admin role on the cluster, providing full access to the cluster. For bare metal Admin cluster, users will be granted the view role, which is a view only access.
	AdminUsers ClusterUserArrayInput `pulumi:"adminUsers"`
}

func (AuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Authorization)(nil)).Elem()
}

func (i AuthorizationArgs) ToAuthorizationOutput() AuthorizationOutput {
	return i.ToAuthorizationOutputWithContext(context.Background())
}

func (i AuthorizationArgs) ToAuthorizationOutputWithContext(ctx context.Context) AuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationOutput)
}

func (i AuthorizationArgs) ToAuthorizationPtrOutput() AuthorizationPtrOutput {
	return i.ToAuthorizationPtrOutputWithContext(context.Background())
}

func (i AuthorizationArgs) ToAuthorizationPtrOutputWithContext(ctx context.Context) AuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationOutput).ToAuthorizationPtrOutputWithContext(ctx)
}

// AuthorizationPtrInput is an input type that accepts AuthorizationArgs, AuthorizationPtr and AuthorizationPtrOutput values.
// You can construct a concrete instance of `AuthorizationPtrInput` via:
//
//	        AuthorizationArgs{...}
//
//	or:
//
//	        nil
type AuthorizationPtrInput interface {
	pulumi.Input

	ToAuthorizationPtrOutput() AuthorizationPtrOutput
	ToAuthorizationPtrOutputWithContext(context.Context) AuthorizationPtrOutput
}

type authorizationPtrType AuthorizationArgs

func AuthorizationPtr(v *AuthorizationArgs) AuthorizationPtrInput {
	return (*authorizationPtrType)(v)
}

func (*authorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Authorization)(nil)).Elem()
}

func (i *authorizationPtrType) ToAuthorizationPtrOutput() AuthorizationPtrOutput {
	return i.ToAuthorizationPtrOutputWithContext(context.Background())
}

func (i *authorizationPtrType) ToAuthorizationPtrOutputWithContext(ctx context.Context) AuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPtrOutput)
}

// Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
type AuthorizationOutput struct{ *pulumi.OutputState }

func (AuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Authorization)(nil)).Elem()
}

func (o AuthorizationOutput) ToAuthorizationOutput() AuthorizationOutput {
	return o
}

func (o AuthorizationOutput) ToAuthorizationOutputWithContext(ctx context.Context) AuthorizationOutput {
	return o
}

func (o AuthorizationOutput) ToAuthorizationPtrOutput() AuthorizationPtrOutput {
	return o.ToAuthorizationPtrOutputWithContext(context.Background())
}

func (o AuthorizationOutput) ToAuthorizationPtrOutputWithContext(ctx context.Context) AuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Authorization) *Authorization {
		return &v
	}).(AuthorizationPtrOutput)
}

// For VMware user, bare metal user and standalone clusters, users that will be granted the cluster-admin role on the cluster, providing full access to the cluster. For bare metal Admin cluster, users will be granted the view role, which is a view only access.
func (o AuthorizationOutput) AdminUsers() ClusterUserArrayOutput {
	return o.ApplyT(func(v Authorization) []ClusterUser { return v.AdminUsers }).(ClusterUserArrayOutput)
}

type AuthorizationPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authorization)(nil)).Elem()
}

func (o AuthorizationPtrOutput) ToAuthorizationPtrOutput() AuthorizationPtrOutput {
	return o
}

func (o AuthorizationPtrOutput) ToAuthorizationPtrOutputWithContext(ctx context.Context) AuthorizationPtrOutput {
	return o
}

func (o AuthorizationPtrOutput) Elem() AuthorizationOutput {
	return o.ApplyT(func(v *Authorization) Authorization {
		if v != nil {
			return *v
		}
		var ret Authorization
		return ret
	}).(AuthorizationOutput)
}

// For VMware user, bare metal user and standalone clusters, users that will be granted the cluster-admin role on the cluster, providing full access to the cluster. For bare metal Admin cluster, users will be granted the view role, which is a view only access.
func (o AuthorizationPtrOutput) AdminUsers() ClusterUserArrayOutput {
	return o.ApplyT(func(v *Authorization) []ClusterUser {
		if v == nil {
			return nil
		}
		return v.AdminUsers
	}).(ClusterUserArrayOutput)
}

// Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
type AuthorizationResponse struct {
	// For VMware user, bare metal user and standalone clusters, users that will be granted the cluster-admin role on the cluster, providing full access to the cluster. For bare metal Admin cluster, users will be granted the view role, which is a view only access.
	AdminUsers []ClusterUserResponse `pulumi:"adminUsers"`
}

// Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.
type AuthorizationResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationResponse)(nil)).Elem()
}

func (o AuthorizationResponseOutput) ToAuthorizationResponseOutput() AuthorizationResponseOutput {
	return o
}

func (o AuthorizationResponseOutput) ToAuthorizationResponseOutputWithContext(ctx context.Context) AuthorizationResponseOutput {
	return o
}

// For VMware user, bare metal user and standalone clusters, users that will be granted the cluster-admin role on the cluster, providing full access to the cluster. For bare metal Admin cluster, users will be granted the view role, which is a view only access.
func (o AuthorizationResponseOutput) AdminUsers() ClusterUserResponseArrayOutput {
	return o.ApplyT(func(v AuthorizationResponse) []ClusterUserResponse { return v.AdminUsers }).(ClusterUserResponseArrayOutput)
}

// BareMetalAdminApiServerArgument represents an arg name->value pair. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
type BareMetalAdminApiServerArgument struct {
	// The argument name as it appears on the API Server command line please make sure to remove the leading dashes.
	Argument string `pulumi:"argument"`
	// The value of the arg as it will be passed to the API Server command line.
	Value string `pulumi:"value"`
}

// BareMetalAdminApiServerArgumentInput is an input type that accepts BareMetalAdminApiServerArgumentArgs and BareMetalAdminApiServerArgumentOutput values.
// You can construct a concrete instance of `BareMetalAdminApiServerArgumentInput` via:
//
//	BareMetalAdminApiServerArgumentArgs{...}
type BareMetalAdminApiServerArgumentInput interface {
	pulumi.Input

	ToBareMetalAdminApiServerArgumentOutput() BareMetalAdminApiServerArgumentOutput
	ToBareMetalAdminApiServerArgumentOutputWithContext(context.Context) BareMetalAdminApiServerArgumentOutput
}

// BareMetalAdminApiServerArgument represents an arg name->value pair. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
type BareMetalAdminApiServerArgumentArgs struct {
	// The argument name as it appears on the API Server command line please make sure to remove the leading dashes.
	Argument pulumi.StringInput `pulumi:"argument"`
	// The value of the arg as it will be passed to the API Server command line.
	Value pulumi.StringInput `pulumi:"value"`
}

func (BareMetalAdminApiServerArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminApiServerArgument)(nil)).Elem()
}

func (i BareMetalAdminApiServerArgumentArgs) ToBareMetalAdminApiServerArgumentOutput() BareMetalAdminApiServerArgumentOutput {
	return i.ToBareMetalAdminApiServerArgumentOutputWithContext(context.Background())
}

func (i BareMetalAdminApiServerArgumentArgs) ToBareMetalAdminApiServerArgumentOutputWithContext(ctx context.Context) BareMetalAdminApiServerArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminApiServerArgumentOutput)
}

// BareMetalAdminApiServerArgumentArrayInput is an input type that accepts BareMetalAdminApiServerArgumentArray and BareMetalAdminApiServerArgumentArrayOutput values.
// You can construct a concrete instance of `BareMetalAdminApiServerArgumentArrayInput` via:
//
//	BareMetalAdminApiServerArgumentArray{ BareMetalAdminApiServerArgumentArgs{...} }
type BareMetalAdminApiServerArgumentArrayInput interface {
	pulumi.Input

	ToBareMetalAdminApiServerArgumentArrayOutput() BareMetalAdminApiServerArgumentArrayOutput
	ToBareMetalAdminApiServerArgumentArrayOutputWithContext(context.Context) BareMetalAdminApiServerArgumentArrayOutput
}

type BareMetalAdminApiServerArgumentArray []BareMetalAdminApiServerArgumentInput

func (BareMetalAdminApiServerArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalAdminApiServerArgument)(nil)).Elem()
}

func (i BareMetalAdminApiServerArgumentArray) ToBareMetalAdminApiServerArgumentArrayOutput() BareMetalAdminApiServerArgumentArrayOutput {
	return i.ToBareMetalAdminApiServerArgumentArrayOutputWithContext(context.Background())
}

func (i BareMetalAdminApiServerArgumentArray) ToBareMetalAdminApiServerArgumentArrayOutputWithContext(ctx context.Context) BareMetalAdminApiServerArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminApiServerArgumentArrayOutput)
}

// BareMetalAdminApiServerArgument represents an arg name->value pair. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
type BareMetalAdminApiServerArgumentOutput struct{ *pulumi.OutputState }

func (BareMetalAdminApiServerArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminApiServerArgument)(nil)).Elem()
}

func (o BareMetalAdminApiServerArgumentOutput) ToBareMetalAdminApiServerArgumentOutput() BareMetalAdminApiServerArgumentOutput {
	return o
}

func (o BareMetalAdminApiServerArgumentOutput) ToBareMetalAdminApiServerArgumentOutputWithContext(ctx context.Context) BareMetalAdminApiServerArgumentOutput {
	return o
}

// The argument name as it appears on the API Server command line please make sure to remove the leading dashes.
func (o BareMetalAdminApiServerArgumentOutput) Argument() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminApiServerArgument) string { return v.Argument }).(pulumi.StringOutput)
}

// The value of the arg as it will be passed to the API Server command line.
func (o BareMetalAdminApiServerArgumentOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminApiServerArgument) string { return v.Value }).(pulumi.StringOutput)
}

type BareMetalAdminApiServerArgumentArrayOutput struct{ *pulumi.OutputState }

func (BareMetalAdminApiServerArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalAdminApiServerArgument)(nil)).Elem()
}

func (o BareMetalAdminApiServerArgumentArrayOutput) ToBareMetalAdminApiServerArgumentArrayOutput() BareMetalAdminApiServerArgumentArrayOutput {
	return o
}

func (o BareMetalAdminApiServerArgumentArrayOutput) ToBareMetalAdminApiServerArgumentArrayOutputWithContext(ctx context.Context) BareMetalAdminApiServerArgumentArrayOutput {
	return o
}

func (o BareMetalAdminApiServerArgumentArrayOutput) Index(i pulumi.IntInput) BareMetalAdminApiServerArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalAdminApiServerArgument {
		return vs[0].([]BareMetalAdminApiServerArgument)[vs[1].(int)]
	}).(BareMetalAdminApiServerArgumentOutput)
}

// BareMetalAdminApiServerArgument represents an arg name->value pair. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
type BareMetalAdminApiServerArgumentResponse struct {
	// The argument name as it appears on the API Server command line please make sure to remove the leading dashes.
	Argument string `pulumi:"argument"`
	// The value of the arg as it will be passed to the API Server command line.
	Value string `pulumi:"value"`
}

// BareMetalAdminApiServerArgument represents an arg name->value pair. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
type BareMetalAdminApiServerArgumentResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminApiServerArgumentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminApiServerArgumentResponse)(nil)).Elem()
}

func (o BareMetalAdminApiServerArgumentResponseOutput) ToBareMetalAdminApiServerArgumentResponseOutput() BareMetalAdminApiServerArgumentResponseOutput {
	return o
}

func (o BareMetalAdminApiServerArgumentResponseOutput) ToBareMetalAdminApiServerArgumentResponseOutputWithContext(ctx context.Context) BareMetalAdminApiServerArgumentResponseOutput {
	return o
}

// The argument name as it appears on the API Server command line please make sure to remove the leading dashes.
func (o BareMetalAdminApiServerArgumentResponseOutput) Argument() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminApiServerArgumentResponse) string { return v.Argument }).(pulumi.StringOutput)
}

// The value of the arg as it will be passed to the API Server command line.
func (o BareMetalAdminApiServerArgumentResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminApiServerArgumentResponse) string { return v.Value }).(pulumi.StringOutput)
}

type BareMetalAdminApiServerArgumentResponseArrayOutput struct{ *pulumi.OutputState }

func (BareMetalAdminApiServerArgumentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalAdminApiServerArgumentResponse)(nil)).Elem()
}

func (o BareMetalAdminApiServerArgumentResponseArrayOutput) ToBareMetalAdminApiServerArgumentResponseArrayOutput() BareMetalAdminApiServerArgumentResponseArrayOutput {
	return o
}

func (o BareMetalAdminApiServerArgumentResponseArrayOutput) ToBareMetalAdminApiServerArgumentResponseArrayOutputWithContext(ctx context.Context) BareMetalAdminApiServerArgumentResponseArrayOutput {
	return o
}

func (o BareMetalAdminApiServerArgumentResponseArrayOutput) Index(i pulumi.IntInput) BareMetalAdminApiServerArgumentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalAdminApiServerArgumentResponse {
		return vs[0].([]BareMetalAdminApiServerArgumentResponse)[vs[1].(int)]
	}).(BareMetalAdminApiServerArgumentResponseOutput)
}

// BareMetalAdminClusterOperationsConfig specifies the admin cluster's observability infrastructure.
type BareMetalAdminClusterOperationsConfig struct {
	// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
	EnableApplicationLogs *bool `pulumi:"enableApplicationLogs"`
}

// BareMetalAdminClusterOperationsConfigInput is an input type that accepts BareMetalAdminClusterOperationsConfigArgs and BareMetalAdminClusterOperationsConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminClusterOperationsConfigInput` via:
//
//	BareMetalAdminClusterOperationsConfigArgs{...}
type BareMetalAdminClusterOperationsConfigInput interface {
	pulumi.Input

	ToBareMetalAdminClusterOperationsConfigOutput() BareMetalAdminClusterOperationsConfigOutput
	ToBareMetalAdminClusterOperationsConfigOutputWithContext(context.Context) BareMetalAdminClusterOperationsConfigOutput
}

// BareMetalAdminClusterOperationsConfig specifies the admin cluster's observability infrastructure.
type BareMetalAdminClusterOperationsConfigArgs struct {
	// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
	EnableApplicationLogs pulumi.BoolPtrInput `pulumi:"enableApplicationLogs"`
}

func (BareMetalAdminClusterOperationsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminClusterOperationsConfig)(nil)).Elem()
}

func (i BareMetalAdminClusterOperationsConfigArgs) ToBareMetalAdminClusterOperationsConfigOutput() BareMetalAdminClusterOperationsConfigOutput {
	return i.ToBareMetalAdminClusterOperationsConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminClusterOperationsConfigArgs) ToBareMetalAdminClusterOperationsConfigOutputWithContext(ctx context.Context) BareMetalAdminClusterOperationsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminClusterOperationsConfigOutput)
}

func (i BareMetalAdminClusterOperationsConfigArgs) ToBareMetalAdminClusterOperationsConfigPtrOutput() BareMetalAdminClusterOperationsConfigPtrOutput {
	return i.ToBareMetalAdminClusterOperationsConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminClusterOperationsConfigArgs) ToBareMetalAdminClusterOperationsConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminClusterOperationsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminClusterOperationsConfigOutput).ToBareMetalAdminClusterOperationsConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminClusterOperationsConfigPtrInput is an input type that accepts BareMetalAdminClusterOperationsConfigArgs, BareMetalAdminClusterOperationsConfigPtr and BareMetalAdminClusterOperationsConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminClusterOperationsConfigPtrInput` via:
//
//	        BareMetalAdminClusterOperationsConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminClusterOperationsConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminClusterOperationsConfigPtrOutput() BareMetalAdminClusterOperationsConfigPtrOutput
	ToBareMetalAdminClusterOperationsConfigPtrOutputWithContext(context.Context) BareMetalAdminClusterOperationsConfigPtrOutput
}

type bareMetalAdminClusterOperationsConfigPtrType BareMetalAdminClusterOperationsConfigArgs

func BareMetalAdminClusterOperationsConfigPtr(v *BareMetalAdminClusterOperationsConfigArgs) BareMetalAdminClusterOperationsConfigPtrInput {
	return (*bareMetalAdminClusterOperationsConfigPtrType)(v)
}

func (*bareMetalAdminClusterOperationsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminClusterOperationsConfig)(nil)).Elem()
}

func (i *bareMetalAdminClusterOperationsConfigPtrType) ToBareMetalAdminClusterOperationsConfigPtrOutput() BareMetalAdminClusterOperationsConfigPtrOutput {
	return i.ToBareMetalAdminClusterOperationsConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminClusterOperationsConfigPtrType) ToBareMetalAdminClusterOperationsConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminClusterOperationsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminClusterOperationsConfigPtrOutput)
}

// BareMetalAdminClusterOperationsConfig specifies the admin cluster's observability infrastructure.
type BareMetalAdminClusterOperationsConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminClusterOperationsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminClusterOperationsConfig)(nil)).Elem()
}

func (o BareMetalAdminClusterOperationsConfigOutput) ToBareMetalAdminClusterOperationsConfigOutput() BareMetalAdminClusterOperationsConfigOutput {
	return o
}

func (o BareMetalAdminClusterOperationsConfigOutput) ToBareMetalAdminClusterOperationsConfigOutputWithContext(ctx context.Context) BareMetalAdminClusterOperationsConfigOutput {
	return o
}

func (o BareMetalAdminClusterOperationsConfigOutput) ToBareMetalAdminClusterOperationsConfigPtrOutput() BareMetalAdminClusterOperationsConfigPtrOutput {
	return o.ToBareMetalAdminClusterOperationsConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminClusterOperationsConfigOutput) ToBareMetalAdminClusterOperationsConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminClusterOperationsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminClusterOperationsConfig) *BareMetalAdminClusterOperationsConfig {
		return &v
	}).(BareMetalAdminClusterOperationsConfigPtrOutput)
}

// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
func (o BareMetalAdminClusterOperationsConfigOutput) EnableApplicationLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalAdminClusterOperationsConfig) *bool { return v.EnableApplicationLogs }).(pulumi.BoolPtrOutput)
}

type BareMetalAdminClusterOperationsConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminClusterOperationsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminClusterOperationsConfig)(nil)).Elem()
}

func (o BareMetalAdminClusterOperationsConfigPtrOutput) ToBareMetalAdminClusterOperationsConfigPtrOutput() BareMetalAdminClusterOperationsConfigPtrOutput {
	return o
}

func (o BareMetalAdminClusterOperationsConfigPtrOutput) ToBareMetalAdminClusterOperationsConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminClusterOperationsConfigPtrOutput {
	return o
}

func (o BareMetalAdminClusterOperationsConfigPtrOutput) Elem() BareMetalAdminClusterOperationsConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminClusterOperationsConfig) BareMetalAdminClusterOperationsConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminClusterOperationsConfig
		return ret
	}).(BareMetalAdminClusterOperationsConfigOutput)
}

// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
func (o BareMetalAdminClusterOperationsConfigPtrOutput) EnableApplicationLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminClusterOperationsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableApplicationLogs
	}).(pulumi.BoolPtrOutput)
}

// BareMetalAdminClusterOperationsConfig specifies the admin cluster's observability infrastructure.
type BareMetalAdminClusterOperationsConfigResponse struct {
	// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
	EnableApplicationLogs bool `pulumi:"enableApplicationLogs"`
}

// BareMetalAdminClusterOperationsConfig specifies the admin cluster's observability infrastructure.
type BareMetalAdminClusterOperationsConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminClusterOperationsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminClusterOperationsConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminClusterOperationsConfigResponseOutput) ToBareMetalAdminClusterOperationsConfigResponseOutput() BareMetalAdminClusterOperationsConfigResponseOutput {
	return o
}

func (o BareMetalAdminClusterOperationsConfigResponseOutput) ToBareMetalAdminClusterOperationsConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminClusterOperationsConfigResponseOutput {
	return o
}

// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
func (o BareMetalAdminClusterOperationsConfigResponseOutput) EnableApplicationLogs() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalAdminClusterOperationsConfigResponse) bool { return v.EnableApplicationLogs }).(pulumi.BoolOutput)
}

// BareMetalAdminControlPlaneConfig specifies the control plane configuration.
type BareMetalAdminControlPlaneConfig struct {
	// Customizes the default API server args. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
	ApiServerArgs []BareMetalAdminApiServerArgument `pulumi:"apiServerArgs"`
	// Configures the node pool running the control plane. If specified the corresponding NodePool will be created for the cluster's control plane. The NodePool will have the same name and namespace as the cluster.
	ControlPlaneNodePoolConfig *BareMetalAdminControlPlaneNodePoolConfig `pulumi:"controlPlaneNodePoolConfig"`
}

// BareMetalAdminControlPlaneConfigInput is an input type that accepts BareMetalAdminControlPlaneConfigArgs and BareMetalAdminControlPlaneConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminControlPlaneConfigInput` via:
//
//	BareMetalAdminControlPlaneConfigArgs{...}
type BareMetalAdminControlPlaneConfigInput interface {
	pulumi.Input

	ToBareMetalAdminControlPlaneConfigOutput() BareMetalAdminControlPlaneConfigOutput
	ToBareMetalAdminControlPlaneConfigOutputWithContext(context.Context) BareMetalAdminControlPlaneConfigOutput
}

// BareMetalAdminControlPlaneConfig specifies the control plane configuration.
type BareMetalAdminControlPlaneConfigArgs struct {
	// Customizes the default API server args. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
	ApiServerArgs BareMetalAdminApiServerArgumentArrayInput `pulumi:"apiServerArgs"`
	// Configures the node pool running the control plane. If specified the corresponding NodePool will be created for the cluster's control plane. The NodePool will have the same name and namespace as the cluster.
	ControlPlaneNodePoolConfig BareMetalAdminControlPlaneNodePoolConfigPtrInput `pulumi:"controlPlaneNodePoolConfig"`
}

func (BareMetalAdminControlPlaneConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminControlPlaneConfig)(nil)).Elem()
}

func (i BareMetalAdminControlPlaneConfigArgs) ToBareMetalAdminControlPlaneConfigOutput() BareMetalAdminControlPlaneConfigOutput {
	return i.ToBareMetalAdminControlPlaneConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminControlPlaneConfigArgs) ToBareMetalAdminControlPlaneConfigOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminControlPlaneConfigOutput)
}

func (i BareMetalAdminControlPlaneConfigArgs) ToBareMetalAdminControlPlaneConfigPtrOutput() BareMetalAdminControlPlaneConfigPtrOutput {
	return i.ToBareMetalAdminControlPlaneConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminControlPlaneConfigArgs) ToBareMetalAdminControlPlaneConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminControlPlaneConfigOutput).ToBareMetalAdminControlPlaneConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminControlPlaneConfigPtrInput is an input type that accepts BareMetalAdminControlPlaneConfigArgs, BareMetalAdminControlPlaneConfigPtr and BareMetalAdminControlPlaneConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminControlPlaneConfigPtrInput` via:
//
//	        BareMetalAdminControlPlaneConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminControlPlaneConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminControlPlaneConfigPtrOutput() BareMetalAdminControlPlaneConfigPtrOutput
	ToBareMetalAdminControlPlaneConfigPtrOutputWithContext(context.Context) BareMetalAdminControlPlaneConfigPtrOutput
}

type bareMetalAdminControlPlaneConfigPtrType BareMetalAdminControlPlaneConfigArgs

func BareMetalAdminControlPlaneConfigPtr(v *BareMetalAdminControlPlaneConfigArgs) BareMetalAdminControlPlaneConfigPtrInput {
	return (*bareMetalAdminControlPlaneConfigPtrType)(v)
}

func (*bareMetalAdminControlPlaneConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminControlPlaneConfig)(nil)).Elem()
}

func (i *bareMetalAdminControlPlaneConfigPtrType) ToBareMetalAdminControlPlaneConfigPtrOutput() BareMetalAdminControlPlaneConfigPtrOutput {
	return i.ToBareMetalAdminControlPlaneConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminControlPlaneConfigPtrType) ToBareMetalAdminControlPlaneConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminControlPlaneConfigPtrOutput)
}

// BareMetalAdminControlPlaneConfig specifies the control plane configuration.
type BareMetalAdminControlPlaneConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminControlPlaneConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminControlPlaneConfig)(nil)).Elem()
}

func (o BareMetalAdminControlPlaneConfigOutput) ToBareMetalAdminControlPlaneConfigOutput() BareMetalAdminControlPlaneConfigOutput {
	return o
}

func (o BareMetalAdminControlPlaneConfigOutput) ToBareMetalAdminControlPlaneConfigOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneConfigOutput {
	return o
}

func (o BareMetalAdminControlPlaneConfigOutput) ToBareMetalAdminControlPlaneConfigPtrOutput() BareMetalAdminControlPlaneConfigPtrOutput {
	return o.ToBareMetalAdminControlPlaneConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminControlPlaneConfigOutput) ToBareMetalAdminControlPlaneConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminControlPlaneConfig) *BareMetalAdminControlPlaneConfig {
		return &v
	}).(BareMetalAdminControlPlaneConfigPtrOutput)
}

// Customizes the default API server args. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
func (o BareMetalAdminControlPlaneConfigOutput) ApiServerArgs() BareMetalAdminApiServerArgumentArrayOutput {
	return o.ApplyT(func(v BareMetalAdminControlPlaneConfig) []BareMetalAdminApiServerArgument { return v.ApiServerArgs }).(BareMetalAdminApiServerArgumentArrayOutput)
}

// Configures the node pool running the control plane. If specified the corresponding NodePool will be created for the cluster's control plane. The NodePool will have the same name and namespace as the cluster.
func (o BareMetalAdminControlPlaneConfigOutput) ControlPlaneNodePoolConfig() BareMetalAdminControlPlaneNodePoolConfigPtrOutput {
	return o.ApplyT(func(v BareMetalAdminControlPlaneConfig) *BareMetalAdminControlPlaneNodePoolConfig {
		return v.ControlPlaneNodePoolConfig
	}).(BareMetalAdminControlPlaneNodePoolConfigPtrOutput)
}

type BareMetalAdminControlPlaneConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminControlPlaneConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminControlPlaneConfig)(nil)).Elem()
}

func (o BareMetalAdminControlPlaneConfigPtrOutput) ToBareMetalAdminControlPlaneConfigPtrOutput() BareMetalAdminControlPlaneConfigPtrOutput {
	return o
}

func (o BareMetalAdminControlPlaneConfigPtrOutput) ToBareMetalAdminControlPlaneConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneConfigPtrOutput {
	return o
}

func (o BareMetalAdminControlPlaneConfigPtrOutput) Elem() BareMetalAdminControlPlaneConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminControlPlaneConfig) BareMetalAdminControlPlaneConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminControlPlaneConfig
		return ret
	}).(BareMetalAdminControlPlaneConfigOutput)
}

// Customizes the default API server args. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
func (o BareMetalAdminControlPlaneConfigPtrOutput) ApiServerArgs() BareMetalAdminApiServerArgumentArrayOutput {
	return o.ApplyT(func(v *BareMetalAdminControlPlaneConfig) []BareMetalAdminApiServerArgument {
		if v == nil {
			return nil
		}
		return v.ApiServerArgs
	}).(BareMetalAdminApiServerArgumentArrayOutput)
}

// Configures the node pool running the control plane. If specified the corresponding NodePool will be created for the cluster's control plane. The NodePool will have the same name and namespace as the cluster.
func (o BareMetalAdminControlPlaneConfigPtrOutput) ControlPlaneNodePoolConfig() BareMetalAdminControlPlaneNodePoolConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminControlPlaneConfig) *BareMetalAdminControlPlaneNodePoolConfig {
		if v == nil {
			return nil
		}
		return v.ControlPlaneNodePoolConfig
	}).(BareMetalAdminControlPlaneNodePoolConfigPtrOutput)
}

// BareMetalAdminControlPlaneConfig specifies the control plane configuration.
type BareMetalAdminControlPlaneConfigResponse struct {
	// Customizes the default API server args. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
	ApiServerArgs []BareMetalAdminApiServerArgumentResponse `pulumi:"apiServerArgs"`
	// Configures the node pool running the control plane. If specified the corresponding NodePool will be created for the cluster's control plane. The NodePool will have the same name and namespace as the cluster.
	ControlPlaneNodePoolConfig BareMetalAdminControlPlaneNodePoolConfigResponse `pulumi:"controlPlaneNodePoolConfig"`
}

// BareMetalAdminControlPlaneConfig specifies the control plane configuration.
type BareMetalAdminControlPlaneConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminControlPlaneConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminControlPlaneConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminControlPlaneConfigResponseOutput) ToBareMetalAdminControlPlaneConfigResponseOutput() BareMetalAdminControlPlaneConfigResponseOutput {
	return o
}

func (o BareMetalAdminControlPlaneConfigResponseOutput) ToBareMetalAdminControlPlaneConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneConfigResponseOutput {
	return o
}

// Customizes the default API server args. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/
func (o BareMetalAdminControlPlaneConfigResponseOutput) ApiServerArgs() BareMetalAdminApiServerArgumentResponseArrayOutput {
	return o.ApplyT(func(v BareMetalAdminControlPlaneConfigResponse) []BareMetalAdminApiServerArgumentResponse {
		return v.ApiServerArgs
	}).(BareMetalAdminApiServerArgumentResponseArrayOutput)
}

// Configures the node pool running the control plane. If specified the corresponding NodePool will be created for the cluster's control plane. The NodePool will have the same name and namespace as the cluster.
func (o BareMetalAdminControlPlaneConfigResponseOutput) ControlPlaneNodePoolConfig() BareMetalAdminControlPlaneNodePoolConfigResponseOutput {
	return o.ApplyT(func(v BareMetalAdminControlPlaneConfigResponse) BareMetalAdminControlPlaneNodePoolConfigResponse {
		return v.ControlPlaneNodePoolConfig
	}).(BareMetalAdminControlPlaneNodePoolConfigResponseOutput)
}

// BareMetalAdminControlPlaneNodePoolConfig specifies the control plane node pool configuration. We have a control plane specific node pool config so that we can flexible about supporting control plane specific fields in the future.
type BareMetalAdminControlPlaneNodePoolConfig struct {
	// The generic configuration for a node pool running the control plane.
	NodePoolConfig *BareMetalNodePoolConfig `pulumi:"nodePoolConfig"`
}

// BareMetalAdminControlPlaneNodePoolConfigInput is an input type that accepts BareMetalAdminControlPlaneNodePoolConfigArgs and BareMetalAdminControlPlaneNodePoolConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminControlPlaneNodePoolConfigInput` via:
//
//	BareMetalAdminControlPlaneNodePoolConfigArgs{...}
type BareMetalAdminControlPlaneNodePoolConfigInput interface {
	pulumi.Input

	ToBareMetalAdminControlPlaneNodePoolConfigOutput() BareMetalAdminControlPlaneNodePoolConfigOutput
	ToBareMetalAdminControlPlaneNodePoolConfigOutputWithContext(context.Context) BareMetalAdminControlPlaneNodePoolConfigOutput
}

// BareMetalAdminControlPlaneNodePoolConfig specifies the control plane node pool configuration. We have a control plane specific node pool config so that we can flexible about supporting control plane specific fields in the future.
type BareMetalAdminControlPlaneNodePoolConfigArgs struct {
	// The generic configuration for a node pool running the control plane.
	NodePoolConfig BareMetalNodePoolConfigPtrInput `pulumi:"nodePoolConfig"`
}

func (BareMetalAdminControlPlaneNodePoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminControlPlaneNodePoolConfig)(nil)).Elem()
}

func (i BareMetalAdminControlPlaneNodePoolConfigArgs) ToBareMetalAdminControlPlaneNodePoolConfigOutput() BareMetalAdminControlPlaneNodePoolConfigOutput {
	return i.ToBareMetalAdminControlPlaneNodePoolConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminControlPlaneNodePoolConfigArgs) ToBareMetalAdminControlPlaneNodePoolConfigOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneNodePoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminControlPlaneNodePoolConfigOutput)
}

func (i BareMetalAdminControlPlaneNodePoolConfigArgs) ToBareMetalAdminControlPlaneNodePoolConfigPtrOutput() BareMetalAdminControlPlaneNodePoolConfigPtrOutput {
	return i.ToBareMetalAdminControlPlaneNodePoolConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminControlPlaneNodePoolConfigArgs) ToBareMetalAdminControlPlaneNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneNodePoolConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminControlPlaneNodePoolConfigOutput).ToBareMetalAdminControlPlaneNodePoolConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminControlPlaneNodePoolConfigPtrInput is an input type that accepts BareMetalAdminControlPlaneNodePoolConfigArgs, BareMetalAdminControlPlaneNodePoolConfigPtr and BareMetalAdminControlPlaneNodePoolConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminControlPlaneNodePoolConfigPtrInput` via:
//
//	        BareMetalAdminControlPlaneNodePoolConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminControlPlaneNodePoolConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminControlPlaneNodePoolConfigPtrOutput() BareMetalAdminControlPlaneNodePoolConfigPtrOutput
	ToBareMetalAdminControlPlaneNodePoolConfigPtrOutputWithContext(context.Context) BareMetalAdminControlPlaneNodePoolConfigPtrOutput
}

type bareMetalAdminControlPlaneNodePoolConfigPtrType BareMetalAdminControlPlaneNodePoolConfigArgs

func BareMetalAdminControlPlaneNodePoolConfigPtr(v *BareMetalAdminControlPlaneNodePoolConfigArgs) BareMetalAdminControlPlaneNodePoolConfigPtrInput {
	return (*bareMetalAdminControlPlaneNodePoolConfigPtrType)(v)
}

func (*bareMetalAdminControlPlaneNodePoolConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminControlPlaneNodePoolConfig)(nil)).Elem()
}

func (i *bareMetalAdminControlPlaneNodePoolConfigPtrType) ToBareMetalAdminControlPlaneNodePoolConfigPtrOutput() BareMetalAdminControlPlaneNodePoolConfigPtrOutput {
	return i.ToBareMetalAdminControlPlaneNodePoolConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminControlPlaneNodePoolConfigPtrType) ToBareMetalAdminControlPlaneNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneNodePoolConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminControlPlaneNodePoolConfigPtrOutput)
}

// BareMetalAdminControlPlaneNodePoolConfig specifies the control plane node pool configuration. We have a control plane specific node pool config so that we can flexible about supporting control plane specific fields in the future.
type BareMetalAdminControlPlaneNodePoolConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminControlPlaneNodePoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminControlPlaneNodePoolConfig)(nil)).Elem()
}

func (o BareMetalAdminControlPlaneNodePoolConfigOutput) ToBareMetalAdminControlPlaneNodePoolConfigOutput() BareMetalAdminControlPlaneNodePoolConfigOutput {
	return o
}

func (o BareMetalAdminControlPlaneNodePoolConfigOutput) ToBareMetalAdminControlPlaneNodePoolConfigOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneNodePoolConfigOutput {
	return o
}

func (o BareMetalAdminControlPlaneNodePoolConfigOutput) ToBareMetalAdminControlPlaneNodePoolConfigPtrOutput() BareMetalAdminControlPlaneNodePoolConfigPtrOutput {
	return o.ToBareMetalAdminControlPlaneNodePoolConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminControlPlaneNodePoolConfigOutput) ToBareMetalAdminControlPlaneNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneNodePoolConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminControlPlaneNodePoolConfig) *BareMetalAdminControlPlaneNodePoolConfig {
		return &v
	}).(BareMetalAdminControlPlaneNodePoolConfigPtrOutput)
}

// The generic configuration for a node pool running the control plane.
func (o BareMetalAdminControlPlaneNodePoolConfigOutput) NodePoolConfig() BareMetalNodePoolConfigPtrOutput {
	return o.ApplyT(func(v BareMetalAdminControlPlaneNodePoolConfig) *BareMetalNodePoolConfig { return v.NodePoolConfig }).(BareMetalNodePoolConfigPtrOutput)
}

type BareMetalAdminControlPlaneNodePoolConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminControlPlaneNodePoolConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminControlPlaneNodePoolConfig)(nil)).Elem()
}

func (o BareMetalAdminControlPlaneNodePoolConfigPtrOutput) ToBareMetalAdminControlPlaneNodePoolConfigPtrOutput() BareMetalAdminControlPlaneNodePoolConfigPtrOutput {
	return o
}

func (o BareMetalAdminControlPlaneNodePoolConfigPtrOutput) ToBareMetalAdminControlPlaneNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneNodePoolConfigPtrOutput {
	return o
}

func (o BareMetalAdminControlPlaneNodePoolConfigPtrOutput) Elem() BareMetalAdminControlPlaneNodePoolConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminControlPlaneNodePoolConfig) BareMetalAdminControlPlaneNodePoolConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminControlPlaneNodePoolConfig
		return ret
	}).(BareMetalAdminControlPlaneNodePoolConfigOutput)
}

// The generic configuration for a node pool running the control plane.
func (o BareMetalAdminControlPlaneNodePoolConfigPtrOutput) NodePoolConfig() BareMetalNodePoolConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminControlPlaneNodePoolConfig) *BareMetalNodePoolConfig {
		if v == nil {
			return nil
		}
		return v.NodePoolConfig
	}).(BareMetalNodePoolConfigPtrOutput)
}

// BareMetalAdminControlPlaneNodePoolConfig specifies the control plane node pool configuration. We have a control plane specific node pool config so that we can flexible about supporting control plane specific fields in the future.
type BareMetalAdminControlPlaneNodePoolConfigResponse struct {
	// The generic configuration for a node pool running the control plane.
	NodePoolConfig BareMetalNodePoolConfigResponse `pulumi:"nodePoolConfig"`
}

// BareMetalAdminControlPlaneNodePoolConfig specifies the control plane node pool configuration. We have a control plane specific node pool config so that we can flexible about supporting control plane specific fields in the future.
type BareMetalAdminControlPlaneNodePoolConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminControlPlaneNodePoolConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminControlPlaneNodePoolConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminControlPlaneNodePoolConfigResponseOutput) ToBareMetalAdminControlPlaneNodePoolConfigResponseOutput() BareMetalAdminControlPlaneNodePoolConfigResponseOutput {
	return o
}

func (o BareMetalAdminControlPlaneNodePoolConfigResponseOutput) ToBareMetalAdminControlPlaneNodePoolConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminControlPlaneNodePoolConfigResponseOutput {
	return o
}

// The generic configuration for a node pool running the control plane.
func (o BareMetalAdminControlPlaneNodePoolConfigResponseOutput) NodePoolConfig() BareMetalNodePoolConfigResponseOutput {
	return o.ApplyT(func(v BareMetalAdminControlPlaneNodePoolConfigResponse) BareMetalNodePoolConfigResponse {
		return v.NodePoolConfig
	}).(BareMetalNodePoolConfigResponseOutput)
}

// BareMetalAdminDrainedMachine represents the machines that are drained.
type BareMetalAdminDrainedMachineResponse struct {
	// Drained machine IP address.
	NodeIp string `pulumi:"nodeIp"`
}

// BareMetalAdminDrainedMachine represents the machines that are drained.
type BareMetalAdminDrainedMachineResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminDrainedMachineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminDrainedMachineResponse)(nil)).Elem()
}

func (o BareMetalAdminDrainedMachineResponseOutput) ToBareMetalAdminDrainedMachineResponseOutput() BareMetalAdminDrainedMachineResponseOutput {
	return o
}

func (o BareMetalAdminDrainedMachineResponseOutput) ToBareMetalAdminDrainedMachineResponseOutputWithContext(ctx context.Context) BareMetalAdminDrainedMachineResponseOutput {
	return o
}

// Drained machine IP address.
func (o BareMetalAdminDrainedMachineResponseOutput) NodeIp() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminDrainedMachineResponse) string { return v.NodeIp }).(pulumi.StringOutput)
}

type BareMetalAdminDrainedMachineResponseArrayOutput struct{ *pulumi.OutputState }

func (BareMetalAdminDrainedMachineResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalAdminDrainedMachineResponse)(nil)).Elem()
}

func (o BareMetalAdminDrainedMachineResponseArrayOutput) ToBareMetalAdminDrainedMachineResponseArrayOutput() BareMetalAdminDrainedMachineResponseArrayOutput {
	return o
}

func (o BareMetalAdminDrainedMachineResponseArrayOutput) ToBareMetalAdminDrainedMachineResponseArrayOutputWithContext(ctx context.Context) BareMetalAdminDrainedMachineResponseArrayOutput {
	return o
}

func (o BareMetalAdminDrainedMachineResponseArrayOutput) Index(i pulumi.IntInput) BareMetalAdminDrainedMachineResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalAdminDrainedMachineResponse {
		return vs[0].([]BareMetalAdminDrainedMachineResponse)[vs[1].(int)]
	}).(BareMetalAdminDrainedMachineResponseOutput)
}

// BareMetalAdminDrainingMachine represents the machines that are currently draining.
type BareMetalAdminDrainingMachineResponse struct {
	// Draining machine IP address.
	NodeIp string `pulumi:"nodeIp"`
	// The count of pods yet to drain.
	PodCount int `pulumi:"podCount"`
}

// BareMetalAdminDrainingMachine represents the machines that are currently draining.
type BareMetalAdminDrainingMachineResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminDrainingMachineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminDrainingMachineResponse)(nil)).Elem()
}

func (o BareMetalAdminDrainingMachineResponseOutput) ToBareMetalAdminDrainingMachineResponseOutput() BareMetalAdminDrainingMachineResponseOutput {
	return o
}

func (o BareMetalAdminDrainingMachineResponseOutput) ToBareMetalAdminDrainingMachineResponseOutputWithContext(ctx context.Context) BareMetalAdminDrainingMachineResponseOutput {
	return o
}

// Draining machine IP address.
func (o BareMetalAdminDrainingMachineResponseOutput) NodeIp() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminDrainingMachineResponse) string { return v.NodeIp }).(pulumi.StringOutput)
}

// The count of pods yet to drain.
func (o BareMetalAdminDrainingMachineResponseOutput) PodCount() pulumi.IntOutput {
	return o.ApplyT(func(v BareMetalAdminDrainingMachineResponse) int { return v.PodCount }).(pulumi.IntOutput)
}

type BareMetalAdminDrainingMachineResponseArrayOutput struct{ *pulumi.OutputState }

func (BareMetalAdminDrainingMachineResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalAdminDrainingMachineResponse)(nil)).Elem()
}

func (o BareMetalAdminDrainingMachineResponseArrayOutput) ToBareMetalAdminDrainingMachineResponseArrayOutput() BareMetalAdminDrainingMachineResponseArrayOutput {
	return o
}

func (o BareMetalAdminDrainingMachineResponseArrayOutput) ToBareMetalAdminDrainingMachineResponseArrayOutputWithContext(ctx context.Context) BareMetalAdminDrainingMachineResponseArrayOutput {
	return o
}

func (o BareMetalAdminDrainingMachineResponseArrayOutput) Index(i pulumi.IntInput) BareMetalAdminDrainingMachineResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalAdminDrainingMachineResponse {
		return vs[0].([]BareMetalAdminDrainingMachineResponse)[vs[1].(int)]
	}).(BareMetalAdminDrainingMachineResponseOutput)
}

// BareMetalAdminIslandModeCidrConfig specifies the cluster CIDR configuration while running in island mode.
type BareMetalAdminIslandModeCidrConfig struct {
	// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
	PodAddressCidrBlocks []string `pulumi:"podAddressCidrBlocks"`
	// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
	ServiceAddressCidrBlocks []string `pulumi:"serviceAddressCidrBlocks"`
}

// BareMetalAdminIslandModeCidrConfigInput is an input type that accepts BareMetalAdminIslandModeCidrConfigArgs and BareMetalAdminIslandModeCidrConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminIslandModeCidrConfigInput` via:
//
//	BareMetalAdminIslandModeCidrConfigArgs{...}
type BareMetalAdminIslandModeCidrConfigInput interface {
	pulumi.Input

	ToBareMetalAdminIslandModeCidrConfigOutput() BareMetalAdminIslandModeCidrConfigOutput
	ToBareMetalAdminIslandModeCidrConfigOutputWithContext(context.Context) BareMetalAdminIslandModeCidrConfigOutput
}

// BareMetalAdminIslandModeCidrConfig specifies the cluster CIDR configuration while running in island mode.
type BareMetalAdminIslandModeCidrConfigArgs struct {
	// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
	PodAddressCidrBlocks pulumi.StringArrayInput `pulumi:"podAddressCidrBlocks"`
	// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
	ServiceAddressCidrBlocks pulumi.StringArrayInput `pulumi:"serviceAddressCidrBlocks"`
}

func (BareMetalAdminIslandModeCidrConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminIslandModeCidrConfig)(nil)).Elem()
}

func (i BareMetalAdminIslandModeCidrConfigArgs) ToBareMetalAdminIslandModeCidrConfigOutput() BareMetalAdminIslandModeCidrConfigOutput {
	return i.ToBareMetalAdminIslandModeCidrConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminIslandModeCidrConfigArgs) ToBareMetalAdminIslandModeCidrConfigOutputWithContext(ctx context.Context) BareMetalAdminIslandModeCidrConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminIslandModeCidrConfigOutput)
}

func (i BareMetalAdminIslandModeCidrConfigArgs) ToBareMetalAdminIslandModeCidrConfigPtrOutput() BareMetalAdminIslandModeCidrConfigPtrOutput {
	return i.ToBareMetalAdminIslandModeCidrConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminIslandModeCidrConfigArgs) ToBareMetalAdminIslandModeCidrConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminIslandModeCidrConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminIslandModeCidrConfigOutput).ToBareMetalAdminIslandModeCidrConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminIslandModeCidrConfigPtrInput is an input type that accepts BareMetalAdminIslandModeCidrConfigArgs, BareMetalAdminIslandModeCidrConfigPtr and BareMetalAdminIslandModeCidrConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminIslandModeCidrConfigPtrInput` via:
//
//	        BareMetalAdminIslandModeCidrConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminIslandModeCidrConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminIslandModeCidrConfigPtrOutput() BareMetalAdminIslandModeCidrConfigPtrOutput
	ToBareMetalAdminIslandModeCidrConfigPtrOutputWithContext(context.Context) BareMetalAdminIslandModeCidrConfigPtrOutput
}

type bareMetalAdminIslandModeCidrConfigPtrType BareMetalAdminIslandModeCidrConfigArgs

func BareMetalAdminIslandModeCidrConfigPtr(v *BareMetalAdminIslandModeCidrConfigArgs) BareMetalAdminIslandModeCidrConfigPtrInput {
	return (*bareMetalAdminIslandModeCidrConfigPtrType)(v)
}

func (*bareMetalAdminIslandModeCidrConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminIslandModeCidrConfig)(nil)).Elem()
}

func (i *bareMetalAdminIslandModeCidrConfigPtrType) ToBareMetalAdminIslandModeCidrConfigPtrOutput() BareMetalAdminIslandModeCidrConfigPtrOutput {
	return i.ToBareMetalAdminIslandModeCidrConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminIslandModeCidrConfigPtrType) ToBareMetalAdminIslandModeCidrConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminIslandModeCidrConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminIslandModeCidrConfigPtrOutput)
}

// BareMetalAdminIslandModeCidrConfig specifies the cluster CIDR configuration while running in island mode.
type BareMetalAdminIslandModeCidrConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminIslandModeCidrConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminIslandModeCidrConfig)(nil)).Elem()
}

func (o BareMetalAdminIslandModeCidrConfigOutput) ToBareMetalAdminIslandModeCidrConfigOutput() BareMetalAdminIslandModeCidrConfigOutput {
	return o
}

func (o BareMetalAdminIslandModeCidrConfigOutput) ToBareMetalAdminIslandModeCidrConfigOutputWithContext(ctx context.Context) BareMetalAdminIslandModeCidrConfigOutput {
	return o
}

func (o BareMetalAdminIslandModeCidrConfigOutput) ToBareMetalAdminIslandModeCidrConfigPtrOutput() BareMetalAdminIslandModeCidrConfigPtrOutput {
	return o.ToBareMetalAdminIslandModeCidrConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminIslandModeCidrConfigOutput) ToBareMetalAdminIslandModeCidrConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminIslandModeCidrConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminIslandModeCidrConfig) *BareMetalAdminIslandModeCidrConfig {
		return &v
	}).(BareMetalAdminIslandModeCidrConfigPtrOutput)
}

// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
func (o BareMetalAdminIslandModeCidrConfigOutput) PodAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalAdminIslandModeCidrConfig) []string { return v.PodAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
func (o BareMetalAdminIslandModeCidrConfigOutput) ServiceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalAdminIslandModeCidrConfig) []string { return v.ServiceAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

type BareMetalAdminIslandModeCidrConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminIslandModeCidrConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminIslandModeCidrConfig)(nil)).Elem()
}

func (o BareMetalAdminIslandModeCidrConfigPtrOutput) ToBareMetalAdminIslandModeCidrConfigPtrOutput() BareMetalAdminIslandModeCidrConfigPtrOutput {
	return o
}

func (o BareMetalAdminIslandModeCidrConfigPtrOutput) ToBareMetalAdminIslandModeCidrConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminIslandModeCidrConfigPtrOutput {
	return o
}

func (o BareMetalAdminIslandModeCidrConfigPtrOutput) Elem() BareMetalAdminIslandModeCidrConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminIslandModeCidrConfig) BareMetalAdminIslandModeCidrConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminIslandModeCidrConfig
		return ret
	}).(BareMetalAdminIslandModeCidrConfigOutput)
}

// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
func (o BareMetalAdminIslandModeCidrConfigPtrOutput) PodAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BareMetalAdminIslandModeCidrConfig) []string {
		if v == nil {
			return nil
		}
		return v.PodAddressCidrBlocks
	}).(pulumi.StringArrayOutput)
}

// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
func (o BareMetalAdminIslandModeCidrConfigPtrOutput) ServiceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BareMetalAdminIslandModeCidrConfig) []string {
		if v == nil {
			return nil
		}
		return v.ServiceAddressCidrBlocks
	}).(pulumi.StringArrayOutput)
}

// BareMetalAdminIslandModeCidrConfig specifies the cluster CIDR configuration while running in island mode.
type BareMetalAdminIslandModeCidrConfigResponse struct {
	// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
	PodAddressCidrBlocks []string `pulumi:"podAddressCidrBlocks"`
	// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
	ServiceAddressCidrBlocks []string `pulumi:"serviceAddressCidrBlocks"`
}

// BareMetalAdminIslandModeCidrConfig specifies the cluster CIDR configuration while running in island mode.
type BareMetalAdminIslandModeCidrConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminIslandModeCidrConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminIslandModeCidrConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminIslandModeCidrConfigResponseOutput) ToBareMetalAdminIslandModeCidrConfigResponseOutput() BareMetalAdminIslandModeCidrConfigResponseOutput {
	return o
}

func (o BareMetalAdminIslandModeCidrConfigResponseOutput) ToBareMetalAdminIslandModeCidrConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminIslandModeCidrConfigResponseOutput {
	return o
}

// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
func (o BareMetalAdminIslandModeCidrConfigResponseOutput) PodAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalAdminIslandModeCidrConfigResponse) []string { return v.PodAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
func (o BareMetalAdminIslandModeCidrConfigResponseOutput) ServiceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalAdminIslandModeCidrConfigResponse) []string { return v.ServiceAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// BareMetalAdminLoadBalancerConfig specifies the load balancer configuration.
type BareMetalAdminLoadBalancerConfig struct {
	// Manually configured load balancers.
	ManualLbConfig *BareMetalAdminManualLbConfig `pulumi:"manualLbConfig"`
	// Configures the ports that the load balancer will listen on.
	PortConfig *BareMetalAdminPortConfig `pulumi:"portConfig"`
	// The VIPs used by the load balancer.
	VipConfig *BareMetalAdminVipConfig `pulumi:"vipConfig"`
}

// BareMetalAdminLoadBalancerConfigInput is an input type that accepts BareMetalAdminLoadBalancerConfigArgs and BareMetalAdminLoadBalancerConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminLoadBalancerConfigInput` via:
//
//	BareMetalAdminLoadBalancerConfigArgs{...}
type BareMetalAdminLoadBalancerConfigInput interface {
	pulumi.Input

	ToBareMetalAdminLoadBalancerConfigOutput() BareMetalAdminLoadBalancerConfigOutput
	ToBareMetalAdminLoadBalancerConfigOutputWithContext(context.Context) BareMetalAdminLoadBalancerConfigOutput
}

// BareMetalAdminLoadBalancerConfig specifies the load balancer configuration.
type BareMetalAdminLoadBalancerConfigArgs struct {
	// Manually configured load balancers.
	ManualLbConfig BareMetalAdminManualLbConfigPtrInput `pulumi:"manualLbConfig"`
	// Configures the ports that the load balancer will listen on.
	PortConfig BareMetalAdminPortConfigPtrInput `pulumi:"portConfig"`
	// The VIPs used by the load balancer.
	VipConfig BareMetalAdminVipConfigPtrInput `pulumi:"vipConfig"`
}

func (BareMetalAdminLoadBalancerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminLoadBalancerConfig)(nil)).Elem()
}

func (i BareMetalAdminLoadBalancerConfigArgs) ToBareMetalAdminLoadBalancerConfigOutput() BareMetalAdminLoadBalancerConfigOutput {
	return i.ToBareMetalAdminLoadBalancerConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminLoadBalancerConfigArgs) ToBareMetalAdminLoadBalancerConfigOutputWithContext(ctx context.Context) BareMetalAdminLoadBalancerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminLoadBalancerConfigOutput)
}

func (i BareMetalAdminLoadBalancerConfigArgs) ToBareMetalAdminLoadBalancerConfigPtrOutput() BareMetalAdminLoadBalancerConfigPtrOutput {
	return i.ToBareMetalAdminLoadBalancerConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminLoadBalancerConfigArgs) ToBareMetalAdminLoadBalancerConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminLoadBalancerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminLoadBalancerConfigOutput).ToBareMetalAdminLoadBalancerConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminLoadBalancerConfigPtrInput is an input type that accepts BareMetalAdminLoadBalancerConfigArgs, BareMetalAdminLoadBalancerConfigPtr and BareMetalAdminLoadBalancerConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminLoadBalancerConfigPtrInput` via:
//
//	        BareMetalAdminLoadBalancerConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminLoadBalancerConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminLoadBalancerConfigPtrOutput() BareMetalAdminLoadBalancerConfigPtrOutput
	ToBareMetalAdminLoadBalancerConfigPtrOutputWithContext(context.Context) BareMetalAdminLoadBalancerConfigPtrOutput
}

type bareMetalAdminLoadBalancerConfigPtrType BareMetalAdminLoadBalancerConfigArgs

func BareMetalAdminLoadBalancerConfigPtr(v *BareMetalAdminLoadBalancerConfigArgs) BareMetalAdminLoadBalancerConfigPtrInput {
	return (*bareMetalAdminLoadBalancerConfigPtrType)(v)
}

func (*bareMetalAdminLoadBalancerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminLoadBalancerConfig)(nil)).Elem()
}

func (i *bareMetalAdminLoadBalancerConfigPtrType) ToBareMetalAdminLoadBalancerConfigPtrOutput() BareMetalAdminLoadBalancerConfigPtrOutput {
	return i.ToBareMetalAdminLoadBalancerConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminLoadBalancerConfigPtrType) ToBareMetalAdminLoadBalancerConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminLoadBalancerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminLoadBalancerConfigPtrOutput)
}

// BareMetalAdminLoadBalancerConfig specifies the load balancer configuration.
type BareMetalAdminLoadBalancerConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminLoadBalancerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminLoadBalancerConfig)(nil)).Elem()
}

func (o BareMetalAdminLoadBalancerConfigOutput) ToBareMetalAdminLoadBalancerConfigOutput() BareMetalAdminLoadBalancerConfigOutput {
	return o
}

func (o BareMetalAdminLoadBalancerConfigOutput) ToBareMetalAdminLoadBalancerConfigOutputWithContext(ctx context.Context) BareMetalAdminLoadBalancerConfigOutput {
	return o
}

func (o BareMetalAdminLoadBalancerConfigOutput) ToBareMetalAdminLoadBalancerConfigPtrOutput() BareMetalAdminLoadBalancerConfigPtrOutput {
	return o.ToBareMetalAdminLoadBalancerConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminLoadBalancerConfigOutput) ToBareMetalAdminLoadBalancerConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminLoadBalancerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminLoadBalancerConfig) *BareMetalAdminLoadBalancerConfig {
		return &v
	}).(BareMetalAdminLoadBalancerConfigPtrOutput)
}

// Manually configured load balancers.
func (o BareMetalAdminLoadBalancerConfigOutput) ManualLbConfig() BareMetalAdminManualLbConfigPtrOutput {
	return o.ApplyT(func(v BareMetalAdminLoadBalancerConfig) *BareMetalAdminManualLbConfig { return v.ManualLbConfig }).(BareMetalAdminManualLbConfigPtrOutput)
}

// Configures the ports that the load balancer will listen on.
func (o BareMetalAdminLoadBalancerConfigOutput) PortConfig() BareMetalAdminPortConfigPtrOutput {
	return o.ApplyT(func(v BareMetalAdminLoadBalancerConfig) *BareMetalAdminPortConfig { return v.PortConfig }).(BareMetalAdminPortConfigPtrOutput)
}

// The VIPs used by the load balancer.
func (o BareMetalAdminLoadBalancerConfigOutput) VipConfig() BareMetalAdminVipConfigPtrOutput {
	return o.ApplyT(func(v BareMetalAdminLoadBalancerConfig) *BareMetalAdminVipConfig { return v.VipConfig }).(BareMetalAdminVipConfigPtrOutput)
}

type BareMetalAdminLoadBalancerConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminLoadBalancerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminLoadBalancerConfig)(nil)).Elem()
}

func (o BareMetalAdminLoadBalancerConfigPtrOutput) ToBareMetalAdminLoadBalancerConfigPtrOutput() BareMetalAdminLoadBalancerConfigPtrOutput {
	return o
}

func (o BareMetalAdminLoadBalancerConfigPtrOutput) ToBareMetalAdminLoadBalancerConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminLoadBalancerConfigPtrOutput {
	return o
}

func (o BareMetalAdminLoadBalancerConfigPtrOutput) Elem() BareMetalAdminLoadBalancerConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminLoadBalancerConfig) BareMetalAdminLoadBalancerConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminLoadBalancerConfig
		return ret
	}).(BareMetalAdminLoadBalancerConfigOutput)
}

// Manually configured load balancers.
func (o BareMetalAdminLoadBalancerConfigPtrOutput) ManualLbConfig() BareMetalAdminManualLbConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminLoadBalancerConfig) *BareMetalAdminManualLbConfig {
		if v == nil {
			return nil
		}
		return v.ManualLbConfig
	}).(BareMetalAdminManualLbConfigPtrOutput)
}

// Configures the ports that the load balancer will listen on.
func (o BareMetalAdminLoadBalancerConfigPtrOutput) PortConfig() BareMetalAdminPortConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminLoadBalancerConfig) *BareMetalAdminPortConfig {
		if v == nil {
			return nil
		}
		return v.PortConfig
	}).(BareMetalAdminPortConfigPtrOutput)
}

// The VIPs used by the load balancer.
func (o BareMetalAdminLoadBalancerConfigPtrOutput) VipConfig() BareMetalAdminVipConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminLoadBalancerConfig) *BareMetalAdminVipConfig {
		if v == nil {
			return nil
		}
		return v.VipConfig
	}).(BareMetalAdminVipConfigPtrOutput)
}

// BareMetalAdminLoadBalancerConfig specifies the load balancer configuration.
type BareMetalAdminLoadBalancerConfigResponse struct {
	// Manually configured load balancers.
	ManualLbConfig BareMetalAdminManualLbConfigResponse `pulumi:"manualLbConfig"`
	// Configures the ports that the load balancer will listen on.
	PortConfig BareMetalAdminPortConfigResponse `pulumi:"portConfig"`
	// The VIPs used by the load balancer.
	VipConfig BareMetalAdminVipConfigResponse `pulumi:"vipConfig"`
}

// BareMetalAdminLoadBalancerConfig specifies the load balancer configuration.
type BareMetalAdminLoadBalancerConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminLoadBalancerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminLoadBalancerConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminLoadBalancerConfigResponseOutput) ToBareMetalAdminLoadBalancerConfigResponseOutput() BareMetalAdminLoadBalancerConfigResponseOutput {
	return o
}

func (o BareMetalAdminLoadBalancerConfigResponseOutput) ToBareMetalAdminLoadBalancerConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminLoadBalancerConfigResponseOutput {
	return o
}

// Manually configured load balancers.
func (o BareMetalAdminLoadBalancerConfigResponseOutput) ManualLbConfig() BareMetalAdminManualLbConfigResponseOutput {
	return o.ApplyT(func(v BareMetalAdminLoadBalancerConfigResponse) BareMetalAdminManualLbConfigResponse {
		return v.ManualLbConfig
	}).(BareMetalAdminManualLbConfigResponseOutput)
}

// Configures the ports that the load balancer will listen on.
func (o BareMetalAdminLoadBalancerConfigResponseOutput) PortConfig() BareMetalAdminPortConfigResponseOutput {
	return o.ApplyT(func(v BareMetalAdminLoadBalancerConfigResponse) BareMetalAdminPortConfigResponse { return v.PortConfig }).(BareMetalAdminPortConfigResponseOutput)
}

// The VIPs used by the load balancer.
func (o BareMetalAdminLoadBalancerConfigResponseOutput) VipConfig() BareMetalAdminVipConfigResponseOutput {
	return o.ApplyT(func(v BareMetalAdminLoadBalancerConfigResponse) BareMetalAdminVipConfigResponse { return v.VipConfig }).(BareMetalAdminVipConfigResponseOutput)
}

// BareMetalAdminMachineDrainStatus represents the status of bare metal node machines that are undergoing drain operations.
type BareMetalAdminMachineDrainStatusResponse struct {
	// The list of drained machines.
	DrainedMachines []BareMetalAdminDrainedMachineResponse `pulumi:"drainedMachines"`
	// The list of draning machines.
	DrainingMachines []BareMetalAdminDrainingMachineResponse `pulumi:"drainingMachines"`
}

// BareMetalAdminMachineDrainStatus represents the status of bare metal node machines that are undergoing drain operations.
type BareMetalAdminMachineDrainStatusResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminMachineDrainStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminMachineDrainStatusResponse)(nil)).Elem()
}

func (o BareMetalAdminMachineDrainStatusResponseOutput) ToBareMetalAdminMachineDrainStatusResponseOutput() BareMetalAdminMachineDrainStatusResponseOutput {
	return o
}

func (o BareMetalAdminMachineDrainStatusResponseOutput) ToBareMetalAdminMachineDrainStatusResponseOutputWithContext(ctx context.Context) BareMetalAdminMachineDrainStatusResponseOutput {
	return o
}

// The list of drained machines.
func (o BareMetalAdminMachineDrainStatusResponseOutput) DrainedMachines() BareMetalAdminDrainedMachineResponseArrayOutput {
	return o.ApplyT(func(v BareMetalAdminMachineDrainStatusResponse) []BareMetalAdminDrainedMachineResponse {
		return v.DrainedMachines
	}).(BareMetalAdminDrainedMachineResponseArrayOutput)
}

// The list of draning machines.
func (o BareMetalAdminMachineDrainStatusResponseOutput) DrainingMachines() BareMetalAdminDrainingMachineResponseArrayOutput {
	return o.ApplyT(func(v BareMetalAdminMachineDrainStatusResponse) []BareMetalAdminDrainingMachineResponse {
		return v.DrainingMachines
	}).(BareMetalAdminDrainingMachineResponseArrayOutput)
}

// BareMetalAdminMaintenanceConfig specifies configurations to put bare metal Admin cluster CRs nodes in and out of maintenance.
type BareMetalAdminMaintenanceConfig struct {
	// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
	MaintenanceAddressCidrBlocks []string `pulumi:"maintenanceAddressCidrBlocks"`
}

// BareMetalAdminMaintenanceConfigInput is an input type that accepts BareMetalAdminMaintenanceConfigArgs and BareMetalAdminMaintenanceConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminMaintenanceConfigInput` via:
//
//	BareMetalAdminMaintenanceConfigArgs{...}
type BareMetalAdminMaintenanceConfigInput interface {
	pulumi.Input

	ToBareMetalAdminMaintenanceConfigOutput() BareMetalAdminMaintenanceConfigOutput
	ToBareMetalAdminMaintenanceConfigOutputWithContext(context.Context) BareMetalAdminMaintenanceConfigOutput
}

// BareMetalAdminMaintenanceConfig specifies configurations to put bare metal Admin cluster CRs nodes in and out of maintenance.
type BareMetalAdminMaintenanceConfigArgs struct {
	// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
	MaintenanceAddressCidrBlocks pulumi.StringArrayInput `pulumi:"maintenanceAddressCidrBlocks"`
}

func (BareMetalAdminMaintenanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminMaintenanceConfig)(nil)).Elem()
}

func (i BareMetalAdminMaintenanceConfigArgs) ToBareMetalAdminMaintenanceConfigOutput() BareMetalAdminMaintenanceConfigOutput {
	return i.ToBareMetalAdminMaintenanceConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminMaintenanceConfigArgs) ToBareMetalAdminMaintenanceConfigOutputWithContext(ctx context.Context) BareMetalAdminMaintenanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminMaintenanceConfigOutput)
}

func (i BareMetalAdminMaintenanceConfigArgs) ToBareMetalAdminMaintenanceConfigPtrOutput() BareMetalAdminMaintenanceConfigPtrOutput {
	return i.ToBareMetalAdminMaintenanceConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminMaintenanceConfigArgs) ToBareMetalAdminMaintenanceConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminMaintenanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminMaintenanceConfigOutput).ToBareMetalAdminMaintenanceConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminMaintenanceConfigPtrInput is an input type that accepts BareMetalAdminMaintenanceConfigArgs, BareMetalAdminMaintenanceConfigPtr and BareMetalAdminMaintenanceConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminMaintenanceConfigPtrInput` via:
//
//	        BareMetalAdminMaintenanceConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminMaintenanceConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminMaintenanceConfigPtrOutput() BareMetalAdminMaintenanceConfigPtrOutput
	ToBareMetalAdminMaintenanceConfigPtrOutputWithContext(context.Context) BareMetalAdminMaintenanceConfigPtrOutput
}

type bareMetalAdminMaintenanceConfigPtrType BareMetalAdminMaintenanceConfigArgs

func BareMetalAdminMaintenanceConfigPtr(v *BareMetalAdminMaintenanceConfigArgs) BareMetalAdminMaintenanceConfigPtrInput {
	return (*bareMetalAdminMaintenanceConfigPtrType)(v)
}

func (*bareMetalAdminMaintenanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminMaintenanceConfig)(nil)).Elem()
}

func (i *bareMetalAdminMaintenanceConfigPtrType) ToBareMetalAdminMaintenanceConfigPtrOutput() BareMetalAdminMaintenanceConfigPtrOutput {
	return i.ToBareMetalAdminMaintenanceConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminMaintenanceConfigPtrType) ToBareMetalAdminMaintenanceConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminMaintenanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminMaintenanceConfigPtrOutput)
}

// BareMetalAdminMaintenanceConfig specifies configurations to put bare metal Admin cluster CRs nodes in and out of maintenance.
type BareMetalAdminMaintenanceConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminMaintenanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminMaintenanceConfig)(nil)).Elem()
}

func (o BareMetalAdminMaintenanceConfigOutput) ToBareMetalAdminMaintenanceConfigOutput() BareMetalAdminMaintenanceConfigOutput {
	return o
}

func (o BareMetalAdminMaintenanceConfigOutput) ToBareMetalAdminMaintenanceConfigOutputWithContext(ctx context.Context) BareMetalAdminMaintenanceConfigOutput {
	return o
}

func (o BareMetalAdminMaintenanceConfigOutput) ToBareMetalAdminMaintenanceConfigPtrOutput() BareMetalAdminMaintenanceConfigPtrOutput {
	return o.ToBareMetalAdminMaintenanceConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminMaintenanceConfigOutput) ToBareMetalAdminMaintenanceConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminMaintenanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminMaintenanceConfig) *BareMetalAdminMaintenanceConfig {
		return &v
	}).(BareMetalAdminMaintenanceConfigPtrOutput)
}

// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
func (o BareMetalAdminMaintenanceConfigOutput) MaintenanceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalAdminMaintenanceConfig) []string { return v.MaintenanceAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

type BareMetalAdminMaintenanceConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminMaintenanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminMaintenanceConfig)(nil)).Elem()
}

func (o BareMetalAdminMaintenanceConfigPtrOutput) ToBareMetalAdminMaintenanceConfigPtrOutput() BareMetalAdminMaintenanceConfigPtrOutput {
	return o
}

func (o BareMetalAdminMaintenanceConfigPtrOutput) ToBareMetalAdminMaintenanceConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminMaintenanceConfigPtrOutput {
	return o
}

func (o BareMetalAdminMaintenanceConfigPtrOutput) Elem() BareMetalAdminMaintenanceConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminMaintenanceConfig) BareMetalAdminMaintenanceConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminMaintenanceConfig
		return ret
	}).(BareMetalAdminMaintenanceConfigOutput)
}

// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
func (o BareMetalAdminMaintenanceConfigPtrOutput) MaintenanceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BareMetalAdminMaintenanceConfig) []string {
		if v == nil {
			return nil
		}
		return v.MaintenanceAddressCidrBlocks
	}).(pulumi.StringArrayOutput)
}

// BareMetalAdminMaintenanceConfig specifies configurations to put bare metal Admin cluster CRs nodes in and out of maintenance.
type BareMetalAdminMaintenanceConfigResponse struct {
	// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
	MaintenanceAddressCidrBlocks []string `pulumi:"maintenanceAddressCidrBlocks"`
}

// BareMetalAdminMaintenanceConfig specifies configurations to put bare metal Admin cluster CRs nodes in and out of maintenance.
type BareMetalAdminMaintenanceConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminMaintenanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminMaintenanceConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminMaintenanceConfigResponseOutput) ToBareMetalAdminMaintenanceConfigResponseOutput() BareMetalAdminMaintenanceConfigResponseOutput {
	return o
}

func (o BareMetalAdminMaintenanceConfigResponseOutput) ToBareMetalAdminMaintenanceConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminMaintenanceConfigResponseOutput {
	return o
}

// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
func (o BareMetalAdminMaintenanceConfigResponseOutput) MaintenanceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalAdminMaintenanceConfigResponse) []string { return v.MaintenanceAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// BareMetalAdminMaintenanceStatus represents the maintenance status for bare metal Admin cluster CR's nodes.
type BareMetalAdminMaintenanceStatusResponse struct {
	// Represents the status of draining and drained machine nodes. This is used to show the progress of cluster upgrade.
	MachineDrainStatus BareMetalAdminMachineDrainStatusResponse `pulumi:"machineDrainStatus"`
}

// BareMetalAdminMaintenanceStatus represents the maintenance status for bare metal Admin cluster CR's nodes.
type BareMetalAdminMaintenanceStatusResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminMaintenanceStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminMaintenanceStatusResponse)(nil)).Elem()
}

func (o BareMetalAdminMaintenanceStatusResponseOutput) ToBareMetalAdminMaintenanceStatusResponseOutput() BareMetalAdminMaintenanceStatusResponseOutput {
	return o
}

func (o BareMetalAdminMaintenanceStatusResponseOutput) ToBareMetalAdminMaintenanceStatusResponseOutputWithContext(ctx context.Context) BareMetalAdminMaintenanceStatusResponseOutput {
	return o
}

// Represents the status of draining and drained machine nodes. This is used to show the progress of cluster upgrade.
func (o BareMetalAdminMaintenanceStatusResponseOutput) MachineDrainStatus() BareMetalAdminMachineDrainStatusResponseOutput {
	return o.ApplyT(func(v BareMetalAdminMaintenanceStatusResponse) BareMetalAdminMachineDrainStatusResponse {
		return v.MachineDrainStatus
	}).(BareMetalAdminMachineDrainStatusResponseOutput)
}

// BareMetalAdminManualLbConfig represents configuration parameters for a manual load balancer.
type BareMetalAdminManualLbConfig struct {
	// Whether manual load balancing is enabled.
	Enabled *bool `pulumi:"enabled"`
}

// BareMetalAdminManualLbConfigInput is an input type that accepts BareMetalAdminManualLbConfigArgs and BareMetalAdminManualLbConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminManualLbConfigInput` via:
//
//	BareMetalAdminManualLbConfigArgs{...}
type BareMetalAdminManualLbConfigInput interface {
	pulumi.Input

	ToBareMetalAdminManualLbConfigOutput() BareMetalAdminManualLbConfigOutput
	ToBareMetalAdminManualLbConfigOutputWithContext(context.Context) BareMetalAdminManualLbConfigOutput
}

// BareMetalAdminManualLbConfig represents configuration parameters for a manual load balancer.
type BareMetalAdminManualLbConfigArgs struct {
	// Whether manual load balancing is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (BareMetalAdminManualLbConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminManualLbConfig)(nil)).Elem()
}

func (i BareMetalAdminManualLbConfigArgs) ToBareMetalAdminManualLbConfigOutput() BareMetalAdminManualLbConfigOutput {
	return i.ToBareMetalAdminManualLbConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminManualLbConfigArgs) ToBareMetalAdminManualLbConfigOutputWithContext(ctx context.Context) BareMetalAdminManualLbConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminManualLbConfigOutput)
}

func (i BareMetalAdminManualLbConfigArgs) ToBareMetalAdminManualLbConfigPtrOutput() BareMetalAdminManualLbConfigPtrOutput {
	return i.ToBareMetalAdminManualLbConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminManualLbConfigArgs) ToBareMetalAdminManualLbConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminManualLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminManualLbConfigOutput).ToBareMetalAdminManualLbConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminManualLbConfigPtrInput is an input type that accepts BareMetalAdminManualLbConfigArgs, BareMetalAdminManualLbConfigPtr and BareMetalAdminManualLbConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminManualLbConfigPtrInput` via:
//
//	        BareMetalAdminManualLbConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminManualLbConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminManualLbConfigPtrOutput() BareMetalAdminManualLbConfigPtrOutput
	ToBareMetalAdminManualLbConfigPtrOutputWithContext(context.Context) BareMetalAdminManualLbConfigPtrOutput
}

type bareMetalAdminManualLbConfigPtrType BareMetalAdminManualLbConfigArgs

func BareMetalAdminManualLbConfigPtr(v *BareMetalAdminManualLbConfigArgs) BareMetalAdminManualLbConfigPtrInput {
	return (*bareMetalAdminManualLbConfigPtrType)(v)
}

func (*bareMetalAdminManualLbConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminManualLbConfig)(nil)).Elem()
}

func (i *bareMetalAdminManualLbConfigPtrType) ToBareMetalAdminManualLbConfigPtrOutput() BareMetalAdminManualLbConfigPtrOutput {
	return i.ToBareMetalAdminManualLbConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminManualLbConfigPtrType) ToBareMetalAdminManualLbConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminManualLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminManualLbConfigPtrOutput)
}

// BareMetalAdminManualLbConfig represents configuration parameters for a manual load balancer.
type BareMetalAdminManualLbConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminManualLbConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminManualLbConfig)(nil)).Elem()
}

func (o BareMetalAdminManualLbConfigOutput) ToBareMetalAdminManualLbConfigOutput() BareMetalAdminManualLbConfigOutput {
	return o
}

func (o BareMetalAdminManualLbConfigOutput) ToBareMetalAdminManualLbConfigOutputWithContext(ctx context.Context) BareMetalAdminManualLbConfigOutput {
	return o
}

func (o BareMetalAdminManualLbConfigOutput) ToBareMetalAdminManualLbConfigPtrOutput() BareMetalAdminManualLbConfigPtrOutput {
	return o.ToBareMetalAdminManualLbConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminManualLbConfigOutput) ToBareMetalAdminManualLbConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminManualLbConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminManualLbConfig) *BareMetalAdminManualLbConfig {
		return &v
	}).(BareMetalAdminManualLbConfigPtrOutput)
}

// Whether manual load balancing is enabled.
func (o BareMetalAdminManualLbConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalAdminManualLbConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type BareMetalAdminManualLbConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminManualLbConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminManualLbConfig)(nil)).Elem()
}

func (o BareMetalAdminManualLbConfigPtrOutput) ToBareMetalAdminManualLbConfigPtrOutput() BareMetalAdminManualLbConfigPtrOutput {
	return o
}

func (o BareMetalAdminManualLbConfigPtrOutput) ToBareMetalAdminManualLbConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminManualLbConfigPtrOutput {
	return o
}

func (o BareMetalAdminManualLbConfigPtrOutput) Elem() BareMetalAdminManualLbConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminManualLbConfig) BareMetalAdminManualLbConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminManualLbConfig
		return ret
	}).(BareMetalAdminManualLbConfigOutput)
}

// Whether manual load balancing is enabled.
func (o BareMetalAdminManualLbConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminManualLbConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// BareMetalAdminManualLbConfig represents configuration parameters for a manual load balancer.
type BareMetalAdminManualLbConfigResponse struct {
	// Whether manual load balancing is enabled.
	Enabled bool `pulumi:"enabled"`
}

// BareMetalAdminManualLbConfig represents configuration parameters for a manual load balancer.
type BareMetalAdminManualLbConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminManualLbConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminManualLbConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminManualLbConfigResponseOutput) ToBareMetalAdminManualLbConfigResponseOutput() BareMetalAdminManualLbConfigResponseOutput {
	return o
}

func (o BareMetalAdminManualLbConfigResponseOutput) ToBareMetalAdminManualLbConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminManualLbConfigResponseOutput {
	return o
}

// Whether manual load balancing is enabled.
func (o BareMetalAdminManualLbConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalAdminManualLbConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// BareMetalAdminNetworkConfig specifies the cluster network configuration.
type BareMetalAdminNetworkConfig struct {
	// Configuration for Island mode CIDR.
	IslandModeCidr *BareMetalAdminIslandModeCidrConfig `pulumi:"islandModeCidr"`
}

// BareMetalAdminNetworkConfigInput is an input type that accepts BareMetalAdminNetworkConfigArgs and BareMetalAdminNetworkConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminNetworkConfigInput` via:
//
//	BareMetalAdminNetworkConfigArgs{...}
type BareMetalAdminNetworkConfigInput interface {
	pulumi.Input

	ToBareMetalAdminNetworkConfigOutput() BareMetalAdminNetworkConfigOutput
	ToBareMetalAdminNetworkConfigOutputWithContext(context.Context) BareMetalAdminNetworkConfigOutput
}

// BareMetalAdminNetworkConfig specifies the cluster network configuration.
type BareMetalAdminNetworkConfigArgs struct {
	// Configuration for Island mode CIDR.
	IslandModeCidr BareMetalAdminIslandModeCidrConfigPtrInput `pulumi:"islandModeCidr"`
}

func (BareMetalAdminNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminNetworkConfig)(nil)).Elem()
}

func (i BareMetalAdminNetworkConfigArgs) ToBareMetalAdminNetworkConfigOutput() BareMetalAdminNetworkConfigOutput {
	return i.ToBareMetalAdminNetworkConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminNetworkConfigArgs) ToBareMetalAdminNetworkConfigOutputWithContext(ctx context.Context) BareMetalAdminNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminNetworkConfigOutput)
}

func (i BareMetalAdminNetworkConfigArgs) ToBareMetalAdminNetworkConfigPtrOutput() BareMetalAdminNetworkConfigPtrOutput {
	return i.ToBareMetalAdminNetworkConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminNetworkConfigArgs) ToBareMetalAdminNetworkConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminNetworkConfigOutput).ToBareMetalAdminNetworkConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminNetworkConfigPtrInput is an input type that accepts BareMetalAdminNetworkConfigArgs, BareMetalAdminNetworkConfigPtr and BareMetalAdminNetworkConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminNetworkConfigPtrInput` via:
//
//	        BareMetalAdminNetworkConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminNetworkConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminNetworkConfigPtrOutput() BareMetalAdminNetworkConfigPtrOutput
	ToBareMetalAdminNetworkConfigPtrOutputWithContext(context.Context) BareMetalAdminNetworkConfigPtrOutput
}

type bareMetalAdminNetworkConfigPtrType BareMetalAdminNetworkConfigArgs

func BareMetalAdminNetworkConfigPtr(v *BareMetalAdminNetworkConfigArgs) BareMetalAdminNetworkConfigPtrInput {
	return (*bareMetalAdminNetworkConfigPtrType)(v)
}

func (*bareMetalAdminNetworkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminNetworkConfig)(nil)).Elem()
}

func (i *bareMetalAdminNetworkConfigPtrType) ToBareMetalAdminNetworkConfigPtrOutput() BareMetalAdminNetworkConfigPtrOutput {
	return i.ToBareMetalAdminNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminNetworkConfigPtrType) ToBareMetalAdminNetworkConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminNetworkConfigPtrOutput)
}

// BareMetalAdminNetworkConfig specifies the cluster network configuration.
type BareMetalAdminNetworkConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminNetworkConfig)(nil)).Elem()
}

func (o BareMetalAdminNetworkConfigOutput) ToBareMetalAdminNetworkConfigOutput() BareMetalAdminNetworkConfigOutput {
	return o
}

func (o BareMetalAdminNetworkConfigOutput) ToBareMetalAdminNetworkConfigOutputWithContext(ctx context.Context) BareMetalAdminNetworkConfigOutput {
	return o
}

func (o BareMetalAdminNetworkConfigOutput) ToBareMetalAdminNetworkConfigPtrOutput() BareMetalAdminNetworkConfigPtrOutput {
	return o.ToBareMetalAdminNetworkConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminNetworkConfigOutput) ToBareMetalAdminNetworkConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminNetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminNetworkConfig) *BareMetalAdminNetworkConfig {
		return &v
	}).(BareMetalAdminNetworkConfigPtrOutput)
}

// Configuration for Island mode CIDR.
func (o BareMetalAdminNetworkConfigOutput) IslandModeCidr() BareMetalAdminIslandModeCidrConfigPtrOutput {
	return o.ApplyT(func(v BareMetalAdminNetworkConfig) *BareMetalAdminIslandModeCidrConfig { return v.IslandModeCidr }).(BareMetalAdminIslandModeCidrConfigPtrOutput)
}

type BareMetalAdminNetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminNetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminNetworkConfig)(nil)).Elem()
}

func (o BareMetalAdminNetworkConfigPtrOutput) ToBareMetalAdminNetworkConfigPtrOutput() BareMetalAdminNetworkConfigPtrOutput {
	return o
}

func (o BareMetalAdminNetworkConfigPtrOutput) ToBareMetalAdminNetworkConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminNetworkConfigPtrOutput {
	return o
}

func (o BareMetalAdminNetworkConfigPtrOutput) Elem() BareMetalAdminNetworkConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminNetworkConfig) BareMetalAdminNetworkConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminNetworkConfig
		return ret
	}).(BareMetalAdminNetworkConfigOutput)
}

// Configuration for Island mode CIDR.
func (o BareMetalAdminNetworkConfigPtrOutput) IslandModeCidr() BareMetalAdminIslandModeCidrConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminNetworkConfig) *BareMetalAdminIslandModeCidrConfig {
		if v == nil {
			return nil
		}
		return v.IslandModeCidr
	}).(BareMetalAdminIslandModeCidrConfigPtrOutput)
}

// BareMetalAdminNetworkConfig specifies the cluster network configuration.
type BareMetalAdminNetworkConfigResponse struct {
	// Configuration for Island mode CIDR.
	IslandModeCidr BareMetalAdminIslandModeCidrConfigResponse `pulumi:"islandModeCidr"`
}

// BareMetalAdminNetworkConfig specifies the cluster network configuration.
type BareMetalAdminNetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminNetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminNetworkConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminNetworkConfigResponseOutput) ToBareMetalAdminNetworkConfigResponseOutput() BareMetalAdminNetworkConfigResponseOutput {
	return o
}

func (o BareMetalAdminNetworkConfigResponseOutput) ToBareMetalAdminNetworkConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminNetworkConfigResponseOutput {
	return o
}

// Configuration for Island mode CIDR.
func (o BareMetalAdminNetworkConfigResponseOutput) IslandModeCidr() BareMetalAdminIslandModeCidrConfigResponseOutput {
	return o.ApplyT(func(v BareMetalAdminNetworkConfigResponse) BareMetalAdminIslandModeCidrConfigResponse {
		return v.IslandModeCidr
	}).(BareMetalAdminIslandModeCidrConfigResponseOutput)
}

// Specifies the node access related settings for the bare metal admin cluster.
type BareMetalAdminNodeAccessConfig struct {
	// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
	LoginUser string `pulumi:"loginUser"`
}

// BareMetalAdminNodeAccessConfigInput is an input type that accepts BareMetalAdminNodeAccessConfigArgs and BareMetalAdminNodeAccessConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminNodeAccessConfigInput` via:
//
//	BareMetalAdminNodeAccessConfigArgs{...}
type BareMetalAdminNodeAccessConfigInput interface {
	pulumi.Input

	ToBareMetalAdminNodeAccessConfigOutput() BareMetalAdminNodeAccessConfigOutput
	ToBareMetalAdminNodeAccessConfigOutputWithContext(context.Context) BareMetalAdminNodeAccessConfigOutput
}

// Specifies the node access related settings for the bare metal admin cluster.
type BareMetalAdminNodeAccessConfigArgs struct {
	// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
	LoginUser pulumi.StringInput `pulumi:"loginUser"`
}

func (BareMetalAdminNodeAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminNodeAccessConfig)(nil)).Elem()
}

func (i BareMetalAdminNodeAccessConfigArgs) ToBareMetalAdminNodeAccessConfigOutput() BareMetalAdminNodeAccessConfigOutput {
	return i.ToBareMetalAdminNodeAccessConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminNodeAccessConfigArgs) ToBareMetalAdminNodeAccessConfigOutputWithContext(ctx context.Context) BareMetalAdminNodeAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminNodeAccessConfigOutput)
}

func (i BareMetalAdminNodeAccessConfigArgs) ToBareMetalAdminNodeAccessConfigPtrOutput() BareMetalAdminNodeAccessConfigPtrOutput {
	return i.ToBareMetalAdminNodeAccessConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminNodeAccessConfigArgs) ToBareMetalAdminNodeAccessConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminNodeAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminNodeAccessConfigOutput).ToBareMetalAdminNodeAccessConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminNodeAccessConfigPtrInput is an input type that accepts BareMetalAdminNodeAccessConfigArgs, BareMetalAdminNodeAccessConfigPtr and BareMetalAdminNodeAccessConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminNodeAccessConfigPtrInput` via:
//
//	        BareMetalAdminNodeAccessConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminNodeAccessConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminNodeAccessConfigPtrOutput() BareMetalAdminNodeAccessConfigPtrOutput
	ToBareMetalAdminNodeAccessConfigPtrOutputWithContext(context.Context) BareMetalAdminNodeAccessConfigPtrOutput
}

type bareMetalAdminNodeAccessConfigPtrType BareMetalAdminNodeAccessConfigArgs

func BareMetalAdminNodeAccessConfigPtr(v *BareMetalAdminNodeAccessConfigArgs) BareMetalAdminNodeAccessConfigPtrInput {
	return (*bareMetalAdminNodeAccessConfigPtrType)(v)
}

func (*bareMetalAdminNodeAccessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminNodeAccessConfig)(nil)).Elem()
}

func (i *bareMetalAdminNodeAccessConfigPtrType) ToBareMetalAdminNodeAccessConfigPtrOutput() BareMetalAdminNodeAccessConfigPtrOutput {
	return i.ToBareMetalAdminNodeAccessConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminNodeAccessConfigPtrType) ToBareMetalAdminNodeAccessConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminNodeAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminNodeAccessConfigPtrOutput)
}

// Specifies the node access related settings for the bare metal admin cluster.
type BareMetalAdminNodeAccessConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminNodeAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminNodeAccessConfig)(nil)).Elem()
}

func (o BareMetalAdminNodeAccessConfigOutput) ToBareMetalAdminNodeAccessConfigOutput() BareMetalAdminNodeAccessConfigOutput {
	return o
}

func (o BareMetalAdminNodeAccessConfigOutput) ToBareMetalAdminNodeAccessConfigOutputWithContext(ctx context.Context) BareMetalAdminNodeAccessConfigOutput {
	return o
}

func (o BareMetalAdminNodeAccessConfigOutput) ToBareMetalAdminNodeAccessConfigPtrOutput() BareMetalAdminNodeAccessConfigPtrOutput {
	return o.ToBareMetalAdminNodeAccessConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminNodeAccessConfigOutput) ToBareMetalAdminNodeAccessConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminNodeAccessConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminNodeAccessConfig) *BareMetalAdminNodeAccessConfig {
		return &v
	}).(BareMetalAdminNodeAccessConfigPtrOutput)
}

// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
func (o BareMetalAdminNodeAccessConfigOutput) LoginUser() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminNodeAccessConfig) string { return v.LoginUser }).(pulumi.StringOutput)
}

type BareMetalAdminNodeAccessConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminNodeAccessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminNodeAccessConfig)(nil)).Elem()
}

func (o BareMetalAdminNodeAccessConfigPtrOutput) ToBareMetalAdminNodeAccessConfigPtrOutput() BareMetalAdminNodeAccessConfigPtrOutput {
	return o
}

func (o BareMetalAdminNodeAccessConfigPtrOutput) ToBareMetalAdminNodeAccessConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminNodeAccessConfigPtrOutput {
	return o
}

func (o BareMetalAdminNodeAccessConfigPtrOutput) Elem() BareMetalAdminNodeAccessConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminNodeAccessConfig) BareMetalAdminNodeAccessConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminNodeAccessConfig
		return ret
	}).(BareMetalAdminNodeAccessConfigOutput)
}

// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
func (o BareMetalAdminNodeAccessConfigPtrOutput) LoginUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminNodeAccessConfig) *string {
		if v == nil {
			return nil
		}
		return &v.LoginUser
	}).(pulumi.StringPtrOutput)
}

// Specifies the node access related settings for the bare metal admin cluster.
type BareMetalAdminNodeAccessConfigResponse struct {
	// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
	LoginUser string `pulumi:"loginUser"`
}

// Specifies the node access related settings for the bare metal admin cluster.
type BareMetalAdminNodeAccessConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminNodeAccessConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminNodeAccessConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminNodeAccessConfigResponseOutput) ToBareMetalAdminNodeAccessConfigResponseOutput() BareMetalAdminNodeAccessConfigResponseOutput {
	return o
}

func (o BareMetalAdminNodeAccessConfigResponseOutput) ToBareMetalAdminNodeAccessConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminNodeAccessConfigResponseOutput {
	return o
}

// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
func (o BareMetalAdminNodeAccessConfigResponseOutput) LoginUser() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminNodeAccessConfigResponse) string { return v.LoginUser }).(pulumi.StringOutput)
}

// Specifies operating system operation settings for cluster provisioning.
type BareMetalAdminOsEnvironmentConfig struct {
	// Whether the package repo should be added when initializing bare metal machines.
	PackageRepoExcluded *bool `pulumi:"packageRepoExcluded"`
}

// BareMetalAdminOsEnvironmentConfigInput is an input type that accepts BareMetalAdminOsEnvironmentConfigArgs and BareMetalAdminOsEnvironmentConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminOsEnvironmentConfigInput` via:
//
//	BareMetalAdminOsEnvironmentConfigArgs{...}
type BareMetalAdminOsEnvironmentConfigInput interface {
	pulumi.Input

	ToBareMetalAdminOsEnvironmentConfigOutput() BareMetalAdminOsEnvironmentConfigOutput
	ToBareMetalAdminOsEnvironmentConfigOutputWithContext(context.Context) BareMetalAdminOsEnvironmentConfigOutput
}

// Specifies operating system operation settings for cluster provisioning.
type BareMetalAdminOsEnvironmentConfigArgs struct {
	// Whether the package repo should be added when initializing bare metal machines.
	PackageRepoExcluded pulumi.BoolPtrInput `pulumi:"packageRepoExcluded"`
}

func (BareMetalAdminOsEnvironmentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminOsEnvironmentConfig)(nil)).Elem()
}

func (i BareMetalAdminOsEnvironmentConfigArgs) ToBareMetalAdminOsEnvironmentConfigOutput() BareMetalAdminOsEnvironmentConfigOutput {
	return i.ToBareMetalAdminOsEnvironmentConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminOsEnvironmentConfigArgs) ToBareMetalAdminOsEnvironmentConfigOutputWithContext(ctx context.Context) BareMetalAdminOsEnvironmentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminOsEnvironmentConfigOutput)
}

func (i BareMetalAdminOsEnvironmentConfigArgs) ToBareMetalAdminOsEnvironmentConfigPtrOutput() BareMetalAdminOsEnvironmentConfigPtrOutput {
	return i.ToBareMetalAdminOsEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminOsEnvironmentConfigArgs) ToBareMetalAdminOsEnvironmentConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminOsEnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminOsEnvironmentConfigOutput).ToBareMetalAdminOsEnvironmentConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminOsEnvironmentConfigPtrInput is an input type that accepts BareMetalAdminOsEnvironmentConfigArgs, BareMetalAdminOsEnvironmentConfigPtr and BareMetalAdminOsEnvironmentConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminOsEnvironmentConfigPtrInput` via:
//
//	        BareMetalAdminOsEnvironmentConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminOsEnvironmentConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminOsEnvironmentConfigPtrOutput() BareMetalAdminOsEnvironmentConfigPtrOutput
	ToBareMetalAdminOsEnvironmentConfigPtrOutputWithContext(context.Context) BareMetalAdminOsEnvironmentConfigPtrOutput
}

type bareMetalAdminOsEnvironmentConfigPtrType BareMetalAdminOsEnvironmentConfigArgs

func BareMetalAdminOsEnvironmentConfigPtr(v *BareMetalAdminOsEnvironmentConfigArgs) BareMetalAdminOsEnvironmentConfigPtrInput {
	return (*bareMetalAdminOsEnvironmentConfigPtrType)(v)
}

func (*bareMetalAdminOsEnvironmentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminOsEnvironmentConfig)(nil)).Elem()
}

func (i *bareMetalAdminOsEnvironmentConfigPtrType) ToBareMetalAdminOsEnvironmentConfigPtrOutput() BareMetalAdminOsEnvironmentConfigPtrOutput {
	return i.ToBareMetalAdminOsEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminOsEnvironmentConfigPtrType) ToBareMetalAdminOsEnvironmentConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminOsEnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminOsEnvironmentConfigPtrOutput)
}

// Specifies operating system operation settings for cluster provisioning.
type BareMetalAdminOsEnvironmentConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminOsEnvironmentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminOsEnvironmentConfig)(nil)).Elem()
}

func (o BareMetalAdminOsEnvironmentConfigOutput) ToBareMetalAdminOsEnvironmentConfigOutput() BareMetalAdminOsEnvironmentConfigOutput {
	return o
}

func (o BareMetalAdminOsEnvironmentConfigOutput) ToBareMetalAdminOsEnvironmentConfigOutputWithContext(ctx context.Context) BareMetalAdminOsEnvironmentConfigOutput {
	return o
}

func (o BareMetalAdminOsEnvironmentConfigOutput) ToBareMetalAdminOsEnvironmentConfigPtrOutput() BareMetalAdminOsEnvironmentConfigPtrOutput {
	return o.ToBareMetalAdminOsEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminOsEnvironmentConfigOutput) ToBareMetalAdminOsEnvironmentConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminOsEnvironmentConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminOsEnvironmentConfig) *BareMetalAdminOsEnvironmentConfig {
		return &v
	}).(BareMetalAdminOsEnvironmentConfigPtrOutput)
}

// Whether the package repo should be added when initializing bare metal machines.
func (o BareMetalAdminOsEnvironmentConfigOutput) PackageRepoExcluded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalAdminOsEnvironmentConfig) *bool { return v.PackageRepoExcluded }).(pulumi.BoolPtrOutput)
}

type BareMetalAdminOsEnvironmentConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminOsEnvironmentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminOsEnvironmentConfig)(nil)).Elem()
}

func (o BareMetalAdminOsEnvironmentConfigPtrOutput) ToBareMetalAdminOsEnvironmentConfigPtrOutput() BareMetalAdminOsEnvironmentConfigPtrOutput {
	return o
}

func (o BareMetalAdminOsEnvironmentConfigPtrOutput) ToBareMetalAdminOsEnvironmentConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminOsEnvironmentConfigPtrOutput {
	return o
}

func (o BareMetalAdminOsEnvironmentConfigPtrOutput) Elem() BareMetalAdminOsEnvironmentConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminOsEnvironmentConfig) BareMetalAdminOsEnvironmentConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminOsEnvironmentConfig
		return ret
	}).(BareMetalAdminOsEnvironmentConfigOutput)
}

// Whether the package repo should be added when initializing bare metal machines.
func (o BareMetalAdminOsEnvironmentConfigPtrOutput) PackageRepoExcluded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminOsEnvironmentConfig) *bool {
		if v == nil {
			return nil
		}
		return v.PackageRepoExcluded
	}).(pulumi.BoolPtrOutput)
}

// Specifies operating system operation settings for cluster provisioning.
type BareMetalAdminOsEnvironmentConfigResponse struct {
	// Whether the package repo should be added when initializing bare metal machines.
	PackageRepoExcluded bool `pulumi:"packageRepoExcluded"`
}

// Specifies operating system operation settings for cluster provisioning.
type BareMetalAdminOsEnvironmentConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminOsEnvironmentConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminOsEnvironmentConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminOsEnvironmentConfigResponseOutput) ToBareMetalAdminOsEnvironmentConfigResponseOutput() BareMetalAdminOsEnvironmentConfigResponseOutput {
	return o
}

func (o BareMetalAdminOsEnvironmentConfigResponseOutput) ToBareMetalAdminOsEnvironmentConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminOsEnvironmentConfigResponseOutput {
	return o
}

// Whether the package repo should be added when initializing bare metal machines.
func (o BareMetalAdminOsEnvironmentConfigResponseOutput) PackageRepoExcluded() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalAdminOsEnvironmentConfigResponse) bool { return v.PackageRepoExcluded }).(pulumi.BoolOutput)
}

// BareMetalAdminPortConfig is the specification of load balancer ports.
type BareMetalAdminPortConfig struct {
	// The port that control plane hosted load balancers will listen on.
	ControlPlaneLoadBalancerPort *int `pulumi:"controlPlaneLoadBalancerPort"`
}

// BareMetalAdminPortConfigInput is an input type that accepts BareMetalAdminPortConfigArgs and BareMetalAdminPortConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminPortConfigInput` via:
//
//	BareMetalAdminPortConfigArgs{...}
type BareMetalAdminPortConfigInput interface {
	pulumi.Input

	ToBareMetalAdminPortConfigOutput() BareMetalAdminPortConfigOutput
	ToBareMetalAdminPortConfigOutputWithContext(context.Context) BareMetalAdminPortConfigOutput
}

// BareMetalAdminPortConfig is the specification of load balancer ports.
type BareMetalAdminPortConfigArgs struct {
	// The port that control plane hosted load balancers will listen on.
	ControlPlaneLoadBalancerPort pulumi.IntPtrInput `pulumi:"controlPlaneLoadBalancerPort"`
}

func (BareMetalAdminPortConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminPortConfig)(nil)).Elem()
}

func (i BareMetalAdminPortConfigArgs) ToBareMetalAdminPortConfigOutput() BareMetalAdminPortConfigOutput {
	return i.ToBareMetalAdminPortConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminPortConfigArgs) ToBareMetalAdminPortConfigOutputWithContext(ctx context.Context) BareMetalAdminPortConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminPortConfigOutput)
}

func (i BareMetalAdminPortConfigArgs) ToBareMetalAdminPortConfigPtrOutput() BareMetalAdminPortConfigPtrOutput {
	return i.ToBareMetalAdminPortConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminPortConfigArgs) ToBareMetalAdminPortConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminPortConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminPortConfigOutput).ToBareMetalAdminPortConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminPortConfigPtrInput is an input type that accepts BareMetalAdminPortConfigArgs, BareMetalAdminPortConfigPtr and BareMetalAdminPortConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminPortConfigPtrInput` via:
//
//	        BareMetalAdminPortConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminPortConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminPortConfigPtrOutput() BareMetalAdminPortConfigPtrOutput
	ToBareMetalAdminPortConfigPtrOutputWithContext(context.Context) BareMetalAdminPortConfigPtrOutput
}

type bareMetalAdminPortConfigPtrType BareMetalAdminPortConfigArgs

func BareMetalAdminPortConfigPtr(v *BareMetalAdminPortConfigArgs) BareMetalAdminPortConfigPtrInput {
	return (*bareMetalAdminPortConfigPtrType)(v)
}

func (*bareMetalAdminPortConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminPortConfig)(nil)).Elem()
}

func (i *bareMetalAdminPortConfigPtrType) ToBareMetalAdminPortConfigPtrOutput() BareMetalAdminPortConfigPtrOutput {
	return i.ToBareMetalAdminPortConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminPortConfigPtrType) ToBareMetalAdminPortConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminPortConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminPortConfigPtrOutput)
}

// BareMetalAdminPortConfig is the specification of load balancer ports.
type BareMetalAdminPortConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminPortConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminPortConfig)(nil)).Elem()
}

func (o BareMetalAdminPortConfigOutput) ToBareMetalAdminPortConfigOutput() BareMetalAdminPortConfigOutput {
	return o
}

func (o BareMetalAdminPortConfigOutput) ToBareMetalAdminPortConfigOutputWithContext(ctx context.Context) BareMetalAdminPortConfigOutput {
	return o
}

func (o BareMetalAdminPortConfigOutput) ToBareMetalAdminPortConfigPtrOutput() BareMetalAdminPortConfigPtrOutput {
	return o.ToBareMetalAdminPortConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminPortConfigOutput) ToBareMetalAdminPortConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminPortConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminPortConfig) *BareMetalAdminPortConfig {
		return &v
	}).(BareMetalAdminPortConfigPtrOutput)
}

// The port that control plane hosted load balancers will listen on.
func (o BareMetalAdminPortConfigOutput) ControlPlaneLoadBalancerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BareMetalAdminPortConfig) *int { return v.ControlPlaneLoadBalancerPort }).(pulumi.IntPtrOutput)
}

type BareMetalAdminPortConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminPortConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminPortConfig)(nil)).Elem()
}

func (o BareMetalAdminPortConfigPtrOutput) ToBareMetalAdminPortConfigPtrOutput() BareMetalAdminPortConfigPtrOutput {
	return o
}

func (o BareMetalAdminPortConfigPtrOutput) ToBareMetalAdminPortConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminPortConfigPtrOutput {
	return o
}

func (o BareMetalAdminPortConfigPtrOutput) Elem() BareMetalAdminPortConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminPortConfig) BareMetalAdminPortConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminPortConfig
		return ret
	}).(BareMetalAdminPortConfigOutput)
}

// The port that control plane hosted load balancers will listen on.
func (o BareMetalAdminPortConfigPtrOutput) ControlPlaneLoadBalancerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminPortConfig) *int {
		if v == nil {
			return nil
		}
		return v.ControlPlaneLoadBalancerPort
	}).(pulumi.IntPtrOutput)
}

// BareMetalAdminPortConfig is the specification of load balancer ports.
type BareMetalAdminPortConfigResponse struct {
	// The port that control plane hosted load balancers will listen on.
	ControlPlaneLoadBalancerPort int `pulumi:"controlPlaneLoadBalancerPort"`
}

// BareMetalAdminPortConfig is the specification of load balancer ports.
type BareMetalAdminPortConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminPortConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminPortConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminPortConfigResponseOutput) ToBareMetalAdminPortConfigResponseOutput() BareMetalAdminPortConfigResponseOutput {
	return o
}

func (o BareMetalAdminPortConfigResponseOutput) ToBareMetalAdminPortConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminPortConfigResponseOutput {
	return o
}

// The port that control plane hosted load balancers will listen on.
func (o BareMetalAdminPortConfigResponseOutput) ControlPlaneLoadBalancerPort() pulumi.IntOutput {
	return o.ApplyT(func(v BareMetalAdminPortConfigResponse) int { return v.ControlPlaneLoadBalancerPort }).(pulumi.IntOutput)
}

// BareMetalAdminProxyConfig specifies the cluster proxy configuration.
type BareMetalAdminProxyConfig struct {
	// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
	NoProxy []string `pulumi:"noProxy"`
	// Specifies the address of your proxy server. Examples: `http://domain` WARNING: Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
	Uri string `pulumi:"uri"`
}

// BareMetalAdminProxyConfigInput is an input type that accepts BareMetalAdminProxyConfigArgs and BareMetalAdminProxyConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminProxyConfigInput` via:
//
//	BareMetalAdminProxyConfigArgs{...}
type BareMetalAdminProxyConfigInput interface {
	pulumi.Input

	ToBareMetalAdminProxyConfigOutput() BareMetalAdminProxyConfigOutput
	ToBareMetalAdminProxyConfigOutputWithContext(context.Context) BareMetalAdminProxyConfigOutput
}

// BareMetalAdminProxyConfig specifies the cluster proxy configuration.
type BareMetalAdminProxyConfigArgs struct {
	// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
	NoProxy pulumi.StringArrayInput `pulumi:"noProxy"`
	// Specifies the address of your proxy server. Examples: `http://domain` WARNING: Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (BareMetalAdminProxyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminProxyConfig)(nil)).Elem()
}

func (i BareMetalAdminProxyConfigArgs) ToBareMetalAdminProxyConfigOutput() BareMetalAdminProxyConfigOutput {
	return i.ToBareMetalAdminProxyConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminProxyConfigArgs) ToBareMetalAdminProxyConfigOutputWithContext(ctx context.Context) BareMetalAdminProxyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminProxyConfigOutput)
}

func (i BareMetalAdminProxyConfigArgs) ToBareMetalAdminProxyConfigPtrOutput() BareMetalAdminProxyConfigPtrOutput {
	return i.ToBareMetalAdminProxyConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminProxyConfigArgs) ToBareMetalAdminProxyConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminProxyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminProxyConfigOutput).ToBareMetalAdminProxyConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminProxyConfigPtrInput is an input type that accepts BareMetalAdminProxyConfigArgs, BareMetalAdminProxyConfigPtr and BareMetalAdminProxyConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminProxyConfigPtrInput` via:
//
//	        BareMetalAdminProxyConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminProxyConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminProxyConfigPtrOutput() BareMetalAdminProxyConfigPtrOutput
	ToBareMetalAdminProxyConfigPtrOutputWithContext(context.Context) BareMetalAdminProxyConfigPtrOutput
}

type bareMetalAdminProxyConfigPtrType BareMetalAdminProxyConfigArgs

func BareMetalAdminProxyConfigPtr(v *BareMetalAdminProxyConfigArgs) BareMetalAdminProxyConfigPtrInput {
	return (*bareMetalAdminProxyConfigPtrType)(v)
}

func (*bareMetalAdminProxyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminProxyConfig)(nil)).Elem()
}

func (i *bareMetalAdminProxyConfigPtrType) ToBareMetalAdminProxyConfigPtrOutput() BareMetalAdminProxyConfigPtrOutput {
	return i.ToBareMetalAdminProxyConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminProxyConfigPtrType) ToBareMetalAdminProxyConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminProxyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminProxyConfigPtrOutput)
}

// BareMetalAdminProxyConfig specifies the cluster proxy configuration.
type BareMetalAdminProxyConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminProxyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminProxyConfig)(nil)).Elem()
}

func (o BareMetalAdminProxyConfigOutput) ToBareMetalAdminProxyConfigOutput() BareMetalAdminProxyConfigOutput {
	return o
}

func (o BareMetalAdminProxyConfigOutput) ToBareMetalAdminProxyConfigOutputWithContext(ctx context.Context) BareMetalAdminProxyConfigOutput {
	return o
}

func (o BareMetalAdminProxyConfigOutput) ToBareMetalAdminProxyConfigPtrOutput() BareMetalAdminProxyConfigPtrOutput {
	return o.ToBareMetalAdminProxyConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminProxyConfigOutput) ToBareMetalAdminProxyConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminProxyConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminProxyConfig) *BareMetalAdminProxyConfig {
		return &v
	}).(BareMetalAdminProxyConfigPtrOutput)
}

// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
func (o BareMetalAdminProxyConfigOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalAdminProxyConfig) []string { return v.NoProxy }).(pulumi.StringArrayOutput)
}

// Specifies the address of your proxy server. Examples: `http://domain` WARNING: Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
func (o BareMetalAdminProxyConfigOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminProxyConfig) string { return v.Uri }).(pulumi.StringOutput)
}

type BareMetalAdminProxyConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminProxyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminProxyConfig)(nil)).Elem()
}

func (o BareMetalAdminProxyConfigPtrOutput) ToBareMetalAdminProxyConfigPtrOutput() BareMetalAdminProxyConfigPtrOutput {
	return o
}

func (o BareMetalAdminProxyConfigPtrOutput) ToBareMetalAdminProxyConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminProxyConfigPtrOutput {
	return o
}

func (o BareMetalAdminProxyConfigPtrOutput) Elem() BareMetalAdminProxyConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminProxyConfig) BareMetalAdminProxyConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminProxyConfig
		return ret
	}).(BareMetalAdminProxyConfigOutput)
}

// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
func (o BareMetalAdminProxyConfigPtrOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BareMetalAdminProxyConfig) []string {
		if v == nil {
			return nil
		}
		return v.NoProxy
	}).(pulumi.StringArrayOutput)
}

// Specifies the address of your proxy server. Examples: `http://domain` WARNING: Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
func (o BareMetalAdminProxyConfigPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminProxyConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// BareMetalAdminProxyConfig specifies the cluster proxy configuration.
type BareMetalAdminProxyConfigResponse struct {
	// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
	NoProxy []string `pulumi:"noProxy"`
	// Specifies the address of your proxy server. Examples: `http://domain` WARNING: Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
	Uri string `pulumi:"uri"`
}

// BareMetalAdminProxyConfig specifies the cluster proxy configuration.
type BareMetalAdminProxyConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminProxyConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminProxyConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminProxyConfigResponseOutput) ToBareMetalAdminProxyConfigResponseOutput() BareMetalAdminProxyConfigResponseOutput {
	return o
}

func (o BareMetalAdminProxyConfigResponseOutput) ToBareMetalAdminProxyConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminProxyConfigResponseOutput {
	return o
}

// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
func (o BareMetalAdminProxyConfigResponseOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalAdminProxyConfigResponse) []string { return v.NoProxy }).(pulumi.StringArrayOutput)
}

// Specifies the address of your proxy server. Examples: `http://domain` WARNING: Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
func (o BareMetalAdminProxyConfigResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminProxyConfigResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Specifies the security related settings for the bare metal admin cluster.
type BareMetalAdminSecurityConfig struct {
	// Configures user access to the admin cluster.
	Authorization *Authorization `pulumi:"authorization"`
}

// BareMetalAdminSecurityConfigInput is an input type that accepts BareMetalAdminSecurityConfigArgs and BareMetalAdminSecurityConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminSecurityConfigInput` via:
//
//	BareMetalAdminSecurityConfigArgs{...}
type BareMetalAdminSecurityConfigInput interface {
	pulumi.Input

	ToBareMetalAdminSecurityConfigOutput() BareMetalAdminSecurityConfigOutput
	ToBareMetalAdminSecurityConfigOutputWithContext(context.Context) BareMetalAdminSecurityConfigOutput
}

// Specifies the security related settings for the bare metal admin cluster.
type BareMetalAdminSecurityConfigArgs struct {
	// Configures user access to the admin cluster.
	Authorization AuthorizationPtrInput `pulumi:"authorization"`
}

func (BareMetalAdminSecurityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminSecurityConfig)(nil)).Elem()
}

func (i BareMetalAdminSecurityConfigArgs) ToBareMetalAdminSecurityConfigOutput() BareMetalAdminSecurityConfigOutput {
	return i.ToBareMetalAdminSecurityConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminSecurityConfigArgs) ToBareMetalAdminSecurityConfigOutputWithContext(ctx context.Context) BareMetalAdminSecurityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminSecurityConfigOutput)
}

func (i BareMetalAdminSecurityConfigArgs) ToBareMetalAdminSecurityConfigPtrOutput() BareMetalAdminSecurityConfigPtrOutput {
	return i.ToBareMetalAdminSecurityConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminSecurityConfigArgs) ToBareMetalAdminSecurityConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminSecurityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminSecurityConfigOutput).ToBareMetalAdminSecurityConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminSecurityConfigPtrInput is an input type that accepts BareMetalAdminSecurityConfigArgs, BareMetalAdminSecurityConfigPtr and BareMetalAdminSecurityConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminSecurityConfigPtrInput` via:
//
//	        BareMetalAdminSecurityConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminSecurityConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminSecurityConfigPtrOutput() BareMetalAdminSecurityConfigPtrOutput
	ToBareMetalAdminSecurityConfigPtrOutputWithContext(context.Context) BareMetalAdminSecurityConfigPtrOutput
}

type bareMetalAdminSecurityConfigPtrType BareMetalAdminSecurityConfigArgs

func BareMetalAdminSecurityConfigPtr(v *BareMetalAdminSecurityConfigArgs) BareMetalAdminSecurityConfigPtrInput {
	return (*bareMetalAdminSecurityConfigPtrType)(v)
}

func (*bareMetalAdminSecurityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminSecurityConfig)(nil)).Elem()
}

func (i *bareMetalAdminSecurityConfigPtrType) ToBareMetalAdminSecurityConfigPtrOutput() BareMetalAdminSecurityConfigPtrOutput {
	return i.ToBareMetalAdminSecurityConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminSecurityConfigPtrType) ToBareMetalAdminSecurityConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminSecurityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminSecurityConfigPtrOutput)
}

// Specifies the security related settings for the bare metal admin cluster.
type BareMetalAdminSecurityConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminSecurityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminSecurityConfig)(nil)).Elem()
}

func (o BareMetalAdminSecurityConfigOutput) ToBareMetalAdminSecurityConfigOutput() BareMetalAdminSecurityConfigOutput {
	return o
}

func (o BareMetalAdminSecurityConfigOutput) ToBareMetalAdminSecurityConfigOutputWithContext(ctx context.Context) BareMetalAdminSecurityConfigOutput {
	return o
}

func (o BareMetalAdminSecurityConfigOutput) ToBareMetalAdminSecurityConfigPtrOutput() BareMetalAdminSecurityConfigPtrOutput {
	return o.ToBareMetalAdminSecurityConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminSecurityConfigOutput) ToBareMetalAdminSecurityConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminSecurityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminSecurityConfig) *BareMetalAdminSecurityConfig {
		return &v
	}).(BareMetalAdminSecurityConfigPtrOutput)
}

// Configures user access to the admin cluster.
func (o BareMetalAdminSecurityConfigOutput) Authorization() AuthorizationPtrOutput {
	return o.ApplyT(func(v BareMetalAdminSecurityConfig) *Authorization { return v.Authorization }).(AuthorizationPtrOutput)
}

type BareMetalAdminSecurityConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminSecurityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminSecurityConfig)(nil)).Elem()
}

func (o BareMetalAdminSecurityConfigPtrOutput) ToBareMetalAdminSecurityConfigPtrOutput() BareMetalAdminSecurityConfigPtrOutput {
	return o
}

func (o BareMetalAdminSecurityConfigPtrOutput) ToBareMetalAdminSecurityConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminSecurityConfigPtrOutput {
	return o
}

func (o BareMetalAdminSecurityConfigPtrOutput) Elem() BareMetalAdminSecurityConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminSecurityConfig) BareMetalAdminSecurityConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminSecurityConfig
		return ret
	}).(BareMetalAdminSecurityConfigOutput)
}

// Configures user access to the admin cluster.
func (o BareMetalAdminSecurityConfigPtrOutput) Authorization() AuthorizationPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminSecurityConfig) *Authorization {
		if v == nil {
			return nil
		}
		return v.Authorization
	}).(AuthorizationPtrOutput)
}

// Specifies the security related settings for the bare metal admin cluster.
type BareMetalAdminSecurityConfigResponse struct {
	// Configures user access to the admin cluster.
	Authorization AuthorizationResponse `pulumi:"authorization"`
}

// Specifies the security related settings for the bare metal admin cluster.
type BareMetalAdminSecurityConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminSecurityConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminSecurityConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminSecurityConfigResponseOutput) ToBareMetalAdminSecurityConfigResponseOutput() BareMetalAdminSecurityConfigResponseOutput {
	return o
}

func (o BareMetalAdminSecurityConfigResponseOutput) ToBareMetalAdminSecurityConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminSecurityConfigResponseOutput {
	return o
}

// Configures user access to the admin cluster.
func (o BareMetalAdminSecurityConfigResponseOutput) Authorization() AuthorizationResponseOutput {
	return o.ApplyT(func(v BareMetalAdminSecurityConfigResponse) AuthorizationResponse { return v.Authorization }).(AuthorizationResponseOutput)
}

// BareMetalAdminStorageConfig specifies the cluster storage configuration.
type BareMetalAdminStorageConfig struct {
	// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
	LvpNodeMountsConfig BareMetalLvpConfig `pulumi:"lvpNodeMountsConfig"`
	// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
	LvpShareConfig BareMetalLvpShareConfig `pulumi:"lvpShareConfig"`
}

// BareMetalAdminStorageConfigInput is an input type that accepts BareMetalAdminStorageConfigArgs and BareMetalAdminStorageConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminStorageConfigInput` via:
//
//	BareMetalAdminStorageConfigArgs{...}
type BareMetalAdminStorageConfigInput interface {
	pulumi.Input

	ToBareMetalAdminStorageConfigOutput() BareMetalAdminStorageConfigOutput
	ToBareMetalAdminStorageConfigOutputWithContext(context.Context) BareMetalAdminStorageConfigOutput
}

// BareMetalAdminStorageConfig specifies the cluster storage configuration.
type BareMetalAdminStorageConfigArgs struct {
	// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
	LvpNodeMountsConfig BareMetalLvpConfigInput `pulumi:"lvpNodeMountsConfig"`
	// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
	LvpShareConfig BareMetalLvpShareConfigInput `pulumi:"lvpShareConfig"`
}

func (BareMetalAdminStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminStorageConfig)(nil)).Elem()
}

func (i BareMetalAdminStorageConfigArgs) ToBareMetalAdminStorageConfigOutput() BareMetalAdminStorageConfigOutput {
	return i.ToBareMetalAdminStorageConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminStorageConfigArgs) ToBareMetalAdminStorageConfigOutputWithContext(ctx context.Context) BareMetalAdminStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminStorageConfigOutput)
}

func (i BareMetalAdminStorageConfigArgs) ToBareMetalAdminStorageConfigPtrOutput() BareMetalAdminStorageConfigPtrOutput {
	return i.ToBareMetalAdminStorageConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminStorageConfigArgs) ToBareMetalAdminStorageConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminStorageConfigOutput).ToBareMetalAdminStorageConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminStorageConfigPtrInput is an input type that accepts BareMetalAdminStorageConfigArgs, BareMetalAdminStorageConfigPtr and BareMetalAdminStorageConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminStorageConfigPtrInput` via:
//
//	        BareMetalAdminStorageConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminStorageConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminStorageConfigPtrOutput() BareMetalAdminStorageConfigPtrOutput
	ToBareMetalAdminStorageConfigPtrOutputWithContext(context.Context) BareMetalAdminStorageConfigPtrOutput
}

type bareMetalAdminStorageConfigPtrType BareMetalAdminStorageConfigArgs

func BareMetalAdminStorageConfigPtr(v *BareMetalAdminStorageConfigArgs) BareMetalAdminStorageConfigPtrInput {
	return (*bareMetalAdminStorageConfigPtrType)(v)
}

func (*bareMetalAdminStorageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminStorageConfig)(nil)).Elem()
}

func (i *bareMetalAdminStorageConfigPtrType) ToBareMetalAdminStorageConfigPtrOutput() BareMetalAdminStorageConfigPtrOutput {
	return i.ToBareMetalAdminStorageConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminStorageConfigPtrType) ToBareMetalAdminStorageConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminStorageConfigPtrOutput)
}

// BareMetalAdminStorageConfig specifies the cluster storage configuration.
type BareMetalAdminStorageConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminStorageConfig)(nil)).Elem()
}

func (o BareMetalAdminStorageConfigOutput) ToBareMetalAdminStorageConfigOutput() BareMetalAdminStorageConfigOutput {
	return o
}

func (o BareMetalAdminStorageConfigOutput) ToBareMetalAdminStorageConfigOutputWithContext(ctx context.Context) BareMetalAdminStorageConfigOutput {
	return o
}

func (o BareMetalAdminStorageConfigOutput) ToBareMetalAdminStorageConfigPtrOutput() BareMetalAdminStorageConfigPtrOutput {
	return o.ToBareMetalAdminStorageConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminStorageConfigOutput) ToBareMetalAdminStorageConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminStorageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminStorageConfig) *BareMetalAdminStorageConfig {
		return &v
	}).(BareMetalAdminStorageConfigPtrOutput)
}

// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
func (o BareMetalAdminStorageConfigOutput) LvpNodeMountsConfig() BareMetalLvpConfigOutput {
	return o.ApplyT(func(v BareMetalAdminStorageConfig) BareMetalLvpConfig { return v.LvpNodeMountsConfig }).(BareMetalLvpConfigOutput)
}

// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
func (o BareMetalAdminStorageConfigOutput) LvpShareConfig() BareMetalLvpShareConfigOutput {
	return o.ApplyT(func(v BareMetalAdminStorageConfig) BareMetalLvpShareConfig { return v.LvpShareConfig }).(BareMetalLvpShareConfigOutput)
}

type BareMetalAdminStorageConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminStorageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminStorageConfig)(nil)).Elem()
}

func (o BareMetalAdminStorageConfigPtrOutput) ToBareMetalAdminStorageConfigPtrOutput() BareMetalAdminStorageConfigPtrOutput {
	return o
}

func (o BareMetalAdminStorageConfigPtrOutput) ToBareMetalAdminStorageConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminStorageConfigPtrOutput {
	return o
}

func (o BareMetalAdminStorageConfigPtrOutput) Elem() BareMetalAdminStorageConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminStorageConfig) BareMetalAdminStorageConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminStorageConfig
		return ret
	}).(BareMetalAdminStorageConfigOutput)
}

// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
func (o BareMetalAdminStorageConfigPtrOutput) LvpNodeMountsConfig() BareMetalLvpConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminStorageConfig) *BareMetalLvpConfig {
		if v == nil {
			return nil
		}
		return &v.LvpNodeMountsConfig
	}).(BareMetalLvpConfigPtrOutput)
}

// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
func (o BareMetalAdminStorageConfigPtrOutput) LvpShareConfig() BareMetalLvpShareConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminStorageConfig) *BareMetalLvpShareConfig {
		if v == nil {
			return nil
		}
		return &v.LvpShareConfig
	}).(BareMetalLvpShareConfigPtrOutput)
}

// BareMetalAdminStorageConfig specifies the cluster storage configuration.
type BareMetalAdminStorageConfigResponse struct {
	// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
	LvpNodeMountsConfig BareMetalLvpConfigResponse `pulumi:"lvpNodeMountsConfig"`
	// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
	LvpShareConfig BareMetalLvpShareConfigResponse `pulumi:"lvpShareConfig"`
}

// BareMetalAdminStorageConfig specifies the cluster storage configuration.
type BareMetalAdminStorageConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminStorageConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminStorageConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminStorageConfigResponseOutput) ToBareMetalAdminStorageConfigResponseOutput() BareMetalAdminStorageConfigResponseOutput {
	return o
}

func (o BareMetalAdminStorageConfigResponseOutput) ToBareMetalAdminStorageConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminStorageConfigResponseOutput {
	return o
}

// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
func (o BareMetalAdminStorageConfigResponseOutput) LvpNodeMountsConfig() BareMetalLvpConfigResponseOutput {
	return o.ApplyT(func(v BareMetalAdminStorageConfigResponse) BareMetalLvpConfigResponse { return v.LvpNodeMountsConfig }).(BareMetalLvpConfigResponseOutput)
}

// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
func (o BareMetalAdminStorageConfigResponseOutput) LvpShareConfig() BareMetalLvpShareConfigResponseOutput {
	return o.ApplyT(func(v BareMetalAdminStorageConfigResponse) BareMetalLvpShareConfigResponse { return v.LvpShareConfig }).(BareMetalLvpShareConfigResponseOutput)
}

// BareMetalAdminVipConfig for bare metal load balancer configurations.
type BareMetalAdminVipConfig struct {
	// The VIP which you previously set aside for the Kubernetes API of this bare metal admin cluster.
	ControlPlaneVip *string `pulumi:"controlPlaneVip"`
}

// BareMetalAdminVipConfigInput is an input type that accepts BareMetalAdminVipConfigArgs and BareMetalAdminVipConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminVipConfigInput` via:
//
//	BareMetalAdminVipConfigArgs{...}
type BareMetalAdminVipConfigInput interface {
	pulumi.Input

	ToBareMetalAdminVipConfigOutput() BareMetalAdminVipConfigOutput
	ToBareMetalAdminVipConfigOutputWithContext(context.Context) BareMetalAdminVipConfigOutput
}

// BareMetalAdminVipConfig for bare metal load balancer configurations.
type BareMetalAdminVipConfigArgs struct {
	// The VIP which you previously set aside for the Kubernetes API of this bare metal admin cluster.
	ControlPlaneVip pulumi.StringPtrInput `pulumi:"controlPlaneVip"`
}

func (BareMetalAdminVipConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminVipConfig)(nil)).Elem()
}

func (i BareMetalAdminVipConfigArgs) ToBareMetalAdminVipConfigOutput() BareMetalAdminVipConfigOutput {
	return i.ToBareMetalAdminVipConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminVipConfigArgs) ToBareMetalAdminVipConfigOutputWithContext(ctx context.Context) BareMetalAdminVipConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminVipConfigOutput)
}

func (i BareMetalAdminVipConfigArgs) ToBareMetalAdminVipConfigPtrOutput() BareMetalAdminVipConfigPtrOutput {
	return i.ToBareMetalAdminVipConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminVipConfigArgs) ToBareMetalAdminVipConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminVipConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminVipConfigOutput).ToBareMetalAdminVipConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminVipConfigPtrInput is an input type that accepts BareMetalAdminVipConfigArgs, BareMetalAdminVipConfigPtr and BareMetalAdminVipConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminVipConfigPtrInput` via:
//
//	        BareMetalAdminVipConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminVipConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminVipConfigPtrOutput() BareMetalAdminVipConfigPtrOutput
	ToBareMetalAdminVipConfigPtrOutputWithContext(context.Context) BareMetalAdminVipConfigPtrOutput
}

type bareMetalAdminVipConfigPtrType BareMetalAdminVipConfigArgs

func BareMetalAdminVipConfigPtr(v *BareMetalAdminVipConfigArgs) BareMetalAdminVipConfigPtrInput {
	return (*bareMetalAdminVipConfigPtrType)(v)
}

func (*bareMetalAdminVipConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminVipConfig)(nil)).Elem()
}

func (i *bareMetalAdminVipConfigPtrType) ToBareMetalAdminVipConfigPtrOutput() BareMetalAdminVipConfigPtrOutput {
	return i.ToBareMetalAdminVipConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminVipConfigPtrType) ToBareMetalAdminVipConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminVipConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminVipConfigPtrOutput)
}

// BareMetalAdminVipConfig for bare metal load balancer configurations.
type BareMetalAdminVipConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminVipConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminVipConfig)(nil)).Elem()
}

func (o BareMetalAdminVipConfigOutput) ToBareMetalAdminVipConfigOutput() BareMetalAdminVipConfigOutput {
	return o
}

func (o BareMetalAdminVipConfigOutput) ToBareMetalAdminVipConfigOutputWithContext(ctx context.Context) BareMetalAdminVipConfigOutput {
	return o
}

func (o BareMetalAdminVipConfigOutput) ToBareMetalAdminVipConfigPtrOutput() BareMetalAdminVipConfigPtrOutput {
	return o.ToBareMetalAdminVipConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminVipConfigOutput) ToBareMetalAdminVipConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminVipConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminVipConfig) *BareMetalAdminVipConfig {
		return &v
	}).(BareMetalAdminVipConfigPtrOutput)
}

// The VIP which you previously set aside for the Kubernetes API of this bare metal admin cluster.
func (o BareMetalAdminVipConfigOutput) ControlPlaneVip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalAdminVipConfig) *string { return v.ControlPlaneVip }).(pulumi.StringPtrOutput)
}

type BareMetalAdminVipConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminVipConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminVipConfig)(nil)).Elem()
}

func (o BareMetalAdminVipConfigPtrOutput) ToBareMetalAdminVipConfigPtrOutput() BareMetalAdminVipConfigPtrOutput {
	return o
}

func (o BareMetalAdminVipConfigPtrOutput) ToBareMetalAdminVipConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminVipConfigPtrOutput {
	return o
}

func (o BareMetalAdminVipConfigPtrOutput) Elem() BareMetalAdminVipConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminVipConfig) BareMetalAdminVipConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminVipConfig
		return ret
	}).(BareMetalAdminVipConfigOutput)
}

// The VIP which you previously set aside for the Kubernetes API of this bare metal admin cluster.
func (o BareMetalAdminVipConfigPtrOutput) ControlPlaneVip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminVipConfig) *string {
		if v == nil {
			return nil
		}
		return v.ControlPlaneVip
	}).(pulumi.StringPtrOutput)
}

// BareMetalAdminVipConfig for bare metal load balancer configurations.
type BareMetalAdminVipConfigResponse struct {
	// The VIP which you previously set aside for the Kubernetes API of this bare metal admin cluster.
	ControlPlaneVip string `pulumi:"controlPlaneVip"`
}

// BareMetalAdminVipConfig for bare metal load balancer configurations.
type BareMetalAdminVipConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminVipConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminVipConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminVipConfigResponseOutput) ToBareMetalAdminVipConfigResponseOutput() BareMetalAdminVipConfigResponseOutput {
	return o
}

func (o BareMetalAdminVipConfigResponseOutput) ToBareMetalAdminVipConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminVipConfigResponseOutput {
	return o
}

// The VIP which you previously set aside for the Kubernetes API of this bare metal admin cluster.
func (o BareMetalAdminVipConfigResponseOutput) ControlPlaneVip() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminVipConfigResponse) string { return v.ControlPlaneVip }).(pulumi.StringOutput)
}

// BareMetalAdminWorkloadNodeConfig specifies the workload node configurations.
type BareMetalAdminWorkloadNodeConfig struct {
	// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter. By default 110 Pods are created per Node. Upper bound is 250 for both HA and non-HA admin cluster. Lower bound is 64 for non-HA admin cluster and 32 for HA admin cluster.
	MaxPodsPerNode *string `pulumi:"maxPodsPerNode"`
}

// BareMetalAdminWorkloadNodeConfigInput is an input type that accepts BareMetalAdminWorkloadNodeConfigArgs and BareMetalAdminWorkloadNodeConfigOutput values.
// You can construct a concrete instance of `BareMetalAdminWorkloadNodeConfigInput` via:
//
//	BareMetalAdminWorkloadNodeConfigArgs{...}
type BareMetalAdminWorkloadNodeConfigInput interface {
	pulumi.Input

	ToBareMetalAdminWorkloadNodeConfigOutput() BareMetalAdminWorkloadNodeConfigOutput
	ToBareMetalAdminWorkloadNodeConfigOutputWithContext(context.Context) BareMetalAdminWorkloadNodeConfigOutput
}

// BareMetalAdminWorkloadNodeConfig specifies the workload node configurations.
type BareMetalAdminWorkloadNodeConfigArgs struct {
	// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter. By default 110 Pods are created per Node. Upper bound is 250 for both HA and non-HA admin cluster. Lower bound is 64 for non-HA admin cluster and 32 for HA admin cluster.
	MaxPodsPerNode pulumi.StringPtrInput `pulumi:"maxPodsPerNode"`
}

func (BareMetalAdminWorkloadNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminWorkloadNodeConfig)(nil)).Elem()
}

func (i BareMetalAdminWorkloadNodeConfigArgs) ToBareMetalAdminWorkloadNodeConfigOutput() BareMetalAdminWorkloadNodeConfigOutput {
	return i.ToBareMetalAdminWorkloadNodeConfigOutputWithContext(context.Background())
}

func (i BareMetalAdminWorkloadNodeConfigArgs) ToBareMetalAdminWorkloadNodeConfigOutputWithContext(ctx context.Context) BareMetalAdminWorkloadNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminWorkloadNodeConfigOutput)
}

func (i BareMetalAdminWorkloadNodeConfigArgs) ToBareMetalAdminWorkloadNodeConfigPtrOutput() BareMetalAdminWorkloadNodeConfigPtrOutput {
	return i.ToBareMetalAdminWorkloadNodeConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalAdminWorkloadNodeConfigArgs) ToBareMetalAdminWorkloadNodeConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminWorkloadNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminWorkloadNodeConfigOutput).ToBareMetalAdminWorkloadNodeConfigPtrOutputWithContext(ctx)
}

// BareMetalAdminWorkloadNodeConfigPtrInput is an input type that accepts BareMetalAdminWorkloadNodeConfigArgs, BareMetalAdminWorkloadNodeConfigPtr and BareMetalAdminWorkloadNodeConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalAdminWorkloadNodeConfigPtrInput` via:
//
//	        BareMetalAdminWorkloadNodeConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalAdminWorkloadNodeConfigPtrInput interface {
	pulumi.Input

	ToBareMetalAdminWorkloadNodeConfigPtrOutput() BareMetalAdminWorkloadNodeConfigPtrOutput
	ToBareMetalAdminWorkloadNodeConfigPtrOutputWithContext(context.Context) BareMetalAdminWorkloadNodeConfigPtrOutput
}

type bareMetalAdminWorkloadNodeConfigPtrType BareMetalAdminWorkloadNodeConfigArgs

func BareMetalAdminWorkloadNodeConfigPtr(v *BareMetalAdminWorkloadNodeConfigArgs) BareMetalAdminWorkloadNodeConfigPtrInput {
	return (*bareMetalAdminWorkloadNodeConfigPtrType)(v)
}

func (*bareMetalAdminWorkloadNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminWorkloadNodeConfig)(nil)).Elem()
}

func (i *bareMetalAdminWorkloadNodeConfigPtrType) ToBareMetalAdminWorkloadNodeConfigPtrOutput() BareMetalAdminWorkloadNodeConfigPtrOutput {
	return i.ToBareMetalAdminWorkloadNodeConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalAdminWorkloadNodeConfigPtrType) ToBareMetalAdminWorkloadNodeConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminWorkloadNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalAdminWorkloadNodeConfigPtrOutput)
}

// BareMetalAdminWorkloadNodeConfig specifies the workload node configurations.
type BareMetalAdminWorkloadNodeConfigOutput struct{ *pulumi.OutputState }

func (BareMetalAdminWorkloadNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminWorkloadNodeConfig)(nil)).Elem()
}

func (o BareMetalAdminWorkloadNodeConfigOutput) ToBareMetalAdminWorkloadNodeConfigOutput() BareMetalAdminWorkloadNodeConfigOutput {
	return o
}

func (o BareMetalAdminWorkloadNodeConfigOutput) ToBareMetalAdminWorkloadNodeConfigOutputWithContext(ctx context.Context) BareMetalAdminWorkloadNodeConfigOutput {
	return o
}

func (o BareMetalAdminWorkloadNodeConfigOutput) ToBareMetalAdminWorkloadNodeConfigPtrOutput() BareMetalAdminWorkloadNodeConfigPtrOutput {
	return o.ToBareMetalAdminWorkloadNodeConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalAdminWorkloadNodeConfigOutput) ToBareMetalAdminWorkloadNodeConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminWorkloadNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalAdminWorkloadNodeConfig) *BareMetalAdminWorkloadNodeConfig {
		return &v
	}).(BareMetalAdminWorkloadNodeConfigPtrOutput)
}

// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter. By default 110 Pods are created per Node. Upper bound is 250 for both HA and non-HA admin cluster. Lower bound is 64 for non-HA admin cluster and 32 for HA admin cluster.
func (o BareMetalAdminWorkloadNodeConfigOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalAdminWorkloadNodeConfig) *string { return v.MaxPodsPerNode }).(pulumi.StringPtrOutput)
}

type BareMetalAdminWorkloadNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalAdminWorkloadNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalAdminWorkloadNodeConfig)(nil)).Elem()
}

func (o BareMetalAdminWorkloadNodeConfigPtrOutput) ToBareMetalAdminWorkloadNodeConfigPtrOutput() BareMetalAdminWorkloadNodeConfigPtrOutput {
	return o
}

func (o BareMetalAdminWorkloadNodeConfigPtrOutput) ToBareMetalAdminWorkloadNodeConfigPtrOutputWithContext(ctx context.Context) BareMetalAdminWorkloadNodeConfigPtrOutput {
	return o
}

func (o BareMetalAdminWorkloadNodeConfigPtrOutput) Elem() BareMetalAdminWorkloadNodeConfigOutput {
	return o.ApplyT(func(v *BareMetalAdminWorkloadNodeConfig) BareMetalAdminWorkloadNodeConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalAdminWorkloadNodeConfig
		return ret
	}).(BareMetalAdminWorkloadNodeConfigOutput)
}

// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter. By default 110 Pods are created per Node. Upper bound is 250 for both HA and non-HA admin cluster. Lower bound is 64 for non-HA admin cluster and 32 for HA admin cluster.
func (o BareMetalAdminWorkloadNodeConfigPtrOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalAdminWorkloadNodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxPodsPerNode
	}).(pulumi.StringPtrOutput)
}

// BareMetalAdminWorkloadNodeConfig specifies the workload node configurations.
type BareMetalAdminWorkloadNodeConfigResponse struct {
	// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter. By default 110 Pods are created per Node. Upper bound is 250 for both HA and non-HA admin cluster. Lower bound is 64 for non-HA admin cluster and 32 for HA admin cluster.
	MaxPodsPerNode string `pulumi:"maxPodsPerNode"`
}

// BareMetalAdminWorkloadNodeConfig specifies the workload node configurations.
type BareMetalAdminWorkloadNodeConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalAdminWorkloadNodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalAdminWorkloadNodeConfigResponse)(nil)).Elem()
}

func (o BareMetalAdminWorkloadNodeConfigResponseOutput) ToBareMetalAdminWorkloadNodeConfigResponseOutput() BareMetalAdminWorkloadNodeConfigResponseOutput {
	return o
}

func (o BareMetalAdminWorkloadNodeConfigResponseOutput) ToBareMetalAdminWorkloadNodeConfigResponseOutputWithContext(ctx context.Context) BareMetalAdminWorkloadNodeConfigResponseOutput {
	return o
}

// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter. By default 110 Pods are created per Node. Upper bound is 250 for both HA and non-HA admin cluster. Lower bound is 64 for non-HA admin cluster and 32 for HA admin cluster.
func (o BareMetalAdminWorkloadNodeConfigResponseOutput) MaxPodsPerNode() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalAdminWorkloadNodeConfigResponse) string { return v.MaxPodsPerNode }).(pulumi.StringOutput)
}

// Represents an arg name->value pair. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
type BareMetalApiServerArgument struct {
	// The argument name as it appears on the API Server command line, make sure to remove the leading dashes.
	Argument string `pulumi:"argument"`
	// The value of the arg as it will be passed to the API Server command line.
	Value string `pulumi:"value"`
}

// BareMetalApiServerArgumentInput is an input type that accepts BareMetalApiServerArgumentArgs and BareMetalApiServerArgumentOutput values.
// You can construct a concrete instance of `BareMetalApiServerArgumentInput` via:
//
//	BareMetalApiServerArgumentArgs{...}
type BareMetalApiServerArgumentInput interface {
	pulumi.Input

	ToBareMetalApiServerArgumentOutput() BareMetalApiServerArgumentOutput
	ToBareMetalApiServerArgumentOutputWithContext(context.Context) BareMetalApiServerArgumentOutput
}

// Represents an arg name->value pair. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
type BareMetalApiServerArgumentArgs struct {
	// The argument name as it appears on the API Server command line, make sure to remove the leading dashes.
	Argument pulumi.StringInput `pulumi:"argument"`
	// The value of the arg as it will be passed to the API Server command line.
	Value pulumi.StringInput `pulumi:"value"`
}

func (BareMetalApiServerArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalApiServerArgument)(nil)).Elem()
}

func (i BareMetalApiServerArgumentArgs) ToBareMetalApiServerArgumentOutput() BareMetalApiServerArgumentOutput {
	return i.ToBareMetalApiServerArgumentOutputWithContext(context.Background())
}

func (i BareMetalApiServerArgumentArgs) ToBareMetalApiServerArgumentOutputWithContext(ctx context.Context) BareMetalApiServerArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalApiServerArgumentOutput)
}

// BareMetalApiServerArgumentArrayInput is an input type that accepts BareMetalApiServerArgumentArray and BareMetalApiServerArgumentArrayOutput values.
// You can construct a concrete instance of `BareMetalApiServerArgumentArrayInput` via:
//
//	BareMetalApiServerArgumentArray{ BareMetalApiServerArgumentArgs{...} }
type BareMetalApiServerArgumentArrayInput interface {
	pulumi.Input

	ToBareMetalApiServerArgumentArrayOutput() BareMetalApiServerArgumentArrayOutput
	ToBareMetalApiServerArgumentArrayOutputWithContext(context.Context) BareMetalApiServerArgumentArrayOutput
}

type BareMetalApiServerArgumentArray []BareMetalApiServerArgumentInput

func (BareMetalApiServerArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalApiServerArgument)(nil)).Elem()
}

func (i BareMetalApiServerArgumentArray) ToBareMetalApiServerArgumentArrayOutput() BareMetalApiServerArgumentArrayOutput {
	return i.ToBareMetalApiServerArgumentArrayOutputWithContext(context.Background())
}

func (i BareMetalApiServerArgumentArray) ToBareMetalApiServerArgumentArrayOutputWithContext(ctx context.Context) BareMetalApiServerArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalApiServerArgumentArrayOutput)
}

// Represents an arg name->value pair. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
type BareMetalApiServerArgumentOutput struct{ *pulumi.OutputState }

func (BareMetalApiServerArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalApiServerArgument)(nil)).Elem()
}

func (o BareMetalApiServerArgumentOutput) ToBareMetalApiServerArgumentOutput() BareMetalApiServerArgumentOutput {
	return o
}

func (o BareMetalApiServerArgumentOutput) ToBareMetalApiServerArgumentOutputWithContext(ctx context.Context) BareMetalApiServerArgumentOutput {
	return o
}

// The argument name as it appears on the API Server command line, make sure to remove the leading dashes.
func (o BareMetalApiServerArgumentOutput) Argument() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalApiServerArgument) string { return v.Argument }).(pulumi.StringOutput)
}

// The value of the arg as it will be passed to the API Server command line.
func (o BareMetalApiServerArgumentOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalApiServerArgument) string { return v.Value }).(pulumi.StringOutput)
}

type BareMetalApiServerArgumentArrayOutput struct{ *pulumi.OutputState }

func (BareMetalApiServerArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalApiServerArgument)(nil)).Elem()
}

func (o BareMetalApiServerArgumentArrayOutput) ToBareMetalApiServerArgumentArrayOutput() BareMetalApiServerArgumentArrayOutput {
	return o
}

func (o BareMetalApiServerArgumentArrayOutput) ToBareMetalApiServerArgumentArrayOutputWithContext(ctx context.Context) BareMetalApiServerArgumentArrayOutput {
	return o
}

func (o BareMetalApiServerArgumentArrayOutput) Index(i pulumi.IntInput) BareMetalApiServerArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalApiServerArgument {
		return vs[0].([]BareMetalApiServerArgument)[vs[1].(int)]
	}).(BareMetalApiServerArgumentOutput)
}

// Represents an arg name->value pair. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
type BareMetalApiServerArgumentResponse struct {
	// The argument name as it appears on the API Server command line, make sure to remove the leading dashes.
	Argument string `pulumi:"argument"`
	// The value of the arg as it will be passed to the API Server command line.
	Value string `pulumi:"value"`
}

// Represents an arg name->value pair. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
type BareMetalApiServerArgumentResponseOutput struct{ *pulumi.OutputState }

func (BareMetalApiServerArgumentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalApiServerArgumentResponse)(nil)).Elem()
}

func (o BareMetalApiServerArgumentResponseOutput) ToBareMetalApiServerArgumentResponseOutput() BareMetalApiServerArgumentResponseOutput {
	return o
}

func (o BareMetalApiServerArgumentResponseOutput) ToBareMetalApiServerArgumentResponseOutputWithContext(ctx context.Context) BareMetalApiServerArgumentResponseOutput {
	return o
}

// The argument name as it appears on the API Server command line, make sure to remove the leading dashes.
func (o BareMetalApiServerArgumentResponseOutput) Argument() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalApiServerArgumentResponse) string { return v.Argument }).(pulumi.StringOutput)
}

// The value of the arg as it will be passed to the API Server command line.
func (o BareMetalApiServerArgumentResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalApiServerArgumentResponse) string { return v.Value }).(pulumi.StringOutput)
}

type BareMetalApiServerArgumentResponseArrayOutput struct{ *pulumi.OutputState }

func (BareMetalApiServerArgumentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalApiServerArgumentResponse)(nil)).Elem()
}

func (o BareMetalApiServerArgumentResponseArrayOutput) ToBareMetalApiServerArgumentResponseArrayOutput() BareMetalApiServerArgumentResponseArrayOutput {
	return o
}

func (o BareMetalApiServerArgumentResponseArrayOutput) ToBareMetalApiServerArgumentResponseArrayOutputWithContext(ctx context.Context) BareMetalApiServerArgumentResponseArrayOutput {
	return o
}

func (o BareMetalApiServerArgumentResponseArrayOutput) Index(i pulumi.IntInput) BareMetalApiServerArgumentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalApiServerArgumentResponse {
		return vs[0].([]BareMetalApiServerArgumentResponse)[vs[1].(int)]
	}).(BareMetalApiServerArgumentResponseOutput)
}

// BareMetalBgpLbConfig represents configuration parameters for a Border Gateway Protocol (BGP) load balancer.
type BareMetalBgpLbConfig struct {
	// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
	AddressPools []BareMetalLoadBalancerAddressPool `pulumi:"addressPools"`
	// BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.
	Asn string `pulumi:"asn"`
	// The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.
	BgpPeerConfigs []BareMetalBgpPeerConfig `pulumi:"bgpPeerConfigs"`
	// Specifies the node pool running data plane load balancing. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used for data plane load balancing.
	LoadBalancerNodePoolConfig *BareMetalLoadBalancerNodePoolConfig `pulumi:"loadBalancerNodePoolConfig"`
}

// BareMetalBgpLbConfigInput is an input type that accepts BareMetalBgpLbConfigArgs and BareMetalBgpLbConfigOutput values.
// You can construct a concrete instance of `BareMetalBgpLbConfigInput` via:
//
//	BareMetalBgpLbConfigArgs{...}
type BareMetalBgpLbConfigInput interface {
	pulumi.Input

	ToBareMetalBgpLbConfigOutput() BareMetalBgpLbConfigOutput
	ToBareMetalBgpLbConfigOutputWithContext(context.Context) BareMetalBgpLbConfigOutput
}

// BareMetalBgpLbConfig represents configuration parameters for a Border Gateway Protocol (BGP) load balancer.
type BareMetalBgpLbConfigArgs struct {
	// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
	AddressPools BareMetalLoadBalancerAddressPoolArrayInput `pulumi:"addressPools"`
	// BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.
	Asn pulumi.StringInput `pulumi:"asn"`
	// The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.
	BgpPeerConfigs BareMetalBgpPeerConfigArrayInput `pulumi:"bgpPeerConfigs"`
	// Specifies the node pool running data plane load balancing. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used for data plane load balancing.
	LoadBalancerNodePoolConfig BareMetalLoadBalancerNodePoolConfigPtrInput `pulumi:"loadBalancerNodePoolConfig"`
}

func (BareMetalBgpLbConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalBgpLbConfig)(nil)).Elem()
}

func (i BareMetalBgpLbConfigArgs) ToBareMetalBgpLbConfigOutput() BareMetalBgpLbConfigOutput {
	return i.ToBareMetalBgpLbConfigOutputWithContext(context.Background())
}

func (i BareMetalBgpLbConfigArgs) ToBareMetalBgpLbConfigOutputWithContext(ctx context.Context) BareMetalBgpLbConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalBgpLbConfigOutput)
}

func (i BareMetalBgpLbConfigArgs) ToBareMetalBgpLbConfigPtrOutput() BareMetalBgpLbConfigPtrOutput {
	return i.ToBareMetalBgpLbConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalBgpLbConfigArgs) ToBareMetalBgpLbConfigPtrOutputWithContext(ctx context.Context) BareMetalBgpLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalBgpLbConfigOutput).ToBareMetalBgpLbConfigPtrOutputWithContext(ctx)
}

// BareMetalBgpLbConfigPtrInput is an input type that accepts BareMetalBgpLbConfigArgs, BareMetalBgpLbConfigPtr and BareMetalBgpLbConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalBgpLbConfigPtrInput` via:
//
//	        BareMetalBgpLbConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalBgpLbConfigPtrInput interface {
	pulumi.Input

	ToBareMetalBgpLbConfigPtrOutput() BareMetalBgpLbConfigPtrOutput
	ToBareMetalBgpLbConfigPtrOutputWithContext(context.Context) BareMetalBgpLbConfigPtrOutput
}

type bareMetalBgpLbConfigPtrType BareMetalBgpLbConfigArgs

func BareMetalBgpLbConfigPtr(v *BareMetalBgpLbConfigArgs) BareMetalBgpLbConfigPtrInput {
	return (*bareMetalBgpLbConfigPtrType)(v)
}

func (*bareMetalBgpLbConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalBgpLbConfig)(nil)).Elem()
}

func (i *bareMetalBgpLbConfigPtrType) ToBareMetalBgpLbConfigPtrOutput() BareMetalBgpLbConfigPtrOutput {
	return i.ToBareMetalBgpLbConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalBgpLbConfigPtrType) ToBareMetalBgpLbConfigPtrOutputWithContext(ctx context.Context) BareMetalBgpLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalBgpLbConfigPtrOutput)
}

// BareMetalBgpLbConfig represents configuration parameters for a Border Gateway Protocol (BGP) load balancer.
type BareMetalBgpLbConfigOutput struct{ *pulumi.OutputState }

func (BareMetalBgpLbConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalBgpLbConfig)(nil)).Elem()
}

func (o BareMetalBgpLbConfigOutput) ToBareMetalBgpLbConfigOutput() BareMetalBgpLbConfigOutput {
	return o
}

func (o BareMetalBgpLbConfigOutput) ToBareMetalBgpLbConfigOutputWithContext(ctx context.Context) BareMetalBgpLbConfigOutput {
	return o
}

func (o BareMetalBgpLbConfigOutput) ToBareMetalBgpLbConfigPtrOutput() BareMetalBgpLbConfigPtrOutput {
	return o.ToBareMetalBgpLbConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalBgpLbConfigOutput) ToBareMetalBgpLbConfigPtrOutputWithContext(ctx context.Context) BareMetalBgpLbConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalBgpLbConfig) *BareMetalBgpLbConfig {
		return &v
	}).(BareMetalBgpLbConfigPtrOutput)
}

// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
func (o BareMetalBgpLbConfigOutput) AddressPools() BareMetalLoadBalancerAddressPoolArrayOutput {
	return o.ApplyT(func(v BareMetalBgpLbConfig) []BareMetalLoadBalancerAddressPool { return v.AddressPools }).(BareMetalLoadBalancerAddressPoolArrayOutput)
}

// BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.
func (o BareMetalBgpLbConfigOutput) Asn() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalBgpLbConfig) string { return v.Asn }).(pulumi.StringOutput)
}

// The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.
func (o BareMetalBgpLbConfigOutput) BgpPeerConfigs() BareMetalBgpPeerConfigArrayOutput {
	return o.ApplyT(func(v BareMetalBgpLbConfig) []BareMetalBgpPeerConfig { return v.BgpPeerConfigs }).(BareMetalBgpPeerConfigArrayOutput)
}

// Specifies the node pool running data plane load balancing. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used for data plane load balancing.
func (o BareMetalBgpLbConfigOutput) LoadBalancerNodePoolConfig() BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return o.ApplyT(func(v BareMetalBgpLbConfig) *BareMetalLoadBalancerNodePoolConfig { return v.LoadBalancerNodePoolConfig }).(BareMetalLoadBalancerNodePoolConfigPtrOutput)
}

type BareMetalBgpLbConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalBgpLbConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalBgpLbConfig)(nil)).Elem()
}

func (o BareMetalBgpLbConfigPtrOutput) ToBareMetalBgpLbConfigPtrOutput() BareMetalBgpLbConfigPtrOutput {
	return o
}

func (o BareMetalBgpLbConfigPtrOutput) ToBareMetalBgpLbConfigPtrOutputWithContext(ctx context.Context) BareMetalBgpLbConfigPtrOutput {
	return o
}

func (o BareMetalBgpLbConfigPtrOutput) Elem() BareMetalBgpLbConfigOutput {
	return o.ApplyT(func(v *BareMetalBgpLbConfig) BareMetalBgpLbConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalBgpLbConfig
		return ret
	}).(BareMetalBgpLbConfigOutput)
}

// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
func (o BareMetalBgpLbConfigPtrOutput) AddressPools() BareMetalLoadBalancerAddressPoolArrayOutput {
	return o.ApplyT(func(v *BareMetalBgpLbConfig) []BareMetalLoadBalancerAddressPool {
		if v == nil {
			return nil
		}
		return v.AddressPools
	}).(BareMetalLoadBalancerAddressPoolArrayOutput)
}

// BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.
func (o BareMetalBgpLbConfigPtrOutput) Asn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalBgpLbConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Asn
	}).(pulumi.StringPtrOutput)
}

// The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.
func (o BareMetalBgpLbConfigPtrOutput) BgpPeerConfigs() BareMetalBgpPeerConfigArrayOutput {
	return o.ApplyT(func(v *BareMetalBgpLbConfig) []BareMetalBgpPeerConfig {
		if v == nil {
			return nil
		}
		return v.BgpPeerConfigs
	}).(BareMetalBgpPeerConfigArrayOutput)
}

// Specifies the node pool running data plane load balancing. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used for data plane load balancing.
func (o BareMetalBgpLbConfigPtrOutput) LoadBalancerNodePoolConfig() BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalBgpLbConfig) *BareMetalLoadBalancerNodePoolConfig {
		if v == nil {
			return nil
		}
		return v.LoadBalancerNodePoolConfig
	}).(BareMetalLoadBalancerNodePoolConfigPtrOutput)
}

// BareMetalBgpLbConfig represents configuration parameters for a Border Gateway Protocol (BGP) load balancer.
type BareMetalBgpLbConfigResponse struct {
	// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
	AddressPools []BareMetalLoadBalancerAddressPoolResponse `pulumi:"addressPools"`
	// BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.
	Asn string `pulumi:"asn"`
	// The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.
	BgpPeerConfigs []BareMetalBgpPeerConfigResponse `pulumi:"bgpPeerConfigs"`
	// Specifies the node pool running data plane load balancing. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used for data plane load balancing.
	LoadBalancerNodePoolConfig BareMetalLoadBalancerNodePoolConfigResponse `pulumi:"loadBalancerNodePoolConfig"`
}

// BareMetalBgpLbConfig represents configuration parameters for a Border Gateway Protocol (BGP) load balancer.
type BareMetalBgpLbConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalBgpLbConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalBgpLbConfigResponse)(nil)).Elem()
}

func (o BareMetalBgpLbConfigResponseOutput) ToBareMetalBgpLbConfigResponseOutput() BareMetalBgpLbConfigResponseOutput {
	return o
}

func (o BareMetalBgpLbConfigResponseOutput) ToBareMetalBgpLbConfigResponseOutputWithContext(ctx context.Context) BareMetalBgpLbConfigResponseOutput {
	return o
}

// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
func (o BareMetalBgpLbConfigResponseOutput) AddressPools() BareMetalLoadBalancerAddressPoolResponseArrayOutput {
	return o.ApplyT(func(v BareMetalBgpLbConfigResponse) []BareMetalLoadBalancerAddressPoolResponse { return v.AddressPools }).(BareMetalLoadBalancerAddressPoolResponseArrayOutput)
}

// BGP autonomous system number (ASN) of the cluster. This field can be updated after cluster creation.
func (o BareMetalBgpLbConfigResponseOutput) Asn() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalBgpLbConfigResponse) string { return v.Asn }).(pulumi.StringOutput)
}

// The list of BGP peers that the cluster will connect to. At least one peer must be configured for each control plane node. Control plane nodes will connect to these peers to advertise the control plane VIP. The Services load balancer also uses these peers by default. This field can be updated after cluster creation.
func (o BareMetalBgpLbConfigResponseOutput) BgpPeerConfigs() BareMetalBgpPeerConfigResponseArrayOutput {
	return o.ApplyT(func(v BareMetalBgpLbConfigResponse) []BareMetalBgpPeerConfigResponse { return v.BgpPeerConfigs }).(BareMetalBgpPeerConfigResponseArrayOutput)
}

// Specifies the node pool running data plane load balancing. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used for data plane load balancing.
func (o BareMetalBgpLbConfigResponseOutput) LoadBalancerNodePoolConfig() BareMetalLoadBalancerNodePoolConfigResponseOutput {
	return o.ApplyT(func(v BareMetalBgpLbConfigResponse) BareMetalLoadBalancerNodePoolConfigResponse {
		return v.LoadBalancerNodePoolConfig
	}).(BareMetalLoadBalancerNodePoolConfigResponseOutput)
}

// BareMetalBgpPeerConfig represents configuration parameters for a Border Gateway Protocol (BGP) peer.
type BareMetalBgpPeerConfig struct {
	// BGP autonomous system number (ASN) for the network that contains the external peer device.
	Asn string `pulumi:"asn"`
	// The IP address of the control plane node that connects to the external peer. If you don't specify any control plane nodes, all control plane nodes can connect to the external peer. If you specify one or more IP addresses, only the nodes specified participate in peering sessions.
	ControlPlaneNodes []string `pulumi:"controlPlaneNodes"`
	// The IP address of the external peer device.
	IpAddress string `pulumi:"ipAddress"`
}

// BareMetalBgpPeerConfigInput is an input type that accepts BareMetalBgpPeerConfigArgs and BareMetalBgpPeerConfigOutput values.
// You can construct a concrete instance of `BareMetalBgpPeerConfigInput` via:
//
//	BareMetalBgpPeerConfigArgs{...}
type BareMetalBgpPeerConfigInput interface {
	pulumi.Input

	ToBareMetalBgpPeerConfigOutput() BareMetalBgpPeerConfigOutput
	ToBareMetalBgpPeerConfigOutputWithContext(context.Context) BareMetalBgpPeerConfigOutput
}

// BareMetalBgpPeerConfig represents configuration parameters for a Border Gateway Protocol (BGP) peer.
type BareMetalBgpPeerConfigArgs struct {
	// BGP autonomous system number (ASN) for the network that contains the external peer device.
	Asn pulumi.StringInput `pulumi:"asn"`
	// The IP address of the control plane node that connects to the external peer. If you don't specify any control plane nodes, all control plane nodes can connect to the external peer. If you specify one or more IP addresses, only the nodes specified participate in peering sessions.
	ControlPlaneNodes pulumi.StringArrayInput `pulumi:"controlPlaneNodes"`
	// The IP address of the external peer device.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
}

func (BareMetalBgpPeerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalBgpPeerConfig)(nil)).Elem()
}

func (i BareMetalBgpPeerConfigArgs) ToBareMetalBgpPeerConfigOutput() BareMetalBgpPeerConfigOutput {
	return i.ToBareMetalBgpPeerConfigOutputWithContext(context.Background())
}

func (i BareMetalBgpPeerConfigArgs) ToBareMetalBgpPeerConfigOutputWithContext(ctx context.Context) BareMetalBgpPeerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalBgpPeerConfigOutput)
}

// BareMetalBgpPeerConfigArrayInput is an input type that accepts BareMetalBgpPeerConfigArray and BareMetalBgpPeerConfigArrayOutput values.
// You can construct a concrete instance of `BareMetalBgpPeerConfigArrayInput` via:
//
//	BareMetalBgpPeerConfigArray{ BareMetalBgpPeerConfigArgs{...} }
type BareMetalBgpPeerConfigArrayInput interface {
	pulumi.Input

	ToBareMetalBgpPeerConfigArrayOutput() BareMetalBgpPeerConfigArrayOutput
	ToBareMetalBgpPeerConfigArrayOutputWithContext(context.Context) BareMetalBgpPeerConfigArrayOutput
}

type BareMetalBgpPeerConfigArray []BareMetalBgpPeerConfigInput

func (BareMetalBgpPeerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalBgpPeerConfig)(nil)).Elem()
}

func (i BareMetalBgpPeerConfigArray) ToBareMetalBgpPeerConfigArrayOutput() BareMetalBgpPeerConfigArrayOutput {
	return i.ToBareMetalBgpPeerConfigArrayOutputWithContext(context.Background())
}

func (i BareMetalBgpPeerConfigArray) ToBareMetalBgpPeerConfigArrayOutputWithContext(ctx context.Context) BareMetalBgpPeerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalBgpPeerConfigArrayOutput)
}

// BareMetalBgpPeerConfig represents configuration parameters for a Border Gateway Protocol (BGP) peer.
type BareMetalBgpPeerConfigOutput struct{ *pulumi.OutputState }

func (BareMetalBgpPeerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalBgpPeerConfig)(nil)).Elem()
}

func (o BareMetalBgpPeerConfigOutput) ToBareMetalBgpPeerConfigOutput() BareMetalBgpPeerConfigOutput {
	return o
}

func (o BareMetalBgpPeerConfigOutput) ToBareMetalBgpPeerConfigOutputWithContext(ctx context.Context) BareMetalBgpPeerConfigOutput {
	return o
}

// BGP autonomous system number (ASN) for the network that contains the external peer device.
func (o BareMetalBgpPeerConfigOutput) Asn() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalBgpPeerConfig) string { return v.Asn }).(pulumi.StringOutput)
}

// The IP address of the control plane node that connects to the external peer. If you don't specify any control plane nodes, all control plane nodes can connect to the external peer. If you specify one or more IP addresses, only the nodes specified participate in peering sessions.
func (o BareMetalBgpPeerConfigOutput) ControlPlaneNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalBgpPeerConfig) []string { return v.ControlPlaneNodes }).(pulumi.StringArrayOutput)
}

// The IP address of the external peer device.
func (o BareMetalBgpPeerConfigOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalBgpPeerConfig) string { return v.IpAddress }).(pulumi.StringOutput)
}

type BareMetalBgpPeerConfigArrayOutput struct{ *pulumi.OutputState }

func (BareMetalBgpPeerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalBgpPeerConfig)(nil)).Elem()
}

func (o BareMetalBgpPeerConfigArrayOutput) ToBareMetalBgpPeerConfigArrayOutput() BareMetalBgpPeerConfigArrayOutput {
	return o
}

func (o BareMetalBgpPeerConfigArrayOutput) ToBareMetalBgpPeerConfigArrayOutputWithContext(ctx context.Context) BareMetalBgpPeerConfigArrayOutput {
	return o
}

func (o BareMetalBgpPeerConfigArrayOutput) Index(i pulumi.IntInput) BareMetalBgpPeerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalBgpPeerConfig {
		return vs[0].([]BareMetalBgpPeerConfig)[vs[1].(int)]
	}).(BareMetalBgpPeerConfigOutput)
}

// BareMetalBgpPeerConfig represents configuration parameters for a Border Gateway Protocol (BGP) peer.
type BareMetalBgpPeerConfigResponse struct {
	// BGP autonomous system number (ASN) for the network that contains the external peer device.
	Asn string `pulumi:"asn"`
	// The IP address of the control plane node that connects to the external peer. If you don't specify any control plane nodes, all control plane nodes can connect to the external peer. If you specify one or more IP addresses, only the nodes specified participate in peering sessions.
	ControlPlaneNodes []string `pulumi:"controlPlaneNodes"`
	// The IP address of the external peer device.
	IpAddress string `pulumi:"ipAddress"`
}

// BareMetalBgpPeerConfig represents configuration parameters for a Border Gateway Protocol (BGP) peer.
type BareMetalBgpPeerConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalBgpPeerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalBgpPeerConfigResponse)(nil)).Elem()
}

func (o BareMetalBgpPeerConfigResponseOutput) ToBareMetalBgpPeerConfigResponseOutput() BareMetalBgpPeerConfigResponseOutput {
	return o
}

func (o BareMetalBgpPeerConfigResponseOutput) ToBareMetalBgpPeerConfigResponseOutputWithContext(ctx context.Context) BareMetalBgpPeerConfigResponseOutput {
	return o
}

// BGP autonomous system number (ASN) for the network that contains the external peer device.
func (o BareMetalBgpPeerConfigResponseOutput) Asn() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalBgpPeerConfigResponse) string { return v.Asn }).(pulumi.StringOutput)
}

// The IP address of the control plane node that connects to the external peer. If you don't specify any control plane nodes, all control plane nodes can connect to the external peer. If you specify one or more IP addresses, only the nodes specified participate in peering sessions.
func (o BareMetalBgpPeerConfigResponseOutput) ControlPlaneNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalBgpPeerConfigResponse) []string { return v.ControlPlaneNodes }).(pulumi.StringArrayOutput)
}

// The IP address of the external peer device.
func (o BareMetalBgpPeerConfigResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalBgpPeerConfigResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

type BareMetalBgpPeerConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (BareMetalBgpPeerConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalBgpPeerConfigResponse)(nil)).Elem()
}

func (o BareMetalBgpPeerConfigResponseArrayOutput) ToBareMetalBgpPeerConfigResponseArrayOutput() BareMetalBgpPeerConfigResponseArrayOutput {
	return o
}

func (o BareMetalBgpPeerConfigResponseArrayOutput) ToBareMetalBgpPeerConfigResponseArrayOutputWithContext(ctx context.Context) BareMetalBgpPeerConfigResponseArrayOutput {
	return o
}

func (o BareMetalBgpPeerConfigResponseArrayOutput) Index(i pulumi.IntInput) BareMetalBgpPeerConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalBgpPeerConfigResponse {
		return vs[0].([]BareMetalBgpPeerConfigResponse)[vs[1].(int)]
	}).(BareMetalBgpPeerConfigResponseOutput)
}

// Specifies the bare metal user cluster's observability infrastructure.
type BareMetalClusterOperationsConfig struct {
	// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
	EnableApplicationLogs *bool `pulumi:"enableApplicationLogs"`
}

// BareMetalClusterOperationsConfigInput is an input type that accepts BareMetalClusterOperationsConfigArgs and BareMetalClusterOperationsConfigOutput values.
// You can construct a concrete instance of `BareMetalClusterOperationsConfigInput` via:
//
//	BareMetalClusterOperationsConfigArgs{...}
type BareMetalClusterOperationsConfigInput interface {
	pulumi.Input

	ToBareMetalClusterOperationsConfigOutput() BareMetalClusterOperationsConfigOutput
	ToBareMetalClusterOperationsConfigOutputWithContext(context.Context) BareMetalClusterOperationsConfigOutput
}

// Specifies the bare metal user cluster's observability infrastructure.
type BareMetalClusterOperationsConfigArgs struct {
	// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
	EnableApplicationLogs pulumi.BoolPtrInput `pulumi:"enableApplicationLogs"`
}

func (BareMetalClusterOperationsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalClusterOperationsConfig)(nil)).Elem()
}

func (i BareMetalClusterOperationsConfigArgs) ToBareMetalClusterOperationsConfigOutput() BareMetalClusterOperationsConfigOutput {
	return i.ToBareMetalClusterOperationsConfigOutputWithContext(context.Background())
}

func (i BareMetalClusterOperationsConfigArgs) ToBareMetalClusterOperationsConfigOutputWithContext(ctx context.Context) BareMetalClusterOperationsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalClusterOperationsConfigOutput)
}

func (i BareMetalClusterOperationsConfigArgs) ToBareMetalClusterOperationsConfigPtrOutput() BareMetalClusterOperationsConfigPtrOutput {
	return i.ToBareMetalClusterOperationsConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalClusterOperationsConfigArgs) ToBareMetalClusterOperationsConfigPtrOutputWithContext(ctx context.Context) BareMetalClusterOperationsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalClusterOperationsConfigOutput).ToBareMetalClusterOperationsConfigPtrOutputWithContext(ctx)
}

// BareMetalClusterOperationsConfigPtrInput is an input type that accepts BareMetalClusterOperationsConfigArgs, BareMetalClusterOperationsConfigPtr and BareMetalClusterOperationsConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalClusterOperationsConfigPtrInput` via:
//
//	        BareMetalClusterOperationsConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalClusterOperationsConfigPtrInput interface {
	pulumi.Input

	ToBareMetalClusterOperationsConfigPtrOutput() BareMetalClusterOperationsConfigPtrOutput
	ToBareMetalClusterOperationsConfigPtrOutputWithContext(context.Context) BareMetalClusterOperationsConfigPtrOutput
}

type bareMetalClusterOperationsConfigPtrType BareMetalClusterOperationsConfigArgs

func BareMetalClusterOperationsConfigPtr(v *BareMetalClusterOperationsConfigArgs) BareMetalClusterOperationsConfigPtrInput {
	return (*bareMetalClusterOperationsConfigPtrType)(v)
}

func (*bareMetalClusterOperationsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalClusterOperationsConfig)(nil)).Elem()
}

func (i *bareMetalClusterOperationsConfigPtrType) ToBareMetalClusterOperationsConfigPtrOutput() BareMetalClusterOperationsConfigPtrOutput {
	return i.ToBareMetalClusterOperationsConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalClusterOperationsConfigPtrType) ToBareMetalClusterOperationsConfigPtrOutputWithContext(ctx context.Context) BareMetalClusterOperationsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalClusterOperationsConfigPtrOutput)
}

// Specifies the bare metal user cluster's observability infrastructure.
type BareMetalClusterOperationsConfigOutput struct{ *pulumi.OutputState }

func (BareMetalClusterOperationsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalClusterOperationsConfig)(nil)).Elem()
}

func (o BareMetalClusterOperationsConfigOutput) ToBareMetalClusterOperationsConfigOutput() BareMetalClusterOperationsConfigOutput {
	return o
}

func (o BareMetalClusterOperationsConfigOutput) ToBareMetalClusterOperationsConfigOutputWithContext(ctx context.Context) BareMetalClusterOperationsConfigOutput {
	return o
}

func (o BareMetalClusterOperationsConfigOutput) ToBareMetalClusterOperationsConfigPtrOutput() BareMetalClusterOperationsConfigPtrOutput {
	return o.ToBareMetalClusterOperationsConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalClusterOperationsConfigOutput) ToBareMetalClusterOperationsConfigPtrOutputWithContext(ctx context.Context) BareMetalClusterOperationsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalClusterOperationsConfig) *BareMetalClusterOperationsConfig {
		return &v
	}).(BareMetalClusterOperationsConfigPtrOutput)
}

// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
func (o BareMetalClusterOperationsConfigOutput) EnableApplicationLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalClusterOperationsConfig) *bool { return v.EnableApplicationLogs }).(pulumi.BoolPtrOutput)
}

type BareMetalClusterOperationsConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalClusterOperationsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalClusterOperationsConfig)(nil)).Elem()
}

func (o BareMetalClusterOperationsConfigPtrOutput) ToBareMetalClusterOperationsConfigPtrOutput() BareMetalClusterOperationsConfigPtrOutput {
	return o
}

func (o BareMetalClusterOperationsConfigPtrOutput) ToBareMetalClusterOperationsConfigPtrOutputWithContext(ctx context.Context) BareMetalClusterOperationsConfigPtrOutput {
	return o
}

func (o BareMetalClusterOperationsConfigPtrOutput) Elem() BareMetalClusterOperationsConfigOutput {
	return o.ApplyT(func(v *BareMetalClusterOperationsConfig) BareMetalClusterOperationsConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalClusterOperationsConfig
		return ret
	}).(BareMetalClusterOperationsConfigOutput)
}

// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
func (o BareMetalClusterOperationsConfigPtrOutput) EnableApplicationLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalClusterOperationsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableApplicationLogs
	}).(pulumi.BoolPtrOutput)
}

// Specifies the bare metal user cluster's observability infrastructure.
type BareMetalClusterOperationsConfigResponse struct {
	// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
	EnableApplicationLogs bool `pulumi:"enableApplicationLogs"`
}

// Specifies the bare metal user cluster's observability infrastructure.
type BareMetalClusterOperationsConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalClusterOperationsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalClusterOperationsConfigResponse)(nil)).Elem()
}

func (o BareMetalClusterOperationsConfigResponseOutput) ToBareMetalClusterOperationsConfigResponseOutput() BareMetalClusterOperationsConfigResponseOutput {
	return o
}

func (o BareMetalClusterOperationsConfigResponseOutput) ToBareMetalClusterOperationsConfigResponseOutputWithContext(ctx context.Context) BareMetalClusterOperationsConfigResponseOutput {
	return o
}

// Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).
func (o BareMetalClusterOperationsConfigResponseOutput) EnableApplicationLogs() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalClusterOperationsConfigResponse) bool { return v.EnableApplicationLogs }).(pulumi.BoolOutput)
}

// Specifies the control plane configuration.
type BareMetalControlPlaneConfig struct {
	// Customizes the default API server args. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
	ApiServerArgs []BareMetalApiServerArgument `pulumi:"apiServerArgs"`
	// Configures the node pool running the control plane.
	ControlPlaneNodePoolConfig BareMetalControlPlaneNodePoolConfig `pulumi:"controlPlaneNodePoolConfig"`
}

// BareMetalControlPlaneConfigInput is an input type that accepts BareMetalControlPlaneConfigArgs and BareMetalControlPlaneConfigOutput values.
// You can construct a concrete instance of `BareMetalControlPlaneConfigInput` via:
//
//	BareMetalControlPlaneConfigArgs{...}
type BareMetalControlPlaneConfigInput interface {
	pulumi.Input

	ToBareMetalControlPlaneConfigOutput() BareMetalControlPlaneConfigOutput
	ToBareMetalControlPlaneConfigOutputWithContext(context.Context) BareMetalControlPlaneConfigOutput
}

// Specifies the control plane configuration.
type BareMetalControlPlaneConfigArgs struct {
	// Customizes the default API server args. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
	ApiServerArgs BareMetalApiServerArgumentArrayInput `pulumi:"apiServerArgs"`
	// Configures the node pool running the control plane.
	ControlPlaneNodePoolConfig BareMetalControlPlaneNodePoolConfigInput `pulumi:"controlPlaneNodePoolConfig"`
}

func (BareMetalControlPlaneConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalControlPlaneConfig)(nil)).Elem()
}

func (i BareMetalControlPlaneConfigArgs) ToBareMetalControlPlaneConfigOutput() BareMetalControlPlaneConfigOutput {
	return i.ToBareMetalControlPlaneConfigOutputWithContext(context.Background())
}

func (i BareMetalControlPlaneConfigArgs) ToBareMetalControlPlaneConfigOutputWithContext(ctx context.Context) BareMetalControlPlaneConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalControlPlaneConfigOutput)
}

// Specifies the control plane configuration.
type BareMetalControlPlaneConfigOutput struct{ *pulumi.OutputState }

func (BareMetalControlPlaneConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalControlPlaneConfig)(nil)).Elem()
}

func (o BareMetalControlPlaneConfigOutput) ToBareMetalControlPlaneConfigOutput() BareMetalControlPlaneConfigOutput {
	return o
}

func (o BareMetalControlPlaneConfigOutput) ToBareMetalControlPlaneConfigOutputWithContext(ctx context.Context) BareMetalControlPlaneConfigOutput {
	return o
}

// Customizes the default API server args. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
func (o BareMetalControlPlaneConfigOutput) ApiServerArgs() BareMetalApiServerArgumentArrayOutput {
	return o.ApplyT(func(v BareMetalControlPlaneConfig) []BareMetalApiServerArgument { return v.ApiServerArgs }).(BareMetalApiServerArgumentArrayOutput)
}

// Configures the node pool running the control plane.
func (o BareMetalControlPlaneConfigOutput) ControlPlaneNodePoolConfig() BareMetalControlPlaneNodePoolConfigOutput {
	return o.ApplyT(func(v BareMetalControlPlaneConfig) BareMetalControlPlaneNodePoolConfig {
		return v.ControlPlaneNodePoolConfig
	}).(BareMetalControlPlaneNodePoolConfigOutput)
}

// Specifies the control plane configuration.
type BareMetalControlPlaneConfigResponse struct {
	// Customizes the default API server args. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
	ApiServerArgs []BareMetalApiServerArgumentResponse `pulumi:"apiServerArgs"`
	// Configures the node pool running the control plane.
	ControlPlaneNodePoolConfig BareMetalControlPlaneNodePoolConfigResponse `pulumi:"controlPlaneNodePoolConfig"`
}

// Specifies the control plane configuration.
type BareMetalControlPlaneConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalControlPlaneConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalControlPlaneConfigResponse)(nil)).Elem()
}

func (o BareMetalControlPlaneConfigResponseOutput) ToBareMetalControlPlaneConfigResponseOutput() BareMetalControlPlaneConfigResponseOutput {
	return o
}

func (o BareMetalControlPlaneConfigResponseOutput) ToBareMetalControlPlaneConfigResponseOutputWithContext(ctx context.Context) BareMetalControlPlaneConfigResponseOutput {
	return o
}

// Customizes the default API server args. Only a subset of customized flags are supported. For the exact format, refer to the [API server documentation](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/).
func (o BareMetalControlPlaneConfigResponseOutput) ApiServerArgs() BareMetalApiServerArgumentResponseArrayOutput {
	return o.ApplyT(func(v BareMetalControlPlaneConfigResponse) []BareMetalApiServerArgumentResponse {
		return v.ApiServerArgs
	}).(BareMetalApiServerArgumentResponseArrayOutput)
}

// Configures the node pool running the control plane.
func (o BareMetalControlPlaneConfigResponseOutput) ControlPlaneNodePoolConfig() BareMetalControlPlaneNodePoolConfigResponseOutput {
	return o.ApplyT(func(v BareMetalControlPlaneConfigResponse) BareMetalControlPlaneNodePoolConfigResponse {
		return v.ControlPlaneNodePoolConfig
	}).(BareMetalControlPlaneNodePoolConfigResponseOutput)
}

// Specifies the control plane node pool configuration.
type BareMetalControlPlaneNodePoolConfig struct {
	// The generic configuration for a node pool running the control plane.
	NodePoolConfig BareMetalNodePoolConfig `pulumi:"nodePoolConfig"`
}

// BareMetalControlPlaneNodePoolConfigInput is an input type that accepts BareMetalControlPlaneNodePoolConfigArgs and BareMetalControlPlaneNodePoolConfigOutput values.
// You can construct a concrete instance of `BareMetalControlPlaneNodePoolConfigInput` via:
//
//	BareMetalControlPlaneNodePoolConfigArgs{...}
type BareMetalControlPlaneNodePoolConfigInput interface {
	pulumi.Input

	ToBareMetalControlPlaneNodePoolConfigOutput() BareMetalControlPlaneNodePoolConfigOutput
	ToBareMetalControlPlaneNodePoolConfigOutputWithContext(context.Context) BareMetalControlPlaneNodePoolConfigOutput
}

// Specifies the control plane node pool configuration.
type BareMetalControlPlaneNodePoolConfigArgs struct {
	// The generic configuration for a node pool running the control plane.
	NodePoolConfig BareMetalNodePoolConfigInput `pulumi:"nodePoolConfig"`
}

func (BareMetalControlPlaneNodePoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalControlPlaneNodePoolConfig)(nil)).Elem()
}

func (i BareMetalControlPlaneNodePoolConfigArgs) ToBareMetalControlPlaneNodePoolConfigOutput() BareMetalControlPlaneNodePoolConfigOutput {
	return i.ToBareMetalControlPlaneNodePoolConfigOutputWithContext(context.Background())
}

func (i BareMetalControlPlaneNodePoolConfigArgs) ToBareMetalControlPlaneNodePoolConfigOutputWithContext(ctx context.Context) BareMetalControlPlaneNodePoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalControlPlaneNodePoolConfigOutput)
}

// Specifies the control plane node pool configuration.
type BareMetalControlPlaneNodePoolConfigOutput struct{ *pulumi.OutputState }

func (BareMetalControlPlaneNodePoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalControlPlaneNodePoolConfig)(nil)).Elem()
}

func (o BareMetalControlPlaneNodePoolConfigOutput) ToBareMetalControlPlaneNodePoolConfigOutput() BareMetalControlPlaneNodePoolConfigOutput {
	return o
}

func (o BareMetalControlPlaneNodePoolConfigOutput) ToBareMetalControlPlaneNodePoolConfigOutputWithContext(ctx context.Context) BareMetalControlPlaneNodePoolConfigOutput {
	return o
}

// The generic configuration for a node pool running the control plane.
func (o BareMetalControlPlaneNodePoolConfigOutput) NodePoolConfig() BareMetalNodePoolConfigOutput {
	return o.ApplyT(func(v BareMetalControlPlaneNodePoolConfig) BareMetalNodePoolConfig { return v.NodePoolConfig }).(BareMetalNodePoolConfigOutput)
}

// Specifies the control plane node pool configuration.
type BareMetalControlPlaneNodePoolConfigResponse struct {
	// The generic configuration for a node pool running the control plane.
	NodePoolConfig BareMetalNodePoolConfigResponse `pulumi:"nodePoolConfig"`
}

// Specifies the control plane node pool configuration.
type BareMetalControlPlaneNodePoolConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalControlPlaneNodePoolConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalControlPlaneNodePoolConfigResponse)(nil)).Elem()
}

func (o BareMetalControlPlaneNodePoolConfigResponseOutput) ToBareMetalControlPlaneNodePoolConfigResponseOutput() BareMetalControlPlaneNodePoolConfigResponseOutput {
	return o
}

func (o BareMetalControlPlaneNodePoolConfigResponseOutput) ToBareMetalControlPlaneNodePoolConfigResponseOutputWithContext(ctx context.Context) BareMetalControlPlaneNodePoolConfigResponseOutput {
	return o
}

// The generic configuration for a node pool running the control plane.
func (o BareMetalControlPlaneNodePoolConfigResponseOutput) NodePoolConfig() BareMetalNodePoolConfigResponseOutput {
	return o.ApplyT(func(v BareMetalControlPlaneNodePoolConfigResponse) BareMetalNodePoolConfigResponse {
		return v.NodePoolConfig
	}).(BareMetalNodePoolConfigResponseOutput)
}

// Represents a machine that is currently drained.
type BareMetalDrainedMachineResponse struct {
	// Drained machine IP address.
	NodeIp string `pulumi:"nodeIp"`
}

// Represents a machine that is currently drained.
type BareMetalDrainedMachineResponseOutput struct{ *pulumi.OutputState }

func (BareMetalDrainedMachineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalDrainedMachineResponse)(nil)).Elem()
}

func (o BareMetalDrainedMachineResponseOutput) ToBareMetalDrainedMachineResponseOutput() BareMetalDrainedMachineResponseOutput {
	return o
}

func (o BareMetalDrainedMachineResponseOutput) ToBareMetalDrainedMachineResponseOutputWithContext(ctx context.Context) BareMetalDrainedMachineResponseOutput {
	return o
}

// Drained machine IP address.
func (o BareMetalDrainedMachineResponseOutput) NodeIp() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalDrainedMachineResponse) string { return v.NodeIp }).(pulumi.StringOutput)
}

type BareMetalDrainedMachineResponseArrayOutput struct{ *pulumi.OutputState }

func (BareMetalDrainedMachineResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalDrainedMachineResponse)(nil)).Elem()
}

func (o BareMetalDrainedMachineResponseArrayOutput) ToBareMetalDrainedMachineResponseArrayOutput() BareMetalDrainedMachineResponseArrayOutput {
	return o
}

func (o BareMetalDrainedMachineResponseArrayOutput) ToBareMetalDrainedMachineResponseArrayOutputWithContext(ctx context.Context) BareMetalDrainedMachineResponseArrayOutput {
	return o
}

func (o BareMetalDrainedMachineResponseArrayOutput) Index(i pulumi.IntInput) BareMetalDrainedMachineResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalDrainedMachineResponse {
		return vs[0].([]BareMetalDrainedMachineResponse)[vs[1].(int)]
	}).(BareMetalDrainedMachineResponseOutput)
}

// Represents a machine that is currently draining.
type BareMetalDrainingMachineResponse struct {
	// Draining machine IP address.
	NodeIp string `pulumi:"nodeIp"`
	// The count of pods yet to drain.
	PodCount int `pulumi:"podCount"`
}

// Represents a machine that is currently draining.
type BareMetalDrainingMachineResponseOutput struct{ *pulumi.OutputState }

func (BareMetalDrainingMachineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalDrainingMachineResponse)(nil)).Elem()
}

func (o BareMetalDrainingMachineResponseOutput) ToBareMetalDrainingMachineResponseOutput() BareMetalDrainingMachineResponseOutput {
	return o
}

func (o BareMetalDrainingMachineResponseOutput) ToBareMetalDrainingMachineResponseOutputWithContext(ctx context.Context) BareMetalDrainingMachineResponseOutput {
	return o
}

// Draining machine IP address.
func (o BareMetalDrainingMachineResponseOutput) NodeIp() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalDrainingMachineResponse) string { return v.NodeIp }).(pulumi.StringOutput)
}

// The count of pods yet to drain.
func (o BareMetalDrainingMachineResponseOutput) PodCount() pulumi.IntOutput {
	return o.ApplyT(func(v BareMetalDrainingMachineResponse) int { return v.PodCount }).(pulumi.IntOutput)
}

type BareMetalDrainingMachineResponseArrayOutput struct{ *pulumi.OutputState }

func (BareMetalDrainingMachineResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalDrainingMachineResponse)(nil)).Elem()
}

func (o BareMetalDrainingMachineResponseArrayOutput) ToBareMetalDrainingMachineResponseArrayOutput() BareMetalDrainingMachineResponseArrayOutput {
	return o
}

func (o BareMetalDrainingMachineResponseArrayOutput) ToBareMetalDrainingMachineResponseArrayOutputWithContext(ctx context.Context) BareMetalDrainingMachineResponseArrayOutput {
	return o
}

func (o BareMetalDrainingMachineResponseArrayOutput) Index(i pulumi.IntInput) BareMetalDrainingMachineResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalDrainingMachineResponse {
		return vs[0].([]BareMetalDrainingMachineResponse)[vs[1].(int)]
	}).(BareMetalDrainingMachineResponseOutput)
}

// Specifies the cluster CIDR configuration while running in island mode.
type BareMetalIslandModeCidrConfig struct {
	// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
	PodAddressCidrBlocks []string `pulumi:"podAddressCidrBlocks"`
	// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field is mutable after creation starting with version 1.15.
	ServiceAddressCidrBlocks []string `pulumi:"serviceAddressCidrBlocks"`
}

// BareMetalIslandModeCidrConfigInput is an input type that accepts BareMetalIslandModeCidrConfigArgs and BareMetalIslandModeCidrConfigOutput values.
// You can construct a concrete instance of `BareMetalIslandModeCidrConfigInput` via:
//
//	BareMetalIslandModeCidrConfigArgs{...}
type BareMetalIslandModeCidrConfigInput interface {
	pulumi.Input

	ToBareMetalIslandModeCidrConfigOutput() BareMetalIslandModeCidrConfigOutput
	ToBareMetalIslandModeCidrConfigOutputWithContext(context.Context) BareMetalIslandModeCidrConfigOutput
}

// Specifies the cluster CIDR configuration while running in island mode.
type BareMetalIslandModeCidrConfigArgs struct {
	// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
	PodAddressCidrBlocks pulumi.StringArrayInput `pulumi:"podAddressCidrBlocks"`
	// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field is mutable after creation starting with version 1.15.
	ServiceAddressCidrBlocks pulumi.StringArrayInput `pulumi:"serviceAddressCidrBlocks"`
}

func (BareMetalIslandModeCidrConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalIslandModeCidrConfig)(nil)).Elem()
}

func (i BareMetalIslandModeCidrConfigArgs) ToBareMetalIslandModeCidrConfigOutput() BareMetalIslandModeCidrConfigOutput {
	return i.ToBareMetalIslandModeCidrConfigOutputWithContext(context.Background())
}

func (i BareMetalIslandModeCidrConfigArgs) ToBareMetalIslandModeCidrConfigOutputWithContext(ctx context.Context) BareMetalIslandModeCidrConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalIslandModeCidrConfigOutput)
}

func (i BareMetalIslandModeCidrConfigArgs) ToBareMetalIslandModeCidrConfigPtrOutput() BareMetalIslandModeCidrConfigPtrOutput {
	return i.ToBareMetalIslandModeCidrConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalIslandModeCidrConfigArgs) ToBareMetalIslandModeCidrConfigPtrOutputWithContext(ctx context.Context) BareMetalIslandModeCidrConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalIslandModeCidrConfigOutput).ToBareMetalIslandModeCidrConfigPtrOutputWithContext(ctx)
}

// BareMetalIslandModeCidrConfigPtrInput is an input type that accepts BareMetalIslandModeCidrConfigArgs, BareMetalIslandModeCidrConfigPtr and BareMetalIslandModeCidrConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalIslandModeCidrConfigPtrInput` via:
//
//	        BareMetalIslandModeCidrConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalIslandModeCidrConfigPtrInput interface {
	pulumi.Input

	ToBareMetalIslandModeCidrConfigPtrOutput() BareMetalIslandModeCidrConfigPtrOutput
	ToBareMetalIslandModeCidrConfigPtrOutputWithContext(context.Context) BareMetalIslandModeCidrConfigPtrOutput
}

type bareMetalIslandModeCidrConfigPtrType BareMetalIslandModeCidrConfigArgs

func BareMetalIslandModeCidrConfigPtr(v *BareMetalIslandModeCidrConfigArgs) BareMetalIslandModeCidrConfigPtrInput {
	return (*bareMetalIslandModeCidrConfigPtrType)(v)
}

func (*bareMetalIslandModeCidrConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalIslandModeCidrConfig)(nil)).Elem()
}

func (i *bareMetalIslandModeCidrConfigPtrType) ToBareMetalIslandModeCidrConfigPtrOutput() BareMetalIslandModeCidrConfigPtrOutput {
	return i.ToBareMetalIslandModeCidrConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalIslandModeCidrConfigPtrType) ToBareMetalIslandModeCidrConfigPtrOutputWithContext(ctx context.Context) BareMetalIslandModeCidrConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalIslandModeCidrConfigPtrOutput)
}

// Specifies the cluster CIDR configuration while running in island mode.
type BareMetalIslandModeCidrConfigOutput struct{ *pulumi.OutputState }

func (BareMetalIslandModeCidrConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalIslandModeCidrConfig)(nil)).Elem()
}

func (o BareMetalIslandModeCidrConfigOutput) ToBareMetalIslandModeCidrConfigOutput() BareMetalIslandModeCidrConfigOutput {
	return o
}

func (o BareMetalIslandModeCidrConfigOutput) ToBareMetalIslandModeCidrConfigOutputWithContext(ctx context.Context) BareMetalIslandModeCidrConfigOutput {
	return o
}

func (o BareMetalIslandModeCidrConfigOutput) ToBareMetalIslandModeCidrConfigPtrOutput() BareMetalIslandModeCidrConfigPtrOutput {
	return o.ToBareMetalIslandModeCidrConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalIslandModeCidrConfigOutput) ToBareMetalIslandModeCidrConfigPtrOutputWithContext(ctx context.Context) BareMetalIslandModeCidrConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalIslandModeCidrConfig) *BareMetalIslandModeCidrConfig {
		return &v
	}).(BareMetalIslandModeCidrConfigPtrOutput)
}

// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
func (o BareMetalIslandModeCidrConfigOutput) PodAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalIslandModeCidrConfig) []string { return v.PodAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field is mutable after creation starting with version 1.15.
func (o BareMetalIslandModeCidrConfigOutput) ServiceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalIslandModeCidrConfig) []string { return v.ServiceAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

type BareMetalIslandModeCidrConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalIslandModeCidrConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalIslandModeCidrConfig)(nil)).Elem()
}

func (o BareMetalIslandModeCidrConfigPtrOutput) ToBareMetalIslandModeCidrConfigPtrOutput() BareMetalIslandModeCidrConfigPtrOutput {
	return o
}

func (o BareMetalIslandModeCidrConfigPtrOutput) ToBareMetalIslandModeCidrConfigPtrOutputWithContext(ctx context.Context) BareMetalIslandModeCidrConfigPtrOutput {
	return o
}

func (o BareMetalIslandModeCidrConfigPtrOutput) Elem() BareMetalIslandModeCidrConfigOutput {
	return o.ApplyT(func(v *BareMetalIslandModeCidrConfig) BareMetalIslandModeCidrConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalIslandModeCidrConfig
		return ret
	}).(BareMetalIslandModeCidrConfigOutput)
}

// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
func (o BareMetalIslandModeCidrConfigPtrOutput) PodAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BareMetalIslandModeCidrConfig) []string {
		if v == nil {
			return nil
		}
		return v.PodAddressCidrBlocks
	}).(pulumi.StringArrayOutput)
}

// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field is mutable after creation starting with version 1.15.
func (o BareMetalIslandModeCidrConfigPtrOutput) ServiceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BareMetalIslandModeCidrConfig) []string {
		if v == nil {
			return nil
		}
		return v.ServiceAddressCidrBlocks
	}).(pulumi.StringArrayOutput)
}

// Specifies the cluster CIDR configuration while running in island mode.
type BareMetalIslandModeCidrConfigResponse struct {
	// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
	PodAddressCidrBlocks []string `pulumi:"podAddressCidrBlocks"`
	// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field is mutable after creation starting with version 1.15.
	ServiceAddressCidrBlocks []string `pulumi:"serviceAddressCidrBlocks"`
}

// Specifies the cluster CIDR configuration while running in island mode.
type BareMetalIslandModeCidrConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalIslandModeCidrConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalIslandModeCidrConfigResponse)(nil)).Elem()
}

func (o BareMetalIslandModeCidrConfigResponseOutput) ToBareMetalIslandModeCidrConfigResponseOutput() BareMetalIslandModeCidrConfigResponseOutput {
	return o
}

func (o BareMetalIslandModeCidrConfigResponseOutput) ToBareMetalIslandModeCidrConfigResponseOutputWithContext(ctx context.Context) BareMetalIslandModeCidrConfigResponseOutput {
	return o
}

// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.
func (o BareMetalIslandModeCidrConfigResponseOutput) PodAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalIslandModeCidrConfigResponse) []string { return v.PodAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field is mutable after creation starting with version 1.15.
func (o BareMetalIslandModeCidrConfigResponseOutput) ServiceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalIslandModeCidrConfigResponse) []string { return v.ServiceAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// KubeletConfig defines the modifiable kubelet configurations for baremetal machines. Note: this list includes fields supported in GKE (see https://cloud.google.com/kubernetes-engine/docs/how-to/node-system-config#kubelet-options).
type BareMetalKubeletConfig struct {
	// The maximum size of bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registry_pull_qps. The value must not be a negative number. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 10.
	RegistryBurst *int `pulumi:"registryBurst"`
	// The limit of registry pulls per second. Setting this value to 0 means no limit. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 5.
	RegistryPullQps *int `pulumi:"registryPullQps"`
	// Prevents the Kubelet from pulling multiple images at a time. We recommend *not* changing the default value on nodes that run docker daemon with version < 1.9 or an Another Union File System (Aufs) storage backend. Issue https://github.com/kubernetes/kubernetes/issues/10959 has more details.
	SerializeImagePullsDisabled *bool `pulumi:"serializeImagePullsDisabled"`
}

// BareMetalKubeletConfigInput is an input type that accepts BareMetalKubeletConfigArgs and BareMetalKubeletConfigOutput values.
// You can construct a concrete instance of `BareMetalKubeletConfigInput` via:
//
//	BareMetalKubeletConfigArgs{...}
type BareMetalKubeletConfigInput interface {
	pulumi.Input

	ToBareMetalKubeletConfigOutput() BareMetalKubeletConfigOutput
	ToBareMetalKubeletConfigOutputWithContext(context.Context) BareMetalKubeletConfigOutput
}

// KubeletConfig defines the modifiable kubelet configurations for baremetal machines. Note: this list includes fields supported in GKE (see https://cloud.google.com/kubernetes-engine/docs/how-to/node-system-config#kubelet-options).
type BareMetalKubeletConfigArgs struct {
	// The maximum size of bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registry_pull_qps. The value must not be a negative number. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 10.
	RegistryBurst pulumi.IntPtrInput `pulumi:"registryBurst"`
	// The limit of registry pulls per second. Setting this value to 0 means no limit. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 5.
	RegistryPullQps pulumi.IntPtrInput `pulumi:"registryPullQps"`
	// Prevents the Kubelet from pulling multiple images at a time. We recommend *not* changing the default value on nodes that run docker daemon with version < 1.9 or an Another Union File System (Aufs) storage backend. Issue https://github.com/kubernetes/kubernetes/issues/10959 has more details.
	SerializeImagePullsDisabled pulumi.BoolPtrInput `pulumi:"serializeImagePullsDisabled"`
}

func (BareMetalKubeletConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalKubeletConfig)(nil)).Elem()
}

func (i BareMetalKubeletConfigArgs) ToBareMetalKubeletConfigOutput() BareMetalKubeletConfigOutput {
	return i.ToBareMetalKubeletConfigOutputWithContext(context.Background())
}

func (i BareMetalKubeletConfigArgs) ToBareMetalKubeletConfigOutputWithContext(ctx context.Context) BareMetalKubeletConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalKubeletConfigOutput)
}

func (i BareMetalKubeletConfigArgs) ToBareMetalKubeletConfigPtrOutput() BareMetalKubeletConfigPtrOutput {
	return i.ToBareMetalKubeletConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalKubeletConfigArgs) ToBareMetalKubeletConfigPtrOutputWithContext(ctx context.Context) BareMetalKubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalKubeletConfigOutput).ToBareMetalKubeletConfigPtrOutputWithContext(ctx)
}

// BareMetalKubeletConfigPtrInput is an input type that accepts BareMetalKubeletConfigArgs, BareMetalKubeletConfigPtr and BareMetalKubeletConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalKubeletConfigPtrInput` via:
//
//	        BareMetalKubeletConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalKubeletConfigPtrInput interface {
	pulumi.Input

	ToBareMetalKubeletConfigPtrOutput() BareMetalKubeletConfigPtrOutput
	ToBareMetalKubeletConfigPtrOutputWithContext(context.Context) BareMetalKubeletConfigPtrOutput
}

type bareMetalKubeletConfigPtrType BareMetalKubeletConfigArgs

func BareMetalKubeletConfigPtr(v *BareMetalKubeletConfigArgs) BareMetalKubeletConfigPtrInput {
	return (*bareMetalKubeletConfigPtrType)(v)
}

func (*bareMetalKubeletConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalKubeletConfig)(nil)).Elem()
}

func (i *bareMetalKubeletConfigPtrType) ToBareMetalKubeletConfigPtrOutput() BareMetalKubeletConfigPtrOutput {
	return i.ToBareMetalKubeletConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalKubeletConfigPtrType) ToBareMetalKubeletConfigPtrOutputWithContext(ctx context.Context) BareMetalKubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalKubeletConfigPtrOutput)
}

// KubeletConfig defines the modifiable kubelet configurations for baremetal machines. Note: this list includes fields supported in GKE (see https://cloud.google.com/kubernetes-engine/docs/how-to/node-system-config#kubelet-options).
type BareMetalKubeletConfigOutput struct{ *pulumi.OutputState }

func (BareMetalKubeletConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalKubeletConfig)(nil)).Elem()
}

func (o BareMetalKubeletConfigOutput) ToBareMetalKubeletConfigOutput() BareMetalKubeletConfigOutput {
	return o
}

func (o BareMetalKubeletConfigOutput) ToBareMetalKubeletConfigOutputWithContext(ctx context.Context) BareMetalKubeletConfigOutput {
	return o
}

func (o BareMetalKubeletConfigOutput) ToBareMetalKubeletConfigPtrOutput() BareMetalKubeletConfigPtrOutput {
	return o.ToBareMetalKubeletConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalKubeletConfigOutput) ToBareMetalKubeletConfigPtrOutputWithContext(ctx context.Context) BareMetalKubeletConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalKubeletConfig) *BareMetalKubeletConfig {
		return &v
	}).(BareMetalKubeletConfigPtrOutput)
}

// The maximum size of bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registry_pull_qps. The value must not be a negative number. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 10.
func (o BareMetalKubeletConfigOutput) RegistryBurst() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BareMetalKubeletConfig) *int { return v.RegistryBurst }).(pulumi.IntPtrOutput)
}

// The limit of registry pulls per second. Setting this value to 0 means no limit. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 5.
func (o BareMetalKubeletConfigOutput) RegistryPullQps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BareMetalKubeletConfig) *int { return v.RegistryPullQps }).(pulumi.IntPtrOutput)
}

// Prevents the Kubelet from pulling multiple images at a time. We recommend *not* changing the default value on nodes that run docker daemon with version < 1.9 or an Another Union File System (Aufs) storage backend. Issue https://github.com/kubernetes/kubernetes/issues/10959 has more details.
func (o BareMetalKubeletConfigOutput) SerializeImagePullsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalKubeletConfig) *bool { return v.SerializeImagePullsDisabled }).(pulumi.BoolPtrOutput)
}

type BareMetalKubeletConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalKubeletConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalKubeletConfig)(nil)).Elem()
}

func (o BareMetalKubeletConfigPtrOutput) ToBareMetalKubeletConfigPtrOutput() BareMetalKubeletConfigPtrOutput {
	return o
}

func (o BareMetalKubeletConfigPtrOutput) ToBareMetalKubeletConfigPtrOutputWithContext(ctx context.Context) BareMetalKubeletConfigPtrOutput {
	return o
}

func (o BareMetalKubeletConfigPtrOutput) Elem() BareMetalKubeletConfigOutput {
	return o.ApplyT(func(v *BareMetalKubeletConfig) BareMetalKubeletConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalKubeletConfig
		return ret
	}).(BareMetalKubeletConfigOutput)
}

// The maximum size of bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registry_pull_qps. The value must not be a negative number. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 10.
func (o BareMetalKubeletConfigPtrOutput) RegistryBurst() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BareMetalKubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.RegistryBurst
	}).(pulumi.IntPtrOutput)
}

// The limit of registry pulls per second. Setting this value to 0 means no limit. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 5.
func (o BareMetalKubeletConfigPtrOutput) RegistryPullQps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BareMetalKubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.RegistryPullQps
	}).(pulumi.IntPtrOutput)
}

// Prevents the Kubelet from pulling multiple images at a time. We recommend *not* changing the default value on nodes that run docker daemon with version < 1.9 or an Another Union File System (Aufs) storage backend. Issue https://github.com/kubernetes/kubernetes/issues/10959 has more details.
func (o BareMetalKubeletConfigPtrOutput) SerializeImagePullsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalKubeletConfig) *bool {
		if v == nil {
			return nil
		}
		return v.SerializeImagePullsDisabled
	}).(pulumi.BoolPtrOutput)
}

// KubeletConfig defines the modifiable kubelet configurations for baremetal machines. Note: this list includes fields supported in GKE (see https://cloud.google.com/kubernetes-engine/docs/how-to/node-system-config#kubelet-options).
type BareMetalKubeletConfigResponse struct {
	// The maximum size of bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registry_pull_qps. The value must not be a negative number. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 10.
	RegistryBurst int `pulumi:"registryBurst"`
	// The limit of registry pulls per second. Setting this value to 0 means no limit. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 5.
	RegistryPullQps int `pulumi:"registryPullQps"`
	// Prevents the Kubelet from pulling multiple images at a time. We recommend *not* changing the default value on nodes that run docker daemon with version < 1.9 or an Another Union File System (Aufs) storage backend. Issue https://github.com/kubernetes/kubernetes/issues/10959 has more details.
	SerializeImagePullsDisabled bool `pulumi:"serializeImagePullsDisabled"`
}

// KubeletConfig defines the modifiable kubelet configurations for baremetal machines. Note: this list includes fields supported in GKE (see https://cloud.google.com/kubernetes-engine/docs/how-to/node-system-config#kubelet-options).
type BareMetalKubeletConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalKubeletConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalKubeletConfigResponse)(nil)).Elem()
}

func (o BareMetalKubeletConfigResponseOutput) ToBareMetalKubeletConfigResponseOutput() BareMetalKubeletConfigResponseOutput {
	return o
}

func (o BareMetalKubeletConfigResponseOutput) ToBareMetalKubeletConfigResponseOutputWithContext(ctx context.Context) BareMetalKubeletConfigResponseOutput {
	return o
}

// The maximum size of bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registry_pull_qps. The value must not be a negative number. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 10.
func (o BareMetalKubeletConfigResponseOutput) RegistryBurst() pulumi.IntOutput {
	return o.ApplyT(func(v BareMetalKubeletConfigResponse) int { return v.RegistryBurst }).(pulumi.IntOutput)
}

// The limit of registry pulls per second. Setting this value to 0 means no limit. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 5.
func (o BareMetalKubeletConfigResponseOutput) RegistryPullQps() pulumi.IntOutput {
	return o.ApplyT(func(v BareMetalKubeletConfigResponse) int { return v.RegistryPullQps }).(pulumi.IntOutput)
}

// Prevents the Kubelet from pulling multiple images at a time. We recommend *not* changing the default value on nodes that run docker daemon with version < 1.9 or an Another Union File System (Aufs) storage backend. Issue https://github.com/kubernetes/kubernetes/issues/10959 has more details.
func (o BareMetalKubeletConfigResponseOutput) SerializeImagePullsDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalKubeletConfigResponse) bool { return v.SerializeImagePullsDisabled }).(pulumi.BoolOutput)
}

// Represents an IP pool used by the load balancer.
type BareMetalLoadBalancerAddressPool struct {
	// The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
	Addresses []string `pulumi:"addresses"`
	// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
	AvoidBuggyIps *bool `pulumi:"avoidBuggyIps"`
	// If true, prevent IP addresses from being automatically assigned.
	ManualAssign *bool `pulumi:"manualAssign"`
	// The name of the address pool.
	Pool string `pulumi:"pool"`
}

// BareMetalLoadBalancerAddressPoolInput is an input type that accepts BareMetalLoadBalancerAddressPoolArgs and BareMetalLoadBalancerAddressPoolOutput values.
// You can construct a concrete instance of `BareMetalLoadBalancerAddressPoolInput` via:
//
//	BareMetalLoadBalancerAddressPoolArgs{...}
type BareMetalLoadBalancerAddressPoolInput interface {
	pulumi.Input

	ToBareMetalLoadBalancerAddressPoolOutput() BareMetalLoadBalancerAddressPoolOutput
	ToBareMetalLoadBalancerAddressPoolOutputWithContext(context.Context) BareMetalLoadBalancerAddressPoolOutput
}

// Represents an IP pool used by the load balancer.
type BareMetalLoadBalancerAddressPoolArgs struct {
	// The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
	AvoidBuggyIps pulumi.BoolPtrInput `pulumi:"avoidBuggyIps"`
	// If true, prevent IP addresses from being automatically assigned.
	ManualAssign pulumi.BoolPtrInput `pulumi:"manualAssign"`
	// The name of the address pool.
	Pool pulumi.StringInput `pulumi:"pool"`
}

func (BareMetalLoadBalancerAddressPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLoadBalancerAddressPool)(nil)).Elem()
}

func (i BareMetalLoadBalancerAddressPoolArgs) ToBareMetalLoadBalancerAddressPoolOutput() BareMetalLoadBalancerAddressPoolOutput {
	return i.ToBareMetalLoadBalancerAddressPoolOutputWithContext(context.Background())
}

func (i BareMetalLoadBalancerAddressPoolArgs) ToBareMetalLoadBalancerAddressPoolOutputWithContext(ctx context.Context) BareMetalLoadBalancerAddressPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLoadBalancerAddressPoolOutput)
}

// BareMetalLoadBalancerAddressPoolArrayInput is an input type that accepts BareMetalLoadBalancerAddressPoolArray and BareMetalLoadBalancerAddressPoolArrayOutput values.
// You can construct a concrete instance of `BareMetalLoadBalancerAddressPoolArrayInput` via:
//
//	BareMetalLoadBalancerAddressPoolArray{ BareMetalLoadBalancerAddressPoolArgs{...} }
type BareMetalLoadBalancerAddressPoolArrayInput interface {
	pulumi.Input

	ToBareMetalLoadBalancerAddressPoolArrayOutput() BareMetalLoadBalancerAddressPoolArrayOutput
	ToBareMetalLoadBalancerAddressPoolArrayOutputWithContext(context.Context) BareMetalLoadBalancerAddressPoolArrayOutput
}

type BareMetalLoadBalancerAddressPoolArray []BareMetalLoadBalancerAddressPoolInput

func (BareMetalLoadBalancerAddressPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalLoadBalancerAddressPool)(nil)).Elem()
}

func (i BareMetalLoadBalancerAddressPoolArray) ToBareMetalLoadBalancerAddressPoolArrayOutput() BareMetalLoadBalancerAddressPoolArrayOutput {
	return i.ToBareMetalLoadBalancerAddressPoolArrayOutputWithContext(context.Background())
}

func (i BareMetalLoadBalancerAddressPoolArray) ToBareMetalLoadBalancerAddressPoolArrayOutputWithContext(ctx context.Context) BareMetalLoadBalancerAddressPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLoadBalancerAddressPoolArrayOutput)
}

// Represents an IP pool used by the load balancer.
type BareMetalLoadBalancerAddressPoolOutput struct{ *pulumi.OutputState }

func (BareMetalLoadBalancerAddressPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLoadBalancerAddressPool)(nil)).Elem()
}

func (o BareMetalLoadBalancerAddressPoolOutput) ToBareMetalLoadBalancerAddressPoolOutput() BareMetalLoadBalancerAddressPoolOutput {
	return o
}

func (o BareMetalLoadBalancerAddressPoolOutput) ToBareMetalLoadBalancerAddressPoolOutputWithContext(ctx context.Context) BareMetalLoadBalancerAddressPoolOutput {
	return o
}

// The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
func (o BareMetalLoadBalancerAddressPoolOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerAddressPool) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
func (o BareMetalLoadBalancerAddressPoolOutput) AvoidBuggyIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerAddressPool) *bool { return v.AvoidBuggyIps }).(pulumi.BoolPtrOutput)
}

// If true, prevent IP addresses from being automatically assigned.
func (o BareMetalLoadBalancerAddressPoolOutput) ManualAssign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerAddressPool) *bool { return v.ManualAssign }).(pulumi.BoolPtrOutput)
}

// The name of the address pool.
func (o BareMetalLoadBalancerAddressPoolOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerAddressPool) string { return v.Pool }).(pulumi.StringOutput)
}

type BareMetalLoadBalancerAddressPoolArrayOutput struct{ *pulumi.OutputState }

func (BareMetalLoadBalancerAddressPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalLoadBalancerAddressPool)(nil)).Elem()
}

func (o BareMetalLoadBalancerAddressPoolArrayOutput) ToBareMetalLoadBalancerAddressPoolArrayOutput() BareMetalLoadBalancerAddressPoolArrayOutput {
	return o
}

func (o BareMetalLoadBalancerAddressPoolArrayOutput) ToBareMetalLoadBalancerAddressPoolArrayOutputWithContext(ctx context.Context) BareMetalLoadBalancerAddressPoolArrayOutput {
	return o
}

func (o BareMetalLoadBalancerAddressPoolArrayOutput) Index(i pulumi.IntInput) BareMetalLoadBalancerAddressPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalLoadBalancerAddressPool {
		return vs[0].([]BareMetalLoadBalancerAddressPool)[vs[1].(int)]
	}).(BareMetalLoadBalancerAddressPoolOutput)
}

// Represents an IP pool used by the load balancer.
type BareMetalLoadBalancerAddressPoolResponse struct {
	// The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
	Addresses []string `pulumi:"addresses"`
	// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
	AvoidBuggyIps bool `pulumi:"avoidBuggyIps"`
	// If true, prevent IP addresses from being automatically assigned.
	ManualAssign bool `pulumi:"manualAssign"`
	// The name of the address pool.
	Pool string `pulumi:"pool"`
}

// Represents an IP pool used by the load balancer.
type BareMetalLoadBalancerAddressPoolResponseOutput struct{ *pulumi.OutputState }

func (BareMetalLoadBalancerAddressPoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLoadBalancerAddressPoolResponse)(nil)).Elem()
}

func (o BareMetalLoadBalancerAddressPoolResponseOutput) ToBareMetalLoadBalancerAddressPoolResponseOutput() BareMetalLoadBalancerAddressPoolResponseOutput {
	return o
}

func (o BareMetalLoadBalancerAddressPoolResponseOutput) ToBareMetalLoadBalancerAddressPoolResponseOutputWithContext(ctx context.Context) BareMetalLoadBalancerAddressPoolResponseOutput {
	return o
}

// The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
func (o BareMetalLoadBalancerAddressPoolResponseOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerAddressPoolResponse) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
func (o BareMetalLoadBalancerAddressPoolResponseOutput) AvoidBuggyIps() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerAddressPoolResponse) bool { return v.AvoidBuggyIps }).(pulumi.BoolOutput)
}

// If true, prevent IP addresses from being automatically assigned.
func (o BareMetalLoadBalancerAddressPoolResponseOutput) ManualAssign() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerAddressPoolResponse) bool { return v.ManualAssign }).(pulumi.BoolOutput)
}

// The name of the address pool.
func (o BareMetalLoadBalancerAddressPoolResponseOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerAddressPoolResponse) string { return v.Pool }).(pulumi.StringOutput)
}

type BareMetalLoadBalancerAddressPoolResponseArrayOutput struct{ *pulumi.OutputState }

func (BareMetalLoadBalancerAddressPoolResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalLoadBalancerAddressPoolResponse)(nil)).Elem()
}

func (o BareMetalLoadBalancerAddressPoolResponseArrayOutput) ToBareMetalLoadBalancerAddressPoolResponseArrayOutput() BareMetalLoadBalancerAddressPoolResponseArrayOutput {
	return o
}

func (o BareMetalLoadBalancerAddressPoolResponseArrayOutput) ToBareMetalLoadBalancerAddressPoolResponseArrayOutputWithContext(ctx context.Context) BareMetalLoadBalancerAddressPoolResponseArrayOutput {
	return o
}

func (o BareMetalLoadBalancerAddressPoolResponseArrayOutput) Index(i pulumi.IntInput) BareMetalLoadBalancerAddressPoolResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalLoadBalancerAddressPoolResponse {
		return vs[0].([]BareMetalLoadBalancerAddressPoolResponse)[vs[1].(int)]
	}).(BareMetalLoadBalancerAddressPoolResponseOutput)
}

// Specifies the load balancer configuration.
type BareMetalLoadBalancerConfig struct {
	// Configuration for BGP typed load balancers. When set network_config.advanced_networking is automatically set to true.
	BgpLbConfig *BareMetalBgpLbConfig `pulumi:"bgpLbConfig"`
	// Manually configured load balancers.
	ManualLbConfig *BareMetalManualLbConfig `pulumi:"manualLbConfig"`
	// Configuration for MetalLB load balancers.
	MetalLbConfig *BareMetalMetalLbConfig `pulumi:"metalLbConfig"`
	// Configures the ports that the load balancer will listen on.
	PortConfig *BareMetalPortConfig `pulumi:"portConfig"`
	// The VIPs used by the load balancer.
	VipConfig *BareMetalVipConfig `pulumi:"vipConfig"`
}

// BareMetalLoadBalancerConfigInput is an input type that accepts BareMetalLoadBalancerConfigArgs and BareMetalLoadBalancerConfigOutput values.
// You can construct a concrete instance of `BareMetalLoadBalancerConfigInput` via:
//
//	BareMetalLoadBalancerConfigArgs{...}
type BareMetalLoadBalancerConfigInput interface {
	pulumi.Input

	ToBareMetalLoadBalancerConfigOutput() BareMetalLoadBalancerConfigOutput
	ToBareMetalLoadBalancerConfigOutputWithContext(context.Context) BareMetalLoadBalancerConfigOutput
}

// Specifies the load balancer configuration.
type BareMetalLoadBalancerConfigArgs struct {
	// Configuration for BGP typed load balancers. When set network_config.advanced_networking is automatically set to true.
	BgpLbConfig BareMetalBgpLbConfigPtrInput `pulumi:"bgpLbConfig"`
	// Manually configured load balancers.
	ManualLbConfig BareMetalManualLbConfigPtrInput `pulumi:"manualLbConfig"`
	// Configuration for MetalLB load balancers.
	MetalLbConfig BareMetalMetalLbConfigPtrInput `pulumi:"metalLbConfig"`
	// Configures the ports that the load balancer will listen on.
	PortConfig BareMetalPortConfigPtrInput `pulumi:"portConfig"`
	// The VIPs used by the load balancer.
	VipConfig BareMetalVipConfigPtrInput `pulumi:"vipConfig"`
}

func (BareMetalLoadBalancerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLoadBalancerConfig)(nil)).Elem()
}

func (i BareMetalLoadBalancerConfigArgs) ToBareMetalLoadBalancerConfigOutput() BareMetalLoadBalancerConfigOutput {
	return i.ToBareMetalLoadBalancerConfigOutputWithContext(context.Background())
}

func (i BareMetalLoadBalancerConfigArgs) ToBareMetalLoadBalancerConfigOutputWithContext(ctx context.Context) BareMetalLoadBalancerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLoadBalancerConfigOutput)
}

// Specifies the load balancer configuration.
type BareMetalLoadBalancerConfigOutput struct{ *pulumi.OutputState }

func (BareMetalLoadBalancerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLoadBalancerConfig)(nil)).Elem()
}

func (o BareMetalLoadBalancerConfigOutput) ToBareMetalLoadBalancerConfigOutput() BareMetalLoadBalancerConfigOutput {
	return o
}

func (o BareMetalLoadBalancerConfigOutput) ToBareMetalLoadBalancerConfigOutputWithContext(ctx context.Context) BareMetalLoadBalancerConfigOutput {
	return o
}

// Configuration for BGP typed load balancers. When set network_config.advanced_networking is automatically set to true.
func (o BareMetalLoadBalancerConfigOutput) BgpLbConfig() BareMetalBgpLbConfigPtrOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerConfig) *BareMetalBgpLbConfig { return v.BgpLbConfig }).(BareMetalBgpLbConfigPtrOutput)
}

// Manually configured load balancers.
func (o BareMetalLoadBalancerConfigOutput) ManualLbConfig() BareMetalManualLbConfigPtrOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerConfig) *BareMetalManualLbConfig { return v.ManualLbConfig }).(BareMetalManualLbConfigPtrOutput)
}

// Configuration for MetalLB load balancers.
func (o BareMetalLoadBalancerConfigOutput) MetalLbConfig() BareMetalMetalLbConfigPtrOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerConfig) *BareMetalMetalLbConfig { return v.MetalLbConfig }).(BareMetalMetalLbConfigPtrOutput)
}

// Configures the ports that the load balancer will listen on.
func (o BareMetalLoadBalancerConfigOutput) PortConfig() BareMetalPortConfigPtrOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerConfig) *BareMetalPortConfig { return v.PortConfig }).(BareMetalPortConfigPtrOutput)
}

// The VIPs used by the load balancer.
func (o BareMetalLoadBalancerConfigOutput) VipConfig() BareMetalVipConfigPtrOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerConfig) *BareMetalVipConfig { return v.VipConfig }).(BareMetalVipConfigPtrOutput)
}

// Specifies the load balancer configuration.
type BareMetalLoadBalancerConfigResponse struct {
	// Configuration for BGP typed load balancers. When set network_config.advanced_networking is automatically set to true.
	BgpLbConfig BareMetalBgpLbConfigResponse `pulumi:"bgpLbConfig"`
	// Manually configured load balancers.
	ManualLbConfig BareMetalManualLbConfigResponse `pulumi:"manualLbConfig"`
	// Configuration for MetalLB load balancers.
	MetalLbConfig BareMetalMetalLbConfigResponse `pulumi:"metalLbConfig"`
	// Configures the ports that the load balancer will listen on.
	PortConfig BareMetalPortConfigResponse `pulumi:"portConfig"`
	// The VIPs used by the load balancer.
	VipConfig BareMetalVipConfigResponse `pulumi:"vipConfig"`
}

// Specifies the load balancer configuration.
type BareMetalLoadBalancerConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalLoadBalancerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLoadBalancerConfigResponse)(nil)).Elem()
}

func (o BareMetalLoadBalancerConfigResponseOutput) ToBareMetalLoadBalancerConfigResponseOutput() BareMetalLoadBalancerConfigResponseOutput {
	return o
}

func (o BareMetalLoadBalancerConfigResponseOutput) ToBareMetalLoadBalancerConfigResponseOutputWithContext(ctx context.Context) BareMetalLoadBalancerConfigResponseOutput {
	return o
}

// Configuration for BGP typed load balancers. When set network_config.advanced_networking is automatically set to true.
func (o BareMetalLoadBalancerConfigResponseOutput) BgpLbConfig() BareMetalBgpLbConfigResponseOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerConfigResponse) BareMetalBgpLbConfigResponse { return v.BgpLbConfig }).(BareMetalBgpLbConfigResponseOutput)
}

// Manually configured load balancers.
func (o BareMetalLoadBalancerConfigResponseOutput) ManualLbConfig() BareMetalManualLbConfigResponseOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerConfigResponse) BareMetalManualLbConfigResponse { return v.ManualLbConfig }).(BareMetalManualLbConfigResponseOutput)
}

// Configuration for MetalLB load balancers.
func (o BareMetalLoadBalancerConfigResponseOutput) MetalLbConfig() BareMetalMetalLbConfigResponseOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerConfigResponse) BareMetalMetalLbConfigResponse { return v.MetalLbConfig }).(BareMetalMetalLbConfigResponseOutput)
}

// Configures the ports that the load balancer will listen on.
func (o BareMetalLoadBalancerConfigResponseOutput) PortConfig() BareMetalPortConfigResponseOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerConfigResponse) BareMetalPortConfigResponse { return v.PortConfig }).(BareMetalPortConfigResponseOutput)
}

// The VIPs used by the load balancer.
func (o BareMetalLoadBalancerConfigResponseOutput) VipConfig() BareMetalVipConfigResponseOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerConfigResponse) BareMetalVipConfigResponse { return v.VipConfig }).(BareMetalVipConfigResponseOutput)
}

// Specifies the load balancer's node pool configuration.
type BareMetalLoadBalancerNodePoolConfig struct {
	// The generic configuration for a node pool running a load balancer.
	NodePoolConfig *BareMetalNodePoolConfig `pulumi:"nodePoolConfig"`
}

// BareMetalLoadBalancerNodePoolConfigInput is an input type that accepts BareMetalLoadBalancerNodePoolConfigArgs and BareMetalLoadBalancerNodePoolConfigOutput values.
// You can construct a concrete instance of `BareMetalLoadBalancerNodePoolConfigInput` via:
//
//	BareMetalLoadBalancerNodePoolConfigArgs{...}
type BareMetalLoadBalancerNodePoolConfigInput interface {
	pulumi.Input

	ToBareMetalLoadBalancerNodePoolConfigOutput() BareMetalLoadBalancerNodePoolConfigOutput
	ToBareMetalLoadBalancerNodePoolConfigOutputWithContext(context.Context) BareMetalLoadBalancerNodePoolConfigOutput
}

// Specifies the load balancer's node pool configuration.
type BareMetalLoadBalancerNodePoolConfigArgs struct {
	// The generic configuration for a node pool running a load balancer.
	NodePoolConfig BareMetalNodePoolConfigPtrInput `pulumi:"nodePoolConfig"`
}

func (BareMetalLoadBalancerNodePoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLoadBalancerNodePoolConfig)(nil)).Elem()
}

func (i BareMetalLoadBalancerNodePoolConfigArgs) ToBareMetalLoadBalancerNodePoolConfigOutput() BareMetalLoadBalancerNodePoolConfigOutput {
	return i.ToBareMetalLoadBalancerNodePoolConfigOutputWithContext(context.Background())
}

func (i BareMetalLoadBalancerNodePoolConfigArgs) ToBareMetalLoadBalancerNodePoolConfigOutputWithContext(ctx context.Context) BareMetalLoadBalancerNodePoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLoadBalancerNodePoolConfigOutput)
}

func (i BareMetalLoadBalancerNodePoolConfigArgs) ToBareMetalLoadBalancerNodePoolConfigPtrOutput() BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return i.ToBareMetalLoadBalancerNodePoolConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalLoadBalancerNodePoolConfigArgs) ToBareMetalLoadBalancerNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLoadBalancerNodePoolConfigOutput).ToBareMetalLoadBalancerNodePoolConfigPtrOutputWithContext(ctx)
}

// BareMetalLoadBalancerNodePoolConfigPtrInput is an input type that accepts BareMetalLoadBalancerNodePoolConfigArgs, BareMetalLoadBalancerNodePoolConfigPtr and BareMetalLoadBalancerNodePoolConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalLoadBalancerNodePoolConfigPtrInput` via:
//
//	        BareMetalLoadBalancerNodePoolConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalLoadBalancerNodePoolConfigPtrInput interface {
	pulumi.Input

	ToBareMetalLoadBalancerNodePoolConfigPtrOutput() BareMetalLoadBalancerNodePoolConfigPtrOutput
	ToBareMetalLoadBalancerNodePoolConfigPtrOutputWithContext(context.Context) BareMetalLoadBalancerNodePoolConfigPtrOutput
}

type bareMetalLoadBalancerNodePoolConfigPtrType BareMetalLoadBalancerNodePoolConfigArgs

func BareMetalLoadBalancerNodePoolConfigPtr(v *BareMetalLoadBalancerNodePoolConfigArgs) BareMetalLoadBalancerNodePoolConfigPtrInput {
	return (*bareMetalLoadBalancerNodePoolConfigPtrType)(v)
}

func (*bareMetalLoadBalancerNodePoolConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalLoadBalancerNodePoolConfig)(nil)).Elem()
}

func (i *bareMetalLoadBalancerNodePoolConfigPtrType) ToBareMetalLoadBalancerNodePoolConfigPtrOutput() BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return i.ToBareMetalLoadBalancerNodePoolConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalLoadBalancerNodePoolConfigPtrType) ToBareMetalLoadBalancerNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLoadBalancerNodePoolConfigPtrOutput)
}

// Specifies the load balancer's node pool configuration.
type BareMetalLoadBalancerNodePoolConfigOutput struct{ *pulumi.OutputState }

func (BareMetalLoadBalancerNodePoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLoadBalancerNodePoolConfig)(nil)).Elem()
}

func (o BareMetalLoadBalancerNodePoolConfigOutput) ToBareMetalLoadBalancerNodePoolConfigOutput() BareMetalLoadBalancerNodePoolConfigOutput {
	return o
}

func (o BareMetalLoadBalancerNodePoolConfigOutput) ToBareMetalLoadBalancerNodePoolConfigOutputWithContext(ctx context.Context) BareMetalLoadBalancerNodePoolConfigOutput {
	return o
}

func (o BareMetalLoadBalancerNodePoolConfigOutput) ToBareMetalLoadBalancerNodePoolConfigPtrOutput() BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return o.ToBareMetalLoadBalancerNodePoolConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalLoadBalancerNodePoolConfigOutput) ToBareMetalLoadBalancerNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalLoadBalancerNodePoolConfig) *BareMetalLoadBalancerNodePoolConfig {
		return &v
	}).(BareMetalLoadBalancerNodePoolConfigPtrOutput)
}

// The generic configuration for a node pool running a load balancer.
func (o BareMetalLoadBalancerNodePoolConfigOutput) NodePoolConfig() BareMetalNodePoolConfigPtrOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerNodePoolConfig) *BareMetalNodePoolConfig { return v.NodePoolConfig }).(BareMetalNodePoolConfigPtrOutput)
}

type BareMetalLoadBalancerNodePoolConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalLoadBalancerNodePoolConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalLoadBalancerNodePoolConfig)(nil)).Elem()
}

func (o BareMetalLoadBalancerNodePoolConfigPtrOutput) ToBareMetalLoadBalancerNodePoolConfigPtrOutput() BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return o
}

func (o BareMetalLoadBalancerNodePoolConfigPtrOutput) ToBareMetalLoadBalancerNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return o
}

func (o BareMetalLoadBalancerNodePoolConfigPtrOutput) Elem() BareMetalLoadBalancerNodePoolConfigOutput {
	return o.ApplyT(func(v *BareMetalLoadBalancerNodePoolConfig) BareMetalLoadBalancerNodePoolConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalLoadBalancerNodePoolConfig
		return ret
	}).(BareMetalLoadBalancerNodePoolConfigOutput)
}

// The generic configuration for a node pool running a load balancer.
func (o BareMetalLoadBalancerNodePoolConfigPtrOutput) NodePoolConfig() BareMetalNodePoolConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalLoadBalancerNodePoolConfig) *BareMetalNodePoolConfig {
		if v == nil {
			return nil
		}
		return v.NodePoolConfig
	}).(BareMetalNodePoolConfigPtrOutput)
}

// Specifies the load balancer's node pool configuration.
type BareMetalLoadBalancerNodePoolConfigResponse struct {
	// The generic configuration for a node pool running a load balancer.
	NodePoolConfig BareMetalNodePoolConfigResponse `pulumi:"nodePoolConfig"`
}

// Specifies the load balancer's node pool configuration.
type BareMetalLoadBalancerNodePoolConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalLoadBalancerNodePoolConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLoadBalancerNodePoolConfigResponse)(nil)).Elem()
}

func (o BareMetalLoadBalancerNodePoolConfigResponseOutput) ToBareMetalLoadBalancerNodePoolConfigResponseOutput() BareMetalLoadBalancerNodePoolConfigResponseOutput {
	return o
}

func (o BareMetalLoadBalancerNodePoolConfigResponseOutput) ToBareMetalLoadBalancerNodePoolConfigResponseOutputWithContext(ctx context.Context) BareMetalLoadBalancerNodePoolConfigResponseOutput {
	return o
}

// The generic configuration for a node pool running a load balancer.
func (o BareMetalLoadBalancerNodePoolConfigResponseOutput) NodePoolConfig() BareMetalNodePoolConfigResponseOutput {
	return o.ApplyT(func(v BareMetalLoadBalancerNodePoolConfigResponse) BareMetalNodePoolConfigResponse {
		return v.NodePoolConfig
	}).(BareMetalNodePoolConfigResponseOutput)
}

// Specifies the configs for local persistent volumes (PVs).
type BareMetalLvpConfig struct {
	// The host machine path.
	Path string `pulumi:"path"`
	// The StorageClass name that PVs will be created with.
	StorageClass string `pulumi:"storageClass"`
}

// BareMetalLvpConfigInput is an input type that accepts BareMetalLvpConfigArgs and BareMetalLvpConfigOutput values.
// You can construct a concrete instance of `BareMetalLvpConfigInput` via:
//
//	BareMetalLvpConfigArgs{...}
type BareMetalLvpConfigInput interface {
	pulumi.Input

	ToBareMetalLvpConfigOutput() BareMetalLvpConfigOutput
	ToBareMetalLvpConfigOutputWithContext(context.Context) BareMetalLvpConfigOutput
}

// Specifies the configs for local persistent volumes (PVs).
type BareMetalLvpConfigArgs struct {
	// The host machine path.
	Path pulumi.StringInput `pulumi:"path"`
	// The StorageClass name that PVs will be created with.
	StorageClass pulumi.StringInput `pulumi:"storageClass"`
}

func (BareMetalLvpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLvpConfig)(nil)).Elem()
}

func (i BareMetalLvpConfigArgs) ToBareMetalLvpConfigOutput() BareMetalLvpConfigOutput {
	return i.ToBareMetalLvpConfigOutputWithContext(context.Background())
}

func (i BareMetalLvpConfigArgs) ToBareMetalLvpConfigOutputWithContext(ctx context.Context) BareMetalLvpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLvpConfigOutput)
}

func (i BareMetalLvpConfigArgs) ToBareMetalLvpConfigPtrOutput() BareMetalLvpConfigPtrOutput {
	return i.ToBareMetalLvpConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalLvpConfigArgs) ToBareMetalLvpConfigPtrOutputWithContext(ctx context.Context) BareMetalLvpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLvpConfigOutput).ToBareMetalLvpConfigPtrOutputWithContext(ctx)
}

// BareMetalLvpConfigPtrInput is an input type that accepts BareMetalLvpConfigArgs, BareMetalLvpConfigPtr and BareMetalLvpConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalLvpConfigPtrInput` via:
//
//	        BareMetalLvpConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalLvpConfigPtrInput interface {
	pulumi.Input

	ToBareMetalLvpConfigPtrOutput() BareMetalLvpConfigPtrOutput
	ToBareMetalLvpConfigPtrOutputWithContext(context.Context) BareMetalLvpConfigPtrOutput
}

type bareMetalLvpConfigPtrType BareMetalLvpConfigArgs

func BareMetalLvpConfigPtr(v *BareMetalLvpConfigArgs) BareMetalLvpConfigPtrInput {
	return (*bareMetalLvpConfigPtrType)(v)
}

func (*bareMetalLvpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalLvpConfig)(nil)).Elem()
}

func (i *bareMetalLvpConfigPtrType) ToBareMetalLvpConfigPtrOutput() BareMetalLvpConfigPtrOutput {
	return i.ToBareMetalLvpConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalLvpConfigPtrType) ToBareMetalLvpConfigPtrOutputWithContext(ctx context.Context) BareMetalLvpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLvpConfigPtrOutput)
}

// Specifies the configs for local persistent volumes (PVs).
type BareMetalLvpConfigOutput struct{ *pulumi.OutputState }

func (BareMetalLvpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLvpConfig)(nil)).Elem()
}

func (o BareMetalLvpConfigOutput) ToBareMetalLvpConfigOutput() BareMetalLvpConfigOutput {
	return o
}

func (o BareMetalLvpConfigOutput) ToBareMetalLvpConfigOutputWithContext(ctx context.Context) BareMetalLvpConfigOutput {
	return o
}

func (o BareMetalLvpConfigOutput) ToBareMetalLvpConfigPtrOutput() BareMetalLvpConfigPtrOutput {
	return o.ToBareMetalLvpConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalLvpConfigOutput) ToBareMetalLvpConfigPtrOutputWithContext(ctx context.Context) BareMetalLvpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalLvpConfig) *BareMetalLvpConfig {
		return &v
	}).(BareMetalLvpConfigPtrOutput)
}

// The host machine path.
func (o BareMetalLvpConfigOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalLvpConfig) string { return v.Path }).(pulumi.StringOutput)
}

// The StorageClass name that PVs will be created with.
func (o BareMetalLvpConfigOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalLvpConfig) string { return v.StorageClass }).(pulumi.StringOutput)
}

type BareMetalLvpConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalLvpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalLvpConfig)(nil)).Elem()
}

func (o BareMetalLvpConfigPtrOutput) ToBareMetalLvpConfigPtrOutput() BareMetalLvpConfigPtrOutput {
	return o
}

func (o BareMetalLvpConfigPtrOutput) ToBareMetalLvpConfigPtrOutputWithContext(ctx context.Context) BareMetalLvpConfigPtrOutput {
	return o
}

func (o BareMetalLvpConfigPtrOutput) Elem() BareMetalLvpConfigOutput {
	return o.ApplyT(func(v *BareMetalLvpConfig) BareMetalLvpConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalLvpConfig
		return ret
	}).(BareMetalLvpConfigOutput)
}

// The host machine path.
func (o BareMetalLvpConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalLvpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// The StorageClass name that PVs will be created with.
func (o BareMetalLvpConfigPtrOutput) StorageClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalLvpConfig) *string {
		if v == nil {
			return nil
		}
		return &v.StorageClass
	}).(pulumi.StringPtrOutput)
}

// Specifies the configs for local persistent volumes (PVs).
type BareMetalLvpConfigResponse struct {
	// The host machine path.
	Path string `pulumi:"path"`
	// The StorageClass name that PVs will be created with.
	StorageClass string `pulumi:"storageClass"`
}

// Specifies the configs for local persistent volumes (PVs).
type BareMetalLvpConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalLvpConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLvpConfigResponse)(nil)).Elem()
}

func (o BareMetalLvpConfigResponseOutput) ToBareMetalLvpConfigResponseOutput() BareMetalLvpConfigResponseOutput {
	return o
}

func (o BareMetalLvpConfigResponseOutput) ToBareMetalLvpConfigResponseOutputWithContext(ctx context.Context) BareMetalLvpConfigResponseOutput {
	return o
}

// The host machine path.
func (o BareMetalLvpConfigResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalLvpConfigResponse) string { return v.Path }).(pulumi.StringOutput)
}

// The StorageClass name that PVs will be created with.
func (o BareMetalLvpConfigResponseOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalLvpConfigResponse) string { return v.StorageClass }).(pulumi.StringOutput)
}

// Specifies the configs for local persistent volumes under a shared file system.
type BareMetalLvpShareConfig struct {
	// Defines the machine path and storage class for the LVP Share.
	LvpConfig BareMetalLvpConfig `pulumi:"lvpConfig"`
	// The number of subdirectories to create under path.
	SharedPathPvCount *int `pulumi:"sharedPathPvCount"`
}

// BareMetalLvpShareConfigInput is an input type that accepts BareMetalLvpShareConfigArgs and BareMetalLvpShareConfigOutput values.
// You can construct a concrete instance of `BareMetalLvpShareConfigInput` via:
//
//	BareMetalLvpShareConfigArgs{...}
type BareMetalLvpShareConfigInput interface {
	pulumi.Input

	ToBareMetalLvpShareConfigOutput() BareMetalLvpShareConfigOutput
	ToBareMetalLvpShareConfigOutputWithContext(context.Context) BareMetalLvpShareConfigOutput
}

// Specifies the configs for local persistent volumes under a shared file system.
type BareMetalLvpShareConfigArgs struct {
	// Defines the machine path and storage class for the LVP Share.
	LvpConfig BareMetalLvpConfigInput `pulumi:"lvpConfig"`
	// The number of subdirectories to create under path.
	SharedPathPvCount pulumi.IntPtrInput `pulumi:"sharedPathPvCount"`
}

func (BareMetalLvpShareConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLvpShareConfig)(nil)).Elem()
}

func (i BareMetalLvpShareConfigArgs) ToBareMetalLvpShareConfigOutput() BareMetalLvpShareConfigOutput {
	return i.ToBareMetalLvpShareConfigOutputWithContext(context.Background())
}

func (i BareMetalLvpShareConfigArgs) ToBareMetalLvpShareConfigOutputWithContext(ctx context.Context) BareMetalLvpShareConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLvpShareConfigOutput)
}

func (i BareMetalLvpShareConfigArgs) ToBareMetalLvpShareConfigPtrOutput() BareMetalLvpShareConfigPtrOutput {
	return i.ToBareMetalLvpShareConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalLvpShareConfigArgs) ToBareMetalLvpShareConfigPtrOutputWithContext(ctx context.Context) BareMetalLvpShareConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLvpShareConfigOutput).ToBareMetalLvpShareConfigPtrOutputWithContext(ctx)
}

// BareMetalLvpShareConfigPtrInput is an input type that accepts BareMetalLvpShareConfigArgs, BareMetalLvpShareConfigPtr and BareMetalLvpShareConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalLvpShareConfigPtrInput` via:
//
//	        BareMetalLvpShareConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalLvpShareConfigPtrInput interface {
	pulumi.Input

	ToBareMetalLvpShareConfigPtrOutput() BareMetalLvpShareConfigPtrOutput
	ToBareMetalLvpShareConfigPtrOutputWithContext(context.Context) BareMetalLvpShareConfigPtrOutput
}

type bareMetalLvpShareConfigPtrType BareMetalLvpShareConfigArgs

func BareMetalLvpShareConfigPtr(v *BareMetalLvpShareConfigArgs) BareMetalLvpShareConfigPtrInput {
	return (*bareMetalLvpShareConfigPtrType)(v)
}

func (*bareMetalLvpShareConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalLvpShareConfig)(nil)).Elem()
}

func (i *bareMetalLvpShareConfigPtrType) ToBareMetalLvpShareConfigPtrOutput() BareMetalLvpShareConfigPtrOutput {
	return i.ToBareMetalLvpShareConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalLvpShareConfigPtrType) ToBareMetalLvpShareConfigPtrOutputWithContext(ctx context.Context) BareMetalLvpShareConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalLvpShareConfigPtrOutput)
}

// Specifies the configs for local persistent volumes under a shared file system.
type BareMetalLvpShareConfigOutput struct{ *pulumi.OutputState }

func (BareMetalLvpShareConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLvpShareConfig)(nil)).Elem()
}

func (o BareMetalLvpShareConfigOutput) ToBareMetalLvpShareConfigOutput() BareMetalLvpShareConfigOutput {
	return o
}

func (o BareMetalLvpShareConfigOutput) ToBareMetalLvpShareConfigOutputWithContext(ctx context.Context) BareMetalLvpShareConfigOutput {
	return o
}

func (o BareMetalLvpShareConfigOutput) ToBareMetalLvpShareConfigPtrOutput() BareMetalLvpShareConfigPtrOutput {
	return o.ToBareMetalLvpShareConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalLvpShareConfigOutput) ToBareMetalLvpShareConfigPtrOutputWithContext(ctx context.Context) BareMetalLvpShareConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalLvpShareConfig) *BareMetalLvpShareConfig {
		return &v
	}).(BareMetalLvpShareConfigPtrOutput)
}

// Defines the machine path and storage class for the LVP Share.
func (o BareMetalLvpShareConfigOutput) LvpConfig() BareMetalLvpConfigOutput {
	return o.ApplyT(func(v BareMetalLvpShareConfig) BareMetalLvpConfig { return v.LvpConfig }).(BareMetalLvpConfigOutput)
}

// The number of subdirectories to create under path.
func (o BareMetalLvpShareConfigOutput) SharedPathPvCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BareMetalLvpShareConfig) *int { return v.SharedPathPvCount }).(pulumi.IntPtrOutput)
}

type BareMetalLvpShareConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalLvpShareConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalLvpShareConfig)(nil)).Elem()
}

func (o BareMetalLvpShareConfigPtrOutput) ToBareMetalLvpShareConfigPtrOutput() BareMetalLvpShareConfigPtrOutput {
	return o
}

func (o BareMetalLvpShareConfigPtrOutput) ToBareMetalLvpShareConfigPtrOutputWithContext(ctx context.Context) BareMetalLvpShareConfigPtrOutput {
	return o
}

func (o BareMetalLvpShareConfigPtrOutput) Elem() BareMetalLvpShareConfigOutput {
	return o.ApplyT(func(v *BareMetalLvpShareConfig) BareMetalLvpShareConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalLvpShareConfig
		return ret
	}).(BareMetalLvpShareConfigOutput)
}

// Defines the machine path and storage class for the LVP Share.
func (o BareMetalLvpShareConfigPtrOutput) LvpConfig() BareMetalLvpConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalLvpShareConfig) *BareMetalLvpConfig {
		if v == nil {
			return nil
		}
		return &v.LvpConfig
	}).(BareMetalLvpConfigPtrOutput)
}

// The number of subdirectories to create under path.
func (o BareMetalLvpShareConfigPtrOutput) SharedPathPvCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BareMetalLvpShareConfig) *int {
		if v == nil {
			return nil
		}
		return v.SharedPathPvCount
	}).(pulumi.IntPtrOutput)
}

// Specifies the configs for local persistent volumes under a shared file system.
type BareMetalLvpShareConfigResponse struct {
	// Defines the machine path and storage class for the LVP Share.
	LvpConfig BareMetalLvpConfigResponse `pulumi:"lvpConfig"`
	// The number of subdirectories to create under path.
	SharedPathPvCount int `pulumi:"sharedPathPvCount"`
}

// Specifies the configs for local persistent volumes under a shared file system.
type BareMetalLvpShareConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalLvpShareConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalLvpShareConfigResponse)(nil)).Elem()
}

func (o BareMetalLvpShareConfigResponseOutput) ToBareMetalLvpShareConfigResponseOutput() BareMetalLvpShareConfigResponseOutput {
	return o
}

func (o BareMetalLvpShareConfigResponseOutput) ToBareMetalLvpShareConfigResponseOutputWithContext(ctx context.Context) BareMetalLvpShareConfigResponseOutput {
	return o
}

// Defines the machine path and storage class for the LVP Share.
func (o BareMetalLvpShareConfigResponseOutput) LvpConfig() BareMetalLvpConfigResponseOutput {
	return o.ApplyT(func(v BareMetalLvpShareConfigResponse) BareMetalLvpConfigResponse { return v.LvpConfig }).(BareMetalLvpConfigResponseOutput)
}

// The number of subdirectories to create under path.
func (o BareMetalLvpShareConfigResponseOutput) SharedPathPvCount() pulumi.IntOutput {
	return o.ApplyT(func(v BareMetalLvpShareConfigResponse) int { return v.SharedPathPvCount }).(pulumi.IntOutput)
}

// Represents the status of node machines that are undergoing drain operations.
type BareMetalMachineDrainStatusResponse struct {
	// The list of drained machines.
	DrainedMachines []BareMetalDrainedMachineResponse `pulumi:"drainedMachines"`
	// The list of draning machines.
	DrainingMachines []BareMetalDrainingMachineResponse `pulumi:"drainingMachines"`
}

// Represents the status of node machines that are undergoing drain operations.
type BareMetalMachineDrainStatusResponseOutput struct{ *pulumi.OutputState }

func (BareMetalMachineDrainStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMachineDrainStatusResponse)(nil)).Elem()
}

func (o BareMetalMachineDrainStatusResponseOutput) ToBareMetalMachineDrainStatusResponseOutput() BareMetalMachineDrainStatusResponseOutput {
	return o
}

func (o BareMetalMachineDrainStatusResponseOutput) ToBareMetalMachineDrainStatusResponseOutputWithContext(ctx context.Context) BareMetalMachineDrainStatusResponseOutput {
	return o
}

// The list of drained machines.
func (o BareMetalMachineDrainStatusResponseOutput) DrainedMachines() BareMetalDrainedMachineResponseArrayOutput {
	return o.ApplyT(func(v BareMetalMachineDrainStatusResponse) []BareMetalDrainedMachineResponse {
		return v.DrainedMachines
	}).(BareMetalDrainedMachineResponseArrayOutput)
}

// The list of draning machines.
func (o BareMetalMachineDrainStatusResponseOutput) DrainingMachines() BareMetalDrainingMachineResponseArrayOutput {
	return o.ApplyT(func(v BareMetalMachineDrainStatusResponse) []BareMetalDrainingMachineResponse {
		return v.DrainingMachines
	}).(BareMetalDrainingMachineResponseArrayOutput)
}

// Specifies configurations to put bare metal nodes in and out of maintenance.
type BareMetalMaintenanceConfig struct {
	// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
	MaintenanceAddressCidrBlocks []string `pulumi:"maintenanceAddressCidrBlocks"`
}

// BareMetalMaintenanceConfigInput is an input type that accepts BareMetalMaintenanceConfigArgs and BareMetalMaintenanceConfigOutput values.
// You can construct a concrete instance of `BareMetalMaintenanceConfigInput` via:
//
//	BareMetalMaintenanceConfigArgs{...}
type BareMetalMaintenanceConfigInput interface {
	pulumi.Input

	ToBareMetalMaintenanceConfigOutput() BareMetalMaintenanceConfigOutput
	ToBareMetalMaintenanceConfigOutputWithContext(context.Context) BareMetalMaintenanceConfigOutput
}

// Specifies configurations to put bare metal nodes in and out of maintenance.
type BareMetalMaintenanceConfigArgs struct {
	// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
	MaintenanceAddressCidrBlocks pulumi.StringArrayInput `pulumi:"maintenanceAddressCidrBlocks"`
}

func (BareMetalMaintenanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMaintenanceConfig)(nil)).Elem()
}

func (i BareMetalMaintenanceConfigArgs) ToBareMetalMaintenanceConfigOutput() BareMetalMaintenanceConfigOutput {
	return i.ToBareMetalMaintenanceConfigOutputWithContext(context.Background())
}

func (i BareMetalMaintenanceConfigArgs) ToBareMetalMaintenanceConfigOutputWithContext(ctx context.Context) BareMetalMaintenanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMaintenanceConfigOutput)
}

func (i BareMetalMaintenanceConfigArgs) ToBareMetalMaintenanceConfigPtrOutput() BareMetalMaintenanceConfigPtrOutput {
	return i.ToBareMetalMaintenanceConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalMaintenanceConfigArgs) ToBareMetalMaintenanceConfigPtrOutputWithContext(ctx context.Context) BareMetalMaintenanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMaintenanceConfigOutput).ToBareMetalMaintenanceConfigPtrOutputWithContext(ctx)
}

// BareMetalMaintenanceConfigPtrInput is an input type that accepts BareMetalMaintenanceConfigArgs, BareMetalMaintenanceConfigPtr and BareMetalMaintenanceConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalMaintenanceConfigPtrInput` via:
//
//	        BareMetalMaintenanceConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalMaintenanceConfigPtrInput interface {
	pulumi.Input

	ToBareMetalMaintenanceConfigPtrOutput() BareMetalMaintenanceConfigPtrOutput
	ToBareMetalMaintenanceConfigPtrOutputWithContext(context.Context) BareMetalMaintenanceConfigPtrOutput
}

type bareMetalMaintenanceConfigPtrType BareMetalMaintenanceConfigArgs

func BareMetalMaintenanceConfigPtr(v *BareMetalMaintenanceConfigArgs) BareMetalMaintenanceConfigPtrInput {
	return (*bareMetalMaintenanceConfigPtrType)(v)
}

func (*bareMetalMaintenanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalMaintenanceConfig)(nil)).Elem()
}

func (i *bareMetalMaintenanceConfigPtrType) ToBareMetalMaintenanceConfigPtrOutput() BareMetalMaintenanceConfigPtrOutput {
	return i.ToBareMetalMaintenanceConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalMaintenanceConfigPtrType) ToBareMetalMaintenanceConfigPtrOutputWithContext(ctx context.Context) BareMetalMaintenanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMaintenanceConfigPtrOutput)
}

// Specifies configurations to put bare metal nodes in and out of maintenance.
type BareMetalMaintenanceConfigOutput struct{ *pulumi.OutputState }

func (BareMetalMaintenanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMaintenanceConfig)(nil)).Elem()
}

func (o BareMetalMaintenanceConfigOutput) ToBareMetalMaintenanceConfigOutput() BareMetalMaintenanceConfigOutput {
	return o
}

func (o BareMetalMaintenanceConfigOutput) ToBareMetalMaintenanceConfigOutputWithContext(ctx context.Context) BareMetalMaintenanceConfigOutput {
	return o
}

func (o BareMetalMaintenanceConfigOutput) ToBareMetalMaintenanceConfigPtrOutput() BareMetalMaintenanceConfigPtrOutput {
	return o.ToBareMetalMaintenanceConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalMaintenanceConfigOutput) ToBareMetalMaintenanceConfigPtrOutputWithContext(ctx context.Context) BareMetalMaintenanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalMaintenanceConfig) *BareMetalMaintenanceConfig {
		return &v
	}).(BareMetalMaintenanceConfigPtrOutput)
}

// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
func (o BareMetalMaintenanceConfigOutput) MaintenanceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalMaintenanceConfig) []string { return v.MaintenanceAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

type BareMetalMaintenanceConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalMaintenanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalMaintenanceConfig)(nil)).Elem()
}

func (o BareMetalMaintenanceConfigPtrOutput) ToBareMetalMaintenanceConfigPtrOutput() BareMetalMaintenanceConfigPtrOutput {
	return o
}

func (o BareMetalMaintenanceConfigPtrOutput) ToBareMetalMaintenanceConfigPtrOutputWithContext(ctx context.Context) BareMetalMaintenanceConfigPtrOutput {
	return o
}

func (o BareMetalMaintenanceConfigPtrOutput) Elem() BareMetalMaintenanceConfigOutput {
	return o.ApplyT(func(v *BareMetalMaintenanceConfig) BareMetalMaintenanceConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalMaintenanceConfig
		return ret
	}).(BareMetalMaintenanceConfigOutput)
}

// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
func (o BareMetalMaintenanceConfigPtrOutput) MaintenanceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BareMetalMaintenanceConfig) []string {
		if v == nil {
			return nil
		}
		return v.MaintenanceAddressCidrBlocks
	}).(pulumi.StringArrayOutput)
}

// Specifies configurations to put bare metal nodes in and out of maintenance.
type BareMetalMaintenanceConfigResponse struct {
	// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
	MaintenanceAddressCidrBlocks []string `pulumi:"maintenanceAddressCidrBlocks"`
}

// Specifies configurations to put bare metal nodes in and out of maintenance.
type BareMetalMaintenanceConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalMaintenanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMaintenanceConfigResponse)(nil)).Elem()
}

func (o BareMetalMaintenanceConfigResponseOutput) ToBareMetalMaintenanceConfigResponseOutput() BareMetalMaintenanceConfigResponseOutput {
	return o
}

func (o BareMetalMaintenanceConfigResponseOutput) ToBareMetalMaintenanceConfigResponseOutputWithContext(ctx context.Context) BareMetalMaintenanceConfigResponseOutput {
	return o
}

// All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the "baremetal.cluster.gke.io/maintenance" annotation will be set on the node resource.
func (o BareMetalMaintenanceConfigResponseOutput) MaintenanceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalMaintenanceConfigResponse) []string { return v.MaintenanceAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// Represents the maintenance status of the bare metal user cluster.
type BareMetalMaintenanceStatusResponse struct {
	// The maintenance status of node machines.
	MachineDrainStatus BareMetalMachineDrainStatusResponse `pulumi:"machineDrainStatus"`
}

// Represents the maintenance status of the bare metal user cluster.
type BareMetalMaintenanceStatusResponseOutput struct{ *pulumi.OutputState }

func (BareMetalMaintenanceStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMaintenanceStatusResponse)(nil)).Elem()
}

func (o BareMetalMaintenanceStatusResponseOutput) ToBareMetalMaintenanceStatusResponseOutput() BareMetalMaintenanceStatusResponseOutput {
	return o
}

func (o BareMetalMaintenanceStatusResponseOutput) ToBareMetalMaintenanceStatusResponseOutputWithContext(ctx context.Context) BareMetalMaintenanceStatusResponseOutput {
	return o
}

// The maintenance status of node machines.
func (o BareMetalMaintenanceStatusResponseOutput) MachineDrainStatus() BareMetalMachineDrainStatusResponseOutput {
	return o.ApplyT(func(v BareMetalMaintenanceStatusResponse) BareMetalMachineDrainStatusResponse {
		return v.MachineDrainStatus
	}).(BareMetalMachineDrainStatusResponseOutput)
}

// Represents configuration parameters for a manual load balancer.
type BareMetalManualLbConfig struct {
	// Whether manual load balancing is enabled.
	Enabled *bool `pulumi:"enabled"`
}

// BareMetalManualLbConfigInput is an input type that accepts BareMetalManualLbConfigArgs and BareMetalManualLbConfigOutput values.
// You can construct a concrete instance of `BareMetalManualLbConfigInput` via:
//
//	BareMetalManualLbConfigArgs{...}
type BareMetalManualLbConfigInput interface {
	pulumi.Input

	ToBareMetalManualLbConfigOutput() BareMetalManualLbConfigOutput
	ToBareMetalManualLbConfigOutputWithContext(context.Context) BareMetalManualLbConfigOutput
}

// Represents configuration parameters for a manual load balancer.
type BareMetalManualLbConfigArgs struct {
	// Whether manual load balancing is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (BareMetalManualLbConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalManualLbConfig)(nil)).Elem()
}

func (i BareMetalManualLbConfigArgs) ToBareMetalManualLbConfigOutput() BareMetalManualLbConfigOutput {
	return i.ToBareMetalManualLbConfigOutputWithContext(context.Background())
}

func (i BareMetalManualLbConfigArgs) ToBareMetalManualLbConfigOutputWithContext(ctx context.Context) BareMetalManualLbConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalManualLbConfigOutput)
}

func (i BareMetalManualLbConfigArgs) ToBareMetalManualLbConfigPtrOutput() BareMetalManualLbConfigPtrOutput {
	return i.ToBareMetalManualLbConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalManualLbConfigArgs) ToBareMetalManualLbConfigPtrOutputWithContext(ctx context.Context) BareMetalManualLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalManualLbConfigOutput).ToBareMetalManualLbConfigPtrOutputWithContext(ctx)
}

// BareMetalManualLbConfigPtrInput is an input type that accepts BareMetalManualLbConfigArgs, BareMetalManualLbConfigPtr and BareMetalManualLbConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalManualLbConfigPtrInput` via:
//
//	        BareMetalManualLbConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalManualLbConfigPtrInput interface {
	pulumi.Input

	ToBareMetalManualLbConfigPtrOutput() BareMetalManualLbConfigPtrOutput
	ToBareMetalManualLbConfigPtrOutputWithContext(context.Context) BareMetalManualLbConfigPtrOutput
}

type bareMetalManualLbConfigPtrType BareMetalManualLbConfigArgs

func BareMetalManualLbConfigPtr(v *BareMetalManualLbConfigArgs) BareMetalManualLbConfigPtrInput {
	return (*bareMetalManualLbConfigPtrType)(v)
}

func (*bareMetalManualLbConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalManualLbConfig)(nil)).Elem()
}

func (i *bareMetalManualLbConfigPtrType) ToBareMetalManualLbConfigPtrOutput() BareMetalManualLbConfigPtrOutput {
	return i.ToBareMetalManualLbConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalManualLbConfigPtrType) ToBareMetalManualLbConfigPtrOutputWithContext(ctx context.Context) BareMetalManualLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalManualLbConfigPtrOutput)
}

// Represents configuration parameters for a manual load balancer.
type BareMetalManualLbConfigOutput struct{ *pulumi.OutputState }

func (BareMetalManualLbConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalManualLbConfig)(nil)).Elem()
}

func (o BareMetalManualLbConfigOutput) ToBareMetalManualLbConfigOutput() BareMetalManualLbConfigOutput {
	return o
}

func (o BareMetalManualLbConfigOutput) ToBareMetalManualLbConfigOutputWithContext(ctx context.Context) BareMetalManualLbConfigOutput {
	return o
}

func (o BareMetalManualLbConfigOutput) ToBareMetalManualLbConfigPtrOutput() BareMetalManualLbConfigPtrOutput {
	return o.ToBareMetalManualLbConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalManualLbConfigOutput) ToBareMetalManualLbConfigPtrOutputWithContext(ctx context.Context) BareMetalManualLbConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalManualLbConfig) *BareMetalManualLbConfig {
		return &v
	}).(BareMetalManualLbConfigPtrOutput)
}

// Whether manual load balancing is enabled.
func (o BareMetalManualLbConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalManualLbConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type BareMetalManualLbConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalManualLbConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalManualLbConfig)(nil)).Elem()
}

func (o BareMetalManualLbConfigPtrOutput) ToBareMetalManualLbConfigPtrOutput() BareMetalManualLbConfigPtrOutput {
	return o
}

func (o BareMetalManualLbConfigPtrOutput) ToBareMetalManualLbConfigPtrOutputWithContext(ctx context.Context) BareMetalManualLbConfigPtrOutput {
	return o
}

func (o BareMetalManualLbConfigPtrOutput) Elem() BareMetalManualLbConfigOutput {
	return o.ApplyT(func(v *BareMetalManualLbConfig) BareMetalManualLbConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalManualLbConfig
		return ret
	}).(BareMetalManualLbConfigOutput)
}

// Whether manual load balancing is enabled.
func (o BareMetalManualLbConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalManualLbConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Represents configuration parameters for a manual load balancer.
type BareMetalManualLbConfigResponse struct {
	// Whether manual load balancing is enabled.
	Enabled bool `pulumi:"enabled"`
}

// Represents configuration parameters for a manual load balancer.
type BareMetalManualLbConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalManualLbConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalManualLbConfigResponse)(nil)).Elem()
}

func (o BareMetalManualLbConfigResponseOutput) ToBareMetalManualLbConfigResponseOutput() BareMetalManualLbConfigResponseOutput {
	return o
}

func (o BareMetalManualLbConfigResponseOutput) ToBareMetalManualLbConfigResponseOutputWithContext(ctx context.Context) BareMetalManualLbConfigResponseOutput {
	return o
}

// Whether manual load balancing is enabled.
func (o BareMetalManualLbConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalManualLbConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Represents configuration parameters for a MetalLB load balancer.
type BareMetalMetalLbConfig struct {
	// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
	AddressPools []BareMetalLoadBalancerAddressPool `pulumi:"addressPools"`
	// Specifies the node pool running the load balancer. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used as the load balancer pool.
	LoadBalancerNodePoolConfig *BareMetalLoadBalancerNodePoolConfig `pulumi:"loadBalancerNodePoolConfig"`
}

// BareMetalMetalLbConfigInput is an input type that accepts BareMetalMetalLbConfigArgs and BareMetalMetalLbConfigOutput values.
// You can construct a concrete instance of `BareMetalMetalLbConfigInput` via:
//
//	BareMetalMetalLbConfigArgs{...}
type BareMetalMetalLbConfigInput interface {
	pulumi.Input

	ToBareMetalMetalLbConfigOutput() BareMetalMetalLbConfigOutput
	ToBareMetalMetalLbConfigOutputWithContext(context.Context) BareMetalMetalLbConfigOutput
}

// Represents configuration parameters for a MetalLB load balancer.
type BareMetalMetalLbConfigArgs struct {
	// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
	AddressPools BareMetalLoadBalancerAddressPoolArrayInput `pulumi:"addressPools"`
	// Specifies the node pool running the load balancer. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used as the load balancer pool.
	LoadBalancerNodePoolConfig BareMetalLoadBalancerNodePoolConfigPtrInput `pulumi:"loadBalancerNodePoolConfig"`
}

func (BareMetalMetalLbConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMetalLbConfig)(nil)).Elem()
}

func (i BareMetalMetalLbConfigArgs) ToBareMetalMetalLbConfigOutput() BareMetalMetalLbConfigOutput {
	return i.ToBareMetalMetalLbConfigOutputWithContext(context.Background())
}

func (i BareMetalMetalLbConfigArgs) ToBareMetalMetalLbConfigOutputWithContext(ctx context.Context) BareMetalMetalLbConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMetalLbConfigOutput)
}

func (i BareMetalMetalLbConfigArgs) ToBareMetalMetalLbConfigPtrOutput() BareMetalMetalLbConfigPtrOutput {
	return i.ToBareMetalMetalLbConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalMetalLbConfigArgs) ToBareMetalMetalLbConfigPtrOutputWithContext(ctx context.Context) BareMetalMetalLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMetalLbConfigOutput).ToBareMetalMetalLbConfigPtrOutputWithContext(ctx)
}

// BareMetalMetalLbConfigPtrInput is an input type that accepts BareMetalMetalLbConfigArgs, BareMetalMetalLbConfigPtr and BareMetalMetalLbConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalMetalLbConfigPtrInput` via:
//
//	        BareMetalMetalLbConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalMetalLbConfigPtrInput interface {
	pulumi.Input

	ToBareMetalMetalLbConfigPtrOutput() BareMetalMetalLbConfigPtrOutput
	ToBareMetalMetalLbConfigPtrOutputWithContext(context.Context) BareMetalMetalLbConfigPtrOutput
}

type bareMetalMetalLbConfigPtrType BareMetalMetalLbConfigArgs

func BareMetalMetalLbConfigPtr(v *BareMetalMetalLbConfigArgs) BareMetalMetalLbConfigPtrInput {
	return (*bareMetalMetalLbConfigPtrType)(v)
}

func (*bareMetalMetalLbConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalMetalLbConfig)(nil)).Elem()
}

func (i *bareMetalMetalLbConfigPtrType) ToBareMetalMetalLbConfigPtrOutput() BareMetalMetalLbConfigPtrOutput {
	return i.ToBareMetalMetalLbConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalMetalLbConfigPtrType) ToBareMetalMetalLbConfigPtrOutputWithContext(ctx context.Context) BareMetalMetalLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMetalLbConfigPtrOutput)
}

// Represents configuration parameters for a MetalLB load balancer.
type BareMetalMetalLbConfigOutput struct{ *pulumi.OutputState }

func (BareMetalMetalLbConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMetalLbConfig)(nil)).Elem()
}

func (o BareMetalMetalLbConfigOutput) ToBareMetalMetalLbConfigOutput() BareMetalMetalLbConfigOutput {
	return o
}

func (o BareMetalMetalLbConfigOutput) ToBareMetalMetalLbConfigOutputWithContext(ctx context.Context) BareMetalMetalLbConfigOutput {
	return o
}

func (o BareMetalMetalLbConfigOutput) ToBareMetalMetalLbConfigPtrOutput() BareMetalMetalLbConfigPtrOutput {
	return o.ToBareMetalMetalLbConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalMetalLbConfigOutput) ToBareMetalMetalLbConfigPtrOutputWithContext(ctx context.Context) BareMetalMetalLbConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalMetalLbConfig) *BareMetalMetalLbConfig {
		return &v
	}).(BareMetalMetalLbConfigPtrOutput)
}

// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
func (o BareMetalMetalLbConfigOutput) AddressPools() BareMetalLoadBalancerAddressPoolArrayOutput {
	return o.ApplyT(func(v BareMetalMetalLbConfig) []BareMetalLoadBalancerAddressPool { return v.AddressPools }).(BareMetalLoadBalancerAddressPoolArrayOutput)
}

// Specifies the node pool running the load balancer. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used as the load balancer pool.
func (o BareMetalMetalLbConfigOutput) LoadBalancerNodePoolConfig() BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return o.ApplyT(func(v BareMetalMetalLbConfig) *BareMetalLoadBalancerNodePoolConfig {
		return v.LoadBalancerNodePoolConfig
	}).(BareMetalLoadBalancerNodePoolConfigPtrOutput)
}

type BareMetalMetalLbConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalMetalLbConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalMetalLbConfig)(nil)).Elem()
}

func (o BareMetalMetalLbConfigPtrOutput) ToBareMetalMetalLbConfigPtrOutput() BareMetalMetalLbConfigPtrOutput {
	return o
}

func (o BareMetalMetalLbConfigPtrOutput) ToBareMetalMetalLbConfigPtrOutputWithContext(ctx context.Context) BareMetalMetalLbConfigPtrOutput {
	return o
}

func (o BareMetalMetalLbConfigPtrOutput) Elem() BareMetalMetalLbConfigOutput {
	return o.ApplyT(func(v *BareMetalMetalLbConfig) BareMetalMetalLbConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalMetalLbConfig
		return ret
	}).(BareMetalMetalLbConfigOutput)
}

// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
func (o BareMetalMetalLbConfigPtrOutput) AddressPools() BareMetalLoadBalancerAddressPoolArrayOutput {
	return o.ApplyT(func(v *BareMetalMetalLbConfig) []BareMetalLoadBalancerAddressPool {
		if v == nil {
			return nil
		}
		return v.AddressPools
	}).(BareMetalLoadBalancerAddressPoolArrayOutput)
}

// Specifies the node pool running the load balancer. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used as the load balancer pool.
func (o BareMetalMetalLbConfigPtrOutput) LoadBalancerNodePoolConfig() BareMetalLoadBalancerNodePoolConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalMetalLbConfig) *BareMetalLoadBalancerNodePoolConfig {
		if v == nil {
			return nil
		}
		return v.LoadBalancerNodePoolConfig
	}).(BareMetalLoadBalancerNodePoolConfigPtrOutput)
}

// Represents configuration parameters for a MetalLB load balancer.
type BareMetalMetalLbConfigResponse struct {
	// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
	AddressPools []BareMetalLoadBalancerAddressPoolResponse `pulumi:"addressPools"`
	// Specifies the node pool running the load balancer. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used as the load balancer pool.
	LoadBalancerNodePoolConfig BareMetalLoadBalancerNodePoolConfigResponse `pulumi:"loadBalancerNodePoolConfig"`
}

// Represents configuration parameters for a MetalLB load balancer.
type BareMetalMetalLbConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalMetalLbConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMetalLbConfigResponse)(nil)).Elem()
}

func (o BareMetalMetalLbConfigResponseOutput) ToBareMetalMetalLbConfigResponseOutput() BareMetalMetalLbConfigResponseOutput {
	return o
}

func (o BareMetalMetalLbConfigResponseOutput) ToBareMetalMetalLbConfigResponseOutputWithContext(ctx context.Context) BareMetalMetalLbConfigResponseOutput {
	return o
}

// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
func (o BareMetalMetalLbConfigResponseOutput) AddressPools() BareMetalLoadBalancerAddressPoolResponseArrayOutput {
	return o.ApplyT(func(v BareMetalMetalLbConfigResponse) []BareMetalLoadBalancerAddressPoolResponse {
		return v.AddressPools
	}).(BareMetalLoadBalancerAddressPoolResponseArrayOutput)
}

// Specifies the node pool running the load balancer. L2 connectivity is required among nodes in this pool. If missing, the control plane node pool is used as the load balancer pool.
func (o BareMetalMetalLbConfigResponseOutput) LoadBalancerNodePoolConfig() BareMetalLoadBalancerNodePoolConfigResponseOutput {
	return o.ApplyT(func(v BareMetalMetalLbConfigResponse) BareMetalLoadBalancerNodePoolConfigResponse {
		return v.LoadBalancerNodePoolConfig
	}).(BareMetalLoadBalancerNodePoolConfigResponseOutput)
}

// Specifies the multiple networking interfaces cluster configuration.
type BareMetalMultipleNetworkInterfacesConfig struct {
	// Whether to enable multiple network interfaces for your pods. When set network_config.advanced_networking is automatically set to true.
	Enabled *bool `pulumi:"enabled"`
}

// BareMetalMultipleNetworkInterfacesConfigInput is an input type that accepts BareMetalMultipleNetworkInterfacesConfigArgs and BareMetalMultipleNetworkInterfacesConfigOutput values.
// You can construct a concrete instance of `BareMetalMultipleNetworkInterfacesConfigInput` via:
//
//	BareMetalMultipleNetworkInterfacesConfigArgs{...}
type BareMetalMultipleNetworkInterfacesConfigInput interface {
	pulumi.Input

	ToBareMetalMultipleNetworkInterfacesConfigOutput() BareMetalMultipleNetworkInterfacesConfigOutput
	ToBareMetalMultipleNetworkInterfacesConfigOutputWithContext(context.Context) BareMetalMultipleNetworkInterfacesConfigOutput
}

// Specifies the multiple networking interfaces cluster configuration.
type BareMetalMultipleNetworkInterfacesConfigArgs struct {
	// Whether to enable multiple network interfaces for your pods. When set network_config.advanced_networking is automatically set to true.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (BareMetalMultipleNetworkInterfacesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMultipleNetworkInterfacesConfig)(nil)).Elem()
}

func (i BareMetalMultipleNetworkInterfacesConfigArgs) ToBareMetalMultipleNetworkInterfacesConfigOutput() BareMetalMultipleNetworkInterfacesConfigOutput {
	return i.ToBareMetalMultipleNetworkInterfacesConfigOutputWithContext(context.Background())
}

func (i BareMetalMultipleNetworkInterfacesConfigArgs) ToBareMetalMultipleNetworkInterfacesConfigOutputWithContext(ctx context.Context) BareMetalMultipleNetworkInterfacesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMultipleNetworkInterfacesConfigOutput)
}

func (i BareMetalMultipleNetworkInterfacesConfigArgs) ToBareMetalMultipleNetworkInterfacesConfigPtrOutput() BareMetalMultipleNetworkInterfacesConfigPtrOutput {
	return i.ToBareMetalMultipleNetworkInterfacesConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalMultipleNetworkInterfacesConfigArgs) ToBareMetalMultipleNetworkInterfacesConfigPtrOutputWithContext(ctx context.Context) BareMetalMultipleNetworkInterfacesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMultipleNetworkInterfacesConfigOutput).ToBareMetalMultipleNetworkInterfacesConfigPtrOutputWithContext(ctx)
}

// BareMetalMultipleNetworkInterfacesConfigPtrInput is an input type that accepts BareMetalMultipleNetworkInterfacesConfigArgs, BareMetalMultipleNetworkInterfacesConfigPtr and BareMetalMultipleNetworkInterfacesConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalMultipleNetworkInterfacesConfigPtrInput` via:
//
//	        BareMetalMultipleNetworkInterfacesConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalMultipleNetworkInterfacesConfigPtrInput interface {
	pulumi.Input

	ToBareMetalMultipleNetworkInterfacesConfigPtrOutput() BareMetalMultipleNetworkInterfacesConfigPtrOutput
	ToBareMetalMultipleNetworkInterfacesConfigPtrOutputWithContext(context.Context) BareMetalMultipleNetworkInterfacesConfigPtrOutput
}

type bareMetalMultipleNetworkInterfacesConfigPtrType BareMetalMultipleNetworkInterfacesConfigArgs

func BareMetalMultipleNetworkInterfacesConfigPtr(v *BareMetalMultipleNetworkInterfacesConfigArgs) BareMetalMultipleNetworkInterfacesConfigPtrInput {
	return (*bareMetalMultipleNetworkInterfacesConfigPtrType)(v)
}

func (*bareMetalMultipleNetworkInterfacesConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalMultipleNetworkInterfacesConfig)(nil)).Elem()
}

func (i *bareMetalMultipleNetworkInterfacesConfigPtrType) ToBareMetalMultipleNetworkInterfacesConfigPtrOutput() BareMetalMultipleNetworkInterfacesConfigPtrOutput {
	return i.ToBareMetalMultipleNetworkInterfacesConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalMultipleNetworkInterfacesConfigPtrType) ToBareMetalMultipleNetworkInterfacesConfigPtrOutputWithContext(ctx context.Context) BareMetalMultipleNetworkInterfacesConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMultipleNetworkInterfacesConfigPtrOutput)
}

// Specifies the multiple networking interfaces cluster configuration.
type BareMetalMultipleNetworkInterfacesConfigOutput struct{ *pulumi.OutputState }

func (BareMetalMultipleNetworkInterfacesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMultipleNetworkInterfacesConfig)(nil)).Elem()
}

func (o BareMetalMultipleNetworkInterfacesConfigOutput) ToBareMetalMultipleNetworkInterfacesConfigOutput() BareMetalMultipleNetworkInterfacesConfigOutput {
	return o
}

func (o BareMetalMultipleNetworkInterfacesConfigOutput) ToBareMetalMultipleNetworkInterfacesConfigOutputWithContext(ctx context.Context) BareMetalMultipleNetworkInterfacesConfigOutput {
	return o
}

func (o BareMetalMultipleNetworkInterfacesConfigOutput) ToBareMetalMultipleNetworkInterfacesConfigPtrOutput() BareMetalMultipleNetworkInterfacesConfigPtrOutput {
	return o.ToBareMetalMultipleNetworkInterfacesConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalMultipleNetworkInterfacesConfigOutput) ToBareMetalMultipleNetworkInterfacesConfigPtrOutputWithContext(ctx context.Context) BareMetalMultipleNetworkInterfacesConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalMultipleNetworkInterfacesConfig) *BareMetalMultipleNetworkInterfacesConfig {
		return &v
	}).(BareMetalMultipleNetworkInterfacesConfigPtrOutput)
}

// Whether to enable multiple network interfaces for your pods. When set network_config.advanced_networking is automatically set to true.
func (o BareMetalMultipleNetworkInterfacesConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalMultipleNetworkInterfacesConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type BareMetalMultipleNetworkInterfacesConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalMultipleNetworkInterfacesConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalMultipleNetworkInterfacesConfig)(nil)).Elem()
}

func (o BareMetalMultipleNetworkInterfacesConfigPtrOutput) ToBareMetalMultipleNetworkInterfacesConfigPtrOutput() BareMetalMultipleNetworkInterfacesConfigPtrOutput {
	return o
}

func (o BareMetalMultipleNetworkInterfacesConfigPtrOutput) ToBareMetalMultipleNetworkInterfacesConfigPtrOutputWithContext(ctx context.Context) BareMetalMultipleNetworkInterfacesConfigPtrOutput {
	return o
}

func (o BareMetalMultipleNetworkInterfacesConfigPtrOutput) Elem() BareMetalMultipleNetworkInterfacesConfigOutput {
	return o.ApplyT(func(v *BareMetalMultipleNetworkInterfacesConfig) BareMetalMultipleNetworkInterfacesConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalMultipleNetworkInterfacesConfig
		return ret
	}).(BareMetalMultipleNetworkInterfacesConfigOutput)
}

// Whether to enable multiple network interfaces for your pods. When set network_config.advanced_networking is automatically set to true.
func (o BareMetalMultipleNetworkInterfacesConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalMultipleNetworkInterfacesConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the multiple networking interfaces cluster configuration.
type BareMetalMultipleNetworkInterfacesConfigResponse struct {
	// Whether to enable multiple network interfaces for your pods. When set network_config.advanced_networking is automatically set to true.
	Enabled bool `pulumi:"enabled"`
}

// Specifies the multiple networking interfaces cluster configuration.
type BareMetalMultipleNetworkInterfacesConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalMultipleNetworkInterfacesConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMultipleNetworkInterfacesConfigResponse)(nil)).Elem()
}

func (o BareMetalMultipleNetworkInterfacesConfigResponseOutput) ToBareMetalMultipleNetworkInterfacesConfigResponseOutput() BareMetalMultipleNetworkInterfacesConfigResponseOutput {
	return o
}

func (o BareMetalMultipleNetworkInterfacesConfigResponseOutput) ToBareMetalMultipleNetworkInterfacesConfigResponseOutputWithContext(ctx context.Context) BareMetalMultipleNetworkInterfacesConfigResponseOutput {
	return o
}

// Whether to enable multiple network interfaces for your pods. When set network_config.advanced_networking is automatically set to true.
func (o BareMetalMultipleNetworkInterfacesConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalMultipleNetworkInterfacesConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies the cluster network configuration.
type BareMetalNetworkConfig struct {
	// Enables the use of advanced Anthos networking features, such as Bundled Load Balancing with BGP or the egress NAT gateway. Setting configuration for advanced networking features will automatically set this flag.
	AdvancedNetworking *bool `pulumi:"advancedNetworking"`
	// Configuration for island mode CIDR. In an island-mode network, nodes have unique IP addresses, but pods don't have unique addresses across clusters. This doesn't cause problems because pods in one cluster never directly communicate with pods in another cluster. Instead, there are gateways that mediate between a pod in one cluster and a pod in another cluster.
	IslandModeCidr *BareMetalIslandModeCidrConfig `pulumi:"islandModeCidr"`
	// Configuration for multiple network interfaces.
	MultipleNetworkInterfacesConfig *BareMetalMultipleNetworkInterfacesConfig `pulumi:"multipleNetworkInterfacesConfig"`
	// Configuration for SR-IOV.
	SrIovConfig *BareMetalSrIovConfig `pulumi:"srIovConfig"`
}

// BareMetalNetworkConfigInput is an input type that accepts BareMetalNetworkConfigArgs and BareMetalNetworkConfigOutput values.
// You can construct a concrete instance of `BareMetalNetworkConfigInput` via:
//
//	BareMetalNetworkConfigArgs{...}
type BareMetalNetworkConfigInput interface {
	pulumi.Input

	ToBareMetalNetworkConfigOutput() BareMetalNetworkConfigOutput
	ToBareMetalNetworkConfigOutputWithContext(context.Context) BareMetalNetworkConfigOutput
}

// Specifies the cluster network configuration.
type BareMetalNetworkConfigArgs struct {
	// Enables the use of advanced Anthos networking features, such as Bundled Load Balancing with BGP or the egress NAT gateway. Setting configuration for advanced networking features will automatically set this flag.
	AdvancedNetworking pulumi.BoolPtrInput `pulumi:"advancedNetworking"`
	// Configuration for island mode CIDR. In an island-mode network, nodes have unique IP addresses, but pods don't have unique addresses across clusters. This doesn't cause problems because pods in one cluster never directly communicate with pods in another cluster. Instead, there are gateways that mediate between a pod in one cluster and a pod in another cluster.
	IslandModeCidr BareMetalIslandModeCidrConfigPtrInput `pulumi:"islandModeCidr"`
	// Configuration for multiple network interfaces.
	MultipleNetworkInterfacesConfig BareMetalMultipleNetworkInterfacesConfigPtrInput `pulumi:"multipleNetworkInterfacesConfig"`
	// Configuration for SR-IOV.
	SrIovConfig BareMetalSrIovConfigPtrInput `pulumi:"srIovConfig"`
}

func (BareMetalNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNetworkConfig)(nil)).Elem()
}

func (i BareMetalNetworkConfigArgs) ToBareMetalNetworkConfigOutput() BareMetalNetworkConfigOutput {
	return i.ToBareMetalNetworkConfigOutputWithContext(context.Background())
}

func (i BareMetalNetworkConfigArgs) ToBareMetalNetworkConfigOutputWithContext(ctx context.Context) BareMetalNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNetworkConfigOutput)
}

// Specifies the cluster network configuration.
type BareMetalNetworkConfigOutput struct{ *pulumi.OutputState }

func (BareMetalNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNetworkConfig)(nil)).Elem()
}

func (o BareMetalNetworkConfigOutput) ToBareMetalNetworkConfigOutput() BareMetalNetworkConfigOutput {
	return o
}

func (o BareMetalNetworkConfigOutput) ToBareMetalNetworkConfigOutputWithContext(ctx context.Context) BareMetalNetworkConfigOutput {
	return o
}

// Enables the use of advanced Anthos networking features, such as Bundled Load Balancing with BGP or the egress NAT gateway. Setting configuration for advanced networking features will automatically set this flag.
func (o BareMetalNetworkConfigOutput) AdvancedNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalNetworkConfig) *bool { return v.AdvancedNetworking }).(pulumi.BoolPtrOutput)
}

// Configuration for island mode CIDR. In an island-mode network, nodes have unique IP addresses, but pods don't have unique addresses across clusters. This doesn't cause problems because pods in one cluster never directly communicate with pods in another cluster. Instead, there are gateways that mediate between a pod in one cluster and a pod in another cluster.
func (o BareMetalNetworkConfigOutput) IslandModeCidr() BareMetalIslandModeCidrConfigPtrOutput {
	return o.ApplyT(func(v BareMetalNetworkConfig) *BareMetalIslandModeCidrConfig { return v.IslandModeCidr }).(BareMetalIslandModeCidrConfigPtrOutput)
}

// Configuration for multiple network interfaces.
func (o BareMetalNetworkConfigOutput) MultipleNetworkInterfacesConfig() BareMetalMultipleNetworkInterfacesConfigPtrOutput {
	return o.ApplyT(func(v BareMetalNetworkConfig) *BareMetalMultipleNetworkInterfacesConfig {
		return v.MultipleNetworkInterfacesConfig
	}).(BareMetalMultipleNetworkInterfacesConfigPtrOutput)
}

// Configuration for SR-IOV.
func (o BareMetalNetworkConfigOutput) SrIovConfig() BareMetalSrIovConfigPtrOutput {
	return o.ApplyT(func(v BareMetalNetworkConfig) *BareMetalSrIovConfig { return v.SrIovConfig }).(BareMetalSrIovConfigPtrOutput)
}

// Specifies the cluster network configuration.
type BareMetalNetworkConfigResponse struct {
	// Enables the use of advanced Anthos networking features, such as Bundled Load Balancing with BGP or the egress NAT gateway. Setting configuration for advanced networking features will automatically set this flag.
	AdvancedNetworking bool `pulumi:"advancedNetworking"`
	// Configuration for island mode CIDR. In an island-mode network, nodes have unique IP addresses, but pods don't have unique addresses across clusters. This doesn't cause problems because pods in one cluster never directly communicate with pods in another cluster. Instead, there are gateways that mediate between a pod in one cluster and a pod in another cluster.
	IslandModeCidr BareMetalIslandModeCidrConfigResponse `pulumi:"islandModeCidr"`
	// Configuration for multiple network interfaces.
	MultipleNetworkInterfacesConfig BareMetalMultipleNetworkInterfacesConfigResponse `pulumi:"multipleNetworkInterfacesConfig"`
	// Configuration for SR-IOV.
	SrIovConfig BareMetalSrIovConfigResponse `pulumi:"srIovConfig"`
}

// Specifies the cluster network configuration.
type BareMetalNetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalNetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNetworkConfigResponse)(nil)).Elem()
}

func (o BareMetalNetworkConfigResponseOutput) ToBareMetalNetworkConfigResponseOutput() BareMetalNetworkConfigResponseOutput {
	return o
}

func (o BareMetalNetworkConfigResponseOutput) ToBareMetalNetworkConfigResponseOutputWithContext(ctx context.Context) BareMetalNetworkConfigResponseOutput {
	return o
}

// Enables the use of advanced Anthos networking features, such as Bundled Load Balancing with BGP or the egress NAT gateway. Setting configuration for advanced networking features will automatically set this flag.
func (o BareMetalNetworkConfigResponseOutput) AdvancedNetworking() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalNetworkConfigResponse) bool { return v.AdvancedNetworking }).(pulumi.BoolOutput)
}

// Configuration for island mode CIDR. In an island-mode network, nodes have unique IP addresses, but pods don't have unique addresses across clusters. This doesn't cause problems because pods in one cluster never directly communicate with pods in another cluster. Instead, there are gateways that mediate between a pod in one cluster and a pod in another cluster.
func (o BareMetalNetworkConfigResponseOutput) IslandModeCidr() BareMetalIslandModeCidrConfigResponseOutput {
	return o.ApplyT(func(v BareMetalNetworkConfigResponse) BareMetalIslandModeCidrConfigResponse { return v.IslandModeCidr }).(BareMetalIslandModeCidrConfigResponseOutput)
}

// Configuration for multiple network interfaces.
func (o BareMetalNetworkConfigResponseOutput) MultipleNetworkInterfacesConfig() BareMetalMultipleNetworkInterfacesConfigResponseOutput {
	return o.ApplyT(func(v BareMetalNetworkConfigResponse) BareMetalMultipleNetworkInterfacesConfigResponse {
		return v.MultipleNetworkInterfacesConfig
	}).(BareMetalMultipleNetworkInterfacesConfigResponseOutput)
}

// Configuration for SR-IOV.
func (o BareMetalNetworkConfigResponseOutput) SrIovConfig() BareMetalSrIovConfigResponseOutput {
	return o.ApplyT(func(v BareMetalNetworkConfigResponse) BareMetalSrIovConfigResponse { return v.SrIovConfig }).(BareMetalSrIovConfigResponseOutput)
}

// Specifies the node access related settings for the bare metal user cluster.
type BareMetalNodeAccessConfig struct {
	// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
	LoginUser *string `pulumi:"loginUser"`
}

// BareMetalNodeAccessConfigInput is an input type that accepts BareMetalNodeAccessConfigArgs and BareMetalNodeAccessConfigOutput values.
// You can construct a concrete instance of `BareMetalNodeAccessConfigInput` via:
//
//	BareMetalNodeAccessConfigArgs{...}
type BareMetalNodeAccessConfigInput interface {
	pulumi.Input

	ToBareMetalNodeAccessConfigOutput() BareMetalNodeAccessConfigOutput
	ToBareMetalNodeAccessConfigOutputWithContext(context.Context) BareMetalNodeAccessConfigOutput
}

// Specifies the node access related settings for the bare metal user cluster.
type BareMetalNodeAccessConfigArgs struct {
	// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
	LoginUser pulumi.StringPtrInput `pulumi:"loginUser"`
}

func (BareMetalNodeAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNodeAccessConfig)(nil)).Elem()
}

func (i BareMetalNodeAccessConfigArgs) ToBareMetalNodeAccessConfigOutput() BareMetalNodeAccessConfigOutput {
	return i.ToBareMetalNodeAccessConfigOutputWithContext(context.Background())
}

func (i BareMetalNodeAccessConfigArgs) ToBareMetalNodeAccessConfigOutputWithContext(ctx context.Context) BareMetalNodeAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodeAccessConfigOutput)
}

func (i BareMetalNodeAccessConfigArgs) ToBareMetalNodeAccessConfigPtrOutput() BareMetalNodeAccessConfigPtrOutput {
	return i.ToBareMetalNodeAccessConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalNodeAccessConfigArgs) ToBareMetalNodeAccessConfigPtrOutputWithContext(ctx context.Context) BareMetalNodeAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodeAccessConfigOutput).ToBareMetalNodeAccessConfigPtrOutputWithContext(ctx)
}

// BareMetalNodeAccessConfigPtrInput is an input type that accepts BareMetalNodeAccessConfigArgs, BareMetalNodeAccessConfigPtr and BareMetalNodeAccessConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalNodeAccessConfigPtrInput` via:
//
//	        BareMetalNodeAccessConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalNodeAccessConfigPtrInput interface {
	pulumi.Input

	ToBareMetalNodeAccessConfigPtrOutput() BareMetalNodeAccessConfigPtrOutput
	ToBareMetalNodeAccessConfigPtrOutputWithContext(context.Context) BareMetalNodeAccessConfigPtrOutput
}

type bareMetalNodeAccessConfigPtrType BareMetalNodeAccessConfigArgs

func BareMetalNodeAccessConfigPtr(v *BareMetalNodeAccessConfigArgs) BareMetalNodeAccessConfigPtrInput {
	return (*bareMetalNodeAccessConfigPtrType)(v)
}

func (*bareMetalNodeAccessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalNodeAccessConfig)(nil)).Elem()
}

func (i *bareMetalNodeAccessConfigPtrType) ToBareMetalNodeAccessConfigPtrOutput() BareMetalNodeAccessConfigPtrOutput {
	return i.ToBareMetalNodeAccessConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalNodeAccessConfigPtrType) ToBareMetalNodeAccessConfigPtrOutputWithContext(ctx context.Context) BareMetalNodeAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodeAccessConfigPtrOutput)
}

// Specifies the node access related settings for the bare metal user cluster.
type BareMetalNodeAccessConfigOutput struct{ *pulumi.OutputState }

func (BareMetalNodeAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNodeAccessConfig)(nil)).Elem()
}

func (o BareMetalNodeAccessConfigOutput) ToBareMetalNodeAccessConfigOutput() BareMetalNodeAccessConfigOutput {
	return o
}

func (o BareMetalNodeAccessConfigOutput) ToBareMetalNodeAccessConfigOutputWithContext(ctx context.Context) BareMetalNodeAccessConfigOutput {
	return o
}

func (o BareMetalNodeAccessConfigOutput) ToBareMetalNodeAccessConfigPtrOutput() BareMetalNodeAccessConfigPtrOutput {
	return o.ToBareMetalNodeAccessConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalNodeAccessConfigOutput) ToBareMetalNodeAccessConfigPtrOutputWithContext(ctx context.Context) BareMetalNodeAccessConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalNodeAccessConfig) *BareMetalNodeAccessConfig {
		return &v
	}).(BareMetalNodeAccessConfigPtrOutput)
}

// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
func (o BareMetalNodeAccessConfigOutput) LoginUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalNodeAccessConfig) *string { return v.LoginUser }).(pulumi.StringPtrOutput)
}

type BareMetalNodeAccessConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalNodeAccessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalNodeAccessConfig)(nil)).Elem()
}

func (o BareMetalNodeAccessConfigPtrOutput) ToBareMetalNodeAccessConfigPtrOutput() BareMetalNodeAccessConfigPtrOutput {
	return o
}

func (o BareMetalNodeAccessConfigPtrOutput) ToBareMetalNodeAccessConfigPtrOutputWithContext(ctx context.Context) BareMetalNodeAccessConfigPtrOutput {
	return o
}

func (o BareMetalNodeAccessConfigPtrOutput) Elem() BareMetalNodeAccessConfigOutput {
	return o.ApplyT(func(v *BareMetalNodeAccessConfig) BareMetalNodeAccessConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalNodeAccessConfig
		return ret
	}).(BareMetalNodeAccessConfigOutput)
}

// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
func (o BareMetalNodeAccessConfigPtrOutput) LoginUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalNodeAccessConfig) *string {
		if v == nil {
			return nil
		}
		return v.LoginUser
	}).(pulumi.StringPtrOutput)
}

// Specifies the node access related settings for the bare metal user cluster.
type BareMetalNodeAccessConfigResponse struct {
	// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
	LoginUser string `pulumi:"loginUser"`
}

// Specifies the node access related settings for the bare metal user cluster.
type BareMetalNodeAccessConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalNodeAccessConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNodeAccessConfigResponse)(nil)).Elem()
}

func (o BareMetalNodeAccessConfigResponseOutput) ToBareMetalNodeAccessConfigResponseOutput() BareMetalNodeAccessConfigResponseOutput {
	return o
}

func (o BareMetalNodeAccessConfigResponseOutput) ToBareMetalNodeAccessConfigResponseOutputWithContext(ctx context.Context) BareMetalNodeAccessConfigResponseOutput {
	return o
}

// LoginUser is the user name used to access node machines. It defaults to "root" if not set.
func (o BareMetalNodeAccessConfigResponseOutput) LoginUser() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalNodeAccessConfigResponse) string { return v.LoginUser }).(pulumi.StringOutput)
}

// BareMetalNodeConfig lists machine addresses to access Nodes.
type BareMetalNodeConfig struct {
	// The labels assigned to this node. An object containing a list of key/value pairs. The labels here, unioned with the labels set on BareMetalNodePoolConfig are the set of labels that will be applied to the node. If there are any conflicts, the BareMetalNodeConfig labels take precedence. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	Labels map[string]string `pulumi:"labels"`
	// The default IPv4 address for SSH access and Kubernetes node. Example: 192.168.0.1
	NodeIp *string `pulumi:"nodeIp"`
}

// BareMetalNodeConfigInput is an input type that accepts BareMetalNodeConfigArgs and BareMetalNodeConfigOutput values.
// You can construct a concrete instance of `BareMetalNodeConfigInput` via:
//
//	BareMetalNodeConfigArgs{...}
type BareMetalNodeConfigInput interface {
	pulumi.Input

	ToBareMetalNodeConfigOutput() BareMetalNodeConfigOutput
	ToBareMetalNodeConfigOutputWithContext(context.Context) BareMetalNodeConfigOutput
}

// BareMetalNodeConfig lists machine addresses to access Nodes.
type BareMetalNodeConfigArgs struct {
	// The labels assigned to this node. An object containing a list of key/value pairs. The labels here, unioned with the labels set on BareMetalNodePoolConfig are the set of labels that will be applied to the node. If there are any conflicts, the BareMetalNodeConfig labels take precedence. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The default IPv4 address for SSH access and Kubernetes node. Example: 192.168.0.1
	NodeIp pulumi.StringPtrInput `pulumi:"nodeIp"`
}

func (BareMetalNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNodeConfig)(nil)).Elem()
}

func (i BareMetalNodeConfigArgs) ToBareMetalNodeConfigOutput() BareMetalNodeConfigOutput {
	return i.ToBareMetalNodeConfigOutputWithContext(context.Background())
}

func (i BareMetalNodeConfigArgs) ToBareMetalNodeConfigOutputWithContext(ctx context.Context) BareMetalNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodeConfigOutput)
}

// BareMetalNodeConfigArrayInput is an input type that accepts BareMetalNodeConfigArray and BareMetalNodeConfigArrayOutput values.
// You can construct a concrete instance of `BareMetalNodeConfigArrayInput` via:
//
//	BareMetalNodeConfigArray{ BareMetalNodeConfigArgs{...} }
type BareMetalNodeConfigArrayInput interface {
	pulumi.Input

	ToBareMetalNodeConfigArrayOutput() BareMetalNodeConfigArrayOutput
	ToBareMetalNodeConfigArrayOutputWithContext(context.Context) BareMetalNodeConfigArrayOutput
}

type BareMetalNodeConfigArray []BareMetalNodeConfigInput

func (BareMetalNodeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalNodeConfig)(nil)).Elem()
}

func (i BareMetalNodeConfigArray) ToBareMetalNodeConfigArrayOutput() BareMetalNodeConfigArrayOutput {
	return i.ToBareMetalNodeConfigArrayOutputWithContext(context.Background())
}

func (i BareMetalNodeConfigArray) ToBareMetalNodeConfigArrayOutputWithContext(ctx context.Context) BareMetalNodeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodeConfigArrayOutput)
}

// BareMetalNodeConfig lists machine addresses to access Nodes.
type BareMetalNodeConfigOutput struct{ *pulumi.OutputState }

func (BareMetalNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNodeConfig)(nil)).Elem()
}

func (o BareMetalNodeConfigOutput) ToBareMetalNodeConfigOutput() BareMetalNodeConfigOutput {
	return o
}

func (o BareMetalNodeConfigOutput) ToBareMetalNodeConfigOutputWithContext(ctx context.Context) BareMetalNodeConfigOutput {
	return o
}

// The labels assigned to this node. An object containing a list of key/value pairs. The labels here, unioned with the labels set on BareMetalNodePoolConfig are the set of labels that will be applied to the node. If there are any conflicts, the BareMetalNodeConfig labels take precedence. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o BareMetalNodeConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v BareMetalNodeConfig) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The default IPv4 address for SSH access and Kubernetes node. Example: 192.168.0.1
func (o BareMetalNodeConfigOutput) NodeIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalNodeConfig) *string { return v.NodeIp }).(pulumi.StringPtrOutput)
}

type BareMetalNodeConfigArrayOutput struct{ *pulumi.OutputState }

func (BareMetalNodeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalNodeConfig)(nil)).Elem()
}

func (o BareMetalNodeConfigArrayOutput) ToBareMetalNodeConfigArrayOutput() BareMetalNodeConfigArrayOutput {
	return o
}

func (o BareMetalNodeConfigArrayOutput) ToBareMetalNodeConfigArrayOutputWithContext(ctx context.Context) BareMetalNodeConfigArrayOutput {
	return o
}

func (o BareMetalNodeConfigArrayOutput) Index(i pulumi.IntInput) BareMetalNodeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalNodeConfig {
		return vs[0].([]BareMetalNodeConfig)[vs[1].(int)]
	}).(BareMetalNodeConfigOutput)
}

// BareMetalNodeConfig lists machine addresses to access Nodes.
type BareMetalNodeConfigResponse struct {
	// The labels assigned to this node. An object containing a list of key/value pairs. The labels here, unioned with the labels set on BareMetalNodePoolConfig are the set of labels that will be applied to the node. If there are any conflicts, the BareMetalNodeConfig labels take precedence. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	Labels map[string]string `pulumi:"labels"`
	// The default IPv4 address for SSH access and Kubernetes node. Example: 192.168.0.1
	NodeIp string `pulumi:"nodeIp"`
}

// BareMetalNodeConfig lists machine addresses to access Nodes.
type BareMetalNodeConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalNodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNodeConfigResponse)(nil)).Elem()
}

func (o BareMetalNodeConfigResponseOutput) ToBareMetalNodeConfigResponseOutput() BareMetalNodeConfigResponseOutput {
	return o
}

func (o BareMetalNodeConfigResponseOutput) ToBareMetalNodeConfigResponseOutputWithContext(ctx context.Context) BareMetalNodeConfigResponseOutput {
	return o
}

// The labels assigned to this node. An object containing a list of key/value pairs. The labels here, unioned with the labels set on BareMetalNodePoolConfig are the set of labels that will be applied to the node. If there are any conflicts, the BareMetalNodeConfig labels take precedence. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o BareMetalNodeConfigResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v BareMetalNodeConfigResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The default IPv4 address for SSH access and Kubernetes node. Example: 192.168.0.1
func (o BareMetalNodeConfigResponseOutput) NodeIp() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalNodeConfigResponse) string { return v.NodeIp }).(pulumi.StringOutput)
}

type BareMetalNodeConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (BareMetalNodeConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalNodeConfigResponse)(nil)).Elem()
}

func (o BareMetalNodeConfigResponseArrayOutput) ToBareMetalNodeConfigResponseArrayOutput() BareMetalNodeConfigResponseArrayOutput {
	return o
}

func (o BareMetalNodeConfigResponseArrayOutput) ToBareMetalNodeConfigResponseArrayOutputWithContext(ctx context.Context) BareMetalNodeConfigResponseArrayOutput {
	return o
}

func (o BareMetalNodeConfigResponseArrayOutput) Index(i pulumi.IntInput) BareMetalNodeConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalNodeConfigResponse {
		return vs[0].([]BareMetalNodeConfigResponse)[vs[1].(int)]
	}).(BareMetalNodeConfigResponseOutput)
}

// BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
type BareMetalNodePoolConfig struct {
	// The modifiable kubelet configurations for the baremetal machines.
	KubeletConfig *BareMetalKubeletConfig `pulumi:"kubeletConfig"`
	// The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	Labels map[string]string `pulumi:"labels"`
	// The list of machine addresses in the bare metal node pool.
	NodeConfigs []BareMetalNodeConfig `pulumi:"nodeConfigs"`
	// Specifies the nodes operating system (default: LINUX).
	OperatingSystem *BareMetalNodePoolConfigOperatingSystem `pulumi:"operatingSystem"`
	// The initial taints assigned to nodes of this node pool.
	Taints []NodeTaint `pulumi:"taints"`
}

// BareMetalNodePoolConfigInput is an input type that accepts BareMetalNodePoolConfigArgs and BareMetalNodePoolConfigOutput values.
// You can construct a concrete instance of `BareMetalNodePoolConfigInput` via:
//
//	BareMetalNodePoolConfigArgs{...}
type BareMetalNodePoolConfigInput interface {
	pulumi.Input

	ToBareMetalNodePoolConfigOutput() BareMetalNodePoolConfigOutput
	ToBareMetalNodePoolConfigOutputWithContext(context.Context) BareMetalNodePoolConfigOutput
}

// BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
type BareMetalNodePoolConfigArgs struct {
	// The modifiable kubelet configurations for the baremetal machines.
	KubeletConfig BareMetalKubeletConfigPtrInput `pulumi:"kubeletConfig"`
	// The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The list of machine addresses in the bare metal node pool.
	NodeConfigs BareMetalNodeConfigArrayInput `pulumi:"nodeConfigs"`
	// Specifies the nodes operating system (default: LINUX).
	OperatingSystem BareMetalNodePoolConfigOperatingSystemPtrInput `pulumi:"operatingSystem"`
	// The initial taints assigned to nodes of this node pool.
	Taints NodeTaintArrayInput `pulumi:"taints"`
}

func (BareMetalNodePoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNodePoolConfig)(nil)).Elem()
}

func (i BareMetalNodePoolConfigArgs) ToBareMetalNodePoolConfigOutput() BareMetalNodePoolConfigOutput {
	return i.ToBareMetalNodePoolConfigOutputWithContext(context.Background())
}

func (i BareMetalNodePoolConfigArgs) ToBareMetalNodePoolConfigOutputWithContext(ctx context.Context) BareMetalNodePoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodePoolConfigOutput)
}

func (i BareMetalNodePoolConfigArgs) ToBareMetalNodePoolConfigPtrOutput() BareMetalNodePoolConfigPtrOutput {
	return i.ToBareMetalNodePoolConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalNodePoolConfigArgs) ToBareMetalNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalNodePoolConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodePoolConfigOutput).ToBareMetalNodePoolConfigPtrOutputWithContext(ctx)
}

// BareMetalNodePoolConfigPtrInput is an input type that accepts BareMetalNodePoolConfigArgs, BareMetalNodePoolConfigPtr and BareMetalNodePoolConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalNodePoolConfigPtrInput` via:
//
//	        BareMetalNodePoolConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalNodePoolConfigPtrInput interface {
	pulumi.Input

	ToBareMetalNodePoolConfigPtrOutput() BareMetalNodePoolConfigPtrOutput
	ToBareMetalNodePoolConfigPtrOutputWithContext(context.Context) BareMetalNodePoolConfigPtrOutput
}

type bareMetalNodePoolConfigPtrType BareMetalNodePoolConfigArgs

func BareMetalNodePoolConfigPtr(v *BareMetalNodePoolConfigArgs) BareMetalNodePoolConfigPtrInput {
	return (*bareMetalNodePoolConfigPtrType)(v)
}

func (*bareMetalNodePoolConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalNodePoolConfig)(nil)).Elem()
}

func (i *bareMetalNodePoolConfigPtrType) ToBareMetalNodePoolConfigPtrOutput() BareMetalNodePoolConfigPtrOutput {
	return i.ToBareMetalNodePoolConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalNodePoolConfigPtrType) ToBareMetalNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalNodePoolConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalNodePoolConfigPtrOutput)
}

// BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
type BareMetalNodePoolConfigOutput struct{ *pulumi.OutputState }

func (BareMetalNodePoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNodePoolConfig)(nil)).Elem()
}

func (o BareMetalNodePoolConfigOutput) ToBareMetalNodePoolConfigOutput() BareMetalNodePoolConfigOutput {
	return o
}

func (o BareMetalNodePoolConfigOutput) ToBareMetalNodePoolConfigOutputWithContext(ctx context.Context) BareMetalNodePoolConfigOutput {
	return o
}

func (o BareMetalNodePoolConfigOutput) ToBareMetalNodePoolConfigPtrOutput() BareMetalNodePoolConfigPtrOutput {
	return o.ToBareMetalNodePoolConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalNodePoolConfigOutput) ToBareMetalNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalNodePoolConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalNodePoolConfig) *BareMetalNodePoolConfig {
		return &v
	}).(BareMetalNodePoolConfigPtrOutput)
}

// The modifiable kubelet configurations for the baremetal machines.
func (o BareMetalNodePoolConfigOutput) KubeletConfig() BareMetalKubeletConfigPtrOutput {
	return o.ApplyT(func(v BareMetalNodePoolConfig) *BareMetalKubeletConfig { return v.KubeletConfig }).(BareMetalKubeletConfigPtrOutput)
}

// The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o BareMetalNodePoolConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v BareMetalNodePoolConfig) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The list of machine addresses in the bare metal node pool.
func (o BareMetalNodePoolConfigOutput) NodeConfigs() BareMetalNodeConfigArrayOutput {
	return o.ApplyT(func(v BareMetalNodePoolConfig) []BareMetalNodeConfig { return v.NodeConfigs }).(BareMetalNodeConfigArrayOutput)
}

// Specifies the nodes operating system (default: LINUX).
func (o BareMetalNodePoolConfigOutput) OperatingSystem() BareMetalNodePoolConfigOperatingSystemPtrOutput {
	return o.ApplyT(func(v BareMetalNodePoolConfig) *BareMetalNodePoolConfigOperatingSystem { return v.OperatingSystem }).(BareMetalNodePoolConfigOperatingSystemPtrOutput)
}

// The initial taints assigned to nodes of this node pool.
func (o BareMetalNodePoolConfigOutput) Taints() NodeTaintArrayOutput {
	return o.ApplyT(func(v BareMetalNodePoolConfig) []NodeTaint { return v.Taints }).(NodeTaintArrayOutput)
}

type BareMetalNodePoolConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalNodePoolConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalNodePoolConfig)(nil)).Elem()
}

func (o BareMetalNodePoolConfigPtrOutput) ToBareMetalNodePoolConfigPtrOutput() BareMetalNodePoolConfigPtrOutput {
	return o
}

func (o BareMetalNodePoolConfigPtrOutput) ToBareMetalNodePoolConfigPtrOutputWithContext(ctx context.Context) BareMetalNodePoolConfigPtrOutput {
	return o
}

func (o BareMetalNodePoolConfigPtrOutput) Elem() BareMetalNodePoolConfigOutput {
	return o.ApplyT(func(v *BareMetalNodePoolConfig) BareMetalNodePoolConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalNodePoolConfig
		return ret
	}).(BareMetalNodePoolConfigOutput)
}

// The modifiable kubelet configurations for the baremetal machines.
func (o BareMetalNodePoolConfigPtrOutput) KubeletConfig() BareMetalKubeletConfigPtrOutput {
	return o.ApplyT(func(v *BareMetalNodePoolConfig) *BareMetalKubeletConfig {
		if v == nil {
			return nil
		}
		return v.KubeletConfig
	}).(BareMetalKubeletConfigPtrOutput)
}

// The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o BareMetalNodePoolConfigPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BareMetalNodePoolConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The list of machine addresses in the bare metal node pool.
func (o BareMetalNodePoolConfigPtrOutput) NodeConfigs() BareMetalNodeConfigArrayOutput {
	return o.ApplyT(func(v *BareMetalNodePoolConfig) []BareMetalNodeConfig {
		if v == nil {
			return nil
		}
		return v.NodeConfigs
	}).(BareMetalNodeConfigArrayOutput)
}

// Specifies the nodes operating system (default: LINUX).
func (o BareMetalNodePoolConfigPtrOutput) OperatingSystem() BareMetalNodePoolConfigOperatingSystemPtrOutput {
	return o.ApplyT(func(v *BareMetalNodePoolConfig) *BareMetalNodePoolConfigOperatingSystem {
		if v == nil {
			return nil
		}
		return v.OperatingSystem
	}).(BareMetalNodePoolConfigOperatingSystemPtrOutput)
}

// The initial taints assigned to nodes of this node pool.
func (o BareMetalNodePoolConfigPtrOutput) Taints() NodeTaintArrayOutput {
	return o.ApplyT(func(v *BareMetalNodePoolConfig) []NodeTaint {
		if v == nil {
			return nil
		}
		return v.Taints
	}).(NodeTaintArrayOutput)
}

// BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
type BareMetalNodePoolConfigResponse struct {
	// The modifiable kubelet configurations for the baremetal machines.
	KubeletConfig BareMetalKubeletConfigResponse `pulumi:"kubeletConfig"`
	// The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	Labels map[string]string `pulumi:"labels"`
	// The list of machine addresses in the bare metal node pool.
	NodeConfigs []BareMetalNodeConfigResponse `pulumi:"nodeConfigs"`
	// Specifies the nodes operating system (default: LINUX).
	OperatingSystem string `pulumi:"operatingSystem"`
	// The initial taints assigned to nodes of this node pool.
	Taints []NodeTaintResponse `pulumi:"taints"`
}

// BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.
type BareMetalNodePoolConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalNodePoolConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalNodePoolConfigResponse)(nil)).Elem()
}

func (o BareMetalNodePoolConfigResponseOutput) ToBareMetalNodePoolConfigResponseOutput() BareMetalNodePoolConfigResponseOutput {
	return o
}

func (o BareMetalNodePoolConfigResponseOutput) ToBareMetalNodePoolConfigResponseOutputWithContext(ctx context.Context) BareMetalNodePoolConfigResponseOutput {
	return o
}

// The modifiable kubelet configurations for the baremetal machines.
func (o BareMetalNodePoolConfigResponseOutput) KubeletConfig() BareMetalKubeletConfigResponseOutput {
	return o.ApplyT(func(v BareMetalNodePoolConfigResponse) BareMetalKubeletConfigResponse { return v.KubeletConfig }).(BareMetalKubeletConfigResponseOutput)
}

// The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
func (o BareMetalNodePoolConfigResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v BareMetalNodePoolConfigResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The list of machine addresses in the bare metal node pool.
func (o BareMetalNodePoolConfigResponseOutput) NodeConfigs() BareMetalNodeConfigResponseArrayOutput {
	return o.ApplyT(func(v BareMetalNodePoolConfigResponse) []BareMetalNodeConfigResponse { return v.NodeConfigs }).(BareMetalNodeConfigResponseArrayOutput)
}

// Specifies the nodes operating system (default: LINUX).
func (o BareMetalNodePoolConfigResponseOutput) OperatingSystem() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalNodePoolConfigResponse) string { return v.OperatingSystem }).(pulumi.StringOutput)
}

// The initial taints assigned to nodes of this node pool.
func (o BareMetalNodePoolConfigResponseOutput) Taints() NodeTaintResponseArrayOutput {
	return o.ApplyT(func(v BareMetalNodePoolConfigResponse) []NodeTaintResponse { return v.Taints }).(NodeTaintResponseArrayOutput)
}

// Specifies operating system settings for cluster provisioning.
type BareMetalOsEnvironmentConfig struct {
	// Whether the package repo should not be included when initializing bare metal machines.
	PackageRepoExcluded *bool `pulumi:"packageRepoExcluded"`
}

// BareMetalOsEnvironmentConfigInput is an input type that accepts BareMetalOsEnvironmentConfigArgs and BareMetalOsEnvironmentConfigOutput values.
// You can construct a concrete instance of `BareMetalOsEnvironmentConfigInput` via:
//
//	BareMetalOsEnvironmentConfigArgs{...}
type BareMetalOsEnvironmentConfigInput interface {
	pulumi.Input

	ToBareMetalOsEnvironmentConfigOutput() BareMetalOsEnvironmentConfigOutput
	ToBareMetalOsEnvironmentConfigOutputWithContext(context.Context) BareMetalOsEnvironmentConfigOutput
}

// Specifies operating system settings for cluster provisioning.
type BareMetalOsEnvironmentConfigArgs struct {
	// Whether the package repo should not be included when initializing bare metal machines.
	PackageRepoExcluded pulumi.BoolPtrInput `pulumi:"packageRepoExcluded"`
}

func (BareMetalOsEnvironmentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalOsEnvironmentConfig)(nil)).Elem()
}

func (i BareMetalOsEnvironmentConfigArgs) ToBareMetalOsEnvironmentConfigOutput() BareMetalOsEnvironmentConfigOutput {
	return i.ToBareMetalOsEnvironmentConfigOutputWithContext(context.Background())
}

func (i BareMetalOsEnvironmentConfigArgs) ToBareMetalOsEnvironmentConfigOutputWithContext(ctx context.Context) BareMetalOsEnvironmentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalOsEnvironmentConfigOutput)
}

func (i BareMetalOsEnvironmentConfigArgs) ToBareMetalOsEnvironmentConfigPtrOutput() BareMetalOsEnvironmentConfigPtrOutput {
	return i.ToBareMetalOsEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalOsEnvironmentConfigArgs) ToBareMetalOsEnvironmentConfigPtrOutputWithContext(ctx context.Context) BareMetalOsEnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalOsEnvironmentConfigOutput).ToBareMetalOsEnvironmentConfigPtrOutputWithContext(ctx)
}

// BareMetalOsEnvironmentConfigPtrInput is an input type that accepts BareMetalOsEnvironmentConfigArgs, BareMetalOsEnvironmentConfigPtr and BareMetalOsEnvironmentConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalOsEnvironmentConfigPtrInput` via:
//
//	        BareMetalOsEnvironmentConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalOsEnvironmentConfigPtrInput interface {
	pulumi.Input

	ToBareMetalOsEnvironmentConfigPtrOutput() BareMetalOsEnvironmentConfigPtrOutput
	ToBareMetalOsEnvironmentConfigPtrOutputWithContext(context.Context) BareMetalOsEnvironmentConfigPtrOutput
}

type bareMetalOsEnvironmentConfigPtrType BareMetalOsEnvironmentConfigArgs

func BareMetalOsEnvironmentConfigPtr(v *BareMetalOsEnvironmentConfigArgs) BareMetalOsEnvironmentConfigPtrInput {
	return (*bareMetalOsEnvironmentConfigPtrType)(v)
}

func (*bareMetalOsEnvironmentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalOsEnvironmentConfig)(nil)).Elem()
}

func (i *bareMetalOsEnvironmentConfigPtrType) ToBareMetalOsEnvironmentConfigPtrOutput() BareMetalOsEnvironmentConfigPtrOutput {
	return i.ToBareMetalOsEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalOsEnvironmentConfigPtrType) ToBareMetalOsEnvironmentConfigPtrOutputWithContext(ctx context.Context) BareMetalOsEnvironmentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalOsEnvironmentConfigPtrOutput)
}

// Specifies operating system settings for cluster provisioning.
type BareMetalOsEnvironmentConfigOutput struct{ *pulumi.OutputState }

func (BareMetalOsEnvironmentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalOsEnvironmentConfig)(nil)).Elem()
}

func (o BareMetalOsEnvironmentConfigOutput) ToBareMetalOsEnvironmentConfigOutput() BareMetalOsEnvironmentConfigOutput {
	return o
}

func (o BareMetalOsEnvironmentConfigOutput) ToBareMetalOsEnvironmentConfigOutputWithContext(ctx context.Context) BareMetalOsEnvironmentConfigOutput {
	return o
}

func (o BareMetalOsEnvironmentConfigOutput) ToBareMetalOsEnvironmentConfigPtrOutput() BareMetalOsEnvironmentConfigPtrOutput {
	return o.ToBareMetalOsEnvironmentConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalOsEnvironmentConfigOutput) ToBareMetalOsEnvironmentConfigPtrOutputWithContext(ctx context.Context) BareMetalOsEnvironmentConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalOsEnvironmentConfig) *BareMetalOsEnvironmentConfig {
		return &v
	}).(BareMetalOsEnvironmentConfigPtrOutput)
}

// Whether the package repo should not be included when initializing bare metal machines.
func (o BareMetalOsEnvironmentConfigOutput) PackageRepoExcluded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalOsEnvironmentConfig) *bool { return v.PackageRepoExcluded }).(pulumi.BoolPtrOutput)
}

type BareMetalOsEnvironmentConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalOsEnvironmentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalOsEnvironmentConfig)(nil)).Elem()
}

func (o BareMetalOsEnvironmentConfigPtrOutput) ToBareMetalOsEnvironmentConfigPtrOutput() BareMetalOsEnvironmentConfigPtrOutput {
	return o
}

func (o BareMetalOsEnvironmentConfigPtrOutput) ToBareMetalOsEnvironmentConfigPtrOutputWithContext(ctx context.Context) BareMetalOsEnvironmentConfigPtrOutput {
	return o
}

func (o BareMetalOsEnvironmentConfigPtrOutput) Elem() BareMetalOsEnvironmentConfigOutput {
	return o.ApplyT(func(v *BareMetalOsEnvironmentConfig) BareMetalOsEnvironmentConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalOsEnvironmentConfig
		return ret
	}).(BareMetalOsEnvironmentConfigOutput)
}

// Whether the package repo should not be included when initializing bare metal machines.
func (o BareMetalOsEnvironmentConfigPtrOutput) PackageRepoExcluded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalOsEnvironmentConfig) *bool {
		if v == nil {
			return nil
		}
		return v.PackageRepoExcluded
	}).(pulumi.BoolPtrOutput)
}

// Specifies operating system settings for cluster provisioning.
type BareMetalOsEnvironmentConfigResponse struct {
	// Whether the package repo should not be included when initializing bare metal machines.
	PackageRepoExcluded bool `pulumi:"packageRepoExcluded"`
}

// Specifies operating system settings for cluster provisioning.
type BareMetalOsEnvironmentConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalOsEnvironmentConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalOsEnvironmentConfigResponse)(nil)).Elem()
}

func (o BareMetalOsEnvironmentConfigResponseOutput) ToBareMetalOsEnvironmentConfigResponseOutput() BareMetalOsEnvironmentConfigResponseOutput {
	return o
}

func (o BareMetalOsEnvironmentConfigResponseOutput) ToBareMetalOsEnvironmentConfigResponseOutputWithContext(ctx context.Context) BareMetalOsEnvironmentConfigResponseOutput {
	return o
}

// Whether the package repo should not be included when initializing bare metal machines.
func (o BareMetalOsEnvironmentConfigResponseOutput) PackageRepoExcluded() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalOsEnvironmentConfigResponse) bool { return v.PackageRepoExcluded }).(pulumi.BoolOutput)
}

// Specifies load balancer ports for the bare metal user cluster.
type BareMetalPortConfig struct {
	// The port that control plane hosted load balancers will listen on.
	ControlPlaneLoadBalancerPort *int `pulumi:"controlPlaneLoadBalancerPort"`
}

// BareMetalPortConfigInput is an input type that accepts BareMetalPortConfigArgs and BareMetalPortConfigOutput values.
// You can construct a concrete instance of `BareMetalPortConfigInput` via:
//
//	BareMetalPortConfigArgs{...}
type BareMetalPortConfigInput interface {
	pulumi.Input

	ToBareMetalPortConfigOutput() BareMetalPortConfigOutput
	ToBareMetalPortConfigOutputWithContext(context.Context) BareMetalPortConfigOutput
}

// Specifies load balancer ports for the bare metal user cluster.
type BareMetalPortConfigArgs struct {
	// The port that control plane hosted load balancers will listen on.
	ControlPlaneLoadBalancerPort pulumi.IntPtrInput `pulumi:"controlPlaneLoadBalancerPort"`
}

func (BareMetalPortConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalPortConfig)(nil)).Elem()
}

func (i BareMetalPortConfigArgs) ToBareMetalPortConfigOutput() BareMetalPortConfigOutput {
	return i.ToBareMetalPortConfigOutputWithContext(context.Background())
}

func (i BareMetalPortConfigArgs) ToBareMetalPortConfigOutputWithContext(ctx context.Context) BareMetalPortConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalPortConfigOutput)
}

func (i BareMetalPortConfigArgs) ToBareMetalPortConfigPtrOutput() BareMetalPortConfigPtrOutput {
	return i.ToBareMetalPortConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalPortConfigArgs) ToBareMetalPortConfigPtrOutputWithContext(ctx context.Context) BareMetalPortConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalPortConfigOutput).ToBareMetalPortConfigPtrOutputWithContext(ctx)
}

// BareMetalPortConfigPtrInput is an input type that accepts BareMetalPortConfigArgs, BareMetalPortConfigPtr and BareMetalPortConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalPortConfigPtrInput` via:
//
//	        BareMetalPortConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalPortConfigPtrInput interface {
	pulumi.Input

	ToBareMetalPortConfigPtrOutput() BareMetalPortConfigPtrOutput
	ToBareMetalPortConfigPtrOutputWithContext(context.Context) BareMetalPortConfigPtrOutput
}

type bareMetalPortConfigPtrType BareMetalPortConfigArgs

func BareMetalPortConfigPtr(v *BareMetalPortConfigArgs) BareMetalPortConfigPtrInput {
	return (*bareMetalPortConfigPtrType)(v)
}

func (*bareMetalPortConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalPortConfig)(nil)).Elem()
}

func (i *bareMetalPortConfigPtrType) ToBareMetalPortConfigPtrOutput() BareMetalPortConfigPtrOutput {
	return i.ToBareMetalPortConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalPortConfigPtrType) ToBareMetalPortConfigPtrOutputWithContext(ctx context.Context) BareMetalPortConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalPortConfigPtrOutput)
}

// Specifies load balancer ports for the bare metal user cluster.
type BareMetalPortConfigOutput struct{ *pulumi.OutputState }

func (BareMetalPortConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalPortConfig)(nil)).Elem()
}

func (o BareMetalPortConfigOutput) ToBareMetalPortConfigOutput() BareMetalPortConfigOutput {
	return o
}

func (o BareMetalPortConfigOutput) ToBareMetalPortConfigOutputWithContext(ctx context.Context) BareMetalPortConfigOutput {
	return o
}

func (o BareMetalPortConfigOutput) ToBareMetalPortConfigPtrOutput() BareMetalPortConfigPtrOutput {
	return o.ToBareMetalPortConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalPortConfigOutput) ToBareMetalPortConfigPtrOutputWithContext(ctx context.Context) BareMetalPortConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalPortConfig) *BareMetalPortConfig {
		return &v
	}).(BareMetalPortConfigPtrOutput)
}

// The port that control plane hosted load balancers will listen on.
func (o BareMetalPortConfigOutput) ControlPlaneLoadBalancerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BareMetalPortConfig) *int { return v.ControlPlaneLoadBalancerPort }).(pulumi.IntPtrOutput)
}

type BareMetalPortConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalPortConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalPortConfig)(nil)).Elem()
}

func (o BareMetalPortConfigPtrOutput) ToBareMetalPortConfigPtrOutput() BareMetalPortConfigPtrOutput {
	return o
}

func (o BareMetalPortConfigPtrOutput) ToBareMetalPortConfigPtrOutputWithContext(ctx context.Context) BareMetalPortConfigPtrOutput {
	return o
}

func (o BareMetalPortConfigPtrOutput) Elem() BareMetalPortConfigOutput {
	return o.ApplyT(func(v *BareMetalPortConfig) BareMetalPortConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalPortConfig
		return ret
	}).(BareMetalPortConfigOutput)
}

// The port that control plane hosted load balancers will listen on.
func (o BareMetalPortConfigPtrOutput) ControlPlaneLoadBalancerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BareMetalPortConfig) *int {
		if v == nil {
			return nil
		}
		return v.ControlPlaneLoadBalancerPort
	}).(pulumi.IntPtrOutput)
}

// Specifies load balancer ports for the bare metal user cluster.
type BareMetalPortConfigResponse struct {
	// The port that control plane hosted load balancers will listen on.
	ControlPlaneLoadBalancerPort int `pulumi:"controlPlaneLoadBalancerPort"`
}

// Specifies load balancer ports for the bare metal user cluster.
type BareMetalPortConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalPortConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalPortConfigResponse)(nil)).Elem()
}

func (o BareMetalPortConfigResponseOutput) ToBareMetalPortConfigResponseOutput() BareMetalPortConfigResponseOutput {
	return o
}

func (o BareMetalPortConfigResponseOutput) ToBareMetalPortConfigResponseOutputWithContext(ctx context.Context) BareMetalPortConfigResponseOutput {
	return o
}

// The port that control plane hosted load balancers will listen on.
func (o BareMetalPortConfigResponseOutput) ControlPlaneLoadBalancerPort() pulumi.IntOutput {
	return o.ApplyT(func(v BareMetalPortConfigResponse) int { return v.ControlPlaneLoadBalancerPort }).(pulumi.IntOutput)
}

// Specifies the cluster proxy configuration.
type BareMetalProxyConfig struct {
	// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
	NoProxy []string `pulumi:"noProxy"`
	// Specifies the address of your proxy server. Examples: `http://domain` Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
	Uri string `pulumi:"uri"`
}

// BareMetalProxyConfigInput is an input type that accepts BareMetalProxyConfigArgs and BareMetalProxyConfigOutput values.
// You can construct a concrete instance of `BareMetalProxyConfigInput` via:
//
//	BareMetalProxyConfigArgs{...}
type BareMetalProxyConfigInput interface {
	pulumi.Input

	ToBareMetalProxyConfigOutput() BareMetalProxyConfigOutput
	ToBareMetalProxyConfigOutputWithContext(context.Context) BareMetalProxyConfigOutput
}

// Specifies the cluster proxy configuration.
type BareMetalProxyConfigArgs struct {
	// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
	NoProxy pulumi.StringArrayInput `pulumi:"noProxy"`
	// Specifies the address of your proxy server. Examples: `http://domain` Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (BareMetalProxyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalProxyConfig)(nil)).Elem()
}

func (i BareMetalProxyConfigArgs) ToBareMetalProxyConfigOutput() BareMetalProxyConfigOutput {
	return i.ToBareMetalProxyConfigOutputWithContext(context.Background())
}

func (i BareMetalProxyConfigArgs) ToBareMetalProxyConfigOutputWithContext(ctx context.Context) BareMetalProxyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalProxyConfigOutput)
}

func (i BareMetalProxyConfigArgs) ToBareMetalProxyConfigPtrOutput() BareMetalProxyConfigPtrOutput {
	return i.ToBareMetalProxyConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalProxyConfigArgs) ToBareMetalProxyConfigPtrOutputWithContext(ctx context.Context) BareMetalProxyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalProxyConfigOutput).ToBareMetalProxyConfigPtrOutputWithContext(ctx)
}

// BareMetalProxyConfigPtrInput is an input type that accepts BareMetalProxyConfigArgs, BareMetalProxyConfigPtr and BareMetalProxyConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalProxyConfigPtrInput` via:
//
//	        BareMetalProxyConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalProxyConfigPtrInput interface {
	pulumi.Input

	ToBareMetalProxyConfigPtrOutput() BareMetalProxyConfigPtrOutput
	ToBareMetalProxyConfigPtrOutputWithContext(context.Context) BareMetalProxyConfigPtrOutput
}

type bareMetalProxyConfigPtrType BareMetalProxyConfigArgs

func BareMetalProxyConfigPtr(v *BareMetalProxyConfigArgs) BareMetalProxyConfigPtrInput {
	return (*bareMetalProxyConfigPtrType)(v)
}

func (*bareMetalProxyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalProxyConfig)(nil)).Elem()
}

func (i *bareMetalProxyConfigPtrType) ToBareMetalProxyConfigPtrOutput() BareMetalProxyConfigPtrOutput {
	return i.ToBareMetalProxyConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalProxyConfigPtrType) ToBareMetalProxyConfigPtrOutputWithContext(ctx context.Context) BareMetalProxyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalProxyConfigPtrOutput)
}

// Specifies the cluster proxy configuration.
type BareMetalProxyConfigOutput struct{ *pulumi.OutputState }

func (BareMetalProxyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalProxyConfig)(nil)).Elem()
}

func (o BareMetalProxyConfigOutput) ToBareMetalProxyConfigOutput() BareMetalProxyConfigOutput {
	return o
}

func (o BareMetalProxyConfigOutput) ToBareMetalProxyConfigOutputWithContext(ctx context.Context) BareMetalProxyConfigOutput {
	return o
}

func (o BareMetalProxyConfigOutput) ToBareMetalProxyConfigPtrOutput() BareMetalProxyConfigPtrOutput {
	return o.ToBareMetalProxyConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalProxyConfigOutput) ToBareMetalProxyConfigPtrOutputWithContext(ctx context.Context) BareMetalProxyConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalProxyConfig) *BareMetalProxyConfig {
		return &v
	}).(BareMetalProxyConfigPtrOutput)
}

// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
func (o BareMetalProxyConfigOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalProxyConfig) []string { return v.NoProxy }).(pulumi.StringArrayOutput)
}

// Specifies the address of your proxy server. Examples: `http://domain` Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
func (o BareMetalProxyConfigOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalProxyConfig) string { return v.Uri }).(pulumi.StringOutput)
}

type BareMetalProxyConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalProxyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalProxyConfig)(nil)).Elem()
}

func (o BareMetalProxyConfigPtrOutput) ToBareMetalProxyConfigPtrOutput() BareMetalProxyConfigPtrOutput {
	return o
}

func (o BareMetalProxyConfigPtrOutput) ToBareMetalProxyConfigPtrOutputWithContext(ctx context.Context) BareMetalProxyConfigPtrOutput {
	return o
}

func (o BareMetalProxyConfigPtrOutput) Elem() BareMetalProxyConfigOutput {
	return o.ApplyT(func(v *BareMetalProxyConfig) BareMetalProxyConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalProxyConfig
		return ret
	}).(BareMetalProxyConfigOutput)
}

// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
func (o BareMetalProxyConfigPtrOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BareMetalProxyConfig) []string {
		if v == nil {
			return nil
		}
		return v.NoProxy
	}).(pulumi.StringArrayOutput)
}

// Specifies the address of your proxy server. Examples: `http://domain` Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
func (o BareMetalProxyConfigPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalProxyConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Specifies the cluster proxy configuration.
type BareMetalProxyConfigResponse struct {
	// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
	NoProxy []string `pulumi:"noProxy"`
	// Specifies the address of your proxy server. Examples: `http://domain` Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
	Uri string `pulumi:"uri"`
}

// Specifies the cluster proxy configuration.
type BareMetalProxyConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalProxyConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalProxyConfigResponse)(nil)).Elem()
}

func (o BareMetalProxyConfigResponseOutput) ToBareMetalProxyConfigResponseOutput() BareMetalProxyConfigResponseOutput {
	return o
}

func (o BareMetalProxyConfigResponseOutput) ToBareMetalProxyConfigResponseOutputWithContext(ctx context.Context) BareMetalProxyConfigResponseOutput {
	return o
}

// A list of IPs, hostnames, and domains that should skip the proxy. Examples: ["127.0.0.1", "example.com", ".corp", "localhost"].
func (o BareMetalProxyConfigResponseOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BareMetalProxyConfigResponse) []string { return v.NoProxy }).(pulumi.StringArrayOutput)
}

// Specifies the address of your proxy server. Examples: `http://domain` Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.
func (o BareMetalProxyConfigResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalProxyConfigResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Specifies the security related settings for the bare metal user cluster.
type BareMetalSecurityConfig struct {
	// Configures user access to the user cluster.
	Authorization *Authorization `pulumi:"authorization"`
}

// BareMetalSecurityConfigInput is an input type that accepts BareMetalSecurityConfigArgs and BareMetalSecurityConfigOutput values.
// You can construct a concrete instance of `BareMetalSecurityConfigInput` via:
//
//	BareMetalSecurityConfigArgs{...}
type BareMetalSecurityConfigInput interface {
	pulumi.Input

	ToBareMetalSecurityConfigOutput() BareMetalSecurityConfigOutput
	ToBareMetalSecurityConfigOutputWithContext(context.Context) BareMetalSecurityConfigOutput
}

// Specifies the security related settings for the bare metal user cluster.
type BareMetalSecurityConfigArgs struct {
	// Configures user access to the user cluster.
	Authorization AuthorizationPtrInput `pulumi:"authorization"`
}

func (BareMetalSecurityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalSecurityConfig)(nil)).Elem()
}

func (i BareMetalSecurityConfigArgs) ToBareMetalSecurityConfigOutput() BareMetalSecurityConfigOutput {
	return i.ToBareMetalSecurityConfigOutputWithContext(context.Background())
}

func (i BareMetalSecurityConfigArgs) ToBareMetalSecurityConfigOutputWithContext(ctx context.Context) BareMetalSecurityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalSecurityConfigOutput)
}

func (i BareMetalSecurityConfigArgs) ToBareMetalSecurityConfigPtrOutput() BareMetalSecurityConfigPtrOutput {
	return i.ToBareMetalSecurityConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalSecurityConfigArgs) ToBareMetalSecurityConfigPtrOutputWithContext(ctx context.Context) BareMetalSecurityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalSecurityConfigOutput).ToBareMetalSecurityConfigPtrOutputWithContext(ctx)
}

// BareMetalSecurityConfigPtrInput is an input type that accepts BareMetalSecurityConfigArgs, BareMetalSecurityConfigPtr and BareMetalSecurityConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalSecurityConfigPtrInput` via:
//
//	        BareMetalSecurityConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalSecurityConfigPtrInput interface {
	pulumi.Input

	ToBareMetalSecurityConfigPtrOutput() BareMetalSecurityConfigPtrOutput
	ToBareMetalSecurityConfigPtrOutputWithContext(context.Context) BareMetalSecurityConfigPtrOutput
}

type bareMetalSecurityConfigPtrType BareMetalSecurityConfigArgs

func BareMetalSecurityConfigPtr(v *BareMetalSecurityConfigArgs) BareMetalSecurityConfigPtrInput {
	return (*bareMetalSecurityConfigPtrType)(v)
}

func (*bareMetalSecurityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalSecurityConfig)(nil)).Elem()
}

func (i *bareMetalSecurityConfigPtrType) ToBareMetalSecurityConfigPtrOutput() BareMetalSecurityConfigPtrOutput {
	return i.ToBareMetalSecurityConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalSecurityConfigPtrType) ToBareMetalSecurityConfigPtrOutputWithContext(ctx context.Context) BareMetalSecurityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalSecurityConfigPtrOutput)
}

// Specifies the security related settings for the bare metal user cluster.
type BareMetalSecurityConfigOutput struct{ *pulumi.OutputState }

func (BareMetalSecurityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalSecurityConfig)(nil)).Elem()
}

func (o BareMetalSecurityConfigOutput) ToBareMetalSecurityConfigOutput() BareMetalSecurityConfigOutput {
	return o
}

func (o BareMetalSecurityConfigOutput) ToBareMetalSecurityConfigOutputWithContext(ctx context.Context) BareMetalSecurityConfigOutput {
	return o
}

func (o BareMetalSecurityConfigOutput) ToBareMetalSecurityConfigPtrOutput() BareMetalSecurityConfigPtrOutput {
	return o.ToBareMetalSecurityConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalSecurityConfigOutput) ToBareMetalSecurityConfigPtrOutputWithContext(ctx context.Context) BareMetalSecurityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalSecurityConfig) *BareMetalSecurityConfig {
		return &v
	}).(BareMetalSecurityConfigPtrOutput)
}

// Configures user access to the user cluster.
func (o BareMetalSecurityConfigOutput) Authorization() AuthorizationPtrOutput {
	return o.ApplyT(func(v BareMetalSecurityConfig) *Authorization { return v.Authorization }).(AuthorizationPtrOutput)
}

type BareMetalSecurityConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalSecurityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalSecurityConfig)(nil)).Elem()
}

func (o BareMetalSecurityConfigPtrOutput) ToBareMetalSecurityConfigPtrOutput() BareMetalSecurityConfigPtrOutput {
	return o
}

func (o BareMetalSecurityConfigPtrOutput) ToBareMetalSecurityConfigPtrOutputWithContext(ctx context.Context) BareMetalSecurityConfigPtrOutput {
	return o
}

func (o BareMetalSecurityConfigPtrOutput) Elem() BareMetalSecurityConfigOutput {
	return o.ApplyT(func(v *BareMetalSecurityConfig) BareMetalSecurityConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalSecurityConfig
		return ret
	}).(BareMetalSecurityConfigOutput)
}

// Configures user access to the user cluster.
func (o BareMetalSecurityConfigPtrOutput) Authorization() AuthorizationPtrOutput {
	return o.ApplyT(func(v *BareMetalSecurityConfig) *Authorization {
		if v == nil {
			return nil
		}
		return v.Authorization
	}).(AuthorizationPtrOutput)
}

// Specifies the security related settings for the bare metal user cluster.
type BareMetalSecurityConfigResponse struct {
	// Configures user access to the user cluster.
	Authorization AuthorizationResponse `pulumi:"authorization"`
}

// Specifies the security related settings for the bare metal user cluster.
type BareMetalSecurityConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalSecurityConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalSecurityConfigResponse)(nil)).Elem()
}

func (o BareMetalSecurityConfigResponseOutput) ToBareMetalSecurityConfigResponseOutput() BareMetalSecurityConfigResponseOutput {
	return o
}

func (o BareMetalSecurityConfigResponseOutput) ToBareMetalSecurityConfigResponseOutputWithContext(ctx context.Context) BareMetalSecurityConfigResponseOutput {
	return o
}

// Configures user access to the user cluster.
func (o BareMetalSecurityConfigResponseOutput) Authorization() AuthorizationResponseOutput {
	return o.ApplyT(func(v BareMetalSecurityConfigResponse) AuthorizationResponse { return v.Authorization }).(AuthorizationResponseOutput)
}

// Specifies the SR-IOV networking operator config.
type BareMetalSrIovConfig struct {
	// Whether to install the SR-IOV operator.
	Enabled *bool `pulumi:"enabled"`
}

// BareMetalSrIovConfigInput is an input type that accepts BareMetalSrIovConfigArgs and BareMetalSrIovConfigOutput values.
// You can construct a concrete instance of `BareMetalSrIovConfigInput` via:
//
//	BareMetalSrIovConfigArgs{...}
type BareMetalSrIovConfigInput interface {
	pulumi.Input

	ToBareMetalSrIovConfigOutput() BareMetalSrIovConfigOutput
	ToBareMetalSrIovConfigOutputWithContext(context.Context) BareMetalSrIovConfigOutput
}

// Specifies the SR-IOV networking operator config.
type BareMetalSrIovConfigArgs struct {
	// Whether to install the SR-IOV operator.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (BareMetalSrIovConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalSrIovConfig)(nil)).Elem()
}

func (i BareMetalSrIovConfigArgs) ToBareMetalSrIovConfigOutput() BareMetalSrIovConfigOutput {
	return i.ToBareMetalSrIovConfigOutputWithContext(context.Background())
}

func (i BareMetalSrIovConfigArgs) ToBareMetalSrIovConfigOutputWithContext(ctx context.Context) BareMetalSrIovConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalSrIovConfigOutput)
}

func (i BareMetalSrIovConfigArgs) ToBareMetalSrIovConfigPtrOutput() BareMetalSrIovConfigPtrOutput {
	return i.ToBareMetalSrIovConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalSrIovConfigArgs) ToBareMetalSrIovConfigPtrOutputWithContext(ctx context.Context) BareMetalSrIovConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalSrIovConfigOutput).ToBareMetalSrIovConfigPtrOutputWithContext(ctx)
}

// BareMetalSrIovConfigPtrInput is an input type that accepts BareMetalSrIovConfigArgs, BareMetalSrIovConfigPtr and BareMetalSrIovConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalSrIovConfigPtrInput` via:
//
//	        BareMetalSrIovConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalSrIovConfigPtrInput interface {
	pulumi.Input

	ToBareMetalSrIovConfigPtrOutput() BareMetalSrIovConfigPtrOutput
	ToBareMetalSrIovConfigPtrOutputWithContext(context.Context) BareMetalSrIovConfigPtrOutput
}

type bareMetalSrIovConfigPtrType BareMetalSrIovConfigArgs

func BareMetalSrIovConfigPtr(v *BareMetalSrIovConfigArgs) BareMetalSrIovConfigPtrInput {
	return (*bareMetalSrIovConfigPtrType)(v)
}

func (*bareMetalSrIovConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalSrIovConfig)(nil)).Elem()
}

func (i *bareMetalSrIovConfigPtrType) ToBareMetalSrIovConfigPtrOutput() BareMetalSrIovConfigPtrOutput {
	return i.ToBareMetalSrIovConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalSrIovConfigPtrType) ToBareMetalSrIovConfigPtrOutputWithContext(ctx context.Context) BareMetalSrIovConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalSrIovConfigPtrOutput)
}

// Specifies the SR-IOV networking operator config.
type BareMetalSrIovConfigOutput struct{ *pulumi.OutputState }

func (BareMetalSrIovConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalSrIovConfig)(nil)).Elem()
}

func (o BareMetalSrIovConfigOutput) ToBareMetalSrIovConfigOutput() BareMetalSrIovConfigOutput {
	return o
}

func (o BareMetalSrIovConfigOutput) ToBareMetalSrIovConfigOutputWithContext(ctx context.Context) BareMetalSrIovConfigOutput {
	return o
}

func (o BareMetalSrIovConfigOutput) ToBareMetalSrIovConfigPtrOutput() BareMetalSrIovConfigPtrOutput {
	return o.ToBareMetalSrIovConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalSrIovConfigOutput) ToBareMetalSrIovConfigPtrOutputWithContext(ctx context.Context) BareMetalSrIovConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalSrIovConfig) *BareMetalSrIovConfig {
		return &v
	}).(BareMetalSrIovConfigPtrOutput)
}

// Whether to install the SR-IOV operator.
func (o BareMetalSrIovConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BareMetalSrIovConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type BareMetalSrIovConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalSrIovConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalSrIovConfig)(nil)).Elem()
}

func (o BareMetalSrIovConfigPtrOutput) ToBareMetalSrIovConfigPtrOutput() BareMetalSrIovConfigPtrOutput {
	return o
}

func (o BareMetalSrIovConfigPtrOutput) ToBareMetalSrIovConfigPtrOutputWithContext(ctx context.Context) BareMetalSrIovConfigPtrOutput {
	return o
}

func (o BareMetalSrIovConfigPtrOutput) Elem() BareMetalSrIovConfigOutput {
	return o.ApplyT(func(v *BareMetalSrIovConfig) BareMetalSrIovConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalSrIovConfig
		return ret
	}).(BareMetalSrIovConfigOutput)
}

// Whether to install the SR-IOV operator.
func (o BareMetalSrIovConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BareMetalSrIovConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the SR-IOV networking operator config.
type BareMetalSrIovConfigResponse struct {
	// Whether to install the SR-IOV operator.
	Enabled bool `pulumi:"enabled"`
}

// Specifies the SR-IOV networking operator config.
type BareMetalSrIovConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalSrIovConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalSrIovConfigResponse)(nil)).Elem()
}

func (o BareMetalSrIovConfigResponseOutput) ToBareMetalSrIovConfigResponseOutput() BareMetalSrIovConfigResponseOutput {
	return o
}

func (o BareMetalSrIovConfigResponseOutput) ToBareMetalSrIovConfigResponseOutputWithContext(ctx context.Context) BareMetalSrIovConfigResponseOutput {
	return o
}

// Whether to install the SR-IOV operator.
func (o BareMetalSrIovConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BareMetalSrIovConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// BareMetalStorageConfig specifies the cluster storage configuration.
type BareMetalStorageConfig struct {
	// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
	LvpNodeMountsConfig BareMetalLvpConfig `pulumi:"lvpNodeMountsConfig"`
	// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
	LvpShareConfig BareMetalLvpShareConfig `pulumi:"lvpShareConfig"`
}

// BareMetalStorageConfigInput is an input type that accepts BareMetalStorageConfigArgs and BareMetalStorageConfigOutput values.
// You can construct a concrete instance of `BareMetalStorageConfigInput` via:
//
//	BareMetalStorageConfigArgs{...}
type BareMetalStorageConfigInput interface {
	pulumi.Input

	ToBareMetalStorageConfigOutput() BareMetalStorageConfigOutput
	ToBareMetalStorageConfigOutputWithContext(context.Context) BareMetalStorageConfigOutput
}

// BareMetalStorageConfig specifies the cluster storage configuration.
type BareMetalStorageConfigArgs struct {
	// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
	LvpNodeMountsConfig BareMetalLvpConfigInput `pulumi:"lvpNodeMountsConfig"`
	// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
	LvpShareConfig BareMetalLvpShareConfigInput `pulumi:"lvpShareConfig"`
}

func (BareMetalStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalStorageConfig)(nil)).Elem()
}

func (i BareMetalStorageConfigArgs) ToBareMetalStorageConfigOutput() BareMetalStorageConfigOutput {
	return i.ToBareMetalStorageConfigOutputWithContext(context.Background())
}

func (i BareMetalStorageConfigArgs) ToBareMetalStorageConfigOutputWithContext(ctx context.Context) BareMetalStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalStorageConfigOutput)
}

// BareMetalStorageConfig specifies the cluster storage configuration.
type BareMetalStorageConfigOutput struct{ *pulumi.OutputState }

func (BareMetalStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalStorageConfig)(nil)).Elem()
}

func (o BareMetalStorageConfigOutput) ToBareMetalStorageConfigOutput() BareMetalStorageConfigOutput {
	return o
}

func (o BareMetalStorageConfigOutput) ToBareMetalStorageConfigOutputWithContext(ctx context.Context) BareMetalStorageConfigOutput {
	return o
}

// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
func (o BareMetalStorageConfigOutput) LvpNodeMountsConfig() BareMetalLvpConfigOutput {
	return o.ApplyT(func(v BareMetalStorageConfig) BareMetalLvpConfig { return v.LvpNodeMountsConfig }).(BareMetalLvpConfigOutput)
}

// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
func (o BareMetalStorageConfigOutput) LvpShareConfig() BareMetalLvpShareConfigOutput {
	return o.ApplyT(func(v BareMetalStorageConfig) BareMetalLvpShareConfig { return v.LvpShareConfig }).(BareMetalLvpShareConfigOutput)
}

// BareMetalStorageConfig specifies the cluster storage configuration.
type BareMetalStorageConfigResponse struct {
	// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
	LvpNodeMountsConfig BareMetalLvpConfigResponse `pulumi:"lvpNodeMountsConfig"`
	// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
	LvpShareConfig BareMetalLvpShareConfigResponse `pulumi:"lvpShareConfig"`
}

// BareMetalStorageConfig specifies the cluster storage configuration.
type BareMetalStorageConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalStorageConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalStorageConfigResponse)(nil)).Elem()
}

func (o BareMetalStorageConfigResponseOutput) ToBareMetalStorageConfigResponseOutput() BareMetalStorageConfigResponseOutput {
	return o
}

func (o BareMetalStorageConfigResponseOutput) ToBareMetalStorageConfigResponseOutputWithContext(ctx context.Context) BareMetalStorageConfigResponseOutput {
	return o
}

// Specifies the config for local PersistentVolumes backed by mounted node disks. These disks need to be formatted and mounted by the user, which can be done before or after cluster creation.
func (o BareMetalStorageConfigResponseOutput) LvpNodeMountsConfig() BareMetalLvpConfigResponseOutput {
	return o.ApplyT(func(v BareMetalStorageConfigResponse) BareMetalLvpConfigResponse { return v.LvpNodeMountsConfig }).(BareMetalLvpConfigResponseOutput)
}

// Specifies the config for local PersistentVolumes backed by subdirectories in a shared filesystem. These subdirectores are automatically created during cluster creation.
func (o BareMetalStorageConfigResponseOutput) LvpShareConfig() BareMetalLvpShareConfigResponseOutput {
	return o.ApplyT(func(v BareMetalStorageConfigResponse) BareMetalLvpShareConfigResponse { return v.LvpShareConfig }).(BareMetalLvpShareConfigResponseOutput)
}

// Specifies the VIP config for the bare metal load balancer.
type BareMetalVipConfig struct {
	// The VIP which you previously set aside for the Kubernetes API of this bare metal user cluster.
	ControlPlaneVip *string `pulumi:"controlPlaneVip"`
	// The VIP which you previously set aside for ingress traffic into this bare metal user cluster.
	IngressVip *string `pulumi:"ingressVip"`
}

// BareMetalVipConfigInput is an input type that accepts BareMetalVipConfigArgs and BareMetalVipConfigOutput values.
// You can construct a concrete instance of `BareMetalVipConfigInput` via:
//
//	BareMetalVipConfigArgs{...}
type BareMetalVipConfigInput interface {
	pulumi.Input

	ToBareMetalVipConfigOutput() BareMetalVipConfigOutput
	ToBareMetalVipConfigOutputWithContext(context.Context) BareMetalVipConfigOutput
}

// Specifies the VIP config for the bare metal load balancer.
type BareMetalVipConfigArgs struct {
	// The VIP which you previously set aside for the Kubernetes API of this bare metal user cluster.
	ControlPlaneVip pulumi.StringPtrInput `pulumi:"controlPlaneVip"`
	// The VIP which you previously set aside for ingress traffic into this bare metal user cluster.
	IngressVip pulumi.StringPtrInput `pulumi:"ingressVip"`
}

func (BareMetalVipConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalVipConfig)(nil)).Elem()
}

func (i BareMetalVipConfigArgs) ToBareMetalVipConfigOutput() BareMetalVipConfigOutput {
	return i.ToBareMetalVipConfigOutputWithContext(context.Background())
}

func (i BareMetalVipConfigArgs) ToBareMetalVipConfigOutputWithContext(ctx context.Context) BareMetalVipConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalVipConfigOutput)
}

func (i BareMetalVipConfigArgs) ToBareMetalVipConfigPtrOutput() BareMetalVipConfigPtrOutput {
	return i.ToBareMetalVipConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalVipConfigArgs) ToBareMetalVipConfigPtrOutputWithContext(ctx context.Context) BareMetalVipConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalVipConfigOutput).ToBareMetalVipConfigPtrOutputWithContext(ctx)
}

// BareMetalVipConfigPtrInput is an input type that accepts BareMetalVipConfigArgs, BareMetalVipConfigPtr and BareMetalVipConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalVipConfigPtrInput` via:
//
//	        BareMetalVipConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalVipConfigPtrInput interface {
	pulumi.Input

	ToBareMetalVipConfigPtrOutput() BareMetalVipConfigPtrOutput
	ToBareMetalVipConfigPtrOutputWithContext(context.Context) BareMetalVipConfigPtrOutput
}

type bareMetalVipConfigPtrType BareMetalVipConfigArgs

func BareMetalVipConfigPtr(v *BareMetalVipConfigArgs) BareMetalVipConfigPtrInput {
	return (*bareMetalVipConfigPtrType)(v)
}

func (*bareMetalVipConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalVipConfig)(nil)).Elem()
}

func (i *bareMetalVipConfigPtrType) ToBareMetalVipConfigPtrOutput() BareMetalVipConfigPtrOutput {
	return i.ToBareMetalVipConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalVipConfigPtrType) ToBareMetalVipConfigPtrOutputWithContext(ctx context.Context) BareMetalVipConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalVipConfigPtrOutput)
}

// Specifies the VIP config for the bare metal load balancer.
type BareMetalVipConfigOutput struct{ *pulumi.OutputState }

func (BareMetalVipConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalVipConfig)(nil)).Elem()
}

func (o BareMetalVipConfigOutput) ToBareMetalVipConfigOutput() BareMetalVipConfigOutput {
	return o
}

func (o BareMetalVipConfigOutput) ToBareMetalVipConfigOutputWithContext(ctx context.Context) BareMetalVipConfigOutput {
	return o
}

func (o BareMetalVipConfigOutput) ToBareMetalVipConfigPtrOutput() BareMetalVipConfigPtrOutput {
	return o.ToBareMetalVipConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalVipConfigOutput) ToBareMetalVipConfigPtrOutputWithContext(ctx context.Context) BareMetalVipConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalVipConfig) *BareMetalVipConfig {
		return &v
	}).(BareMetalVipConfigPtrOutput)
}

// The VIP which you previously set aside for the Kubernetes API of this bare metal user cluster.
func (o BareMetalVipConfigOutput) ControlPlaneVip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalVipConfig) *string { return v.ControlPlaneVip }).(pulumi.StringPtrOutput)
}

// The VIP which you previously set aside for ingress traffic into this bare metal user cluster.
func (o BareMetalVipConfigOutput) IngressVip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalVipConfig) *string { return v.IngressVip }).(pulumi.StringPtrOutput)
}

type BareMetalVipConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalVipConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalVipConfig)(nil)).Elem()
}

func (o BareMetalVipConfigPtrOutput) ToBareMetalVipConfigPtrOutput() BareMetalVipConfigPtrOutput {
	return o
}

func (o BareMetalVipConfigPtrOutput) ToBareMetalVipConfigPtrOutputWithContext(ctx context.Context) BareMetalVipConfigPtrOutput {
	return o
}

func (o BareMetalVipConfigPtrOutput) Elem() BareMetalVipConfigOutput {
	return o.ApplyT(func(v *BareMetalVipConfig) BareMetalVipConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalVipConfig
		return ret
	}).(BareMetalVipConfigOutput)
}

// The VIP which you previously set aside for the Kubernetes API of this bare metal user cluster.
func (o BareMetalVipConfigPtrOutput) ControlPlaneVip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalVipConfig) *string {
		if v == nil {
			return nil
		}
		return v.ControlPlaneVip
	}).(pulumi.StringPtrOutput)
}

// The VIP which you previously set aside for ingress traffic into this bare metal user cluster.
func (o BareMetalVipConfigPtrOutput) IngressVip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalVipConfig) *string {
		if v == nil {
			return nil
		}
		return v.IngressVip
	}).(pulumi.StringPtrOutput)
}

// Specifies the VIP config for the bare metal load balancer.
type BareMetalVipConfigResponse struct {
	// The VIP which you previously set aside for the Kubernetes API of this bare metal user cluster.
	ControlPlaneVip string `pulumi:"controlPlaneVip"`
	// The VIP which you previously set aside for ingress traffic into this bare metal user cluster.
	IngressVip string `pulumi:"ingressVip"`
}

// Specifies the VIP config for the bare metal load balancer.
type BareMetalVipConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalVipConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalVipConfigResponse)(nil)).Elem()
}

func (o BareMetalVipConfigResponseOutput) ToBareMetalVipConfigResponseOutput() BareMetalVipConfigResponseOutput {
	return o
}

func (o BareMetalVipConfigResponseOutput) ToBareMetalVipConfigResponseOutputWithContext(ctx context.Context) BareMetalVipConfigResponseOutput {
	return o
}

// The VIP which you previously set aside for the Kubernetes API of this bare metal user cluster.
func (o BareMetalVipConfigResponseOutput) ControlPlaneVip() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalVipConfigResponse) string { return v.ControlPlaneVip }).(pulumi.StringOutput)
}

// The VIP which you previously set aside for ingress traffic into this bare metal user cluster.
func (o BareMetalVipConfigResponseOutput) IngressVip() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalVipConfigResponse) string { return v.IngressVip }).(pulumi.StringOutput)
}

// Specifies the workload node configurations.
type BareMetalWorkloadNodeConfig struct {
	// Specifies which container runtime will be used.
	ContainerRuntime *BareMetalWorkloadNodeConfigContainerRuntime `pulumi:"containerRuntime"`
	// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter.
	MaxPodsPerNode *string `pulumi:"maxPodsPerNode"`
}

// BareMetalWorkloadNodeConfigInput is an input type that accepts BareMetalWorkloadNodeConfigArgs and BareMetalWorkloadNodeConfigOutput values.
// You can construct a concrete instance of `BareMetalWorkloadNodeConfigInput` via:
//
//	BareMetalWorkloadNodeConfigArgs{...}
type BareMetalWorkloadNodeConfigInput interface {
	pulumi.Input

	ToBareMetalWorkloadNodeConfigOutput() BareMetalWorkloadNodeConfigOutput
	ToBareMetalWorkloadNodeConfigOutputWithContext(context.Context) BareMetalWorkloadNodeConfigOutput
}

// Specifies the workload node configurations.
type BareMetalWorkloadNodeConfigArgs struct {
	// Specifies which container runtime will be used.
	ContainerRuntime BareMetalWorkloadNodeConfigContainerRuntimePtrInput `pulumi:"containerRuntime"`
	// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter.
	MaxPodsPerNode pulumi.StringPtrInput `pulumi:"maxPodsPerNode"`
}

func (BareMetalWorkloadNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalWorkloadNodeConfig)(nil)).Elem()
}

func (i BareMetalWorkloadNodeConfigArgs) ToBareMetalWorkloadNodeConfigOutput() BareMetalWorkloadNodeConfigOutput {
	return i.ToBareMetalWorkloadNodeConfigOutputWithContext(context.Background())
}

func (i BareMetalWorkloadNodeConfigArgs) ToBareMetalWorkloadNodeConfigOutputWithContext(ctx context.Context) BareMetalWorkloadNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalWorkloadNodeConfigOutput)
}

func (i BareMetalWorkloadNodeConfigArgs) ToBareMetalWorkloadNodeConfigPtrOutput() BareMetalWorkloadNodeConfigPtrOutput {
	return i.ToBareMetalWorkloadNodeConfigPtrOutputWithContext(context.Background())
}

func (i BareMetalWorkloadNodeConfigArgs) ToBareMetalWorkloadNodeConfigPtrOutputWithContext(ctx context.Context) BareMetalWorkloadNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalWorkloadNodeConfigOutput).ToBareMetalWorkloadNodeConfigPtrOutputWithContext(ctx)
}

// BareMetalWorkloadNodeConfigPtrInput is an input type that accepts BareMetalWorkloadNodeConfigArgs, BareMetalWorkloadNodeConfigPtr and BareMetalWorkloadNodeConfigPtrOutput values.
// You can construct a concrete instance of `BareMetalWorkloadNodeConfigPtrInput` via:
//
//	        BareMetalWorkloadNodeConfigArgs{...}
//
//	or:
//
//	        nil
type BareMetalWorkloadNodeConfigPtrInput interface {
	pulumi.Input

	ToBareMetalWorkloadNodeConfigPtrOutput() BareMetalWorkloadNodeConfigPtrOutput
	ToBareMetalWorkloadNodeConfigPtrOutputWithContext(context.Context) BareMetalWorkloadNodeConfigPtrOutput
}

type bareMetalWorkloadNodeConfigPtrType BareMetalWorkloadNodeConfigArgs

func BareMetalWorkloadNodeConfigPtr(v *BareMetalWorkloadNodeConfigArgs) BareMetalWorkloadNodeConfigPtrInput {
	return (*bareMetalWorkloadNodeConfigPtrType)(v)
}

func (*bareMetalWorkloadNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalWorkloadNodeConfig)(nil)).Elem()
}

func (i *bareMetalWorkloadNodeConfigPtrType) ToBareMetalWorkloadNodeConfigPtrOutput() BareMetalWorkloadNodeConfigPtrOutput {
	return i.ToBareMetalWorkloadNodeConfigPtrOutputWithContext(context.Background())
}

func (i *bareMetalWorkloadNodeConfigPtrType) ToBareMetalWorkloadNodeConfigPtrOutputWithContext(ctx context.Context) BareMetalWorkloadNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalWorkloadNodeConfigPtrOutput)
}

// Specifies the workload node configurations.
type BareMetalWorkloadNodeConfigOutput struct{ *pulumi.OutputState }

func (BareMetalWorkloadNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalWorkloadNodeConfig)(nil)).Elem()
}

func (o BareMetalWorkloadNodeConfigOutput) ToBareMetalWorkloadNodeConfigOutput() BareMetalWorkloadNodeConfigOutput {
	return o
}

func (o BareMetalWorkloadNodeConfigOutput) ToBareMetalWorkloadNodeConfigOutputWithContext(ctx context.Context) BareMetalWorkloadNodeConfigOutput {
	return o
}

func (o BareMetalWorkloadNodeConfigOutput) ToBareMetalWorkloadNodeConfigPtrOutput() BareMetalWorkloadNodeConfigPtrOutput {
	return o.ToBareMetalWorkloadNodeConfigPtrOutputWithContext(context.Background())
}

func (o BareMetalWorkloadNodeConfigOutput) ToBareMetalWorkloadNodeConfigPtrOutputWithContext(ctx context.Context) BareMetalWorkloadNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BareMetalWorkloadNodeConfig) *BareMetalWorkloadNodeConfig {
		return &v
	}).(BareMetalWorkloadNodeConfigPtrOutput)
}

// Specifies which container runtime will be used.
func (o BareMetalWorkloadNodeConfigOutput) ContainerRuntime() BareMetalWorkloadNodeConfigContainerRuntimePtrOutput {
	return o.ApplyT(func(v BareMetalWorkloadNodeConfig) *BareMetalWorkloadNodeConfigContainerRuntime {
		return v.ContainerRuntime
	}).(BareMetalWorkloadNodeConfigContainerRuntimePtrOutput)
}

// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter.
func (o BareMetalWorkloadNodeConfigOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalWorkloadNodeConfig) *string { return v.MaxPodsPerNode }).(pulumi.StringPtrOutput)
}

type BareMetalWorkloadNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (BareMetalWorkloadNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BareMetalWorkloadNodeConfig)(nil)).Elem()
}

func (o BareMetalWorkloadNodeConfigPtrOutput) ToBareMetalWorkloadNodeConfigPtrOutput() BareMetalWorkloadNodeConfigPtrOutput {
	return o
}

func (o BareMetalWorkloadNodeConfigPtrOutput) ToBareMetalWorkloadNodeConfigPtrOutputWithContext(ctx context.Context) BareMetalWorkloadNodeConfigPtrOutput {
	return o
}

func (o BareMetalWorkloadNodeConfigPtrOutput) Elem() BareMetalWorkloadNodeConfigOutput {
	return o.ApplyT(func(v *BareMetalWorkloadNodeConfig) BareMetalWorkloadNodeConfig {
		if v != nil {
			return *v
		}
		var ret BareMetalWorkloadNodeConfig
		return ret
	}).(BareMetalWorkloadNodeConfigOutput)
}

// Specifies which container runtime will be used.
func (o BareMetalWorkloadNodeConfigPtrOutput) ContainerRuntime() BareMetalWorkloadNodeConfigContainerRuntimePtrOutput {
	return o.ApplyT(func(v *BareMetalWorkloadNodeConfig) *BareMetalWorkloadNodeConfigContainerRuntime {
		if v == nil {
			return nil
		}
		return v.ContainerRuntime
	}).(BareMetalWorkloadNodeConfigContainerRuntimePtrOutput)
}

// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter.
func (o BareMetalWorkloadNodeConfigPtrOutput) MaxPodsPerNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BareMetalWorkloadNodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxPodsPerNode
	}).(pulumi.StringPtrOutput)
}

// Specifies the workload node configurations.
type BareMetalWorkloadNodeConfigResponse struct {
	// Specifies which container runtime will be used.
	ContainerRuntime string `pulumi:"containerRuntime"`
	// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter.
	MaxPodsPerNode string `pulumi:"maxPodsPerNode"`
}

// Specifies the workload node configurations.
type BareMetalWorkloadNodeConfigResponseOutput struct{ *pulumi.OutputState }

func (BareMetalWorkloadNodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalWorkloadNodeConfigResponse)(nil)).Elem()
}

func (o BareMetalWorkloadNodeConfigResponseOutput) ToBareMetalWorkloadNodeConfigResponseOutput() BareMetalWorkloadNodeConfigResponseOutput {
	return o
}

func (o BareMetalWorkloadNodeConfigResponseOutput) ToBareMetalWorkloadNodeConfigResponseOutputWithContext(ctx context.Context) BareMetalWorkloadNodeConfigResponseOutput {
	return o
}

// Specifies which container runtime will be used.
func (o BareMetalWorkloadNodeConfigResponseOutput) ContainerRuntime() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalWorkloadNodeConfigResponse) string { return v.ContainerRuntime }).(pulumi.StringOutput)
}

// The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter.
func (o BareMetalWorkloadNodeConfigResponseOutput) MaxPodsPerNode() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalWorkloadNodeConfigResponse) string { return v.MaxPodsPerNode }).(pulumi.StringOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// ClusterUser configures user principals for an RBAC policy.
type ClusterUser struct {
	// The name of the user, e.g. `my-gcp-id@gmail.com`.
	Username string `pulumi:"username"`
}

// ClusterUserInput is an input type that accepts ClusterUserArgs and ClusterUserOutput values.
// You can construct a concrete instance of `ClusterUserInput` via:
//
//	ClusterUserArgs{...}
type ClusterUserInput interface {
	pulumi.Input

	ToClusterUserOutput() ClusterUserOutput
	ToClusterUserOutputWithContext(context.Context) ClusterUserOutput
}

// ClusterUser configures user principals for an RBAC policy.
type ClusterUserArgs struct {
	// The name of the user, e.g. `my-gcp-id@gmail.com`.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ClusterUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUser)(nil)).Elem()
}

func (i ClusterUserArgs) ToClusterUserOutput() ClusterUserOutput {
	return i.ToClusterUserOutputWithContext(context.Background())
}

func (i ClusterUserArgs) ToClusterUserOutputWithContext(ctx context.Context) ClusterUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUserOutput)
}

// ClusterUserArrayInput is an input type that accepts ClusterUserArray and ClusterUserArrayOutput values.
// You can construct a concrete instance of `ClusterUserArrayInput` via:
//
//	ClusterUserArray{ ClusterUserArgs{...} }
type ClusterUserArrayInput interface {
	pulumi.Input

	ToClusterUserArrayOutput() ClusterUserArrayOutput
	ToClusterUserArrayOutputWithContext(context.Context) ClusterUserArrayOutput
}

type ClusterUserArray []ClusterUserInput

func (ClusterUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterUser)(nil)).Elem()
}

func (i ClusterUserArray) ToClusterUserArrayOutput() ClusterUserArrayOutput {
	return i.ToClusterUserArrayOutputWithContext(context.Background())
}

func (i ClusterUserArray) ToClusterUserArrayOutputWithContext(ctx context.Context) ClusterUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUserArrayOutput)
}

// ClusterUser configures user principals for an RBAC policy.
type ClusterUserOutput struct{ *pulumi.OutputState }

func (ClusterUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUser)(nil)).Elem()
}

func (o ClusterUserOutput) ToClusterUserOutput() ClusterUserOutput {
	return o
}

func (o ClusterUserOutput) ToClusterUserOutputWithContext(ctx context.Context) ClusterUserOutput {
	return o
}

// The name of the user, e.g. `my-gcp-id@gmail.com`.
func (o ClusterUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUser) string { return v.Username }).(pulumi.StringOutput)
}

type ClusterUserArrayOutput struct{ *pulumi.OutputState }

func (ClusterUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterUser)(nil)).Elem()
}

func (o ClusterUserArrayOutput) ToClusterUserArrayOutput() ClusterUserArrayOutput {
	return o
}

func (o ClusterUserArrayOutput) ToClusterUserArrayOutputWithContext(ctx context.Context) ClusterUserArrayOutput {
	return o
}

func (o ClusterUserArrayOutput) Index(i pulumi.IntInput) ClusterUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterUser {
		return vs[0].([]ClusterUser)[vs[1].(int)]
	}).(ClusterUserOutput)
}

// ClusterUser configures user principals for an RBAC policy.
type ClusterUserResponse struct {
	// The name of the user, e.g. `my-gcp-id@gmail.com`.
	Username string `pulumi:"username"`
}

// ClusterUser configures user principals for an RBAC policy.
type ClusterUserResponseOutput struct{ *pulumi.OutputState }

func (ClusterUserResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUserResponse)(nil)).Elem()
}

func (o ClusterUserResponseOutput) ToClusterUserResponseOutput() ClusterUserResponseOutput {
	return o
}

func (o ClusterUserResponseOutput) ToClusterUserResponseOutputWithContext(ctx context.Context) ClusterUserResponseOutput {
	return o
}

// The name of the user, e.g. `my-gcp-id@gmail.com`.
func (o ClusterUserResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUserResponse) string { return v.Username }).(pulumi.StringOutput)
}

type ClusterUserResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterUserResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterUserResponse)(nil)).Elem()
}

func (o ClusterUserResponseArrayOutput) ToClusterUserResponseArrayOutput() ClusterUserResponseArrayOutput {
	return o
}

func (o ClusterUserResponseArrayOutput) ToClusterUserResponseArrayOutputWithContext(ctx context.Context) ClusterUserResponseArrayOutput {
	return o
}

func (o ClusterUserResponseArrayOutput) Index(i pulumi.IntInput) ClusterUserResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterUserResponse {
		return vs[0].([]ClusterUserResponse)[vs[1].(int)]
	}).(ClusterUserResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Fleet related configuration. Fleets are a Google Cloud concept for logically organizing clusters, letting you use and manage multi-cluster capabilities and apply consistent policies across your systems. See [Anthos Fleets](`https://cloud.google.com/anthos/multicluster-management/fleets`) for more details on Anthos multi-cluster capabilities using Fleets. ##
type FleetResponse struct {
	// The name of the managed fleet Membership resource associated to this cluster. Membership names are formatted as `projects//locations//memberships/`.
	Membership string `pulumi:"membership"`
}

// Fleet related configuration. Fleets are a Google Cloud concept for logically organizing clusters, letting you use and manage multi-cluster capabilities and apply consistent policies across your systems. See [Anthos Fleets](`https://cloud.google.com/anthos/multicluster-management/fleets`) for more details on Anthos multi-cluster capabilities using Fleets. ##
type FleetResponseOutput struct{ *pulumi.OutputState }

func (FleetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetResponse)(nil)).Elem()
}

func (o FleetResponseOutput) ToFleetResponseOutput() FleetResponseOutput {
	return o
}

func (o FleetResponseOutput) ToFleetResponseOutputWithContext(ctx context.Context) FleetResponseOutput {
	return o
}

// The name of the managed fleet Membership resource associated to this cluster. Membership names are formatted as `projects//locations//memberships/`.
func (o FleetResponseOutput) Membership() pulumi.StringOutput {
	return o.ApplyT(func(v FleetResponse) string { return v.Membership }).(pulumi.StringOutput)
}

// NodeTaint applied to every Kubernetes node in a node pool. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. Node taints are permanent.
type NodeTaint struct {
	// The taint effect.
	Effect *NodeTaintEffect `pulumi:"effect"`
	// Key associated with the effect.
	Key *string `pulumi:"key"`
	// Value associated with the effect.
	Value *string `pulumi:"value"`
}

// NodeTaintInput is an input type that accepts NodeTaintArgs and NodeTaintOutput values.
// You can construct a concrete instance of `NodeTaintInput` via:
//
//	NodeTaintArgs{...}
type NodeTaintInput interface {
	pulumi.Input

	ToNodeTaintOutput() NodeTaintOutput
	ToNodeTaintOutputWithContext(context.Context) NodeTaintOutput
}

// NodeTaint applied to every Kubernetes node in a node pool. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. Node taints are permanent.
type NodeTaintArgs struct {
	// The taint effect.
	Effect NodeTaintEffectPtrInput `pulumi:"effect"`
	// Key associated with the effect.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value associated with the effect.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NodeTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (i NodeTaintArgs) ToNodeTaintOutput() NodeTaintOutput {
	return i.ToNodeTaintOutputWithContext(context.Background())
}

func (i NodeTaintArgs) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintOutput)
}

// NodeTaintArrayInput is an input type that accepts NodeTaintArray and NodeTaintArrayOutput values.
// You can construct a concrete instance of `NodeTaintArrayInput` via:
//
//	NodeTaintArray{ NodeTaintArgs{...} }
type NodeTaintArrayInput interface {
	pulumi.Input

	ToNodeTaintArrayOutput() NodeTaintArrayOutput
	ToNodeTaintArrayOutputWithContext(context.Context) NodeTaintArrayOutput
}

type NodeTaintArray []NodeTaintInput

func (NodeTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (i NodeTaintArray) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return i.ToNodeTaintArrayOutputWithContext(context.Background())
}

func (i NodeTaintArray) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintArrayOutput)
}

// NodeTaint applied to every Kubernetes node in a node pool. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. Node taints are permanent.
type NodeTaintOutput struct{ *pulumi.OutputState }

func (NodeTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (o NodeTaintOutput) ToNodeTaintOutput() NodeTaintOutput {
	return o
}

func (o NodeTaintOutput) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return o
}

// The taint effect.
func (o NodeTaintOutput) Effect() NodeTaintEffectPtrOutput {
	return o.ApplyT(func(v NodeTaint) *NodeTaintEffect { return v.Effect }).(NodeTaintEffectPtrOutput)
}

// Key associated with the effect.
func (o NodeTaintOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value associated with the effect.
func (o NodeTaintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NodeTaintArrayOutput struct{ *pulumi.OutputState }

func (NodeTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) Index(i pulumi.IntInput) NodeTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTaint {
		return vs[0].([]NodeTaint)[vs[1].(int)]
	}).(NodeTaintOutput)
}

// NodeTaint applied to every Kubernetes node in a node pool. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. Node taints are permanent.
type NodeTaintResponse struct {
	// The taint effect.
	Effect string `pulumi:"effect"`
	// Key associated with the effect.
	Key string `pulumi:"key"`
	// Value associated with the effect.
	Value string `pulumi:"value"`
}

// NodeTaint applied to every Kubernetes node in a node pool. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. Node taints are permanent.
type NodeTaintResponseOutput struct{ *pulumi.OutputState }

func (NodeTaintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaintResponse)(nil)).Elem()
}

func (o NodeTaintResponseOutput) ToNodeTaintResponseOutput() NodeTaintResponseOutput {
	return o
}

func (o NodeTaintResponseOutput) ToNodeTaintResponseOutputWithContext(ctx context.Context) NodeTaintResponseOutput {
	return o
}

// The taint effect.
func (o NodeTaintResponseOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaintResponse) string { return v.Effect }).(pulumi.StringOutput)
}

// Key associated with the effect.
func (o NodeTaintResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaintResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Value associated with the effect.
func (o NodeTaintResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaintResponse) string { return v.Value }).(pulumi.StringOutput)
}

type NodeTaintResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeTaintResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaintResponse)(nil)).Elem()
}

func (o NodeTaintResponseArrayOutput) ToNodeTaintResponseArrayOutput() NodeTaintResponseArrayOutput {
	return o
}

func (o NodeTaintResponseArrayOutput) ToNodeTaintResponseArrayOutputWithContext(ctx context.Context) NodeTaintResponseArrayOutput {
	return o
}

func (o NodeTaintResponseArrayOutput) Index(i pulumi.IntInput) NodeTaintResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTaintResponse {
		return vs[0].([]NodeTaintResponse)[vs[1].(int)]
	}).(NodeTaintResponseOutput)
}

// ResourceCondition provides a standard mechanism for higher-level status reporting from controller.
type ResourceConditionResponse struct {
	// Last time the condition transit from one status to another.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message string `pulumi:"message"`
	// Machine-readable message indicating details about last transition.
	Reason string `pulumi:"reason"`
	// state of the condition.
	State string `pulumi:"state"`
	// Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)
	Type string `pulumi:"type"`
}

// ResourceCondition provides a standard mechanism for higher-level status reporting from controller.
type ResourceConditionResponseOutput struct{ *pulumi.OutputState }

func (ResourceConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceConditionResponse)(nil)).Elem()
}

func (o ResourceConditionResponseOutput) ToResourceConditionResponseOutput() ResourceConditionResponseOutput {
	return o
}

func (o ResourceConditionResponseOutput) ToResourceConditionResponseOutputWithContext(ctx context.Context) ResourceConditionResponseOutput {
	return o
}

// Last time the condition transit from one status to another.
func (o ResourceConditionResponseOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceConditionResponse) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// Human-readable message indicating details about last transition.
func (o ResourceConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Machine-readable message indicating details about last transition.
func (o ResourceConditionResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceConditionResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// state of the condition.
func (o ResourceConditionResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceConditionResponse) string { return v.State }).(pulumi.StringOutput)
}

// Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)
func (o ResourceConditionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceConditionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ResourceConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceConditionResponse)(nil)).Elem()
}

func (o ResourceConditionResponseArrayOutput) ToResourceConditionResponseArrayOutput() ResourceConditionResponseArrayOutput {
	return o
}

func (o ResourceConditionResponseArrayOutput) ToResourceConditionResponseArrayOutputWithContext(ctx context.Context) ResourceConditionResponseArrayOutput {
	return o
}

func (o ResourceConditionResponseArrayOutput) Index(i pulumi.IntInput) ResourceConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceConditionResponse {
		return vs[0].([]ResourceConditionResponse)[vs[1].(int)]
	}).(ResourceConditionResponseOutput)
}

// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
type ResourceStatusResponse struct {
	// ResourceCondition provide a standard mechanism for higher-level status reporting from controller.
	Conditions []ResourceConditionResponse `pulumi:"conditions"`
	// Human-friendly representation of the error message from controller. The error message can be temporary as the controller controller creates a cluster or node pool. If the error message persists for a longer period of time, it can be used to surface error message to indicate real problems requiring user intervention.
	ErrorMessage string `pulumi:"errorMessage"`
}

// ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).
type ResourceStatusResponseOutput struct{ *pulumi.OutputState }

func (ResourceStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceStatusResponse)(nil)).Elem()
}

func (o ResourceStatusResponseOutput) ToResourceStatusResponseOutput() ResourceStatusResponseOutput {
	return o
}

func (o ResourceStatusResponseOutput) ToResourceStatusResponseOutputWithContext(ctx context.Context) ResourceStatusResponseOutput {
	return o
}

// ResourceCondition provide a standard mechanism for higher-level status reporting from controller.
func (o ResourceStatusResponseOutput) Conditions() ResourceConditionResponseArrayOutput {
	return o.ApplyT(func(v ResourceStatusResponse) []ResourceConditionResponse { return v.Conditions }).(ResourceConditionResponseArrayOutput)
}

// Human-friendly representation of the error message from controller. The error message can be temporary as the controller controller creates a cluster or node pool. If the error message persists for a longer period of time, it can be used to surface error message to indicate real problems requiring user intervention.
func (o ResourceStatusResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceStatusResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// ValidationCheck represents the result of preflight check.
type ValidationCheckResponse struct {
	// Options used for the validation check
	Option string `pulumi:"option"`
	// The scenario when the preflight checks were run.
	Scenario string `pulumi:"scenario"`
	// The detailed validation check status.
	Status ValidationCheckStatusResponse `pulumi:"status"`
}

// ValidationCheck represents the result of preflight check.
type ValidationCheckResponseOutput struct{ *pulumi.OutputState }

func (ValidationCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationCheckResponse)(nil)).Elem()
}

func (o ValidationCheckResponseOutput) ToValidationCheckResponseOutput() ValidationCheckResponseOutput {
	return o
}

func (o ValidationCheckResponseOutput) ToValidationCheckResponseOutputWithContext(ctx context.Context) ValidationCheckResponseOutput {
	return o
}

// Options used for the validation check
func (o ValidationCheckResponseOutput) Option() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationCheckResponse) string { return v.Option }).(pulumi.StringOutput)
}

// The scenario when the preflight checks were run.
func (o ValidationCheckResponseOutput) Scenario() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationCheckResponse) string { return v.Scenario }).(pulumi.StringOutput)
}

// The detailed validation check status.
func (o ValidationCheckResponseOutput) Status() ValidationCheckStatusResponseOutput {
	return o.ApplyT(func(v ValidationCheckResponse) ValidationCheckStatusResponse { return v.Status }).(ValidationCheckStatusResponseOutput)
}

// ValidationCheckResult defines the details about the validation check.
type ValidationCheckResultResponse struct {
	// The category of the validation.
	Category string `pulumi:"category"`
	// The description of the validation check.
	Description string `pulumi:"description"`
	// Detailed failure information, which might be unformatted.
	Details string `pulumi:"details"`
	// A human-readable message of the check failure.
	Reason string `pulumi:"reason"`
	// The validation check state.
	State string `pulumi:"state"`
}

// ValidationCheckResult defines the details about the validation check.
type ValidationCheckResultResponseOutput struct{ *pulumi.OutputState }

func (ValidationCheckResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationCheckResultResponse)(nil)).Elem()
}

func (o ValidationCheckResultResponseOutput) ToValidationCheckResultResponseOutput() ValidationCheckResultResponseOutput {
	return o
}

func (o ValidationCheckResultResponseOutput) ToValidationCheckResultResponseOutputWithContext(ctx context.Context) ValidationCheckResultResponseOutput {
	return o
}

// The category of the validation.
func (o ValidationCheckResultResponseOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationCheckResultResponse) string { return v.Category }).(pulumi.StringOutput)
}

// The description of the validation check.
func (o ValidationCheckResultResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationCheckResultResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Detailed failure information, which might be unformatted.
func (o ValidationCheckResultResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationCheckResultResponse) string { return v.Details }).(pulumi.StringOutput)
}

// A human-readable message of the check failure.
func (o ValidationCheckResultResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationCheckResultResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// The validation check state.
func (o ValidationCheckResultResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationCheckResultResponse) string { return v.State }).(pulumi.StringOutput)
}

type ValidationCheckResultResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidationCheckResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidationCheckResultResponse)(nil)).Elem()
}

func (o ValidationCheckResultResponseArrayOutput) ToValidationCheckResultResponseArrayOutput() ValidationCheckResultResponseArrayOutput {
	return o
}

func (o ValidationCheckResultResponseArrayOutput) ToValidationCheckResultResponseArrayOutputWithContext(ctx context.Context) ValidationCheckResultResponseArrayOutput {
	return o
}

func (o ValidationCheckResultResponseArrayOutput) Index(i pulumi.IntInput) ValidationCheckResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidationCheckResultResponse {
		return vs[0].([]ValidationCheckResultResponse)[vs[1].(int)]
	}).(ValidationCheckResultResponseOutput)
}

// ValidationCheckStatus defines the detailed validation check status.
type ValidationCheckStatusResponse struct {
	// Individual checks which failed as part of the Preflight check execution.
	Result []ValidationCheckResultResponse `pulumi:"result"`
}

// ValidationCheckStatus defines the detailed validation check status.
type ValidationCheckStatusResponseOutput struct{ *pulumi.OutputState }

func (ValidationCheckStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationCheckStatusResponse)(nil)).Elem()
}

func (o ValidationCheckStatusResponseOutput) ToValidationCheckStatusResponseOutput() ValidationCheckStatusResponseOutput {
	return o
}

func (o ValidationCheckStatusResponseOutput) ToValidationCheckStatusResponseOutputWithContext(ctx context.Context) ValidationCheckStatusResponseOutput {
	return o
}

// Individual checks which failed as part of the Preflight check execution.
func (o ValidationCheckStatusResponseOutput) Result() ValidationCheckResultResponseArrayOutput {
	return o.ApplyT(func(v ValidationCheckStatusResponse) []ValidationCheckResultResponse { return v.Result }).(ValidationCheckResultResponseArrayOutput)
}

// Specifies anti affinity group config for the VMware user cluster.
type VmwareAAGConfig struct {
	// Spread nodes across at least three physical hosts (requires at least three hosts). Enabled by default.
	AagConfigDisabled *bool `pulumi:"aagConfigDisabled"`
}

// VmwareAAGConfigInput is an input type that accepts VmwareAAGConfigArgs and VmwareAAGConfigOutput values.
// You can construct a concrete instance of `VmwareAAGConfigInput` via:
//
//	VmwareAAGConfigArgs{...}
type VmwareAAGConfigInput interface {
	pulumi.Input

	ToVmwareAAGConfigOutput() VmwareAAGConfigOutput
	ToVmwareAAGConfigOutputWithContext(context.Context) VmwareAAGConfigOutput
}

// Specifies anti affinity group config for the VMware user cluster.
type VmwareAAGConfigArgs struct {
	// Spread nodes across at least three physical hosts (requires at least three hosts). Enabled by default.
	AagConfigDisabled pulumi.BoolPtrInput `pulumi:"aagConfigDisabled"`
}

func (VmwareAAGConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAAGConfig)(nil)).Elem()
}

func (i VmwareAAGConfigArgs) ToVmwareAAGConfigOutput() VmwareAAGConfigOutput {
	return i.ToVmwareAAGConfigOutputWithContext(context.Background())
}

func (i VmwareAAGConfigArgs) ToVmwareAAGConfigOutputWithContext(ctx context.Context) VmwareAAGConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAAGConfigOutput)
}

func (i VmwareAAGConfigArgs) ToVmwareAAGConfigPtrOutput() VmwareAAGConfigPtrOutput {
	return i.ToVmwareAAGConfigPtrOutputWithContext(context.Background())
}

func (i VmwareAAGConfigArgs) ToVmwareAAGConfigPtrOutputWithContext(ctx context.Context) VmwareAAGConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAAGConfigOutput).ToVmwareAAGConfigPtrOutputWithContext(ctx)
}

// VmwareAAGConfigPtrInput is an input type that accepts VmwareAAGConfigArgs, VmwareAAGConfigPtr and VmwareAAGConfigPtrOutput values.
// You can construct a concrete instance of `VmwareAAGConfigPtrInput` via:
//
//	        VmwareAAGConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareAAGConfigPtrInput interface {
	pulumi.Input

	ToVmwareAAGConfigPtrOutput() VmwareAAGConfigPtrOutput
	ToVmwareAAGConfigPtrOutputWithContext(context.Context) VmwareAAGConfigPtrOutput
}

type vmwareAAGConfigPtrType VmwareAAGConfigArgs

func VmwareAAGConfigPtr(v *VmwareAAGConfigArgs) VmwareAAGConfigPtrInput {
	return (*vmwareAAGConfigPtrType)(v)
}

func (*vmwareAAGConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAAGConfig)(nil)).Elem()
}

func (i *vmwareAAGConfigPtrType) ToVmwareAAGConfigPtrOutput() VmwareAAGConfigPtrOutput {
	return i.ToVmwareAAGConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareAAGConfigPtrType) ToVmwareAAGConfigPtrOutputWithContext(ctx context.Context) VmwareAAGConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAAGConfigPtrOutput)
}

// Specifies anti affinity group config for the VMware user cluster.
type VmwareAAGConfigOutput struct{ *pulumi.OutputState }

func (VmwareAAGConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAAGConfig)(nil)).Elem()
}

func (o VmwareAAGConfigOutput) ToVmwareAAGConfigOutput() VmwareAAGConfigOutput {
	return o
}

func (o VmwareAAGConfigOutput) ToVmwareAAGConfigOutputWithContext(ctx context.Context) VmwareAAGConfigOutput {
	return o
}

func (o VmwareAAGConfigOutput) ToVmwareAAGConfigPtrOutput() VmwareAAGConfigPtrOutput {
	return o.ToVmwareAAGConfigPtrOutputWithContext(context.Background())
}

func (o VmwareAAGConfigOutput) ToVmwareAAGConfigPtrOutputWithContext(ctx context.Context) VmwareAAGConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareAAGConfig) *VmwareAAGConfig {
		return &v
	}).(VmwareAAGConfigPtrOutput)
}

// Spread nodes across at least three physical hosts (requires at least three hosts). Enabled by default.
func (o VmwareAAGConfigOutput) AagConfigDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareAAGConfig) *bool { return v.AagConfigDisabled }).(pulumi.BoolPtrOutput)
}

type VmwareAAGConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareAAGConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAAGConfig)(nil)).Elem()
}

func (o VmwareAAGConfigPtrOutput) ToVmwareAAGConfigPtrOutput() VmwareAAGConfigPtrOutput {
	return o
}

func (o VmwareAAGConfigPtrOutput) ToVmwareAAGConfigPtrOutputWithContext(ctx context.Context) VmwareAAGConfigPtrOutput {
	return o
}

func (o VmwareAAGConfigPtrOutput) Elem() VmwareAAGConfigOutput {
	return o.ApplyT(func(v *VmwareAAGConfig) VmwareAAGConfig {
		if v != nil {
			return *v
		}
		var ret VmwareAAGConfig
		return ret
	}).(VmwareAAGConfigOutput)
}

// Spread nodes across at least three physical hosts (requires at least three hosts). Enabled by default.
func (o VmwareAAGConfigPtrOutput) AagConfigDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAAGConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AagConfigDisabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies anti affinity group config for the VMware user cluster.
type VmwareAAGConfigResponse struct {
	// Spread nodes across at least three physical hosts (requires at least three hosts). Enabled by default.
	AagConfigDisabled bool `pulumi:"aagConfigDisabled"`
}

// Specifies anti affinity group config for the VMware user cluster.
type VmwareAAGConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareAAGConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAAGConfigResponse)(nil)).Elem()
}

func (o VmwareAAGConfigResponseOutput) ToVmwareAAGConfigResponseOutput() VmwareAAGConfigResponseOutput {
	return o
}

func (o VmwareAAGConfigResponseOutput) ToVmwareAAGConfigResponseOutputWithContext(ctx context.Context) VmwareAAGConfigResponseOutput {
	return o
}

// Spread nodes across at least three physical hosts (requires at least three hosts). Enabled by default.
func (o VmwareAAGConfigResponseOutput) AagConfigDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareAAGConfigResponse) bool { return v.AagConfigDisabled }).(pulumi.BoolOutput)
}

// Represents an IP pool used by the load balancer.
type VmwareAddressPool struct {
	// The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
	Addresses []string `pulumi:"addresses"`
	// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
	AvoidBuggyIps *bool `pulumi:"avoidBuggyIps"`
	// If true, prevent IP addresses from being automatically assigned.
	ManualAssign *bool `pulumi:"manualAssign"`
	// The name of the address pool.
	Pool string `pulumi:"pool"`
}

// VmwareAddressPoolInput is an input type that accepts VmwareAddressPoolArgs and VmwareAddressPoolOutput values.
// You can construct a concrete instance of `VmwareAddressPoolInput` via:
//
//	VmwareAddressPoolArgs{...}
type VmwareAddressPoolInput interface {
	pulumi.Input

	ToVmwareAddressPoolOutput() VmwareAddressPoolOutput
	ToVmwareAddressPoolOutputWithContext(context.Context) VmwareAddressPoolOutput
}

// Represents an IP pool used by the load balancer.
type VmwareAddressPoolArgs struct {
	// The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
	AvoidBuggyIps pulumi.BoolPtrInput `pulumi:"avoidBuggyIps"`
	// If true, prevent IP addresses from being automatically assigned.
	ManualAssign pulumi.BoolPtrInput `pulumi:"manualAssign"`
	// The name of the address pool.
	Pool pulumi.StringInput `pulumi:"pool"`
}

func (VmwareAddressPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAddressPool)(nil)).Elem()
}

func (i VmwareAddressPoolArgs) ToVmwareAddressPoolOutput() VmwareAddressPoolOutput {
	return i.ToVmwareAddressPoolOutputWithContext(context.Background())
}

func (i VmwareAddressPoolArgs) ToVmwareAddressPoolOutputWithContext(ctx context.Context) VmwareAddressPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAddressPoolOutput)
}

// VmwareAddressPoolArrayInput is an input type that accepts VmwareAddressPoolArray and VmwareAddressPoolArrayOutput values.
// You can construct a concrete instance of `VmwareAddressPoolArrayInput` via:
//
//	VmwareAddressPoolArray{ VmwareAddressPoolArgs{...} }
type VmwareAddressPoolArrayInput interface {
	pulumi.Input

	ToVmwareAddressPoolArrayOutput() VmwareAddressPoolArrayOutput
	ToVmwareAddressPoolArrayOutputWithContext(context.Context) VmwareAddressPoolArrayOutput
}

type VmwareAddressPoolArray []VmwareAddressPoolInput

func (VmwareAddressPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareAddressPool)(nil)).Elem()
}

func (i VmwareAddressPoolArray) ToVmwareAddressPoolArrayOutput() VmwareAddressPoolArrayOutput {
	return i.ToVmwareAddressPoolArrayOutputWithContext(context.Background())
}

func (i VmwareAddressPoolArray) ToVmwareAddressPoolArrayOutputWithContext(ctx context.Context) VmwareAddressPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAddressPoolArrayOutput)
}

// Represents an IP pool used by the load balancer.
type VmwareAddressPoolOutput struct{ *pulumi.OutputState }

func (VmwareAddressPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAddressPool)(nil)).Elem()
}

func (o VmwareAddressPoolOutput) ToVmwareAddressPoolOutput() VmwareAddressPoolOutput {
	return o
}

func (o VmwareAddressPoolOutput) ToVmwareAddressPoolOutputWithContext(ctx context.Context) VmwareAddressPoolOutput {
	return o
}

// The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
func (o VmwareAddressPoolOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareAddressPool) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
func (o VmwareAddressPoolOutput) AvoidBuggyIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareAddressPool) *bool { return v.AvoidBuggyIps }).(pulumi.BoolPtrOutput)
}

// If true, prevent IP addresses from being automatically assigned.
func (o VmwareAddressPoolOutput) ManualAssign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareAddressPool) *bool { return v.ManualAssign }).(pulumi.BoolPtrOutput)
}

// The name of the address pool.
func (o VmwareAddressPoolOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareAddressPool) string { return v.Pool }).(pulumi.StringOutput)
}

type VmwareAddressPoolArrayOutput struct{ *pulumi.OutputState }

func (VmwareAddressPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareAddressPool)(nil)).Elem()
}

func (o VmwareAddressPoolArrayOutput) ToVmwareAddressPoolArrayOutput() VmwareAddressPoolArrayOutput {
	return o
}

func (o VmwareAddressPoolArrayOutput) ToVmwareAddressPoolArrayOutputWithContext(ctx context.Context) VmwareAddressPoolArrayOutput {
	return o
}

func (o VmwareAddressPoolArrayOutput) Index(i pulumi.IntInput) VmwareAddressPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmwareAddressPool {
		return vs[0].([]VmwareAddressPool)[vs[1].(int)]
	}).(VmwareAddressPoolOutput)
}

// Represents an IP pool used by the load balancer.
type VmwareAddressPoolResponse struct {
	// The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
	Addresses []string `pulumi:"addresses"`
	// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
	AvoidBuggyIps bool `pulumi:"avoidBuggyIps"`
	// If true, prevent IP addresses from being automatically assigned.
	ManualAssign bool `pulumi:"manualAssign"`
	// The name of the address pool.
	Pool string `pulumi:"pool"`
}

// Represents an IP pool used by the load balancer.
type VmwareAddressPoolResponseOutput struct{ *pulumi.OutputState }

func (VmwareAddressPoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAddressPoolResponse)(nil)).Elem()
}

func (o VmwareAddressPoolResponseOutput) ToVmwareAddressPoolResponseOutput() VmwareAddressPoolResponseOutput {
	return o
}

func (o VmwareAddressPoolResponseOutput) ToVmwareAddressPoolResponseOutputWithContext(ctx context.Context) VmwareAddressPoolResponseOutput {
	return o
}

// The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).
func (o VmwareAddressPoolResponseOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareAddressPoolResponse) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.
func (o VmwareAddressPoolResponseOutput) AvoidBuggyIps() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareAddressPoolResponse) bool { return v.AvoidBuggyIps }).(pulumi.BoolOutput)
}

// If true, prevent IP addresses from being automatically assigned.
func (o VmwareAddressPoolResponseOutput) ManualAssign() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareAddressPoolResponse) bool { return v.ManualAssign }).(pulumi.BoolOutput)
}

// The name of the address pool.
func (o VmwareAddressPoolResponseOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareAddressPoolResponse) string { return v.Pool }).(pulumi.StringOutput)
}

type VmwareAddressPoolResponseArrayOutput struct{ *pulumi.OutputState }

func (VmwareAddressPoolResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareAddressPoolResponse)(nil)).Elem()
}

func (o VmwareAddressPoolResponseArrayOutput) ToVmwareAddressPoolResponseArrayOutput() VmwareAddressPoolResponseArrayOutput {
	return o
}

func (o VmwareAddressPoolResponseArrayOutput) ToVmwareAddressPoolResponseArrayOutputWithContext(ctx context.Context) VmwareAddressPoolResponseArrayOutput {
	return o
}

func (o VmwareAddressPoolResponseArrayOutput) Index(i pulumi.IntInput) VmwareAddressPoolResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmwareAddressPoolResponse {
		return vs[0].([]VmwareAddressPoolResponse)[vs[1].(int)]
	}).(VmwareAddressPoolResponseOutput)
}

// Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.
type VmwareAutoRepairConfig struct {
	// Whether auto repair is enabled.
	Enabled *bool `pulumi:"enabled"`
}

// VmwareAutoRepairConfigInput is an input type that accepts VmwareAutoRepairConfigArgs and VmwareAutoRepairConfigOutput values.
// You can construct a concrete instance of `VmwareAutoRepairConfigInput` via:
//
//	VmwareAutoRepairConfigArgs{...}
type VmwareAutoRepairConfigInput interface {
	pulumi.Input

	ToVmwareAutoRepairConfigOutput() VmwareAutoRepairConfigOutput
	ToVmwareAutoRepairConfigOutputWithContext(context.Context) VmwareAutoRepairConfigOutput
}

// Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.
type VmwareAutoRepairConfigArgs struct {
	// Whether auto repair is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (VmwareAutoRepairConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAutoRepairConfig)(nil)).Elem()
}

func (i VmwareAutoRepairConfigArgs) ToVmwareAutoRepairConfigOutput() VmwareAutoRepairConfigOutput {
	return i.ToVmwareAutoRepairConfigOutputWithContext(context.Background())
}

func (i VmwareAutoRepairConfigArgs) ToVmwareAutoRepairConfigOutputWithContext(ctx context.Context) VmwareAutoRepairConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAutoRepairConfigOutput)
}

func (i VmwareAutoRepairConfigArgs) ToVmwareAutoRepairConfigPtrOutput() VmwareAutoRepairConfigPtrOutput {
	return i.ToVmwareAutoRepairConfigPtrOutputWithContext(context.Background())
}

func (i VmwareAutoRepairConfigArgs) ToVmwareAutoRepairConfigPtrOutputWithContext(ctx context.Context) VmwareAutoRepairConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAutoRepairConfigOutput).ToVmwareAutoRepairConfigPtrOutputWithContext(ctx)
}

// VmwareAutoRepairConfigPtrInput is an input type that accepts VmwareAutoRepairConfigArgs, VmwareAutoRepairConfigPtr and VmwareAutoRepairConfigPtrOutput values.
// You can construct a concrete instance of `VmwareAutoRepairConfigPtrInput` via:
//
//	        VmwareAutoRepairConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareAutoRepairConfigPtrInput interface {
	pulumi.Input

	ToVmwareAutoRepairConfigPtrOutput() VmwareAutoRepairConfigPtrOutput
	ToVmwareAutoRepairConfigPtrOutputWithContext(context.Context) VmwareAutoRepairConfigPtrOutput
}

type vmwareAutoRepairConfigPtrType VmwareAutoRepairConfigArgs

func VmwareAutoRepairConfigPtr(v *VmwareAutoRepairConfigArgs) VmwareAutoRepairConfigPtrInput {
	return (*vmwareAutoRepairConfigPtrType)(v)
}

func (*vmwareAutoRepairConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAutoRepairConfig)(nil)).Elem()
}

func (i *vmwareAutoRepairConfigPtrType) ToVmwareAutoRepairConfigPtrOutput() VmwareAutoRepairConfigPtrOutput {
	return i.ToVmwareAutoRepairConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareAutoRepairConfigPtrType) ToVmwareAutoRepairConfigPtrOutputWithContext(ctx context.Context) VmwareAutoRepairConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAutoRepairConfigPtrOutput)
}

// Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.
type VmwareAutoRepairConfigOutput struct{ *pulumi.OutputState }

func (VmwareAutoRepairConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAutoRepairConfig)(nil)).Elem()
}

func (o VmwareAutoRepairConfigOutput) ToVmwareAutoRepairConfigOutput() VmwareAutoRepairConfigOutput {
	return o
}

func (o VmwareAutoRepairConfigOutput) ToVmwareAutoRepairConfigOutputWithContext(ctx context.Context) VmwareAutoRepairConfigOutput {
	return o
}

func (o VmwareAutoRepairConfigOutput) ToVmwareAutoRepairConfigPtrOutput() VmwareAutoRepairConfigPtrOutput {
	return o.ToVmwareAutoRepairConfigPtrOutputWithContext(context.Background())
}

func (o VmwareAutoRepairConfigOutput) ToVmwareAutoRepairConfigPtrOutputWithContext(ctx context.Context) VmwareAutoRepairConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareAutoRepairConfig) *VmwareAutoRepairConfig {
		return &v
	}).(VmwareAutoRepairConfigPtrOutput)
}

// Whether auto repair is enabled.
func (o VmwareAutoRepairConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareAutoRepairConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type VmwareAutoRepairConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareAutoRepairConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAutoRepairConfig)(nil)).Elem()
}

func (o VmwareAutoRepairConfigPtrOutput) ToVmwareAutoRepairConfigPtrOutput() VmwareAutoRepairConfigPtrOutput {
	return o
}

func (o VmwareAutoRepairConfigPtrOutput) ToVmwareAutoRepairConfigPtrOutputWithContext(ctx context.Context) VmwareAutoRepairConfigPtrOutput {
	return o
}

func (o VmwareAutoRepairConfigPtrOutput) Elem() VmwareAutoRepairConfigOutput {
	return o.ApplyT(func(v *VmwareAutoRepairConfig) VmwareAutoRepairConfig {
		if v != nil {
			return *v
		}
		var ret VmwareAutoRepairConfig
		return ret
	}).(VmwareAutoRepairConfigOutput)
}

// Whether auto repair is enabled.
func (o VmwareAutoRepairConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAutoRepairConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.
type VmwareAutoRepairConfigResponse struct {
	// Whether auto repair is enabled.
	Enabled bool `pulumi:"enabled"`
}

// Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.
type VmwareAutoRepairConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareAutoRepairConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAutoRepairConfigResponse)(nil)).Elem()
}

func (o VmwareAutoRepairConfigResponseOutput) ToVmwareAutoRepairConfigResponseOutput() VmwareAutoRepairConfigResponseOutput {
	return o
}

func (o VmwareAutoRepairConfigResponseOutput) ToVmwareAutoRepairConfigResponseOutputWithContext(ctx context.Context) VmwareAutoRepairConfigResponseOutput {
	return o
}

// Whether auto repair is enabled.
func (o VmwareAutoRepairConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareAutoRepairConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Represents auto resizing configurations for the VMware user cluster.
type VmwareAutoResizeConfig struct {
	// Whether to enable controle plane node auto resizing.
	Enabled *bool `pulumi:"enabled"`
}

// VmwareAutoResizeConfigInput is an input type that accepts VmwareAutoResizeConfigArgs and VmwareAutoResizeConfigOutput values.
// You can construct a concrete instance of `VmwareAutoResizeConfigInput` via:
//
//	VmwareAutoResizeConfigArgs{...}
type VmwareAutoResizeConfigInput interface {
	pulumi.Input

	ToVmwareAutoResizeConfigOutput() VmwareAutoResizeConfigOutput
	ToVmwareAutoResizeConfigOutputWithContext(context.Context) VmwareAutoResizeConfigOutput
}

// Represents auto resizing configurations for the VMware user cluster.
type VmwareAutoResizeConfigArgs struct {
	// Whether to enable controle plane node auto resizing.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (VmwareAutoResizeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAutoResizeConfig)(nil)).Elem()
}

func (i VmwareAutoResizeConfigArgs) ToVmwareAutoResizeConfigOutput() VmwareAutoResizeConfigOutput {
	return i.ToVmwareAutoResizeConfigOutputWithContext(context.Background())
}

func (i VmwareAutoResizeConfigArgs) ToVmwareAutoResizeConfigOutputWithContext(ctx context.Context) VmwareAutoResizeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAutoResizeConfigOutput)
}

func (i VmwareAutoResizeConfigArgs) ToVmwareAutoResizeConfigPtrOutput() VmwareAutoResizeConfigPtrOutput {
	return i.ToVmwareAutoResizeConfigPtrOutputWithContext(context.Background())
}

func (i VmwareAutoResizeConfigArgs) ToVmwareAutoResizeConfigPtrOutputWithContext(ctx context.Context) VmwareAutoResizeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAutoResizeConfigOutput).ToVmwareAutoResizeConfigPtrOutputWithContext(ctx)
}

// VmwareAutoResizeConfigPtrInput is an input type that accepts VmwareAutoResizeConfigArgs, VmwareAutoResizeConfigPtr and VmwareAutoResizeConfigPtrOutput values.
// You can construct a concrete instance of `VmwareAutoResizeConfigPtrInput` via:
//
//	        VmwareAutoResizeConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareAutoResizeConfigPtrInput interface {
	pulumi.Input

	ToVmwareAutoResizeConfigPtrOutput() VmwareAutoResizeConfigPtrOutput
	ToVmwareAutoResizeConfigPtrOutputWithContext(context.Context) VmwareAutoResizeConfigPtrOutput
}

type vmwareAutoResizeConfigPtrType VmwareAutoResizeConfigArgs

func VmwareAutoResizeConfigPtr(v *VmwareAutoResizeConfigArgs) VmwareAutoResizeConfigPtrInput {
	return (*vmwareAutoResizeConfigPtrType)(v)
}

func (*vmwareAutoResizeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAutoResizeConfig)(nil)).Elem()
}

func (i *vmwareAutoResizeConfigPtrType) ToVmwareAutoResizeConfigPtrOutput() VmwareAutoResizeConfigPtrOutput {
	return i.ToVmwareAutoResizeConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareAutoResizeConfigPtrType) ToVmwareAutoResizeConfigPtrOutputWithContext(ctx context.Context) VmwareAutoResizeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAutoResizeConfigPtrOutput)
}

// Represents auto resizing configurations for the VMware user cluster.
type VmwareAutoResizeConfigOutput struct{ *pulumi.OutputState }

func (VmwareAutoResizeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAutoResizeConfig)(nil)).Elem()
}

func (o VmwareAutoResizeConfigOutput) ToVmwareAutoResizeConfigOutput() VmwareAutoResizeConfigOutput {
	return o
}

func (o VmwareAutoResizeConfigOutput) ToVmwareAutoResizeConfigOutputWithContext(ctx context.Context) VmwareAutoResizeConfigOutput {
	return o
}

func (o VmwareAutoResizeConfigOutput) ToVmwareAutoResizeConfigPtrOutput() VmwareAutoResizeConfigPtrOutput {
	return o.ToVmwareAutoResizeConfigPtrOutputWithContext(context.Background())
}

func (o VmwareAutoResizeConfigOutput) ToVmwareAutoResizeConfigPtrOutputWithContext(ctx context.Context) VmwareAutoResizeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareAutoResizeConfig) *VmwareAutoResizeConfig {
		return &v
	}).(VmwareAutoResizeConfigPtrOutput)
}

// Whether to enable controle plane node auto resizing.
func (o VmwareAutoResizeConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareAutoResizeConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type VmwareAutoResizeConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareAutoResizeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAutoResizeConfig)(nil)).Elem()
}

func (o VmwareAutoResizeConfigPtrOutput) ToVmwareAutoResizeConfigPtrOutput() VmwareAutoResizeConfigPtrOutput {
	return o
}

func (o VmwareAutoResizeConfigPtrOutput) ToVmwareAutoResizeConfigPtrOutputWithContext(ctx context.Context) VmwareAutoResizeConfigPtrOutput {
	return o
}

func (o VmwareAutoResizeConfigPtrOutput) Elem() VmwareAutoResizeConfigOutput {
	return o.ApplyT(func(v *VmwareAutoResizeConfig) VmwareAutoResizeConfig {
		if v != nil {
			return *v
		}
		var ret VmwareAutoResizeConfig
		return ret
	}).(VmwareAutoResizeConfigOutput)
}

// Whether to enable controle plane node auto resizing.
func (o VmwareAutoResizeConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareAutoResizeConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Represents auto resizing configurations for the VMware user cluster.
type VmwareAutoResizeConfigResponse struct {
	// Whether to enable controle plane node auto resizing.
	Enabled bool `pulumi:"enabled"`
}

// Represents auto resizing configurations for the VMware user cluster.
type VmwareAutoResizeConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareAutoResizeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareAutoResizeConfigResponse)(nil)).Elem()
}

func (o VmwareAutoResizeConfigResponseOutput) ToVmwareAutoResizeConfigResponseOutput() VmwareAutoResizeConfigResponseOutput {
	return o
}

func (o VmwareAutoResizeConfigResponseOutput) ToVmwareAutoResizeConfigResponseOutputWithContext(ctx context.Context) VmwareAutoResizeConfigResponseOutput {
	return o
}

// Whether to enable controle plane node auto resizing.
func (o VmwareAutoResizeConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareAutoResizeConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies control plane node config for the VMware user cluster.
type VmwareControlPlaneNodeConfig struct {
	// AutoResizeConfig provides auto resizing configurations.
	AutoResizeConfig *VmwareAutoResizeConfig `pulumi:"autoResizeConfig"`
	// The number of CPUs for each admin cluster node that serve as control planes for this VMware user cluster. (default: 4 CPUs)
	Cpus *string `pulumi:"cpus"`
	// The megabytes of memory for each admin cluster node that serves as a control plane for this VMware user cluster (default: 8192 MB memory).
	Memory *string `pulumi:"memory"`
	// The number of control plane nodes for this VMware user cluster. (default: 1 replica).
	Replicas *string `pulumi:"replicas"`
}

// VmwareControlPlaneNodeConfigInput is an input type that accepts VmwareControlPlaneNodeConfigArgs and VmwareControlPlaneNodeConfigOutput values.
// You can construct a concrete instance of `VmwareControlPlaneNodeConfigInput` via:
//
//	VmwareControlPlaneNodeConfigArgs{...}
type VmwareControlPlaneNodeConfigInput interface {
	pulumi.Input

	ToVmwareControlPlaneNodeConfigOutput() VmwareControlPlaneNodeConfigOutput
	ToVmwareControlPlaneNodeConfigOutputWithContext(context.Context) VmwareControlPlaneNodeConfigOutput
}

// Specifies control plane node config for the VMware user cluster.
type VmwareControlPlaneNodeConfigArgs struct {
	// AutoResizeConfig provides auto resizing configurations.
	AutoResizeConfig VmwareAutoResizeConfigPtrInput `pulumi:"autoResizeConfig"`
	// The number of CPUs for each admin cluster node that serve as control planes for this VMware user cluster. (default: 4 CPUs)
	Cpus pulumi.StringPtrInput `pulumi:"cpus"`
	// The megabytes of memory for each admin cluster node that serves as a control plane for this VMware user cluster (default: 8192 MB memory).
	Memory pulumi.StringPtrInput `pulumi:"memory"`
	// The number of control plane nodes for this VMware user cluster. (default: 1 replica).
	Replicas pulumi.StringPtrInput `pulumi:"replicas"`
}

func (VmwareControlPlaneNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareControlPlaneNodeConfig)(nil)).Elem()
}

func (i VmwareControlPlaneNodeConfigArgs) ToVmwareControlPlaneNodeConfigOutput() VmwareControlPlaneNodeConfigOutput {
	return i.ToVmwareControlPlaneNodeConfigOutputWithContext(context.Background())
}

func (i VmwareControlPlaneNodeConfigArgs) ToVmwareControlPlaneNodeConfigOutputWithContext(ctx context.Context) VmwareControlPlaneNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareControlPlaneNodeConfigOutput)
}

func (i VmwareControlPlaneNodeConfigArgs) ToVmwareControlPlaneNodeConfigPtrOutput() VmwareControlPlaneNodeConfigPtrOutput {
	return i.ToVmwareControlPlaneNodeConfigPtrOutputWithContext(context.Background())
}

func (i VmwareControlPlaneNodeConfigArgs) ToVmwareControlPlaneNodeConfigPtrOutputWithContext(ctx context.Context) VmwareControlPlaneNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareControlPlaneNodeConfigOutput).ToVmwareControlPlaneNodeConfigPtrOutputWithContext(ctx)
}

// VmwareControlPlaneNodeConfigPtrInput is an input type that accepts VmwareControlPlaneNodeConfigArgs, VmwareControlPlaneNodeConfigPtr and VmwareControlPlaneNodeConfigPtrOutput values.
// You can construct a concrete instance of `VmwareControlPlaneNodeConfigPtrInput` via:
//
//	        VmwareControlPlaneNodeConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareControlPlaneNodeConfigPtrInput interface {
	pulumi.Input

	ToVmwareControlPlaneNodeConfigPtrOutput() VmwareControlPlaneNodeConfigPtrOutput
	ToVmwareControlPlaneNodeConfigPtrOutputWithContext(context.Context) VmwareControlPlaneNodeConfigPtrOutput
}

type vmwareControlPlaneNodeConfigPtrType VmwareControlPlaneNodeConfigArgs

func VmwareControlPlaneNodeConfigPtr(v *VmwareControlPlaneNodeConfigArgs) VmwareControlPlaneNodeConfigPtrInput {
	return (*vmwareControlPlaneNodeConfigPtrType)(v)
}

func (*vmwareControlPlaneNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareControlPlaneNodeConfig)(nil)).Elem()
}

func (i *vmwareControlPlaneNodeConfigPtrType) ToVmwareControlPlaneNodeConfigPtrOutput() VmwareControlPlaneNodeConfigPtrOutput {
	return i.ToVmwareControlPlaneNodeConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareControlPlaneNodeConfigPtrType) ToVmwareControlPlaneNodeConfigPtrOutputWithContext(ctx context.Context) VmwareControlPlaneNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareControlPlaneNodeConfigPtrOutput)
}

// Specifies control plane node config for the VMware user cluster.
type VmwareControlPlaneNodeConfigOutput struct{ *pulumi.OutputState }

func (VmwareControlPlaneNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareControlPlaneNodeConfig)(nil)).Elem()
}

func (o VmwareControlPlaneNodeConfigOutput) ToVmwareControlPlaneNodeConfigOutput() VmwareControlPlaneNodeConfigOutput {
	return o
}

func (o VmwareControlPlaneNodeConfigOutput) ToVmwareControlPlaneNodeConfigOutputWithContext(ctx context.Context) VmwareControlPlaneNodeConfigOutput {
	return o
}

func (o VmwareControlPlaneNodeConfigOutput) ToVmwareControlPlaneNodeConfigPtrOutput() VmwareControlPlaneNodeConfigPtrOutput {
	return o.ToVmwareControlPlaneNodeConfigPtrOutputWithContext(context.Background())
}

func (o VmwareControlPlaneNodeConfigOutput) ToVmwareControlPlaneNodeConfigPtrOutputWithContext(ctx context.Context) VmwareControlPlaneNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareControlPlaneNodeConfig) *VmwareControlPlaneNodeConfig {
		return &v
	}).(VmwareControlPlaneNodeConfigPtrOutput)
}

// AutoResizeConfig provides auto resizing configurations.
func (o VmwareControlPlaneNodeConfigOutput) AutoResizeConfig() VmwareAutoResizeConfigPtrOutput {
	return o.ApplyT(func(v VmwareControlPlaneNodeConfig) *VmwareAutoResizeConfig { return v.AutoResizeConfig }).(VmwareAutoResizeConfigPtrOutput)
}

// The number of CPUs for each admin cluster node that serve as control planes for this VMware user cluster. (default: 4 CPUs)
func (o VmwareControlPlaneNodeConfigOutput) Cpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareControlPlaneNodeConfig) *string { return v.Cpus }).(pulumi.StringPtrOutput)
}

// The megabytes of memory for each admin cluster node that serves as a control plane for this VMware user cluster (default: 8192 MB memory).
func (o VmwareControlPlaneNodeConfigOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareControlPlaneNodeConfig) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

// The number of control plane nodes for this VMware user cluster. (default: 1 replica).
func (o VmwareControlPlaneNodeConfigOutput) Replicas() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareControlPlaneNodeConfig) *string { return v.Replicas }).(pulumi.StringPtrOutput)
}

type VmwareControlPlaneNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareControlPlaneNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareControlPlaneNodeConfig)(nil)).Elem()
}

func (o VmwareControlPlaneNodeConfigPtrOutput) ToVmwareControlPlaneNodeConfigPtrOutput() VmwareControlPlaneNodeConfigPtrOutput {
	return o
}

func (o VmwareControlPlaneNodeConfigPtrOutput) ToVmwareControlPlaneNodeConfigPtrOutputWithContext(ctx context.Context) VmwareControlPlaneNodeConfigPtrOutput {
	return o
}

func (o VmwareControlPlaneNodeConfigPtrOutput) Elem() VmwareControlPlaneNodeConfigOutput {
	return o.ApplyT(func(v *VmwareControlPlaneNodeConfig) VmwareControlPlaneNodeConfig {
		if v != nil {
			return *v
		}
		var ret VmwareControlPlaneNodeConfig
		return ret
	}).(VmwareControlPlaneNodeConfigOutput)
}

// AutoResizeConfig provides auto resizing configurations.
func (o VmwareControlPlaneNodeConfigPtrOutput) AutoResizeConfig() VmwareAutoResizeConfigPtrOutput {
	return o.ApplyT(func(v *VmwareControlPlaneNodeConfig) *VmwareAutoResizeConfig {
		if v == nil {
			return nil
		}
		return v.AutoResizeConfig
	}).(VmwareAutoResizeConfigPtrOutput)
}

// The number of CPUs for each admin cluster node that serve as control planes for this VMware user cluster. (default: 4 CPUs)
func (o VmwareControlPlaneNodeConfigPtrOutput) Cpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareControlPlaneNodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Cpus
	}).(pulumi.StringPtrOutput)
}

// The megabytes of memory for each admin cluster node that serves as a control plane for this VMware user cluster (default: 8192 MB memory).
func (o VmwareControlPlaneNodeConfigPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareControlPlaneNodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

// The number of control plane nodes for this VMware user cluster. (default: 1 replica).
func (o VmwareControlPlaneNodeConfigPtrOutput) Replicas() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareControlPlaneNodeConfig) *string {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.StringPtrOutput)
}

// Specifies control plane node config for the VMware user cluster.
type VmwareControlPlaneNodeConfigResponse struct {
	// AutoResizeConfig provides auto resizing configurations.
	AutoResizeConfig VmwareAutoResizeConfigResponse `pulumi:"autoResizeConfig"`
	// The number of CPUs for each admin cluster node that serve as control planes for this VMware user cluster. (default: 4 CPUs)
	Cpus string `pulumi:"cpus"`
	// The megabytes of memory for each admin cluster node that serves as a control plane for this VMware user cluster (default: 8192 MB memory).
	Memory string `pulumi:"memory"`
	// The number of control plane nodes for this VMware user cluster. (default: 1 replica).
	Replicas string `pulumi:"replicas"`
	// Vsphere-specific config.
	VsphereConfig VmwareControlPlaneVsphereConfigResponse `pulumi:"vsphereConfig"`
}

// Specifies control plane node config for the VMware user cluster.
type VmwareControlPlaneNodeConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareControlPlaneNodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareControlPlaneNodeConfigResponse)(nil)).Elem()
}

func (o VmwareControlPlaneNodeConfigResponseOutput) ToVmwareControlPlaneNodeConfigResponseOutput() VmwareControlPlaneNodeConfigResponseOutput {
	return o
}

func (o VmwareControlPlaneNodeConfigResponseOutput) ToVmwareControlPlaneNodeConfigResponseOutputWithContext(ctx context.Context) VmwareControlPlaneNodeConfigResponseOutput {
	return o
}

// AutoResizeConfig provides auto resizing configurations.
func (o VmwareControlPlaneNodeConfigResponseOutput) AutoResizeConfig() VmwareAutoResizeConfigResponseOutput {
	return o.ApplyT(func(v VmwareControlPlaneNodeConfigResponse) VmwareAutoResizeConfigResponse { return v.AutoResizeConfig }).(VmwareAutoResizeConfigResponseOutput)
}

// The number of CPUs for each admin cluster node that serve as control planes for this VMware user cluster. (default: 4 CPUs)
func (o VmwareControlPlaneNodeConfigResponseOutput) Cpus() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareControlPlaneNodeConfigResponse) string { return v.Cpus }).(pulumi.StringOutput)
}

// The megabytes of memory for each admin cluster node that serves as a control plane for this VMware user cluster (default: 8192 MB memory).
func (o VmwareControlPlaneNodeConfigResponseOutput) Memory() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareControlPlaneNodeConfigResponse) string { return v.Memory }).(pulumi.StringOutput)
}

// The number of control plane nodes for this VMware user cluster. (default: 1 replica).
func (o VmwareControlPlaneNodeConfigResponseOutput) Replicas() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareControlPlaneNodeConfigResponse) string { return v.Replicas }).(pulumi.StringOutput)
}

// Vsphere-specific config.
func (o VmwareControlPlaneNodeConfigResponseOutput) VsphereConfig() VmwareControlPlaneVsphereConfigResponseOutput {
	return o.ApplyT(func(v VmwareControlPlaneNodeConfigResponse) VmwareControlPlaneVsphereConfigResponse {
		return v.VsphereConfig
	}).(VmwareControlPlaneVsphereConfigResponseOutput)
}

// Specifies control plane V2 config.
type VmwareControlPlaneV2Config struct {
	// Static IP addresses for the control plane nodes.
	ControlPlaneIpBlock *VmwareIpBlock `pulumi:"controlPlaneIpBlock"`
}

// VmwareControlPlaneV2ConfigInput is an input type that accepts VmwareControlPlaneV2ConfigArgs and VmwareControlPlaneV2ConfigOutput values.
// You can construct a concrete instance of `VmwareControlPlaneV2ConfigInput` via:
//
//	VmwareControlPlaneV2ConfigArgs{...}
type VmwareControlPlaneV2ConfigInput interface {
	pulumi.Input

	ToVmwareControlPlaneV2ConfigOutput() VmwareControlPlaneV2ConfigOutput
	ToVmwareControlPlaneV2ConfigOutputWithContext(context.Context) VmwareControlPlaneV2ConfigOutput
}

// Specifies control plane V2 config.
type VmwareControlPlaneV2ConfigArgs struct {
	// Static IP addresses for the control plane nodes.
	ControlPlaneIpBlock VmwareIpBlockPtrInput `pulumi:"controlPlaneIpBlock"`
}

func (VmwareControlPlaneV2ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareControlPlaneV2Config)(nil)).Elem()
}

func (i VmwareControlPlaneV2ConfigArgs) ToVmwareControlPlaneV2ConfigOutput() VmwareControlPlaneV2ConfigOutput {
	return i.ToVmwareControlPlaneV2ConfigOutputWithContext(context.Background())
}

func (i VmwareControlPlaneV2ConfigArgs) ToVmwareControlPlaneV2ConfigOutputWithContext(ctx context.Context) VmwareControlPlaneV2ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareControlPlaneV2ConfigOutput)
}

func (i VmwareControlPlaneV2ConfigArgs) ToVmwareControlPlaneV2ConfigPtrOutput() VmwareControlPlaneV2ConfigPtrOutput {
	return i.ToVmwareControlPlaneV2ConfigPtrOutputWithContext(context.Background())
}

func (i VmwareControlPlaneV2ConfigArgs) ToVmwareControlPlaneV2ConfigPtrOutputWithContext(ctx context.Context) VmwareControlPlaneV2ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareControlPlaneV2ConfigOutput).ToVmwareControlPlaneV2ConfigPtrOutputWithContext(ctx)
}

// VmwareControlPlaneV2ConfigPtrInput is an input type that accepts VmwareControlPlaneV2ConfigArgs, VmwareControlPlaneV2ConfigPtr and VmwareControlPlaneV2ConfigPtrOutput values.
// You can construct a concrete instance of `VmwareControlPlaneV2ConfigPtrInput` via:
//
//	        VmwareControlPlaneV2ConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareControlPlaneV2ConfigPtrInput interface {
	pulumi.Input

	ToVmwareControlPlaneV2ConfigPtrOutput() VmwareControlPlaneV2ConfigPtrOutput
	ToVmwareControlPlaneV2ConfigPtrOutputWithContext(context.Context) VmwareControlPlaneV2ConfigPtrOutput
}

type vmwareControlPlaneV2ConfigPtrType VmwareControlPlaneV2ConfigArgs

func VmwareControlPlaneV2ConfigPtr(v *VmwareControlPlaneV2ConfigArgs) VmwareControlPlaneV2ConfigPtrInput {
	return (*vmwareControlPlaneV2ConfigPtrType)(v)
}

func (*vmwareControlPlaneV2ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareControlPlaneV2Config)(nil)).Elem()
}

func (i *vmwareControlPlaneV2ConfigPtrType) ToVmwareControlPlaneV2ConfigPtrOutput() VmwareControlPlaneV2ConfigPtrOutput {
	return i.ToVmwareControlPlaneV2ConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareControlPlaneV2ConfigPtrType) ToVmwareControlPlaneV2ConfigPtrOutputWithContext(ctx context.Context) VmwareControlPlaneV2ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareControlPlaneV2ConfigPtrOutput)
}

// Specifies control plane V2 config.
type VmwareControlPlaneV2ConfigOutput struct{ *pulumi.OutputState }

func (VmwareControlPlaneV2ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareControlPlaneV2Config)(nil)).Elem()
}

func (o VmwareControlPlaneV2ConfigOutput) ToVmwareControlPlaneV2ConfigOutput() VmwareControlPlaneV2ConfigOutput {
	return o
}

func (o VmwareControlPlaneV2ConfigOutput) ToVmwareControlPlaneV2ConfigOutputWithContext(ctx context.Context) VmwareControlPlaneV2ConfigOutput {
	return o
}

func (o VmwareControlPlaneV2ConfigOutput) ToVmwareControlPlaneV2ConfigPtrOutput() VmwareControlPlaneV2ConfigPtrOutput {
	return o.ToVmwareControlPlaneV2ConfigPtrOutputWithContext(context.Background())
}

func (o VmwareControlPlaneV2ConfigOutput) ToVmwareControlPlaneV2ConfigPtrOutputWithContext(ctx context.Context) VmwareControlPlaneV2ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareControlPlaneV2Config) *VmwareControlPlaneV2Config {
		return &v
	}).(VmwareControlPlaneV2ConfigPtrOutput)
}

// Static IP addresses for the control plane nodes.
func (o VmwareControlPlaneV2ConfigOutput) ControlPlaneIpBlock() VmwareIpBlockPtrOutput {
	return o.ApplyT(func(v VmwareControlPlaneV2Config) *VmwareIpBlock { return v.ControlPlaneIpBlock }).(VmwareIpBlockPtrOutput)
}

type VmwareControlPlaneV2ConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareControlPlaneV2ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareControlPlaneV2Config)(nil)).Elem()
}

func (o VmwareControlPlaneV2ConfigPtrOutput) ToVmwareControlPlaneV2ConfigPtrOutput() VmwareControlPlaneV2ConfigPtrOutput {
	return o
}

func (o VmwareControlPlaneV2ConfigPtrOutput) ToVmwareControlPlaneV2ConfigPtrOutputWithContext(ctx context.Context) VmwareControlPlaneV2ConfigPtrOutput {
	return o
}

func (o VmwareControlPlaneV2ConfigPtrOutput) Elem() VmwareControlPlaneV2ConfigOutput {
	return o.ApplyT(func(v *VmwareControlPlaneV2Config) VmwareControlPlaneV2Config {
		if v != nil {
			return *v
		}
		var ret VmwareControlPlaneV2Config
		return ret
	}).(VmwareControlPlaneV2ConfigOutput)
}

// Static IP addresses for the control plane nodes.
func (o VmwareControlPlaneV2ConfigPtrOutput) ControlPlaneIpBlock() VmwareIpBlockPtrOutput {
	return o.ApplyT(func(v *VmwareControlPlaneV2Config) *VmwareIpBlock {
		if v == nil {
			return nil
		}
		return v.ControlPlaneIpBlock
	}).(VmwareIpBlockPtrOutput)
}

// Specifies control plane V2 config.
type VmwareControlPlaneV2ConfigResponse struct {
	// Static IP addresses for the control plane nodes.
	ControlPlaneIpBlock VmwareIpBlockResponse `pulumi:"controlPlaneIpBlock"`
}

// Specifies control plane V2 config.
type VmwareControlPlaneV2ConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareControlPlaneV2ConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareControlPlaneV2ConfigResponse)(nil)).Elem()
}

func (o VmwareControlPlaneV2ConfigResponseOutput) ToVmwareControlPlaneV2ConfigResponseOutput() VmwareControlPlaneV2ConfigResponseOutput {
	return o
}

func (o VmwareControlPlaneV2ConfigResponseOutput) ToVmwareControlPlaneV2ConfigResponseOutputWithContext(ctx context.Context) VmwareControlPlaneV2ConfigResponseOutput {
	return o
}

// Static IP addresses for the control plane nodes.
func (o VmwareControlPlaneV2ConfigResponseOutput) ControlPlaneIpBlock() VmwareIpBlockResponseOutput {
	return o.ApplyT(func(v VmwareControlPlaneV2ConfigResponse) VmwareIpBlockResponse { return v.ControlPlaneIpBlock }).(VmwareIpBlockResponseOutput)
}

// Specifies control plane node config.
type VmwareControlPlaneVsphereConfigResponse struct {
	// The Vsphere datastore used by the control plane Node.
	Datastore string `pulumi:"datastore"`
}

// Specifies control plane node config.
type VmwareControlPlaneVsphereConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareControlPlaneVsphereConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareControlPlaneVsphereConfigResponse)(nil)).Elem()
}

func (o VmwareControlPlaneVsphereConfigResponseOutput) ToVmwareControlPlaneVsphereConfigResponseOutput() VmwareControlPlaneVsphereConfigResponseOutput {
	return o
}

func (o VmwareControlPlaneVsphereConfigResponseOutput) ToVmwareControlPlaneVsphereConfigResponseOutputWithContext(ctx context.Context) VmwareControlPlaneVsphereConfigResponseOutput {
	return o
}

// The Vsphere datastore used by the control plane Node.
func (o VmwareControlPlaneVsphereConfigResponseOutput) Datastore() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareControlPlaneVsphereConfigResponse) string { return v.Datastore }).(pulumi.StringOutput)
}

// Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2
type VmwareDataplaneV2Config struct {
	// Enable advanced networking which requires dataplane_v2_enabled to be set true.
	AdvancedNetworking *bool `pulumi:"advancedNetworking"`
	// Enables Dataplane V2.
	DataplaneV2Enabled *bool `pulumi:"dataplaneV2Enabled"`
	// Enable Dataplane V2 for clusters with Windows nodes.
	WindowsDataplaneV2Enabled *bool `pulumi:"windowsDataplaneV2Enabled"`
}

// VmwareDataplaneV2ConfigInput is an input type that accepts VmwareDataplaneV2ConfigArgs and VmwareDataplaneV2ConfigOutput values.
// You can construct a concrete instance of `VmwareDataplaneV2ConfigInput` via:
//
//	VmwareDataplaneV2ConfigArgs{...}
type VmwareDataplaneV2ConfigInput interface {
	pulumi.Input

	ToVmwareDataplaneV2ConfigOutput() VmwareDataplaneV2ConfigOutput
	ToVmwareDataplaneV2ConfigOutputWithContext(context.Context) VmwareDataplaneV2ConfigOutput
}

// Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2
type VmwareDataplaneV2ConfigArgs struct {
	// Enable advanced networking which requires dataplane_v2_enabled to be set true.
	AdvancedNetworking pulumi.BoolPtrInput `pulumi:"advancedNetworking"`
	// Enables Dataplane V2.
	DataplaneV2Enabled pulumi.BoolPtrInput `pulumi:"dataplaneV2Enabled"`
	// Enable Dataplane V2 for clusters with Windows nodes.
	WindowsDataplaneV2Enabled pulumi.BoolPtrInput `pulumi:"windowsDataplaneV2Enabled"`
}

func (VmwareDataplaneV2ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareDataplaneV2Config)(nil)).Elem()
}

func (i VmwareDataplaneV2ConfigArgs) ToVmwareDataplaneV2ConfigOutput() VmwareDataplaneV2ConfigOutput {
	return i.ToVmwareDataplaneV2ConfigOutputWithContext(context.Background())
}

func (i VmwareDataplaneV2ConfigArgs) ToVmwareDataplaneV2ConfigOutputWithContext(ctx context.Context) VmwareDataplaneV2ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareDataplaneV2ConfigOutput)
}

func (i VmwareDataplaneV2ConfigArgs) ToVmwareDataplaneV2ConfigPtrOutput() VmwareDataplaneV2ConfigPtrOutput {
	return i.ToVmwareDataplaneV2ConfigPtrOutputWithContext(context.Background())
}

func (i VmwareDataplaneV2ConfigArgs) ToVmwareDataplaneV2ConfigPtrOutputWithContext(ctx context.Context) VmwareDataplaneV2ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareDataplaneV2ConfigOutput).ToVmwareDataplaneV2ConfigPtrOutputWithContext(ctx)
}

// VmwareDataplaneV2ConfigPtrInput is an input type that accepts VmwareDataplaneV2ConfigArgs, VmwareDataplaneV2ConfigPtr and VmwareDataplaneV2ConfigPtrOutput values.
// You can construct a concrete instance of `VmwareDataplaneV2ConfigPtrInput` via:
//
//	        VmwareDataplaneV2ConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareDataplaneV2ConfigPtrInput interface {
	pulumi.Input

	ToVmwareDataplaneV2ConfigPtrOutput() VmwareDataplaneV2ConfigPtrOutput
	ToVmwareDataplaneV2ConfigPtrOutputWithContext(context.Context) VmwareDataplaneV2ConfigPtrOutput
}

type vmwareDataplaneV2ConfigPtrType VmwareDataplaneV2ConfigArgs

func VmwareDataplaneV2ConfigPtr(v *VmwareDataplaneV2ConfigArgs) VmwareDataplaneV2ConfigPtrInput {
	return (*vmwareDataplaneV2ConfigPtrType)(v)
}

func (*vmwareDataplaneV2ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareDataplaneV2Config)(nil)).Elem()
}

func (i *vmwareDataplaneV2ConfigPtrType) ToVmwareDataplaneV2ConfigPtrOutput() VmwareDataplaneV2ConfigPtrOutput {
	return i.ToVmwareDataplaneV2ConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareDataplaneV2ConfigPtrType) ToVmwareDataplaneV2ConfigPtrOutputWithContext(ctx context.Context) VmwareDataplaneV2ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareDataplaneV2ConfigPtrOutput)
}

// Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2
type VmwareDataplaneV2ConfigOutput struct{ *pulumi.OutputState }

func (VmwareDataplaneV2ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareDataplaneV2Config)(nil)).Elem()
}

func (o VmwareDataplaneV2ConfigOutput) ToVmwareDataplaneV2ConfigOutput() VmwareDataplaneV2ConfigOutput {
	return o
}

func (o VmwareDataplaneV2ConfigOutput) ToVmwareDataplaneV2ConfigOutputWithContext(ctx context.Context) VmwareDataplaneV2ConfigOutput {
	return o
}

func (o VmwareDataplaneV2ConfigOutput) ToVmwareDataplaneV2ConfigPtrOutput() VmwareDataplaneV2ConfigPtrOutput {
	return o.ToVmwareDataplaneV2ConfigPtrOutputWithContext(context.Background())
}

func (o VmwareDataplaneV2ConfigOutput) ToVmwareDataplaneV2ConfigPtrOutputWithContext(ctx context.Context) VmwareDataplaneV2ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareDataplaneV2Config) *VmwareDataplaneV2Config {
		return &v
	}).(VmwareDataplaneV2ConfigPtrOutput)
}

// Enable advanced networking which requires dataplane_v2_enabled to be set true.
func (o VmwareDataplaneV2ConfigOutput) AdvancedNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareDataplaneV2Config) *bool { return v.AdvancedNetworking }).(pulumi.BoolPtrOutput)
}

// Enables Dataplane V2.
func (o VmwareDataplaneV2ConfigOutput) DataplaneV2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareDataplaneV2Config) *bool { return v.DataplaneV2Enabled }).(pulumi.BoolPtrOutput)
}

// Enable Dataplane V2 for clusters with Windows nodes.
func (o VmwareDataplaneV2ConfigOutput) WindowsDataplaneV2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareDataplaneV2Config) *bool { return v.WindowsDataplaneV2Enabled }).(pulumi.BoolPtrOutput)
}

type VmwareDataplaneV2ConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareDataplaneV2ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareDataplaneV2Config)(nil)).Elem()
}

func (o VmwareDataplaneV2ConfigPtrOutput) ToVmwareDataplaneV2ConfigPtrOutput() VmwareDataplaneV2ConfigPtrOutput {
	return o
}

func (o VmwareDataplaneV2ConfigPtrOutput) ToVmwareDataplaneV2ConfigPtrOutputWithContext(ctx context.Context) VmwareDataplaneV2ConfigPtrOutput {
	return o
}

func (o VmwareDataplaneV2ConfigPtrOutput) Elem() VmwareDataplaneV2ConfigOutput {
	return o.ApplyT(func(v *VmwareDataplaneV2Config) VmwareDataplaneV2Config {
		if v != nil {
			return *v
		}
		var ret VmwareDataplaneV2Config
		return ret
	}).(VmwareDataplaneV2ConfigOutput)
}

// Enable advanced networking which requires dataplane_v2_enabled to be set true.
func (o VmwareDataplaneV2ConfigPtrOutput) AdvancedNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareDataplaneV2Config) *bool {
		if v == nil {
			return nil
		}
		return v.AdvancedNetworking
	}).(pulumi.BoolPtrOutput)
}

// Enables Dataplane V2.
func (o VmwareDataplaneV2ConfigPtrOutput) DataplaneV2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareDataplaneV2Config) *bool {
		if v == nil {
			return nil
		}
		return v.DataplaneV2Enabled
	}).(pulumi.BoolPtrOutput)
}

// Enable Dataplane V2 for clusters with Windows nodes.
func (o VmwareDataplaneV2ConfigPtrOutput) WindowsDataplaneV2Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareDataplaneV2Config) *bool {
		if v == nil {
			return nil
		}
		return v.WindowsDataplaneV2Enabled
	}).(pulumi.BoolPtrOutput)
}

// Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2
type VmwareDataplaneV2ConfigResponse struct {
	// Enable advanced networking which requires dataplane_v2_enabled to be set true.
	AdvancedNetworking bool `pulumi:"advancedNetworking"`
	// Enables Dataplane V2.
	DataplaneV2Enabled bool `pulumi:"dataplaneV2Enabled"`
	// Enable Dataplane V2 for clusters with Windows nodes.
	WindowsDataplaneV2Enabled bool `pulumi:"windowsDataplaneV2Enabled"`
}

// Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2
type VmwareDataplaneV2ConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareDataplaneV2ConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareDataplaneV2ConfigResponse)(nil)).Elem()
}

func (o VmwareDataplaneV2ConfigResponseOutput) ToVmwareDataplaneV2ConfigResponseOutput() VmwareDataplaneV2ConfigResponseOutput {
	return o
}

func (o VmwareDataplaneV2ConfigResponseOutput) ToVmwareDataplaneV2ConfigResponseOutputWithContext(ctx context.Context) VmwareDataplaneV2ConfigResponseOutput {
	return o
}

// Enable advanced networking which requires dataplane_v2_enabled to be set true.
func (o VmwareDataplaneV2ConfigResponseOutput) AdvancedNetworking() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareDataplaneV2ConfigResponse) bool { return v.AdvancedNetworking }).(pulumi.BoolOutput)
}

// Enables Dataplane V2.
func (o VmwareDataplaneV2ConfigResponseOutput) DataplaneV2Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareDataplaneV2ConfigResponse) bool { return v.DataplaneV2Enabled }).(pulumi.BoolOutput)
}

// Enable Dataplane V2 for clusters with Windows nodes.
func (o VmwareDataplaneV2ConfigResponseOutput) WindowsDataplaneV2Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareDataplaneV2ConfigResponse) bool { return v.WindowsDataplaneV2Enabled }).(pulumi.BoolOutput)
}

// Represents the network configuration required for the VMware user clusters with DHCP IP configurations.
type VmwareDhcpIpConfig struct {
	// enabled is a flag to mark if DHCP IP allocation is used for VMware user clusters.
	Enabled *bool `pulumi:"enabled"`
}

// VmwareDhcpIpConfigInput is an input type that accepts VmwareDhcpIpConfigArgs and VmwareDhcpIpConfigOutput values.
// You can construct a concrete instance of `VmwareDhcpIpConfigInput` via:
//
//	VmwareDhcpIpConfigArgs{...}
type VmwareDhcpIpConfigInput interface {
	pulumi.Input

	ToVmwareDhcpIpConfigOutput() VmwareDhcpIpConfigOutput
	ToVmwareDhcpIpConfigOutputWithContext(context.Context) VmwareDhcpIpConfigOutput
}

// Represents the network configuration required for the VMware user clusters with DHCP IP configurations.
type VmwareDhcpIpConfigArgs struct {
	// enabled is a flag to mark if DHCP IP allocation is used for VMware user clusters.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (VmwareDhcpIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareDhcpIpConfig)(nil)).Elem()
}

func (i VmwareDhcpIpConfigArgs) ToVmwareDhcpIpConfigOutput() VmwareDhcpIpConfigOutput {
	return i.ToVmwareDhcpIpConfigOutputWithContext(context.Background())
}

func (i VmwareDhcpIpConfigArgs) ToVmwareDhcpIpConfigOutputWithContext(ctx context.Context) VmwareDhcpIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareDhcpIpConfigOutput)
}

func (i VmwareDhcpIpConfigArgs) ToVmwareDhcpIpConfigPtrOutput() VmwareDhcpIpConfigPtrOutput {
	return i.ToVmwareDhcpIpConfigPtrOutputWithContext(context.Background())
}

func (i VmwareDhcpIpConfigArgs) ToVmwareDhcpIpConfigPtrOutputWithContext(ctx context.Context) VmwareDhcpIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareDhcpIpConfigOutput).ToVmwareDhcpIpConfigPtrOutputWithContext(ctx)
}

// VmwareDhcpIpConfigPtrInput is an input type that accepts VmwareDhcpIpConfigArgs, VmwareDhcpIpConfigPtr and VmwareDhcpIpConfigPtrOutput values.
// You can construct a concrete instance of `VmwareDhcpIpConfigPtrInput` via:
//
//	        VmwareDhcpIpConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareDhcpIpConfigPtrInput interface {
	pulumi.Input

	ToVmwareDhcpIpConfigPtrOutput() VmwareDhcpIpConfigPtrOutput
	ToVmwareDhcpIpConfigPtrOutputWithContext(context.Context) VmwareDhcpIpConfigPtrOutput
}

type vmwareDhcpIpConfigPtrType VmwareDhcpIpConfigArgs

func VmwareDhcpIpConfigPtr(v *VmwareDhcpIpConfigArgs) VmwareDhcpIpConfigPtrInput {
	return (*vmwareDhcpIpConfigPtrType)(v)
}

func (*vmwareDhcpIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareDhcpIpConfig)(nil)).Elem()
}

func (i *vmwareDhcpIpConfigPtrType) ToVmwareDhcpIpConfigPtrOutput() VmwareDhcpIpConfigPtrOutput {
	return i.ToVmwareDhcpIpConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareDhcpIpConfigPtrType) ToVmwareDhcpIpConfigPtrOutputWithContext(ctx context.Context) VmwareDhcpIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareDhcpIpConfigPtrOutput)
}

// Represents the network configuration required for the VMware user clusters with DHCP IP configurations.
type VmwareDhcpIpConfigOutput struct{ *pulumi.OutputState }

func (VmwareDhcpIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareDhcpIpConfig)(nil)).Elem()
}

func (o VmwareDhcpIpConfigOutput) ToVmwareDhcpIpConfigOutput() VmwareDhcpIpConfigOutput {
	return o
}

func (o VmwareDhcpIpConfigOutput) ToVmwareDhcpIpConfigOutputWithContext(ctx context.Context) VmwareDhcpIpConfigOutput {
	return o
}

func (o VmwareDhcpIpConfigOutput) ToVmwareDhcpIpConfigPtrOutput() VmwareDhcpIpConfigPtrOutput {
	return o.ToVmwareDhcpIpConfigPtrOutputWithContext(context.Background())
}

func (o VmwareDhcpIpConfigOutput) ToVmwareDhcpIpConfigPtrOutputWithContext(ctx context.Context) VmwareDhcpIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareDhcpIpConfig) *VmwareDhcpIpConfig {
		return &v
	}).(VmwareDhcpIpConfigPtrOutput)
}

// enabled is a flag to mark if DHCP IP allocation is used for VMware user clusters.
func (o VmwareDhcpIpConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareDhcpIpConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type VmwareDhcpIpConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareDhcpIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareDhcpIpConfig)(nil)).Elem()
}

func (o VmwareDhcpIpConfigPtrOutput) ToVmwareDhcpIpConfigPtrOutput() VmwareDhcpIpConfigPtrOutput {
	return o
}

func (o VmwareDhcpIpConfigPtrOutput) ToVmwareDhcpIpConfigPtrOutputWithContext(ctx context.Context) VmwareDhcpIpConfigPtrOutput {
	return o
}

func (o VmwareDhcpIpConfigPtrOutput) Elem() VmwareDhcpIpConfigOutput {
	return o.ApplyT(func(v *VmwareDhcpIpConfig) VmwareDhcpIpConfig {
		if v != nil {
			return *v
		}
		var ret VmwareDhcpIpConfig
		return ret
	}).(VmwareDhcpIpConfigOutput)
}

// enabled is a flag to mark if DHCP IP allocation is used for VMware user clusters.
func (o VmwareDhcpIpConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareDhcpIpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Represents the network configuration required for the VMware user clusters with DHCP IP configurations.
type VmwareDhcpIpConfigResponse struct {
	// enabled is a flag to mark if DHCP IP allocation is used for VMware user clusters.
	Enabled bool `pulumi:"enabled"`
}

// Represents the network configuration required for the VMware user clusters with DHCP IP configurations.
type VmwareDhcpIpConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareDhcpIpConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareDhcpIpConfigResponse)(nil)).Elem()
}

func (o VmwareDhcpIpConfigResponseOutput) ToVmwareDhcpIpConfigResponseOutput() VmwareDhcpIpConfigResponseOutput {
	return o
}

func (o VmwareDhcpIpConfigResponseOutput) ToVmwareDhcpIpConfigResponseOutputWithContext(ctx context.Context) VmwareDhcpIpConfigResponseOutput {
	return o
}

// enabled is a flag to mark if DHCP IP allocation is used for VMware user clusters.
func (o VmwareDhcpIpConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareDhcpIpConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Represents configuration parameters for an F5 BIG-IP load balancer.
type VmwareF5BigIpConfig struct {
	// The load balancer's IP address.
	Address *string `pulumi:"address"`
	// The preexisting partition to be used by the load balancer. This partition is usually created for the admin cluster for example: 'my-f5-admin-partition'.
	Partition *string `pulumi:"partition"`
	// The pool name. Only necessary, if using SNAT.
	SnatPool *string `pulumi:"snatPool"`
}

// VmwareF5BigIpConfigInput is an input type that accepts VmwareF5BigIpConfigArgs and VmwareF5BigIpConfigOutput values.
// You can construct a concrete instance of `VmwareF5BigIpConfigInput` via:
//
//	VmwareF5BigIpConfigArgs{...}
type VmwareF5BigIpConfigInput interface {
	pulumi.Input

	ToVmwareF5BigIpConfigOutput() VmwareF5BigIpConfigOutput
	ToVmwareF5BigIpConfigOutputWithContext(context.Context) VmwareF5BigIpConfigOutput
}

// Represents configuration parameters for an F5 BIG-IP load balancer.
type VmwareF5BigIpConfigArgs struct {
	// The load balancer's IP address.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The preexisting partition to be used by the load balancer. This partition is usually created for the admin cluster for example: 'my-f5-admin-partition'.
	Partition pulumi.StringPtrInput `pulumi:"partition"`
	// The pool name. Only necessary, if using SNAT.
	SnatPool pulumi.StringPtrInput `pulumi:"snatPool"`
}

func (VmwareF5BigIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareF5BigIpConfig)(nil)).Elem()
}

func (i VmwareF5BigIpConfigArgs) ToVmwareF5BigIpConfigOutput() VmwareF5BigIpConfigOutput {
	return i.ToVmwareF5BigIpConfigOutputWithContext(context.Background())
}

func (i VmwareF5BigIpConfigArgs) ToVmwareF5BigIpConfigOutputWithContext(ctx context.Context) VmwareF5BigIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareF5BigIpConfigOutput)
}

func (i VmwareF5BigIpConfigArgs) ToVmwareF5BigIpConfigPtrOutput() VmwareF5BigIpConfigPtrOutput {
	return i.ToVmwareF5BigIpConfigPtrOutputWithContext(context.Background())
}

func (i VmwareF5BigIpConfigArgs) ToVmwareF5BigIpConfigPtrOutputWithContext(ctx context.Context) VmwareF5BigIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareF5BigIpConfigOutput).ToVmwareF5BigIpConfigPtrOutputWithContext(ctx)
}

// VmwareF5BigIpConfigPtrInput is an input type that accepts VmwareF5BigIpConfigArgs, VmwareF5BigIpConfigPtr and VmwareF5BigIpConfigPtrOutput values.
// You can construct a concrete instance of `VmwareF5BigIpConfigPtrInput` via:
//
//	        VmwareF5BigIpConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareF5BigIpConfigPtrInput interface {
	pulumi.Input

	ToVmwareF5BigIpConfigPtrOutput() VmwareF5BigIpConfigPtrOutput
	ToVmwareF5BigIpConfigPtrOutputWithContext(context.Context) VmwareF5BigIpConfigPtrOutput
}

type vmwareF5BigIpConfigPtrType VmwareF5BigIpConfigArgs

func VmwareF5BigIpConfigPtr(v *VmwareF5BigIpConfigArgs) VmwareF5BigIpConfigPtrInput {
	return (*vmwareF5BigIpConfigPtrType)(v)
}

func (*vmwareF5BigIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareF5BigIpConfig)(nil)).Elem()
}

func (i *vmwareF5BigIpConfigPtrType) ToVmwareF5BigIpConfigPtrOutput() VmwareF5BigIpConfigPtrOutput {
	return i.ToVmwareF5BigIpConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareF5BigIpConfigPtrType) ToVmwareF5BigIpConfigPtrOutputWithContext(ctx context.Context) VmwareF5BigIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareF5BigIpConfigPtrOutput)
}

// Represents configuration parameters for an F5 BIG-IP load balancer.
type VmwareF5BigIpConfigOutput struct{ *pulumi.OutputState }

func (VmwareF5BigIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareF5BigIpConfig)(nil)).Elem()
}

func (o VmwareF5BigIpConfigOutput) ToVmwareF5BigIpConfigOutput() VmwareF5BigIpConfigOutput {
	return o
}

func (o VmwareF5BigIpConfigOutput) ToVmwareF5BigIpConfigOutputWithContext(ctx context.Context) VmwareF5BigIpConfigOutput {
	return o
}

func (o VmwareF5BigIpConfigOutput) ToVmwareF5BigIpConfigPtrOutput() VmwareF5BigIpConfigPtrOutput {
	return o.ToVmwareF5BigIpConfigPtrOutputWithContext(context.Background())
}

func (o VmwareF5BigIpConfigOutput) ToVmwareF5BigIpConfigPtrOutputWithContext(ctx context.Context) VmwareF5BigIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareF5BigIpConfig) *VmwareF5BigIpConfig {
		return &v
	}).(VmwareF5BigIpConfigPtrOutput)
}

// The load balancer's IP address.
func (o VmwareF5BigIpConfigOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareF5BigIpConfig) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The preexisting partition to be used by the load balancer. This partition is usually created for the admin cluster for example: 'my-f5-admin-partition'.
func (o VmwareF5BigIpConfigOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareF5BigIpConfig) *string { return v.Partition }).(pulumi.StringPtrOutput)
}

// The pool name. Only necessary, if using SNAT.
func (o VmwareF5BigIpConfigOutput) SnatPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareF5BigIpConfig) *string { return v.SnatPool }).(pulumi.StringPtrOutput)
}

type VmwareF5BigIpConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareF5BigIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareF5BigIpConfig)(nil)).Elem()
}

func (o VmwareF5BigIpConfigPtrOutput) ToVmwareF5BigIpConfigPtrOutput() VmwareF5BigIpConfigPtrOutput {
	return o
}

func (o VmwareF5BigIpConfigPtrOutput) ToVmwareF5BigIpConfigPtrOutputWithContext(ctx context.Context) VmwareF5BigIpConfigPtrOutput {
	return o
}

func (o VmwareF5BigIpConfigPtrOutput) Elem() VmwareF5BigIpConfigOutput {
	return o.ApplyT(func(v *VmwareF5BigIpConfig) VmwareF5BigIpConfig {
		if v != nil {
			return *v
		}
		var ret VmwareF5BigIpConfig
		return ret
	}).(VmwareF5BigIpConfigOutput)
}

// The load balancer's IP address.
func (o VmwareF5BigIpConfigPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareF5BigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The preexisting partition to be used by the load balancer. This partition is usually created for the admin cluster for example: 'my-f5-admin-partition'.
func (o VmwareF5BigIpConfigPtrOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareF5BigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.StringPtrOutput)
}

// The pool name. Only necessary, if using SNAT.
func (o VmwareF5BigIpConfigPtrOutput) SnatPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareF5BigIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.SnatPool
	}).(pulumi.StringPtrOutput)
}

// Represents configuration parameters for an F5 BIG-IP load balancer.
type VmwareF5BigIpConfigResponse struct {
	// The load balancer's IP address.
	Address string `pulumi:"address"`
	// The preexisting partition to be used by the load balancer. This partition is usually created for the admin cluster for example: 'my-f5-admin-partition'.
	Partition string `pulumi:"partition"`
	// The pool name. Only necessary, if using SNAT.
	SnatPool string `pulumi:"snatPool"`
}

// Represents configuration parameters for an F5 BIG-IP load balancer.
type VmwareF5BigIpConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareF5BigIpConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareF5BigIpConfigResponse)(nil)).Elem()
}

func (o VmwareF5BigIpConfigResponseOutput) ToVmwareF5BigIpConfigResponseOutput() VmwareF5BigIpConfigResponseOutput {
	return o
}

func (o VmwareF5BigIpConfigResponseOutput) ToVmwareF5BigIpConfigResponseOutputWithContext(ctx context.Context) VmwareF5BigIpConfigResponseOutput {
	return o
}

// The load balancer's IP address.
func (o VmwareF5BigIpConfigResponseOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareF5BigIpConfigResponse) string { return v.Address }).(pulumi.StringOutput)
}

// The preexisting partition to be used by the load balancer. This partition is usually created for the admin cluster for example: 'my-f5-admin-partition'.
func (o VmwareF5BigIpConfigResponseOutput) Partition() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareF5BigIpConfigResponse) string { return v.Partition }).(pulumi.StringOutput)
}

// The pool name. Only necessary, if using SNAT.
func (o VmwareF5BigIpConfigResponseOutput) SnatPool() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareF5BigIpConfigResponse) string { return v.SnatPool }).(pulumi.StringOutput)
}

// Represents the common parameters for all the hosts irrespective of their IP address.
type VmwareHostConfig struct {
	// DNS search domains.
	DnsSearchDomains []string `pulumi:"dnsSearchDomains"`
	// DNS servers.
	DnsServers []string `pulumi:"dnsServers"`
	// NTP servers.
	NtpServers []string `pulumi:"ntpServers"`
}

// VmwareHostConfigInput is an input type that accepts VmwareHostConfigArgs and VmwareHostConfigOutput values.
// You can construct a concrete instance of `VmwareHostConfigInput` via:
//
//	VmwareHostConfigArgs{...}
type VmwareHostConfigInput interface {
	pulumi.Input

	ToVmwareHostConfigOutput() VmwareHostConfigOutput
	ToVmwareHostConfigOutputWithContext(context.Context) VmwareHostConfigOutput
}

// Represents the common parameters for all the hosts irrespective of their IP address.
type VmwareHostConfigArgs struct {
	// DNS search domains.
	DnsSearchDomains pulumi.StringArrayInput `pulumi:"dnsSearchDomains"`
	// DNS servers.
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// NTP servers.
	NtpServers pulumi.StringArrayInput `pulumi:"ntpServers"`
}

func (VmwareHostConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareHostConfig)(nil)).Elem()
}

func (i VmwareHostConfigArgs) ToVmwareHostConfigOutput() VmwareHostConfigOutput {
	return i.ToVmwareHostConfigOutputWithContext(context.Background())
}

func (i VmwareHostConfigArgs) ToVmwareHostConfigOutputWithContext(ctx context.Context) VmwareHostConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareHostConfigOutput)
}

func (i VmwareHostConfigArgs) ToVmwareHostConfigPtrOutput() VmwareHostConfigPtrOutput {
	return i.ToVmwareHostConfigPtrOutputWithContext(context.Background())
}

func (i VmwareHostConfigArgs) ToVmwareHostConfigPtrOutputWithContext(ctx context.Context) VmwareHostConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareHostConfigOutput).ToVmwareHostConfigPtrOutputWithContext(ctx)
}

// VmwareHostConfigPtrInput is an input type that accepts VmwareHostConfigArgs, VmwareHostConfigPtr and VmwareHostConfigPtrOutput values.
// You can construct a concrete instance of `VmwareHostConfigPtrInput` via:
//
//	        VmwareHostConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareHostConfigPtrInput interface {
	pulumi.Input

	ToVmwareHostConfigPtrOutput() VmwareHostConfigPtrOutput
	ToVmwareHostConfigPtrOutputWithContext(context.Context) VmwareHostConfigPtrOutput
}

type vmwareHostConfigPtrType VmwareHostConfigArgs

func VmwareHostConfigPtr(v *VmwareHostConfigArgs) VmwareHostConfigPtrInput {
	return (*vmwareHostConfigPtrType)(v)
}

func (*vmwareHostConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareHostConfig)(nil)).Elem()
}

func (i *vmwareHostConfigPtrType) ToVmwareHostConfigPtrOutput() VmwareHostConfigPtrOutput {
	return i.ToVmwareHostConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareHostConfigPtrType) ToVmwareHostConfigPtrOutputWithContext(ctx context.Context) VmwareHostConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareHostConfigPtrOutput)
}

// Represents the common parameters for all the hosts irrespective of their IP address.
type VmwareHostConfigOutput struct{ *pulumi.OutputState }

func (VmwareHostConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareHostConfig)(nil)).Elem()
}

func (o VmwareHostConfigOutput) ToVmwareHostConfigOutput() VmwareHostConfigOutput {
	return o
}

func (o VmwareHostConfigOutput) ToVmwareHostConfigOutputWithContext(ctx context.Context) VmwareHostConfigOutput {
	return o
}

func (o VmwareHostConfigOutput) ToVmwareHostConfigPtrOutput() VmwareHostConfigPtrOutput {
	return o.ToVmwareHostConfigPtrOutputWithContext(context.Background())
}

func (o VmwareHostConfigOutput) ToVmwareHostConfigPtrOutputWithContext(ctx context.Context) VmwareHostConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareHostConfig) *VmwareHostConfig {
		return &v
	}).(VmwareHostConfigPtrOutput)
}

// DNS search domains.
func (o VmwareHostConfigOutput) DnsSearchDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareHostConfig) []string { return v.DnsSearchDomains }).(pulumi.StringArrayOutput)
}

// DNS servers.
func (o VmwareHostConfigOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareHostConfig) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// NTP servers.
func (o VmwareHostConfigOutput) NtpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareHostConfig) []string { return v.NtpServers }).(pulumi.StringArrayOutput)
}

type VmwareHostConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareHostConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareHostConfig)(nil)).Elem()
}

func (o VmwareHostConfigPtrOutput) ToVmwareHostConfigPtrOutput() VmwareHostConfigPtrOutput {
	return o
}

func (o VmwareHostConfigPtrOutput) ToVmwareHostConfigPtrOutputWithContext(ctx context.Context) VmwareHostConfigPtrOutput {
	return o
}

func (o VmwareHostConfigPtrOutput) Elem() VmwareHostConfigOutput {
	return o.ApplyT(func(v *VmwareHostConfig) VmwareHostConfig {
		if v != nil {
			return *v
		}
		var ret VmwareHostConfig
		return ret
	}).(VmwareHostConfigOutput)
}

// DNS search domains.
func (o VmwareHostConfigPtrOutput) DnsSearchDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareHostConfig) []string {
		if v == nil {
			return nil
		}
		return v.DnsSearchDomains
	}).(pulumi.StringArrayOutput)
}

// DNS servers.
func (o VmwareHostConfigPtrOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareHostConfig) []string {
		if v == nil {
			return nil
		}
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

// NTP servers.
func (o VmwareHostConfigPtrOutput) NtpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareHostConfig) []string {
		if v == nil {
			return nil
		}
		return v.NtpServers
	}).(pulumi.StringArrayOutput)
}

// Represents the common parameters for all the hosts irrespective of their IP address.
type VmwareHostConfigResponse struct {
	// DNS search domains.
	DnsSearchDomains []string `pulumi:"dnsSearchDomains"`
	// DNS servers.
	DnsServers []string `pulumi:"dnsServers"`
	// NTP servers.
	NtpServers []string `pulumi:"ntpServers"`
}

// Represents the common parameters for all the hosts irrespective of their IP address.
type VmwareHostConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareHostConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareHostConfigResponse)(nil)).Elem()
}

func (o VmwareHostConfigResponseOutput) ToVmwareHostConfigResponseOutput() VmwareHostConfigResponseOutput {
	return o
}

func (o VmwareHostConfigResponseOutput) ToVmwareHostConfigResponseOutputWithContext(ctx context.Context) VmwareHostConfigResponseOutput {
	return o
}

// DNS search domains.
func (o VmwareHostConfigResponseOutput) DnsSearchDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareHostConfigResponse) []string { return v.DnsSearchDomains }).(pulumi.StringArrayOutput)
}

// DNS servers.
func (o VmwareHostConfigResponseOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareHostConfigResponse) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// NTP servers.
func (o VmwareHostConfigResponseOutput) NtpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareHostConfigResponse) []string { return v.NtpServers }).(pulumi.StringArrayOutput)
}

// Represents VMware user cluster node's network configuration.
type VmwareHostIp struct {
	// Hostname of the machine. VM's name will be used if this field is empty.
	Hostname *string `pulumi:"hostname"`
	// IP could be an IP address (like 1.2.3.4) or a CIDR (like 1.2.3.0/24).
	Ip *string `pulumi:"ip"`
}

// VmwareHostIpInput is an input type that accepts VmwareHostIpArgs and VmwareHostIpOutput values.
// You can construct a concrete instance of `VmwareHostIpInput` via:
//
//	VmwareHostIpArgs{...}
type VmwareHostIpInput interface {
	pulumi.Input

	ToVmwareHostIpOutput() VmwareHostIpOutput
	ToVmwareHostIpOutputWithContext(context.Context) VmwareHostIpOutput
}

// Represents VMware user cluster node's network configuration.
type VmwareHostIpArgs struct {
	// Hostname of the machine. VM's name will be used if this field is empty.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IP could be an IP address (like 1.2.3.4) or a CIDR (like 1.2.3.0/24).
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (VmwareHostIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareHostIp)(nil)).Elem()
}

func (i VmwareHostIpArgs) ToVmwareHostIpOutput() VmwareHostIpOutput {
	return i.ToVmwareHostIpOutputWithContext(context.Background())
}

func (i VmwareHostIpArgs) ToVmwareHostIpOutputWithContext(ctx context.Context) VmwareHostIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareHostIpOutput)
}

// VmwareHostIpArrayInput is an input type that accepts VmwareHostIpArray and VmwareHostIpArrayOutput values.
// You can construct a concrete instance of `VmwareHostIpArrayInput` via:
//
//	VmwareHostIpArray{ VmwareHostIpArgs{...} }
type VmwareHostIpArrayInput interface {
	pulumi.Input

	ToVmwareHostIpArrayOutput() VmwareHostIpArrayOutput
	ToVmwareHostIpArrayOutputWithContext(context.Context) VmwareHostIpArrayOutput
}

type VmwareHostIpArray []VmwareHostIpInput

func (VmwareHostIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareHostIp)(nil)).Elem()
}

func (i VmwareHostIpArray) ToVmwareHostIpArrayOutput() VmwareHostIpArrayOutput {
	return i.ToVmwareHostIpArrayOutputWithContext(context.Background())
}

func (i VmwareHostIpArray) ToVmwareHostIpArrayOutputWithContext(ctx context.Context) VmwareHostIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareHostIpArrayOutput)
}

// Represents VMware user cluster node's network configuration.
type VmwareHostIpOutput struct{ *pulumi.OutputState }

func (VmwareHostIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareHostIp)(nil)).Elem()
}

func (o VmwareHostIpOutput) ToVmwareHostIpOutput() VmwareHostIpOutput {
	return o
}

func (o VmwareHostIpOutput) ToVmwareHostIpOutputWithContext(ctx context.Context) VmwareHostIpOutput {
	return o
}

// Hostname of the machine. VM's name will be used if this field is empty.
func (o VmwareHostIpOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareHostIp) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IP could be an IP address (like 1.2.3.4) or a CIDR (like 1.2.3.0/24).
func (o VmwareHostIpOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareHostIp) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type VmwareHostIpArrayOutput struct{ *pulumi.OutputState }

func (VmwareHostIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareHostIp)(nil)).Elem()
}

func (o VmwareHostIpArrayOutput) ToVmwareHostIpArrayOutput() VmwareHostIpArrayOutput {
	return o
}

func (o VmwareHostIpArrayOutput) ToVmwareHostIpArrayOutputWithContext(ctx context.Context) VmwareHostIpArrayOutput {
	return o
}

func (o VmwareHostIpArrayOutput) Index(i pulumi.IntInput) VmwareHostIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmwareHostIp {
		return vs[0].([]VmwareHostIp)[vs[1].(int)]
	}).(VmwareHostIpOutput)
}

// Represents VMware user cluster node's network configuration.
type VmwareHostIpResponse struct {
	// Hostname of the machine. VM's name will be used if this field is empty.
	Hostname string `pulumi:"hostname"`
	// IP could be an IP address (like 1.2.3.4) or a CIDR (like 1.2.3.0/24).
	Ip string `pulumi:"ip"`
}

// Represents VMware user cluster node's network configuration.
type VmwareHostIpResponseOutput struct{ *pulumi.OutputState }

func (VmwareHostIpResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareHostIpResponse)(nil)).Elem()
}

func (o VmwareHostIpResponseOutput) ToVmwareHostIpResponseOutput() VmwareHostIpResponseOutput {
	return o
}

func (o VmwareHostIpResponseOutput) ToVmwareHostIpResponseOutputWithContext(ctx context.Context) VmwareHostIpResponseOutput {
	return o
}

// Hostname of the machine. VM's name will be used if this field is empty.
func (o VmwareHostIpResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareHostIpResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// IP could be an IP address (like 1.2.3.4) or a CIDR (like 1.2.3.0/24).
func (o VmwareHostIpResponseOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareHostIpResponse) string { return v.Ip }).(pulumi.StringOutput)
}

type VmwareHostIpResponseArrayOutput struct{ *pulumi.OutputState }

func (VmwareHostIpResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareHostIpResponse)(nil)).Elem()
}

func (o VmwareHostIpResponseArrayOutput) ToVmwareHostIpResponseArrayOutput() VmwareHostIpResponseArrayOutput {
	return o
}

func (o VmwareHostIpResponseArrayOutput) ToVmwareHostIpResponseArrayOutputWithContext(ctx context.Context) VmwareHostIpResponseArrayOutput {
	return o
}

func (o VmwareHostIpResponseArrayOutput) Index(i pulumi.IntInput) VmwareHostIpResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmwareHostIpResponse {
		return vs[0].([]VmwareHostIpResponse)[vs[1].(int)]
	}).(VmwareHostIpResponseOutput)
}

// Represents a collection of IP addresses to assign to nodes.
type VmwareIpBlock struct {
	// The network gateway used by the VMware user cluster.
	Gateway *string `pulumi:"gateway"`
	// The node's network configurations used by the VMware user cluster.
	Ips []VmwareHostIp `pulumi:"ips"`
	// The netmask used by the VMware user cluster.
	Netmask *string `pulumi:"netmask"`
}

// VmwareIpBlockInput is an input type that accepts VmwareIpBlockArgs and VmwareIpBlockOutput values.
// You can construct a concrete instance of `VmwareIpBlockInput` via:
//
//	VmwareIpBlockArgs{...}
type VmwareIpBlockInput interface {
	pulumi.Input

	ToVmwareIpBlockOutput() VmwareIpBlockOutput
	ToVmwareIpBlockOutputWithContext(context.Context) VmwareIpBlockOutput
}

// Represents a collection of IP addresses to assign to nodes.
type VmwareIpBlockArgs struct {
	// The network gateway used by the VMware user cluster.
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// The node's network configurations used by the VMware user cluster.
	Ips VmwareHostIpArrayInput `pulumi:"ips"`
	// The netmask used by the VMware user cluster.
	Netmask pulumi.StringPtrInput `pulumi:"netmask"`
}

func (VmwareIpBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareIpBlock)(nil)).Elem()
}

func (i VmwareIpBlockArgs) ToVmwareIpBlockOutput() VmwareIpBlockOutput {
	return i.ToVmwareIpBlockOutputWithContext(context.Background())
}

func (i VmwareIpBlockArgs) ToVmwareIpBlockOutputWithContext(ctx context.Context) VmwareIpBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareIpBlockOutput)
}

func (i VmwareIpBlockArgs) ToVmwareIpBlockPtrOutput() VmwareIpBlockPtrOutput {
	return i.ToVmwareIpBlockPtrOutputWithContext(context.Background())
}

func (i VmwareIpBlockArgs) ToVmwareIpBlockPtrOutputWithContext(ctx context.Context) VmwareIpBlockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareIpBlockOutput).ToVmwareIpBlockPtrOutputWithContext(ctx)
}

// VmwareIpBlockPtrInput is an input type that accepts VmwareIpBlockArgs, VmwareIpBlockPtr and VmwareIpBlockPtrOutput values.
// You can construct a concrete instance of `VmwareIpBlockPtrInput` via:
//
//	        VmwareIpBlockArgs{...}
//
//	or:
//
//	        nil
type VmwareIpBlockPtrInput interface {
	pulumi.Input

	ToVmwareIpBlockPtrOutput() VmwareIpBlockPtrOutput
	ToVmwareIpBlockPtrOutputWithContext(context.Context) VmwareIpBlockPtrOutput
}

type vmwareIpBlockPtrType VmwareIpBlockArgs

func VmwareIpBlockPtr(v *VmwareIpBlockArgs) VmwareIpBlockPtrInput {
	return (*vmwareIpBlockPtrType)(v)
}

func (*vmwareIpBlockPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareIpBlock)(nil)).Elem()
}

func (i *vmwareIpBlockPtrType) ToVmwareIpBlockPtrOutput() VmwareIpBlockPtrOutput {
	return i.ToVmwareIpBlockPtrOutputWithContext(context.Background())
}

func (i *vmwareIpBlockPtrType) ToVmwareIpBlockPtrOutputWithContext(ctx context.Context) VmwareIpBlockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareIpBlockPtrOutput)
}

// VmwareIpBlockArrayInput is an input type that accepts VmwareIpBlockArray and VmwareIpBlockArrayOutput values.
// You can construct a concrete instance of `VmwareIpBlockArrayInput` via:
//
//	VmwareIpBlockArray{ VmwareIpBlockArgs{...} }
type VmwareIpBlockArrayInput interface {
	pulumi.Input

	ToVmwareIpBlockArrayOutput() VmwareIpBlockArrayOutput
	ToVmwareIpBlockArrayOutputWithContext(context.Context) VmwareIpBlockArrayOutput
}

type VmwareIpBlockArray []VmwareIpBlockInput

func (VmwareIpBlockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareIpBlock)(nil)).Elem()
}

func (i VmwareIpBlockArray) ToVmwareIpBlockArrayOutput() VmwareIpBlockArrayOutput {
	return i.ToVmwareIpBlockArrayOutputWithContext(context.Background())
}

func (i VmwareIpBlockArray) ToVmwareIpBlockArrayOutputWithContext(ctx context.Context) VmwareIpBlockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareIpBlockArrayOutput)
}

// Represents a collection of IP addresses to assign to nodes.
type VmwareIpBlockOutput struct{ *pulumi.OutputState }

func (VmwareIpBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareIpBlock)(nil)).Elem()
}

func (o VmwareIpBlockOutput) ToVmwareIpBlockOutput() VmwareIpBlockOutput {
	return o
}

func (o VmwareIpBlockOutput) ToVmwareIpBlockOutputWithContext(ctx context.Context) VmwareIpBlockOutput {
	return o
}

func (o VmwareIpBlockOutput) ToVmwareIpBlockPtrOutput() VmwareIpBlockPtrOutput {
	return o.ToVmwareIpBlockPtrOutputWithContext(context.Background())
}

func (o VmwareIpBlockOutput) ToVmwareIpBlockPtrOutputWithContext(ctx context.Context) VmwareIpBlockPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareIpBlock) *VmwareIpBlock {
		return &v
	}).(VmwareIpBlockPtrOutput)
}

// The network gateway used by the VMware user cluster.
func (o VmwareIpBlockOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareIpBlock) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// The node's network configurations used by the VMware user cluster.
func (o VmwareIpBlockOutput) Ips() VmwareHostIpArrayOutput {
	return o.ApplyT(func(v VmwareIpBlock) []VmwareHostIp { return v.Ips }).(VmwareHostIpArrayOutput)
}

// The netmask used by the VMware user cluster.
func (o VmwareIpBlockOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareIpBlock) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

type VmwareIpBlockPtrOutput struct{ *pulumi.OutputState }

func (VmwareIpBlockPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareIpBlock)(nil)).Elem()
}

func (o VmwareIpBlockPtrOutput) ToVmwareIpBlockPtrOutput() VmwareIpBlockPtrOutput {
	return o
}

func (o VmwareIpBlockPtrOutput) ToVmwareIpBlockPtrOutputWithContext(ctx context.Context) VmwareIpBlockPtrOutput {
	return o
}

func (o VmwareIpBlockPtrOutput) Elem() VmwareIpBlockOutput {
	return o.ApplyT(func(v *VmwareIpBlock) VmwareIpBlock {
		if v != nil {
			return *v
		}
		var ret VmwareIpBlock
		return ret
	}).(VmwareIpBlockOutput)
}

// The network gateway used by the VMware user cluster.
func (o VmwareIpBlockPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareIpBlock) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

// The node's network configurations used by the VMware user cluster.
func (o VmwareIpBlockPtrOutput) Ips() VmwareHostIpArrayOutput {
	return o.ApplyT(func(v *VmwareIpBlock) []VmwareHostIp {
		if v == nil {
			return nil
		}
		return v.Ips
	}).(VmwareHostIpArrayOutput)
}

// The netmask used by the VMware user cluster.
func (o VmwareIpBlockPtrOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareIpBlock) *string {
		if v == nil {
			return nil
		}
		return v.Netmask
	}).(pulumi.StringPtrOutput)
}

type VmwareIpBlockArrayOutput struct{ *pulumi.OutputState }

func (VmwareIpBlockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareIpBlock)(nil)).Elem()
}

func (o VmwareIpBlockArrayOutput) ToVmwareIpBlockArrayOutput() VmwareIpBlockArrayOutput {
	return o
}

func (o VmwareIpBlockArrayOutput) ToVmwareIpBlockArrayOutputWithContext(ctx context.Context) VmwareIpBlockArrayOutput {
	return o
}

func (o VmwareIpBlockArrayOutput) Index(i pulumi.IntInput) VmwareIpBlockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmwareIpBlock {
		return vs[0].([]VmwareIpBlock)[vs[1].(int)]
	}).(VmwareIpBlockOutput)
}

// Represents a collection of IP addresses to assign to nodes.
type VmwareIpBlockResponse struct {
	// The network gateway used by the VMware user cluster.
	Gateway string `pulumi:"gateway"`
	// The node's network configurations used by the VMware user cluster.
	Ips []VmwareHostIpResponse `pulumi:"ips"`
	// The netmask used by the VMware user cluster.
	Netmask string `pulumi:"netmask"`
}

// Represents a collection of IP addresses to assign to nodes.
type VmwareIpBlockResponseOutput struct{ *pulumi.OutputState }

func (VmwareIpBlockResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareIpBlockResponse)(nil)).Elem()
}

func (o VmwareIpBlockResponseOutput) ToVmwareIpBlockResponseOutput() VmwareIpBlockResponseOutput {
	return o
}

func (o VmwareIpBlockResponseOutput) ToVmwareIpBlockResponseOutputWithContext(ctx context.Context) VmwareIpBlockResponseOutput {
	return o
}

// The network gateway used by the VMware user cluster.
func (o VmwareIpBlockResponseOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareIpBlockResponse) string { return v.Gateway }).(pulumi.StringOutput)
}

// The node's network configurations used by the VMware user cluster.
func (o VmwareIpBlockResponseOutput) Ips() VmwareHostIpResponseArrayOutput {
	return o.ApplyT(func(v VmwareIpBlockResponse) []VmwareHostIpResponse { return v.Ips }).(VmwareHostIpResponseArrayOutput)
}

// The netmask used by the VMware user cluster.
func (o VmwareIpBlockResponseOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareIpBlockResponse) string { return v.Netmask }).(pulumi.StringOutput)
}

type VmwareIpBlockResponseArrayOutput struct{ *pulumi.OutputState }

func (VmwareIpBlockResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareIpBlockResponse)(nil)).Elem()
}

func (o VmwareIpBlockResponseArrayOutput) ToVmwareIpBlockResponseArrayOutput() VmwareIpBlockResponseArrayOutput {
	return o
}

func (o VmwareIpBlockResponseArrayOutput) ToVmwareIpBlockResponseArrayOutputWithContext(ctx context.Context) VmwareIpBlockResponseArrayOutput {
	return o
}

func (o VmwareIpBlockResponseArrayOutput) Index(i pulumi.IntInput) VmwareIpBlockResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmwareIpBlockResponse {
		return vs[0].([]VmwareIpBlockResponse)[vs[1].(int)]
	}).(VmwareIpBlockResponseOutput)
}

// Specifies the locad balancer config for the VMware user cluster.
type VmwareLoadBalancerConfig struct {
	// Configuration for F5 Big IP typed load balancers.
	F5Config *VmwareF5BigIpConfig `pulumi:"f5Config"`
	// Manually configured load balancers.
	ManualLbConfig *VmwareManualLbConfig `pulumi:"manualLbConfig"`
	// Configuration for MetalLB typed load balancers.
	MetalLbConfig *VmwareMetalLbConfig `pulumi:"metalLbConfig"`
	// The VIPs used by the load balancer.
	VipConfig *VmwareVipConfig `pulumi:"vipConfig"`
}

// VmwareLoadBalancerConfigInput is an input type that accepts VmwareLoadBalancerConfigArgs and VmwareLoadBalancerConfigOutput values.
// You can construct a concrete instance of `VmwareLoadBalancerConfigInput` via:
//
//	VmwareLoadBalancerConfigArgs{...}
type VmwareLoadBalancerConfigInput interface {
	pulumi.Input

	ToVmwareLoadBalancerConfigOutput() VmwareLoadBalancerConfigOutput
	ToVmwareLoadBalancerConfigOutputWithContext(context.Context) VmwareLoadBalancerConfigOutput
}

// Specifies the locad balancer config for the VMware user cluster.
type VmwareLoadBalancerConfigArgs struct {
	// Configuration for F5 Big IP typed load balancers.
	F5Config VmwareF5BigIpConfigPtrInput `pulumi:"f5Config"`
	// Manually configured load balancers.
	ManualLbConfig VmwareManualLbConfigPtrInput `pulumi:"manualLbConfig"`
	// Configuration for MetalLB typed load balancers.
	MetalLbConfig VmwareMetalLbConfigPtrInput `pulumi:"metalLbConfig"`
	// The VIPs used by the load balancer.
	VipConfig VmwareVipConfigPtrInput `pulumi:"vipConfig"`
}

func (VmwareLoadBalancerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareLoadBalancerConfig)(nil)).Elem()
}

func (i VmwareLoadBalancerConfigArgs) ToVmwareLoadBalancerConfigOutput() VmwareLoadBalancerConfigOutput {
	return i.ToVmwareLoadBalancerConfigOutputWithContext(context.Background())
}

func (i VmwareLoadBalancerConfigArgs) ToVmwareLoadBalancerConfigOutputWithContext(ctx context.Context) VmwareLoadBalancerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareLoadBalancerConfigOutput)
}

func (i VmwareLoadBalancerConfigArgs) ToVmwareLoadBalancerConfigPtrOutput() VmwareLoadBalancerConfigPtrOutput {
	return i.ToVmwareLoadBalancerConfigPtrOutputWithContext(context.Background())
}

func (i VmwareLoadBalancerConfigArgs) ToVmwareLoadBalancerConfigPtrOutputWithContext(ctx context.Context) VmwareLoadBalancerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareLoadBalancerConfigOutput).ToVmwareLoadBalancerConfigPtrOutputWithContext(ctx)
}

// VmwareLoadBalancerConfigPtrInput is an input type that accepts VmwareLoadBalancerConfigArgs, VmwareLoadBalancerConfigPtr and VmwareLoadBalancerConfigPtrOutput values.
// You can construct a concrete instance of `VmwareLoadBalancerConfigPtrInput` via:
//
//	        VmwareLoadBalancerConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareLoadBalancerConfigPtrInput interface {
	pulumi.Input

	ToVmwareLoadBalancerConfigPtrOutput() VmwareLoadBalancerConfigPtrOutput
	ToVmwareLoadBalancerConfigPtrOutputWithContext(context.Context) VmwareLoadBalancerConfigPtrOutput
}

type vmwareLoadBalancerConfigPtrType VmwareLoadBalancerConfigArgs

func VmwareLoadBalancerConfigPtr(v *VmwareLoadBalancerConfigArgs) VmwareLoadBalancerConfigPtrInput {
	return (*vmwareLoadBalancerConfigPtrType)(v)
}

func (*vmwareLoadBalancerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareLoadBalancerConfig)(nil)).Elem()
}

func (i *vmwareLoadBalancerConfigPtrType) ToVmwareLoadBalancerConfigPtrOutput() VmwareLoadBalancerConfigPtrOutput {
	return i.ToVmwareLoadBalancerConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareLoadBalancerConfigPtrType) ToVmwareLoadBalancerConfigPtrOutputWithContext(ctx context.Context) VmwareLoadBalancerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareLoadBalancerConfigPtrOutput)
}

// Specifies the locad balancer config for the VMware user cluster.
type VmwareLoadBalancerConfigOutput struct{ *pulumi.OutputState }

func (VmwareLoadBalancerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareLoadBalancerConfig)(nil)).Elem()
}

func (o VmwareLoadBalancerConfigOutput) ToVmwareLoadBalancerConfigOutput() VmwareLoadBalancerConfigOutput {
	return o
}

func (o VmwareLoadBalancerConfigOutput) ToVmwareLoadBalancerConfigOutputWithContext(ctx context.Context) VmwareLoadBalancerConfigOutput {
	return o
}

func (o VmwareLoadBalancerConfigOutput) ToVmwareLoadBalancerConfigPtrOutput() VmwareLoadBalancerConfigPtrOutput {
	return o.ToVmwareLoadBalancerConfigPtrOutputWithContext(context.Background())
}

func (o VmwareLoadBalancerConfigOutput) ToVmwareLoadBalancerConfigPtrOutputWithContext(ctx context.Context) VmwareLoadBalancerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareLoadBalancerConfig) *VmwareLoadBalancerConfig {
		return &v
	}).(VmwareLoadBalancerConfigPtrOutput)
}

// Configuration for F5 Big IP typed load balancers.
func (o VmwareLoadBalancerConfigOutput) F5Config() VmwareF5BigIpConfigPtrOutput {
	return o.ApplyT(func(v VmwareLoadBalancerConfig) *VmwareF5BigIpConfig { return v.F5Config }).(VmwareF5BigIpConfigPtrOutput)
}

// Manually configured load balancers.
func (o VmwareLoadBalancerConfigOutput) ManualLbConfig() VmwareManualLbConfigPtrOutput {
	return o.ApplyT(func(v VmwareLoadBalancerConfig) *VmwareManualLbConfig { return v.ManualLbConfig }).(VmwareManualLbConfigPtrOutput)
}

// Configuration for MetalLB typed load balancers.
func (o VmwareLoadBalancerConfigOutput) MetalLbConfig() VmwareMetalLbConfigPtrOutput {
	return o.ApplyT(func(v VmwareLoadBalancerConfig) *VmwareMetalLbConfig { return v.MetalLbConfig }).(VmwareMetalLbConfigPtrOutput)
}

// The VIPs used by the load balancer.
func (o VmwareLoadBalancerConfigOutput) VipConfig() VmwareVipConfigPtrOutput {
	return o.ApplyT(func(v VmwareLoadBalancerConfig) *VmwareVipConfig { return v.VipConfig }).(VmwareVipConfigPtrOutput)
}

type VmwareLoadBalancerConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareLoadBalancerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareLoadBalancerConfig)(nil)).Elem()
}

func (o VmwareLoadBalancerConfigPtrOutput) ToVmwareLoadBalancerConfigPtrOutput() VmwareLoadBalancerConfigPtrOutput {
	return o
}

func (o VmwareLoadBalancerConfigPtrOutput) ToVmwareLoadBalancerConfigPtrOutputWithContext(ctx context.Context) VmwareLoadBalancerConfigPtrOutput {
	return o
}

func (o VmwareLoadBalancerConfigPtrOutput) Elem() VmwareLoadBalancerConfigOutput {
	return o.ApplyT(func(v *VmwareLoadBalancerConfig) VmwareLoadBalancerConfig {
		if v != nil {
			return *v
		}
		var ret VmwareLoadBalancerConfig
		return ret
	}).(VmwareLoadBalancerConfigOutput)
}

// Configuration for F5 Big IP typed load balancers.
func (o VmwareLoadBalancerConfigPtrOutput) F5Config() VmwareF5BigIpConfigPtrOutput {
	return o.ApplyT(func(v *VmwareLoadBalancerConfig) *VmwareF5BigIpConfig {
		if v == nil {
			return nil
		}
		return v.F5Config
	}).(VmwareF5BigIpConfigPtrOutput)
}

// Manually configured load balancers.
func (o VmwareLoadBalancerConfigPtrOutput) ManualLbConfig() VmwareManualLbConfigPtrOutput {
	return o.ApplyT(func(v *VmwareLoadBalancerConfig) *VmwareManualLbConfig {
		if v == nil {
			return nil
		}
		return v.ManualLbConfig
	}).(VmwareManualLbConfigPtrOutput)
}

// Configuration for MetalLB typed load balancers.
func (o VmwareLoadBalancerConfigPtrOutput) MetalLbConfig() VmwareMetalLbConfigPtrOutput {
	return o.ApplyT(func(v *VmwareLoadBalancerConfig) *VmwareMetalLbConfig {
		if v == nil {
			return nil
		}
		return v.MetalLbConfig
	}).(VmwareMetalLbConfigPtrOutput)
}

// The VIPs used by the load balancer.
func (o VmwareLoadBalancerConfigPtrOutput) VipConfig() VmwareVipConfigPtrOutput {
	return o.ApplyT(func(v *VmwareLoadBalancerConfig) *VmwareVipConfig {
		if v == nil {
			return nil
		}
		return v.VipConfig
	}).(VmwareVipConfigPtrOutput)
}

// Specifies the locad balancer config for the VMware user cluster.
type VmwareLoadBalancerConfigResponse struct {
	// Configuration for F5 Big IP typed load balancers.
	F5Config VmwareF5BigIpConfigResponse `pulumi:"f5Config"`
	// Manually configured load balancers.
	ManualLbConfig VmwareManualLbConfigResponse `pulumi:"manualLbConfig"`
	// Configuration for MetalLB typed load balancers.
	MetalLbConfig VmwareMetalLbConfigResponse `pulumi:"metalLbConfig"`
	// The VIPs used by the load balancer.
	VipConfig VmwareVipConfigResponse `pulumi:"vipConfig"`
}

// Specifies the locad balancer config for the VMware user cluster.
type VmwareLoadBalancerConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareLoadBalancerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareLoadBalancerConfigResponse)(nil)).Elem()
}

func (o VmwareLoadBalancerConfigResponseOutput) ToVmwareLoadBalancerConfigResponseOutput() VmwareLoadBalancerConfigResponseOutput {
	return o
}

func (o VmwareLoadBalancerConfigResponseOutput) ToVmwareLoadBalancerConfigResponseOutputWithContext(ctx context.Context) VmwareLoadBalancerConfigResponseOutput {
	return o
}

// Configuration for F5 Big IP typed load balancers.
func (o VmwareLoadBalancerConfigResponseOutput) F5Config() VmwareF5BigIpConfigResponseOutput {
	return o.ApplyT(func(v VmwareLoadBalancerConfigResponse) VmwareF5BigIpConfigResponse { return v.F5Config }).(VmwareF5BigIpConfigResponseOutput)
}

// Manually configured load balancers.
func (o VmwareLoadBalancerConfigResponseOutput) ManualLbConfig() VmwareManualLbConfigResponseOutput {
	return o.ApplyT(func(v VmwareLoadBalancerConfigResponse) VmwareManualLbConfigResponse { return v.ManualLbConfig }).(VmwareManualLbConfigResponseOutput)
}

// Configuration for MetalLB typed load balancers.
func (o VmwareLoadBalancerConfigResponseOutput) MetalLbConfig() VmwareMetalLbConfigResponseOutput {
	return o.ApplyT(func(v VmwareLoadBalancerConfigResponse) VmwareMetalLbConfigResponse { return v.MetalLbConfig }).(VmwareMetalLbConfigResponseOutput)
}

// The VIPs used by the load balancer.
func (o VmwareLoadBalancerConfigResponseOutput) VipConfig() VmwareVipConfigResponseOutput {
	return o.ApplyT(func(v VmwareLoadBalancerConfigResponse) VmwareVipConfigResponse { return v.VipConfig }).(VmwareVipConfigResponseOutput)
}

// Represents configuration parameters for an already existing manual load balancer. Given the nature of manual load balancers it is expected that said load balancer will be fully managed by users. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update ManualLB configurations it can only bind a pre-existing configuration to a new VMware user cluster.
type VmwareManualLbConfig struct {
	// NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).
	ControlPlaneNodePort *int `pulumi:"controlPlaneNodePort"`
	// NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).
	IngressHttpNodePort *int `pulumi:"ingressHttpNodePort"`
	// NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).
	IngressHttpsNodePort *int `pulumi:"ingressHttpsNodePort"`
	// NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).
	KonnectivityServerNodePort *int `pulumi:"konnectivityServerNodePort"`
}

// VmwareManualLbConfigInput is an input type that accepts VmwareManualLbConfigArgs and VmwareManualLbConfigOutput values.
// You can construct a concrete instance of `VmwareManualLbConfigInput` via:
//
//	VmwareManualLbConfigArgs{...}
type VmwareManualLbConfigInput interface {
	pulumi.Input

	ToVmwareManualLbConfigOutput() VmwareManualLbConfigOutput
	ToVmwareManualLbConfigOutputWithContext(context.Context) VmwareManualLbConfigOutput
}

// Represents configuration parameters for an already existing manual load balancer. Given the nature of manual load balancers it is expected that said load balancer will be fully managed by users. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update ManualLB configurations it can only bind a pre-existing configuration to a new VMware user cluster.
type VmwareManualLbConfigArgs struct {
	// NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).
	ControlPlaneNodePort pulumi.IntPtrInput `pulumi:"controlPlaneNodePort"`
	// NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).
	IngressHttpNodePort pulumi.IntPtrInput `pulumi:"ingressHttpNodePort"`
	// NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).
	IngressHttpsNodePort pulumi.IntPtrInput `pulumi:"ingressHttpsNodePort"`
	// NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).
	KonnectivityServerNodePort pulumi.IntPtrInput `pulumi:"konnectivityServerNodePort"`
}

func (VmwareManualLbConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareManualLbConfig)(nil)).Elem()
}

func (i VmwareManualLbConfigArgs) ToVmwareManualLbConfigOutput() VmwareManualLbConfigOutput {
	return i.ToVmwareManualLbConfigOutputWithContext(context.Background())
}

func (i VmwareManualLbConfigArgs) ToVmwareManualLbConfigOutputWithContext(ctx context.Context) VmwareManualLbConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareManualLbConfigOutput)
}

func (i VmwareManualLbConfigArgs) ToVmwareManualLbConfigPtrOutput() VmwareManualLbConfigPtrOutput {
	return i.ToVmwareManualLbConfigPtrOutputWithContext(context.Background())
}

func (i VmwareManualLbConfigArgs) ToVmwareManualLbConfigPtrOutputWithContext(ctx context.Context) VmwareManualLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareManualLbConfigOutput).ToVmwareManualLbConfigPtrOutputWithContext(ctx)
}

// VmwareManualLbConfigPtrInput is an input type that accepts VmwareManualLbConfigArgs, VmwareManualLbConfigPtr and VmwareManualLbConfigPtrOutput values.
// You can construct a concrete instance of `VmwareManualLbConfigPtrInput` via:
//
//	        VmwareManualLbConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareManualLbConfigPtrInput interface {
	pulumi.Input

	ToVmwareManualLbConfigPtrOutput() VmwareManualLbConfigPtrOutput
	ToVmwareManualLbConfigPtrOutputWithContext(context.Context) VmwareManualLbConfigPtrOutput
}

type vmwareManualLbConfigPtrType VmwareManualLbConfigArgs

func VmwareManualLbConfigPtr(v *VmwareManualLbConfigArgs) VmwareManualLbConfigPtrInput {
	return (*vmwareManualLbConfigPtrType)(v)
}

func (*vmwareManualLbConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareManualLbConfig)(nil)).Elem()
}

func (i *vmwareManualLbConfigPtrType) ToVmwareManualLbConfigPtrOutput() VmwareManualLbConfigPtrOutput {
	return i.ToVmwareManualLbConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareManualLbConfigPtrType) ToVmwareManualLbConfigPtrOutputWithContext(ctx context.Context) VmwareManualLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareManualLbConfigPtrOutput)
}

// Represents configuration parameters for an already existing manual load balancer. Given the nature of manual load balancers it is expected that said load balancer will be fully managed by users. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update ManualLB configurations it can only bind a pre-existing configuration to a new VMware user cluster.
type VmwareManualLbConfigOutput struct{ *pulumi.OutputState }

func (VmwareManualLbConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareManualLbConfig)(nil)).Elem()
}

func (o VmwareManualLbConfigOutput) ToVmwareManualLbConfigOutput() VmwareManualLbConfigOutput {
	return o
}

func (o VmwareManualLbConfigOutput) ToVmwareManualLbConfigOutputWithContext(ctx context.Context) VmwareManualLbConfigOutput {
	return o
}

func (o VmwareManualLbConfigOutput) ToVmwareManualLbConfigPtrOutput() VmwareManualLbConfigPtrOutput {
	return o.ToVmwareManualLbConfigPtrOutputWithContext(context.Background())
}

func (o VmwareManualLbConfigOutput) ToVmwareManualLbConfigPtrOutputWithContext(ctx context.Context) VmwareManualLbConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareManualLbConfig) *VmwareManualLbConfig {
		return &v
	}).(VmwareManualLbConfigPtrOutput)
}

// NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).
func (o VmwareManualLbConfigOutput) ControlPlaneNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareManualLbConfig) *int { return v.ControlPlaneNodePort }).(pulumi.IntPtrOutput)
}

// NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).
func (o VmwareManualLbConfigOutput) IngressHttpNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareManualLbConfig) *int { return v.IngressHttpNodePort }).(pulumi.IntPtrOutput)
}

// NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).
func (o VmwareManualLbConfigOutput) IngressHttpsNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareManualLbConfig) *int { return v.IngressHttpsNodePort }).(pulumi.IntPtrOutput)
}

// NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).
func (o VmwareManualLbConfigOutput) KonnectivityServerNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareManualLbConfig) *int { return v.KonnectivityServerNodePort }).(pulumi.IntPtrOutput)
}

type VmwareManualLbConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareManualLbConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareManualLbConfig)(nil)).Elem()
}

func (o VmwareManualLbConfigPtrOutput) ToVmwareManualLbConfigPtrOutput() VmwareManualLbConfigPtrOutput {
	return o
}

func (o VmwareManualLbConfigPtrOutput) ToVmwareManualLbConfigPtrOutputWithContext(ctx context.Context) VmwareManualLbConfigPtrOutput {
	return o
}

func (o VmwareManualLbConfigPtrOutput) Elem() VmwareManualLbConfigOutput {
	return o.ApplyT(func(v *VmwareManualLbConfig) VmwareManualLbConfig {
		if v != nil {
			return *v
		}
		var ret VmwareManualLbConfig
		return ret
	}).(VmwareManualLbConfigOutput)
}

// NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).
func (o VmwareManualLbConfigPtrOutput) ControlPlaneNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareManualLbConfig) *int {
		if v == nil {
			return nil
		}
		return v.ControlPlaneNodePort
	}).(pulumi.IntPtrOutput)
}

// NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).
func (o VmwareManualLbConfigPtrOutput) IngressHttpNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareManualLbConfig) *int {
		if v == nil {
			return nil
		}
		return v.IngressHttpNodePort
	}).(pulumi.IntPtrOutput)
}

// NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).
func (o VmwareManualLbConfigPtrOutput) IngressHttpsNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareManualLbConfig) *int {
		if v == nil {
			return nil
		}
		return v.IngressHttpsNodePort
	}).(pulumi.IntPtrOutput)
}

// NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).
func (o VmwareManualLbConfigPtrOutput) KonnectivityServerNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareManualLbConfig) *int {
		if v == nil {
			return nil
		}
		return v.KonnectivityServerNodePort
	}).(pulumi.IntPtrOutput)
}

// Represents configuration parameters for an already existing manual load balancer. Given the nature of manual load balancers it is expected that said load balancer will be fully managed by users. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update ManualLB configurations it can only bind a pre-existing configuration to a new VMware user cluster.
type VmwareManualLbConfigResponse struct {
	// NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).
	ControlPlaneNodePort int `pulumi:"controlPlaneNodePort"`
	// NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).
	IngressHttpNodePort int `pulumi:"ingressHttpNodePort"`
	// NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).
	IngressHttpsNodePort int `pulumi:"ingressHttpsNodePort"`
	// NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).
	KonnectivityServerNodePort int `pulumi:"konnectivityServerNodePort"`
}

// Represents configuration parameters for an already existing manual load balancer. Given the nature of manual load balancers it is expected that said load balancer will be fully managed by users. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update ManualLB configurations it can only bind a pre-existing configuration to a new VMware user cluster.
type VmwareManualLbConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareManualLbConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareManualLbConfigResponse)(nil)).Elem()
}

func (o VmwareManualLbConfigResponseOutput) ToVmwareManualLbConfigResponseOutput() VmwareManualLbConfigResponseOutput {
	return o
}

func (o VmwareManualLbConfigResponseOutput) ToVmwareManualLbConfigResponseOutputWithContext(ctx context.Context) VmwareManualLbConfigResponseOutput {
	return o
}

// NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).
func (o VmwareManualLbConfigResponseOutput) ControlPlaneNodePort() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareManualLbConfigResponse) int { return v.ControlPlaneNodePort }).(pulumi.IntOutput)
}

// NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).
func (o VmwareManualLbConfigResponseOutput) IngressHttpNodePort() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareManualLbConfigResponse) int { return v.IngressHttpNodePort }).(pulumi.IntOutput)
}

// NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).
func (o VmwareManualLbConfigResponseOutput) IngressHttpsNodePort() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareManualLbConfigResponse) int { return v.IngressHttpsNodePort }).(pulumi.IntOutput)
}

// NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).
func (o VmwareManualLbConfigResponseOutput) KonnectivityServerNodePort() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareManualLbConfigResponse) int { return v.KonnectivityServerNodePort }).(pulumi.IntOutput)
}

// Represents configuration parameters for the MetalLB load balancer.
type VmwareMetalLbConfig struct {
	// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
	AddressPools []VmwareAddressPool `pulumi:"addressPools"`
}

// VmwareMetalLbConfigInput is an input type that accepts VmwareMetalLbConfigArgs and VmwareMetalLbConfigOutput values.
// You can construct a concrete instance of `VmwareMetalLbConfigInput` via:
//
//	VmwareMetalLbConfigArgs{...}
type VmwareMetalLbConfigInput interface {
	pulumi.Input

	ToVmwareMetalLbConfigOutput() VmwareMetalLbConfigOutput
	ToVmwareMetalLbConfigOutputWithContext(context.Context) VmwareMetalLbConfigOutput
}

// Represents configuration parameters for the MetalLB load balancer.
type VmwareMetalLbConfigArgs struct {
	// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
	AddressPools VmwareAddressPoolArrayInput `pulumi:"addressPools"`
}

func (VmwareMetalLbConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareMetalLbConfig)(nil)).Elem()
}

func (i VmwareMetalLbConfigArgs) ToVmwareMetalLbConfigOutput() VmwareMetalLbConfigOutput {
	return i.ToVmwareMetalLbConfigOutputWithContext(context.Background())
}

func (i VmwareMetalLbConfigArgs) ToVmwareMetalLbConfigOutputWithContext(ctx context.Context) VmwareMetalLbConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareMetalLbConfigOutput)
}

func (i VmwareMetalLbConfigArgs) ToVmwareMetalLbConfigPtrOutput() VmwareMetalLbConfigPtrOutput {
	return i.ToVmwareMetalLbConfigPtrOutputWithContext(context.Background())
}

func (i VmwareMetalLbConfigArgs) ToVmwareMetalLbConfigPtrOutputWithContext(ctx context.Context) VmwareMetalLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareMetalLbConfigOutput).ToVmwareMetalLbConfigPtrOutputWithContext(ctx)
}

// VmwareMetalLbConfigPtrInput is an input type that accepts VmwareMetalLbConfigArgs, VmwareMetalLbConfigPtr and VmwareMetalLbConfigPtrOutput values.
// You can construct a concrete instance of `VmwareMetalLbConfigPtrInput` via:
//
//	        VmwareMetalLbConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareMetalLbConfigPtrInput interface {
	pulumi.Input

	ToVmwareMetalLbConfigPtrOutput() VmwareMetalLbConfigPtrOutput
	ToVmwareMetalLbConfigPtrOutputWithContext(context.Context) VmwareMetalLbConfigPtrOutput
}

type vmwareMetalLbConfigPtrType VmwareMetalLbConfigArgs

func VmwareMetalLbConfigPtr(v *VmwareMetalLbConfigArgs) VmwareMetalLbConfigPtrInput {
	return (*vmwareMetalLbConfigPtrType)(v)
}

func (*vmwareMetalLbConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareMetalLbConfig)(nil)).Elem()
}

func (i *vmwareMetalLbConfigPtrType) ToVmwareMetalLbConfigPtrOutput() VmwareMetalLbConfigPtrOutput {
	return i.ToVmwareMetalLbConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareMetalLbConfigPtrType) ToVmwareMetalLbConfigPtrOutputWithContext(ctx context.Context) VmwareMetalLbConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareMetalLbConfigPtrOutput)
}

// Represents configuration parameters for the MetalLB load balancer.
type VmwareMetalLbConfigOutput struct{ *pulumi.OutputState }

func (VmwareMetalLbConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareMetalLbConfig)(nil)).Elem()
}

func (o VmwareMetalLbConfigOutput) ToVmwareMetalLbConfigOutput() VmwareMetalLbConfigOutput {
	return o
}

func (o VmwareMetalLbConfigOutput) ToVmwareMetalLbConfigOutputWithContext(ctx context.Context) VmwareMetalLbConfigOutput {
	return o
}

func (o VmwareMetalLbConfigOutput) ToVmwareMetalLbConfigPtrOutput() VmwareMetalLbConfigPtrOutput {
	return o.ToVmwareMetalLbConfigPtrOutputWithContext(context.Background())
}

func (o VmwareMetalLbConfigOutput) ToVmwareMetalLbConfigPtrOutputWithContext(ctx context.Context) VmwareMetalLbConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareMetalLbConfig) *VmwareMetalLbConfig {
		return &v
	}).(VmwareMetalLbConfigPtrOutput)
}

// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
func (o VmwareMetalLbConfigOutput) AddressPools() VmwareAddressPoolArrayOutput {
	return o.ApplyT(func(v VmwareMetalLbConfig) []VmwareAddressPool { return v.AddressPools }).(VmwareAddressPoolArrayOutput)
}

type VmwareMetalLbConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareMetalLbConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareMetalLbConfig)(nil)).Elem()
}

func (o VmwareMetalLbConfigPtrOutput) ToVmwareMetalLbConfigPtrOutput() VmwareMetalLbConfigPtrOutput {
	return o
}

func (o VmwareMetalLbConfigPtrOutput) ToVmwareMetalLbConfigPtrOutputWithContext(ctx context.Context) VmwareMetalLbConfigPtrOutput {
	return o
}

func (o VmwareMetalLbConfigPtrOutput) Elem() VmwareMetalLbConfigOutput {
	return o.ApplyT(func(v *VmwareMetalLbConfig) VmwareMetalLbConfig {
		if v != nil {
			return *v
		}
		var ret VmwareMetalLbConfig
		return ret
	}).(VmwareMetalLbConfigOutput)
}

// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
func (o VmwareMetalLbConfigPtrOutput) AddressPools() VmwareAddressPoolArrayOutput {
	return o.ApplyT(func(v *VmwareMetalLbConfig) []VmwareAddressPool {
		if v == nil {
			return nil
		}
		return v.AddressPools
	}).(VmwareAddressPoolArrayOutput)
}

// Represents configuration parameters for the MetalLB load balancer.
type VmwareMetalLbConfigResponse struct {
	// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
	AddressPools []VmwareAddressPoolResponse `pulumi:"addressPools"`
}

// Represents configuration parameters for the MetalLB load balancer.
type VmwareMetalLbConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareMetalLbConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareMetalLbConfigResponse)(nil)).Elem()
}

func (o VmwareMetalLbConfigResponseOutput) ToVmwareMetalLbConfigResponseOutput() VmwareMetalLbConfigResponseOutput {
	return o
}

func (o VmwareMetalLbConfigResponseOutput) ToVmwareMetalLbConfigResponseOutputWithContext(ctx context.Context) VmwareMetalLbConfigResponseOutput {
	return o
}

// AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.
func (o VmwareMetalLbConfigResponseOutput) AddressPools() VmwareAddressPoolResponseArrayOutput {
	return o.ApplyT(func(v VmwareMetalLbConfigResponse) []VmwareAddressPoolResponse { return v.AddressPools }).(VmwareAddressPoolResponseArrayOutput)
}

// Specifies network config for the VMware user cluster.
type VmwareNetworkConfig struct {
	// Configuration for control plane V2 mode.
	ControlPlaneV2Config *VmwareControlPlaneV2Config `pulumi:"controlPlaneV2Config"`
	// Configuration settings for a DHCP IP configuration.
	DhcpIpConfig *VmwareDhcpIpConfig `pulumi:"dhcpIpConfig"`
	// Represents common network settings irrespective of the host's IP address.
	HostConfig *VmwareHostConfig `pulumi:"hostConfig"`
	// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
	PodAddressCidrBlocks []string `pulumi:"podAddressCidrBlocks"`
	// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
	ServiceAddressCidrBlocks []string `pulumi:"serviceAddressCidrBlocks"`
	// Configuration settings for a static IP configuration.
	StaticIpConfig *VmwareStaticIpConfig `pulumi:"staticIpConfig"`
}

// VmwareNetworkConfigInput is an input type that accepts VmwareNetworkConfigArgs and VmwareNetworkConfigOutput values.
// You can construct a concrete instance of `VmwareNetworkConfigInput` via:
//
//	VmwareNetworkConfigArgs{...}
type VmwareNetworkConfigInput interface {
	pulumi.Input

	ToVmwareNetworkConfigOutput() VmwareNetworkConfigOutput
	ToVmwareNetworkConfigOutputWithContext(context.Context) VmwareNetworkConfigOutput
}

// Specifies network config for the VMware user cluster.
type VmwareNetworkConfigArgs struct {
	// Configuration for control plane V2 mode.
	ControlPlaneV2Config VmwareControlPlaneV2ConfigPtrInput `pulumi:"controlPlaneV2Config"`
	// Configuration settings for a DHCP IP configuration.
	DhcpIpConfig VmwareDhcpIpConfigPtrInput `pulumi:"dhcpIpConfig"`
	// Represents common network settings irrespective of the host's IP address.
	HostConfig VmwareHostConfigPtrInput `pulumi:"hostConfig"`
	// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
	PodAddressCidrBlocks pulumi.StringArrayInput `pulumi:"podAddressCidrBlocks"`
	// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
	ServiceAddressCidrBlocks pulumi.StringArrayInput `pulumi:"serviceAddressCidrBlocks"`
	// Configuration settings for a static IP configuration.
	StaticIpConfig VmwareStaticIpConfigPtrInput `pulumi:"staticIpConfig"`
}

func (VmwareNetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareNetworkConfig)(nil)).Elem()
}

func (i VmwareNetworkConfigArgs) ToVmwareNetworkConfigOutput() VmwareNetworkConfigOutput {
	return i.ToVmwareNetworkConfigOutputWithContext(context.Background())
}

func (i VmwareNetworkConfigArgs) ToVmwareNetworkConfigOutputWithContext(ctx context.Context) VmwareNetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareNetworkConfigOutput)
}

func (i VmwareNetworkConfigArgs) ToVmwareNetworkConfigPtrOutput() VmwareNetworkConfigPtrOutput {
	return i.ToVmwareNetworkConfigPtrOutputWithContext(context.Background())
}

func (i VmwareNetworkConfigArgs) ToVmwareNetworkConfigPtrOutputWithContext(ctx context.Context) VmwareNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareNetworkConfigOutput).ToVmwareNetworkConfigPtrOutputWithContext(ctx)
}

// VmwareNetworkConfigPtrInput is an input type that accepts VmwareNetworkConfigArgs, VmwareNetworkConfigPtr and VmwareNetworkConfigPtrOutput values.
// You can construct a concrete instance of `VmwareNetworkConfigPtrInput` via:
//
//	        VmwareNetworkConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareNetworkConfigPtrInput interface {
	pulumi.Input

	ToVmwareNetworkConfigPtrOutput() VmwareNetworkConfigPtrOutput
	ToVmwareNetworkConfigPtrOutputWithContext(context.Context) VmwareNetworkConfigPtrOutput
}

type vmwareNetworkConfigPtrType VmwareNetworkConfigArgs

func VmwareNetworkConfigPtr(v *VmwareNetworkConfigArgs) VmwareNetworkConfigPtrInput {
	return (*vmwareNetworkConfigPtrType)(v)
}

func (*vmwareNetworkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareNetworkConfig)(nil)).Elem()
}

func (i *vmwareNetworkConfigPtrType) ToVmwareNetworkConfigPtrOutput() VmwareNetworkConfigPtrOutput {
	return i.ToVmwareNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareNetworkConfigPtrType) ToVmwareNetworkConfigPtrOutputWithContext(ctx context.Context) VmwareNetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareNetworkConfigPtrOutput)
}

// Specifies network config for the VMware user cluster.
type VmwareNetworkConfigOutput struct{ *pulumi.OutputState }

func (VmwareNetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareNetworkConfig)(nil)).Elem()
}

func (o VmwareNetworkConfigOutput) ToVmwareNetworkConfigOutput() VmwareNetworkConfigOutput {
	return o
}

func (o VmwareNetworkConfigOutput) ToVmwareNetworkConfigOutputWithContext(ctx context.Context) VmwareNetworkConfigOutput {
	return o
}

func (o VmwareNetworkConfigOutput) ToVmwareNetworkConfigPtrOutput() VmwareNetworkConfigPtrOutput {
	return o.ToVmwareNetworkConfigPtrOutputWithContext(context.Background())
}

func (o VmwareNetworkConfigOutput) ToVmwareNetworkConfigPtrOutputWithContext(ctx context.Context) VmwareNetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareNetworkConfig) *VmwareNetworkConfig {
		return &v
	}).(VmwareNetworkConfigPtrOutput)
}

// Configuration for control plane V2 mode.
func (o VmwareNetworkConfigOutput) ControlPlaneV2Config() VmwareControlPlaneV2ConfigPtrOutput {
	return o.ApplyT(func(v VmwareNetworkConfig) *VmwareControlPlaneV2Config { return v.ControlPlaneV2Config }).(VmwareControlPlaneV2ConfigPtrOutput)
}

// Configuration settings for a DHCP IP configuration.
func (o VmwareNetworkConfigOutput) DhcpIpConfig() VmwareDhcpIpConfigPtrOutput {
	return o.ApplyT(func(v VmwareNetworkConfig) *VmwareDhcpIpConfig { return v.DhcpIpConfig }).(VmwareDhcpIpConfigPtrOutput)
}

// Represents common network settings irrespective of the host's IP address.
func (o VmwareNetworkConfigOutput) HostConfig() VmwareHostConfigPtrOutput {
	return o.ApplyT(func(v VmwareNetworkConfig) *VmwareHostConfig { return v.HostConfig }).(VmwareHostConfigPtrOutput)
}

// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
func (o VmwareNetworkConfigOutput) PodAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareNetworkConfig) []string { return v.PodAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
func (o VmwareNetworkConfigOutput) ServiceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareNetworkConfig) []string { return v.ServiceAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// Configuration settings for a static IP configuration.
func (o VmwareNetworkConfigOutput) StaticIpConfig() VmwareStaticIpConfigPtrOutput {
	return o.ApplyT(func(v VmwareNetworkConfig) *VmwareStaticIpConfig { return v.StaticIpConfig }).(VmwareStaticIpConfigPtrOutput)
}

type VmwareNetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareNetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareNetworkConfig)(nil)).Elem()
}

func (o VmwareNetworkConfigPtrOutput) ToVmwareNetworkConfigPtrOutput() VmwareNetworkConfigPtrOutput {
	return o
}

func (o VmwareNetworkConfigPtrOutput) ToVmwareNetworkConfigPtrOutputWithContext(ctx context.Context) VmwareNetworkConfigPtrOutput {
	return o
}

func (o VmwareNetworkConfigPtrOutput) Elem() VmwareNetworkConfigOutput {
	return o.ApplyT(func(v *VmwareNetworkConfig) VmwareNetworkConfig {
		if v != nil {
			return *v
		}
		var ret VmwareNetworkConfig
		return ret
	}).(VmwareNetworkConfigOutput)
}

// Configuration for control plane V2 mode.
func (o VmwareNetworkConfigPtrOutput) ControlPlaneV2Config() VmwareControlPlaneV2ConfigPtrOutput {
	return o.ApplyT(func(v *VmwareNetworkConfig) *VmwareControlPlaneV2Config {
		if v == nil {
			return nil
		}
		return v.ControlPlaneV2Config
	}).(VmwareControlPlaneV2ConfigPtrOutput)
}

// Configuration settings for a DHCP IP configuration.
func (o VmwareNetworkConfigPtrOutput) DhcpIpConfig() VmwareDhcpIpConfigPtrOutput {
	return o.ApplyT(func(v *VmwareNetworkConfig) *VmwareDhcpIpConfig {
		if v == nil {
			return nil
		}
		return v.DhcpIpConfig
	}).(VmwareDhcpIpConfigPtrOutput)
}

// Represents common network settings irrespective of the host's IP address.
func (o VmwareNetworkConfigPtrOutput) HostConfig() VmwareHostConfigPtrOutput {
	return o.ApplyT(func(v *VmwareNetworkConfig) *VmwareHostConfig {
		if v == nil {
			return nil
		}
		return v.HostConfig
	}).(VmwareHostConfigPtrOutput)
}

// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
func (o VmwareNetworkConfigPtrOutput) PodAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareNetworkConfig) []string {
		if v == nil {
			return nil
		}
		return v.PodAddressCidrBlocks
	}).(pulumi.StringArrayOutput)
}

// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
func (o VmwareNetworkConfigPtrOutput) ServiceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VmwareNetworkConfig) []string {
		if v == nil {
			return nil
		}
		return v.ServiceAddressCidrBlocks
	}).(pulumi.StringArrayOutput)
}

// Configuration settings for a static IP configuration.
func (o VmwareNetworkConfigPtrOutput) StaticIpConfig() VmwareStaticIpConfigPtrOutput {
	return o.ApplyT(func(v *VmwareNetworkConfig) *VmwareStaticIpConfig {
		if v == nil {
			return nil
		}
		return v.StaticIpConfig
	}).(VmwareStaticIpConfigPtrOutput)
}

// Specifies network config for the VMware user cluster.
type VmwareNetworkConfigResponse struct {
	// Configuration for control plane V2 mode.
	ControlPlaneV2Config VmwareControlPlaneV2ConfigResponse `pulumi:"controlPlaneV2Config"`
	// Configuration settings for a DHCP IP configuration.
	DhcpIpConfig VmwareDhcpIpConfigResponse `pulumi:"dhcpIpConfig"`
	// Represents common network settings irrespective of the host's IP address.
	HostConfig VmwareHostConfigResponse `pulumi:"hostConfig"`
	// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
	PodAddressCidrBlocks []string `pulumi:"podAddressCidrBlocks"`
	// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
	ServiceAddressCidrBlocks []string `pulumi:"serviceAddressCidrBlocks"`
	// Configuration settings for a static IP configuration.
	StaticIpConfig VmwareStaticIpConfigResponse `pulumi:"staticIpConfig"`
	// vcenter_network specifies vCenter network name. Inherited from the admin cluster.
	VcenterNetwork string `pulumi:"vcenterNetwork"`
}

// Specifies network config for the VMware user cluster.
type VmwareNetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareNetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareNetworkConfigResponse)(nil)).Elem()
}

func (o VmwareNetworkConfigResponseOutput) ToVmwareNetworkConfigResponseOutput() VmwareNetworkConfigResponseOutput {
	return o
}

func (o VmwareNetworkConfigResponseOutput) ToVmwareNetworkConfigResponseOutputWithContext(ctx context.Context) VmwareNetworkConfigResponseOutput {
	return o
}

// Configuration for control plane V2 mode.
func (o VmwareNetworkConfigResponseOutput) ControlPlaneV2Config() VmwareControlPlaneV2ConfigResponseOutput {
	return o.ApplyT(func(v VmwareNetworkConfigResponse) VmwareControlPlaneV2ConfigResponse { return v.ControlPlaneV2Config }).(VmwareControlPlaneV2ConfigResponseOutput)
}

// Configuration settings for a DHCP IP configuration.
func (o VmwareNetworkConfigResponseOutput) DhcpIpConfig() VmwareDhcpIpConfigResponseOutput {
	return o.ApplyT(func(v VmwareNetworkConfigResponse) VmwareDhcpIpConfigResponse { return v.DhcpIpConfig }).(VmwareDhcpIpConfigResponseOutput)
}

// Represents common network settings irrespective of the host's IP address.
func (o VmwareNetworkConfigResponseOutput) HostConfig() VmwareHostConfigResponseOutput {
	return o.ApplyT(func(v VmwareNetworkConfigResponse) VmwareHostConfigResponse { return v.HostConfig }).(VmwareHostConfigResponseOutput)
}

// All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
func (o VmwareNetworkConfigResponseOutput) PodAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareNetworkConfigResponse) []string { return v.PodAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
func (o VmwareNetworkConfigResponseOutput) ServiceAddressCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmwareNetworkConfigResponse) []string { return v.ServiceAddressCidrBlocks }).(pulumi.StringArrayOutput)
}

// Configuration settings for a static IP configuration.
func (o VmwareNetworkConfigResponseOutput) StaticIpConfig() VmwareStaticIpConfigResponseOutput {
	return o.ApplyT(func(v VmwareNetworkConfigResponse) VmwareStaticIpConfigResponse { return v.StaticIpConfig }).(VmwareStaticIpConfigResponseOutput)
}

// vcenter_network specifies vCenter network name. Inherited from the admin cluster.
func (o VmwareNetworkConfigResponseOutput) VcenterNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareNetworkConfigResponse) string { return v.VcenterNetwork }).(pulumi.StringOutput)
}

// Parameters that describe the configuration of all nodes within a given node pool.
type VmwareNodeConfig struct {
	// VMware disk size to be used during creation.
	BootDiskSizeGb *string `pulumi:"bootDiskSizeGb"`
	// The number of CPUs for each node in the node pool.
	Cpus *string `pulumi:"cpus"`
	// Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.
	EnableLoadBalancer *bool `pulumi:"enableLoadBalancer"`
	// The OS image name in vCenter, only valid when using Windows.
	Image *string `pulumi:"image"`
	// The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
	ImageType string `pulumi:"imageType"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels map[string]string `pulumi:"labels"`
	// The megabytes of memory for each node in the node pool.
	MemoryMb *string `pulumi:"memoryMb"`
	// The number of nodes in the node pool.
	Replicas *string `pulumi:"replicas"`
	// The initial taints assigned to nodes of this node pool.
	Taints []NodeTaint `pulumi:"taints"`
}

// VmwareNodeConfigInput is an input type that accepts VmwareNodeConfigArgs and VmwareNodeConfigOutput values.
// You can construct a concrete instance of `VmwareNodeConfigInput` via:
//
//	VmwareNodeConfigArgs{...}
type VmwareNodeConfigInput interface {
	pulumi.Input

	ToVmwareNodeConfigOutput() VmwareNodeConfigOutput
	ToVmwareNodeConfigOutputWithContext(context.Context) VmwareNodeConfigOutput
}

// Parameters that describe the configuration of all nodes within a given node pool.
type VmwareNodeConfigArgs struct {
	// VMware disk size to be used during creation.
	BootDiskSizeGb pulumi.StringPtrInput `pulumi:"bootDiskSizeGb"`
	// The number of CPUs for each node in the node pool.
	Cpus pulumi.StringPtrInput `pulumi:"cpus"`
	// Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.
	EnableLoadBalancer pulumi.BoolPtrInput `pulumi:"enableLoadBalancer"`
	// The OS image name in vCenter, only valid when using Windows.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
	ImageType pulumi.StringInput `pulumi:"imageType"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The megabytes of memory for each node in the node pool.
	MemoryMb pulumi.StringPtrInput `pulumi:"memoryMb"`
	// The number of nodes in the node pool.
	Replicas pulumi.StringPtrInput `pulumi:"replicas"`
	// The initial taints assigned to nodes of this node pool.
	Taints NodeTaintArrayInput `pulumi:"taints"`
}

func (VmwareNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareNodeConfig)(nil)).Elem()
}

func (i VmwareNodeConfigArgs) ToVmwareNodeConfigOutput() VmwareNodeConfigOutput {
	return i.ToVmwareNodeConfigOutputWithContext(context.Background())
}

func (i VmwareNodeConfigArgs) ToVmwareNodeConfigOutputWithContext(ctx context.Context) VmwareNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareNodeConfigOutput)
}

// Parameters that describe the configuration of all nodes within a given node pool.
type VmwareNodeConfigOutput struct{ *pulumi.OutputState }

func (VmwareNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareNodeConfig)(nil)).Elem()
}

func (o VmwareNodeConfigOutput) ToVmwareNodeConfigOutput() VmwareNodeConfigOutput {
	return o
}

func (o VmwareNodeConfigOutput) ToVmwareNodeConfigOutputWithContext(ctx context.Context) VmwareNodeConfigOutput {
	return o
}

// VMware disk size to be used during creation.
func (o VmwareNodeConfigOutput) BootDiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareNodeConfig) *string { return v.BootDiskSizeGb }).(pulumi.StringPtrOutput)
}

// The number of CPUs for each node in the node pool.
func (o VmwareNodeConfigOutput) Cpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareNodeConfig) *string { return v.Cpus }).(pulumi.StringPtrOutput)
}

// Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.
func (o VmwareNodeConfigOutput) EnableLoadBalancer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareNodeConfig) *bool { return v.EnableLoadBalancer }).(pulumi.BoolPtrOutput)
}

// The OS image name in vCenter, only valid when using Windows.
func (o VmwareNodeConfigOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareNodeConfig) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
func (o VmwareNodeConfigOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareNodeConfig) string { return v.ImageType }).(pulumi.StringOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o VmwareNodeConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VmwareNodeConfig) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The megabytes of memory for each node in the node pool.
func (o VmwareNodeConfigOutput) MemoryMb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareNodeConfig) *string { return v.MemoryMb }).(pulumi.StringPtrOutput)
}

// The number of nodes in the node pool.
func (o VmwareNodeConfigOutput) Replicas() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareNodeConfig) *string { return v.Replicas }).(pulumi.StringPtrOutput)
}

// The initial taints assigned to nodes of this node pool.
func (o VmwareNodeConfigOutput) Taints() NodeTaintArrayOutput {
	return o.ApplyT(func(v VmwareNodeConfig) []NodeTaint { return v.Taints }).(NodeTaintArrayOutput)
}

// Parameters that describe the configuration of all nodes within a given node pool.
type VmwareNodeConfigResponse struct {
	// VMware disk size to be used during creation.
	BootDiskSizeGb string `pulumi:"bootDiskSizeGb"`
	// The number of CPUs for each node in the node pool.
	Cpus string `pulumi:"cpus"`
	// Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.
	EnableLoadBalancer bool `pulumi:"enableLoadBalancer"`
	// The OS image name in vCenter, only valid when using Windows.
	Image string `pulumi:"image"`
	// The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
	ImageType string `pulumi:"imageType"`
	// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels map[string]string `pulumi:"labels"`
	// The megabytes of memory for each node in the node pool.
	MemoryMb string `pulumi:"memoryMb"`
	// The number of nodes in the node pool.
	Replicas string `pulumi:"replicas"`
	// The initial taints assigned to nodes of this node pool.
	Taints []NodeTaintResponse `pulumi:"taints"`
	// Specifies the vSphere config for node pool.
	VsphereConfig VmwareVsphereConfigResponse `pulumi:"vsphereConfig"`
}

// Parameters that describe the configuration of all nodes within a given node pool.
type VmwareNodeConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareNodeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareNodeConfigResponse)(nil)).Elem()
}

func (o VmwareNodeConfigResponseOutput) ToVmwareNodeConfigResponseOutput() VmwareNodeConfigResponseOutput {
	return o
}

func (o VmwareNodeConfigResponseOutput) ToVmwareNodeConfigResponseOutputWithContext(ctx context.Context) VmwareNodeConfigResponseOutput {
	return o
}

// VMware disk size to be used during creation.
func (o VmwareNodeConfigResponseOutput) BootDiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareNodeConfigResponse) string { return v.BootDiskSizeGb }).(pulumi.StringOutput)
}

// The number of CPUs for each node in the node pool.
func (o VmwareNodeConfigResponseOutput) Cpus() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareNodeConfigResponse) string { return v.Cpus }).(pulumi.StringOutput)
}

// Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.
func (o VmwareNodeConfigResponseOutput) EnableLoadBalancer() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareNodeConfigResponse) bool { return v.EnableLoadBalancer }).(pulumi.BoolOutput)
}

// The OS image name in vCenter, only valid when using Windows.
func (o VmwareNodeConfigResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareNodeConfigResponse) string { return v.Image }).(pulumi.StringOutput)
}

// The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.
func (o VmwareNodeConfigResponseOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareNodeConfigResponse) string { return v.ImageType }).(pulumi.StringOutput)
}

// The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o VmwareNodeConfigResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VmwareNodeConfigResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The megabytes of memory for each node in the node pool.
func (o VmwareNodeConfigResponseOutput) MemoryMb() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareNodeConfigResponse) string { return v.MemoryMb }).(pulumi.StringOutput)
}

// The number of nodes in the node pool.
func (o VmwareNodeConfigResponseOutput) Replicas() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareNodeConfigResponse) string { return v.Replicas }).(pulumi.StringOutput)
}

// The initial taints assigned to nodes of this node pool.
func (o VmwareNodeConfigResponseOutput) Taints() NodeTaintResponseArrayOutput {
	return o.ApplyT(func(v VmwareNodeConfigResponse) []NodeTaintResponse { return v.Taints }).(NodeTaintResponseArrayOutput)
}

// Specifies the vSphere config for node pool.
func (o VmwareNodeConfigResponseOutput) VsphereConfig() VmwareVsphereConfigResponseOutput {
	return o.ApplyT(func(v VmwareNodeConfigResponse) VmwareVsphereConfigResponse { return v.VsphereConfig }).(VmwareVsphereConfigResponseOutput)
}

// NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.
type VmwareNodePoolAutoscalingConfig struct {
	// Maximum number of replicas in the NodePool.
	MaxReplicas *int `pulumi:"maxReplicas"`
	// Minimum number of replicas in the NodePool.
	MinReplicas *int `pulumi:"minReplicas"`
}

// VmwareNodePoolAutoscalingConfigInput is an input type that accepts VmwareNodePoolAutoscalingConfigArgs and VmwareNodePoolAutoscalingConfigOutput values.
// You can construct a concrete instance of `VmwareNodePoolAutoscalingConfigInput` via:
//
//	VmwareNodePoolAutoscalingConfigArgs{...}
type VmwareNodePoolAutoscalingConfigInput interface {
	pulumi.Input

	ToVmwareNodePoolAutoscalingConfigOutput() VmwareNodePoolAutoscalingConfigOutput
	ToVmwareNodePoolAutoscalingConfigOutputWithContext(context.Context) VmwareNodePoolAutoscalingConfigOutput
}

// NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.
type VmwareNodePoolAutoscalingConfigArgs struct {
	// Maximum number of replicas in the NodePool.
	MaxReplicas pulumi.IntPtrInput `pulumi:"maxReplicas"`
	// Minimum number of replicas in the NodePool.
	MinReplicas pulumi.IntPtrInput `pulumi:"minReplicas"`
}

func (VmwareNodePoolAutoscalingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareNodePoolAutoscalingConfig)(nil)).Elem()
}

func (i VmwareNodePoolAutoscalingConfigArgs) ToVmwareNodePoolAutoscalingConfigOutput() VmwareNodePoolAutoscalingConfigOutput {
	return i.ToVmwareNodePoolAutoscalingConfigOutputWithContext(context.Background())
}

func (i VmwareNodePoolAutoscalingConfigArgs) ToVmwareNodePoolAutoscalingConfigOutputWithContext(ctx context.Context) VmwareNodePoolAutoscalingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareNodePoolAutoscalingConfigOutput)
}

func (i VmwareNodePoolAutoscalingConfigArgs) ToVmwareNodePoolAutoscalingConfigPtrOutput() VmwareNodePoolAutoscalingConfigPtrOutput {
	return i.ToVmwareNodePoolAutoscalingConfigPtrOutputWithContext(context.Background())
}

func (i VmwareNodePoolAutoscalingConfigArgs) ToVmwareNodePoolAutoscalingConfigPtrOutputWithContext(ctx context.Context) VmwareNodePoolAutoscalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareNodePoolAutoscalingConfigOutput).ToVmwareNodePoolAutoscalingConfigPtrOutputWithContext(ctx)
}

// VmwareNodePoolAutoscalingConfigPtrInput is an input type that accepts VmwareNodePoolAutoscalingConfigArgs, VmwareNodePoolAutoscalingConfigPtr and VmwareNodePoolAutoscalingConfigPtrOutput values.
// You can construct a concrete instance of `VmwareNodePoolAutoscalingConfigPtrInput` via:
//
//	        VmwareNodePoolAutoscalingConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareNodePoolAutoscalingConfigPtrInput interface {
	pulumi.Input

	ToVmwareNodePoolAutoscalingConfigPtrOutput() VmwareNodePoolAutoscalingConfigPtrOutput
	ToVmwareNodePoolAutoscalingConfigPtrOutputWithContext(context.Context) VmwareNodePoolAutoscalingConfigPtrOutput
}

type vmwareNodePoolAutoscalingConfigPtrType VmwareNodePoolAutoscalingConfigArgs

func VmwareNodePoolAutoscalingConfigPtr(v *VmwareNodePoolAutoscalingConfigArgs) VmwareNodePoolAutoscalingConfigPtrInput {
	return (*vmwareNodePoolAutoscalingConfigPtrType)(v)
}

func (*vmwareNodePoolAutoscalingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareNodePoolAutoscalingConfig)(nil)).Elem()
}

func (i *vmwareNodePoolAutoscalingConfigPtrType) ToVmwareNodePoolAutoscalingConfigPtrOutput() VmwareNodePoolAutoscalingConfigPtrOutput {
	return i.ToVmwareNodePoolAutoscalingConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareNodePoolAutoscalingConfigPtrType) ToVmwareNodePoolAutoscalingConfigPtrOutputWithContext(ctx context.Context) VmwareNodePoolAutoscalingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareNodePoolAutoscalingConfigPtrOutput)
}

// NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.
type VmwareNodePoolAutoscalingConfigOutput struct{ *pulumi.OutputState }

func (VmwareNodePoolAutoscalingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareNodePoolAutoscalingConfig)(nil)).Elem()
}

func (o VmwareNodePoolAutoscalingConfigOutput) ToVmwareNodePoolAutoscalingConfigOutput() VmwareNodePoolAutoscalingConfigOutput {
	return o
}

func (o VmwareNodePoolAutoscalingConfigOutput) ToVmwareNodePoolAutoscalingConfigOutputWithContext(ctx context.Context) VmwareNodePoolAutoscalingConfigOutput {
	return o
}

func (o VmwareNodePoolAutoscalingConfigOutput) ToVmwareNodePoolAutoscalingConfigPtrOutput() VmwareNodePoolAutoscalingConfigPtrOutput {
	return o.ToVmwareNodePoolAutoscalingConfigPtrOutputWithContext(context.Background())
}

func (o VmwareNodePoolAutoscalingConfigOutput) ToVmwareNodePoolAutoscalingConfigPtrOutputWithContext(ctx context.Context) VmwareNodePoolAutoscalingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareNodePoolAutoscalingConfig) *VmwareNodePoolAutoscalingConfig {
		return &v
	}).(VmwareNodePoolAutoscalingConfigPtrOutput)
}

// Maximum number of replicas in the NodePool.
func (o VmwareNodePoolAutoscalingConfigOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareNodePoolAutoscalingConfig) *int { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

// Minimum number of replicas in the NodePool.
func (o VmwareNodePoolAutoscalingConfigOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmwareNodePoolAutoscalingConfig) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

type VmwareNodePoolAutoscalingConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareNodePoolAutoscalingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareNodePoolAutoscalingConfig)(nil)).Elem()
}

func (o VmwareNodePoolAutoscalingConfigPtrOutput) ToVmwareNodePoolAutoscalingConfigPtrOutput() VmwareNodePoolAutoscalingConfigPtrOutput {
	return o
}

func (o VmwareNodePoolAutoscalingConfigPtrOutput) ToVmwareNodePoolAutoscalingConfigPtrOutputWithContext(ctx context.Context) VmwareNodePoolAutoscalingConfigPtrOutput {
	return o
}

func (o VmwareNodePoolAutoscalingConfigPtrOutput) Elem() VmwareNodePoolAutoscalingConfigOutput {
	return o.ApplyT(func(v *VmwareNodePoolAutoscalingConfig) VmwareNodePoolAutoscalingConfig {
		if v != nil {
			return *v
		}
		var ret VmwareNodePoolAutoscalingConfig
		return ret
	}).(VmwareNodePoolAutoscalingConfigOutput)
}

// Maximum number of replicas in the NodePool.
func (o VmwareNodePoolAutoscalingConfigPtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareNodePoolAutoscalingConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// Minimum number of replicas in the NodePool.
func (o VmwareNodePoolAutoscalingConfigPtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VmwareNodePoolAutoscalingConfig) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

// NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.
type VmwareNodePoolAutoscalingConfigResponse struct {
	// Maximum number of replicas in the NodePool.
	MaxReplicas int `pulumi:"maxReplicas"`
	// Minimum number of replicas in the NodePool.
	MinReplicas int `pulumi:"minReplicas"`
}

// NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.
type VmwareNodePoolAutoscalingConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareNodePoolAutoscalingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareNodePoolAutoscalingConfigResponse)(nil)).Elem()
}

func (o VmwareNodePoolAutoscalingConfigResponseOutput) ToVmwareNodePoolAutoscalingConfigResponseOutput() VmwareNodePoolAutoscalingConfigResponseOutput {
	return o
}

func (o VmwareNodePoolAutoscalingConfigResponseOutput) ToVmwareNodePoolAutoscalingConfigResponseOutputWithContext(ctx context.Context) VmwareNodePoolAutoscalingConfigResponseOutput {
	return o
}

// Maximum number of replicas in the NodePool.
func (o VmwareNodePoolAutoscalingConfigResponseOutput) MaxReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareNodePoolAutoscalingConfigResponse) int { return v.MaxReplicas }).(pulumi.IntOutput)
}

// Minimum number of replicas in the NodePool.
func (o VmwareNodePoolAutoscalingConfigResponseOutput) MinReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v VmwareNodePoolAutoscalingConfigResponse) int { return v.MinReplicas }).(pulumi.IntOutput)
}

// Represents the network configuration required for the VMware user clusters with Static IP configurations.
type VmwareStaticIpConfig struct {
	// Represents the configuration values for static IP allocation to nodes.
	IpBlocks []VmwareIpBlock `pulumi:"ipBlocks"`
}

// VmwareStaticIpConfigInput is an input type that accepts VmwareStaticIpConfigArgs and VmwareStaticIpConfigOutput values.
// You can construct a concrete instance of `VmwareStaticIpConfigInput` via:
//
//	VmwareStaticIpConfigArgs{...}
type VmwareStaticIpConfigInput interface {
	pulumi.Input

	ToVmwareStaticIpConfigOutput() VmwareStaticIpConfigOutput
	ToVmwareStaticIpConfigOutputWithContext(context.Context) VmwareStaticIpConfigOutput
}

// Represents the network configuration required for the VMware user clusters with Static IP configurations.
type VmwareStaticIpConfigArgs struct {
	// Represents the configuration values for static IP allocation to nodes.
	IpBlocks VmwareIpBlockArrayInput `pulumi:"ipBlocks"`
}

func (VmwareStaticIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareStaticIpConfig)(nil)).Elem()
}

func (i VmwareStaticIpConfigArgs) ToVmwareStaticIpConfigOutput() VmwareStaticIpConfigOutput {
	return i.ToVmwareStaticIpConfigOutputWithContext(context.Background())
}

func (i VmwareStaticIpConfigArgs) ToVmwareStaticIpConfigOutputWithContext(ctx context.Context) VmwareStaticIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareStaticIpConfigOutput)
}

func (i VmwareStaticIpConfigArgs) ToVmwareStaticIpConfigPtrOutput() VmwareStaticIpConfigPtrOutput {
	return i.ToVmwareStaticIpConfigPtrOutputWithContext(context.Background())
}

func (i VmwareStaticIpConfigArgs) ToVmwareStaticIpConfigPtrOutputWithContext(ctx context.Context) VmwareStaticIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareStaticIpConfigOutput).ToVmwareStaticIpConfigPtrOutputWithContext(ctx)
}

// VmwareStaticIpConfigPtrInput is an input type that accepts VmwareStaticIpConfigArgs, VmwareStaticIpConfigPtr and VmwareStaticIpConfigPtrOutput values.
// You can construct a concrete instance of `VmwareStaticIpConfigPtrInput` via:
//
//	        VmwareStaticIpConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareStaticIpConfigPtrInput interface {
	pulumi.Input

	ToVmwareStaticIpConfigPtrOutput() VmwareStaticIpConfigPtrOutput
	ToVmwareStaticIpConfigPtrOutputWithContext(context.Context) VmwareStaticIpConfigPtrOutput
}

type vmwareStaticIpConfigPtrType VmwareStaticIpConfigArgs

func VmwareStaticIpConfigPtr(v *VmwareStaticIpConfigArgs) VmwareStaticIpConfigPtrInput {
	return (*vmwareStaticIpConfigPtrType)(v)
}

func (*vmwareStaticIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareStaticIpConfig)(nil)).Elem()
}

func (i *vmwareStaticIpConfigPtrType) ToVmwareStaticIpConfigPtrOutput() VmwareStaticIpConfigPtrOutput {
	return i.ToVmwareStaticIpConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareStaticIpConfigPtrType) ToVmwareStaticIpConfigPtrOutputWithContext(ctx context.Context) VmwareStaticIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareStaticIpConfigPtrOutput)
}

// Represents the network configuration required for the VMware user clusters with Static IP configurations.
type VmwareStaticIpConfigOutput struct{ *pulumi.OutputState }

func (VmwareStaticIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareStaticIpConfig)(nil)).Elem()
}

func (o VmwareStaticIpConfigOutput) ToVmwareStaticIpConfigOutput() VmwareStaticIpConfigOutput {
	return o
}

func (o VmwareStaticIpConfigOutput) ToVmwareStaticIpConfigOutputWithContext(ctx context.Context) VmwareStaticIpConfigOutput {
	return o
}

func (o VmwareStaticIpConfigOutput) ToVmwareStaticIpConfigPtrOutput() VmwareStaticIpConfigPtrOutput {
	return o.ToVmwareStaticIpConfigPtrOutputWithContext(context.Background())
}

func (o VmwareStaticIpConfigOutput) ToVmwareStaticIpConfigPtrOutputWithContext(ctx context.Context) VmwareStaticIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareStaticIpConfig) *VmwareStaticIpConfig {
		return &v
	}).(VmwareStaticIpConfigPtrOutput)
}

// Represents the configuration values for static IP allocation to nodes.
func (o VmwareStaticIpConfigOutput) IpBlocks() VmwareIpBlockArrayOutput {
	return o.ApplyT(func(v VmwareStaticIpConfig) []VmwareIpBlock { return v.IpBlocks }).(VmwareIpBlockArrayOutput)
}

type VmwareStaticIpConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareStaticIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareStaticIpConfig)(nil)).Elem()
}

func (o VmwareStaticIpConfigPtrOutput) ToVmwareStaticIpConfigPtrOutput() VmwareStaticIpConfigPtrOutput {
	return o
}

func (o VmwareStaticIpConfigPtrOutput) ToVmwareStaticIpConfigPtrOutputWithContext(ctx context.Context) VmwareStaticIpConfigPtrOutput {
	return o
}

func (o VmwareStaticIpConfigPtrOutput) Elem() VmwareStaticIpConfigOutput {
	return o.ApplyT(func(v *VmwareStaticIpConfig) VmwareStaticIpConfig {
		if v != nil {
			return *v
		}
		var ret VmwareStaticIpConfig
		return ret
	}).(VmwareStaticIpConfigOutput)
}

// Represents the configuration values for static IP allocation to nodes.
func (o VmwareStaticIpConfigPtrOutput) IpBlocks() VmwareIpBlockArrayOutput {
	return o.ApplyT(func(v *VmwareStaticIpConfig) []VmwareIpBlock {
		if v == nil {
			return nil
		}
		return v.IpBlocks
	}).(VmwareIpBlockArrayOutput)
}

// Represents the network configuration required for the VMware user clusters with Static IP configurations.
type VmwareStaticIpConfigResponse struct {
	// Represents the configuration values for static IP allocation to nodes.
	IpBlocks []VmwareIpBlockResponse `pulumi:"ipBlocks"`
}

// Represents the network configuration required for the VMware user clusters with Static IP configurations.
type VmwareStaticIpConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareStaticIpConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareStaticIpConfigResponse)(nil)).Elem()
}

func (o VmwareStaticIpConfigResponseOutput) ToVmwareStaticIpConfigResponseOutput() VmwareStaticIpConfigResponseOutput {
	return o
}

func (o VmwareStaticIpConfigResponseOutput) ToVmwareStaticIpConfigResponseOutputWithContext(ctx context.Context) VmwareStaticIpConfigResponseOutput {
	return o
}

// Represents the configuration values for static IP allocation to nodes.
func (o VmwareStaticIpConfigResponseOutput) IpBlocks() VmwareIpBlockResponseArrayOutput {
	return o.ApplyT(func(v VmwareStaticIpConfigResponse) []VmwareIpBlockResponse { return v.IpBlocks }).(VmwareIpBlockResponseArrayOutput)
}

// Specifies vSphere CSI components deployment config in the VMware user cluster.
type VmwareStorageConfig struct {
	// Whether or not to deploy vSphere CSI components in the VMware user cluster. Enabled by default.
	VsphereCsiDisabled *bool `pulumi:"vsphereCsiDisabled"`
}

// VmwareStorageConfigInput is an input type that accepts VmwareStorageConfigArgs and VmwareStorageConfigOutput values.
// You can construct a concrete instance of `VmwareStorageConfigInput` via:
//
//	VmwareStorageConfigArgs{...}
type VmwareStorageConfigInput interface {
	pulumi.Input

	ToVmwareStorageConfigOutput() VmwareStorageConfigOutput
	ToVmwareStorageConfigOutputWithContext(context.Context) VmwareStorageConfigOutput
}

// Specifies vSphere CSI components deployment config in the VMware user cluster.
type VmwareStorageConfigArgs struct {
	// Whether or not to deploy vSphere CSI components in the VMware user cluster. Enabled by default.
	VsphereCsiDisabled pulumi.BoolPtrInput `pulumi:"vsphereCsiDisabled"`
}

func (VmwareStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareStorageConfig)(nil)).Elem()
}

func (i VmwareStorageConfigArgs) ToVmwareStorageConfigOutput() VmwareStorageConfigOutput {
	return i.ToVmwareStorageConfigOutputWithContext(context.Background())
}

func (i VmwareStorageConfigArgs) ToVmwareStorageConfigOutputWithContext(ctx context.Context) VmwareStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareStorageConfigOutput)
}

func (i VmwareStorageConfigArgs) ToVmwareStorageConfigPtrOutput() VmwareStorageConfigPtrOutput {
	return i.ToVmwareStorageConfigPtrOutputWithContext(context.Background())
}

func (i VmwareStorageConfigArgs) ToVmwareStorageConfigPtrOutputWithContext(ctx context.Context) VmwareStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareStorageConfigOutput).ToVmwareStorageConfigPtrOutputWithContext(ctx)
}

// VmwareStorageConfigPtrInput is an input type that accepts VmwareStorageConfigArgs, VmwareStorageConfigPtr and VmwareStorageConfigPtrOutput values.
// You can construct a concrete instance of `VmwareStorageConfigPtrInput` via:
//
//	        VmwareStorageConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareStorageConfigPtrInput interface {
	pulumi.Input

	ToVmwareStorageConfigPtrOutput() VmwareStorageConfigPtrOutput
	ToVmwareStorageConfigPtrOutputWithContext(context.Context) VmwareStorageConfigPtrOutput
}

type vmwareStorageConfigPtrType VmwareStorageConfigArgs

func VmwareStorageConfigPtr(v *VmwareStorageConfigArgs) VmwareStorageConfigPtrInput {
	return (*vmwareStorageConfigPtrType)(v)
}

func (*vmwareStorageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareStorageConfig)(nil)).Elem()
}

func (i *vmwareStorageConfigPtrType) ToVmwareStorageConfigPtrOutput() VmwareStorageConfigPtrOutput {
	return i.ToVmwareStorageConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareStorageConfigPtrType) ToVmwareStorageConfigPtrOutputWithContext(ctx context.Context) VmwareStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareStorageConfigPtrOutput)
}

// Specifies vSphere CSI components deployment config in the VMware user cluster.
type VmwareStorageConfigOutput struct{ *pulumi.OutputState }

func (VmwareStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareStorageConfig)(nil)).Elem()
}

func (o VmwareStorageConfigOutput) ToVmwareStorageConfigOutput() VmwareStorageConfigOutput {
	return o
}

func (o VmwareStorageConfigOutput) ToVmwareStorageConfigOutputWithContext(ctx context.Context) VmwareStorageConfigOutput {
	return o
}

func (o VmwareStorageConfigOutput) ToVmwareStorageConfigPtrOutput() VmwareStorageConfigPtrOutput {
	return o.ToVmwareStorageConfigPtrOutputWithContext(context.Background())
}

func (o VmwareStorageConfigOutput) ToVmwareStorageConfigPtrOutputWithContext(ctx context.Context) VmwareStorageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareStorageConfig) *VmwareStorageConfig {
		return &v
	}).(VmwareStorageConfigPtrOutput)
}

// Whether or not to deploy vSphere CSI components in the VMware user cluster. Enabled by default.
func (o VmwareStorageConfigOutput) VsphereCsiDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VmwareStorageConfig) *bool { return v.VsphereCsiDisabled }).(pulumi.BoolPtrOutput)
}

type VmwareStorageConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareStorageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareStorageConfig)(nil)).Elem()
}

func (o VmwareStorageConfigPtrOutput) ToVmwareStorageConfigPtrOutput() VmwareStorageConfigPtrOutput {
	return o
}

func (o VmwareStorageConfigPtrOutput) ToVmwareStorageConfigPtrOutputWithContext(ctx context.Context) VmwareStorageConfigPtrOutput {
	return o
}

func (o VmwareStorageConfigPtrOutput) Elem() VmwareStorageConfigOutput {
	return o.ApplyT(func(v *VmwareStorageConfig) VmwareStorageConfig {
		if v != nil {
			return *v
		}
		var ret VmwareStorageConfig
		return ret
	}).(VmwareStorageConfigOutput)
}

// Whether or not to deploy vSphere CSI components in the VMware user cluster. Enabled by default.
func (o VmwareStorageConfigPtrOutput) VsphereCsiDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VmwareStorageConfig) *bool {
		if v == nil {
			return nil
		}
		return v.VsphereCsiDisabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies vSphere CSI components deployment config in the VMware user cluster.
type VmwareStorageConfigResponse struct {
	// Whether or not to deploy vSphere CSI components in the VMware user cluster. Enabled by default.
	VsphereCsiDisabled bool `pulumi:"vsphereCsiDisabled"`
}

// Specifies vSphere CSI components deployment config in the VMware user cluster.
type VmwareStorageConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareStorageConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareStorageConfigResponse)(nil)).Elem()
}

func (o VmwareStorageConfigResponseOutput) ToVmwareStorageConfigResponseOutput() VmwareStorageConfigResponseOutput {
	return o
}

func (o VmwareStorageConfigResponseOutput) ToVmwareStorageConfigResponseOutputWithContext(ctx context.Context) VmwareStorageConfigResponseOutput {
	return o
}

// Whether or not to deploy vSphere CSI components in the VMware user cluster. Enabled by default.
func (o VmwareStorageConfigResponseOutput) VsphereCsiDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VmwareStorageConfigResponse) bool { return v.VsphereCsiDisabled }).(pulumi.BoolOutput)
}

// Represents configuration for the VMware VCenter for the user cluster.
type VmwareVCenterConfigResponse struct {
	// The vCenter IP address.
	Address string `pulumi:"address"`
	// Contains the vCenter CA certificate public key for SSL verification.
	CaCertData string `pulumi:"caCertData"`
	// The name of the vCenter cluster for the user cluster.
	Cluster string `pulumi:"cluster"`
	// The name of the vCenter datacenter for the user cluster.
	Datacenter string `pulumi:"datacenter"`
	// The name of the vCenter datastore for the user cluster.
	Datastore string `pulumi:"datastore"`
	// The name of the vCenter folder for the user cluster.
	Folder string `pulumi:"folder"`
	// The name of the vCenter resource pool for the user cluster.
	ResourcePool string `pulumi:"resourcePool"`
}

// Represents configuration for the VMware VCenter for the user cluster.
type VmwareVCenterConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareVCenterConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVCenterConfigResponse)(nil)).Elem()
}

func (o VmwareVCenterConfigResponseOutput) ToVmwareVCenterConfigResponseOutput() VmwareVCenterConfigResponseOutput {
	return o
}

func (o VmwareVCenterConfigResponseOutput) ToVmwareVCenterConfigResponseOutputWithContext(ctx context.Context) VmwareVCenterConfigResponseOutput {
	return o
}

// The vCenter IP address.
func (o VmwareVCenterConfigResponseOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVCenterConfigResponse) string { return v.Address }).(pulumi.StringOutput)
}

// Contains the vCenter CA certificate public key for SSL verification.
func (o VmwareVCenterConfigResponseOutput) CaCertData() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVCenterConfigResponse) string { return v.CaCertData }).(pulumi.StringOutput)
}

// The name of the vCenter cluster for the user cluster.
func (o VmwareVCenterConfigResponseOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVCenterConfigResponse) string { return v.Cluster }).(pulumi.StringOutput)
}

// The name of the vCenter datacenter for the user cluster.
func (o VmwareVCenterConfigResponseOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVCenterConfigResponse) string { return v.Datacenter }).(pulumi.StringOutput)
}

// The name of the vCenter datastore for the user cluster.
func (o VmwareVCenterConfigResponseOutput) Datastore() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVCenterConfigResponse) string { return v.Datastore }).(pulumi.StringOutput)
}

// The name of the vCenter folder for the user cluster.
func (o VmwareVCenterConfigResponseOutput) Folder() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVCenterConfigResponse) string { return v.Folder }).(pulumi.StringOutput)
}

// The name of the vCenter resource pool for the user cluster.
func (o VmwareVCenterConfigResponseOutput) ResourcePool() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVCenterConfigResponse) string { return v.ResourcePool }).(pulumi.StringOutput)
}

// Specifies the VIP config for the VMware user cluster load balancer.
type VmwareVipConfig struct {
	// The VIP which you previously set aside for the Kubernetes API of this cluster.
	ControlPlaneVip *string `pulumi:"controlPlaneVip"`
	// The VIP which you previously set aside for ingress traffic into this cluster.
	IngressVip *string `pulumi:"ingressVip"`
}

// VmwareVipConfigInput is an input type that accepts VmwareVipConfigArgs and VmwareVipConfigOutput values.
// You can construct a concrete instance of `VmwareVipConfigInput` via:
//
//	VmwareVipConfigArgs{...}
type VmwareVipConfigInput interface {
	pulumi.Input

	ToVmwareVipConfigOutput() VmwareVipConfigOutput
	ToVmwareVipConfigOutputWithContext(context.Context) VmwareVipConfigOutput
}

// Specifies the VIP config for the VMware user cluster load balancer.
type VmwareVipConfigArgs struct {
	// The VIP which you previously set aside for the Kubernetes API of this cluster.
	ControlPlaneVip pulumi.StringPtrInput `pulumi:"controlPlaneVip"`
	// The VIP which you previously set aside for ingress traffic into this cluster.
	IngressVip pulumi.StringPtrInput `pulumi:"ingressVip"`
}

func (VmwareVipConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVipConfig)(nil)).Elem()
}

func (i VmwareVipConfigArgs) ToVmwareVipConfigOutput() VmwareVipConfigOutput {
	return i.ToVmwareVipConfigOutputWithContext(context.Background())
}

func (i VmwareVipConfigArgs) ToVmwareVipConfigOutputWithContext(ctx context.Context) VmwareVipConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareVipConfigOutput)
}

func (i VmwareVipConfigArgs) ToVmwareVipConfigPtrOutput() VmwareVipConfigPtrOutput {
	return i.ToVmwareVipConfigPtrOutputWithContext(context.Background())
}

func (i VmwareVipConfigArgs) ToVmwareVipConfigPtrOutputWithContext(ctx context.Context) VmwareVipConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareVipConfigOutput).ToVmwareVipConfigPtrOutputWithContext(ctx)
}

// VmwareVipConfigPtrInput is an input type that accepts VmwareVipConfigArgs, VmwareVipConfigPtr and VmwareVipConfigPtrOutput values.
// You can construct a concrete instance of `VmwareVipConfigPtrInput` via:
//
//	        VmwareVipConfigArgs{...}
//
//	or:
//
//	        nil
type VmwareVipConfigPtrInput interface {
	pulumi.Input

	ToVmwareVipConfigPtrOutput() VmwareVipConfigPtrOutput
	ToVmwareVipConfigPtrOutputWithContext(context.Context) VmwareVipConfigPtrOutput
}

type vmwareVipConfigPtrType VmwareVipConfigArgs

func VmwareVipConfigPtr(v *VmwareVipConfigArgs) VmwareVipConfigPtrInput {
	return (*vmwareVipConfigPtrType)(v)
}

func (*vmwareVipConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareVipConfig)(nil)).Elem()
}

func (i *vmwareVipConfigPtrType) ToVmwareVipConfigPtrOutput() VmwareVipConfigPtrOutput {
	return i.ToVmwareVipConfigPtrOutputWithContext(context.Background())
}

func (i *vmwareVipConfigPtrType) ToVmwareVipConfigPtrOutputWithContext(ctx context.Context) VmwareVipConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareVipConfigPtrOutput)
}

// Specifies the VIP config for the VMware user cluster load balancer.
type VmwareVipConfigOutput struct{ *pulumi.OutputState }

func (VmwareVipConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVipConfig)(nil)).Elem()
}

func (o VmwareVipConfigOutput) ToVmwareVipConfigOutput() VmwareVipConfigOutput {
	return o
}

func (o VmwareVipConfigOutput) ToVmwareVipConfigOutputWithContext(ctx context.Context) VmwareVipConfigOutput {
	return o
}

func (o VmwareVipConfigOutput) ToVmwareVipConfigPtrOutput() VmwareVipConfigPtrOutput {
	return o.ToVmwareVipConfigPtrOutputWithContext(context.Background())
}

func (o VmwareVipConfigOutput) ToVmwareVipConfigPtrOutputWithContext(ctx context.Context) VmwareVipConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmwareVipConfig) *VmwareVipConfig {
		return &v
	}).(VmwareVipConfigPtrOutput)
}

// The VIP which you previously set aside for the Kubernetes API of this cluster.
func (o VmwareVipConfigOutput) ControlPlaneVip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVipConfig) *string { return v.ControlPlaneVip }).(pulumi.StringPtrOutput)
}

// The VIP which you previously set aside for ingress traffic into this cluster.
func (o VmwareVipConfigOutput) IngressVip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmwareVipConfig) *string { return v.IngressVip }).(pulumi.StringPtrOutput)
}

type VmwareVipConfigPtrOutput struct{ *pulumi.OutputState }

func (VmwareVipConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareVipConfig)(nil)).Elem()
}

func (o VmwareVipConfigPtrOutput) ToVmwareVipConfigPtrOutput() VmwareVipConfigPtrOutput {
	return o
}

func (o VmwareVipConfigPtrOutput) ToVmwareVipConfigPtrOutputWithContext(ctx context.Context) VmwareVipConfigPtrOutput {
	return o
}

func (o VmwareVipConfigPtrOutput) Elem() VmwareVipConfigOutput {
	return o.ApplyT(func(v *VmwareVipConfig) VmwareVipConfig {
		if v != nil {
			return *v
		}
		var ret VmwareVipConfig
		return ret
	}).(VmwareVipConfigOutput)
}

// The VIP which you previously set aside for the Kubernetes API of this cluster.
func (o VmwareVipConfigPtrOutput) ControlPlaneVip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVipConfig) *string {
		if v == nil {
			return nil
		}
		return v.ControlPlaneVip
	}).(pulumi.StringPtrOutput)
}

// The VIP which you previously set aside for ingress traffic into this cluster.
func (o VmwareVipConfigPtrOutput) IngressVip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmwareVipConfig) *string {
		if v == nil {
			return nil
		}
		return v.IngressVip
	}).(pulumi.StringPtrOutput)
}

// Specifies the VIP config for the VMware user cluster load balancer.
type VmwareVipConfigResponse struct {
	// The VIP which you previously set aside for the Kubernetes API of this cluster.
	ControlPlaneVip string `pulumi:"controlPlaneVip"`
	// The VIP which you previously set aside for ingress traffic into this cluster.
	IngressVip string `pulumi:"ingressVip"`
}

// Specifies the VIP config for the VMware user cluster load balancer.
type VmwareVipConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareVipConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVipConfigResponse)(nil)).Elem()
}

func (o VmwareVipConfigResponseOutput) ToVmwareVipConfigResponseOutput() VmwareVipConfigResponseOutput {
	return o
}

func (o VmwareVipConfigResponseOutput) ToVmwareVipConfigResponseOutputWithContext(ctx context.Context) VmwareVipConfigResponseOutput {
	return o
}

// The VIP which you previously set aside for the Kubernetes API of this cluster.
func (o VmwareVipConfigResponseOutput) ControlPlaneVip() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVipConfigResponse) string { return v.ControlPlaneVip }).(pulumi.StringOutput)
}

// The VIP which you previously set aside for ingress traffic into this cluster.
func (o VmwareVipConfigResponseOutput) IngressVip() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVipConfigResponse) string { return v.IngressVip }).(pulumi.StringOutput)
}

// VmwareVsphereConfig represents configuration for the VMware VCenter for node pool.
type VmwareVsphereConfigResponse struct {
	// The name of the vCenter datastore. Inherited from the user cluster.
	Datastore string `pulumi:"datastore"`
	// Tags to apply to VMs.
	Tags []VmwareVsphereTagResponse `pulumi:"tags"`
}

// VmwareVsphereConfig represents configuration for the VMware VCenter for node pool.
type VmwareVsphereConfigResponseOutput struct{ *pulumi.OutputState }

func (VmwareVsphereConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVsphereConfigResponse)(nil)).Elem()
}

func (o VmwareVsphereConfigResponseOutput) ToVmwareVsphereConfigResponseOutput() VmwareVsphereConfigResponseOutput {
	return o
}

func (o VmwareVsphereConfigResponseOutput) ToVmwareVsphereConfigResponseOutputWithContext(ctx context.Context) VmwareVsphereConfigResponseOutput {
	return o
}

// The name of the vCenter datastore. Inherited from the user cluster.
func (o VmwareVsphereConfigResponseOutput) Datastore() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVsphereConfigResponse) string { return v.Datastore }).(pulumi.StringOutput)
}

// Tags to apply to VMs.
func (o VmwareVsphereConfigResponseOutput) Tags() VmwareVsphereTagResponseArrayOutput {
	return o.ApplyT(func(v VmwareVsphereConfigResponse) []VmwareVsphereTagResponse { return v.Tags }).(VmwareVsphereTagResponseArrayOutput)
}

// VmwareVsphereTag describes a vSphere tag to be placed on VMs in the node pool. For more information, see https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.vcenterhost.doc/GUID-E8E854DD-AA97-4E0C-8419-CE84F93C4058.html
type VmwareVsphereTagResponse struct {
	// The Vsphere tag category.
	Category string `pulumi:"category"`
	// The Vsphere tag name.
	Tag string `pulumi:"tag"`
}

// VmwareVsphereTag describes a vSphere tag to be placed on VMs in the node pool. For more information, see https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.vcenterhost.doc/GUID-E8E854DD-AA97-4E0C-8419-CE84F93C4058.html
type VmwareVsphereTagResponseOutput struct{ *pulumi.OutputState }

func (VmwareVsphereTagResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmwareVsphereTagResponse)(nil)).Elem()
}

func (o VmwareVsphereTagResponseOutput) ToVmwareVsphereTagResponseOutput() VmwareVsphereTagResponseOutput {
	return o
}

func (o VmwareVsphereTagResponseOutput) ToVmwareVsphereTagResponseOutputWithContext(ctx context.Context) VmwareVsphereTagResponseOutput {
	return o
}

// The Vsphere tag category.
func (o VmwareVsphereTagResponseOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVsphereTagResponse) string { return v.Category }).(pulumi.StringOutput)
}

// The Vsphere tag name.
func (o VmwareVsphereTagResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v VmwareVsphereTagResponse) string { return v.Tag }).(pulumi.StringOutput)
}

type VmwareVsphereTagResponseArrayOutput struct{ *pulumi.OutputState }

func (VmwareVsphereTagResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VmwareVsphereTagResponse)(nil)).Elem()
}

func (o VmwareVsphereTagResponseArrayOutput) ToVmwareVsphereTagResponseArrayOutput() VmwareVsphereTagResponseArrayOutput {
	return o
}

func (o VmwareVsphereTagResponseArrayOutput) ToVmwareVsphereTagResponseArrayOutputWithContext(ctx context.Context) VmwareVsphereTagResponseArrayOutput {
	return o
}

func (o VmwareVsphereTagResponseArrayOutput) Index(i pulumi.IntInput) VmwareVsphereTagResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VmwareVsphereTagResponse {
		return vs[0].([]VmwareVsphereTagResponse)[vs[1].(int)]
	}).(VmwareVsphereTagResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationInput)(nil)).Elem(), AuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPtrInput)(nil)).Elem(), AuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminApiServerArgumentInput)(nil)).Elem(), BareMetalAdminApiServerArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminApiServerArgumentArrayInput)(nil)).Elem(), BareMetalAdminApiServerArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminClusterOperationsConfigInput)(nil)).Elem(), BareMetalAdminClusterOperationsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminClusterOperationsConfigPtrInput)(nil)).Elem(), BareMetalAdminClusterOperationsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminControlPlaneConfigInput)(nil)).Elem(), BareMetalAdminControlPlaneConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminControlPlaneConfigPtrInput)(nil)).Elem(), BareMetalAdminControlPlaneConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminControlPlaneNodePoolConfigInput)(nil)).Elem(), BareMetalAdminControlPlaneNodePoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminControlPlaneNodePoolConfigPtrInput)(nil)).Elem(), BareMetalAdminControlPlaneNodePoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminIslandModeCidrConfigInput)(nil)).Elem(), BareMetalAdminIslandModeCidrConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminIslandModeCidrConfigPtrInput)(nil)).Elem(), BareMetalAdminIslandModeCidrConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminLoadBalancerConfigInput)(nil)).Elem(), BareMetalAdminLoadBalancerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminLoadBalancerConfigPtrInput)(nil)).Elem(), BareMetalAdminLoadBalancerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminMaintenanceConfigInput)(nil)).Elem(), BareMetalAdminMaintenanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminMaintenanceConfigPtrInput)(nil)).Elem(), BareMetalAdminMaintenanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminManualLbConfigInput)(nil)).Elem(), BareMetalAdminManualLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminManualLbConfigPtrInput)(nil)).Elem(), BareMetalAdminManualLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminNetworkConfigInput)(nil)).Elem(), BareMetalAdminNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminNetworkConfigPtrInput)(nil)).Elem(), BareMetalAdminNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminNodeAccessConfigInput)(nil)).Elem(), BareMetalAdminNodeAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminNodeAccessConfigPtrInput)(nil)).Elem(), BareMetalAdminNodeAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminOsEnvironmentConfigInput)(nil)).Elem(), BareMetalAdminOsEnvironmentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminOsEnvironmentConfigPtrInput)(nil)).Elem(), BareMetalAdminOsEnvironmentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminPortConfigInput)(nil)).Elem(), BareMetalAdminPortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminPortConfigPtrInput)(nil)).Elem(), BareMetalAdminPortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminProxyConfigInput)(nil)).Elem(), BareMetalAdminProxyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminProxyConfigPtrInput)(nil)).Elem(), BareMetalAdminProxyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminSecurityConfigInput)(nil)).Elem(), BareMetalAdminSecurityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminSecurityConfigPtrInput)(nil)).Elem(), BareMetalAdminSecurityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminStorageConfigInput)(nil)).Elem(), BareMetalAdminStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminStorageConfigPtrInput)(nil)).Elem(), BareMetalAdminStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminVipConfigInput)(nil)).Elem(), BareMetalAdminVipConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminVipConfigPtrInput)(nil)).Elem(), BareMetalAdminVipConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminWorkloadNodeConfigInput)(nil)).Elem(), BareMetalAdminWorkloadNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalAdminWorkloadNodeConfigPtrInput)(nil)).Elem(), BareMetalAdminWorkloadNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalApiServerArgumentInput)(nil)).Elem(), BareMetalApiServerArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalApiServerArgumentArrayInput)(nil)).Elem(), BareMetalApiServerArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalBgpLbConfigInput)(nil)).Elem(), BareMetalBgpLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalBgpLbConfigPtrInput)(nil)).Elem(), BareMetalBgpLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalBgpPeerConfigInput)(nil)).Elem(), BareMetalBgpPeerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalBgpPeerConfigArrayInput)(nil)).Elem(), BareMetalBgpPeerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalClusterOperationsConfigInput)(nil)).Elem(), BareMetalClusterOperationsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalClusterOperationsConfigPtrInput)(nil)).Elem(), BareMetalClusterOperationsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalControlPlaneConfigInput)(nil)).Elem(), BareMetalControlPlaneConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalControlPlaneNodePoolConfigInput)(nil)).Elem(), BareMetalControlPlaneNodePoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalIslandModeCidrConfigInput)(nil)).Elem(), BareMetalIslandModeCidrConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalIslandModeCidrConfigPtrInput)(nil)).Elem(), BareMetalIslandModeCidrConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalKubeletConfigInput)(nil)).Elem(), BareMetalKubeletConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalKubeletConfigPtrInput)(nil)).Elem(), BareMetalKubeletConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalLoadBalancerAddressPoolInput)(nil)).Elem(), BareMetalLoadBalancerAddressPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalLoadBalancerAddressPoolArrayInput)(nil)).Elem(), BareMetalLoadBalancerAddressPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalLoadBalancerConfigInput)(nil)).Elem(), BareMetalLoadBalancerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalLoadBalancerNodePoolConfigInput)(nil)).Elem(), BareMetalLoadBalancerNodePoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalLoadBalancerNodePoolConfigPtrInput)(nil)).Elem(), BareMetalLoadBalancerNodePoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalLvpConfigInput)(nil)).Elem(), BareMetalLvpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalLvpConfigPtrInput)(nil)).Elem(), BareMetalLvpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalLvpShareConfigInput)(nil)).Elem(), BareMetalLvpShareConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalLvpShareConfigPtrInput)(nil)).Elem(), BareMetalLvpShareConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalMaintenanceConfigInput)(nil)).Elem(), BareMetalMaintenanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalMaintenanceConfigPtrInput)(nil)).Elem(), BareMetalMaintenanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalManualLbConfigInput)(nil)).Elem(), BareMetalManualLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalManualLbConfigPtrInput)(nil)).Elem(), BareMetalManualLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalMetalLbConfigInput)(nil)).Elem(), BareMetalMetalLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalMetalLbConfigPtrInput)(nil)).Elem(), BareMetalMetalLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalMultipleNetworkInterfacesConfigInput)(nil)).Elem(), BareMetalMultipleNetworkInterfacesConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalMultipleNetworkInterfacesConfigPtrInput)(nil)).Elem(), BareMetalMultipleNetworkInterfacesConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalNetworkConfigInput)(nil)).Elem(), BareMetalNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalNodeAccessConfigInput)(nil)).Elem(), BareMetalNodeAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalNodeAccessConfigPtrInput)(nil)).Elem(), BareMetalNodeAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalNodeConfigInput)(nil)).Elem(), BareMetalNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalNodeConfigArrayInput)(nil)).Elem(), BareMetalNodeConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalNodePoolConfigInput)(nil)).Elem(), BareMetalNodePoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalNodePoolConfigPtrInput)(nil)).Elem(), BareMetalNodePoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalOsEnvironmentConfigInput)(nil)).Elem(), BareMetalOsEnvironmentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalOsEnvironmentConfigPtrInput)(nil)).Elem(), BareMetalOsEnvironmentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalPortConfigInput)(nil)).Elem(), BareMetalPortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalPortConfigPtrInput)(nil)).Elem(), BareMetalPortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalProxyConfigInput)(nil)).Elem(), BareMetalProxyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalProxyConfigPtrInput)(nil)).Elem(), BareMetalProxyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalSecurityConfigInput)(nil)).Elem(), BareMetalSecurityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalSecurityConfigPtrInput)(nil)).Elem(), BareMetalSecurityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalSrIovConfigInput)(nil)).Elem(), BareMetalSrIovConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalSrIovConfigPtrInput)(nil)).Elem(), BareMetalSrIovConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalStorageConfigInput)(nil)).Elem(), BareMetalStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalVipConfigInput)(nil)).Elem(), BareMetalVipConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalVipConfigPtrInput)(nil)).Elem(), BareMetalVipConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalWorkloadNodeConfigInput)(nil)).Elem(), BareMetalWorkloadNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BareMetalWorkloadNodeConfigPtrInput)(nil)).Elem(), BareMetalWorkloadNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUserInput)(nil)).Elem(), ClusterUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUserArrayInput)(nil)).Elem(), ClusterUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTaintInput)(nil)).Elem(), NodeTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTaintArrayInput)(nil)).Elem(), NodeTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAAGConfigInput)(nil)).Elem(), VmwareAAGConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAAGConfigPtrInput)(nil)).Elem(), VmwareAAGConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAddressPoolInput)(nil)).Elem(), VmwareAddressPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAddressPoolArrayInput)(nil)).Elem(), VmwareAddressPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAutoRepairConfigInput)(nil)).Elem(), VmwareAutoRepairConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAutoRepairConfigPtrInput)(nil)).Elem(), VmwareAutoRepairConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAutoResizeConfigInput)(nil)).Elem(), VmwareAutoResizeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAutoResizeConfigPtrInput)(nil)).Elem(), VmwareAutoResizeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareControlPlaneNodeConfigInput)(nil)).Elem(), VmwareControlPlaneNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareControlPlaneNodeConfigPtrInput)(nil)).Elem(), VmwareControlPlaneNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareControlPlaneV2ConfigInput)(nil)).Elem(), VmwareControlPlaneV2ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareControlPlaneV2ConfigPtrInput)(nil)).Elem(), VmwareControlPlaneV2ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareDataplaneV2ConfigInput)(nil)).Elem(), VmwareDataplaneV2ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareDataplaneV2ConfigPtrInput)(nil)).Elem(), VmwareDataplaneV2ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareDhcpIpConfigInput)(nil)).Elem(), VmwareDhcpIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareDhcpIpConfigPtrInput)(nil)).Elem(), VmwareDhcpIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareF5BigIpConfigInput)(nil)).Elem(), VmwareF5BigIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareF5BigIpConfigPtrInput)(nil)).Elem(), VmwareF5BigIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareHostConfigInput)(nil)).Elem(), VmwareHostConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareHostConfigPtrInput)(nil)).Elem(), VmwareHostConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareHostIpInput)(nil)).Elem(), VmwareHostIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareHostIpArrayInput)(nil)).Elem(), VmwareHostIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareIpBlockInput)(nil)).Elem(), VmwareIpBlockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareIpBlockPtrInput)(nil)).Elem(), VmwareIpBlockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareIpBlockArrayInput)(nil)).Elem(), VmwareIpBlockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareLoadBalancerConfigInput)(nil)).Elem(), VmwareLoadBalancerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareLoadBalancerConfigPtrInput)(nil)).Elem(), VmwareLoadBalancerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareManualLbConfigInput)(nil)).Elem(), VmwareManualLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareManualLbConfigPtrInput)(nil)).Elem(), VmwareManualLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareMetalLbConfigInput)(nil)).Elem(), VmwareMetalLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareMetalLbConfigPtrInput)(nil)).Elem(), VmwareMetalLbConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareNetworkConfigInput)(nil)).Elem(), VmwareNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareNetworkConfigPtrInput)(nil)).Elem(), VmwareNetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareNodeConfigInput)(nil)).Elem(), VmwareNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareNodePoolAutoscalingConfigInput)(nil)).Elem(), VmwareNodePoolAutoscalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareNodePoolAutoscalingConfigPtrInput)(nil)).Elem(), VmwareNodePoolAutoscalingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareStaticIpConfigInput)(nil)).Elem(), VmwareStaticIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareStaticIpConfigPtrInput)(nil)).Elem(), VmwareStaticIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareStorageConfigInput)(nil)).Elem(), VmwareStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareStorageConfigPtrInput)(nil)).Elem(), VmwareStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareVipConfigInput)(nil)).Elem(), VmwareVipConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareVipConfigPtrInput)(nil)).Elem(), VmwareVipConfigArgs{})
	pulumi.RegisterOutputType(AuthorizationOutput{})
	pulumi.RegisterOutputType(AuthorizationPtrOutput{})
	pulumi.RegisterOutputType(AuthorizationResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminApiServerArgumentOutput{})
	pulumi.RegisterOutputType(BareMetalAdminApiServerArgumentArrayOutput{})
	pulumi.RegisterOutputType(BareMetalAdminApiServerArgumentResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminApiServerArgumentResponseArrayOutput{})
	pulumi.RegisterOutputType(BareMetalAdminClusterOperationsConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminClusterOperationsConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminClusterOperationsConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminControlPlaneConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminControlPlaneConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminControlPlaneConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminControlPlaneNodePoolConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminControlPlaneNodePoolConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminControlPlaneNodePoolConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminDrainedMachineResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminDrainedMachineResponseArrayOutput{})
	pulumi.RegisterOutputType(BareMetalAdminDrainingMachineResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminDrainingMachineResponseArrayOutput{})
	pulumi.RegisterOutputType(BareMetalAdminIslandModeCidrConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminIslandModeCidrConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminIslandModeCidrConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminLoadBalancerConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminLoadBalancerConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminLoadBalancerConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminMachineDrainStatusResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminMaintenanceConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminMaintenanceConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminMaintenanceConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminMaintenanceStatusResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminManualLbConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminManualLbConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminManualLbConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminNetworkConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminNetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminNetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminNodeAccessConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminNodeAccessConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminNodeAccessConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminOsEnvironmentConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminOsEnvironmentConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminOsEnvironmentConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminPortConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminPortConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminPortConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminProxyConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminProxyConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminProxyConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminSecurityConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminSecurityConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminSecurityConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminStorageConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminStorageConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminStorageConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminVipConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminVipConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminVipConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalAdminWorkloadNodeConfigOutput{})
	pulumi.RegisterOutputType(BareMetalAdminWorkloadNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalAdminWorkloadNodeConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalApiServerArgumentOutput{})
	pulumi.RegisterOutputType(BareMetalApiServerArgumentArrayOutput{})
	pulumi.RegisterOutputType(BareMetalApiServerArgumentResponseOutput{})
	pulumi.RegisterOutputType(BareMetalApiServerArgumentResponseArrayOutput{})
	pulumi.RegisterOutputType(BareMetalBgpLbConfigOutput{})
	pulumi.RegisterOutputType(BareMetalBgpLbConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalBgpLbConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalBgpPeerConfigOutput{})
	pulumi.RegisterOutputType(BareMetalBgpPeerConfigArrayOutput{})
	pulumi.RegisterOutputType(BareMetalBgpPeerConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalBgpPeerConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BareMetalClusterOperationsConfigOutput{})
	pulumi.RegisterOutputType(BareMetalClusterOperationsConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalClusterOperationsConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalControlPlaneConfigOutput{})
	pulumi.RegisterOutputType(BareMetalControlPlaneConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalControlPlaneNodePoolConfigOutput{})
	pulumi.RegisterOutputType(BareMetalControlPlaneNodePoolConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalDrainedMachineResponseOutput{})
	pulumi.RegisterOutputType(BareMetalDrainedMachineResponseArrayOutput{})
	pulumi.RegisterOutputType(BareMetalDrainingMachineResponseOutput{})
	pulumi.RegisterOutputType(BareMetalDrainingMachineResponseArrayOutput{})
	pulumi.RegisterOutputType(BareMetalIslandModeCidrConfigOutput{})
	pulumi.RegisterOutputType(BareMetalIslandModeCidrConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalIslandModeCidrConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalKubeletConfigOutput{})
	pulumi.RegisterOutputType(BareMetalKubeletConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalKubeletConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalLoadBalancerAddressPoolOutput{})
	pulumi.RegisterOutputType(BareMetalLoadBalancerAddressPoolArrayOutput{})
	pulumi.RegisterOutputType(BareMetalLoadBalancerAddressPoolResponseOutput{})
	pulumi.RegisterOutputType(BareMetalLoadBalancerAddressPoolResponseArrayOutput{})
	pulumi.RegisterOutputType(BareMetalLoadBalancerConfigOutput{})
	pulumi.RegisterOutputType(BareMetalLoadBalancerConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalLoadBalancerNodePoolConfigOutput{})
	pulumi.RegisterOutputType(BareMetalLoadBalancerNodePoolConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalLoadBalancerNodePoolConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalLvpConfigOutput{})
	pulumi.RegisterOutputType(BareMetalLvpConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalLvpConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalLvpShareConfigOutput{})
	pulumi.RegisterOutputType(BareMetalLvpShareConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalLvpShareConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalMachineDrainStatusResponseOutput{})
	pulumi.RegisterOutputType(BareMetalMaintenanceConfigOutput{})
	pulumi.RegisterOutputType(BareMetalMaintenanceConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalMaintenanceConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalMaintenanceStatusResponseOutput{})
	pulumi.RegisterOutputType(BareMetalManualLbConfigOutput{})
	pulumi.RegisterOutputType(BareMetalManualLbConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalManualLbConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalMetalLbConfigOutput{})
	pulumi.RegisterOutputType(BareMetalMetalLbConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalMetalLbConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalMultipleNetworkInterfacesConfigOutput{})
	pulumi.RegisterOutputType(BareMetalMultipleNetworkInterfacesConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalMultipleNetworkInterfacesConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalNetworkConfigOutput{})
	pulumi.RegisterOutputType(BareMetalNetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalNodeAccessConfigOutput{})
	pulumi.RegisterOutputType(BareMetalNodeAccessConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalNodeAccessConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalNodeConfigOutput{})
	pulumi.RegisterOutputType(BareMetalNodeConfigArrayOutput{})
	pulumi.RegisterOutputType(BareMetalNodeConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalNodeConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BareMetalNodePoolConfigOutput{})
	pulumi.RegisterOutputType(BareMetalNodePoolConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalNodePoolConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalOsEnvironmentConfigOutput{})
	pulumi.RegisterOutputType(BareMetalOsEnvironmentConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalOsEnvironmentConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalPortConfigOutput{})
	pulumi.RegisterOutputType(BareMetalPortConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalPortConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalProxyConfigOutput{})
	pulumi.RegisterOutputType(BareMetalProxyConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalProxyConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalSecurityConfigOutput{})
	pulumi.RegisterOutputType(BareMetalSecurityConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalSecurityConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalSrIovConfigOutput{})
	pulumi.RegisterOutputType(BareMetalSrIovConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalSrIovConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalStorageConfigOutput{})
	pulumi.RegisterOutputType(BareMetalStorageConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalVipConfigOutput{})
	pulumi.RegisterOutputType(BareMetalVipConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalVipConfigResponseOutput{})
	pulumi.RegisterOutputType(BareMetalWorkloadNodeConfigOutput{})
	pulumi.RegisterOutputType(BareMetalWorkloadNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(BareMetalWorkloadNodeConfigResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterUserOutput{})
	pulumi.RegisterOutputType(ClusterUserArrayOutput{})
	pulumi.RegisterOutputType(ClusterUserResponseOutput{})
	pulumi.RegisterOutputType(ClusterUserResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FleetResponseOutput{})
	pulumi.RegisterOutputType(NodeTaintOutput{})
	pulumi.RegisterOutputType(NodeTaintArrayOutput{})
	pulumi.RegisterOutputType(NodeTaintResponseOutput{})
	pulumi.RegisterOutputType(NodeTaintResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceConditionResponseOutput{})
	pulumi.RegisterOutputType(ResourceConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceStatusResponseOutput{})
	pulumi.RegisterOutputType(ValidationCheckResponseOutput{})
	pulumi.RegisterOutputType(ValidationCheckResultResponseOutput{})
	pulumi.RegisterOutputType(ValidationCheckResultResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidationCheckStatusResponseOutput{})
	pulumi.RegisterOutputType(VmwareAAGConfigOutput{})
	pulumi.RegisterOutputType(VmwareAAGConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareAAGConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareAddressPoolOutput{})
	pulumi.RegisterOutputType(VmwareAddressPoolArrayOutput{})
	pulumi.RegisterOutputType(VmwareAddressPoolResponseOutput{})
	pulumi.RegisterOutputType(VmwareAddressPoolResponseArrayOutput{})
	pulumi.RegisterOutputType(VmwareAutoRepairConfigOutput{})
	pulumi.RegisterOutputType(VmwareAutoRepairConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareAutoRepairConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareAutoResizeConfigOutput{})
	pulumi.RegisterOutputType(VmwareAutoResizeConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareAutoResizeConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareControlPlaneNodeConfigOutput{})
	pulumi.RegisterOutputType(VmwareControlPlaneNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareControlPlaneNodeConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareControlPlaneV2ConfigOutput{})
	pulumi.RegisterOutputType(VmwareControlPlaneV2ConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareControlPlaneV2ConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareControlPlaneVsphereConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareDataplaneV2ConfigOutput{})
	pulumi.RegisterOutputType(VmwareDataplaneV2ConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareDataplaneV2ConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareDhcpIpConfigOutput{})
	pulumi.RegisterOutputType(VmwareDhcpIpConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareDhcpIpConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareF5BigIpConfigOutput{})
	pulumi.RegisterOutputType(VmwareF5BigIpConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareF5BigIpConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareHostConfigOutput{})
	pulumi.RegisterOutputType(VmwareHostConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareHostConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareHostIpOutput{})
	pulumi.RegisterOutputType(VmwareHostIpArrayOutput{})
	pulumi.RegisterOutputType(VmwareHostIpResponseOutput{})
	pulumi.RegisterOutputType(VmwareHostIpResponseArrayOutput{})
	pulumi.RegisterOutputType(VmwareIpBlockOutput{})
	pulumi.RegisterOutputType(VmwareIpBlockPtrOutput{})
	pulumi.RegisterOutputType(VmwareIpBlockArrayOutput{})
	pulumi.RegisterOutputType(VmwareIpBlockResponseOutput{})
	pulumi.RegisterOutputType(VmwareIpBlockResponseArrayOutput{})
	pulumi.RegisterOutputType(VmwareLoadBalancerConfigOutput{})
	pulumi.RegisterOutputType(VmwareLoadBalancerConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareLoadBalancerConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareManualLbConfigOutput{})
	pulumi.RegisterOutputType(VmwareManualLbConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareManualLbConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareMetalLbConfigOutput{})
	pulumi.RegisterOutputType(VmwareMetalLbConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareMetalLbConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareNetworkConfigOutput{})
	pulumi.RegisterOutputType(VmwareNetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareNetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareNodeConfigOutput{})
	pulumi.RegisterOutputType(VmwareNodeConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareNodePoolAutoscalingConfigOutput{})
	pulumi.RegisterOutputType(VmwareNodePoolAutoscalingConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareNodePoolAutoscalingConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareStaticIpConfigOutput{})
	pulumi.RegisterOutputType(VmwareStaticIpConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareStaticIpConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareStorageConfigOutput{})
	pulumi.RegisterOutputType(VmwareStorageConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareStorageConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareVCenterConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareVipConfigOutput{})
	pulumi.RegisterOutputType(VmwareVipConfigPtrOutput{})
	pulumi.RegisterOutputType(VmwareVipConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareVsphereConfigResponseOutput{})
	pulumi.RegisterOutputType(VmwareVsphereTagResponseOutput{})
	pulumi.RegisterOutputType(VmwareVsphereTagResponseArrayOutput{})
}
