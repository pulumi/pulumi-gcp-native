// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type VmwareAdminClusterIamPolicy struct {
	pulumi.CustomResourceState

	// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
	Bindings BindingResponseArrayOutput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag     pulumi.StringOutput `pulumi:"etag"`
	Location pulumi.StringOutput `pulumi:"location"`
	Project  pulumi.StringOutput `pulumi:"project"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version              pulumi.IntOutput    `pulumi:"version"`
	VmwareAdminClusterId pulumi.StringOutput `pulumi:"vmwareAdminClusterId"`
}

// NewVmwareAdminClusterIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewVmwareAdminClusterIamPolicy(ctx *pulumi.Context,
	name string, args *VmwareAdminClusterIamPolicyArgs, opts ...pulumi.ResourceOption) (*VmwareAdminClusterIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VmwareAdminClusterId == nil {
		return nil, errors.New("invalid value for required argument 'VmwareAdminClusterId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"vmwareAdminClusterId",
	})
	opts = append(opts, replaceOnChanges)
	var resource VmwareAdminClusterIamPolicy
	err := ctx.RegisterResource("google-native:gkeonprem/v1:VmwareAdminClusterIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmwareAdminClusterIamPolicy gets an existing VmwareAdminClusterIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmwareAdminClusterIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmwareAdminClusterIamPolicyState, opts ...pulumi.ResourceOption) (*VmwareAdminClusterIamPolicy, error) {
	var resource VmwareAdminClusterIamPolicy
	err := ctx.ReadResource("google-native:gkeonprem/v1:VmwareAdminClusterIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmwareAdminClusterIamPolicy resources.
type vmwareAdminClusterIamPolicyState struct {
}

type VmwareAdminClusterIamPolicyState struct {
}

func (VmwareAdminClusterIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareAdminClusterIamPolicyState)(nil)).Elem()
}

type vmwareAdminClusterIamPolicyArgs struct {
	// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag     *string `pulumi:"etag"`
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version              *int   `pulumi:"version"`
	VmwareAdminClusterId string `pulumi:"vmwareAdminClusterId"`
}

// The set of arguments for constructing a VmwareAdminClusterIamPolicy resource.
type VmwareAdminClusterIamPolicyArgs struct {
	// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
	Bindings BindingArrayInput
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag     pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version              pulumi.IntPtrInput
	VmwareAdminClusterId pulumi.StringInput
}

func (VmwareAdminClusterIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareAdminClusterIamPolicyArgs)(nil)).Elem()
}

type VmwareAdminClusterIamPolicyInput interface {
	pulumi.Input

	ToVmwareAdminClusterIamPolicyOutput() VmwareAdminClusterIamPolicyOutput
	ToVmwareAdminClusterIamPolicyOutputWithContext(ctx context.Context) VmwareAdminClusterIamPolicyOutput
}

func (*VmwareAdminClusterIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAdminClusterIamPolicy)(nil)).Elem()
}

func (i *VmwareAdminClusterIamPolicy) ToVmwareAdminClusterIamPolicyOutput() VmwareAdminClusterIamPolicyOutput {
	return i.ToVmwareAdminClusterIamPolicyOutputWithContext(context.Background())
}

func (i *VmwareAdminClusterIamPolicy) ToVmwareAdminClusterIamPolicyOutputWithContext(ctx context.Context) VmwareAdminClusterIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareAdminClusterIamPolicyOutput)
}

type VmwareAdminClusterIamPolicyOutput struct{ *pulumi.OutputState }

func (VmwareAdminClusterIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareAdminClusterIamPolicy)(nil)).Elem()
}

func (o VmwareAdminClusterIamPolicyOutput) ToVmwareAdminClusterIamPolicyOutput() VmwareAdminClusterIamPolicyOutput {
	return o
}

func (o VmwareAdminClusterIamPolicyOutput) ToVmwareAdminClusterIamPolicyOutputWithContext(ctx context.Context) VmwareAdminClusterIamPolicyOutput {
	return o
}

// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
func (o VmwareAdminClusterIamPolicyOutput) Bindings() BindingResponseArrayOutput {
	return o.ApplyT(func(v *VmwareAdminClusterIamPolicy) BindingResponseArrayOutput { return v.Bindings }).(BindingResponseArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o VmwareAdminClusterIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminClusterIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o VmwareAdminClusterIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminClusterIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o VmwareAdminClusterIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminClusterIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o VmwareAdminClusterIamPolicyOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *VmwareAdminClusterIamPolicy) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

func (o VmwareAdminClusterIamPolicyOutput) VmwareAdminClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareAdminClusterIamPolicy) pulumi.StringOutput { return v.VmwareAdminClusterId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareAdminClusterIamPolicyInput)(nil)).Elem(), &VmwareAdminClusterIamPolicy{})
	pulumi.RegisterOutputType(VmwareAdminClusterIamPolicyOutput{})
}
