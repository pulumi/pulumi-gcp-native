// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single VMware node pool.
func LookupVmwareNodePool(ctx *pulumi.Context, args *LookupVmwareNodePoolArgs, opts ...pulumi.InvokeOption) (*LookupVmwareNodePoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVmwareNodePoolResult
	err := ctx.Invoke("google-native:gkeonprem/v1:getVmwareNodePool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVmwareNodePoolArgs struct {
	Location         string  `pulumi:"location"`
	Project          *string `pulumi:"project"`
	View             *string `pulumi:"view"`
	VmwareClusterId  string  `pulumi:"vmwareClusterId"`
	VmwareNodePoolId string  `pulumi:"vmwareNodePoolId"`
}

type LookupVmwareNodePoolResult struct {
	// Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations map[string]string `pulumi:"annotations"`
	// The node configuration of the node pool.
	Config VmwareNodeConfigResponse `pulumi:"config"`
	// The time at which this node pool was created.
	CreateTime string `pulumi:"createTime"`
	// The time at which this node pool was deleted. If the resource is not deleted, this must be empty
	DeleteTime string `pulumi:"deleteTime"`
	// The display name for the node pool.
	DisplayName string `pulumi:"displayName"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
	Etag string `pulumi:"etag"`
	// Immutable. The resource name of this node pool.
	Name string `pulumi:"name"`
	// Node pool autoscaling config for the node pool.
	NodePoolAutoscaling VmwareNodePoolAutoscalingConfigResponse `pulumi:"nodePoolAutoscaling"`
	// Anthos version for the node pool. Defaults to the user cluster version.
	OnPremVersion string `pulumi:"onPremVersion"`
	// If set, there are currently changes in flight to the node pool.
	Reconciling bool `pulumi:"reconciling"`
	// The current state of the node pool.
	State string `pulumi:"state"`
	// ResourceStatus representing the detailed VMware node pool state.
	Status ResourceStatusResponse `pulumi:"status"`
	// The unique identifier of the node pool.
	Uid string `pulumi:"uid"`
	// The time at which this node pool was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupVmwareNodePoolOutput(ctx *pulumi.Context, args LookupVmwareNodePoolOutputArgs, opts ...pulumi.InvokeOption) LookupVmwareNodePoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVmwareNodePoolResult, error) {
			args := v.(LookupVmwareNodePoolArgs)
			r, err := LookupVmwareNodePool(ctx, &args, opts...)
			var s LookupVmwareNodePoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVmwareNodePoolResultOutput)
}

type LookupVmwareNodePoolOutputArgs struct {
	Location         pulumi.StringInput    `pulumi:"location"`
	Project          pulumi.StringPtrInput `pulumi:"project"`
	View             pulumi.StringPtrInput `pulumi:"view"`
	VmwareClusterId  pulumi.StringInput    `pulumi:"vmwareClusterId"`
	VmwareNodePoolId pulumi.StringInput    `pulumi:"vmwareNodePoolId"`
}

func (LookupVmwareNodePoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVmwareNodePoolArgs)(nil)).Elem()
}

type LookupVmwareNodePoolResultOutput struct{ *pulumi.OutputState }

func (LookupVmwareNodePoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVmwareNodePoolResult)(nil)).Elem()
}

func (o LookupVmwareNodePoolResultOutput) ToLookupVmwareNodePoolResultOutput() LookupVmwareNodePoolResultOutput {
	return o
}

func (o LookupVmwareNodePoolResultOutput) ToLookupVmwareNodePoolResultOutputWithContext(ctx context.Context) LookupVmwareNodePoolResultOutput {
	return o
}

// Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
func (o LookupVmwareNodePoolResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The node configuration of the node pool.
func (o LookupVmwareNodePoolResultOutput) Config() VmwareNodeConfigResponseOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) VmwareNodeConfigResponse { return v.Config }).(VmwareNodeConfigResponseOutput)
}

// The time at which this node pool was created.
func (o LookupVmwareNodePoolResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The time at which this node pool was deleted. If the resource is not deleted, this must be empty
func (o LookupVmwareNodePoolResultOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) string { return v.DeleteTime }).(pulumi.StringOutput)
}

// The display name for the node pool.
func (o LookupVmwareNodePoolResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
func (o LookupVmwareNodePoolResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Immutable. The resource name of this node pool.
func (o LookupVmwareNodePoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// Node pool autoscaling config for the node pool.
func (o LookupVmwareNodePoolResultOutput) NodePoolAutoscaling() VmwareNodePoolAutoscalingConfigResponseOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) VmwareNodePoolAutoscalingConfigResponse {
		return v.NodePoolAutoscaling
	}).(VmwareNodePoolAutoscalingConfigResponseOutput)
}

// Anthos version for the node pool. Defaults to the user cluster version.
func (o LookupVmwareNodePoolResultOutput) OnPremVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) string { return v.OnPremVersion }).(pulumi.StringOutput)
}

// If set, there are currently changes in flight to the node pool.
func (o LookupVmwareNodePoolResultOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) bool { return v.Reconciling }).(pulumi.BoolOutput)
}

// The current state of the node pool.
func (o LookupVmwareNodePoolResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) string { return v.State }).(pulumi.StringOutput)
}

// ResourceStatus representing the detailed VMware node pool state.
func (o LookupVmwareNodePoolResultOutput) Status() ResourceStatusResponseOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) ResourceStatusResponse { return v.Status }).(ResourceStatusResponseOutput)
}

// The unique identifier of the node pool.
func (o LookupVmwareNodePoolResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The time at which this node pool was last updated.
func (o LookupVmwareNodePoolResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareNodePoolResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVmwareNodePoolResultOutput{})
}
