// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single VMware Cluster.
func LookupVmwareCluster(ctx *pulumi.Context, args *LookupVmwareClusterArgs, opts ...pulumi.InvokeOption) (*LookupVmwareClusterResult, error) {
	var rv LookupVmwareClusterResult
	err := ctx.Invoke("google-native:gkeonprem/v1:getVmwareCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVmwareClusterArgs struct {
	Location        string  `pulumi:"location"`
	Project         *string `pulumi:"project"`
	View            *string `pulumi:"view"`
	VmwareClusterId string  `pulumi:"vmwareClusterId"`
}

type LookupVmwareClusterResult struct {
	// The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
	AdminClusterMembership string `pulumi:"adminClusterMembership"`
	// The resource name of the VMware admin cluster hosting this user cluster.
	AdminClusterName string `pulumi:"adminClusterName"`
	// Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	Annotations map[string]string `pulumi:"annotations"`
	// AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
	AntiAffinityGroups VmwareAAGConfigResponse `pulumi:"antiAffinityGroups"`
	// RBAC policy that will be applied and managed by the Anthos On-Prem API.
	Authorization AuthorizationResponse `pulumi:"authorization"`
	// Configuration for auto repairing.
	AutoRepairConfig VmwareAutoRepairConfigResponse `pulumi:"autoRepairConfig"`
	// VMware user cluster control plane nodes must have either 1 or 3 replicas.
	ControlPlaneNode VmwareControlPlaneNodeConfigResponse `pulumi:"controlPlaneNode"`
	// The time at which VMware user cluster was created.
	CreateTime string `pulumi:"createTime"`
	// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
	DataplaneV2 VmwareDataplaneV2ConfigResponse `pulumi:"dataplaneV2"`
	// The time at which VMware user cluster was deleted.
	DeleteTime string `pulumi:"deleteTime"`
	// A human readable description of this VMware user cluster.
	Description string `pulumi:"description"`
	// Enable control plane V2. Default to false.
	EnableControlPlaneV2 bool `pulumi:"enableControlPlaneV2"`
	// The DNS name of VMware user cluster's API server.
	Endpoint string `pulumi:"endpoint"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
	Etag string `pulumi:"etag"`
	// Fleet configuration for the cluster.
	Fleet FleetResponse `pulumi:"fleet"`
	// Load balancer configuration.
	LoadBalancer VmwareLoadBalancerConfigResponse `pulumi:"loadBalancer"`
	// The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
	LocalName string `pulumi:"localName"`
	// Immutable. The VMware user cluster resource name.
	Name string `pulumi:"name"`
	// The VMware user cluster network configuration.
	NetworkConfig VmwareNetworkConfigResponse `pulumi:"networkConfig"`
	// The Anthos clusters on the VMware version for your user cluster. Defaults to the admin cluster version.
	OnPremVersion string `pulumi:"onPremVersion"`
	// If set, there are currently changes in flight to the VMware user cluster.
	Reconciling bool `pulumi:"reconciling"`
	// The current state of VMware user cluster.
	State string `pulumi:"state"`
	// ResourceStatus representing detailed cluster state.
	Status ResourceStatusResponse `pulumi:"status"`
	// Storage configuration.
	Storage VmwareStorageConfigResponse `pulumi:"storage"`
	// The unique identifier of the VMware user cluster.
	Uid string `pulumi:"uid"`
	// The time at which VMware user cluster was last updated.
	UpdateTime string `pulumi:"updateTime"`
	// ValidationCheck represents the result of the preflight check job.
	ValidationCheck ValidationCheckResponse `pulumi:"validationCheck"`
	// VmwareVCenterConfig specifies vCenter config for the user cluster. Inherited from the admin cluster.
	Vcenter VmwareVCenterConfigResponse `pulumi:"vcenter"`
	// Enable VM tracking.
	VmTrackingEnabled bool `pulumi:"vmTrackingEnabled"`
}

func LookupVmwareClusterOutput(ctx *pulumi.Context, args LookupVmwareClusterOutputArgs, opts ...pulumi.InvokeOption) LookupVmwareClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVmwareClusterResult, error) {
			args := v.(LookupVmwareClusterArgs)
			r, err := LookupVmwareCluster(ctx, &args, opts...)
			var s LookupVmwareClusterResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVmwareClusterResultOutput)
}

type LookupVmwareClusterOutputArgs struct {
	Location        pulumi.StringInput    `pulumi:"location"`
	Project         pulumi.StringPtrInput `pulumi:"project"`
	View            pulumi.StringPtrInput `pulumi:"view"`
	VmwareClusterId pulumi.StringInput    `pulumi:"vmwareClusterId"`
}

func (LookupVmwareClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVmwareClusterArgs)(nil)).Elem()
}

type LookupVmwareClusterResultOutput struct{ *pulumi.OutputState }

func (LookupVmwareClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVmwareClusterResult)(nil)).Elem()
}

func (o LookupVmwareClusterResultOutput) ToLookupVmwareClusterResultOutput() LookupVmwareClusterResultOutput {
	return o
}

func (o LookupVmwareClusterResultOutput) ToLookupVmwareClusterResultOutputWithContext(ctx context.Context) LookupVmwareClusterResultOutput {
	return o
}

// The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.
func (o LookupVmwareClusterResultOutput) AdminClusterMembership() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.AdminClusterMembership }).(pulumi.StringOutput)
}

// The resource name of the VMware admin cluster hosting this user cluster.
func (o LookupVmwareClusterResultOutput) AdminClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.AdminClusterName }).(pulumi.StringOutput)
}

// Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
func (o LookupVmwareClusterResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// AAGConfig specifies whether to spread VMware user cluster nodes across at least three physical hosts in the datacenter.
func (o LookupVmwareClusterResultOutput) AntiAffinityGroups() VmwareAAGConfigResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) VmwareAAGConfigResponse { return v.AntiAffinityGroups }).(VmwareAAGConfigResponseOutput)
}

// RBAC policy that will be applied and managed by the Anthos On-Prem API.
func (o LookupVmwareClusterResultOutput) Authorization() AuthorizationResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) AuthorizationResponse { return v.Authorization }).(AuthorizationResponseOutput)
}

// Configuration for auto repairing.
func (o LookupVmwareClusterResultOutput) AutoRepairConfig() VmwareAutoRepairConfigResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) VmwareAutoRepairConfigResponse { return v.AutoRepairConfig }).(VmwareAutoRepairConfigResponseOutput)
}

// VMware user cluster control plane nodes must have either 1 or 3 replicas.
func (o LookupVmwareClusterResultOutput) ControlPlaneNode() VmwareControlPlaneNodeConfigResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) VmwareControlPlaneNodeConfigResponse { return v.ControlPlaneNode }).(VmwareControlPlaneNodeConfigResponseOutput)
}

// The time at which VMware user cluster was created.
func (o LookupVmwareClusterResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// VmwareDataplaneV2Config specifies configuration for Dataplane V2.
func (o LookupVmwareClusterResultOutput) DataplaneV2() VmwareDataplaneV2ConfigResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) VmwareDataplaneV2ConfigResponse { return v.DataplaneV2 }).(VmwareDataplaneV2ConfigResponseOutput)
}

// The time at which VMware user cluster was deleted.
func (o LookupVmwareClusterResultOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.DeleteTime }).(pulumi.StringOutput)
}

// A human readable description of this VMware user cluster.
func (o LookupVmwareClusterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.Description }).(pulumi.StringOutput)
}

// Enable control plane V2. Default to false.
func (o LookupVmwareClusterResultOutput) EnableControlPlaneV2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) bool { return v.EnableControlPlaneV2 }).(pulumi.BoolOutput)
}

// The DNS name of VMware user cluster's API server.
func (o LookupVmwareClusterResultOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.Endpoint }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
func (o LookupVmwareClusterResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Fleet configuration for the cluster.
func (o LookupVmwareClusterResultOutput) Fleet() FleetResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) FleetResponse { return v.Fleet }).(FleetResponseOutput)
}

// Load balancer configuration.
func (o LookupVmwareClusterResultOutput) LoadBalancer() VmwareLoadBalancerConfigResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) VmwareLoadBalancerConfigResponse { return v.LoadBalancer }).(VmwareLoadBalancerConfigResponseOutput)
}

// The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.
func (o LookupVmwareClusterResultOutput) LocalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.LocalName }).(pulumi.StringOutput)
}

// Immutable. The VMware user cluster resource name.
func (o LookupVmwareClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// The VMware user cluster network configuration.
func (o LookupVmwareClusterResultOutput) NetworkConfig() VmwareNetworkConfigResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) VmwareNetworkConfigResponse { return v.NetworkConfig }).(VmwareNetworkConfigResponseOutput)
}

// The Anthos clusters on the VMware version for your user cluster. Defaults to the admin cluster version.
func (o LookupVmwareClusterResultOutput) OnPremVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.OnPremVersion }).(pulumi.StringOutput)
}

// If set, there are currently changes in flight to the VMware user cluster.
func (o LookupVmwareClusterResultOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) bool { return v.Reconciling }).(pulumi.BoolOutput)
}

// The current state of VMware user cluster.
func (o LookupVmwareClusterResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.State }).(pulumi.StringOutput)
}

// ResourceStatus representing detailed cluster state.
func (o LookupVmwareClusterResultOutput) Status() ResourceStatusResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) ResourceStatusResponse { return v.Status }).(ResourceStatusResponseOutput)
}

// Storage configuration.
func (o LookupVmwareClusterResultOutput) Storage() VmwareStorageConfigResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) VmwareStorageConfigResponse { return v.Storage }).(VmwareStorageConfigResponseOutput)
}

// The unique identifier of the VMware user cluster.
func (o LookupVmwareClusterResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The time at which VMware user cluster was last updated.
func (o LookupVmwareClusterResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// ValidationCheck represents the result of the preflight check job.
func (o LookupVmwareClusterResultOutput) ValidationCheck() ValidationCheckResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) ValidationCheckResponse { return v.ValidationCheck }).(ValidationCheckResponseOutput)
}

// VmwareVCenterConfig specifies vCenter config for the user cluster. Inherited from the admin cluster.
func (o LookupVmwareClusterResultOutput) Vcenter() VmwareVCenterConfigResponseOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) VmwareVCenterConfigResponse { return v.Vcenter }).(VmwareVCenterConfigResponseOutput)
}

// Enable VM tracking.
func (o LookupVmwareClusterResultOutput) VmTrackingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVmwareClusterResult) bool { return v.VmTrackingEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVmwareClusterResultOutput{})
}
