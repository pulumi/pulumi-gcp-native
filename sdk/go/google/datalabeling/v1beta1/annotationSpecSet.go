// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an annotation spec set by providing a set of labels.
type AnnotationSpecSet struct {
	pulumi.CustomResourceState
}

// NewAnnotationSpecSet registers a new resource with the given unique name, arguments, and options.
func NewAnnotationSpecSet(ctx *pulumi.Context,
	name string, args *AnnotationSpecSetArgs, opts ...pulumi.ResourceOption) (*AnnotationSpecSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnnotationSpecSetsId == nil {
		return nil, errors.New("invalid value for required argument 'AnnotationSpecSetsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource AnnotationSpecSet
	err := ctx.RegisterResource("google-cloud:datalabeling/v1beta1:AnnotationSpecSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnnotationSpecSet gets an existing AnnotationSpecSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnnotationSpecSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnnotationSpecSetState, opts ...pulumi.ResourceOption) (*AnnotationSpecSet, error) {
	var resource AnnotationSpecSet
	err := ctx.ReadResource("google-cloud:datalabeling/v1beta1:AnnotationSpecSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnnotationSpecSet resources.
type annotationSpecSetState struct {
}

type AnnotationSpecSetState struct {
}

func (AnnotationSpecSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationSpecSetState)(nil)).Elem()
}

type annotationSpecSetArgs struct {
	// Required. Annotation spec set to create. Annotation specs must be included. Only one annotation spec will be accepted for annotation specs with same display_name.
	AnnotationSpecSet    *GoogleCloudDatalabelingV1beta1AnnotationSpecSet `pulumi:"annotationSpecSet"`
	AnnotationSpecSetsId string                                           `pulumi:"annotationSpecSetsId"`
	ProjectsId           string                                           `pulumi:"projectsId"`
}

// The set of arguments for constructing a AnnotationSpecSet resource.
type AnnotationSpecSetArgs struct {
	// Required. Annotation spec set to create. Annotation specs must be included. Only one annotation spec will be accepted for annotation specs with same display_name.
	AnnotationSpecSet    GoogleCloudDatalabelingV1beta1AnnotationSpecSetPtrInput
	AnnotationSpecSetsId pulumi.StringInput
	ProjectsId           pulumi.StringInput
}

func (AnnotationSpecSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationSpecSetArgs)(nil)).Elem()
}

type AnnotationSpecSetInput interface {
	pulumi.Input

	ToAnnotationSpecSetOutput() AnnotationSpecSetOutput
	ToAnnotationSpecSetOutputWithContext(ctx context.Context) AnnotationSpecSetOutput
}

func (*AnnotationSpecSet) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationSpecSet)(nil))
}

func (i *AnnotationSpecSet) ToAnnotationSpecSetOutput() AnnotationSpecSetOutput {
	return i.ToAnnotationSpecSetOutputWithContext(context.Background())
}

func (i *AnnotationSpecSet) ToAnnotationSpecSetOutputWithContext(ctx context.Context) AnnotationSpecSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationSpecSetOutput)
}

type AnnotationSpecSetOutput struct {
	*pulumi.OutputState
}

func (AnnotationSpecSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationSpecSet)(nil))
}

func (o AnnotationSpecSetOutput) ToAnnotationSpecSetOutput() AnnotationSpecSetOutput {
	return o
}

func (o AnnotationSpecSetOutput) ToAnnotationSpecSetOutputWithContext(ctx context.Context) AnnotationSpecSetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AnnotationSpecSetOutput{})
}
