// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a FeedbackMessage object.
type FeedbackMessage struct {
	pulumi.CustomResourceState

	// String content of the feedback. Maximum of 10000 characters.
	Body pulumi.StringOutput `pulumi:"body"`
	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The image storing this feedback if the feedback is an image representing operator's comments.
	Image pulumi.StringOutput `pulumi:"image"`
	// Name of the feedback message in a feedback thread. Format: 'project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}'
	Name                      pulumi.StringOutput                                                   `pulumi:"name"`
	OperatorFeedbackMetadata  GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataResponseOutput  `pulumi:"operatorFeedbackMetadata"`
	RequesterFeedbackMetadata GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataResponseOutput `pulumi:"requesterFeedbackMetadata"`
}

// NewFeedbackMessage registers a new resource with the given unique name, arguments, and options.
func NewFeedbackMessage(ctx *pulumi.Context,
	name string, args *FeedbackMessageArgs, opts ...pulumi.ResourceOption) (*FeedbackMessage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnnotatedDatasetId == nil {
		return nil, errors.New("invalid value for required argument 'AnnotatedDatasetId'")
	}
	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.FeedbackThreadId == nil {
		return nil, errors.New("invalid value for required argument 'FeedbackThreadId'")
	}
	var resource FeedbackMessage
	err := ctx.RegisterResource("google-native:datalabeling/v1beta1:FeedbackMessage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeedbackMessage gets an existing FeedbackMessage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeedbackMessage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeedbackMessageState, opts ...pulumi.ResourceOption) (*FeedbackMessage, error) {
	var resource FeedbackMessage
	err := ctx.ReadResource("google-native:datalabeling/v1beta1:FeedbackMessage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeedbackMessage resources.
type feedbackMessageState struct {
}

type FeedbackMessageState struct {
}

func (FeedbackMessageState) ElementType() reflect.Type {
	return reflect.TypeOf((*feedbackMessageState)(nil)).Elem()
}

type feedbackMessageArgs struct {
	AnnotatedDatasetId string `pulumi:"annotatedDatasetId"`
	// String content of the feedback. Maximum of 10000 characters.
	Body *string `pulumi:"body"`
	// Create time.
	CreateTime       *string `pulumi:"createTime"`
	DatasetId        string  `pulumi:"datasetId"`
	FeedbackThreadId string  `pulumi:"feedbackThreadId"`
	// The image storing this feedback if the feedback is an image representing operator's comments.
	Image *string `pulumi:"image"`
	// Name of the feedback message in a feedback thread. Format: 'project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}'
	Name                      *string                                                  `pulumi:"name"`
	OperatorFeedbackMetadata  *GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadata  `pulumi:"operatorFeedbackMetadata"`
	Project                   *string                                                  `pulumi:"project"`
	RequesterFeedbackMetadata *GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadata `pulumi:"requesterFeedbackMetadata"`
}

// The set of arguments for constructing a FeedbackMessage resource.
type FeedbackMessageArgs struct {
	AnnotatedDatasetId pulumi.StringInput
	// String content of the feedback. Maximum of 10000 characters.
	Body pulumi.StringPtrInput
	// Create time.
	CreateTime       pulumi.StringPtrInput
	DatasetId        pulumi.StringInput
	FeedbackThreadId pulumi.StringInput
	// The image storing this feedback if the feedback is an image representing operator's comments.
	Image pulumi.StringPtrInput
	// Name of the feedback message in a feedback thread. Format: 'project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}'
	Name                      pulumi.StringPtrInput
	OperatorFeedbackMetadata  GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataPtrInput
	Project                   pulumi.StringPtrInput
	RequesterFeedbackMetadata GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataPtrInput
}

func (FeedbackMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*feedbackMessageArgs)(nil)).Elem()
}

type FeedbackMessageInput interface {
	pulumi.Input

	ToFeedbackMessageOutput() FeedbackMessageOutput
	ToFeedbackMessageOutputWithContext(ctx context.Context) FeedbackMessageOutput
}

func (*FeedbackMessage) ElementType() reflect.Type {
	return reflect.TypeOf((**FeedbackMessage)(nil)).Elem()
}

func (i *FeedbackMessage) ToFeedbackMessageOutput() FeedbackMessageOutput {
	return i.ToFeedbackMessageOutputWithContext(context.Background())
}

func (i *FeedbackMessage) ToFeedbackMessageOutputWithContext(ctx context.Context) FeedbackMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedbackMessageOutput)
}

type FeedbackMessageOutput struct{ *pulumi.OutputState }

func (FeedbackMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeedbackMessage)(nil)).Elem()
}

func (o FeedbackMessageOutput) ToFeedbackMessageOutput() FeedbackMessageOutput {
	return o
}

func (o FeedbackMessageOutput) ToFeedbackMessageOutputWithContext(ctx context.Context) FeedbackMessageOutput {
	return o
}

// String content of the feedback. Maximum of 10000 characters.
func (o FeedbackMessageOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *FeedbackMessage) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// Create time.
func (o FeedbackMessageOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FeedbackMessage) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The image storing this feedback if the feedback is an image representing operator's comments.
func (o FeedbackMessageOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v *FeedbackMessage) pulumi.StringOutput { return v.Image }).(pulumi.StringOutput)
}

// Name of the feedback message in a feedback thread. Format: 'project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}'
func (o FeedbackMessageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FeedbackMessage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FeedbackMessageOutput) OperatorFeedbackMetadata() GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataResponseOutput {
	return o.ApplyT(func(v *FeedbackMessage) GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataResponseOutput {
		return v.OperatorFeedbackMetadata
	}).(GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataResponseOutput)
}

func (o FeedbackMessageOutput) RequesterFeedbackMetadata() GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataResponseOutput {
	return o.ApplyT(func(v *FeedbackMessage) GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataResponseOutput {
		return v.RequesterFeedbackMetadata
	}).(GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeedbackMessageInput)(nil)).Elem(), &FeedbackMessage{})
	pulumi.RegisterOutputType(FeedbackMessageOutput{})
}
