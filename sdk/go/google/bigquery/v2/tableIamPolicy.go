// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type TableIamPolicy struct {
	pulumi.CustomResourceState
}

// NewTableIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewTableIamPolicy(ctx *pulumi.Context,
	name string, args *TableIamPolicyArgs, opts ...pulumi.ResourceOption) (*TableIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetsId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.TablesId == nil {
		return nil, errors.New("invalid value for required argument 'TablesId'")
	}
	var resource TableIamPolicy
	err := ctx.RegisterResource("google-cloud:bigquery/v2:TableIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableIamPolicy gets an existing TableIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableIamPolicyState, opts ...pulumi.ResourceOption) (*TableIamPolicy, error) {
	var resource TableIamPolicy
	err := ctx.ReadResource("google-cloud:bigquery/v2:TableIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableIamPolicy resources.
type tableIamPolicyState struct {
}

type TableIamPolicyState struct {
}

func (TableIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableIamPolicyState)(nil)).Elem()
}

type tableIamPolicyArgs struct {
	DatasetsId string `pulumi:"datasetsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	TablesId   string  `pulumi:"tablesId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a TableIamPolicy resource.
type TableIamPolicyArgs struct {
	DatasetsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	TablesId   pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (TableIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableIamPolicyArgs)(nil)).Elem()
}

type TableIamPolicyInput interface {
	pulumi.Input

	ToTableIamPolicyOutput() TableIamPolicyOutput
	ToTableIamPolicyOutputWithContext(ctx context.Context) TableIamPolicyOutput
}

func (*TableIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*TableIamPolicy)(nil))
}

func (i *TableIamPolicy) ToTableIamPolicyOutput() TableIamPolicyOutput {
	return i.ToTableIamPolicyOutputWithContext(context.Background())
}

func (i *TableIamPolicy) ToTableIamPolicyOutputWithContext(ctx context.Context) TableIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableIamPolicyOutput)
}

type TableIamPolicyOutput struct {
	*pulumi.OutputState
}

func (TableIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableIamPolicy)(nil))
}

func (o TableIamPolicyOutput) ToTableIamPolicyOutput() TableIamPolicyOutput {
	return o
}

func (o TableIamPolicyOutput) ToTableIamPolicyOutputWithContext(ctx context.Context) TableIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TableIamPolicyOutput{})
}
