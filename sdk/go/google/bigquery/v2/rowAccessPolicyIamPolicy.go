// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type RowAccessPolicyIamPolicy struct {
	pulumi.CustomResourceState
}

// NewRowAccessPolicyIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRowAccessPolicyIamPolicy(ctx *pulumi.Context,
	name string, args *RowAccessPolicyIamPolicyArgs, opts ...pulumi.ResourceOption) (*RowAccessPolicyIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetsId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.RowAccessPoliciesId == nil {
		return nil, errors.New("invalid value for required argument 'RowAccessPoliciesId'")
	}
	if args.TablesId == nil {
		return nil, errors.New("invalid value for required argument 'TablesId'")
	}
	var resource RowAccessPolicyIamPolicy
	err := ctx.RegisterResource("google-cloud:bigquery/v2:RowAccessPolicyIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRowAccessPolicyIamPolicy gets an existing RowAccessPolicyIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRowAccessPolicyIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RowAccessPolicyIamPolicyState, opts ...pulumi.ResourceOption) (*RowAccessPolicyIamPolicy, error) {
	var resource RowAccessPolicyIamPolicy
	err := ctx.ReadResource("google-cloud:bigquery/v2:RowAccessPolicyIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RowAccessPolicyIamPolicy resources.
type rowAccessPolicyIamPolicyState struct {
}

type RowAccessPolicyIamPolicyState struct {
}

func (RowAccessPolicyIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*rowAccessPolicyIamPolicyState)(nil)).Elem()
}

type rowAccessPolicyIamPolicyArgs struct {
	DatasetsId string `pulumi:"datasetsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy              *Policy `pulumi:"policy"`
	ProjectsId          string  `pulumi:"projectsId"`
	RowAccessPoliciesId string  `pulumi:"rowAccessPoliciesId"`
	TablesId            string  `pulumi:"tablesId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a RowAccessPolicyIamPolicy resource.
type RowAccessPolicyIamPolicyArgs struct {
	DatasetsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy              PolicyPtrInput
	ProjectsId          pulumi.StringInput
	RowAccessPoliciesId pulumi.StringInput
	TablesId            pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (RowAccessPolicyIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rowAccessPolicyIamPolicyArgs)(nil)).Elem()
}

type RowAccessPolicyIamPolicyInput interface {
	pulumi.Input

	ToRowAccessPolicyIamPolicyOutput() RowAccessPolicyIamPolicyOutput
	ToRowAccessPolicyIamPolicyOutputWithContext(ctx context.Context) RowAccessPolicyIamPolicyOutput
}

func (*RowAccessPolicyIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*RowAccessPolicyIamPolicy)(nil))
}

func (i *RowAccessPolicyIamPolicy) ToRowAccessPolicyIamPolicyOutput() RowAccessPolicyIamPolicyOutput {
	return i.ToRowAccessPolicyIamPolicyOutputWithContext(context.Background())
}

func (i *RowAccessPolicyIamPolicy) ToRowAccessPolicyIamPolicyOutputWithContext(ctx context.Context) RowAccessPolicyIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RowAccessPolicyIamPolicyOutput)
}

type RowAccessPolicyIamPolicyOutput struct {
	*pulumi.OutputState
}

func (RowAccessPolicyIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RowAccessPolicyIamPolicy)(nil))
}

func (o RowAccessPolicyIamPolicyOutput) ToRowAccessPolicyIamPolicyOutput() RowAccessPolicyIamPolicyOutput {
	return o
}

func (o RowAccessPolicyIamPolicyOutput) ToRowAccessPolicyIamPolicyOutputWithContext(ctx context.Context) RowAccessPolicyIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RowAccessPolicyIamPolicyOutput{})
}
