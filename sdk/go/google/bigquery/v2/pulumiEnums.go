// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Optional. Defaults to FIXED_TYPE.
type ArgumentArgumentKind pulumi.String

const (
	ArgumentArgumentKindArgumentKindUnspecified = ArgumentArgumentKind("ARGUMENT_KIND_UNSPECIFIED")
	// The argument is a variable with fully specified type, which can be a struct or an array, but not a table.
	ArgumentArgumentKindFixedType = ArgumentArgumentKind("FIXED_TYPE")
	// The argument is any type, including struct or array, but not a table. To be added: FIXED_TABLE, ANY_TABLE
	ArgumentArgumentKindAnyType = ArgumentArgumentKind("ANY_TYPE")
)

func (ArgumentArgumentKind) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ArgumentArgumentKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArgumentArgumentKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArgumentArgumentKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ArgumentArgumentKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
type ArgumentMode pulumi.String

const (
	ArgumentModeModeUnspecified = ArgumentMode("MODE_UNSPECIFIED")
	// The argument is input-only.
	ArgumentModeIn = ArgumentMode("IN")
	// The argument is output-only.
	ArgumentModeOut = ArgumentMode("OUT")
	// The argument is both an input and an output.
	ArgumentModeInout = ArgumentMode("INOUT")
)

func (ArgumentMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ArgumentMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArgumentMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArgumentMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ArgumentMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The log type that this config enables.
type AuditLogConfigLogType pulumi.String

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Optional. [Experimental] The determinism level of the JavaScript UDF if defined.
type RoutineDeterminismLevel pulumi.String

const (
	// The determinism of the UDF is unspecified.
	RoutineDeterminismLevelDeterminismLevelUnspecified = RoutineDeterminismLevel("DETERMINISM_LEVEL_UNSPECIFIED")
	// The UDF is deterministic, meaning that 2 function calls with the same inputs always produce the same result, even across 2 query runs.
	RoutineDeterminismLevelDeterministic = RoutineDeterminismLevel("DETERMINISTIC")
	// The UDF is not deterministic.
	RoutineDeterminismLevelNotDeterministic = RoutineDeterminismLevel("NOT_DETERMINISTIC")
)

func (RoutineDeterminismLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RoutineDeterminismLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineDeterminismLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineDeterminismLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutineDeterminismLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Optional. Defaults to "SQL".
type RoutineLanguage pulumi.String

const (
	RoutineLanguageLanguageUnspecified = RoutineLanguage("LANGUAGE_UNSPECIFIED")
	// SQL language.
	RoutineLanguageSql = RoutineLanguage("SQL")
	// JavaScript language.
	RoutineLanguageJavascript = RoutineLanguage("JAVASCRIPT")
)

func (RoutineLanguage) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RoutineLanguage) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineLanguage) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineLanguage) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutineLanguage) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. The type of routine.
type RoutineRoutineType pulumi.String

const (
	RoutineRoutineTypeRoutineTypeUnspecified = RoutineRoutineType("ROUTINE_TYPE_UNSPECIFIED")
	// Non-builtin permanent scalar function.
	RoutineRoutineTypeScalarFunction = RoutineRoutineType("SCALAR_FUNCTION")
	// Stored procedure.
	RoutineRoutineTypeProcedure = RoutineRoutineType("PROCEDURE")
	// Non-builtin permanent TVF.
	RoutineRoutineTypeTableValuedFunction = RoutineRoutineType("TABLE_VALUED_FUNCTION")
)

func (RoutineRoutineType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RoutineRoutineType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineRoutineType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineRoutineType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutineRoutineType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. The top level type of this field. Can be any standard SQL data type (e.g., "INT64", "DATE", "ARRAY").
type StandardSqlDataTypeTypeKind pulumi.String

const (
	// Invalid type.
	StandardSqlDataTypeTypeKindTypeKindUnspecified = StandardSqlDataTypeTypeKind("TYPE_KIND_UNSPECIFIED")
	// Encoded as a string in decimal format.
	StandardSqlDataTypeTypeKindInt64 = StandardSqlDataTypeTypeKind("INT64")
	// Encoded as a boolean "false" or "true".
	StandardSqlDataTypeTypeKindBool = StandardSqlDataTypeTypeKind("BOOL")
	// Encoded as a number, or string "NaN", "Infinity" or "-Infinity".
	StandardSqlDataTypeTypeKindFloat64 = StandardSqlDataTypeTypeKind("FLOAT64")
	// Encoded as a string value.
	StandardSqlDataTypeTypeKindString = StandardSqlDataTypeTypeKind("STRING")
	// Encoded as a base64 string per RFC 4648, section 4.
	StandardSqlDataTypeTypeKindBytes = StandardSqlDataTypeTypeKind("BYTES")
	// Encoded as an RFC 3339 timestamp with mandatory "Z" time zone string: 1985-04-12T23:20:50.52Z
	StandardSqlDataTypeTypeKindTimestamp = StandardSqlDataTypeTypeKind("TIMESTAMP")
	// Encoded as RFC 3339 full-date format string: 1985-04-12
	StandardSqlDataTypeTypeKindDate = StandardSqlDataTypeTypeKind("DATE")
	// Encoded as RFC 3339 partial-time format string: 23:20:50.52
	StandardSqlDataTypeTypeKindTime = StandardSqlDataTypeTypeKind("TIME")
	// Encoded as RFC 3339 full-date "T" partial-time: 1985-04-12T23:20:50.52
	StandardSqlDataTypeTypeKindDatetime = StandardSqlDataTypeTypeKind("DATETIME")
	// Encoded as fully qualified 3 part: 0-5 15 2:30:45.6
	StandardSqlDataTypeTypeKindInterval = StandardSqlDataTypeTypeKind("INTERVAL")
	// Encoded as WKT
	StandardSqlDataTypeTypeKindGeography = StandardSqlDataTypeTypeKind("GEOGRAPHY")
	// Encoded as a decimal string.
	StandardSqlDataTypeTypeKindNumeric = StandardSqlDataTypeTypeKind("NUMERIC")
	// Encoded as a decimal string.
	StandardSqlDataTypeTypeKindBignumeric = StandardSqlDataTypeTypeKind("BIGNUMERIC")
	// Encoded as a string.
	StandardSqlDataTypeTypeKindJson = StandardSqlDataTypeTypeKind("JSON")
	// Encoded as a list with types matching Type.array_type.
	StandardSqlDataTypeTypeKindArray = StandardSqlDataTypeTypeKind("ARRAY")
	// Encoded as a list with fields of type Type.struct_type[i]. List is used because a JSON object cannot have duplicate field names.
	StandardSqlDataTypeTypeKindStruct = StandardSqlDataTypeTypeKind("STRUCT")
)

func (StandardSqlDataTypeTypeKind) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e StandardSqlDataTypeTypeKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StandardSqlDataTypeTypeKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StandardSqlDataTypeTypeKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StandardSqlDataTypeTypeKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
