// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Optional. Defaults to FIXED_TYPE.
type ArgumentArgumentKind string

const (
	// Default value.
	ArgumentArgumentKindArgumentKindUnspecified = ArgumentArgumentKind("ARGUMENT_KIND_UNSPECIFIED")
	// The argument is a variable with fully specified type, which can be a struct or an array, but not a table.
	ArgumentArgumentKindFixedType = ArgumentArgumentKind("FIXED_TYPE")
	// The argument is any type, including struct or array, but not a table. To be added: FIXED_TABLE, ANY_TABLE
	ArgumentArgumentKindAnyType = ArgumentArgumentKind("ANY_TYPE")
)

func (ArgumentArgumentKind) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgumentArgumentKind)(nil)).Elem()
}

func (e ArgumentArgumentKind) ToArgumentArgumentKindOutput() ArgumentArgumentKindOutput {
	return pulumi.ToOutput(e).(ArgumentArgumentKindOutput)
}

func (e ArgumentArgumentKind) ToArgumentArgumentKindOutputWithContext(ctx context.Context) ArgumentArgumentKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ArgumentArgumentKindOutput)
}

func (e ArgumentArgumentKind) ToArgumentArgumentKindPtrOutput() ArgumentArgumentKindPtrOutput {
	return e.ToArgumentArgumentKindPtrOutputWithContext(context.Background())
}

func (e ArgumentArgumentKind) ToArgumentArgumentKindPtrOutputWithContext(ctx context.Context) ArgumentArgumentKindPtrOutput {
	return ArgumentArgumentKind(e).ToArgumentArgumentKindOutputWithContext(ctx).ToArgumentArgumentKindPtrOutputWithContext(ctx)
}

func (e ArgumentArgumentKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArgumentArgumentKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArgumentArgumentKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ArgumentArgumentKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ArgumentArgumentKindOutput struct{ *pulumi.OutputState }

func (ArgumentArgumentKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgumentArgumentKind)(nil)).Elem()
}

func (o ArgumentArgumentKindOutput) ToArgumentArgumentKindOutput() ArgumentArgumentKindOutput {
	return o
}

func (o ArgumentArgumentKindOutput) ToArgumentArgumentKindOutputWithContext(ctx context.Context) ArgumentArgumentKindOutput {
	return o
}

func (o ArgumentArgumentKindOutput) ToArgumentArgumentKindPtrOutput() ArgumentArgumentKindPtrOutput {
	return o.ToArgumentArgumentKindPtrOutputWithContext(context.Background())
}

func (o ArgumentArgumentKindOutput) ToArgumentArgumentKindPtrOutputWithContext(ctx context.Context) ArgumentArgumentKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArgumentArgumentKind) *ArgumentArgumentKind {
		return &v
	}).(ArgumentArgumentKindPtrOutput)
}

func (o ArgumentArgumentKindOutput) ToOutput(ctx context.Context) pulumix.Output[ArgumentArgumentKind] {
	return pulumix.Output[ArgumentArgumentKind]{
		OutputState: o.OutputState,
	}
}

func (o ArgumentArgumentKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ArgumentArgumentKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArgumentArgumentKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ArgumentArgumentKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArgumentArgumentKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArgumentArgumentKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ArgumentArgumentKindPtrOutput struct{ *pulumi.OutputState }

func (ArgumentArgumentKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgumentArgumentKind)(nil)).Elem()
}

func (o ArgumentArgumentKindPtrOutput) ToArgumentArgumentKindPtrOutput() ArgumentArgumentKindPtrOutput {
	return o
}

func (o ArgumentArgumentKindPtrOutput) ToArgumentArgumentKindPtrOutputWithContext(ctx context.Context) ArgumentArgumentKindPtrOutput {
	return o
}

func (o ArgumentArgumentKindPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ArgumentArgumentKind] {
	return pulumix.Output[*ArgumentArgumentKind]{
		OutputState: o.OutputState,
	}
}

func (o ArgumentArgumentKindPtrOutput) Elem() ArgumentArgumentKindOutput {
	return o.ApplyT(func(v *ArgumentArgumentKind) ArgumentArgumentKind {
		if v != nil {
			return *v
		}
		var ret ArgumentArgumentKind
		return ret
	}).(ArgumentArgumentKindOutput)
}

func (o ArgumentArgumentKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArgumentArgumentKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ArgumentArgumentKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ArgumentArgumentKindInput is an input type that accepts ArgumentArgumentKindArgs and ArgumentArgumentKindOutput values.
// You can construct a concrete instance of `ArgumentArgumentKindInput` via:
//
//	ArgumentArgumentKindArgs{...}
type ArgumentArgumentKindInput interface {
	pulumi.Input

	ToArgumentArgumentKindOutput() ArgumentArgumentKindOutput
	ToArgumentArgumentKindOutputWithContext(context.Context) ArgumentArgumentKindOutput
}

var argumentArgumentKindPtrType = reflect.TypeOf((**ArgumentArgumentKind)(nil)).Elem()

type ArgumentArgumentKindPtrInput interface {
	pulumi.Input

	ToArgumentArgumentKindPtrOutput() ArgumentArgumentKindPtrOutput
	ToArgumentArgumentKindPtrOutputWithContext(context.Context) ArgumentArgumentKindPtrOutput
}

type argumentArgumentKindPtr string

func ArgumentArgumentKindPtr(v string) ArgumentArgumentKindPtrInput {
	return (*argumentArgumentKindPtr)(&v)
}

func (*argumentArgumentKindPtr) ElementType() reflect.Type {
	return argumentArgumentKindPtrType
}

func (in *argumentArgumentKindPtr) ToArgumentArgumentKindPtrOutput() ArgumentArgumentKindPtrOutput {
	return pulumi.ToOutput(in).(ArgumentArgumentKindPtrOutput)
}

func (in *argumentArgumentKindPtr) ToArgumentArgumentKindPtrOutputWithContext(ctx context.Context) ArgumentArgumentKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ArgumentArgumentKindPtrOutput)
}

func (in *argumentArgumentKindPtr) ToOutput(ctx context.Context) pulumix.Output[*ArgumentArgumentKind] {
	return pulumix.Output[*ArgumentArgumentKind]{
		OutputState: in.ToArgumentArgumentKindPtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
type ArgumentMode string

const (
	// Default value.
	ArgumentModeModeUnspecified = ArgumentMode("MODE_UNSPECIFIED")
	// The argument is input-only.
	ArgumentModeIn = ArgumentMode("IN")
	// The argument is output-only.
	ArgumentModeOut = ArgumentMode("OUT")
	// The argument is both an input and an output.
	ArgumentModeInout = ArgumentMode("INOUT")
)

func (ArgumentMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgumentMode)(nil)).Elem()
}

func (e ArgumentMode) ToArgumentModeOutput() ArgumentModeOutput {
	return pulumi.ToOutput(e).(ArgumentModeOutput)
}

func (e ArgumentMode) ToArgumentModeOutputWithContext(ctx context.Context) ArgumentModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ArgumentModeOutput)
}

func (e ArgumentMode) ToArgumentModePtrOutput() ArgumentModePtrOutput {
	return e.ToArgumentModePtrOutputWithContext(context.Background())
}

func (e ArgumentMode) ToArgumentModePtrOutputWithContext(ctx context.Context) ArgumentModePtrOutput {
	return ArgumentMode(e).ToArgumentModeOutputWithContext(ctx).ToArgumentModePtrOutputWithContext(ctx)
}

func (e ArgumentMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArgumentMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArgumentMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ArgumentMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ArgumentModeOutput struct{ *pulumi.OutputState }

func (ArgumentModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgumentMode)(nil)).Elem()
}

func (o ArgumentModeOutput) ToArgumentModeOutput() ArgumentModeOutput {
	return o
}

func (o ArgumentModeOutput) ToArgumentModeOutputWithContext(ctx context.Context) ArgumentModeOutput {
	return o
}

func (o ArgumentModeOutput) ToArgumentModePtrOutput() ArgumentModePtrOutput {
	return o.ToArgumentModePtrOutputWithContext(context.Background())
}

func (o ArgumentModeOutput) ToArgumentModePtrOutputWithContext(ctx context.Context) ArgumentModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArgumentMode) *ArgumentMode {
		return &v
	}).(ArgumentModePtrOutput)
}

func (o ArgumentModeOutput) ToOutput(ctx context.Context) pulumix.Output[ArgumentMode] {
	return pulumix.Output[ArgumentMode]{
		OutputState: o.OutputState,
	}
}

func (o ArgumentModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ArgumentModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArgumentMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ArgumentModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArgumentModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArgumentMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ArgumentModePtrOutput struct{ *pulumi.OutputState }

func (ArgumentModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgumentMode)(nil)).Elem()
}

func (o ArgumentModePtrOutput) ToArgumentModePtrOutput() ArgumentModePtrOutput {
	return o
}

func (o ArgumentModePtrOutput) ToArgumentModePtrOutputWithContext(ctx context.Context) ArgumentModePtrOutput {
	return o
}

func (o ArgumentModePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ArgumentMode] {
	return pulumix.Output[*ArgumentMode]{
		OutputState: o.OutputState,
	}
}

func (o ArgumentModePtrOutput) Elem() ArgumentModeOutput {
	return o.ApplyT(func(v *ArgumentMode) ArgumentMode {
		if v != nil {
			return *v
		}
		var ret ArgumentMode
		return ret
	}).(ArgumentModeOutput)
}

func (o ArgumentModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArgumentModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ArgumentMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ArgumentModeInput is an input type that accepts ArgumentModeArgs and ArgumentModeOutput values.
// You can construct a concrete instance of `ArgumentModeInput` via:
//
//	ArgumentModeArgs{...}
type ArgumentModeInput interface {
	pulumi.Input

	ToArgumentModeOutput() ArgumentModeOutput
	ToArgumentModeOutputWithContext(context.Context) ArgumentModeOutput
}

var argumentModePtrType = reflect.TypeOf((**ArgumentMode)(nil)).Elem()

type ArgumentModePtrInput interface {
	pulumi.Input

	ToArgumentModePtrOutput() ArgumentModePtrOutput
	ToArgumentModePtrOutputWithContext(context.Context) ArgumentModePtrOutput
}

type argumentModePtr string

func ArgumentModePtr(v string) ArgumentModePtrInput {
	return (*argumentModePtr)(&v)
}

func (*argumentModePtr) ElementType() reflect.Type {
	return argumentModePtrType
}

func (in *argumentModePtr) ToArgumentModePtrOutput() ArgumentModePtrOutput {
	return pulumi.ToOutput(in).(ArgumentModePtrOutput)
}

func (in *argumentModePtr) ToArgumentModePtrOutputWithContext(ctx context.Context) ArgumentModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ArgumentModePtrOutput)
}

func (in *argumentModePtr) ToOutput(ctx context.Context) pulumix.Output[*ArgumentMode] {
	return pulumix.Output[*ArgumentMode]{
		OutputState: in.ToArgumentModePtrOutputWithContext(ctx).OutputState,
	}
}

// The log type that this config enables.
type AuditLogConfigLogType string

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return pulumi.ToOutput(e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return e.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return AuditLogConfigLogType(e).ToAuditLogConfigLogTypeOutputWithContext(ctx).ToAuditLogConfigLogTypePtrOutputWithContext(ctx)
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuditLogConfigLogTypeOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuditLogConfigLogType) *AuditLogConfigLogType {
		return &v
	}).(AuditLogConfigLogTypePtrOutput)
}

func (o AuditLogConfigLogTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfigLogType] {
	return pulumix.Output[AuditLogConfigLogType]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigLogTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuditLogConfigLogTypePtrOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AuditLogConfigLogType] {
	return pulumix.Output[*AuditLogConfigLogType]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigLogTypePtrOutput) Elem() AuditLogConfigLogTypeOutput {
	return o.ApplyT(func(v *AuditLogConfigLogType) AuditLogConfigLogType {
		if v != nil {
			return *v
		}
		var ret AuditLogConfigLogType
		return ret
	}).(AuditLogConfigLogTypeOutput)
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuditLogConfigLogType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuditLogConfigLogTypeInput is an input type that accepts AuditLogConfigLogTypeArgs and AuditLogConfigLogTypeOutput values.
// You can construct a concrete instance of `AuditLogConfigLogTypeInput` via:
//
//	AuditLogConfigLogTypeArgs{...}
type AuditLogConfigLogTypeInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput
	ToAuditLogConfigLogTypeOutputWithContext(context.Context) AuditLogConfigLogTypeOutput
}

var auditLogConfigLogTypePtrType = reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()

type AuditLogConfigLogTypePtrInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput
	ToAuditLogConfigLogTypePtrOutputWithContext(context.Context) AuditLogConfigLogTypePtrOutput
}

type auditLogConfigLogTypePtr string

func AuditLogConfigLogTypePtr(v string) AuditLogConfigLogTypePtrInput {
	return (*auditLogConfigLogTypePtr)(&v)
}

func (*auditLogConfigLogTypePtr) ElementType() reflect.Type {
	return auditLogConfigLogTypePtrType
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutput(in).(AuditLogConfigLogTypePtrOutput)
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuditLogConfigLogTypePtrOutput)
}

func (in *auditLogConfigLogTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AuditLogConfigLogType] {
	return pulumix.Output[*AuditLogConfigLogType]{
		OutputState: in.ToAuditLogConfigLogTypePtrOutputWithContext(ctx).OutputState,
	}
}

type DatasetAccessEntryTargetTypesItem string

const (
	// Do not use. You must set a target type explicitly.
	DatasetAccessEntryTargetTypesItemTargetTypeUnspecified = DatasetAccessEntryTargetTypesItem("TARGET_TYPE_UNSPECIFIED")
	// This entry applies to views in the dataset.
	DatasetAccessEntryTargetTypesItemViews = DatasetAccessEntryTargetTypesItem("VIEWS")
	// This entry applies to routines in the dataset.
	DatasetAccessEntryTargetTypesItemRoutines = DatasetAccessEntryTargetTypesItem("ROUTINES")
)

func (DatasetAccessEntryTargetTypesItem) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessEntryTargetTypesItem)(nil)).Elem()
}

func (e DatasetAccessEntryTargetTypesItem) ToDatasetAccessEntryTargetTypesItemOutput() DatasetAccessEntryTargetTypesItemOutput {
	return pulumi.ToOutput(e).(DatasetAccessEntryTargetTypesItemOutput)
}

func (e DatasetAccessEntryTargetTypesItem) ToDatasetAccessEntryTargetTypesItemOutputWithContext(ctx context.Context) DatasetAccessEntryTargetTypesItemOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatasetAccessEntryTargetTypesItemOutput)
}

func (e DatasetAccessEntryTargetTypesItem) ToDatasetAccessEntryTargetTypesItemPtrOutput() DatasetAccessEntryTargetTypesItemPtrOutput {
	return e.ToDatasetAccessEntryTargetTypesItemPtrOutputWithContext(context.Background())
}

func (e DatasetAccessEntryTargetTypesItem) ToDatasetAccessEntryTargetTypesItemPtrOutputWithContext(ctx context.Context) DatasetAccessEntryTargetTypesItemPtrOutput {
	return DatasetAccessEntryTargetTypesItem(e).ToDatasetAccessEntryTargetTypesItemOutputWithContext(ctx).ToDatasetAccessEntryTargetTypesItemPtrOutputWithContext(ctx)
}

func (e DatasetAccessEntryTargetTypesItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatasetAccessEntryTargetTypesItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatasetAccessEntryTargetTypesItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatasetAccessEntryTargetTypesItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatasetAccessEntryTargetTypesItemOutput struct{ *pulumi.OutputState }

func (DatasetAccessEntryTargetTypesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessEntryTargetTypesItem)(nil)).Elem()
}

func (o DatasetAccessEntryTargetTypesItemOutput) ToDatasetAccessEntryTargetTypesItemOutput() DatasetAccessEntryTargetTypesItemOutput {
	return o
}

func (o DatasetAccessEntryTargetTypesItemOutput) ToDatasetAccessEntryTargetTypesItemOutputWithContext(ctx context.Context) DatasetAccessEntryTargetTypesItemOutput {
	return o
}

func (o DatasetAccessEntryTargetTypesItemOutput) ToDatasetAccessEntryTargetTypesItemPtrOutput() DatasetAccessEntryTargetTypesItemPtrOutput {
	return o.ToDatasetAccessEntryTargetTypesItemPtrOutputWithContext(context.Background())
}

func (o DatasetAccessEntryTargetTypesItemOutput) ToDatasetAccessEntryTargetTypesItemPtrOutputWithContext(ctx context.Context) DatasetAccessEntryTargetTypesItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetAccessEntryTargetTypesItem) *DatasetAccessEntryTargetTypesItem {
		return &v
	}).(DatasetAccessEntryTargetTypesItemPtrOutput)
}

func (o DatasetAccessEntryTargetTypesItemOutput) ToOutput(ctx context.Context) pulumix.Output[DatasetAccessEntryTargetTypesItem] {
	return pulumix.Output[DatasetAccessEntryTargetTypesItem]{
		OutputState: o.OutputState,
	}
}

func (o DatasetAccessEntryTargetTypesItemOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatasetAccessEntryTargetTypesItemOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatasetAccessEntryTargetTypesItem) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatasetAccessEntryTargetTypesItemOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatasetAccessEntryTargetTypesItemOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatasetAccessEntryTargetTypesItem) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatasetAccessEntryTargetTypesItemPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessEntryTargetTypesItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessEntryTargetTypesItem)(nil)).Elem()
}

func (o DatasetAccessEntryTargetTypesItemPtrOutput) ToDatasetAccessEntryTargetTypesItemPtrOutput() DatasetAccessEntryTargetTypesItemPtrOutput {
	return o
}

func (o DatasetAccessEntryTargetTypesItemPtrOutput) ToDatasetAccessEntryTargetTypesItemPtrOutputWithContext(ctx context.Context) DatasetAccessEntryTargetTypesItemPtrOutput {
	return o
}

func (o DatasetAccessEntryTargetTypesItemPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatasetAccessEntryTargetTypesItem] {
	return pulumix.Output[*DatasetAccessEntryTargetTypesItem]{
		OutputState: o.OutputState,
	}
}

func (o DatasetAccessEntryTargetTypesItemPtrOutput) Elem() DatasetAccessEntryTargetTypesItemOutput {
	return o.ApplyT(func(v *DatasetAccessEntryTargetTypesItem) DatasetAccessEntryTargetTypesItem {
		if v != nil {
			return *v
		}
		var ret DatasetAccessEntryTargetTypesItem
		return ret
	}).(DatasetAccessEntryTargetTypesItemOutput)
}

func (o DatasetAccessEntryTargetTypesItemPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatasetAccessEntryTargetTypesItemPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatasetAccessEntryTargetTypesItem) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatasetAccessEntryTargetTypesItemInput is an input type that accepts DatasetAccessEntryTargetTypesItemArgs and DatasetAccessEntryTargetTypesItemOutput values.
// You can construct a concrete instance of `DatasetAccessEntryTargetTypesItemInput` via:
//
//	DatasetAccessEntryTargetTypesItemArgs{...}
type DatasetAccessEntryTargetTypesItemInput interface {
	pulumi.Input

	ToDatasetAccessEntryTargetTypesItemOutput() DatasetAccessEntryTargetTypesItemOutput
	ToDatasetAccessEntryTargetTypesItemOutputWithContext(context.Context) DatasetAccessEntryTargetTypesItemOutput
}

var datasetAccessEntryTargetTypesItemPtrType = reflect.TypeOf((**DatasetAccessEntryTargetTypesItem)(nil)).Elem()

type DatasetAccessEntryTargetTypesItemPtrInput interface {
	pulumi.Input

	ToDatasetAccessEntryTargetTypesItemPtrOutput() DatasetAccessEntryTargetTypesItemPtrOutput
	ToDatasetAccessEntryTargetTypesItemPtrOutputWithContext(context.Context) DatasetAccessEntryTargetTypesItemPtrOutput
}

type datasetAccessEntryTargetTypesItemPtr string

func DatasetAccessEntryTargetTypesItemPtr(v string) DatasetAccessEntryTargetTypesItemPtrInput {
	return (*datasetAccessEntryTargetTypesItemPtr)(&v)
}

func (*datasetAccessEntryTargetTypesItemPtr) ElementType() reflect.Type {
	return datasetAccessEntryTargetTypesItemPtrType
}

func (in *datasetAccessEntryTargetTypesItemPtr) ToDatasetAccessEntryTargetTypesItemPtrOutput() DatasetAccessEntryTargetTypesItemPtrOutput {
	return pulumi.ToOutput(in).(DatasetAccessEntryTargetTypesItemPtrOutput)
}

func (in *datasetAccessEntryTargetTypesItemPtr) ToDatasetAccessEntryTargetTypesItemPtrOutputWithContext(ctx context.Context) DatasetAccessEntryTargetTypesItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatasetAccessEntryTargetTypesItemPtrOutput)
}

func (in *datasetAccessEntryTargetTypesItemPtr) ToOutput(ctx context.Context) pulumix.Output[*DatasetAccessEntryTargetTypesItem] {
	return pulumix.Output[*DatasetAccessEntryTargetTypesItem]{
		OutputState: in.ToDatasetAccessEntryTargetTypesItemPtrOutputWithContext(ctx).OutputState,
	}
}

// DatasetAccessEntryTargetTypesItemArrayInput is an input type that accepts DatasetAccessEntryTargetTypesItemArray and DatasetAccessEntryTargetTypesItemArrayOutput values.
// You can construct a concrete instance of `DatasetAccessEntryTargetTypesItemArrayInput` via:
//
//	DatasetAccessEntryTargetTypesItemArray{ DatasetAccessEntryTargetTypesItemArgs{...} }
type DatasetAccessEntryTargetTypesItemArrayInput interface {
	pulumi.Input

	ToDatasetAccessEntryTargetTypesItemArrayOutput() DatasetAccessEntryTargetTypesItemArrayOutput
	ToDatasetAccessEntryTargetTypesItemArrayOutputWithContext(context.Context) DatasetAccessEntryTargetTypesItemArrayOutput
}

type DatasetAccessEntryTargetTypesItemArray []DatasetAccessEntryTargetTypesItem

func (DatasetAccessEntryTargetTypesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessEntryTargetTypesItem)(nil)).Elem()
}

func (i DatasetAccessEntryTargetTypesItemArray) ToDatasetAccessEntryTargetTypesItemArrayOutput() DatasetAccessEntryTargetTypesItemArrayOutput {
	return i.ToDatasetAccessEntryTargetTypesItemArrayOutputWithContext(context.Background())
}

func (i DatasetAccessEntryTargetTypesItemArray) ToDatasetAccessEntryTargetTypesItemArrayOutputWithContext(ctx context.Context) DatasetAccessEntryTargetTypesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessEntryTargetTypesItemArrayOutput)
}

func (i DatasetAccessEntryTargetTypesItemArray) ToOutput(ctx context.Context) pulumix.Output[[]DatasetAccessEntryTargetTypesItem] {
	return pulumix.Output[[]DatasetAccessEntryTargetTypesItem]{
		OutputState: i.ToDatasetAccessEntryTargetTypesItemArrayOutputWithContext(ctx).OutputState,
	}
}

type DatasetAccessEntryTargetTypesItemArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessEntryTargetTypesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessEntryTargetTypesItem)(nil)).Elem()
}

func (o DatasetAccessEntryTargetTypesItemArrayOutput) ToDatasetAccessEntryTargetTypesItemArrayOutput() DatasetAccessEntryTargetTypesItemArrayOutput {
	return o
}

func (o DatasetAccessEntryTargetTypesItemArrayOutput) ToDatasetAccessEntryTargetTypesItemArrayOutputWithContext(ctx context.Context) DatasetAccessEntryTargetTypesItemArrayOutput {
	return o
}

func (o DatasetAccessEntryTargetTypesItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DatasetAccessEntryTargetTypesItem] {
	return pulumix.Output[[]DatasetAccessEntryTargetTypesItem]{
		OutputState: o.OutputState,
	}
}

func (o DatasetAccessEntryTargetTypesItemArrayOutput) Index(i pulumi.IntInput) DatasetAccessEntryTargetTypesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccessEntryTargetTypesItem {
		return vs[0].([]DatasetAccessEntryTargetTypesItem)[vs[1].(int)]
	}).(DatasetAccessEntryTargetTypesItemOutput)
}

// Optional. If set to `DATA_MASKING`, the function is validated and made available as a masking function. For more information, see [Create custom masking routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).
type RoutineDataGovernanceType string

const (
	// The data governance type is unspecified.
	RoutineDataGovernanceTypeDataGovernanceTypeUnspecified = RoutineDataGovernanceType("DATA_GOVERNANCE_TYPE_UNSPECIFIED")
	// The data governance type is data masking.
	RoutineDataGovernanceTypeDataMasking = RoutineDataGovernanceType("DATA_MASKING")
)

func (RoutineDataGovernanceType) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineDataGovernanceType)(nil)).Elem()
}

func (e RoutineDataGovernanceType) ToRoutineDataGovernanceTypeOutput() RoutineDataGovernanceTypeOutput {
	return pulumi.ToOutput(e).(RoutineDataGovernanceTypeOutput)
}

func (e RoutineDataGovernanceType) ToRoutineDataGovernanceTypeOutputWithContext(ctx context.Context) RoutineDataGovernanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RoutineDataGovernanceTypeOutput)
}

func (e RoutineDataGovernanceType) ToRoutineDataGovernanceTypePtrOutput() RoutineDataGovernanceTypePtrOutput {
	return e.ToRoutineDataGovernanceTypePtrOutputWithContext(context.Background())
}

func (e RoutineDataGovernanceType) ToRoutineDataGovernanceTypePtrOutputWithContext(ctx context.Context) RoutineDataGovernanceTypePtrOutput {
	return RoutineDataGovernanceType(e).ToRoutineDataGovernanceTypeOutputWithContext(ctx).ToRoutineDataGovernanceTypePtrOutputWithContext(ctx)
}

func (e RoutineDataGovernanceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineDataGovernanceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineDataGovernanceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutineDataGovernanceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RoutineDataGovernanceTypeOutput struct{ *pulumi.OutputState }

func (RoutineDataGovernanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineDataGovernanceType)(nil)).Elem()
}

func (o RoutineDataGovernanceTypeOutput) ToRoutineDataGovernanceTypeOutput() RoutineDataGovernanceTypeOutput {
	return o
}

func (o RoutineDataGovernanceTypeOutput) ToRoutineDataGovernanceTypeOutputWithContext(ctx context.Context) RoutineDataGovernanceTypeOutput {
	return o
}

func (o RoutineDataGovernanceTypeOutput) ToRoutineDataGovernanceTypePtrOutput() RoutineDataGovernanceTypePtrOutput {
	return o.ToRoutineDataGovernanceTypePtrOutputWithContext(context.Background())
}

func (o RoutineDataGovernanceTypeOutput) ToRoutineDataGovernanceTypePtrOutputWithContext(ctx context.Context) RoutineDataGovernanceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutineDataGovernanceType) *RoutineDataGovernanceType {
		return &v
	}).(RoutineDataGovernanceTypePtrOutput)
}

func (o RoutineDataGovernanceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[RoutineDataGovernanceType] {
	return pulumix.Output[RoutineDataGovernanceType]{
		OutputState: o.OutputState,
	}
}

func (o RoutineDataGovernanceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RoutineDataGovernanceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutineDataGovernanceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RoutineDataGovernanceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutineDataGovernanceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutineDataGovernanceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RoutineDataGovernanceTypePtrOutput struct{ *pulumi.OutputState }

func (RoutineDataGovernanceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineDataGovernanceType)(nil)).Elem()
}

func (o RoutineDataGovernanceTypePtrOutput) ToRoutineDataGovernanceTypePtrOutput() RoutineDataGovernanceTypePtrOutput {
	return o
}

func (o RoutineDataGovernanceTypePtrOutput) ToRoutineDataGovernanceTypePtrOutputWithContext(ctx context.Context) RoutineDataGovernanceTypePtrOutput {
	return o
}

func (o RoutineDataGovernanceTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RoutineDataGovernanceType] {
	return pulumix.Output[*RoutineDataGovernanceType]{
		OutputState: o.OutputState,
	}
}

func (o RoutineDataGovernanceTypePtrOutput) Elem() RoutineDataGovernanceTypeOutput {
	return o.ApplyT(func(v *RoutineDataGovernanceType) RoutineDataGovernanceType {
		if v != nil {
			return *v
		}
		var ret RoutineDataGovernanceType
		return ret
	}).(RoutineDataGovernanceTypeOutput)
}

func (o RoutineDataGovernanceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutineDataGovernanceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RoutineDataGovernanceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RoutineDataGovernanceTypeInput is an input type that accepts RoutineDataGovernanceTypeArgs and RoutineDataGovernanceTypeOutput values.
// You can construct a concrete instance of `RoutineDataGovernanceTypeInput` via:
//
//	RoutineDataGovernanceTypeArgs{...}
type RoutineDataGovernanceTypeInput interface {
	pulumi.Input

	ToRoutineDataGovernanceTypeOutput() RoutineDataGovernanceTypeOutput
	ToRoutineDataGovernanceTypeOutputWithContext(context.Context) RoutineDataGovernanceTypeOutput
}

var routineDataGovernanceTypePtrType = reflect.TypeOf((**RoutineDataGovernanceType)(nil)).Elem()

type RoutineDataGovernanceTypePtrInput interface {
	pulumi.Input

	ToRoutineDataGovernanceTypePtrOutput() RoutineDataGovernanceTypePtrOutput
	ToRoutineDataGovernanceTypePtrOutputWithContext(context.Context) RoutineDataGovernanceTypePtrOutput
}

type routineDataGovernanceTypePtr string

func RoutineDataGovernanceTypePtr(v string) RoutineDataGovernanceTypePtrInput {
	return (*routineDataGovernanceTypePtr)(&v)
}

func (*routineDataGovernanceTypePtr) ElementType() reflect.Type {
	return routineDataGovernanceTypePtrType
}

func (in *routineDataGovernanceTypePtr) ToRoutineDataGovernanceTypePtrOutput() RoutineDataGovernanceTypePtrOutput {
	return pulumi.ToOutput(in).(RoutineDataGovernanceTypePtrOutput)
}

func (in *routineDataGovernanceTypePtr) ToRoutineDataGovernanceTypePtrOutputWithContext(ctx context.Context) RoutineDataGovernanceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RoutineDataGovernanceTypePtrOutput)
}

func (in *routineDataGovernanceTypePtr) ToOutput(ctx context.Context) pulumix.Output[*RoutineDataGovernanceType] {
	return pulumix.Output[*RoutineDataGovernanceType]{
		OutputState: in.ToRoutineDataGovernanceTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. The determinism level of the JavaScript UDF, if defined.
type RoutineDeterminismLevel string

const (
	// The determinism of the UDF is unspecified.
	RoutineDeterminismLevelDeterminismLevelUnspecified = RoutineDeterminismLevel("DETERMINISM_LEVEL_UNSPECIFIED")
	// The UDF is deterministic, meaning that 2 function calls with the same inputs always produce the same result, even across 2 query runs.
	RoutineDeterminismLevelDeterministic = RoutineDeterminismLevel("DETERMINISTIC")
	// The UDF is not deterministic.
	RoutineDeterminismLevelNotDeterministic = RoutineDeterminismLevel("NOT_DETERMINISTIC")
)

func (RoutineDeterminismLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineDeterminismLevel)(nil)).Elem()
}

func (e RoutineDeterminismLevel) ToRoutineDeterminismLevelOutput() RoutineDeterminismLevelOutput {
	return pulumi.ToOutput(e).(RoutineDeterminismLevelOutput)
}

func (e RoutineDeterminismLevel) ToRoutineDeterminismLevelOutputWithContext(ctx context.Context) RoutineDeterminismLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RoutineDeterminismLevelOutput)
}

func (e RoutineDeterminismLevel) ToRoutineDeterminismLevelPtrOutput() RoutineDeterminismLevelPtrOutput {
	return e.ToRoutineDeterminismLevelPtrOutputWithContext(context.Background())
}

func (e RoutineDeterminismLevel) ToRoutineDeterminismLevelPtrOutputWithContext(ctx context.Context) RoutineDeterminismLevelPtrOutput {
	return RoutineDeterminismLevel(e).ToRoutineDeterminismLevelOutputWithContext(ctx).ToRoutineDeterminismLevelPtrOutputWithContext(ctx)
}

func (e RoutineDeterminismLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineDeterminismLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineDeterminismLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutineDeterminismLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RoutineDeterminismLevelOutput struct{ *pulumi.OutputState }

func (RoutineDeterminismLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineDeterminismLevel)(nil)).Elem()
}

func (o RoutineDeterminismLevelOutput) ToRoutineDeterminismLevelOutput() RoutineDeterminismLevelOutput {
	return o
}

func (o RoutineDeterminismLevelOutput) ToRoutineDeterminismLevelOutputWithContext(ctx context.Context) RoutineDeterminismLevelOutput {
	return o
}

func (o RoutineDeterminismLevelOutput) ToRoutineDeterminismLevelPtrOutput() RoutineDeterminismLevelPtrOutput {
	return o.ToRoutineDeterminismLevelPtrOutputWithContext(context.Background())
}

func (o RoutineDeterminismLevelOutput) ToRoutineDeterminismLevelPtrOutputWithContext(ctx context.Context) RoutineDeterminismLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutineDeterminismLevel) *RoutineDeterminismLevel {
		return &v
	}).(RoutineDeterminismLevelPtrOutput)
}

func (o RoutineDeterminismLevelOutput) ToOutput(ctx context.Context) pulumix.Output[RoutineDeterminismLevel] {
	return pulumix.Output[RoutineDeterminismLevel]{
		OutputState: o.OutputState,
	}
}

func (o RoutineDeterminismLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RoutineDeterminismLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutineDeterminismLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RoutineDeterminismLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutineDeterminismLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutineDeterminismLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RoutineDeterminismLevelPtrOutput struct{ *pulumi.OutputState }

func (RoutineDeterminismLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineDeterminismLevel)(nil)).Elem()
}

func (o RoutineDeterminismLevelPtrOutput) ToRoutineDeterminismLevelPtrOutput() RoutineDeterminismLevelPtrOutput {
	return o
}

func (o RoutineDeterminismLevelPtrOutput) ToRoutineDeterminismLevelPtrOutputWithContext(ctx context.Context) RoutineDeterminismLevelPtrOutput {
	return o
}

func (o RoutineDeterminismLevelPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RoutineDeterminismLevel] {
	return pulumix.Output[*RoutineDeterminismLevel]{
		OutputState: o.OutputState,
	}
}

func (o RoutineDeterminismLevelPtrOutput) Elem() RoutineDeterminismLevelOutput {
	return o.ApplyT(func(v *RoutineDeterminismLevel) RoutineDeterminismLevel {
		if v != nil {
			return *v
		}
		var ret RoutineDeterminismLevel
		return ret
	}).(RoutineDeterminismLevelOutput)
}

func (o RoutineDeterminismLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutineDeterminismLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RoutineDeterminismLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RoutineDeterminismLevelInput is an input type that accepts RoutineDeterminismLevelArgs and RoutineDeterminismLevelOutput values.
// You can construct a concrete instance of `RoutineDeterminismLevelInput` via:
//
//	RoutineDeterminismLevelArgs{...}
type RoutineDeterminismLevelInput interface {
	pulumi.Input

	ToRoutineDeterminismLevelOutput() RoutineDeterminismLevelOutput
	ToRoutineDeterminismLevelOutputWithContext(context.Context) RoutineDeterminismLevelOutput
}

var routineDeterminismLevelPtrType = reflect.TypeOf((**RoutineDeterminismLevel)(nil)).Elem()

type RoutineDeterminismLevelPtrInput interface {
	pulumi.Input

	ToRoutineDeterminismLevelPtrOutput() RoutineDeterminismLevelPtrOutput
	ToRoutineDeterminismLevelPtrOutputWithContext(context.Context) RoutineDeterminismLevelPtrOutput
}

type routineDeterminismLevelPtr string

func RoutineDeterminismLevelPtr(v string) RoutineDeterminismLevelPtrInput {
	return (*routineDeterminismLevelPtr)(&v)
}

func (*routineDeterminismLevelPtr) ElementType() reflect.Type {
	return routineDeterminismLevelPtrType
}

func (in *routineDeterminismLevelPtr) ToRoutineDeterminismLevelPtrOutput() RoutineDeterminismLevelPtrOutput {
	return pulumi.ToOutput(in).(RoutineDeterminismLevelPtrOutput)
}

func (in *routineDeterminismLevelPtr) ToRoutineDeterminismLevelPtrOutputWithContext(ctx context.Context) RoutineDeterminismLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RoutineDeterminismLevelPtrOutput)
}

func (in *routineDeterminismLevelPtr) ToOutput(ctx context.Context) pulumix.Output[*RoutineDeterminismLevel] {
	return pulumix.Output[*RoutineDeterminismLevel]{
		OutputState: in.ToRoutineDeterminismLevelPtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. Defaults to "SQL" if remote_function_options field is absent, not set otherwise.
type RoutineLanguage string

const (
	// Default value.
	RoutineLanguageLanguageUnspecified = RoutineLanguage("LANGUAGE_UNSPECIFIED")
	// SQL language.
	RoutineLanguageSql = RoutineLanguage("SQL")
	// JavaScript language.
	RoutineLanguageJavascript = RoutineLanguage("JAVASCRIPT")
	// Python language.
	RoutineLanguagePython = RoutineLanguage("PYTHON")
	// Java language.
	RoutineLanguageJava = RoutineLanguage("JAVA")
	// Scala language.
	RoutineLanguageScala = RoutineLanguage("SCALA")
)

func (RoutineLanguage) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineLanguage)(nil)).Elem()
}

func (e RoutineLanguage) ToRoutineLanguageOutput() RoutineLanguageOutput {
	return pulumi.ToOutput(e).(RoutineLanguageOutput)
}

func (e RoutineLanguage) ToRoutineLanguageOutputWithContext(ctx context.Context) RoutineLanguageOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RoutineLanguageOutput)
}

func (e RoutineLanguage) ToRoutineLanguagePtrOutput() RoutineLanguagePtrOutput {
	return e.ToRoutineLanguagePtrOutputWithContext(context.Background())
}

func (e RoutineLanguage) ToRoutineLanguagePtrOutputWithContext(ctx context.Context) RoutineLanguagePtrOutput {
	return RoutineLanguage(e).ToRoutineLanguageOutputWithContext(ctx).ToRoutineLanguagePtrOutputWithContext(ctx)
}

func (e RoutineLanguage) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineLanguage) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineLanguage) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutineLanguage) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RoutineLanguageOutput struct{ *pulumi.OutputState }

func (RoutineLanguageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineLanguage)(nil)).Elem()
}

func (o RoutineLanguageOutput) ToRoutineLanguageOutput() RoutineLanguageOutput {
	return o
}

func (o RoutineLanguageOutput) ToRoutineLanguageOutputWithContext(ctx context.Context) RoutineLanguageOutput {
	return o
}

func (o RoutineLanguageOutput) ToRoutineLanguagePtrOutput() RoutineLanguagePtrOutput {
	return o.ToRoutineLanguagePtrOutputWithContext(context.Background())
}

func (o RoutineLanguageOutput) ToRoutineLanguagePtrOutputWithContext(ctx context.Context) RoutineLanguagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutineLanguage) *RoutineLanguage {
		return &v
	}).(RoutineLanguagePtrOutput)
}

func (o RoutineLanguageOutput) ToOutput(ctx context.Context) pulumix.Output[RoutineLanguage] {
	return pulumix.Output[RoutineLanguage]{
		OutputState: o.OutputState,
	}
}

func (o RoutineLanguageOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RoutineLanguageOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutineLanguage) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RoutineLanguageOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutineLanguageOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutineLanguage) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RoutineLanguagePtrOutput struct{ *pulumi.OutputState }

func (RoutineLanguagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineLanguage)(nil)).Elem()
}

func (o RoutineLanguagePtrOutput) ToRoutineLanguagePtrOutput() RoutineLanguagePtrOutput {
	return o
}

func (o RoutineLanguagePtrOutput) ToRoutineLanguagePtrOutputWithContext(ctx context.Context) RoutineLanguagePtrOutput {
	return o
}

func (o RoutineLanguagePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RoutineLanguage] {
	return pulumix.Output[*RoutineLanguage]{
		OutputState: o.OutputState,
	}
}

func (o RoutineLanguagePtrOutput) Elem() RoutineLanguageOutput {
	return o.ApplyT(func(v *RoutineLanguage) RoutineLanguage {
		if v != nil {
			return *v
		}
		var ret RoutineLanguage
		return ret
	}).(RoutineLanguageOutput)
}

func (o RoutineLanguagePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutineLanguagePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RoutineLanguage) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RoutineLanguageInput is an input type that accepts RoutineLanguageArgs and RoutineLanguageOutput values.
// You can construct a concrete instance of `RoutineLanguageInput` via:
//
//	RoutineLanguageArgs{...}
type RoutineLanguageInput interface {
	pulumi.Input

	ToRoutineLanguageOutput() RoutineLanguageOutput
	ToRoutineLanguageOutputWithContext(context.Context) RoutineLanguageOutput
}

var routineLanguagePtrType = reflect.TypeOf((**RoutineLanguage)(nil)).Elem()

type RoutineLanguagePtrInput interface {
	pulumi.Input

	ToRoutineLanguagePtrOutput() RoutineLanguagePtrOutput
	ToRoutineLanguagePtrOutputWithContext(context.Context) RoutineLanguagePtrOutput
}

type routineLanguagePtr string

func RoutineLanguagePtr(v string) RoutineLanguagePtrInput {
	return (*routineLanguagePtr)(&v)
}

func (*routineLanguagePtr) ElementType() reflect.Type {
	return routineLanguagePtrType
}

func (in *routineLanguagePtr) ToRoutineLanguagePtrOutput() RoutineLanguagePtrOutput {
	return pulumi.ToOutput(in).(RoutineLanguagePtrOutput)
}

func (in *routineLanguagePtr) ToRoutineLanguagePtrOutputWithContext(ctx context.Context) RoutineLanguagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RoutineLanguagePtrOutput)
}

func (in *routineLanguagePtr) ToOutput(ctx context.Context) pulumix.Output[*RoutineLanguage] {
	return pulumix.Output[*RoutineLanguage]{
		OutputState: in.ToRoutineLanguagePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The type of routine.
type RoutineRoutineType string

const (
	// Default value.
	RoutineRoutineTypeRoutineTypeUnspecified = RoutineRoutineType("ROUTINE_TYPE_UNSPECIFIED")
	// Non-built-in persistent scalar function.
	RoutineRoutineTypeScalarFunction = RoutineRoutineType("SCALAR_FUNCTION")
	// Stored procedure.
	RoutineRoutineTypeProcedure = RoutineRoutineType("PROCEDURE")
	// Non-built-in persistent TVF.
	RoutineRoutineTypeTableValuedFunction = RoutineRoutineType("TABLE_VALUED_FUNCTION")
	// Non-built-in persistent aggregate function.
	RoutineRoutineTypeAggregateFunction = RoutineRoutineType("AGGREGATE_FUNCTION")
)

func (RoutineRoutineType) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineRoutineType)(nil)).Elem()
}

func (e RoutineRoutineType) ToRoutineRoutineTypeOutput() RoutineRoutineTypeOutput {
	return pulumi.ToOutput(e).(RoutineRoutineTypeOutput)
}

func (e RoutineRoutineType) ToRoutineRoutineTypeOutputWithContext(ctx context.Context) RoutineRoutineTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RoutineRoutineTypeOutput)
}

func (e RoutineRoutineType) ToRoutineRoutineTypePtrOutput() RoutineRoutineTypePtrOutput {
	return e.ToRoutineRoutineTypePtrOutputWithContext(context.Background())
}

func (e RoutineRoutineType) ToRoutineRoutineTypePtrOutputWithContext(ctx context.Context) RoutineRoutineTypePtrOutput {
	return RoutineRoutineType(e).ToRoutineRoutineTypeOutputWithContext(ctx).ToRoutineRoutineTypePtrOutputWithContext(ctx)
}

func (e RoutineRoutineType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineRoutineType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineRoutineType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutineRoutineType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RoutineRoutineTypeOutput struct{ *pulumi.OutputState }

func (RoutineRoutineTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineRoutineType)(nil)).Elem()
}

func (o RoutineRoutineTypeOutput) ToRoutineRoutineTypeOutput() RoutineRoutineTypeOutput {
	return o
}

func (o RoutineRoutineTypeOutput) ToRoutineRoutineTypeOutputWithContext(ctx context.Context) RoutineRoutineTypeOutput {
	return o
}

func (o RoutineRoutineTypeOutput) ToRoutineRoutineTypePtrOutput() RoutineRoutineTypePtrOutput {
	return o.ToRoutineRoutineTypePtrOutputWithContext(context.Background())
}

func (o RoutineRoutineTypeOutput) ToRoutineRoutineTypePtrOutputWithContext(ctx context.Context) RoutineRoutineTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutineRoutineType) *RoutineRoutineType {
		return &v
	}).(RoutineRoutineTypePtrOutput)
}

func (o RoutineRoutineTypeOutput) ToOutput(ctx context.Context) pulumix.Output[RoutineRoutineType] {
	return pulumix.Output[RoutineRoutineType]{
		OutputState: o.OutputState,
	}
}

func (o RoutineRoutineTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RoutineRoutineTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutineRoutineType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RoutineRoutineTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutineRoutineTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutineRoutineType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RoutineRoutineTypePtrOutput struct{ *pulumi.OutputState }

func (RoutineRoutineTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineRoutineType)(nil)).Elem()
}

func (o RoutineRoutineTypePtrOutput) ToRoutineRoutineTypePtrOutput() RoutineRoutineTypePtrOutput {
	return o
}

func (o RoutineRoutineTypePtrOutput) ToRoutineRoutineTypePtrOutputWithContext(ctx context.Context) RoutineRoutineTypePtrOutput {
	return o
}

func (o RoutineRoutineTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RoutineRoutineType] {
	return pulumix.Output[*RoutineRoutineType]{
		OutputState: o.OutputState,
	}
}

func (o RoutineRoutineTypePtrOutput) Elem() RoutineRoutineTypeOutput {
	return o.ApplyT(func(v *RoutineRoutineType) RoutineRoutineType {
		if v != nil {
			return *v
		}
		var ret RoutineRoutineType
		return ret
	}).(RoutineRoutineTypeOutput)
}

func (o RoutineRoutineTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutineRoutineTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RoutineRoutineType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RoutineRoutineTypeInput is an input type that accepts RoutineRoutineTypeArgs and RoutineRoutineTypeOutput values.
// You can construct a concrete instance of `RoutineRoutineTypeInput` via:
//
//	RoutineRoutineTypeArgs{...}
type RoutineRoutineTypeInput interface {
	pulumi.Input

	ToRoutineRoutineTypeOutput() RoutineRoutineTypeOutput
	ToRoutineRoutineTypeOutputWithContext(context.Context) RoutineRoutineTypeOutput
}

var routineRoutineTypePtrType = reflect.TypeOf((**RoutineRoutineType)(nil)).Elem()

type RoutineRoutineTypePtrInput interface {
	pulumi.Input

	ToRoutineRoutineTypePtrOutput() RoutineRoutineTypePtrOutput
	ToRoutineRoutineTypePtrOutputWithContext(context.Context) RoutineRoutineTypePtrOutput
}

type routineRoutineTypePtr string

func RoutineRoutineTypePtr(v string) RoutineRoutineTypePtrInput {
	return (*routineRoutineTypePtr)(&v)
}

func (*routineRoutineTypePtr) ElementType() reflect.Type {
	return routineRoutineTypePtrType
}

func (in *routineRoutineTypePtr) ToRoutineRoutineTypePtrOutput() RoutineRoutineTypePtrOutput {
	return pulumi.ToOutput(in).(RoutineRoutineTypePtrOutput)
}

func (in *routineRoutineTypePtr) ToRoutineRoutineTypePtrOutputWithContext(ctx context.Context) RoutineRoutineTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RoutineRoutineTypePtrOutput)
}

func (in *routineRoutineTypePtr) ToOutput(ctx context.Context) pulumix.Output[*RoutineRoutineType] {
	return pulumix.Output[*RoutineRoutineType]{
		OutputState: in.ToRoutineRoutineTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. The security mode of the routine, if defined. If not defined, the security mode is automatically determined from the routine's configuration.
type RoutineSecurityMode string

const (
	// The security mode of the routine is unspecified.
	RoutineSecurityModeSecurityModeUnspecified = RoutineSecurityMode("SECURITY_MODE_UNSPECIFIED")
	// The routine is to be executed with the privileges of the user who defines it.
	RoutineSecurityModeDefiner = RoutineSecurityMode("DEFINER")
	// The routine is to be executed with the privileges of the user who invokes it.
	RoutineSecurityModeInvoker = RoutineSecurityMode("INVOKER")
)

func (RoutineSecurityMode) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineSecurityMode)(nil)).Elem()
}

func (e RoutineSecurityMode) ToRoutineSecurityModeOutput() RoutineSecurityModeOutput {
	return pulumi.ToOutput(e).(RoutineSecurityModeOutput)
}

func (e RoutineSecurityMode) ToRoutineSecurityModeOutputWithContext(ctx context.Context) RoutineSecurityModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RoutineSecurityModeOutput)
}

func (e RoutineSecurityMode) ToRoutineSecurityModePtrOutput() RoutineSecurityModePtrOutput {
	return e.ToRoutineSecurityModePtrOutputWithContext(context.Background())
}

func (e RoutineSecurityMode) ToRoutineSecurityModePtrOutputWithContext(ctx context.Context) RoutineSecurityModePtrOutput {
	return RoutineSecurityMode(e).ToRoutineSecurityModeOutputWithContext(ctx).ToRoutineSecurityModePtrOutputWithContext(ctx)
}

func (e RoutineSecurityMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineSecurityMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutineSecurityMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutineSecurityMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RoutineSecurityModeOutput struct{ *pulumi.OutputState }

func (RoutineSecurityModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineSecurityMode)(nil)).Elem()
}

func (o RoutineSecurityModeOutput) ToRoutineSecurityModeOutput() RoutineSecurityModeOutput {
	return o
}

func (o RoutineSecurityModeOutput) ToRoutineSecurityModeOutputWithContext(ctx context.Context) RoutineSecurityModeOutput {
	return o
}

func (o RoutineSecurityModeOutput) ToRoutineSecurityModePtrOutput() RoutineSecurityModePtrOutput {
	return o.ToRoutineSecurityModePtrOutputWithContext(context.Background())
}

func (o RoutineSecurityModeOutput) ToRoutineSecurityModePtrOutputWithContext(ctx context.Context) RoutineSecurityModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutineSecurityMode) *RoutineSecurityMode {
		return &v
	}).(RoutineSecurityModePtrOutput)
}

func (o RoutineSecurityModeOutput) ToOutput(ctx context.Context) pulumix.Output[RoutineSecurityMode] {
	return pulumix.Output[RoutineSecurityMode]{
		OutputState: o.OutputState,
	}
}

func (o RoutineSecurityModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RoutineSecurityModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutineSecurityMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RoutineSecurityModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutineSecurityModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutineSecurityMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RoutineSecurityModePtrOutput struct{ *pulumi.OutputState }

func (RoutineSecurityModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineSecurityMode)(nil)).Elem()
}

func (o RoutineSecurityModePtrOutput) ToRoutineSecurityModePtrOutput() RoutineSecurityModePtrOutput {
	return o
}

func (o RoutineSecurityModePtrOutput) ToRoutineSecurityModePtrOutputWithContext(ctx context.Context) RoutineSecurityModePtrOutput {
	return o
}

func (o RoutineSecurityModePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RoutineSecurityMode] {
	return pulumix.Output[*RoutineSecurityMode]{
		OutputState: o.OutputState,
	}
}

func (o RoutineSecurityModePtrOutput) Elem() RoutineSecurityModeOutput {
	return o.ApplyT(func(v *RoutineSecurityMode) RoutineSecurityMode {
		if v != nil {
			return *v
		}
		var ret RoutineSecurityMode
		return ret
	}).(RoutineSecurityModeOutput)
}

func (o RoutineSecurityModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutineSecurityModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RoutineSecurityMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RoutineSecurityModeInput is an input type that accepts RoutineSecurityModeArgs and RoutineSecurityModeOutput values.
// You can construct a concrete instance of `RoutineSecurityModeInput` via:
//
//	RoutineSecurityModeArgs{...}
type RoutineSecurityModeInput interface {
	pulumi.Input

	ToRoutineSecurityModeOutput() RoutineSecurityModeOutput
	ToRoutineSecurityModeOutputWithContext(context.Context) RoutineSecurityModeOutput
}

var routineSecurityModePtrType = reflect.TypeOf((**RoutineSecurityMode)(nil)).Elem()

type RoutineSecurityModePtrInput interface {
	pulumi.Input

	ToRoutineSecurityModePtrOutput() RoutineSecurityModePtrOutput
	ToRoutineSecurityModePtrOutputWithContext(context.Context) RoutineSecurityModePtrOutput
}

type routineSecurityModePtr string

func RoutineSecurityModePtr(v string) RoutineSecurityModePtrInput {
	return (*routineSecurityModePtr)(&v)
}

func (*routineSecurityModePtr) ElementType() reflect.Type {
	return routineSecurityModePtrType
}

func (in *routineSecurityModePtr) ToRoutineSecurityModePtrOutput() RoutineSecurityModePtrOutput {
	return pulumi.ToOutput(in).(RoutineSecurityModePtrOutput)
}

func (in *routineSecurityModePtr) ToRoutineSecurityModePtrOutputWithContext(ctx context.Context) RoutineSecurityModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RoutineSecurityModePtrOutput)
}

func (in *routineSecurityModePtr) ToOutput(ctx context.Context) pulumix.Output[*RoutineSecurityMode] {
	return pulumix.Output[*RoutineSecurityMode]{
		OutputState: in.ToRoutineSecurityModePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
type StandardSqlDataTypeTypeKind string

const (
	// Invalid type.
	StandardSqlDataTypeTypeKindTypeKindUnspecified = StandardSqlDataTypeTypeKind("TYPE_KIND_UNSPECIFIED")
	// Encoded as a string in decimal format.
	StandardSqlDataTypeTypeKindInt64 = StandardSqlDataTypeTypeKind("INT64")
	// Encoded as a boolean "false" or "true".
	StandardSqlDataTypeTypeKindBool = StandardSqlDataTypeTypeKind("BOOL")
	// Encoded as a number, or string "NaN", "Infinity" or "-Infinity".
	StandardSqlDataTypeTypeKindFloat64 = StandardSqlDataTypeTypeKind("FLOAT64")
	// Encoded as a string value.
	StandardSqlDataTypeTypeKindString = StandardSqlDataTypeTypeKind("STRING")
	// Encoded as a base64 string per RFC 4648, section 4.
	StandardSqlDataTypeTypeKindBytes = StandardSqlDataTypeTypeKind("BYTES")
	// Encoded as an RFC 3339 timestamp with mandatory "Z" time zone string: 1985-04-12T23:20:50.52Z
	StandardSqlDataTypeTypeKindTimestamp = StandardSqlDataTypeTypeKind("TIMESTAMP")
	// Encoded as RFC 3339 full-date format string: 1985-04-12
	StandardSqlDataTypeTypeKindDate = StandardSqlDataTypeTypeKind("DATE")
	// Encoded as RFC 3339 partial-time format string: 23:20:50.52
	StandardSqlDataTypeTypeKindTime = StandardSqlDataTypeTypeKind("TIME")
	// Encoded as RFC 3339 full-date "T" partial-time: 1985-04-12T23:20:50.52
	StandardSqlDataTypeTypeKindDatetime = StandardSqlDataTypeTypeKind("DATETIME")
	// Encoded as fully qualified 3 part: 0-5 15 2:30:45.6
	StandardSqlDataTypeTypeKindInterval = StandardSqlDataTypeTypeKind("INTERVAL")
	// Encoded as WKT
	StandardSqlDataTypeTypeKindGeography = StandardSqlDataTypeTypeKind("GEOGRAPHY")
	// Encoded as a decimal string.
	StandardSqlDataTypeTypeKindNumeric = StandardSqlDataTypeTypeKind("NUMERIC")
	// Encoded as a decimal string.
	StandardSqlDataTypeTypeKindBignumeric = StandardSqlDataTypeTypeKind("BIGNUMERIC")
	// Encoded as a string.
	StandardSqlDataTypeTypeKindJson = StandardSqlDataTypeTypeKind("JSON")
	// Encoded as a list with types matching Type.array_type.
	StandardSqlDataTypeTypeKindArray = StandardSqlDataTypeTypeKind("ARRAY")
	// Encoded as a list with fields of type Type.struct_type[i]. List is used because a JSON object cannot have duplicate field names.
	StandardSqlDataTypeTypeKindStruct = StandardSqlDataTypeTypeKind("STRUCT")
	// Encoded as a pair with types matching range_element_type. Pairs must begin with "[", end with ")", and be separated by ", ".
	StandardSqlDataTypeTypeKindRange = StandardSqlDataTypeTypeKind("RANGE")
)

func (StandardSqlDataTypeTypeKind) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlDataTypeTypeKind)(nil)).Elem()
}

func (e StandardSqlDataTypeTypeKind) ToStandardSqlDataTypeTypeKindOutput() StandardSqlDataTypeTypeKindOutput {
	return pulumi.ToOutput(e).(StandardSqlDataTypeTypeKindOutput)
}

func (e StandardSqlDataTypeTypeKind) ToStandardSqlDataTypeTypeKindOutputWithContext(ctx context.Context) StandardSqlDataTypeTypeKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StandardSqlDataTypeTypeKindOutput)
}

func (e StandardSqlDataTypeTypeKind) ToStandardSqlDataTypeTypeKindPtrOutput() StandardSqlDataTypeTypeKindPtrOutput {
	return e.ToStandardSqlDataTypeTypeKindPtrOutputWithContext(context.Background())
}

func (e StandardSqlDataTypeTypeKind) ToStandardSqlDataTypeTypeKindPtrOutputWithContext(ctx context.Context) StandardSqlDataTypeTypeKindPtrOutput {
	return StandardSqlDataTypeTypeKind(e).ToStandardSqlDataTypeTypeKindOutputWithContext(ctx).ToStandardSqlDataTypeTypeKindPtrOutputWithContext(ctx)
}

func (e StandardSqlDataTypeTypeKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StandardSqlDataTypeTypeKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StandardSqlDataTypeTypeKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StandardSqlDataTypeTypeKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StandardSqlDataTypeTypeKindOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypeTypeKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlDataTypeTypeKind)(nil)).Elem()
}

func (o StandardSqlDataTypeTypeKindOutput) ToStandardSqlDataTypeTypeKindOutput() StandardSqlDataTypeTypeKindOutput {
	return o
}

func (o StandardSqlDataTypeTypeKindOutput) ToStandardSqlDataTypeTypeKindOutputWithContext(ctx context.Context) StandardSqlDataTypeTypeKindOutput {
	return o
}

func (o StandardSqlDataTypeTypeKindOutput) ToStandardSqlDataTypeTypeKindPtrOutput() StandardSqlDataTypeTypeKindPtrOutput {
	return o.ToStandardSqlDataTypeTypeKindPtrOutputWithContext(context.Background())
}

func (o StandardSqlDataTypeTypeKindOutput) ToStandardSqlDataTypeTypeKindPtrOutputWithContext(ctx context.Context) StandardSqlDataTypeTypeKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardSqlDataTypeTypeKind) *StandardSqlDataTypeTypeKind {
		return &v
	}).(StandardSqlDataTypeTypeKindPtrOutput)
}

func (o StandardSqlDataTypeTypeKindOutput) ToOutput(ctx context.Context) pulumix.Output[StandardSqlDataTypeTypeKind] {
	return pulumix.Output[StandardSqlDataTypeTypeKind]{
		OutputState: o.OutputState,
	}
}

func (o StandardSqlDataTypeTypeKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StandardSqlDataTypeTypeKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StandardSqlDataTypeTypeKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StandardSqlDataTypeTypeKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StandardSqlDataTypeTypeKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StandardSqlDataTypeTypeKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StandardSqlDataTypeTypeKindPtrOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypeTypeKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlDataTypeTypeKind)(nil)).Elem()
}

func (o StandardSqlDataTypeTypeKindPtrOutput) ToStandardSqlDataTypeTypeKindPtrOutput() StandardSqlDataTypeTypeKindPtrOutput {
	return o
}

func (o StandardSqlDataTypeTypeKindPtrOutput) ToStandardSqlDataTypeTypeKindPtrOutputWithContext(ctx context.Context) StandardSqlDataTypeTypeKindPtrOutput {
	return o
}

func (o StandardSqlDataTypeTypeKindPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StandardSqlDataTypeTypeKind] {
	return pulumix.Output[*StandardSqlDataTypeTypeKind]{
		OutputState: o.OutputState,
	}
}

func (o StandardSqlDataTypeTypeKindPtrOutput) Elem() StandardSqlDataTypeTypeKindOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeTypeKind) StandardSqlDataTypeTypeKind {
		if v != nil {
			return *v
		}
		var ret StandardSqlDataTypeTypeKind
		return ret
	}).(StandardSqlDataTypeTypeKindOutput)
}

func (o StandardSqlDataTypeTypeKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StandardSqlDataTypeTypeKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StandardSqlDataTypeTypeKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StandardSqlDataTypeTypeKindInput is an input type that accepts StandardSqlDataTypeTypeKindArgs and StandardSqlDataTypeTypeKindOutput values.
// You can construct a concrete instance of `StandardSqlDataTypeTypeKindInput` via:
//
//	StandardSqlDataTypeTypeKindArgs{...}
type StandardSqlDataTypeTypeKindInput interface {
	pulumi.Input

	ToStandardSqlDataTypeTypeKindOutput() StandardSqlDataTypeTypeKindOutput
	ToStandardSqlDataTypeTypeKindOutputWithContext(context.Context) StandardSqlDataTypeTypeKindOutput
}

var standardSqlDataTypeTypeKindPtrType = reflect.TypeOf((**StandardSqlDataTypeTypeKind)(nil)).Elem()

type StandardSqlDataTypeTypeKindPtrInput interface {
	pulumi.Input

	ToStandardSqlDataTypeTypeKindPtrOutput() StandardSqlDataTypeTypeKindPtrOutput
	ToStandardSqlDataTypeTypeKindPtrOutputWithContext(context.Context) StandardSqlDataTypeTypeKindPtrOutput
}

type standardSqlDataTypeTypeKindPtr string

func StandardSqlDataTypeTypeKindPtr(v string) StandardSqlDataTypeTypeKindPtrInput {
	return (*standardSqlDataTypeTypeKindPtr)(&v)
}

func (*standardSqlDataTypeTypeKindPtr) ElementType() reflect.Type {
	return standardSqlDataTypeTypeKindPtrType
}

func (in *standardSqlDataTypeTypeKindPtr) ToStandardSqlDataTypeTypeKindPtrOutput() StandardSqlDataTypeTypeKindPtrOutput {
	return pulumi.ToOutput(in).(StandardSqlDataTypeTypeKindPtrOutput)
}

func (in *standardSqlDataTypeTypeKindPtr) ToStandardSqlDataTypeTypeKindPtrOutputWithContext(ctx context.Context) StandardSqlDataTypeTypeKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StandardSqlDataTypeTypeKindPtrOutput)
}

func (in *standardSqlDataTypeTypeKindPtr) ToOutput(ctx context.Context) pulumix.Output[*StandardSqlDataTypeTypeKind] {
	return pulumix.Output[*StandardSqlDataTypeTypeKind]{
		OutputState: in.ToStandardSqlDataTypeTypeKindPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArgumentArgumentKindInput)(nil)).Elem(), ArgumentArgumentKind("ARGUMENT_KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ArgumentArgumentKindPtrInput)(nil)).Elem(), ArgumentArgumentKind("ARGUMENT_KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ArgumentModeInput)(nil)).Elem(), ArgumentMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ArgumentModePtrInput)(nil)).Elem(), ArgumentMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypeInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypePtrInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessEntryTargetTypesItemInput)(nil)).Elem(), DatasetAccessEntryTargetTypesItem("TARGET_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessEntryTargetTypesItemPtrInput)(nil)).Elem(), DatasetAccessEntryTargetTypesItem("TARGET_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessEntryTargetTypesItemArrayInput)(nil)).Elem(), DatasetAccessEntryTargetTypesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineDataGovernanceTypeInput)(nil)).Elem(), RoutineDataGovernanceType("DATA_GOVERNANCE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineDataGovernanceTypePtrInput)(nil)).Elem(), RoutineDataGovernanceType("DATA_GOVERNANCE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineDeterminismLevelInput)(nil)).Elem(), RoutineDeterminismLevel("DETERMINISM_LEVEL_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineDeterminismLevelPtrInput)(nil)).Elem(), RoutineDeterminismLevel("DETERMINISM_LEVEL_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineLanguageInput)(nil)).Elem(), RoutineLanguage("LANGUAGE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineLanguagePtrInput)(nil)).Elem(), RoutineLanguage("LANGUAGE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineRoutineTypeInput)(nil)).Elem(), RoutineRoutineType("ROUTINE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineRoutineTypePtrInput)(nil)).Elem(), RoutineRoutineType("ROUTINE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineSecurityModeInput)(nil)).Elem(), RoutineSecurityMode("SECURITY_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineSecurityModePtrInput)(nil)).Elem(), RoutineSecurityMode("SECURITY_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlDataTypeTypeKindInput)(nil)).Elem(), StandardSqlDataTypeTypeKind("TYPE_KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlDataTypeTypeKindPtrInput)(nil)).Elem(), StandardSqlDataTypeTypeKind("TYPE_KIND_UNSPECIFIED"))
	pulumi.RegisterOutputType(ArgumentArgumentKindOutput{})
	pulumi.RegisterOutputType(ArgumentArgumentKindPtrOutput{})
	pulumi.RegisterOutputType(ArgumentModeOutput{})
	pulumi.RegisterOutputType(ArgumentModePtrOutput{})
	pulumi.RegisterOutputType(AuditLogConfigLogTypeOutput{})
	pulumi.RegisterOutputType(AuditLogConfigLogTypePtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessEntryTargetTypesItemOutput{})
	pulumi.RegisterOutputType(DatasetAccessEntryTargetTypesItemPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessEntryTargetTypesItemArrayOutput{})
	pulumi.RegisterOutputType(RoutineDataGovernanceTypeOutput{})
	pulumi.RegisterOutputType(RoutineDataGovernanceTypePtrOutput{})
	pulumi.RegisterOutputType(RoutineDeterminismLevelOutput{})
	pulumi.RegisterOutputType(RoutineDeterminismLevelPtrOutput{})
	pulumi.RegisterOutputType(RoutineLanguageOutput{})
	pulumi.RegisterOutputType(RoutineLanguagePtrOutput{})
	pulumi.RegisterOutputType(RoutineRoutineTypeOutput{})
	pulumi.RegisterOutputType(RoutineRoutineTypePtrOutput{})
	pulumi.RegisterOutputType(RoutineSecurityModeOutput{})
	pulumi.RegisterOutputType(RoutineSecurityModePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypeTypeKindOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypeTypeKindPtrOutput{})
}
