// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the specified routine resource by routine ID.
func LookupRoutine(ctx *pulumi.Context, args *LookupRoutineArgs, opts ...pulumi.InvokeOption) (*LookupRoutineResult, error) {
	var rv LookupRoutineResult
	err := ctx.Invoke("google-native:bigquery/v2:getRoutine", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRoutineArgs struct {
	DatasetId string  `pulumi:"datasetId"`
	Project   string  `pulumi:"project"`
	ReadMask  *string `pulumi:"readMask"`
	RoutineId string  `pulumi:"routineId"`
}

type LookupRoutineResult struct {
	// Optional.
	Arguments []ArgumentResponse `pulumi:"arguments"`
	// The time when this routine was created, in milliseconds since the epoch.
	CreationTime string `pulumi:"creationTime"`
	// The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, "\n", y))` The definition_body is `concat(x, "\n", y)` (\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return "\n";\n'` The definition_body is `return "\n";\n` Note that both \n are replaced with linebreaks.
	DefinitionBody string `pulumi:"definitionBody"`
	// Optional. [Experimental] The description of the routine if defined.
	Description string `pulumi:"description"`
	// Optional. [Experimental] The determinism level of the JavaScript UDF if defined.
	DeterminismLevel string `pulumi:"determinismLevel"`
	// A hash of this resource.
	Etag string `pulumi:"etag"`
	// Optional. If language = "JAVASCRIPT", this field stores the path of the imported JAVASCRIPT libraries.
	ImportedLibraries []string `pulumi:"importedLibraries"`
	// Optional. Defaults to "SQL".
	Language string `pulumi:"language"`
	// The time when this routine was last modified, in milliseconds since the epoch.
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Optional. Set only if Routine is a "TABLE_VALUED_FUNCTION".
	ReturnTableType StandardSqlTableTypeResponse `pulumi:"returnTableType"`
	// Optional if language = "SQL"; required otherwise. If absent, the return type is inferred from definition_body at query time in each query that references this routine. If present, then the evaluated result will be cast to the specified returned type at query time. For example, for the functions created with the following statements: * `CREATE FUNCTION Add(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (x + y);` * `CREATE FUNCTION Increment(x FLOAT64) AS (Add(x, 1));` * `CREATE FUNCTION Decrement(x FLOAT64) RETURNS FLOAT64 AS (Add(x, -1));` The return_type is `{type_kind: "FLOAT64"}` for `Add` and `Decrement`, and is absent for `Increment` (inferred as FLOAT64 at query time). Suppose the function `Add` is replaced by `CREATE OR REPLACE FUNCTION Add(x INT64, y INT64) AS (x + y);` Then the inferred return type of `Increment` is automatically changed to INT64 at query time, while the return type of `Decrement` remains FLOAT64.
	ReturnType StandardSqlDataTypeResponse `pulumi:"returnType"`
	// Reference describing the ID of this routine.
	RoutineReference RoutineReferenceResponse `pulumi:"routineReference"`
	// The type of routine.
	RoutineType string `pulumi:"routineType"`
}
