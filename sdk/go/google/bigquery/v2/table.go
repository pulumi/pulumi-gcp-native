// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new, empty table in the dataset.
// Auto-naming is currently not supported for this resource.
type Table struct {
	pulumi.CustomResourceState

	// Optional. Specifies the configuration of a BigLake managed table.
	BiglakeConfiguration BigLakeConfigurationResponseOutput `pulumi:"biglakeConfiguration"`
	// Contains information about the clone. This value is set via the clone operation.
	CloneDefinition CloneDefinitionResponseOutput `pulumi:"cloneDefinition"`
	// Clustering specification for the table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering ClusteringResponseOutput `pulumi:"clustering"`
	// The time when this table was created, in milliseconds since the epoch.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	DatasetId    pulumi.StringOutput `pulumi:"datasetId"`
	// Optional. Defines the default collation specification of new STRING fields in the table. During table creation or update, if a STRING field is added to this table without explicit collation specified, then the table inherits the table default collation. A change to this field affects only fields added afterwards, and does not alter the existing fields. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.
	DefaultCollation pulumi.StringOutput `pulumi:"defaultCollation"`
	// Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.
	DefaultRoundingMode pulumi.StringOutput `pulumi:"defaultRoundingMode"`
	// Optional. A user-friendly description of this table.
	Description pulumi.StringOutput `pulumi:"description"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	EncryptionConfiguration EncryptionConfigurationResponseOutput `pulumi:"encryptionConfiguration"`
	// A hash of this resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Optional. The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// Optional. Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
	ExternalDataConfiguration ExternalDataConfigurationResponseOutput `pulumi:"externalDataConfiguration"`
	// Optional. A descriptive name for this table.
	FriendlyName pulumi.StringOutput `pulumi:"friendlyName"`
	// The type of resource ID.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The time when this table was last modified, in milliseconds since the epoch.
	LastModifiedTime pulumi.StringOutput `pulumi:"lastModifiedTime"`
	// The geographic location where the table resides. This value is inherited from the dataset.
	Location pulumi.StringOutput `pulumi:"location"`
	// Optional. The materialized view definition.
	MaterializedView MaterializedViewDefinitionResponseOutput `pulumi:"materializedView"`
	// The materialized view status.
	MaterializedViewStatus MaterializedViewStatusResponseOutput `pulumi:"materializedViewStatus"`
	// Optional. The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.
	MaxStaleness pulumi.StringOutput `pulumi:"maxStaleness"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Model ModelDefinitionResponseOutput `pulumi:"model"`
	// Number of logical bytes that are less than 90 days old.
	NumActiveLogicalBytes pulumi.StringOutput `pulumi:"numActiveLogicalBytes"`
	// Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
	NumActivePhysicalBytes pulumi.StringOutput `pulumi:"numActivePhysicalBytes"`
	// The size of this table in logical bytes, excluding any data in the streaming buffer.
	NumBytes pulumi.StringOutput `pulumi:"numBytes"`
	// The number of logical bytes in the table that are considered "long-term storage".
	NumLongTermBytes pulumi.StringOutput `pulumi:"numLongTermBytes"`
	// Number of logical bytes that are more than 90 days old.
	NumLongTermLogicalBytes pulumi.StringOutput `pulumi:"numLongTermLogicalBytes"`
	// Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
	NumLongTermPhysicalBytes pulumi.StringOutput `pulumi:"numLongTermPhysicalBytes"`
	// The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
	NumPartitions pulumi.StringOutput `pulumi:"numPartitions"`
	// The physical size of this table in bytes. This includes storage used for time travel.
	NumPhysicalBytes pulumi.StringOutput `pulumi:"numPhysicalBytes"`
	// The number of rows of data in this table, excluding any data in the streaming buffer.
	NumRows pulumi.StringOutput `pulumi:"numRows"`
	// Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
	NumTimeTravelPhysicalBytes pulumi.StringOutput `pulumi:"numTimeTravelPhysicalBytes"`
	// Total number of logical bytes in the table or materialized view.
	NumTotalLogicalBytes pulumi.StringOutput `pulumi:"numTotalLogicalBytes"`
	// The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
	NumTotalPhysicalBytes pulumi.StringOutput `pulumi:"numTotalPhysicalBytes"`
	// The partition information for all table formats, including managed partitioned tables, hive partitioned tables, and iceberg partitioned tables.
	PartitionDefinition PartitioningDefinitionResponseOutput `pulumi:"partitionDefinition"`
	Project             pulumi.StringOutput                  `pulumi:"project"`
	// If specified, configures range partitioning for this table.
	RangePartitioning RangePartitioningResponseOutput `pulumi:"rangePartitioning"`
	// Optional. Output only. Table references of all replicas currently active on the table.
	Replicas TableReferenceResponseArrayOutput `pulumi:"replicas"`
	// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
	RequirePartitionFilter pulumi.BoolOutput `pulumi:"requirePartitionFilter"`
	// [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of "key": value pairs. The key is the namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. "production".
	ResourceTags pulumi.StringMapOutput `pulumi:"resourceTags"`
	// Optional. Describes the schema of this table.
	Schema TableSchemaResponseOutput `pulumi:"schema"`
	// A URL that can be used to access this resource again.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Contains information about the snapshot. This value is set via snapshot creation.
	SnapshotDefinition SnapshotDefinitionResponseOutput `pulumi:"snapshotDefinition"`
	// Contains information regarding this table's streaming buffer, if one is present. This field will be absent if the table is not being streamed to or if there is no data in the streaming buffer.
	StreamingBuffer StreamingbufferResponseOutput `pulumi:"streamingBuffer"`
	// Optional. Tables Primary Key and Foreign Key information
	TableConstraints TableConstraintsResponseOutput `pulumi:"tableConstraints"`
	// Reference describing the ID of this table.
	TableReference TableReferenceResponseOutput `pulumi:"tableReference"`
	// Optional. Table replication info for table created `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
	TableReplicationInfo TableReplicationInfoResponseOutput `pulumi:"tableReplicationInfo"`
	// If specified, configures time-based partitioning for this table.
	TimePartitioning TimePartitioningResponseOutput `pulumi:"timePartitioning"`
	// Describes the table type. The following values are supported: * `TABLE`: A normal BigQuery table. * `VIEW`: A virtual table defined by a SQL query. * `EXTERNAL`: A table that references data stored in an external storage system, such as Google Cloud Storage. * `MATERIALIZED_VIEW`: A precomputed view defined by a SQL query. * `SNAPSHOT`: An immutable BigQuery table that preserves the contents of a base table at a particular time. See additional information on [table snapshots](/bigquery/docs/table-snapshots-intro). The default value is `TABLE`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Optional. The view definition.
	View ViewDefinitionResponseOutput `pulumi:"view"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOption) (*Table, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.TableReference == nil {
		return nil, errors.New("invalid value for required argument 'TableReference'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"datasetId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Table
	err := ctx.RegisterResource("google-native:bigquery/v2:Table", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableState, opts ...pulumi.ResourceOption) (*Table, error) {
	var resource Table
	err := ctx.ReadResource("google-native:bigquery/v2:Table", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Table resources.
type tableState struct {
}

type TableState struct {
}

func (TableState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableState)(nil)).Elem()
}

type tableArgs struct {
	// Optional. Specifies the configuration of a BigLake managed table.
	BiglakeConfiguration *BigLakeConfiguration `pulumi:"biglakeConfiguration"`
	// Clustering specification for the table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering *Clustering `pulumi:"clustering"`
	DatasetId  string      `pulumi:"datasetId"`
	// Optional. Defines the default collation specification of new STRING fields in the table. During table creation or update, if a STRING field is added to this table without explicit collation specified, then the table inherits the table default collation. A change to this field affects only fields added afterwards, and does not alter the existing fields. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.
	DefaultCollation *string `pulumi:"defaultCollation"`
	// Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.
	DefaultRoundingMode *TableDefaultRoundingMode `pulumi:"defaultRoundingMode"`
	// Optional. A user-friendly description of this table.
	Description *string `pulumi:"description"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	EncryptionConfiguration *EncryptionConfiguration `pulumi:"encryptionConfiguration"`
	// Optional. The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Optional. Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
	ExternalDataConfiguration *ExternalDataConfiguration `pulumi:"externalDataConfiguration"`
	// Optional. A descriptive name for this table.
	FriendlyName *string `pulumi:"friendlyName"`
	// The type of resource ID.
	Kind *string `pulumi:"kind"`
	// The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels map[string]string `pulumi:"labels"`
	// Optional. The materialized view definition.
	MaterializedView *MaterializedViewDefinition `pulumi:"materializedView"`
	// Optional. The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.
	MaxStaleness *string `pulumi:"maxStaleness"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Model   *ModelDefinition `pulumi:"model"`
	Project *string          `pulumi:"project"`
	// If specified, configures range partitioning for this table.
	RangePartitioning *RangePartitioning `pulumi:"rangePartitioning"`
	// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of "key": value pairs. The key is the namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. "production".
	ResourceTags map[string]string `pulumi:"resourceTags"`
	// Optional. Describes the schema of this table.
	Schema *TableSchema `pulumi:"schema"`
	// Optional. Tables Primary Key and Foreign Key information
	TableConstraints *TableConstraints `pulumi:"tableConstraints"`
	// Reference describing the ID of this table.
	TableReference TableReference `pulumi:"tableReference"`
	// Optional. Table replication info for table created `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
	TableReplicationInfo *TableReplicationInfo `pulumi:"tableReplicationInfo"`
	// If specified, configures time-based partitioning for this table.
	TimePartitioning *TimePartitioning `pulumi:"timePartitioning"`
	// Optional. The view definition.
	View *ViewDefinition `pulumi:"view"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// Optional. Specifies the configuration of a BigLake managed table.
	BiglakeConfiguration BigLakeConfigurationPtrInput
	// Clustering specification for the table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering ClusteringPtrInput
	DatasetId  pulumi.StringInput
	// Optional. Defines the default collation specification of new STRING fields in the table. During table creation or update, if a STRING field is added to this table without explicit collation specified, then the table inherits the table default collation. A change to this field affects only fields added afterwards, and does not alter the existing fields. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.
	DefaultCollation pulumi.StringPtrInput
	// Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.
	DefaultRoundingMode TableDefaultRoundingModePtrInput
	// Optional. A user-friendly description of this table.
	Description pulumi.StringPtrInput
	// Custom encryption configuration (e.g., Cloud KMS keys).
	EncryptionConfiguration EncryptionConfigurationPtrInput
	// Optional. The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.
	ExpirationTime pulumi.StringPtrInput
	// Optional. Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
	ExternalDataConfiguration ExternalDataConfigurationPtrInput
	// Optional. A descriptive name for this table.
	FriendlyName pulumi.StringPtrInput
	// The type of resource ID.
	Kind pulumi.StringPtrInput
	// The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels pulumi.StringMapInput
	// Optional. The materialized view definition.
	MaterializedView MaterializedViewDefinitionPtrInput
	// Optional. The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.
	MaxStaleness pulumi.StringPtrInput
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Model   ModelDefinitionPtrInput
	Project pulumi.StringPtrInput
	// If specified, configures range partitioning for this table.
	RangePartitioning RangePartitioningPtrInput
	// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
	RequirePartitionFilter pulumi.BoolPtrInput
	// [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of "key": value pairs. The key is the namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. "production".
	ResourceTags pulumi.StringMapInput
	// Optional. Describes the schema of this table.
	Schema TableSchemaPtrInput
	// Optional. Tables Primary Key and Foreign Key information
	TableConstraints TableConstraintsPtrInput
	// Reference describing the ID of this table.
	TableReference TableReferenceInput
	// Optional. Table replication info for table created `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
	TableReplicationInfo TableReplicationInfoPtrInput
	// If specified, configures time-based partitioning for this table.
	TimePartitioning TimePartitioningPtrInput
	// Optional. The view definition.
	View ViewDefinitionPtrInput
}

func (TableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableArgs)(nil)).Elem()
}

type TableInput interface {
	pulumi.Input

	ToTableOutput() TableOutput
	ToTableOutputWithContext(ctx context.Context) TableOutput
}

func (*Table) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (i *Table) ToTableOutput() TableOutput {
	return i.ToTableOutputWithContext(context.Background())
}

func (i *Table) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableOutput)
}

type TableOutput struct{ *pulumi.OutputState }

func (TableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Table)(nil)).Elem()
}

func (o TableOutput) ToTableOutput() TableOutput {
	return o
}

func (o TableOutput) ToTableOutputWithContext(ctx context.Context) TableOutput {
	return o
}

// Optional. Specifies the configuration of a BigLake managed table.
func (o TableOutput) BiglakeConfiguration() BigLakeConfigurationResponseOutput {
	return o.ApplyT(func(v *Table) BigLakeConfigurationResponseOutput { return v.BiglakeConfiguration }).(BigLakeConfigurationResponseOutput)
}

// Contains information about the clone. This value is set via the clone operation.
func (o TableOutput) CloneDefinition() CloneDefinitionResponseOutput {
	return o.ApplyT(func(v *Table) CloneDefinitionResponseOutput { return v.CloneDefinition }).(CloneDefinitionResponseOutput)
}

// Clustering specification for the table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o TableOutput) Clustering() ClusteringResponseOutput {
	return o.ApplyT(func(v *Table) ClusteringResponseOutput { return v.Clustering }).(ClusteringResponseOutput)
}

// The time when this table was created, in milliseconds since the epoch.
func (o TableOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

func (o TableOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

// Optional. Defines the default collation specification of new STRING fields in the table. During table creation or update, if a STRING field is added to this table without explicit collation specified, then the table inherits the table default collation. A change to this field affects only fields added afterwards, and does not alter the existing fields. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * ”: empty string. Default to case-sensitive behavior.
func (o TableOutput) DefaultCollation() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DefaultCollation }).(pulumi.StringOutput)
}

// Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.
func (o TableOutput) DefaultRoundingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.DefaultRoundingMode }).(pulumi.StringOutput)
}

// Optional. A user-friendly description of this table.
func (o TableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o TableOutput) EncryptionConfiguration() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v *Table) EncryptionConfigurationResponseOutput { return v.EncryptionConfiguration }).(EncryptionConfigurationResponseOutput)
}

// A hash of this resource.
func (o TableOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Optional. The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.
func (o TableOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

// Optional. Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
func (o TableOutput) ExternalDataConfiguration() ExternalDataConfigurationResponseOutput {
	return o.ApplyT(func(v *Table) ExternalDataConfigurationResponseOutput { return v.ExternalDataConfiguration }).(ExternalDataConfigurationResponseOutput)
}

// Optional. A descriptive name for this table.
func (o TableOutput) FriendlyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.FriendlyName }).(pulumi.StringOutput)
}

// The type of resource ID.
func (o TableOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
func (o TableOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Table) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The time when this table was last modified, in milliseconds since the epoch.
func (o TableOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The geographic location where the table resides. This value is inherited from the dataset.
func (o TableOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. The materialized view definition.
func (o TableOutput) MaterializedView() MaterializedViewDefinitionResponseOutput {
	return o.ApplyT(func(v *Table) MaterializedViewDefinitionResponseOutput { return v.MaterializedView }).(MaterializedViewDefinitionResponseOutput)
}

// The materialized view status.
func (o TableOutput) MaterializedViewStatus() MaterializedViewStatusResponseOutput {
	return o.ApplyT(func(v *Table) MaterializedViewStatusResponseOutput { return v.MaterializedViewStatus }).(MaterializedViewStatusResponseOutput)
}

// Optional. The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.
func (o TableOutput) MaxStaleness() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.MaxStaleness }).(pulumi.StringOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o TableOutput) Model() ModelDefinitionResponseOutput {
	return o.ApplyT(func(v *Table) ModelDefinitionResponseOutput { return v.Model }).(ModelDefinitionResponseOutput)
}

// Number of logical bytes that are less than 90 days old.
func (o TableOutput) NumActiveLogicalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumActiveLogicalBytes }).(pulumi.StringOutput)
}

// Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
func (o TableOutput) NumActivePhysicalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumActivePhysicalBytes }).(pulumi.StringOutput)
}

// The size of this table in logical bytes, excluding any data in the streaming buffer.
func (o TableOutput) NumBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumBytes }).(pulumi.StringOutput)
}

// The number of logical bytes in the table that are considered "long-term storage".
func (o TableOutput) NumLongTermBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumLongTermBytes }).(pulumi.StringOutput)
}

// Number of logical bytes that are more than 90 days old.
func (o TableOutput) NumLongTermLogicalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumLongTermLogicalBytes }).(pulumi.StringOutput)
}

// Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
func (o TableOutput) NumLongTermPhysicalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumLongTermPhysicalBytes }).(pulumi.StringOutput)
}

// The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
func (o TableOutput) NumPartitions() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumPartitions }).(pulumi.StringOutput)
}

// The physical size of this table in bytes. This includes storage used for time travel.
func (o TableOutput) NumPhysicalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumPhysicalBytes }).(pulumi.StringOutput)
}

// The number of rows of data in this table, excluding any data in the streaming buffer.
func (o TableOutput) NumRows() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumRows }).(pulumi.StringOutput)
}

// Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
func (o TableOutput) NumTimeTravelPhysicalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumTimeTravelPhysicalBytes }).(pulumi.StringOutput)
}

// Total number of logical bytes in the table or materialized view.
func (o TableOutput) NumTotalLogicalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumTotalLogicalBytes }).(pulumi.StringOutput)
}

// The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
func (o TableOutput) NumTotalPhysicalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.NumTotalPhysicalBytes }).(pulumi.StringOutput)
}

// The partition information for all table formats, including managed partitioned tables, hive partitioned tables, and iceberg partitioned tables.
func (o TableOutput) PartitionDefinition() PartitioningDefinitionResponseOutput {
	return o.ApplyT(func(v *Table) PartitioningDefinitionResponseOutput { return v.PartitionDefinition }).(PartitioningDefinitionResponseOutput)
}

func (o TableOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If specified, configures range partitioning for this table.
func (o TableOutput) RangePartitioning() RangePartitioningResponseOutput {
	return o.ApplyT(func(v *Table) RangePartitioningResponseOutput { return v.RangePartitioning }).(RangePartitioningResponseOutput)
}

// Optional. Output only. Table references of all replicas currently active on the table.
func (o TableOutput) Replicas() TableReferenceResponseArrayOutput {
	return o.ApplyT(func(v *Table) TableReferenceResponseArrayOutput { return v.Replicas }).(TableReferenceResponseArrayOutput)
}

// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
func (o TableOutput) RequirePartitionFilter() pulumi.BoolOutput {
	return o.ApplyT(func(v *Table) pulumi.BoolOutput { return v.RequirePartitionFilter }).(pulumi.BoolOutput)
}

// [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of "key": value pairs. The key is the namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. "production".
func (o TableOutput) ResourceTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Table) pulumi.StringMapOutput { return v.ResourceTags }).(pulumi.StringMapOutput)
}

// Optional. Describes the schema of this table.
func (o TableOutput) Schema() TableSchemaResponseOutput {
	return o.ApplyT(func(v *Table) TableSchemaResponseOutput { return v.Schema }).(TableSchemaResponseOutput)
}

// A URL that can be used to access this resource again.
func (o TableOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Contains information about the snapshot. This value is set via snapshot creation.
func (o TableOutput) SnapshotDefinition() SnapshotDefinitionResponseOutput {
	return o.ApplyT(func(v *Table) SnapshotDefinitionResponseOutput { return v.SnapshotDefinition }).(SnapshotDefinitionResponseOutput)
}

// Contains information regarding this table's streaming buffer, if one is present. This field will be absent if the table is not being streamed to or if there is no data in the streaming buffer.
func (o TableOutput) StreamingBuffer() StreamingbufferResponseOutput {
	return o.ApplyT(func(v *Table) StreamingbufferResponseOutput { return v.StreamingBuffer }).(StreamingbufferResponseOutput)
}

// Optional. Tables Primary Key and Foreign Key information
func (o TableOutput) TableConstraints() TableConstraintsResponseOutput {
	return o.ApplyT(func(v *Table) TableConstraintsResponseOutput { return v.TableConstraints }).(TableConstraintsResponseOutput)
}

// Reference describing the ID of this table.
func (o TableOutput) TableReference() TableReferenceResponseOutput {
	return o.ApplyT(func(v *Table) TableReferenceResponseOutput { return v.TableReference }).(TableReferenceResponseOutput)
}

// Optional. Table replication info for table created `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
func (o TableOutput) TableReplicationInfo() TableReplicationInfoResponseOutput {
	return o.ApplyT(func(v *Table) TableReplicationInfoResponseOutput { return v.TableReplicationInfo }).(TableReplicationInfoResponseOutput)
}

// If specified, configures time-based partitioning for this table.
func (o TableOutput) TimePartitioning() TimePartitioningResponseOutput {
	return o.ApplyT(func(v *Table) TimePartitioningResponseOutput { return v.TimePartitioning }).(TimePartitioningResponseOutput)
}

// Describes the table type. The following values are supported: * `TABLE`: A normal BigQuery table. * `VIEW`: A virtual table defined by a SQL query. * `EXTERNAL`: A table that references data stored in an external storage system, such as Google Cloud Storage. * `MATERIALIZED_VIEW`: A precomputed view defined by a SQL query. * `SNAPSHOT`: An immutable BigQuery table that preserves the contents of a base table at a particular time. See additional information on [table snapshots](/bigquery/docs/table-snapshots-intro). The default value is `TABLE`.
func (o TableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Table) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Optional. The view definition.
func (o TableOutput) View() ViewDefinitionResponseOutput {
	return o.ApplyT(func(v *Table) ViewDefinitionResponseOutput { return v.View }).(ViewDefinitionResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableInput)(nil)).Elem(), &Table{})
	pulumi.RegisterOutputType(TableOutput{})
}
