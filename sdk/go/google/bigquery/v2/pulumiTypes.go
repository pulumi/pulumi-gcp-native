// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Input/output argument of a function or a stored procedure.
type Argument struct {
	// Optional. Defaults to FIXED_TYPE.
	ArgumentKind *string `pulumi:"argumentKind"`
	// Required unless argument_kind = ANY_TYPE.
	DataType *StandardSqlDataType `pulumi:"dataType"`
	// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
	Mode *string `pulumi:"mode"`
	// Optional. The name of this argument. Can be absent for function return argument.
	Name *string `pulumi:"name"`
}

// ArgumentInput is an input type that accepts ArgumentArgs and ArgumentOutput values.
// You can construct a concrete instance of `ArgumentInput` via:
//
//          ArgumentArgs{...}
type ArgumentInput interface {
	pulumi.Input

	ToArgumentOutput() ArgumentOutput
	ToArgumentOutputWithContext(context.Context) ArgumentOutput
}

// Input/output argument of a function or a stored procedure.
type ArgumentArgs struct {
	// Optional. Defaults to FIXED_TYPE.
	ArgumentKind pulumi.StringPtrInput `pulumi:"argumentKind"`
	// Required unless argument_kind = ANY_TYPE.
	DataType StandardSqlDataTypePtrInput `pulumi:"dataType"`
	// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Optional. The name of this argument. Can be absent for function return argument.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Argument)(nil)).Elem()
}

func (i ArgumentArgs) ToArgumentOutput() ArgumentOutput {
	return i.ToArgumentOutputWithContext(context.Background())
}

func (i ArgumentArgs) ToArgumentOutputWithContext(ctx context.Context) ArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgumentOutput)
}

// ArgumentArrayInput is an input type that accepts ArgumentArray and ArgumentArrayOutput values.
// You can construct a concrete instance of `ArgumentArrayInput` via:
//
//          ArgumentArray{ ArgumentArgs{...} }
type ArgumentArrayInput interface {
	pulumi.Input

	ToArgumentArrayOutput() ArgumentArrayOutput
	ToArgumentArrayOutputWithContext(context.Context) ArgumentArrayOutput
}

type ArgumentArray []ArgumentInput

func (ArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Argument)(nil)).Elem()
}

func (i ArgumentArray) ToArgumentArrayOutput() ArgumentArrayOutput {
	return i.ToArgumentArrayOutputWithContext(context.Background())
}

func (i ArgumentArray) ToArgumentArrayOutputWithContext(ctx context.Context) ArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgumentArrayOutput)
}

// Input/output argument of a function or a stored procedure.
type ArgumentOutput struct{ *pulumi.OutputState }

func (ArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Argument)(nil)).Elem()
}

func (o ArgumentOutput) ToArgumentOutput() ArgumentOutput {
	return o
}

func (o ArgumentOutput) ToArgumentOutputWithContext(ctx context.Context) ArgumentOutput {
	return o
}

// Optional. Defaults to FIXED_TYPE.
func (o ArgumentOutput) ArgumentKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Argument) *string { return v.ArgumentKind }).(pulumi.StringPtrOutput)
}

// Required unless argument_kind = ANY_TYPE.
func (o ArgumentOutput) DataType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v Argument) *StandardSqlDataType { return v.DataType }).(StandardSqlDataTypePtrOutput)
}

// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
func (o ArgumentOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Argument) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Optional. The name of this argument. Can be absent for function return argument.
func (o ArgumentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Argument) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ArgumentArrayOutput struct{ *pulumi.OutputState }

func (ArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Argument)(nil)).Elem()
}

func (o ArgumentArrayOutput) ToArgumentArrayOutput() ArgumentArrayOutput {
	return o
}

func (o ArgumentArrayOutput) ToArgumentArrayOutputWithContext(ctx context.Context) ArgumentArrayOutput {
	return o
}

func (o ArgumentArrayOutput) Index(i pulumi.IntInput) ArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Argument {
		return vs[0].([]Argument)[vs[1].(int)]
	}).(ArgumentOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

type BigQueryModelTraining struct {
	// [Output-only, Beta] Index of current ML training iteration. Updated during create model query job to show job progress.
	CurrentIteration *int `pulumi:"currentIteration"`
	// [Output-only, Beta] Expected number of iterations for the create model query job specified as num_iterations in the input query. The actual total number of iterations may be less than this number due to early stop.
	ExpectedTotalIterations *string `pulumi:"expectedTotalIterations"`
}

// BigQueryModelTrainingInput is an input type that accepts BigQueryModelTrainingArgs and BigQueryModelTrainingOutput values.
// You can construct a concrete instance of `BigQueryModelTrainingInput` via:
//
//          BigQueryModelTrainingArgs{...}
type BigQueryModelTrainingInput interface {
	pulumi.Input

	ToBigQueryModelTrainingOutput() BigQueryModelTrainingOutput
	ToBigQueryModelTrainingOutputWithContext(context.Context) BigQueryModelTrainingOutput
}

type BigQueryModelTrainingArgs struct {
	// [Output-only, Beta] Index of current ML training iteration. Updated during create model query job to show job progress.
	CurrentIteration pulumi.IntPtrInput `pulumi:"currentIteration"`
	// [Output-only, Beta] Expected number of iterations for the create model query job specified as num_iterations in the input query. The actual total number of iterations may be less than this number due to early stop.
	ExpectedTotalIterations pulumi.StringPtrInput `pulumi:"expectedTotalIterations"`
}

func (BigQueryModelTrainingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryModelTraining)(nil)).Elem()
}

func (i BigQueryModelTrainingArgs) ToBigQueryModelTrainingOutput() BigQueryModelTrainingOutput {
	return i.ToBigQueryModelTrainingOutputWithContext(context.Background())
}

func (i BigQueryModelTrainingArgs) ToBigQueryModelTrainingOutputWithContext(ctx context.Context) BigQueryModelTrainingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryModelTrainingOutput)
}

func (i BigQueryModelTrainingArgs) ToBigQueryModelTrainingPtrOutput() BigQueryModelTrainingPtrOutput {
	return i.ToBigQueryModelTrainingPtrOutputWithContext(context.Background())
}

func (i BigQueryModelTrainingArgs) ToBigQueryModelTrainingPtrOutputWithContext(ctx context.Context) BigQueryModelTrainingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryModelTrainingOutput).ToBigQueryModelTrainingPtrOutputWithContext(ctx)
}

// BigQueryModelTrainingPtrInput is an input type that accepts BigQueryModelTrainingArgs, BigQueryModelTrainingPtr and BigQueryModelTrainingPtrOutput values.
// You can construct a concrete instance of `BigQueryModelTrainingPtrInput` via:
//
//          BigQueryModelTrainingArgs{...}
//
//  or:
//
//          nil
type BigQueryModelTrainingPtrInput interface {
	pulumi.Input

	ToBigQueryModelTrainingPtrOutput() BigQueryModelTrainingPtrOutput
	ToBigQueryModelTrainingPtrOutputWithContext(context.Context) BigQueryModelTrainingPtrOutput
}

type bigQueryModelTrainingPtrType BigQueryModelTrainingArgs

func BigQueryModelTrainingPtr(v *BigQueryModelTrainingArgs) BigQueryModelTrainingPtrInput {
	return (*bigQueryModelTrainingPtrType)(v)
}

func (*bigQueryModelTrainingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryModelTraining)(nil)).Elem()
}

func (i *bigQueryModelTrainingPtrType) ToBigQueryModelTrainingPtrOutput() BigQueryModelTrainingPtrOutput {
	return i.ToBigQueryModelTrainingPtrOutputWithContext(context.Background())
}

func (i *bigQueryModelTrainingPtrType) ToBigQueryModelTrainingPtrOutputWithContext(ctx context.Context) BigQueryModelTrainingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryModelTrainingPtrOutput)
}

type BigQueryModelTrainingOutput struct{ *pulumi.OutputState }

func (BigQueryModelTrainingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryModelTraining)(nil)).Elem()
}

func (o BigQueryModelTrainingOutput) ToBigQueryModelTrainingOutput() BigQueryModelTrainingOutput {
	return o
}

func (o BigQueryModelTrainingOutput) ToBigQueryModelTrainingOutputWithContext(ctx context.Context) BigQueryModelTrainingOutput {
	return o
}

func (o BigQueryModelTrainingOutput) ToBigQueryModelTrainingPtrOutput() BigQueryModelTrainingPtrOutput {
	return o.ToBigQueryModelTrainingPtrOutputWithContext(context.Background())
}

func (o BigQueryModelTrainingOutput) ToBigQueryModelTrainingPtrOutputWithContext(ctx context.Context) BigQueryModelTrainingPtrOutput {
	return o.ApplyT(func(v BigQueryModelTraining) *BigQueryModelTraining {
		return &v
	}).(BigQueryModelTrainingPtrOutput)
}

// [Output-only, Beta] Index of current ML training iteration. Updated during create model query job to show job progress.
func (o BigQueryModelTrainingOutput) CurrentIteration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BigQueryModelTraining) *int { return v.CurrentIteration }).(pulumi.IntPtrOutput)
}

// [Output-only, Beta] Expected number of iterations for the create model query job specified as num_iterations in the input query. The actual total number of iterations may be less than this number due to early stop.
func (o BigQueryModelTrainingOutput) ExpectedTotalIterations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryModelTraining) *string { return v.ExpectedTotalIterations }).(pulumi.StringPtrOutput)
}

type BigQueryModelTrainingPtrOutput struct{ *pulumi.OutputState }

func (BigQueryModelTrainingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryModelTraining)(nil)).Elem()
}

func (o BigQueryModelTrainingPtrOutput) ToBigQueryModelTrainingPtrOutput() BigQueryModelTrainingPtrOutput {
	return o
}

func (o BigQueryModelTrainingPtrOutput) ToBigQueryModelTrainingPtrOutputWithContext(ctx context.Context) BigQueryModelTrainingPtrOutput {
	return o
}

func (o BigQueryModelTrainingPtrOutput) Elem() BigQueryModelTrainingOutput {
	return o.ApplyT(func(v *BigQueryModelTraining) BigQueryModelTraining { return *v }).(BigQueryModelTrainingOutput)
}

// [Output-only, Beta] Index of current ML training iteration. Updated during create model query job to show job progress.
func (o BigQueryModelTrainingPtrOutput) CurrentIteration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BigQueryModelTraining) *int {
		if v == nil {
			return nil
		}
		return v.CurrentIteration
	}).(pulumi.IntPtrOutput)
}

// [Output-only, Beta] Expected number of iterations for the create model query job specified as num_iterations in the input query. The actual total number of iterations may be less than this number due to early stop.
func (o BigQueryModelTrainingPtrOutput) ExpectedTotalIterations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryModelTraining) *string {
		if v == nil {
			return nil
		}
		return v.ExpectedTotalIterations
	}).(pulumi.StringPtrOutput)
}

type BigtableColumn struct {
	// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
	Encoding *string `pulumi:"encoding"`
	// [Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
	FieldName *string `pulumi:"fieldName"`
	// [Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
	OnlyReadLatest *bool `pulumi:"onlyReadLatest"`
	// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
	QualifierEncoded *string `pulumi:"qualifierEncoded"`
	QualifierString  *string `pulumi:"qualifierString"`
	// [Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
	Type *string `pulumi:"type"`
}

// BigtableColumnInput is an input type that accepts BigtableColumnArgs and BigtableColumnOutput values.
// You can construct a concrete instance of `BigtableColumnInput` via:
//
//          BigtableColumnArgs{...}
type BigtableColumnInput interface {
	pulumi.Input

	ToBigtableColumnOutput() BigtableColumnOutput
	ToBigtableColumnOutputWithContext(context.Context) BigtableColumnOutput
}

type BigtableColumnArgs struct {
	// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// [Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
	FieldName pulumi.StringPtrInput `pulumi:"fieldName"`
	// [Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
	OnlyReadLatest pulumi.BoolPtrInput `pulumi:"onlyReadLatest"`
	// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
	QualifierEncoded pulumi.StringPtrInput `pulumi:"qualifierEncoded"`
	QualifierString  pulumi.StringPtrInput `pulumi:"qualifierString"`
	// [Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BigtableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumn)(nil)).Elem()
}

func (i BigtableColumnArgs) ToBigtableColumnOutput() BigtableColumnOutput {
	return i.ToBigtableColumnOutputWithContext(context.Background())
}

func (i BigtableColumnArgs) ToBigtableColumnOutputWithContext(ctx context.Context) BigtableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnOutput)
}

// BigtableColumnArrayInput is an input type that accepts BigtableColumnArray and BigtableColumnArrayOutput values.
// You can construct a concrete instance of `BigtableColumnArrayInput` via:
//
//          BigtableColumnArray{ BigtableColumnArgs{...} }
type BigtableColumnArrayInput interface {
	pulumi.Input

	ToBigtableColumnArrayOutput() BigtableColumnArrayOutput
	ToBigtableColumnArrayOutputWithContext(context.Context) BigtableColumnArrayOutput
}

type BigtableColumnArray []BigtableColumnInput

func (BigtableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumn)(nil)).Elem()
}

func (i BigtableColumnArray) ToBigtableColumnArrayOutput() BigtableColumnArrayOutput {
	return i.ToBigtableColumnArrayOutputWithContext(context.Background())
}

func (i BigtableColumnArray) ToBigtableColumnArrayOutputWithContext(ctx context.Context) BigtableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnArrayOutput)
}

type BigtableColumnOutput struct{ *pulumi.OutputState }

func (BigtableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumn)(nil)).Elem()
}

func (o BigtableColumnOutput) ToBigtableColumnOutput() BigtableColumnOutput {
	return o
}

func (o BigtableColumnOutput) ToBigtableColumnOutputWithContext(ctx context.Context) BigtableColumnOutput {
	return o
}

// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
func (o BigtableColumnOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// [Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
func (o BigtableColumnOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

// [Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
func (o BigtableColumnOutput) OnlyReadLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *bool { return v.OnlyReadLatest }).(pulumi.BoolPtrOutput)
}

// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
func (o BigtableColumnOutput) QualifierEncoded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.QualifierEncoded }).(pulumi.StringPtrOutput)
}

func (o BigtableColumnOutput) QualifierString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.QualifierString }).(pulumi.StringPtrOutput)
}

// [Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
func (o BigtableColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BigtableColumnArrayOutput struct{ *pulumi.OutputState }

func (BigtableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumn)(nil)).Elem()
}

func (o BigtableColumnArrayOutput) ToBigtableColumnArrayOutput() BigtableColumnArrayOutput {
	return o
}

func (o BigtableColumnArrayOutput) ToBigtableColumnArrayOutputWithContext(ctx context.Context) BigtableColumnArrayOutput {
	return o
}

func (o BigtableColumnArrayOutput) Index(i pulumi.IntInput) BigtableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigtableColumn {
		return vs[0].([]BigtableColumn)[vs[1].(int)]
	}).(BigtableColumnOutput)
}

type BigtableColumnFamily struct {
	// [Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
	Columns []BigtableColumn `pulumi:"columns"`
	// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
	Encoding *string `pulumi:"encoding"`
	// Identifier of the column family.
	FamilyId *string `pulumi:"familyId"`
	// [Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
	OnlyReadLatest *bool `pulumi:"onlyReadLatest"`
	// [Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
	Type *string `pulumi:"type"`
}

// BigtableColumnFamilyInput is an input type that accepts BigtableColumnFamilyArgs and BigtableColumnFamilyOutput values.
// You can construct a concrete instance of `BigtableColumnFamilyInput` via:
//
//          BigtableColumnFamilyArgs{...}
type BigtableColumnFamilyInput interface {
	pulumi.Input

	ToBigtableColumnFamilyOutput() BigtableColumnFamilyOutput
	ToBigtableColumnFamilyOutputWithContext(context.Context) BigtableColumnFamilyOutput
}

type BigtableColumnFamilyArgs struct {
	// [Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
	Columns BigtableColumnArrayInput `pulumi:"columns"`
	// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Identifier of the column family.
	FamilyId pulumi.StringPtrInput `pulumi:"familyId"`
	// [Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
	OnlyReadLatest pulumi.BoolPtrInput `pulumi:"onlyReadLatest"`
	// [Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BigtableColumnFamilyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumnFamily)(nil)).Elem()
}

func (i BigtableColumnFamilyArgs) ToBigtableColumnFamilyOutput() BigtableColumnFamilyOutput {
	return i.ToBigtableColumnFamilyOutputWithContext(context.Background())
}

func (i BigtableColumnFamilyArgs) ToBigtableColumnFamilyOutputWithContext(ctx context.Context) BigtableColumnFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnFamilyOutput)
}

// BigtableColumnFamilyArrayInput is an input type that accepts BigtableColumnFamilyArray and BigtableColumnFamilyArrayOutput values.
// You can construct a concrete instance of `BigtableColumnFamilyArrayInput` via:
//
//          BigtableColumnFamilyArray{ BigtableColumnFamilyArgs{...} }
type BigtableColumnFamilyArrayInput interface {
	pulumi.Input

	ToBigtableColumnFamilyArrayOutput() BigtableColumnFamilyArrayOutput
	ToBigtableColumnFamilyArrayOutputWithContext(context.Context) BigtableColumnFamilyArrayOutput
}

type BigtableColumnFamilyArray []BigtableColumnFamilyInput

func (BigtableColumnFamilyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumnFamily)(nil)).Elem()
}

func (i BigtableColumnFamilyArray) ToBigtableColumnFamilyArrayOutput() BigtableColumnFamilyArrayOutput {
	return i.ToBigtableColumnFamilyArrayOutputWithContext(context.Background())
}

func (i BigtableColumnFamilyArray) ToBigtableColumnFamilyArrayOutputWithContext(ctx context.Context) BigtableColumnFamilyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnFamilyArrayOutput)
}

type BigtableColumnFamilyOutput struct{ *pulumi.OutputState }

func (BigtableColumnFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumnFamily)(nil)).Elem()
}

func (o BigtableColumnFamilyOutput) ToBigtableColumnFamilyOutput() BigtableColumnFamilyOutput {
	return o
}

func (o BigtableColumnFamilyOutput) ToBigtableColumnFamilyOutputWithContext(ctx context.Context) BigtableColumnFamilyOutput {
	return o
}

// [Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
func (o BigtableColumnFamilyOutput) Columns() BigtableColumnArrayOutput {
	return o.ApplyT(func(v BigtableColumnFamily) []BigtableColumn { return v.Columns }).(BigtableColumnArrayOutput)
}

// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
func (o BigtableColumnFamilyOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Identifier of the column family.
func (o BigtableColumnFamilyOutput) FamilyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *string { return v.FamilyId }).(pulumi.StringPtrOutput)
}

// [Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
func (o BigtableColumnFamilyOutput) OnlyReadLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *bool { return v.OnlyReadLatest }).(pulumi.BoolPtrOutput)
}

// [Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
func (o BigtableColumnFamilyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BigtableColumnFamilyArrayOutput struct{ *pulumi.OutputState }

func (BigtableColumnFamilyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumnFamily)(nil)).Elem()
}

func (o BigtableColumnFamilyArrayOutput) ToBigtableColumnFamilyArrayOutput() BigtableColumnFamilyArrayOutput {
	return o
}

func (o BigtableColumnFamilyArrayOutput) ToBigtableColumnFamilyArrayOutputWithContext(ctx context.Context) BigtableColumnFamilyArrayOutput {
	return o
}

func (o BigtableColumnFamilyArrayOutput) Index(i pulumi.IntInput) BigtableColumnFamilyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigtableColumnFamily {
		return vs[0].([]BigtableColumnFamily)[vs[1].(int)]
	}).(BigtableColumnFamilyOutput)
}

type BigtableOptions struct {
	// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
	ColumnFamilies []BigtableColumnFamily `pulumi:"columnFamilies"`
	// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
	IgnoreUnspecifiedColumnFamilies *bool `pulumi:"ignoreUnspecifiedColumnFamilies"`
	// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
	ReadRowkeyAsString *bool `pulumi:"readRowkeyAsString"`
}

// BigtableOptionsInput is an input type that accepts BigtableOptionsArgs and BigtableOptionsOutput values.
// You can construct a concrete instance of `BigtableOptionsInput` via:
//
//          BigtableOptionsArgs{...}
type BigtableOptionsInput interface {
	pulumi.Input

	ToBigtableOptionsOutput() BigtableOptionsOutput
	ToBigtableOptionsOutputWithContext(context.Context) BigtableOptionsOutput
}

type BigtableOptionsArgs struct {
	// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
	ColumnFamilies BigtableColumnFamilyArrayInput `pulumi:"columnFamilies"`
	// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
	IgnoreUnspecifiedColumnFamilies pulumi.BoolPtrInput `pulumi:"ignoreUnspecifiedColumnFamilies"`
	// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
	ReadRowkeyAsString pulumi.BoolPtrInput `pulumi:"readRowkeyAsString"`
}

func (BigtableOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableOptions)(nil)).Elem()
}

func (i BigtableOptionsArgs) ToBigtableOptionsOutput() BigtableOptionsOutput {
	return i.ToBigtableOptionsOutputWithContext(context.Background())
}

func (i BigtableOptionsArgs) ToBigtableOptionsOutputWithContext(ctx context.Context) BigtableOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableOptionsOutput)
}

func (i BigtableOptionsArgs) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return i.ToBigtableOptionsPtrOutputWithContext(context.Background())
}

func (i BigtableOptionsArgs) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableOptionsOutput).ToBigtableOptionsPtrOutputWithContext(ctx)
}

// BigtableOptionsPtrInput is an input type that accepts BigtableOptionsArgs, BigtableOptionsPtr and BigtableOptionsPtrOutput values.
// You can construct a concrete instance of `BigtableOptionsPtrInput` via:
//
//          BigtableOptionsArgs{...}
//
//  or:
//
//          nil
type BigtableOptionsPtrInput interface {
	pulumi.Input

	ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput
	ToBigtableOptionsPtrOutputWithContext(context.Context) BigtableOptionsPtrOutput
}

type bigtableOptionsPtrType BigtableOptionsArgs

func BigtableOptionsPtr(v *BigtableOptionsArgs) BigtableOptionsPtrInput {
	return (*bigtableOptionsPtrType)(v)
}

func (*bigtableOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableOptions)(nil)).Elem()
}

func (i *bigtableOptionsPtrType) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return i.ToBigtableOptionsPtrOutputWithContext(context.Background())
}

func (i *bigtableOptionsPtrType) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableOptionsPtrOutput)
}

type BigtableOptionsOutput struct{ *pulumi.OutputState }

func (BigtableOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableOptions)(nil)).Elem()
}

func (o BigtableOptionsOutput) ToBigtableOptionsOutput() BigtableOptionsOutput {
	return o
}

func (o BigtableOptionsOutput) ToBigtableOptionsOutputWithContext(ctx context.Context) BigtableOptionsOutput {
	return o
}

func (o BigtableOptionsOutput) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return o.ToBigtableOptionsPtrOutputWithContext(context.Background())
}

func (o BigtableOptionsOutput) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return o.ApplyT(func(v BigtableOptions) *BigtableOptions {
		return &v
	}).(BigtableOptionsPtrOutput)
}

// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
func (o BigtableOptionsOutput) ColumnFamilies() BigtableColumnFamilyArrayOutput {
	return o.ApplyT(func(v BigtableOptions) []BigtableColumnFamily { return v.ColumnFamilies }).(BigtableColumnFamilyArrayOutput)
}

// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
func (o BigtableOptionsOutput) IgnoreUnspecifiedColumnFamilies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableOptions) *bool { return v.IgnoreUnspecifiedColumnFamilies }).(pulumi.BoolPtrOutput)
}

// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
func (o BigtableOptionsOutput) ReadRowkeyAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableOptions) *bool { return v.ReadRowkeyAsString }).(pulumi.BoolPtrOutput)
}

type BigtableOptionsPtrOutput struct{ *pulumi.OutputState }

func (BigtableOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableOptions)(nil)).Elem()
}

func (o BigtableOptionsPtrOutput) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return o
}

func (o BigtableOptionsPtrOutput) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return o
}

func (o BigtableOptionsPtrOutput) Elem() BigtableOptionsOutput {
	return o.ApplyT(func(v *BigtableOptions) BigtableOptions { return *v }).(BigtableOptionsOutput)
}

// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
func (o BigtableOptionsPtrOutput) ColumnFamilies() BigtableColumnFamilyArrayOutput {
	return o.ApplyT(func(v *BigtableOptions) []BigtableColumnFamily {
		if v == nil {
			return nil
		}
		return v.ColumnFamilies
	}).(BigtableColumnFamilyArrayOutput)
}

// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
func (o BigtableOptionsPtrOutput) IgnoreUnspecifiedColumnFamilies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigtableOptions) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnspecifiedColumnFamilies
	}).(pulumi.BoolPtrOutput)
}

// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
func (o BigtableOptionsPtrOutput) ReadRowkeyAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigtableOptions) *bool {
		if v == nil {
			return nil
		}
		return v.ReadRowkeyAsString
	}).(pulumi.BoolPtrOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

type BqmlIterationResult struct {
	// [Output-only, Beta] Time taken to run the training iteration in milliseconds.
	DurationMs *string `pulumi:"durationMs"`
	// [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
	EvalLoss *float64 `pulumi:"evalLoss"`
	// [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
	Index *int `pulumi:"index"`
	// [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
	LearnRate *float64 `pulumi:"learnRate"`
	// [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
	TrainingLoss *float64 `pulumi:"trainingLoss"`
}

// BqmlIterationResultInput is an input type that accepts BqmlIterationResultArgs and BqmlIterationResultOutput values.
// You can construct a concrete instance of `BqmlIterationResultInput` via:
//
//          BqmlIterationResultArgs{...}
type BqmlIterationResultInput interface {
	pulumi.Input

	ToBqmlIterationResultOutput() BqmlIterationResultOutput
	ToBqmlIterationResultOutputWithContext(context.Context) BqmlIterationResultOutput
}

type BqmlIterationResultArgs struct {
	// [Output-only, Beta] Time taken to run the training iteration in milliseconds.
	DurationMs pulumi.StringPtrInput `pulumi:"durationMs"`
	// [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
	EvalLoss pulumi.Float64PtrInput `pulumi:"evalLoss"`
	// [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
	Index pulumi.IntPtrInput `pulumi:"index"`
	// [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
	LearnRate pulumi.Float64PtrInput `pulumi:"learnRate"`
	// [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
	TrainingLoss pulumi.Float64PtrInput `pulumi:"trainingLoss"`
}

func (BqmlIterationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlIterationResult)(nil)).Elem()
}

func (i BqmlIterationResultArgs) ToBqmlIterationResultOutput() BqmlIterationResultOutput {
	return i.ToBqmlIterationResultOutputWithContext(context.Background())
}

func (i BqmlIterationResultArgs) ToBqmlIterationResultOutputWithContext(ctx context.Context) BqmlIterationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlIterationResultOutput)
}

// BqmlIterationResultArrayInput is an input type that accepts BqmlIterationResultArray and BqmlIterationResultArrayOutput values.
// You can construct a concrete instance of `BqmlIterationResultArrayInput` via:
//
//          BqmlIterationResultArray{ BqmlIterationResultArgs{...} }
type BqmlIterationResultArrayInput interface {
	pulumi.Input

	ToBqmlIterationResultArrayOutput() BqmlIterationResultArrayOutput
	ToBqmlIterationResultArrayOutputWithContext(context.Context) BqmlIterationResultArrayOutput
}

type BqmlIterationResultArray []BqmlIterationResultInput

func (BqmlIterationResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlIterationResult)(nil)).Elem()
}

func (i BqmlIterationResultArray) ToBqmlIterationResultArrayOutput() BqmlIterationResultArrayOutput {
	return i.ToBqmlIterationResultArrayOutputWithContext(context.Background())
}

func (i BqmlIterationResultArray) ToBqmlIterationResultArrayOutputWithContext(ctx context.Context) BqmlIterationResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlIterationResultArrayOutput)
}

type BqmlIterationResultOutput struct{ *pulumi.OutputState }

func (BqmlIterationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlIterationResult)(nil)).Elem()
}

func (o BqmlIterationResultOutput) ToBqmlIterationResultOutput() BqmlIterationResultOutput {
	return o
}

func (o BqmlIterationResultOutput) ToBqmlIterationResultOutputWithContext(ctx context.Context) BqmlIterationResultOutput {
	return o
}

// [Output-only, Beta] Time taken to run the training iteration in milliseconds.
func (o BqmlIterationResultOutput) DurationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *string { return v.DurationMs }).(pulumi.StringPtrOutput)
}

// [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
func (o BqmlIterationResultOutput) EvalLoss() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *float64 { return v.EvalLoss }).(pulumi.Float64PtrOutput)
}

// [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
func (o BqmlIterationResultOutput) Index() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *int { return v.Index }).(pulumi.IntPtrOutput)
}

// [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
func (o BqmlIterationResultOutput) LearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *float64 { return v.LearnRate }).(pulumi.Float64PtrOutput)
}

// [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
func (o BqmlIterationResultOutput) TrainingLoss() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *float64 { return v.TrainingLoss }).(pulumi.Float64PtrOutput)
}

type BqmlIterationResultArrayOutput struct{ *pulumi.OutputState }

func (BqmlIterationResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlIterationResult)(nil)).Elem()
}

func (o BqmlIterationResultArrayOutput) ToBqmlIterationResultArrayOutput() BqmlIterationResultArrayOutput {
	return o
}

func (o BqmlIterationResultArrayOutput) ToBqmlIterationResultArrayOutputWithContext(ctx context.Context) BqmlIterationResultArrayOutput {
	return o
}

func (o BqmlIterationResultArrayOutput) Index(i pulumi.IntInput) BqmlIterationResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BqmlIterationResult {
		return vs[0].([]BqmlIterationResult)[vs[1].(int)]
	}).(BqmlIterationResultOutput)
}

type BqmlTrainingRun struct {
	// [Output-only, Beta] List of each iteration results.
	IterationResults []BqmlIterationResult `pulumi:"iterationResults"`
	// [Output-only, Beta] Training run start time in milliseconds since the epoch.
	StartTime *string `pulumi:"startTime"`
	// [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
	State *string `pulumi:"state"`
	// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
	TrainingOptions map[string]string `pulumi:"trainingOptions"`
}

// BqmlTrainingRunInput is an input type that accepts BqmlTrainingRunArgs and BqmlTrainingRunOutput values.
// You can construct a concrete instance of `BqmlTrainingRunInput` via:
//
//          BqmlTrainingRunArgs{...}
type BqmlTrainingRunInput interface {
	pulumi.Input

	ToBqmlTrainingRunOutput() BqmlTrainingRunOutput
	ToBqmlTrainingRunOutputWithContext(context.Context) BqmlTrainingRunOutput
}

type BqmlTrainingRunArgs struct {
	// [Output-only, Beta] List of each iteration results.
	IterationResults BqmlIterationResultArrayInput `pulumi:"iterationResults"`
	// [Output-only, Beta] Training run start time in milliseconds since the epoch.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
	State pulumi.StringPtrInput `pulumi:"state"`
	// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
	TrainingOptions pulumi.StringMapInput `pulumi:"trainingOptions"`
}

func (BqmlTrainingRunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRun)(nil)).Elem()
}

func (i BqmlTrainingRunArgs) ToBqmlTrainingRunOutput() BqmlTrainingRunOutput {
	return i.ToBqmlTrainingRunOutputWithContext(context.Background())
}

func (i BqmlTrainingRunArgs) ToBqmlTrainingRunOutputWithContext(ctx context.Context) BqmlTrainingRunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunOutput)
}

// BqmlTrainingRunArrayInput is an input type that accepts BqmlTrainingRunArray and BqmlTrainingRunArrayOutput values.
// You can construct a concrete instance of `BqmlTrainingRunArrayInput` via:
//
//          BqmlTrainingRunArray{ BqmlTrainingRunArgs{...} }
type BqmlTrainingRunArrayInput interface {
	pulumi.Input

	ToBqmlTrainingRunArrayOutput() BqmlTrainingRunArrayOutput
	ToBqmlTrainingRunArrayOutputWithContext(context.Context) BqmlTrainingRunArrayOutput
}

type BqmlTrainingRunArray []BqmlTrainingRunInput

func (BqmlTrainingRunArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlTrainingRun)(nil)).Elem()
}

func (i BqmlTrainingRunArray) ToBqmlTrainingRunArrayOutput() BqmlTrainingRunArrayOutput {
	return i.ToBqmlTrainingRunArrayOutputWithContext(context.Background())
}

func (i BqmlTrainingRunArray) ToBqmlTrainingRunArrayOutputWithContext(ctx context.Context) BqmlTrainingRunArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunArrayOutput)
}

type BqmlTrainingRunOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRun)(nil)).Elem()
}

func (o BqmlTrainingRunOutput) ToBqmlTrainingRunOutput() BqmlTrainingRunOutput {
	return o
}

func (o BqmlTrainingRunOutput) ToBqmlTrainingRunOutputWithContext(ctx context.Context) BqmlTrainingRunOutput {
	return o
}

// [Output-only, Beta] List of each iteration results.
func (o BqmlTrainingRunOutput) IterationResults() BqmlIterationResultArrayOutput {
	return o.ApplyT(func(v BqmlTrainingRun) []BqmlIterationResult { return v.IterationResults }).(BqmlIterationResultArrayOutput)
}

// [Output-only, Beta] Training run start time in milliseconds since the epoch.
func (o BqmlTrainingRunOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRun) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
func (o BqmlTrainingRunOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRun) *string { return v.State }).(pulumi.StringPtrOutput)
}

// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
func (o BqmlTrainingRunOutput) TrainingOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BqmlTrainingRun) map[string]string { return v.TrainingOptions }).(pulumi.StringMapOutput)
}

type BqmlTrainingRunArrayOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlTrainingRun)(nil)).Elem()
}

func (o BqmlTrainingRunArrayOutput) ToBqmlTrainingRunArrayOutput() BqmlTrainingRunArrayOutput {
	return o
}

func (o BqmlTrainingRunArrayOutput) ToBqmlTrainingRunArrayOutputWithContext(ctx context.Context) BqmlTrainingRunArrayOutput {
	return o
}

func (o BqmlTrainingRunArrayOutput) Index(i pulumi.IntInput) BqmlTrainingRunOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BqmlTrainingRun {
		return vs[0].([]BqmlTrainingRun)[vs[1].(int)]
	}).(BqmlTrainingRunOutput)
}

type Clustering struct {
	// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
	Fields []string `pulumi:"fields"`
}

// ClusteringInput is an input type that accepts ClusteringArgs and ClusteringOutput values.
// You can construct a concrete instance of `ClusteringInput` via:
//
//          ClusteringArgs{...}
type ClusteringInput interface {
	pulumi.Input

	ToClusteringOutput() ClusteringOutput
	ToClusteringOutputWithContext(context.Context) ClusteringOutput
}

type ClusteringArgs struct {
	// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
	Fields pulumi.StringArrayInput `pulumi:"fields"`
}

func (ClusteringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Clustering)(nil)).Elem()
}

func (i ClusteringArgs) ToClusteringOutput() ClusteringOutput {
	return i.ToClusteringOutputWithContext(context.Background())
}

func (i ClusteringArgs) ToClusteringOutputWithContext(ctx context.Context) ClusteringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusteringOutput)
}

func (i ClusteringArgs) ToClusteringPtrOutput() ClusteringPtrOutput {
	return i.ToClusteringPtrOutputWithContext(context.Background())
}

func (i ClusteringArgs) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusteringOutput).ToClusteringPtrOutputWithContext(ctx)
}

// ClusteringPtrInput is an input type that accepts ClusteringArgs, ClusteringPtr and ClusteringPtrOutput values.
// You can construct a concrete instance of `ClusteringPtrInput` via:
//
//          ClusteringArgs{...}
//
//  or:
//
//          nil
type ClusteringPtrInput interface {
	pulumi.Input

	ToClusteringPtrOutput() ClusteringPtrOutput
	ToClusteringPtrOutputWithContext(context.Context) ClusteringPtrOutput
}

type clusteringPtrType ClusteringArgs

func ClusteringPtr(v *ClusteringArgs) ClusteringPtrInput {
	return (*clusteringPtrType)(v)
}

func (*clusteringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Clustering)(nil)).Elem()
}

func (i *clusteringPtrType) ToClusteringPtrOutput() ClusteringPtrOutput {
	return i.ToClusteringPtrOutputWithContext(context.Background())
}

func (i *clusteringPtrType) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusteringPtrOutput)
}

type ClusteringOutput struct{ *pulumi.OutputState }

func (ClusteringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Clustering)(nil)).Elem()
}

func (o ClusteringOutput) ToClusteringOutput() ClusteringOutput {
	return o
}

func (o ClusteringOutput) ToClusteringOutputWithContext(ctx context.Context) ClusteringOutput {
	return o
}

func (o ClusteringOutput) ToClusteringPtrOutput() ClusteringPtrOutput {
	return o.ToClusteringPtrOutputWithContext(context.Background())
}

func (o ClusteringOutput) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return o.ApplyT(func(v Clustering) *Clustering {
		return &v
	}).(ClusteringPtrOutput)
}

// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
func (o ClusteringOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Clustering) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

type ClusteringPtrOutput struct{ *pulumi.OutputState }

func (ClusteringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Clustering)(nil)).Elem()
}

func (o ClusteringPtrOutput) ToClusteringPtrOutput() ClusteringPtrOutput {
	return o
}

func (o ClusteringPtrOutput) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return o
}

func (o ClusteringPtrOutput) Elem() ClusteringOutput {
	return o.ApplyT(func(v *Clustering) Clustering { return *v }).(ClusteringOutput)
}

// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
func (o ClusteringPtrOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Clustering) []string {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(pulumi.StringArrayOutput)
}

type ConnectionProperty struct {
	// [Required] Name of the connection property to set.
	Key *string `pulumi:"key"`
	// [Required] Value of the connection property.
	Value *string `pulumi:"value"`
}

// ConnectionPropertyInput is an input type that accepts ConnectionPropertyArgs and ConnectionPropertyOutput values.
// You can construct a concrete instance of `ConnectionPropertyInput` via:
//
//          ConnectionPropertyArgs{...}
type ConnectionPropertyInput interface {
	pulumi.Input

	ToConnectionPropertyOutput() ConnectionPropertyOutput
	ToConnectionPropertyOutputWithContext(context.Context) ConnectionPropertyOutput
}

type ConnectionPropertyArgs struct {
	// [Required] Name of the connection property to set.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// [Required] Value of the connection property.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ConnectionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProperty)(nil)).Elem()
}

func (i ConnectionPropertyArgs) ToConnectionPropertyOutput() ConnectionPropertyOutput {
	return i.ToConnectionPropertyOutputWithContext(context.Background())
}

func (i ConnectionPropertyArgs) ToConnectionPropertyOutputWithContext(ctx context.Context) ConnectionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPropertyOutput)
}

// ConnectionPropertyArrayInput is an input type that accepts ConnectionPropertyArray and ConnectionPropertyArrayOutput values.
// You can construct a concrete instance of `ConnectionPropertyArrayInput` via:
//
//          ConnectionPropertyArray{ ConnectionPropertyArgs{...} }
type ConnectionPropertyArrayInput interface {
	pulumi.Input

	ToConnectionPropertyArrayOutput() ConnectionPropertyArrayOutput
	ToConnectionPropertyArrayOutputWithContext(context.Context) ConnectionPropertyArrayOutput
}

type ConnectionPropertyArray []ConnectionPropertyInput

func (ConnectionPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionProperty)(nil)).Elem()
}

func (i ConnectionPropertyArray) ToConnectionPropertyArrayOutput() ConnectionPropertyArrayOutput {
	return i.ToConnectionPropertyArrayOutputWithContext(context.Background())
}

func (i ConnectionPropertyArray) ToConnectionPropertyArrayOutputWithContext(ctx context.Context) ConnectionPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPropertyArrayOutput)
}

type ConnectionPropertyOutput struct{ *pulumi.OutputState }

func (ConnectionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProperty)(nil)).Elem()
}

func (o ConnectionPropertyOutput) ToConnectionPropertyOutput() ConnectionPropertyOutput {
	return o
}

func (o ConnectionPropertyOutput) ToConnectionPropertyOutputWithContext(ctx context.Context) ConnectionPropertyOutput {
	return o
}

// [Required] Name of the connection property to set.
func (o ConnectionPropertyOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperty) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// [Required] Value of the connection property.
func (o ConnectionPropertyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperty) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConnectionPropertyArrayOutput struct{ *pulumi.OutputState }

func (ConnectionPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionProperty)(nil)).Elem()
}

func (o ConnectionPropertyArrayOutput) ToConnectionPropertyArrayOutput() ConnectionPropertyArrayOutput {
	return o
}

func (o ConnectionPropertyArrayOutput) ToConnectionPropertyArrayOutputWithContext(ctx context.Context) ConnectionPropertyArrayOutput {
	return o
}

func (o ConnectionPropertyArrayOutput) Index(i pulumi.IntInput) ConnectionPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionProperty {
		return vs[0].([]ConnectionProperty)[vs[1].(int)]
	}).(ConnectionPropertyOutput)
}

type CsvOptions struct {
	// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding *string `pulumi:"encoding"`
	// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote *string `pulumi:"quote"`
	// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *string `pulumi:"skipLeadingRows"`
}

// CsvOptionsInput is an input type that accepts CsvOptionsArgs and CsvOptionsOutput values.
// You can construct a concrete instance of `CsvOptionsInput` via:
//
//          CsvOptionsArgs{...}
type CsvOptionsInput interface {
	pulumi.Input

	ToCsvOptionsOutput() CsvOptionsOutput
	ToCsvOptionsOutputWithContext(context.Context) CsvOptionsOutput
}

type CsvOptionsArgs struct {
	// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote pulumi.StringPtrInput `pulumi:"quote"`
	// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows pulumi.StringPtrInput `pulumi:"skipLeadingRows"`
}

func (CsvOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvOptions)(nil)).Elem()
}

func (i CsvOptionsArgs) ToCsvOptionsOutput() CsvOptionsOutput {
	return i.ToCsvOptionsOutputWithContext(context.Background())
}

func (i CsvOptionsArgs) ToCsvOptionsOutputWithContext(ctx context.Context) CsvOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvOptionsOutput)
}

func (i CsvOptionsArgs) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return i.ToCsvOptionsPtrOutputWithContext(context.Background())
}

func (i CsvOptionsArgs) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvOptionsOutput).ToCsvOptionsPtrOutputWithContext(ctx)
}

// CsvOptionsPtrInput is an input type that accepts CsvOptionsArgs, CsvOptionsPtr and CsvOptionsPtrOutput values.
// You can construct a concrete instance of `CsvOptionsPtrInput` via:
//
//          CsvOptionsArgs{...}
//
//  or:
//
//          nil
type CsvOptionsPtrInput interface {
	pulumi.Input

	ToCsvOptionsPtrOutput() CsvOptionsPtrOutput
	ToCsvOptionsPtrOutputWithContext(context.Context) CsvOptionsPtrOutput
}

type csvOptionsPtrType CsvOptionsArgs

func CsvOptionsPtr(v *CsvOptionsArgs) CsvOptionsPtrInput {
	return (*csvOptionsPtrType)(v)
}

func (*csvOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsvOptions)(nil)).Elem()
}

func (i *csvOptionsPtrType) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return i.ToCsvOptionsPtrOutputWithContext(context.Background())
}

func (i *csvOptionsPtrType) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvOptionsPtrOutput)
}

type CsvOptionsOutput struct{ *pulumi.OutputState }

func (CsvOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvOptions)(nil)).Elem()
}

func (o CsvOptionsOutput) ToCsvOptionsOutput() CsvOptionsOutput {
	return o
}

func (o CsvOptionsOutput) ToCsvOptionsOutputWithContext(ctx context.Context) CsvOptionsOutput {
	return o
}

func (o CsvOptionsOutput) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return o.ToCsvOptionsPtrOutputWithContext(context.Background())
}

func (o CsvOptionsOutput) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return o.ApplyT(func(v CsvOptions) *CsvOptions {
		return &v
	}).(CsvOptionsPtrOutput)
}

// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
func (o CsvOptionsOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CsvOptions) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o CsvOptionsOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CsvOptions) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o CsvOptionsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
func (o CsvOptionsOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o CsvOptionsOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.Quote }).(pulumi.StringPtrOutput)
}

// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o CsvOptionsOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.SkipLeadingRows }).(pulumi.StringPtrOutput)
}

type CsvOptionsPtrOutput struct{ *pulumi.OutputState }

func (CsvOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsvOptions)(nil)).Elem()
}

func (o CsvOptionsPtrOutput) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return o
}

func (o CsvOptionsPtrOutput) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return o
}

func (o CsvOptionsPtrOutput) Elem() CsvOptionsOutput {
	return o.ApplyT(func(v *CsvOptions) CsvOptions { return *v }).(CsvOptionsOutput)
}

// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
func (o CsvOptionsPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AllowJaggedRows
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o CsvOptionsPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AllowQuotedNewlines
	}).(pulumi.BoolPtrOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o CsvOptionsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
func (o CsvOptionsPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o CsvOptionsPtrOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.Quote
	}).(pulumi.StringPtrOutput)
}

// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o CsvOptionsPtrOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.StringPtrOutput)
}

type DatasetReference struct {
	// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	DatasetId *string `pulumi:"datasetId"`
	// [Optional] The ID of the project containing this dataset.
	ProjectId *string `pulumi:"projectId"`
}

// DatasetReferenceInput is an input type that accepts DatasetReferenceArgs and DatasetReferenceOutput values.
// You can construct a concrete instance of `DatasetReferenceInput` via:
//
//          DatasetReferenceArgs{...}
type DatasetReferenceInput interface {
	pulumi.Input

	ToDatasetReferenceOutput() DatasetReferenceOutput
	ToDatasetReferenceOutputWithContext(context.Context) DatasetReferenceOutput
}

type DatasetReferenceArgs struct {
	// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// [Optional] The ID of the project containing this dataset.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (DatasetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReference)(nil)).Elem()
}

func (i DatasetReferenceArgs) ToDatasetReferenceOutput() DatasetReferenceOutput {
	return i.ToDatasetReferenceOutputWithContext(context.Background())
}

func (i DatasetReferenceArgs) ToDatasetReferenceOutputWithContext(ctx context.Context) DatasetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceOutput)
}

func (i DatasetReferenceArgs) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return i.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (i DatasetReferenceArgs) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceOutput).ToDatasetReferencePtrOutputWithContext(ctx)
}

// DatasetReferencePtrInput is an input type that accepts DatasetReferenceArgs, DatasetReferencePtr and DatasetReferencePtrOutput values.
// You can construct a concrete instance of `DatasetReferencePtrInput` via:
//
//          DatasetReferenceArgs{...}
//
//  or:
//
//          nil
type DatasetReferencePtrInput interface {
	pulumi.Input

	ToDatasetReferencePtrOutput() DatasetReferencePtrOutput
	ToDatasetReferencePtrOutputWithContext(context.Context) DatasetReferencePtrOutput
}

type datasetReferencePtrType DatasetReferenceArgs

func DatasetReferencePtr(v *DatasetReferenceArgs) DatasetReferencePtrInput {
	return (*datasetReferencePtrType)(v)
}

func (*datasetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReference)(nil)).Elem()
}

func (i *datasetReferencePtrType) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return i.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (i *datasetReferencePtrType) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferencePtrOutput)
}

type DatasetReferenceOutput struct{ *pulumi.OutputState }

func (DatasetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReference)(nil)).Elem()
}

func (o DatasetReferenceOutput) ToDatasetReferenceOutput() DatasetReferenceOutput {
	return o
}

func (o DatasetReferenceOutput) ToDatasetReferenceOutputWithContext(ctx context.Context) DatasetReferenceOutput {
	return o
}

func (o DatasetReferenceOutput) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return o.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (o DatasetReferenceOutput) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return o.ApplyT(func(v DatasetReference) *DatasetReference {
		return &v
	}).(DatasetReferencePtrOutput)
}

// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o DatasetReferenceOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetReference) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// [Optional] The ID of the project containing this dataset.
func (o DatasetReferenceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetReference) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

type DatasetReferencePtrOutput struct{ *pulumi.OutputState }

func (DatasetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReference)(nil)).Elem()
}

func (o DatasetReferencePtrOutput) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return o
}

func (o DatasetReferencePtrOutput) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return o
}

func (o DatasetReferencePtrOutput) Elem() DatasetReferenceOutput {
	return o.ApplyT(func(v *DatasetReference) DatasetReference { return *v }).(DatasetReferenceOutput)
}

// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o DatasetReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReference) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// [Optional] The ID of the project containing this dataset.
func (o DatasetReferencePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReference) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

type DestinationTableProperties struct {
	// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
	Description *string `pulumi:"description"`
	// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
	FriendlyName *string `pulumi:"friendlyName"`
	// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
	Labels map[string]string `pulumi:"labels"`
}

// DestinationTablePropertiesInput is an input type that accepts DestinationTablePropertiesArgs and DestinationTablePropertiesOutput values.
// You can construct a concrete instance of `DestinationTablePropertiesInput` via:
//
//          DestinationTablePropertiesArgs{...}
type DestinationTablePropertiesInput interface {
	pulumi.Input

	ToDestinationTablePropertiesOutput() DestinationTablePropertiesOutput
	ToDestinationTablePropertiesOutputWithContext(context.Context) DestinationTablePropertiesOutput
}

type DestinationTablePropertiesArgs struct {
	// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (DestinationTablePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationTableProperties)(nil)).Elem()
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesOutput() DestinationTablePropertiesOutput {
	return i.ToDestinationTablePropertiesOutputWithContext(context.Background())
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesOutputWithContext(ctx context.Context) DestinationTablePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTablePropertiesOutput)
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return i.ToDestinationTablePropertiesPtrOutputWithContext(context.Background())
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTablePropertiesOutput).ToDestinationTablePropertiesPtrOutputWithContext(ctx)
}

// DestinationTablePropertiesPtrInput is an input type that accepts DestinationTablePropertiesArgs, DestinationTablePropertiesPtr and DestinationTablePropertiesPtrOutput values.
// You can construct a concrete instance of `DestinationTablePropertiesPtrInput` via:
//
//          DestinationTablePropertiesArgs{...}
//
//  or:
//
//          nil
type DestinationTablePropertiesPtrInput interface {
	pulumi.Input

	ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput
	ToDestinationTablePropertiesPtrOutputWithContext(context.Context) DestinationTablePropertiesPtrOutput
}

type destinationTablePropertiesPtrType DestinationTablePropertiesArgs

func DestinationTablePropertiesPtr(v *DestinationTablePropertiesArgs) DestinationTablePropertiesPtrInput {
	return (*destinationTablePropertiesPtrType)(v)
}

func (*destinationTablePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationTableProperties)(nil)).Elem()
}

func (i *destinationTablePropertiesPtrType) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return i.ToDestinationTablePropertiesPtrOutputWithContext(context.Background())
}

func (i *destinationTablePropertiesPtrType) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTablePropertiesPtrOutput)
}

type DestinationTablePropertiesOutput struct{ *pulumi.OutputState }

func (DestinationTablePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationTableProperties)(nil)).Elem()
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesOutput() DestinationTablePropertiesOutput {
	return o
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesOutputWithContext(ctx context.Context) DestinationTablePropertiesOutput {
	return o
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return o.ToDestinationTablePropertiesPtrOutputWithContext(context.Background())
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return o.ApplyT(func(v DestinationTableProperties) *DestinationTableProperties {
		return &v
	}).(DestinationTablePropertiesPtrOutput)
}

// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
func (o DestinationTablePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationTableProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
func (o DestinationTablePropertiesOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationTableProperties) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
func (o DestinationTablePropertiesOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DestinationTableProperties) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type DestinationTablePropertiesPtrOutput struct{ *pulumi.OutputState }

func (DestinationTablePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationTableProperties)(nil)).Elem()
}

func (o DestinationTablePropertiesPtrOutput) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return o
}

func (o DestinationTablePropertiesPtrOutput) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return o
}

func (o DestinationTablePropertiesPtrOutput) Elem() DestinationTablePropertiesOutput {
	return o.ApplyT(func(v *DestinationTableProperties) DestinationTableProperties { return *v }).(DestinationTablePropertiesOutput)
}

// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
func (o DestinationTablePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationTableProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
func (o DestinationTablePropertiesPtrOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationTableProperties) *string {
		if v == nil {
			return nil
		}
		return v.FriendlyName
	}).(pulumi.StringPtrOutput)
}

// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
func (o DestinationTablePropertiesPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DestinationTableProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type EncryptionConfiguration struct {
	// [Optional] Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigurationInput is an input type that accepts EncryptionConfigurationArgs and EncryptionConfigurationOutput values.
// You can construct a concrete instance of `EncryptionConfigurationInput` via:
//
//          EncryptionConfigurationArgs{...}
type EncryptionConfigurationInput interface {
	pulumi.Input

	ToEncryptionConfigurationOutput() EncryptionConfigurationOutput
	ToEncryptionConfigurationOutputWithContext(context.Context) EncryptionConfigurationOutput
}

type EncryptionConfigurationArgs struct {
	// [Optional] Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return i.ToEncryptionConfigurationOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput)
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput).ToEncryptionConfigurationPtrOutputWithContext(ctx)
}

// EncryptionConfigurationPtrInput is an input type that accepts EncryptionConfigurationArgs, EncryptionConfigurationPtr and EncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigurationPtrInput` via:
//
//          EncryptionConfigurationArgs{...}
//
//  or:
//
//          nil
type EncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput
	ToEncryptionConfigurationPtrOutputWithContext(context.Context) EncryptionConfigurationPtrOutput
}

type encryptionConfigurationPtrType EncryptionConfigurationArgs

func EncryptionConfigurationPtr(v *EncryptionConfigurationArgs) EncryptionConfigurationPtrInput {
	return (*encryptionConfigurationPtrType)(v)
}

func (*encryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationPtrOutput)
}

type EncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *EncryptionConfiguration {
		return &v
	}).(EncryptionConfigurationPtrOutput)
}

// [Optional] Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
func (o EncryptionConfigurationOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) Elem() EncryptionConfigurationOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) EncryptionConfiguration { return *v }).(EncryptionConfigurationOutput)
}

// [Optional] Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
func (o EncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

type ErrorProto struct {
	// Debugging information. This property is internal to Google and should not be used.
	DebugInfo *string `pulumi:"debugInfo"`
	// Specifies where the error occurred, if present.
	Location *string `pulumi:"location"`
	// A human-readable description of the error.
	Message *string `pulumi:"message"`
	// A short error code that summarizes the error.
	Reason *string `pulumi:"reason"`
}

// ErrorProtoInput is an input type that accepts ErrorProtoArgs and ErrorProtoOutput values.
// You can construct a concrete instance of `ErrorProtoInput` via:
//
//          ErrorProtoArgs{...}
type ErrorProtoInput interface {
	pulumi.Input

	ToErrorProtoOutput() ErrorProtoOutput
	ToErrorProtoOutputWithContext(context.Context) ErrorProtoOutput
}

type ErrorProtoArgs struct {
	// Debugging information. This property is internal to Google and should not be used.
	DebugInfo pulumi.StringPtrInput `pulumi:"debugInfo"`
	// Specifies where the error occurred, if present.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// A human-readable description of the error.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A short error code that summarizes the error.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (ErrorProtoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorProto)(nil)).Elem()
}

func (i ErrorProtoArgs) ToErrorProtoOutput() ErrorProtoOutput {
	return i.ToErrorProtoOutputWithContext(context.Background())
}

func (i ErrorProtoArgs) ToErrorProtoOutputWithContext(ctx context.Context) ErrorProtoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorProtoOutput)
}

func (i ErrorProtoArgs) ToErrorProtoPtrOutput() ErrorProtoPtrOutput {
	return i.ToErrorProtoPtrOutputWithContext(context.Background())
}

func (i ErrorProtoArgs) ToErrorProtoPtrOutputWithContext(ctx context.Context) ErrorProtoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorProtoOutput).ToErrorProtoPtrOutputWithContext(ctx)
}

// ErrorProtoPtrInput is an input type that accepts ErrorProtoArgs, ErrorProtoPtr and ErrorProtoPtrOutput values.
// You can construct a concrete instance of `ErrorProtoPtrInput` via:
//
//          ErrorProtoArgs{...}
//
//  or:
//
//          nil
type ErrorProtoPtrInput interface {
	pulumi.Input

	ToErrorProtoPtrOutput() ErrorProtoPtrOutput
	ToErrorProtoPtrOutputWithContext(context.Context) ErrorProtoPtrOutput
}

type errorProtoPtrType ErrorProtoArgs

func ErrorProtoPtr(v *ErrorProtoArgs) ErrorProtoPtrInput {
	return (*errorProtoPtrType)(v)
}

func (*errorProtoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorProto)(nil)).Elem()
}

func (i *errorProtoPtrType) ToErrorProtoPtrOutput() ErrorProtoPtrOutput {
	return i.ToErrorProtoPtrOutputWithContext(context.Background())
}

func (i *errorProtoPtrType) ToErrorProtoPtrOutputWithContext(ctx context.Context) ErrorProtoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorProtoPtrOutput)
}

// ErrorProtoArrayInput is an input type that accepts ErrorProtoArray and ErrorProtoArrayOutput values.
// You can construct a concrete instance of `ErrorProtoArrayInput` via:
//
//          ErrorProtoArray{ ErrorProtoArgs{...} }
type ErrorProtoArrayInput interface {
	pulumi.Input

	ToErrorProtoArrayOutput() ErrorProtoArrayOutput
	ToErrorProtoArrayOutputWithContext(context.Context) ErrorProtoArrayOutput
}

type ErrorProtoArray []ErrorProtoInput

func (ErrorProtoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorProto)(nil)).Elem()
}

func (i ErrorProtoArray) ToErrorProtoArrayOutput() ErrorProtoArrayOutput {
	return i.ToErrorProtoArrayOutputWithContext(context.Background())
}

func (i ErrorProtoArray) ToErrorProtoArrayOutputWithContext(ctx context.Context) ErrorProtoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorProtoArrayOutput)
}

type ErrorProtoOutput struct{ *pulumi.OutputState }

func (ErrorProtoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorProto)(nil)).Elem()
}

func (o ErrorProtoOutput) ToErrorProtoOutput() ErrorProtoOutput {
	return o
}

func (o ErrorProtoOutput) ToErrorProtoOutputWithContext(ctx context.Context) ErrorProtoOutput {
	return o
}

func (o ErrorProtoOutput) ToErrorProtoPtrOutput() ErrorProtoPtrOutput {
	return o.ToErrorProtoPtrOutputWithContext(context.Background())
}

func (o ErrorProtoOutput) ToErrorProtoPtrOutputWithContext(ctx context.Context) ErrorProtoPtrOutput {
	return o.ApplyT(func(v ErrorProto) *ErrorProto {
		return &v
	}).(ErrorProtoPtrOutput)
}

// Debugging information. This property is internal to Google and should not be used.
func (o ErrorProtoOutput) DebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorProto) *string { return v.DebugInfo }).(pulumi.StringPtrOutput)
}

// Specifies where the error occurred, if present.
func (o ErrorProtoOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorProto) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// A human-readable description of the error.
func (o ErrorProtoOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorProto) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A short error code that summarizes the error.
func (o ErrorProtoOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorProto) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type ErrorProtoPtrOutput struct{ *pulumi.OutputState }

func (ErrorProtoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorProto)(nil)).Elem()
}

func (o ErrorProtoPtrOutput) ToErrorProtoPtrOutput() ErrorProtoPtrOutput {
	return o
}

func (o ErrorProtoPtrOutput) ToErrorProtoPtrOutputWithContext(ctx context.Context) ErrorProtoPtrOutput {
	return o
}

func (o ErrorProtoPtrOutput) Elem() ErrorProtoOutput {
	return o.ApplyT(func(v *ErrorProto) ErrorProto { return *v }).(ErrorProtoOutput)
}

// Debugging information. This property is internal to Google and should not be used.
func (o ErrorProtoPtrOutput) DebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorProto) *string {
		if v == nil {
			return nil
		}
		return v.DebugInfo
	}).(pulumi.StringPtrOutput)
}

// Specifies where the error occurred, if present.
func (o ErrorProtoPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorProto) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// A human-readable description of the error.
func (o ErrorProtoPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorProto) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// A short error code that summarizes the error.
func (o ErrorProtoPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorProto) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

type ErrorProtoArrayOutput struct{ *pulumi.OutputState }

func (ErrorProtoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorProto)(nil)).Elem()
}

func (o ErrorProtoArrayOutput) ToErrorProtoArrayOutput() ErrorProtoArrayOutput {
	return o
}

func (o ErrorProtoArrayOutput) ToErrorProtoArrayOutputWithContext(ctx context.Context) ErrorProtoArrayOutput {
	return o
}

func (o ErrorProtoArrayOutput) Index(i pulumi.IntInput) ErrorProtoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorProto {
		return vs[0].([]ErrorProto)[vs[1].(int)]
	}).(ErrorProtoOutput)
}

type ExplainQueryStage struct {
	// Number of parallel input segments completed.
	CompletedParallelInputs *string `pulumi:"completedParallelInputs"`
	// Milliseconds the average shard spent on CPU-bound tasks.
	ComputeMsAvg *string `pulumi:"computeMsAvg"`
	// Milliseconds the slowest shard spent on CPU-bound tasks.
	ComputeMsMax *string `pulumi:"computeMsMax"`
	// Relative amount of time the average shard spent on CPU-bound tasks.
	ComputeRatioAvg *float64 `pulumi:"computeRatioAvg"`
	// Relative amount of time the slowest shard spent on CPU-bound tasks.
	ComputeRatioMax *float64 `pulumi:"computeRatioMax"`
	// Stage end time represented as milliseconds since epoch.
	EndMs *string `pulumi:"endMs"`
	// Unique ID for stage within plan.
	Id *string `pulumi:"id"`
	// IDs for stages that are inputs to this stage.
	InputStages []string `pulumi:"inputStages"`
	// Human-readable name for stage.
	Name *string `pulumi:"name"`
	// Number of parallel input segments to be processed.
	ParallelInputs *string `pulumi:"parallelInputs"`
	// Milliseconds the average shard spent reading input.
	ReadMsAvg *string `pulumi:"readMsAvg"`
	// Milliseconds the slowest shard spent reading input.
	ReadMsMax *string `pulumi:"readMsMax"`
	// Relative amount of time the average shard spent reading input.
	ReadRatioAvg *float64 `pulumi:"readRatioAvg"`
	// Relative amount of time the slowest shard spent reading input.
	ReadRatioMax *float64 `pulumi:"readRatioMax"`
	// Number of records read into the stage.
	RecordsRead *string `pulumi:"recordsRead"`
	// Number of records written by the stage.
	RecordsWritten *string `pulumi:"recordsWritten"`
	// Total number of bytes written to shuffle.
	ShuffleOutputBytes *string `pulumi:"shuffleOutputBytes"`
	// Total number of bytes written to shuffle and spilled to disk.
	ShuffleOutputBytesSpilled *string `pulumi:"shuffleOutputBytesSpilled"`
	// Slot-milliseconds used by the stage.
	SlotMs *string `pulumi:"slotMs"`
	// Stage start time represented as milliseconds since epoch.
	StartMs *string `pulumi:"startMs"`
	// Current status for the stage.
	Status *string `pulumi:"status"`
	// List of operations within the stage in dependency order (approximately chronological).
	Steps []ExplainQueryStep `pulumi:"steps"`
	// Milliseconds the average shard spent waiting to be scheduled.
	WaitMsAvg *string `pulumi:"waitMsAvg"`
	// Milliseconds the slowest shard spent waiting to be scheduled.
	WaitMsMax *string `pulumi:"waitMsMax"`
	// Relative amount of time the average shard spent waiting to be scheduled.
	WaitRatioAvg *float64 `pulumi:"waitRatioAvg"`
	// Relative amount of time the slowest shard spent waiting to be scheduled.
	WaitRatioMax *float64 `pulumi:"waitRatioMax"`
	// Milliseconds the average shard spent on writing output.
	WriteMsAvg *string `pulumi:"writeMsAvg"`
	// Milliseconds the slowest shard spent on writing output.
	WriteMsMax *string `pulumi:"writeMsMax"`
	// Relative amount of time the average shard spent on writing output.
	WriteRatioAvg *float64 `pulumi:"writeRatioAvg"`
	// Relative amount of time the slowest shard spent on writing output.
	WriteRatioMax *float64 `pulumi:"writeRatioMax"`
}

// ExplainQueryStageInput is an input type that accepts ExplainQueryStageArgs and ExplainQueryStageOutput values.
// You can construct a concrete instance of `ExplainQueryStageInput` via:
//
//          ExplainQueryStageArgs{...}
type ExplainQueryStageInput interface {
	pulumi.Input

	ToExplainQueryStageOutput() ExplainQueryStageOutput
	ToExplainQueryStageOutputWithContext(context.Context) ExplainQueryStageOutput
}

type ExplainQueryStageArgs struct {
	// Number of parallel input segments completed.
	CompletedParallelInputs pulumi.StringPtrInput `pulumi:"completedParallelInputs"`
	// Milliseconds the average shard spent on CPU-bound tasks.
	ComputeMsAvg pulumi.StringPtrInput `pulumi:"computeMsAvg"`
	// Milliseconds the slowest shard spent on CPU-bound tasks.
	ComputeMsMax pulumi.StringPtrInput `pulumi:"computeMsMax"`
	// Relative amount of time the average shard spent on CPU-bound tasks.
	ComputeRatioAvg pulumi.Float64PtrInput `pulumi:"computeRatioAvg"`
	// Relative amount of time the slowest shard spent on CPU-bound tasks.
	ComputeRatioMax pulumi.Float64PtrInput `pulumi:"computeRatioMax"`
	// Stage end time represented as milliseconds since epoch.
	EndMs pulumi.StringPtrInput `pulumi:"endMs"`
	// Unique ID for stage within plan.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// IDs for stages that are inputs to this stage.
	InputStages pulumi.StringArrayInput `pulumi:"inputStages"`
	// Human-readable name for stage.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Number of parallel input segments to be processed.
	ParallelInputs pulumi.StringPtrInput `pulumi:"parallelInputs"`
	// Milliseconds the average shard spent reading input.
	ReadMsAvg pulumi.StringPtrInput `pulumi:"readMsAvg"`
	// Milliseconds the slowest shard spent reading input.
	ReadMsMax pulumi.StringPtrInput `pulumi:"readMsMax"`
	// Relative amount of time the average shard spent reading input.
	ReadRatioAvg pulumi.Float64PtrInput `pulumi:"readRatioAvg"`
	// Relative amount of time the slowest shard spent reading input.
	ReadRatioMax pulumi.Float64PtrInput `pulumi:"readRatioMax"`
	// Number of records read into the stage.
	RecordsRead pulumi.StringPtrInput `pulumi:"recordsRead"`
	// Number of records written by the stage.
	RecordsWritten pulumi.StringPtrInput `pulumi:"recordsWritten"`
	// Total number of bytes written to shuffle.
	ShuffleOutputBytes pulumi.StringPtrInput `pulumi:"shuffleOutputBytes"`
	// Total number of bytes written to shuffle and spilled to disk.
	ShuffleOutputBytesSpilled pulumi.StringPtrInput `pulumi:"shuffleOutputBytesSpilled"`
	// Slot-milliseconds used by the stage.
	SlotMs pulumi.StringPtrInput `pulumi:"slotMs"`
	// Stage start time represented as milliseconds since epoch.
	StartMs pulumi.StringPtrInput `pulumi:"startMs"`
	// Current status for the stage.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// List of operations within the stage in dependency order (approximately chronological).
	Steps ExplainQueryStepArrayInput `pulumi:"steps"`
	// Milliseconds the average shard spent waiting to be scheduled.
	WaitMsAvg pulumi.StringPtrInput `pulumi:"waitMsAvg"`
	// Milliseconds the slowest shard spent waiting to be scheduled.
	WaitMsMax pulumi.StringPtrInput `pulumi:"waitMsMax"`
	// Relative amount of time the average shard spent waiting to be scheduled.
	WaitRatioAvg pulumi.Float64PtrInput `pulumi:"waitRatioAvg"`
	// Relative amount of time the slowest shard spent waiting to be scheduled.
	WaitRatioMax pulumi.Float64PtrInput `pulumi:"waitRatioMax"`
	// Milliseconds the average shard spent on writing output.
	WriteMsAvg pulumi.StringPtrInput `pulumi:"writeMsAvg"`
	// Milliseconds the slowest shard spent on writing output.
	WriteMsMax pulumi.StringPtrInput `pulumi:"writeMsMax"`
	// Relative amount of time the average shard spent on writing output.
	WriteRatioAvg pulumi.Float64PtrInput `pulumi:"writeRatioAvg"`
	// Relative amount of time the slowest shard spent on writing output.
	WriteRatioMax pulumi.Float64PtrInput `pulumi:"writeRatioMax"`
}

func (ExplainQueryStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplainQueryStage)(nil)).Elem()
}

func (i ExplainQueryStageArgs) ToExplainQueryStageOutput() ExplainQueryStageOutput {
	return i.ToExplainQueryStageOutputWithContext(context.Background())
}

func (i ExplainQueryStageArgs) ToExplainQueryStageOutputWithContext(ctx context.Context) ExplainQueryStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplainQueryStageOutput)
}

// ExplainQueryStageArrayInput is an input type that accepts ExplainQueryStageArray and ExplainQueryStageArrayOutput values.
// You can construct a concrete instance of `ExplainQueryStageArrayInput` via:
//
//          ExplainQueryStageArray{ ExplainQueryStageArgs{...} }
type ExplainQueryStageArrayInput interface {
	pulumi.Input

	ToExplainQueryStageArrayOutput() ExplainQueryStageArrayOutput
	ToExplainQueryStageArrayOutputWithContext(context.Context) ExplainQueryStageArrayOutput
}

type ExplainQueryStageArray []ExplainQueryStageInput

func (ExplainQueryStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExplainQueryStage)(nil)).Elem()
}

func (i ExplainQueryStageArray) ToExplainQueryStageArrayOutput() ExplainQueryStageArrayOutput {
	return i.ToExplainQueryStageArrayOutputWithContext(context.Background())
}

func (i ExplainQueryStageArray) ToExplainQueryStageArrayOutputWithContext(ctx context.Context) ExplainQueryStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplainQueryStageArrayOutput)
}

type ExplainQueryStageOutput struct{ *pulumi.OutputState }

func (ExplainQueryStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplainQueryStage)(nil)).Elem()
}

func (o ExplainQueryStageOutput) ToExplainQueryStageOutput() ExplainQueryStageOutput {
	return o
}

func (o ExplainQueryStageOutput) ToExplainQueryStageOutputWithContext(ctx context.Context) ExplainQueryStageOutput {
	return o
}

// Number of parallel input segments completed.
func (o ExplainQueryStageOutput) CompletedParallelInputs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.CompletedParallelInputs }).(pulumi.StringPtrOutput)
}

// Milliseconds the average shard spent on CPU-bound tasks.
func (o ExplainQueryStageOutput) ComputeMsAvg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.ComputeMsAvg }).(pulumi.StringPtrOutput)
}

// Milliseconds the slowest shard spent on CPU-bound tasks.
func (o ExplainQueryStageOutput) ComputeMsMax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.ComputeMsMax }).(pulumi.StringPtrOutput)
}

// Relative amount of time the average shard spent on CPU-bound tasks.
func (o ExplainQueryStageOutput) ComputeRatioAvg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *float64 { return v.ComputeRatioAvg }).(pulumi.Float64PtrOutput)
}

// Relative amount of time the slowest shard spent on CPU-bound tasks.
func (o ExplainQueryStageOutput) ComputeRatioMax() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *float64 { return v.ComputeRatioMax }).(pulumi.Float64PtrOutput)
}

// Stage end time represented as milliseconds since epoch.
func (o ExplainQueryStageOutput) EndMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.EndMs }).(pulumi.StringPtrOutput)
}

// Unique ID for stage within plan.
func (o ExplainQueryStageOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// IDs for stages that are inputs to this stage.
func (o ExplainQueryStageOutput) InputStages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExplainQueryStage) []string { return v.InputStages }).(pulumi.StringArrayOutput)
}

// Human-readable name for stage.
func (o ExplainQueryStageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Number of parallel input segments to be processed.
func (o ExplainQueryStageOutput) ParallelInputs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.ParallelInputs }).(pulumi.StringPtrOutput)
}

// Milliseconds the average shard spent reading input.
func (o ExplainQueryStageOutput) ReadMsAvg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.ReadMsAvg }).(pulumi.StringPtrOutput)
}

// Milliseconds the slowest shard spent reading input.
func (o ExplainQueryStageOutput) ReadMsMax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.ReadMsMax }).(pulumi.StringPtrOutput)
}

// Relative amount of time the average shard spent reading input.
func (o ExplainQueryStageOutput) ReadRatioAvg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *float64 { return v.ReadRatioAvg }).(pulumi.Float64PtrOutput)
}

// Relative amount of time the slowest shard spent reading input.
func (o ExplainQueryStageOutput) ReadRatioMax() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *float64 { return v.ReadRatioMax }).(pulumi.Float64PtrOutput)
}

// Number of records read into the stage.
func (o ExplainQueryStageOutput) RecordsRead() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.RecordsRead }).(pulumi.StringPtrOutput)
}

// Number of records written by the stage.
func (o ExplainQueryStageOutput) RecordsWritten() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.RecordsWritten }).(pulumi.StringPtrOutput)
}

// Total number of bytes written to shuffle.
func (o ExplainQueryStageOutput) ShuffleOutputBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.ShuffleOutputBytes }).(pulumi.StringPtrOutput)
}

// Total number of bytes written to shuffle and spilled to disk.
func (o ExplainQueryStageOutput) ShuffleOutputBytesSpilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.ShuffleOutputBytesSpilled }).(pulumi.StringPtrOutput)
}

// Slot-milliseconds used by the stage.
func (o ExplainQueryStageOutput) SlotMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.SlotMs }).(pulumi.StringPtrOutput)
}

// Stage start time represented as milliseconds since epoch.
func (o ExplainQueryStageOutput) StartMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.StartMs }).(pulumi.StringPtrOutput)
}

// Current status for the stage.
func (o ExplainQueryStageOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// List of operations within the stage in dependency order (approximately chronological).
func (o ExplainQueryStageOutput) Steps() ExplainQueryStepArrayOutput {
	return o.ApplyT(func(v ExplainQueryStage) []ExplainQueryStep { return v.Steps }).(ExplainQueryStepArrayOutput)
}

// Milliseconds the average shard spent waiting to be scheduled.
func (o ExplainQueryStageOutput) WaitMsAvg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.WaitMsAvg }).(pulumi.StringPtrOutput)
}

// Milliseconds the slowest shard spent waiting to be scheduled.
func (o ExplainQueryStageOutput) WaitMsMax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.WaitMsMax }).(pulumi.StringPtrOutput)
}

// Relative amount of time the average shard spent waiting to be scheduled.
func (o ExplainQueryStageOutput) WaitRatioAvg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *float64 { return v.WaitRatioAvg }).(pulumi.Float64PtrOutput)
}

// Relative amount of time the slowest shard spent waiting to be scheduled.
func (o ExplainQueryStageOutput) WaitRatioMax() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *float64 { return v.WaitRatioMax }).(pulumi.Float64PtrOutput)
}

// Milliseconds the average shard spent on writing output.
func (o ExplainQueryStageOutput) WriteMsAvg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.WriteMsAvg }).(pulumi.StringPtrOutput)
}

// Milliseconds the slowest shard spent on writing output.
func (o ExplainQueryStageOutput) WriteMsMax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *string { return v.WriteMsMax }).(pulumi.StringPtrOutput)
}

// Relative amount of time the average shard spent on writing output.
func (o ExplainQueryStageOutput) WriteRatioAvg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *float64 { return v.WriteRatioAvg }).(pulumi.Float64PtrOutput)
}

// Relative amount of time the slowest shard spent on writing output.
func (o ExplainQueryStageOutput) WriteRatioMax() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ExplainQueryStage) *float64 { return v.WriteRatioMax }).(pulumi.Float64PtrOutput)
}

type ExplainQueryStageArrayOutput struct{ *pulumi.OutputState }

func (ExplainQueryStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExplainQueryStage)(nil)).Elem()
}

func (o ExplainQueryStageArrayOutput) ToExplainQueryStageArrayOutput() ExplainQueryStageArrayOutput {
	return o
}

func (o ExplainQueryStageArrayOutput) ToExplainQueryStageArrayOutputWithContext(ctx context.Context) ExplainQueryStageArrayOutput {
	return o
}

func (o ExplainQueryStageArrayOutput) Index(i pulumi.IntInput) ExplainQueryStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExplainQueryStage {
		return vs[0].([]ExplainQueryStage)[vs[1].(int)]
	}).(ExplainQueryStageOutput)
}

type ExplainQueryStep struct {
	// Machine-readable operation type.
	Kind *string `pulumi:"kind"`
	// Human-readable stage descriptions.
	Substeps []string `pulumi:"substeps"`
}

// ExplainQueryStepInput is an input type that accepts ExplainQueryStepArgs and ExplainQueryStepOutput values.
// You can construct a concrete instance of `ExplainQueryStepInput` via:
//
//          ExplainQueryStepArgs{...}
type ExplainQueryStepInput interface {
	pulumi.Input

	ToExplainQueryStepOutput() ExplainQueryStepOutput
	ToExplainQueryStepOutputWithContext(context.Context) ExplainQueryStepOutput
}

type ExplainQueryStepArgs struct {
	// Machine-readable operation type.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Human-readable stage descriptions.
	Substeps pulumi.StringArrayInput `pulumi:"substeps"`
}

func (ExplainQueryStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplainQueryStep)(nil)).Elem()
}

func (i ExplainQueryStepArgs) ToExplainQueryStepOutput() ExplainQueryStepOutput {
	return i.ToExplainQueryStepOutputWithContext(context.Background())
}

func (i ExplainQueryStepArgs) ToExplainQueryStepOutputWithContext(ctx context.Context) ExplainQueryStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplainQueryStepOutput)
}

// ExplainQueryStepArrayInput is an input type that accepts ExplainQueryStepArray and ExplainQueryStepArrayOutput values.
// You can construct a concrete instance of `ExplainQueryStepArrayInput` via:
//
//          ExplainQueryStepArray{ ExplainQueryStepArgs{...} }
type ExplainQueryStepArrayInput interface {
	pulumi.Input

	ToExplainQueryStepArrayOutput() ExplainQueryStepArrayOutput
	ToExplainQueryStepArrayOutputWithContext(context.Context) ExplainQueryStepArrayOutput
}

type ExplainQueryStepArray []ExplainQueryStepInput

func (ExplainQueryStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExplainQueryStep)(nil)).Elem()
}

func (i ExplainQueryStepArray) ToExplainQueryStepArrayOutput() ExplainQueryStepArrayOutput {
	return i.ToExplainQueryStepArrayOutputWithContext(context.Background())
}

func (i ExplainQueryStepArray) ToExplainQueryStepArrayOutputWithContext(ctx context.Context) ExplainQueryStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExplainQueryStepArrayOutput)
}

type ExplainQueryStepOutput struct{ *pulumi.OutputState }

func (ExplainQueryStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplainQueryStep)(nil)).Elem()
}

func (o ExplainQueryStepOutput) ToExplainQueryStepOutput() ExplainQueryStepOutput {
	return o
}

func (o ExplainQueryStepOutput) ToExplainQueryStepOutputWithContext(ctx context.Context) ExplainQueryStepOutput {
	return o
}

// Machine-readable operation type.
func (o ExplainQueryStepOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExplainQueryStep) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Human-readable stage descriptions.
func (o ExplainQueryStepOutput) Substeps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExplainQueryStep) []string { return v.Substeps }).(pulumi.StringArrayOutput)
}

type ExplainQueryStepArrayOutput struct{ *pulumi.OutputState }

func (ExplainQueryStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExplainQueryStep)(nil)).Elem()
}

func (o ExplainQueryStepArrayOutput) ToExplainQueryStepArrayOutput() ExplainQueryStepArrayOutput {
	return o
}

func (o ExplainQueryStepArrayOutput) ToExplainQueryStepArrayOutputWithContext(ctx context.Context) ExplainQueryStepArrayOutput {
	return o
}

func (o ExplainQueryStepArrayOutput) Index(i pulumi.IntInput) ExplainQueryStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExplainQueryStep {
		return vs[0].([]ExplainQueryStep)[vs[1].(int)]
	}).(ExplainQueryStepOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type ExternalDataConfiguration struct {
	// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
	Autodetect *bool `pulumi:"autodetect"`
	// [Optional] Additional options if sourceFormat is set to BIGTABLE.
	BigtableOptions *BigtableOptions `pulumi:"bigtableOptions"`
	// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
	Compression *string `pulumi:"compression"`
	// [Optional, Trusted Tester] Connection for external data source.
	ConnectionId *string `pulumi:"connectionId"`
	// Additional properties to set if sourceFormat is set to CSV.
	CsvOptions *CsvOptions `pulumi:"csvOptions"`
	// [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
	GoogleSheetsOptions *GoogleSheetsOptions `pulumi:"googleSheetsOptions"`
	// [Optional] Options to configure hive partitioning support.
	HivePartitioningOptions *HivePartitioningOptions `pulumi:"hivePartitioningOptions"`
	// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// Additional properties to set if sourceFormat is set to Parquet.
	ParquetOptions *ParquetOptions `pulumi:"parquetOptions"`
	// [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
	Schema *TableSchema `pulumi:"schema"`
	// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
	SourceFormat *string `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
}

// ExternalDataConfigurationInput is an input type that accepts ExternalDataConfigurationArgs and ExternalDataConfigurationOutput values.
// You can construct a concrete instance of `ExternalDataConfigurationInput` via:
//
//          ExternalDataConfigurationArgs{...}
type ExternalDataConfigurationInput interface {
	pulumi.Input

	ToExternalDataConfigurationOutput() ExternalDataConfigurationOutput
	ToExternalDataConfigurationOutputWithContext(context.Context) ExternalDataConfigurationOutput
}

type ExternalDataConfigurationArgs struct {
	// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
	Autodetect pulumi.BoolPtrInput `pulumi:"autodetect"`
	// [Optional] Additional options if sourceFormat is set to BIGTABLE.
	BigtableOptions BigtableOptionsPtrInput `pulumi:"bigtableOptions"`
	// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// [Optional, Trusted Tester] Connection for external data source.
	ConnectionId pulumi.StringPtrInput `pulumi:"connectionId"`
	// Additional properties to set if sourceFormat is set to CSV.
	CsvOptions CsvOptionsPtrInput `pulumi:"csvOptions"`
	// [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
	GoogleSheetsOptions GoogleSheetsOptionsPtrInput `pulumi:"googleSheetsOptions"`
	// [Optional] Options to configure hive partitioning support.
	HivePartitioningOptions HivePartitioningOptionsPtrInput `pulumi:"hivePartitioningOptions"`
	// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// Additional properties to set if sourceFormat is set to Parquet.
	ParquetOptions ParquetOptionsPtrInput `pulumi:"parquetOptions"`
	// [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
	Schema TableSchemaPtrInput `pulumi:"schema"`
	// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
	SourceFormat pulumi.StringPtrInput `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
}

func (ExternalDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDataConfiguration)(nil)).Elem()
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationOutput() ExternalDataConfigurationOutput {
	return i.ToExternalDataConfigurationOutputWithContext(context.Background())
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationOutputWithContext(ctx context.Context) ExternalDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDataConfigurationOutput)
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return i.ToExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDataConfigurationOutput).ToExternalDataConfigurationPtrOutputWithContext(ctx)
}

// ExternalDataConfigurationPtrInput is an input type that accepts ExternalDataConfigurationArgs, ExternalDataConfigurationPtr and ExternalDataConfigurationPtrOutput values.
// You can construct a concrete instance of `ExternalDataConfigurationPtrInput` via:
//
//          ExternalDataConfigurationArgs{...}
//
//  or:
//
//          nil
type ExternalDataConfigurationPtrInput interface {
	pulumi.Input

	ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput
	ToExternalDataConfigurationPtrOutputWithContext(context.Context) ExternalDataConfigurationPtrOutput
}

type externalDataConfigurationPtrType ExternalDataConfigurationArgs

func ExternalDataConfigurationPtr(v *ExternalDataConfigurationArgs) ExternalDataConfigurationPtrInput {
	return (*externalDataConfigurationPtrType)(v)
}

func (*externalDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalDataConfiguration)(nil)).Elem()
}

func (i *externalDataConfigurationPtrType) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return i.ToExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *externalDataConfigurationPtrType) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDataConfigurationPtrOutput)
}

type ExternalDataConfigurationOutput struct{ *pulumi.OutputState }

func (ExternalDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDataConfiguration)(nil)).Elem()
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationOutput() ExternalDataConfigurationOutput {
	return o
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationOutputWithContext(ctx context.Context) ExternalDataConfigurationOutput {
	return o
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return o.ToExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *ExternalDataConfiguration {
		return &v
	}).(ExternalDataConfigurationPtrOutput)
}

// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
func (o ExternalDataConfigurationOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *bool { return v.Autodetect }).(pulumi.BoolPtrOutput)
}

// [Optional] Additional options if sourceFormat is set to BIGTABLE.
func (o ExternalDataConfigurationOutput) BigtableOptions() BigtableOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *BigtableOptions { return v.BigtableOptions }).(BigtableOptionsPtrOutput)
}

// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
func (o ExternalDataConfigurationOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// [Optional, Trusted Tester] Connection for external data source.
func (o ExternalDataConfigurationOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

// Additional properties to set if sourceFormat is set to CSV.
func (o ExternalDataConfigurationOutput) CsvOptions() CsvOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *CsvOptions { return v.CsvOptions }).(CsvOptionsPtrOutput)
}

// [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
func (o ExternalDataConfigurationOutput) GoogleSheetsOptions() GoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *GoogleSheetsOptions { return v.GoogleSheetsOptions }).(GoogleSheetsOptionsPtrOutput)
}

// [Optional] Options to configure hive partitioning support.
func (o ExternalDataConfigurationOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *HivePartitioningOptions { return v.HivePartitioningOptions }).(HivePartitioningOptionsPtrOutput)
}

// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
func (o ExternalDataConfigurationOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
func (o ExternalDataConfigurationOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// Additional properties to set if sourceFormat is set to Parquet.
func (o ExternalDataConfigurationOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *ParquetOptions { return v.ParquetOptions }).(ParquetOptionsPtrOutput)
}

// [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
func (o ExternalDataConfigurationOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *TableSchema { return v.Schema }).(TableSchemaPtrOutput)
}

// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
func (o ExternalDataConfigurationOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.SourceFormat }).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o ExternalDataConfigurationOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type ExternalDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ExternalDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalDataConfiguration)(nil)).Elem()
}

func (o ExternalDataConfigurationPtrOutput) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return o
}

func (o ExternalDataConfigurationPtrOutput) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return o
}

func (o ExternalDataConfigurationPtrOutput) Elem() ExternalDataConfigurationOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) ExternalDataConfiguration { return *v }).(ExternalDataConfigurationOutput)
}

// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
func (o ExternalDataConfigurationPtrOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Autodetect
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Additional options if sourceFormat is set to BIGTABLE.
func (o ExternalDataConfigurationPtrOutput) BigtableOptions() BigtableOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *BigtableOptions {
		if v == nil {
			return nil
		}
		return v.BigtableOptions
	}).(BigtableOptionsPtrOutput)
}

// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
func (o ExternalDataConfigurationPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// [Optional, Trusted Tester] Connection for external data source.
func (o ExternalDataConfigurationPtrOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionId
	}).(pulumi.StringPtrOutput)
}

// Additional properties to set if sourceFormat is set to CSV.
func (o ExternalDataConfigurationPtrOutput) CsvOptions() CsvOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *CsvOptions {
		if v == nil {
			return nil
		}
		return v.CsvOptions
	}).(CsvOptionsPtrOutput)
}

// [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
func (o ExternalDataConfigurationPtrOutput) GoogleSheetsOptions() GoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *GoogleSheetsOptions {
		if v == nil {
			return nil
		}
		return v.GoogleSheetsOptions
	}).(GoogleSheetsOptionsPtrOutput)
}

// [Optional] Options to configure hive partitioning support.
func (o ExternalDataConfigurationPtrOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *HivePartitioningOptions {
		if v == nil {
			return nil
		}
		return v.HivePartitioningOptions
	}).(HivePartitioningOptionsPtrOutput)
}

// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
func (o ExternalDataConfigurationPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnknownValues
	}).(pulumi.BoolPtrOutput)
}

// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
func (o ExternalDataConfigurationPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxBadRecords
	}).(pulumi.IntPtrOutput)
}

// Additional properties to set if sourceFormat is set to Parquet.
func (o ExternalDataConfigurationPtrOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *ParquetOptions {
		if v == nil {
			return nil
		}
		return v.ParquetOptions
	}).(ParquetOptionsPtrOutput)
}

// [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
func (o ExternalDataConfigurationPtrOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *TableSchema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(TableSchemaPtrOutput)
}

// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
func (o ExternalDataConfigurationPtrOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SourceFormat
	}).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o ExternalDataConfigurationPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SourceUris
	}).(pulumi.StringArrayOutput)
}

type GoogleSheetsOptions struct {
	// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
	Range *string `pulumi:"range"`
	// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *string `pulumi:"skipLeadingRows"`
}

// GoogleSheetsOptionsInput is an input type that accepts GoogleSheetsOptionsArgs and GoogleSheetsOptionsOutput values.
// You can construct a concrete instance of `GoogleSheetsOptionsInput` via:
//
//          GoogleSheetsOptionsArgs{...}
type GoogleSheetsOptionsInput interface {
	pulumi.Input

	ToGoogleSheetsOptionsOutput() GoogleSheetsOptionsOutput
	ToGoogleSheetsOptionsOutputWithContext(context.Context) GoogleSheetsOptionsOutput
}

type GoogleSheetsOptionsArgs struct {
	// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
	Range pulumi.StringPtrInput `pulumi:"range"`
	// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows pulumi.StringPtrInput `pulumi:"skipLeadingRows"`
}

func (GoogleSheetsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsOptions)(nil)).Elem()
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsOutput() GoogleSheetsOptionsOutput {
	return i.ToGoogleSheetsOptionsOutputWithContext(context.Background())
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsOutputWithContext(ctx context.Context) GoogleSheetsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleSheetsOptionsOutput)
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return i.ToGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleSheetsOptionsOutput).ToGoogleSheetsOptionsPtrOutputWithContext(ctx)
}

// GoogleSheetsOptionsPtrInput is an input type that accepts GoogleSheetsOptionsArgs, GoogleSheetsOptionsPtr and GoogleSheetsOptionsPtrOutput values.
// You can construct a concrete instance of `GoogleSheetsOptionsPtrInput` via:
//
//          GoogleSheetsOptionsArgs{...}
//
//  or:
//
//          nil
type GoogleSheetsOptionsPtrInput interface {
	pulumi.Input

	ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput
	ToGoogleSheetsOptionsPtrOutputWithContext(context.Context) GoogleSheetsOptionsPtrOutput
}

type googleSheetsOptionsPtrType GoogleSheetsOptionsArgs

func GoogleSheetsOptionsPtr(v *GoogleSheetsOptionsArgs) GoogleSheetsOptionsPtrInput {
	return (*googleSheetsOptionsPtrType)(v)
}

func (*googleSheetsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleSheetsOptions)(nil)).Elem()
}

func (i *googleSheetsOptionsPtrType) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return i.ToGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i *googleSheetsOptionsPtrType) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleSheetsOptionsPtrOutput)
}

type GoogleSheetsOptionsOutput struct{ *pulumi.OutputState }

func (GoogleSheetsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsOptions)(nil)).Elem()
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsOutput() GoogleSheetsOptionsOutput {
	return o
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsOutputWithContext(ctx context.Context) GoogleSheetsOptionsOutput {
	return o
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return o.ToGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v GoogleSheetsOptions) *GoogleSheetsOptions {
		return &v
	}).(GoogleSheetsOptionsPtrOutput)
}

// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
func (o GoogleSheetsOptionsOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleSheetsOptions) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o GoogleSheetsOptionsOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleSheetsOptions) *string { return v.SkipLeadingRows }).(pulumi.StringPtrOutput)
}

type GoogleSheetsOptionsPtrOutput struct{ *pulumi.OutputState }

func (GoogleSheetsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleSheetsOptions)(nil)).Elem()
}

func (o GoogleSheetsOptionsPtrOutput) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return o
}

func (o GoogleSheetsOptionsPtrOutput) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return o
}

func (o GoogleSheetsOptionsPtrOutput) Elem() GoogleSheetsOptionsOutput {
	return o.ApplyT(func(v *GoogleSheetsOptions) GoogleSheetsOptions { return *v }).(GoogleSheetsOptionsOutput)
}

// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
func (o GoogleSheetsOptionsPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleSheetsOptions) *string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringPtrOutput)
}

// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o GoogleSheetsOptionsPtrOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleSheetsOptions) *string {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.StringPtrOutput)
}

type HivePartitioningOptions struct {
	// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
	Mode *string `pulumi:"mode"`
	// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
	SourceUriPrefix *string `pulumi:"sourceUriPrefix"`
}

// HivePartitioningOptionsInput is an input type that accepts HivePartitioningOptionsArgs and HivePartitioningOptionsOutput values.
// You can construct a concrete instance of `HivePartitioningOptionsInput` via:
//
//          HivePartitioningOptionsArgs{...}
type HivePartitioningOptionsInput interface {
	pulumi.Input

	ToHivePartitioningOptionsOutput() HivePartitioningOptionsOutput
	ToHivePartitioningOptionsOutputWithContext(context.Context) HivePartitioningOptionsOutput
}

type HivePartitioningOptionsArgs struct {
	// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
	RequirePartitionFilter pulumi.BoolPtrInput `pulumi:"requirePartitionFilter"`
	// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
	SourceUriPrefix pulumi.StringPtrInput `pulumi:"sourceUriPrefix"`
}

func (HivePartitioningOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HivePartitioningOptions)(nil)).Elem()
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsOutput() HivePartitioningOptionsOutput {
	return i.ToHivePartitioningOptionsOutputWithContext(context.Background())
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsOutputWithContext(ctx context.Context) HivePartitioningOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HivePartitioningOptionsOutput)
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return i.ToHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HivePartitioningOptionsOutput).ToHivePartitioningOptionsPtrOutputWithContext(ctx)
}

// HivePartitioningOptionsPtrInput is an input type that accepts HivePartitioningOptionsArgs, HivePartitioningOptionsPtr and HivePartitioningOptionsPtrOutput values.
// You can construct a concrete instance of `HivePartitioningOptionsPtrInput` via:
//
//          HivePartitioningOptionsArgs{...}
//
//  or:
//
//          nil
type HivePartitioningOptionsPtrInput interface {
	pulumi.Input

	ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput
	ToHivePartitioningOptionsPtrOutputWithContext(context.Context) HivePartitioningOptionsPtrOutput
}

type hivePartitioningOptionsPtrType HivePartitioningOptionsArgs

func HivePartitioningOptionsPtr(v *HivePartitioningOptionsArgs) HivePartitioningOptionsPtrInput {
	return (*hivePartitioningOptionsPtrType)(v)
}

func (*hivePartitioningOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HivePartitioningOptions)(nil)).Elem()
}

func (i *hivePartitioningOptionsPtrType) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return i.ToHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (i *hivePartitioningOptionsPtrType) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HivePartitioningOptionsPtrOutput)
}

type HivePartitioningOptionsOutput struct{ *pulumi.OutputState }

func (HivePartitioningOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HivePartitioningOptions)(nil)).Elem()
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsOutput() HivePartitioningOptionsOutput {
	return o
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsOutputWithContext(ctx context.Context) HivePartitioningOptionsOutput {
	return o
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return o.ToHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v HivePartitioningOptions) *HivePartitioningOptions {
		return &v
	}).(HivePartitioningOptionsPtrOutput)
}

// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
func (o HivePartitioningOptionsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HivePartitioningOptions) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
func (o HivePartitioningOptionsOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HivePartitioningOptions) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
func (o HivePartitioningOptionsOutput) SourceUriPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HivePartitioningOptions) *string { return v.SourceUriPrefix }).(pulumi.StringPtrOutput)
}

type HivePartitioningOptionsPtrOutput struct{ *pulumi.OutputState }

func (HivePartitioningOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HivePartitioningOptions)(nil)).Elem()
}

func (o HivePartitioningOptionsPtrOutput) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return o
}

func (o HivePartitioningOptionsPtrOutput) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return o
}

func (o HivePartitioningOptionsPtrOutput) Elem() HivePartitioningOptionsOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) HivePartitioningOptions { return *v }).(HivePartitioningOptionsOutput)
}

// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
func (o HivePartitioningOptionsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
func (o HivePartitioningOptionsPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) *bool {
		if v == nil {
			return nil
		}
		return v.RequirePartitionFilter
	}).(pulumi.BoolPtrOutput)
}

// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
func (o HivePartitioningOptionsPtrOutput) SourceUriPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) *string {
		if v == nil {
			return nil
		}
		return v.SourceUriPrefix
	}).(pulumi.StringPtrOutput)
}

type JobConfiguration struct {
	// [Pick one] Copies a table.
	Copy *JobConfigurationTableCopy `pulumi:"copy"`
	// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
	DryRun *bool `pulumi:"dryRun"`
	// [Pick one] Configures an extract job.
	Extract *JobConfigurationExtract `pulumi:"extract"`
	// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	JobTimeoutMs *string `pulumi:"jobTimeoutMs"`
	// [Output-only] The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
	JobType *string `pulumi:"jobType"`
	// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels map[string]string `pulumi:"labels"`
	// [Pick one] Configures a load job.
	Load *JobConfigurationLoad `pulumi:"load"`
	// [Pick one] Configures a query job.
	Query *JobConfigurationQuery `pulumi:"query"`
}

// JobConfigurationInput is an input type that accepts JobConfigurationArgs and JobConfigurationOutput values.
// You can construct a concrete instance of `JobConfigurationInput` via:
//
//          JobConfigurationArgs{...}
type JobConfigurationInput interface {
	pulumi.Input

	ToJobConfigurationOutput() JobConfigurationOutput
	ToJobConfigurationOutputWithContext(context.Context) JobConfigurationOutput
}

type JobConfigurationArgs struct {
	// [Pick one] Copies a table.
	Copy JobConfigurationTableCopyPtrInput `pulumi:"copy"`
	// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
	DryRun pulumi.BoolPtrInput `pulumi:"dryRun"`
	// [Pick one] Configures an extract job.
	Extract JobConfigurationExtractPtrInput `pulumi:"extract"`
	// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	JobTimeoutMs pulumi.StringPtrInput `pulumi:"jobTimeoutMs"`
	// [Output-only] The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
	JobType pulumi.StringPtrInput `pulumi:"jobType"`
	// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// [Pick one] Configures a load job.
	Load JobConfigurationLoadPtrInput `pulumi:"load"`
	// [Pick one] Configures a query job.
	Query JobConfigurationQueryPtrInput `pulumi:"query"`
}

func (JobConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfiguration)(nil)).Elem()
}

func (i JobConfigurationArgs) ToJobConfigurationOutput() JobConfigurationOutput {
	return i.ToJobConfigurationOutputWithContext(context.Background())
}

func (i JobConfigurationArgs) ToJobConfigurationOutputWithContext(ctx context.Context) JobConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationOutput)
}

func (i JobConfigurationArgs) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return i.ToJobConfigurationPtrOutputWithContext(context.Background())
}

func (i JobConfigurationArgs) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationOutput).ToJobConfigurationPtrOutputWithContext(ctx)
}

// JobConfigurationPtrInput is an input type that accepts JobConfigurationArgs, JobConfigurationPtr and JobConfigurationPtrOutput values.
// You can construct a concrete instance of `JobConfigurationPtrInput` via:
//
//          JobConfigurationArgs{...}
//
//  or:
//
//          nil
type JobConfigurationPtrInput interface {
	pulumi.Input

	ToJobConfigurationPtrOutput() JobConfigurationPtrOutput
	ToJobConfigurationPtrOutputWithContext(context.Context) JobConfigurationPtrOutput
}

type jobConfigurationPtrType JobConfigurationArgs

func JobConfigurationPtr(v *JobConfigurationArgs) JobConfigurationPtrInput {
	return (*jobConfigurationPtrType)(v)
}

func (*jobConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfiguration)(nil)).Elem()
}

func (i *jobConfigurationPtrType) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return i.ToJobConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationPtrType) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationPtrOutput)
}

type JobConfigurationOutput struct{ *pulumi.OutputState }

func (JobConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfiguration)(nil)).Elem()
}

func (o JobConfigurationOutput) ToJobConfigurationOutput() JobConfigurationOutput {
	return o
}

func (o JobConfigurationOutput) ToJobConfigurationOutputWithContext(ctx context.Context) JobConfigurationOutput {
	return o
}

func (o JobConfigurationOutput) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return o.ToJobConfigurationPtrOutputWithContext(context.Background())
}

func (o JobConfigurationOutput) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfiguration {
		return &v
	}).(JobConfigurationPtrOutput)
}

// [Pick one] Copies a table.
func (o JobConfigurationOutput) Copy() JobConfigurationTableCopyPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationTableCopy { return v.Copy }).(JobConfigurationTableCopyPtrOutput)
}

// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
func (o JobConfigurationOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *bool { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// [Pick one] Configures an extract job.
func (o JobConfigurationOutput) Extract() JobConfigurationExtractPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationExtract { return v.Extract }).(JobConfigurationExtractPtrOutput)
}

// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
func (o JobConfigurationOutput) JobTimeoutMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *string { return v.JobTimeoutMs }).(pulumi.StringPtrOutput)
}

// [Output-only] The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
func (o JobConfigurationOutput) JobType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *string { return v.JobType }).(pulumi.StringPtrOutput)
}

// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
func (o JobConfigurationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobConfiguration) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// [Pick one] Configures a load job.
func (o JobConfigurationOutput) Load() JobConfigurationLoadPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationLoad { return v.Load }).(JobConfigurationLoadPtrOutput)
}

// [Pick one] Configures a query job.
func (o JobConfigurationOutput) Query() JobConfigurationQueryPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationQuery { return v.Query }).(JobConfigurationQueryPtrOutput)
}

type JobConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfiguration)(nil)).Elem()
}

func (o JobConfigurationPtrOutput) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return o
}

func (o JobConfigurationPtrOutput) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return o
}

func (o JobConfigurationPtrOutput) Elem() JobConfigurationOutput {
	return o.ApplyT(func(v *JobConfiguration) JobConfiguration { return *v }).(JobConfigurationOutput)
}

// [Pick one] Copies a table.
func (o JobConfigurationPtrOutput) Copy() JobConfigurationTableCopyPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationTableCopy {
		if v == nil {
			return nil
		}
		return v.Copy
	}).(JobConfigurationTableCopyPtrOutput)
}

// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
func (o JobConfigurationPtrOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DryRun
	}).(pulumi.BoolPtrOutput)
}

// [Pick one] Configures an extract job.
func (o JobConfigurationPtrOutput) Extract() JobConfigurationExtractPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationExtract {
		if v == nil {
			return nil
		}
		return v.Extract
	}).(JobConfigurationExtractPtrOutput)
}

// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
func (o JobConfigurationPtrOutput) JobTimeoutMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.JobTimeoutMs
	}).(pulumi.StringPtrOutput)
}

// [Output-only] The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
func (o JobConfigurationPtrOutput) JobType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.JobType
	}).(pulumi.StringPtrOutput)
}

// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
func (o JobConfigurationPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// [Pick one] Configures a load job.
func (o JobConfigurationPtrOutput) Load() JobConfigurationLoadPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationLoad {
		if v == nil {
			return nil
		}
		return v.Load
	}).(JobConfigurationLoadPtrOutput)
}

// [Pick one] Configures a query job.
func (o JobConfigurationPtrOutput) Query() JobConfigurationQueryPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationQuery {
		if v == nil {
			return nil
		}
		return v.Query
	}).(JobConfigurationQueryPtrOutput)
}

type JobConfigurationExtract struct {
	// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
	Compression *string `pulumi:"compression"`
	// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
	DestinationFormat *string `pulumi:"destinationFormat"`
	// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
	DestinationUri *string `pulumi:"destinationUri"`
	// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris []string `pulumi:"destinationUris"`
	// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
	PrintHeader *bool `pulumi:"printHeader"`
	// A reference to the model being exported.
	SourceModel *ModelReference `pulumi:"sourceModel"`
	// A reference to the table being exported.
	SourceTable *TableReference `pulumi:"sourceTable"`
	// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
	UseAvroLogicalTypes *bool `pulumi:"useAvroLogicalTypes"`
}

// JobConfigurationExtractInput is an input type that accepts JobConfigurationExtractArgs and JobConfigurationExtractOutput values.
// You can construct a concrete instance of `JobConfigurationExtractInput` via:
//
//          JobConfigurationExtractArgs{...}
type JobConfigurationExtractInput interface {
	pulumi.Input

	ToJobConfigurationExtractOutput() JobConfigurationExtractOutput
	ToJobConfigurationExtractOutputWithContext(context.Context) JobConfigurationExtractOutput
}

type JobConfigurationExtractArgs struct {
	// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
	DestinationFormat pulumi.StringPtrInput `pulumi:"destinationFormat"`
	// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
	DestinationUri pulumi.StringPtrInput `pulumi:"destinationUri"`
	// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris pulumi.StringArrayInput `pulumi:"destinationUris"`
	// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
	PrintHeader pulumi.BoolPtrInput `pulumi:"printHeader"`
	// A reference to the model being exported.
	SourceModel ModelReferencePtrInput `pulumi:"sourceModel"`
	// A reference to the table being exported.
	SourceTable TableReferencePtrInput `pulumi:"sourceTable"`
	// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
	UseAvroLogicalTypes pulumi.BoolPtrInput `pulumi:"useAvroLogicalTypes"`
}

func (JobConfigurationExtractArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationExtract)(nil)).Elem()
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractOutput() JobConfigurationExtractOutput {
	return i.ToJobConfigurationExtractOutputWithContext(context.Background())
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractOutputWithContext(ctx context.Context) JobConfigurationExtractOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationExtractOutput)
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return i.ToJobConfigurationExtractPtrOutputWithContext(context.Background())
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationExtractOutput).ToJobConfigurationExtractPtrOutputWithContext(ctx)
}

// JobConfigurationExtractPtrInput is an input type that accepts JobConfigurationExtractArgs, JobConfigurationExtractPtr and JobConfigurationExtractPtrOutput values.
// You can construct a concrete instance of `JobConfigurationExtractPtrInput` via:
//
//          JobConfigurationExtractArgs{...}
//
//  or:
//
//          nil
type JobConfigurationExtractPtrInput interface {
	pulumi.Input

	ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput
	ToJobConfigurationExtractPtrOutputWithContext(context.Context) JobConfigurationExtractPtrOutput
}

type jobConfigurationExtractPtrType JobConfigurationExtractArgs

func JobConfigurationExtractPtr(v *JobConfigurationExtractArgs) JobConfigurationExtractPtrInput {
	return (*jobConfigurationExtractPtrType)(v)
}

func (*jobConfigurationExtractPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationExtract)(nil)).Elem()
}

func (i *jobConfigurationExtractPtrType) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return i.ToJobConfigurationExtractPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationExtractPtrType) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationExtractPtrOutput)
}

type JobConfigurationExtractOutput struct{ *pulumi.OutputState }

func (JobConfigurationExtractOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationExtract)(nil)).Elem()
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractOutput() JobConfigurationExtractOutput {
	return o
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractOutputWithContext(ctx context.Context) JobConfigurationExtractOutput {
	return o
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return o.ToJobConfigurationExtractPtrOutputWithContext(context.Background())
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *JobConfigurationExtract {
		return &v
	}).(JobConfigurationExtractPtrOutput)
}

// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
func (o JobConfigurationExtractOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
func (o JobConfigurationExtractOutput) DestinationFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.DestinationFormat }).(pulumi.StringPtrOutput)
}

// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
func (o JobConfigurationExtractOutput) DestinationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.DestinationUri }).(pulumi.StringPtrOutput)
}

// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
func (o JobConfigurationExtractOutput) DestinationUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationExtract) []string { return v.DestinationUris }).(pulumi.StringArrayOutput)
}

// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
func (o JobConfigurationExtractOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
func (o JobConfigurationExtractOutput) PrintHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *bool { return v.PrintHeader }).(pulumi.BoolPtrOutput)
}

// A reference to the model being exported.
func (o JobConfigurationExtractOutput) SourceModel() ModelReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *ModelReference { return v.SourceModel }).(ModelReferencePtrOutput)
}

// A reference to the table being exported.
func (o JobConfigurationExtractOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *TableReference { return v.SourceTable }).(TableReferencePtrOutput)
}

// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
func (o JobConfigurationExtractOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *bool { return v.UseAvroLogicalTypes }).(pulumi.BoolPtrOutput)
}

type JobConfigurationExtractPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationExtractPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationExtract)(nil)).Elem()
}

func (o JobConfigurationExtractPtrOutput) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return o
}

func (o JobConfigurationExtractPtrOutput) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return o
}

func (o JobConfigurationExtractPtrOutput) Elem() JobConfigurationExtractOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) JobConfigurationExtract { return *v }).(JobConfigurationExtractOutput)
}

// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
func (o JobConfigurationExtractPtrOutput) DestinationFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.DestinationFormat
	}).(pulumi.StringPtrOutput)
}

// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
func (o JobConfigurationExtractPtrOutput) DestinationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.DestinationUri
	}).(pulumi.StringPtrOutput)
}

// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
func (o JobConfigurationExtractPtrOutput) DestinationUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) []string {
		if v == nil {
			return nil
		}
		return v.DestinationUris
	}).(pulumi.StringArrayOutput)
}

// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) PrintHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *bool {
		if v == nil {
			return nil
		}
		return v.PrintHeader
	}).(pulumi.BoolPtrOutput)
}

// A reference to the model being exported.
func (o JobConfigurationExtractPtrOutput) SourceModel() ModelReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *ModelReference {
		if v == nil {
			return nil
		}
		return v.SourceModel
	}).(ModelReferencePtrOutput)
}

// A reference to the table being exported.
func (o JobConfigurationExtractPtrOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *TableReference {
		if v == nil {
			return nil
		}
		return v.SourceTable
	}).(TableReferencePtrOutput)
}

// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *bool {
		if v == nil {
			return nil
		}
		return v.UseAvroLogicalTypes
	}).(pulumi.BoolPtrOutput)
}

type JobConfigurationLoad struct {
	// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	Autodetect *bool `pulumi:"autodetect"`
	// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering *Clustering `pulumi:"clustering"`
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition *string `pulumi:"createDisposition"`
	// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC ([Preview](/products/#product-launch-stages)), and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes []string `pulumi:"decimalTargetTypes"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration *EncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// [Required] The destination table to load the data into.
	DestinationTable *TableReference `pulumi:"destinationTable"`
	// [Beta] [Optional] Properties with which to create the destination table if it is new.
	DestinationTableProperties *DestinationTableProperties `pulumi:"destinationTableProperties"`
	// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding *string `pulumi:"encoding"`
	// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// [Optional] Options to configure hive partitioning support.
	HivePartitioningOptions *HivePartitioningOptions `pulumi:"hivePartitioningOptions"`
	// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
	JsonExtension *string `pulumi:"jsonExtension"`
	// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
	NullMarker *string `pulumi:"nullMarker"`
	// [Optional] Options to configure parquet support.
	ParquetOptions *ParquetOptions `pulumi:"parquetOptions"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	ProjectionFields []string `pulumi:"projectionFields"`
	// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote *string `pulumi:"quote"`
	// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning *RangePartitioning `pulumi:"rangePartitioning"`
	// [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
	Schema *TableSchema `pulumi:"schema"`
	// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	SchemaInline *string `pulumi:"schemaInline"`
	// [Deprecated] The format of the schemaInline property.
	SchemaInlineFormat *string `pulumi:"schemaInlineFormat"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
	// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
	SourceFormat *string `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning *TimePartitioning `pulumi:"timePartitioning"`
	// [Optional] If sourceFormat is set to "AVRO", indicates whether to enable interpreting logical types into their corresponding types (ie. TIMESTAMP), instead of only using their raw types (ie. INTEGER).
	UseAvroLogicalTypes *bool `pulumi:"useAvroLogicalTypes"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobConfigurationLoadInput is an input type that accepts JobConfigurationLoadArgs and JobConfigurationLoadOutput values.
// You can construct a concrete instance of `JobConfigurationLoadInput` via:
//
//          JobConfigurationLoadArgs{...}
type JobConfigurationLoadInput interface {
	pulumi.Input

	ToJobConfigurationLoadOutput() JobConfigurationLoadOutput
	ToJobConfigurationLoadOutputWithContext(context.Context) JobConfigurationLoadOutput
}

type JobConfigurationLoadArgs struct {
	// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	Autodetect pulumi.BoolPtrInput `pulumi:"autodetect"`
	// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering ClusteringPtrInput `pulumi:"clustering"`
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC ([Preview](/products/#product-launch-stages)), and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes pulumi.StringArrayInput `pulumi:"decimalTargetTypes"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// [Required] The destination table to load the data into.
	DestinationTable TableReferencePtrInput `pulumi:"destinationTable"`
	// [Beta] [Optional] Properties with which to create the destination table if it is new.
	DestinationTableProperties DestinationTablePropertiesPtrInput `pulumi:"destinationTableProperties"`
	// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// [Optional] Options to configure hive partitioning support.
	HivePartitioningOptions HivePartitioningOptionsPtrInput `pulumi:"hivePartitioningOptions"`
	// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
	JsonExtension pulumi.StringPtrInput `pulumi:"jsonExtension"`
	// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
	NullMarker pulumi.StringPtrInput `pulumi:"nullMarker"`
	// [Optional] Options to configure parquet support.
	ParquetOptions ParquetOptionsPtrInput `pulumi:"parquetOptions"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	ProjectionFields pulumi.StringArrayInput `pulumi:"projectionFields"`
	// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote pulumi.StringPtrInput `pulumi:"quote"`
	// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning RangePartitioningPtrInput `pulumi:"rangePartitioning"`
	// [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
	Schema TableSchemaPtrInput `pulumi:"schema"`
	// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	SchemaInline pulumi.StringPtrInput `pulumi:"schemaInline"`
	// [Deprecated] The format of the schemaInline property.
	SchemaInlineFormat pulumi.StringPtrInput `pulumi:"schemaInlineFormat"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions pulumi.StringArrayInput `pulumi:"schemaUpdateOptions"`
	// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
	// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
	SourceFormat pulumi.StringPtrInput `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning TimePartitioningPtrInput `pulumi:"timePartitioning"`
	// [Optional] If sourceFormat is set to "AVRO", indicates whether to enable interpreting logical types into their corresponding types (ie. TIMESTAMP), instead of only using their raw types (ie. INTEGER).
	UseAvroLogicalTypes pulumi.BoolPtrInput `pulumi:"useAvroLogicalTypes"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobConfigurationLoadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationLoad)(nil)).Elem()
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadOutput() JobConfigurationLoadOutput {
	return i.ToJobConfigurationLoadOutputWithContext(context.Background())
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadOutputWithContext(ctx context.Context) JobConfigurationLoadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationLoadOutput)
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return i.ToJobConfigurationLoadPtrOutputWithContext(context.Background())
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationLoadOutput).ToJobConfigurationLoadPtrOutputWithContext(ctx)
}

// JobConfigurationLoadPtrInput is an input type that accepts JobConfigurationLoadArgs, JobConfigurationLoadPtr and JobConfigurationLoadPtrOutput values.
// You can construct a concrete instance of `JobConfigurationLoadPtrInput` via:
//
//          JobConfigurationLoadArgs{...}
//
//  or:
//
//          nil
type JobConfigurationLoadPtrInput interface {
	pulumi.Input

	ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput
	ToJobConfigurationLoadPtrOutputWithContext(context.Context) JobConfigurationLoadPtrOutput
}

type jobConfigurationLoadPtrType JobConfigurationLoadArgs

func JobConfigurationLoadPtr(v *JobConfigurationLoadArgs) JobConfigurationLoadPtrInput {
	return (*jobConfigurationLoadPtrType)(v)
}

func (*jobConfigurationLoadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationLoad)(nil)).Elem()
}

func (i *jobConfigurationLoadPtrType) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return i.ToJobConfigurationLoadPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationLoadPtrType) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationLoadPtrOutput)
}

type JobConfigurationLoadOutput struct{ *pulumi.OutputState }

func (JobConfigurationLoadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationLoad)(nil)).Elem()
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadOutput() JobConfigurationLoadOutput {
	return o
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadOutputWithContext(ctx context.Context) JobConfigurationLoadOutput {
	return o
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return o.ToJobConfigurationLoadPtrOutputWithContext(context.Background())
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *JobConfigurationLoad {
		return &v
	}).(JobConfigurationLoadPtrOutput)
}

// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o JobConfigurationLoadOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
func (o JobConfigurationLoadOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.Autodetect }).(pulumi.BoolPtrOutput)
}

// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o JobConfigurationLoadOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *Clustering { return v.Clustering }).(ClusteringPtrOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC ([Preview](/products/#product-launch-stages)), and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o JobConfigurationLoadOutput) DecimalTargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.DecimalTargetTypes }).(pulumi.StringArrayOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationLoadOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *EncryptionConfiguration { return v.DestinationEncryptionConfiguration }).(EncryptionConfigurationPtrOutput)
}

// [Required] The destination table to load the data into.
func (o JobConfigurationLoadOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *TableReference { return v.DestinationTable }).(TableReferencePtrOutput)
}

// [Beta] [Optional] Properties with which to create the destination table if it is new.
func (o JobConfigurationLoadOutput) DestinationTableProperties() DestinationTablePropertiesPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *DestinationTableProperties { return v.DestinationTableProperties }).(DestinationTablePropertiesPtrOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o JobConfigurationLoadOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
func (o JobConfigurationLoadOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// [Optional] Options to configure hive partitioning support.
func (o JobConfigurationLoadOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *HivePartitioningOptions { return v.HivePartitioningOptions }).(HivePartitioningOptionsPtrOutput)
}

// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
func (o JobConfigurationLoadOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
func (o JobConfigurationLoadOutput) JsonExtension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.JsonExtension }).(pulumi.StringPtrOutput)
}

// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
func (o JobConfigurationLoadOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
func (o JobConfigurationLoadOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.NullMarker }).(pulumi.StringPtrOutput)
}

// [Optional] Options to configure parquet support.
func (o JobConfigurationLoadOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *ParquetOptions { return v.ParquetOptions }).(ParquetOptionsPtrOutput)
}

// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
func (o JobConfigurationLoadOutput) ProjectionFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.ProjectionFields }).(pulumi.StringArrayOutput)
}

// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o JobConfigurationLoadOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.Quote }).(pulumi.StringPtrOutput)
}

// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *RangePartitioning { return v.RangePartitioning }).(RangePartitioningPtrOutput)
}

// [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
func (o JobConfigurationLoadOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *TableSchema { return v.Schema }).(TableSchemaPtrOutput)
}

// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
func (o JobConfigurationLoadOutput) SchemaInline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.SchemaInline }).(pulumi.StringPtrOutput)
}

// [Deprecated] The format of the schemaInline property.
func (o JobConfigurationLoadOutput) SchemaInlineFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.SchemaInlineFormat }).(pulumi.StringPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationLoadOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
func (o JobConfigurationLoadOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
func (o JobConfigurationLoadOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.SourceFormat }).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o JobConfigurationLoadOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *TimePartitioning { return v.TimePartitioning }).(TimePartitioningPtrOutput)
}

// [Optional] If sourceFormat is set to "AVRO", indicates whether to enable interpreting logical types into their corresponding types (ie. TIMESTAMP), instead of only using their raw types (ie. INTEGER).
func (o JobConfigurationLoadOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.UseAvroLogicalTypes }).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobConfigurationLoadPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationLoadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationLoad)(nil)).Elem()
}

func (o JobConfigurationLoadPtrOutput) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return o
}

func (o JobConfigurationLoadPtrOutput) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return o
}

func (o JobConfigurationLoadPtrOutput) Elem() JobConfigurationLoadOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) JobConfigurationLoad { return *v }).(JobConfigurationLoadOutput)
}

// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.AllowJaggedRows
	}).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o JobConfigurationLoadPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.AllowQuotedNewlines
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
func (o JobConfigurationLoadPtrOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.Autodetect
	}).(pulumi.BoolPtrOutput)
}

// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o JobConfigurationLoadPtrOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *Clustering {
		if v == nil {
			return nil
		}
		return v.Clustering
	}).(ClusteringPtrOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC ([Preview](/products/#product-launch-stages)), and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o JobConfigurationLoadPtrOutput) DecimalTargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.DecimalTargetTypes
	}).(pulumi.StringArrayOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationLoadPtrOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *EncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// [Required] The destination table to load the data into.
func (o JobConfigurationLoadPtrOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *TableReference {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(TableReferencePtrOutput)
}

// [Beta] [Optional] Properties with which to create the destination table if it is new.
func (o JobConfigurationLoadPtrOutput) DestinationTableProperties() DestinationTablePropertiesPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *DestinationTableProperties {
		if v == nil {
			return nil
		}
		return v.DestinationTableProperties
	}).(DestinationTablePropertiesPtrOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o JobConfigurationLoadPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
func (o JobConfigurationLoadPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// [Optional] Options to configure hive partitioning support.
func (o JobConfigurationLoadPtrOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *HivePartitioningOptions {
		if v == nil {
			return nil
		}
		return v.HivePartitioningOptions
	}).(HivePartitioningOptionsPtrOutput)
}

// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
func (o JobConfigurationLoadPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnknownValues
	}).(pulumi.BoolPtrOutput)
}

// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
func (o JobConfigurationLoadPtrOutput) JsonExtension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.JsonExtension
	}).(pulumi.StringPtrOutput)
}

// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
func (o JobConfigurationLoadPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *int {
		if v == nil {
			return nil
		}
		return v.MaxBadRecords
	}).(pulumi.IntPtrOutput)
}

// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
func (o JobConfigurationLoadPtrOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.NullMarker
	}).(pulumi.StringPtrOutput)
}

// [Optional] Options to configure parquet support.
func (o JobConfigurationLoadPtrOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *ParquetOptions {
		if v == nil {
			return nil
		}
		return v.ParquetOptions
	}).(ParquetOptionsPtrOutput)
}

// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
func (o JobConfigurationLoadPtrOutput) ProjectionFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.ProjectionFields
	}).(pulumi.StringArrayOutput)
}

// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o JobConfigurationLoadPtrOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.Quote
	}).(pulumi.StringPtrOutput)
}

// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadPtrOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *RangePartitioning {
		if v == nil {
			return nil
		}
		return v.RangePartitioning
	}).(RangePartitioningPtrOutput)
}

// [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
func (o JobConfigurationLoadPtrOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *TableSchema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(TableSchemaPtrOutput)
}

// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
func (o JobConfigurationLoadPtrOutput) SchemaInline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.SchemaInline
	}).(pulumi.StringPtrOutput)
}

// [Deprecated] The format of the schemaInline property.
func (o JobConfigurationLoadPtrOutput) SchemaInlineFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.SchemaInlineFormat
	}).(pulumi.StringPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationLoadPtrOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.SchemaUpdateOptions
	}).(pulumi.StringArrayOutput)
}

// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
func (o JobConfigurationLoadPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *int {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.IntPtrOutput)
}

// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
func (o JobConfigurationLoadPtrOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.SourceFormat
	}).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o JobConfigurationLoadPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.SourceUris
	}).(pulumi.StringArrayOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadPtrOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *TimePartitioning {
		if v == nil {
			return nil
		}
		return v.TimePartitioning
	}).(TimePartitioningPtrOutput)
}

// [Optional] If sourceFormat is set to "AVRO", indicates whether to enable interpreting logical types into their corresponding types (ie. TIMESTAMP), instead of only using their raw types (ie. INTEGER).
func (o JobConfigurationLoadPtrOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.UseAvroLogicalTypes
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

type JobConfigurationQuery struct {
	// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	AllowLargeResults *bool `pulumi:"allowLargeResults"`
	// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering *Clustering `pulumi:"clustering"`
	// Connection properties.
	ConnectionProperties []ConnectionProperty `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition *string `pulumi:"createDisposition"`
	// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
	CreateSession *bool `pulumi:"createSession"`
	// [Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
	DefaultDataset *DatasetReference `pulumi:"defaultDataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration *EncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// [Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.
	DestinationTable *TableReference `pulumi:"destinationTable"`
	// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
	FlattenResults *bool `pulumi:"flattenResults"`
	// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBillingTier *int `pulumi:"maximumBillingTier"`
	// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBytesBilled *string `pulumi:"maximumBytesBilled"`
	// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode *string `pulumi:"parameterMode"`
	// [Deprecated] This property is deprecated.
	PreserveNulls *bool `pulumi:"preserveNulls"`
	// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
	Priority *string `pulumi:"priority"`
	// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
	Query *string `pulumi:"query"`
	// Query parameters for standard SQL queries.
	QueryParameters []QueryParameter `pulumi:"queryParameters"`
	// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning *RangePartitioning `pulumi:"rangePartitioning"`
	// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
	TableDefinitions map[string]string `pulumi:"tableDefinitions"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning *TimePartitioning `pulumi:"timePartitioning"`
	// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
	UseLegacySql *bool `pulumi:"useLegacySql"`
	// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
	UseQueryCache *bool `pulumi:"useQueryCache"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []UserDefinedFunctionResource `pulumi:"userDefinedFunctionResources"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobConfigurationQueryInput is an input type that accepts JobConfigurationQueryArgs and JobConfigurationQueryOutput values.
// You can construct a concrete instance of `JobConfigurationQueryInput` via:
//
//          JobConfigurationQueryArgs{...}
type JobConfigurationQueryInput interface {
	pulumi.Input

	ToJobConfigurationQueryOutput() JobConfigurationQueryOutput
	ToJobConfigurationQueryOutputWithContext(context.Context) JobConfigurationQueryOutput
}

type JobConfigurationQueryArgs struct {
	// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	AllowLargeResults pulumi.BoolPtrInput `pulumi:"allowLargeResults"`
	// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering ClusteringPtrInput `pulumi:"clustering"`
	// Connection properties.
	ConnectionProperties ConnectionPropertyArrayInput `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
	CreateSession pulumi.BoolPtrInput `pulumi:"createSession"`
	// [Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
	DefaultDataset DatasetReferencePtrInput `pulumi:"defaultDataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// [Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.
	DestinationTable TableReferencePtrInput `pulumi:"destinationTable"`
	// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
	FlattenResults pulumi.BoolPtrInput `pulumi:"flattenResults"`
	// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBillingTier pulumi.IntPtrInput `pulumi:"maximumBillingTier"`
	// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBytesBilled pulumi.StringPtrInput `pulumi:"maximumBytesBilled"`
	// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode pulumi.StringPtrInput `pulumi:"parameterMode"`
	// [Deprecated] This property is deprecated.
	PreserveNulls pulumi.BoolPtrInput `pulumi:"preserveNulls"`
	// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Query parameters for standard SQL queries.
	QueryParameters QueryParameterArrayInput `pulumi:"queryParameters"`
	// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning RangePartitioningPtrInput `pulumi:"rangePartitioning"`
	// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions pulumi.StringArrayInput `pulumi:"schemaUpdateOptions"`
	// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
	TableDefinitions pulumi.StringMapInput `pulumi:"tableDefinitions"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning TimePartitioningPtrInput `pulumi:"timePartitioning"`
	// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
	// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
	UseQueryCache pulumi.BoolPtrInput `pulumi:"useQueryCache"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources UserDefinedFunctionResourceArrayInput `pulumi:"userDefinedFunctionResources"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobConfigurationQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationQuery)(nil)).Elem()
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryOutput() JobConfigurationQueryOutput {
	return i.ToJobConfigurationQueryOutputWithContext(context.Background())
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryOutputWithContext(ctx context.Context) JobConfigurationQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationQueryOutput)
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return i.ToJobConfigurationQueryPtrOutputWithContext(context.Background())
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationQueryOutput).ToJobConfigurationQueryPtrOutputWithContext(ctx)
}

// JobConfigurationQueryPtrInput is an input type that accepts JobConfigurationQueryArgs, JobConfigurationQueryPtr and JobConfigurationQueryPtrOutput values.
// You can construct a concrete instance of `JobConfigurationQueryPtrInput` via:
//
//          JobConfigurationQueryArgs{...}
//
//  or:
//
//          nil
type JobConfigurationQueryPtrInput interface {
	pulumi.Input

	ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput
	ToJobConfigurationQueryPtrOutputWithContext(context.Context) JobConfigurationQueryPtrOutput
}

type jobConfigurationQueryPtrType JobConfigurationQueryArgs

func JobConfigurationQueryPtr(v *JobConfigurationQueryArgs) JobConfigurationQueryPtrInput {
	return (*jobConfigurationQueryPtrType)(v)
}

func (*jobConfigurationQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationQuery)(nil)).Elem()
}

func (i *jobConfigurationQueryPtrType) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return i.ToJobConfigurationQueryPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationQueryPtrType) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationQueryPtrOutput)
}

type JobConfigurationQueryOutput struct{ *pulumi.OutputState }

func (JobConfigurationQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationQuery)(nil)).Elem()
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryOutput() JobConfigurationQueryOutput {
	return o
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryOutputWithContext(ctx context.Context) JobConfigurationQueryOutput {
	return o
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return o.ToJobConfigurationQueryPtrOutputWithContext(context.Background())
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *JobConfigurationQuery {
		return &v
	}).(JobConfigurationQueryPtrOutput)
}

// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
func (o JobConfigurationQueryOutput) AllowLargeResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.AllowLargeResults }).(pulumi.BoolPtrOutput)
}

// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o JobConfigurationQueryOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *Clustering { return v.Clustering }).(ClusteringPtrOutput)
}

// Connection properties.
func (o JobConfigurationQueryOutput) ConnectionProperties() ConnectionPropertyArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []ConnectionProperty { return v.ConnectionProperties }).(ConnectionPropertyArrayOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
func (o JobConfigurationQueryOutput) CreateSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.CreateSession }).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
func (o JobConfigurationQueryOutput) DefaultDataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *DatasetReference { return v.DefaultDataset }).(DatasetReferencePtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationQueryOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *EncryptionConfiguration { return v.DestinationEncryptionConfiguration }).(EncryptionConfigurationPtrOutput)
}

// [Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.
func (o JobConfigurationQueryOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *TableReference { return v.DestinationTable }).(TableReferencePtrOutput)
}

// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
func (o JobConfigurationQueryOutput) FlattenResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.FlattenResults }).(pulumi.BoolPtrOutput)
}

// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryOutput) MaximumBillingTier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *int { return v.MaximumBillingTier }).(pulumi.IntPtrOutput)
}

// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryOutput) MaximumBytesBilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.MaximumBytesBilled }).(pulumi.StringPtrOutput)
}

// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
func (o JobConfigurationQueryOutput) ParameterMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.ParameterMode }).(pulumi.StringPtrOutput)
}

// [Deprecated] This property is deprecated.
func (o JobConfigurationQueryOutput) PreserveNulls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.PreserveNulls }).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
func (o JobConfigurationQueryOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
func (o JobConfigurationQueryOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Query parameters for standard SQL queries.
func (o JobConfigurationQueryOutput) QueryParameters() QueryParameterArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []QueryParameter { return v.QueryParameters }).(QueryParameterArrayOutput)
}

// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *RangePartitioning { return v.RangePartitioning }).(RangePartitioningPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationQueryOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
func (o JobConfigurationQueryOutput) TableDefinitions() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobConfigurationQuery) map[string]string { return v.TableDefinitions }).(pulumi.StringMapOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *TimePartitioning { return v.TimePartitioning }).(TimePartitioningPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
func (o JobConfigurationQueryOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
func (o JobConfigurationQueryOutput) UseQueryCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.UseQueryCache }).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o JobConfigurationQueryOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []UserDefinedFunctionResource { return v.UserDefinedFunctionResources }).(UserDefinedFunctionResourceArrayOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobConfigurationQueryPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationQuery)(nil)).Elem()
}

func (o JobConfigurationQueryPtrOutput) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return o
}

func (o JobConfigurationQueryPtrOutput) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return o
}

func (o JobConfigurationQueryPtrOutput) Elem() JobConfigurationQueryOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) JobConfigurationQuery { return *v }).(JobConfigurationQueryOutput)
}

// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
func (o JobConfigurationQueryPtrOutput) AllowLargeResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.AllowLargeResults
	}).(pulumi.BoolPtrOutput)
}

// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o JobConfigurationQueryPtrOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *Clustering {
		if v == nil {
			return nil
		}
		return v.Clustering
	}).(ClusteringPtrOutput)
}

// Connection properties.
func (o JobConfigurationQueryPtrOutput) ConnectionProperties() ConnectionPropertyArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []ConnectionProperty {
		if v == nil {
			return nil
		}
		return v.ConnectionProperties
	}).(ConnectionPropertyArrayOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
func (o JobConfigurationQueryPtrOutput) CreateSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSession
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
func (o JobConfigurationQueryPtrOutput) DefaultDataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *DatasetReference {
		if v == nil {
			return nil
		}
		return v.DefaultDataset
	}).(DatasetReferencePtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationQueryPtrOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *EncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// [Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.
func (o JobConfigurationQueryPtrOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *TableReference {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(TableReferencePtrOutput)
}

// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
func (o JobConfigurationQueryPtrOutput) FlattenResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.FlattenResults
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryPtrOutput) MaximumBillingTier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBillingTier
	}).(pulumi.IntPtrOutput)
}

// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryPtrOutput) MaximumBytesBilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.MaximumBytesBilled
	}).(pulumi.StringPtrOutput)
}

// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
func (o JobConfigurationQueryPtrOutput) ParameterMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.ParameterMode
	}).(pulumi.StringPtrOutput)
}

// [Deprecated] This property is deprecated.
func (o JobConfigurationQueryPtrOutput) PreserveNulls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveNulls
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
func (o JobConfigurationQueryPtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
func (o JobConfigurationQueryPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Query parameters for standard SQL queries.
func (o JobConfigurationQueryPtrOutput) QueryParameters() QueryParameterArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []QueryParameter {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(QueryParameterArrayOutput)
}

// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryPtrOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *RangePartitioning {
		if v == nil {
			return nil
		}
		return v.RangePartitioning
	}).(RangePartitioningPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationQueryPtrOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []string {
		if v == nil {
			return nil
		}
		return v.SchemaUpdateOptions
	}).(pulumi.StringArrayOutput)
}

// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
func (o JobConfigurationQueryPtrOutput) TableDefinitions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) map[string]string {
		if v == nil {
			return nil
		}
		return v.TableDefinitions
	}).(pulumi.StringMapOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryPtrOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *TimePartitioning {
		if v == nil {
			return nil
		}
		return v.TimePartitioning
	}).(TimePartitioningPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
func (o JobConfigurationQueryPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.UseLegacySql
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
func (o JobConfigurationQueryPtrOutput) UseQueryCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.UseQueryCache
	}).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o JobConfigurationQueryPtrOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []UserDefinedFunctionResource {
		if v == nil {
			return nil
		}
		return v.UserDefinedFunctionResources
	}).(UserDefinedFunctionResourceArrayOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

type JobConfigurationTableCopy struct {
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition *string `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration *EncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
	DestinationExpirationTime interface{} `pulumi:"destinationExpirationTime"`
	// [Required] The destination table
	DestinationTable *TableReference `pulumi:"destinationTable"`
	// [Optional] Supported operation types in table copy job.
	OperationType *string `pulumi:"operationType"`
	// [Pick one] Source table to copy.
	SourceTable *TableReference `pulumi:"sourceTable"`
	// [Pick one] Source tables to copy.
	SourceTables []TableReference `pulumi:"sourceTables"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobConfigurationTableCopyInput is an input type that accepts JobConfigurationTableCopyArgs and JobConfigurationTableCopyOutput values.
// You can construct a concrete instance of `JobConfigurationTableCopyInput` via:
//
//          JobConfigurationTableCopyArgs{...}
type JobConfigurationTableCopyInput interface {
	pulumi.Input

	ToJobConfigurationTableCopyOutput() JobConfigurationTableCopyOutput
	ToJobConfigurationTableCopyOutputWithContext(context.Context) JobConfigurationTableCopyOutput
}

type JobConfigurationTableCopyArgs struct {
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
	DestinationExpirationTime pulumi.Input `pulumi:"destinationExpirationTime"`
	// [Required] The destination table
	DestinationTable TableReferencePtrInput `pulumi:"destinationTable"`
	// [Optional] Supported operation types in table copy job.
	OperationType pulumi.StringPtrInput `pulumi:"operationType"`
	// [Pick one] Source table to copy.
	SourceTable TableReferencePtrInput `pulumi:"sourceTable"`
	// [Pick one] Source tables to copy.
	SourceTables TableReferenceArrayInput `pulumi:"sourceTables"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobConfigurationTableCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationTableCopy)(nil)).Elem()
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyOutput() JobConfigurationTableCopyOutput {
	return i.ToJobConfigurationTableCopyOutputWithContext(context.Background())
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyOutputWithContext(ctx context.Context) JobConfigurationTableCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationTableCopyOutput)
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return i.ToJobConfigurationTableCopyPtrOutputWithContext(context.Background())
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationTableCopyOutput).ToJobConfigurationTableCopyPtrOutputWithContext(ctx)
}

// JobConfigurationTableCopyPtrInput is an input type that accepts JobConfigurationTableCopyArgs, JobConfigurationTableCopyPtr and JobConfigurationTableCopyPtrOutput values.
// You can construct a concrete instance of `JobConfigurationTableCopyPtrInput` via:
//
//          JobConfigurationTableCopyArgs{...}
//
//  or:
//
//          nil
type JobConfigurationTableCopyPtrInput interface {
	pulumi.Input

	ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput
	ToJobConfigurationTableCopyPtrOutputWithContext(context.Context) JobConfigurationTableCopyPtrOutput
}

type jobConfigurationTableCopyPtrType JobConfigurationTableCopyArgs

func JobConfigurationTableCopyPtr(v *JobConfigurationTableCopyArgs) JobConfigurationTableCopyPtrInput {
	return (*jobConfigurationTableCopyPtrType)(v)
}

func (*jobConfigurationTableCopyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationTableCopy)(nil)).Elem()
}

func (i *jobConfigurationTableCopyPtrType) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return i.ToJobConfigurationTableCopyPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationTableCopyPtrType) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationTableCopyPtrOutput)
}

type JobConfigurationTableCopyOutput struct{ *pulumi.OutputState }

func (JobConfigurationTableCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationTableCopy)(nil)).Elem()
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyOutput() JobConfigurationTableCopyOutput {
	return o
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyOutputWithContext(ctx context.Context) JobConfigurationTableCopyOutput {
	return o
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return o.ToJobConfigurationTableCopyPtrOutputWithContext(context.Background())
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *JobConfigurationTableCopy {
		return &v
	}).(JobConfigurationTableCopyPtrOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationTableCopyOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *EncryptionConfiguration {
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
func (o JobConfigurationTableCopyOutput) DestinationExpirationTime() pulumi.AnyOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) interface{} { return v.DestinationExpirationTime }).(pulumi.AnyOutput)
}

// [Required] The destination table
func (o JobConfigurationTableCopyOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *TableReference { return v.DestinationTable }).(TableReferencePtrOutput)
}

// [Optional] Supported operation types in table copy job.
func (o JobConfigurationTableCopyOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *string { return v.OperationType }).(pulumi.StringPtrOutput)
}

// [Pick one] Source table to copy.
func (o JobConfigurationTableCopyOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *TableReference { return v.SourceTable }).(TableReferencePtrOutput)
}

// [Pick one] Source tables to copy.
func (o JobConfigurationTableCopyOutput) SourceTables() TableReferenceArrayOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) []TableReference { return v.SourceTables }).(TableReferenceArrayOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobConfigurationTableCopyPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationTableCopyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationTableCopy)(nil)).Elem()
}

func (o JobConfigurationTableCopyPtrOutput) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return o
}

func (o JobConfigurationTableCopyPtrOutput) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return o
}

func (o JobConfigurationTableCopyPtrOutput) Elem() JobConfigurationTableCopyOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) JobConfigurationTableCopy { return *v }).(JobConfigurationTableCopyOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationTableCopyPtrOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *EncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
func (o JobConfigurationTableCopyPtrOutput) DestinationExpirationTime() pulumi.AnyOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) interface{} {
		if v == nil {
			return nil
		}
		return v.DestinationExpirationTime
	}).(pulumi.AnyOutput)
}

// [Required] The destination table
func (o JobConfigurationTableCopyPtrOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *TableReference {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(TableReferencePtrOutput)
}

// [Optional] Supported operation types in table copy job.
func (o JobConfigurationTableCopyPtrOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *string {
		if v == nil {
			return nil
		}
		return v.OperationType
	}).(pulumi.StringPtrOutput)
}

// [Pick one] Source table to copy.
func (o JobConfigurationTableCopyPtrOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *TableReference {
		if v == nil {
			return nil
		}
		return v.SourceTable
	}).(TableReferencePtrOutput)
}

// [Pick one] Source tables to copy.
func (o JobConfigurationTableCopyPtrOutput) SourceTables() TableReferenceArrayOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) []TableReference {
		if v == nil {
			return nil
		}
		return v.SourceTables
	}).(TableReferenceArrayOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

type JobReference struct {
	// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId *string `pulumi:"jobId"`
	// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
	Location *string `pulumi:"location"`
	// [Required] The ID of the project containing this job.
	ProjectId *string `pulumi:"projectId"`
}

// JobReferenceInput is an input type that accepts JobReferenceArgs and JobReferenceOutput values.
// You can construct a concrete instance of `JobReferenceInput` via:
//
//          JobReferenceArgs{...}
type JobReferenceInput interface {
	pulumi.Input

	ToJobReferenceOutput() JobReferenceOutput
	ToJobReferenceOutputWithContext(context.Context) JobReferenceOutput
}

type JobReferenceArgs struct {
	// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId pulumi.StringPtrInput `pulumi:"jobId"`
	// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// [Required] The ID of the project containing this job.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (JobReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobReference)(nil)).Elem()
}

func (i JobReferenceArgs) ToJobReferenceOutput() JobReferenceOutput {
	return i.ToJobReferenceOutputWithContext(context.Background())
}

func (i JobReferenceArgs) ToJobReferenceOutputWithContext(ctx context.Context) JobReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobReferenceOutput)
}

func (i JobReferenceArgs) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return i.ToJobReferencePtrOutputWithContext(context.Background())
}

func (i JobReferenceArgs) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobReferenceOutput).ToJobReferencePtrOutputWithContext(ctx)
}

// JobReferencePtrInput is an input type that accepts JobReferenceArgs, JobReferencePtr and JobReferencePtrOutput values.
// You can construct a concrete instance of `JobReferencePtrInput` via:
//
//          JobReferenceArgs{...}
//
//  or:
//
//          nil
type JobReferencePtrInput interface {
	pulumi.Input

	ToJobReferencePtrOutput() JobReferencePtrOutput
	ToJobReferencePtrOutputWithContext(context.Context) JobReferencePtrOutput
}

type jobReferencePtrType JobReferenceArgs

func JobReferencePtr(v *JobReferenceArgs) JobReferencePtrInput {
	return (*jobReferencePtrType)(v)
}

func (*jobReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobReference)(nil)).Elem()
}

func (i *jobReferencePtrType) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return i.ToJobReferencePtrOutputWithContext(context.Background())
}

func (i *jobReferencePtrType) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobReferencePtrOutput)
}

type JobReferenceOutput struct{ *pulumi.OutputState }

func (JobReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobReference)(nil)).Elem()
}

func (o JobReferenceOutput) ToJobReferenceOutput() JobReferenceOutput {
	return o
}

func (o JobReferenceOutput) ToJobReferenceOutputWithContext(ctx context.Context) JobReferenceOutput {
	return o
}

func (o JobReferenceOutput) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return o.ToJobReferencePtrOutputWithContext(context.Background())
}

func (o JobReferenceOutput) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return o.ApplyT(func(v JobReference) *JobReference {
		return &v
	}).(JobReferencePtrOutput)
}

// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
func (o JobReferenceOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobReference) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
func (o JobReferenceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobReference) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this job.
func (o JobReferenceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobReference) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

type JobReferencePtrOutput struct{ *pulumi.OutputState }

func (JobReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobReference)(nil)).Elem()
}

func (o JobReferencePtrOutput) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return o
}

func (o JobReferencePtrOutput) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return o
}

func (o JobReferencePtrOutput) Elem() JobReferenceOutput {
	return o.ApplyT(func(v *JobReference) JobReference { return *v }).(JobReferenceOutput)
}

// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
func (o JobReferencePtrOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobReference) *string {
		if v == nil {
			return nil
		}
		return v.JobId
	}).(pulumi.StringPtrOutput)
}

// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
func (o JobReferencePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobReference) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this job.
func (o JobReferencePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobReference) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

type JobStatistics struct {
	// [TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.
	CompletionRatio *float64 `pulumi:"completionRatio"`
	// [Output-only] Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
	CreationTime *string `pulumi:"creationTime"`
	// [Output-only] End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
	EndTime *string `pulumi:"endTime"`
	// [Output-only] Statistics for an extract job.
	Extract *JobStatistics4 `pulumi:"extract"`
	// [Output-only] Statistics for a load job.
	Load *JobStatistics3 `pulumi:"load"`
	// [Output-only] Number of child jobs executed.
	NumChildJobs *string `pulumi:"numChildJobs"`
	// [Output-only] If this is a child job, the id of the parent.
	ParentJobId *string `pulumi:"parentJobId"`
	// [Output-only] Statistics for a query job.
	Query *JobStatistics2 `pulumi:"query"`
	// [Output-only] Quotas which delayed this job's start time.
	QuotaDeferments []string `pulumi:"quotaDeferments"`
	// [Output-only] Job resource usage breakdown by reservation.
	ReservationUsage []map[string]string `pulumi:"reservationUsage"`
	// [Output-only] Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
	Reservation_id *string `pulumi:"reservation_id"`
	// [Output-only] [Preview] Statistics for row-level security. Present only for query and extract jobs.
	RowLevelSecurityStatistics *RowLevelSecurityStatistics `pulumi:"rowLevelSecurityStatistics"`
	// [Output-only] Statistics for a child job of a script.
	ScriptStatistics *ScriptStatistics `pulumi:"scriptStatistics"`
	// [Output-only] [Preview] Information of the session if this job is part of one.
	SessionInfoTemplate *SessionInfo `pulumi:"sessionInfoTemplate"`
	// [Output-only] Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
	StartTime *string `pulumi:"startTime"`
	// [Output-only] [Deprecated] Use the bytes processed in the query statistics instead.
	TotalBytesProcessed *string `pulumi:"totalBytesProcessed"`
	// [Output-only] Slot-milliseconds for the job.
	TotalSlotMs *string `pulumi:"totalSlotMs"`
	// [Output-only] [Alpha] Information of the multi-statement transaction if this job is part of one.
	TransactionInfoTemplate *TransactionInfo `pulumi:"transactionInfoTemplate"`
}

// JobStatisticsInput is an input type that accepts JobStatisticsArgs and JobStatisticsOutput values.
// You can construct a concrete instance of `JobStatisticsInput` via:
//
//          JobStatisticsArgs{...}
type JobStatisticsInput interface {
	pulumi.Input

	ToJobStatisticsOutput() JobStatisticsOutput
	ToJobStatisticsOutputWithContext(context.Context) JobStatisticsOutput
}

type JobStatisticsArgs struct {
	// [TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.
	CompletionRatio pulumi.Float64PtrInput `pulumi:"completionRatio"`
	// [Output-only] Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
	CreationTime pulumi.StringPtrInput `pulumi:"creationTime"`
	// [Output-only] End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// [Output-only] Statistics for an extract job.
	Extract JobStatistics4PtrInput `pulumi:"extract"`
	// [Output-only] Statistics for a load job.
	Load JobStatistics3PtrInput `pulumi:"load"`
	// [Output-only] Number of child jobs executed.
	NumChildJobs pulumi.StringPtrInput `pulumi:"numChildJobs"`
	// [Output-only] If this is a child job, the id of the parent.
	ParentJobId pulumi.StringPtrInput `pulumi:"parentJobId"`
	// [Output-only] Statistics for a query job.
	Query JobStatistics2PtrInput `pulumi:"query"`
	// [Output-only] Quotas which delayed this job's start time.
	QuotaDeferments pulumi.StringArrayInput `pulumi:"quotaDeferments"`
	// [Output-only] Job resource usage breakdown by reservation.
	ReservationUsage pulumi.StringMapArrayInput `pulumi:"reservationUsage"`
	// [Output-only] Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
	Reservation_id pulumi.StringPtrInput `pulumi:"reservation_id"`
	// [Output-only] [Preview] Statistics for row-level security. Present only for query and extract jobs.
	RowLevelSecurityStatistics RowLevelSecurityStatisticsPtrInput `pulumi:"rowLevelSecurityStatistics"`
	// [Output-only] Statistics for a child job of a script.
	ScriptStatistics ScriptStatisticsPtrInput `pulumi:"scriptStatistics"`
	// [Output-only] [Preview] Information of the session if this job is part of one.
	SessionInfoTemplate SessionInfoPtrInput `pulumi:"sessionInfoTemplate"`
	// [Output-only] Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// [Output-only] [Deprecated] Use the bytes processed in the query statistics instead.
	TotalBytesProcessed pulumi.StringPtrInput `pulumi:"totalBytesProcessed"`
	// [Output-only] Slot-milliseconds for the job.
	TotalSlotMs pulumi.StringPtrInput `pulumi:"totalSlotMs"`
	// [Output-only] [Alpha] Information of the multi-statement transaction if this job is part of one.
	TransactionInfoTemplate TransactionInfoPtrInput `pulumi:"transactionInfoTemplate"`
}

func (JobStatisticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics)(nil)).Elem()
}

func (i JobStatisticsArgs) ToJobStatisticsOutput() JobStatisticsOutput {
	return i.ToJobStatisticsOutputWithContext(context.Background())
}

func (i JobStatisticsArgs) ToJobStatisticsOutputWithContext(ctx context.Context) JobStatisticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatisticsOutput)
}

func (i JobStatisticsArgs) ToJobStatisticsPtrOutput() JobStatisticsPtrOutput {
	return i.ToJobStatisticsPtrOutputWithContext(context.Background())
}

func (i JobStatisticsArgs) ToJobStatisticsPtrOutputWithContext(ctx context.Context) JobStatisticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatisticsOutput).ToJobStatisticsPtrOutputWithContext(ctx)
}

// JobStatisticsPtrInput is an input type that accepts JobStatisticsArgs, JobStatisticsPtr and JobStatisticsPtrOutput values.
// You can construct a concrete instance of `JobStatisticsPtrInput` via:
//
//          JobStatisticsArgs{...}
//
//  or:
//
//          nil
type JobStatisticsPtrInput interface {
	pulumi.Input

	ToJobStatisticsPtrOutput() JobStatisticsPtrOutput
	ToJobStatisticsPtrOutputWithContext(context.Context) JobStatisticsPtrOutput
}

type jobStatisticsPtrType JobStatisticsArgs

func JobStatisticsPtr(v *JobStatisticsArgs) JobStatisticsPtrInput {
	return (*jobStatisticsPtrType)(v)
}

func (*jobStatisticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatistics)(nil)).Elem()
}

func (i *jobStatisticsPtrType) ToJobStatisticsPtrOutput() JobStatisticsPtrOutput {
	return i.ToJobStatisticsPtrOutputWithContext(context.Background())
}

func (i *jobStatisticsPtrType) ToJobStatisticsPtrOutputWithContext(ctx context.Context) JobStatisticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatisticsPtrOutput)
}

type JobStatisticsOutput struct{ *pulumi.OutputState }

func (JobStatisticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics)(nil)).Elem()
}

func (o JobStatisticsOutput) ToJobStatisticsOutput() JobStatisticsOutput {
	return o
}

func (o JobStatisticsOutput) ToJobStatisticsOutputWithContext(ctx context.Context) JobStatisticsOutput {
	return o
}

func (o JobStatisticsOutput) ToJobStatisticsPtrOutput() JobStatisticsPtrOutput {
	return o.ToJobStatisticsPtrOutputWithContext(context.Background())
}

func (o JobStatisticsOutput) ToJobStatisticsPtrOutputWithContext(ctx context.Context) JobStatisticsPtrOutput {
	return o.ApplyT(func(v JobStatistics) *JobStatistics {
		return &v
	}).(JobStatisticsPtrOutput)
}

// [TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.
func (o JobStatisticsOutput) CompletionRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v JobStatistics) *float64 { return v.CompletionRatio }).(pulumi.Float64PtrOutput)
}

// [Output-only] Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
func (o JobStatisticsOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics) *string { return v.CreationTime }).(pulumi.StringPtrOutput)
}

// [Output-only] End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
func (o JobStatisticsOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Output-only] Statistics for an extract job.
func (o JobStatisticsOutput) Extract() JobStatistics4PtrOutput {
	return o.ApplyT(func(v JobStatistics) *JobStatistics4 { return v.Extract }).(JobStatistics4PtrOutput)
}

// [Output-only] Statistics for a load job.
func (o JobStatisticsOutput) Load() JobStatistics3PtrOutput {
	return o.ApplyT(func(v JobStatistics) *JobStatistics3 { return v.Load }).(JobStatistics3PtrOutput)
}

// [Output-only] Number of child jobs executed.
func (o JobStatisticsOutput) NumChildJobs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics) *string { return v.NumChildJobs }).(pulumi.StringPtrOutput)
}

// [Output-only] If this is a child job, the id of the parent.
func (o JobStatisticsOutput) ParentJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics) *string { return v.ParentJobId }).(pulumi.StringPtrOutput)
}

// [Output-only] Statistics for a query job.
func (o JobStatisticsOutput) Query() JobStatistics2PtrOutput {
	return o.ApplyT(func(v JobStatistics) *JobStatistics2 { return v.Query }).(JobStatistics2PtrOutput)
}

// [Output-only] Quotas which delayed this job's start time.
func (o JobStatisticsOutput) QuotaDeferments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobStatistics) []string { return v.QuotaDeferments }).(pulumi.StringArrayOutput)
}

// [Output-only] Job resource usage breakdown by reservation.
func (o JobStatisticsOutput) ReservationUsage() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v JobStatistics) []map[string]string { return v.ReservationUsage }).(pulumi.StringMapArrayOutput)
}

// [Output-only] Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
func (o JobStatisticsOutput) Reservation_id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics) *string { return v.Reservation_id }).(pulumi.StringPtrOutput)
}

// [Output-only] [Preview] Statistics for row-level security. Present only for query and extract jobs.
func (o JobStatisticsOutput) RowLevelSecurityStatistics() RowLevelSecurityStatisticsPtrOutput {
	return o.ApplyT(func(v JobStatistics) *RowLevelSecurityStatistics { return v.RowLevelSecurityStatistics }).(RowLevelSecurityStatisticsPtrOutput)
}

// [Output-only] Statistics for a child job of a script.
func (o JobStatisticsOutput) ScriptStatistics() ScriptStatisticsPtrOutput {
	return o.ApplyT(func(v JobStatistics) *ScriptStatistics { return v.ScriptStatistics }).(ScriptStatisticsPtrOutput)
}

// [Output-only] [Preview] Information of the session if this job is part of one.
func (o JobStatisticsOutput) SessionInfoTemplate() SessionInfoPtrOutput {
	return o.ApplyT(func(v JobStatistics) *SessionInfo { return v.SessionInfoTemplate }).(SessionInfoPtrOutput)
}

// [Output-only] Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
func (o JobStatisticsOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// [Output-only] [Deprecated] Use the bytes processed in the query statistics instead.
func (o JobStatisticsOutput) TotalBytesProcessed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics) *string { return v.TotalBytesProcessed }).(pulumi.StringPtrOutput)
}

// [Output-only] Slot-milliseconds for the job.
func (o JobStatisticsOutput) TotalSlotMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics) *string { return v.TotalSlotMs }).(pulumi.StringPtrOutput)
}

// [Output-only] [Alpha] Information of the multi-statement transaction if this job is part of one.
func (o JobStatisticsOutput) TransactionInfoTemplate() TransactionInfoPtrOutput {
	return o.ApplyT(func(v JobStatistics) *TransactionInfo { return v.TransactionInfoTemplate }).(TransactionInfoPtrOutput)
}

type JobStatisticsPtrOutput struct{ *pulumi.OutputState }

func (JobStatisticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatistics)(nil)).Elem()
}

func (o JobStatisticsPtrOutput) ToJobStatisticsPtrOutput() JobStatisticsPtrOutput {
	return o
}

func (o JobStatisticsPtrOutput) ToJobStatisticsPtrOutputWithContext(ctx context.Context) JobStatisticsPtrOutput {
	return o
}

func (o JobStatisticsPtrOutput) Elem() JobStatisticsOutput {
	return o.ApplyT(func(v *JobStatistics) JobStatistics { return *v }).(JobStatisticsOutput)
}

// [TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.
func (o JobStatisticsPtrOutput) CompletionRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *JobStatistics) *float64 {
		if v == nil {
			return nil
		}
		return v.CompletionRatio
	}).(pulumi.Float64PtrOutput)
}

// [Output-only] Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
func (o JobStatisticsPtrOutput) CreationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *string {
		if v == nil {
			return nil
		}
		return v.CreationTime
	}).(pulumi.StringPtrOutput)
}

// [Output-only] End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
func (o JobStatisticsPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Statistics for an extract job.
func (o JobStatisticsPtrOutput) Extract() JobStatistics4PtrOutput {
	return o.ApplyT(func(v *JobStatistics) *JobStatistics4 {
		if v == nil {
			return nil
		}
		return v.Extract
	}).(JobStatistics4PtrOutput)
}

// [Output-only] Statistics for a load job.
func (o JobStatisticsPtrOutput) Load() JobStatistics3PtrOutput {
	return o.ApplyT(func(v *JobStatistics) *JobStatistics3 {
		if v == nil {
			return nil
		}
		return v.Load
	}).(JobStatistics3PtrOutput)
}

// [Output-only] Number of child jobs executed.
func (o JobStatisticsPtrOutput) NumChildJobs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *string {
		if v == nil {
			return nil
		}
		return v.NumChildJobs
	}).(pulumi.StringPtrOutput)
}

// [Output-only] If this is a child job, the id of the parent.
func (o JobStatisticsPtrOutput) ParentJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *string {
		if v == nil {
			return nil
		}
		return v.ParentJobId
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Statistics for a query job.
func (o JobStatisticsPtrOutput) Query() JobStatistics2PtrOutput {
	return o.ApplyT(func(v *JobStatistics) *JobStatistics2 {
		if v == nil {
			return nil
		}
		return v.Query
	}).(JobStatistics2PtrOutput)
}

// [Output-only] Quotas which delayed this job's start time.
func (o JobStatisticsPtrOutput) QuotaDeferments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobStatistics) []string {
		if v == nil {
			return nil
		}
		return v.QuotaDeferments
	}).(pulumi.StringArrayOutput)
}

// [Output-only] Job resource usage breakdown by reservation.
func (o JobStatisticsPtrOutput) ReservationUsage() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *JobStatistics) []map[string]string {
		if v == nil {
			return nil
		}
		return v.ReservationUsage
	}).(pulumi.StringMapArrayOutput)
}

// [Output-only] Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
func (o JobStatisticsPtrOutput) Reservation_id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *string {
		if v == nil {
			return nil
		}
		return v.Reservation_id
	}).(pulumi.StringPtrOutput)
}

// [Output-only] [Preview] Statistics for row-level security. Present only for query and extract jobs.
func (o JobStatisticsPtrOutput) RowLevelSecurityStatistics() RowLevelSecurityStatisticsPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *RowLevelSecurityStatistics {
		if v == nil {
			return nil
		}
		return v.RowLevelSecurityStatistics
	}).(RowLevelSecurityStatisticsPtrOutput)
}

// [Output-only] Statistics for a child job of a script.
func (o JobStatisticsPtrOutput) ScriptStatistics() ScriptStatisticsPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *ScriptStatistics {
		if v == nil {
			return nil
		}
		return v.ScriptStatistics
	}).(ScriptStatisticsPtrOutput)
}

// [Output-only] [Preview] Information of the session if this job is part of one.
func (o JobStatisticsPtrOutput) SessionInfoTemplate() SessionInfoPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *SessionInfo {
		if v == nil {
			return nil
		}
		return v.SessionInfoTemplate
	}).(SessionInfoPtrOutput)
}

// [Output-only] Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
func (o JobStatisticsPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// [Output-only] [Deprecated] Use the bytes processed in the query statistics instead.
func (o JobStatisticsPtrOutput) TotalBytesProcessed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *string {
		if v == nil {
			return nil
		}
		return v.TotalBytesProcessed
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Slot-milliseconds for the job.
func (o JobStatisticsPtrOutput) TotalSlotMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *string {
		if v == nil {
			return nil
		}
		return v.TotalSlotMs
	}).(pulumi.StringPtrOutput)
}

// [Output-only] [Alpha] Information of the multi-statement transaction if this job is part of one.
func (o JobStatisticsPtrOutput) TransactionInfoTemplate() TransactionInfoPtrOutput {
	return o.ApplyT(func(v *JobStatistics) *TransactionInfo {
		if v == nil {
			return nil
		}
		return v.TransactionInfoTemplate
	}).(TransactionInfoPtrOutput)
}

type JobStatistics2 struct {
	// [Output-only] Billing tier for the job.
	BillingTier *int `pulumi:"billingTier"`
	// [Output-only] Whether the query result was fetched from the query cache.
	CacheHit *bool `pulumi:"cacheHit"`
	// [Output-only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
	DdlAffectedRowAccessPolicyCount *string `pulumi:"ddlAffectedRowAccessPolicyCount"`
	// The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
	DdlOperationPerformed *string `pulumi:"ddlOperationPerformed"`
	// [Output-only] The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA queries.
	DdlTargetDataset *DatasetReference `pulumi:"ddlTargetDataset"`
	// The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
	DdlTargetRoutine *RoutineReference `pulumi:"ddlTargetRoutine"`
	// [Output-only] [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
	DdlTargetRowAccessPolicy *RowAccessPolicyReference `pulumi:"ddlTargetRowAccessPolicy"`
	// [Output-only] The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
	DdlTargetTable *TableReference `pulumi:"ddlTargetTable"`
	// [Output-only] The original estimate of bytes processed for the job.
	EstimatedBytesProcessed *string `pulumi:"estimatedBytesProcessed"`
	// [Output-only, Beta] Information about create model query job progress.
	ModelTraining *BigQueryModelTraining `pulumi:"modelTraining"`
	// [Output-only, Beta] Deprecated; do not use.
	ModelTrainingCurrentIteration *int `pulumi:"modelTrainingCurrentIteration"`
	// [Output-only, Beta] Deprecated; do not use.
	ModelTrainingExpectedTotalIteration *string `pulumi:"modelTrainingExpectedTotalIteration"`
	// [Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
	NumDmlAffectedRows *string `pulumi:"numDmlAffectedRows"`
	// [Output-only] Describes execution plan for the query.
	QueryPlan []ExplainQueryStage `pulumi:"queryPlan"`
	// [Output-only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
	ReferencedRoutines []RoutineReference `pulumi:"referencedRoutines"`
	// [Output-only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
	ReferencedTables []TableReference `pulumi:"referencedTables"`
	// [Output-only] Job resource usage breakdown by reservation.
	ReservationUsage []map[string]string `pulumi:"reservationUsage"`
	// [Output-only] The schema of the results. Present only for successful dry run of non-legacy SQL queries.
	Schema *TableSchema `pulumi:"schema"`
	// The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
	StatementType *string `pulumi:"statementType"`
	// [Output-only] [Beta] Describes a timeline of job execution.
	Timeline []QueryTimelineSample `pulumi:"timeline"`
	// [Output-only] Total bytes billed for the job.
	TotalBytesBilled *string `pulumi:"totalBytesBilled"`
	// [Output-only] Total bytes processed for the job.
	TotalBytesProcessed *string `pulumi:"totalBytesProcessed"`
	// [Output-only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
	TotalBytesProcessedAccuracy *string `pulumi:"totalBytesProcessedAccuracy"`
	// [Output-only] Total number of partitions processed from all partitioned tables referenced in the job.
	TotalPartitionsProcessed *string `pulumi:"totalPartitionsProcessed"`
	// [Output-only] Slot-milliseconds for the job.
	TotalSlotMs *string `pulumi:"totalSlotMs"`
	// Standard SQL only: list of undeclared query parameters detected during a dry run validation.
	UndeclaredQueryParameters []QueryParameter `pulumi:"undeclaredQueryParameters"`
}

// JobStatistics2Input is an input type that accepts JobStatistics2Args and JobStatistics2Output values.
// You can construct a concrete instance of `JobStatistics2Input` via:
//
//          JobStatistics2Args{...}
type JobStatistics2Input interface {
	pulumi.Input

	ToJobStatistics2Output() JobStatistics2Output
	ToJobStatistics2OutputWithContext(context.Context) JobStatistics2Output
}

type JobStatistics2Args struct {
	// [Output-only] Billing tier for the job.
	BillingTier pulumi.IntPtrInput `pulumi:"billingTier"`
	// [Output-only] Whether the query result was fetched from the query cache.
	CacheHit pulumi.BoolPtrInput `pulumi:"cacheHit"`
	// [Output-only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
	DdlAffectedRowAccessPolicyCount pulumi.StringPtrInput `pulumi:"ddlAffectedRowAccessPolicyCount"`
	// The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
	DdlOperationPerformed pulumi.StringPtrInput `pulumi:"ddlOperationPerformed"`
	// [Output-only] The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA queries.
	DdlTargetDataset DatasetReferencePtrInput `pulumi:"ddlTargetDataset"`
	// The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
	DdlTargetRoutine RoutineReferencePtrInput `pulumi:"ddlTargetRoutine"`
	// [Output-only] [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
	DdlTargetRowAccessPolicy RowAccessPolicyReferencePtrInput `pulumi:"ddlTargetRowAccessPolicy"`
	// [Output-only] The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
	DdlTargetTable TableReferencePtrInput `pulumi:"ddlTargetTable"`
	// [Output-only] The original estimate of bytes processed for the job.
	EstimatedBytesProcessed pulumi.StringPtrInput `pulumi:"estimatedBytesProcessed"`
	// [Output-only, Beta] Information about create model query job progress.
	ModelTraining BigQueryModelTrainingPtrInput `pulumi:"modelTraining"`
	// [Output-only, Beta] Deprecated; do not use.
	ModelTrainingCurrentIteration pulumi.IntPtrInput `pulumi:"modelTrainingCurrentIteration"`
	// [Output-only, Beta] Deprecated; do not use.
	ModelTrainingExpectedTotalIteration pulumi.StringPtrInput `pulumi:"modelTrainingExpectedTotalIteration"`
	// [Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
	NumDmlAffectedRows pulumi.StringPtrInput `pulumi:"numDmlAffectedRows"`
	// [Output-only] Describes execution plan for the query.
	QueryPlan ExplainQueryStageArrayInput `pulumi:"queryPlan"`
	// [Output-only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
	ReferencedRoutines RoutineReferenceArrayInput `pulumi:"referencedRoutines"`
	// [Output-only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
	ReferencedTables TableReferenceArrayInput `pulumi:"referencedTables"`
	// [Output-only] Job resource usage breakdown by reservation.
	ReservationUsage pulumi.StringMapArrayInput `pulumi:"reservationUsage"`
	// [Output-only] The schema of the results. Present only for successful dry run of non-legacy SQL queries.
	Schema TableSchemaPtrInput `pulumi:"schema"`
	// The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
	StatementType pulumi.StringPtrInput `pulumi:"statementType"`
	// [Output-only] [Beta] Describes a timeline of job execution.
	Timeline QueryTimelineSampleArrayInput `pulumi:"timeline"`
	// [Output-only] Total bytes billed for the job.
	TotalBytesBilled pulumi.StringPtrInput `pulumi:"totalBytesBilled"`
	// [Output-only] Total bytes processed for the job.
	TotalBytesProcessed pulumi.StringPtrInput `pulumi:"totalBytesProcessed"`
	// [Output-only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
	TotalBytesProcessedAccuracy pulumi.StringPtrInput `pulumi:"totalBytesProcessedAccuracy"`
	// [Output-only] Total number of partitions processed from all partitioned tables referenced in the job.
	TotalPartitionsProcessed pulumi.StringPtrInput `pulumi:"totalPartitionsProcessed"`
	// [Output-only] Slot-milliseconds for the job.
	TotalSlotMs pulumi.StringPtrInput `pulumi:"totalSlotMs"`
	// Standard SQL only: list of undeclared query parameters detected during a dry run validation.
	UndeclaredQueryParameters QueryParameterArrayInput `pulumi:"undeclaredQueryParameters"`
}

func (JobStatistics2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics2)(nil)).Elem()
}

func (i JobStatistics2Args) ToJobStatistics2Output() JobStatistics2Output {
	return i.ToJobStatistics2OutputWithContext(context.Background())
}

func (i JobStatistics2Args) ToJobStatistics2OutputWithContext(ctx context.Context) JobStatistics2Output {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatistics2Output)
}

func (i JobStatistics2Args) ToJobStatistics2PtrOutput() JobStatistics2PtrOutput {
	return i.ToJobStatistics2PtrOutputWithContext(context.Background())
}

func (i JobStatistics2Args) ToJobStatistics2PtrOutputWithContext(ctx context.Context) JobStatistics2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatistics2Output).ToJobStatistics2PtrOutputWithContext(ctx)
}

// JobStatistics2PtrInput is an input type that accepts JobStatistics2Args, JobStatistics2Ptr and JobStatistics2PtrOutput values.
// You can construct a concrete instance of `JobStatistics2PtrInput` via:
//
//          JobStatistics2Args{...}
//
//  or:
//
//          nil
type JobStatistics2PtrInput interface {
	pulumi.Input

	ToJobStatistics2PtrOutput() JobStatistics2PtrOutput
	ToJobStatistics2PtrOutputWithContext(context.Context) JobStatistics2PtrOutput
}

type jobStatistics2PtrType JobStatistics2Args

func JobStatistics2Ptr(v *JobStatistics2Args) JobStatistics2PtrInput {
	return (*jobStatistics2PtrType)(v)
}

func (*jobStatistics2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatistics2)(nil)).Elem()
}

func (i *jobStatistics2PtrType) ToJobStatistics2PtrOutput() JobStatistics2PtrOutput {
	return i.ToJobStatistics2PtrOutputWithContext(context.Background())
}

func (i *jobStatistics2PtrType) ToJobStatistics2PtrOutputWithContext(ctx context.Context) JobStatistics2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatistics2PtrOutput)
}

type JobStatistics2Output struct{ *pulumi.OutputState }

func (JobStatistics2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics2)(nil)).Elem()
}

func (o JobStatistics2Output) ToJobStatistics2Output() JobStatistics2Output {
	return o
}

func (o JobStatistics2Output) ToJobStatistics2OutputWithContext(ctx context.Context) JobStatistics2Output {
	return o
}

func (o JobStatistics2Output) ToJobStatistics2PtrOutput() JobStatistics2PtrOutput {
	return o.ToJobStatistics2PtrOutputWithContext(context.Background())
}

func (o JobStatistics2Output) ToJobStatistics2PtrOutputWithContext(ctx context.Context) JobStatistics2PtrOutput {
	return o.ApplyT(func(v JobStatistics2) *JobStatistics2 {
		return &v
	}).(JobStatistics2PtrOutput)
}

// [Output-only] Billing tier for the job.
func (o JobStatistics2Output) BillingTier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *int { return v.BillingTier }).(pulumi.IntPtrOutput)
}

// [Output-only] Whether the query result was fetched from the query cache.
func (o JobStatistics2Output) CacheHit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *bool { return v.CacheHit }).(pulumi.BoolPtrOutput)
}

// [Output-only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
func (o JobStatistics2Output) DdlAffectedRowAccessPolicyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.DdlAffectedRowAccessPolicyCount }).(pulumi.StringPtrOutput)
}

// The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
func (o JobStatistics2Output) DdlOperationPerformed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.DdlOperationPerformed }).(pulumi.StringPtrOutput)
}

// [Output-only] The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA queries.
func (o JobStatistics2Output) DdlTargetDataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v JobStatistics2) *DatasetReference { return v.DdlTargetDataset }).(DatasetReferencePtrOutput)
}

// The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
func (o JobStatistics2Output) DdlTargetRoutine() RoutineReferencePtrOutput {
	return o.ApplyT(func(v JobStatistics2) *RoutineReference { return v.DdlTargetRoutine }).(RoutineReferencePtrOutput)
}

// [Output-only] [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
func (o JobStatistics2Output) DdlTargetRowAccessPolicy() RowAccessPolicyReferencePtrOutput {
	return o.ApplyT(func(v JobStatistics2) *RowAccessPolicyReference { return v.DdlTargetRowAccessPolicy }).(RowAccessPolicyReferencePtrOutput)
}

// [Output-only] The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
func (o JobStatistics2Output) DdlTargetTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobStatistics2) *TableReference { return v.DdlTargetTable }).(TableReferencePtrOutput)
}

// [Output-only] The original estimate of bytes processed for the job.
func (o JobStatistics2Output) EstimatedBytesProcessed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.EstimatedBytesProcessed }).(pulumi.StringPtrOutput)
}

// [Output-only, Beta] Information about create model query job progress.
func (o JobStatistics2Output) ModelTraining() BigQueryModelTrainingPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *BigQueryModelTraining { return v.ModelTraining }).(BigQueryModelTrainingPtrOutput)
}

// [Output-only, Beta] Deprecated; do not use.
func (o JobStatistics2Output) ModelTrainingCurrentIteration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *int { return v.ModelTrainingCurrentIteration }).(pulumi.IntPtrOutput)
}

// [Output-only, Beta] Deprecated; do not use.
func (o JobStatistics2Output) ModelTrainingExpectedTotalIteration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.ModelTrainingExpectedTotalIteration }).(pulumi.StringPtrOutput)
}

// [Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
func (o JobStatistics2Output) NumDmlAffectedRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.NumDmlAffectedRows }).(pulumi.StringPtrOutput)
}

// [Output-only] Describes execution plan for the query.
func (o JobStatistics2Output) QueryPlan() ExplainQueryStageArrayOutput {
	return o.ApplyT(func(v JobStatistics2) []ExplainQueryStage { return v.QueryPlan }).(ExplainQueryStageArrayOutput)
}

// [Output-only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
func (o JobStatistics2Output) ReferencedRoutines() RoutineReferenceArrayOutput {
	return o.ApplyT(func(v JobStatistics2) []RoutineReference { return v.ReferencedRoutines }).(RoutineReferenceArrayOutput)
}

// [Output-only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
func (o JobStatistics2Output) ReferencedTables() TableReferenceArrayOutput {
	return o.ApplyT(func(v JobStatistics2) []TableReference { return v.ReferencedTables }).(TableReferenceArrayOutput)
}

// [Output-only] Job resource usage breakdown by reservation.
func (o JobStatistics2Output) ReservationUsage() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v JobStatistics2) []map[string]string { return v.ReservationUsage }).(pulumi.StringMapArrayOutput)
}

// [Output-only] The schema of the results. Present only for successful dry run of non-legacy SQL queries.
func (o JobStatistics2Output) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *TableSchema { return v.Schema }).(TableSchemaPtrOutput)
}

// The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
func (o JobStatistics2Output) StatementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.StatementType }).(pulumi.StringPtrOutput)
}

// [Output-only] [Beta] Describes a timeline of job execution.
func (o JobStatistics2Output) Timeline() QueryTimelineSampleArrayOutput {
	return o.ApplyT(func(v JobStatistics2) []QueryTimelineSample { return v.Timeline }).(QueryTimelineSampleArrayOutput)
}

// [Output-only] Total bytes billed for the job.
func (o JobStatistics2Output) TotalBytesBilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.TotalBytesBilled }).(pulumi.StringPtrOutput)
}

// [Output-only] Total bytes processed for the job.
func (o JobStatistics2Output) TotalBytesProcessed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.TotalBytesProcessed }).(pulumi.StringPtrOutput)
}

// [Output-only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
func (o JobStatistics2Output) TotalBytesProcessedAccuracy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.TotalBytesProcessedAccuracy }).(pulumi.StringPtrOutput)
}

// [Output-only] Total number of partitions processed from all partitioned tables referenced in the job.
func (o JobStatistics2Output) TotalPartitionsProcessed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.TotalPartitionsProcessed }).(pulumi.StringPtrOutput)
}

// [Output-only] Slot-milliseconds for the job.
func (o JobStatistics2Output) TotalSlotMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics2) *string { return v.TotalSlotMs }).(pulumi.StringPtrOutput)
}

// Standard SQL only: list of undeclared query parameters detected during a dry run validation.
func (o JobStatistics2Output) UndeclaredQueryParameters() QueryParameterArrayOutput {
	return o.ApplyT(func(v JobStatistics2) []QueryParameter { return v.UndeclaredQueryParameters }).(QueryParameterArrayOutput)
}

type JobStatistics2PtrOutput struct{ *pulumi.OutputState }

func (JobStatistics2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatistics2)(nil)).Elem()
}

func (o JobStatistics2PtrOutput) ToJobStatistics2PtrOutput() JobStatistics2PtrOutput {
	return o
}

func (o JobStatistics2PtrOutput) ToJobStatistics2PtrOutputWithContext(ctx context.Context) JobStatistics2PtrOutput {
	return o
}

func (o JobStatistics2PtrOutput) Elem() JobStatistics2Output {
	return o.ApplyT(func(v *JobStatistics2) JobStatistics2 { return *v }).(JobStatistics2Output)
}

// [Output-only] Billing tier for the job.
func (o JobStatistics2PtrOutput) BillingTier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *int {
		if v == nil {
			return nil
		}
		return v.BillingTier
	}).(pulumi.IntPtrOutput)
}

// [Output-only] Whether the query result was fetched from the query cache.
func (o JobStatistics2PtrOutput) CacheHit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *bool {
		if v == nil {
			return nil
		}
		return v.CacheHit
	}).(pulumi.BoolPtrOutput)
}

// [Output-only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
func (o JobStatistics2PtrOutput) DdlAffectedRowAccessPolicyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.DdlAffectedRowAccessPolicyCount
	}).(pulumi.StringPtrOutput)
}

// The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
func (o JobStatistics2PtrOutput) DdlOperationPerformed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.DdlOperationPerformed
	}).(pulumi.StringPtrOutput)
}

// [Output-only] The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA queries.
func (o JobStatistics2PtrOutput) DdlTargetDataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *DatasetReference {
		if v == nil {
			return nil
		}
		return v.DdlTargetDataset
	}).(DatasetReferencePtrOutput)
}

// The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
func (o JobStatistics2PtrOutput) DdlTargetRoutine() RoutineReferencePtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *RoutineReference {
		if v == nil {
			return nil
		}
		return v.DdlTargetRoutine
	}).(RoutineReferencePtrOutput)
}

// [Output-only] [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
func (o JobStatistics2PtrOutput) DdlTargetRowAccessPolicy() RowAccessPolicyReferencePtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *RowAccessPolicyReference {
		if v == nil {
			return nil
		}
		return v.DdlTargetRowAccessPolicy
	}).(RowAccessPolicyReferencePtrOutput)
}

// [Output-only] The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
func (o JobStatistics2PtrOutput) DdlTargetTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *TableReference {
		if v == nil {
			return nil
		}
		return v.DdlTargetTable
	}).(TableReferencePtrOutput)
}

// [Output-only] The original estimate of bytes processed for the job.
func (o JobStatistics2PtrOutput) EstimatedBytesProcessed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.EstimatedBytesProcessed
	}).(pulumi.StringPtrOutput)
}

// [Output-only, Beta] Information about create model query job progress.
func (o JobStatistics2PtrOutput) ModelTraining() BigQueryModelTrainingPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *BigQueryModelTraining {
		if v == nil {
			return nil
		}
		return v.ModelTraining
	}).(BigQueryModelTrainingPtrOutput)
}

// [Output-only, Beta] Deprecated; do not use.
func (o JobStatistics2PtrOutput) ModelTrainingCurrentIteration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *int {
		if v == nil {
			return nil
		}
		return v.ModelTrainingCurrentIteration
	}).(pulumi.IntPtrOutput)
}

// [Output-only, Beta] Deprecated; do not use.
func (o JobStatistics2PtrOutput) ModelTrainingExpectedTotalIteration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.ModelTrainingExpectedTotalIteration
	}).(pulumi.StringPtrOutput)
}

// [Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
func (o JobStatistics2PtrOutput) NumDmlAffectedRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.NumDmlAffectedRows
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Describes execution plan for the query.
func (o JobStatistics2PtrOutput) QueryPlan() ExplainQueryStageArrayOutput {
	return o.ApplyT(func(v *JobStatistics2) []ExplainQueryStage {
		if v == nil {
			return nil
		}
		return v.QueryPlan
	}).(ExplainQueryStageArrayOutput)
}

// [Output-only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
func (o JobStatistics2PtrOutput) ReferencedRoutines() RoutineReferenceArrayOutput {
	return o.ApplyT(func(v *JobStatistics2) []RoutineReference {
		if v == nil {
			return nil
		}
		return v.ReferencedRoutines
	}).(RoutineReferenceArrayOutput)
}

// [Output-only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
func (o JobStatistics2PtrOutput) ReferencedTables() TableReferenceArrayOutput {
	return o.ApplyT(func(v *JobStatistics2) []TableReference {
		if v == nil {
			return nil
		}
		return v.ReferencedTables
	}).(TableReferenceArrayOutput)
}

// [Output-only] Job resource usage breakdown by reservation.
func (o JobStatistics2PtrOutput) ReservationUsage() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *JobStatistics2) []map[string]string {
		if v == nil {
			return nil
		}
		return v.ReservationUsage
	}).(pulumi.StringMapArrayOutput)
}

// [Output-only] The schema of the results. Present only for successful dry run of non-legacy SQL queries.
func (o JobStatistics2PtrOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *TableSchema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(TableSchemaPtrOutput)
}

// The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
func (o JobStatistics2PtrOutput) StatementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.StatementType
	}).(pulumi.StringPtrOutput)
}

// [Output-only] [Beta] Describes a timeline of job execution.
func (o JobStatistics2PtrOutput) Timeline() QueryTimelineSampleArrayOutput {
	return o.ApplyT(func(v *JobStatistics2) []QueryTimelineSample {
		if v == nil {
			return nil
		}
		return v.Timeline
	}).(QueryTimelineSampleArrayOutput)
}

// [Output-only] Total bytes billed for the job.
func (o JobStatistics2PtrOutput) TotalBytesBilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.TotalBytesBilled
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Total bytes processed for the job.
func (o JobStatistics2PtrOutput) TotalBytesProcessed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.TotalBytesProcessed
	}).(pulumi.StringPtrOutput)
}

// [Output-only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
func (o JobStatistics2PtrOutput) TotalBytesProcessedAccuracy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.TotalBytesProcessedAccuracy
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Total number of partitions processed from all partitioned tables referenced in the job.
func (o JobStatistics2PtrOutput) TotalPartitionsProcessed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.TotalPartitionsProcessed
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Slot-milliseconds for the job.
func (o JobStatistics2PtrOutput) TotalSlotMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics2) *string {
		if v == nil {
			return nil
		}
		return v.TotalSlotMs
	}).(pulumi.StringPtrOutput)
}

// Standard SQL only: list of undeclared query parameters detected during a dry run validation.
func (o JobStatistics2PtrOutput) UndeclaredQueryParameters() QueryParameterArrayOutput {
	return o.ApplyT(func(v *JobStatistics2) []QueryParameter {
		if v == nil {
			return nil
		}
		return v.UndeclaredQueryParameters
	}).(QueryParameterArrayOutput)
}

type JobStatistics3 struct {
	// [Output-only] The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
	BadRecords *string `pulumi:"badRecords"`
	// [Output-only] Number of bytes of source data in a load job.
	InputFileBytes *string `pulumi:"inputFileBytes"`
	// [Output-only] Number of source files in a load job.
	InputFiles *string `pulumi:"inputFiles"`
	// [Output-only] Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
	OutputBytes *string `pulumi:"outputBytes"`
	// [Output-only] Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
	OutputRows *string `pulumi:"outputRows"`
}

// JobStatistics3Input is an input type that accepts JobStatistics3Args and JobStatistics3Output values.
// You can construct a concrete instance of `JobStatistics3Input` via:
//
//          JobStatistics3Args{...}
type JobStatistics3Input interface {
	pulumi.Input

	ToJobStatistics3Output() JobStatistics3Output
	ToJobStatistics3OutputWithContext(context.Context) JobStatistics3Output
}

type JobStatistics3Args struct {
	// [Output-only] The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
	BadRecords pulumi.StringPtrInput `pulumi:"badRecords"`
	// [Output-only] Number of bytes of source data in a load job.
	InputFileBytes pulumi.StringPtrInput `pulumi:"inputFileBytes"`
	// [Output-only] Number of source files in a load job.
	InputFiles pulumi.StringPtrInput `pulumi:"inputFiles"`
	// [Output-only] Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
	OutputBytes pulumi.StringPtrInput `pulumi:"outputBytes"`
	// [Output-only] Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
	OutputRows pulumi.StringPtrInput `pulumi:"outputRows"`
}

func (JobStatistics3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics3)(nil)).Elem()
}

func (i JobStatistics3Args) ToJobStatistics3Output() JobStatistics3Output {
	return i.ToJobStatistics3OutputWithContext(context.Background())
}

func (i JobStatistics3Args) ToJobStatistics3OutputWithContext(ctx context.Context) JobStatistics3Output {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatistics3Output)
}

func (i JobStatistics3Args) ToJobStatistics3PtrOutput() JobStatistics3PtrOutput {
	return i.ToJobStatistics3PtrOutputWithContext(context.Background())
}

func (i JobStatistics3Args) ToJobStatistics3PtrOutputWithContext(ctx context.Context) JobStatistics3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatistics3Output).ToJobStatistics3PtrOutputWithContext(ctx)
}

// JobStatistics3PtrInput is an input type that accepts JobStatistics3Args, JobStatistics3Ptr and JobStatistics3PtrOutput values.
// You can construct a concrete instance of `JobStatistics3PtrInput` via:
//
//          JobStatistics3Args{...}
//
//  or:
//
//          nil
type JobStatistics3PtrInput interface {
	pulumi.Input

	ToJobStatistics3PtrOutput() JobStatistics3PtrOutput
	ToJobStatistics3PtrOutputWithContext(context.Context) JobStatistics3PtrOutput
}

type jobStatistics3PtrType JobStatistics3Args

func JobStatistics3Ptr(v *JobStatistics3Args) JobStatistics3PtrInput {
	return (*jobStatistics3PtrType)(v)
}

func (*jobStatistics3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatistics3)(nil)).Elem()
}

func (i *jobStatistics3PtrType) ToJobStatistics3PtrOutput() JobStatistics3PtrOutput {
	return i.ToJobStatistics3PtrOutputWithContext(context.Background())
}

func (i *jobStatistics3PtrType) ToJobStatistics3PtrOutputWithContext(ctx context.Context) JobStatistics3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatistics3PtrOutput)
}

type JobStatistics3Output struct{ *pulumi.OutputState }

func (JobStatistics3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics3)(nil)).Elem()
}

func (o JobStatistics3Output) ToJobStatistics3Output() JobStatistics3Output {
	return o
}

func (o JobStatistics3Output) ToJobStatistics3OutputWithContext(ctx context.Context) JobStatistics3Output {
	return o
}

func (o JobStatistics3Output) ToJobStatistics3PtrOutput() JobStatistics3PtrOutput {
	return o.ToJobStatistics3PtrOutputWithContext(context.Background())
}

func (o JobStatistics3Output) ToJobStatistics3PtrOutputWithContext(ctx context.Context) JobStatistics3PtrOutput {
	return o.ApplyT(func(v JobStatistics3) *JobStatistics3 {
		return &v
	}).(JobStatistics3PtrOutput)
}

// [Output-only] The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
func (o JobStatistics3Output) BadRecords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics3) *string { return v.BadRecords }).(pulumi.StringPtrOutput)
}

// [Output-only] Number of bytes of source data in a load job.
func (o JobStatistics3Output) InputFileBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics3) *string { return v.InputFileBytes }).(pulumi.StringPtrOutput)
}

// [Output-only] Number of source files in a load job.
func (o JobStatistics3Output) InputFiles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics3) *string { return v.InputFiles }).(pulumi.StringPtrOutput)
}

// [Output-only] Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
func (o JobStatistics3Output) OutputBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics3) *string { return v.OutputBytes }).(pulumi.StringPtrOutput)
}

// [Output-only] Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
func (o JobStatistics3Output) OutputRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics3) *string { return v.OutputRows }).(pulumi.StringPtrOutput)
}

type JobStatistics3PtrOutput struct{ *pulumi.OutputState }

func (JobStatistics3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatistics3)(nil)).Elem()
}

func (o JobStatistics3PtrOutput) ToJobStatistics3PtrOutput() JobStatistics3PtrOutput {
	return o
}

func (o JobStatistics3PtrOutput) ToJobStatistics3PtrOutputWithContext(ctx context.Context) JobStatistics3PtrOutput {
	return o
}

func (o JobStatistics3PtrOutput) Elem() JobStatistics3Output {
	return o.ApplyT(func(v *JobStatistics3) JobStatistics3 { return *v }).(JobStatistics3Output)
}

// [Output-only] The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
func (o JobStatistics3PtrOutput) BadRecords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics3) *string {
		if v == nil {
			return nil
		}
		return v.BadRecords
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Number of bytes of source data in a load job.
func (o JobStatistics3PtrOutput) InputFileBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics3) *string {
		if v == nil {
			return nil
		}
		return v.InputFileBytes
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Number of source files in a load job.
func (o JobStatistics3PtrOutput) InputFiles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics3) *string {
		if v == nil {
			return nil
		}
		return v.InputFiles
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
func (o JobStatistics3PtrOutput) OutputBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics3) *string {
		if v == nil {
			return nil
		}
		return v.OutputBytes
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
func (o JobStatistics3PtrOutput) OutputRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics3) *string {
		if v == nil {
			return nil
		}
		return v.OutputRows
	}).(pulumi.StringPtrOutput)
}

type JobStatistics4 struct {
	// [Output-only] Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.
	DestinationUriFileCounts []string `pulumi:"destinationUriFileCounts"`
	// [Output-only] Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes.
	InputBytes *string `pulumi:"inputBytes"`
}

// JobStatistics4Input is an input type that accepts JobStatistics4Args and JobStatistics4Output values.
// You can construct a concrete instance of `JobStatistics4Input` via:
//
//          JobStatistics4Args{...}
type JobStatistics4Input interface {
	pulumi.Input

	ToJobStatistics4Output() JobStatistics4Output
	ToJobStatistics4OutputWithContext(context.Context) JobStatistics4Output
}

type JobStatistics4Args struct {
	// [Output-only] Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.
	DestinationUriFileCounts pulumi.StringArrayInput `pulumi:"destinationUriFileCounts"`
	// [Output-only] Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes.
	InputBytes pulumi.StringPtrInput `pulumi:"inputBytes"`
}

func (JobStatistics4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics4)(nil)).Elem()
}

func (i JobStatistics4Args) ToJobStatistics4Output() JobStatistics4Output {
	return i.ToJobStatistics4OutputWithContext(context.Background())
}

func (i JobStatistics4Args) ToJobStatistics4OutputWithContext(ctx context.Context) JobStatistics4Output {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatistics4Output)
}

func (i JobStatistics4Args) ToJobStatistics4PtrOutput() JobStatistics4PtrOutput {
	return i.ToJobStatistics4PtrOutputWithContext(context.Background())
}

func (i JobStatistics4Args) ToJobStatistics4PtrOutputWithContext(ctx context.Context) JobStatistics4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatistics4Output).ToJobStatistics4PtrOutputWithContext(ctx)
}

// JobStatistics4PtrInput is an input type that accepts JobStatistics4Args, JobStatistics4Ptr and JobStatistics4PtrOutput values.
// You can construct a concrete instance of `JobStatistics4PtrInput` via:
//
//          JobStatistics4Args{...}
//
//  or:
//
//          nil
type JobStatistics4PtrInput interface {
	pulumi.Input

	ToJobStatistics4PtrOutput() JobStatistics4PtrOutput
	ToJobStatistics4PtrOutputWithContext(context.Context) JobStatistics4PtrOutput
}

type jobStatistics4PtrType JobStatistics4Args

func JobStatistics4Ptr(v *JobStatistics4Args) JobStatistics4PtrInput {
	return (*jobStatistics4PtrType)(v)
}

func (*jobStatistics4PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatistics4)(nil)).Elem()
}

func (i *jobStatistics4PtrType) ToJobStatistics4PtrOutput() JobStatistics4PtrOutput {
	return i.ToJobStatistics4PtrOutputWithContext(context.Background())
}

func (i *jobStatistics4PtrType) ToJobStatistics4PtrOutputWithContext(ctx context.Context) JobStatistics4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatistics4PtrOutput)
}

type JobStatistics4Output struct{ *pulumi.OutputState }

func (JobStatistics4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics4)(nil)).Elem()
}

func (o JobStatistics4Output) ToJobStatistics4Output() JobStatistics4Output {
	return o
}

func (o JobStatistics4Output) ToJobStatistics4OutputWithContext(ctx context.Context) JobStatistics4Output {
	return o
}

func (o JobStatistics4Output) ToJobStatistics4PtrOutput() JobStatistics4PtrOutput {
	return o.ToJobStatistics4PtrOutputWithContext(context.Background())
}

func (o JobStatistics4Output) ToJobStatistics4PtrOutputWithContext(ctx context.Context) JobStatistics4PtrOutput {
	return o.ApplyT(func(v JobStatistics4) *JobStatistics4 {
		return &v
	}).(JobStatistics4PtrOutput)
}

// [Output-only] Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.
func (o JobStatistics4Output) DestinationUriFileCounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobStatistics4) []string { return v.DestinationUriFileCounts }).(pulumi.StringArrayOutput)
}

// [Output-only] Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes.
func (o JobStatistics4Output) InputBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatistics4) *string { return v.InputBytes }).(pulumi.StringPtrOutput)
}

type JobStatistics4PtrOutput struct{ *pulumi.OutputState }

func (JobStatistics4PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatistics4)(nil)).Elem()
}

func (o JobStatistics4PtrOutput) ToJobStatistics4PtrOutput() JobStatistics4PtrOutput {
	return o
}

func (o JobStatistics4PtrOutput) ToJobStatistics4PtrOutputWithContext(ctx context.Context) JobStatistics4PtrOutput {
	return o
}

func (o JobStatistics4PtrOutput) Elem() JobStatistics4Output {
	return o.ApplyT(func(v *JobStatistics4) JobStatistics4 { return *v }).(JobStatistics4Output)
}

// [Output-only] Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.
func (o JobStatistics4PtrOutput) DestinationUriFileCounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobStatistics4) []string {
		if v == nil {
			return nil
		}
		return v.DestinationUriFileCounts
	}).(pulumi.StringArrayOutput)
}

// [Output-only] Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes.
func (o JobStatistics4PtrOutput) InputBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatistics4) *string {
		if v == nil {
			return nil
		}
		return v.InputBytes
	}).(pulumi.StringPtrOutput)
}

type JobStatus struct {
	// [Output-only] Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
	ErrorResult *ErrorProto `pulumi:"errorResult"`
	// [Output-only] The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
	Errors []ErrorProto `pulumi:"errors"`
	// [Output-only] Running state of the job.
	State *string `pulumi:"state"`
}

// JobStatusInput is an input type that accepts JobStatusArgs and JobStatusOutput values.
// You can construct a concrete instance of `JobStatusInput` via:
//
//          JobStatusArgs{...}
type JobStatusInput interface {
	pulumi.Input

	ToJobStatusOutput() JobStatusOutput
	ToJobStatusOutputWithContext(context.Context) JobStatusOutput
}

type JobStatusArgs struct {
	// [Output-only] Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
	ErrorResult ErrorProtoPtrInput `pulumi:"errorResult"`
	// [Output-only] The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
	Errors ErrorProtoArrayInput `pulumi:"errors"`
	// [Output-only] Running state of the job.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (JobStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatus)(nil)).Elem()
}

func (i JobStatusArgs) ToJobStatusOutput() JobStatusOutput {
	return i.ToJobStatusOutputWithContext(context.Background())
}

func (i JobStatusArgs) ToJobStatusOutputWithContext(ctx context.Context) JobStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusOutput)
}

func (i JobStatusArgs) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return i.ToJobStatusPtrOutputWithContext(context.Background())
}

func (i JobStatusArgs) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusOutput).ToJobStatusPtrOutputWithContext(ctx)
}

// JobStatusPtrInput is an input type that accepts JobStatusArgs, JobStatusPtr and JobStatusPtrOutput values.
// You can construct a concrete instance of `JobStatusPtrInput` via:
//
//          JobStatusArgs{...}
//
//  or:
//
//          nil
type JobStatusPtrInput interface {
	pulumi.Input

	ToJobStatusPtrOutput() JobStatusPtrOutput
	ToJobStatusPtrOutputWithContext(context.Context) JobStatusPtrOutput
}

type jobStatusPtrType JobStatusArgs

func JobStatusPtr(v *JobStatusArgs) JobStatusPtrInput {
	return (*jobStatusPtrType)(v)
}

func (*jobStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatus)(nil)).Elem()
}

func (i *jobStatusPtrType) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return i.ToJobStatusPtrOutputWithContext(context.Background())
}

func (i *jobStatusPtrType) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStatusPtrOutput)
}

type JobStatusOutput struct{ *pulumi.OutputState }

func (JobStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatus)(nil)).Elem()
}

func (o JobStatusOutput) ToJobStatusOutput() JobStatusOutput {
	return o
}

func (o JobStatusOutput) ToJobStatusOutputWithContext(ctx context.Context) JobStatusOutput {
	return o
}

func (o JobStatusOutput) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return o.ToJobStatusPtrOutputWithContext(context.Background())
}

func (o JobStatusOutput) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return o.ApplyT(func(v JobStatus) *JobStatus {
		return &v
	}).(JobStatusPtrOutput)
}

// [Output-only] Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
func (o JobStatusOutput) ErrorResult() ErrorProtoPtrOutput {
	return o.ApplyT(func(v JobStatus) *ErrorProto { return v.ErrorResult }).(ErrorProtoPtrOutput)
}

// [Output-only] The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
func (o JobStatusOutput) Errors() ErrorProtoArrayOutput {
	return o.ApplyT(func(v JobStatus) []ErrorProto { return v.Errors }).(ErrorProtoArrayOutput)
}

// [Output-only] Running state of the job.
func (o JobStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type JobStatusPtrOutput struct{ *pulumi.OutputState }

func (JobStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStatus)(nil)).Elem()
}

func (o JobStatusPtrOutput) ToJobStatusPtrOutput() JobStatusPtrOutput {
	return o
}

func (o JobStatusPtrOutput) ToJobStatusPtrOutputWithContext(ctx context.Context) JobStatusPtrOutput {
	return o
}

func (o JobStatusPtrOutput) Elem() JobStatusOutput {
	return o.ApplyT(func(v *JobStatus) JobStatus { return *v }).(JobStatusOutput)
}

// [Output-only] Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
func (o JobStatusPtrOutput) ErrorResult() ErrorProtoPtrOutput {
	return o.ApplyT(func(v *JobStatus) *ErrorProto {
		if v == nil {
			return nil
		}
		return v.ErrorResult
	}).(ErrorProtoPtrOutput)
}

// [Output-only] The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
func (o JobStatusPtrOutput) Errors() ErrorProtoArrayOutput {
	return o.ApplyT(func(v *JobStatus) []ErrorProto {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ErrorProtoArrayOutput)
}

// [Output-only] Running state of the job.
func (o JobStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

type MaterializedViewDefinition struct {
	// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
	EnableRefresh *bool `pulumi:"enableRefresh"`
	// [Output-only] [TrustedTester] The time when this materialized view was last modified, in milliseconds since the epoch.
	LastRefreshTime *string `pulumi:"lastRefreshTime"`
	// [Required] A query whose result is persisted.
	Query *string `pulumi:"query"`
	// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
	RefreshIntervalMs *string `pulumi:"refreshIntervalMs"`
}

// MaterializedViewDefinitionInput is an input type that accepts MaterializedViewDefinitionArgs and MaterializedViewDefinitionOutput values.
// You can construct a concrete instance of `MaterializedViewDefinitionInput` via:
//
//          MaterializedViewDefinitionArgs{...}
type MaterializedViewDefinitionInput interface {
	pulumi.Input

	ToMaterializedViewDefinitionOutput() MaterializedViewDefinitionOutput
	ToMaterializedViewDefinitionOutputWithContext(context.Context) MaterializedViewDefinitionOutput
}

type MaterializedViewDefinitionArgs struct {
	// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
	EnableRefresh pulumi.BoolPtrInput `pulumi:"enableRefresh"`
	// [Output-only] [TrustedTester] The time when this materialized view was last modified, in milliseconds since the epoch.
	LastRefreshTime pulumi.StringPtrInput `pulumi:"lastRefreshTime"`
	// [Required] A query whose result is persisted.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
	RefreshIntervalMs pulumi.StringPtrInput `pulumi:"refreshIntervalMs"`
}

func (MaterializedViewDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewDefinition)(nil)).Elem()
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionOutput() MaterializedViewDefinitionOutput {
	return i.ToMaterializedViewDefinitionOutputWithContext(context.Background())
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionOutputWithContext(ctx context.Context) MaterializedViewDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewDefinitionOutput)
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return i.ToMaterializedViewDefinitionPtrOutputWithContext(context.Background())
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewDefinitionOutput).ToMaterializedViewDefinitionPtrOutputWithContext(ctx)
}

// MaterializedViewDefinitionPtrInput is an input type that accepts MaterializedViewDefinitionArgs, MaterializedViewDefinitionPtr and MaterializedViewDefinitionPtrOutput values.
// You can construct a concrete instance of `MaterializedViewDefinitionPtrInput` via:
//
//          MaterializedViewDefinitionArgs{...}
//
//  or:
//
//          nil
type MaterializedViewDefinitionPtrInput interface {
	pulumi.Input

	ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput
	ToMaterializedViewDefinitionPtrOutputWithContext(context.Context) MaterializedViewDefinitionPtrOutput
}

type materializedViewDefinitionPtrType MaterializedViewDefinitionArgs

func MaterializedViewDefinitionPtr(v *MaterializedViewDefinitionArgs) MaterializedViewDefinitionPtrInput {
	return (*materializedViewDefinitionPtrType)(v)
}

func (*materializedViewDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializedViewDefinition)(nil)).Elem()
}

func (i *materializedViewDefinitionPtrType) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return i.ToMaterializedViewDefinitionPtrOutputWithContext(context.Background())
}

func (i *materializedViewDefinitionPtrType) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewDefinitionPtrOutput)
}

type MaterializedViewDefinitionOutput struct{ *pulumi.OutputState }

func (MaterializedViewDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewDefinition)(nil)).Elem()
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionOutput() MaterializedViewDefinitionOutput {
	return o
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionOutputWithContext(ctx context.Context) MaterializedViewDefinitionOutput {
	return o
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return o.ToMaterializedViewDefinitionPtrOutputWithContext(context.Background())
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *MaterializedViewDefinition {
		return &v
	}).(MaterializedViewDefinitionPtrOutput)
}

// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
func (o MaterializedViewDefinitionOutput) EnableRefresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *bool { return v.EnableRefresh }).(pulumi.BoolPtrOutput)
}

// [Output-only] [TrustedTester] The time when this materialized view was last modified, in milliseconds since the epoch.
func (o MaterializedViewDefinitionOutput) LastRefreshTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *string { return v.LastRefreshTime }).(pulumi.StringPtrOutput)
}

// [Required] A query whose result is persisted.
func (o MaterializedViewDefinitionOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
func (o MaterializedViewDefinitionOutput) RefreshIntervalMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *string { return v.RefreshIntervalMs }).(pulumi.StringPtrOutput)
}

type MaterializedViewDefinitionPtrOutput struct{ *pulumi.OutputState }

func (MaterializedViewDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializedViewDefinition)(nil)).Elem()
}

func (o MaterializedViewDefinitionPtrOutput) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return o
}

func (o MaterializedViewDefinitionPtrOutput) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return o
}

func (o MaterializedViewDefinitionPtrOutput) Elem() MaterializedViewDefinitionOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) MaterializedViewDefinition { return *v }).(MaterializedViewDefinitionOutput)
}

// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
func (o MaterializedViewDefinitionPtrOutput) EnableRefresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.EnableRefresh
	}).(pulumi.BoolPtrOutput)
}

// [Output-only] [TrustedTester] The time when this materialized view was last modified, in milliseconds since the epoch.
func (o MaterializedViewDefinitionPtrOutput) LastRefreshTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *string {
		if v == nil {
			return nil
		}
		return v.LastRefreshTime
	}).(pulumi.StringPtrOutput)
}

// [Required] A query whose result is persisted.
func (o MaterializedViewDefinitionPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
func (o MaterializedViewDefinitionPtrOutput) RefreshIntervalMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *string {
		if v == nil {
			return nil
		}
		return v.RefreshIntervalMs
	}).(pulumi.StringPtrOutput)
}

type ModelDefinition struct {
	// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
	ModelOptions map[string]string `pulumi:"modelOptions"`
	// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
	TrainingRuns []BqmlTrainingRun `pulumi:"trainingRuns"`
}

// ModelDefinitionInput is an input type that accepts ModelDefinitionArgs and ModelDefinitionOutput values.
// You can construct a concrete instance of `ModelDefinitionInput` via:
//
//          ModelDefinitionArgs{...}
type ModelDefinitionInput interface {
	pulumi.Input

	ToModelDefinitionOutput() ModelDefinitionOutput
	ToModelDefinitionOutputWithContext(context.Context) ModelDefinitionOutput
}

type ModelDefinitionArgs struct {
	// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
	ModelOptions pulumi.StringMapInput `pulumi:"modelOptions"`
	// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
	TrainingRuns BqmlTrainingRunArrayInput `pulumi:"trainingRuns"`
}

func (ModelDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinition)(nil)).Elem()
}

func (i ModelDefinitionArgs) ToModelDefinitionOutput() ModelDefinitionOutput {
	return i.ToModelDefinitionOutputWithContext(context.Background())
}

func (i ModelDefinitionArgs) ToModelDefinitionOutputWithContext(ctx context.Context) ModelDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionOutput)
}

func (i ModelDefinitionArgs) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return i.ToModelDefinitionPtrOutputWithContext(context.Background())
}

func (i ModelDefinitionArgs) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionOutput).ToModelDefinitionPtrOutputWithContext(ctx)
}

// ModelDefinitionPtrInput is an input type that accepts ModelDefinitionArgs, ModelDefinitionPtr and ModelDefinitionPtrOutput values.
// You can construct a concrete instance of `ModelDefinitionPtrInput` via:
//
//          ModelDefinitionArgs{...}
//
//  or:
//
//          nil
type ModelDefinitionPtrInput interface {
	pulumi.Input

	ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput
	ToModelDefinitionPtrOutputWithContext(context.Context) ModelDefinitionPtrOutput
}

type modelDefinitionPtrType ModelDefinitionArgs

func ModelDefinitionPtr(v *ModelDefinitionArgs) ModelDefinitionPtrInput {
	return (*modelDefinitionPtrType)(v)
}

func (*modelDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDefinition)(nil)).Elem()
}

func (i *modelDefinitionPtrType) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return i.ToModelDefinitionPtrOutputWithContext(context.Background())
}

func (i *modelDefinitionPtrType) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionPtrOutput)
}

type ModelDefinitionOutput struct{ *pulumi.OutputState }

func (ModelDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinition)(nil)).Elem()
}

func (o ModelDefinitionOutput) ToModelDefinitionOutput() ModelDefinitionOutput {
	return o
}

func (o ModelDefinitionOutput) ToModelDefinitionOutputWithContext(ctx context.Context) ModelDefinitionOutput {
	return o
}

func (o ModelDefinitionOutput) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return o.ToModelDefinitionPtrOutputWithContext(context.Background())
}

func (o ModelDefinitionOutput) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return o.ApplyT(func(v ModelDefinition) *ModelDefinition {
		return &v
	}).(ModelDefinitionPtrOutput)
}

// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
func (o ModelDefinitionOutput) ModelOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelDefinition) map[string]string { return v.ModelOptions }).(pulumi.StringMapOutput)
}

// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
func (o ModelDefinitionOutput) TrainingRuns() BqmlTrainingRunArrayOutput {
	return o.ApplyT(func(v ModelDefinition) []BqmlTrainingRun { return v.TrainingRuns }).(BqmlTrainingRunArrayOutput)
}

type ModelDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ModelDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDefinition)(nil)).Elem()
}

func (o ModelDefinitionPtrOutput) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return o
}

func (o ModelDefinitionPtrOutput) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return o
}

func (o ModelDefinitionPtrOutput) Elem() ModelDefinitionOutput {
	return o.ApplyT(func(v *ModelDefinition) ModelDefinition { return *v }).(ModelDefinitionOutput)
}

// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
func (o ModelDefinitionPtrOutput) ModelOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ModelDefinition) map[string]string {
		if v == nil {
			return nil
		}
		return v.ModelOptions
	}).(pulumi.StringMapOutput)
}

// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
func (o ModelDefinitionPtrOutput) TrainingRuns() BqmlTrainingRunArrayOutput {
	return o.ApplyT(func(v *ModelDefinition) []BqmlTrainingRun {
		if v == nil {
			return nil
		}
		return v.TrainingRuns
	}).(BqmlTrainingRunArrayOutput)
}

type ModelReference struct {
	// [Required] The ID of the dataset containing this model.
	DatasetId *string `pulumi:"datasetId"`
	// [Required] The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	ModelId *string `pulumi:"modelId"`
	// [Required] The ID of the project containing this model.
	ProjectId *string `pulumi:"projectId"`
}

// ModelReferenceInput is an input type that accepts ModelReferenceArgs and ModelReferenceOutput values.
// You can construct a concrete instance of `ModelReferenceInput` via:
//
//          ModelReferenceArgs{...}
type ModelReferenceInput interface {
	pulumi.Input

	ToModelReferenceOutput() ModelReferenceOutput
	ToModelReferenceOutputWithContext(context.Context) ModelReferenceOutput
}

type ModelReferenceArgs struct {
	// [Required] The ID of the dataset containing this model.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// [Required] The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	ModelId pulumi.StringPtrInput `pulumi:"modelId"`
	// [Required] The ID of the project containing this model.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (ModelReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelReference)(nil)).Elem()
}

func (i ModelReferenceArgs) ToModelReferenceOutput() ModelReferenceOutput {
	return i.ToModelReferenceOutputWithContext(context.Background())
}

func (i ModelReferenceArgs) ToModelReferenceOutputWithContext(ctx context.Context) ModelReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelReferenceOutput)
}

func (i ModelReferenceArgs) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return i.ToModelReferencePtrOutputWithContext(context.Background())
}

func (i ModelReferenceArgs) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelReferenceOutput).ToModelReferencePtrOutputWithContext(ctx)
}

// ModelReferencePtrInput is an input type that accepts ModelReferenceArgs, ModelReferencePtr and ModelReferencePtrOutput values.
// You can construct a concrete instance of `ModelReferencePtrInput` via:
//
//          ModelReferenceArgs{...}
//
//  or:
//
//          nil
type ModelReferencePtrInput interface {
	pulumi.Input

	ToModelReferencePtrOutput() ModelReferencePtrOutput
	ToModelReferencePtrOutputWithContext(context.Context) ModelReferencePtrOutput
}

type modelReferencePtrType ModelReferenceArgs

func ModelReferencePtr(v *ModelReferenceArgs) ModelReferencePtrInput {
	return (*modelReferencePtrType)(v)
}

func (*modelReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelReference)(nil)).Elem()
}

func (i *modelReferencePtrType) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return i.ToModelReferencePtrOutputWithContext(context.Background())
}

func (i *modelReferencePtrType) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelReferencePtrOutput)
}

type ModelReferenceOutput struct{ *pulumi.OutputState }

func (ModelReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelReference)(nil)).Elem()
}

func (o ModelReferenceOutput) ToModelReferenceOutput() ModelReferenceOutput {
	return o
}

func (o ModelReferenceOutput) ToModelReferenceOutputWithContext(ctx context.Context) ModelReferenceOutput {
	return o
}

func (o ModelReferenceOutput) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return o.ToModelReferencePtrOutputWithContext(context.Background())
}

func (o ModelReferenceOutput) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return o.ApplyT(func(v ModelReference) *ModelReference {
		return &v
	}).(ModelReferencePtrOutput)
}

// [Required] The ID of the dataset containing this model.
func (o ModelReferenceOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelReference) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o ModelReferenceOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelReference) *string { return v.ModelId }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this model.
func (o ModelReferenceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelReference) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

type ModelReferencePtrOutput struct{ *pulumi.OutputState }

func (ModelReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelReference)(nil)).Elem()
}

func (o ModelReferencePtrOutput) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return o
}

func (o ModelReferencePtrOutput) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return o
}

func (o ModelReferencePtrOutput) Elem() ModelReferenceOutput {
	return o.ApplyT(func(v *ModelReference) ModelReference { return *v }).(ModelReferenceOutput)
}

// [Required] The ID of the dataset containing this model.
func (o ModelReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelReference) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o ModelReferencePtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelReference) *string {
		if v == nil {
			return nil
		}
		return v.ModelId
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this model.
func (o ModelReferencePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelReference) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

type ParquetOptions struct {
	// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
	EnableListInference *bool `pulumi:"enableListInference"`
	// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
	EnumAsString *bool `pulumi:"enumAsString"`
}

// ParquetOptionsInput is an input type that accepts ParquetOptionsArgs and ParquetOptionsOutput values.
// You can construct a concrete instance of `ParquetOptionsInput` via:
//
//          ParquetOptionsArgs{...}
type ParquetOptionsInput interface {
	pulumi.Input

	ToParquetOptionsOutput() ParquetOptionsOutput
	ToParquetOptionsOutputWithContext(context.Context) ParquetOptionsOutput
}

type ParquetOptionsArgs struct {
	// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
	EnableListInference pulumi.BoolPtrInput `pulumi:"enableListInference"`
	// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
	EnumAsString pulumi.BoolPtrInput `pulumi:"enumAsString"`
}

func (ParquetOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetOptions)(nil)).Elem()
}

func (i ParquetOptionsArgs) ToParquetOptionsOutput() ParquetOptionsOutput {
	return i.ToParquetOptionsOutputWithContext(context.Background())
}

func (i ParquetOptionsArgs) ToParquetOptionsOutputWithContext(ctx context.Context) ParquetOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetOptionsOutput)
}

func (i ParquetOptionsArgs) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return i.ToParquetOptionsPtrOutputWithContext(context.Background())
}

func (i ParquetOptionsArgs) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetOptionsOutput).ToParquetOptionsPtrOutputWithContext(ctx)
}

// ParquetOptionsPtrInput is an input type that accepts ParquetOptionsArgs, ParquetOptionsPtr and ParquetOptionsPtrOutput values.
// You can construct a concrete instance of `ParquetOptionsPtrInput` via:
//
//          ParquetOptionsArgs{...}
//
//  or:
//
//          nil
type ParquetOptionsPtrInput interface {
	pulumi.Input

	ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput
	ToParquetOptionsPtrOutputWithContext(context.Context) ParquetOptionsPtrOutput
}

type parquetOptionsPtrType ParquetOptionsArgs

func ParquetOptionsPtr(v *ParquetOptionsArgs) ParquetOptionsPtrInput {
	return (*parquetOptionsPtrType)(v)
}

func (*parquetOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetOptions)(nil)).Elem()
}

func (i *parquetOptionsPtrType) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return i.ToParquetOptionsPtrOutputWithContext(context.Background())
}

func (i *parquetOptionsPtrType) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetOptionsPtrOutput)
}

type ParquetOptionsOutput struct{ *pulumi.OutputState }

func (ParquetOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetOptions)(nil)).Elem()
}

func (o ParquetOptionsOutput) ToParquetOptionsOutput() ParquetOptionsOutput {
	return o
}

func (o ParquetOptionsOutput) ToParquetOptionsOutputWithContext(ctx context.Context) ParquetOptionsOutput {
	return o
}

func (o ParquetOptionsOutput) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return o.ToParquetOptionsPtrOutputWithContext(context.Background())
}

func (o ParquetOptionsOutput) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return o.ApplyT(func(v ParquetOptions) *ParquetOptions {
		return &v
	}).(ParquetOptionsPtrOutput)
}

// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
func (o ParquetOptionsOutput) EnableListInference() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParquetOptions) *bool { return v.EnableListInference }).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
func (o ParquetOptionsOutput) EnumAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParquetOptions) *bool { return v.EnumAsString }).(pulumi.BoolPtrOutput)
}

type ParquetOptionsPtrOutput struct{ *pulumi.OutputState }

func (ParquetOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetOptions)(nil)).Elem()
}

func (o ParquetOptionsPtrOutput) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return o
}

func (o ParquetOptionsPtrOutput) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return o
}

func (o ParquetOptionsPtrOutput) Elem() ParquetOptionsOutput {
	return o.ApplyT(func(v *ParquetOptions) ParquetOptions { return *v }).(ParquetOptionsOutput)
}

// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
func (o ParquetOptionsPtrOutput) EnableListInference() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParquetOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableListInference
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
func (o ParquetOptionsPtrOutput) EnumAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParquetOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnumAsString
	}).(pulumi.BoolPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyType struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []AuditConfig `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyTypeInput is an input type that accepts PolicyTypeArgs and PolicyTypeOutput values.
// You can construct a concrete instance of `PolicyTypeInput` via:
//
//          PolicyTypeArgs{...}
type PolicyTypeInput interface {
	pulumi.Input

	ToPolicyTypeOutput() PolicyTypeOutput
	ToPolicyTypeOutputWithContext(context.Context) PolicyTypeOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyTypeArgs struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs AuditConfigArrayInput `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyType)(nil)).Elem()
}

func (i PolicyTypeArgs) ToPolicyTypeOutput() PolicyTypeOutput {
	return i.ToPolicyTypeOutputWithContext(context.Background())
}

func (i PolicyTypeArgs) ToPolicyTypeOutputWithContext(ctx context.Context) PolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTypeOutput)
}

func (i PolicyTypeArgs) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return i.ToPolicyTypePtrOutputWithContext(context.Background())
}

func (i PolicyTypeArgs) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTypeOutput).ToPolicyTypePtrOutputWithContext(ctx)
}

// PolicyTypePtrInput is an input type that accepts PolicyTypeArgs, PolicyTypePtr and PolicyTypePtrOutput values.
// You can construct a concrete instance of `PolicyTypePtrInput` via:
//
//          PolicyTypeArgs{...}
//
//  or:
//
//          nil
type PolicyTypePtrInput interface {
	pulumi.Input

	ToPolicyTypePtrOutput() PolicyTypePtrOutput
	ToPolicyTypePtrOutputWithContext(context.Context) PolicyTypePtrOutput
}

type policyTypePtrType PolicyTypeArgs

func PolicyTypePtr(v *PolicyTypeArgs) PolicyTypePtrInput {
	return (*policyTypePtrType)(v)
}

func (*policyTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyType)(nil)).Elem()
}

func (i *policyTypePtrType) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return i.ToPolicyTypePtrOutputWithContext(context.Background())
}

func (i *policyTypePtrType) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyTypePtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyTypeOutput struct{ *pulumi.OutputState }

func (PolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyType)(nil)).Elem()
}

func (o PolicyTypeOutput) ToPolicyTypeOutput() PolicyTypeOutput {
	return o
}

func (o PolicyTypeOutput) ToPolicyTypeOutputWithContext(ctx context.Context) PolicyTypeOutput {
	return o
}

func (o PolicyTypeOutput) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return o.ToPolicyTypePtrOutputWithContext(context.Background())
}

func (o PolicyTypeOutput) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return o.ApplyT(func(v PolicyType) *PolicyType {
		return &v
	}).(PolicyTypePtrOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyTypeOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v PolicyType) []AuditConfig { return v.AuditConfigs }).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyTypeOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v PolicyType) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyTypeOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyType) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyTypeOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyType) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyTypePtrOutput struct{ *pulumi.OutputState }

func (PolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyType)(nil)).Elem()
}

func (o PolicyTypePtrOutput) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return o
}

func (o PolicyTypePtrOutput) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return o
}

func (o PolicyTypePtrOutput) Elem() PolicyTypeOutput {
	return o.ApplyT(func(v *PolicyType) PolicyType { return *v }).(PolicyTypeOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyTypePtrOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v *PolicyType) []AuditConfig {
		if v == nil {
			return nil
		}
		return v.AuditConfigs
	}).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyTypePtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *PolicyType) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyTypePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyType) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyTypePtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyType) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

type QueryParameter struct {
	// [Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query.
	Name *string `pulumi:"name"`
	// [Required] The type of this parameter.
	ParameterType *QueryParameterType `pulumi:"parameterType"`
	// [Required] The value of this parameter.
	ParameterValue *QueryParameterValue `pulumi:"parameterValue"`
}

// QueryParameterInput is an input type that accepts QueryParameterArgs and QueryParameterOutput values.
// You can construct a concrete instance of `QueryParameterInput` via:
//
//          QueryParameterArgs{...}
type QueryParameterInput interface {
	pulumi.Input

	ToQueryParameterOutput() QueryParameterOutput
	ToQueryParameterOutputWithContext(context.Context) QueryParameterOutput
}

type QueryParameterArgs struct {
	// [Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [Required] The type of this parameter.
	ParameterType QueryParameterTypePtrInput `pulumi:"parameterType"`
	// [Required] The value of this parameter.
	ParameterValue QueryParameterValuePtrInput `pulumi:"parameterValue"`
}

func (QueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameter)(nil)).Elem()
}

func (i QueryParameterArgs) ToQueryParameterOutput() QueryParameterOutput {
	return i.ToQueryParameterOutputWithContext(context.Background())
}

func (i QueryParameterArgs) ToQueryParameterOutputWithContext(ctx context.Context) QueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterOutput)
}

// QueryParameterArrayInput is an input type that accepts QueryParameterArray and QueryParameterArrayOutput values.
// You can construct a concrete instance of `QueryParameterArrayInput` via:
//
//          QueryParameterArray{ QueryParameterArgs{...} }
type QueryParameterArrayInput interface {
	pulumi.Input

	ToQueryParameterArrayOutput() QueryParameterArrayOutput
	ToQueryParameterArrayOutputWithContext(context.Context) QueryParameterArrayOutput
}

type QueryParameterArray []QueryParameterInput

func (QueryParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameter)(nil)).Elem()
}

func (i QueryParameterArray) ToQueryParameterArrayOutput() QueryParameterArrayOutput {
	return i.ToQueryParameterArrayOutputWithContext(context.Background())
}

func (i QueryParameterArray) ToQueryParameterArrayOutputWithContext(ctx context.Context) QueryParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterArrayOutput)
}

type QueryParameterOutput struct{ *pulumi.OutputState }

func (QueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameter)(nil)).Elem()
}

func (o QueryParameterOutput) ToQueryParameterOutput() QueryParameterOutput {
	return o
}

func (o QueryParameterOutput) ToQueryParameterOutputWithContext(ctx context.Context) QueryParameterOutput {
	return o
}

// [Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query.
func (o QueryParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [Required] The type of this parameter.
func (o QueryParameterOutput) ParameterType() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v QueryParameter) *QueryParameterType { return v.ParameterType }).(QueryParameterTypePtrOutput)
}

// [Required] The value of this parameter.
func (o QueryParameterOutput) ParameterValue() QueryParameterValuePtrOutput {
	return o.ApplyT(func(v QueryParameter) *QueryParameterValue { return v.ParameterValue }).(QueryParameterValuePtrOutput)
}

type QueryParameterArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameter)(nil)).Elem()
}

func (o QueryParameterArrayOutput) ToQueryParameterArrayOutput() QueryParameterArrayOutput {
	return o
}

func (o QueryParameterArrayOutput) ToQueryParameterArrayOutputWithContext(ctx context.Context) QueryParameterArrayOutput {
	return o
}

func (o QueryParameterArrayOutput) Index(i pulumi.IntInput) QueryParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameter {
		return vs[0].([]QueryParameter)[vs[1].(int)]
	}).(QueryParameterOutput)
}

type QueryParameterType struct {
	// [Optional] The type of the array's elements, if this is an array.
	ArrayType *QueryParameterType `pulumi:"arrayType"`
	// [Optional] The types of the fields of this struct, in order, if this is a struct.
	StructTypes []map[string]string `pulumi:"structTypes"`
	// [Required] The top level type of this field.
	Type *string `pulumi:"type"`
}

// QueryParameterTypeInput is an input type that accepts QueryParameterTypeArgs and QueryParameterTypeOutput values.
// You can construct a concrete instance of `QueryParameterTypeInput` via:
//
//          QueryParameterTypeArgs{...}
type QueryParameterTypeInput interface {
	pulumi.Input

	ToQueryParameterTypeOutput() QueryParameterTypeOutput
	ToQueryParameterTypeOutputWithContext(context.Context) QueryParameterTypeOutput
}

type QueryParameterTypeArgs struct {
	// [Optional] The type of the array's elements, if this is an array.
	ArrayType QueryParameterTypePtrInput `pulumi:"arrayType"`
	// [Optional] The types of the fields of this struct, in order, if this is a struct.
	StructTypes pulumi.StringMapArrayInput `pulumi:"structTypes"`
	// [Required] The top level type of this field.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (QueryParameterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterType)(nil)).Elem()
}

func (i QueryParameterTypeArgs) ToQueryParameterTypeOutput() QueryParameterTypeOutput {
	return i.ToQueryParameterTypeOutputWithContext(context.Background())
}

func (i QueryParameterTypeArgs) ToQueryParameterTypeOutputWithContext(ctx context.Context) QueryParameterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypeOutput)
}

func (i QueryParameterTypeArgs) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return i.ToQueryParameterTypePtrOutputWithContext(context.Background())
}

func (i QueryParameterTypeArgs) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypeOutput).ToQueryParameterTypePtrOutputWithContext(ctx)
}

// QueryParameterTypePtrInput is an input type that accepts QueryParameterTypeArgs, QueryParameterTypePtr and QueryParameterTypePtrOutput values.
// You can construct a concrete instance of `QueryParameterTypePtrInput` via:
//
//          QueryParameterTypeArgs{...}
//
//  or:
//
//          nil
type QueryParameterTypePtrInput interface {
	pulumi.Input

	ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput
	ToQueryParameterTypePtrOutputWithContext(context.Context) QueryParameterTypePtrOutput
}

type queryParameterTypePtrType QueryParameterTypeArgs

func QueryParameterTypePtr(v *QueryParameterTypeArgs) QueryParameterTypePtrInput {
	return (*queryParameterTypePtrType)(v)
}

func (*queryParameterTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterType)(nil)).Elem()
}

func (i *queryParameterTypePtrType) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return i.ToQueryParameterTypePtrOutputWithContext(context.Background())
}

func (i *queryParameterTypePtrType) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypePtrOutput)
}

type QueryParameterTypeOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterType)(nil)).Elem()
}

func (o QueryParameterTypeOutput) ToQueryParameterTypeOutput() QueryParameterTypeOutput {
	return o
}

func (o QueryParameterTypeOutput) ToQueryParameterTypeOutputWithContext(ctx context.Context) QueryParameterTypeOutput {
	return o
}

func (o QueryParameterTypeOutput) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return o.ToQueryParameterTypePtrOutputWithContext(context.Background())
}

func (o QueryParameterTypeOutput) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return o.ApplyT(func(v QueryParameterType) *QueryParameterType {
		return &v
	}).(QueryParameterTypePtrOutput)
}

// [Optional] The type of the array's elements, if this is an array.
func (o QueryParameterTypeOutput) ArrayType() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v QueryParameterType) *QueryParameterType { return v.ArrayType }).(QueryParameterTypePtrOutput)
}

// [Optional] The types of the fields of this struct, in order, if this is a struct.
func (o QueryParameterTypeOutput) StructTypes() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v QueryParameterType) []map[string]string { return v.StructTypes }).(pulumi.StringMapArrayOutput)
}

// [Required] The top level type of this field.
func (o QueryParameterTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameterType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type QueryParameterTypePtrOutput struct{ *pulumi.OutputState }

func (QueryParameterTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterType)(nil)).Elem()
}

func (o QueryParameterTypePtrOutput) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return o
}

func (o QueryParameterTypePtrOutput) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return o
}

func (o QueryParameterTypePtrOutput) Elem() QueryParameterTypeOutput {
	return o.ApplyT(func(v *QueryParameterType) QueryParameterType { return *v }).(QueryParameterTypeOutput)
}

// [Optional] The type of the array's elements, if this is an array.
func (o QueryParameterTypePtrOutput) ArrayType() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v *QueryParameterType) *QueryParameterType {
		if v == nil {
			return nil
		}
		return v.ArrayType
	}).(QueryParameterTypePtrOutput)
}

// [Optional] The types of the fields of this struct, in order, if this is a struct.
func (o QueryParameterTypePtrOutput) StructTypes() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *QueryParameterType) []map[string]string {
		if v == nil {
			return nil
		}
		return v.StructTypes
	}).(pulumi.StringMapArrayOutput)
}

// [Required] The top level type of this field.
func (o QueryParameterTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryParameterType) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type QueryParameterValue struct {
	// [Optional] The array values, if this is an array type.
	ArrayValues []QueryParameterValue `pulumi:"arrayValues"`
	// [Optional] The struct field values, in order of the struct type's declaration.
	StructValues map[string]string `pulumi:"structValues"`
	// [Optional] The value of this value, if a simple scalar type.
	Value *string `pulumi:"value"`
}

// QueryParameterValueInput is an input type that accepts QueryParameterValueArgs and QueryParameterValueOutput values.
// You can construct a concrete instance of `QueryParameterValueInput` via:
//
//          QueryParameterValueArgs{...}
type QueryParameterValueInput interface {
	pulumi.Input

	ToQueryParameterValueOutput() QueryParameterValueOutput
	ToQueryParameterValueOutputWithContext(context.Context) QueryParameterValueOutput
}

type QueryParameterValueArgs struct {
	// [Optional] The array values, if this is an array type.
	ArrayValues QueryParameterValueArrayInput `pulumi:"arrayValues"`
	// [Optional] The struct field values, in order of the struct type's declaration.
	StructValues pulumi.StringMapInput `pulumi:"structValues"`
	// [Optional] The value of this value, if a simple scalar type.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (QueryParameterValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterValue)(nil)).Elem()
}

func (i QueryParameterValueArgs) ToQueryParameterValueOutput() QueryParameterValueOutput {
	return i.ToQueryParameterValueOutputWithContext(context.Background())
}

func (i QueryParameterValueArgs) ToQueryParameterValueOutputWithContext(ctx context.Context) QueryParameterValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValueOutput)
}

func (i QueryParameterValueArgs) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return i.ToQueryParameterValuePtrOutputWithContext(context.Background())
}

func (i QueryParameterValueArgs) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValueOutput).ToQueryParameterValuePtrOutputWithContext(ctx)
}

// QueryParameterValuePtrInput is an input type that accepts QueryParameterValueArgs, QueryParameterValuePtr and QueryParameterValuePtrOutput values.
// You can construct a concrete instance of `QueryParameterValuePtrInput` via:
//
//          QueryParameterValueArgs{...}
//
//  or:
//
//          nil
type QueryParameterValuePtrInput interface {
	pulumi.Input

	ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput
	ToQueryParameterValuePtrOutputWithContext(context.Context) QueryParameterValuePtrOutput
}

type queryParameterValuePtrType QueryParameterValueArgs

func QueryParameterValuePtr(v *QueryParameterValueArgs) QueryParameterValuePtrInput {
	return (*queryParameterValuePtrType)(v)
}

func (*queryParameterValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterValue)(nil)).Elem()
}

func (i *queryParameterValuePtrType) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return i.ToQueryParameterValuePtrOutputWithContext(context.Background())
}

func (i *queryParameterValuePtrType) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValuePtrOutput)
}

// QueryParameterValueArrayInput is an input type that accepts QueryParameterValueArray and QueryParameterValueArrayOutput values.
// You can construct a concrete instance of `QueryParameterValueArrayInput` via:
//
//          QueryParameterValueArray{ QueryParameterValueArgs{...} }
type QueryParameterValueArrayInput interface {
	pulumi.Input

	ToQueryParameterValueArrayOutput() QueryParameterValueArrayOutput
	ToQueryParameterValueArrayOutputWithContext(context.Context) QueryParameterValueArrayOutput
}

type QueryParameterValueArray []QueryParameterValueInput

func (QueryParameterValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterValue)(nil)).Elem()
}

func (i QueryParameterValueArray) ToQueryParameterValueArrayOutput() QueryParameterValueArrayOutput {
	return i.ToQueryParameterValueArrayOutputWithContext(context.Background())
}

func (i QueryParameterValueArray) ToQueryParameterValueArrayOutputWithContext(ctx context.Context) QueryParameterValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValueArrayOutput)
}

type QueryParameterValueOutput struct{ *pulumi.OutputState }

func (QueryParameterValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterValue)(nil)).Elem()
}

func (o QueryParameterValueOutput) ToQueryParameterValueOutput() QueryParameterValueOutput {
	return o
}

func (o QueryParameterValueOutput) ToQueryParameterValueOutputWithContext(ctx context.Context) QueryParameterValueOutput {
	return o
}

func (o QueryParameterValueOutput) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return o.ToQueryParameterValuePtrOutputWithContext(context.Background())
}

func (o QueryParameterValueOutput) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return o.ApplyT(func(v QueryParameterValue) *QueryParameterValue {
		return &v
	}).(QueryParameterValuePtrOutput)
}

// [Optional] The array values, if this is an array type.
func (o QueryParameterValueOutput) ArrayValues() QueryParameterValueArrayOutput {
	return o.ApplyT(func(v QueryParameterValue) []QueryParameterValue { return v.ArrayValues }).(QueryParameterValueArrayOutput)
}

// [Optional] The struct field values, in order of the struct type's declaration.
func (o QueryParameterValueOutput) StructValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v QueryParameterValue) map[string]string { return v.StructValues }).(pulumi.StringMapOutput)
}

// [Optional] The value of this value, if a simple scalar type.
func (o QueryParameterValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameterValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type QueryParameterValuePtrOutput struct{ *pulumi.OutputState }

func (QueryParameterValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterValue)(nil)).Elem()
}

func (o QueryParameterValuePtrOutput) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return o
}

func (o QueryParameterValuePtrOutput) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return o
}

func (o QueryParameterValuePtrOutput) Elem() QueryParameterValueOutput {
	return o.ApplyT(func(v *QueryParameterValue) QueryParameterValue { return *v }).(QueryParameterValueOutput)
}

// [Optional] The array values, if this is an array type.
func (o QueryParameterValuePtrOutput) ArrayValues() QueryParameterValueArrayOutput {
	return o.ApplyT(func(v *QueryParameterValue) []QueryParameterValue {
		if v == nil {
			return nil
		}
		return v.ArrayValues
	}).(QueryParameterValueArrayOutput)
}

// [Optional] The struct field values, in order of the struct type's declaration.
func (o QueryParameterValuePtrOutput) StructValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QueryParameterValue) map[string]string {
		if v == nil {
			return nil
		}
		return v.StructValues
	}).(pulumi.StringMapOutput)
}

// [Optional] The value of this value, if a simple scalar type.
func (o QueryParameterValuePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryParameterValue) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type QueryParameterValueArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterValue)(nil)).Elem()
}

func (o QueryParameterValueArrayOutput) ToQueryParameterValueArrayOutput() QueryParameterValueArrayOutput {
	return o
}

func (o QueryParameterValueArrayOutput) ToQueryParameterValueArrayOutputWithContext(ctx context.Context) QueryParameterValueArrayOutput {
	return o
}

func (o QueryParameterValueArrayOutput) Index(i pulumi.IntInput) QueryParameterValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterValue {
		return vs[0].([]QueryParameterValue)[vs[1].(int)]
	}).(QueryParameterValueOutput)
}

type QueryTimelineSample struct {
	// Total number of units currently being processed by workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
	ActiveUnits *string `pulumi:"activeUnits"`
	// Total parallel units of work completed by this query.
	CompletedUnits *string `pulumi:"completedUnits"`
	// Milliseconds elapsed since the start of query execution.
	ElapsedMs *string `pulumi:"elapsedMs"`
	// Total parallel units of work remaining for the active stages.
	PendingUnits *string `pulumi:"pendingUnits"`
	// Cumulative slot-ms consumed by the query.
	TotalSlotMs *string `pulumi:"totalSlotMs"`
}

// QueryTimelineSampleInput is an input type that accepts QueryTimelineSampleArgs and QueryTimelineSampleOutput values.
// You can construct a concrete instance of `QueryTimelineSampleInput` via:
//
//          QueryTimelineSampleArgs{...}
type QueryTimelineSampleInput interface {
	pulumi.Input

	ToQueryTimelineSampleOutput() QueryTimelineSampleOutput
	ToQueryTimelineSampleOutputWithContext(context.Context) QueryTimelineSampleOutput
}

type QueryTimelineSampleArgs struct {
	// Total number of units currently being processed by workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
	ActiveUnits pulumi.StringPtrInput `pulumi:"activeUnits"`
	// Total parallel units of work completed by this query.
	CompletedUnits pulumi.StringPtrInput `pulumi:"completedUnits"`
	// Milliseconds elapsed since the start of query execution.
	ElapsedMs pulumi.StringPtrInput `pulumi:"elapsedMs"`
	// Total parallel units of work remaining for the active stages.
	PendingUnits pulumi.StringPtrInput `pulumi:"pendingUnits"`
	// Cumulative slot-ms consumed by the query.
	TotalSlotMs pulumi.StringPtrInput `pulumi:"totalSlotMs"`
}

func (QueryTimelineSampleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimelineSample)(nil)).Elem()
}

func (i QueryTimelineSampleArgs) ToQueryTimelineSampleOutput() QueryTimelineSampleOutput {
	return i.ToQueryTimelineSampleOutputWithContext(context.Background())
}

func (i QueryTimelineSampleArgs) ToQueryTimelineSampleOutputWithContext(ctx context.Context) QueryTimelineSampleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimelineSampleOutput)
}

// QueryTimelineSampleArrayInput is an input type that accepts QueryTimelineSampleArray and QueryTimelineSampleArrayOutput values.
// You can construct a concrete instance of `QueryTimelineSampleArrayInput` via:
//
//          QueryTimelineSampleArray{ QueryTimelineSampleArgs{...} }
type QueryTimelineSampleArrayInput interface {
	pulumi.Input

	ToQueryTimelineSampleArrayOutput() QueryTimelineSampleArrayOutput
	ToQueryTimelineSampleArrayOutputWithContext(context.Context) QueryTimelineSampleArrayOutput
}

type QueryTimelineSampleArray []QueryTimelineSampleInput

func (QueryTimelineSampleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryTimelineSample)(nil)).Elem()
}

func (i QueryTimelineSampleArray) ToQueryTimelineSampleArrayOutput() QueryTimelineSampleArrayOutput {
	return i.ToQueryTimelineSampleArrayOutputWithContext(context.Background())
}

func (i QueryTimelineSampleArray) ToQueryTimelineSampleArrayOutputWithContext(ctx context.Context) QueryTimelineSampleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryTimelineSampleArrayOutput)
}

type QueryTimelineSampleOutput struct{ *pulumi.OutputState }

func (QueryTimelineSampleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimelineSample)(nil)).Elem()
}

func (o QueryTimelineSampleOutput) ToQueryTimelineSampleOutput() QueryTimelineSampleOutput {
	return o
}

func (o QueryTimelineSampleOutput) ToQueryTimelineSampleOutputWithContext(ctx context.Context) QueryTimelineSampleOutput {
	return o
}

// Total number of units currently being processed by workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
func (o QueryTimelineSampleOutput) ActiveUnits() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryTimelineSample) *string { return v.ActiveUnits }).(pulumi.StringPtrOutput)
}

// Total parallel units of work completed by this query.
func (o QueryTimelineSampleOutput) CompletedUnits() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryTimelineSample) *string { return v.CompletedUnits }).(pulumi.StringPtrOutput)
}

// Milliseconds elapsed since the start of query execution.
func (o QueryTimelineSampleOutput) ElapsedMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryTimelineSample) *string { return v.ElapsedMs }).(pulumi.StringPtrOutput)
}

// Total parallel units of work remaining for the active stages.
func (o QueryTimelineSampleOutput) PendingUnits() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryTimelineSample) *string { return v.PendingUnits }).(pulumi.StringPtrOutput)
}

// Cumulative slot-ms consumed by the query.
func (o QueryTimelineSampleOutput) TotalSlotMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryTimelineSample) *string { return v.TotalSlotMs }).(pulumi.StringPtrOutput)
}

type QueryTimelineSampleArrayOutput struct{ *pulumi.OutputState }

func (QueryTimelineSampleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryTimelineSample)(nil)).Elem()
}

func (o QueryTimelineSampleArrayOutput) ToQueryTimelineSampleArrayOutput() QueryTimelineSampleArrayOutput {
	return o
}

func (o QueryTimelineSampleArrayOutput) ToQueryTimelineSampleArrayOutputWithContext(ctx context.Context) QueryTimelineSampleArrayOutput {
	return o
}

func (o QueryTimelineSampleArrayOutput) Index(i pulumi.IntInput) QueryTimelineSampleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryTimelineSample {
		return vs[0].([]QueryTimelineSample)[vs[1].(int)]
	}).(QueryTimelineSampleOutput)
}

type RangePartitioning struct {
	// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
	Field *string `pulumi:"field"`
	// [TrustedTester] [Required] Defines the ranges for range partitioning.
	Range map[string]string `pulumi:"range"`
}

// RangePartitioningInput is an input type that accepts RangePartitioningArgs and RangePartitioningOutput values.
// You can construct a concrete instance of `RangePartitioningInput` via:
//
//          RangePartitioningArgs{...}
type RangePartitioningInput interface {
	pulumi.Input

	ToRangePartitioningOutput() RangePartitioningOutput
	ToRangePartitioningOutputWithContext(context.Context) RangePartitioningOutput
}

type RangePartitioningArgs struct {
	// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// [TrustedTester] [Required] Defines the ranges for range partitioning.
	Range pulumi.StringMapInput `pulumi:"range"`
}

func (RangePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioning)(nil)).Elem()
}

func (i RangePartitioningArgs) ToRangePartitioningOutput() RangePartitioningOutput {
	return i.ToRangePartitioningOutputWithContext(context.Background())
}

func (i RangePartitioningArgs) ToRangePartitioningOutputWithContext(ctx context.Context) RangePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningOutput)
}

func (i RangePartitioningArgs) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return i.ToRangePartitioningPtrOutputWithContext(context.Background())
}

func (i RangePartitioningArgs) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningOutput).ToRangePartitioningPtrOutputWithContext(ctx)
}

// RangePartitioningPtrInput is an input type that accepts RangePartitioningArgs, RangePartitioningPtr and RangePartitioningPtrOutput values.
// You can construct a concrete instance of `RangePartitioningPtrInput` via:
//
//          RangePartitioningArgs{...}
//
//  or:
//
//          nil
type RangePartitioningPtrInput interface {
	pulumi.Input

	ToRangePartitioningPtrOutput() RangePartitioningPtrOutput
	ToRangePartitioningPtrOutputWithContext(context.Context) RangePartitioningPtrOutput
}

type rangePartitioningPtrType RangePartitioningArgs

func RangePartitioningPtr(v *RangePartitioningArgs) RangePartitioningPtrInput {
	return (*rangePartitioningPtrType)(v)
}

func (*rangePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangePartitioning)(nil)).Elem()
}

func (i *rangePartitioningPtrType) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return i.ToRangePartitioningPtrOutputWithContext(context.Background())
}

func (i *rangePartitioningPtrType) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningPtrOutput)
}

type RangePartitioningOutput struct{ *pulumi.OutputState }

func (RangePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioning)(nil)).Elem()
}

func (o RangePartitioningOutput) ToRangePartitioningOutput() RangePartitioningOutput {
	return o
}

func (o RangePartitioningOutput) ToRangePartitioningOutputWithContext(ctx context.Context) RangePartitioningOutput {
	return o
}

func (o RangePartitioningOutput) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return o.ToRangePartitioningPtrOutputWithContext(context.Background())
}

func (o RangePartitioningOutput) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return o.ApplyT(func(v RangePartitioning) *RangePartitioning {
		return &v
	}).(RangePartitioningPtrOutput)
}

// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
func (o RangePartitioningOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangePartitioning) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// [TrustedTester] [Required] Defines the ranges for range partitioning.
func (o RangePartitioningOutput) Range() pulumi.StringMapOutput {
	return o.ApplyT(func(v RangePartitioning) map[string]string { return v.Range }).(pulumi.StringMapOutput)
}

type RangePartitioningPtrOutput struct{ *pulumi.OutputState }

func (RangePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangePartitioning)(nil)).Elem()
}

func (o RangePartitioningPtrOutput) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return o
}

func (o RangePartitioningPtrOutput) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return o
}

func (o RangePartitioningPtrOutput) Elem() RangePartitioningOutput {
	return o.ApplyT(func(v *RangePartitioning) RangePartitioning { return *v }).(RangePartitioningOutput)
}

// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
func (o RangePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// [TrustedTester] [Required] Defines the ranges for range partitioning.
func (o RangePartitioningPtrOutput) Range() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RangePartitioning) map[string]string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringMapOutput)
}

type RoutineReference struct {
	// [Required] The ID of the dataset containing this routine.
	DatasetId *string `pulumi:"datasetId"`
	// [Required] The ID of the project containing this routine.
	ProjectId *string `pulumi:"projectId"`
	// [Required] The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId *string `pulumi:"routineId"`
}

// RoutineReferenceInput is an input type that accepts RoutineReferenceArgs and RoutineReferenceOutput values.
// You can construct a concrete instance of `RoutineReferenceInput` via:
//
//          RoutineReferenceArgs{...}
type RoutineReferenceInput interface {
	pulumi.Input

	ToRoutineReferenceOutput() RoutineReferenceOutput
	ToRoutineReferenceOutputWithContext(context.Context) RoutineReferenceOutput
}

type RoutineReferenceArgs struct {
	// [Required] The ID of the dataset containing this routine.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// [Required] The ID of the project containing this routine.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// [Required] The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId pulumi.StringPtrInput `pulumi:"routineId"`
}

func (RoutineReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineReference)(nil)).Elem()
}

func (i RoutineReferenceArgs) ToRoutineReferenceOutput() RoutineReferenceOutput {
	return i.ToRoutineReferenceOutputWithContext(context.Background())
}

func (i RoutineReferenceArgs) ToRoutineReferenceOutputWithContext(ctx context.Context) RoutineReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineReferenceOutput)
}

func (i RoutineReferenceArgs) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return i.ToRoutineReferencePtrOutputWithContext(context.Background())
}

func (i RoutineReferenceArgs) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineReferenceOutput).ToRoutineReferencePtrOutputWithContext(ctx)
}

// RoutineReferencePtrInput is an input type that accepts RoutineReferenceArgs, RoutineReferencePtr and RoutineReferencePtrOutput values.
// You can construct a concrete instance of `RoutineReferencePtrInput` via:
//
//          RoutineReferenceArgs{...}
//
//  or:
//
//          nil
type RoutineReferencePtrInput interface {
	pulumi.Input

	ToRoutineReferencePtrOutput() RoutineReferencePtrOutput
	ToRoutineReferencePtrOutputWithContext(context.Context) RoutineReferencePtrOutput
}

type routineReferencePtrType RoutineReferenceArgs

func RoutineReferencePtr(v *RoutineReferenceArgs) RoutineReferencePtrInput {
	return (*routineReferencePtrType)(v)
}

func (*routineReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineReference)(nil)).Elem()
}

func (i *routineReferencePtrType) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return i.ToRoutineReferencePtrOutputWithContext(context.Background())
}

func (i *routineReferencePtrType) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineReferencePtrOutput)
}

// RoutineReferenceArrayInput is an input type that accepts RoutineReferenceArray and RoutineReferenceArrayOutput values.
// You can construct a concrete instance of `RoutineReferenceArrayInput` via:
//
//          RoutineReferenceArray{ RoutineReferenceArgs{...} }
type RoutineReferenceArrayInput interface {
	pulumi.Input

	ToRoutineReferenceArrayOutput() RoutineReferenceArrayOutput
	ToRoutineReferenceArrayOutputWithContext(context.Context) RoutineReferenceArrayOutput
}

type RoutineReferenceArray []RoutineReferenceInput

func (RoutineReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutineReference)(nil)).Elem()
}

func (i RoutineReferenceArray) ToRoutineReferenceArrayOutput() RoutineReferenceArrayOutput {
	return i.ToRoutineReferenceArrayOutputWithContext(context.Background())
}

func (i RoutineReferenceArray) ToRoutineReferenceArrayOutputWithContext(ctx context.Context) RoutineReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineReferenceArrayOutput)
}

type RoutineReferenceOutput struct{ *pulumi.OutputState }

func (RoutineReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineReference)(nil)).Elem()
}

func (o RoutineReferenceOutput) ToRoutineReferenceOutput() RoutineReferenceOutput {
	return o
}

func (o RoutineReferenceOutput) ToRoutineReferenceOutputWithContext(ctx context.Context) RoutineReferenceOutput {
	return o
}

func (o RoutineReferenceOutput) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return o.ToRoutineReferencePtrOutputWithContext(context.Background())
}

func (o RoutineReferenceOutput) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return o.ApplyT(func(v RoutineReference) *RoutineReference {
		return &v
	}).(RoutineReferencePtrOutput)
}

// [Required] The ID of the dataset containing this routine.
func (o RoutineReferenceOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutineReference) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this routine.
func (o RoutineReferenceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutineReference) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RoutineReferenceOutput) RoutineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutineReference) *string { return v.RoutineId }).(pulumi.StringPtrOutput)
}

type RoutineReferencePtrOutput struct{ *pulumi.OutputState }

func (RoutineReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineReference)(nil)).Elem()
}

func (o RoutineReferencePtrOutput) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return o
}

func (o RoutineReferencePtrOutput) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return o
}

func (o RoutineReferencePtrOutput) Elem() RoutineReferenceOutput {
	return o.ApplyT(func(v *RoutineReference) RoutineReference { return *v }).(RoutineReferenceOutput)
}

// [Required] The ID of the dataset containing this routine.
func (o RoutineReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineReference) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this routine.
func (o RoutineReferencePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineReference) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RoutineReferencePtrOutput) RoutineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineReference) *string {
		if v == nil {
			return nil
		}
		return v.RoutineId
	}).(pulumi.StringPtrOutput)
}

type RoutineReferenceArrayOutput struct{ *pulumi.OutputState }

func (RoutineReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutineReference)(nil)).Elem()
}

func (o RoutineReferenceArrayOutput) ToRoutineReferenceArrayOutput() RoutineReferenceArrayOutput {
	return o
}

func (o RoutineReferenceArrayOutput) ToRoutineReferenceArrayOutputWithContext(ctx context.Context) RoutineReferenceArrayOutput {
	return o
}

func (o RoutineReferenceArrayOutput) Index(i pulumi.IntInput) RoutineReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutineReference {
		return vs[0].([]RoutineReference)[vs[1].(int)]
	}).(RoutineReferenceOutput)
}

type RowAccessPolicyReference struct {
	// [Required] The ID of the dataset containing this row access policy.
	DatasetId *string `pulumi:"datasetId"`
	// [Required] The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	PolicyId *string `pulumi:"policyId"`
	// [Required] The ID of the project containing this row access policy.
	ProjectId *string `pulumi:"projectId"`
	// [Required] The ID of the table containing this row access policy.
	TableId *string `pulumi:"tableId"`
}

// RowAccessPolicyReferenceInput is an input type that accepts RowAccessPolicyReferenceArgs and RowAccessPolicyReferenceOutput values.
// You can construct a concrete instance of `RowAccessPolicyReferenceInput` via:
//
//          RowAccessPolicyReferenceArgs{...}
type RowAccessPolicyReferenceInput interface {
	pulumi.Input

	ToRowAccessPolicyReferenceOutput() RowAccessPolicyReferenceOutput
	ToRowAccessPolicyReferenceOutputWithContext(context.Context) RowAccessPolicyReferenceOutput
}

type RowAccessPolicyReferenceArgs struct {
	// [Required] The ID of the dataset containing this row access policy.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// [Required] The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	PolicyId pulumi.StringPtrInput `pulumi:"policyId"`
	// [Required] The ID of the project containing this row access policy.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// [Required] The ID of the table containing this row access policy.
	TableId pulumi.StringPtrInput `pulumi:"tableId"`
}

func (RowAccessPolicyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RowAccessPolicyReference)(nil)).Elem()
}

func (i RowAccessPolicyReferenceArgs) ToRowAccessPolicyReferenceOutput() RowAccessPolicyReferenceOutput {
	return i.ToRowAccessPolicyReferenceOutputWithContext(context.Background())
}

func (i RowAccessPolicyReferenceArgs) ToRowAccessPolicyReferenceOutputWithContext(ctx context.Context) RowAccessPolicyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RowAccessPolicyReferenceOutput)
}

func (i RowAccessPolicyReferenceArgs) ToRowAccessPolicyReferencePtrOutput() RowAccessPolicyReferencePtrOutput {
	return i.ToRowAccessPolicyReferencePtrOutputWithContext(context.Background())
}

func (i RowAccessPolicyReferenceArgs) ToRowAccessPolicyReferencePtrOutputWithContext(ctx context.Context) RowAccessPolicyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RowAccessPolicyReferenceOutput).ToRowAccessPolicyReferencePtrOutputWithContext(ctx)
}

// RowAccessPolicyReferencePtrInput is an input type that accepts RowAccessPolicyReferenceArgs, RowAccessPolicyReferencePtr and RowAccessPolicyReferencePtrOutput values.
// You can construct a concrete instance of `RowAccessPolicyReferencePtrInput` via:
//
//          RowAccessPolicyReferenceArgs{...}
//
//  or:
//
//          nil
type RowAccessPolicyReferencePtrInput interface {
	pulumi.Input

	ToRowAccessPolicyReferencePtrOutput() RowAccessPolicyReferencePtrOutput
	ToRowAccessPolicyReferencePtrOutputWithContext(context.Context) RowAccessPolicyReferencePtrOutput
}

type rowAccessPolicyReferencePtrType RowAccessPolicyReferenceArgs

func RowAccessPolicyReferencePtr(v *RowAccessPolicyReferenceArgs) RowAccessPolicyReferencePtrInput {
	return (*rowAccessPolicyReferencePtrType)(v)
}

func (*rowAccessPolicyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RowAccessPolicyReference)(nil)).Elem()
}

func (i *rowAccessPolicyReferencePtrType) ToRowAccessPolicyReferencePtrOutput() RowAccessPolicyReferencePtrOutput {
	return i.ToRowAccessPolicyReferencePtrOutputWithContext(context.Background())
}

func (i *rowAccessPolicyReferencePtrType) ToRowAccessPolicyReferencePtrOutputWithContext(ctx context.Context) RowAccessPolicyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RowAccessPolicyReferencePtrOutput)
}

type RowAccessPolicyReferenceOutput struct{ *pulumi.OutputState }

func (RowAccessPolicyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RowAccessPolicyReference)(nil)).Elem()
}

func (o RowAccessPolicyReferenceOutput) ToRowAccessPolicyReferenceOutput() RowAccessPolicyReferenceOutput {
	return o
}

func (o RowAccessPolicyReferenceOutput) ToRowAccessPolicyReferenceOutputWithContext(ctx context.Context) RowAccessPolicyReferenceOutput {
	return o
}

func (o RowAccessPolicyReferenceOutput) ToRowAccessPolicyReferencePtrOutput() RowAccessPolicyReferencePtrOutput {
	return o.ToRowAccessPolicyReferencePtrOutputWithContext(context.Background())
}

func (o RowAccessPolicyReferenceOutput) ToRowAccessPolicyReferencePtrOutputWithContext(ctx context.Context) RowAccessPolicyReferencePtrOutput {
	return o.ApplyT(func(v RowAccessPolicyReference) *RowAccessPolicyReference {
		return &v
	}).(RowAccessPolicyReferencePtrOutput)
}

// [Required] The ID of the dataset containing this row access policy.
func (o RowAccessPolicyReferenceOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RowAccessPolicyReference) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RowAccessPolicyReferenceOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RowAccessPolicyReference) *string { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this row access policy.
func (o RowAccessPolicyReferenceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RowAccessPolicyReference) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the table containing this row access policy.
func (o RowAccessPolicyReferenceOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RowAccessPolicyReference) *string { return v.TableId }).(pulumi.StringPtrOutput)
}

type RowAccessPolicyReferencePtrOutput struct{ *pulumi.OutputState }

func (RowAccessPolicyReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RowAccessPolicyReference)(nil)).Elem()
}

func (o RowAccessPolicyReferencePtrOutput) ToRowAccessPolicyReferencePtrOutput() RowAccessPolicyReferencePtrOutput {
	return o
}

func (o RowAccessPolicyReferencePtrOutput) ToRowAccessPolicyReferencePtrOutputWithContext(ctx context.Context) RowAccessPolicyReferencePtrOutput {
	return o
}

func (o RowAccessPolicyReferencePtrOutput) Elem() RowAccessPolicyReferenceOutput {
	return o.ApplyT(func(v *RowAccessPolicyReference) RowAccessPolicyReference { return *v }).(RowAccessPolicyReferenceOutput)
}

// [Required] The ID of the dataset containing this row access policy.
func (o RowAccessPolicyReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RowAccessPolicyReference) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RowAccessPolicyReferencePtrOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RowAccessPolicyReference) *string {
		if v == nil {
			return nil
		}
		return v.PolicyId
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this row access policy.
func (o RowAccessPolicyReferencePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RowAccessPolicyReference) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the table containing this row access policy.
func (o RowAccessPolicyReferencePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RowAccessPolicyReference) *string {
		if v == nil {
			return nil
		}
		return v.TableId
	}).(pulumi.StringPtrOutput)
}

type RowLevelSecurityStatistics struct {
	// [Output-only] [Preview] Whether any accessed data was protected by row access policies.
	RowLevelSecurityApplied *bool `pulumi:"rowLevelSecurityApplied"`
}

// RowLevelSecurityStatisticsInput is an input type that accepts RowLevelSecurityStatisticsArgs and RowLevelSecurityStatisticsOutput values.
// You can construct a concrete instance of `RowLevelSecurityStatisticsInput` via:
//
//          RowLevelSecurityStatisticsArgs{...}
type RowLevelSecurityStatisticsInput interface {
	pulumi.Input

	ToRowLevelSecurityStatisticsOutput() RowLevelSecurityStatisticsOutput
	ToRowLevelSecurityStatisticsOutputWithContext(context.Context) RowLevelSecurityStatisticsOutput
}

type RowLevelSecurityStatisticsArgs struct {
	// [Output-only] [Preview] Whether any accessed data was protected by row access policies.
	RowLevelSecurityApplied pulumi.BoolPtrInput `pulumi:"rowLevelSecurityApplied"`
}

func (RowLevelSecurityStatisticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RowLevelSecurityStatistics)(nil)).Elem()
}

func (i RowLevelSecurityStatisticsArgs) ToRowLevelSecurityStatisticsOutput() RowLevelSecurityStatisticsOutput {
	return i.ToRowLevelSecurityStatisticsOutputWithContext(context.Background())
}

func (i RowLevelSecurityStatisticsArgs) ToRowLevelSecurityStatisticsOutputWithContext(ctx context.Context) RowLevelSecurityStatisticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RowLevelSecurityStatisticsOutput)
}

func (i RowLevelSecurityStatisticsArgs) ToRowLevelSecurityStatisticsPtrOutput() RowLevelSecurityStatisticsPtrOutput {
	return i.ToRowLevelSecurityStatisticsPtrOutputWithContext(context.Background())
}

func (i RowLevelSecurityStatisticsArgs) ToRowLevelSecurityStatisticsPtrOutputWithContext(ctx context.Context) RowLevelSecurityStatisticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RowLevelSecurityStatisticsOutput).ToRowLevelSecurityStatisticsPtrOutputWithContext(ctx)
}

// RowLevelSecurityStatisticsPtrInput is an input type that accepts RowLevelSecurityStatisticsArgs, RowLevelSecurityStatisticsPtr and RowLevelSecurityStatisticsPtrOutput values.
// You can construct a concrete instance of `RowLevelSecurityStatisticsPtrInput` via:
//
//          RowLevelSecurityStatisticsArgs{...}
//
//  or:
//
//          nil
type RowLevelSecurityStatisticsPtrInput interface {
	pulumi.Input

	ToRowLevelSecurityStatisticsPtrOutput() RowLevelSecurityStatisticsPtrOutput
	ToRowLevelSecurityStatisticsPtrOutputWithContext(context.Context) RowLevelSecurityStatisticsPtrOutput
}

type rowLevelSecurityStatisticsPtrType RowLevelSecurityStatisticsArgs

func RowLevelSecurityStatisticsPtr(v *RowLevelSecurityStatisticsArgs) RowLevelSecurityStatisticsPtrInput {
	return (*rowLevelSecurityStatisticsPtrType)(v)
}

func (*rowLevelSecurityStatisticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RowLevelSecurityStatistics)(nil)).Elem()
}

func (i *rowLevelSecurityStatisticsPtrType) ToRowLevelSecurityStatisticsPtrOutput() RowLevelSecurityStatisticsPtrOutput {
	return i.ToRowLevelSecurityStatisticsPtrOutputWithContext(context.Background())
}

func (i *rowLevelSecurityStatisticsPtrType) ToRowLevelSecurityStatisticsPtrOutputWithContext(ctx context.Context) RowLevelSecurityStatisticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RowLevelSecurityStatisticsPtrOutput)
}

type RowLevelSecurityStatisticsOutput struct{ *pulumi.OutputState }

func (RowLevelSecurityStatisticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RowLevelSecurityStatistics)(nil)).Elem()
}

func (o RowLevelSecurityStatisticsOutput) ToRowLevelSecurityStatisticsOutput() RowLevelSecurityStatisticsOutput {
	return o
}

func (o RowLevelSecurityStatisticsOutput) ToRowLevelSecurityStatisticsOutputWithContext(ctx context.Context) RowLevelSecurityStatisticsOutput {
	return o
}

func (o RowLevelSecurityStatisticsOutput) ToRowLevelSecurityStatisticsPtrOutput() RowLevelSecurityStatisticsPtrOutput {
	return o.ToRowLevelSecurityStatisticsPtrOutputWithContext(context.Background())
}

func (o RowLevelSecurityStatisticsOutput) ToRowLevelSecurityStatisticsPtrOutputWithContext(ctx context.Context) RowLevelSecurityStatisticsPtrOutput {
	return o.ApplyT(func(v RowLevelSecurityStatistics) *RowLevelSecurityStatistics {
		return &v
	}).(RowLevelSecurityStatisticsPtrOutput)
}

// [Output-only] [Preview] Whether any accessed data was protected by row access policies.
func (o RowLevelSecurityStatisticsOutput) RowLevelSecurityApplied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RowLevelSecurityStatistics) *bool { return v.RowLevelSecurityApplied }).(pulumi.BoolPtrOutput)
}

type RowLevelSecurityStatisticsPtrOutput struct{ *pulumi.OutputState }

func (RowLevelSecurityStatisticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RowLevelSecurityStatistics)(nil)).Elem()
}

func (o RowLevelSecurityStatisticsPtrOutput) ToRowLevelSecurityStatisticsPtrOutput() RowLevelSecurityStatisticsPtrOutput {
	return o
}

func (o RowLevelSecurityStatisticsPtrOutput) ToRowLevelSecurityStatisticsPtrOutputWithContext(ctx context.Context) RowLevelSecurityStatisticsPtrOutput {
	return o
}

func (o RowLevelSecurityStatisticsPtrOutput) Elem() RowLevelSecurityStatisticsOutput {
	return o.ApplyT(func(v *RowLevelSecurityStatistics) RowLevelSecurityStatistics { return *v }).(RowLevelSecurityStatisticsOutput)
}

// [Output-only] [Preview] Whether any accessed data was protected by row access policies.
func (o RowLevelSecurityStatisticsPtrOutput) RowLevelSecurityApplied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RowLevelSecurityStatistics) *bool {
		if v == nil {
			return nil
		}
		return v.RowLevelSecurityApplied
	}).(pulumi.BoolPtrOutput)
}

type ScriptStackFrame struct {
	// [Output-only] One-based end column.
	EndColumn *int `pulumi:"endColumn"`
	// [Output-only] One-based end line.
	EndLine *int `pulumi:"endLine"`
	// [Output-only] Name of the active procedure, empty if in a top-level script.
	ProcedureId *string `pulumi:"procedureId"`
	// [Output-only] One-based start column.
	StartColumn *int `pulumi:"startColumn"`
	// [Output-only] One-based start line.
	StartLine *int `pulumi:"startLine"`
	// [Output-only] Text of the current statement/expression.
	Text *string `pulumi:"text"`
}

// ScriptStackFrameInput is an input type that accepts ScriptStackFrameArgs and ScriptStackFrameOutput values.
// You can construct a concrete instance of `ScriptStackFrameInput` via:
//
//          ScriptStackFrameArgs{...}
type ScriptStackFrameInput interface {
	pulumi.Input

	ToScriptStackFrameOutput() ScriptStackFrameOutput
	ToScriptStackFrameOutputWithContext(context.Context) ScriptStackFrameOutput
}

type ScriptStackFrameArgs struct {
	// [Output-only] One-based end column.
	EndColumn pulumi.IntPtrInput `pulumi:"endColumn"`
	// [Output-only] One-based end line.
	EndLine pulumi.IntPtrInput `pulumi:"endLine"`
	// [Output-only] Name of the active procedure, empty if in a top-level script.
	ProcedureId pulumi.StringPtrInput `pulumi:"procedureId"`
	// [Output-only] One-based start column.
	StartColumn pulumi.IntPtrInput `pulumi:"startColumn"`
	// [Output-only] One-based start line.
	StartLine pulumi.IntPtrInput `pulumi:"startLine"`
	// [Output-only] Text of the current statement/expression.
	Text pulumi.StringPtrInput `pulumi:"text"`
}

func (ScriptStackFrameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptStackFrame)(nil)).Elem()
}

func (i ScriptStackFrameArgs) ToScriptStackFrameOutput() ScriptStackFrameOutput {
	return i.ToScriptStackFrameOutputWithContext(context.Background())
}

func (i ScriptStackFrameArgs) ToScriptStackFrameOutputWithContext(ctx context.Context) ScriptStackFrameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptStackFrameOutput)
}

// ScriptStackFrameArrayInput is an input type that accepts ScriptStackFrameArray and ScriptStackFrameArrayOutput values.
// You can construct a concrete instance of `ScriptStackFrameArrayInput` via:
//
//          ScriptStackFrameArray{ ScriptStackFrameArgs{...} }
type ScriptStackFrameArrayInput interface {
	pulumi.Input

	ToScriptStackFrameArrayOutput() ScriptStackFrameArrayOutput
	ToScriptStackFrameArrayOutputWithContext(context.Context) ScriptStackFrameArrayOutput
}

type ScriptStackFrameArray []ScriptStackFrameInput

func (ScriptStackFrameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptStackFrame)(nil)).Elem()
}

func (i ScriptStackFrameArray) ToScriptStackFrameArrayOutput() ScriptStackFrameArrayOutput {
	return i.ToScriptStackFrameArrayOutputWithContext(context.Background())
}

func (i ScriptStackFrameArray) ToScriptStackFrameArrayOutputWithContext(ctx context.Context) ScriptStackFrameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptStackFrameArrayOutput)
}

type ScriptStackFrameOutput struct{ *pulumi.OutputState }

func (ScriptStackFrameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptStackFrame)(nil)).Elem()
}

func (o ScriptStackFrameOutput) ToScriptStackFrameOutput() ScriptStackFrameOutput {
	return o
}

func (o ScriptStackFrameOutput) ToScriptStackFrameOutputWithContext(ctx context.Context) ScriptStackFrameOutput {
	return o
}

// [Output-only] One-based end column.
func (o ScriptStackFrameOutput) EndColumn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScriptStackFrame) *int { return v.EndColumn }).(pulumi.IntPtrOutput)
}

// [Output-only] One-based end line.
func (o ScriptStackFrameOutput) EndLine() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScriptStackFrame) *int { return v.EndLine }).(pulumi.IntPtrOutput)
}

// [Output-only] Name of the active procedure, empty if in a top-level script.
func (o ScriptStackFrameOutput) ProcedureId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptStackFrame) *string { return v.ProcedureId }).(pulumi.StringPtrOutput)
}

// [Output-only] One-based start column.
func (o ScriptStackFrameOutput) StartColumn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScriptStackFrame) *int { return v.StartColumn }).(pulumi.IntPtrOutput)
}

// [Output-only] One-based start line.
func (o ScriptStackFrameOutput) StartLine() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScriptStackFrame) *int { return v.StartLine }).(pulumi.IntPtrOutput)
}

// [Output-only] Text of the current statement/expression.
func (o ScriptStackFrameOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptStackFrame) *string { return v.Text }).(pulumi.StringPtrOutput)
}

type ScriptStackFrameArrayOutput struct{ *pulumi.OutputState }

func (ScriptStackFrameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptStackFrame)(nil)).Elem()
}

func (o ScriptStackFrameArrayOutput) ToScriptStackFrameArrayOutput() ScriptStackFrameArrayOutput {
	return o
}

func (o ScriptStackFrameArrayOutput) ToScriptStackFrameArrayOutputWithContext(ctx context.Context) ScriptStackFrameArrayOutput {
	return o
}

func (o ScriptStackFrameArrayOutput) Index(i pulumi.IntInput) ScriptStackFrameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptStackFrame {
		return vs[0].([]ScriptStackFrame)[vs[1].(int)]
	}).(ScriptStackFrameOutput)
}

type ScriptStatistics struct {
	// [Output-only] Whether this child job was a statement or expression.
	EvaluationKind *string `pulumi:"evaluationKind"`
	// Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
	StackFrames []ScriptStackFrame `pulumi:"stackFrames"`
}

// ScriptStatisticsInput is an input type that accepts ScriptStatisticsArgs and ScriptStatisticsOutput values.
// You can construct a concrete instance of `ScriptStatisticsInput` via:
//
//          ScriptStatisticsArgs{...}
type ScriptStatisticsInput interface {
	pulumi.Input

	ToScriptStatisticsOutput() ScriptStatisticsOutput
	ToScriptStatisticsOutputWithContext(context.Context) ScriptStatisticsOutput
}

type ScriptStatisticsArgs struct {
	// [Output-only] Whether this child job was a statement or expression.
	EvaluationKind pulumi.StringPtrInput `pulumi:"evaluationKind"`
	// Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
	StackFrames ScriptStackFrameArrayInput `pulumi:"stackFrames"`
}

func (ScriptStatisticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptStatistics)(nil)).Elem()
}

func (i ScriptStatisticsArgs) ToScriptStatisticsOutput() ScriptStatisticsOutput {
	return i.ToScriptStatisticsOutputWithContext(context.Background())
}

func (i ScriptStatisticsArgs) ToScriptStatisticsOutputWithContext(ctx context.Context) ScriptStatisticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptStatisticsOutput)
}

func (i ScriptStatisticsArgs) ToScriptStatisticsPtrOutput() ScriptStatisticsPtrOutput {
	return i.ToScriptStatisticsPtrOutputWithContext(context.Background())
}

func (i ScriptStatisticsArgs) ToScriptStatisticsPtrOutputWithContext(ctx context.Context) ScriptStatisticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptStatisticsOutput).ToScriptStatisticsPtrOutputWithContext(ctx)
}

// ScriptStatisticsPtrInput is an input type that accepts ScriptStatisticsArgs, ScriptStatisticsPtr and ScriptStatisticsPtrOutput values.
// You can construct a concrete instance of `ScriptStatisticsPtrInput` via:
//
//          ScriptStatisticsArgs{...}
//
//  or:
//
//          nil
type ScriptStatisticsPtrInput interface {
	pulumi.Input

	ToScriptStatisticsPtrOutput() ScriptStatisticsPtrOutput
	ToScriptStatisticsPtrOutputWithContext(context.Context) ScriptStatisticsPtrOutput
}

type scriptStatisticsPtrType ScriptStatisticsArgs

func ScriptStatisticsPtr(v *ScriptStatisticsArgs) ScriptStatisticsPtrInput {
	return (*scriptStatisticsPtrType)(v)
}

func (*scriptStatisticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptStatistics)(nil)).Elem()
}

func (i *scriptStatisticsPtrType) ToScriptStatisticsPtrOutput() ScriptStatisticsPtrOutput {
	return i.ToScriptStatisticsPtrOutputWithContext(context.Background())
}

func (i *scriptStatisticsPtrType) ToScriptStatisticsPtrOutputWithContext(ctx context.Context) ScriptStatisticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptStatisticsPtrOutput)
}

type ScriptStatisticsOutput struct{ *pulumi.OutputState }

func (ScriptStatisticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptStatistics)(nil)).Elem()
}

func (o ScriptStatisticsOutput) ToScriptStatisticsOutput() ScriptStatisticsOutput {
	return o
}

func (o ScriptStatisticsOutput) ToScriptStatisticsOutputWithContext(ctx context.Context) ScriptStatisticsOutput {
	return o
}

func (o ScriptStatisticsOutput) ToScriptStatisticsPtrOutput() ScriptStatisticsPtrOutput {
	return o.ToScriptStatisticsPtrOutputWithContext(context.Background())
}

func (o ScriptStatisticsOutput) ToScriptStatisticsPtrOutputWithContext(ctx context.Context) ScriptStatisticsPtrOutput {
	return o.ApplyT(func(v ScriptStatistics) *ScriptStatistics {
		return &v
	}).(ScriptStatisticsPtrOutput)
}

// [Output-only] Whether this child job was a statement or expression.
func (o ScriptStatisticsOutput) EvaluationKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptStatistics) *string { return v.EvaluationKind }).(pulumi.StringPtrOutput)
}

// Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
func (o ScriptStatisticsOutput) StackFrames() ScriptStackFrameArrayOutput {
	return o.ApplyT(func(v ScriptStatistics) []ScriptStackFrame { return v.StackFrames }).(ScriptStackFrameArrayOutput)
}

type ScriptStatisticsPtrOutput struct{ *pulumi.OutputState }

func (ScriptStatisticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptStatistics)(nil)).Elem()
}

func (o ScriptStatisticsPtrOutput) ToScriptStatisticsPtrOutput() ScriptStatisticsPtrOutput {
	return o
}

func (o ScriptStatisticsPtrOutput) ToScriptStatisticsPtrOutputWithContext(ctx context.Context) ScriptStatisticsPtrOutput {
	return o
}

func (o ScriptStatisticsPtrOutput) Elem() ScriptStatisticsOutput {
	return o.ApplyT(func(v *ScriptStatistics) ScriptStatistics { return *v }).(ScriptStatisticsOutput)
}

// [Output-only] Whether this child job was a statement or expression.
func (o ScriptStatisticsPtrOutput) EvaluationKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptStatistics) *string {
		if v == nil {
			return nil
		}
		return v.EvaluationKind
	}).(pulumi.StringPtrOutput)
}

// Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
func (o ScriptStatisticsPtrOutput) StackFrames() ScriptStackFrameArrayOutput {
	return o.ApplyT(func(v *ScriptStatistics) []ScriptStackFrame {
		if v == nil {
			return nil
		}
		return v.StackFrames
	}).(ScriptStackFrameArrayOutput)
}

type SessionInfo struct {
	// [Output-only] // [Preview] Id of the session.
	SessionId *string `pulumi:"sessionId"`
}

// SessionInfoInput is an input type that accepts SessionInfoArgs and SessionInfoOutput values.
// You can construct a concrete instance of `SessionInfoInput` via:
//
//          SessionInfoArgs{...}
type SessionInfoInput interface {
	pulumi.Input

	ToSessionInfoOutput() SessionInfoOutput
	ToSessionInfoOutputWithContext(context.Context) SessionInfoOutput
}

type SessionInfoArgs struct {
	// [Output-only] // [Preview] Id of the session.
	SessionId pulumi.StringPtrInput `pulumi:"sessionId"`
}

func (SessionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionInfo)(nil)).Elem()
}

func (i SessionInfoArgs) ToSessionInfoOutput() SessionInfoOutput {
	return i.ToSessionInfoOutputWithContext(context.Background())
}

func (i SessionInfoArgs) ToSessionInfoOutputWithContext(ctx context.Context) SessionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionInfoOutput)
}

func (i SessionInfoArgs) ToSessionInfoPtrOutput() SessionInfoPtrOutput {
	return i.ToSessionInfoPtrOutputWithContext(context.Background())
}

func (i SessionInfoArgs) ToSessionInfoPtrOutputWithContext(ctx context.Context) SessionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionInfoOutput).ToSessionInfoPtrOutputWithContext(ctx)
}

// SessionInfoPtrInput is an input type that accepts SessionInfoArgs, SessionInfoPtr and SessionInfoPtrOutput values.
// You can construct a concrete instance of `SessionInfoPtrInput` via:
//
//          SessionInfoArgs{...}
//
//  or:
//
//          nil
type SessionInfoPtrInput interface {
	pulumi.Input

	ToSessionInfoPtrOutput() SessionInfoPtrOutput
	ToSessionInfoPtrOutputWithContext(context.Context) SessionInfoPtrOutput
}

type sessionInfoPtrType SessionInfoArgs

func SessionInfoPtr(v *SessionInfoArgs) SessionInfoPtrInput {
	return (*sessionInfoPtrType)(v)
}

func (*sessionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionInfo)(nil)).Elem()
}

func (i *sessionInfoPtrType) ToSessionInfoPtrOutput() SessionInfoPtrOutput {
	return i.ToSessionInfoPtrOutputWithContext(context.Background())
}

func (i *sessionInfoPtrType) ToSessionInfoPtrOutputWithContext(ctx context.Context) SessionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionInfoPtrOutput)
}

type SessionInfoOutput struct{ *pulumi.OutputState }

func (SessionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionInfo)(nil)).Elem()
}

func (o SessionInfoOutput) ToSessionInfoOutput() SessionInfoOutput {
	return o
}

func (o SessionInfoOutput) ToSessionInfoOutputWithContext(ctx context.Context) SessionInfoOutput {
	return o
}

func (o SessionInfoOutput) ToSessionInfoPtrOutput() SessionInfoPtrOutput {
	return o.ToSessionInfoPtrOutputWithContext(context.Background())
}

func (o SessionInfoOutput) ToSessionInfoPtrOutputWithContext(ctx context.Context) SessionInfoPtrOutput {
	return o.ApplyT(func(v SessionInfo) *SessionInfo {
		return &v
	}).(SessionInfoPtrOutput)
}

// [Output-only] // [Preview] Id of the session.
func (o SessionInfoOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SessionInfo) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

type SessionInfoPtrOutput struct{ *pulumi.OutputState }

func (SessionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SessionInfo)(nil)).Elem()
}

func (o SessionInfoPtrOutput) ToSessionInfoPtrOutput() SessionInfoPtrOutput {
	return o
}

func (o SessionInfoPtrOutput) ToSessionInfoPtrOutputWithContext(ctx context.Context) SessionInfoPtrOutput {
	return o
}

func (o SessionInfoPtrOutput) Elem() SessionInfoOutput {
	return o.ApplyT(func(v *SessionInfo) SessionInfo { return *v }).(SessionInfoOutput)
}

// [Output-only] // [Preview] Id of the session.
func (o SessionInfoPtrOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SessionInfo) *string {
		if v == nil {
			return nil
		}
		return v.SessionId
	}).(pulumi.StringPtrOutput)
}

type SnapshotDefinition struct {
	// [Required] Reference describing the ID of the table that is snapshotted.
	BaseTableReference *TableReference `pulumi:"baseTableReference"`
	// [Required] The time at which the base table was snapshot.
	SnapshotTime *string `pulumi:"snapshotTime"`
}

// SnapshotDefinitionInput is an input type that accepts SnapshotDefinitionArgs and SnapshotDefinitionOutput values.
// You can construct a concrete instance of `SnapshotDefinitionInput` via:
//
//          SnapshotDefinitionArgs{...}
type SnapshotDefinitionInput interface {
	pulumi.Input

	ToSnapshotDefinitionOutput() SnapshotDefinitionOutput
	ToSnapshotDefinitionOutputWithContext(context.Context) SnapshotDefinitionOutput
}

type SnapshotDefinitionArgs struct {
	// [Required] Reference describing the ID of the table that is snapshotted.
	BaseTableReference TableReferencePtrInput `pulumi:"baseTableReference"`
	// [Required] The time at which the base table was snapshot.
	SnapshotTime pulumi.StringPtrInput `pulumi:"snapshotTime"`
}

func (SnapshotDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotDefinition)(nil)).Elem()
}

func (i SnapshotDefinitionArgs) ToSnapshotDefinitionOutput() SnapshotDefinitionOutput {
	return i.ToSnapshotDefinitionOutputWithContext(context.Background())
}

func (i SnapshotDefinitionArgs) ToSnapshotDefinitionOutputWithContext(ctx context.Context) SnapshotDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotDefinitionOutput)
}

func (i SnapshotDefinitionArgs) ToSnapshotDefinitionPtrOutput() SnapshotDefinitionPtrOutput {
	return i.ToSnapshotDefinitionPtrOutputWithContext(context.Background())
}

func (i SnapshotDefinitionArgs) ToSnapshotDefinitionPtrOutputWithContext(ctx context.Context) SnapshotDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotDefinitionOutput).ToSnapshotDefinitionPtrOutputWithContext(ctx)
}

// SnapshotDefinitionPtrInput is an input type that accepts SnapshotDefinitionArgs, SnapshotDefinitionPtr and SnapshotDefinitionPtrOutput values.
// You can construct a concrete instance of `SnapshotDefinitionPtrInput` via:
//
//          SnapshotDefinitionArgs{...}
//
//  or:
//
//          nil
type SnapshotDefinitionPtrInput interface {
	pulumi.Input

	ToSnapshotDefinitionPtrOutput() SnapshotDefinitionPtrOutput
	ToSnapshotDefinitionPtrOutputWithContext(context.Context) SnapshotDefinitionPtrOutput
}

type snapshotDefinitionPtrType SnapshotDefinitionArgs

func SnapshotDefinitionPtr(v *SnapshotDefinitionArgs) SnapshotDefinitionPtrInput {
	return (*snapshotDefinitionPtrType)(v)
}

func (*snapshotDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotDefinition)(nil)).Elem()
}

func (i *snapshotDefinitionPtrType) ToSnapshotDefinitionPtrOutput() SnapshotDefinitionPtrOutput {
	return i.ToSnapshotDefinitionPtrOutputWithContext(context.Background())
}

func (i *snapshotDefinitionPtrType) ToSnapshotDefinitionPtrOutputWithContext(ctx context.Context) SnapshotDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotDefinitionPtrOutput)
}

type SnapshotDefinitionOutput struct{ *pulumi.OutputState }

func (SnapshotDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotDefinition)(nil)).Elem()
}

func (o SnapshotDefinitionOutput) ToSnapshotDefinitionOutput() SnapshotDefinitionOutput {
	return o
}

func (o SnapshotDefinitionOutput) ToSnapshotDefinitionOutputWithContext(ctx context.Context) SnapshotDefinitionOutput {
	return o
}

func (o SnapshotDefinitionOutput) ToSnapshotDefinitionPtrOutput() SnapshotDefinitionPtrOutput {
	return o.ToSnapshotDefinitionPtrOutputWithContext(context.Background())
}

func (o SnapshotDefinitionOutput) ToSnapshotDefinitionPtrOutputWithContext(ctx context.Context) SnapshotDefinitionPtrOutput {
	return o.ApplyT(func(v SnapshotDefinition) *SnapshotDefinition {
		return &v
	}).(SnapshotDefinitionPtrOutput)
}

// [Required] Reference describing the ID of the table that is snapshotted.
func (o SnapshotDefinitionOutput) BaseTableReference() TableReferencePtrOutput {
	return o.ApplyT(func(v SnapshotDefinition) *TableReference { return v.BaseTableReference }).(TableReferencePtrOutput)
}

// [Required] The time at which the base table was snapshot.
func (o SnapshotDefinitionOutput) SnapshotTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotDefinition) *string { return v.SnapshotTime }).(pulumi.StringPtrOutput)
}

type SnapshotDefinitionPtrOutput struct{ *pulumi.OutputState }

func (SnapshotDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotDefinition)(nil)).Elem()
}

func (o SnapshotDefinitionPtrOutput) ToSnapshotDefinitionPtrOutput() SnapshotDefinitionPtrOutput {
	return o
}

func (o SnapshotDefinitionPtrOutput) ToSnapshotDefinitionPtrOutputWithContext(ctx context.Context) SnapshotDefinitionPtrOutput {
	return o
}

func (o SnapshotDefinitionPtrOutput) Elem() SnapshotDefinitionOutput {
	return o.ApplyT(func(v *SnapshotDefinition) SnapshotDefinition { return *v }).(SnapshotDefinitionOutput)
}

// [Required] Reference describing the ID of the table that is snapshotted.
func (o SnapshotDefinitionPtrOutput) BaseTableReference() TableReferencePtrOutput {
	return o.ApplyT(func(v *SnapshotDefinition) *TableReference {
		if v == nil {
			return nil
		}
		return v.BaseTableReference
	}).(TableReferencePtrOutput)
}

// [Required] The time at which the base table was snapshot.
func (o SnapshotDefinitionPtrOutput) SnapshotTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotDefinition) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotTime
	}).(pulumi.StringPtrOutput)
}

// The type of a variable, e.g., a function argument. Examples: INT64: {type_kind="INT64"} ARRAY: {type_kind="ARRAY", array_element_type="STRING"} STRUCT>: {type_kind="STRUCT", struct_type={fields=[ {name="x", type={type_kind="STRING"}}, {name="y", type={type_kind="ARRAY", array_element_type="DATE"}} ]}}
type StandardSqlDataType struct {
	// The type of the array's elements, if type_kind = "ARRAY".
	ArrayElementType *StandardSqlDataType `pulumi:"arrayElementType"`
	// The fields of this struct, in order, if type_kind = "STRUCT".
	StructType *StandardSqlStructType `pulumi:"structType"`
	// Required. The top level type of this field. Can be any standard SQL data type (e.g., "INT64", "DATE", "ARRAY").
	TypeKind *string `pulumi:"typeKind"`
}

// StandardSqlDataTypeInput is an input type that accepts StandardSqlDataTypeArgs and StandardSqlDataTypeOutput values.
// You can construct a concrete instance of `StandardSqlDataTypeInput` via:
//
//          StandardSqlDataTypeArgs{...}
type StandardSqlDataTypeInput interface {
	pulumi.Input

	ToStandardSqlDataTypeOutput() StandardSqlDataTypeOutput
	ToStandardSqlDataTypeOutputWithContext(context.Context) StandardSqlDataTypeOutput
}

// The type of a variable, e.g., a function argument. Examples: INT64: {type_kind="INT64"} ARRAY: {type_kind="ARRAY", array_element_type="STRING"} STRUCT>: {type_kind="STRUCT", struct_type={fields=[ {name="x", type={type_kind="STRING"}}, {name="y", type={type_kind="ARRAY", array_element_type="DATE"}} ]}}
type StandardSqlDataTypeArgs struct {
	// The type of the array's elements, if type_kind = "ARRAY".
	ArrayElementType StandardSqlDataTypePtrInput `pulumi:"arrayElementType"`
	// The fields of this struct, in order, if type_kind = "STRUCT".
	StructType StandardSqlStructTypePtrInput `pulumi:"structType"`
	// Required. The top level type of this field. Can be any standard SQL data type (e.g., "INT64", "DATE", "ARRAY").
	TypeKind pulumi.StringPtrInput `pulumi:"typeKind"`
}

func (StandardSqlDataTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlDataType)(nil)).Elem()
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypeOutput() StandardSqlDataTypeOutput {
	return i.ToStandardSqlDataTypeOutputWithContext(context.Background())
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypeOutputWithContext(ctx context.Context) StandardSqlDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlDataTypeOutput)
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return i.ToStandardSqlDataTypePtrOutputWithContext(context.Background())
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlDataTypeOutput).ToStandardSqlDataTypePtrOutputWithContext(ctx)
}

// StandardSqlDataTypePtrInput is an input type that accepts StandardSqlDataTypeArgs, StandardSqlDataTypePtr and StandardSqlDataTypePtrOutput values.
// You can construct a concrete instance of `StandardSqlDataTypePtrInput` via:
//
//          StandardSqlDataTypeArgs{...}
//
//  or:
//
//          nil
type StandardSqlDataTypePtrInput interface {
	pulumi.Input

	ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput
	ToStandardSqlDataTypePtrOutputWithContext(context.Context) StandardSqlDataTypePtrOutput
}

type standardSqlDataTypePtrType StandardSqlDataTypeArgs

func StandardSqlDataTypePtr(v *StandardSqlDataTypeArgs) StandardSqlDataTypePtrInput {
	return (*standardSqlDataTypePtrType)(v)
}

func (*standardSqlDataTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlDataType)(nil)).Elem()
}

func (i *standardSqlDataTypePtrType) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return i.ToStandardSqlDataTypePtrOutputWithContext(context.Background())
}

func (i *standardSqlDataTypePtrType) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlDataTypePtrOutput)
}

// The type of a variable, e.g., a function argument. Examples: INT64: {type_kind="INT64"} ARRAY: {type_kind="ARRAY", array_element_type="STRING"} STRUCT>: {type_kind="STRUCT", struct_type={fields=[ {name="x", type={type_kind="STRING"}}, {name="y", type={type_kind="ARRAY", array_element_type="DATE"}} ]}}
type StandardSqlDataTypeOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlDataType)(nil)).Elem()
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypeOutput() StandardSqlDataTypeOutput {
	return o
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypeOutputWithContext(ctx context.Context) StandardSqlDataTypeOutput {
	return o
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return o.ToStandardSqlDataTypePtrOutputWithContext(context.Background())
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v StandardSqlDataType) *StandardSqlDataType {
		return &v
	}).(StandardSqlDataTypePtrOutput)
}

// The type of the array's elements, if type_kind = "ARRAY".
func (o StandardSqlDataTypeOutput) ArrayElementType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v StandardSqlDataType) *StandardSqlDataType { return v.ArrayElementType }).(StandardSqlDataTypePtrOutput)
}

// The fields of this struct, in order, if type_kind = "STRUCT".
func (o StandardSqlDataTypeOutput) StructType() StandardSqlStructTypePtrOutput {
	return o.ApplyT(func(v StandardSqlDataType) *StandardSqlStructType { return v.StructType }).(StandardSqlStructTypePtrOutput)
}

// Required. The top level type of this field. Can be any standard SQL data type (e.g., "INT64", "DATE", "ARRAY").
func (o StandardSqlDataTypeOutput) TypeKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StandardSqlDataType) *string { return v.TypeKind }).(pulumi.StringPtrOutput)
}

type StandardSqlDataTypePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlDataType)(nil)).Elem()
}

func (o StandardSqlDataTypePtrOutput) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return o
}

func (o StandardSqlDataTypePtrOutput) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return o
}

func (o StandardSqlDataTypePtrOutput) Elem() StandardSqlDataTypeOutput {
	return o.ApplyT(func(v *StandardSqlDataType) StandardSqlDataType { return *v }).(StandardSqlDataTypeOutput)
}

// The type of the array's elements, if type_kind = "ARRAY".
func (o StandardSqlDataTypePtrOutput) ArrayElementType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *StandardSqlDataType {
		if v == nil {
			return nil
		}
		return v.ArrayElementType
	}).(StandardSqlDataTypePtrOutput)
}

// The fields of this struct, in order, if type_kind = "STRUCT".
func (o StandardSqlDataTypePtrOutput) StructType() StandardSqlStructTypePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *StandardSqlStructType {
		if v == nil {
			return nil
		}
		return v.StructType
	}).(StandardSqlStructTypePtrOutput)
}

// Required. The top level type of this field. Can be any standard SQL data type (e.g., "INT64", "DATE", "ARRAY").
func (o StandardSqlDataTypePtrOutput) TypeKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *string {
		if v == nil {
			return nil
		}
		return v.TypeKind
	}).(pulumi.StringPtrOutput)
}

// A field or a column.
type StandardSqlField struct {
	// Optional. The name of this field. Can be absent for struct fields.
	Name *string `pulumi:"name"`
	// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
	Type *StandardSqlDataType `pulumi:"type"`
}

// StandardSqlFieldInput is an input type that accepts StandardSqlFieldArgs and StandardSqlFieldOutput values.
// You can construct a concrete instance of `StandardSqlFieldInput` via:
//
//          StandardSqlFieldArgs{...}
type StandardSqlFieldInput interface {
	pulumi.Input

	ToStandardSqlFieldOutput() StandardSqlFieldOutput
	ToStandardSqlFieldOutputWithContext(context.Context) StandardSqlFieldOutput
}

// A field or a column.
type StandardSqlFieldArgs struct {
	// Optional. The name of this field. Can be absent for struct fields.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
	Type StandardSqlDataTypePtrInput `pulumi:"type"`
}

func (StandardSqlFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlField)(nil)).Elem()
}

func (i StandardSqlFieldArgs) ToStandardSqlFieldOutput() StandardSqlFieldOutput {
	return i.ToStandardSqlFieldOutputWithContext(context.Background())
}

func (i StandardSqlFieldArgs) ToStandardSqlFieldOutputWithContext(ctx context.Context) StandardSqlFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlFieldOutput)
}

// StandardSqlFieldArrayInput is an input type that accepts StandardSqlFieldArray and StandardSqlFieldArrayOutput values.
// You can construct a concrete instance of `StandardSqlFieldArrayInput` via:
//
//          StandardSqlFieldArray{ StandardSqlFieldArgs{...} }
type StandardSqlFieldArrayInput interface {
	pulumi.Input

	ToStandardSqlFieldArrayOutput() StandardSqlFieldArrayOutput
	ToStandardSqlFieldArrayOutputWithContext(context.Context) StandardSqlFieldArrayOutput
}

type StandardSqlFieldArray []StandardSqlFieldInput

func (StandardSqlFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardSqlField)(nil)).Elem()
}

func (i StandardSqlFieldArray) ToStandardSqlFieldArrayOutput() StandardSqlFieldArrayOutput {
	return i.ToStandardSqlFieldArrayOutputWithContext(context.Background())
}

func (i StandardSqlFieldArray) ToStandardSqlFieldArrayOutputWithContext(ctx context.Context) StandardSqlFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlFieldArrayOutput)
}

// A field or a column.
type StandardSqlFieldOutput struct{ *pulumi.OutputState }

func (StandardSqlFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlField)(nil)).Elem()
}

func (o StandardSqlFieldOutput) ToStandardSqlFieldOutput() StandardSqlFieldOutput {
	return o
}

func (o StandardSqlFieldOutput) ToStandardSqlFieldOutputWithContext(ctx context.Context) StandardSqlFieldOutput {
	return o
}

// Optional. The name of this field. Can be absent for struct fields.
func (o StandardSqlFieldOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StandardSqlField) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
func (o StandardSqlFieldOutput) Type() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v StandardSqlField) *StandardSqlDataType { return v.Type }).(StandardSqlDataTypePtrOutput)
}

type StandardSqlFieldArrayOutput struct{ *pulumi.OutputState }

func (StandardSqlFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardSqlField)(nil)).Elem()
}

func (o StandardSqlFieldArrayOutput) ToStandardSqlFieldArrayOutput() StandardSqlFieldArrayOutput {
	return o
}

func (o StandardSqlFieldArrayOutput) ToStandardSqlFieldArrayOutputWithContext(ctx context.Context) StandardSqlFieldArrayOutput {
	return o
}

func (o StandardSqlFieldArrayOutput) Index(i pulumi.IntInput) StandardSqlFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StandardSqlField {
		return vs[0].([]StandardSqlField)[vs[1].(int)]
	}).(StandardSqlFieldOutput)
}

type StandardSqlStructType struct {
	Fields []StandardSqlField `pulumi:"fields"`
}

// StandardSqlStructTypeInput is an input type that accepts StandardSqlStructTypeArgs and StandardSqlStructTypeOutput values.
// You can construct a concrete instance of `StandardSqlStructTypeInput` via:
//
//          StandardSqlStructTypeArgs{...}
type StandardSqlStructTypeInput interface {
	pulumi.Input

	ToStandardSqlStructTypeOutput() StandardSqlStructTypeOutput
	ToStandardSqlStructTypeOutputWithContext(context.Context) StandardSqlStructTypeOutput
}

type StandardSqlStructTypeArgs struct {
	Fields StandardSqlFieldArrayInput `pulumi:"fields"`
}

func (StandardSqlStructTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlStructType)(nil)).Elem()
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypeOutput() StandardSqlStructTypeOutput {
	return i.ToStandardSqlStructTypeOutputWithContext(context.Background())
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypeOutputWithContext(ctx context.Context) StandardSqlStructTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlStructTypeOutput)
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return i.ToStandardSqlStructTypePtrOutputWithContext(context.Background())
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlStructTypeOutput).ToStandardSqlStructTypePtrOutputWithContext(ctx)
}

// StandardSqlStructTypePtrInput is an input type that accepts StandardSqlStructTypeArgs, StandardSqlStructTypePtr and StandardSqlStructTypePtrOutput values.
// You can construct a concrete instance of `StandardSqlStructTypePtrInput` via:
//
//          StandardSqlStructTypeArgs{...}
//
//  or:
//
//          nil
type StandardSqlStructTypePtrInput interface {
	pulumi.Input

	ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput
	ToStandardSqlStructTypePtrOutputWithContext(context.Context) StandardSqlStructTypePtrOutput
}

type standardSqlStructTypePtrType StandardSqlStructTypeArgs

func StandardSqlStructTypePtr(v *StandardSqlStructTypeArgs) StandardSqlStructTypePtrInput {
	return (*standardSqlStructTypePtrType)(v)
}

func (*standardSqlStructTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlStructType)(nil)).Elem()
}

func (i *standardSqlStructTypePtrType) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return i.ToStandardSqlStructTypePtrOutputWithContext(context.Background())
}

func (i *standardSqlStructTypePtrType) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlStructTypePtrOutput)
}

type StandardSqlStructTypeOutput struct{ *pulumi.OutputState }

func (StandardSqlStructTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlStructType)(nil)).Elem()
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypeOutput() StandardSqlStructTypeOutput {
	return o
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypeOutputWithContext(ctx context.Context) StandardSqlStructTypeOutput {
	return o
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return o.ToStandardSqlStructTypePtrOutputWithContext(context.Background())
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return o.ApplyT(func(v StandardSqlStructType) *StandardSqlStructType {
		return &v
	}).(StandardSqlStructTypePtrOutput)
}
func (o StandardSqlStructTypeOutput) Fields() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v StandardSqlStructType) []StandardSqlField { return v.Fields }).(StandardSqlFieldArrayOutput)
}

type StandardSqlStructTypePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlStructTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlStructType)(nil)).Elem()
}

func (o StandardSqlStructTypePtrOutput) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return o
}

func (o StandardSqlStructTypePtrOutput) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return o
}

func (o StandardSqlStructTypePtrOutput) Elem() StandardSqlStructTypeOutput {
	return o.ApplyT(func(v *StandardSqlStructType) StandardSqlStructType { return *v }).(StandardSqlStructTypeOutput)
}

func (o StandardSqlStructTypePtrOutput) Fields() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v *StandardSqlStructType) []StandardSqlField {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(StandardSqlFieldArrayOutput)
}

// A table type
type StandardSqlTableType struct {
	// The columns in this table type
	Columns []StandardSqlField `pulumi:"columns"`
}

// StandardSqlTableTypeInput is an input type that accepts StandardSqlTableTypeArgs and StandardSqlTableTypeOutput values.
// You can construct a concrete instance of `StandardSqlTableTypeInput` via:
//
//          StandardSqlTableTypeArgs{...}
type StandardSqlTableTypeInput interface {
	pulumi.Input

	ToStandardSqlTableTypeOutput() StandardSqlTableTypeOutput
	ToStandardSqlTableTypeOutputWithContext(context.Context) StandardSqlTableTypeOutput
}

// A table type
type StandardSqlTableTypeArgs struct {
	// The columns in this table type
	Columns StandardSqlFieldArrayInput `pulumi:"columns"`
}

func (StandardSqlTableTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlTableType)(nil)).Elem()
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypeOutput() StandardSqlTableTypeOutput {
	return i.ToStandardSqlTableTypeOutputWithContext(context.Background())
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypeOutputWithContext(ctx context.Context) StandardSqlTableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlTableTypeOutput)
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return i.ToStandardSqlTableTypePtrOutputWithContext(context.Background())
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlTableTypeOutput).ToStandardSqlTableTypePtrOutputWithContext(ctx)
}

// StandardSqlTableTypePtrInput is an input type that accepts StandardSqlTableTypeArgs, StandardSqlTableTypePtr and StandardSqlTableTypePtrOutput values.
// You can construct a concrete instance of `StandardSqlTableTypePtrInput` via:
//
//          StandardSqlTableTypeArgs{...}
//
//  or:
//
//          nil
type StandardSqlTableTypePtrInput interface {
	pulumi.Input

	ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput
	ToStandardSqlTableTypePtrOutputWithContext(context.Context) StandardSqlTableTypePtrOutput
}

type standardSqlTableTypePtrType StandardSqlTableTypeArgs

func StandardSqlTableTypePtr(v *StandardSqlTableTypeArgs) StandardSqlTableTypePtrInput {
	return (*standardSqlTableTypePtrType)(v)
}

func (*standardSqlTableTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlTableType)(nil)).Elem()
}

func (i *standardSqlTableTypePtrType) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return i.ToStandardSqlTableTypePtrOutputWithContext(context.Background())
}

func (i *standardSqlTableTypePtrType) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlTableTypePtrOutput)
}

// A table type
type StandardSqlTableTypeOutput struct{ *pulumi.OutputState }

func (StandardSqlTableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlTableType)(nil)).Elem()
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypeOutput() StandardSqlTableTypeOutput {
	return o
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypeOutputWithContext(ctx context.Context) StandardSqlTableTypeOutput {
	return o
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return o.ToStandardSqlTableTypePtrOutputWithContext(context.Background())
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return o.ApplyT(func(v StandardSqlTableType) *StandardSqlTableType {
		return &v
	}).(StandardSqlTableTypePtrOutput)
}

// The columns in this table type
func (o StandardSqlTableTypeOutput) Columns() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v StandardSqlTableType) []StandardSqlField { return v.Columns }).(StandardSqlFieldArrayOutput)
}

type StandardSqlTableTypePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlTableTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlTableType)(nil)).Elem()
}

func (o StandardSqlTableTypePtrOutput) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return o
}

func (o StandardSqlTableTypePtrOutput) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return o
}

func (o StandardSqlTableTypePtrOutput) Elem() StandardSqlTableTypeOutput {
	return o.ApplyT(func(v *StandardSqlTableType) StandardSqlTableType { return *v }).(StandardSqlTableTypeOutput)
}

// The columns in this table type
func (o StandardSqlTableTypePtrOutput) Columns() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v *StandardSqlTableType) []StandardSqlField {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(StandardSqlFieldArrayOutput)
}

type Streamingbuffer struct {
	// [Output-only] A lower-bound estimate of the number of bytes currently in the streaming buffer.
	EstimatedBytes *string `pulumi:"estimatedBytes"`
	// [Output-only] A lower-bound estimate of the number of rows currently in the streaming buffer.
	EstimatedRows *string `pulumi:"estimatedRows"`
	// [Output-only] Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
	OldestEntryTime *string `pulumi:"oldestEntryTime"`
}

// StreamingbufferInput is an input type that accepts StreamingbufferArgs and StreamingbufferOutput values.
// You can construct a concrete instance of `StreamingbufferInput` via:
//
//          StreamingbufferArgs{...}
type StreamingbufferInput interface {
	pulumi.Input

	ToStreamingbufferOutput() StreamingbufferOutput
	ToStreamingbufferOutputWithContext(context.Context) StreamingbufferOutput
}

type StreamingbufferArgs struct {
	// [Output-only] A lower-bound estimate of the number of bytes currently in the streaming buffer.
	EstimatedBytes pulumi.StringPtrInput `pulumi:"estimatedBytes"`
	// [Output-only] A lower-bound estimate of the number of rows currently in the streaming buffer.
	EstimatedRows pulumi.StringPtrInput `pulumi:"estimatedRows"`
	// [Output-only] Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
	OldestEntryTime pulumi.StringPtrInput `pulumi:"oldestEntryTime"`
}

func (StreamingbufferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Streamingbuffer)(nil)).Elem()
}

func (i StreamingbufferArgs) ToStreamingbufferOutput() StreamingbufferOutput {
	return i.ToStreamingbufferOutputWithContext(context.Background())
}

func (i StreamingbufferArgs) ToStreamingbufferOutputWithContext(ctx context.Context) StreamingbufferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingbufferOutput)
}

func (i StreamingbufferArgs) ToStreamingbufferPtrOutput() StreamingbufferPtrOutput {
	return i.ToStreamingbufferPtrOutputWithContext(context.Background())
}

func (i StreamingbufferArgs) ToStreamingbufferPtrOutputWithContext(ctx context.Context) StreamingbufferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingbufferOutput).ToStreamingbufferPtrOutputWithContext(ctx)
}

// StreamingbufferPtrInput is an input type that accepts StreamingbufferArgs, StreamingbufferPtr and StreamingbufferPtrOutput values.
// You can construct a concrete instance of `StreamingbufferPtrInput` via:
//
//          StreamingbufferArgs{...}
//
//  or:
//
//          nil
type StreamingbufferPtrInput interface {
	pulumi.Input

	ToStreamingbufferPtrOutput() StreamingbufferPtrOutput
	ToStreamingbufferPtrOutputWithContext(context.Context) StreamingbufferPtrOutput
}

type streamingbufferPtrType StreamingbufferArgs

func StreamingbufferPtr(v *StreamingbufferArgs) StreamingbufferPtrInput {
	return (*streamingbufferPtrType)(v)
}

func (*streamingbufferPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Streamingbuffer)(nil)).Elem()
}

func (i *streamingbufferPtrType) ToStreamingbufferPtrOutput() StreamingbufferPtrOutput {
	return i.ToStreamingbufferPtrOutputWithContext(context.Background())
}

func (i *streamingbufferPtrType) ToStreamingbufferPtrOutputWithContext(ctx context.Context) StreamingbufferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingbufferPtrOutput)
}

type StreamingbufferOutput struct{ *pulumi.OutputState }

func (StreamingbufferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Streamingbuffer)(nil)).Elem()
}

func (o StreamingbufferOutput) ToStreamingbufferOutput() StreamingbufferOutput {
	return o
}

func (o StreamingbufferOutput) ToStreamingbufferOutputWithContext(ctx context.Context) StreamingbufferOutput {
	return o
}

func (o StreamingbufferOutput) ToStreamingbufferPtrOutput() StreamingbufferPtrOutput {
	return o.ToStreamingbufferPtrOutputWithContext(context.Background())
}

func (o StreamingbufferOutput) ToStreamingbufferPtrOutputWithContext(ctx context.Context) StreamingbufferPtrOutput {
	return o.ApplyT(func(v Streamingbuffer) *Streamingbuffer {
		return &v
	}).(StreamingbufferPtrOutput)
}

// [Output-only] A lower-bound estimate of the number of bytes currently in the streaming buffer.
func (o StreamingbufferOutput) EstimatedBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Streamingbuffer) *string { return v.EstimatedBytes }).(pulumi.StringPtrOutput)
}

// [Output-only] A lower-bound estimate of the number of rows currently in the streaming buffer.
func (o StreamingbufferOutput) EstimatedRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Streamingbuffer) *string { return v.EstimatedRows }).(pulumi.StringPtrOutput)
}

// [Output-only] Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
func (o StreamingbufferOutput) OldestEntryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Streamingbuffer) *string { return v.OldestEntryTime }).(pulumi.StringPtrOutput)
}

type StreamingbufferPtrOutput struct{ *pulumi.OutputState }

func (StreamingbufferPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Streamingbuffer)(nil)).Elem()
}

func (o StreamingbufferPtrOutput) ToStreamingbufferPtrOutput() StreamingbufferPtrOutput {
	return o
}

func (o StreamingbufferPtrOutput) ToStreamingbufferPtrOutputWithContext(ctx context.Context) StreamingbufferPtrOutput {
	return o
}

func (o StreamingbufferPtrOutput) Elem() StreamingbufferOutput {
	return o.ApplyT(func(v *Streamingbuffer) Streamingbuffer { return *v }).(StreamingbufferOutput)
}

// [Output-only] A lower-bound estimate of the number of bytes currently in the streaming buffer.
func (o StreamingbufferPtrOutput) EstimatedBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Streamingbuffer) *string {
		if v == nil {
			return nil
		}
		return v.EstimatedBytes
	}).(pulumi.StringPtrOutput)
}

// [Output-only] A lower-bound estimate of the number of rows currently in the streaming buffer.
func (o StreamingbufferPtrOutput) EstimatedRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Streamingbuffer) *string {
		if v == nil {
			return nil
		}
		return v.EstimatedRows
	}).(pulumi.StringPtrOutput)
}

// [Output-only] Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
func (o StreamingbufferPtrOutput) OldestEntryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Streamingbuffer) *string {
		if v == nil {
			return nil
		}
		return v.OldestEntryTime
	}).(pulumi.StringPtrOutput)
}

type TableFieldSchema struct {
	// [Optional] The categories attached to this field, used for field-level access control.
	Categories map[string]string `pulumi:"categories"`
	// [Optional] The field description. The maximum length is 1,024 characters.
	Description *string `pulumi:"description"`
	// [Optional] Describes the nested schema fields if the type property is set to RECORD.
	Fields []TableFieldSchema `pulumi:"fields"`
	// [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
	MaxLength *string `pulumi:"maxLength"`
	// [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
	Mode *string `pulumi:"mode"`
	// [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 128 characters.
	Name       *string           `pulumi:"name"`
	PolicyTags map[string]string `pulumi:"policyTags"`
	// [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
	Precision *string `pulumi:"precision"`
	// [Optional] See documentation for precision.
	Scale *string `pulumi:"scale"`
	// [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
	Type *string `pulumi:"type"`
}

// TableFieldSchemaInput is an input type that accepts TableFieldSchemaArgs and TableFieldSchemaOutput values.
// You can construct a concrete instance of `TableFieldSchemaInput` via:
//
//          TableFieldSchemaArgs{...}
type TableFieldSchemaInput interface {
	pulumi.Input

	ToTableFieldSchemaOutput() TableFieldSchemaOutput
	ToTableFieldSchemaOutputWithContext(context.Context) TableFieldSchemaOutput
}

type TableFieldSchemaArgs struct {
	// [Optional] The categories attached to this field, used for field-level access control.
	Categories pulumi.StringMapInput `pulumi:"categories"`
	// [Optional] The field description. The maximum length is 1,024 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// [Optional] Describes the nested schema fields if the type property is set to RECORD.
	Fields TableFieldSchemaArrayInput `pulumi:"fields"`
	// [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
	MaxLength pulumi.StringPtrInput `pulumi:"maxLength"`
	// [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 128 characters.
	Name       pulumi.StringPtrInput `pulumi:"name"`
	PolicyTags pulumi.StringMapInput `pulumi:"policyTags"`
	// [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
	Precision pulumi.StringPtrInput `pulumi:"precision"`
	// [Optional] See documentation for precision.
	Scale pulumi.StringPtrInput `pulumi:"scale"`
	// [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TableFieldSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchema)(nil)).Elem()
}

func (i TableFieldSchemaArgs) ToTableFieldSchemaOutput() TableFieldSchemaOutput {
	return i.ToTableFieldSchemaOutputWithContext(context.Background())
}

func (i TableFieldSchemaArgs) ToTableFieldSchemaOutputWithContext(ctx context.Context) TableFieldSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaOutput)
}

// TableFieldSchemaArrayInput is an input type that accepts TableFieldSchemaArray and TableFieldSchemaArrayOutput values.
// You can construct a concrete instance of `TableFieldSchemaArrayInput` via:
//
//          TableFieldSchemaArray{ TableFieldSchemaArgs{...} }
type TableFieldSchemaArrayInput interface {
	pulumi.Input

	ToTableFieldSchemaArrayOutput() TableFieldSchemaArrayOutput
	ToTableFieldSchemaArrayOutputWithContext(context.Context) TableFieldSchemaArrayOutput
}

type TableFieldSchemaArray []TableFieldSchemaInput

func (TableFieldSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableFieldSchema)(nil)).Elem()
}

func (i TableFieldSchemaArray) ToTableFieldSchemaArrayOutput() TableFieldSchemaArrayOutput {
	return i.ToTableFieldSchemaArrayOutputWithContext(context.Background())
}

func (i TableFieldSchemaArray) ToTableFieldSchemaArrayOutputWithContext(ctx context.Context) TableFieldSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaArrayOutput)
}

type TableFieldSchemaOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchema)(nil)).Elem()
}

func (o TableFieldSchemaOutput) ToTableFieldSchemaOutput() TableFieldSchemaOutput {
	return o
}

func (o TableFieldSchemaOutput) ToTableFieldSchemaOutputWithContext(ctx context.Context) TableFieldSchemaOutput {
	return o
}

// [Optional] The categories attached to this field, used for field-level access control.
func (o TableFieldSchemaOutput) Categories() pulumi.StringMapOutput {
	return o.ApplyT(func(v TableFieldSchema) map[string]string { return v.Categories }).(pulumi.StringMapOutput)
}

// [Optional] The field description. The maximum length is 1,024 characters.
func (o TableFieldSchemaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// [Optional] Describes the nested schema fields if the type property is set to RECORD.
func (o TableFieldSchemaOutput) Fields() TableFieldSchemaArrayOutput {
	return o.ApplyT(func(v TableFieldSchema) []TableFieldSchema { return v.Fields }).(TableFieldSchemaArrayOutput)
}

// [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
func (o TableFieldSchemaOutput) MaxLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.MaxLength }).(pulumi.StringPtrOutput)
}

// [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
func (o TableFieldSchemaOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 128 characters.
func (o TableFieldSchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TableFieldSchemaOutput) PolicyTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v TableFieldSchema) map[string]string { return v.PolicyTags }).(pulumi.StringMapOutput)
}

// [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
func (o TableFieldSchemaOutput) Precision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Precision }).(pulumi.StringPtrOutput)
}

// [Optional] See documentation for precision.
func (o TableFieldSchemaOutput) Scale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Scale }).(pulumi.StringPtrOutput)
}

// [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
func (o TableFieldSchemaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TableFieldSchemaArrayOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableFieldSchema)(nil)).Elem()
}

func (o TableFieldSchemaArrayOutput) ToTableFieldSchemaArrayOutput() TableFieldSchemaArrayOutput {
	return o
}

func (o TableFieldSchemaArrayOutput) ToTableFieldSchemaArrayOutputWithContext(ctx context.Context) TableFieldSchemaArrayOutput {
	return o
}

func (o TableFieldSchemaArrayOutput) Index(i pulumi.IntInput) TableFieldSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableFieldSchema {
		return vs[0].([]TableFieldSchema)[vs[1].(int)]
	}).(TableFieldSchemaOutput)
}

type TableReference struct {
	// [Required] The ID of the dataset containing this table.
	DatasetId *string `pulumi:"datasetId"`
	// [Required] The ID of the project containing this table.
	ProjectId *string `pulumi:"projectId"`
	// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	TableId *string `pulumi:"tableId"`
}

// TableReferenceInput is an input type that accepts TableReferenceArgs and TableReferenceOutput values.
// You can construct a concrete instance of `TableReferenceInput` via:
//
//          TableReferenceArgs{...}
type TableReferenceInput interface {
	pulumi.Input

	ToTableReferenceOutput() TableReferenceOutput
	ToTableReferenceOutputWithContext(context.Context) TableReferenceOutput
}

type TableReferenceArgs struct {
	// [Required] The ID of the dataset containing this table.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// [Required] The ID of the project containing this table.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	TableId pulumi.StringPtrInput `pulumi:"tableId"`
}

func (TableReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReference)(nil)).Elem()
}

func (i TableReferenceArgs) ToTableReferenceOutput() TableReferenceOutput {
	return i.ToTableReferenceOutputWithContext(context.Background())
}

func (i TableReferenceArgs) ToTableReferenceOutputWithContext(ctx context.Context) TableReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferenceOutput)
}

func (i TableReferenceArgs) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return i.ToTableReferencePtrOutputWithContext(context.Background())
}

func (i TableReferenceArgs) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferenceOutput).ToTableReferencePtrOutputWithContext(ctx)
}

// TableReferencePtrInput is an input type that accepts TableReferenceArgs, TableReferencePtr and TableReferencePtrOutput values.
// You can construct a concrete instance of `TableReferencePtrInput` via:
//
//          TableReferenceArgs{...}
//
//  or:
//
//          nil
type TableReferencePtrInput interface {
	pulumi.Input

	ToTableReferencePtrOutput() TableReferencePtrOutput
	ToTableReferencePtrOutputWithContext(context.Context) TableReferencePtrOutput
}

type tableReferencePtrType TableReferenceArgs

func TableReferencePtr(v *TableReferenceArgs) TableReferencePtrInput {
	return (*tableReferencePtrType)(v)
}

func (*tableReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableReference)(nil)).Elem()
}

func (i *tableReferencePtrType) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return i.ToTableReferencePtrOutputWithContext(context.Background())
}

func (i *tableReferencePtrType) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferencePtrOutput)
}

// TableReferenceArrayInput is an input type that accepts TableReferenceArray and TableReferenceArrayOutput values.
// You can construct a concrete instance of `TableReferenceArrayInput` via:
//
//          TableReferenceArray{ TableReferenceArgs{...} }
type TableReferenceArrayInput interface {
	pulumi.Input

	ToTableReferenceArrayOutput() TableReferenceArrayOutput
	ToTableReferenceArrayOutputWithContext(context.Context) TableReferenceArrayOutput
}

type TableReferenceArray []TableReferenceInput

func (TableReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReference)(nil)).Elem()
}

func (i TableReferenceArray) ToTableReferenceArrayOutput() TableReferenceArrayOutput {
	return i.ToTableReferenceArrayOutputWithContext(context.Background())
}

func (i TableReferenceArray) ToTableReferenceArrayOutputWithContext(ctx context.Context) TableReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferenceArrayOutput)
}

type TableReferenceOutput struct{ *pulumi.OutputState }

func (TableReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReference)(nil)).Elem()
}

func (o TableReferenceOutput) ToTableReferenceOutput() TableReferenceOutput {
	return o
}

func (o TableReferenceOutput) ToTableReferenceOutputWithContext(ctx context.Context) TableReferenceOutput {
	return o
}

func (o TableReferenceOutput) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return o.ToTableReferencePtrOutputWithContext(context.Background())
}

func (o TableReferenceOutput) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return o.ApplyT(func(v TableReference) *TableReference {
		return &v
	}).(TableReferencePtrOutput)
}

// [Required] The ID of the dataset containing this table.
func (o TableReferenceOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableReference) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this table.
func (o TableReferenceOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableReference) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o TableReferenceOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableReference) *string { return v.TableId }).(pulumi.StringPtrOutput)
}

type TableReferencePtrOutput struct{ *pulumi.OutputState }

func (TableReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableReference)(nil)).Elem()
}

func (o TableReferencePtrOutput) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return o
}

func (o TableReferencePtrOutput) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return o
}

func (o TableReferencePtrOutput) Elem() TableReferenceOutput {
	return o.ApplyT(func(v *TableReference) TableReference { return *v }).(TableReferenceOutput)
}

// [Required] The ID of the dataset containing this table.
func (o TableReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReference) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this table.
func (o TableReferencePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReference) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o TableReferencePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReference) *string {
		if v == nil {
			return nil
		}
		return v.TableId
	}).(pulumi.StringPtrOutput)
}

type TableReferenceArrayOutput struct{ *pulumi.OutputState }

func (TableReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReference)(nil)).Elem()
}

func (o TableReferenceArrayOutput) ToTableReferenceArrayOutput() TableReferenceArrayOutput {
	return o
}

func (o TableReferenceArrayOutput) ToTableReferenceArrayOutputWithContext(ctx context.Context) TableReferenceArrayOutput {
	return o
}

func (o TableReferenceArrayOutput) Index(i pulumi.IntInput) TableReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableReference {
		return vs[0].([]TableReference)[vs[1].(int)]
	}).(TableReferenceOutput)
}

type TableSchema struct {
	// Describes the fields in a table.
	Fields []TableFieldSchema `pulumi:"fields"`
}

// TableSchemaInput is an input type that accepts TableSchemaArgs and TableSchemaOutput values.
// You can construct a concrete instance of `TableSchemaInput` via:
//
//          TableSchemaArgs{...}
type TableSchemaInput interface {
	pulumi.Input

	ToTableSchemaOutput() TableSchemaOutput
	ToTableSchemaOutputWithContext(context.Context) TableSchemaOutput
}

type TableSchemaArgs struct {
	// Describes the fields in a table.
	Fields TableFieldSchemaArrayInput `pulumi:"fields"`
}

func (TableSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (i TableSchemaArgs) ToTableSchemaOutput() TableSchemaOutput {
	return i.ToTableSchemaOutputWithContext(context.Background())
}

func (i TableSchemaArgs) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaOutput)
}

func (i TableSchemaArgs) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return i.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (i TableSchemaArgs) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaOutput).ToTableSchemaPtrOutputWithContext(ctx)
}

// TableSchemaPtrInput is an input type that accepts TableSchemaArgs, TableSchemaPtr and TableSchemaPtrOutput values.
// You can construct a concrete instance of `TableSchemaPtrInput` via:
//
//          TableSchemaArgs{...}
//
//  or:
//
//          nil
type TableSchemaPtrInput interface {
	pulumi.Input

	ToTableSchemaPtrOutput() TableSchemaPtrOutput
	ToTableSchemaPtrOutputWithContext(context.Context) TableSchemaPtrOutput
}

type tableSchemaPtrType TableSchemaArgs

func TableSchemaPtr(v *TableSchemaArgs) TableSchemaPtrInput {
	return (*tableSchemaPtrType)(v)
}

func (*tableSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchema)(nil)).Elem()
}

func (i *tableSchemaPtrType) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return i.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (i *tableSchemaPtrType) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaPtrOutput)
}

type TableSchemaOutput struct{ *pulumi.OutputState }

func (TableSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (o TableSchemaOutput) ToTableSchemaOutput() TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return o.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (o TableSchemaOutput) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return o.ApplyT(func(v TableSchema) *TableSchema {
		return &v
	}).(TableSchemaPtrOutput)
}

// Describes the fields in a table.
func (o TableSchemaOutput) Fields() TableFieldSchemaArrayOutput {
	return o.ApplyT(func(v TableSchema) []TableFieldSchema { return v.Fields }).(TableFieldSchemaArrayOutput)
}

type TableSchemaPtrOutput struct{ *pulumi.OutputState }

func (TableSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchema)(nil)).Elem()
}

func (o TableSchemaPtrOutput) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return o
}

func (o TableSchemaPtrOutput) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return o
}

func (o TableSchemaPtrOutput) Elem() TableSchemaOutput {
	return o.ApplyT(func(v *TableSchema) TableSchema { return *v }).(TableSchemaOutput)
}

// Describes the fields in a table.
func (o TableSchemaPtrOutput) Fields() TableFieldSchemaArrayOutput {
	return o.ApplyT(func(v *TableSchema) []TableFieldSchema {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(TableFieldSchemaArrayOutput)
}

type TimePartitioning struct {
	// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
	ExpirationMs *string `pulumi:"expirationMs"`
	// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
	Field                  *string `pulumi:"field"`
	RequirePartitionFilter *bool   `pulumi:"requirePartitionFilter"`
	// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
	Type *string `pulumi:"type"`
}

// TimePartitioningInput is an input type that accepts TimePartitioningArgs and TimePartitioningOutput values.
// You can construct a concrete instance of `TimePartitioningInput` via:
//
//          TimePartitioningArgs{...}
type TimePartitioningInput interface {
	pulumi.Input

	ToTimePartitioningOutput() TimePartitioningOutput
	ToTimePartitioningOutputWithContext(context.Context) TimePartitioningOutput
}

type TimePartitioningArgs struct {
	// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
	ExpirationMs pulumi.StringPtrInput `pulumi:"expirationMs"`
	// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
	Field                  pulumi.StringPtrInput `pulumi:"field"`
	RequirePartitionFilter pulumi.BoolPtrInput   `pulumi:"requirePartitionFilter"`
	// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TimePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioning)(nil)).Elem()
}

func (i TimePartitioningArgs) ToTimePartitioningOutput() TimePartitioningOutput {
	return i.ToTimePartitioningOutputWithContext(context.Background())
}

func (i TimePartitioningArgs) ToTimePartitioningOutputWithContext(ctx context.Context) TimePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningOutput)
}

func (i TimePartitioningArgs) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return i.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (i TimePartitioningArgs) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningOutput).ToTimePartitioningPtrOutputWithContext(ctx)
}

// TimePartitioningPtrInput is an input type that accepts TimePartitioningArgs, TimePartitioningPtr and TimePartitioningPtrOutput values.
// You can construct a concrete instance of `TimePartitioningPtrInput` via:
//
//          TimePartitioningArgs{...}
//
//  or:
//
//          nil
type TimePartitioningPtrInput interface {
	pulumi.Input

	ToTimePartitioningPtrOutput() TimePartitioningPtrOutput
	ToTimePartitioningPtrOutputWithContext(context.Context) TimePartitioningPtrOutput
}

type timePartitioningPtrType TimePartitioningArgs

func TimePartitioningPtr(v *TimePartitioningArgs) TimePartitioningPtrInput {
	return (*timePartitioningPtrType)(v)
}

func (*timePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimePartitioning)(nil)).Elem()
}

func (i *timePartitioningPtrType) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return i.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (i *timePartitioningPtrType) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningPtrOutput)
}

type TimePartitioningOutput struct{ *pulumi.OutputState }

func (TimePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioning)(nil)).Elem()
}

func (o TimePartitioningOutput) ToTimePartitioningOutput() TimePartitioningOutput {
	return o
}

func (o TimePartitioningOutput) ToTimePartitioningOutputWithContext(ctx context.Context) TimePartitioningOutput {
	return o
}

func (o TimePartitioningOutput) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return o.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (o TimePartitioningOutput) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *TimePartitioning {
		return &v
	}).(TimePartitioningPtrOutput)
}

// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
func (o TimePartitioningOutput) ExpirationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *string { return v.ExpirationMs }).(pulumi.StringPtrOutput)
}

// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
func (o TimePartitioningOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *string { return v.Field }).(pulumi.StringPtrOutput)
}

func (o TimePartitioningOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
func (o TimePartitioningOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TimePartitioningPtrOutput struct{ *pulumi.OutputState }

func (TimePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimePartitioning)(nil)).Elem()
}

func (o TimePartitioningPtrOutput) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return o
}

func (o TimePartitioningPtrOutput) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return o
}

func (o TimePartitioningPtrOutput) Elem() TimePartitioningOutput {
	return o.ApplyT(func(v *TimePartitioning) TimePartitioning { return *v }).(TimePartitioningOutput)
}

// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
func (o TimePartitioningPtrOutput) ExpirationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationMs
	}).(pulumi.StringPtrOutput)
}

// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
func (o TimePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

func (o TimePartitioningPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *bool {
		if v == nil {
			return nil
		}
		return v.RequirePartitionFilter
	}).(pulumi.BoolPtrOutput)
}

// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
func (o TimePartitioningPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type TransactionInfo struct {
	// [Output-only] // [Alpha] Id of the transaction.
	TransactionId *string `pulumi:"transactionId"`
}

// TransactionInfoInput is an input type that accepts TransactionInfoArgs and TransactionInfoOutput values.
// You can construct a concrete instance of `TransactionInfoInput` via:
//
//          TransactionInfoArgs{...}
type TransactionInfoInput interface {
	pulumi.Input

	ToTransactionInfoOutput() TransactionInfoOutput
	ToTransactionInfoOutputWithContext(context.Context) TransactionInfoOutput
}

type TransactionInfoArgs struct {
	// [Output-only] // [Alpha] Id of the transaction.
	TransactionId pulumi.StringPtrInput `pulumi:"transactionId"`
}

func (TransactionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransactionInfo)(nil)).Elem()
}

func (i TransactionInfoArgs) ToTransactionInfoOutput() TransactionInfoOutput {
	return i.ToTransactionInfoOutputWithContext(context.Background())
}

func (i TransactionInfoArgs) ToTransactionInfoOutputWithContext(ctx context.Context) TransactionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransactionInfoOutput)
}

func (i TransactionInfoArgs) ToTransactionInfoPtrOutput() TransactionInfoPtrOutput {
	return i.ToTransactionInfoPtrOutputWithContext(context.Background())
}

func (i TransactionInfoArgs) ToTransactionInfoPtrOutputWithContext(ctx context.Context) TransactionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransactionInfoOutput).ToTransactionInfoPtrOutputWithContext(ctx)
}

// TransactionInfoPtrInput is an input type that accepts TransactionInfoArgs, TransactionInfoPtr and TransactionInfoPtrOutput values.
// You can construct a concrete instance of `TransactionInfoPtrInput` via:
//
//          TransactionInfoArgs{...}
//
//  or:
//
//          nil
type TransactionInfoPtrInput interface {
	pulumi.Input

	ToTransactionInfoPtrOutput() TransactionInfoPtrOutput
	ToTransactionInfoPtrOutputWithContext(context.Context) TransactionInfoPtrOutput
}

type transactionInfoPtrType TransactionInfoArgs

func TransactionInfoPtr(v *TransactionInfoArgs) TransactionInfoPtrInput {
	return (*transactionInfoPtrType)(v)
}

func (*transactionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransactionInfo)(nil)).Elem()
}

func (i *transactionInfoPtrType) ToTransactionInfoPtrOutput() TransactionInfoPtrOutput {
	return i.ToTransactionInfoPtrOutputWithContext(context.Background())
}

func (i *transactionInfoPtrType) ToTransactionInfoPtrOutputWithContext(ctx context.Context) TransactionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransactionInfoPtrOutput)
}

type TransactionInfoOutput struct{ *pulumi.OutputState }

func (TransactionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransactionInfo)(nil)).Elem()
}

func (o TransactionInfoOutput) ToTransactionInfoOutput() TransactionInfoOutput {
	return o
}

func (o TransactionInfoOutput) ToTransactionInfoOutputWithContext(ctx context.Context) TransactionInfoOutput {
	return o
}

func (o TransactionInfoOutput) ToTransactionInfoPtrOutput() TransactionInfoPtrOutput {
	return o.ToTransactionInfoPtrOutputWithContext(context.Background())
}

func (o TransactionInfoOutput) ToTransactionInfoPtrOutputWithContext(ctx context.Context) TransactionInfoPtrOutput {
	return o.ApplyT(func(v TransactionInfo) *TransactionInfo {
		return &v
	}).(TransactionInfoPtrOutput)
}

// [Output-only] // [Alpha] Id of the transaction.
func (o TransactionInfoOutput) TransactionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransactionInfo) *string { return v.TransactionId }).(pulumi.StringPtrOutput)
}

type TransactionInfoPtrOutput struct{ *pulumi.OutputState }

func (TransactionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransactionInfo)(nil)).Elem()
}

func (o TransactionInfoPtrOutput) ToTransactionInfoPtrOutput() TransactionInfoPtrOutput {
	return o
}

func (o TransactionInfoPtrOutput) ToTransactionInfoPtrOutputWithContext(ctx context.Context) TransactionInfoPtrOutput {
	return o
}

func (o TransactionInfoPtrOutput) Elem() TransactionInfoOutput {
	return o.ApplyT(func(v *TransactionInfo) TransactionInfo { return *v }).(TransactionInfoOutput)
}

// [Output-only] // [Alpha] Id of the transaction.
func (o TransactionInfoPtrOutput) TransactionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransactionInfo) *string {
		if v == nil {
			return nil
		}
		return v.TransactionId
	}).(pulumi.StringPtrOutput)
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of Standard SQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResource struct {
	// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	InlineCode *string `pulumi:"inlineCode"`
	// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	ResourceUri *string `pulumi:"resourceUri"`
}

// UserDefinedFunctionResourceInput is an input type that accepts UserDefinedFunctionResourceArgs and UserDefinedFunctionResourceOutput values.
// You can construct a concrete instance of `UserDefinedFunctionResourceInput` via:
//
//          UserDefinedFunctionResourceArgs{...}
type UserDefinedFunctionResourceInput interface {
	pulumi.Input

	ToUserDefinedFunctionResourceOutput() UserDefinedFunctionResourceOutput
	ToUserDefinedFunctionResourceOutputWithContext(context.Context) UserDefinedFunctionResourceOutput
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of Standard SQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResourceArgs struct {
	// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	InlineCode pulumi.StringPtrInput `pulumi:"inlineCode"`
	// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
}

func (UserDefinedFunctionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResource)(nil)).Elem()
}

func (i UserDefinedFunctionResourceArgs) ToUserDefinedFunctionResourceOutput() UserDefinedFunctionResourceOutput {
	return i.ToUserDefinedFunctionResourceOutputWithContext(context.Background())
}

func (i UserDefinedFunctionResourceArgs) ToUserDefinedFunctionResourceOutputWithContext(ctx context.Context) UserDefinedFunctionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionResourceOutput)
}

// UserDefinedFunctionResourceArrayInput is an input type that accepts UserDefinedFunctionResourceArray and UserDefinedFunctionResourceArrayOutput values.
// You can construct a concrete instance of `UserDefinedFunctionResourceArrayInput` via:
//
//          UserDefinedFunctionResourceArray{ UserDefinedFunctionResourceArgs{...} }
type UserDefinedFunctionResourceArrayInput interface {
	pulumi.Input

	ToUserDefinedFunctionResourceArrayOutput() UserDefinedFunctionResourceArrayOutput
	ToUserDefinedFunctionResourceArrayOutputWithContext(context.Context) UserDefinedFunctionResourceArrayOutput
}

type UserDefinedFunctionResourceArray []UserDefinedFunctionResourceInput

func (UserDefinedFunctionResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDefinedFunctionResource)(nil)).Elem()
}

func (i UserDefinedFunctionResourceArray) ToUserDefinedFunctionResourceArrayOutput() UserDefinedFunctionResourceArrayOutput {
	return i.ToUserDefinedFunctionResourceArrayOutputWithContext(context.Background())
}

func (i UserDefinedFunctionResourceArray) ToUserDefinedFunctionResourceArrayOutputWithContext(ctx context.Context) UserDefinedFunctionResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionResourceArrayOutput)
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of Standard SQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResourceOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResource)(nil)).Elem()
}

func (o UserDefinedFunctionResourceOutput) ToUserDefinedFunctionResourceOutput() UserDefinedFunctionResourceOutput {
	return o
}

func (o UserDefinedFunctionResourceOutput) ToUserDefinedFunctionResourceOutputWithContext(ctx context.Context) UserDefinedFunctionResourceOutput {
	return o
}

// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
func (o UserDefinedFunctionResourceOutput) InlineCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserDefinedFunctionResource) *string { return v.InlineCode }).(pulumi.StringPtrOutput)
}

// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
func (o UserDefinedFunctionResourceOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserDefinedFunctionResource) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type UserDefinedFunctionResourceArrayOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDefinedFunctionResource)(nil)).Elem()
}

func (o UserDefinedFunctionResourceArrayOutput) ToUserDefinedFunctionResourceArrayOutput() UserDefinedFunctionResourceArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceArrayOutput) ToUserDefinedFunctionResourceArrayOutputWithContext(ctx context.Context) UserDefinedFunctionResourceArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceArrayOutput) Index(i pulumi.IntInput) UserDefinedFunctionResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDefinedFunctionResource {
		return vs[0].([]UserDefinedFunctionResource)[vs[1].(int)]
	}).(UserDefinedFunctionResourceOutput)
}

type ViewDefinition struct {
	// [Required] A query that BigQuery executes when the view is referenced.
	Query *string `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
	UseLegacySql *bool `pulumi:"useLegacySql"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []UserDefinedFunctionResource `pulumi:"userDefinedFunctionResources"`
}

// ViewDefinitionInput is an input type that accepts ViewDefinitionArgs and ViewDefinitionOutput values.
// You can construct a concrete instance of `ViewDefinitionInput` via:
//
//          ViewDefinitionArgs{...}
type ViewDefinitionInput interface {
	pulumi.Input

	ToViewDefinitionOutput() ViewDefinitionOutput
	ToViewDefinitionOutputWithContext(context.Context) ViewDefinitionOutput
}

type ViewDefinitionArgs struct {
	// [Required] A query that BigQuery executes when the view is referenced.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources UserDefinedFunctionResourceArrayInput `pulumi:"userDefinedFunctionResources"`
}

func (ViewDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewDefinition)(nil)).Elem()
}

func (i ViewDefinitionArgs) ToViewDefinitionOutput() ViewDefinitionOutput {
	return i.ToViewDefinitionOutputWithContext(context.Background())
}

func (i ViewDefinitionArgs) ToViewDefinitionOutputWithContext(ctx context.Context) ViewDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewDefinitionOutput)
}

func (i ViewDefinitionArgs) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return i.ToViewDefinitionPtrOutputWithContext(context.Background())
}

func (i ViewDefinitionArgs) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewDefinitionOutput).ToViewDefinitionPtrOutputWithContext(ctx)
}

// ViewDefinitionPtrInput is an input type that accepts ViewDefinitionArgs, ViewDefinitionPtr and ViewDefinitionPtrOutput values.
// You can construct a concrete instance of `ViewDefinitionPtrInput` via:
//
//          ViewDefinitionArgs{...}
//
//  or:
//
//          nil
type ViewDefinitionPtrInput interface {
	pulumi.Input

	ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput
	ToViewDefinitionPtrOutputWithContext(context.Context) ViewDefinitionPtrOutput
}

type viewDefinitionPtrType ViewDefinitionArgs

func ViewDefinitionPtr(v *ViewDefinitionArgs) ViewDefinitionPtrInput {
	return (*viewDefinitionPtrType)(v)
}

func (*viewDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewDefinition)(nil)).Elem()
}

func (i *viewDefinitionPtrType) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return i.ToViewDefinitionPtrOutputWithContext(context.Background())
}

func (i *viewDefinitionPtrType) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewDefinitionPtrOutput)
}

type ViewDefinitionOutput struct{ *pulumi.OutputState }

func (ViewDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewDefinition)(nil)).Elem()
}

func (o ViewDefinitionOutput) ToViewDefinitionOutput() ViewDefinitionOutput {
	return o
}

func (o ViewDefinitionOutput) ToViewDefinitionOutputWithContext(ctx context.Context) ViewDefinitionOutput {
	return o
}

func (o ViewDefinitionOutput) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return o.ToViewDefinitionPtrOutputWithContext(context.Background())
}

func (o ViewDefinitionOutput) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return o.ApplyT(func(v ViewDefinition) *ViewDefinition {
		return &v
	}).(ViewDefinitionPtrOutput)
}

// [Required] A query that BigQuery executes when the view is referenced.
func (o ViewDefinitionOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ViewDefinition) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
func (o ViewDefinitionOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ViewDefinition) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o ViewDefinitionOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v ViewDefinition) []UserDefinedFunctionResource { return v.UserDefinedFunctionResources }).(UserDefinedFunctionResourceArrayOutput)
}

type ViewDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ViewDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewDefinition)(nil)).Elem()
}

func (o ViewDefinitionPtrOutput) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return o
}

func (o ViewDefinitionPtrOutput) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return o
}

func (o ViewDefinitionPtrOutput) Elem() ViewDefinitionOutput {
	return o.ApplyT(func(v *ViewDefinition) ViewDefinition { return *v }).(ViewDefinitionOutput)
}

// [Required] A query that BigQuery executes when the view is referenced.
func (o ViewDefinitionPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
func (o ViewDefinitionPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ViewDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.UseLegacySql
	}).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o ViewDefinitionPtrOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v *ViewDefinition) []UserDefinedFunctionResource {
		if v == nil {
			return nil
		}
		return v.UserDefinedFunctionResources
	}).(UserDefinedFunctionResourceArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ArgumentOutput{})
	pulumi.RegisterOutputType(ArgumentArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(BigQueryModelTrainingOutput{})
	pulumi.RegisterOutputType(BigQueryModelTrainingPtrOutput{})
	pulumi.RegisterOutputType(BigtableColumnOutput{})
	pulumi.RegisterOutputType(BigtableColumnArrayOutput{})
	pulumi.RegisterOutputType(BigtableColumnFamilyOutput{})
	pulumi.RegisterOutputType(BigtableColumnFamilyArrayOutput{})
	pulumi.RegisterOutputType(BigtableOptionsOutput{})
	pulumi.RegisterOutputType(BigtableOptionsPtrOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BqmlIterationResultOutput{})
	pulumi.RegisterOutputType(BqmlIterationResultArrayOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunArrayOutput{})
	pulumi.RegisterOutputType(ClusteringOutput{})
	pulumi.RegisterOutputType(ClusteringPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPropertyOutput{})
	pulumi.RegisterOutputType(ConnectionPropertyArrayOutput{})
	pulumi.RegisterOutputType(CsvOptionsOutput{})
	pulumi.RegisterOutputType(CsvOptionsPtrOutput{})
	pulumi.RegisterOutputType(DatasetReferenceOutput{})
	pulumi.RegisterOutputType(DatasetReferencePtrOutput{})
	pulumi.RegisterOutputType(DestinationTablePropertiesOutput{})
	pulumi.RegisterOutputType(DestinationTablePropertiesPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ErrorProtoOutput{})
	pulumi.RegisterOutputType(ErrorProtoPtrOutput{})
	pulumi.RegisterOutputType(ErrorProtoArrayOutput{})
	pulumi.RegisterOutputType(ExplainQueryStageOutput{})
	pulumi.RegisterOutputType(ExplainQueryStageArrayOutput{})
	pulumi.RegisterOutputType(ExplainQueryStepOutput{})
	pulumi.RegisterOutputType(ExplainQueryStepArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExternalDataConfigurationOutput{})
	pulumi.RegisterOutputType(ExternalDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(GoogleSheetsOptionsOutput{})
	pulumi.RegisterOutputType(GoogleSheetsOptionsPtrOutput{})
	pulumi.RegisterOutputType(HivePartitioningOptionsOutput{})
	pulumi.RegisterOutputType(HivePartitioningOptionsPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationOutput{})
	pulumi.RegisterOutputType(JobConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationExtractOutput{})
	pulumi.RegisterOutputType(JobConfigurationExtractPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationLoadOutput{})
	pulumi.RegisterOutputType(JobConfigurationLoadPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationQueryOutput{})
	pulumi.RegisterOutputType(JobConfigurationQueryPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationTableCopyOutput{})
	pulumi.RegisterOutputType(JobConfigurationTableCopyPtrOutput{})
	pulumi.RegisterOutputType(JobReferenceOutput{})
	pulumi.RegisterOutputType(JobReferencePtrOutput{})
	pulumi.RegisterOutputType(JobStatisticsOutput{})
	pulumi.RegisterOutputType(JobStatisticsPtrOutput{})
	pulumi.RegisterOutputType(JobStatistics2Output{})
	pulumi.RegisterOutputType(JobStatistics2PtrOutput{})
	pulumi.RegisterOutputType(JobStatistics3Output{})
	pulumi.RegisterOutputType(JobStatistics3PtrOutput{})
	pulumi.RegisterOutputType(JobStatistics4Output{})
	pulumi.RegisterOutputType(JobStatistics4PtrOutput{})
	pulumi.RegisterOutputType(JobStatusOutput{})
	pulumi.RegisterOutputType(JobStatusPtrOutput{})
	pulumi.RegisterOutputType(MaterializedViewDefinitionOutput{})
	pulumi.RegisterOutputType(MaterializedViewDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ModelDefinitionOutput{})
	pulumi.RegisterOutputType(ModelDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ModelReferenceOutput{})
	pulumi.RegisterOutputType(ModelReferencePtrOutput{})
	pulumi.RegisterOutputType(ParquetOptionsOutput{})
	pulumi.RegisterOutputType(ParquetOptionsPtrOutput{})
	pulumi.RegisterOutputType(PolicyTypeOutput{})
	pulumi.RegisterOutputType(PolicyTypePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterOutput{})
	pulumi.RegisterOutputType(QueryParameterArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeOutput{})
	pulumi.RegisterOutputType(QueryParameterTypePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterValueOutput{})
	pulumi.RegisterOutputType(QueryParameterValuePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterValueArrayOutput{})
	pulumi.RegisterOutputType(QueryTimelineSampleOutput{})
	pulumi.RegisterOutputType(QueryTimelineSampleArrayOutput{})
	pulumi.RegisterOutputType(RangePartitioningOutput{})
	pulumi.RegisterOutputType(RangePartitioningPtrOutput{})
	pulumi.RegisterOutputType(RoutineReferenceOutput{})
	pulumi.RegisterOutputType(RoutineReferencePtrOutput{})
	pulumi.RegisterOutputType(RoutineReferenceArrayOutput{})
	pulumi.RegisterOutputType(RowAccessPolicyReferenceOutput{})
	pulumi.RegisterOutputType(RowAccessPolicyReferencePtrOutput{})
	pulumi.RegisterOutputType(RowLevelSecurityStatisticsOutput{})
	pulumi.RegisterOutputType(RowLevelSecurityStatisticsPtrOutput{})
	pulumi.RegisterOutputType(ScriptStackFrameOutput{})
	pulumi.RegisterOutputType(ScriptStackFrameArrayOutput{})
	pulumi.RegisterOutputType(ScriptStatisticsOutput{})
	pulumi.RegisterOutputType(ScriptStatisticsPtrOutput{})
	pulumi.RegisterOutputType(SessionInfoOutput{})
	pulumi.RegisterOutputType(SessionInfoPtrOutput{})
	pulumi.RegisterOutputType(SnapshotDefinitionOutput{})
	pulumi.RegisterOutputType(SnapshotDefinitionPtrOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypeOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlFieldOutput{})
	pulumi.RegisterOutputType(StandardSqlFieldArrayOutput{})
	pulumi.RegisterOutputType(StandardSqlStructTypeOutput{})
	pulumi.RegisterOutputType(StandardSqlStructTypePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlTableTypeOutput{})
	pulumi.RegisterOutputType(StandardSqlTableTypePtrOutput{})
	pulumi.RegisterOutputType(StreamingbufferOutput{})
	pulumi.RegisterOutputType(StreamingbufferPtrOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaArrayOutput{})
	pulumi.RegisterOutputType(TableReferenceOutput{})
	pulumi.RegisterOutputType(TableReferencePtrOutput{})
	pulumi.RegisterOutputType(TableReferenceArrayOutput{})
	pulumi.RegisterOutputType(TableSchemaOutput{})
	pulumi.RegisterOutputType(TableSchemaPtrOutput{})
	pulumi.RegisterOutputType(TimePartitioningOutput{})
	pulumi.RegisterOutputType(TimePartitioningPtrOutput{})
	pulumi.RegisterOutputType(TransactionInfoOutput{})
	pulumi.RegisterOutputType(TransactionInfoPtrOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceArrayOutput{})
	pulumi.RegisterOutputType(ViewDefinitionOutput{})
	pulumi.RegisterOutputType(ViewDefinitionPtrOutput{})
}
